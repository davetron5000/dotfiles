" To use this, you must define the global variable "g:project_root" to be the
" location of the root of your project.  This assumes that project is Java
" and that it contains a directory called "src" beneath it. It also assumes
" that the ant build file is in build/build.xml.  This also assumes you are
" using a custom java.vim in your ~/.vim/ftplugin directory that contains the
" following code:
"
" set efm=%A\ %#[javac]\ %f:%l:\ %m,%-Z\ %#[javac]\ %p^,%-C%.%#
" if exists("g:ant_target")
"     if exists("g:ant_buildfile")
"         let &makeprg="ant -buildfile " . g:ant_buildfile . " " . g:ant_target
"     else
"         let &makeprg="ant -find build.xml " . g:ant_target
"     endif
" else
"     let &makeprg="ant -find build.xml"
" endif
"
" 

" Needed on some linux distros.
" " see http://www.adamlowe.me/2009/12/vim-destroys-all-other-rails-editors.html
filetype off 
"call pathogen#helptags()
"call pathogen#runtime_append_all_bundles()

" Config for XML editing plugin
let xml_use_xhtml = 1
let xml_no_auto_nesting = 0
let xml_tag_completion_map = ">"

" Misc stuff
hi Normal guibg=black
hi Normal guifg=white
filetype plugin on
filetype indent on
syn on


"""" Configuration
" Check for local .vimrc
set exrc
set noequalalways
set formatoptions-=t formatoptions+=croqn2
set ai
set expandtab
set ts=2
set sw=2
set cindent
set wm=1
set vb t_vb=
set nohls
" Does vim help for any "K", as opposed to going to man page
set keywordprg=
set wildmenu
set undofile
set undodir=~/.vim/undo
augroup vimrc
  autocmd BufWritePre /tmp/* setlocal noundofile
augroup END

if ! exists("g:project_root")
  let g:project_root=getcwd()
endif

" If we are in a 'project', set up a few convieniences, such as searching
" and CtrlP to know about the current project dir
if exists("g:project_root")
  exec "map g :grep  " . g:project_root . "<Home><Right><Right><Right><Right><Right><Right>"
  exec "map  :grep <cword> " . g:project_root
  exec "map G :grep <cword> " . g:project_root . ""
  exec "map o :CtrlP " . g:project_root . ""
  exec "map  :CtrlP " . g:project_root . ""
  exec "set path+=" . fnameescape(g:project_root) . "/**"
  exec "set wildignore=*/spec/vcr-cassettes/**,*/db/tmp/**,*/node_modules/**,*/coverage/**,*/vendor/**"

  " If we are in Rails-land, set up some mappings to run tests
  if exists(":Rake")
    map m :Rake
    map  :.Rake
  endif

  " If we find a spellfile, set up for 'writing' mode
  if filereadable("spellfile.en.utf-8.add")
    set spell spelllang=en_us
    syn spell toplevel
    exec "set spf=" . g:project_root . "/spellfile.en.utf-8.add"
    ab taht that
    ab builting built-in
    ab builtin built-in
    ab endpoing endpoint
  endif
else
  exec "map g :Ag  "
  exec "map  :Ag <cword> "
  exec "map G :Ag <cword> "
endif

" cd to directory of current file
map c :cd %:p:h
" open buffer list
map b \bs
" next error
map   :cnext
" fold this line
map f !!fold -w77 -s 
" ^O tries to open the thing under the cursor using gf
map  sgf
" Remove dot from valid file name chars so gf works with method calls on classes
set isfname-=.
" Avoid annoying ^Z minimizing to nowhere
map  
" Ruby specific, but handy - depends on rails.vim existing.
map m :Rake
map  :.Rake

map : :Tabularize /: /r0c0l0
map = :Tabularize /=
map > :Tabularize /=>

nnoremap <silent> <Leader>t :CtrlP<CR>
nnoremap <silent> <Leader>b :CtrlPBuffer<CR>

" Stuff I'm not sure about
"map   :%s/<lf>1G

"au BufRead,BufNewFile *.java set sw=4
"au BufRead,BufNewFile *.java set ts=4
"au BufEnter *.scss set nocindent
"au BufLeave *.scss set cindent
au BufEnter *.pml runtime syntax/xml.vim
au BufEnter *.pml runtime indent/xml.vim
"let g:solarized_termcolors=256
"colorscheme solarized
colorscheme jellybeans
set background=dark
set backspace=indent,eol,start
let g:bufExplorerFindActive=0 " Do not go to active window when opening the bufexplorer.

"let g:vimclojure#ParenRainbow=10 
"let g:vimclojure#HighlightBuiltins=1
autocmd BufNewFile,BufRead *.asciidoc set ft=asciidoc
autocmd BufNewFile,BufRead Procfile set ft=ruby

let g:syntastic_check_on_open=1
let g:syntastic_quiet_messages = {'level': 'warnings'}
let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_ignore_files=['Procfile','.css','.css.scss','.py']
let g:syntastic_haml_haml_exe = "LC_ALL=en_US.UTF-8 haml" " computering

autocmd GUIEnter * let g:syntastic_error_symbol='âœ–'

highlight ExtraWhitespace ctermbg=red guibg=red
autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/

" To use this, you may define the global variable "g:project_root" to be the
" location of the root of your project. 
set nocompatible


" Needed on some linux distros.
" " see http://www.adamlowe.me/2009/12/vim-destroys-all-other-rails-editors.html
filetype off

" Config for XML editing plugin
let xml_use_xhtml = 1
let xml_no_auto_nesting = 0
let xml_tag_completion_map = ">"

" Misc stuff
hi Normal guibg=black
hi Normal guifg=white
filetype plugin on
filetype indent on
syn on


"""" Configuration
" Check for local .vimrc
set exrc
set noequalalways
set formatoptions-=t formatoptions+=croqn2
set noincsearch
set ai
set expandtab
set ts=2
set sw=2
set cindent
set wm=1
set vb t_vb=
set noincsearch
set nohlsearch
if has("nvim")
  set inccommand=
  set nohidden
endif

" Does vim help for any "K", as opposed to going to man page
set keywordprg=
set wildmenu
set undofile
set undodir=~/.vim/undo
augroup vimrc
  autocmd BufWritePre /tmp/* setlocal noundofile
augroup END

if ! exists("g:project_root")
  let g:project_root=getcwd()
endif

" If we are in a 'project', set up a few convieniences, such as searching
" and CtrlP to know about the current project dir
if exists("g:project_root")
  exec "map g :grep -R " . g:project_root . "<Home><Right><Right><Right><Right><Right><Right>"
  exec "map  :grep -R <cword> " . g:project_root
  exec "map G :grep -R <cword> " . g:project_root . ""
  exec "map o :CtrlP " . g:project_root . ""
  exec "map  :CtrlP " . g:project_root . ""
  exec "set path+=" . fnameescape(g:project_root) . "/**"
  exec "set wildignore=*/spec/vcr-cassettes/**,*/db/tmp/**,*/tmp/**,*/node_modules/**,*/coverage/**,*/vendor/**"

  " If we are in Rails-land, set up some mappings to run tests
  if exists(":Rake")
    map m :Rake
    map  :.Rake
  endif

  " If we find a spellfile, set up for 'writing' mode
  if filereadable("spellfile.en.utf-8.add")
    set spell spelllang=en_us
    syn spell toplevel
    ab taht that
    ab builting built-in
    ab builtin built-in
    ab endpoing endpoint
    ab tradeoff trade-off
    ab tradeoffs trade-offs
    set complete+=kspell
    exec "set spf=" . g:project_root . "/spellfile.en.utf-8.add"
  else
    " Remove dot from valid file name chars so gf works with method calls on classes
    " For whatever reason this breaks spellfile loading in MacVim
    set isfname-=.
  endif
else
  exec "map g :grep -R  "
  exec "map  :grep -R <cword> "
  exec "map G :grep -R <cword> "
  " Remove dot from valid file name chars so gf works with method calls on classes
  " For whatever reason this breaks spellfile loading in MacVim
  set isfname-=.
endif

" cd to directory of current file
map c :cd %:p:h
" open buffer list
map b \bs
" next error
map   :cnext
" fold this line
map f !!fold -w77 -s 
" ^O tries to open the thing under the cursor using gf
map  sgf
" Avoid annoying ^Z minimizing to nowhere
map  
" Ruby specific, but handy - depends on rails.vim existing.
map m :Rake
map  :.Rake

map : :Tabularize /: /r0c0l0
map = :Tabularize /=
map > :Tabularize /=>

" Opens a scratch buffer, per https://vi.stackexchange.com/a/21390/55771
function! Scratch()
    split
    noswapfile hide enew
    setlocal buftype=nofile
    setlocal bufhidden=hide

    " If uncommented, would not show this buffer in the buffer list
    "setlocal nobuflisted

    " If we are in a project, set the current directory
    " for this buffer to the project root
    if  exists("g:project_root")
      execute 'lcd ' g:project_root
    endif

    file scratch
endfunction
map <Leader>ss :call Scratch()<CR>


nnoremap <silent> <Leader>t :CtrlP<CR>
nnoremap <silent> <Leader>b :CtrlPBuffer<CR>

au BufEnter *.pml runtime syntax/xml.vim
au BufEnter *.pml runtime indent/xml.vim
au BufEnter *.yml set cuc
au BufLeave *.yml set nocuc
au BufEnter *.html.erb set cuc
au BufLeave *.html.erb set nocuc
au BufEnter *.html set cuc
au BufLeave *.html set nocuc

set backspace=indent,eol,start
set backspace=indent,eol,start

autocmd BufNewFile,BufRead *.asciidoc set ft=asciidoc
autocmd BufNewFile,BufRead Procfile set ft=ruby

let g:ruby_indent_access_modifier_style = 'outdent'
let g:ruby_indent_block_style = 'do'
let ruby_spellcheck_strings = 1

let g:terraform_fmt_on_save=1
let g:terraform_align=1

let g:netrw_keepdir=0

let g:copilot_filetypes = { 'pml': v:false, 'markdown': v:false, 'txt': v:false, 'terraform': v:false, 'json': v:false }

if exists("g:neovide")
  noremap <M-}> :tabnext
  noremap <M-{> :tabprev
  noremap <M-n> :tabnew
  noremap <M-t> :tabnew

  " In edit mode, pastes from the system buffer
  imap <M-v> +
  map <M-c> "+y


  let g:neovide_scroll_animation_length = 0
  let g:neovide_position_animation_length = 0
  let g:neovide_cursor_animation_length = 0
  let g:neovide_animation_trail_size = 0
  let g:neovide_cursor_animate_command_line = v:false
  let g:neovide_cursor_vfx_mode = ""
  let g:neovide_opacity = 0.95
  let g:neovide_normal_opacity = 0.95

  set guifont=Monaspace\ Krypton:h14
  colorscheme rose-pine-moon
  set background=dark
else
  "colorscheme rose-pine-dawn
  "set background=light
endif

let g:ctrlp_show_hidden=1

autocmd BufNewFile,BufRead *.rb map K :Dash
autocmd BufNewFile,BufRead Rakefile map K :Dash
autocmd BufNewFile,BufRead *.ru map K :Dash
autocmd BufNewFile,BufRead *.js map K :Dash
autocmd BufNewFile,BufRead *.jsx map K :Dash
autocmd BufNewFile,BufRead *.html map K :Dash
autocmd BufNewFile,BufRead *.erb map K :Dash
autocmd BufNewFile,BufRead *.css map K :Dash
autocmd BufNewFile,BufRead *.scss map K :Dash

highlight ExtraWhitespace ctermbg=red guibg=red
autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/
packadd! matchit


if exists("g:gui_vimr")
  if g:gui_vimr == 1
    "set gfn=Source\ Code\ Pro:h18
    set gfn="Monaspace_Krytpon_Var_Regular":h18
    noremap <S-D-}> :tabnext
    noremap <S-D-{> :tabprevious
  endif
endif
lua require('config')
colorscheme tokyonight-day
set background=light

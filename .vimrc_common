" To use this, you must define the global variable "g:project_root" to be the
" location of the root of your project.  This assumes that project is Java
" and that it contains a directory called "src" beneath it. It also assumes
" that the ant build file is in build/build.xml.  This also assumes you are
" using a custom java.vim in your ~/.vim/ftplugin directory that contains the
" following code:
"
" set efm=%A\ %#[javac]\ %f:%l:\ %m,%-Z\ %#[javac]\ %p^,%-C%.%#
" if exists("g:ant_target")
"     if exists("g:ant_buildfile")
"         let &makeprg="ant -buildfile " . g:ant_buildfile . " " . g:ant_target
"     else
"         let &makeprg="ant -find build.xml " . g:ant_target
"     endif
" else
"     let &makeprg="ant -find build.xml"
" endif
"
" 

" Needed on some linux distros.
" " see http://www.adamlowe.me/2009/12/vim-destroys-all-other-rails-editors.html
filetype off 
call pathogen#helptags()
call pathogen#runtime_append_all_bundles()
" Determine the project_root
if exists("g:pose")
    let g:project_root="~/Projects/pose"
    exec "set path=" . g:project_root . "/core/src/**," . g:project_root . "/report/src/**," . g:project_root . "/report/bin/**," . g:project_root . "/report/db/**," . g:project_root . "/content/**"
    set grepprg=~/bin/pose_grep.sh\ $*
else
    if !exists("g:project_root")
        let g:project_root="~/Projects"
    endif
    exec "set path=" . g:project_root. "/**"
    set grepprg=grep\ -rn\ $*
endif
" Specify the location of the ant buildfile
"if !exists("g:build_file")
"    let g:ant_buildfile=g:project_root . "/build.xml"
"else
"    let g:ant_buildfile=g:project_root . "/" . g:build_file
"endif

" This function creates an IDE that contains a left-hand vertical window with
" the file explorer in it, initially opened to your project's source
" directory.  It also contains a bottom pane that is the "quickfix" window
" which will contain error messages and grep results.
function! JavaIDE()
    copen
    wincmd k
    :match ErrorMsg '\%>128v.\+'
    exec "cd " . g:project_root
    exec "e " . g:project_root
endfunction


" Config for XML editing plugin
let xml_use_xhtml = 1
let xml_no_auto_nesting = 0
let xml_tag_completion_map = ">"

"yypdwwi/[ ;]D<<yypigetl~kkyyjpJ^ipublic $a() { return this.kyyjpkJdw$a; }kyyjpisetl~^ipublic void $a(kkk2yyjjjpkJJ$a ) { this.kkyyjjppkkJdw$a = J$a; }kkkdddd

" Misc stuff
hi Normal guibg=black
hi Normal guifg=white
filetype plugin on
filetype indent on
syn on


"""" Configuration
" Check for local .vimrc
set exrc
set noequalalways
set whichwrap+=hl
set formatoptions-=t formatoptions+=croqn2
set ai
set expandtab
set ts=4
set sw=4
set cindent
set wm=1
set vb t_vb=
set nohls
" Does vim help for any "K", as opposed to going to man page
set keywordprg=
" Based on http://macvim.muskokamug.org/OSX/index.php#FAQ
"set nomacatsui anti enc=utf-8 termencoding=macroman gfn=Monaco:h13


"""" Mappings
exec "map g :grep  " . g:project_root . "<Home><Right><Right><Right><Right><Right>"
exec "map  :grep <cword> " . g:project_root
exec "map G :grep <cword> " . g:project_root . ""

" cd to directory of current file
map c :cd %:p:h
" open buffer list
map b n\be
" build
map m :make test-compile
" run unit tests
map t :make test
" next error
map   :cnext
" fold this line
map f !!fold -w77 -s 
" Avoid annoying ^Z minimizing to nowhere
map  
" open the IDE
map   :call JavaIDE()
" move to a line like 'private String itsBlah;' and this will create
" getters/setters for you
"map j yypcwpublic/itsxxxiget$i()lxkyyjpdwdwireturn ^i{ $a }kJkyyjpcwpublicwivoid setwwikddpkxxxkJx$xa(Jx$ai) { kkyyjjpdwdw$i = i$a }kJoj
map j :InsertBothGetterSetter
" Open file implementing class under cursor in new pane
map  s:find <cword>.java
" Create canoncial equals method for base classes
map eb opublic boolean equals(Object o){}koif (o == this)return true;if (o == null)return false;if (!o.getClass().getName().equals(getClass().getName()))return false;// actual comparison here 
" Create canoncial equals method for derived classes
map ed opublic boolean equals(Object o){}koif (o == this)return true;if (super.equals(o))%li!oreturn false;// test derived class properties
" Put braces around one line
map b O{jo}k
" Convert an exception to a catch block
map x ^icatch (lywea pb~$a){}ko

" Stuff I'm not sure about
"map   :%s/<lf>1G

" Helpful abbreviations
:ab TRY try {}catch (SomeException e) {}klllllll
:ab ITER for (Iterator i = list.iterator(); i.hasNext(); ){}kkllllllllllllllllll
:ab JITER for (Iterator j = list.iterator(); j.hasNext(); ){}kkllllllllllllllllll
:ab FOR for (Object o: list) {}k^lllll
:ab OLDFOR for (int i=0;i<list.length; i++) {}k^lllll
:ab LOGGER itsLogger = Logger.getLogger(getClass().getName());
:ab LOG4J import org.apache.log4j.*;

" Abs for LaTeX
:ab ITEMIZE \begin{itemize} %(\end{itemize} %)O
:ab ENUMERATE \begin{enumerate} %(\end{enumerate} %)O
:ab DESCRIPTION \begin{description} %(\item{\textbf{}}\end{description} %)O

au BufRead,BufNewFile *.scala set sw=2
au BufRead,BufNewFile *.scala set ts=2
au BufEnter *.scss set nocindent
au BufLeave *.scss set cindent
au BufEnter *.pml runtime syntax/xml.vim
au BufEnter *.pml runtime indent/xml.vim
let g:solarized_termcolors=256
colorscheme solarized
set background=dark

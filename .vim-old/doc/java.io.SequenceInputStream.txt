*java.io.SequenceInputStream* *SequenceInputStream* A SequenceInputStream represents
 the logical concatenation of other input
 streams.

public class SequenceInputStream
  extends    |java.io.InputStream|

|java.io.SequenceInputStream_Description|
|java.io.SequenceInputStream_Fields|
|java.io.SequenceInputStream_Constructors|
|java.io.SequenceInputStream_Methods|

====================================================================================================================================================================================

*java.io.SequenceInputStream_Constructors*
|java.io.SequenceInputStream(Enumeration<?extendsInputStream>)|Initializes a newly created SequenceInputStream  by remembering the argument, which must  be an Enumeration  that pr
|java.io.SequenceInputStream(InputStream,InputStream)|Initializes a newly  created SequenceInputStream  by remembering the two arguments, which  will be read in order, first s1  a

*java.io.SequenceInputStream_Methods*
|java.io.SequenceInputStream.available()|Returns the number of bytes available on the current stream.
|java.io.SequenceInputStream.close()|Closes this input stream and releases any system resources  associated with the stream.
|java.io.SequenceInputStream.read()|Reads the next byte of data from this input stream.
|java.io.SequenceInputStream.read(byte[],int,int)|Reads up to len bytes of data from this input stream  into an array of bytes.

*java.io.SequenceInputStream_Description*

A SequenceInputStream represents the logical concatenation of other input streams. It starts out with an ordered collection of input streams and reads from the first one until end 
of file is reached, whereupon it reads from the second one, and so on, until end of file is reached on the last of the contained input streams. 



*java.io.SequenceInputStream(Enumeration<?extendsInputStream>)*

public SequenceInputStream(java.util.Enumeration<? extends java.io.InputStream> e)

Initializes a newly created SequenceInputStream by remembering the argument, which must be an Enumeration that produces objects whose run-time type is InputStream. The input 
streams that are produced by the enumeration will be read, in order, to provide the bytes to be read from this SequenceInputStream. After each input stream from the enumeration is 
exhausted, it is closed by calling its close method. 

    e - an enumeration of input streams. 

*java.io.SequenceInputStream(InputStream,InputStream)*

public SequenceInputStream(
  java.io.InputStream s1,
  java.io.InputStream s2)

Initializes a newly created SequenceInputStream by remembering the two arguments, which will be read in order, first s1 and then s2, to provide the bytes to be read from this 
SequenceInputStream. 

    s1 - the first input stream to read. 
    s2 - the second input stream to read. 

*java.io.SequenceInputStream.available()*

public int available()
  throws |java.io.IOException|
         
Returns the number of bytes available on the current stream. 



*java.io.SequenceInputStream.close()*

public void close()
  throws |java.io.IOException|
         
Closes this input stream and releases any system resources associated with the stream. A closed SequenceInputStream cannot perform input operations and cannot be reopened. 

If this stream was created from an enumeration, all remaining elements are requested from the enumeration and closed before the close method returns. of InputStream . 



*java.io.SequenceInputStream.read()*

public int read()
  throws |java.io.IOException|
         
Reads the next byte of data from this input stream. The byte is returned as an int in the range 0 to 255. If no byte is available because the end of the stream has been reached, 
the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown. 

This method tries to read one character from the current substream. If it reaches the end of the stream, it calls the close method of the current substream and begins reading from 
the next substream. 



    Returns: the next byte of data, or -1 if the end of the stream is reached. 

*java.io.SequenceInputStream.read(byte[],int,int)*

public int read(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Reads up to len bytes of data from this input stream into an array of bytes. This method blocks until at least 1 byte of input is available. If the first argument is null, up to 
len bytes are read and discarded. 

The read method of SequenceInputStream tries to read the data from the current substream. If it fails to read any characters because the substream has reached the end of the 
stream, it calls the close method of the current substream and begins reading from the next substream. 


    b - the buffer into which the data is read. 
    off - the start offset of the data. 
    len - the maximum number of bytes read. 

    Returns: int the number of bytes read. 



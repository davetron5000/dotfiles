*javax.swing.JProgressBar* *JProgressBar* A component that, by default, displays an integer value within a bounded 
 interval.

public class JProgressBar
  extends    |javax.swing.JComponent|
  implements |javax.swing.SwingConstants|
             |javax.accessibility.Accessible|

|javax.swing.JProgressBar_Description|
|javax.swing.JProgressBar_Fields|
|javax.swing.JProgressBar_Constructors|
|javax.swing.JProgressBar_Methods|

====================================================================================================================================================================================

*javax.swing.JProgressBar_Fields*
|javax.swing.event.ChangeEvent_javax.swing.JProgressBar.changeEvent|
|javax.swing.event.ChangeListener_javax.swing.JProgressBar.changeListener|
|javax.swing.BoundedRangeModel_javax.swing.JProgressBar.model|
|int_javax.swing.JProgressBar.orientation|
|boolean_javax.swing.JProgressBar.paintBorder|
|boolean_javax.swing.JProgressBar.paintString|
|java.lang.String_javax.swing.JProgressBar.progressString|

*javax.swing.JProgressBar_Constructors*
|javax.swing.JProgressBar()|Creates a horizontal progress bar  that displays a border but no progress string.
|javax.swing.JProgressBar(BoundedRangeModel)|Creates a horizontal progress bar   that uses the specified model  to hold the progress bar's data.
|javax.swing.JProgressBar(int)|Creates a progress bar with the specified orientation,  which can be   either JProgressBar.VERTICAL or   JProgressBar.HORIZONTAL.
|javax.swing.JProgressBar(int,int)|Creates a horizontal progress bar  with the specified minimum and maximum.
|javax.swing.JProgressBar(int,int,int)|Creates a progress bar using the specified orientation,  minimum, and maximum.

*javax.swing.JProgressBar_Methods*
|javax.swing.JProgressBar.addChangeListener(ChangeListener)|Adds the specified ChangeListener to the progress bar.
|javax.swing.JProgressBar.createChangeListener()|Subclasses that want to handle change events   from the model differently  can override this to return   an instance of a custom C
|javax.swing.JProgressBar.fireStateChanged()|Notifies all listeners that have registered interest in  ChangeEvents.
|javax.swing.JProgressBar.getAccessibleContext()|Gets the AccessibleContext associated with this   JProgressBar.
|javax.swing.JProgressBar.getChangeListeners()|Returns an array of all the ChangeListeners added  to this progress bar with addChangeListener.
|javax.swing.JProgressBar.getMaximum()|Returns the progress bar's maximum value,  which is stored in the progress bar's BoundedRangeModel.
|javax.swing.JProgressBar.getMinimum()|Returns the progress bar's minimum value,  which is stored in the progress bar's BoundedRangeModel.
|javax.swing.JProgressBar.getModel()|Returns the data model used by this progress bar.
|javax.swing.JProgressBar.getOrientation()|Returns JProgressBar.VERTICAL or   JProgressBar.HORIZONTAL, depending on the orientation  of the progress bar.
|javax.swing.JProgressBar.getPercentComplete()|Returns the percent complete for the progress bar.
|javax.swing.JProgressBar.getString()|Returns the current value of the progress string.
|javax.swing.JProgressBar.getUI()|Returns the look-and-feel object that renders this component.
|javax.swing.JProgressBar.getUIClassID()|Returns the name of the look-and-feel class that renders this component.
|javax.swing.JProgressBar.getValue()|Returns the progress bar's current value,  which is stored in the progress bar's BoundedRangeModel.
|javax.swing.JProgressBar.isBorderPainted()|Returns the borderPainted property.
|javax.swing.JProgressBar.isIndeterminate()|Returns the value of the indeterminate property.
|javax.swing.JProgressBar.isStringPainted()|Returns the value of the stringPainted property.
|javax.swing.JProgressBar.paintBorder(Graphics)|Paints the progress bar's border if the borderPainted  property is true.
|javax.swing.JProgressBar.paramString()|Returns a string representation of this JProgressBar.
|javax.swing.JProgressBar.removeChangeListener(ChangeListener)|Removes a ChangeListener from the progress bar.
|javax.swing.JProgressBar.setBorderPainted(boolean)|Sets the borderPainted property, which is  true if the progress bar should paint its border.
|javax.swing.JProgressBar.setIndeterminate(boolean)|Sets the indeterminate property of the progress bar,  which determines whether the progress bar is in determinate  or indetermi
|javax.swing.JProgressBar.setMaximum(int)|Sets the progress bar's maximum value  (stored in the progress bar's data model) to n.
|javax.swing.JProgressBar.setMinimum(int)|Sets the progress bar's minimum value   (stored in the progress bar's data model) to n.
|javax.swing.JProgressBar.setModel(BoundedRangeModel)|Sets the data model used by the JProgressBar.
|javax.swing.JProgressBar.setOrientation(int)|Sets the progress bar's orientation to newOrientation,   which must be JProgressBar.VERTICAL or   JProgressBar.HORIZONTAL.
|javax.swing.JProgressBar.setString(String)|Sets the value of the progress string.
|javax.swing.JProgressBar.setStringPainted(boolean)|Sets the value of the stringPainted property,  which determines whether the progress bar  should render a progress string.
|javax.swing.JProgressBar.setUI(ProgressBarUI)|Sets the look-and-feel object that renders this component.
|javax.swing.JProgressBar.setValue(int)|Sets the progress bar's current value   (stored in the progress bar's data model) to n.
|javax.swing.JProgressBar.updateUI()|Resets the UI property to a value from the current look and feel.

*javax.swing.JProgressBar_Description*

A component that, by default, displays an integer value within a bounded interval. A progress bar typically communicates the progress of some work by displaying its percentage of 
completion and possibly a textual display of this percentage. 



To indicate that a task of unknown length is executing, you can put a progress bar into indeterminate mode. While the bar is in indeterminate mode, it animates constantly to show 
that work is occurring. As soon as you can determine the task's length and amount of progress, you should update the progress bar's value and switch it back to determinate mode. 



Here is an example of creating a progress bar, where task is an object that returns information about the progress of some work: 

progressBar = new JProgressBar(0, task.getLengthOfTask()); progressBar.setValue(0); progressBar.setStringPainted(true); 

Here is an example of updating the value of the progress bar: 

progressBar.setValue(task.getCurrent()); 

Here is an example of putting a progress bar into indeterminate mode, and then switching back to determinate mode once the length of the task is known: 

progressBar = new JProgressBar(); ...//when the task of (initially) unknown length begins: progressBar.setIndeterminate(true); ...//do some work; get length of task... 
progressBar.setMaximum(newLength); progressBar.setValue(newValue); progressBar.setIndeterminate(false); 



For complete examples and further documentation see How to Monitor Progress, a section in The Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.event.ChangeEvent_javax.swing.JProgressBar.changeEvent*

Only one ChangeEvent is needed per instance since the event's only interesting property is the immutable source, which is the progress bar. 


*javax.swing.event.ChangeListener_javax.swing.JProgressBar.changeListener*

Listens for change events sent by the progress bar's model, redispatching them to change-event listeners registered upon this progress bar. 


*javax.swing.BoundedRangeModel_javax.swing.JProgressBar.model*

The object that holds the data for the progress bar. 


*int_javax.swing.JProgressBar.orientation*

Whether the progress bar is horizontal or vertical. The default is HORIZONTAL. 


*boolean_javax.swing.JProgressBar.paintBorder*

Whether to display a border around the progress bar. The default is true. 


*boolean_javax.swing.JProgressBar.paintString*

Whether to textually display a string on the progress bar. The default is false. Setting this to true causes a textual display of the progress to be rendered on the progress bar. 
If the progressString is null, the percentage of completion is displayed on the progress bar. Otherwise, the progressString is rendered on the progress bar. 


*java.lang.String_javax.swing.JProgressBar.progressString*

An optional string that can be displayed on the progress bar. The default is null. Setting this to a non-null value does not imply that the string will be displayed. 



*javax.swing.JProgressBar()*

public JProgressBar()

Creates a horizontal progress bar that displays a border but no progress string. The initial and minimum values are 0, and the maximum is 100. 


*javax.swing.JProgressBar(BoundedRangeModel)*

public JProgressBar(javax.swing.BoundedRangeModel newModel)

Creates a horizontal progress bar that uses the specified model to hold the progress bar's data. By default, a border is painted but a progress string is not. 

    newModel - the data model for the progress bar 

*javax.swing.JProgressBar(int)*

public JProgressBar(int orient)

Creates a progress bar with the specified orientation, which can be either JProgressBar.VERTICAL or JProgressBar.HORIZONTAL. By default, a border is painted but a progress string 
is not. The initial and minimum values are 0, and the maximum is 100. 

    orient - the desired orientation of the progress bar 

*javax.swing.JProgressBar(int,int)*

public JProgressBar(
  int min,
  int max)

Creates a horizontal progress bar with the specified minimum and maximum. Sets the initial value of the progress bar to the specified minimum. By default, a border is painted but 
a progress string is not. The BoundedRangeModel that holds the progress bar's data handles any issues that may arise from improperly setting the minimum, initial, and maximum 
values on the progress bar. 

    min - the minimum value of the progress bar 
    max - the maximum value of the progress bar 

*javax.swing.JProgressBar(int,int,int)*

public JProgressBar(
  int orient,
  int min,
  int max)

Creates a progress bar using the specified orientation, minimum, and maximum. By default, a border is painted but a progress string is not. Sets the initial value of the progress 
bar to the specified minimum. The BoundedRangeModel that holds the progress bar's data handles any issues that may arise from improperly setting the minimum, initial, and maximum 
values on the progress bar. 

    orient - the desired orientation of the progress bar 
    min - the minimum value of the progress bar 
    max - the maximum value of the progress bar 

*javax.swing.JProgressBar.addChangeListener(ChangeListener)*

public void addChangeListener(javax.swing.event.ChangeListener l)

Adds the specified ChangeListener to the progress bar. 


    l - the ChangeListener to add 

*javax.swing.JProgressBar.createChangeListener()*

protected |javax.swing.event.ChangeListener| createChangeListener()

Subclasses that want to handle change events from the model differently can override this to return an instance of a custom ChangeListener implementation. 



*javax.swing.JProgressBar.fireStateChanged()*

protected void fireStateChanged()

Notifies all listeners that have registered interest in ChangeEvents. The event instance is created if necessary. 



*javax.swing.JProgressBar.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JProgressBar. For progress bars, the AccessibleContext takes the form of an AccessibleJProgressBar. A new AccessibleJProgressBar 
instance is created if necessary. 



    Returns: an AccessibleJProgressBar that serves as the AccessibleContext of this JProgressBar 

*javax.swing.JProgressBar.getChangeListeners()*

public |javax.swing.event.ChangeListener|[] getChangeListeners()

Returns an array of all the ChangeListeners added to this progress bar with addChangeListener. 



    Returns: all of the ChangeListeners added or an empty array if no listeners have been added 

*javax.swing.JProgressBar.getMaximum()*

public int getMaximum()

Returns the progress bar's maximum value, which is stored in the progress bar's BoundedRangeModel. By default, the maximum value is 100. 



    Returns: the progress bar's maximum value 

*javax.swing.JProgressBar.getMinimum()*

public int getMinimum()

Returns the progress bar's minimum value, which is stored in the progress bar's BoundedRangeModel. By default, the minimum value is 0. 



    Returns: the progress bar's minimum value 

*javax.swing.JProgressBar.getModel()*

public |javax.swing.BoundedRangeModel| getModel()

Returns the data model used by this progress bar. 



    Returns: the BoundedRangeModel currently in use 

*javax.swing.JProgressBar.getOrientation()*

public int getOrientation()

Returns JProgressBar.VERTICAL or JProgressBar.HORIZONTAL, depending on the orientation of the progress bar. The default orientation is HORIZONTAL. 



    Returns: HORIZONTAL or VERTICAL 

*javax.swing.JProgressBar.getPercentComplete()*

public double getPercentComplete()

Returns the percent complete for the progress bar. Note that this number is between 0.0 and 1.0. 



    Returns: the percent complete for this progress bar 

*javax.swing.JProgressBar.getString()*

public |java.lang.String| getString()

Returns the current value of the progress string. If you are providing a custom progress string by overriding this method, make sure your implementation calls setString before 
calling super.getString. 



    Returns: the value of the percent string 

*javax.swing.JProgressBar.getUI()*

public |javax.swing.plaf.ProgressBarUI| getUI()

Returns the look-and-feel object that renders this component. 



    Returns: the ProgressBarUI object that renders this component 

*javax.swing.JProgressBar.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the name of the look-and-feel class that renders this component. 



    Returns: the string "ProgressBarUI" 

*javax.swing.JProgressBar.getValue()*

public int getValue()

Returns the progress bar's current value, which is stored in the progress bar's BoundedRangeModel. The value is always between the minimum and maximum values, inclusive. By 
default, the value is initialized to be equal to the minimum value. 



    Returns: the current value of the progress bar 

*javax.swing.JProgressBar.isBorderPainted()*

public boolean isBorderPainted()

Returns the borderPainted property. 



    Returns: the value of the borderPainted property 

*javax.swing.JProgressBar.isIndeterminate()*

public boolean isIndeterminate()

Returns the value of the indeterminate property. 



    Returns: the value of the indeterminate property 

*javax.swing.JProgressBar.isStringPainted()*

public boolean isStringPainted()

Returns the value of the stringPainted property. 



    Returns: the value of the stringPainted property 

*javax.swing.JProgressBar.paintBorder(Graphics)*

protected void paintBorder(java.awt.Graphics g)

Paints the progress bar's border if the borderPainted property is true. 


    g - the Graphics context within which to paint the border 

*javax.swing.JProgressBar.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JProgressBar. This method is intended to be used only for debugging purposes. The content and format of the returned string may vary 
between implementations. The returned string may be empty but may not be null. 



    Returns: a string representation of this JProgressBar 

*javax.swing.JProgressBar.removeChangeListener(ChangeListener)*

public void removeChangeListener(javax.swing.event.ChangeListener l)

Removes a ChangeListener from the progress bar. 


    l - the ChangeListener to remove 

*javax.swing.JProgressBar.setBorderPainted(boolean)*

public void setBorderPainted(boolean b)

Sets the borderPainted property, which is true if the progress bar should paint its border. The default value for this property is true. Some look and feels might not implement 
painted borders; they will ignore this property. 


    b - true if the progress bar should paint its border; otherwise, false 

*javax.swing.JProgressBar.setIndeterminate(boolean)*

public void setIndeterminate(boolean newValue)

Sets the indeterminate property of the progress bar, which determines whether the progress bar is in determinate or indeterminate mode. An indeterminate progress bar continuously 
displays animation indicating that an operation of unknown length is occurring. By default, this property is false. Some look and feels might not support indeterminate progress 
bars; they will ignore this property. 



See How to Monitor Progress for examples of using indeterminate progress bars. 


    newValue - true if the progress bar should change to indeterminate mode; false if it should revert to normal. 

*javax.swing.JProgressBar.setMaximum(int)*

public void setMaximum(int n)

Sets the progress bar's maximum value (stored in the progress bar's data model) to n. The underlying BoundedRangeModel handles any mathematical issues arising from assigning 
faulty values. 

If the maximum value is different from the previous maximum, all change listeners are notified. 


    n - the new maximum 

*javax.swing.JProgressBar.setMinimum(int)*

public void setMinimum(int n)

Sets the progress bar's minimum value (stored in the progress bar's data model) to n. The data model (a BoundedRangeModel instance) handles any mathematical issues arising from 
assigning faulty values. 

If the minimum value is different from the previous minimum, all change listeners are notified. 


    n - the new minimum 

*javax.swing.JProgressBar.setModel(BoundedRangeModel)*

public void setModel(javax.swing.BoundedRangeModel newModel)

Sets the data model used by the JProgressBar. 


    newModel - the BoundedRangeModel to use 

*javax.swing.JProgressBar.setOrientation(int)*

public void setOrientation(int newOrientation)

Sets the progress bar's orientation to newOrientation, which must be JProgressBar.VERTICAL or JProgressBar.HORIZONTAL. The default orientation is HORIZONTAL. 


    newOrientation - HORIZONTAL or VERTICAL 

*javax.swing.JProgressBar.setString(String)*

public void setString(java.lang.String s)

Sets the value of the progress string. By default, this string is null. If you have provided a custom progress string and want to revert to the built-in behavior, set the string 
back to null. If you are providing a custom progress string by overriding this method, make sure that you call setString before calling getString. The progress string is painted 
only if the isStringPainted method returns true. 


    s - the value of the percent string 

*javax.swing.JProgressBar.setStringPainted(boolean)*

public void setStringPainted(boolean b)

Sets the value of the stringPainted property, which determines whether the progress bar should render a progress string. The default is false: no string is painted. Some look and 
feels might not support progress strings or might support them only when the progress bar is in determinate mode. 


    b - true if the progress bar should render a string 

*javax.swing.JProgressBar.setUI(ProgressBarUI)*

public void setUI(javax.swing.plaf.ProgressBarUI ui)

Sets the look-and-feel object that renders this component. 


    ui - a ProgressBarUI object 

*javax.swing.JProgressBar.setValue(int)*

public void setValue(int n)

Sets the progress bar's current value (stored in the progress bar's data model) to n. The data model (a BoundedRangeModel instance) handles any mathematical issues arising from 
assigning faulty values. 

If the new value is different from the previous value, all change listeners are notified. 


    n - the new value 

*javax.swing.JProgressBar.updateUI()*

public void updateUI()

Resets the UI property to a value from the current look and feel. 





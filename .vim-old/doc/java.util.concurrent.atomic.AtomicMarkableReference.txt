*java.util.concurrent.atomic.AtomicMarkableReference* *AtomicMarkableReference* An AtomicMarkableReference maintains an object reference
 along with a mark bit, that can be updated

public class AtomicMarkableReference<V>
  extends    |java.lang.Object|

|java.util.concurrent.atomic.AtomicMarkableReference_Description|
|java.util.concurrent.atomic.AtomicMarkableReference_Fields|
|java.util.concurrent.atomic.AtomicMarkableReference_Constructors|
|java.util.concurrent.atomic.AtomicMarkableReference_Methods|

====================================================================================================================================================================================

*java.util.concurrent.atomic.AtomicMarkableReference_Constructors*
|java.util.concurrent.atomic.AtomicMarkableReference(V,boolean)|Creates a new AtomicMarkableReference with the given  initial values.

*java.util.concurrent.atomic.AtomicMarkableReference_Methods*
|java.util.concurrent.atomic.AtomicMarkableReference.attemptMark(V,boolean)|Atomically sets the value of the mark to the given update value  if the current reference is == to the 
|java.util.concurrent.atomic.AtomicMarkableReference.compareAndSet(V,V,boolean,boolean)|Atomically sets the value of both the reference and mark  to the given update values if the
|java.util.concurrent.atomic.AtomicMarkableReference.get(boolean[])|Returns the current values of both the reference and the mark.
|java.util.concurrent.atomic.AtomicMarkableReference.getReference()|Returns the current value of the reference.
|java.util.concurrent.atomic.AtomicMarkableReference.isMarked()|Returns the current value of the mark.
|java.util.concurrent.atomic.AtomicMarkableReference.set(V,boolean)|Unconditionally sets the value of both the reference and mark.
|java.util.concurrent.atomic.AtomicMarkableReference.weakCompareAndSet(V,V,boolean,boolean)|Atomically sets the value of both the reference and mark  to the given update values if

*java.util.concurrent.atomic.AtomicMarkableReference_Description*

An AtomicMarkableReference maintains an object reference along with a mark bit, that can be updated atomically. 

Implementation note. This implementation maintains markable references by creating internal objects representing "boxed" [reference, boolean] pairs. 



*java.util.concurrent.atomic.AtomicMarkableReference(V,boolean)*

public AtomicMarkableReference(
  V initialRef,
  boolean initialMark)

Creates a new AtomicMarkableReference with the given initial values. 

    initialRef - the initial reference 
    initialMark - the initial mark 

*java.util.concurrent.atomic.AtomicMarkableReference.attemptMark(V,boolean)*

public boolean attemptMark(
  V expectedReference,
  boolean newMark)

Atomically sets the value of the mark to the given update value if the current reference is == to the expected reference. Any given invocation of this operation may fail (return 
false) spuriously, but repeated invocation when the current value holds the expected value and no other thread is also attempting to set the value will eventually succeed. 


    expectedReference - the expected value of the reference 
    newMark - the new value for the mark 

    Returns: true if successful 

*java.util.concurrent.atomic.AtomicMarkableReference.compareAndSet(V,V,boolean,boolean)*

public boolean compareAndSet(
  V expectedReference,
  V newReference,
  boolean expectedMark,
  boolean newMark)

Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the 
expected mark. 


    expectedReference - the expected value of the reference 
    newReference - the new value for the reference 
    expectedMark - the expected value of the mark 
    newMark - the new value for the mark 

    Returns: true if successful 

*java.util.concurrent.atomic.AtomicMarkableReference.get(boolean[])*

public |V| get(boolean[] markHolder)

Returns the current values of both the reference and the mark. Typical usage is boolean[1] holder; ref = v.get(holder); . 


    markHolder - an array of size of at least one. On return, markholder[0] will hold the value of the mark. 

    Returns: the current value of the reference 

*java.util.concurrent.atomic.AtomicMarkableReference.getReference()*

public |V| getReference()

Returns the current value of the reference. 



    Returns: the current value of the reference 

*java.util.concurrent.atomic.AtomicMarkableReference.isMarked()*

public boolean isMarked()

Returns the current value of the mark. 



    Returns: the current value of the mark 

*java.util.concurrent.atomic.AtomicMarkableReference.set(V,boolean)*

public void set(
  V newReference,
  boolean newMark)

Unconditionally sets the value of both the reference and mark. 


    newReference - the new value for the reference 
    newMark - the new value for the mark 

*java.util.concurrent.atomic.AtomicMarkableReference.weakCompareAndSet(V,V,boolean,boolean)*

public boolean weakCompareAndSet(
  V expectedReference,
  V newReference,
  boolean expectedMark,
  boolean newMark)

Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the 
expected mark. Any given invocation of this operation may fail (return false) spuriously, but repeated invocation when the current value holds the expected value and no other 
thread is also attempting to set the value will eventually succeed. 


    expectedReference - the expected value of the reference 
    newReference - the new value for the reference 
    expectedMark - the expected value of the mark 
    newMark - the new value for the mark 

    Returns: true if successful 



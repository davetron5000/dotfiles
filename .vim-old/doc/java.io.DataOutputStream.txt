*java.io.DataOutputStream* *DataOutputStream* A data output stream lets an application write primitive Java data 
 types to an output stream in a portable way.

public class DataOutputStream
  extends    |java.io.FilterOutputStream|
  implements |java.io.DataOutput|

|java.io.DataOutputStream_Description|
|java.io.DataOutputStream_Fields|
|java.io.DataOutputStream_Constructors|
|java.io.DataOutputStream_Methods|

====================================================================================================================================================================================

*java.io.DataOutputStream_Fields*
|int_java.io.DataOutputStream.written|

*java.io.DataOutputStream_Constructors*
|java.io.DataOutputStream(OutputStream)|Creates a new data output stream to write data to the specified   underlying output stream.

*java.io.DataOutputStream_Methods*
|java.io.DataOutputStream.flush()|Flushes this data output stream.
|java.io.DataOutputStream.size()|Returns the current value of the counter written,   the number of bytes written to this data output stream so far.
|java.io.DataOutputStream.write(byte[],int,int)|Writes len bytes from the specified byte array   starting at offset off to the underlying output stream.
|java.io.DataOutputStream.write(int)|Writes the specified byte (the low eight bits of the argument   b) to the underlying output stream.
|java.io.DataOutputStream.writeBoolean(boolean)|Writes a boolean to the underlying output stream as   a 1-byte value.
|java.io.DataOutputStream.writeByte(int)|Writes out a byte to the underlying output stream as   a 1-byte value.
|java.io.DataOutputStream.writeBytes(String)|Writes out the string to the underlying output stream as a   sequence of bytes.
|java.io.DataOutputStream.writeChar(int)|Writes a char to the underlying output stream as a   2-byte value, high byte first.
|java.io.DataOutputStream.writeChars(String)|Writes a string to the underlying output stream as a sequence of   characters.
|java.io.DataOutputStream.writeDouble(double)|Converts the double argument to a long using the   doubleToLongBits method in class Double,   and then writes that long value to the 
|java.io.DataOutputStream.writeFloat(float)|Converts the float argument to an int using the   floatToIntBits method in class Float,   and then writes that int value to the underly
|java.io.DataOutputStream.writeInt(int)|Writes an int to the underlying output stream as four  bytes, high byte first.
|java.io.DataOutputStream.writeLong(long)|Writes a long to the underlying output stream as eight  bytes, high byte first.
|java.io.DataOutputStream.writeShort(int)|Writes a short to the underlying output stream as two  bytes, high byte first.
|java.io.DataOutputStream.writeUTF(String)|Writes a string to the underlying output stream using  modified UTF-8  encoding in a machine-independent manner.

*java.io.DataOutputStream_Description*

A data output stream lets an application write primitive Java data types to an output stream in a portable way. An application can then use a data input stream to read the data 
back in. 



*int_java.io.DataOutputStream.written*

The number of bytes written to the data output stream so far. If this counter overflows, it will be wrapped to Integer.MAX_VALUE. 



*java.io.DataOutputStream(OutputStream)*

public DataOutputStream(java.io.OutputStream out)

Creates a new data output stream to write data to the specified underlying output stream. The counter written is set to zero. 

    out - the underlying output stream, to be saved for later use. 

*java.io.DataOutputStream.flush()*

public void flush()
  throws |java.io.IOException|
         
Flushes this data output stream. This forces any buffered output bytes to be written out to the stream. 

The flush method of DataOutputStream calls the flush method of its underlying output stream. 



*java.io.DataOutputStream.size()*

public final int size()

Returns the current value of the counter written, the number of bytes written to this data output stream so far. If the counter overflows, it will be wrapped to Integer.MAX_VALUE. 



    Returns: the value of the written field. 

*java.io.DataOutputStream.write(byte[],int,int)*

public synchronized void write(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Writes len bytes from the specified byte array starting at offset off to the underlying output stream. If no exception is thrown, the counter written is incremented by len. 


    b - the data. 
    off - the start offset in the data. 
    len - the number of bytes to write. 

*java.io.DataOutputStream.write(int)*

public synchronized void write(int b)
  throws |java.io.IOException|
         
Writes the specified byte (the low eight bits of the argument b) to the underlying output stream. If no exception is thrown, the counter written is incremented by 1. 

Implements the write method of OutputStream. 


    b - the byte to be written. 

*java.io.DataOutputStream.writeBoolean(boolean)*

public final void writeBoolean(boolean v)
  throws |java.io.IOException|
         
Writes a boolean to the underlying output stream as a 1-byte value. The value true is written out as the value (byte)1; the value false is written out as the value (byte)0. If no 
exception is thrown, the counter written is incremented by 1. 


    v - a boolean value to be written. 

*java.io.DataOutputStream.writeByte(int)*

public final void writeByte(int v)
  throws |java.io.IOException|
         
Writes out a byte to the underlying output stream as a 1-byte value. If no exception is thrown, the counter written is incremented by 1. 


    v - a byte value to be written. 

*java.io.DataOutputStream.writeBytes(String)*

public final void writeBytes(java.lang.String s)
  throws |java.io.IOException|
         
Writes out the string to the underlying output stream as a sequence of bytes. Each character in the string is written out, in sequence, by discarding its high eight bits. If no 
exception is thrown, the counter written is incremented by the length of s. 


    s - a string of bytes to be written. 

*java.io.DataOutputStream.writeChar(int)*

public final void writeChar(int v)
  throws |java.io.IOException|
         
Writes a char to the underlying output stream as a 2-byte value, high byte first. If no exception is thrown, the counter written is incremented by 2. 


    v - a char value to be written. 

*java.io.DataOutputStream.writeChars(String)*

public final void writeChars(java.lang.String s)
  throws |java.io.IOException|
         
Writes a string to the underlying output stream as a sequence of characters. Each character is written to the data output stream as if by the writeChar method. If no exception is 
thrown, the counter written is incremented by twice the length of s. 


    s - a String value to be written. 

*java.io.DataOutputStream.writeDouble(double)*

public final void writeDouble(double v)
  throws |java.io.IOException|
         
Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the underlying output stream as an 8-byte quantity, 
high byte first. If no exception is thrown, the counter written is incremented by 8. 


    v - a double value to be written. 

*java.io.DataOutputStream.writeFloat(float)*

public final void writeFloat(float v)
  throws |java.io.IOException|
         
Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the underlying output stream as a 4-byte quantity, high 
byte first. If no exception is thrown, the counter written is incremented by 4. 


    v - a float value to be written. 

*java.io.DataOutputStream.writeInt(int)*

public final void writeInt(int v)
  throws |java.io.IOException|
         
Writes an int to the underlying output stream as four bytes, high byte first. If no exception is thrown, the counter written is incremented by 4. 


    v - an int to be written. 

*java.io.DataOutputStream.writeLong(long)*

public final void writeLong(long v)
  throws |java.io.IOException|
         
Writes a long to the underlying output stream as eight bytes, high byte first. In no exception is thrown, the counter written is incremented by 8. 


    v - a long to be written. 

*java.io.DataOutputStream.writeShort(int)*

public final void writeShort(int v)
  throws |java.io.IOException|
         
Writes a short to the underlying output stream as two bytes, high byte first. If no exception is thrown, the counter written is incremented by 2. 


    v - a short to be written. 

*java.io.DataOutputStream.writeUTF(String)*

public final void writeUTF(java.lang.String str)
  throws |java.io.IOException|
         
Writes a string to the underlying output stream using modified UTF-8 encoding in a machine-independent manner. 

First, two bytes are written to the output stream as if by the writeShort method giving the number of bytes to follow. This value is the number of bytes actually written out, not 
the length of the string. Following the length, each character of the string is output, in sequence, using the modified UTF-8 encoding for the character. If no exception is 
thrown, the counter written is incremented by the total number of bytes written to the output stream. This will be at least two plus the length of str, and at most two plus thrice 
the length of str. 


    str - a string to be written. 



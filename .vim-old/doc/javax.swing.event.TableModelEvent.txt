*javax.swing.event.TableModelEvent* *TableModelEvent* TableModelEvent is used to notify listeners that a table model
 has changed.

public class TableModelEvent
  extends    |java.util.EventObject|

|javax.swing.event.TableModelEvent_Description|
|javax.swing.event.TableModelEvent_Fields|
|javax.swing.event.TableModelEvent_Constructors|
|javax.swing.event.TableModelEvent_Methods|

====================================================================================================================================================================================

*javax.swing.event.TableModelEvent_Fields*
|int_javax.swing.event.TableModelEvent.ALL_COLUMNS|
|int_javax.swing.event.TableModelEvent.column|
|int_javax.swing.event.TableModelEvent.DELETE|
|int_javax.swing.event.TableModelEvent.firstRow|
|int_javax.swing.event.TableModelEvent.HEADER_ROW|
|int_javax.swing.event.TableModelEvent.INSERT|
|int_javax.swing.event.TableModelEvent.lastRow|
|int_javax.swing.event.TableModelEvent.type|
|int_javax.swing.event.TableModelEvent.UPDATE|

*javax.swing.event.TableModelEvent_Constructors*
|javax.swing.event.TableModelEvent(TableModel)|All row data in the table has changed, listeners should discard any state    that was based on the rows and requery the TableModel  
|javax.swing.event.TableModelEvent(TableModel,int)|This row of data has been updated.
|javax.swing.event.TableModelEvent(TableModel,int,int)|The data in rows [firstRow, lastRow] have been updated.
|javax.swing.event.TableModelEvent(TableModel,int,int,int)|The cells in column column in the range    [firstRow, lastRow] have been updated.
|javax.swing.event.TableModelEvent(TableModel,int,int,int,int)|The cells from (firstRow, column) to (lastRow, column) have been changed.

*javax.swing.event.TableModelEvent_Methods*
|javax.swing.event.TableModelEvent.getColumn()|Returns the column for the event.
|javax.swing.event.TableModelEvent.getFirstRow()|Returns the first row that changed.
|javax.swing.event.TableModelEvent.getLastRow()|Returns the last row that changed.
|javax.swing.event.TableModelEvent.getType()|Returns the type of event - one of: INSERT, UPDATE and DELETE.

*javax.swing.event.TableModelEvent_Description*

TableModelEvent is used to notify listeners that a table model has changed. The model event describes changes to a TableModel and all references to rows and columns are in the 
co-ordinate system of the model. Depending on the parameters used in the constructors, the TableModelevent can be used to specify the following types of changes: 



TableModelEvent(source); // The data, ie. all rows changed TableModelEvent(source, HEADER_ROW); // Structure change, reallocate TableColumns TableModelEvent(source, 1); // Row 1 
changed TableModelEvent(source, 3, 6); // Rows 3 to 6 inclusive changed TableModelEvent(source, 2, 2, 6); // Cell at (2, 6) changed TableModelEvent(source, 3, 6, ALL_COLUMNS, 
INSERT); // Rows (3, 6) were inserted TableModelEvent(source, 3, 6, ALL_COLUMNS, DELETE); // Rows (3, 6) were deleted 

It is possible to use other combinations of the parameters, not all of them are meaningful. By subclassing, you can add other information, for example: whether the event WILL 
happen or DID happen. This makes the specification of rows in DELETE events more useful but has not been included in the swing package as the JTable only needs post-event 
notification. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*int_javax.swing.event.TableModelEvent.ALL_COLUMNS*

Specifies all columns in a row or rows. 


*int_javax.swing.event.TableModelEvent.column*




*int_javax.swing.event.TableModelEvent.DELETE*

Identifies the removal of rows or columns. 


*int_javax.swing.event.TableModelEvent.firstRow*




*int_javax.swing.event.TableModelEvent.HEADER_ROW*

Identifies the header row. 


*int_javax.swing.event.TableModelEvent.INSERT*

Identifies the addtion of new rows or columns. 


*int_javax.swing.event.TableModelEvent.lastRow*




*int_javax.swing.event.TableModelEvent.type*




*int_javax.swing.event.TableModelEvent.UPDATE*

Identifies a change to existing data. 



*javax.swing.event.TableModelEvent(TableModel)*

public TableModelEvent(javax.swing.table.TableModel source)

All row data in the table has changed, listeners should discard any state that was based on the rows and requery the TableModel to get the new row count and all the appropriate 
values. The JTable will repaint the entire visible region on receiving this event, querying the model for the cell values that are visible. The structure of the table ie, the 
column names, types and order have not changed. 


*javax.swing.event.TableModelEvent(TableModel,int)*

public TableModelEvent(
  javax.swing.table.TableModel source,
  int row)

This row of data has been updated. To denote the arrival of a completely new table with a different structure use HEADER_ROW as the value for the row. When the JTable receives 
this event and its autoCreateColumnsFromModel flag is set it discards any TableColumns that it had and reallocates default ones in the order they appear in the model. This is the 
same as calling setModel(TableModel) on the JTable. 


*javax.swing.event.TableModelEvent(TableModel,int,int)*

public TableModelEvent(
  javax.swing.table.TableModel source,
  int firstRow,
  int lastRow)

The data in rows [firstRow, lastRow] have been updated. 


*javax.swing.event.TableModelEvent(TableModel,int,int,int)*

public TableModelEvent(
  javax.swing.table.TableModel source,
  int firstRow,
  int lastRow,
  int column)

The cells in column column in the range [firstRow, lastRow] have been updated. 


*javax.swing.event.TableModelEvent(TableModel,int,int,int,int)*

public TableModelEvent(
  javax.swing.table.TableModel source,
  int firstRow,
  int lastRow,
  int column,
  int type)

The cells from (firstRow, column) to (lastRow, column) have been changed. The column refers to the column index of the cell in the model's co-ordinate system. When column is 
ALL_COLUMNS, all cells in the specified range of rows are considered changed. 

The type should be one of: INSERT, UPDATE and DELETE. 


*javax.swing.event.TableModelEvent.getColumn()*

public int getColumn()

Returns the column for the event. If the return value is ALL_COLUMNS; it means every column in the specified rows changed. 



*javax.swing.event.TableModelEvent.getFirstRow()*

public int getFirstRow()

Returns the first row that changed. HEADER_ROW means the meta data, ie. names, types and order of the columns. 



*javax.swing.event.TableModelEvent.getLastRow()*

public int getLastRow()

Returns the last row that changed. 



*javax.swing.event.TableModelEvent.getType()*

public int getType()

Returns the type of event - one of: INSERT, UPDATE and DELETE. 





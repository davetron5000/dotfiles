*javax.swing.plaf.multi.MultiLookAndFeel* *MultiLookAndFeel* A multiplexing look and feel that allows more than one UI 
 to be associated with a component at the same time.

public class MultiLookAndFeel
  extends    |javax.swing.LookAndFeel|

|javax.swing.plaf.multi.MultiLookAndFeel_Description|
|javax.swing.plaf.multi.MultiLookAndFeel_Fields|
|javax.swing.plaf.multi.MultiLookAndFeel_Constructors|
|javax.swing.plaf.multi.MultiLookAndFeel_Methods|

====================================================================================================================================================================================

*javax.swing.plaf.multi.MultiLookAndFeel_Constructors*
|javax.swing.plaf.multi.MultiLookAndFeel()|

*javax.swing.plaf.multi.MultiLookAndFeel_Methods*
|javax.swing.plaf.multi.MultiLookAndFeel.createUIs(ComponentUI,Vector,JComponent)|Creates the ComponentUI objects  required to present  the target component,  placing the objects 
|javax.swing.plaf.multi.MultiLookAndFeel.getDefaults()|Creates, initializes, and returns  the look and feel specific defaults.
|javax.swing.plaf.multi.MultiLookAndFeel.getDescription()|Returns a one-line description of this look and feel.
|javax.swing.plaf.multi.MultiLookAndFeel.getID()|Returns a string, suitable for use by applications/services,  that identifies this look and feel.
|javax.swing.plaf.multi.MultiLookAndFeel.getName()|Returns a string, suitable for use in menus,  that identifies this look and feel.
|javax.swing.plaf.multi.MultiLookAndFeel.isNativeLookAndFeel()|Returns false;  this look and feel is not native to any platform.
|javax.swing.plaf.multi.MultiLookAndFeel.isSupportedLookAndFeel()|Returns true;  every platform permits this look and feel.
|javax.swing.plaf.multi.MultiLookAndFeel.uisToArray(Vector)|Creates an array,  populates it with UI objects from the passed-in vector,  and returns the array.

*javax.swing.plaf.multi.MultiLookAndFeel_Description*

A multiplexing look and feel that allows more than one UI to be associated with a component at the same time. The primary look and feel is called the default look and feel, and 
the other look and feels are called auxiliary. 

For further information, see Using the Multiplexing Look and Feel. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.plaf.multi.MultiLookAndFeel()*

public MultiLookAndFeel()




*javax.swing.plaf.multi.MultiLookAndFeel.createUIs(ComponentUI,Vector,JComponent)*

public static |javax.swing.plaf.ComponentUI| createUIs(
  javax.swing.plaf.ComponentUI mui,
  java.util.Vector uis,
  javax.swing.JComponent target)

Creates the ComponentUI objects required to present the target component, placing the objects in the uis vector and returning the ComponentUI object that best represents the 
component's UI. This method finds the ComponentUI objects by invoking getDefaults().getUI(target) on each default and auxiliary look and feel currently in use. The first UI object 
this method adds to the uis vector is for the default look and feel. 

This method is invoked by the createUI method of MultiXxxxUI classes. 


    mui - the ComponentUI object that represents the complete UI for the target component; this should be an instance of one of the MultiXxxxUI classes 
    uis - a Vector; generally this is the uis field of the mui argument 
    target - a component whose UI is represented by mui 

    Returns: mui if the component has any auxiliary UI objects; otherwise, returns the UI object for the default look and feel or null if the default UI object couldn't be found 

*javax.swing.plaf.multi.MultiLookAndFeel.getDefaults()*

public |javax.swing.UIDefaults| getDefaults()

Creates, initializes, and returns the look and feel specific defaults. For this look and feel, the defaults consist solely of mappings of UI class IDs (such as "ButtonUI") to 
ComponentUI class names (such as "javax.swing.plaf.multi.MultiButtonUI"). 



    Returns: an initialized UIDefaults object 

*javax.swing.plaf.multi.MultiLookAndFeel.getDescription()*

public |java.lang.String| getDescription()

Returns a one-line description of this look and feel. 



    Returns: a descriptive string such as "Allows multiple UI instances per component instance" 

*javax.swing.plaf.multi.MultiLookAndFeel.getID()*

public |java.lang.String| getID()

Returns a string, suitable for use by applications/services, that identifies this look and feel. 



    Returns: 

*javax.swing.plaf.multi.MultiLookAndFeel.getName()*

public |java.lang.String| getName()

Returns a string, suitable for use in menus, that identifies this look and feel. 



    Returns: a string such as "Multiplexing Look and Feel" 

*javax.swing.plaf.multi.MultiLookAndFeel.isNativeLookAndFeel()*

public boolean isNativeLookAndFeel()

Returns false; this look and feel is not native to any platform. 



    Returns: 

*javax.swing.plaf.multi.MultiLookAndFeel.isSupportedLookAndFeel()*

public boolean isSupportedLookAndFeel()

Returns true; every platform permits this look and feel. 



    Returns: 

*javax.swing.plaf.multi.MultiLookAndFeel.uisToArray(Vector)*

protected static |javax.swing.plaf.ComponentUI|[] uisToArray(java.util.Vector uis)

Creates an array, populates it with UI objects from the passed-in vector, and returns the array. If uis is null, this method returns an array with zero elements. If uis is an 
empty vector, this method returns null. A run-time error occurs if any objects in the uis vector are not of type ComponentUI. 


    uis - a vector containing ComponentUI objects 

    Returns: an array equivalent to the passed-in vector 



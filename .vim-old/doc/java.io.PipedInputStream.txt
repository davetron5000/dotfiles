*java.io.PipedInputStream* *PipedInputStream* A piped input stream should be connected
 to a piped output stream; the piped  input
 stream then provides whatever data bytes
 are wr

public class PipedInputStream
  extends    |java.io.InputStream|

|java.io.PipedInputStream_Description|
|java.io.PipedInputStream_Fields|
|java.io.PipedInputStream_Constructors|
|java.io.PipedInputStream_Methods|

====================================================================================================================================================================================

*java.io.PipedInputStream_Fields*
|byte[]_java.io.PipedInputStream.buffer|
|int_java.io.PipedInputStream.in|
|int_java.io.PipedInputStream.out|
|int_java.io.PipedInputStream.PIPE_SIZE|

*java.io.PipedInputStream_Constructors*
|java.io.PipedInputStream()|Creates a PipedInputStream so  that it is not  yet connected.
|java.io.PipedInputStream(PipedOutputStream)|Creates a PipedInputStream so  that it is connected to the piped output  stream src.

*java.io.PipedInputStream_Methods*
|java.io.PipedInputStream.available()|Returns the number of bytes that can be read from this input  stream without blocking.
|java.io.PipedInputStream.close()|Closes this piped input stream and releases any system resources  associated with the stream.
|java.io.PipedInputStream.connect(PipedOutputStream)|Causes this piped input stream to be connected  to the piped  output stream src.
|java.io.PipedInputStream.read()|Reads the next byte of data from this piped input stream.
|java.io.PipedInputStream.read(byte[],int,int)|Reads up to len bytes of data from this piped input  stream into an array of bytes.
|java.io.PipedInputStream.receive(int)|Receives a byte of data.

*java.io.PipedInputStream_Description*

A piped input stream should be connected to a piped output stream; the piped input stream then provides whatever data bytes are written to the piped output stream. Typically, data 
is read from a PipedInputStream object by one thread and data is written to the corresponding PipedOutputStream by some other thread. Attempting to use both objects from a single 
thread is not recommended, as it may deadlock the thread. The piped input stream contains a buffer, decoupling read operations from write operations, within limits. 



*byte[]_java.io.PipedInputStream.buffer*

The circular buffer into which incoming data is placed. 


*int_java.io.PipedInputStream.in*

The index of the position in the circular buffer at which the next byte of data will be stored when received from the connected piped output stream. in<0 implies the buffer is 
empty, in==out implies the buffer is full 


*int_java.io.PipedInputStream.out*

The index of the position in the circular buffer at which the next byte of data will be read by this piped input stream. 


*int_java.io.PipedInputStream.PIPE_SIZE*

The size of the pipe's circular input buffer. 



*java.io.PipedInputStream()*

public PipedInputStream()

Creates a PipedInputStream so that it is not yet connected. It must be connected to a PipedOutputStream before being used. 


*java.io.PipedInputStream(PipedOutputStream)*

public PipedInputStream(java.io.PipedOutputStream src)
  throws |java.io.IOException|
         
Creates a PipedInputStream so that it is connected to the piped output stream src. Data bytes written to src will then be available as input from this stream. 

    src - the stream to connect to. 

*java.io.PipedInputStream.available()*

public synchronized int available()
  throws |java.io.IOException|
         
Returns the number of bytes that can be read from this input stream without blocking. This method overrides the available method of the parent class. 



    Returns: the number of bytes that can be read from this input stream without blocking. 

*java.io.PipedInputStream.close()*

public void close()
  throws |java.io.IOException|
         
Closes this piped input stream and releases any system resources associated with the stream. 



*java.io.PipedInputStream.connect(PipedOutputStream)*

public void connect(java.io.PipedOutputStream src)
  throws |java.io.IOException|
         
Causes this piped input stream to be connected to the piped output stream src. If this object is already connected to some other piped output stream, an IOException is thrown. 

If src is an unconnected piped output stream and snk is an unconnected piped input stream, they may be connected by either the call: 

snk.connect(src) 

or the call: 

src.connect(snk) 

The two calls have the same effect. 


    src - The piped output stream to connect to. 

*java.io.PipedInputStream.read()*

public synchronized int read()
  throws |java.io.IOException|
         
Reads the next byte of data from this piped input stream. The value byte is returned as an int in the range 0 to 255. If no byte is available because the end of the stream has 
been reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown. If a thread was providing 
data bytes to the connected piped output stream, but the thread is no longer alive, then an IOException is thrown. 



    Returns: the next byte of data, or -1 if the end of the stream is reached. 

*java.io.PipedInputStream.read(byte[],int,int)*

public synchronized int read(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Reads up to len bytes of data from this piped input stream into an array of bytes. Less than len bytes will be read if the end of the data stream is reached. This method blocks 
until at least one byte of input is available. If a thread was providing data bytes to the connected piped output stream, but the thread is no longer alive, then an IOException is 
thrown. 


    b - the buffer into which the data is read. 
    off - the start offset of the data. 
    len - the maximum number of bytes read. 

    Returns: the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached. 

*java.io.PipedInputStream.receive(int)*

protected synchronized void receive(int b)
  throws |java.io.IOException|
         
Receives a byte of data. This method will block if no input is available. 


    b - the byte being received 



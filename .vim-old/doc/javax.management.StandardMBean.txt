*javax.management.StandardMBean* *StandardMBean* An MBean whose management inter

public class StandardMBean
  extends    |java.lang.Object|
  implements |javax.management.DynamicMBean|

|javax.management.StandardMBean_Description|
|javax.management.StandardMBean_Fields|
|javax.management.StandardMBean_Constructors|
|javax.management.StandardMBean_Methods|

================================================================================

*javax.management.StandardMBean_Constructors*
|javax.management.StandardMBean(Class)|Make a DynamicMBean out of this, using t
|javax.management.StandardMBean(Object,Class)|Make a DynamicMBean out of the ob

*javax.management.StandardMBean_Methods*
|javax.management.StandardMBean.cacheMBeanInfo(MBeanInfo)|Customization hook:  
|javax.management.StandardMBean.getAttribute(String)|
|javax.management.StandardMBean.getAttributes(String[])|
|javax.management.StandardMBean.getCachedMBeanInfo()|Customization hook:  Retur
|javax.management.StandardMBean.getClassName(MBeanInfo)|Customization hook:  Ge
|javax.management.StandardMBean.getConstructors(MBeanConstructorInfo[],Object)|
|javax.management.StandardMBean.getDescription(MBeanAttributeInfo)|Customizatio
|javax.management.StandardMBean.getDescription(MBeanConstructorInfo)|Customizat
|javax.management.StandardMBean.getDescription(MBeanConstructorInfo,MBeanParameterInfo,int)|
|javax.management.StandardMBean.getDescription(MBeanFeatureInfo)|Customization 
|javax.management.StandardMBean.getDescription(MBeanInfo)|Customization hook:  
|javax.management.StandardMBean.getDescription(MBeanOperationInfo)|Customizatio
|javax.management.StandardMBean.getDescription(MBeanOperationInfo,MBeanParameterInfo,int)|
|javax.management.StandardMBean.getImpact(MBeanOperationInfo)|Customization hoo
|javax.management.StandardMBean.getImplementation()|Get the implementation of t
|javax.management.StandardMBean.getImplementationClass()|Get the class of the i
|javax.management.StandardMBean.getMBeanInfo()|Get theMBeanInfofor this MBean.
|javax.management.StandardMBean.getMBeanInterface()|Get the Management Interfac
|javax.management.StandardMBean.getParameterName(MBeanConstructorInfo,MBeanParameterInfo,int)|
|javax.management.StandardMBean.getParameterName(MBeanOperationInfo,MBeanParameterInfo,int)|
|javax.management.StandardMBean.invoke(String,Object[],String[])|
|javax.management.StandardMBean.setAttribute(Attribute)|
|javax.management.StandardMBean.setAttributes(AttributeList)|
|javax.management.StandardMBean.setImplementation(Object)|Replace the implement

*javax.management.StandardMBean_Description*

An MBean whose management interface is determined by reflection on a Java 
interface. 

This class brings more flexibility to the notion of Management Interface in the 
use of Standard MBeans. Straightforward use of the patterns for Standard MBeans 
described in the JMX Specification means that there is a fixed relationship 
between the implementation class of an MBean and its management interface 
(i.e., if the implementation class is Thing, the management interface must be 
ThingMBean). This class makes it possible to keep the convenience of specifying 
the management interface with a Java interface, without requiring that there be 
any naming relationship between the implementation and interface classes. 

By making a DynamicMBean out of an MBean, this class makes it possible to 
select any interface implemented by the MBean as its management interface, 
provided that it complies with JMX patterns (i.e., attributes defined by 
getter/setter etc...). 

This class also provides hooks that make it possible to supply custom 
descriptions and names for the (|javax.management.MBeanInfo|) returned by the 
DynamicMBean interface. 

Using this class, an MBean can be created with any implementation class name 
Impl and with a management interface defined (as for current Standard MBeans) 
by any interface Intf, in one of two general ways: 



Using the public constructor 
StandardMBean(impl,interface)(|javax.management.StandardMBean|) : 

MBeanServer mbs; ... Impl impl = new Impl(...); StandardMBean mbean = new 
StandardMBean(impl, Intf.class); mbs.registerMBean(mbean, objectName); 

Subclassing StandardMBean: 

public class Impl extends StandardMBean implements Intf { public Impl() { 
super(Intf.class); } // implement methods of Intf } 

[...] 

MBeanServer mbs; .... Impl impl = new Impl(); mbs.registerMBean(impl, 
objectName); 



In either case, the class Impl must implement the interface Intf. 

Standard MBeans based on the naming relationship between implementation and 
interface classes are of course still available. 


*javax.management.StandardMBean(Class)*

protected StandardMBean(java.lang.Class mbeanInterface)
  throws |javax.management.NotCompliantMBeanException|
         
Make a DynamicMBean out of this, using the specified mbeanInterface class. 

Call this(this,mbeanInterface)(|javax.management.StandardMBean|) . This 
constructor is reserved to subclasses. 

    mbeanInterface - The Management Interface exported by this MBean. 

*javax.management.StandardMBean(Object,Class)*

public StandardMBean(
  java.lang.Object implementation,
  java.lang.Class mbeanInterface)
  throws |javax.management.NotCompliantMBeanException|
         
Make a DynamicMBean out of the object implementation, using the specified 
mbeanInterface class. 

    implementation - The implementation of this MBean. 
    mbeanInterface - The Management Interface exported by this MBean's implementation. If null, then 
       this object will use standard JMX design pattern to determine the 
       management interface associated with the given implementation. 

*javax.management.StandardMBean.cacheMBeanInfo(MBeanInfo)*

protected synchronized void cacheMBeanInfo(javax.management.MBeanInfo info)

Customization hook: cache the MBeanInfo built for this object. 

Subclasses may redefine this method in order to implement their own caching 
policy. The default implementation stores info in this instance. A subclass can 
define other policies, such as not saving info (so it is reconstructed every 
time (|javax.management.StandardMBean|) is called) or sharing a unique 
(|javax.management.MBeanInfo|) object when several StandardMBean instances have 
equal (|javax.management.MBeanInfo|) values. 

    info - the new MBeanInfo to cache. Any previously cached value is discarded. This 
       parameter may be null, in which case there is no new cached value. 

*javax.management.StandardMBean.getAttribute(String)*

public |java.lang.Object| getAttribute(java.lang.String attribute)
  throws |javax.management.AttributeNotFoundException|
         |javax.management.MBeanException|
         |javax.management.ReflectionException|
         



*javax.management.StandardMBean.getAttributes(String[])*

public |javax.management.AttributeList| getAttributes(java.lang.String[] attributes)




*javax.management.StandardMBean.getCachedMBeanInfo()*

protected synchronized |javax.management.MBeanInfo| getCachedMBeanInfo()

Customization hook: Return the MBeanInfo cached for this object. 

Subclasses may redefine this method in order to implement their own caching 
policy. The default implementation stores one (|javax.management.MBeanInfo|) 
object per instance. 


    Returns: The cached MBeanInfo, or null if no MBeanInfo is cached. 
*javax.management.StandardMBean.getClassName(MBeanInfo)*

protected |java.lang.String| getClassName(javax.management.MBeanInfo info)

Customization hook: Get the className that will be used in the MBeanInfo 
returned by this MBean. 

Subclasses may redefine this method in order to supply their custom class name. 
The default implementation returns 
info.getClassName()(|javax.management.MBeanInfo|) . 

    info - The default MBeanInfo derived by reflection. 

    Returns: the class name for the new MBeanInfo. 
*javax.management.StandardMBean.getConstructors(MBeanConstructorInfo[],Object)*

protected |javax.management.MBeanConstructorInfo| getConstructors(
  javax.management.MBeanConstructorInfo[] ctors,
  java.lang.Object impl)

Customization hook: Get the MBeanConstructorInfo[] that will be used in the 
MBeanInfo returned by this MBean. 

By default, this method returns null if the wrapped implementation is not this. 
Indeed, if the wrapped implementation is not this object itself, it will not be 
possible to recreate a wrapped implementation by calling the implementation 
constructors through MBeanServer.createMBean(...). Otherwise, if the wrapped 
implementation is this, ctors is returned. 

Subclasses may redefine this method in order to modify this behavior, if 
needed. 

    ctors - The default MBeanConstructorInfo[] derived by reflection. 
    impl - The wrapped implementation. If null is passed, the wrapped implementation is 
       ignored and ctors is returned. 

    Returns: the MBeanConstructorInfo[] for the new MBeanInfo. 
*javax.management.StandardMBean.getDescription(MBeanAttributeInfo)*

protected |java.lang.String| getDescription(javax.management.MBeanAttributeInfo info)

Customization hook: Get the description that will be used in the 
MBeanAttributeInfo returned by this MBean. 

Subclasses may redefine this method in order to supply their custom 
description. The default implementation returns 
getDescription((MBeanFeatureInfo) info)(|javax.management.StandardMBean|) . 

    info - The default MBeanAttributeInfo derived by reflection. 

    Returns: the description for the given MBeanAttributeInfo. 
*javax.management.StandardMBean.getDescription(MBeanConstructorInfo)*

protected |java.lang.String| getDescription(javax.management.MBeanConstructorInfo info)

Customization hook: Get the description that will be used in the 
MBeanConstructorInfo returned by this MBean. 

Subclasses may redefine this method in order to supply their custom 
description. The default implementation returns 
getDescription((MBeanFeatureInfo) info)(|javax.management.StandardMBean|) . 

    info - The default MBeanConstructorInfo derived by reflection. 

    Returns: the description for the given MBeanConstructorInfo. 
*javax.management.StandardMBean.getDescription(MBeanConstructorInfo,MBeanParameterInfo,int)*

protected |java.lang.String| getDescription(
  javax.management.MBeanConstructorInfo ctor,
  javax.management.MBeanParameterInfo param,
  int sequence)

Customization hook: Get the description that will be used for the sequence 
MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean. 

Subclasses may redefine this method in order to supply their custom 
description. The default implementation returns 
param.getDescription()(|javax.management.MBeanParameterInfo|) . 

    ctor - The default MBeanConstructorInfo derived by reflection. 
    param - The default MBeanParameterInfo derived by reflection. 
    sequence - The sequence number of the parameter considered ("0" for the first parameter, 
       "1" for the second parameter, etc...). 

    Returns: the description for the given MBeanParameterInfo. 
*javax.management.StandardMBean.getDescription(MBeanFeatureInfo)*

protected |java.lang.String| getDescription(javax.management.MBeanFeatureInfo info)

Customization hook: Get the description that will be used in the 
MBeanFeatureInfo returned by this MBean. 

Subclasses may redefine this method in order to supply their custom 
description. The default implementation returns 
info.getDescription()(|javax.management.MBeanFeatureInfo|) . 

This method is called by (|javax.management.StandardMBean|) , 
(|javax.management.StandardMBean|) , (|javax.management.StandardMBean|) . 

    info - The default MBeanFeatureInfo derived by reflection. 

    Returns: the description for the given MBeanFeatureInfo. 
*javax.management.StandardMBean.getDescription(MBeanInfo)*

protected |java.lang.String| getDescription(javax.management.MBeanInfo info)

Customization hook: Get the description that will be used in the MBeanInfo 
returned by this MBean. 

Subclasses may redefine this method in order to supply their custom MBean 
description. The default implementation returns 
info.getDescription()(|javax.management.MBeanInfo|) . 

    info - The default MBeanInfo derived by reflection. 

    Returns: the description for the new MBeanInfo. 
*javax.management.StandardMBean.getDescription(MBeanOperationInfo)*

protected |java.lang.String| getDescription(javax.management.MBeanOperationInfo info)

Customization hook: Get the description that will be used in the 
MBeanOperationInfo returned by this MBean. 

Subclasses may redefine this method in order to supply their custom 
description. The default implementation returns 
getDescription((MBeanFeatureInfo) info)(|javax.management.StandardMBean|) . 

    info - The default MBeanOperationInfo derived by reflection. 

    Returns: the description for the given MBeanOperationInfo. 
*javax.management.StandardMBean.getDescription(MBeanOperationInfo,MBeanParameterInfo,int)*

protected |java.lang.String| getDescription(
  javax.management.MBeanOperationInfo op,
  javax.management.MBeanParameterInfo param,
  int sequence)

Customization hook: Get the description that will be used for the sequence 
MBeanParameterInfo of the MBeanOperationInfo returned by this MBean. 

Subclasses may redefine this method in order to supply their custom 
description. The default implementation returns 
param.getDescription()(|javax.management.MBeanParameterInfo|) . 

    op - The default MBeanOperationInfo derived by reflection. 
    param - The default MBeanParameterInfo derived by reflection. 
    sequence - The sequence number of the parameter considered ("0" for the first parameter, 
       "1" for the second parameter, etc...). 

    Returns: the description for the given MBeanParameterInfo. 
*javax.management.StandardMBean.getImpact(MBeanOperationInfo)*

protected int getImpact(javax.management.MBeanOperationInfo info)

Customization hook: Get the impact flag of the operation that will be used in 
the MBeanOperationInfo returned by this MBean. 

Subclasses may redefine this method in order to supply their custom impact 
flag. The default implementation returns 
info.getImpact()(|javax.management.MBeanOperationInfo|) . 

    info - The default MBeanOperationInfo derived by reflection. 

    Returns: the impact flag for the given MBeanOperationInfo. 
*javax.management.StandardMBean.getImplementation()*

public synchronized |java.lang.Object| getImplementation()

Get the implementation of this MBean. 


    Returns: The implementation of this MBean. 
*javax.management.StandardMBean.getImplementationClass()*

public synchronized |java.lang.Class| getImplementationClass()

Get the class of the implementation of this MBean. 


    Returns: The class of the implementation of this MBean. 
*javax.management.StandardMBean.getMBeanInfo()*

public |javax.management.MBeanInfo| getMBeanInfo()

Get the (|javax.management.MBeanInfo|) for this MBean. 

This method implements 
DynamicMBean.getMBeanInfo()(|javax.management.DynamicMBean|) . 

This method first calls (|javax.management.StandardMBean|) in order to retrieve 
the cached MBeanInfo for this MBean, if any. If the MBeanInfo returned by 
(|javax.management.StandardMBean|) is not null, then it is returned. Otherwise, 
this method builds a default MBeanInfo for this MBean, using the Management 
Interface specified for this MBean. 

While building the MBeanInfo, this method calls the customization hooks that 
make it possible for subclasses to supply their custom descriptions, parameter 
names, etc... Finally, it calls 
cacheMBeanInfo()(|javax.management.StandardMBean|) in order to cache the new 
MBeanInfo. 


    Returns: The cached MBeanInfo for that MBean, if not null, or a newly built MBeanInfo if 
             none was cached. 
*javax.management.StandardMBean.getMBeanInterface()*

public final synchronized |java.lang.Class| getMBeanInterface()

Get the Management Interface of this MBean. 


    Returns: The management interface of this MBean. 
*javax.management.StandardMBean.getParameterName(MBeanConstructorInfo,MBeanParameterInfo,int)*

protected |java.lang.String| getParameterName(
  javax.management.MBeanConstructorInfo ctor,
  javax.management.MBeanParameterInfo param,
  int sequence)

Customization hook: Get the name that will be used for the sequence 
MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean. 

Subclasses may redefine this method in order to supply their custom parameter 
name. The default implementation returns 
param.getName()(|javax.management.MBeanParameterInfo|) . 

    ctor - The default MBeanConstructorInfo derived by reflection. 
    param - The default MBeanParameterInfo derived by reflection. 
    sequence - The sequence number of the parameter considered ("0" for the first parameter, 
       "1" for the second parameter, etc...). 

    Returns: the name for the given MBeanParameterInfo. 
*javax.management.StandardMBean.getParameterName(MBeanOperationInfo,MBeanParameterInfo,int)*

protected |java.lang.String| getParameterName(
  javax.management.MBeanOperationInfo op,
  javax.management.MBeanParameterInfo param,
  int sequence)

Customization hook: Get the name that will be used for the sequence 
MBeanParameterInfo of the MBeanOperationInfo returned by this MBean. 

Subclasses may redefine this method in order to supply their custom parameter 
name. The default implementation returns 
param.getName()(|javax.management.MBeanParameterInfo|) . 

    op - The default MBeanOperationInfo derived by reflection. 
    param - The default MBeanParameterInfo derived by reflection. 
    sequence - The sequence number of the parameter considered ("0" for the first parameter, 
       "1" for the second parameter, etc...). 

    Returns: the name to use for the given MBeanParameterInfo. 
*javax.management.StandardMBean.invoke(String,Object[],String[])*

public |java.lang.Object| invoke(
  java.lang.String actionName,
  java.lang.Object[] params,
  java.lang.String[] signature)
  throws |javax.management.MBeanException|
         |javax.management.ReflectionException|
         



*javax.management.StandardMBean.setAttribute(Attribute)*

public void setAttribute(javax.management.Attribute attribute)
  throws |javax.management.AttributeNotFoundException|
         |javax.management.InvalidAttributeValueException|
         |javax.management.MBeanException|
         |javax.management.ReflectionException|
         



*javax.management.StandardMBean.setAttributes(AttributeList)*

public |javax.management.AttributeList| setAttributes(javax.management.AttributeList attributes)




*javax.management.StandardMBean.setImplementation(Object)*

public synchronized void setImplementation(java.lang.Object implementation)
  throws |javax.management.NotCompliantMBeanException|
         
Replace the implementation object wrapped in this object. 

    implementation - The new implementation of this MBean. The implementation object must implement 
       the MBean interface that was supplied when this StandardMBean was 
       constructed. 



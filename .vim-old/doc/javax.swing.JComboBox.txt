*javax.swing.JComboBox* *JComboBox* A component that combines a button or editable field and a drop-down list.

public class JComboBox
  extends    |javax.swing.JComponent|
  implements |java.awt.ItemSelectable|
             |javax.swing.event.ListDataListener|
             |java.awt.event.ActionListener|
             |javax.accessibility.Accessible|

|javax.swing.JComboBox_Description|
|javax.swing.JComboBox_Fields|
|javax.swing.JComboBox_Constructors|
|javax.swing.JComboBox_Methods|

====================================================================================================================================================================================

*javax.swing.JComboBox_Fields*
|java.lang.String_javax.swing.JComboBox.actionCommand|
|javax.swing.ComboBoxModel_javax.swing.JComboBox.dataModel|
|javax.swing.ComboBoxEditor_javax.swing.JComboBox.editor|
|boolean_javax.swing.JComboBox.isEditable|
|javax.swing.JComboBox.KeySelectionManager_javax.swing.JComboBox.keySelectionManager|
|boolean_javax.swing.JComboBox.lightWeightPopupEnabled|
|int_javax.swing.JComboBox.maximumRowCount|
|javax.swing.ListCellRenderer_javax.swing.JComboBox.renderer|
|java.lang.Object_javax.swing.JComboBox.selectedItemReminder|

*javax.swing.JComboBox_Constructors*
|javax.swing.JComboBox()|Creates a JComboBox with a default data model.
|javax.swing.JComboBox(ComboBoxModel)|Creates a JComboBox that takes it's items from an  existing ComboBoxModel.
|javax.swing.JComboBox(Object[])|Creates a JComboBox that contains the elements  in the specified array.
|javax.swing.JComboBox(Vector<?>)|Creates a JComboBox that contains the elements  in the specified Vector.

*javax.swing.JComboBox_Methods*
|javax.swing.JComboBox.actionPerformed(ActionEvent)|This method is public as an implementation side effect.
|javax.swing.JComboBox.addActionListener(ActionListener)|Adds an ActionListener.
|javax.swing.JComboBox.addItem(Object)|Adds an item to the item list.
|javax.swing.JComboBox.addItemListener(ItemListener)|Adds an ItemListener.
|javax.swing.JComboBox.addPopupMenuListener(PopupMenuListener)|Adds a PopupMenu listener which will listen to notification  messages from the popup portion of the combo box.
|javax.swing.JComboBox.configureEditor(ComboBoxEditor,Object)|Initializes the editor with the specified item.
|javax.swing.JComboBox.configurePropertiesFromAction(Action)|Factory method which sets the ActionEvent source's  properties according to values from the Action instance.
|javax.swing.JComboBox.contentsChanged(ListDataEvent)|This method is public as an implementation side effect.
|javax.swing.JComboBox.createActionPropertyChangeListener(Action)|Factory method which creates the PropertyChangeListener  used to update the ActionEvent source as properties chan
|javax.swing.JComboBox.createDefaultKeySelectionManager()|Returns an instance of the default key-selection manager.
|javax.swing.JComboBox.fireActionEvent()|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.JComboBox.fireItemStateChanged(ItemEvent)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.JComboBox.firePopupMenuCanceled()|Notifies PopupMenuListeners that the popup portion of the   combo box has been canceled.
|javax.swing.JComboBox.firePopupMenuWillBecomeInvisible()|Notifies PopupMenuListeners that the popup portion of the  combo box has become invisible.
|javax.swing.JComboBox.firePopupMenuWillBecomeVisible()|Notifies PopupMenuListeners that the popup portion of the  combo box will become visible.
|javax.swing.JComboBox.getAccessibleContext()|Gets the AccessibleContext associated with this JComboBox.
|javax.swing.JComboBox.getAction()|Returns the currently set Action for this  ActionEvent source, or null if no  Action is set.
|javax.swing.JComboBox.getActionCommand()|Returns the action command that is included in the event sent to  action listeners.
|javax.swing.JComboBox.getActionListeners()|Returns an array of all the ActionListeners added  to this JComboBox with addActionListener().
|javax.swing.JComboBox.getEditor()|Returns the editor used to paint and edit the selected item in the   JComboBox field.
|javax.swing.JComboBox.getItemAt(int)|Returns the list item at the specified index.
|javax.swing.JComboBox.getItemCount()|Returns the number of items in the list.
|javax.swing.JComboBox.getItemListeners()|Returns an array of all the ItemListeners added  to this JComboBox with addItemListener().
|javax.swing.JComboBox.getKeySelectionManager()|Returns the list's key-selection manager.
|javax.swing.JComboBox.getMaximumRowCount()|Returns the maximum number of items the combo box can display   without a scrollbar
|javax.swing.JComboBox.getModel()|Returns the data model currently used by the JComboBox.
|javax.swing.JComboBox.getPopupMenuListeners()|Returns an array of all the PopupMenuListeners added  to this JComboBox with addPopupMenuListener().
|javax.swing.JComboBox.getPrototypeDisplayValue()|Returns the "prototypical display" value - an Object used  for the calculation of the display height and width.
|javax.swing.JComboBox.getRenderer()|Returns the renderer used to display the selected item in the   JComboBox field.
|javax.swing.JComboBox.getSelectedIndex()|Returns the first item in the list that matches the given item.
|javax.swing.JComboBox.getSelectedItem()|Returns the current selected item.
|javax.swing.JComboBox.getSelectedObjects()|Returns an array containing the selected item.
|javax.swing.JComboBox.getUI()|Returns the Lobject that renders this component.
|javax.swing.JComboBox.getUIClassID()|Returns the name of the Lclass that renders this component.
|javax.swing.JComboBox.hidePopup()|Causes the combo box to close its popup window.
|javax.swing.JComboBox.insertItemAt(Object,int)|Inserts an item into the item list at a given index.
|javax.swing.JComboBox.installAncestorListener()|
|javax.swing.JComboBox.intervalAdded(ListDataEvent)|This method is public as an implementation side effect.
|javax.swing.JComboBox.intervalRemoved(ListDataEvent)|This method is public as an implementation side effect.
|javax.swing.JComboBox.isEditable()|Returns true if the JComboBox is editable.
|javax.swing.JComboBox.isLightWeightPopupEnabled()|Gets the value of the lightWeightPopupEnabled  property.
|javax.swing.JComboBox.isPopupVisible()|Determines the visibility of the popup.
|javax.swing.JComboBox.paramString()|Returns a string representation of this JComboBox.
|javax.swing.JComboBox.processKeyEvent(KeyEvent)|Handles KeyEvents, looking for the Tab key.
|javax.swing.JComboBox.removeActionListener(ActionListener)|Removes an ActionListener.
|javax.swing.JComboBox.removeAllItems()|Removes all items from the item list.
|javax.swing.JComboBox.removeItem(Object)|Removes an item from the item list.
|javax.swing.JComboBox.removeItemAt(int)|Removes the item at anIndex  This method works only if the JComboBox uses a  mutable data model.
|javax.swing.JComboBox.removeItemListener(ItemListener)|Removes an ItemListener.
|javax.swing.JComboBox.removePopupMenuListener(PopupMenuListener)|Removes a PopupMenuListener.
|javax.swing.JComboBox.selectedItemChanged()|This protected method is implementation specific.
|javax.swing.JComboBox.selectWithKeyChar(char)|Selects the list item that corresponds to the specified keyboard  character and returns true, if there is an item corresponding  to 
|javax.swing.JComboBox.setAction(Action)|Sets the Action for the ActionEvent source.
|javax.swing.JComboBox.setActionCommand(String)|Sets the action command that should be included in the event  sent to action listeners.
|javax.swing.JComboBox.setEditable(boolean)|Determines whether the JComboBox field is editable.
|javax.swing.JComboBox.setEditor(ComboBoxEditor)|Sets the editor used to paint and edit the selected item in the   JComboBox field.
|javax.swing.JComboBox.setEnabled(boolean)|Enables the combo box so that items can be selected.
|javax.swing.JComboBox.setKeySelectionManager(JComboBox.KeySelectionManager)|Sets the object that translates a keyboard character into a list  selection.
|javax.swing.JComboBox.setLightWeightPopupEnabled(boolean)|Sets the lightWeightPopupEnabled property, which  provides a hint as to whether or not a lightweight  Component should b
|javax.swing.JComboBox.setMaximumRowCount(int)|Sets the maximum number of rows the JComboBox displays.
|javax.swing.JComboBox.setModel(ComboBoxModel)|Sets the data model that the JComboBox uses to obtain  the list of items.
|javax.swing.JComboBox.setPopupVisible(boolean)|Sets the visibility of the popup.
|javax.swing.JComboBox.setPrototypeDisplayValue(Object)|Sets the prototype display value used to calculate the size of the display   for the UI portion.
|javax.swing.JComboBox.setRenderer(ListCellRenderer)|Sets the renderer that paints the list items and the item selected from the list in  the JComboBox field.
|javax.swing.JComboBox.setSelectedIndex(int)|Selects the item at index anIndex.
|javax.swing.JComboBox.setSelectedItem(Object)|Sets the selected item in the combo box display area to the object in   the argument.
|javax.swing.JComboBox.setUI(ComboBoxUI)|Sets the Lobject that renders this component.
|javax.swing.JComboBox.showPopup()|Causes the combo box to display its popup window.
|javax.swing.JComboBox.updateUI()|Resets the UI property to a value from the current look and feel.

*javax.swing.JComboBox_Description*

A component that combines a button or editable field and a drop-down list. The user can select a value from the drop-down list, which appears at the user's request. If you make 
the combo box editable, then the combo box includes an editable field into which the user can type a value. 

For the keyboard keys used by this component in the standard Look and Feel (Lrenditions, see the JComboBox key assignments. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 

See How to Use Combo Boxes in The Java Tutorial for further information. 



*java.lang.String_javax.swing.JComboBox.actionCommand*

This protected field is implementation specific. Do not access directly or override. Use the accessor methods instead. 


*javax.swing.ComboBoxModel_javax.swing.JComboBox.dataModel*

This protected field is implementation specific. Do not access directly or override. Use the accessor methods instead. 


*javax.swing.ComboBoxEditor_javax.swing.JComboBox.editor*

This protected field is implementation specific. Do not access directly or override. Use the accessor methods instead. 


*boolean_javax.swing.JComboBox.isEditable*

This protected field is implementation specific. Do not access directly or override. Use the accessor methods instead. 


*javax.swing.JComboBox.KeySelectionManager_javax.swing.JComboBox.keySelectionManager*

This protected field is implementation specific. Do not access directly or override. Use the accessor methods instead. 


*boolean_javax.swing.JComboBox.lightWeightPopupEnabled*

This protected field is implementation specific. Do not access directly or override. Use the accessor methods instead. 


*int_javax.swing.JComboBox.maximumRowCount*

This protected field is implementation specific. Do not access directly or override. Use the accessor methods instead. 


*javax.swing.ListCellRenderer_javax.swing.JComboBox.renderer*

This protected field is implementation specific. Do not access directly or override. Use the accessor methods instead. 


*java.lang.Object_javax.swing.JComboBox.selectedItemReminder*

This protected field is implementation specific. Do not access directly or override. 



*javax.swing.JComboBox()*

public JComboBox()

Creates a JComboBox with a default data model. The default data model is an empty list of objects. Use addItem to add items. By default the first item in the data model becomes 
selected. 


*javax.swing.JComboBox(ComboBoxModel)*

public JComboBox(javax.swing.ComboBoxModel aModel)

Creates a JComboBox that takes it's items from an existing ComboBoxModel. Since the ComboBoxModel is provided, a combo box created using this constructor does not create a default 
combo box model and may impact how the insert, remove and add methods behave. 

    aModel - the ComboBoxModel that provides the displayed list of items 

*javax.swing.JComboBox(Object[])*

public JComboBox(java.lang.Object[] items)

Creates a JComboBox that contains the elements in the specified array. By default the first item in the array (and therefore the data model) becomes selected. 

    items - an array of objects to insert into the combo box 

*javax.swing.JComboBox(Vector<?>)*

public JComboBox(java.util.Vector<?> items)

Creates a JComboBox that contains the elements in the specified Vector. By default the first item in the vector and therefore the data model) becomes selected. 

    items - an array of vectors to insert into the combo box 

*javax.swing.JComboBox.actionPerformed(ActionEvent)*

public void actionPerformed(java.awt.event.ActionEvent e)

This method is public as an implementation side effect. do not call or override. 



*javax.swing.JComboBox.addActionListener(ActionListener)*

public void addActionListener(java.awt.event.ActionListener l)

Adds an ActionListener. 

The ActionListener will receive an ActionEvent when a selection has been made. If the combo box is editable, then an ActionEvent will be fired when editing has stopped. 


    l - the ActionListener that is to be notified 

*javax.swing.JComboBox.addItem(Object)*

public void addItem(java.lang.Object anObject)

Adds an item to the item list. This method works only if the JComboBox uses a mutable data model. 

Warning: Focus and keyboard navigation problems may arise if you add duplicate String objects. A workaround is to add new objects instead of String objects and make sure that the 
toString() method is defined. For example: 

comboBox.addItem(makeObj("Item 1")); comboBox.addItem(makeObj("Item 1")); ... private Object makeObj(final String item) { return new Object() { public String toString() { return 
item; } }; } 


    anObject - the Object to add to the list 

*javax.swing.JComboBox.addItemListener(ItemListener)*

public void addItemListener(java.awt.event.ItemListener aListener)

Adds an ItemListener. 

aListener will receive one or two ItemEvents when the selected item changes. 


    aListener - the ItemListener that is to be notified 

*javax.swing.JComboBox.addPopupMenuListener(PopupMenuListener)*

public void addPopupMenuListener(javax.swing.event.PopupMenuListener l)

Adds a PopupMenu listener which will listen to notification messages from the popup portion of the combo box. 

For all standard look and feels shipped with Java 2, the popup list portion of combo box is implemented as a JPopupMenu. A custom look and feel may not implement it this way and 
will therefore not receive the notification. 


    l - the PopupMenuListener to add 

*javax.swing.JComboBox.configureEditor(ComboBoxEditor,Object)*

public void configureEditor(
  javax.swing.ComboBoxEditor anEditor,
  java.lang.Object anItem)

Initializes the editor with the specified item. 


    anEditor - the ComboBoxEditor that displays the list item in the combo box field and allows it to be edited 
    anItem - the object to display and edit in the field 

*javax.swing.JComboBox.configurePropertiesFromAction(Action)*

protected void configurePropertiesFromAction(javax.swing.Action a)

Factory method which sets the ActionEvent source's properties according to values from the Action instance. The properties which are set may differ for subclasses. By default, the 
properties which get set are Enabled and ToolTipText. 


    a - the Action from which to get the properties, or null 

*javax.swing.JComboBox.contentsChanged(ListDataEvent)*

public void contentsChanged(javax.swing.event.ListDataEvent e)

This method is public as an implementation side effect. do not call or override. 



*javax.swing.JComboBox.createActionPropertyChangeListener(Action)*

protected |java.beans.PropertyChangeListener| createActionPropertyChangeListener(javax.swing.Action a)

Factory method which creates the PropertyChangeListener used to update the ActionEvent source as properties change on its Action instance. Subclasses may override this in order to 
provide their own PropertyChangeListener if the set of properties which should be kept up to date differs from the default properties (Text, Icon, Enabled, ToolTipText). 

Note that PropertyChangeListeners should avoid holding strong references to the ActionEvent source, as this may hinder garbage collection of the ActionEvent source and all 
components in its containment hierarchy. 



*javax.swing.JComboBox.createDefaultKeySelectionManager()*

protected |javax.swing.JComboBox.KeySelectionManager| createDefaultKeySelectionManager()

Returns an instance of the default key-selection manager. 



    Returns: the KeySelectionManager currently used by the list 

*javax.swing.JComboBox.fireActionEvent()*

protected void fireActionEvent()

Notifies all listeners that have registered interest for notification on this event type. 



*javax.swing.JComboBox.fireItemStateChanged(ItemEvent)*

protected void fireItemStateChanged(java.awt.event.ItemEvent e)

Notifies all listeners that have registered interest for notification on this event type. 


    e - the event of interest 

*javax.swing.JComboBox.firePopupMenuCanceled()*

public void firePopupMenuCanceled()

Notifies PopupMenuListeners that the popup portion of the combo box has been canceled. 

This method is public but should not be called by anything other than the UI delegate. 



*javax.swing.JComboBox.firePopupMenuWillBecomeInvisible()*

public void firePopupMenuWillBecomeInvisible()

Notifies PopupMenuListeners that the popup portion of the combo box has become invisible. 

This method is public but should not be called by anything other than the UI delegate. 



*javax.swing.JComboBox.firePopupMenuWillBecomeVisible()*

public void firePopupMenuWillBecomeVisible()

Notifies PopupMenuListeners that the popup portion of the combo box will become visible. 

This method is public but should not be called by anything other than the UI delegate. 



*javax.swing.JComboBox.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JComboBox. For combo boxes, the AccessibleContext takes the form of an AccessibleJComboBox. A new AccessibleJComboBox instance is 
created if necessary. 



    Returns: an AccessibleJComboBox that serves as the AccessibleContext of this JComboBox 

*javax.swing.JComboBox.getAction()*

public |javax.swing.Action| getAction()

Returns the currently set Action for this ActionEvent source, or null if no Action is set. 



    Returns: the Action for this ActionEvent source; or null 

*javax.swing.JComboBox.getActionCommand()*

public |java.lang.String| getActionCommand()

Returns the action command that is included in the event sent to action listeners. 



    Returns: the string containing the "command" that is sent to action listeners. 

*javax.swing.JComboBox.getActionListeners()*

public |java.awt.event.ActionListener|[] getActionListeners()

Returns an array of all the ActionListeners added to this JComboBox with addActionListener(). 



    Returns: all of the ActionListeners added or an empty array if no listeners have been added 

*javax.swing.JComboBox.getEditor()*

public |javax.swing.ComboBoxEditor| getEditor()

Returns the editor used to paint and edit the selected item in the JComboBox field. 



    Returns: the ComboBoxEditor that displays the selected item 

*javax.swing.JComboBox.getItemAt(int)*

public |java.lang.Object| getItemAt(int index)

Returns the list item at the specified index. If index is out of range (less than zero or greater than or equal to size) it will return null. 


    index - an integer indicating the list position, where the first item starts at zero 

    Returns: the Object at that list position; or null if out of range 

*javax.swing.JComboBox.getItemCount()*

public int getItemCount()

Returns the number of items in the list. 



    Returns: an integer equal to the number of items in the list 

*javax.swing.JComboBox.getItemListeners()*

public |java.awt.event.ItemListener|[] getItemListeners()

Returns an array of all the ItemListeners added to this JComboBox with addItemListener(). 



    Returns: all of the ItemListeners added or an empty array if no listeners have been added 

*javax.swing.JComboBox.getKeySelectionManager()*

public |javax.swing.JComboBox.KeySelectionManager| getKeySelectionManager()

Returns the list's key-selection manager. 



    Returns: the KeySelectionManager currently in use 

*javax.swing.JComboBox.getMaximumRowCount()*

public int getMaximumRowCount()

Returns the maximum number of items the combo box can display without a scrollbar 



    Returns: an integer specifying the maximum number of items that are displayed in the list before using a scrollbar 

*javax.swing.JComboBox.getModel()*

public |javax.swing.ComboBoxModel| getModel()

Returns the data model currently used by the JComboBox. 



    Returns: the ComboBoxModel that provides the displayed list of items 

*javax.swing.JComboBox.getPopupMenuListeners()*

public |javax.swing.event.PopupMenuListener|[] getPopupMenuListeners()

Returns an array of all the PopupMenuListeners added to this JComboBox with addPopupMenuListener(). 



    Returns: all of the PopupMenuListeners added or an empty array if no listeners have been added 

*javax.swing.JComboBox.getPrototypeDisplayValue()*

public |java.lang.Object| getPrototypeDisplayValue()

Returns the "prototypical display" value - an Object used for the calculation of the display height and width. 



    Returns: the value of the prototypeDisplayValue property 

*javax.swing.JComboBox.getRenderer()*

public |javax.swing.ListCellRenderer| getRenderer()

Returns the renderer used to display the selected item in the JComboBox field. 



    Returns: the ListCellRenderer that displays the selected item. 

*javax.swing.JComboBox.getSelectedIndex()*

public int getSelectedIndex()

Returns the first item in the list that matches the given item. The result is not always defined if the JComboBox allows selected items that are not in the list. Returns -1 if 
there is no selected item or if the user specified an item which is not in the list. 



    Returns: an integer specifying the currently selected list item, where 0 specifies the first item in the list; or -1 if no item is selected or if the currently selected item is not in the 
             list 

*javax.swing.JComboBox.getSelectedItem()*

public |java.lang.Object| getSelectedItem()

Returns the current selected item. 

If the combo box is editable, then this value may not have been added to the combo box with addItem, insertItemAt or the data constructors. 



    Returns: the current selected Object 

*javax.swing.JComboBox.getSelectedObjects()*

public |java.lang.Object|[] getSelectedObjects()

Returns an array containing the selected item. This method is implemented for compatibility with ItemSelectable. 



    Returns: an array of Objects containing one element -- the selected item 

*javax.swing.JComboBox.getUI()*

public |javax.swing.plaf.ComboBoxUI| getUI()

Returns the Lobject that renders this component. 



    Returns: the ComboBoxUI object that renders this component 

*javax.swing.JComboBox.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the name of the Lclass that renders this component. 



    Returns: the string "ComboBoxUI" 

*javax.swing.JComboBox.hidePopup()*

public void hidePopup()

Causes the combo box to close its popup window. 



*javax.swing.JComboBox.insertItemAt(Object,int)*

public void insertItemAt(
  java.lang.Object anObject,
  int index)

Inserts an item into the item list at a given index. This method works only if the JComboBox uses a mutable data model. 


    anObject - the Object to add to the list 
    index - an integer specifying the position at which to add the item 

*javax.swing.JComboBox.installAncestorListener()*

protected void installAncestorListener()





*javax.swing.JComboBox.intervalAdded(ListDataEvent)*

public void intervalAdded(javax.swing.event.ListDataEvent e)

This method is public as an implementation side effect. do not call or override. 



*javax.swing.JComboBox.intervalRemoved(ListDataEvent)*

public void intervalRemoved(javax.swing.event.ListDataEvent e)

This method is public as an implementation side effect. do not call or override. 



*javax.swing.JComboBox.isEditable()*

public boolean isEditable()

Returns true if the JComboBox is editable. By default, a combo box is not editable. 



    Returns: true if the JComboBox is editable, else false 

*javax.swing.JComboBox.isLightWeightPopupEnabled()*

public boolean isLightWeightPopupEnabled()

Gets the value of the lightWeightPopupEnabled property. 



    Returns: the value of the lightWeightPopupEnabled property 

*javax.swing.JComboBox.isPopupVisible()*

public boolean isPopupVisible()

Determines the visibility of the popup. 



    Returns: true if the popup is visible, otherwise returns false 

*javax.swing.JComboBox.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JComboBox. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary 
between implementations. The returned string may be empty but may not be null. 



    Returns: a string representation of this JComboBox 

*javax.swing.JComboBox.processKeyEvent(KeyEvent)*

public void processKeyEvent(java.awt.event.KeyEvent e)

Handles KeyEvents, looking for the Tab key. If the Tab key is found, the popup window is closed. 


    e - the KeyEvent containing the keyboard key that was pressed 

*javax.swing.JComboBox.removeActionListener(ActionListener)*

public void removeActionListener(java.awt.event.ActionListener l)

Removes an ActionListener. 


    l - the ActionListener to remove 

*javax.swing.JComboBox.removeAllItems()*

public void removeAllItems()

Removes all items from the item list. 



*javax.swing.JComboBox.removeItem(Object)*

public void removeItem(java.lang.Object anObject)

Removes an item from the item list. This method works only if the JComboBox uses a mutable data model. 


    anObject - the object to remove from the item list 

*javax.swing.JComboBox.removeItemAt(int)*

public void removeItemAt(int anIndex)

Removes the item at anIndex This method works only if the JComboBox uses a mutable data model. 


    anIndex - an int specifying the index of the item to remove, where 0 indicates the first item in the list 

*javax.swing.JComboBox.removeItemListener(ItemListener)*

public void removeItemListener(java.awt.event.ItemListener aListener)

Removes an ItemListener. 


    aListener - the ItemListener to remove 

*javax.swing.JComboBox.removePopupMenuListener(PopupMenuListener)*

public void removePopupMenuListener(javax.swing.event.PopupMenuListener l)

Removes a PopupMenuListener. 


    l - the PopupMenuListener to remove 

*javax.swing.JComboBox.selectedItemChanged()*

protected void selectedItemChanged()

This protected method is implementation specific. Do not access directly or override. 



*javax.swing.JComboBox.selectWithKeyChar(char)*

public boolean selectWithKeyChar(char keyChar)

Selects the list item that corresponds to the specified keyboard character and returns true, if there is an item corresponding to that character. Otherwise, returns false. 


    keyChar - a char, typically this is a keyboard key typed by the user 

*javax.swing.JComboBox.setAction(Action)*

public void setAction(javax.swing.Action a)

Sets the Action for the ActionEvent source. The new Action replaces any previously set Action but does not affect ActionListeners independently added with addActionListener. If 
the Action is already a registered ActionListener for the ActionEvent source, it is not re-registered. 

A side-effect of setting the Action is that the ActionEvent source's properties are immedately set from the values in the Action (performed by the method 
configurePropertiesFromAction) and subsequently updated as the Action's properties change (via a PropertyChangeListener created by the method createActionPropertyChangeListener. 


    a - the Action for the JComboBox, or null. 

*javax.swing.JComboBox.setActionCommand(String)*

public void setActionCommand(java.lang.String aCommand)

Sets the action command that should be included in the event sent to action listeners. 


    aCommand - a string containing the "command" that is sent to action listeners; the same listener can then do different things depending on the command it receives 

*javax.swing.JComboBox.setEditable(boolean)*

public void setEditable(boolean aFlag)

Determines whether the JComboBox field is editable. An editable JComboBox allows the user to type into the field or selected an item from the list to initialize the field, after 
which it can be edited. (The editing affects only the field, the list item remains intact.) A non editable JComboBox displays the selected item in the field, but the selection 
cannot be modified. 


    aFlag - a boolean value, where true indicates that the field is editable 

*javax.swing.JComboBox.setEditor(ComboBoxEditor)*

public void setEditor(javax.swing.ComboBoxEditor anEditor)

Sets the editor used to paint and edit the selected item in the JComboBox field. The editor is used only if the receiving JComboBox is editable. If not editable, the combo box 
uses the renderer to paint the selected item. 


    anEditor - the ComboBoxEditor that displays the selected item 

*javax.swing.JComboBox.setEnabled(boolean)*

public void setEnabled(boolean b)

Enables the combo box so that items can be selected. When the combo box is disabled, items cannot be selected and values cannot be typed into its field (if it is editable). 


    b - a boolean value, where true enables the component and false disables it 

*javax.swing.JComboBox.setKeySelectionManager(JComboBox.KeySelectionManager)*

public void setKeySelectionManager(javax.swing.JComboBox.KeySelectionManager aManager)

Sets the object that translates a keyboard character into a list selection. Typically, the first selection with a matching first character becomes the selected item. 



*javax.swing.JComboBox.setLightWeightPopupEnabled(boolean)*

public void setLightWeightPopupEnabled(boolean aFlag)

Sets the lightWeightPopupEnabled property, which provides a hint as to whether or not a lightweight Component should be used to contain the JComboBox, versus a heavyweight 
Component such as a Panel or a Window. The decision of lightweight versus heavyweight is ultimately up to the JComboBox. Lightweight windows are more efficient than heavyweight 
windows, but lightweight and heavyweight components do not mix well in a GUI. If your application mixes lightweight and heavyweight components, you should disable lightweight 
popups. The default value for the lightWeightPopupEnabled property is true, unless otherwise specified by the look and feel. Some look and feels always use heavyweight popups, no 
matter what the value of this property. 

See the article Mixing Heavy and Light Components on The Swing Connection This method fires a property changed event. 


    aFlag - if true, lightweight popups are desired 

*javax.swing.JComboBox.setMaximumRowCount(int)*

public void setMaximumRowCount(int count)

Sets the maximum number of rows the JComboBox displays. If the number of objects in the model is greater than count, the combo box uses a scrollbar. 


    count - an integer specifying the maximum number of items to display in the list before using a scrollbar 

*javax.swing.JComboBox.setModel(ComboBoxModel)*

public void setModel(javax.swing.ComboBoxModel aModel)

Sets the data model that the JComboBox uses to obtain the list of items. 


    aModel - the ComboBoxModel that provides the displayed list of items 

*javax.swing.JComboBox.setPopupVisible(boolean)*

public void setPopupVisible(boolean v)

Sets the visibility of the popup. 



*javax.swing.JComboBox.setPrototypeDisplayValue(Object)*

public void setPrototypeDisplayValue(java.lang.Object prototypeDisplayValue)

Sets the prototype display value used to calculate the size of the display for the UI portion. 

If a prototype display value is specified, the preferred size of the combo box is calculated by configuring the renderer with the prototype display value and obtaining its 
preferred size. Specifying the preferred display value is often useful when the combo box will be displaying large amounts of data. If no prototype display value has been 
specified, the renderer must be configured for each value from the model and its preferred size obtained, which can be relatively expensive. 


    prototypeDisplayValue - 

*javax.swing.JComboBox.setRenderer(ListCellRenderer)*

public void setRenderer(javax.swing.ListCellRenderer aRenderer)

Sets the renderer that paints the list items and the item selected from the list in the JComboBox field. The renderer is used if the JComboBox is not editable. If it is editable, 
the editor is used to render and edit the selected item. 

The default renderer displays a string or an icon. Other renderers can handle graphic images and composite items. 

To display the selected item, aRenderer.getListCellRendererComponent is called, passing the list object and an index of -1. 


    aRenderer - the ListCellRenderer that displays the selected item 

*javax.swing.JComboBox.setSelectedIndex(int)*

public void setSelectedIndex(int anIndex)

Selects the item at index anIndex. 


    anIndex - an integer specifying the list item to select, where 0 specifies the first item in the list and -1 indicates no selection 

*javax.swing.JComboBox.setSelectedItem(Object)*

public void setSelectedItem(java.lang.Object anObject)

Sets the selected item in the combo box display area to the object in the argument. If anObject is in the list, the display area shows anObject selected. 

If anObject is not in the list and the combo box is uneditable, it will not change the current selection. For editable combo boxes, the selection will change to anObject. 

If this constitutes a change in the selected item, ItemListeners added to the combo box will be notified with one or two ItemEvents. If there is a current selected item, an 
ItemEvent will be fired and the state change will be ItemEvent.DESELECTED. If anObject is in the list and is not currently selected then an ItemEvent will be fired and the state 
change will be ItemEvent.SELECTED. 

ActionListeners added to the combo box will be notified with an ActionEvent when this method is called. 


    anObject - the list object to select; use null to clear the selection 

*javax.swing.JComboBox.setUI(ComboBoxUI)*

public void setUI(javax.swing.plaf.ComboBoxUI ui)

Sets the Lobject that renders this component. 


    ui - the ComboBoxUI Lobject 

*javax.swing.JComboBox.showPopup()*

public void showPopup()

Causes the combo box to display its popup window. 



*javax.swing.JComboBox.updateUI()*

public void updateUI()

Resets the UI property to a value from the current look and feel. 





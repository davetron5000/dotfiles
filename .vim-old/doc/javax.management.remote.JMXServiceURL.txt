*javax.management.remote.JMXServiceURL* *JMXServiceURL* The address of a JMX API

public class JMXServiceURL
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|javax.management.remote.JMXServiceURL_Description|
|javax.management.remote.JMXServiceURL_Fields|
|javax.management.remote.JMXServiceURL_Constructors|
|javax.management.remote.JMXServiceURL_Methods|

================================================================================

*javax.management.remote.JMXServiceURL_Constructors*
|javax.management.remote.JMXServiceURL(String)|Constructs a JMXServiceURL by pa
|javax.management.remote.JMXServiceURL(String,String,int)|Constructs a JMXServi
|javax.management.remote.JMXServiceURL(String,String,int,String)|Constructs a J

*javax.management.remote.JMXServiceURL_Methods*
|javax.management.remote.JMXServiceURL.equals(Object)|Indicates whether some ot
|javax.management.remote.JMXServiceURL.getHost()|The host part of the Service U
|javax.management.remote.JMXServiceURL.getPort()|The port of the Service URL.
|javax.management.remote.JMXServiceURL.getProtocol()|The protocol part of the S
|javax.management.remote.JMXServiceURL.getURLPath()|The URL Path part of the Se
|javax.management.remote.JMXServiceURL.hashCode()|
|javax.management.remote.JMXServiceURL.toString()|The string representation of 

*javax.management.remote.JMXServiceURL_Description*

The address of a JMX API connector server. Instances of this class are 
immutable. 

The address is an Abstract Service URL for SLP, as defined in RFC 2609 and 
amended by RFC 3111. It must look like this: 



service:jmx:protocol:sap 



Here, protocol is the transport protocol to be used to connect to the connector 
server. It is a string of one or more ASCII characters, each of which is a 
letter, a digit, or one of the characters + or -. The first character must be a 
letter. Uppercase letters are converted into lowercase ones. 

sap is the address at which the connector server is found. This address uses a 
subset of the syntax defined by RFC 2609 for IP-based protocols. It is a subset 
because the user@host syntax is not supported. 

The other syntaxes defined by RFC 2609 are not currently supported by this 
class. 

The supported syntax is: 



//[host[:port]][url-path] 



Square brackets [] indicate optional parts of the address. Not all protocols 
will recognize all optional parts. 

The host is a host name, an IPv4 numeric host address, or an IPv6 numeric 
address enclosed in square brackets. 

The port is a decimal port number. 0 means a default or anonymous port, 
depending on the protocol. 

The host and port can be omitted. The port cannot be supplied without a host. 

The url-path, if any, begins with a slash (/) or a semicolon (;) and continues 
to the end of the address. It can contain attributes using the semicolon syntax 
specified in RFC 2609. Those attributes are not parsed by this class and 
incorrect attribute syntax is not detected. 

Although it is legal according to RFC 2609 to have a url-path that begins with 
a semicolon, not all implementations of SLP allow it, so it is recommended to 
avoid that syntax. 

Case is not significant in the initial service:jmx:protocol string or in the 
host part of the address. Depending on the protocol, case can be significant in 
the url-path. 


*javax.management.remote.JMXServiceURL(String)*

public JMXServiceURL(java.lang.String serviceURL)
  throws |java.net.MalformedURLException|
         
Constructs a JMXServiceURL by parsing a Service URL string. 

    serviceURL - the URL string to be parsed. 

*javax.management.remote.JMXServiceURL(String,String,int)*

public JMXServiceURL(
  java.lang.String protocol,
  java.lang.String host,
  int port)
  throws |java.net.MalformedURLException|
         
Constructs a JMXServiceURL with the given protocol, host, and port. This 
constructor is equivalent to JMXServiceURL(protocol, host, port, 
null)(|javax.management.remote.JMXServiceURL|) . 

    protocol - the protocol part of the URL. If null, defaults to jmxmp. 
    host - the host part of the URL. If null, defaults to the local host name, as 
       determined by InetAddress.getLocalHost().getHostName(). If it is a 
       numeric IPv6 address, it can optionally be enclosed in square brackets 
       []. 
    port - the port part of the URL. 

*javax.management.remote.JMXServiceURL(String,String,int,String)*

public JMXServiceURL(
  java.lang.String protocol,
  java.lang.String host,
  int port,
  java.lang.String urlPath)
  throws |java.net.MalformedURLException|
         
Constructs a JMXServiceURL with the given parts. 

    protocol - the protocol part of the URL. If null, defaults to jmxmp. 
    host - the host part of the URL. If null, defaults to the local host name, as 
       determined by InetAddress.getLocalHost().getHostName(). If it is a 
       numeric IPv6 address, it can optionally be enclosed in square brackets 
       []. 
    port - the port part of the URL. 
    urlPath - the URL path part of the URL. If null, defaults to the empty string. 

*javax.management.remote.JMXServiceURL.equals(Object)*

public boolean equals(java.lang.Object obj)

Indicates whether some other object is equal to this one. This method returns 
true if and only if obj is an instance of JMXServiceURL whose 
(|javax.management.remote.JMXServiceURL|) , 
(|javax.management.remote.JMXServiceURL|) , 
(|javax.management.remote.JMXServiceURL|) , and 
(|javax.management.remote.JMXServiceURL|) methods return the same values as for 
this object. The values for (|javax.management.remote.JMXServiceURL|) and 
(|javax.management.remote.JMXServiceURL|) can differ in case without affecting 
equality. 

    obj - the reference object with which to compare. 

    Returns: true if this object is the same as the obj argument; false otherwise. 
*javax.management.remote.JMXServiceURL.getHost()*

public |java.lang.String| getHost()

The host part of the Service URL. If the Service URL was constructed with the 
constructor that takes a URL string parameter, the result is the substring 
specifying the host in that URL. If the Service URL was constructed with a 
constructor that takes a separate host parameter, the result is the string that 
was specified. If that string was null, the result is 
InetAddress.getLocalHost().getHostName(). 

In either case, if the host was specified using the [...] syntax for numeric 
IPv6 addresses, the square brackets are not included in the return value here. 


    Returns: the host part of the Service URL. This is never null. 
*javax.management.remote.JMXServiceURL.getPort()*

public int getPort()

The port of the Service URL. If no port was specified, the returned value is 0. 


    Returns: the port of the Service URL, or 0 if none. 
*javax.management.remote.JMXServiceURL.getProtocol()*

public |java.lang.String| getProtocol()

The protocol part of the Service URL. 


    Returns: the protocol part of the Service URL. This is never null. 
*javax.management.remote.JMXServiceURL.getURLPath()*

public |java.lang.String| getURLPath()

The URL Path part of the Service URL. This is an empty string, or a string 
beginning with a slash (/), or a string beginning with a semicolon (;). 


    Returns: the URL Path part of the Service URL. This is never null. 
*javax.management.remote.JMXServiceURL.hashCode()*

public int hashCode()




*javax.management.remote.JMXServiceURL.toString()*

public |java.lang.String| toString()

The string representation of this Service URL. If the value returned by this 
method is supplied to the JMXServiceURL constructor, the resultant object is 
equal to this one. 

The host part of the returned string is the value returned by 
(|javax.management.remote.JMXServiceURL|) . If that value specifies a numeric 
IPv6 address, it is surrounded by square brackets []. 

The port part of the returned string is the value returned by 
(|javax.management.remote.JMXServiceURL|) in its shortest decimal form. If the 
value is zero, it is omitted. 


    Returns: the string representation of this Service URL. 


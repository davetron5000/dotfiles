*java.security.cert.PolicyNode* *PolicyNode* An immutable valid policy tree node as defined by the PKIX certification 
 path validation algorithm.

public interface interface PolicyNode


|java.security.cert.PolicyNode_Description|
|java.security.cert.PolicyNode_Fields|
|java.security.cert.PolicyNode_Constructors|
|java.security.cert.PolicyNode_Methods|

====================================================================================================================================================================================

*java.security.cert.PolicyNode_Methods*
|java.security.cert.PolicyNode.getChildren()|Returns an iterator over the children of this node.
|java.security.cert.PolicyNode.getDepth()|Returns the depth of this node in the valid policy tree.
|java.security.cert.PolicyNode.getExpectedPolicies()|Returns the set of expected policies that would satisfy this  node's valid policy in the next certificate to be processed.
|java.security.cert.PolicyNode.getParent()|Returns the parent of this node, or null if this is the   root node.
|java.security.cert.PolicyNode.getPolicyQualifiers()|Returns the set of policy qualifiers associated with the  valid policy represented by this node.
|java.security.cert.PolicyNode.getValidPolicy()|Returns the valid policy represented by this node.
|java.security.cert.PolicyNode.isCritical()|Returns the criticality indicator of the certificate policy extension  in the most recently processed certificate.

*java.security.cert.PolicyNode_Description*

An immutable valid policy tree node as defined by the PKIX certification path validation algorithm. 

One of the outputs of the PKIX certification path validation algorithm is a valid policy tree, which includes the policies that were determined to be valid, how this determination 
was reached, and any policy qualifiers encountered. This tree is of depth n, where n is the length of the certification path that has been validated. 

Most applications will not need to examine the valid policy tree. They can achieve their policy processing goals by setting the policy-related parameters in PKIXParameters. 
However, the valid policy tree is available for more sophisticated applications, especially those that process policy qualifiers. 

PKIXCertPathValidatorResult.getPolicyTree(|java.security.cert.PKIXCertPathValidatorResult|) returns the root node of the valid policy tree. The tree can be traversed using the 
getChildren(|java.security.cert.PolicyNode|) and getParent(|java.security.cert.PolicyNode|) methods. Data about a particular node can be retrieved using other methods of 
PolicyNode. 

Concurrent Access All PolicyNode objects must be immutable and thread-safe. Multiple threads may concurrently invoke the methods defined in this class on a single PolicyNode 
object (or more than one) with no ill effects. This stipulation applies to all public fields and methods of this class and any added or overridden by subclasses. 



*java.security.cert.PolicyNode.getChildren()*

public |java.util.Iterator|<? extends java.security.cert.PolicyNode> getChildren()

Returns an iterator over the children of this node. Any attempts to modify the children of this node through the Iterator's remove method must throw an 
UnsupportedOperationException. 



    Returns: an iterator over the children of this node 

*java.security.cert.PolicyNode.getDepth()*

public int getDepth()

Returns the depth of this node in the valid policy tree. 



    Returns: the depth of this node (0 for the root node, 1 for its children, and so on) 

*java.security.cert.PolicyNode.getExpectedPolicies()*

public |java.util.Set|<String> getExpectedPolicies()

Returns the set of expected policies that would satisfy this node's valid policy in the next certificate to be processed. 



    Returns: an immutable Set of expected policy String OIDs, or an immutable Set with the single special value "any-policy". For the root node, this method always returns a Set with the 
             single value "any-policy". 

*java.security.cert.PolicyNode.getParent()*

public |java.security.cert.PolicyNode| getParent()

Returns the parent of this node, or null if this is the root node. 



    Returns: the parent of this node, or null if this is the root node 

*java.security.cert.PolicyNode.getPolicyQualifiers()*

public |java.util.Set|<? extends java.security.cert.PolicyQualifierInfo> getPolicyQualifiers()

Returns the set of policy qualifiers associated with the valid policy represented by this node. 



    Returns: an immutable Set of PolicyQualifierInfos. For the root node, this is always an empty Set. 

*java.security.cert.PolicyNode.getValidPolicy()*

public |java.lang.String| getValidPolicy()

Returns the valid policy represented by this node. 



    Returns: the String OID of the valid policy represented by this node, or the special value "any-policy". For the root node, this method always returns the special value "any-policy". 

*java.security.cert.PolicyNode.isCritical()*

public boolean isCritical()

Returns the criticality indicator of the certificate policy extension in the most recently processed certificate. 



    Returns: true if extension marked critical, false otherwise. For the root node, false is always returned. 



*java.security.CodeSource* *CodeSource* This class extends the concept of a codebase to
 encapsulate not only the location (URL) but also the certificate chains 
 that were used to

public class CodeSource
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.security.CodeSource_Description|
|java.security.CodeSource_Fields|
|java.security.CodeSource_Constructors|
|java.security.CodeSource_Methods|

====================================================================================================================================================================================

*java.security.CodeSource_Constructors*
|java.security.CodeSource(URL,Certificate[])|Constructs a CodeSource and associates it with the specified   location and set of certificates.
|java.security.CodeSource(URL,CodeSigner[])|Constructs a CodeSource and associates it with the specified   location and set of code signers.

*java.security.CodeSource_Methods*
|java.security.CodeSource.equals(Object)|Tests for equality between the specified object and this  object.
|java.security.CodeSource.getCertificates()|Returns the certificates associated with this CodeSource.
|java.security.CodeSource.getCodeSigners()|Returns the code signers associated with this CodeSource.
|java.security.CodeSource.getLocation()|Returns the location associated with this CodeSource.
|java.security.CodeSource.hashCode()|Returns the hash code value for this object.
|java.security.CodeSource.implies(CodeSource)|Returns true if this CodeSource object "implies" the specified CodeSource.
|java.security.CodeSource.toString()|Returns a string describing this CodeSource, telling its  URL and certificates.

*java.security.CodeSource_Description*

This class extends the concept of a codebase to encapsulate not only the location (URL) but also the certificate chains that were used to verify signed code originating from that 
location. 



*java.security.CodeSource(URL,Certificate[])*

public CodeSource(
  java.net.URL url,
  java.security.cert.Certificate[] certs)

Constructs a CodeSource and associates it with the specified location and set of certificates. 

    url - the location (URL). 
    certs - the certificate(s). It may be null. The contents of the array are copied to protect against subsequent modification. 

*java.security.CodeSource(URL,CodeSigner[])*

public CodeSource(
  java.net.URL url,
  java.security.CodeSigner[] signers)

Constructs a CodeSource and associates it with the specified location and set of code signers. 

    url - the location (URL). 
    signers - the code signers. It may be null. The contents of the array are copied to protect against subsequent modification. 

*java.security.CodeSource.equals(Object)*

public boolean equals(java.lang.Object obj)

Tests for equality between the specified object and this object. Two CodeSource objects are considered equal if their locations are of identical value and if their signer 
certificate chains are of identical value. It is not required that the certificate chains be in the same order. 


    obj - the object to test for equality with this object. 

    Returns: true if the objects are considered equal, false otherwise. 

*java.security.CodeSource.getCertificates()*

public final |java.security.cert.Certificate|[] getCertificates()

Returns the certificates associated with this CodeSource. 

If this CodeSource object was created using the (|java.security.CodeSource|) constructor then its certificate chains are extracted and used to create an array of Certificate 
objects. Each signer certificate is followed by its supporting certificate chain (which may be empty). Each signer certificate and its supporting certificate chain is ordered 
bottom-to-top (i.e., with the signer certificate first and the (root) certificate authority last). 



    Returns: A copy of the certificates array, or null if there is none. 

*java.security.CodeSource.getCodeSigners()*

public final |java.security.CodeSigner|[] getCodeSigners()

Returns the code signers associated with this CodeSource. 

If this CodeSource object was created using the (|java.security.CodeSource|) constructor then its certificate chains are extracted and used to create an array of CodeSigner 
objects. Note that only X.509 certificates are examined - all other certificate types are ignored. 



    Returns: A copy of the code signer array, or null if there is none. 

*java.security.CodeSource.getLocation()*

public final |java.net.URL| getLocation()

Returns the location associated with this CodeSource. 



    Returns: the location (URL). 

*java.security.CodeSource.hashCode()*

public int hashCode()

Returns the hash code value for this object. 



    Returns: a hash code value for this object. 

*java.security.CodeSource.implies(CodeSource)*

public boolean implies(java.security.CodeSource codesource)

Returns true if this CodeSource object "implies" the specified CodeSource. 

More specifically, this method makes the following checks, in order. If any fail, it returns false. If they all succeed, it returns true. 

codesource must not be null. If this object's certificates are not null, then all of this object's certificates must be present in codesource's certificates. If this object's 
location (getLocation()) is not null, then the following checks are made against this object's location and codesource's: 

codesource's location must not be null. 

If this object's location equals codesource's location, then return true. 

This object's protocol (getLocation().getProtocol()) must be equal to codesource's protocol. 

If this object's host (getLocation().getHost()) is not null, then the SocketPermission constructed with this object's host must imply the SocketPermission constructed with 
codesource's host. 

If this object's port (getLocation().getPort()) is not equal to -1 (that is, if a port is specified), it must equal codesource's port. 

If this object's file (getLocation().getFile()) doesn't equal codesource's file, then the following checks are made: If this object's file ends with "/-", then codesource's file 
must start with this object's file (exclusive the trailing "-"). If this object's file ends with a "/*", then codesource's file must start with this object's file and must not 
have any further "/" separators. If this object's file doesn't end with a "/", then codesource's file must match this object's file with a '/' appended. 

If this object's reference (getLocation().getRef()) is not null, it must equal codesource's reference. 



For example, the codesource objects with the following locations and null certificates all imply the codesource with the location "http://java.sun.com/classes/foo.jar" and null 
certificates: 

http: http://*.sun.com/classes/* http://java.sun.com/classes/- http://java.sun.com/classes/foo.jar 

Note that if this CodeSource has a null location and a null certificate chain, then it implies every other CodeSource. 


    codesource - CodeSource to compare against. 

    Returns: true if the specified codesource is implied by this codesource, false if not. 

*java.security.CodeSource.toString()*

public |java.lang.String| toString()

Returns a string describing this CodeSource, telling its URL and certificates. 



    Returns: information about this CodeSource. 



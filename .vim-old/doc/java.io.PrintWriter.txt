*java.io.PrintWriter* *PrintWriter* Print formatted representations of objects to a text-output stream.

public class PrintWriter
  extends    |java.io.Writer|

|java.io.PrintWriter_Description|
|java.io.PrintWriter_Fields|
|java.io.PrintWriter_Constructors|
|java.io.PrintWriter_Methods|

====================================================================================================================================================================================

*java.io.PrintWriter_Fields*
|java.io.Writer_java.io.PrintWriter.out|

*java.io.PrintWriter_Constructors*
|java.io.PrintWriter(File)|Creates a new PrintWriter, without automatic line flushing, with the  specified file.
|java.io.PrintWriter(File,String)|Creates a new PrintWriter, without automatic line flushing, with the  specified file and charset.
|java.io.PrintWriter(OutputStream)|Create a new PrintWriter, without automatic line flushing, from an  existing OutputStream.
|java.io.PrintWriter(OutputStream,boolean)|Create a new PrintWriter from an existing OutputStream.
|java.io.PrintWriter(String)|Creates a new PrintWriter, without automatic line flushing, with the  specified file name.
|java.io.PrintWriter(String,String)|Creates a new PrintWriter, without automatic line flushing, with the  specified file name and charset.
|java.io.PrintWriter(Writer)|Create a new PrintWriter, without automatic line flushing.
|java.io.PrintWriter(Writer,boolean)|Create a new PrintWriter.

*java.io.PrintWriter_Methods*
|java.io.PrintWriter.append(char)|Appends the specified character to this writer.
|java.io.PrintWriter.append(CharSequence)|Appends the specified character sequence to this writer.
|java.io.PrintWriter.append(CharSequence,int,int)|Appends a subsequence of the specified character sequence to this writer.
|java.io.PrintWriter.checkError()|Flush the stream if it's not closed and check its error state.
|java.io.PrintWriter.close()|Close the stream.
|java.io.PrintWriter.flush()|Flush the stream.
|java.io.PrintWriter.format(Locale,String,Object...)|Writes a formatted string to this writer using the specified format  string and arguments.
|java.io.PrintWriter.format(String,Object...)|Writes a formatted string to this writer using the specified format  string and arguments.
|java.io.PrintWriter.print(boolean)|Print a boolean value.
|java.io.PrintWriter.print(char)|Print a character.
|java.io.PrintWriter.print(char[])|Print an array of characters.
|java.io.PrintWriter.print(double)|Print a double-precision floating-point number.
|java.io.PrintWriter.print(float)|Print a floating-point number.
|java.io.PrintWriter.print(int)|Print an integer.
|java.io.PrintWriter.print(long)|Print a long integer.
|java.io.PrintWriter.print(Object)|Print an object.
|java.io.PrintWriter.print(String)|Print a string.
|java.io.PrintWriter.printf(Locale,String,Object...)|A convenience method to write a formatted string to this writer using  the specified format string and arguments.
|java.io.PrintWriter.printf(String,Object...)|A convenience method to write a formatted string to this writer using  the specified format string and arguments.
|java.io.PrintWriter.println()|Terminate the current line by writing the line separator string.
|java.io.PrintWriter.println(boolean)|Print a boolean value and then terminate the line.
|java.io.PrintWriter.println(char)|Print a character and then terminate the line.
|java.io.PrintWriter.println(char[])|Print an array of characters and then terminate the line.
|java.io.PrintWriter.println(double)|Print a double-precision floating-point number and then terminate the  line.
|java.io.PrintWriter.println(float)|Print a floating-point number and then terminate the line.
|java.io.PrintWriter.println(int)|Print an integer and then terminate the line.
|java.io.PrintWriter.println(long)|Print a long integer and then terminate the line.
|java.io.PrintWriter.println(Object)|Print an Object and then terminate the line.
|java.io.PrintWriter.println(String)|Print a String and then terminate the line.
|java.io.PrintWriter.setError()|Indicate that an error has occurred.
|java.io.PrintWriter.write(char[])|Write an array of characters.
|java.io.PrintWriter.write(char[],int,int)|Write A Portion of an array of characters.
|java.io.PrintWriter.write(int)|Write a single character.
|java.io.PrintWriter.write(String)|Write a string.
|java.io.PrintWriter.write(String,int,int)|Write a portion of a string.

*java.io.PrintWriter_Description*

Print formatted representations of objects to a text-output stream. This class implements all of the print methods found in (|java.io.PrintStream|) . It does not contain methods 
for writing raw bytes, for which a program should use unencoded byte streams. 

Unlike the (|java.io.PrintStream|) class, if automatic flushing is enabled it will be done only when one of the println, printf, or format methods is invoked, rather than whenever 
a newline character happens to be output. These methods use the platform's own notion of line separator rather than the newline character. 

Methods in this class never throw I/O exceptions, although some of its constructors may. The client may inquire as to whether any errors have occurred by invoking 
checkError()(|java.io.PrintWriter|) . 



*java.io.Writer_java.io.PrintWriter.out*

The underlying character-output stream of this PrintWriter. 



*java.io.PrintWriter(File)*

public PrintWriter(java.io.File file)
  throws |java.io.FileNotFoundException|
         
Creates a new PrintWriter, without automatic line flushing, with the specified file. This convenience constructor creates the necessary intermediate 
OutputStreamWriter(|java.io.OutputStreamWriter|) , which will encode characters using the default charset(|java.nio.charset.Charset|) for this instance of the Java virtual 
machine. 

    file - The file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to 
       the file and is buffered. 

*java.io.PrintWriter(File,String)*

public PrintWriter(
  java.io.File file,
  java.lang.String csn)
  throws |java.io.FileNotFoundException|
         |java.io.UnsupportedEncodingException|
         
Creates a new PrintWriter, without automatic line flushing, with the specified file and charset. This convenience constructor creates the necessary intermediate 
OutputStreamWriter(|java.io.OutputStreamWriter|) , which will encode characters using the provided charset. 

    file - The file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to 
       the file and is buffered. 
    csn - The name of a supported {@linkplain java.nio.charset.Charset charset} 

*java.io.PrintWriter(OutputStream)*

public PrintWriter(java.io.OutputStream out)

Create a new PrintWriter, without automatic line flushing, from an existing OutputStream. This convenience constructor creates the necessary intermediate OutputStreamWriter, which 
will convert characters into bytes using the default character encoding. 

    out - An output stream 

*java.io.PrintWriter(OutputStream,boolean)*

public PrintWriter(
  java.io.OutputStream out,
  boolean autoFlush)

Create a new PrintWriter from an existing OutputStream. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will convert characters into 
bytes using the default character encoding. 

    out - An output stream 
    autoFlush - A boolean; if true, the println, printf, or format methods will flush the output buffer 

*java.io.PrintWriter(String)*

public PrintWriter(java.lang.String fileName)
  throws |java.io.FileNotFoundException|
         
Creates a new PrintWriter, without automatic line flushing, with the specified file name. This convenience constructor creates the necessary intermediate 
OutputStreamWriter(|java.io.OutputStreamWriter|) , which will encode characters using the default charset(|java.nio.charset.Charset|) for this instance of the Java virtual 
machine. 

    fileName - The name of the file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be 
       written to the file and is buffered. 

*java.io.PrintWriter(String,String)*

public PrintWriter(
  java.lang.String fileName,
  java.lang.String csn)
  throws |java.io.FileNotFoundException|
         |java.io.UnsupportedEncodingException|
         
Creates a new PrintWriter, without automatic line flushing, with the specified file name and charset. This convenience constructor creates the necessary intermediate 
OutputStreamWriter(|java.io.OutputStreamWriter|) , which will encode characters using the provided charset. 

    fileName - The name of the file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be 
       written to the file and is buffered. 
    csn - The name of a supported {@linkplain java.nio.charset.Charset charset} 

*java.io.PrintWriter(Writer)*

public PrintWriter(java.io.Writer out)

Create a new PrintWriter, without automatic line flushing. 

    out - A character-output stream 

*java.io.PrintWriter(Writer,boolean)*

public PrintWriter(
  java.io.Writer out,
  boolean autoFlush)

Create a new PrintWriter. 

    out - A character-output stream 
    autoFlush - A boolean; if true, the println, printf, or format methods will flush the output buffer 

*java.io.PrintWriter.append(char)*

public |java.io.PrintWriter| append(char c)

Appends the specified character to this writer. 

An invocation of this method of the form out.append(c) behaves in exactly the same way as the invocation 



out.write(c) 


    c - The 16-bit character to append 

    Returns: 

*java.io.PrintWriter.append(CharSequence)*

public |java.io.PrintWriter| append(java.lang.CharSequence csq)

Appends the specified character sequence to this writer. 

An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation 



out.write(csq.toString()) 

Depending on the specification of toString for the character sequence csq, the entire sequence may not be appended. For instance, invoking the toString method of a character 
buffer will return a subsequence whose content depends upon the buffer's position and limit. 


    csq - The character sequence to append. If csq is null, then the four characters "null" are appended to this writer. 

    Returns: 

*java.io.PrintWriter.append(CharSequence,int,int)*

public |java.io.PrintWriter| append(
  java.lang.CharSequence csq,
  int start,
  int end)

Appends a subsequence of the specified character sequence to this writer. 

An invocation of this method of the form out.append(csq, start, end) when csq is not null, behaves in exactly the same way as the invocation 



out.write(csq.subSequence(start, end).toString()) 


    csq - The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters "null". 
    start - The index of the first character in the subsequence 
    end - The index of the character following the last character in the subsequence 

    Returns: 

*java.io.PrintWriter.checkError()*

public boolean checkError()

Flush the stream if it's not closed and check its error state. Errors are cumulative; once the stream encounters an error, this routine will return true on all successive calls. 



    Returns: True if the print stream has encountered an error, either on the underlying output stream or during a format conversion. 

*java.io.PrintWriter.close()*

public void close()

Close the stream. 



*java.io.PrintWriter.flush()*

public void flush()

Flush the stream. 



*java.io.PrintWriter.format(Locale,String,Object...)*

public |java.io.PrintWriter| format(
  java.util.Locale l,
  java.lang.String format,
  java.lang.Object[] args)

Writes a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush the output buffer. 


    l - The {@linkplain java.util.Locale locale} to apply during formatting. If l is null then no localization is applied. 
    format - A format string as described in Format string syntax. 
    args - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is 
       variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by the Java Virtual Machine Specification. The 
       behaviour on a null argument depends on the conversion. 

    Returns: 

*java.io.PrintWriter.format(String,Object...)*

public |java.io.PrintWriter| format(
  java.lang.String format,
  java.lang.Object[] args)

Writes a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush the output buffer. 

The locale always used is the one returned by Locale.getDefault()(|java.util.Locale|) , regardless of any previous invocations of other formatting methods on this object. 


    format - A format string as described in Format string syntax. 
    args - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is 
       variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by the Java Virtual Machine Specification. The 
       behaviour on a null argument depends on the conversion. 

    Returns: 

*java.io.PrintWriter.print(boolean)*

public void print(boolean b)

Print a boolean value. The string produced by (|java.lang.String|) is translated into bytes according to the platform's default character encoding, and these bytes are written in 
exactly the manner of the (|java.io.PrintWriter|) method. 


    b - The boolean to be printed 

*java.io.PrintWriter.print(char)*

public void print(char c)

Print a character. The character is translated into one or more bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of 
the (|java.io.PrintWriter|) method. 


    c - The char to be printed 

*java.io.PrintWriter.print(char[])*

public void print(char[] s)

Print an array of characters. The characters are converted into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of 
the (|java.io.PrintWriter|) method. 


    s - The array of chars to be printed 

*java.io.PrintWriter.print(double)*

public void print(double d)

Print a double-precision floating-point number. The string produced by (|java.lang.String|) is translated into bytes according to the platform's default character encoding, and 
these bytes are written in exactly the manner of the (|java.io.PrintWriter|) method. 


    d - The double to be printed 

*java.io.PrintWriter.print(float)*

public void print(float f)

Print a floating-point number. The string produced by (|java.lang.String|) is translated into bytes according to the platform's default character encoding, and these bytes are 
written in exactly the manner of the (|java.io.PrintWriter|) method. 


    f - The float to be printed 

*java.io.PrintWriter.print(int)*

public void print(int i)

Print an integer. The string produced by (|java.lang.String|) is translated into bytes according to the platform's default character encoding, and these bytes are written in 
exactly the manner of the (|java.io.PrintWriter|) method. 


    i - The int to be printed 

*java.io.PrintWriter.print(long)*

public void print(long l)

Print a long integer. The string produced by (|java.lang.String|) is translated into bytes according to the platform's default character encoding, and these bytes are written in 
exactly the manner of the (|java.io.PrintWriter|) method. 


    l - The long to be printed 

*java.io.PrintWriter.print(Object)*

public void print(java.lang.Object obj)

Print an object. The string produced by the (|java.lang.String|) method is translated into bytes according to the platform's default character encoding, and these bytes are 
written in exactly the manner of the (|java.io.PrintWriter|) method. 


    obj - The Object to be printed 

*java.io.PrintWriter.print(String)*

public void print(java.lang.String s)

Print a string. If the argument is null then the string "null" is printed. Otherwise, the string's characters are converted into bytes according to the platform's default 
character encoding, and these bytes are written in exactly the manner of the (|java.io.PrintWriter|) method. 


    s - The String to be printed 

*java.io.PrintWriter.printf(Locale,String,Object...)*

public |java.io.PrintWriter| printf(
  java.util.Locale l,
  java.lang.String format,
  java.lang.Object[] args)

A convenience method to write a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush 
the output buffer. 

An invocation of this method of the form out.printf(l, format, args) behaves in exactly the same way as the invocation 



out.format(l, format, args) 


    l - The {@linkplain java.util.Locale locale} to apply during formatting. If l is null then no localization is applied. 
    format - A format string as described in Format string syntax. 
    args - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is 
       variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by the Java Virtual Machine Specification. The 
       behaviour on a null argument depends on the conversion. 

    Returns: 

*java.io.PrintWriter.printf(String,Object...)*

public |java.io.PrintWriter| printf(
  java.lang.String format,
  java.lang.Object[] args)

A convenience method to write a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush 
the output buffer. 

An invocation of this method of the form out.printf(format, args) behaves in exactly the same way as the invocation 



out.format(format, args) 


    format - A format string as described in Format string syntax. 
    args - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is 
       variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by the Java Virtual Machine Specification. The 
       behaviour on a null argument depends on the conversion. 

    Returns: 

*java.io.PrintWriter.println()*

public void println()

Terminate the current line by writing the line separator string. The line separator string is defined by the system property line.separator, and is not necessarily a single 
newline character ('\n'). 



*java.io.PrintWriter.println(boolean)*

public void println(boolean x)

Print a boolean value and then terminate the line. This method behaves as though it invokes (|java.io.PrintWriter|) and then (|java.io.PrintWriter|) . 


    x - the boolean value to be printed 

*java.io.PrintWriter.println(char)*

public void println(char x)

Print a character and then terminate the line. This method behaves as though it invokes (|java.io.PrintWriter|) and then (|java.io.PrintWriter|) . 


    x - the char value to be printed 

*java.io.PrintWriter.println(char[])*

public void println(char[] x)

Print an array of characters and then terminate the line. This method behaves as though it invokes (|java.io.PrintWriter|) and then (|java.io.PrintWriter|) . 


    x - the array of char values to be printed 

*java.io.PrintWriter.println(double)*

public void println(double x)

Print a double-precision floating-point number and then terminate the line. This method behaves as though it invokes (|java.io.PrintWriter|) and then (|java.io.PrintWriter|) . 


    x - the double value to be printed 

*java.io.PrintWriter.println(float)*

public void println(float x)

Print a floating-point number and then terminate the line. This method behaves as though it invokes (|java.io.PrintWriter|) and then (|java.io.PrintWriter|) . 


    x - the float value to be printed 

*java.io.PrintWriter.println(int)*

public void println(int x)

Print an integer and then terminate the line. This method behaves as though it invokes (|java.io.PrintWriter|) and then (|java.io.PrintWriter|) . 


    x - the int value to be printed 

*java.io.PrintWriter.println(long)*

public void println(long x)

Print a long integer and then terminate the line. This method behaves as though it invokes (|java.io.PrintWriter|) and then (|java.io.PrintWriter|) . 


    x - the long value to be printed 

*java.io.PrintWriter.println(Object)*

public void println(java.lang.Object x)

Print an Object and then terminate the line. This method behaves as though it invokes (|java.io.PrintWriter|) and then (|java.io.PrintWriter|) . 


    x - the Object value to be printed 

*java.io.PrintWriter.println(String)*

public void println(java.lang.String x)

Print a String and then terminate the line. This method behaves as though it invokes (|java.io.PrintWriter|) and then (|java.io.PrintWriter|) . 


    x - the String value to be printed 

*java.io.PrintWriter.setError()*

protected void setError()

Indicate that an error has occurred. 



*java.io.PrintWriter.write(char[])*

public void write(char[] buf)

Write an array of characters. This method cannot be inherited from the Writer class because it must suppress I/O exceptions. 


    buf - Array of characters to be written 

*java.io.PrintWriter.write(char[],int,int)*

public void write(
  char[] buf,
  int off,
  int len)

Write A Portion of an array of characters. 


    buf - Array of characters 
    off - Offset from which to start writing characters 
    len - Number of characters to write 

*java.io.PrintWriter.write(int)*

public void write(int c)

Write a single character. 


    c - int specifying a character to be written. 

*java.io.PrintWriter.write(String)*

public void write(java.lang.String s)

Write a string. This method cannot be inherited from the Writer class because it must suppress I/O exceptions. 


    s - String to be written 

*java.io.PrintWriter.write(String,int,int)*

public void write(
  java.lang.String s,
  int off,
  int len)

Write a portion of a string. 


    s - A String 
    off - Offset from which to start writing characters 
    len - Number of characters to write 



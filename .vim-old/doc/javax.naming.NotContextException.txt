*javax.naming.NotContextException* *NotContextException* This exception is thrown when a naming operation proceeds to a point
 where a context is required to continue the operation

public class NotContextException
  extends    |javax.naming.NamingException|

|javax.naming.NotContextException_Description|
|javax.naming.NotContextException_Fields|
|javax.naming.NotContextException_Constructors|
|javax.naming.NotContextException_Methods|

====================================================================================================================================================================================

*javax.naming.NotContextException_Constructors*
|javax.naming.NotContextException()|Constructs a new instance of NotContextException.
|javax.naming.NotContextException(String)|Constructs a new instance of NotContextException using an  explanation.

*javax.naming.NotContextException_Description*

This exception is thrown when a naming operation proceeds to a point where a context is required to continue the operation, but the resolved object is not a context. For example, 
Context.destroy() requires that the named object be a context. If it is not, NotContextException is thrown. Another example is a non-context being encountered during the 
resolution phase of the Context methods. 

It is also thrown when a particular subtype of context is required, such as a DirContext, and the resolved object is a context but not of the required subtype. 

Synchronization and serialization issues that apply to NamingException apply directly here. 



*javax.naming.NotContextException()*

public NotContextException()

Constructs a new instance of NotContextException. All fields default to null. 


*javax.naming.NotContextException(String)*

public NotContextException(java.lang.String explanation)

Constructs a new instance of NotContextException using an explanation. All other fields default to null. 

    explanation - Possibly null additional detail about this exception. 


*javax.sound.sampled.DataLine.Info* *DataLine.Info* Besides the class informatio

public static class DataLine.Info
  extends    |javax.sound.sampled.Line.Info|

|javax.sound.sampled.DataLine.Info_Description|
|javax.sound.sampled.DataLine.Info_Fields|
|javax.sound.sampled.DataLine.Info_Constructors|
|javax.sound.sampled.DataLine.Info_Methods|

================================================================================

*javax.sound.sampled.DataLine.Info_Constructors*
|javax.sound.sampled.DataLine.Info(Class,AudioFormat)|Constructs a data line's 
|javax.sound.sampled.DataLine.Info(Class,AudioFormat[],int,int)|Constructs a da
|javax.sound.sampled.DataLine.Info(Class,AudioFormat,int)|Constructs a data lin

*javax.sound.sampled.DataLine.Info_Methods*
|javax.sound.sampled.DataLine.Info.getFormats()|Obtains a set of audio formats 
|javax.sound.sampled.DataLine.Info.getMaxBufferSize()|Obtains the maximum buffe
|javax.sound.sampled.DataLine.Info.getMinBufferSize()|Obtains the minimum buffe
|javax.sound.sampled.DataLine.Info.isFormatSupported(AudioFormat)|Indicates whe
|javax.sound.sampled.DataLine.Info.matches(Line.Info)|Determines whether the sp
|javax.sound.sampled.DataLine.Info.toString()|Obtains a textual description of 

*javax.sound.sampled.DataLine.Info_Description*

Besides the class information inherited from its superclass, DataLine.Info 
provides additional information specific to data lines. This information 
includes: 

the audio formats supported by the data line the minimum and maximum sizes of 
its internal buffer 

Because a Line.Info knows the class of the line its describes, a DataLine.Info 
object can describe DataLine subinterfaces such as 
(|javax.sound.sampled.SourceDataLine|) , (|javax.sound.sampled.TargetDataLine|) 
, and (|javax.sound.sampled.Clip|) . You can query a mixer for lines of any of 
these types, passing an appropriate instance of DataLine.Info as the argument 
to a method such as Mixer.getLine(Line.Info)(|javax.sound.sampled.Mixer|) . 


*javax.sound.sampled.DataLine.Info(Class,AudioFormat)*

public DataLine.Info(
  java.lang.Class lineClass,
  javax.sound.sampled.AudioFormat format)

Constructs a data line's info object from the specified information, which 
includes a single audio format. This constructor is typically used by an 
application to describe a desired line. 

    lineClass - the class of the data line described by the info object 
    format - desired format 

*javax.sound.sampled.DataLine.Info(Class,AudioFormat[],int,int)*

public DataLine.Info(
  java.lang.Class lineClass,
  javax.sound.sampled.AudioFormat[] formats,
  int minBufferSize,
  int maxBufferSize)

Constructs a data line's info object from the specified information, which 
includes a set of supported audio formats and a range for the buffer size. This 
constructor is typically used by mixer implementations when returning 
information about a supported line. 

    lineClass - the class of the data line described by the info object 
    formats - set of formats supported 
    minBufferSize - minimum buffer size supported by the data line, in bytes 
    maxBufferSize - maximum buffer size supported by the data line, in bytes 

*javax.sound.sampled.DataLine.Info(Class,AudioFormat,int)*

public DataLine.Info(
  java.lang.Class lineClass,
  javax.sound.sampled.AudioFormat format,
  int bufferSize)

Constructs a data line's info object from the specified information, which 
includes a single audio format and a desired buffer size. This constructor is 
typically used by an application to describe a desired line. 

    lineClass - the class of the data line described by the info object 
    format - desired format 
    bufferSize - desired buffer size in bytes 

*javax.sound.sampled.DataLine.Info.getFormats()*

public |javax.sound.sampled.AudioFormat| getFormats()

Obtains a set of audio formats supported by the data line. Note that 
isFormatSupported(AudioFormat) might return true for certain additional formats 
that are missing from the set returned by getFormats(). The reverse is not the 
case: isFormatSupported(AudioFormat) is guaranteed to return true for all 
formats returned by getFormats(). 

Some fields in the AudioFormat instances can be set to 
NOT_SPECIFIED(|javax.sound.sampled.AudioSystem|) if that field does not apply 
to the format, or if the format supports a wide range of values for that field. 
For example, a multi-channel device supporting up to 64 channels, could set the 
channel field in the AudioFormat instances returned by this method to 
NOT_SPECIFIED. 


    Returns: a set of supported audio formats. 
*javax.sound.sampled.DataLine.Info.getMaxBufferSize()*

public int getMaxBufferSize()

Obtains the maximum buffer size supported by the data line. 


    Returns: maximum buffer size in bytes, or AudioSystem.NOT_SPECIFIED 
*javax.sound.sampled.DataLine.Info.getMinBufferSize()*

public int getMinBufferSize()

Obtains the minimum buffer size supported by the data line. 


    Returns: minimum buffer size in bytes, or AudioSystem.NOT_SPECIFIED 
*javax.sound.sampled.DataLine.Info.isFormatSupported(AudioFormat)*

public boolean isFormatSupported(javax.sound.sampled.AudioFormat format)

Indicates whether this data line supports a particular audio format. The 
default implementation of this method simply returns true if the specified 
format matches any of the supported formats. 

    format - the audio format for which support is queried. 

    Returns: true if the format is supported, otherwise false 
*javax.sound.sampled.DataLine.Info.matches(Line.Info)*

public boolean matches(javax.sound.sampled.Line.Info info)

Determines whether the specified info object matches this one. To match, the 
superclass match requirements must be met. In addition, this object's minimum 
buffer size must be at least as large as that of the object specified, its 
maximum buffer size must be at most as large as that of the object specified, 
and all of its formats must match formats supported by the object specified. 


    Returns: true if this object matches the one specified, otherwise false. 
*javax.sound.sampled.DataLine.Info.toString()*

public |java.lang.String| toString()

Obtains a textual description of the data line info. 


    Returns: a string description 


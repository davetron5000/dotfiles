*javax.management.MBeanServerConnection* *MBeanServerConnection* This interface 

public interface interface MBeanServerConnection


|javax.management.MBeanServerConnection_Description|
|javax.management.MBeanServerConnection_Fields|
|javax.management.MBeanServerConnection_Constructors|
|javax.management.MBeanServerConnection_Methods|

================================================================================

*javax.management.MBeanServerConnection_Methods*
|javax.management.MBeanServerConnection.addNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object)|
|javax.management.MBeanServerConnection.addNotificationListener(ObjectName,ObjectName,NotificationFilter,Object)|
|javax.management.MBeanServerConnection.createMBean(String,ObjectName)|Instanti
|javax.management.MBeanServerConnection.createMBean(String,ObjectName,Object[],String[])|
|javax.management.MBeanServerConnection.createMBean(String,ObjectName,ObjectName)|
|javax.management.MBeanServerConnection.createMBean(String,ObjectName,ObjectName,Object[],String[])|
|javax.management.MBeanServerConnection.getAttribute(ObjectName,String)|Gets th
|javax.management.MBeanServerConnection.getAttributes(ObjectName,String[])|Enab
|javax.management.MBeanServerConnection.getDefaultDomain()|Returns the default 
|javax.management.MBeanServerConnection.getDomains()|Returns the list of domain
|javax.management.MBeanServerConnection.getMBeanCount()|Returns the number of M
|javax.management.MBeanServerConnection.getMBeanInfo(ObjectName)|This method di
|javax.management.MBeanServerConnection.getObjectInstance(ObjectName)|Gets the 
|javax.management.MBeanServerConnection.invoke(ObjectName,String,Object[],String[])|
|javax.management.MBeanServerConnection.isInstanceOf(ObjectName,String)|Returns
|javax.management.MBeanServerConnection.isRegistered(ObjectName)|Checks whether
|javax.management.MBeanServerConnection.queryMBeans(ObjectName,QueryExp)|Gets M
|javax.management.MBeanServerConnection.queryNames(ObjectName,QueryExp)|Gets th
|javax.management.MBeanServerConnection.removeNotificationListener(ObjectName,NotificationListener)|
|javax.management.MBeanServerConnection.removeNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object)|
|javax.management.MBeanServerConnection.removeNotificationListener(ObjectName,ObjectName)|
|javax.management.MBeanServerConnection.removeNotificationListener(ObjectName,ObjectName,NotificationFilter,Object)|
|javax.management.MBeanServerConnection.setAttribute(ObjectName,Attribute)|Sets
|javax.management.MBeanServerConnection.setAttributes(ObjectName,AttributeList)|
|javax.management.MBeanServerConnection.unregisterMBean(ObjectName)|Unregisters

*javax.management.MBeanServerConnection_Description*

This interface represents a way to talk to an MBean server, whether local or 
remote. The (|javax.management.MBeanServer|) interface, representing a local 
MBean server, extends this interface. 


*javax.management.MBeanServerConnection.addNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object)*

public void addNotificationListener(
  javax.management.ObjectName name,
  javax.management.NotificationListener listener,
  javax.management.NotificationFilter filter,
  java.lang.Object handback)
  throws |javax.management.InstanceNotFoundException|
         |java.io.IOException|
         
Adds a listener to a registered MBean. 

A notification emitted by an MBean will be forwarded by the MBeanServer to the 
listener. If the source of the notification is a reference to an MBean object, 
the MBean server will replace it by that MBean's ObjectName. Otherwise the 
source is unchanged. 

    name - The name of the MBean on which the listener should be added. 
    listener - The listener object which will handle the notifications emitted by the 
       registered MBean. 
    filter - The filter object. If filter is null, no filtering will be performed before 
       handling notifications. 
    handback - The context to be sent to the listener when a notification is emitted. 

*javax.management.MBeanServerConnection.addNotificationListener(ObjectName,ObjectName,NotificationFilter,Object)*

public void addNotificationListener(
  javax.management.ObjectName name,
  javax.management.ObjectName listener,
  javax.management.NotificationFilter filter,
  java.lang.Object handback)
  throws |javax.management.InstanceNotFoundException|
         |java.io.IOException|
         
Adds a listener to a registered MBean. 

A notification emitted by an MBean will be forwarded by the MBeanServer to the 
listener. If the source of the notification is a reference to an MBean object, 
the MBean server will replace it by that MBean's ObjectName. Otherwise the 
source is unchanged. 

The listener object that receives notifications is the one that is registered 
with the given name at the time this method is called. Even if it is 
subsequently unregistered, it will continue to receive notifications. 

    name - The name of the MBean on which the listener should be added. 
    listener - The object name of the listener which will handle the notifications emitted by 
       the registered MBean. 
    filter - The filter object. If filter is null, no filtering will be performed before 
       handling notifications. 
    handback - The context to be sent to the listener when a notification is emitted. 

*javax.management.MBeanServerConnection.createMBean(String,ObjectName)*

public |javax.management.ObjectInstance| createMBean(
  java.lang.String className,
  javax.management.ObjectName name)
  throws |javax.management.InstanceAlreadyExistsException|
         |java.io.IOException|
         |javax.management.MBeanException|
         |javax.management.MBeanRegistrationException|
         |javax.management.NotCompliantMBeanException|
         |javax.management.ReflectionException|
         
Instantiates and registers an MBean in the MBean server. The MBean server will 
use its Default Loader 
Repository(|javax.management.loading.ClassLoaderRepository|) to load the class 
of the MBean. An object name is associated to the MBean. If the object name 
given is null, the MBean must provide its own name by implementing the 
MBeanRegistration(|javax.management.MBeanRegistration|) interface and returning 
the name from the preRegister(|javax.management.MBeanRegistration|) method. 

This method is equivalent to createMBean(className, name, (Object[]) null, 
(String[]) null)(|javax.management.MBeanServerConnection|) . 

    className - The class name of the MBean to be instantiated. 
    name - The object name of the MBean. May be null. 

    Returns: An ObjectInstance, containing the ObjectName and the Java class name of the 
             newly instantiated MBean. If the contained ObjectName is n, the 
             contained Java class name is {@link #getMBeanInfo 
             getMBeanInfo(n)}.getClassName(). 
*javax.management.MBeanServerConnection.createMBean(String,ObjectName,Object[],String[])*

public |javax.management.ObjectInstance| createMBean(
  java.lang.String className,
  javax.management.ObjectName name,
  java.lang.Object[] params,
  java.lang.String[] signature)
  throws |javax.management.InstanceAlreadyExistsException|
         |java.io.IOException|
         |javax.management.MBeanException|
         |javax.management.MBeanRegistrationException|
         |javax.management.NotCompliantMBeanException|
         |javax.management.ReflectionException|
         
Instantiates and registers an MBean in the MBean server. The MBean server will 
use its Default Loader 
Repository(|javax.management.loading.ClassLoaderRepository|) to load the class 
of the MBean. An object name is associated to the MBean. If the object name 
given is null, the MBean must provide its own name by implementing the 
MBeanRegistration(|javax.management.MBeanRegistration|) interface and returning 
the name from the preRegister(|javax.management.MBeanRegistration|) method. 

    className - The class name of the MBean to be instantiated. 
    name - The object name of the MBean. May be null. 
    params - An array containing the parameters of the constructor to be invoked. 
    signature - An array containing the signature of the constructor to be invoked. 

    Returns: An ObjectInstance, containing the ObjectName and the Java class name of the 
             newly instantiated MBean. If the contained ObjectName is n, the 
             contained Java class name is {@link #getMBeanInfo 
             getMBeanInfo(n)}.getClassName(). 
*javax.management.MBeanServerConnection.createMBean(String,ObjectName,ObjectName)*

public |javax.management.ObjectInstance| createMBean(
  java.lang.String className,
  javax.management.ObjectName name,
  javax.management.ObjectName loaderName)
  throws |javax.management.InstanceAlreadyExistsException|
         |javax.management.InstanceNotFoundException|
         |java.io.IOException|
         |javax.management.MBeanException|
         |javax.management.MBeanRegistrationException|
         |javax.management.NotCompliantMBeanException|
         |javax.management.ReflectionException|
         
Instantiates and registers an MBean in the MBean server. The class loader to be 
used is identified by its object name. An object name is associated to the 
MBean. If the object name of the loader is null, the ClassLoader that loaded 
the MBean server will be used. If the MBean's object name given is null, the 
MBean must provide its own name by implementing the 
MBeanRegistration(|javax.management.MBeanRegistration|) interface and returning 
the name from the preRegister(|javax.management.MBeanRegistration|) method. 

This method is equivalent to createMBean(className, name, loaderName, 
(Object[]) null, (String[]) null)(|javax.management.MBeanServerConnection|) . 

    className - The class name of the MBean to be instantiated. 
    name - The object name of the MBean. May be null. 
    loaderName - The object name of the class loader to be used. 

    Returns: An ObjectInstance, containing the ObjectName and the Java class name of the 
             newly instantiated MBean. If the contained ObjectName is n, the 
             contained Java class name is {@link #getMBeanInfo 
             getMBeanInfo(n)}.getClassName(). 
*javax.management.MBeanServerConnection.createMBean(String,ObjectName,ObjectName,Object[],String[])*

public |javax.management.ObjectInstance| createMBean(
  java.lang.String className,
  javax.management.ObjectName name,
  javax.management.ObjectName loaderName,
  java.lang.Object[] params,
  java.lang.String[] signature)
  throws |javax.management.InstanceAlreadyExistsException|
         |javax.management.InstanceNotFoundException|
         |java.io.IOException|
         |javax.management.MBeanException|
         |javax.management.MBeanRegistrationException|
         |javax.management.NotCompliantMBeanException|
         |javax.management.ReflectionException|
         
Instantiates and registers an MBean in the MBean server. The class loader to be 
used is identified by its object name. An object name is associated to the 
MBean. If the object name of the loader is not specified, the ClassLoader that 
loaded the MBean server will be used. If the MBean object name given is null, 
the MBean must provide its own name by implementing the 
MBeanRegistration(|javax.management.MBeanRegistration|) interface and returning 
the name from the preRegister(|javax.management.MBeanRegistration|) method. 

    className - The class name of the MBean to be instantiated. 
    name - The object name of the MBean. May be null. 
    params - An array containing the parameters of the constructor to be invoked. 
    signature - An array containing the signature of the constructor to be invoked. 
    loaderName - The object name of the class loader to be used. 

    Returns: An ObjectInstance, containing the ObjectName and the Java class name of the 
             newly instantiated MBean. If the contained ObjectName is n, the 
             contained Java class name is {@link #getMBeanInfo 
             getMBeanInfo(n)}.getClassName(). 
*javax.management.MBeanServerConnection.getAttribute(ObjectName,String)*

public |java.lang.Object| getAttribute(
  javax.management.ObjectName name,
  java.lang.String attribute)
  throws |javax.management.AttributeNotFoundException|
         |javax.management.InstanceNotFoundException|
         |java.io.IOException|
         |javax.management.MBeanException|
         |javax.management.ReflectionException|
         
Gets the value of a specific attribute of a named MBean. The MBean is 
identified by its object name. 

    name - The object name of the MBean from which the attribute is to be retrieved. 
    attribute - A String specifying the name of the attribute to be retrieved. 

    Returns: The value of the retrieved attribute. 
*javax.management.MBeanServerConnection.getAttributes(ObjectName,String[])*

public |javax.management.AttributeList| getAttributes(
  javax.management.ObjectName name,
  java.lang.String[] attributes)
  throws |javax.management.InstanceNotFoundException|
         |java.io.IOException|
         |javax.management.ReflectionException|
         
Enables the values of several attributes of a named MBean. The MBean is 
identified by its object name. 

    name - The object name of the MBean from which the attributes are retrieved. 
    attributes - A list of the attributes to be retrieved. 

    Returns: The list of the retrieved attributes. 
*javax.management.MBeanServerConnection.getDefaultDomain()*

public |java.lang.String| getDefaultDomain()
  throws |java.io.IOException|
         
Returns the default domain used for naming the MBean. The default domain name 
is used as the domain part in the ObjectName of MBeans if no domain is 
specified by the user. 


    Returns: the default domain. 
*javax.management.MBeanServerConnection.getDomains()*

public |java.lang.String| getDomains()
  throws |java.io.IOException|
         
Returns the list of domains in which any MBean is currently registered. A 
string is in the returned array if and only if there is at least one MBean 
registered with an ObjectName whose getDomain()(|javax.management.ObjectName|) 
is equal to that string. The order of strings within the returned array is not 
defined. 


    Returns: the list of domains. 
*javax.management.MBeanServerConnection.getMBeanCount()*

public |java.lang.Integer| getMBeanCount()
  throws |java.io.IOException|
         
Returns the number of MBeans registered in the MBean server. 


    Returns: the number of MBeans registered. 
*javax.management.MBeanServerConnection.getMBeanInfo(ObjectName)*

public |javax.management.MBeanInfo| getMBeanInfo(javax.management.ObjectName name)
  throws |javax.management.InstanceNotFoundException|
         |javax.management.IntrospectionException|
         |java.io.IOException|
         |javax.management.ReflectionException|
         
This method discovers the attributes and operations that an MBean exposes for 
management. 

    name - The name of the MBean to analyze 

    Returns: An instance of MBeanInfo allowing the retrieval of all attributes and 
             operations of this MBean. 
*javax.management.MBeanServerConnection.getObjectInstance(ObjectName)*

public |javax.management.ObjectInstance| getObjectInstance(javax.management.ObjectName name)
  throws |javax.management.InstanceNotFoundException|
         |java.io.IOException|
         
Gets the ObjectInstance for a given MBean registered with the MBean server. 

    name - The object name of the MBean. 

    Returns: The ObjectInstance associated with the MBean specified by name. The contained 
             ObjectName is name and the contained class name is {@link 
             #getMBeanInfo getMBeanInfo(name)}.getClassName(). 
*javax.management.MBeanServerConnection.invoke(ObjectName,String,Object[],String[])*

public |java.lang.Object| invoke(
  javax.management.ObjectName name,
  java.lang.String operationName,
  java.lang.Object[] params,
  java.lang.String[] signature)
  throws |javax.management.InstanceNotFoundException|
         |java.io.IOException|
         |javax.management.MBeanException|
         |javax.management.ReflectionException|
         
Invokes an operation on an MBean. 

    name - The object name of the MBean on which the method is to be invoked. 
    operationName - The name of the operation to be invoked. 
    params - An array containing the parameters to be set when the operation is invoked 
    signature - An array containing the signature of the operation. The class objects will be 
       loaded using the same class loader as the one used for loading the MBean 
       on which the operation was invoked. 

    Returns: The object returned by the operation, which represents the result of invoking 
             the operation on the MBean specified. 
*javax.management.MBeanServerConnection.isInstanceOf(ObjectName,String)*

public boolean isInstanceOf(
  javax.management.ObjectName name,
  java.lang.String className)
  throws |javax.management.InstanceNotFoundException|
         |java.io.IOException|
         
Returns true if the MBean specified is an instance of the specified class, 
false otherwise. 

If name does not name an MBean, this method throws 
(|javax.management.InstanceNotFoundException|) . 

Otherwise, let X be the MBean named by name, L be the ClassLoader of X, N be 
the class name in X's (|javax.management.MBeanInfo|) . 

If N equals className, the result is true. 

Otherwise, if L successfully loads both N and className, and the second class 
is assignable from the first, the result is true. 

Otherwise, the result is false. 

    name - The ObjectName of the MBean. 
    className - The name of the class. 

    Returns: true if the MBean specified is an instance of the specified class according to 
             the rules above, false otherwise. 
*javax.management.MBeanServerConnection.isRegistered(ObjectName)*

public boolean isRegistered(javax.management.ObjectName name)
  throws |java.io.IOException|
         
Checks whether an MBean, identified by its object name, is already registered 
with the MBean server. 

    name - The object name of the MBean to be checked. 

    Returns: True if the MBean is already registered in the MBean server, false otherwise. 
*javax.management.MBeanServerConnection.queryMBeans(ObjectName,QueryExp)*

public |java.util.Set| queryMBeans(
  javax.management.ObjectName name,
  javax.management.QueryExp query)
  throws |java.io.IOException|
         
Gets MBeans controlled by the MBean server. This method allows any of the 
following to be obtained: All MBeans, a set of MBeans specified by pattern 
matching on the ObjectName and/or a Query expression, a specific MBean. When 
the object name is null or no domain and key properties are specified, all 
objects are to be selected (and filtered if a query is specified). It returns 
the set of ObjectInstance objects (containing the ObjectName and the Java Class 
name) for the selected MBeans. 

    name - The object name pattern identifying the MBeans to be retrieved. If null or no 
       domain and key properties are specified, all the MBeans registered will 
       be retrieved. 
    query - The query expression to be applied for selecting MBeans. If null no query 
       expression will be applied for selecting MBeans. 

    Returns: A set containing the ObjectInstance objects for the selected MBeans. If no 
             MBean satisfies the query an empty list is returned. 
*javax.management.MBeanServerConnection.queryNames(ObjectName,QueryExp)*

public |java.util.Set| queryNames(
  javax.management.ObjectName name,
  javax.management.QueryExp query)
  throws |java.io.IOException|
         
Gets the names of MBeans controlled by the MBean server. This method enables 
any of the following to be obtained: The names of all MBeans, the names of a 
set of MBeans specified by pattern matching on the ObjectName and/or a Query 
expression, a specific MBean name (equivalent to testing whether an MBean is 
registered). When the object name is null or no domain and key properties are 
specified, all objects are selected (and filtered if a query is specified). It 
returns the set of ObjectNames for the MBeans selected. 

    name - The object name pattern identifying the MBean names to be retrieved. If null or 
       no domain and key properties are specified, the name of all registered 
       MBeans will be retrieved. 
    query - The query expression to be applied for selecting MBeans. If null no query 
       expression will be applied for selecting MBeans. 

    Returns: A set containing the ObjectNames for the MBeans selected. If no MBean satisfies 
             the query, an empty list is returned. 
*javax.management.MBeanServerConnection.removeNotificationListener(ObjectName,NotificationListener)*

public void removeNotificationListener(
  javax.management.ObjectName name,
  javax.management.NotificationListener listener)
  throws |javax.management.InstanceNotFoundException|
         |java.io.IOException|
         |javax.management.ListenerNotFoundException|
         
Removes a listener from a registered MBean. 

If the listener is registered more than once, perhaps with different filters or 
callbacks, this method will remove all those registrations. 

    name - The name of the MBean on which the listener should be removed. 
    listener - The object name of the listener to be removed. 

*javax.management.MBeanServerConnection.removeNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object)*

public void removeNotificationListener(
  javax.management.ObjectName name,
  javax.management.NotificationListener listener,
  javax.management.NotificationFilter filter,
  java.lang.Object handback)
  throws |javax.management.InstanceNotFoundException|
         |java.io.IOException|
         |javax.management.ListenerNotFoundException|
         
Removes a listener from a registered MBean. 

The MBean must have a listener that exactly matches the given listener, filter, 
and handback parameters. If there is more than one such listener, only one is 
removed. 

The filter and handback parameters may be null if and only if they are null in 
a listener to be removed. 

    name - The name of the MBean on which the listener should be removed. 
    listener - A listener that was previously added to this MBean. 
    filter - The filter that was specified when the listener was added. 
    handback - The handback that was specified when the listener was added. 

*javax.management.MBeanServerConnection.removeNotificationListener(ObjectName,ObjectName)*

public void removeNotificationListener(
  javax.management.ObjectName name,
  javax.management.ObjectName listener)
  throws |javax.management.InstanceNotFoundException|
         |java.io.IOException|
         |javax.management.ListenerNotFoundException|
         
Removes a listener from a registered MBean. 

If the listener is registered more than once, perhaps with different filters or 
callbacks, this method will remove all those registrations. 

    name - The name of the MBean on which the listener should be removed. 
    listener - The object name of the listener to be removed. 

*javax.management.MBeanServerConnection.removeNotificationListener(ObjectName,ObjectName,NotificationFilter,Object)*

public void removeNotificationListener(
  javax.management.ObjectName name,
  javax.management.ObjectName listener,
  javax.management.NotificationFilter filter,
  java.lang.Object handback)
  throws |javax.management.InstanceNotFoundException|
         |java.io.IOException|
         |javax.management.ListenerNotFoundException|
         
Removes a listener from a registered MBean. 

The MBean must have a listener that exactly matches the given listener, filter, 
and handback parameters. If there is more than one such listener, only one is 
removed. 

The filter and handback parameters may be null if and only if they are null in 
a listener to be removed. 

    name - The name of the MBean on which the listener should be removed. 
    listener - A listener that was previously added to this MBean. 
    filter - The filter that was specified when the listener was added. 
    handback - The handback that was specified when the listener was added. 

*javax.management.MBeanServerConnection.setAttribute(ObjectName,Attribute)*

public void setAttribute(
  javax.management.ObjectName name,
  javax.management.Attribute attribute)
  throws |javax.management.AttributeNotFoundException|
         |javax.management.InstanceNotFoundException|
         |javax.management.InvalidAttributeValueException|
         |java.io.IOException|
         |javax.management.MBeanException|
         |javax.management.ReflectionException|
         
Sets the value of a specific attribute of a named MBean. The MBean is 
identified by its object name. 

    name - The name of the MBean within which the attribute is to be set. 
    attribute - The identification of the attribute to be set and the value it is to be set to. 

*javax.management.MBeanServerConnection.setAttributes(ObjectName,AttributeList)*

public |javax.management.AttributeList| setAttributes(
  javax.management.ObjectName name,
  javax.management.AttributeList attributes)
  throws |javax.management.InstanceNotFoundException|
         |java.io.IOException|
         |javax.management.ReflectionException|
         
Sets the values of several attributes of a named MBean. The MBean is identified 
by its object name. 

    name - The object name of the MBean within which the attributes are to be set. 
    attributes - A list of attributes: The identification of the attributes to be set and the 
       values they are to be set to. 

    Returns: The list of attributes that were set, with their new values. 
*javax.management.MBeanServerConnection.unregisterMBean(ObjectName)*

public void unregisterMBean(javax.management.ObjectName name)
  throws |javax.management.InstanceNotFoundException|
         |java.io.IOException|
         |javax.management.MBeanRegistrationException|
         
Unregisters an MBean from the MBean server. The MBean is identified by its 
object name. Once the method has been invoked, the MBean may no longer be 
accessed by its object name. 

    name - The object name of the MBean to be unregistered. 



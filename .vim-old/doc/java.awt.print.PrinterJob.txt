*java.awt.print.PrinterJob* *PrinterJob* The PrinterJob class is the principal class that controls
 printing.

public abstract class PrinterJob
  extends    |java.lang.Object|

|java.awt.print.PrinterJob_Description|
|java.awt.print.PrinterJob_Fields|
|java.awt.print.PrinterJob_Constructors|
|java.awt.print.PrinterJob_Methods|

====================================================================================================================================================================================

*java.awt.print.PrinterJob_Constructors*
|java.awt.print.PrinterJob()|A PrinterJob object should be created using the  static#getPrinterJob() getPrinterJobmethod.

*java.awt.print.PrinterJob_Methods*
|java.awt.print.PrinterJob.cancel()|Cancels a print job that is in progress.
|java.awt.print.PrinterJob.defaultPage()|Creates a new PageFormat instance and  sets it to a default size and orientation.
|java.awt.print.PrinterJob.defaultPage(PageFormat)|Clones the PageFormat argument and alters the  clone to describe a default page size and orientation.
|java.awt.print.PrinterJob.getCopies()|Gets the number of copies to be printed.
|java.awt.print.PrinterJob.getJobName()|Gets the name of the document to be printed.
|java.awt.print.PrinterJob.getPrinterJob()|Creates and returns a PrinterJob which is initially  associated with the default printer.
|java.awt.print.PrinterJob.getPrintService()|Returns the service (printer) for this printer job.
|java.awt.print.PrinterJob.getUserName()|Gets the name of the printing user.
|java.awt.print.PrinterJob.isCancelled()|Returns true if a print job is   in progress, but is going to be cancelled  at the next opportunity; otherwise returns  false.
|java.awt.print.PrinterJob.lookupPrintServices()|A convenience method which looks up 2D print services.
|java.awt.print.PrinterJob.lookupStreamPrintServices(String)|A convenience method which locates factories for stream print  services which can image 2D graphics.
|java.awt.print.PrinterJob.pageDialog(PageFormat)|Displays a dialog that allows modification of a  PageFormat instance.
|java.awt.print.PrinterJob.pageDialog(PrintRequestAttributeSet)|A convenience method which displays a cross-platform page setup dialog.
|java.awt.print.PrinterJob.print()|Prints a set of pages.
|java.awt.print.PrinterJob.print(PrintRequestAttributeSet)|Prints a set of pages using the settings in the attribute  set.
|java.awt.print.PrinterJob.printDialog()|Presents a dialog to the user for changing the properties of  the print job.
|java.awt.print.PrinterJob.printDialog(PrintRequestAttributeSet)|A convenience method which displays a cross-platform print dialog  for all services which are capable of printing 
|java.awt.print.PrinterJob.setCopies(int)|Sets the number of copies to be printed.
|java.awt.print.PrinterJob.setJobName(String)|Sets the name of the document to be printed.
|java.awt.print.PrinterJob.setPageable(Pageable)|Queries document for the number of pages and   the PageFormat and Printable for each  page held in the Pageable instance,    docum
|java.awt.print.PrinterJob.setPrintable(Printable)|Calls painter to render the pages.
|java.awt.print.PrinterJob.setPrintable(Printable,PageFormat)|Calls painter to render the pages in the specified  format.
|java.awt.print.PrinterJob.setPrintService(PrintService)|Associate this PrinterJob with a new PrintService.
|java.awt.print.PrinterJob.validatePage(PageFormat)|Returns the clone of page with its settings  adjusted to be compatible with the current printer of this  PrinterJob.

*java.awt.print.PrinterJob_Description*

The PrinterJob class is the principal class that controls printing. An application calls methods in this class to set up a job, optionally to invoke a print dialog with the user, 
and then to print the pages of the job. 



*java.awt.print.PrinterJob()*

public PrinterJob()

A PrinterJob object should be created using the static <code>getPrinterJob</code>(|java.awt.print.PrinterJob|) method. 


*java.awt.print.PrinterJob.cancel()*

public abstract void cancel()

Cancels a print job that is in progress. If print(|java.awt.print.PrinterJob|) has been called but has not returned then this method signals that the job should be cancelled at 
the next chance. If there is no print job in progress then this call does nothing. 



*java.awt.print.PrinterJob.defaultPage()*

public |java.awt.print.PageFormat| defaultPage()

Creates a new PageFormat instance and sets it to a default size and orientation. 



    Returns: a PageFormat set to a default size and orientation. 

*java.awt.print.PrinterJob.defaultPage(PageFormat)*

public abstract |java.awt.print.PageFormat| defaultPage(java.awt.print.PageFormat page)

Clones the PageFormat argument and alters the clone to describe a default page size and orientation. 


    page - the PageFormat to be cloned and altered 

    Returns: clone of page, altered to describe a default PageFormat. 

*java.awt.print.PrinterJob.getCopies()*

public abstract int getCopies()

Gets the number of copies to be printed. 



    Returns: the number of copies to be printed. 

*java.awt.print.PrinterJob.getJobName()*

public abstract |java.lang.String| getJobName()

Gets the name of the document to be printed. 



    Returns: the name of the document to be printed. 

*java.awt.print.PrinterJob.getPrinterJob()*

public static |java.awt.print.PrinterJob| getPrinterJob()

Creates and returns a PrinterJob which is initially associated with the default printer. If no printers are available on the system, a PrinterJob will still be returned from this 
method, but getPrintService() will return null, and calling print(|java.awt.print.PrinterJob|) with this PrinterJob might generate an exception. Applications that need to 
determine if there are suitable printers before creating a PrinterJob should ensure that the array returned from lookupPrintServices(|java.awt.print.PrinterJob|) is not empty. 



    Returns: a new PrinterJob. 

*java.awt.print.PrinterJob.getPrintService()*

public |javax.print.PrintService| getPrintService()

Returns the service (printer) for this printer job. Implementations of this class which do not support print services may return null; 



    Returns: the service for this printer job. 

*java.awt.print.PrinterJob.getUserName()*

public abstract |java.lang.String| getUserName()

Gets the name of the printing user. 



    Returns: the name of the printing user 

*java.awt.print.PrinterJob.isCancelled()*

public abstract boolean isCancelled()

Returns true if a print job is in progress, but is going to be cancelled at the next opportunity; otherwise returns false. 



    Returns: true if the job in progress is going to be cancelled; false otherwise. 

*java.awt.print.PrinterJob.lookupPrintServices()*

public static |javax.print.PrintService|[] lookupPrintServices()

A convenience method which looks up 2D print services. Services returned from this method may be installed on PrinterJobs which support print services. Calling this method is 
equivalent to calling <code>PrintServiceLookup.lookupPrintServices()</code>(|javax.print.PrintServiceLookup|) and specifying a Pageable DocFlavor. 



    Returns: a possibly empty array of 2D print services. 

*java.awt.print.PrinterJob.lookupStreamPrintServices(String)*

public static |javax.print.StreamPrintServiceFactory|[] lookupStreamPrintServices(java.lang.String mimeType)

A convenience method which locates factories for stream print services which can image 2D graphics. Sample usage : 

FileOutputStream outstream; StreamPrintService psPrinter; String psMimeType = "application/postscript"; 

StreamPrintServiceFactory[] factories = PrinterJob.lookupStreamPrintServices(psMimeType); if (factories.length > 0) { try { outstream = new File("out.ps"); psPrinter = 
factories[0].getPrintService(fos); // psPrinter can now be set as the service on a PrinterJob } catch (FileNotFoundException e) { } } 

Services returned from this method may be installed on PrinterJob instances which support print services. Calling this method is equivalent to calling 
<code>StreamPrintServiceFactory.lookupStreamPrintServiceFactories() </code>(|javax.print.StreamPrintServiceFactory|) and specifying a Pageable DocFlavor. 


    mimeType - the required output format, or null to mean any format. 

    Returns: a possibly empty array of 2D stream print service factories. 

*java.awt.print.PrinterJob.pageDialog(PageFormat)*

public abstract |java.awt.print.PageFormat| pageDialog(java.awt.print.PageFormat page)
  throws |java.awt.HeadlessException|
         
Displays a dialog that allows modification of a PageFormat instance. The page argument is used to initialize controls in the page setup dialog. If the user cancels the dialog then 
this method returns the original page object unmodified. If the user okays the dialog then this method returns a new PageFormat object with the indicated changes. In either case, 
the original page object is not modified. 


    page - the default PageFormat presented to the user for modification 

    Returns: the original page object if the dialog is cancelled; a new PageFormat object containing the format indicated by the user if the dialog is acknowledged. 

*java.awt.print.PrinterJob.pageDialog(PrintRequestAttributeSet)*

public |java.awt.print.PageFormat| pageDialog(javax.print.attribute.PrintRequestAttributeSet attributes)
  throws |java.awt.HeadlessException|
         
A convenience method which displays a cross-platform page setup dialog. The choices available will reflect the print service currently set on this PrinterJob. 

The attributes parameter on input will reflect the client's required initial selections in the user dialog. Attributes which are not specified display using the default for the 
service. On return it will reflect the user's choices. Selections may be updated by the implementation to be consistent with the supported values for the currently selected print 
service. 

The return value will be a PageFormat equivalent to the selections in the PrintRequestAttributeSet. If the user cancels the dialog, the attributes will not reflect any changes 
made by the user, and the return value will be null. 


    attributes - on input is application supplied attributes, on output the contents are updated to reflect user choices. This parameter may not be null. 

    Returns: a page format if the user does not cancel the dialog; null otherwise. 

*java.awt.print.PrinterJob.print()*

public abstract void print()
  throws |java.awt.print.PrinterException|
         
Prints a set of pages. 



*java.awt.print.PrinterJob.print(PrintRequestAttributeSet)*

public void print(javax.print.attribute.PrintRequestAttributeSet attributes)
  throws |java.awt.print.PrinterException|
         
Prints a set of pages using the settings in the attribute set. The default implementation ignores the attribute set. 

Note that some attributes may be set directly on the PrinterJob by equivalent method calls, (for example), copies: setcopies(int), job name: setJobName(String) and specifying 
media size and orientation though the PageFormat object. 

If a supported attribute-value is specified in this attribute set, it will take precedence over the API settings for this print() operation only. The following behaviour is 
specified for PageFormat: If a client uses the Printable interface, then the attributes parameter to this method is examined for attributes which specify media (by size), 
orientation, and imageable area, and those are used to construct a new PageFormat which is passed to the Printable object's print() method. See (|java.awt.print.Printable|) for an 
explanation of the required behaviour of a Printable to ensure optimal printing via PrinterJob. For clients of the Pageable interface, the PageFormat will always be as supplied by 
that interface, on a per page basis. 

These behaviours allow an application to directly pass the user settings returned from printDialog(PrintRequestAttributeSet attributes to this print() method. 


    attributes - a set of attributes for the job 

*java.awt.print.PrinterJob.printDialog()*

public abstract boolean printDialog()
  throws |java.awt.HeadlessException|
         
Presents a dialog to the user for changing the properties of the print job. This method will display a native dialog if a native print service is selected, and user choice of 
printers will be restricted to these native print services. To present the cross platform print dialog for all services, including native ones instead use 
printDialog(PrintRequestAttributeSet). 

PrinterJob implementations which can use PrintService's will update the PrintService for this PrinterJob to reflect the new service selected by the user. 



    Returns: true if the user does not cancel the dialog; false otherwise. 

*java.awt.print.PrinterJob.printDialog(PrintRequestAttributeSet)*

public boolean printDialog(javax.print.attribute.PrintRequestAttributeSet attributes)
  throws |java.awt.HeadlessException|
         
A convenience method which displays a cross-platform print dialog for all services which are capable of printing 2D graphics using the Pageable interface. The selected printer 
when the dialog is initially displayed will reflect the print service currently attached to this print job. If the user changes the print service, the PrinterJob will be updated 
to reflect this, unless the user cancels the dialog. As well as allowing the user to select the destination printer, the user can also select values of various print request 
attributes. 

The attributes parameter on input will reflect the applications required initial selections in the user dialog. Attributes not specified display using the default for the service. 
On return it will reflect the user's choices. Selections may be updated by the implementation to be consistent with the supported values for the currently selected print service. 

As the user scrolls to a new print service selection, the values copied are based on the settings for the previous service, together with any user changes. The values are not 
based on the original settings supplied by the client. 

With the exception of selected printer, the PrinterJob state is not updated to reflect the user's changes. For the selections to affect a printer job, the attributes must be 
specified in the call to the print(PrintRequestAttributeSet) method. If using the Pageable interface, clients which intend to use media selected by the user must create a 
PageFormat derived from the user's selections. If the user cancels the dialog, the attributes will not reflect any changes made by the user. 


    attributes - on input is application supplied attributes, on output the contents are updated to reflect user choices. This parameter may not be null. 

    Returns: true if the user does not cancel the dialog; false otherwise. 

*java.awt.print.PrinterJob.setCopies(int)*

public abstract void setCopies(int copies)

Sets the number of copies to be printed. 


    copies - the number of copies to be printed 

*java.awt.print.PrinterJob.setJobName(String)*

public abstract void setJobName(java.lang.String jobName)

Sets the name of the document to be printed. The document name can not be null. 


    jobName - the name of the document to be printed 

*java.awt.print.PrinterJob.setPageable(Pageable)*

public abstract void setPageable(java.awt.print.Pageable document)
  throws |java.lang.NullPointerException|
         
Queries document for the number of pages and the PageFormat and Printable for each page held in the Pageable instance, document. 


    document - the pages to be printed. It can not be null. 

*java.awt.print.PrinterJob.setPrintable(Printable)*

public abstract void setPrintable(java.awt.print.Printable painter)

Calls painter to render the pages. The pages in the document to be printed by this PrinterJob are rendered by the (|java.awt.print.Printable|) object, painter. The 
(|java.awt.print.PageFormat|) for each page is the default page format. 


    painter - the Printable that renders each page of the document. 

*java.awt.print.PrinterJob.setPrintable(Printable,PageFormat)*

public abstract void setPrintable(
  java.awt.print.Printable painter,
  java.awt.print.PageFormat format)

Calls painter to render the pages in the specified format. The pages in the document to be printed by this PrinterJob are rendered by the Printable object, painter. The PageFormat 
of each page is format. 


    painter - the Printable called to render each page of the document 
    format - the size and orientation of each page to be printed 

*java.awt.print.PrinterJob.setPrintService(PrintService)*

public void setPrintService(javax.print.PrintService service)
  throws |java.awt.print.PrinterException|
         
Associate this PrinterJob with a new PrintService. This method is overridden by subclasses which support specifying a Print Service. 

Throws PrinterException if the specified service cannot support the Pageable and Printable interfaces necessary to support 2D printing. 


    service - a print service that supports 2D printing 

*java.awt.print.PrinterJob.validatePage(PageFormat)*

public abstract |java.awt.print.PageFormat| validatePage(java.awt.print.PageFormat page)

Returns the clone of page with its settings adjusted to be compatible with the current printer of this PrinterJob. For example, the returned PageFormat could have its imageable 
area adjusted to fit within the physical area of the paper that is used by the current printer. 


    page - the PageFormat that is cloned and whose settings are changed to be compatible with the current printer 

    Returns: a PageFormat that is cloned from page and whose settings are changed to conform with this PrinterJob. 



*javax.sound.sampled.AudioInputStream* *AudioInputStream* An audio input stream 

public class AudioInputStream
  extends    |java.io.InputStream|

|javax.sound.sampled.AudioInputStream_Description|
|javax.sound.sampled.AudioInputStream_Fields|
|javax.sound.sampled.AudioInputStream_Constructors|
|javax.sound.sampled.AudioInputStream_Methods|

================================================================================

*javax.sound.sampled.AudioInputStream_Fields*
|javax.sound.sampled.AudioFormat_javax.sound.sampled.AudioInputStream.format|
|long_javax.sound.sampled.AudioInputStream.frameLength|
|long_javax.sound.sampled.AudioInputStream.framePos|
|int_javax.sound.sampled.AudioInputStream.frameSize|

*javax.sound.sampled.AudioInputStream_Constructors*
|javax.sound.sampled.AudioInputStream(InputStream,AudioFormat,long)|Constructs 
|javax.sound.sampled.AudioInputStream(TargetDataLine)|Constructs an audio input

*javax.sound.sampled.AudioInputStream_Methods*
|javax.sound.sampled.AudioInputStream.available()|Returns the maximum number of
|javax.sound.sampled.AudioInputStream.close()|Closes this audio input stream an
|javax.sound.sampled.AudioInputStream.getFormat()|Obtains the audio format of t
|javax.sound.sampled.AudioInputStream.getFrameLength()|Obtains the length of th
|javax.sound.sampled.AudioInputStream.mark(int)|Marks the current position in t
|javax.sound.sampled.AudioInputStream.markSupported()|Tests whether this audio 
|javax.sound.sampled.AudioInputStream.read()|Reads the next byte of data from t
|javax.sound.sampled.AudioInputStream.read(byte[])|Reads some number of bytes f
|javax.sound.sampled.AudioInputStream.read(byte[],int,int)|Reads up to a specif
|javax.sound.sampled.AudioInputStream.reset()|Repositions this audio input stre
|javax.sound.sampled.AudioInputStream.skip(long)|Skips over and discards a spec

*javax.sound.sampled.AudioInputStream_Description*

An audio input stream is an input stream with a specified audio format and 
length. The length is expressed in sample frames, not bytes. Several methods 
are provided for reading a certain number of bytes from the stream, or an 
unspecified number of bytes. The audio input stream keeps track of the last 
byte that was read. You can skip over an arbitrary number of bytes to get to a 
later position for reading. An audio input stream may support marks. When you 
set a mark, the current position is remembered so that you can return to it 
later. 

The AudioSystem class includes many methods that manipulate AudioInputStream 
objects. For example, the methods let you: 

obtain an audio input stream from an external audio file, stream, or URL write 
an external file from an audio input stream convert an audio input stream to a 
different audio format 


*javax.sound.sampled.AudioFormat_javax.sound.sampled.AudioInputStream.format*

An audio input stream is an input stream with a specified audio format and 
length. The length is expressed in sample frames, not bytes. Several methods 
are provided for reading a certain number of bytes from the stream, or an 
unspecified number of bytes. The audio input stream keeps track of the last 
byte that was read. You can skip over an arbitrary number of bytes to get to a 
later position for reading. An audio input stream may support marks. When you 
set a mark, the current position is remembered so that you can return to it 
later. 

The AudioSystem class includes many methods that manipulate AudioInputStream 
objects. For example, the methods let you: 

obtain an audio input stream from an external audio file, stream, or URL write 
an external file from an audio input stream convert an audio input stream to a 
different audio format 


*long_javax.sound.sampled.AudioInputStream.frameLength*

An audio input stream is an input stream with a specified audio format and 
length. The length is expressed in sample frames, not bytes. Several methods 
are provided for reading a certain number of bytes from the stream, or an 
unspecified number of bytes. The audio input stream keeps track of the last 
byte that was read. You can skip over an arbitrary number of bytes to get to a 
later position for reading. An audio input stream may support marks. When you 
set a mark, the current position is remembered so that you can return to it 
later. 

The AudioSystem class includes many methods that manipulate AudioInputStream 
objects. For example, the methods let you: 

obtain an audio input stream from an external audio file, stream, or URL write 
an external file from an audio input stream convert an audio input stream to a 
different audio format 


*long_javax.sound.sampled.AudioInputStream.framePos*

An audio input stream is an input stream with a specified audio format and 
length. The length is expressed in sample frames, not bytes. Several methods 
are provided for reading a certain number of bytes from the stream, or an 
unspecified number of bytes. The audio input stream keeps track of the last 
byte that was read. You can skip over an arbitrary number of bytes to get to a 
later position for reading. An audio input stream may support marks. When you 
set a mark, the current position is remembered so that you can return to it 
later. 

The AudioSystem class includes many methods that manipulate AudioInputStream 
objects. For example, the methods let you: 

obtain an audio input stream from an external audio file, stream, or URL write 
an external file from an audio input stream convert an audio input stream to a 
different audio format 


*int_javax.sound.sampled.AudioInputStream.frameSize*

An audio input stream is an input stream with a specified audio format and 
length. The length is expressed in sample frames, not bytes. Several methods 
are provided for reading a certain number of bytes from the stream, or an 
unspecified number of bytes. The audio input stream keeps track of the last 
byte that was read. You can skip over an arbitrary number of bytes to get to a 
later position for reading. An audio input stream may support marks. When you 
set a mark, the current position is remembered so that you can return to it 
later. 

The AudioSystem class includes many methods that manipulate AudioInputStream 
objects. For example, the methods let you: 

obtain an audio input stream from an external audio file, stream, or URL write 
an external file from an audio input stream convert an audio input stream to a 
different audio format 



*javax.sound.sampled.AudioInputStream(InputStream,AudioFormat,long)*

public AudioInputStream(
  java.io.InputStream stream,
  javax.sound.sampled.AudioFormat format,
  long length)

Constructs an audio input stream that has the requested format and length in 
sample frames, using audio data from the specified input stream. 

    stream - the stream on which this AudioInputStream object is based 
    format - the format of this stream's audio data 
    length - the length in sample frames of the data in this stream 

*javax.sound.sampled.AudioInputStream(TargetDataLine)*

public AudioInputStream(javax.sound.sampled.TargetDataLine line)

Constructs an audio input stream that reads its data from the target data line 
indicated. The format of the stream is the same as that of the target data 
line, and the length is AudioSystem#NOT_SPECIFIED. 

    line - the target data line from which this stream obtains its data. 

*javax.sound.sampled.AudioInputStream.available()*

public int available()
  throws |java.io.IOException|
         
Returns the maximum number of bytes that can be read (or skipped over) from 
this audio input stream without blocking. This limit applies only to the next 
invocation of a read or skip method for this audio input stream; the limit can 
vary each time these methods are invoked. Depending on the underlying stream,an 
IOException may be thrown if this stream is closed. 


    Returns: the number of bytes that can be read from this audio input stream without 
             blocking 
*javax.sound.sampled.AudioInputStream.close()*

public void close()
  throws |java.io.IOException|
         
Closes this audio input stream and releases any system resources associated 
with the stream. 


*javax.sound.sampled.AudioInputStream.getFormat()*

public |javax.sound.sampled.AudioFormat| getFormat()

Obtains the audio format of the sound data in this audio input stream. 


    Returns: an audio format object describing this stream's format 
*javax.sound.sampled.AudioInputStream.getFrameLength()*

public long getFrameLength()

Obtains the length of the stream, expressed in sample frames rather than bytes. 


    Returns: the length in sample frames 
*javax.sound.sampled.AudioInputStream.mark(int)*

public void mark(int readlimit)

Marks the current position in this audio input stream. 

    readlimit - the maximum number of bytes that can be read before the mark position becomes 
       invalid. 

*javax.sound.sampled.AudioInputStream.markSupported()*

public boolean markSupported()

Tests whether this audio input stream supports the mark and reset methods. 


    Returns: true if this stream supports the mark and reset methods; false otherwise 
*javax.sound.sampled.AudioInputStream.read()*

public int read()
  throws |java.io.IOException|
         
Reads the next byte of data from the audio input stream. The audio input 
stream's frame size must be one byte, or an IOException will be thrown. 


    Returns: the next byte of data, or -1 if the end of the stream is reached 
*javax.sound.sampled.AudioInputStream.read(byte[])*

public int read(byte[] b)
  throws |java.io.IOException|
         
Reads some number of bytes from the audio input stream and stores them into the 
buffer array b. The number of bytes actually read is returned as an integer. 
This method blocks until input data is available, the end of the stream is 
detected, or an exception is thrown. This method will always read an integral 
number of frames. If the length of the array is not an integral number of 
frames, a maximum of b.length - (b.length % frameSize) bytes will be read. 

    b - the buffer into which the data is read 

    Returns: the total number of bytes read into the buffer, or -1 if there is no more data 
             because the end of the stream has been reached 
*javax.sound.sampled.AudioInputStream.read(byte[],int,int)*

public int read(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Reads up to a specified maximum number of bytes of data from the audio stream, 
putting them into the given byte array. This method will always read an 
integral number of frames. If len does not specify an integral number of 
frames, a maximum of len - (len % frameSize) bytes will be read. 

    b - the buffer into which the data is read 
    off - the offset, from the beginning of array b, at which the data will be written 
    len - the maximum number of bytes to read 

    Returns: the total number of bytes read into the buffer, or -1 if there is no more data 
             because the end of the stream has been reached 
*javax.sound.sampled.AudioInputStream.reset()*

public void reset()
  throws |java.io.IOException|
         
Repositions this audio input stream to the position it had at the time its mark 
method was last invoked. 


*javax.sound.sampled.AudioInputStream.skip(long)*

public long skip(long n)
  throws |java.io.IOException|
         
Skips over and discards a specified number of bytes from this audio input 
stream. 

    n - the requested number of bytes to be skipped 

    Returns: the actual number of bytes skipped 


*org.w3c.dom.events.MouseEvent* *MouseEvent* The MouseEvent interface provides s

public interface interface MouseEvent

  implements |org.w3c.dom.events.UIEvent|

|org.w3c.dom.events.MouseEvent_Description|
|org.w3c.dom.events.MouseEvent_Fields|
|org.w3c.dom.events.MouseEvent_Constructors|
|org.w3c.dom.events.MouseEvent_Methods|

================================================================================

*org.w3c.dom.events.MouseEvent_Methods*
|org.w3c.dom.events.MouseEvent.getAltKey()|Used to indicate whether the 'alt' k
|org.w3c.dom.events.MouseEvent.getButton()|During mouse events caused by the de
|org.w3c.dom.events.MouseEvent.getClientX()|The horizontal coordinate at which 
|org.w3c.dom.events.MouseEvent.getClientY()|The vertical coordinate at which th
|org.w3c.dom.events.MouseEvent.getCtrlKey()|Used to indicate whether the 'ctrl'
|org.w3c.dom.events.MouseEvent.getMetaKey()|Used to indicate whether the 'meta'
|org.w3c.dom.events.MouseEvent.getRelatedTarget()|Used to identify a secondary 
|org.w3c.dom.events.MouseEvent.getScreenX()|The horizontal coordinate at which 
|org.w3c.dom.events.MouseEvent.getScreenY()|The vertical coordinate at which th
|org.w3c.dom.events.MouseEvent.getShiftKey()|Used to indicate whether the 'shif
|org.w3c.dom.events.MouseEvent.initMouseEvent(String,boolean,boolean,AbstractView,int,int,int,int,int,boolean,boolean,boolean,boolean,short,EventTarget)|

*org.w3c.dom.events.MouseEvent_Description*

The MouseEvent interface provides specific contextual information associated 
with Mouse events. The detail attribute inherited from UIEvent indicates the 
number of times a mouse button has been pressed and released over the same 
screen location during a user action. The attribute value is 1 when the user 
begins this action and increments by 1 for each full sequence of pressing and 
releasing. If the user moves the mouse between the mousedown and mouseup the 
value will be set to 0, indicating that no click is occurring. In the case of 
nested elements mouse events are always targeted at the most deeply nested 
element. Ancestors of the targeted element may use bubbling to obtain 
notification of mouse events which occur within its descendent elements. See 
also the Document Object Model (DOM) Level 2 Events Specification. 


*org.w3c.dom.events.MouseEvent.getAltKey()*

public boolean getAltKey()

Used to indicate whether the 'alt' key was depressed during the firing of the 
event. On some platforms this key may map to an alternative key name. 


*org.w3c.dom.events.MouseEvent.getButton()*

public short getButton()

During mouse events caused by the depression or release of a mouse button, 
button is used to indicate which mouse button changed state. The values for 
button range from zero to indicate the left button of the mouse, one to 
indicate the middle button if present, and two to indicate the right button. 
For mice configured for left handed use in which the button actions are 
reversed the values are instead read from right to left. 


*org.w3c.dom.events.MouseEvent.getClientX()*

public int getClientX()

The horizontal coordinate at which the event occurred relative to the DOM 
implementation's client area. 


*org.w3c.dom.events.MouseEvent.getClientY()*

public int getClientY()

The vertical coordinate at which the event occurred relative to the DOM 
implementation's client area. 


*org.w3c.dom.events.MouseEvent.getCtrlKey()*

public boolean getCtrlKey()

Used to indicate whether the 'ctrl' key was depressed during the firing of the 
event. 


*org.w3c.dom.events.MouseEvent.getMetaKey()*

public boolean getMetaKey()

Used to indicate whether the 'meta' key was depressed during the firing of the 
event. On some platforms this key may map to an alternative key name. 


*org.w3c.dom.events.MouseEvent.getRelatedTarget()*

public |org.w3c.dom.events.EventTarget| getRelatedTarget()

Used to identify a secondary EventTarget related to a UI event. Currently this 
attribute is used with the mouseover event to indicate the EventTarget which 
the pointing device exited and with the mouseout event to indicate the 
EventTarget which the pointing device entered. 


*org.w3c.dom.events.MouseEvent.getScreenX()*

public int getScreenX()

The horizontal coordinate at which the event occurred relative to the origin of 
the screen coordinate system. 


*org.w3c.dom.events.MouseEvent.getScreenY()*

public int getScreenY()

The vertical coordinate at which the event occurred relative to the origin of 
the screen coordinate system. 


*org.w3c.dom.events.MouseEvent.getShiftKey()*

public boolean getShiftKey()

Used to indicate whether the 'shift' key was depressed during the firing of the 
event. 


*org.w3c.dom.events.MouseEvent.initMouseEvent(String,boolean,boolean,AbstractView,int,int,int,int,int,boolean,boolean,boolean,boolean,short,EventTarget)*

public void initMouseEvent(
  java.lang.String typeArg,
  boolean canBubbleArg,
  boolean cancelableArg,
  org.w3c.dom.views.AbstractView viewArg,
  int detailArg,
  int screenXArg,
  int screenYArg,
  int clientXArg,
  int clientYArg,
  boolean ctrlKeyArg,
  boolean altKeyArg,
  boolean shiftKeyArg,
  boolean metaKeyArg,
  short buttonArg,
  org.w3c.dom.events.EventTarget relatedTargetArg)

The initMouseEvent method is used to initialize the value of a MouseEvent 
created through the DocumentEvent interface. This method may only be called 
before the MouseEvent has been dispatched via the dispatchEvent method, though 
it may be called multiple times during that phase if necessary. If called 
multiple times, the final invocation takes precedence. 

    typeArgSpecifies - the event type. 
    canBubbleArgSpecifies - whether or not the event can bubble. 
    cancelableArgSpecifies - whether or not the event's default action can be prevented. 
    viewArgSpecifies - the Event's AbstractView. 
    detailArgSpecifies - the Event's mouse click count. 
    screenXArgSpecifies - the Event's screen x coordinate 
    screenYArgSpecifies - the Event's screen y coordinate 
    clientXArgSpecifies - the Event's client x coordinate 
    clientYArgSpecifies - the Event's client y coordinate 
    ctrlKeyArgSpecifies - whether or not control key was depressed during the Event. 
    altKeyArgSpecifies - whether or not alt key was depressed during the Event. 
    shiftKeyArgSpecifies - whether or not shift key was depressed during the Event. 
    metaKeyArgSpecifies - whether or not meta key was depressed during the Event. 
    buttonArgSpecifies - the Event's mouse button. 
    relatedTargetArgSpecifies - the Event's related EventTarget. 



*javax.transaction.xa.XAResource* *XAResource* The XAResource interface is a Jav

public interface interface XAResource


|javax.transaction.xa.XAResource_Description|
|javax.transaction.xa.XAResource_Fields|
|javax.transaction.xa.XAResource_Constructors|
|javax.transaction.xa.XAResource_Methods|

================================================================================

*javax.transaction.xa.XAResource_Fields*
|int_javax.transaction.xa.XAResource.TMENDRSCAN|
|int_javax.transaction.xa.XAResource.TMFAIL|
|int_javax.transaction.xa.XAResource.TMJOIN|
|int_javax.transaction.xa.XAResource.TMNOFLAGS|
|int_javax.transaction.xa.XAResource.TMONEPHASE|
|int_javax.transaction.xa.XAResource.TMRESUME|
|int_javax.transaction.xa.XAResource.TMSTARTRSCAN|
|int_javax.transaction.xa.XAResource.TMSUCCESS|
|int_javax.transaction.xa.XAResource.TMSUSPEND|
|int_javax.transaction.xa.XAResource.XA_OK|
|int_javax.transaction.xa.XAResource.XA_RDONLY|

*javax.transaction.xa.XAResource_Methods*
|javax.transaction.xa.XAResource.commit(Xid,boolean)|Commits the global transac
|javax.transaction.xa.XAResource.end(Xid,int)|Ends the work performed on behalf
|javax.transaction.xa.XAResource.forget(Xid)|Tells the resource manager to forg
|javax.transaction.xa.XAResource.getTransactionTimeout()|Obtains the current tr
|javax.transaction.xa.XAResource.isSameRM(XAResource)|This method is called to 
|javax.transaction.xa.XAResource.prepare(Xid)|Ask the resource manager to prepa
|javax.transaction.xa.XAResource.recover(int)|Obtains a list of prepared transa
|javax.transaction.xa.XAResource.rollback(Xid)|Informs the resource manager to 
|javax.transaction.xa.XAResource.setTransactionTimeout(int)|Sets the current tr
|javax.transaction.xa.XAResource.start(Xid,int)|Starts work on behalf of a tran

*javax.transaction.xa.XAResource_Description*

The XAResource interface is a Java mapping of the industry standard XA 
interface based on the X/Open CAE Specification (Distributed Transaction 
Processing: The XA Specification). 

The XA interface defines the contract between a Resource Manager and a 
Transaction Manager in a distributed transaction processing (DTP) environment. 
A JDBC driver or a JMS provider implements this interface to support the 
association between a global transaction and a database or message service 
connection. 

The XAResource interface can be supported by any transactional resource that is 
intended to be used by application programs in an environment where 
transactions are controlled by an external transaction manager. An example of 
such a resource is a database management system. An application may access data 
through multiple database connections. Each database connection is enlisted 
with the transaction manager as a transactional resource. The transaction 
manager obtains an XAResource for each connection participating in a global 
transaction. The transaction manager uses the start method to associate the 
global transaction with the resource, and it uses the end method to 
disassociate the transaction from the resource. The resource manager is 
responsible for associating the global transaction to all work performed on its 
data between the start and end method invocations. 

At transaction commit time, the resource managers are informed by the 
transaction manager to prepare, commit, or rollback a transaction according to 
the two-phase commit protocol. 


*int_javax.transaction.xa.XAResource.TMENDRSCAN*

The XAResource interface is a Java mapping of the industry standard XA 
interface based on the X/Open CAE Specification (Distributed Transaction 
Processing: The XA Specification). 

The XA interface defines the contract between a Resource Manager and a 
Transaction Manager in a distributed transaction processing (DTP) environment. 
A JDBC driver or a JMS provider implements this interface to support the 
association between a global transaction and a database or message service 
connection. 

The XAResource interface can be supported by any transactional resource that is 
intended to be used by application programs in an environment where 
transactions are controlled by an external transaction manager. An example of 
such a resource is a database management system. An application may access data 
through multiple database connections. Each database connection is enlisted 
with the transaction manager as a transactional resource. The transaction 
manager obtains an XAResource for each connection participating in a global 
transaction. The transaction manager uses the start method to associate the 
global transaction with the resource, and it uses the end method to 
disassociate the transaction from the resource. The resource manager is 
responsible for associating the global transaction to all work performed on its 
data between the start and end method invocations. 

At transaction commit time, the resource managers are informed by the 
transaction manager to prepare, commit, or rollback a transaction according to 
the two-phase commit protocol. 


*int_javax.transaction.xa.XAResource.TMFAIL*

The XAResource interface is a Java mapping of the industry standard XA 
interface based on the X/Open CAE Specification (Distributed Transaction 
Processing: The XA Specification). 

The XA interface defines the contract between a Resource Manager and a 
Transaction Manager in a distributed transaction processing (DTP) environment. 
A JDBC driver or a JMS provider implements this interface to support the 
association between a global transaction and a database or message service 
connection. 

The XAResource interface can be supported by any transactional resource that is 
intended to be used by application programs in an environment where 
transactions are controlled by an external transaction manager. An example of 
such a resource is a database management system. An application may access data 
through multiple database connections. Each database connection is enlisted 
with the transaction manager as a transactional resource. The transaction 
manager obtains an XAResource for each connection participating in a global 
transaction. The transaction manager uses the start method to associate the 
global transaction with the resource, and it uses the end method to 
disassociate the transaction from the resource. The resource manager is 
responsible for associating the global transaction to all work performed on its 
data between the start and end method invocations. 

At transaction commit time, the resource managers are informed by the 
transaction manager to prepare, commit, or rollback a transaction according to 
the two-phase commit protocol. 


*int_javax.transaction.xa.XAResource.TMJOIN*

The XAResource interface is a Java mapping of the industry standard XA 
interface based on the X/Open CAE Specification (Distributed Transaction 
Processing: The XA Specification). 

The XA interface defines the contract between a Resource Manager and a 
Transaction Manager in a distributed transaction processing (DTP) environment. 
A JDBC driver or a JMS provider implements this interface to support the 
association between a global transaction and a database or message service 
connection. 

The XAResource interface can be supported by any transactional resource that is 
intended to be used by application programs in an environment where 
transactions are controlled by an external transaction manager. An example of 
such a resource is a database management system. An application may access data 
through multiple database connections. Each database connection is enlisted 
with the transaction manager as a transactional resource. The transaction 
manager obtains an XAResource for each connection participating in a global 
transaction. The transaction manager uses the start method to associate the 
global transaction with the resource, and it uses the end method to 
disassociate the transaction from the resource. The resource manager is 
responsible for associating the global transaction to all work performed on its 
data between the start and end method invocations. 

At transaction commit time, the resource managers are informed by the 
transaction manager to prepare, commit, or rollback a transaction according to 
the two-phase commit protocol. 


*int_javax.transaction.xa.XAResource.TMNOFLAGS*

The XAResource interface is a Java mapping of the industry standard XA 
interface based on the X/Open CAE Specification (Distributed Transaction 
Processing: The XA Specification). 

The XA interface defines the contract between a Resource Manager and a 
Transaction Manager in a distributed transaction processing (DTP) environment. 
A JDBC driver or a JMS provider implements this interface to support the 
association between a global transaction and a database or message service 
connection. 

The XAResource interface can be supported by any transactional resource that is 
intended to be used by application programs in an environment where 
transactions are controlled by an external transaction manager. An example of 
such a resource is a database management system. An application may access data 
through multiple database connections. Each database connection is enlisted 
with the transaction manager as a transactional resource. The transaction 
manager obtains an XAResource for each connection participating in a global 
transaction. The transaction manager uses the start method to associate the 
global transaction with the resource, and it uses the end method to 
disassociate the transaction from the resource. The resource manager is 
responsible for associating the global transaction to all work performed on its 
data between the start and end method invocations. 

At transaction commit time, the resource managers are informed by the 
transaction manager to prepare, commit, or rollback a transaction according to 
the two-phase commit protocol. 


*int_javax.transaction.xa.XAResource.TMONEPHASE*

The XAResource interface is a Java mapping of the industry standard XA 
interface based on the X/Open CAE Specification (Distributed Transaction 
Processing: The XA Specification). 

The XA interface defines the contract between a Resource Manager and a 
Transaction Manager in a distributed transaction processing (DTP) environment. 
A JDBC driver or a JMS provider implements this interface to support the 
association between a global transaction and a database or message service 
connection. 

The XAResource interface can be supported by any transactional resource that is 
intended to be used by application programs in an environment where 
transactions are controlled by an external transaction manager. An example of 
such a resource is a database management system. An application may access data 
through multiple database connections. Each database connection is enlisted 
with the transaction manager as a transactional resource. The transaction 
manager obtains an XAResource for each connection participating in a global 
transaction. The transaction manager uses the start method to associate the 
global transaction with the resource, and it uses the end method to 
disassociate the transaction from the resource. The resource manager is 
responsible for associating the global transaction to all work performed on its 
data between the start and end method invocations. 

At transaction commit time, the resource managers are informed by the 
transaction manager to prepare, commit, or rollback a transaction according to 
the two-phase commit protocol. 


*int_javax.transaction.xa.XAResource.TMRESUME*

The XAResource interface is a Java mapping of the industry standard XA 
interface based on the X/Open CAE Specification (Distributed Transaction 
Processing: The XA Specification). 

The XA interface defines the contract between a Resource Manager and a 
Transaction Manager in a distributed transaction processing (DTP) environment. 
A JDBC driver or a JMS provider implements this interface to support the 
association between a global transaction and a database or message service 
connection. 

The XAResource interface can be supported by any transactional resource that is 
intended to be used by application programs in an environment where 
transactions are controlled by an external transaction manager. An example of 
such a resource is a database management system. An application may access data 
through multiple database connections. Each database connection is enlisted 
with the transaction manager as a transactional resource. The transaction 
manager obtains an XAResource for each connection participating in a global 
transaction. The transaction manager uses the start method to associate the 
global transaction with the resource, and it uses the end method to 
disassociate the transaction from the resource. The resource manager is 
responsible for associating the global transaction to all work performed on its 
data between the start and end method invocations. 

At transaction commit time, the resource managers are informed by the 
transaction manager to prepare, commit, or rollback a transaction according to 
the two-phase commit protocol. 


*int_javax.transaction.xa.XAResource.TMSTARTRSCAN*

The XAResource interface is a Java mapping of the industry standard XA 
interface based on the X/Open CAE Specification (Distributed Transaction 
Processing: The XA Specification). 

The XA interface defines the contract between a Resource Manager and a 
Transaction Manager in a distributed transaction processing (DTP) environment. 
A JDBC driver or a JMS provider implements this interface to support the 
association between a global transaction and a database or message service 
connection. 

The XAResource interface can be supported by any transactional resource that is 
intended to be used by application programs in an environment where 
transactions are controlled by an external transaction manager. An example of 
such a resource is a database management system. An application may access data 
through multiple database connections. Each database connection is enlisted 
with the transaction manager as a transactional resource. The transaction 
manager obtains an XAResource for each connection participating in a global 
transaction. The transaction manager uses the start method to associate the 
global transaction with the resource, and it uses the end method to 
disassociate the transaction from the resource. The resource manager is 
responsible for associating the global transaction to all work performed on its 
data between the start and end method invocations. 

At transaction commit time, the resource managers are informed by the 
transaction manager to prepare, commit, or rollback a transaction according to 
the two-phase commit protocol. 


*int_javax.transaction.xa.XAResource.TMSUCCESS*

The XAResource interface is a Java mapping of the industry standard XA 
interface based on the X/Open CAE Specification (Distributed Transaction 
Processing: The XA Specification). 

The XA interface defines the contract between a Resource Manager and a 
Transaction Manager in a distributed transaction processing (DTP) environment. 
A JDBC driver or a JMS provider implements this interface to support the 
association between a global transaction and a database or message service 
connection. 

The XAResource interface can be supported by any transactional resource that is 
intended to be used by application programs in an environment where 
transactions are controlled by an external transaction manager. An example of 
such a resource is a database management system. An application may access data 
through multiple database connections. Each database connection is enlisted 
with the transaction manager as a transactional resource. The transaction 
manager obtains an XAResource for each connection participating in a global 
transaction. The transaction manager uses the start method to associate the 
global transaction with the resource, and it uses the end method to 
disassociate the transaction from the resource. The resource manager is 
responsible for associating the global transaction to all work performed on its 
data between the start and end method invocations. 

At transaction commit time, the resource managers are informed by the 
transaction manager to prepare, commit, or rollback a transaction according to 
the two-phase commit protocol. 


*int_javax.transaction.xa.XAResource.TMSUSPEND*

The XAResource interface is a Java mapping of the industry standard XA 
interface based on the X/Open CAE Specification (Distributed Transaction 
Processing: The XA Specification). 

The XA interface defines the contract between a Resource Manager and a 
Transaction Manager in a distributed transaction processing (DTP) environment. 
A JDBC driver or a JMS provider implements this interface to support the 
association between a global transaction and a database or message service 
connection. 

The XAResource interface can be supported by any transactional resource that is 
intended to be used by application programs in an environment where 
transactions are controlled by an external transaction manager. An example of 
such a resource is a database management system. An application may access data 
through multiple database connections. Each database connection is enlisted 
with the transaction manager as a transactional resource. The transaction 
manager obtains an XAResource for each connection participating in a global 
transaction. The transaction manager uses the start method to associate the 
global transaction with the resource, and it uses the end method to 
disassociate the transaction from the resource. The resource manager is 
responsible for associating the global transaction to all work performed on its 
data between the start and end method invocations. 

At transaction commit time, the resource managers are informed by the 
transaction manager to prepare, commit, or rollback a transaction according to 
the two-phase commit protocol. 


*int_javax.transaction.xa.XAResource.XA_OK*

The XAResource interface is a Java mapping of the industry standard XA 
interface based on the X/Open CAE Specification (Distributed Transaction 
Processing: The XA Specification). 

The XA interface defines the contract between a Resource Manager and a 
Transaction Manager in a distributed transaction processing (DTP) environment. 
A JDBC driver or a JMS provider implements this interface to support the 
association between a global transaction and a database or message service 
connection. 

The XAResource interface can be supported by any transactional resource that is 
intended to be used by application programs in an environment where 
transactions are controlled by an external transaction manager. An example of 
such a resource is a database management system. An application may access data 
through multiple database connections. Each database connection is enlisted 
with the transaction manager as a transactional resource. The transaction 
manager obtains an XAResource for each connection participating in a global 
transaction. The transaction manager uses the start method to associate the 
global transaction with the resource, and it uses the end method to 
disassociate the transaction from the resource. The resource manager is 
responsible for associating the global transaction to all work performed on its 
data between the start and end method invocations. 

At transaction commit time, the resource managers are informed by the 
transaction manager to prepare, commit, or rollback a transaction according to 
the two-phase commit protocol. 


*int_javax.transaction.xa.XAResource.XA_RDONLY*

The XAResource interface is a Java mapping of the industry standard XA 
interface based on the X/Open CAE Specification (Distributed Transaction 
Processing: The XA Specification). 

The XA interface defines the contract between a Resource Manager and a 
Transaction Manager in a distributed transaction processing (DTP) environment. 
A JDBC driver or a JMS provider implements this interface to support the 
association between a global transaction and a database or message service 
connection. 

The XAResource interface can be supported by any transactional resource that is 
intended to be used by application programs in an environment where 
transactions are controlled by an external transaction manager. An example of 
such a resource is a database management system. An application may access data 
through multiple database connections. Each database connection is enlisted 
with the transaction manager as a transactional resource. The transaction 
manager obtains an XAResource for each connection participating in a global 
transaction. The transaction manager uses the start method to associate the 
global transaction with the resource, and it uses the end method to 
disassociate the transaction from the resource. The resource manager is 
responsible for associating the global transaction to all work performed on its 
data between the start and end method invocations. 

At transaction commit time, the resource managers are informed by the 
transaction manager to prepare, commit, or rollback a transaction according to 
the two-phase commit protocol. 



*javax.transaction.xa.XAResource.commit(Xid,boolean)*

public void commit(
  javax.transaction.xa.Xid xid,
  boolean onePhase)
  throws |javax.transaction.xa.XAException|
         
Commits the global transaction specified by xid. 

    xid - A global transaction identifier 
    onePhase - If true, the resource manager should use a one-phase commit protocol to commit 
       the work done on behalf of xid. 

*javax.transaction.xa.XAResource.end(Xid,int)*

public void end(
  javax.transaction.xa.Xid xid,
  int flags)
  throws |javax.transaction.xa.XAException|
         
Ends the work performed on behalf of a transaction branch. The resource manager 
disassociates the XA resource from the transaction branch specified and lets 
the transaction complete. 

If TMSUSPEND is specified in the flags, the transaction branch is temporarily 
suspended in an incomplete state. The transaction context is in a suspended 
state and must be resumed via the start method with TMRESUME specified. 

If TMFAIL is specified, the portion of work has failed. The resource manager 
may mark the transaction as rollback-only 

If TMSUCCESS is specified, the portion of work has completed successfully. 

    xid - A global transaction identifier that is the same as the identifier used 
       previously in the start method. 
    flags - One of TMSUCCESS, TMFAIL, or TMSUSPEND. 

*javax.transaction.xa.XAResource.forget(Xid)*

public void forget(javax.transaction.xa.Xid xid)
  throws |javax.transaction.xa.XAException|
         
Tells the resource manager to forget about a heuristically completed 
transaction branch. 

    xid - A global transaction identifier. 

*javax.transaction.xa.XAResource.getTransactionTimeout()*

public int getTransactionTimeout()
  throws |javax.transaction.xa.XAException|
         
Obtains the current transaction timeout value set for this XAResource instance. 
If XAResource.setTransactionTimeout was not used prior to invoking this method, 
the return value is the default timeout set for the resource manager; 
otherwise, the value used in the previous setTransactionTimeout call is 
returned. 


    Returns: the transaction timeout value in seconds. 
*javax.transaction.xa.XAResource.isSameRM(XAResource)*

public boolean isSameRM(javax.transaction.xa.XAResource xares)
  throws |javax.transaction.xa.XAException|
         
This method is called to determine if the resource manager instance represented 
by the target object is the same as the resouce manager instance represented by 
the parameter xares. 

    xares - An XAResource object whose resource manager instance is to be compared with the 
       resource manager instance of the target object. 

    Returns: true if it's the same RM instance; otherwise false. 
*javax.transaction.xa.XAResource.prepare(Xid)*

public int prepare(javax.transaction.xa.Xid xid)
  throws |javax.transaction.xa.XAException|
         
Ask the resource manager to prepare for a transaction commit of the transaction 
specified in xid. 

    xid - A global transaction identifier. 

    Returns: A value indicating the resource manager's vote on the outcome of the 
             transaction. The possible values are: XA_RDONLY or XA_OK. If the 
             resource manager wants to roll back the transaction, it should do 
             so by raising an appropriate XAException in the prepare method. 
*javax.transaction.xa.XAResource.recover(int)*

public |javax.transaction.xa.Xid| recover(int flag)
  throws |javax.transaction.xa.XAException|
         
Obtains a list of prepared transaction branches from a resource manager. The 
transaction manager calls this method during recovery to obtain the list of 
transaction branches that are currently in prepared or heuristically completed 
states. 

    flag - One of TMSTARTRSCAN, TMENDRSCAN, TMNOFLAGS. TMNOFLAGS must be used when no 
       other flags are set in the parameter. 

    Returns: The resource manager returns zero or more XIDs of the transaction branches that 
             are currently in a prepared or heuristically completed state. If 
             an error occurs during the operation, the resource manager should 
             throw the appropriate XAException. 
*javax.transaction.xa.XAResource.rollback(Xid)*

public void rollback(javax.transaction.xa.Xid xid)
  throws |javax.transaction.xa.XAException|
         
Informs the resource manager to roll back work done on behalf of a transaction 
branch. 

    xid - A global transaction identifier. 

*javax.transaction.xa.XAResource.setTransactionTimeout(int)*

public boolean setTransactionTimeout(int seconds)
  throws |javax.transaction.xa.XAException|
         
Sets the current transaction timeout value for this XAResource instance. Once 
set, this timeout value is effective until setTransactionTimeout is invoked 
again with a different value. To reset the timeout value to the default value 
used by the resource manager, set the value to zero. 

If the timeout operation is performed successfully, the method returns true; 
otherwise false. If a resource manager does not support explicitly setting the 
transaction timeout value, this method returns false. 

    seconds - The transaction timeout value in seconds. 

    Returns: true if the transaction timeout value is set successfully; otherwise false. 
*javax.transaction.xa.XAResource.start(Xid,int)*

public void start(
  javax.transaction.xa.Xid xid,
  int flags)
  throws |javax.transaction.xa.XAException|
         
Starts work on behalf of a transaction branch specified in xid. 

If TMJOIN is specified, the start applies to joining a transaction previously 
seen by the resource manager. If TMRESUME is specified, the start applies to 
resuming a suspended transaction specified in the parameter xid. 

If neither TMJOIN nor TMRESUME is specified and the transaction specified by 
xid has previously been seen by the resource manager, the resource manager 
throws the XAException exception with XAER_DUPID error code. 

    xid - A global transaction identifier to be associated with the resource. 
    flags - One of TMNOFLAGS, TMJOIN, or TMRESUME. 



*javax.management.monitor.CounterMonitor* *CounterMonitor* Defines a monitor MBe

public class CounterMonitor
  extends    |javax.management.monitor.Monitor|
  implements |javax.management.monitor.CounterMonitorMBean|

|javax.management.monitor.CounterMonitor_Description|
|javax.management.monitor.CounterMonitor_Fields|
|javax.management.monitor.CounterMonitor_Constructors|
|javax.management.monitor.CounterMonitor_Methods|

================================================================================

*javax.management.monitor.CounterMonitor_Constructors*
|javax.management.monitor.CounterMonitor()|Default constructor.

*javax.management.monitor.CounterMonitor_Methods*
|javax.management.monitor.CounterMonitor.getDerivedGauge()|Returns the derived 
|javax.management.monitor.CounterMonitor.getDerivedGauge(ObjectName)|Gets the d
|javax.management.monitor.CounterMonitor.getDerivedGaugeTimeStamp()|Gets the de
|javax.management.monitor.CounterMonitor.getDerivedGaugeTimeStamp(ObjectName)|G
|javax.management.monitor.CounterMonitor.getDifferenceMode()|Gets the differenc
|javax.management.monitor.CounterMonitor.getInitThreshold()|Gets the initial th
|javax.management.monitor.CounterMonitor.getModulus()|Gets the modulus value co
|javax.management.monitor.CounterMonitor.getNotificationInfo()|Returns a Notifi
|javax.management.monitor.CounterMonitor.getNotify()|Gets the notification's on
|javax.management.monitor.CounterMonitor.getOffset()|Gets the offset value comm
|javax.management.monitor.CounterMonitor.getThreshold()|Gets the threshold valu
|javax.management.monitor.CounterMonitor.getThreshold(ObjectName)|Gets the curr
|javax.management.monitor.CounterMonitor.preDeregister()|Allows the counter mon
|javax.management.monitor.CounterMonitor.setDifferenceMode(boolean)|Sets the di
|javax.management.monitor.CounterMonitor.setGranularityPeriod(long)|Sets the gr
|javax.management.monitor.CounterMonitor.setInitThreshold(Number)|Sets the init
|javax.management.monitor.CounterMonitor.setModulus(Number)|Sets the modulus va
|javax.management.monitor.CounterMonitor.setNotify(boolean)|Sets the notificati
|javax.management.monitor.CounterMonitor.setOffset(Number)|Sets the offset valu
|javax.management.monitor.CounterMonitor.setThreshold(Number)|Sets the initial 
|javax.management.monitor.CounterMonitor.start()|Starts the counter monitor.
|javax.management.monitor.CounterMonitor.stop()|Stops the counter monitor.

*javax.management.monitor.CounterMonitor_Description*

Defines a monitor MBean designed to observe the values of a counter attribute. 

A counter monitor sends a threshold 
notification(|javax.management.monitor.MonitorNotification|) when the value of 
the counter reaches or exceeds a threshold known as the comparison level. The 
notify flag must be set to true. 

In addition, an offset mechanism enables particular counting intervals to be 
detected. If the offset value is not zero, whenever the threshold is triggered 
by the counter value reaching a comparison level, that comparison level is 
incremented by the offset value. This is regarded as taking place 
instantaneously, that is, before the count is incremented. Thus, for each 
level, the threshold triggers an event notification every time the count 
increases by an interval equal to the offset value. 

If the counter can wrap around its maximum value, the modulus needs to be 
specified. The modulus is the value at which the counter is reset to zero. 

If the counter difference mode is used, the value of the derived gauge is 
calculated as the difference between the observed counter values for two 
successive observations. If this difference is negative, the value of the 
derived gauge is incremented by the value of the modulus. The derived gauge 
value (V[t]) is calculated using the following method: 

if (counter[t] - counter[t-GP]) is positive then V[t] = counter[t] - 
counter[t-GP] if (counter[t] - counter[t-GP]) is negative then V[t] = 
counter[t] - counter[t-GP] + MODULUS 

This implementation of the counter monitor requires the observed attribute to 
be of the type integer (Byte, Integer, Short, Long). 


*javax.management.monitor.CounterMonitor()*

public CounterMonitor()

Default constructor. 


*javax.management.monitor.CounterMonitor.getDerivedGauge()*

public synchronized |java.lang.Number| getDerivedGauge()

Returns the derived gauge of the first object in the set of observed MBeans. 


    Returns: The derived gauge. 
*javax.management.monitor.CounterMonitor.getDerivedGauge(ObjectName)*

public synchronized |java.lang.Number| getDerivedGauge(javax.management.ObjectName object)

Gets the derived gauge of the specified object, if this object is contained in 
the set of observed MBeans, or null otherwise. 

    object - the name of the object whose derived gauge is to be returned. 

    Returns: The derived gauge of the specified object. 
*javax.management.monitor.CounterMonitor.getDerivedGaugeTimeStamp()*

public synchronized long getDerivedGaugeTimeStamp()

Gets the derived gauge timestamp of the first object in the set of observed 
MBeans. 


    Returns: The derived gauge timestamp. 
*javax.management.monitor.CounterMonitor.getDerivedGaugeTimeStamp(ObjectName)*

public synchronized long getDerivedGaugeTimeStamp(javax.management.ObjectName object)

Gets the derived gauge timestamp of the specified object, if this object is 
contained in the set of observed MBeans, or null otherwise. 

    object - the name of the object whose derived gauge timestamp is to be returned. 

    Returns: The derived gauge timestamp of the specified object. 
*javax.management.monitor.CounterMonitor.getDifferenceMode()*

public synchronized boolean getDifferenceMode()

Gets the difference mode flag value common to all observed MBeans. 


    Returns: true if the difference mode is used, false otherwise. 
*javax.management.monitor.CounterMonitor.getInitThreshold()*

public synchronized |java.lang.Number| getInitThreshold()

Gets the initial threshold value common to all observed objects. 


    Returns: The initial threshold. 
*javax.management.monitor.CounterMonitor.getModulus()*

public synchronized |java.lang.Number| getModulus()

Gets the modulus value common to all observed MBeans. 


    Returns: The modulus value. 
*javax.management.monitor.CounterMonitor.getNotificationInfo()*

public |javax.management.MBeanNotificationInfo| getNotificationInfo()

Returns a NotificationInfo object containing the name of the Java class of the 
notification and the notification types sent by the counter monitor. 


*javax.management.monitor.CounterMonitor.getNotify()*

public synchronized boolean getNotify()

Gets the notification's on/off switch value common to all observed MBeans. 


    Returns: true if the counter monitor notifies when exceeding the threshold, false 
             otherwise. 
*javax.management.monitor.CounterMonitor.getOffset()*

public synchronized |java.lang.Number| getOffset()

Gets the offset value common to all observed MBeans. 


    Returns: The offset value. 
*javax.management.monitor.CounterMonitor.getThreshold()*

public synchronized |java.lang.Number| getThreshold()

Gets the threshold value of the first object in the set of observed MBeans. 


    Returns: The threshold value. 
*javax.management.monitor.CounterMonitor.getThreshold(ObjectName)*

public synchronized |java.lang.Number| getThreshold(javax.management.ObjectName object)

Gets the current threshold value of the specified object, if this object is 
contained in the set of observed MBeans, or null otherwise. 

    object - the name of the object whose threshold is to be returned. 

    Returns: The threshold value of the specified object. 
*javax.management.monitor.CounterMonitor.preDeregister()*

public void preDeregister()
  throws |java.lang.Exception|
         
Allows the counter monitor MBean to perform any operations it needs before 
being unregistered by the MBean server. 

Resets the threshold values. 


*javax.management.monitor.CounterMonitor.setDifferenceMode(boolean)*

public synchronized void setDifferenceMode(boolean value)

Sets the difference mode flag value common to all observed MBeans. 

    value - The difference mode flag value. 

*javax.management.monitor.CounterMonitor.setGranularityPeriod(long)*

public synchronized void setGranularityPeriod(long period)
  throws |java.lang.IllegalArgumentException|
         
Sets the granularity period (in milliseconds). The default value of the 
granularity period is 10 seconds. 

    period - The granularity period value. 

*javax.management.monitor.CounterMonitor.setInitThreshold(Number)*

public synchronized void setInitThreshold(java.lang.Number value)
  throws |java.lang.IllegalArgumentException|
         
Sets the initial threshold value common to all observed objects. 

The current threshold of every object in the set of observed MBeans is updated 
consequently. 

    value - The initial threshold value. 

*javax.management.monitor.CounterMonitor.setModulus(Number)*

public synchronized void setModulus(java.lang.Number value)
  throws |java.lang.IllegalArgumentException|
         
Sets the modulus value common to all observed MBeans. 

    value - The modulus value. 

*javax.management.monitor.CounterMonitor.setNotify(boolean)*

public synchronized void setNotify(boolean value)

Sets the notification's on/off switch value common to all observed MBeans. 

    value - The notification's on/off switch value. 

*javax.management.monitor.CounterMonitor.setOffset(Number)*

public synchronized void setOffset(java.lang.Number value)
  throws |java.lang.IllegalArgumentException|
         
Sets the offset value common to all observed MBeans. 

    value - The offset value. 

*javax.management.monitor.CounterMonitor.setThreshold(Number)*

public synchronized void setThreshold(java.lang.Number value)
  throws |java.lang.IllegalArgumentException|
         
Sets the initial threshold value. 

    value - The initial threshold value. 

*javax.management.monitor.CounterMonitor.start()*

public synchronized void start()

Starts the counter monitor. 


*javax.management.monitor.CounterMonitor.stop()*

public synchronized void stop()

Stops the counter monitor. 

This method is not synchronized, because if it were there could be a deadlock 
with a thread that attempted to get the lock on the monitor before being 
interrupted or noticing that it had been interrupted. 




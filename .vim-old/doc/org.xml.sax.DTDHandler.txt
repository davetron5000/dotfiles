*org.xml.sax.DTDHandler* *DTDHandler* Receive notification of basic DTD-related 

public interface interface DTDHandler


|org.xml.sax.DTDHandler_Description|
|org.xml.sax.DTDHandler_Fields|
|org.xml.sax.DTDHandler_Constructors|
|org.xml.sax.DTDHandler_Methods|

================================================================================

*org.xml.sax.DTDHandler_Methods*
|org.xml.sax.DTDHandler.notationDecl(String,String,String)|Receive notification
|org.xml.sax.DTDHandler.unparsedEntityDecl(String,String,String,String)|Receive

*org.xml.sax.DTDHandler_Description*

Receive notification of basic DTD-related events. 

This module, both source code and documentation, is in the Public Domain, and 
comes with NO WARRANTY. See http://www.saxproject.org for further information. 

If a SAX application needs information about notations and unparsed entities, 
then the application implements this interface and registers an instance with 
the SAX parser using the parser's setDTDHandler method. The parser uses the 
instance to report notation and unparsed entity declarations to the 
application. 

Note that this interface includes only those DTD events that the XML 
recommendation requires processors to report: notation and unparsed entity 
declarations. 

The SAX parser may report these events in any order, regardless of the order in 
which the notations and unparsed entities were declared; however, all DTD 
events must be reported after the document handler's startDocument event, and 
before the first startElement event. (If the 
LexicalHandler(|org.xml.sax.ext.LexicalHandler|) is used, these events must 
also be reported before the endDTD event.) 

It is up to the application to store the information for future use (perhaps in 
a hash table or object tree). If the application encounters attributes of type 
"NOTATION", "ENTITY", or "ENTITIES", it can use the information that it 
obtained through this interface to find the entity and/or notation 
corresponding with the attribute value. 


*org.xml.sax.DTDHandler.notationDecl(String,String,String)*

public void notationDecl(
  java.lang.String name,
  java.lang.String publicId,
  java.lang.String systemId)
  throws |org.xml.sax.SAXException|
         
Receive notification of a notation declaration event. 

It is up to the application to record the notation for later reference, if 
necessary; notations may appear as attribute values and in unparsed entity 
declarations, and are sometime used with processing instruction target names. 

At least one of publicId and systemId must be non-null. If a system identifier 
is present, and it is a URL, the SAX parser must resolve it fully before 
passing it to the application through this event. 

There is no guarantee that the notation declaration will be reported before any 
unparsed entities that use it. 

    name - The notation name. 
    publicId - The notation's public identifier, or null if none was given. 
    systemId - The notation's system identifier, or null if none was given. 

*org.xml.sax.DTDHandler.unparsedEntityDecl(String,String,String,String)*

public void unparsedEntityDecl(
  java.lang.String name,
  java.lang.String publicId,
  java.lang.String systemId,
  java.lang.String notationName)
  throws |org.xml.sax.SAXException|
         
Receive notification of an unparsed entity declaration event. 

Note that the notation name corresponds to a notation reported by the 
notationDecl(|org.xml.sax.DTDHandler|) event. It is up to the application to 
record the entity for later reference, if necessary; unparsed entities may 
appear as attribute values. 

If the system identifier is a URL, the parser must resolve it fully before 
passing it to the application. 

    name - The unparsed entity's name. 
    publicId - The entity's public identifier, or null if none was given. 
    systemId - The entity's system identifier. 
    notationName - The name of the associated notation. 



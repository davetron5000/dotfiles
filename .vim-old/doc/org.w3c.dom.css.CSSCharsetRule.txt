*org.w3c.dom.css.CSSCharsetRule* *CSSCharsetRule* The CSSCharsetRule interface r

public interface interface CSSCharsetRule

  implements |org.w3c.dom.css.CSSRule|

|org.w3c.dom.css.CSSCharsetRule_Description|
|org.w3c.dom.css.CSSCharsetRule_Fields|
|org.w3c.dom.css.CSSCharsetRule_Constructors|
|org.w3c.dom.css.CSSCharsetRule_Methods|

================================================================================

*org.w3c.dom.css.CSSCharsetRule_Methods*
|org.w3c.dom.css.CSSCharsetRule.getEncoding()|The encoding information used in 
|org.w3c.dom.css.CSSCharsetRule.setEncoding(String)|

*org.w3c.dom.css.CSSCharsetRule_Description*

The CSSCharsetRule interface represents a @charset rule in a CSS style sheet. 
The value of the encoding attribute does not affect the encoding of text data 
in the DOM objects; this encoding is always UTF-16. After a stylesheet is 
loaded, the value of the encoding attribute is the value found in the @charset 
rule. If there was no @charset in the original document, then no CSSCharsetRule 
is created. The value of the encoding attribute may also be used as a hint for 
the encoding used on serialization of the style sheet. The value of the 
@charset rule (and therefore of the CSSCharsetRule) may not correspond to the 
encoding the document actually came in; character encoding information e.g. in 
an HTTP header, has priority (see CSS document representation) but this is not 
reflected in the CSSCharsetRule. See also the Document Object Model (DOM) Level 
2 Style Specification. 


*org.w3c.dom.css.CSSCharsetRule.getEncoding()*

public |java.lang.String| getEncoding()

The encoding information used in this @charset rule. 


*org.w3c.dom.css.CSSCharsetRule.setEncoding(String)*

public void setEncoding(java.lang.String encoding)
  throws |org.w3c.dom.DOMException|
         





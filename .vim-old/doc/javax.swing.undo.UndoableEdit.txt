*javax.swing.undo.UndoableEdit* *UndoableEdit* An object representing an edit that has been done, and that can be
 undone and redone.

public interface interface UndoableEdit


|javax.swing.undo.UndoableEdit_Description|
|javax.swing.undo.UndoableEdit_Fields|
|javax.swing.undo.UndoableEdit_Constructors|
|javax.swing.undo.UndoableEdit_Methods|

====================================================================================================================================================================================

*javax.swing.undo.UndoableEdit_Methods*
|javax.swing.undo.UndoableEdit.addEdit(UndoableEdit)|This UndoableEdit should absorb anEdit  if it can.
|javax.swing.undo.UndoableEdit.canRedo()|True if it is still possible to redo this operation.
|javax.swing.undo.UndoableEdit.canUndo()|True if it is still possible to undo this operation.
|javax.swing.undo.UndoableEdit.die()|May be sent to inform an edit that it should no longer be  used.
|javax.swing.undo.UndoableEdit.getPresentationName()|Provides a localized, human readable description of this edit  suitable for use in, say, a change log.
|javax.swing.undo.UndoableEdit.getRedoPresentationName()|Provides a localized, human readable description of the redoable  form of this edit, e.g.
|javax.swing.undo.UndoableEdit.getUndoPresentationName()|Provides a localized, human readable description of the undoable  form of this edit, e.g.
|javax.swing.undo.UndoableEdit.isSignificant()|Returns false if this edit is insignificant--for example one  that maintains the user's selection, but does not change any  model st
|javax.swing.undo.UndoableEdit.redo()|Re-apply the edit, assuming that it has been undone.
|javax.swing.undo.UndoableEdit.replaceEdit(UndoableEdit)|Returns true if this UndoableEdit should replace  anEdit.
|javax.swing.undo.UndoableEdit.undo()|Undo the edit that was made.

*javax.swing.undo.UndoableEdit_Description*

An object representing an edit that has been done, and that can be undone and redone. 



*javax.swing.undo.UndoableEdit.addEdit(UndoableEdit)*

public boolean addEdit(javax.swing.undo.UndoableEdit anEdit)

This UndoableEdit should absorb anEdit if it can. Returns true if has been incorporated, false if it has not. 

Typically the receiver is already in the queue of a UndoManager (or other UndoableEditListener), and is being given a chance to incorporate anEdit rather than letting it be added 
to the queue in turn. 

If true is returned, from now on anEdit must return false from canUndo and canRedo, and must throw the appropriate exception on undo or redo. 


    anEdit - the edit to be added 

*javax.swing.undo.UndoableEdit.canRedo()*

public boolean canRedo()

True if it is still possible to redo this operation. 



*javax.swing.undo.UndoableEdit.canUndo()*

public boolean canUndo()

True if it is still possible to undo this operation. 



*javax.swing.undo.UndoableEdit.die()*

public void die()

May be sent to inform an edit that it should no longer be used. This is a useful hook for cleaning up state no longer needed once undoing or redoing is impossible--for example, 
deleting file resources used by objects that can no longer be undeleted. UndoManager calls this before it dequeues edits. 

Note that this is a one-way operation. There is no "un-die" method. 



*javax.swing.undo.UndoableEdit.getPresentationName()*

public |java.lang.String| getPresentationName()

Provides a localized, human readable description of this edit suitable for use in, say, a change log. 



*javax.swing.undo.UndoableEdit.getRedoPresentationName()*

public |java.lang.String| getRedoPresentationName()

Provides a localized, human readable description of the redoable form of this edit, e.g. for use as a Redo menu item. Typically derived from getPresentationName. 



*javax.swing.undo.UndoableEdit.getUndoPresentationName()*

public |java.lang.String| getUndoPresentationName()

Provides a localized, human readable description of the undoable form of this edit, e.g. for use as an Undo menu item. Typically derived from getDescription. 



*javax.swing.undo.UndoableEdit.isSignificant()*

public boolean isSignificant()

Returns false if this edit is insignificant--for example one that maintains the user's selection, but does not change any model state. This status can be used by an 
UndoableEditListener (like UndoManager) when deciding which UndoableEdits to present to the user as Undo/Redo options, and which to perform as side effects of undoing or redoing 
other events. 



*javax.swing.undo.UndoableEdit.redo()*

public void redo()
  throws |javax.swing.undo.CannotRedoException|
         
Re-apply the edit, assuming that it has been undone. 



*javax.swing.undo.UndoableEdit.replaceEdit(UndoableEdit)*

public boolean replaceEdit(javax.swing.undo.UndoableEdit anEdit)

Returns true if this UndoableEdit should replace anEdit. The receiver should incorporate anEdit's state before returning true. 

This message is the opposite of addEdit--anEdit has typically already been queued in a UndoManager (or other UndoableEditListener), and the receiver is being given a chance to 
take its place. 

If true is returned, from now on anEdit must return false from canUndo() and canRedo(), and must throw the appropriate exception on undo() or redo(). 



*javax.swing.undo.UndoableEdit.undo()*

public void undo()
  throws |javax.swing.undo.CannotUndoException|
         
Undo the edit that was made. 





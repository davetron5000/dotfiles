*java.util.jar.Pack200.Unpacker* *Pack200.Unpacker* The unpacker engine converts the packed stream to a JAR file.

public static interface interface Pack200.Unpacker


|java.util.jar.Pack200.Unpacker_Description|
|java.util.jar.Pack200.Unpacker_Fields|
|java.util.jar.Pack200.Unpacker_Constructors|
|java.util.jar.Pack200.Unpacker_Methods|

====================================================================================================================================================================================

*java.util.jar.Pack200.Unpacker_Fields*
|java.lang.String_java.util.jar.Pack200.Unpacker.DEFLATE_HINT|
|java.lang.String_java.util.jar.Pack200.Unpacker.FALSE|
|java.lang.String_java.util.jar.Pack200.Unpacker.KEEP|
|java.lang.String_java.util.jar.Pack200.Unpacker.PROGRESS|
|java.lang.String_java.util.jar.Pack200.Unpacker.TRUE|

*java.util.jar.Pack200.Unpacker_Methods*
|java.util.jar.Pack200.Unpacker.addPropertyChangeListener(PropertyChangeListener)|Registers a listener for PropertyChange events on the properties map.
|java.util.jar.Pack200.Unpacker.properties()|Get the set of this engine's properties.
|java.util.jar.Pack200.Unpacker.removePropertyChangeListener(PropertyChangeListener)|Remove a listener for PropertyChange events, added by  the#addPropertyChangeListener.
|java.util.jar.Pack200.Unpacker.unpack(File,JarOutputStream)|Read a Pack200 archive, and write the encoded JAR to  a JarOutputStream.
|java.util.jar.Pack200.Unpacker.unpack(InputStream,JarOutputStream)|Read a Pack200 archive, and write the encoded JAR to  a JarOutputStream.

*java.util.jar.Pack200.Unpacker_Description*

The unpacker engine converts the packed stream to a JAR file. An instance of the engine can be obtained using (|java.util.jar.Pack200.Unpacker|) . 

Every JAR file produced by this engine will include the string "PACK200" as a zip file comment. This allows a deployer to detect if a JAR archive was packed and unpacked. 



*java.lang.String_java.util.jar.Pack200.Unpacker.DEFLATE_HINT*

Property indicating that the unpacker should ignore all transmitted values for DEFLATE_HINT, replacing them by the given value, (|java.util.jar.Pack200.Unpacker|) or 
(|java.util.jar.Pack200.Unpacker|) . The default value is the special string (|java.util.jar.Pack200.Unpacker|) , which asks the unpacker to preserve all transmitted deflation 
hints. 


*java.lang.String_java.util.jar.Pack200.Unpacker.FALSE*

The string "false", a possible value for certain properties. 


*java.lang.String_java.util.jar.Pack200.Unpacker.KEEP*

The string "keep", a possible value for certain properties. 


*java.lang.String_java.util.jar.Pack200.Unpacker.PROGRESS*

The unpacker's progress as a percentage, as periodically updated by the unpacker. Values of 0 - 100 are normal, and -1 indicates a stall. Observe this property with a 
(|java.beans.PropertyChangeListener|) . 

At a minimum, the unpacker must set progress to 0 at the beginning of a packing operation, and to 100 at the end. 


*java.lang.String_java.util.jar.Pack200.Unpacker.TRUE*

The string "true", a possible value for certain properties. 



*java.util.jar.Pack200.Unpacker.addPropertyChangeListener(PropertyChangeListener)*

public void addPropertyChangeListener(java.beans.PropertyChangeListener listener)

Registers a listener for PropertyChange events on the properties map. This is typically used by applications to update a progress bar. 


    listener - An object to be invoked when a property is changed. 

*java.util.jar.Pack200.Unpacker.properties()*

public |java.util.SortedMap|<String,String> properties()

Get the set of this engine's properties. This set is a "live view", so that changing its contents immediately affects the Packer engine, and changes from the engine (such as 
progress indications) are immediately visible in the map. 

The property map may contain pre-defined implementation specific and default properties. Users are encouraged to read the information and fully understand the implications, before 
modifying pre-existing properties. 

Implementation specific properties are prefixed with a package name associated with the implementor, beginning with com. or a similar prefix. All property names beginning with 
pack. and unpack. are reserved for use by this API. 

Unknown properties may be ignored or rejected with an unspecified error, and invalid entries may cause an unspecified error to be thrown. 



    Returns: A sorted association of option key strings to option values. 

*java.util.jar.Pack200.Unpacker.removePropertyChangeListener(PropertyChangeListener)*

public void removePropertyChangeListener(java.beans.PropertyChangeListener listener)

Remove a listener for PropertyChange events, added by the (|java.util.jar.Pack200.Unpacker|) . 


    listener - The PropertyChange listener to be removed. 

*java.util.jar.Pack200.Unpacker.unpack(File,JarOutputStream)*

public void unpack(
  java.io.File in,
  java.util.jar.JarOutputStream out)
  throws |java.io.IOException|
         
Read a Pack200 archive, and write the encoded JAR to a JarOutputStream. 

Does not close its output. (The output can accumulate more elements.) 


    in - a File. 
    out - a JarOutputStream. 

*java.util.jar.Pack200.Unpacker.unpack(InputStream,JarOutputStream)*

public void unpack(
  java.io.InputStream in,
  java.util.jar.JarOutputStream out)
  throws |java.io.IOException|
         
Read a Pack200 archive, and write the encoded JAR to a JarOutputStream. The entire contents of the input stream will be read. It may be more efficient to read the Pack200 archive 
to a file and pass the File object, using the alternate method described below. 

Closes its input but not its output. (The output can accumulate more elements.) 


    in - an InputStream. 
    out - a JarOutputStream. 



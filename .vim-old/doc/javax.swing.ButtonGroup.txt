*javax.swing.ButtonGroup* *ButtonGroup* This class is used to create a multiple-exclusion scope for
 a set of buttons.

public class ButtonGroup
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|javax.swing.ButtonGroup_Description|
|javax.swing.ButtonGroup_Fields|
|javax.swing.ButtonGroup_Constructors|
|javax.swing.ButtonGroup_Methods|

====================================================================================================================================================================================

*javax.swing.ButtonGroup_Fields*
|java.util.Vector<javax.swing.AbstractButton>_javax.swing.ButtonGroup.buttons|

*javax.swing.ButtonGroup_Constructors*
|javax.swing.ButtonGroup()|Creates a new ButtonGroup.

*javax.swing.ButtonGroup_Methods*
|javax.swing.ButtonGroup.add(AbstractButton)|Adds the button to the group.
|javax.swing.ButtonGroup.getButtonCount()|Returns the number of buttons in the group.
|javax.swing.ButtonGroup.getElements()|Returns all the buttons that are participating in  this group.
|javax.swing.ButtonGroup.getSelection()|Returns the model of the selected button.
|javax.swing.ButtonGroup.isSelected(ButtonModel)|Returns whether a ButtonModel is selected.
|javax.swing.ButtonGroup.remove(AbstractButton)|Removes the button from the group.
|javax.swing.ButtonGroup.setSelected(ButtonModel,boolean)|Sets the selected value for the ButtonModel.

*javax.swing.ButtonGroup_Description*

This class is used to create a multiple-exclusion scope for a set of buttons. Creating a set of buttons with the same ButtonGroup object means that turning "on" one of those 
buttons turns off all other buttons in the group. 

A ButtonGroup can be used with any set of objects that inherit from AbstractButton. Typically a button group contains instances of JRadioButton, JRadioButtonMenuItem, or 
JToggleButton. It wouldn't make sense to put an instance of JButton or JMenuItem in a button group because JButton and JMenuItem don't implement the selected state. 

Initially, all buttons in the group are unselected. Once any button is selected, one button is always selected in the group. There is no way to turn a button programmatically to 
"off", in order to clear the button group. To give the appearance of "none selected", add an invisible radio button to the group and then programmatically select that button to 
turn off all the displayed radio buttons. For example, a normal button with the label "none" could be wired to select the invisible radio button. 

For examples and further information on using button groups see How to Use Radio Buttons, a section in The Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*java.util.Vector<javax.swing.AbstractButton>_javax.swing.ButtonGroup.buttons*





*javax.swing.ButtonGroup()*

public ButtonGroup()

Creates a new ButtonGroup. 


*javax.swing.ButtonGroup.add(AbstractButton)*

public void add(javax.swing.AbstractButton b)

Adds the button to the group. 


    b - the button to be added 

*javax.swing.ButtonGroup.getButtonCount()*

public int getButtonCount()

Returns the number of buttons in the group. 



    Returns: the button count 

*javax.swing.ButtonGroup.getElements()*

public |java.util.Enumeration|<AbstractButton> getElements()

Returns all the buttons that are participating in this group. 



    Returns: an Enumeration of the buttons in this group 

*javax.swing.ButtonGroup.getSelection()*

public |javax.swing.ButtonModel| getSelection()

Returns the model of the selected button. 



    Returns: the selected button model 

*javax.swing.ButtonGroup.isSelected(ButtonModel)*

public boolean isSelected(javax.swing.ButtonModel m)

Returns whether a ButtonModel is selected. 



    Returns: true if the button is selected, otherwise returns false 

*javax.swing.ButtonGroup.remove(AbstractButton)*

public void remove(javax.swing.AbstractButton b)

Removes the button from the group. 


    b - the button to be removed 

*javax.swing.ButtonGroup.setSelected(ButtonModel,boolean)*

public void setSelected(
  javax.swing.ButtonModel m,
  boolean b)

Sets the selected value for the ButtonModel. Only one button in the group may be selected at a time. 


    m - the ButtonModel 
    b - true if this button is to be selected, otherwise false 



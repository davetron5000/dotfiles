*javax.imageio.ImageWriteParam* *ImageWriteParam* A class describing how a stream is to be encoded.

public class ImageWriteParam
  extends    |javax.imageio.IIOParam|

|javax.imageio.ImageWriteParam_Description|
|javax.imageio.ImageWriteParam_Fields|
|javax.imageio.ImageWriteParam_Constructors|
|javax.imageio.ImageWriteParam_Methods|

====================================================================================================================================================================================

*javax.imageio.ImageWriteParam_Fields*
|boolean_javax.imageio.ImageWriteParam.canOffsetTiles|
|boolean_javax.imageio.ImageWriteParam.canWriteCompressed|
|boolean_javax.imageio.ImageWriteParam.canWriteProgressive|
|boolean_javax.imageio.ImageWriteParam.canWriteTiles|
|int_javax.imageio.ImageWriteParam.compressionMode|
|float_javax.imageio.ImageWriteParam.compressionQuality|
|java.lang.String_javax.imageio.ImageWriteParam.compressionType|
|java.lang.String[]_javax.imageio.ImageWriteParam.compressionTypes|
|java.util.Locale_javax.imageio.ImageWriteParam.locale|
|int_javax.imageio.ImageWriteParam.MODE_COPY_FROM_METADATA|
|int_javax.imageio.ImageWriteParam.MODE_DEFAULT|
|int_javax.imageio.ImageWriteParam.MODE_DISABLED|
|int_javax.imageio.ImageWriteParam.MODE_EXPLICIT|
|java.awt.Dimension[]_javax.imageio.ImageWriteParam.preferredTileSizes|
|int_javax.imageio.ImageWriteParam.progressiveMode|
|int_javax.imageio.ImageWriteParam.tileGridXOffset|
|int_javax.imageio.ImageWriteParam.tileGridYOffset|
|int_javax.imageio.ImageWriteParam.tileHeight|
|int_javax.imageio.ImageWriteParam.tileWidth|
|int_javax.imageio.ImageWriteParam.tilingMode|
|boolean_javax.imageio.ImageWriteParam.tilingSet|

*javax.imageio.ImageWriteParam_Constructors*
|javax.imageio.ImageWriteParam()|Constructs an empty ImageWriteParam.
|javax.imageio.ImageWriteParam(Locale)|Constructs an ImageWriteParam set to use a  given Locale.

*javax.imageio.ImageWriteParam_Methods*
|javax.imageio.ImageWriteParam.canOffsetTiles()|Returns true if the writer can perform tiling with  non-zero grid offsets while writing.
|javax.imageio.ImageWriteParam.canWriteCompressed()|Returns true if this writer supports compression.
|javax.imageio.ImageWriteParam.canWriteProgressive()|Returns true if the writer can write out images  as a series of passes of progressively increasing quality.
|javax.imageio.ImageWriteParam.canWriteTiles()|Returns true if the writer can perform tiling  while writing.
|javax.imageio.ImageWriteParam.getBitRate(float)|Returns a float indicating an estimate of the  number of bits of output data for each bit of input image data  at the given qualit
|javax.imageio.ImageWriteParam.getCompressionMode()|Returns the current compression mode, if compression is  supported.
|javax.imageio.ImageWriteParam.getCompressionQuality()|Returns the current compression quality setting.
|javax.imageio.ImageWriteParam.getCompressionQualityDescriptions()|Returns an array of Strings that may be used along  with getCompressionQualityValues as part of a user  interfac
|javax.imageio.ImageWriteParam.getCompressionQualityValues()|Returns an array of floats that may be used along  with getCompressionQualityDescriptions as part of a user  interface
|javax.imageio.ImageWriteParam.getCompressionType()|Returns the currently set compression type, or  null if none has been set.
|javax.imageio.ImageWriteParam.getCompressionTypes()|Returns a list of available compression types, as an array or  Strings, or null if a compression  type may not be chosen using
|javax.imageio.ImageWriteParam.getLocale()|Returns the currently set Locale, or  null if only a default Locale is  supported.
|javax.imageio.ImageWriteParam.getLocalizedCompressionTypeName()|Returns a localized version of the name of the current  compression type, using the Locale returned by  getLocale.
|javax.imageio.ImageWriteParam.getPreferredTileSizes()|Returns an array of Dimensions indicating the  legal size ranges for tiles as they will be encoded in the  output file or st
|javax.imageio.ImageWriteParam.getProgressiveMode()|Returns the current mode for writing the stream in a  progressive manner.
|javax.imageio.ImageWriteParam.getTileGridXOffset()|Returns the horizontal tile grid offset of an image as it will  be written to the output stream.
|javax.imageio.ImageWriteParam.getTileGridYOffset()|Returns the vertical tile grid offset of an image as it will  be written to the output stream.
|javax.imageio.ImageWriteParam.getTileHeight()|Returns the height of each tile in an image as it will be written to  the output stream.
|javax.imageio.ImageWriteParam.getTileWidth()|Returns the width of each tile in an image as it will be  written to the output stream.
|javax.imageio.ImageWriteParam.getTilingMode()|Returns the current tiling mode, if tiling is supported.
|javax.imageio.ImageWriteParam.isCompressionLossless()|Returns true if the current compression type  provides lossless compression.
|javax.imageio.ImageWriteParam.setCompressionMode(int)|Specifies whether compression is to be performed, and if so how  compression parameters are to be determined.
|javax.imageio.ImageWriteParam.setCompressionQuality(float)|Sets the compression quality to a value between 0  and 1.
|javax.imageio.ImageWriteParam.setCompressionType(String)|Sets the compression type to one of the values indicated by  getCompressionTypes.
|javax.imageio.ImageWriteParam.setProgressiveMode(int)|Specifies that the writer is to write the image out in a  progressive mode such that the stream will contain a series of  sc
|javax.imageio.ImageWriteParam.setTiling(int,int,int,int)|Specifies that the image should be tiled in the output stream.
|javax.imageio.ImageWriteParam.setTilingMode(int)|Determines whether the image will be tiled in the output  stream and, if it will, how the tiling parameters will be   determined.
|javax.imageio.ImageWriteParam.unsetCompression()|Removes any previous compression type and quality settings.
|javax.imageio.ImageWriteParam.unsetTiling()|Removes any previous tile grid parameters specified by calls to  setTiling.

*javax.imageio.ImageWriteParam_Description*

A class describing how a stream is to be encoded. Instances of this class or its subclasses are used to supply prescriptive "how-to" information to instances of ImageWriter. 

A plug-in for a specific image format may define a subclass of this class, and return objects of that class from the getDefaultWriteParam method of its ImageWriter implementation. 
For example, the built-in JPEG writer plug-in will return instances of javax.imageio.plugins.jpeg.JPEGImageWriteParam. 

The region of the image to be written is determined by first intersecting the actual bounds of the image with the rectangle specified by IIOParam.setSourceRegion, if any. If the 
resulting rectangle has a width or height of zero, the writer will throw an IIOException. If the intersection is non-empty, writing will commence with the first subsampled pixel 
and include additional pixels within the intersected bounds according to the horizontal and vertical subsampling factors specified by 
<code>IIOParam.setSourceSubsampling</code>(|javax.imageio.IIOParam|) . 

Individual features such as tiling, progressive encoding, and compression may be set in one of four modes. MODE_DISABLED disables the features; MODE_DEFAULT enables the feature 
with writer-controlled parameter values; MODE_EXPLICIT enables the feature and allows the use of a set method to provide additional parameters; and MODE_COPY_FROM_METADATA copies 
relevant parameter values from the stream and image metadata objects passed to the writer. The default for all features is MODE_COPY_FROM_METADATA. Non-standard features supplied 
in subclasses are encouraged, but not required to use a similar scheme. 

Plug-in writers may extend the functionality of ImageWriteParam by providing a subclass that implements additional, plug-in specific interfaces. It is up to the plug-in to 
document what interfaces are available and how they are to be used. Writers will silently ignore any extended features of an ImageWriteParam subclass of which they are not aware. 
Also, they may ignore any optional features that they normally disable when creating their own ImageWriteParam instances via getDefaultWriteParam. 

Note that unless a query method exists for a capability, it must be supported by all ImageWriter implementations (e.g. progressive encoding is optional, but subsampling must be 
supported). 



*boolean_javax.imageio.ImageWriteParam.canOffsetTiles*

A boolean that is true if this ImageWriteParam allows tiling grid offset parameters to be set. By default, the value is false. Subclasses must set the value manually. 

Subclasses that do not support writing tiles, or that supprt writing but not offsetting tiles must ensure that this value is set to false. 


*boolean_javax.imageio.ImageWriteParam.canWriteCompressed*

A boolean that is true if this writer can write images using compression. By default, the value is false. Subclasses must set the value manually. 

Subclasses that do not support compression must ensure that this value is set to false. 


*boolean_javax.imageio.ImageWriteParam.canWriteProgressive*

A boolean that is true if this ImageWriteParam allows images to be written as a progressive sequence of increasing quality passes. By default, the value is false. Subclasses must 
set the value manually. 

Subclasses that do not support progressive encoding must ensure that this value is set to false. 


*boolean_javax.imageio.ImageWriteParam.canWriteTiles*

A boolean that is true if this ImageWriteParam allows tile width and tile height parameters to be set. By default, the value is false. Subclasses must set the value manually. 

Subclasses that do not support writing tiles should ensure that this value is set to false. 


*int_javax.imageio.ImageWriteParam.compressionMode*

The mode controlling compression settings, which must be set to one of the four MODE_* values. The default is MODE_COPY_FROM_METADATA. 

Subclasses that do not support compression may ignore this value. 


*float_javax.imageio.ImageWriteParam.compressionQuality*

A float containing the current compression quality setting. The initial value is 1.0F. 

Subclasses that do not support compression may ignore this value. 


*java.lang.String_javax.imageio.ImageWriteParam.compressionType*

A String containing the name of the current compression type, or null if none is set. 

Subclasses that do not support compression may ignore this value. 


*java.lang.String[]_javax.imageio.ImageWriteParam.compressionTypes*

An array of Strings containing the names of the available compression types. Subclasses must set the value manually. 

Subclasses that do not support compression may ignore this value. 


*java.util.Locale_javax.imageio.ImageWriteParam.locale*

A Locale to be used to localize compression type names and quality descriptions, or null to use a default Locale. Subclasses must set the value manually. 


*int_javax.imageio.ImageWriteParam.MODE_COPY_FROM_METADATA*

A constant value that may be passed into methods such as setTilingMode, setProgressiveMode, or setCompressionMode to enable that feature for future writes. That is, when this mode 
is enabled the stream will be tiled, progressive, or compressed based on the contents of stream and/or image metadata passed into the write operation, and any relevant accessor 
methods will throw an IllegalStateException. 

This is the default mode for all features, so that a read including metadata followed by a write including metadata will preserve as much information as possible. 


*int_javax.imageio.ImageWriteParam.MODE_DEFAULT*

A constant value that may be passed into methods such as setTilingMode, setProgressiveMode, and setCompressionMode to enable that feature for future writes. That is, when this 
mode is enabled the stream will be tiled, progressive, or compressed according to a sensible default chosen internally by the writer in a plug-in dependent way, and the relevant 
accessor methods will throw an IllegalStateException. 


*int_javax.imageio.ImageWriteParam.MODE_DISABLED*

A constant value that may be passed into methods such as setTilingMode, setProgressiveMode, and setCompressionMode to disable a feature for future writes. That is, when this mode 
is set the stream will not be tiled, progressive, or compressed, and the relevant accessor methods will throw an IllegalStateException. 


*int_javax.imageio.ImageWriteParam.MODE_EXPLICIT*

A constant value that may be passed into methods such as setTilingMode or setCompressionMode to enable a feature for future writes. That is, when this mode is set the stream will 
be tiled or compressed according to additional information supplied to the corresponding set methods in this class and retrievable from the corresponding get methods. Note that 
this mode is not supported for progressive output. 


*java.awt.Dimension[]_javax.imageio.ImageWriteParam.preferredTileSizes*

An array of preferred tile size range pairs. The default value is null, which indicates that there are no preferred sizes. If the value is non-null, it must have an even length of 
at least two. 

Subclasses that do not support writing tiles may ignore this value. 


*int_javax.imageio.ImageWriteParam.progressiveMode*

The mode controlling progressive encoding, which must be set to one of the four MODE_* values, except MODE_EXPLICIT. The default is MODE_COPY_FROM_METADATA. 

Subclasses that do not support progressive encoding may ignore this value. 


*int_javax.imageio.ImageWriteParam.tileGridXOffset*

The amount by which the tile grid origin should be offset horizontally from the image origin if tiling has been set, or 0 otherwise. The initial value is 0. 

Subclasses that do not support offsetting tiles may ignore this value. 


*int_javax.imageio.ImageWriteParam.tileGridYOffset*

The amount by which the tile grid origin should be offset vertically from the image origin if tiling has been set, or 0 otherwise. The initial value is 0. 

Subclasses that do not support offsetting tiles may ignore this value. 


*int_javax.imageio.ImageWriteParam.tileHeight*

The height of each tile if tiling has been set, or 0 otherwise. The initial value is 0. 

Subclasses that do not support tiling may ignore this value. 


*int_javax.imageio.ImageWriteParam.tileWidth*

The width of each tile if tiling has been set, or 0 otherwise. 

Subclasses that do not support tiling may ignore this value. 


*int_javax.imageio.ImageWriteParam.tilingMode*

The mode controlling tiling settings, which Must be set to one of the four MODE_* values. The default is MODE_COPY_FROM_METADATA. 

Subclasses that do not writing tiles may ignore this value. 


*boolean_javax.imageio.ImageWriteParam.tilingSet*

A boolean that is true if tiling parameters have been specified. 

Subclasses that do not support writing tiles may ignore this value. 



*javax.imageio.ImageWriteParam()*

protected ImageWriteParam()

Constructs an empty ImageWriteParam. It is up to the subclass to set up the instance variables properly. 


*javax.imageio.ImageWriteParam(Locale)*

public ImageWriteParam(java.util.Locale locale)

Constructs an ImageWriteParam set to use a given Locale. 

    locale - a Locale to be used to localize compression type names and quality descriptions, or null. 

*javax.imageio.ImageWriteParam.canOffsetTiles()*

public boolean canOffsetTiles()

Returns true if the writer can perform tiling with non-zero grid offsets while writing. If this method returns false, then setTiling will throw an UnsupportedOperationException if 
the grid offset arguments are not both zero. If canWriteTiles returns false, this method will return false as well. 



    Returns: true if the writer supports non-zero tile offsets. 

*javax.imageio.ImageWriteParam.canWriteCompressed()*

public boolean canWriteCompressed()

Returns true if this writer supports compression. 



    Returns: true if the writer supports compression. 

*javax.imageio.ImageWriteParam.canWriteProgressive()*

public boolean canWriteProgressive()

Returns true if the writer can write out images as a series of passes of progressively increasing quality. 



    Returns: true if the writer supports progressive encoding. 

*javax.imageio.ImageWriteParam.canWriteTiles()*

public boolean canWriteTiles()

Returns true if the writer can perform tiling while writing. If this method returns false, then setTiling will throw an UnsupportedOperationException. 



    Returns: true if the writer supports tiling. 

*javax.imageio.ImageWriteParam.getBitRate(float)*

public float getBitRate(float quality)

Returns a float indicating an estimate of the number of bits of output data for each bit of input image data at the given quality level. The value will typically lie between 0 and 
1, with smaller values indicating more compression. A special value of -1.0F is used to indicate that no estimate is available. 

If there are multiple compression types but none has been set, an IllegalStateException is thrown. 

The default implementation checks that compression is supported and the compression mode is MODE_EXPLICIT. If so, if getCompressionTypes() is null or getCompressionType() is 
non-null, and quality is within bounds, it returns -1.0. 


    quality - the quality setting whose bit rate is to be queried. 

    Returns: an estimate of the compressed bit rate, or -1.0F if no estimate is available. 

*javax.imageio.ImageWriteParam.getCompressionMode()*

public int getCompressionMode()

Returns the current compression mode, if compression is supported. 



    Returns: the current compression mode. 

*javax.imageio.ImageWriteParam.getCompressionQuality()*

public float getCompressionQuality()

Returns the current compression quality setting. 

If there are multiple compression types but none has been set, an IllegalStateException is thrown. 

The default implementation checks that compression is supported and that the compression mode is MODE_EXPLICIT. If so, if getCompressionTypes() is null or getCompressionType() is 
non-null, it returns the value of the compressionQuality instance variable. 



    Returns: the current compression quality setting. 

*javax.imageio.ImageWriteParam.getCompressionQualityDescriptions()*

public |java.lang.String|[] getCompressionQualityDescriptions()

Returns an array of Strings that may be used along with getCompressionQualityValues as part of a user interface for setting or displaying the compression quality level. The String 
with index i provides a description of the range of quality levels between getCompressionQualityValues[i] and getCompressionQualityValues[i + 1]. Note that the length of the array 
returned from getCompressionQualityValues will always be one greater than that returned from getCompressionQualityDescriptions. 

As an example, the strings "Good", "Better", and "Best" could be associated with the ranges [0, .33), [.33, .66), and [.66, 1.0]. In this case, getCompressionQualityDescriptions 
would return { "Good", "Better", "Best" } and getCompressionQualityValues would return { 0.0F, .33F, .66F, 1.0F }. 

If no descriptions are available, null is returned. If null is returned from getCompressionQualityValues, this method must also return null. 

The descriptions should be localized for the Locale returned by getLocale, if it is non-null. 

If there are multiple compression types but none has been set, an IllegalStateException is thrown. 

The default implementation checks that compression is supported and that the compression mode is MODE_EXPLICIT. If so, if getCompressionTypes() is null or getCompressionType() is 
non-null, it returns null. 



    Returns: an array of Strings containing localized descriptions of the compression quality levels. 

*javax.imageio.ImageWriteParam.getCompressionQualityValues()*

public float[] getCompressionQualityValues()

Returns an array of floats that may be used along with getCompressionQualityDescriptions as part of a user interface for setting or displaying the compression quality level. See 
<code>getCompressionQualityDescriptions</code>(|javax.imageio.ImageWriteParam|) for more information. 

If no descriptions are available, null is returned. If null is returned from getCompressionQualityDescriptions, this method must also return null. 

If there are multiple compression types but none has been set, an IllegalStateException is thrown. 

The default implementation checks that compression is supported and that the compression mode is MODE_EXPLICIT. If so, if getCompressionTypes() is null or getCompressionType() is 
non-null, it returns null. 



    Returns: an array of floats indicating the boundaries between the compression quality levels as described by the Strings from getCompressionQualityDescriptions. 

*javax.imageio.ImageWriteParam.getCompressionType()*

public |java.lang.String| getCompressionType()

Returns the currently set compression type, or null if none has been set. The type is returned as a String from among those returned by getCompressionTypes. If no compression type 
has been set, null is returned. 

The default implementation checks whether compression is supported and the compression mode is MODE_EXPLICIT. If so, it returns the value of the compressionType instance variable. 



    Returns: the current compression type as a String, or null if no type is set. 

*javax.imageio.ImageWriteParam.getCompressionTypes()*

public |java.lang.String|[] getCompressionTypes()

Returns a list of available compression types, as an array or Strings, or null if a compression type may not be chosen using these interfaces. The array returned is a copy. 

If the writer only offers a single, mandatory form of compression, it is not necessary to provide any named compression types. Named compression types should only be used where 
the user is able to make a meaningful choice between different schemes. 

The default implementation checks if compression is supported and throws an UnsupportedOperationException if not. Otherwise, it returns a clone of the compressionTypes instance 
variable if it is non-null, or else returns null. 



    Returns: an array of Strings containing the (non-localized) names of available compression types, or null. 

*javax.imageio.ImageWriteParam.getLocale()*

public |java.util.Locale| getLocale()

Returns the currently set Locale, or null if only a default Locale is supported. 



    Returns: the current Locale, or null. 

*javax.imageio.ImageWriteParam.getLocalizedCompressionTypeName()*

public |java.lang.String| getLocalizedCompressionTypeName()

Returns a localized version of the name of the current compression type, using the Locale returned by getLocale. 

The default implementation checks whether compression is supported and the compression mode is MODE_EXPLICIT. If so, if compressionType is non-null the value of getCompressionType 
is returned as a convenience. 



    Returns: a String containing a localized version of the name of the current compression type. 

*javax.imageio.ImageWriteParam.getPreferredTileSizes()*

public |java.awt.Dimension|[] getPreferredTileSizes()

Returns an array of Dimensions indicating the legal size ranges for tiles as they will be encoded in the output file or stream. The returned array is a copy. 

The information is returned as a set of pairs; the first element of a pair contains an (inclusive) minimum width and height, and the second element contains an (inclusive) maximum 
width and height. Together, each pair defines a valid range of sizes. To specify a fixed size, use the same width and height for both elements. To specify an arbitrary range, a 
value of null is used in place of an actual array of Dimensions. 

If no array is specified on the constructor, but tiling is allowed, then this method returns null. 



    Returns: an array of Dimensions with an even length of at least two, or null. 

*javax.imageio.ImageWriteParam.getProgressiveMode()*

public int getProgressiveMode()

Returns the current mode for writing the stream in a progressive manner. 



    Returns: the current mode for progressive encoding. 

*javax.imageio.ImageWriteParam.getTileGridXOffset()*

public int getTileGridXOffset()

Returns the horizontal tile grid offset of an image as it will be written to the output stream. If tiling parameters have not been set, an IllegalStateException is thrown. 



    Returns: the tile grid X offset to be used for encoding. 

*javax.imageio.ImageWriteParam.getTileGridYOffset()*

public int getTileGridYOffset()

Returns the vertical tile grid offset of an image as it will be written to the output stream. If tiling parameters have not been set, an IllegalStateException is thrown. 



    Returns: the tile grid Y offset to be used for encoding. 

*javax.imageio.ImageWriteParam.getTileHeight()*

public int getTileHeight()

Returns the height of each tile in an image as it will be written to the output stream. If tiling parameters have not been set, an IllegalStateException is thrown. 



    Returns: the tile height to be used for encoding. 

*javax.imageio.ImageWriteParam.getTileWidth()*

public int getTileWidth()

Returns the width of each tile in an image as it will be written to the output stream. If tiling parameters have not been set, an IllegalStateException is thrown. 



    Returns: the tile width to be used for encoding. 

*javax.imageio.ImageWriteParam.getTilingMode()*

public int getTilingMode()

Returns the current tiling mode, if tiling is supported. Otherwise throws an UnsupportedOperationException. 



    Returns: the current tiling mode. 

*javax.imageio.ImageWriteParam.isCompressionLossless()*

public boolean isCompressionLossless()

Returns true if the current compression type provides lossless compression. If a plug-in provides only one mandatory compression type, then this method may be called without 
calling setCompressionType first. 

If there are multiple compression types but none has been set, an IllegalStateException is thrown. 

The default implementation checks whether compression is supported and the compression mode is MODE_EXPLICIT. If so, if getCompressionTypes() is null or getCompressionType() is 
non-null true is returned as a convenience. 



    Returns: true if the current compression type is lossless. 

*javax.imageio.ImageWriteParam.setCompressionMode(int)*

public void setCompressionMode(int mode)

Specifies whether compression is to be performed, and if so how compression parameters are to be determined. The mode argument must be one of the four modes, interpreted as 
follows: 

MODE_DISABLED - Do not compress. This may not be permitted by some writers, such as JPEG, which do not normally offer uncompressed output. The corresponding set and get methods 
will throw an IllegalStateException. 

MODE_EXPLICIT - Compress using the compression type and quality settings specified in this ImageWriteParam. Any previously set compression parameters are discarded. 

MODE_COPY_FROM_METADATA - Use whatever compression parameters are specified in metadata objects passed in to the writer. 

MODE_DEFAULT - Use default compression parameters. 

The default is MODE_COPY_FROM_METADATA. 


    mode - The mode for setting compression in the output stream. 

*javax.imageio.ImageWriteParam.setCompressionQuality(float)*

public void setCompressionQuality(float quality)

Sets the compression quality to a value between 0 and 1. Only a single compression quality setting is supported by default; writers can provide extended versions of 
ImageWriteParam that offer more control. For lossy compression schemes, the compression quality should control the tradeoff between file size and image quality (for example, by 
choosing quantization tables when writing JPEG images). For lossless schemes, the compression quality may be used to control the tradeoff between file size and time taken to 
perform the compression (for example, by optimizing row filters and setting the ZLIB compression level when writing PNG images). 

A compression quality setting of 0.0 is most generically interpreted as "high compression is important," while a setting of 1.0 is most generically interpreted as "high image 
quality is important." 

If there are multiple compression types but none has been set, an IllegalStateException is thrown. 

The default implementation checks that compression is supported, and that the compression mode is MODE_EXPLICIT. If so, if getCompressionTypes() returns null or compressionType is 
non-null it sets the compressionQuality instance variable. 


    quality - a float between 0and 1 indicating the desired quality level. 

*javax.imageio.ImageWriteParam.setCompressionType(String)*

public void setCompressionType(java.lang.String compressionType)

Sets the compression type to one of the values indicated by getCompressionTypes. If a value of null is passed in, any previous setting is removed. 

The default implementation checks whether compression is supported and the compression mode is MODE_EXPLICIT. If so, it calls getCompressionTypes and checks if compressionType is 
one of the legal values. If it is, the compressionType instance variable is set. If compressionType is null, the instance variable is set without performing any checking. 


    compressionType - one of the Strings returned by getCompressionTypes, or null to remove any previous setting. 

*javax.imageio.ImageWriteParam.setProgressiveMode(int)*

public void setProgressiveMode(int mode)

Specifies that the writer is to write the image out in a progressive mode such that the stream will contain a series of scans of increasing quality. If progressive encoding is not 
supported, an UnsupportedOperationException will be thrown. 

The mode argument determines how the progression parameters are chosen, and must be either MODE_DISABLED, MODE_COPY_FROM_METADATA, or MODE_DEFAULT. Otherwise an 
IllegalArgumentException is thrown. 

The modes are interpreted as follows: 

MODE_DISABLED - No progression. Use this to turn off progession. 

MODE_COPY_FROM_METADATA - The output image will use whatever progression parameters are found in the metadata objects passed into the writer. 

MODE_DEFAULT - The image will be written progressively, with parameters chosen by the writer. 

The default is MODE_COPY_FROM_METADATA. 


    mode - The mode for setting progression in the output stream. 

*javax.imageio.ImageWriteParam.setTiling(int,int,int,int)*

public void setTiling(
  int tileWidth,
  int tileHeight,
  int tileGridXOffset,
  int tileGridYOffset)

Specifies that the image should be tiled in the output stream. The tileWidth and tileHeight parameters specify the width and height of the tiles in the file. If the tile width or 
height is greater than the width or height of the image, the image is not tiled in that dimension. 

If canOffsetTiles returns false, then the tileGridXOffset and tileGridYOffset parameters must be zero. 


    tileWidth - the width of each tile. 
    tileHeight - the height of each tile. 
    tileGridXOffset - the horizontal offset of the tile grid. 
    tileGridYOffset - the vertical offset of the tile grid. 

*javax.imageio.ImageWriteParam.setTilingMode(int)*

public void setTilingMode(int mode)

Determines whether the image will be tiled in the output stream and, if it will, how the tiling parameters will be determined. The modes are interpreted as follows: 



MODE_DISABLED - The image will not be tiled. setTiling will throw an IllegalStateException. 

MODE_DEFAULT - The image will be tiled using default parameters. setTiling will throw an IllegalStateException. 

MODE_EXPLICIT - The image will be tiled according to parameters given in the <code>setTiling</code>(|javax.imageio.ImageWriteParam|) method. Any previously set tiling parameters 
are discarded. 

MODE_COPY_FROM_METADATA - The image will conform to the metadata object passed in to a write. setTiling will throw an IllegalStateException. 




    mode - The mode to use for tiling. 

*javax.imageio.ImageWriteParam.unsetCompression()*

public void unsetCompression()

Removes any previous compression type and quality settings. 

The default implementation sets the instance variable compressionType to null, and the instance variable compressionQuality to 1.0F. 



*javax.imageio.ImageWriteParam.unsetTiling()*

public void unsetTiling()

Removes any previous tile grid parameters specified by calls to setTiling. 

The default implementation sets the instance variables tileWidth, tileHeight, tileGridXOffset, and tileGridYOffset to 0. 





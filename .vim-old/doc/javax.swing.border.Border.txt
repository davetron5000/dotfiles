*javax.swing.border.Border* *Border* Interface describing an object capable of rendering a border
 around the edges of a swing component.

public interface interface Border


|javax.swing.border.Border_Description|
|javax.swing.border.Border_Fields|
|javax.swing.border.Border_Constructors|
|javax.swing.border.Border_Methods|

====================================================================================================================================================================================

*javax.swing.border.Border_Methods*
|javax.swing.border.Border.getBorderInsets(Component)|Returns the insets of the border.
|javax.swing.border.Border.isBorderOpaque()|Returns whether or not the border is opaque.
|javax.swing.border.Border.paintBorder(Component,Graphics,int,int,int,int)|Paints the border for the specified component with the specified   position and size.

*javax.swing.border.Border_Description*

Interface describing an object capable of rendering a border around the edges of a swing component. For examples of using borders see How to Use Borders, a section in The Java 
Tutorial. 

In the Swing component set, borders supercede Insets as the mechanism for creating a (decorated or plain) area around the edge of a component. 

Usage Notes: 

Use EmptyBorder to create a plain border (this mechanism replaces its predecessor, setInsets). Use CompoundBorder to nest multiple border objects, creating a single, combined 
border. Border instances are designed to be shared. Rather than creating a new border object using one of border classes, use the BorderFactory methods, which produces a shared 
instance of the common border types. Additional border styles include BevelBorder, SoftBevelBorder, EtchedBorder, LineBorder, TitledBorder, and MatteBorder. To create a new border 
class, subclass AbstractBorder. 



*javax.swing.border.Border.getBorderInsets(Component)*

public |java.awt.Insets| getBorderInsets(java.awt.Component c)

Returns the insets of the border. 


    c - the component for which this border insets value applies 

*javax.swing.border.Border.isBorderOpaque()*

public boolean isBorderOpaque()

Returns whether or not the border is opaque. If the border is opaque, it is responsible for filling in it's own background when painting. 



*javax.swing.border.Border.paintBorder(Component,Graphics,int,int,int,int)*

public void paintBorder(
  java.awt.Component c,
  java.awt.Graphics g,
  int x,
  int y,
  int width,
  int height)

Paints the border for the specified component with the specified position and size. 


    c - the component for which this border is being painted 
    g - the paint graphics 
    x - the x position of the painted border 
    y - the y position of the painted border 
    width - the width of the painted border 
    height - the height of the painted border 



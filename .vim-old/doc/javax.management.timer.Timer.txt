*javax.management.timer.Timer* *Timer* Provides the implementation of the timer 

public class Timer
  extends    |javax.management.NotificationBroadcasterSupport|
  implements |javax.management.timer.TimerMBean|
             |javax.management.MBeanRegistration|

|javax.management.timer.Timer_Description|
|javax.management.timer.Timer_Fields|
|javax.management.timer.Timer_Constructors|
|javax.management.timer.Timer_Methods|

================================================================================

*javax.management.timer.Timer_Fields*
|long_javax.management.timer.Timer.ONE_DAY|
|long_javax.management.timer.Timer.ONE_HOUR|
|long_javax.management.timer.Timer.ONE_MINUTE|
|long_javax.management.timer.Timer.ONE_SECOND|
|long_javax.management.timer.Timer.ONE_WEEK|

*javax.management.timer.Timer_Constructors*
|javax.management.timer.Timer()|Default constructor.

*javax.management.timer.Timer_Methods*
|javax.management.timer.Timer.addNotification(String,String,Object,Date)|Create
|javax.management.timer.Timer.addNotification(String,String,Object,Date,long)|C
|javax.management.timer.Timer.addNotification(String,String,Object,Date,long,long)|
|javax.management.timer.Timer.addNotification(String,String,Object,Date,long,long,boolean)|
|javax.management.timer.Timer.getAllNotificationIDs()|Gets all timer notificati
|javax.management.timer.Timer.getDate(Integer)|Gets a copy of the date associat
|javax.management.timer.Timer.getFixedRate(Integer)|Gets a copy of the flag ind
|javax.management.timer.Timer.getNbNotifications()|Gets the number of timer not
|javax.management.timer.Timer.getNbOccurences(Integer)|Gets a copy of the remai
|javax.management.timer.Timer.getNotificationIDs(String)|Gets all the identifie
|javax.management.timer.Timer.getNotificationInfo()|
|javax.management.timer.Timer.getNotificationMessage(Integer)|Gets the timer no
|javax.management.timer.Timer.getNotificationType(Integer)|Gets the timer notif
|javax.management.timer.Timer.getNotificationUserData(Integer)|Gets the timer n
|javax.management.timer.Timer.getPeriod(Integer)|Gets a copy of the period (in 
|javax.management.timer.Timer.getSendPastNotifications()|Gets the flag indicati
|javax.management.timer.Timer.isActive()|Tests whether the timer MBean is activ
|javax.management.timer.Timer.isEmpty()|Tests whether the list of timer notific
|javax.management.timer.Timer.postDeregister()|Allows the timer MBean to perfor
|javax.management.timer.Timer.postRegister(Boolean)|Allows the timer MBean to p
|javax.management.timer.Timer.preDeregister()|Allows the timer MBean to perform
|javax.management.timer.Timer.preRegister(MBeanServer,ObjectName)|Allows the ti
|javax.management.timer.Timer.removeAllNotifications()|Removes all the timer no
|javax.management.timer.Timer.removeNotification(Integer)|Removes the timer not
|javax.management.timer.Timer.removeNotifications(String)|Removes all the timer
|javax.management.timer.Timer.setSendPastNotifications(boolean)|Sets the flag i
|javax.management.timer.Timer.start()|Starts the timer.
|javax.management.timer.Timer.stop()|Stops the timer.

*javax.management.timer.Timer_Description*

Provides the implementation of the timer MBean. The timer MBean sends out an 
alarm at a specified time that wakes up all the listeners registered to receive 
timer notifications. 

This class manages a list of dated timer notifications. A method allows users 
to add/remove as many notifications as required. When a timer notification is 
emitted by the timer and becomes obsolete, it is automatically removed from the 
list of timer notifications. Additional timer notifications can be added into 
regularly repeating notifications. 

Note: 

All notifications before the time when the addNotification method is called are 
ignored, irrespective of the sendPastNotifications flag. When sending timer 
notifications, the timer updates the notification sequence number irrespective 
of the notification type. The timer service relies on the system date of the 
host where the Timer class is loaded. Listeners may receive untimely 
notifications if their host has a different system date. To avoid such 
problems, synchronize the system date of all host machines where timing is 
needed. The default behavior for periodic notifications is fixed-delay 
execution, as specified in (|java.util.Timer|) . In order to use fixed-rate 
execution, use the overloaded (|javax.management.timer.Timer|) method. 
Notification listeners are potentially all executed in the same thread. 
Therefore, they should execute rapidly to avoid holding up other listeners or 
perturbing the regularity of fixed-delay executions. See 
(|javax.management.NotificationBroadcasterSupport|) . 


*long_javax.management.timer.Timer.ONE_DAY*

Provides the implementation of the timer MBean. The timer MBean sends out an 
alarm at a specified time that wakes up all the listeners registered to receive 
timer notifications. 

This class manages a list of dated timer notifications. A method allows users 
to add/remove as many notifications as required. When a timer notification is 
emitted by the timer and becomes obsolete, it is automatically removed from the 
list of timer notifications. Additional timer notifications can be added into 
regularly repeating notifications. 

Note: 

All notifications before the time when the addNotification method is called are 
ignored, irrespective of the sendPastNotifications flag. When sending timer 
notifications, the timer updates the notification sequence number irrespective 
of the notification type. The timer service relies on the system date of the 
host where the Timer class is loaded. Listeners may receive untimely 
notifications if their host has a different system date. To avoid such 
problems, synchronize the system date of all host machines where timing is 
needed. The default behavior for periodic notifications is fixed-delay 
execution, as specified in (|java.util.Timer|) . In order to use fixed-rate 
execution, use the overloaded (|javax.management.timer.Timer|) method. 
Notification listeners are potentially all executed in the same thread. 
Therefore, they should execute rapidly to avoid holding up other listeners or 
perturbing the regularity of fixed-delay executions. See 
(|javax.management.NotificationBroadcasterSupport|) . 


*long_javax.management.timer.Timer.ONE_HOUR*

Provides the implementation of the timer MBean. The timer MBean sends out an 
alarm at a specified time that wakes up all the listeners registered to receive 
timer notifications. 

This class manages a list of dated timer notifications. A method allows users 
to add/remove as many notifications as required. When a timer notification is 
emitted by the timer and becomes obsolete, it is automatically removed from the 
list of timer notifications. Additional timer notifications can be added into 
regularly repeating notifications. 

Note: 

All notifications before the time when the addNotification method is called are 
ignored, irrespective of the sendPastNotifications flag. When sending timer 
notifications, the timer updates the notification sequence number irrespective 
of the notification type. The timer service relies on the system date of the 
host where the Timer class is loaded. Listeners may receive untimely 
notifications if their host has a different system date. To avoid such 
problems, synchronize the system date of all host machines where timing is 
needed. The default behavior for periodic notifications is fixed-delay 
execution, as specified in (|java.util.Timer|) . In order to use fixed-rate 
execution, use the overloaded (|javax.management.timer.Timer|) method. 
Notification listeners are potentially all executed in the same thread. 
Therefore, they should execute rapidly to avoid holding up other listeners or 
perturbing the regularity of fixed-delay executions. See 
(|javax.management.NotificationBroadcasterSupport|) . 


*long_javax.management.timer.Timer.ONE_MINUTE*

Provides the implementation of the timer MBean. The timer MBean sends out an 
alarm at a specified time that wakes up all the listeners registered to receive 
timer notifications. 

This class manages a list of dated timer notifications. A method allows users 
to add/remove as many notifications as required. When a timer notification is 
emitted by the timer and becomes obsolete, it is automatically removed from the 
list of timer notifications. Additional timer notifications can be added into 
regularly repeating notifications. 

Note: 

All notifications before the time when the addNotification method is called are 
ignored, irrespective of the sendPastNotifications flag. When sending timer 
notifications, the timer updates the notification sequence number irrespective 
of the notification type. The timer service relies on the system date of the 
host where the Timer class is loaded. Listeners may receive untimely 
notifications if their host has a different system date. To avoid such 
problems, synchronize the system date of all host machines where timing is 
needed. The default behavior for periodic notifications is fixed-delay 
execution, as specified in (|java.util.Timer|) . In order to use fixed-rate 
execution, use the overloaded (|javax.management.timer.Timer|) method. 
Notification listeners are potentially all executed in the same thread. 
Therefore, they should execute rapidly to avoid holding up other listeners or 
perturbing the regularity of fixed-delay executions. See 
(|javax.management.NotificationBroadcasterSupport|) . 


*long_javax.management.timer.Timer.ONE_SECOND*

Provides the implementation of the timer MBean. The timer MBean sends out an 
alarm at a specified time that wakes up all the listeners registered to receive 
timer notifications. 

This class manages a list of dated timer notifications. A method allows users 
to add/remove as many notifications as required. When a timer notification is 
emitted by the timer and becomes obsolete, it is automatically removed from the 
list of timer notifications. Additional timer notifications can be added into 
regularly repeating notifications. 

Note: 

All notifications before the time when the addNotification method is called are 
ignored, irrespective of the sendPastNotifications flag. When sending timer 
notifications, the timer updates the notification sequence number irrespective 
of the notification type. The timer service relies on the system date of the 
host where the Timer class is loaded. Listeners may receive untimely 
notifications if their host has a different system date. To avoid such 
problems, synchronize the system date of all host machines where timing is 
needed. The default behavior for periodic notifications is fixed-delay 
execution, as specified in (|java.util.Timer|) . In order to use fixed-rate 
execution, use the overloaded (|javax.management.timer.Timer|) method. 
Notification listeners are potentially all executed in the same thread. 
Therefore, they should execute rapidly to avoid holding up other listeners or 
perturbing the regularity of fixed-delay executions. See 
(|javax.management.NotificationBroadcasterSupport|) . 


*long_javax.management.timer.Timer.ONE_WEEK*

Provides the implementation of the timer MBean. The timer MBean sends out an 
alarm at a specified time that wakes up all the listeners registered to receive 
timer notifications. 

This class manages a list of dated timer notifications. A method allows users 
to add/remove as many notifications as required. When a timer notification is 
emitted by the timer and becomes obsolete, it is automatically removed from the 
list of timer notifications. Additional timer notifications can be added into 
regularly repeating notifications. 

Note: 

All notifications before the time when the addNotification method is called are 
ignored, irrespective of the sendPastNotifications flag. When sending timer 
notifications, the timer updates the notification sequence number irrespective 
of the notification type. The timer service relies on the system date of the 
host where the Timer class is loaded. Listeners may receive untimely 
notifications if their host has a different system date. To avoid such 
problems, synchronize the system date of all host machines where timing is 
needed. The default behavior for periodic notifications is fixed-delay 
execution, as specified in (|java.util.Timer|) . In order to use fixed-rate 
execution, use the overloaded (|javax.management.timer.Timer|) method. 
Notification listeners are potentially all executed in the same thread. 
Therefore, they should execute rapidly to avoid holding up other listeners or 
perturbing the regularity of fixed-delay executions. See 
(|javax.management.NotificationBroadcasterSupport|) . 



*javax.management.timer.Timer()*

public Timer()

Default constructor. 


*javax.management.timer.Timer.addNotification(String,String,Object,Date)*

public synchronized |java.lang.Integer| addNotification(
  java.lang.String type,
  java.lang.String message,
  java.lang.Object userData,
  java.util.Date date)
  throws |java.lang.IllegalArgumentException|
         
Creates a new timer notification with the specified type, message and userData 
and inserts it into the list of notifications with a given date and a null 
period and number of occurrences. 

The timer notification will be handled once at the specified date. 

If the timer notification to be inserted has a date that is before the current 
date, the method behaves as if the specified date were the current date and the 
notification is delivered immediately. 

    type - The timer notification type. 
    message - The timer notification detailed message. 
    userData - The timer notification user data object. 
    date - The date when the notification occurs. 

    Returns: The identifier of the new created timer notification. 
*javax.management.timer.Timer.addNotification(String,String,Object,Date,long)*

public synchronized |java.lang.Integer| addNotification(
  java.lang.String type,
  java.lang.String message,
  java.lang.Object userData,
  java.util.Date date,
  long period)
  throws |java.lang.IllegalArgumentException|
         
Creates a new timer notification with the specified type, message and userData 
and inserts it into the list of notifications with a given date and period and 
a null number of occurrences. 

The timer notification will repeat continuously using the timer period using a 
fixed-delay execution scheme, as specified in (|java.util.Timer|) . In order to 
use a fixed-rate execution scheme, use (|javax.management.timer.Timer|) 
instead. 

If the timer notification to be inserted has a date that is before the current 
date, the method behaves as if the specified date were the current date. The 
first notification is delivered immediately and the subsequent ones are spaced 
as specified by the period parameter. 

    type - The timer notification type. 
    message - The timer notification detailed message. 
    userData - The timer notification user data object. 
    date - The date when the notification occurs. 
    period - The period of the timer notification (in milliseconds). 

    Returns: The identifier of the new created timer notification. 
*javax.management.timer.Timer.addNotification(String,String,Object,Date,long,long)*

public synchronized |java.lang.Integer| addNotification(
  java.lang.String type,
  java.lang.String message,
  java.lang.Object userData,
  java.util.Date date,
  long period,
  long nbOccurences)
  throws |java.lang.IllegalArgumentException|
         
Creates a new timer notification with the specified type, message and userData 
and inserts it into the list of notifications with a given date, period and 
number of occurrences. 

If the timer notification to be inserted has a date that is before the current 
date, the method behaves as if the specified date were the current date. For 
once-off notifications, the notification is delivered immediately. For periodic 
notifications, the first notification is delivered immediately and the 
subsequent ones are spaced as specified by the period parameter. 

Note that once the timer notification has been added into the list of 
notifications, its associated date, period and number of occurrences cannot be 
updated. 

In the case of a periodic notification, uses a fixed-delay execution scheme, as 
specified in (|java.util.Timer|) . In order to use a fixed-rate execution 
scheme, use (|javax.management.timer.Timer|) instead. 

    type - The timer notification type. 
    message - The timer notification detailed message. 
    userData - The timer notification user data object. 
    date - The date when the notification occurs. 
    period - The period of the timer notification (in milliseconds). 
    nbOccurences - The total number the timer notification will be emitted. 

    Returns: The identifier of the new created timer notification. 
*javax.management.timer.Timer.addNotification(String,String,Object,Date,long,long,boolean)*

public synchronized |java.lang.Integer| addNotification(
  java.lang.String type,
  java.lang.String message,
  java.lang.Object userData,
  java.util.Date date,
  long period,
  long nbOccurences,
  boolean fixedRate)
  throws |java.lang.IllegalArgumentException|
         
Creates a new timer notification with the specified type, message and userData 
and inserts it into the list of notifications with a given date, period and 
number of occurrences. 

If the timer notification to be inserted has a date that is before the current 
date, the method behaves as if the specified date were the current date. For 
once-off notifications, the notification is delivered immediately. For periodic 
notifications, the first notification is delivered immediately and the 
subsequent ones are spaced as specified by the period parameter. 

Note that once the timer notification has been added into the list of 
notifications, its associated date, period and number of occurrences cannot be 
updated. 

In the case of a periodic notification, the value of parameter fixedRate is 
used to specify the execution scheme, as specified in (|java.util.Timer|) . 

    type - The timer notification type. 
    message - The timer notification detailed message. 
    userData - The timer notification user data object. 
    date - The date when the notification occurs. 
    period - The period of the timer notification (in milliseconds). 
    nbOccurences - The total number the timer notification will be emitted. 
    fixedRate - If true and if the notification is periodic, the notification is scheduled with 
       a fixed-rate execution scheme. If false and if the notification is 
       periodic, the notification is scheduled with a fixed-delay execution 
       scheme. Ignored if the notification is not periodic. 

    Returns: The identifier of the new created timer notification. 
*javax.management.timer.Timer.getAllNotificationIDs()*

public synchronized |java.util.Vector| getAllNotificationIDs()

Gets all timer notification identifiers registered into the list of 
notifications. 


    Returns: A vector of Integer objects containing all the timer notification identifiers. 
             The vector is empty if there is no timer notification registered 
             for this timer MBean. 
*javax.management.timer.Timer.getDate(Integer)*

public |java.util.Date| getDate(java.lang.Integer id)

Gets a copy of the date associated to a timer notification. 

    id - The timer notification identifier. 

    Returns: A copy of the date or null if the identifier is not mapped to any timer 
             notification registered for this timer MBean. 
*javax.management.timer.Timer.getFixedRate(Integer)*

public |java.lang.Boolean| getFixedRate(java.lang.Integer id)

Gets a copy of the flag indicating whether a periodic notification is executed 
at fixed-delay or at fixed-rate. 

    id - The timer notification identifier. 

    Returns: A copy of the flag indicating whether a periodic notification is executed at 
             fixed-delay or at fixed-rate. 
*javax.management.timer.Timer.getNbNotifications()*

public int getNbNotifications()

Gets the number of timer notifications registered into the list of 
notifications. 


    Returns: The number of timer notifications. 
*javax.management.timer.Timer.getNbOccurences(Integer)*

public |java.lang.Long| getNbOccurences(java.lang.Integer id)

Gets a copy of the remaining number of occurrences associated to a timer 
notification. 

    id - The timer notification identifier. 

    Returns: A copy of the remaining number of occurrences or null if the identifier is not 
             mapped to any timer notification registered for this timer MBean. 
*javax.management.timer.Timer.getNotificationIDs(String)*

public synchronized |java.util.Vector| getNotificationIDs(java.lang.String type)

Gets all the identifiers of timer notifications corresponding to the specified 
type. 

    type - The timer notification type. 

    Returns: A vector of Integer objects containing all the identifiers of timer 
             notifications with the specified type. The vector is empty if 
             there is no timer notifications registered for this timer MBean 
             with the specified type. 
*javax.management.timer.Timer.getNotificationInfo()*

public synchronized |javax.management.MBeanNotificationInfo| getNotificationInfo()




*javax.management.timer.Timer.getNotificationMessage(Integer)*

public |java.lang.String| getNotificationMessage(java.lang.Integer id)

Gets the timer notification detailed message corresponding to the specified 
identifier. 

    id - The timer notification identifier. 

    Returns: The timer notification detailed message or null if the identifier is not mapped 
             to any timer notification registered for this timer MBean. 
*javax.management.timer.Timer.getNotificationType(Integer)*

public |java.lang.String| getNotificationType(java.lang.Integer id)

Gets the timer notification type corresponding to the specified identifier. 

    id - The timer notification identifier. 

    Returns: The timer notification type or null if the identifier is not mapped to any 
             timer notification registered for this timer MBean. 
*javax.management.timer.Timer.getNotificationUserData(Integer)*

public |java.lang.Object| getNotificationUserData(java.lang.Integer id)

Gets the timer notification user data object corresponding to the specified 
identifier. 

    id - The timer notification identifier. 

    Returns: The timer notification user data object or null if the identifier is not mapped 
             to any timer notification registered for this timer MBean. 
*javax.management.timer.Timer.getPeriod(Integer)*

public |java.lang.Long| getPeriod(java.lang.Integer id)

Gets a copy of the period (in milliseconds) associated to a timer notification. 

    id - The timer notification identifier. 

    Returns: A copy of the period or null if the identifier is not mapped to any timer 
             notification registered for this timer MBean. 
*javax.management.timer.Timer.getSendPastNotifications()*

public boolean getSendPastNotifications()

Gets the flag indicating whether or not the timer sends past notifications. The 
default value of the past notifications sending on/off flag is false. 


    Returns: The past notifications sending on/off flag value. 
*javax.management.timer.Timer.isActive()*

public boolean isActive()

Tests whether the timer MBean is active. A timer MBean is marked active when 
the start(|javax.management.timer.Timer|) method is called. It becomes inactive 
when the stop(|javax.management.timer.Timer|) method is called. The default 
value of the active on/off flag is false. 


    Returns: true if the timer MBean is active, false otherwise. 
*javax.management.timer.Timer.isEmpty()*

public boolean isEmpty()

Tests whether the list of timer notifications is empty. 


    Returns: true if the list of timer notifications is empty, false otherwise. 
*javax.management.timer.Timer.postDeregister()*

public void postDeregister()

Allows the timer MBean to perform any operations needed after having been 
unregistered by the MBean server. 

Not used in this context. 


*javax.management.timer.Timer.postRegister(Boolean)*

public void postRegister(java.lang.Boolean registrationDone)

Allows the timer MBean to perform any operations needed after having been 
registered in the MBean server or after the registration has failed. 

Not used in this context. 


*javax.management.timer.Timer.preDeregister()*

public void preDeregister()
  throws |java.lang.Exception|
         
Allows the timer MBean to perform any operations it needs before being 
unregistered by the MBean server. 

Stops the timer. 


*javax.management.timer.Timer.preRegister(MBeanServer,ObjectName)*

public |javax.management.ObjectName| preRegister(
  javax.management.MBeanServer server,
  javax.management.ObjectName name)
  throws |java.lang.Exception|
         
Allows the timer MBean to perform any operations it needs before being 
registered in the MBean server. 

Not used in this context. 

    server - The MBean server in which the timer MBean will be registered. 
    name - The object name of the timer MBean. 

    Returns: The name of the timer MBean registered. 
*javax.management.timer.Timer.removeAllNotifications()*

public synchronized void removeAllNotifications()

Removes all the timer notifications from the list of notifications and resets 
the counter used to update the timer notification identifiers. 


*javax.management.timer.Timer.removeNotification(Integer)*

public synchronized void removeNotification(java.lang.Integer id)
  throws |javax.management.InstanceNotFoundException|
         
Removes the timer notification corresponding to the specified identifier from 
the list of notifications. 

    id - The timer notification identifier. 

*javax.management.timer.Timer.removeNotifications(String)*

public synchronized void removeNotifications(java.lang.String type)
  throws |javax.management.InstanceNotFoundException|
         
Removes all the timer notifications corresponding to the specified type from 
the list of notifications. 

    type - The timer notification type. 

*javax.management.timer.Timer.setSendPastNotifications(boolean)*

public void setSendPastNotifications(boolean value)

Sets the flag indicating whether the timer sends past notifications or not. The 
default value of the past notifications sending on/off flag is false. 

    value - The past notifications sending on/off flag value. 

*javax.management.timer.Timer.start()*

public synchronized void start()

Starts the timer. 

If there is one or more timer notifications before the time in the list of 
notifications, the notification is sent according to the sendPastNotifications 
flag and then, updated according to its period and remaining number of 
occurrences. If the timer notification date remains earlier than the current 
date, this notification is just removed from the list of notifications. 


*javax.management.timer.Timer.stop()*

public synchronized void stop()

Stops the timer. 




*javax.naming.spi.DirectoryManager* *DirectoryManager* This class contains methods for supporting DirContext
 implementations.

public class DirectoryManager
  extends    |javax.naming.spi.NamingManager|

|javax.naming.spi.DirectoryManager_Description|
|javax.naming.spi.DirectoryManager_Fields|
|javax.naming.spi.DirectoryManager_Constructors|
|javax.naming.spi.DirectoryManager_Methods|

====================================================================================================================================================================================

*javax.naming.spi.DirectoryManager_Methods*
|javax.naming.spi.DirectoryManager.getContinuationDirContext(CannotProceedException)|Creates a context in which to continue a DirContext operation.
|javax.naming.spi.DirectoryManager.getObjectInstance(Object,Name,Context,Hashtable<?,?>,Attributes)|Creates an instance of an object for the specified object,  attributes, and env
|javax.naming.spi.DirectoryManager.getStateToBind(Object,Name,Context,Hashtable<?,?>,Attributes)|Retrieves the state of an object for binding when given the original  object and i

*javax.naming.spi.DirectoryManager_Description*

This class contains methods for supporting DirContext implementations. 

This class is an extension of NamingManager. It contains methods for use by service providers for accessing object factories and state factories, and for getting continuation 
contexts for supporting federation. 

DirectoryManager is safe for concurrent access by multiple threads. 

Except as otherwise noted, a Name, Attributes, or environment parameter passed to any method is owned by the caller. The implementation will not modify the object or keep a 
reference to it, although it may keep a reference to a clone or copy. 



*javax.naming.spi.DirectoryManager.getContinuationDirContext(CannotProceedException)*

public static |javax.naming.directory.DirContext| getContinuationDirContext(javax.naming.CannotProceedException cpe)
  throws |javax.naming.NamingException|
         
Creates a context in which to continue a DirContext operation. Operates just like NamingManager.getContinuationContext(), only the continuation context returned is a DirContext. 


    cpe - The non-null exception that triggered this continuation. 

    Returns: A non-null DirContext object for continuing the operation. 

*javax.naming.spi.DirectoryManager.getObjectInstance(Object,Name,Context,Hashtable<?,?>,Attributes)*

public static |java.lang.Object| getObjectInstance(
  java.lang.Object refInfo,
  javax.naming.Name name,
  javax.naming.Context nameCtx,
  java.util.Hashtable<?, ?> environment,
  javax.naming.directory.Attributes attrs)
  throws |java.lang.Exception|
         
Creates an instance of an object for the specified object, attributes, and environment. 

This method is the same as NamingManager.getObjectInstance except for the following differences: 

It accepts an Attributes parameter that contains attributes associated with the object. The DirObjectFactory might use these attributes to save having to look them up from the 
directory. 

The object factories tried must implement either ObjectFactory or DirObjectFactory. If it implements DirObjectFactory, DirObjectFactory.getObjectInstance() is used, otherwise, 
ObjectFactory.getObjectInstance() is used. 

Service providers that implement the DirContext interface should use this method, not NamingManager.getObjectInstance(). 


    refInfo - The possibly null object for which to create an object. 
    name - The name of this object relative to nameCtx. Specifying a name is optional; if it is omitted, name should be null. 
    nameCtx - The context relative to which the name parameter is specified. If null, name is relative to the default initial context. 
    environment - The possibly null environment to be used in the creation of the object factory and the object. 
    attrs - The possibly null attributes associated with refInfo. This might not be the complete set of attributes for refInfo; you might be able to read more attributes from the directory. 

    Returns: An object created using refInfo and attrs; or refInfo if an object cannot be created by a factory. 

*javax.naming.spi.DirectoryManager.getStateToBind(Object,Name,Context,Hashtable<?,?>,Attributes)*

public static |javax.naming.spi.DirStateFactory.Result| getStateToBind(
  java.lang.Object obj,
  javax.naming.Name name,
  javax.naming.Context nameCtx,
  java.util.Hashtable<?, ?> environment,
  javax.naming.directory.Attributes attrs)
  throws |javax.naming.NamingException|
         
Retrieves the state of an object for binding when given the original object and its attributes. 

This method is like NamingManager.getStateToBind except for the following differences: 

It accepts an Attributes parameter containing attributes that were passed to the DirContext.bind() method. It returns a non-null DirStateFactory.Result instance containing the 
object to be bound, and the attributes to accompany the binding. Either the object or the attributes may be null. 

The state factories tried must each implement either StateFactory or DirStateFactory. If it implements DirStateFactory, then DirStateFactory.getStateToBind() is called; otherwise, 
StateFactory.getStateToBind() is called. 

Service providers that implement the DirContext interface should use this method, not NamingManager.getStateToBind(). 

See NamingManager.getStateToBind() for a description of how the list of state factories to be tried is determined. 

The object returned by this method is owned by the caller. The implementation will not subsequently modify it. It will contain either a new Attributes object that is likewise 
owned by the caller, or a reference to the original attrs parameter. 


    obj - The non-null object for which to get state to bind. 
    name - The name of this object relative to nameCtx, or null if no name is specified. 
    nameCtx - The context relative to which the name parameter is specified, or null if name is relative to the default initial context. 
    environment - The possibly null environment to be used in the creation of the state factory and the object's state. 
    attrs - The possibly null Attributes that is to be bound with the object. 

    Returns: A non-null DirStateFactory.Result containing the object and attributes to be bound. If no state factory returns a non-null answer, the result will contain the object (obj) itself 
             with the original attributes. 



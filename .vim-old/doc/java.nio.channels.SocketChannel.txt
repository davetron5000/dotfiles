*java.nio.channels.SocketChannel* *SocketChannel* A selectable channel for stream-oriented connecting sockets.

public abstract class SocketChannel
  extends    |java.nio.channels.spi.AbstractSelectableChannel|
  implements |java.nio.channels.ByteChannel|
             |java.nio.channels.ScatteringByteChannel|
             |java.nio.channels.GatheringByteChannel|

|java.nio.channels.SocketChannel_Description|
|java.nio.channels.SocketChannel_Fields|
|java.nio.channels.SocketChannel_Constructors|
|java.nio.channels.SocketChannel_Methods|

====================================================================================================================================================================================

*java.nio.channels.SocketChannel_Constructors*
|java.nio.channels.SocketChannel(SelectorProvider)|Initializes a new instance of this class.

*java.nio.channels.SocketChannel_Methods*
|java.nio.channels.SocketChannel.connect(SocketAddress)|Connects this channel's socket.
|java.nio.channels.SocketChannel.finishConnect()|Finishes the process of connecting a socket channel.
|java.nio.channels.SocketChannel.isConnected()|Tells whether or not this channel's network socket is connected.
|java.nio.channels.SocketChannel.isConnectionPending()|Tells whether or not a connection operation is in progress on this  channel.
|java.nio.channels.SocketChannel.open()|Opens a socket channel.
|java.nio.channels.SocketChannel.open(SocketAddress)|Opens a socket channel and connects it to a remote address.
|java.nio.channels.SocketChannel.read(ByteBuffer)|
|java.nio.channels.SocketChannel.read(ByteBuffer[])|
|java.nio.channels.SocketChannel.read(ByteBuffer[],int,int)|
|java.nio.channels.SocketChannel.socket()|Retrieves a socket associated with this channel.
|java.nio.channels.SocketChannel.validOps()|Returns an operation set identifying this channel's supported  operations.
|java.nio.channels.SocketChannel.write(ByteBuffer)|
|java.nio.channels.SocketChannel.write(ByteBuffer[])|
|java.nio.channels.SocketChannel.write(ByteBuffer[],int,int)|

*java.nio.channels.SocketChannel_Description*

A selectable channel for stream-oriented connecting sockets. 

Socket channels are not a complete abstraction of connecting network sockets. Binding, shutdown, and the manipulation of socket options must be done through an associated 
(|java.net.Socket|) object obtained by invoking the socket(|java.nio.channels.SocketChannel|) method. It is not possible to create a channel for an arbitrary, pre-existing socket, 
nor is it possible to specify the (|java.net.SocketImpl|) object to be used by a socket associated with a socket channel. 

A socket channel is created by invoking one of the open(|java.nio.channels.SocketChannel|) methods of this class. A newly-created socket channel is open but not yet connected. An 
attempt to invoke an I/O operation upon an unconnected channel will cause a (|java.nio.channels.NotYetConnectedException|) to be thrown. A socket channel can be connected by 
invoking its connect(|java.nio.channels.SocketChannel|) method; once connected, a socket channel remains connected until it is closed. Whether or not a socket channel is connected 
may be determined by invoking its isConnected(|java.nio.channels.SocketChannel|) method. 

Socket channels support non-blocking connection:A socket channel may be created and the process of establishing the link to the remote socket may be initiated via the 
connect(|java.nio.channels.SocketChannel|) method for later completion by the finishConnect(|java.nio.channels.SocketChannel|) method. Whether or not a connection operation is in 
progress may be determined by invoking the isConnectionPending(|java.nio.channels.SocketChannel|) method. 

The input and output sides of a socket channel may independently be shut down without actually closing the channel. Shutting down the input side of a channel by invoking the 
shutdownInput(|java.net.Socket|) method of an associated socket object will cause further reads on the channel to return -1, the end-of-stream indication. Shutting down the output 
side of the channel by invoking the shutdownOutput(|java.net.Socket|) method of an associated socket object will cause further writes on the channel to throw a 
(|java.nio.channels.ClosedChannelException|) . 

Socket channels support asynchronous shutdown, which is similar to the asynchronous close operation specified in the (|java.nio.channels.Channel|) class. If the input side of a 
socket is shut down by one thread while another thread is blocked in a read operation on the socket's channel, then the read operation in the blocked thread will complete without 
reading any bytes and will return -1. If the output side of a socket is shut down by one thread while another thread is blocked in a write operation on the socket's channel, then 
the blocked thread will receive an (|java.nio.channels.AsynchronousCloseException|) . 

Socket channels are safe for use by multiple concurrent threads. They support concurrent reading and writing, though at most one thread may be reading and at most one thread may 
be writing at any given time. The connect(|java.nio.channels.SocketChannel|) and finishConnect(|java.nio.channels.SocketChannel|) methods are mutually synchronized against each 
other, and an attempt to initiate a read or write operation while an invocation of one of these methods is in progress will block until that invocation is complete. 



*java.nio.channels.SocketChannel(SelectorProvider)*

protected SocketChannel(java.nio.channels.spi.SelectorProvider provider)

Initializes a new instance of this class. 


*java.nio.channels.SocketChannel.connect(SocketAddress)*

public abstract boolean connect(java.net.SocketAddress remote)
  throws |java.io.IOException|
         
Connects this channel's socket. 

If this channel is in non-blocking mode then an invocation of this method initiates a non-blocking connection operation. If the connection is established immediately, as can 
happen with a local connection, then this method returns true. Otherwise this method returns false and the connection operation must later be completed by invoking the 
finishConnect(|java.nio.channels.SocketChannel|) method. 

If this channel is in blocking mode then an invocation of this method will block until the connection is established or an I/O error occurs. 

This method performs exactly the same security checks as the (|java.net.Socket|) class. That is, if a security manager has been installed then this method verifies that its 
checkConnect(|java.lang.SecurityManager|) method permits connecting to the address and port number of the given remote endpoint. 

This method may be invoked at any time. If a read or write operation upon this channel is invoked while an invocation of this method is in progress then that operation will first 
block until this invocation is complete. If a connection attempt is initiated but fails, that is, if an invocation of this method throws a checked exception, then the channel will 
be closed. 


    remote - The remote address to which this channel is to be connected 

    Returns: true if a connection was established, false if this channel is in non-blocking mode and the connection operation is in progress 

*java.nio.channels.SocketChannel.finishConnect()*

public abstract boolean finishConnect()
  throws |java.io.IOException|
         
Finishes the process of connecting a socket channel. 

A non-blocking connection operation is initiated by placing a socket channel in non-blocking mode and then invoking its connect(|java.nio.channels.SocketChannel|) method. Once the 
connection is established, or the attempt has failed, the socket channel will become connectable and this method may be invoked to complete the connection sequence. If the 
connection operation failed then invoking this method will cause an appropriate (|java.io.IOException|) to be thrown. 

If this channel is already connected then this method will not block and will immediately return true. If this channel is in non-blocking mode then this method will return false 
if the connection process is not yet complete. If this channel is in blocking mode then this method will block until the connection either completes or fails, and will always 
either return true or throw a checked exception describing the failure. 

This method may be invoked at any time. If a read or write operation upon this channel is invoked while an invocation of this method is in progress then that operation will first 
block until this invocation is complete. If a connection attempt fails, that is, if an invocation of this method throws a checked exception, then the channel will be closed. 



    Returns: true if, and only if, this channel's socket is now connected 

*java.nio.channels.SocketChannel.isConnected()*

public abstract boolean isConnected()

Tells whether or not this channel's network socket is connected. 



    Returns: true if, and only if, this channel's network socket is connected 

*java.nio.channels.SocketChannel.isConnectionPending()*

public abstract boolean isConnectionPending()

Tells whether or not a connection operation is in progress on this channel. 



    Returns: true if, and only if, a connection operation has been initiated on this channel but not yet completed by invoking the {@link #finishConnect finishConnect} method 

*java.nio.channels.SocketChannel.open()*

public static |java.nio.channels.SocketChannel| open()
  throws |java.io.IOException|
         
Opens a socket channel. 

The new channel is created by invoking the openSocketChannel(|java.nio.channels.spi.SelectorProvider|) method of the system-wide default (|java.nio.channels.spi.SelectorProvider|) 
object. 



    Returns: A new socket channel 

*java.nio.channels.SocketChannel.open(SocketAddress)*

public static |java.nio.channels.SocketChannel| open(java.net.SocketAddress remote)
  throws |java.io.IOException|
         
Opens a socket channel and connects it to a remote address. 

This convenience method works as if by invoking the (|java.nio.channels.SocketChannel|) method, invoking the connect(|java.nio.channels.SocketChannel|) method upon the resulting 
socket channel, passing it remote, and then returning that channel. 


    remote - The remote address to which the new channel is to be connected 

*java.nio.channels.SocketChannel.read(ByteBuffer)*

public abstract int read(java.nio.ByteBuffer dst)
  throws |java.io.IOException|
         




*java.nio.channels.SocketChannel.read(ByteBuffer[])*

public final long read(java.nio.ByteBuffer[] dsts)
  throws |java.io.IOException|
         




*java.nio.channels.SocketChannel.read(ByteBuffer[],int,int)*

public abstract long read(
  java.nio.ByteBuffer[] dsts,
  int offset,
  int length)
  throws |java.io.IOException|
         




*java.nio.channels.SocketChannel.socket()*

public abstract |java.net.Socket| socket()

Retrieves a socket associated with this channel. 

The returned object will not declare any public methods that are not declared in the (|java.net.Socket|) class. 



    Returns: A socket associated with this channel 

*java.nio.channels.SocketChannel.validOps()*

public final int validOps()

Returns an operation set identifying this channel's supported operations. 

Socket channels support connecting, reading, and writing, so this method returns ( (|java.nio.channels.SelectionKey|) | (|java.nio.channels.SelectionKey|) | 
(|java.nio.channels.SelectionKey|) ). 



    Returns: The valid-operation set 

*java.nio.channels.SocketChannel.write(ByteBuffer)*

public abstract int write(java.nio.ByteBuffer src)
  throws |java.io.IOException|
         




*java.nio.channels.SocketChannel.write(ByteBuffer[])*

public final long write(java.nio.ByteBuffer[] srcs)
  throws |java.io.IOException|
         




*java.nio.channels.SocketChannel.write(ByteBuffer[],int,int)*

public abstract long write(
  java.nio.ByteBuffer[] srcs,
  int offset,
  int length)
  throws |java.io.IOException|
         






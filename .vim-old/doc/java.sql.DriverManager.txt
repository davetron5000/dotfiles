*java.sql.DriverManager* *DriverManager* The basic service for managing a set of JDBC drivers.
 NOTE: TheDataSourceinterface, new in the
 JDBC 2.0 API, provides another way to conn

public class DriverManager
  extends    |java.lang.Object|

|java.sql.DriverManager_Description|
|java.sql.DriverManager_Fields|
|java.sql.DriverManager_Constructors|
|java.sql.DriverManager_Methods|

====================================================================================================================================================================================

*java.sql.DriverManager_Methods*
|java.sql.DriverManager.deregisterDriver(Driver)|Drops a driver from the DriverManager's list.
|java.sql.DriverManager.getConnection(String)|Attempts to establish a connection to the given database URL.
|java.sql.DriverManager.getConnection(String,Properties)|Attempts to establish a connection to the given database URL.
|java.sql.DriverManager.getConnection(String,String,String)|Attempts to establish a connection to the given database URL.
|java.sql.DriverManager.getDriver(String)|Attempts to locate a driver that understands the given URL.
|java.sql.DriverManager.getDrivers()|Retrieves an Enumeration with all of the currently loaded JDBC drivers  to which the current caller has access.
|java.sql.DriverManager.getLoginTimeout()|Gets the maximum time in seconds that a driver can wait  when attempting to log in to a database.
|java.sql.DriverManager.getLogStream()|Retrieves the logging/tracing PrintStream that is used by the DriverManager  and all drivers.
|java.sql.DriverManager.getLogWriter()|Retrieves the log writer.
|java.sql.DriverManager.println(String)|Prints a message to the current JDBC log stream.
|java.sql.DriverManager.registerDriver(Driver)|Registers the given driver with the DriverManager.
|java.sql.DriverManager.setLoginTimeout(int)|Sets the maximum time in seconds that a driver will wait  while attempting to connect to a database.
|java.sql.DriverManager.setLogStream(PrintStream)|Sets the logging/tracing PrintStream that is used  by the DriverManager  and all drivers.
|java.sql.DriverManager.setLogWriter(PrintWriter)|Sets the logging/tracing PrintWriter object  that is used by the DriverManager and all drivers.

*java.sql.DriverManager_Description*

The basic service for managing a set of JDBC drivers. NOTE: The (|null|) interface, new in the JDBC 2.0 API, provides another way to connect to a data source. The use of a 
DataSource object is the preferred means of connecting to a data source. 

As part of its initialization, the DriverManager class will attempt to load the driver classes referenced in the "jdbc.drivers" system property. This allows a user to customize 
the JDBC Drivers used by their applications. For example in your ~/.hotjava/properties file you might specify: 

jdbc.drivers=foo.bah.Driver:wombat.sql.Driver:bad.taste.ourDriver 

A program can also explicitly load JDBC drivers at any time. For example, the my.sql.Driver is loaded with the following statement: 

Class.forName("my.sql.Driver"); 

When the method getConnection is called, the DriverManager will attempt to locate a suitable driver from amongst those loaded at initialization and those loaded explicitly using 
the same classloader as the current applet or application. 

Starting with the Java 2 SDK, Standard Edition, version 1.3, a logging stream can be set only if the proper permission has been granted. Normally this will be done with the tool 
PolicyTool, which can be used to grant permission java.sql.SQLPermission "setLog". 



*java.sql.DriverManager.deregisterDriver(Driver)*

public static synchronized void deregisterDriver(java.sql.Driver driver)
  throws |java.sql.SQLException|
         
Drops a driver from the DriverManager's list. Applets can only deregister drivers from their own classloaders. 


    driver - the JDBC Driver to drop 

*java.sql.DriverManager.getConnection(String)*

public static synchronized |java.sql.Connection| getConnection(java.lang.String url)
  throws |java.sql.SQLException|
         
Attempts to establish a connection to the given database URL. The DriverManager attempts to select an appropriate driver from the set of registered JDBC drivers. 


    url - a database url of the form jdbc:subprotocol:subname 

    Returns: a connection to the URL 

*java.sql.DriverManager.getConnection(String,Properties)*

public static synchronized |java.sql.Connection| getConnection(
  java.lang.String url,
  java.util.Properties info)
  throws |java.sql.SQLException|
         
Attempts to establish a connection to the given database URL. The DriverManager attempts to select an appropriate driver from the set of registered JDBC drivers. 


    url - a database url of the form jdbc:subprotocol:subname 
    info - a list of arbitrary string tag/value pairs as connection arguments; normally at least a "user" and "password" property should be included 

    Returns: a Connection to the URL 

*java.sql.DriverManager.getConnection(String,String,String)*

public static synchronized |java.sql.Connection| getConnection(
  java.lang.String url,
  java.lang.String user,
  java.lang.String password)
  throws |java.sql.SQLException|
         
Attempts to establish a connection to the given database URL. The DriverManager attempts to select an appropriate driver from the set of registered JDBC drivers. 


    url - a database url of the form jdbc:subprotocol:subname 
    user - the database user on whose behalf the connection is being made 
    password - the user's password 

    Returns: a connection to the URL 

*java.sql.DriverManager.getDriver(String)*

public static synchronized |java.sql.Driver| getDriver(java.lang.String url)
  throws |java.sql.SQLException|
         
Attempts to locate a driver that understands the given URL. The DriverManager attempts to select an appropriate driver from the set of registered JDBC drivers. 


    url - a database URL of the form jdbc:subprotocol:subname 

    Returns: a Driver object representing a driver that can connect to the given URL 

*java.sql.DriverManager.getDrivers()*

public static synchronized |java.util.Enumeration|<Driver> getDrivers()

Retrieves an Enumeration with all of the currently loaded JDBC drivers to which the current caller has access. 

Note: The classname of a driver can be found using d.getClass().getName() 



    Returns: the list of JDBC Drivers loaded by the caller's class loader 

*java.sql.DriverManager.getLoginTimeout()*

public static int getLoginTimeout()

Gets the maximum time in seconds that a driver can wait when attempting to log in to a database. 



    Returns: the driver login time limit in seconds 

*java.sql.DriverManager.getLogStream()*

public static |java.io.PrintStream| getLogStream()

Retrieves the logging/tracing PrintStream that is used by the DriverManager and all drivers. 

    Deprecated


    Returns: the logging/tracing PrintStream; if disabled, is null 

*java.sql.DriverManager.getLogWriter()*

public static |java.io.PrintWriter| getLogWriter()

Retrieves the log writer. 

The getLogWriter and setLogWriter methods should be used instead of the get/setlogStream methods, which are deprecated. 



    Returns: a java.io.PrintWriter object 

*java.sql.DriverManager.println(String)*

public static void println(java.lang.String message)

Prints a message to the current JDBC log stream. 


    message - a log or tracing message 

*java.sql.DriverManager.registerDriver(Driver)*

public static synchronized void registerDriver(java.sql.Driver driver)
  throws |java.sql.SQLException|
         
Registers the given driver with the DriverManager. A newly-loaded driver class should call the method registerDriver to make itself known to the DriverManager. 


    driver - the new JDBC Driver that is to be registered with the DriverManager 

*java.sql.DriverManager.setLoginTimeout(int)*

public static void setLoginTimeout(int seconds)

Sets the maximum time in seconds that a driver will wait while attempting to connect to a database. 


    seconds - the login time limit in seconds 

*java.sql.DriverManager.setLogStream(PrintStream)*

public static synchronized void setLogStream(java.io.PrintStream out)

Sets the logging/tracing PrintStream that is used by the DriverManager and all drivers. 

In the Java 2 SDK, Standard Edition, version 1.3 release, this method checks to see that there is an SQLPermission object before setting the logging stream. If a SecurityManager 
exists and its checkPermission method denies setting the log writer, this method throws a java.lang.SecurityException. 

    Deprecated

    out - the new logging/tracing PrintStream; to disable, set to null 

*java.sql.DriverManager.setLogWriter(PrintWriter)*

public static void setLogWriter(java.io.PrintWriter out)

Sets the logging/tracing PrintWriter object that is used by the DriverManager and all drivers. 

There is a minor versioning problem created by the introduction of the method setLogWriter. The method setLogWriter cannot create a PrintStream object that will be returned by 
getLogStream---the Java platform does not provide a backward conversion. As a result, a new application that uses setLogWriter and also uses a JDBC 1.0 driver that uses 
getLogStream will likely not see debugging information written by that driver. 

In the Java 2 SDK, Standard Edition, version 1.3 release, this method checks to see that there is an SQLPermission object before setting the logging stream. If a SecurityManager 
exists and its checkPermission method denies setting the log writer, this method throws a java.lang.SecurityException. 


    out - the new logging/tracing PrintStream object; null to disable logging and tracing 



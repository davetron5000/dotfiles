*javax.swing.JPasswordField* *JPasswordField* JPasswordField is a lightweight component that allows
 the editing of a single line of text where the view indicates
 something was ty

public class JPasswordField
  extends    |javax.swing.JTextField|

|javax.swing.JPasswordField_Description|
|javax.swing.JPasswordField_Fields|
|javax.swing.JPasswordField_Constructors|
|javax.swing.JPasswordField_Methods|

====================================================================================================================================================================================

*javax.swing.JPasswordField_Constructors*
|javax.swing.JPasswordField()|Constructs a new JPasswordField,  with a default document, null starting  text string, and 0 column width.
|javax.swing.JPasswordField(Document,String,int)|Constructs a new JPasswordField that uses the  given text storage model and the given number of columns.
|javax.swing.JPasswordField(int)|Constructs a new empty JPasswordField with the specified  number of columns.
|javax.swing.JPasswordField(String)|Constructs a new JPasswordField initialized  with the specified text.
|javax.swing.JPasswordField(String,int)|Constructs a new JPasswordField initialized with  the specified text and columns.

*javax.swing.JPasswordField_Methods*
|javax.swing.JPasswordField.copy()|Invokes provideErrorFeedback on the current  look and feel, which typically initiates an error beep.
|javax.swing.JPasswordField.cut()|Invokes provideErrorFeedback on the current  look and feel, which typically initiates an error beep.
|javax.swing.JPasswordField.echoCharIsSet()|Returns true if this JPasswordField has a character  set for echoing.
|javax.swing.JPasswordField.getAccessibleContext()|Returns the AccessibleContext associated with this   JPasswordField.
|javax.swing.JPasswordField.getEchoChar()|Returns the character to be used for echoing.
|javax.swing.JPasswordField.getPassword()|Returns the text contained in this TextComponent.
|javax.swing.JPasswordField.getText()|Returns the text contained in this TextComponent.
|javax.swing.JPasswordField.getText(int,int)|Fetches a portion of the text represented by the  component.
|javax.swing.JPasswordField.getUIClassID()|Returns the name of the Lclass that renders this component.
|javax.swing.JPasswordField.paramString()|Returns a string representation of this JPasswordField.
|javax.swing.JPasswordField.setEchoChar(char)|Sets the echo character for this JPasswordField.

*javax.swing.JPasswordField_Description*

JPasswordField is a lightweight component that allows the editing of a single line of text where the view indicates something was typed, but does not show the original characters. 
You can find further information and examples in How to Use Text Fields, a section in The Java Tutorial. 

JPasswordField is intended to be source-compatible with java.awt.TextField used with echoChar set. It is provided separately to make it easier to safely change the UI for the 
JTextField without affecting password entries. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.JPasswordField()*

public JPasswordField()

Constructs a new JPasswordField, with a default document, null starting text string, and 0 column width. 


*javax.swing.JPasswordField(Document,String,int)*

public JPasswordField(
  javax.swing.text.Document doc,
  java.lang.String txt,
  int columns)

Constructs a new JPasswordField that uses the given text storage model and the given number of columns. This is the constructor through which the other constructors feed. The echo 
character is set to '*'. If the document model is null, a default one will be created. 

    doc - the text storage to use 
    txt - the text to be displayed, null if none 
    columns - the number of columns to use to calculate the preferred width >= 0; if columns is set to zero, the preferred width will be whatever naturally results from the component 
       implementation 

*javax.swing.JPasswordField(int)*

public JPasswordField(int columns)

Constructs a new empty JPasswordField with the specified number of columns. A default model is created, and the initial string is set to null. 

    columns - the number of columns >= 0 

*javax.swing.JPasswordField(String)*

public JPasswordField(java.lang.String text)

Constructs a new JPasswordField initialized with the specified text. The document model is set to the default, and the number of columns to 0. 

    text - the text to be displayed, null if none 

*javax.swing.JPasswordField(String,int)*

public JPasswordField(
  java.lang.String text,
  int columns)

Constructs a new JPasswordField initialized with the specified text and columns. The document model is set to the default. 

    text - the text to be displayed, null if none 
    columns - the number of columns >= 0 

*javax.swing.JPasswordField.copy()*

public void copy()

Invokes provideErrorFeedback on the current look and feel, which typically initiates an error beep. The normal behavior of transferring the currently selected range in the 
associated text model to the system clipboard, and leaving the contents from the model, is not acceptable for a password field. 



*javax.swing.JPasswordField.cut()*

public void cut()

Invokes provideErrorFeedback on the current look and feel, which typically initiates an error beep. The normal behavior of transferring the currently selected range in the 
associated text model to the system clipboard, and removing the contents from the model, is not acceptable for a password field. 



*javax.swing.JPasswordField.echoCharIsSet()*

public boolean echoCharIsSet()

Returns true if this JPasswordField has a character set for echoing. A character is considered to be set if the echo character is not 0. 



    Returns: true if a character is set for echoing 

*javax.swing.JPasswordField.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Returns the AccessibleContext associated with this JPasswordField. For password fields, the AccessibleContext takes the form of an AccessibleJPasswordField. A new 
AccessibleJPasswordField instance is created if necessary. 



    Returns: an AccessibleJPasswordField that serves as the AccessibleContext of this JPasswordField 

*javax.swing.JPasswordField.getEchoChar()*

public char getEchoChar()

Returns the character to be used for echoing. The default is '*'. 



    Returns: the echo character, 0 if unset 

*javax.swing.JPasswordField.getPassword()*

public char[] getPassword()

Returns the text contained in this TextComponent. If the underlying document is null, will give a NullPointerException. For stronger security, it is recommended that the returned 
character array be cleared after use by setting each character to zero. 



    Returns: 

*javax.swing.JPasswordField.getText()*

public |java.lang.String| getText()

Returns the text contained in this TextComponent. If the underlying document is null, will give a NullPointerException. 

For security reasons, this method is deprecated. Use the * getPassword method instead. 

    Deprecated: As of Java 2 platform v1.2,
 replaced by <code>getPassword</code>.


    Returns: 

*javax.swing.JPasswordField.getText(int,int)*

public |java.lang.String| getText(
  int offs,
  int len)
  throws |javax.swing.text.BadLocationException|
         
Fetches a portion of the text represented by the component. Returns an empty string if length is 0. 

For security reasons, this method is deprecated. Use the getPassword method instead. 

    Deprecated: As of Java 2 platform v1.2,
 replaced by <code>getPassword</code>.

    offs - the offset >= 0 
    len - the length >= 0 

    Returns: 

*javax.swing.JPasswordField.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the name of the Lclass that renders this component. 



    Returns: the string "PasswordFieldUI" 

*javax.swing.JPasswordField.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JPasswordField. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary 
between implementations. The returned string may be empty but may not be null. 



    Returns: a string representation of this JPasswordField 

*javax.swing.JPasswordField.setEchoChar(char)*

public void setEchoChar(char c)

Sets the echo character for this JPasswordField. Note that this is largely a suggestion, since the view that gets installed can use whatever graphic techniques it desires to 
represent the field. Setting a value of 0 indicates that you wish to see the text as it is typed, similar to the behavior of a standard JTextField. 


    c - the echo character to display 



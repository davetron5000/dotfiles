*java.awt.MenuBar* *MenuBar* The MenuBar class encapsulates the platform's
 concept of a menu bar bound to a frame.

public class MenuBar
  extends    |java.awt.MenuComponent|
  implements |java.awt.MenuContainer|
             |javax.accessibility.Accessible|

|java.awt.MenuBar_Description|
|java.awt.MenuBar_Fields|
|java.awt.MenuBar_Constructors|
|java.awt.MenuBar_Methods|

====================================================================================================================================================================================

*java.awt.MenuBar_Constructors*
|java.awt.MenuBar()|Creates a new menu bar.

*java.awt.MenuBar_Methods*
|java.awt.MenuBar.add(Menu)|Adds the specified menu to the menu bar.
|java.awt.MenuBar.addNotify()|Creates the menu bar's peer.
|java.awt.MenuBar.countMenus()|
|java.awt.MenuBar.deleteShortcut(MenuShortcut)|Deletes the specified menu shortcut.
|java.awt.MenuBar.getAccessibleContext()|Gets the AccessibleContext associated with this MenuBar.
|java.awt.MenuBar.getHelpMenu()|Gets the help menu on the menu bar.
|java.awt.MenuBar.getMenu(int)|Gets the specified menu.
|java.awt.MenuBar.getMenuCount()|Gets the number of menus on the menu bar.
|java.awt.MenuBar.getShortcutMenuItem(MenuShortcut)|Gets the instance of MenuItem associated  with the specified MenuShortcut object,  or null if none of the menu items being mana
|java.awt.MenuBar.remove(int)|Removes the menu located at the specified  index from this menu bar.
|java.awt.MenuBar.remove(MenuComponent)|Removes the specified menu component from this menu bar.
|java.awt.MenuBar.removeNotify()|Removes the menu bar's peer.
|java.awt.MenuBar.setHelpMenu(Menu)|Sets the specified menu to be this menu bar's help menu.
|java.awt.MenuBar.shortcuts()|Gets an enumeration of all menu shortcuts this menu bar  is managing.

*java.awt.MenuBar_Description*

The MenuBar class encapsulates the platform's concept of a menu bar bound to a frame. In order to associate the menu bar with a Frame object, call the frame's setMenuBar method. 

This is what a menu bar might look like: 

ALIGN=center HSPACE=10 VSPACE=7> 

A menu bar handles keyboard shortcuts for menu items, passing them along to its child menus. (Keyboard shortcuts, which are optional, provide the user with an alternative to the 
mouse for invoking a menu item and the action that is associated with it.) Each menu item can maintain an instance of MenuShortcut. The MenuBar class defines several methods, 
(|java.awt.MenuBar.AccessibleAWTMenuBar|) and (|java.awt.MenuBar.AccessibleAWTMenuBar|) that retrieve information about the shortcuts a given menu bar is managing. 



*java.awt.MenuBar()*

public MenuBar()
  throws |java.awt.HeadlessException|
         
Creates a new menu bar. 


*java.awt.MenuBar.add(Menu)*

public |java.awt.Menu| add(java.awt.Menu m)

Adds the specified menu to the menu bar. If the menu has been part of another menu bar, removes it from that menu bar. 


    m - the menu to be added 

    Returns: the menu added 

*java.awt.MenuBar.addNotify()*

public void addNotify()

Creates the menu bar's peer. The peer allows us to change the appearance of the menu bar without changing any of the menu bar's functionality. 



*java.awt.MenuBar.countMenus()*

public int countMenus()



    Deprecated: As of JDK version 1.1,
 replaced by <code>getMenuCount()</code>.


*java.awt.MenuBar.deleteShortcut(MenuShortcut)*

public void deleteShortcut(java.awt.MenuShortcut s)

Deletes the specified menu shortcut. 


    s - the menu shortcut to delete. 

*java.awt.MenuBar.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this MenuBar. For menu bars, the AccessibleContext takes the form of an AccessibleAWTMenuBar. A new AccessibleAWTMenuBar instance is 
created if necessary. 



    Returns: an AccessibleAWTMenuBar that serves as the AccessibleContext of this MenuBar 

*java.awt.MenuBar.getHelpMenu()*

public |java.awt.Menu| getHelpMenu()

Gets the help menu on the menu bar. 



    Returns: the help menu on this menu bar. 

*java.awt.MenuBar.getMenu(int)*

public |java.awt.Menu| getMenu(int i)

Gets the specified menu. 


    i - the index position of the menu to be returned. 

    Returns: the menu at the specified index of this menu bar. 

*java.awt.MenuBar.getMenuCount()*

public int getMenuCount()

Gets the number of menus on the menu bar. 



    Returns: the number of menus on the menu bar. 

*java.awt.MenuBar.getShortcutMenuItem(MenuShortcut)*

public |java.awt.MenuItem| getShortcutMenuItem(java.awt.MenuShortcut s)

Gets the instance of MenuItem associated with the specified MenuShortcut object, or null if none of the menu items being managed by this menu bar is associated with the specified 
menu shortcut. 


    s - the specified menu shortcut. 

*java.awt.MenuBar.remove(int)*

public void remove(int index)

Removes the menu located at the specified index from this menu bar. 


    index - the position of the menu to be removed. 

*java.awt.MenuBar.remove(MenuComponent)*

public void remove(java.awt.MenuComponent m)

Removes the specified menu component from this menu bar. 


    m - the menu component to be removed. 

*java.awt.MenuBar.removeNotify()*

public void removeNotify()

Removes the menu bar's peer. The peer allows us to change the appearance of the menu bar without changing any of the menu bar's functionality. 



*java.awt.MenuBar.setHelpMenu(Menu)*

public void setHelpMenu(java.awt.Menu m)

Sets the specified menu to be this menu bar's help menu. If this menu bar has an existing help menu, the old help menu is removed from the menu bar, and replaced with the 
specified menu. 


    m - the menu to be set as the help menu 

*java.awt.MenuBar.shortcuts()*

public synchronized |java.util.Enumeration|<MenuShortcut> shortcuts()

Gets an enumeration of all menu shortcuts this menu bar is managing. 



    Returns: an enumeration of menu shortcuts that this menu bar is managing. 



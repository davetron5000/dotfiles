*org.xml.sax.helpers.DefaultHandler* *DefaultHandler* Default base class for SAX

public class DefaultHandler
  extends    |java.lang.Object|
  implements |org.xml.sax.EntityResolver|
             |org.xml.sax.DTDHandler|
             |org.xml.sax.ContentHandler|
             |org.xml.sax.ErrorHandler|

|org.xml.sax.helpers.DefaultHandler_Description|
|org.xml.sax.helpers.DefaultHandler_Fields|
|org.xml.sax.helpers.DefaultHandler_Constructors|
|org.xml.sax.helpers.DefaultHandler_Methods|

================================================================================

*org.xml.sax.helpers.DefaultHandler_Constructors*
|org.xml.sax.helpers.DefaultHandler()|

*org.xml.sax.helpers.DefaultHandler_Methods*
|org.xml.sax.helpers.DefaultHandler.characters(char[],int,int)|Receive notifica
|org.xml.sax.helpers.DefaultHandler.endDocument()|Receive notification of the e
|org.xml.sax.helpers.DefaultHandler.endElement(String,String,String)|Receive no
|org.xml.sax.helpers.DefaultHandler.endPrefixMapping(String)|Receive notificati
|org.xml.sax.helpers.DefaultHandler.error(SAXParseException)|Receive notificati
|org.xml.sax.helpers.DefaultHandler.fatalError(SAXParseException)|Report a fata
|org.xml.sax.helpers.DefaultHandler.ignorableWhitespace(char[],int,int)|Receive
|org.xml.sax.helpers.DefaultHandler.notationDecl(String,String,String)|Receive 
|org.xml.sax.helpers.DefaultHandler.processingInstruction(String,String)|Receiv
|org.xml.sax.helpers.DefaultHandler.resolveEntity(String,String)|Resolve an ext
|org.xml.sax.helpers.DefaultHandler.setDocumentLocator(Locator)|Receive a Locat
|org.xml.sax.helpers.DefaultHandler.skippedEntity(String)|Receive notification 
|org.xml.sax.helpers.DefaultHandler.startDocument()|Receive notification of the
|org.xml.sax.helpers.DefaultHandler.startElement(String,String,String,Attributes)|
|org.xml.sax.helpers.DefaultHandler.startPrefixMapping(String,String)|Receive n
|org.xml.sax.helpers.DefaultHandler.unparsedEntityDecl(String,String,String,String)|
|org.xml.sax.helpers.DefaultHandler.warning(SAXParseException)|Receive notifica

*org.xml.sax.helpers.DefaultHandler_Description*

Default base class for SAX2 event handlers. 

This module, both source code and documentation, is in the Public Domain, and 
comes with NO WARRANTY. See http://www.saxproject.org for further information. 

This class is available as a convenience base class for SAX2 applications: it 
provides default implementations for all of the callbacks in the four core SAX2 
handler classes: 

EntityResolver(|org.xml.sax.EntityResolver|) 
DTDHandler(|org.xml.sax.DTDHandler|) 
ContentHandler(|org.xml.sax.ContentHandler|) 
ErrorHandler(|org.xml.sax.ErrorHandler|) 

Application writers can extend this class when they need to implement only part 
of an interface; parser writers can instantiate this class to provide default 
handlers when the application has not supplied its own. 

This class replaces the deprecated SAX1 HandlerBase(|org.xml.sax.HandlerBase|) 
class. 


*org.xml.sax.helpers.DefaultHandler()*

public DefaultHandler()




*org.xml.sax.helpers.DefaultHandler.characters(char[],int,int)*

public void characters(
  char[] ch,
  int start,
  int length)
  throws |org.xml.sax.SAXException|
         
Receive notification of character data inside an element. 

By default, do nothing. Application writers may override this method to take 
specific actions for each chunk of character data (such as adding the data to a 
node or buffer, or printing it to a file). 

    ch - The characters. 
    start - The start position in the character array. 
    length - The number of characters to use from the character array. 

*org.xml.sax.helpers.DefaultHandler.endDocument()*

public void endDocument()
  throws |org.xml.sax.SAXException|
         
Receive notification of the end of the document. 

By default, do nothing. Application writers may override this method in a 
subclass to take specific actions at the end of a document (such as finalising 
a tree or closing an output file). 


*org.xml.sax.helpers.DefaultHandler.endElement(String,String,String)*

public void endElement(
  java.lang.String uri,
  java.lang.String localName,
  java.lang.String qName)
  throws |org.xml.sax.SAXException|
         
Receive notification of the end of an element. 

By default, do nothing. Application writers may override this method in a 
subclass to take specific actions at the end of each element (such as 
finalising a tree node or writing output to a file). 

    uri - The Namespace URI, or the empty string if the element has no Namespace URI or 
       if Namespace processing is not being performed. 
    localName - The local name (without prefix), or the empty string if Namespace processing is 
       not being performed. 
    qName - The qualified name (with prefix), or the empty string if qualified names are 
       not available. 

*org.xml.sax.helpers.DefaultHandler.endPrefixMapping(String)*

public void endPrefixMapping(java.lang.String prefix)
  throws |org.xml.sax.SAXException|
         
Receive notification of the end of a Namespace mapping. 

By default, do nothing. Application writers may override this method in a 
subclass to take specific actions at the end of each prefix mapping. 

    prefix - The Namespace prefix being declared. 

*org.xml.sax.helpers.DefaultHandler.error(SAXParseException)*

public void error(org.xml.sax.SAXParseException e)
  throws |org.xml.sax.SAXException|
         
Receive notification of a recoverable parser error. 

The default implementation does nothing. Application writers may override this 
method in a subclass to take specific actions for each error, such as inserting 
the message in a log file or printing it to the console. 

    e - The warning information encoded as an exception. 

*org.xml.sax.helpers.DefaultHandler.fatalError(SAXParseException)*

public void fatalError(org.xml.sax.SAXParseException e)
  throws |org.xml.sax.SAXException|
         
Report a fatal XML parsing error. 

The default implementation throws a SAXParseException. Application writers may 
override this method in a subclass if they need to take specific actions for 
each fatal error (such as collecting all of the errors into a single report): 
in any case, the application must stop all regular processing when this method 
is invoked, since the document is no longer reliable, and the parser may no 
longer report parsing events. 

    e - The error information encoded as an exception. 

*org.xml.sax.helpers.DefaultHandler.ignorableWhitespace(char[],int,int)*

public void ignorableWhitespace(
  char[] ch,
  int start,
  int length)
  throws |org.xml.sax.SAXException|
         
Receive notification of ignorable whitespace in element content. 

By default, do nothing. Application writers may override this method to take 
specific actions for each chunk of ignorable whitespace (such as adding data to 
a node or buffer, or printing it to a file). 

    ch - The whitespace characters. 
    start - The start position in the character array. 
    length - The number of characters to use from the character array. 

*org.xml.sax.helpers.DefaultHandler.notationDecl(String,String,String)*

public void notationDecl(
  java.lang.String name,
  java.lang.String publicId,
  java.lang.String systemId)
  throws |org.xml.sax.SAXException|
         
Receive notification of a notation declaration. 

By default, do nothing. Application writers may override this method in a 
subclass if they wish to keep track of the notations declared in a document. 

    name - The notation name. 
    publicId - The notation public identifier, or null if not available. 
    systemId - The notation system identifier. 

*org.xml.sax.helpers.DefaultHandler.processingInstruction(String,String)*

public void processingInstruction(
  java.lang.String target,
  java.lang.String data)
  throws |org.xml.sax.SAXException|
         
Receive notification of a processing instruction. 

By default, do nothing. Application writers may override this method in a 
subclass to take specific actions for each processing instruction, such as 
setting status variables or invoking other methods. 

    target - The processing instruction target. 
    data - The processing instruction data, or null if none is supplied. 

*org.xml.sax.helpers.DefaultHandler.resolveEntity(String,String)*

public |org.xml.sax.InputSource| resolveEntity(
  java.lang.String publicId,
  java.lang.String systemId)
  throws |java.io.IOException|
         |org.xml.sax.SAXException|
         
Resolve an external entity. 

Always return null, so that the parser will use the system identifier provided 
in the XML document. This method implements the SAX default behaviour: 
application writers can override it in a subclass to do special translations 
such as catalog lookups or URI redirection. 

    publicId - The public identifer, or null if none is available. 
    systemId - The system identifier provided in the XML document. 

    Returns: The new input source, or null to require the default behaviour. 
*org.xml.sax.helpers.DefaultHandler.setDocumentLocator(Locator)*

public void setDocumentLocator(org.xml.sax.Locator locator)

Receive a Locator object for document events. 

By default, do nothing. Application writers may override this method in a 
subclass if they wish to store the locator for use with other document events. 

    locator - A locator for all SAX document events. 

*org.xml.sax.helpers.DefaultHandler.skippedEntity(String)*

public void skippedEntity(java.lang.String name)
  throws |org.xml.sax.SAXException|
         
Receive notification of a skipped entity. 

By default, do nothing. Application writers may override this method in a 
subclass to take specific actions for each processing instruction, such as 
setting status variables or invoking other methods. 

    name - The name of the skipped entity. 

*org.xml.sax.helpers.DefaultHandler.startDocument()*

public void startDocument()
  throws |org.xml.sax.SAXException|
         
Receive notification of the beginning of the document. 

By default, do nothing. Application writers may override this method in a 
subclass to take specific actions at the beginning of a document (such as 
allocating the root node of a tree or creating an output file). 


*org.xml.sax.helpers.DefaultHandler.startElement(String,String,String,Attributes)*

public void startElement(
  java.lang.String uri,
  java.lang.String localName,
  java.lang.String qName,
  org.xml.sax.Attributes attributes)
  throws |org.xml.sax.SAXException|
         
Receive notification of the start of an element. 

By default, do nothing. Application writers may override this method in a 
subclass to take specific actions at the start of each element (such as 
allocating a new tree node or writing output to a file). 

    uri - The Namespace URI, or the empty string if the element has no Namespace URI or 
       if Namespace processing is not being performed. 
    localName - The local name (without prefix), or the empty string if Namespace processing is 
       not being performed. 
    qName - The qualified name (with prefix), or the empty string if qualified names are 
       not available. 
    attributes - The attributes attached to the element. If there are no attributes, it shall be 
       an empty Attributes object. 

*org.xml.sax.helpers.DefaultHandler.startPrefixMapping(String,String)*

public void startPrefixMapping(
  java.lang.String prefix,
  java.lang.String uri)
  throws |org.xml.sax.SAXException|
         
Receive notification of the start of a Namespace mapping. 

By default, do nothing. Application writers may override this method in a 
subclass to take specific actions at the start of each Namespace prefix scope 
(such as storing the prefix mapping). 

    prefix - The Namespace prefix being declared. 
    uri - The Namespace URI mapped to the prefix. 

*org.xml.sax.helpers.DefaultHandler.unparsedEntityDecl(String,String,String,String)*

public void unparsedEntityDecl(
  java.lang.String name,
  java.lang.String publicId,
  java.lang.String systemId,
  java.lang.String notationName)
  throws |org.xml.sax.SAXException|
         
Receive notification of an unparsed entity declaration. 

By default, do nothing. Application writers may override this method in a 
subclass to keep track of the unparsed entities declared in a document. 

    name - The entity name. 
    publicId - The entity public identifier, or null if not available. 
    systemId - The entity system identifier. 
    notationName - The name of the associated notation. 

*org.xml.sax.helpers.DefaultHandler.warning(SAXParseException)*

public void warning(org.xml.sax.SAXParseException e)
  throws |org.xml.sax.SAXException|
         
Receive notification of a parser warning. 

The default implementation does nothing. Application writers may override this 
method in a subclass to take specific actions for each warning, such as 
inserting the message in a log file or printing it to the console. 

    e - The warning information encoded as an exception. 



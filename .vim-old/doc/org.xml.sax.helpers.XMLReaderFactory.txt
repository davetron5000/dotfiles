*org.xml.sax.helpers.XMLReaderFactory* *XMLReaderFactory* Factory for creating a

public final class XMLReaderFactory
  extends    |java.lang.Object|

|org.xml.sax.helpers.XMLReaderFactory_Description|
|org.xml.sax.helpers.XMLReaderFactory_Fields|
|org.xml.sax.helpers.XMLReaderFactory_Constructors|
|org.xml.sax.helpers.XMLReaderFactory_Methods|

================================================================================

*org.xml.sax.helpers.XMLReaderFactory_Methods*
|org.xml.sax.helpers.XMLReaderFactory.createXMLReader()|Attempt to create an XM
|org.xml.sax.helpers.XMLReaderFactory.createXMLReader(String)|Attempt to create

*org.xml.sax.helpers.XMLReaderFactory_Description*

Factory for creating an XML reader. 

This module, both source code and documentation, is in the Public Domain, and 
comes with NO WARRANTY. See http://www.saxproject.org for further information. 

This class contains static methods for creating an XML reader from an explicit 
class name, or based on runtime defaults: 



try { XMLReader myReader = XMLReaderFactory.createXMLReader(); } catch 
(SAXException e) { System.err.println(e.getMessage()); } 

Note to Distributions bundled with parsers: You should modify the 
implementation of the no-arguments createXMLReader to handle cases where the 
external configuration mechanisms aren't set up. That method should do its best 
to return a parser when one is in the class path, even when nothing bound its 
class name to org.xml.sax.driver so those configuration mechanisms would see 
it. 


*org.xml.sax.helpers.XMLReaderFactory.createXMLReader()*

public static |org.xml.sax.XMLReader| createXMLReader()
  throws |org.xml.sax.SAXException|
         
Attempt to create an XMLReader from system defaults. In environments which can 
support it, the name of the XMLReader class is determined by trying each these 
options in order, and using the first one which succeeds: 

If the system property org.xml.sax.driver has a value, that is used as an 
XMLReader class name. 

The JAR "Services API" is used to look for a class name in the 
META-INF/services/org.xml.sax.driver file in jarfiles available to the runtime. 

SAX parser distributions are strongly encouraged to provide a default XMLReader 
class name that will take effect only when previous options (on this list) are 
not successful. 

Finally, if (|org.xml.sax.helpers.ParserFactory|) can return a system default 
SAX1 parser, that parser is wrapped in a (|org.xml.sax.helpers.ParserAdapter|) 
. (This is a migration aid for SAX1 environments, where the org.xml.sax.parser 
system property will often be usable.) 



In environments such as small embedded systems, which can not support that 
flexibility, other mechanisms to determine the default may be used. 

Note that many Java environments allow system properties to be initialized on a 
command line. This means that in most cases setting a good value for that 
property ensures that calls to this method will succeed, except when security 
policies intervene. This will also maximize application portability to older 
SAX environments, with less robust implementations of this method. 


    Returns: A new XMLReader. 
*org.xml.sax.helpers.XMLReaderFactory.createXMLReader(String)*

public static |org.xml.sax.XMLReader| createXMLReader(java.lang.String className)
  throws |org.xml.sax.SAXException|
         
Attempt to create an XML reader from a class name. 

Given a class name, this method attempts to load and instantiate the class as 
an XML reader. 

Note that this method will not be usable in environments where the caller 
(perhaps an applet) is not permitted to load classes dynamically. 


    Returns: A new XML reader. 


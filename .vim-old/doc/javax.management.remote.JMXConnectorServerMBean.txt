*javax.management.remote.JMXConnectorServerMBean* *JMXConnectorServerMBean* MBea

public interface interface JMXConnectorServerMBean


|javax.management.remote.JMXConnectorServerMBean_Description|
|javax.management.remote.JMXConnectorServerMBean_Fields|
|javax.management.remote.JMXConnectorServerMBean_Constructors|
|javax.management.remote.JMXConnectorServerMBean_Methods|

================================================================================

*javax.management.remote.JMXConnectorServerMBean_Methods*
|javax.management.remote.JMXConnectorServerMBean.getAddress()|The address of th
|javax.management.remote.JMXConnectorServerMBean.getAttributes()|The attributes
|javax.management.remote.JMXConnectorServerMBean.getConnectionIds()|The list of
|javax.management.remote.JMXConnectorServerMBean.isActive()|Determines whether 
|javax.management.remote.JMXConnectorServerMBean.setMBeanServerForwarder(MBeanServerForwarder)|
|javax.management.remote.JMXConnectorServerMBean.start()|Activates the connecto
|javax.management.remote.JMXConnectorServerMBean.stop()|Deactivates the connect
|javax.management.remote.JMXConnectorServerMBean.toJMXConnector(Map)|Returns a 

*javax.management.remote.JMXConnectorServerMBean_Description*

MBean interface for connector servers. A JMX API connector server is attached 
to an MBean server, and establishes connections to that MBean server for remote 
clients. 

A newly-created connector server is inactive, and does not yet listen for 
connections. Only when its 
start(|javax.management.remote.JMXConnectorServerMBean|) method has been called 
does it start listening for connections. 


*javax.management.remote.JMXConnectorServerMBean.getAddress()*

public |javax.management.remote.JMXServiceURL| getAddress()

The address of this connector server. 


    Returns: the address of this connector server, or null if it does not have one. 
*javax.management.remote.JMXConnectorServerMBean.getAttributes()*

public |java.util.Map| getAttributes()

The attributes for this connector server. 


    Returns: a read-only map containing the attributes for this connector server. Attributes 
             whose values are not serializable are omitted from this map. If 
             there are no serializable attributes, the returned map is empty. 
*javax.management.remote.JMXConnectorServerMBean.getConnectionIds()*

public |java.lang.String| getConnectionIds()

The list of IDs for currently-open connections to this connector server. 


    Returns: a new string array containing the list of IDs. If there are no currently-open 
             connections, this array will be empty. 
*javax.management.remote.JMXConnectorServerMBean.isActive()*

public boolean isActive()

Determines whether the connector server is active. A connector server starts 
being active when its start(|javax.management.remote.JMXConnectorServerMBean|) 
method returns successfully and remains active until either its 
stop(|javax.management.remote.JMXConnectorServerMBean|) method is called or the 
connector server fails. 


    Returns: true if the connector server is active. 
*javax.management.remote.JMXConnectorServerMBean.setMBeanServerForwarder(MBeanServerForwarder)*

public void setMBeanServerForwarder(javax.management.remote.MBeanServerForwarder mbsf)

Adds an object that intercepts requests for the MBean server that arrive 
through this connector server. This object will be supplied as the MBeanServer 
for any new connection created by this connector server. Existing connections 
are unaffected. 

If this connector server is already associated with an MBeanServer object, then 
that object is given to 
mbsf.setMBeanServer(|javax.management.remote.MBeanServerForwarder|) . If doing 
so produces an exception, this method throws the same exception without any 
other effect. 

If this connector is not already associated with an MBeanServer object, or if 
the mbsf.setMBeanServer call just mentioned succeeds, then mbsf becomes this 
connector server's MBeanServer. 

    mbsf - the new MBeanServerForwarder. 

*javax.management.remote.JMXConnectorServerMBean.start()*

public void start()
  throws |java.io.IOException|
         
Activates the connector server, that is, starts listening for client 
connections. Calling this method when the connector server is already active 
has no effect. Calling this method when the connector server has been stopped 
will generate an (|java.io.IOException|) . 


*javax.management.remote.JMXConnectorServerMBean.stop()*

public void stop()
  throws |java.io.IOException|
         
Deactivates the connector server, that is, stops listening for client 
connections. Calling this method will also close all client connections that 
were made by this server. After this method returns, whether normally or with 
an exception, the connector server will not create any new client connections. 

Once a connector server has been stopped, it cannot be started again. 

Calling this method when the connector server has already been stopped has no 
effect. Calling this method when the connector server has not yet been started 
will disable the connector server object permanently. 

If closing a client connection produces an exception, that exception is not 
thrown from this method. A 
(|javax.management.remote.JMXConnectionNotification|) with type 
(|javax.management.remote.JMXConnectionNotification|) is emitted from this 
MBean with the connection ID of the connection that could not be closed. 

Closing a connector server is a potentially slow operation. For example, if a 
client machine with an open connection has crashed, the close operation might 
have to wait for a network protocol timeout. Callers that do not want to block 
in a close operation should do it in a separate thread. 


*javax.management.remote.JMXConnectorServerMBean.toJMXConnector(Map)*

public |javax.management.remote.JMXConnector| toJMXConnector(java.util.Map env)
  throws |java.io.IOException|
         
Returns a client stub for this connector server. A client stub is a 
serializable object whose connect(|javax.management.remote.JMXConnector|) 
method can be used to make one new connection to this connector server. 

A given connector need not support the generation of client stubs. However, the 
connectors specified by the JMX Remote API do (JMXMP Connector and RMI 
Connector). 

    env - client connection parameters of the same sort that can be provided to {@link 
       JMXConnector#connect(Map) JMXConnector.connect(Map)}. Can be null, which 
       is equivalent to an empty map. 

    Returns: a client stub that can be used to make a new connection to this connector 
             server. 


*org.xml.sax.InputSource* *InputSource* A single input source for an XML entity.

public class InputSource
  extends    |java.lang.Object|

|org.xml.sax.InputSource_Description|
|org.xml.sax.InputSource_Fields|
|org.xml.sax.InputSource_Constructors|
|org.xml.sax.InputSource_Methods|

================================================================================

*org.xml.sax.InputSource_Constructors*
|org.xml.sax.InputSource()|Zero-argument default constructor.
|org.xml.sax.InputSource(InputStream)|Create a new input source with a byte str
|org.xml.sax.InputSource(Reader)|Create a new input source with a character str
|org.xml.sax.InputSource(String)|Create a new input source with a system identi

*org.xml.sax.InputSource_Methods*
|org.xml.sax.InputSource.getByteStream()|Get the byte stream for this input sou
|org.xml.sax.InputSource.getCharacterStream()|Get the character stream for this
|org.xml.sax.InputSource.getEncoding()|Get the character encoding for a byte st
|org.xml.sax.InputSource.getPublicId()|Get the public identifier for this input
|org.xml.sax.InputSource.getSystemId()|Get the system identifier for this input
|org.xml.sax.InputSource.setByteStream(InputStream)|Set the byte stream for thi
|org.xml.sax.InputSource.setCharacterStream(Reader)|Set the character stream fo
|org.xml.sax.InputSource.setEncoding(String)|Set the character encoding, if kno
|org.xml.sax.InputSource.setPublicId(String)|Set the public identifier for this
|org.xml.sax.InputSource.setSystemId(String)|Set the system identifier for this

*org.xml.sax.InputSource_Description*

A single input source for an XML entity. 

This module, both source code and documentation, is in the Public Domain, and 
comes with NO WARRANTY. See http://www.saxproject.org for further information. 

This class allows a SAX application to encapsulate information about an input 
source in a single object, which may include a public identifier, a system 
identifier, a byte stream (possibly with a specified encoding), and/or a 
character stream. 

There are two places that the application can deliver an input source to the 
parser: as the argument to the Parser.parse method, or as the return value of 
the EntityResolver.resolveEntity method. 

The SAX parser will use the InputSource object to determine how to read XML 
input. If there is a character stream available, the parser will read that 
stream directly, disregarding any text encoding declaration found in that 
stream. If there is no character stream, but there is a byte stream, the parser 
will use that byte stream, using the encoding specified in the InputSource or 
else (if no encoding is specified) autodetecting the character encoding using 
an algorithm such as the one in the XML specification. If neither a character 
stream nor a byte stream is available, the parser will attempt to open a URI 
connection to the resource identified by the system identifier. 

An InputSource object belongs to the application: the SAX parser shall never 
modify it in any way (it may modify a copy if necessary). However, standard 
processing of both byte and character streams is to close them on as part of 
end-of-parse cleanup, so applications should not attempt to re-use such streams 
after they have been handed to a parser. 


*org.xml.sax.InputSource()*

public InputSource()

Zero-argument default constructor. 


*org.xml.sax.InputSource(InputStream)*

public InputSource(java.io.InputStream byteStream)

Create a new input source with a byte stream. 

Application writers should use setSystemId() to provide a base for resolving 
relative URIs, may use setPublicId to include a public identifier, and may use 
setEncoding to specify the object's character encoding. 

    byteStream - The raw byte stream containing the document. 

*org.xml.sax.InputSource(Reader)*

public InputSource(java.io.Reader characterStream)

Create a new input source with a character stream. 

Application writers should use setSystemId() to provide a base for resolving 
relative URIs, and may use setPublicId to include a public identifier. 

The character stream shall not include a byte order mark. 


*org.xml.sax.InputSource(String)*

public InputSource(java.lang.String systemId)

Create a new input source with a system identifier. 

Applications may use setPublicId to include a public identifier as well, or 
setEncoding to specify the character encoding, if known. 

If the system identifier is a URL, it must be fully resolved (it may not be a 
relative URL). 

    systemId - The system identifier (URI). 

*org.xml.sax.InputSource.getByteStream()*

public |java.io.InputStream| getByteStream()

Get the byte stream for this input source. 

The getEncoding method will return the character encoding for this byte stream, 
or null if unknown. 


    Returns: The byte stream, or null if none was supplied. 
*org.xml.sax.InputSource.getCharacterStream()*

public |java.io.Reader| getCharacterStream()

Get the character stream for this input source. 


    Returns: The character stream, or null if none was supplied. 
*org.xml.sax.InputSource.getEncoding()*

public |java.lang.String| getEncoding()

Get the character encoding for a byte stream or URI. This value will be ignored 
when the application provides a character stream. 


    Returns: The encoding, or null if none was supplied. 
*org.xml.sax.InputSource.getPublicId()*

public |java.lang.String| getPublicId()

Get the public identifier for this input source. 


    Returns: The public identifier, or null if none was supplied. 
*org.xml.sax.InputSource.getSystemId()*

public |java.lang.String| getSystemId()

Get the system identifier for this input source. 

The getEncoding method will return the character encoding of the object pointed 
to, or null if unknown. 

If the system ID is a URL, it will be fully resolved. 


    Returns: The system identifier, or null if none was supplied. 
*org.xml.sax.InputSource.setByteStream(InputStream)*

public void setByteStream(java.io.InputStream byteStream)

Set the byte stream for this input source. 

The SAX parser will ignore this if there is also a character stream specified, 
but it will use a byte stream in preference to opening a URI connection itself. 

If the application knows the character encoding of the byte stream, it should 
set it with the setEncoding method. 

    byteStream - A byte stream containing an XML document or other entity. 

*org.xml.sax.InputSource.setCharacterStream(Reader)*

public void setCharacterStream(java.io.Reader characterStream)

Set the character stream for this input source. 

If there is a character stream specified, the SAX parser will ignore any byte 
stream and will not attempt to open a URI connection to the system identifier. 

    characterStream - The character stream containing the XML document or other entity. 

*org.xml.sax.InputSource.setEncoding(String)*

public void setEncoding(java.lang.String encoding)

Set the character encoding, if known. 

The encoding must be a string acceptable for an XML encoding declaration (see 
section 4.3.3 of the XML 1.0 recommendation). 

This method has no effect when the application provides a character stream. 

    encoding - A string describing the character encoding. 

*org.xml.sax.InputSource.setPublicId(String)*

public void setPublicId(java.lang.String publicId)

Set the public identifier for this input source. 

The public identifier is always optional: if the application writer includes 
one, it will be provided as part of the location information. 

    publicId - The public identifier as a string. 

*org.xml.sax.InputSource.setSystemId(String)*

public void setSystemId(java.lang.String systemId)

Set the system identifier for this input source. 

The system identifier is optional if there is a byte stream or a character 
stream, but it is still useful to provide one, since the application can use it 
to resolve relative URIs and can include it in error messages and warnings (the 
parser will attempt to open a connection to the URI only if there is no byte 
stream or character stream specified). 

If the application knows the character encoding of the object pointed to by the 
system identifier, it can register the encoding using the setEncoding method. 

If the system identifier is a URL, it must be fully resolved (it may not be a 
relative URL). 

    systemId - The system identifier as a string. 



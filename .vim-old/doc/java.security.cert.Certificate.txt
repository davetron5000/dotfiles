*java.security.cert.Certificate* *Certificate* Abstract class for managing a variety of identity certificates.

public abstract class Certificate
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.security.cert.Certificate_Description|
|java.security.cert.Certificate_Fields|
|java.security.cert.Certificate_Constructors|
|java.security.cert.Certificate_Methods|

====================================================================================================================================================================================

*java.security.cert.Certificate_Constructors*
|java.security.cert.Certificate(String)|Creates a certificate of the specified type.

*java.security.cert.Certificate_Methods*
|java.security.cert.Certificate.equals(Object)|Compares this certificate for equality with the specified  object.
|java.security.cert.Certificate.getEncoded()|Returns the encoded form of this certificate.
|java.security.cert.Certificate.getPublicKey()|Gets the public key from this certificate.
|java.security.cert.Certificate.getType()|Returns the type of this certificate.
|java.security.cert.Certificate.hashCode()|Returns a hashcode value for this certificate from its  encoded form.
|java.security.cert.Certificate.toString()|Returns a string representation of this certificate.
|java.security.cert.Certificate.verify(PublicKey)|Verifies that this certificate was signed using the  private key that corresponds to the specified public key.
|java.security.cert.Certificate.verify(PublicKey,String)|Verifies that this certificate was signed using the  private key that corresponds to the specified public key.
|java.security.cert.Certificate.writeReplace()|Replace the Certificate to be serialized.

*java.security.cert.Certificate_Description*

Abstract class for managing a variety of identity certificates. An identity certificate is a binding of a principal to a public key which is vouched for by another principal. (A 
principal represents an entity such as an individual user, a group, or a corporation.) 

This class is an abstraction for certificates that have different formats but important common uses. For example, different types of certificates, such as X.509 and PGP, share 
general certificate functionality (like encoding and verifying) and some types of information (like a public key). 

X.509, PGP, and SDSI certificates can all be implemented by subclassing the Certificate class, even though they contain different sets of information, and they store and retrieve 
the information in different ways. 



*java.security.cert.Certificate(String)*

protected Certificate(java.lang.String type)

Creates a certificate of the specified type. 

    type - the standard name of the certificate type. See Appendix A in the Java Cryptography Architecture API Specification and Reference for information about standard certificate types. 

*java.security.cert.Certificate.equals(Object)*

public boolean equals(java.lang.Object other)

Compares this certificate for equality with the specified object. If the other object is an instanceof Certificate, then its encoded form is retrieved and compared with the 
encoded form of this certificate. 


    other - the object to test for equality with this certificate. 

    Returns: true iff the encoded forms of the two certificates match, false otherwise. 

*java.security.cert.Certificate.getEncoded()*

public abstract byte[] getEncoded()
  throws |java.security.cert.CertificateEncodingException|
         
Returns the encoded form of this certificate. It is assumed that each certificate type would have only a single form of encoding; for example, X.509 certificates would be encoded 
as ASN.1 DER. 



    Returns: the encoded form of this certificate 

*java.security.cert.Certificate.getPublicKey()*

public abstract |java.security.PublicKey| getPublicKey()

Gets the public key from this certificate. 



    Returns: the public key. 

*java.security.cert.Certificate.getType()*

public final |java.lang.String| getType()

Returns the type of this certificate. 



    Returns: the type of this certificate. 

*java.security.cert.Certificate.hashCode()*

public int hashCode()

Returns a hashcode value for this certificate from its encoded form. 



    Returns: the hashcode value. 

*java.security.cert.Certificate.toString()*

public abstract |java.lang.String| toString()

Returns a string representation of this certificate. 



    Returns: a string representation of this certificate. 

*java.security.cert.Certificate.verify(PublicKey)*

public abstract void verify(java.security.PublicKey key)
  throws |java.security.cert.CertificateException|
         |java.security.InvalidKeyException|
         |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         |java.security.SignatureException|
         
Verifies that this certificate was signed using the private key that corresponds to the specified public key. 


    key - the PublicKey used to carry out the verification. 

*java.security.cert.Certificate.verify(PublicKey,String)*

public abstract void verify(
  java.security.PublicKey key,
  java.lang.String sigProvider)
  throws |java.security.cert.CertificateException|
         |java.security.InvalidKeyException|
         |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         |java.security.SignatureException|
         
Verifies that this certificate was signed using the private key that corresponds to the specified public key. This method uses the signature verification engine supplied by the 
specified provider. 


    key - the PublicKey used to carry out the verification. 
    sigProvider - the name of the signature provider. 

*java.security.cert.Certificate.writeReplace()*

protected |java.lang.Object| writeReplace()
  throws |java.io.ObjectStreamException|
         
Replace the Certificate to be serialized. 



    Returns: the alternate Certificate object to be serialized 



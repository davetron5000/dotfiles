*javax.management.loading.ClassLoaderRepository* *ClassLoaderRepository* Instanc

public interface interface ClassLoaderRepository


|javax.management.loading.ClassLoaderRepository_Description|
|javax.management.loading.ClassLoaderRepository_Fields|
|javax.management.loading.ClassLoaderRepository_Constructors|
|javax.management.loading.ClassLoaderRepository_Methods|

================================================================================

*javax.management.loading.ClassLoaderRepository_Methods*
|javax.management.loading.ClassLoaderRepository.loadClass(String)|Load the give
|javax.management.loading.ClassLoaderRepository.loadClassBefore(ClassLoader,String)|
|javax.management.loading.ClassLoaderRepository.loadClassWithout(ClassLoader,String)|

*javax.management.loading.ClassLoaderRepository_Description*

Instances of this interface are used to keep the list of ClassLoaders 
registered in an MBean Server. They provide the necessary methods to load 
classes using the registered ClassLoaders. 

The first ClassLoader in a ClassLoaderRepository is always the MBean Server's 
own ClassLoader. 

When an MBean is registered in an MBean Server, if it is of a subclass of 
(|java.lang.ClassLoader|) and if it does not implement the interface 
(|javax.management.loading.PrivateClassLoader|) , it is added to the end of the 
MBean Server's ClassLoaderRepository. If it is subsequently unregistered from 
the MBean Server, it is removed from the ClassLoaderRepository. 

The order of MBeans in the ClassLoaderRepository is significant. For any two 
MBeans X and Y in the ClassLoaderRepository, X must appear before Y if the 
registration of X was completed before the registration of Y started. If X and 
Y were registered concurrently, their order is indeterminate. The registration 
of an MBean corresponds to the call to (|javax.management.MBeanServer|) or one 
of the (|javax.management.MBeanServer|) .createMBean methods. 


*javax.management.loading.ClassLoaderRepository.loadClass(String)*

public |java.lang.Class| loadClass(java.lang.String className)
  throws |java.lang.ClassNotFoundException|
         
Load the given class name through the list of class loaders. Each ClassLoader 
in turn from the ClassLoaderRepository is asked to load the class via its 
(|java.lang.ClassLoader|) method. If it successfully returns a 
(|java.lang.Class|) object, that is the result of this method. If it throws a 
(|java.lang.ClassNotFoundException|) , the search continues with the next 
ClassLoader. If it throws another exception, the exception is propagated from 
this method. If the end of the list is reached, a 
(|java.lang.ClassNotFoundException|) is thrown. 

    className - The name of the class to be loaded. 

    Returns: the loaded class. 
*javax.management.loading.ClassLoaderRepository.loadClassBefore(ClassLoader,String)*

public |java.lang.Class| loadClassBefore(
  java.lang.ClassLoader stop,
  java.lang.String className)
  throws |java.lang.ClassNotFoundException|
         
Load the given class name through the list of class loaders, stopping at the 
given one. Each ClassLoader in turn from the ClassLoaderRepository is asked to 
load the class via its (|java.lang.ClassLoader|) method. If it successfully 
returns a (|java.lang.Class|) object, that is the result of this method. If it 
throws a (|java.lang.ClassNotFoundException|) , the search continues with the 
next ClassLoader. If it throws another exception, the exception is propagated 
from this method. If the search reaches stop or the end of the list, a 
(|java.lang.ClassNotFoundException|) is thrown. 

Typically this method is called from the loadClass(|java.lang.ClassLoader|) 
method of stop, to consult loaders that appear before it in the 
ClassLoaderRepository. By stopping the search as soon as stop is reached, a 
potential deadlock with concurrent class loading is avoided. 

    className - The name of the class to be loaded. 
    stop - The class loader at which to stop. May be null, in which case this method is 
       equivalent to {@link #loadClass(String) loadClass(className)}. 

    Returns: the loaded class. 
*javax.management.loading.ClassLoaderRepository.loadClassWithout(ClassLoader,String)*

public |java.lang.Class| loadClassWithout(
  java.lang.ClassLoader exclude,
  java.lang.String className)
  throws |java.lang.ClassNotFoundException|
         
Load the given class name through the list of class loaders, excluding the 
given one. Each ClassLoader in turn from the ClassLoaderRepository, except 
exclude, is asked to load the class via its (|java.lang.ClassLoader|) method. 
If it successfully returns a (|java.lang.Class|) object, that is the result of 
this method. If it throws a (|java.lang.ClassNotFoundException|) , the search 
continues with the next ClassLoader. If it throws another exception, the 
exception is propagated from this method. If the end of the list is reached, a 
(|java.lang.ClassNotFoundException|) is thrown. 

Be aware that if a ClassLoader in the ClassLoaderRepository calls this method 
from its loadClass(|java.lang.ClassLoader|) method, it exposes itself to a 
deadlock if another ClassLoader in the ClassLoaderRepository does the same 
thing at the same time. The (|javax.management.loading.ClassLoaderRepository|) 
method is recommended to avoid the risk of deadlock. 

    className - The name of the class to be loaded. 
    exclude - The class loader to be excluded. May be null, in which case this method is 
       equivalent to {@link #loadClass loadClass(className)}. 

    Returns: the loaded class. 


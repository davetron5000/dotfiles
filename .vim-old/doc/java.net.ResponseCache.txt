*java.net.ResponseCache* *ResponseCache* Represents implementations of URLConnection caches.

public abstract class ResponseCache
  extends    |java.lang.Object|

|java.net.ResponseCache_Description|
|java.net.ResponseCache_Fields|
|java.net.ResponseCache_Constructors|
|java.net.ResponseCache_Methods|

====================================================================================================================================================================================

*java.net.ResponseCache_Constructors*
|java.net.ResponseCache()|

*java.net.ResponseCache_Methods*
|java.net.ResponseCache.get(URI,String,Map<String,List<String>>)|Retrieve the cached response based on the requesting uri,  request method and request headers.
|java.net.ResponseCache.getDefault()|Gets the system-wide response cache.
|java.net.ResponseCache.put(URI,URLConnection)|The protocol handler calls this method after a resource has  been retrieved, and the ResponseCache must decide whether or  not to st
|java.net.ResponseCache.setDefault(ResponseCache)|Sets (or unsets) the system-wide cache.

*java.net.ResponseCache_Description*

Represents implementations of URLConnection caches. An instance of such a class can be registered with the system by doing ResponseCache.setDefault(ResponseCache), and the system 
will call this object in order to: 

store resource data which has been retrieved from an external source into the cache try to fetch a requested resource that may have been stored in the cache 

The ResponseCache implementation decides which resources should be cached, and for how long they should be cached. If a request resource cannot be retrieved from the cache, then 
the protocol handlers will fetch the resource from its original location. 

The settings for URLConnection#useCaches controls whether the protocol is allowed to use a cached response. 

For more information on HTTP caching, see RFC2616: Hypertext Transfer Protocol -- HTTP/1.1 



*java.net.ResponseCache()*

public ResponseCache()




*java.net.ResponseCache.get(URI,String,Map<String,List<String>>)*

public abstract |java.net.CacheResponse| get(
  java.net.URI uri,
  java.lang.String rqstMethod,
  java.util.Map<java.lang.String, java.util.List<java.lang.String>> rqstHeaders)
  throws |java.io.IOException|
         
Retrieve the cached response based on the requesting uri, request method and request headers. Typically this method is called by the protocol handler before it sends out the 
request to get the network resource. If a cached response is returned, that resource is used instead. 


    uri - a URI used to reference the requested network resource 
    rqstMethod - a String representing the request method 
    rqstHeaders - - a Map from request header field names to lists of field values representing the current request headers 

    Returns: a CacheResponse instance if available from cache, or null otherwise 

*java.net.ResponseCache.getDefault()*

public static synchronized |java.net.ResponseCache| getDefault()

Gets the system-wide response cache. 



    Returns: the system-wide ResponseCache 

*java.net.ResponseCache.put(URI,URLConnection)*

public abstract |java.net.CacheRequest| put(
  java.net.URI uri,
  java.net.URLConnection conn)
  throws |java.io.IOException|
         
The protocol handler calls this method after a resource has been retrieved, and the ResponseCache must decide whether or not to store the resource in its cache. If the resource is 
to be cached, then put() must return a CacheRequest object which contains a WriteableByteChannel that the protocol handler will use to write the resource into the cache. If the 
resource is not to be cached, then put must return null. 


    uri - a URI used to reference the requested network resource 
    conn - - a URLConnection instance that is used to fetch the response to be cached 

    Returns: a CacheRequest for recording the response to be cached. Null return indicates that the caller does not intend to cache the response. 

*java.net.ResponseCache.setDefault(ResponseCache)*

public static synchronized void setDefault(java.net.ResponseCache responseCache)

Sets (or unsets) the system-wide cache. 

Note: non-standard procotol handlers may ignore this setting. 


    responseCache - The response cache, or null to unset the cache. 



*java.awt.Rectangle* *Rectangle* A Rectangle specifies an area in a coordinate space that is 
 enclosed by the Rectangle object's top-left point 
 (x,y) 
 in the coordinate space, 

public class Rectangle
  extends    |java.awt.geom.Rectangle2D|
  implements |java.awt.Shape|
             |java.io.Serializable|

|java.awt.Rectangle_Description|
|java.awt.Rectangle_Fields|
|java.awt.Rectangle_Constructors|
|java.awt.Rectangle_Methods|

====================================================================================================================================================================================

*java.awt.Rectangle_Fields*
|int_java.awt.Rectangle.height|
|int_java.awt.Rectangle.width|
|int_java.awt.Rectangle.x|
|int_java.awt.Rectangle.y|

*java.awt.Rectangle_Constructors*
|java.awt.Rectangle()|Constructs a new Rectangle whose top-left corner   is at (0,0) in the coordinate space, and whose width and   height are both zero.
|java.awt.Rectangle(Dimension)|Constructs a new Rectangle whose top left corner is    (0,0) and whose width and height are specified    by the Dimension argument.
|java.awt.Rectangle(int,int)|Constructs a new Rectangle whose top-left corner   is at (0,0) in the coordinate space, and whose width and   height are specified by the arguments of
|java.awt.Rectangle(int,int,int,int)|Constructs a new Rectangle whose top-left corner is   specified as  (x,y) and whose width and height   are specified by the arguments of the s
|java.awt.Rectangle(Point)|Constructs a new Rectangle whose top-left corner is the    specified Point, and whose width and height are both zero.
|java.awt.Rectangle(Point,Dimension)|Constructs a new Rectangle whose top-left corner is   specified by thePointargument, and  whose width and height are specified by theDimension
|java.awt.Rectangle(Rectangle)|Constructs a new Rectangle, initialized to match   the values of the specified Rectangle.

*java.awt.Rectangle_Methods*
|java.awt.Rectangle.add(int,int)|Adds a point, specified by the integer arguments newx  and newy, to this Rectangle.
|java.awt.Rectangle.add(Point)|Adds the specified Point to this   Rectangle.
|java.awt.Rectangle.add(Rectangle)|Adds a Rectangle to this Rectangle.
|java.awt.Rectangle.contains(int,int)|Checks whether or not this Rectangle contains the   point at the specified location  (x,y).
|java.awt.Rectangle.contains(int,int,int,int)|Checks whether this Rectangle entirely contains   the Rectangle  at the specified location (X,Y) with the  specified dimensions (W,H)
|java.awt.Rectangle.contains(Point)|Checks whether or not this Rectangle contains the   specified Point.
|java.awt.Rectangle.contains(Rectangle)|Checks whether or not this Rectangle entirely contains   the specified Rectangle.
|java.awt.Rectangle.createIntersection(Rectangle2D)|Returns a newRectangle2Dobject  representing the intersection of this Rectangle with the   specified Rectangle2D.
|java.awt.Rectangle.createUnion(Rectangle2D)|Returns a new Rectangle2D object representing the  union of this Rectangle with the specified   Rectangle2D.
|java.awt.Rectangle.equals(Object)|Checks whether two rectangles are equal.
|java.awt.Rectangle.getBounds()|Gets the bounding Rectangle of this Rectangle.
|java.awt.Rectangle.getBounds2D()|Return the high precision bounding box of this rectangle.
|java.awt.Rectangle.getHeight()|Returns the height of the bounding Rectangle in   double precision.
|java.awt.Rectangle.getLocation()|Returns the location of this Rectangle.
|java.awt.Rectangle.getSize()|Gets the size of this Rectangle, represented by   the returned Dimension.
|java.awt.Rectangle.getWidth()|Returns the width of the bounding Rectangle in   double precision.
|java.awt.Rectangle.getX()|Returns the X coordinate of the bounding Rectangle in   double precision.
|java.awt.Rectangle.getY()|Returns the Y coordinate of the bounding Rectangle in   double precision.
|java.awt.Rectangle.grow(int,int)|Resizes the Rectangle both horizontally and vertically.
|java.awt.Rectangle.inside(int,int)|Checks whether or not this Rectangle contains the   point at the specified location  (X,Y).
|java.awt.Rectangle.intersection(Rectangle)|Computes the intersection of this Rectangle with the   specified Rectangle.
|java.awt.Rectangle.intersects(Rectangle)|Determines whether or not this Rectangle and the specified   Rectangle intersect.
|java.awt.Rectangle.isEmpty()|Determines whether or not this Rectangle is empty.
|java.awt.Rectangle.move(int,int)|Moves this Rectangle to the specified location.
|java.awt.Rectangle.outcode(double,double)|Determines where the specified coordinates lie with respect  to this Rectangle.
|java.awt.Rectangle.reshape(int,int,int,int)|Sets the bounding Rectangle of this   Rectangle to the specified   x, y, width,   and height.
|java.awt.Rectangle.resize(int,int)|Sets the size of this Rectangle to the specified   width and height.
|java.awt.Rectangle.setBounds(int,int,int,int)|Sets the bounding Rectangle of this   Rectangle to the specified   x, y, width,   and height.
|java.awt.Rectangle.setBounds(Rectangle)|Sets the bounding Rectangle of this Rectangle   to match the specified Rectangle.
|java.awt.Rectangle.setLocation(int,int)|Moves this Rectangle to the specified location.
|java.awt.Rectangle.setLocation(Point)|Moves this Rectangle to the specified location.
|java.awt.Rectangle.setRect(double,double,double,double)|Sets the bounds of this Rectangle to the specified   x, y, width,   and height.
|java.awt.Rectangle.setSize(Dimension)|Sets the size of this Rectangle to match the   specified Dimension.
|java.awt.Rectangle.setSize(int,int)|Sets the size of this Rectangle to the specified   width and height.
|java.awt.Rectangle.toString()|Returns a String representing this   Rectangle and its values.
|java.awt.Rectangle.translate(int,int)|Translates this Rectangle the indicated distance,  to the right along the x coordinate axis, and   downward along the y coordinate axis.
|java.awt.Rectangle.union(Rectangle)|Computes the union of this Rectangle with the   specified Rectangle.

*java.awt.Rectangle_Description*

A Rectangle specifies an area in a coordinate space that is enclosed by the Rectangle object's top-left point (x,y) in the coordinate space, its width, and its height. 

A Rectangle object's width and height are public fields. The constructors that create a Rectangle, and the methods that can modify one, do not prevent setting a negative value for 
width or height. 

A Rectangle whose width or height is negative is considered empty. If the Rectangle is empty, then the isEmpty method returns true. No point can be contained by or inside an empty 
Rectangle. The values of width and height, however, are still valid. An empty Rectangle still has a location in the coordinate space, and methods that change its size or location 
remain valid. The behavior of methods that operate on more than one Rectangle is undefined if any of the participating Rectangle objects has a negative width or height. These 
methods include intersects, intersection, and union. 



*int_java.awt.Rectangle.height*

The height of the Rectangle. 


*int_java.awt.Rectangle.width*

The width of the Rectangle. 


*int_java.awt.Rectangle.x*

The x coordinate of the Rectangle. 


*int_java.awt.Rectangle.y*

The y coordinate of the Rectangle. 



*java.awt.Rectangle()*

public Rectangle()

Constructs a new Rectangle whose top-left corner is at (0,0) in the coordinate space, and whose width and height are both zero. 


*java.awt.Rectangle(Dimension)*

public Rectangle(java.awt.Dimension d)

Constructs a new Rectangle whose top left corner is (0,0) and whose width and height are specified by the Dimension argument. 

    d - a Dimension, specifying width and height 

*java.awt.Rectangle(int,int)*

public Rectangle(
  int width,
  int height)

Constructs a new Rectangle whose top-left corner is at (0,0) in the coordinate space, and whose width and height are specified by the arguments of the same name. 

    width - the width of the Rectangle 
    height - the height of the Rectangle 

*java.awt.Rectangle(int,int,int,int)*

public Rectangle(
  int x,
  int y,
  int width,
  int height)

Constructs a new Rectangle whose top-left corner is specified as (x,y) and whose width and height are specified by the arguments of the same name. 

    x - the specified x coordinate 
    y - the specified y coordinate 
    width - the width of the Rectangle 
    height - the height of the Rectangle 

*java.awt.Rectangle(Point)*

public Rectangle(java.awt.Point p)

Constructs a new Rectangle whose top-left corner is the specified Point, and whose width and height are both zero. 

    p - a Point that is the top left corner of the Rectangle 

*java.awt.Rectangle(Point,Dimension)*

public Rectangle(
  java.awt.Point p,
  java.awt.Dimension d)

Constructs a new Rectangle whose top-left corner is specified by the (|java.awt.Point|) argument, and whose width and height are specified by the (|java.awt.Dimension|) argument. 

    p - a Point that is the top-left corner of the Rectangle 
    d - a Dimension, representing the width and height of the Rectangle 

*java.awt.Rectangle(Rectangle)*

public Rectangle(java.awt.Rectangle r)

Constructs a new Rectangle, initialized to match the values of the specified Rectangle. 

    r - the Rectangle from which to copy initial values to a newly constructed Rectangle 

*java.awt.Rectangle.add(int,int)*

public void add(
  int newx,
  int newy)

Adds a point, specified by the integer arguments newx and newy, to this Rectangle. The resulting Rectangle is the smallest Rectangle that contains both the original Rectangle and 
the specified point. 

After adding a point, a call to contains with the added point as an argument does not necessarily return true. The contains method does not return true for points on the right or 
bottom edges of a Rectangle. Therefore, if the added point falls on the right or bottom edge of the enlarged Rectangle, contains returns false for that point. 


    newx - the x coordinate of the new point 
    newy - the y coordinate of the new point 

*java.awt.Rectangle.add(Point)*

public void add(java.awt.Point pt)

Adds the specified Point to this Rectangle. The resulting Rectangle is the smallest Rectangle that contains both the original Rectangle and the specified Point. 

After adding a Point, a call to contains with the added Point as an argument does not necessarily return true. The contains method does not return true for points on the right or 
bottom edges of a Rectangle. Therefore if the added Point falls on the right or bottom edge of the enlarged Rectangle, contains returns false for that Point. 


    pt - the new Point to add to this Rectangle 

*java.awt.Rectangle.add(Rectangle)*

public void add(java.awt.Rectangle r)

Adds a Rectangle to this Rectangle. The resulting Rectangle is the union of the two rectangles. 


    r - the specified Rectangle 

*java.awt.Rectangle.contains(int,int)*

public boolean contains(
  int x,
  int y)

Checks whether or not this Rectangle contains the point at the specified location (x,y). 


    x - the specified x coordinate 
    y - the specified y coordinate 

    Returns: true if the point (x,y) is inside this Rectangle; false otherwise. 

*java.awt.Rectangle.contains(int,int,int,int)*

public boolean contains(
  int X,
  int Y,
  int W,
  int H)

Checks whether this Rectangle entirely contains the Rectangle at the specified location (X,Y) with the specified dimensions (W,H). 


    X - the specified x coordinate 
    Y - the specified y coordinate 
    W - the width of the Rectangle 
    H - the height of the Rectangle 

    Returns: true if the Rectangle specified by (X,Y,W,H) is entirely enclosed inside this Rectangle; false otherwise. 

*java.awt.Rectangle.contains(Point)*

public boolean contains(java.awt.Point p)

Checks whether or not this Rectangle contains the specified Point. 


    p - the Point to test 

    Returns: true if the Point (x,y) is inside this Rectangle; false otherwise. 

*java.awt.Rectangle.contains(Rectangle)*

public boolean contains(java.awt.Rectangle r)

Checks whether or not this Rectangle entirely contains the specified Rectangle. 


    r - the specified Rectangle 

    Returns: true if the Rectangle is contained entirely inside this Rectangle; false otherwise 

*java.awt.Rectangle.createIntersection(Rectangle2D)*

public |java.awt.geom.Rectangle2D| createIntersection(java.awt.geom.Rectangle2D r)

Returns a new (|java.awt.geom.Rectangle2D|) object representing the intersection of this Rectangle with the specified Rectangle2D. 


    r - the Rectangle2D to be intersected with this Rectangle 

    Returns: the largest Rectangle2D contained in both the specified Rectangle2D and in this Rectangle. 

*java.awt.Rectangle.createUnion(Rectangle2D)*

public |java.awt.geom.Rectangle2D| createUnion(java.awt.geom.Rectangle2D r)

Returns a new Rectangle2D object representing the union of this Rectangle with the specified Rectangle2D. 


    r - the Rectangle2D to be combined with this Rectangle 

    Returns: the smallest Rectangle2D containing both the specified Rectangle2D and this Rectangle. 

*java.awt.Rectangle.equals(Object)*

public boolean equals(java.lang.Object obj)

Checks whether two rectangles are equal. 

The result is true if and only if the argument is not null and is a Rectangle object that has the same top-left corner, width, and height as this Rectangle. 


    obj - the Object to compare with this Rectangle 

    Returns: true if the objects are equal; false otherwise. 

*java.awt.Rectangle.getBounds()*

public |java.awt.Rectangle| getBounds()

Gets the bounding Rectangle of this Rectangle. 

This method is included for completeness, to parallel the getBounds method of (|java.awt.Component|) . 



    Returns: a new Rectangle, equal to the bounding Rectangle for this Rectangle. 

*java.awt.Rectangle.getBounds2D()*

public |java.awt.geom.Rectangle2D| getBounds2D()

Return the high precision bounding box of this rectangle. 



*java.awt.Rectangle.getHeight()*

public double getHeight()

Returns the height of the bounding Rectangle in double precision. 



    Returns: the height of the bounding Rectangle. 

*java.awt.Rectangle.getLocation()*

public |java.awt.Point| getLocation()

Returns the location of this Rectangle. 

This method is included for completeness, to parallel the getLocation method of Component. 



    Returns: the Point that is the top-left corner of this Rectangle. 

*java.awt.Rectangle.getSize()*

public |java.awt.Dimension| getSize()

Gets the size of this Rectangle, represented by the returned Dimension. 

This method is included for completeness, to parallel the getSize method of Component. 



    Returns: a Dimension, representing the size of this Rectangle. 

*java.awt.Rectangle.getWidth()*

public double getWidth()

Returns the width of the bounding Rectangle in double precision. 



    Returns: the width of the bounding Rectangle. 

*java.awt.Rectangle.getX()*

public double getX()

Returns the X coordinate of the bounding Rectangle in double precision. 



    Returns: the x coordinate of the bounding Rectangle. 

*java.awt.Rectangle.getY()*

public double getY()

Returns the Y coordinate of the bounding Rectangle in double precision. 



    Returns: the y coordinate of the bounding Rectangle. 

*java.awt.Rectangle.grow(int,int)*

public void grow(
  int h,
  int v)

Resizes the Rectangle both horizontally and vertically. 

This method modifies the Rectangle so that it is h units larger on both the left and right side, and v units larger at both the top and bottom. 

The new Rectangle has (x-h, y-v) as its top-left corner, a width of width+2h, and a height of height+2v. 

If negative values are supplied for h and v, the size of the Rectangle decreases accordingly. The grow method does not check whether the resulting values of width and height are 
non-negative. 


    h - the horizontal expansion 
    v - the vertical expansion 

*java.awt.Rectangle.inside(int,int)*

public boolean inside(
  int X,
  int Y)

Checks whether or not this Rectangle contains the point at the specified location (X,Y). 

    Deprecated: As of JDK version 1.1,
 replaced by <code>contains(int, int)</code>.

    X - the specified x coordinate 
    Y - the specified y coordinate 

    Returns: true if the point (X,Y) is inside this Rectangle; false otherwise. 

*java.awt.Rectangle.intersection(Rectangle)*

public |java.awt.Rectangle| intersection(java.awt.Rectangle r)

Computes the intersection of this Rectangle with the specified Rectangle. Returns a new Rectangle that represents the intersection of the two rectangles. If the two rectangles do 
not intersect, the result will be an empty rectangle. 


    r - the specified Rectangle 

    Returns: the largest Rectangle contained in both the specified Rectangle and in this Rectangle; or if the rectangles do not intersect, an empty rectangle. 

*java.awt.Rectangle.intersects(Rectangle)*

public boolean intersects(java.awt.Rectangle r)

Determines whether or not this Rectangle and the specified Rectangle intersect. Two rectangles intersect if their intersection is nonempty. 


    r - the specified Rectangle 

    Returns: true if the specified Rectangle and this Rectangle intersect; false otherwise. 

*java.awt.Rectangle.isEmpty()*

public boolean isEmpty()

Determines whether or not this Rectangle is empty. A Rectangle is empty if its width or its height is less than or equal to zero. 



    Returns: true if this Rectangle is empty; false otherwise. 

*java.awt.Rectangle.move(int,int)*

public void move(
  int x,
  int y)

Moves this Rectangle to the specified location. 

    Deprecated: As of JDK version 1.1,
 replaced by <code>setLocation(int, int)</code>.

    x - the x coordinate of the new location 
    y - the y coordinate of the new location 

*java.awt.Rectangle.outcode(double,double)*

public int outcode(
  double x,
  double y)

Determines where the specified coordinates lie with respect to this Rectangle. This method computes a binary OR of the appropriate mask values indicating, for each side of this 
Rectangle, whether or not the specified coordinates are on the same side of the edge as the rest of this Rectangle. 


    x - the specified x coordinate 
    y - the specified y coordinate 

    Returns: the logical OR of all appropriate out codes. 

*java.awt.Rectangle.reshape(int,int,int,int)*

public void reshape(
  int x,
  int y,
  int width,
  int height)

Sets the bounding Rectangle of this Rectangle to the specified x, y, width, and height. 

    Deprecated: As of JDK version 1.1,
 replaced by <code>setBounds(int, int, int, int)</code>.

    x - the new x coordinate for the top-left corner of this Rectangle 
    y - the new y coordinate for the top-left corner of this Rectangle 
    width - the new width for this Rectangle 
    height - the new height for this Rectangle 

*java.awt.Rectangle.resize(int,int)*

public void resize(
  int width,
  int height)

Sets the size of this Rectangle to the specified width and height. 

    Deprecated: As of JDK version 1.1,
 replaced by <code>setSize(int, int)</code>.

    width - the new width for this Rectangle 
    height - the new height for this Rectangle 

*java.awt.Rectangle.setBounds(int,int,int,int)*

public void setBounds(
  int x,
  int y,
  int width,
  int height)

Sets the bounding Rectangle of this Rectangle to the specified x, y, width, and height. 

This method is included for completeness, to parallel the setBounds method of Component. 


    x - the new x coordinate for the top-left corner of this Rectangle 
    y - the new y coordinate for the top-left corner of this Rectangle 
    width - the new width for this Rectangle 
    height - the new height for this Rectangle 

*java.awt.Rectangle.setBounds(Rectangle)*

public void setBounds(java.awt.Rectangle r)

Sets the bounding Rectangle of this Rectangle to match the specified Rectangle. 

This method is included for completeness, to parallel the setBounds method of Component. 


    r - the specified Rectangle 

*java.awt.Rectangle.setLocation(int,int)*

public void setLocation(
  int x,
  int y)

Moves this Rectangle to the specified location. 

This method is included for completeness, to parallel the setLocation method of Component. 


    x - the x coordinate of the new location 
    y - the y coordinate of the new location 

*java.awt.Rectangle.setLocation(Point)*

public void setLocation(java.awt.Point p)

Moves this Rectangle to the specified location. 

This method is included for completeness, to parallel the setLocation method of Component. 


    p - the Point specifying the new location for this Rectangle 

*java.awt.Rectangle.setRect(double,double,double,double)*

public void setRect(
  double x,
  double y,
  double width,
  double height)

Sets the bounds of this Rectangle to the specified x, y, width, and height. This method is included for completeness, to parallel the setBounds method of Component. 


    x - the x coordinate of the upper-left corner of the specified rectangle 
    y - the y coordinate of the upper-left corner of the specified rectangle 
    width - the new width for the Dimension object 
    height - the new height for the Dimension object 

*java.awt.Rectangle.setSize(Dimension)*

public void setSize(java.awt.Dimension d)

Sets the size of this Rectangle to match the specified Dimension. 

This method is included for completeness, to parallel the setSize method of Component. 


    d - the new size for the Dimension object 

*java.awt.Rectangle.setSize(int,int)*

public void setSize(
  int width,
  int height)

Sets the size of this Rectangle to the specified width and height. 

This method is included for completeness, to parallel the setSize method of Component. 


    width - the new width for this Rectangle 
    height - the new height for this Rectangle 

*java.awt.Rectangle.toString()*

public |java.lang.String| toString()

Returns a String representing this Rectangle and its values. 



    Returns: a String representing this Rectangle object's coordinate and size values. 

*java.awt.Rectangle.translate(int,int)*

public void translate(
  int x,
  int y)

Translates this Rectangle the indicated distance, to the right along the x coordinate axis, and downward along the y coordinate axis. 


    x - the distance to move this Rectangle along the x axis 
    y - the distance to move this Rectangle along the y axis 

*java.awt.Rectangle.union(Rectangle)*

public |java.awt.Rectangle| union(java.awt.Rectangle r)

Computes the union of this Rectangle with the specified Rectangle. Returns a new Rectangle that represents the union of the two rectangles 


    r - the specified Rectangle 

    Returns: the smallest Rectangle containing both the specified Rectangle and this Rectangle. 



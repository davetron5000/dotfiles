*javax.management.remote.JMXConnectorServerFactory* *JMXConnectorServerFactory* 

public class JMXConnectorServerFactory
  extends    |java.lang.Object|

|javax.management.remote.JMXConnectorServerFactory_Description|
|javax.management.remote.JMXConnectorServerFactory_Fields|
|javax.management.remote.JMXConnectorServerFactory_Constructors|
|javax.management.remote.JMXConnectorServerFactory_Methods|

================================================================================

*javax.management.remote.JMXConnectorServerFactory_Fields*
|java.lang.String_javax.management.remote.JMXConnectorServerFactory.DEFAULT_CLASS_LOADER|
|java.lang.String_javax.management.remote.JMXConnectorServerFactory.DEFAULT_CLASS_LOADER_NAME|
|java.lang.String_javax.management.remote.JMXConnectorServerFactory.PROTOCOL_PROVIDER_CLASS_LOADER|
|java.lang.String_javax.management.remote.JMXConnectorServerFactory.PROTOCOL_PROVIDER_PACKAGES|

*javax.management.remote.JMXConnectorServerFactory_Methods*
|javax.management.remote.JMXConnectorServerFactory.newJMXConnectorServer(JMXServiceURL,Map,MBeanServer)|

*javax.management.remote.JMXConnectorServerFactory_Description*

Factory to create JMX API connector servers. There are no instances of this 
class. 

Each connector server is created by an instance of 
(|javax.management.remote.JMXConnectorServerProvider|) . This instance is found 
as follows. Suppose the given (|javax.management.remote.JMXServiceURL|) looks 
like "service:jmx:protocol:remainder". Then the factory will attempt to find 
the appropriate (|javax.management.remote.JMXConnectorServerProvider|) for 
protocol. Each occurrence of the character + or - in protocol is replaced by . 
or _, respectively. 

A provider package list is searched for as follows: 



If the environment parameter to 
newJMXConnectorServer(|javax.management.remote.JMXConnectorServerFactory|) 
contains the key jmx.remote.protocol.provider.pkgs then the associated value is 
the provider package list. 

Otherwise, if the system property jmx.remote.protocol.provider.pkgs exists, 
then its value is the provider package list. 

Otherwise, there is no provider package list. 



The provider package list is a string that is interpreted as a list of 
non-empty Java package names separated by vertical bars (|). If the string is 
empty, then so is the provider package list. If the provider package list is 
not a String, or if it contains an element that is an empty string, a 
(|javax.management.remote.JMXProviderException|) is thrown. 

If the provider package list exists and is not empty, then for each element pkg 
of the list, the factory will attempt to load the class 

pkg.protocol.ServerProvider 

If the environment parameter to 
newJMXConnectorServer(|javax.management.remote.JMXConnectorServerFactory|) 
contains the key jmx.remote.protocol.provider.class.loader then the associated 
value is the class loader to use to load the provider. If the associated value 
is not an instance of (|java.lang.ClassLoader|) , an 
(|java.lang.IllegalArgumentException|) is thrown. 

If the jmx.remote.protocol.provider.class.loader key is not present in the 
environment parameter, the calling thread's context class loader is used. 

If the attempt to load this class produces a 
(|java.lang.ClassNotFoundException|) , the search for a handler continues with 
the next element of the list. 

Otherwise, a problem with the provider found is signalled by a 
(|javax.management.remote.JMXProviderException|) whose 
<em>cause</em>(|javax.management.remote.JMXProviderException|) indicates the 
underlying exception, as follows: 



if the attempt to load the class produces an exception other than 
ClassNotFoundException, that is the cause; 

if (|java.lang.Class|) for the class produces an exception, that is the cause. 



If no provider is found by the above steps, including the default case where 
there is no provider package list, then the implementation will use its own 
provider for protocol, or it will throw a MalformedURLException if there is 
none. An implementation may choose to find providers by other means. For 
example, it may support the JAR conventions for service providers, where the 
service interface is JMXConnectorServerProvider. 

Every implementation must support the RMI connector protocols, specified with 
the string rmi or iiop. 

Once a provider is found, the result of the newJMXConnectorServer method is the 
result of calling 
newJMXConnectorServer(|javax.management.remote.JMXConnectorServerProvider|) on 
the provider. 

The Map parameter passed to the JMXConnectorServerProvider is a new read-only 
Map that contains all the entries that were in the environment parameter to 
JMXConnectorServerFactory.newJMXConnectorServer(|javax.management.remote.JMXConnectorServerFactory|)
, if there was one. Additionally, if the 
jmx.remote.protocol.provider.class.loader key is not present in the environment 
parameter, it is added to the new read-only Map. The associated value is the 
calling thread's context class loader. 


*java.lang.String_javax.management.remote.JMXConnectorServerFactory.DEFAULT_CLASS_LOADER*

Factory to create JMX API connector servers. There are no instances of this 
class. 

Each connector server is created by an instance of 
(|javax.management.remote.JMXConnectorServerProvider|) . This instance is found 
as follows. Suppose the given (|javax.management.remote.JMXServiceURL|) looks 
like "service:jmx:protocol:remainder". Then the factory will attempt to find 
the appropriate (|javax.management.remote.JMXConnectorServerProvider|) for 
protocol. Each occurrence of the character + or - in protocol is replaced by . 
or _, respectively. 

A provider package list is searched for as follows: 



If the environment parameter to 
newJMXConnectorServer(|javax.management.remote.JMXConnectorServerFactory|) 
contains the key jmx.remote.protocol.provider.pkgs then the associated value is 
the provider package list. 

Otherwise, if the system property jmx.remote.protocol.provider.pkgs exists, 
then its value is the provider package list. 

Otherwise, there is no provider package list. 



The provider package list is a string that is interpreted as a list of 
non-empty Java package names separated by vertical bars (|). If the string is 
empty, then so is the provider package list. If the provider package list is 
not a String, or if it contains an element that is an empty string, a 
(|javax.management.remote.JMXProviderException|) is thrown. 

If the provider package list exists and is not empty, then for each element pkg 
of the list, the factory will attempt to load the class 

pkg.protocol.ServerProvider 

If the environment parameter to 
newJMXConnectorServer(|javax.management.remote.JMXConnectorServerFactory|) 
contains the key jmx.remote.protocol.provider.class.loader then the associated 
value is the class loader to use to load the provider. If the associated value 
is not an instance of (|java.lang.ClassLoader|) , an 
(|java.lang.IllegalArgumentException|) is thrown. 

If the jmx.remote.protocol.provider.class.loader key is not present in the 
environment parameter, the calling thread's context class loader is used. 

If the attempt to load this class produces a 
(|java.lang.ClassNotFoundException|) , the search for a handler continues with 
the next element of the list. 

Otherwise, a problem with the provider found is signalled by a 
(|javax.management.remote.JMXProviderException|) whose 
<em>cause</em>(|javax.management.remote.JMXProviderException|) indicates the 
underlying exception, as follows: 



if the attempt to load the class produces an exception other than 
ClassNotFoundException, that is the cause; 

if (|java.lang.Class|) for the class produces an exception, that is the cause. 



If no provider is found by the above steps, including the default case where 
there is no provider package list, then the implementation will use its own 
provider for protocol, or it will throw a MalformedURLException if there is 
none. An implementation may choose to find providers by other means. For 
example, it may support the JAR conventions for service providers, where the 
service interface is JMXConnectorServerProvider. 

Every implementation must support the RMI connector protocols, specified with 
the string rmi or iiop. 

Once a provider is found, the result of the newJMXConnectorServer method is the 
result of calling 
newJMXConnectorServer(|javax.management.remote.JMXConnectorServerProvider|) on 
the provider. 

The Map parameter passed to the JMXConnectorServerProvider is a new read-only 
Map that contains all the entries that were in the environment parameter to 
JMXConnectorServerFactory.newJMXConnectorServer(|javax.management.remote.JMXConnectorServerFactory|)
, if there was one. Additionally, if the 
jmx.remote.protocol.provider.class.loader key is not present in the environment 
parameter, it is added to the new read-only Map. The associated value is the 
calling thread's context class loader. 


*java.lang.String_javax.management.remote.JMXConnectorServerFactory.DEFAULT_CLASS_LOADER_NAME*

Factory to create JMX API connector servers. There are no instances of this 
class. 

Each connector server is created by an instance of 
(|javax.management.remote.JMXConnectorServerProvider|) . This instance is found 
as follows. Suppose the given (|javax.management.remote.JMXServiceURL|) looks 
like "service:jmx:protocol:remainder". Then the factory will attempt to find 
the appropriate (|javax.management.remote.JMXConnectorServerProvider|) for 
protocol. Each occurrence of the character + or - in protocol is replaced by . 
or _, respectively. 

A provider package list is searched for as follows: 



If the environment parameter to 
newJMXConnectorServer(|javax.management.remote.JMXConnectorServerFactory|) 
contains the key jmx.remote.protocol.provider.pkgs then the associated value is 
the provider package list. 

Otherwise, if the system property jmx.remote.protocol.provider.pkgs exists, 
then its value is the provider package list. 

Otherwise, there is no provider package list. 



The provider package list is a string that is interpreted as a list of 
non-empty Java package names separated by vertical bars (|). If the string is 
empty, then so is the provider package list. If the provider package list is 
not a String, or if it contains an element that is an empty string, a 
(|javax.management.remote.JMXProviderException|) is thrown. 

If the provider package list exists and is not empty, then for each element pkg 
of the list, the factory will attempt to load the class 

pkg.protocol.ServerProvider 

If the environment parameter to 
newJMXConnectorServer(|javax.management.remote.JMXConnectorServerFactory|) 
contains the key jmx.remote.protocol.provider.class.loader then the associated 
value is the class loader to use to load the provider. If the associated value 
is not an instance of (|java.lang.ClassLoader|) , an 
(|java.lang.IllegalArgumentException|) is thrown. 

If the jmx.remote.protocol.provider.class.loader key is not present in the 
environment parameter, the calling thread's context class loader is used. 

If the attempt to load this class produces a 
(|java.lang.ClassNotFoundException|) , the search for a handler continues with 
the next element of the list. 

Otherwise, a problem with the provider found is signalled by a 
(|javax.management.remote.JMXProviderException|) whose 
<em>cause</em>(|javax.management.remote.JMXProviderException|) indicates the 
underlying exception, as follows: 



if the attempt to load the class produces an exception other than 
ClassNotFoundException, that is the cause; 

if (|java.lang.Class|) for the class produces an exception, that is the cause. 



If no provider is found by the above steps, including the default case where 
there is no provider package list, then the implementation will use its own 
provider for protocol, or it will throw a MalformedURLException if there is 
none. An implementation may choose to find providers by other means. For 
example, it may support the JAR conventions for service providers, where the 
service interface is JMXConnectorServerProvider. 

Every implementation must support the RMI connector protocols, specified with 
the string rmi or iiop. 

Once a provider is found, the result of the newJMXConnectorServer method is the 
result of calling 
newJMXConnectorServer(|javax.management.remote.JMXConnectorServerProvider|) on 
the provider. 

The Map parameter passed to the JMXConnectorServerProvider is a new read-only 
Map that contains all the entries that were in the environment parameter to 
JMXConnectorServerFactory.newJMXConnectorServer(|javax.management.remote.JMXConnectorServerFactory|)
, if there was one. Additionally, if the 
jmx.remote.protocol.provider.class.loader key is not present in the environment 
parameter, it is added to the new read-only Map. The associated value is the 
calling thread's context class loader. 


*java.lang.String_javax.management.remote.JMXConnectorServerFactory.PROTOCOL_PROVIDER_CLASS_LOADER*

Factory to create JMX API connector servers. There are no instances of this 
class. 

Each connector server is created by an instance of 
(|javax.management.remote.JMXConnectorServerProvider|) . This instance is found 
as follows. Suppose the given (|javax.management.remote.JMXServiceURL|) looks 
like "service:jmx:protocol:remainder". Then the factory will attempt to find 
the appropriate (|javax.management.remote.JMXConnectorServerProvider|) for 
protocol. Each occurrence of the character + or - in protocol is replaced by . 
or _, respectively. 

A provider package list is searched for as follows: 



If the environment parameter to 
newJMXConnectorServer(|javax.management.remote.JMXConnectorServerFactory|) 
contains the key jmx.remote.protocol.provider.pkgs then the associated value is 
the provider package list. 

Otherwise, if the system property jmx.remote.protocol.provider.pkgs exists, 
then its value is the provider package list. 

Otherwise, there is no provider package list. 



The provider package list is a string that is interpreted as a list of 
non-empty Java package names separated by vertical bars (|). If the string is 
empty, then so is the provider package list. If the provider package list is 
not a String, or if it contains an element that is an empty string, a 
(|javax.management.remote.JMXProviderException|) is thrown. 

If the provider package list exists and is not empty, then for each element pkg 
of the list, the factory will attempt to load the class 

pkg.protocol.ServerProvider 

If the environment parameter to 
newJMXConnectorServer(|javax.management.remote.JMXConnectorServerFactory|) 
contains the key jmx.remote.protocol.provider.class.loader then the associated 
value is the class loader to use to load the provider. If the associated value 
is not an instance of (|java.lang.ClassLoader|) , an 
(|java.lang.IllegalArgumentException|) is thrown. 

If the jmx.remote.protocol.provider.class.loader key is not present in the 
environment parameter, the calling thread's context class loader is used. 

If the attempt to load this class produces a 
(|java.lang.ClassNotFoundException|) , the search for a handler continues with 
the next element of the list. 

Otherwise, a problem with the provider found is signalled by a 
(|javax.management.remote.JMXProviderException|) whose 
<em>cause</em>(|javax.management.remote.JMXProviderException|) indicates the 
underlying exception, as follows: 



if the attempt to load the class produces an exception other than 
ClassNotFoundException, that is the cause; 

if (|java.lang.Class|) for the class produces an exception, that is the cause. 



If no provider is found by the above steps, including the default case where 
there is no provider package list, then the implementation will use its own 
provider for protocol, or it will throw a MalformedURLException if there is 
none. An implementation may choose to find providers by other means. For 
example, it may support the JAR conventions for service providers, where the 
service interface is JMXConnectorServerProvider. 

Every implementation must support the RMI connector protocols, specified with 
the string rmi or iiop. 

Once a provider is found, the result of the newJMXConnectorServer method is the 
result of calling 
newJMXConnectorServer(|javax.management.remote.JMXConnectorServerProvider|) on 
the provider. 

The Map parameter passed to the JMXConnectorServerProvider is a new read-only 
Map that contains all the entries that were in the environment parameter to 
JMXConnectorServerFactory.newJMXConnectorServer(|javax.management.remote.JMXConnectorServerFactory|)
, if there was one. Additionally, if the 
jmx.remote.protocol.provider.class.loader key is not present in the environment 
parameter, it is added to the new read-only Map. The associated value is the 
calling thread's context class loader. 


*java.lang.String_javax.management.remote.JMXConnectorServerFactory.PROTOCOL_PROVIDER_PACKAGES*

Factory to create JMX API connector servers. There are no instances of this 
class. 

Each connector server is created by an instance of 
(|javax.management.remote.JMXConnectorServerProvider|) . This instance is found 
as follows. Suppose the given (|javax.management.remote.JMXServiceURL|) looks 
like "service:jmx:protocol:remainder". Then the factory will attempt to find 
the appropriate (|javax.management.remote.JMXConnectorServerProvider|) for 
protocol. Each occurrence of the character + or - in protocol is replaced by . 
or _, respectively. 

A provider package list is searched for as follows: 



If the environment parameter to 
newJMXConnectorServer(|javax.management.remote.JMXConnectorServerFactory|) 
contains the key jmx.remote.protocol.provider.pkgs then the associated value is 
the provider package list. 

Otherwise, if the system property jmx.remote.protocol.provider.pkgs exists, 
then its value is the provider package list. 

Otherwise, there is no provider package list. 



The provider package list is a string that is interpreted as a list of 
non-empty Java package names separated by vertical bars (|). If the string is 
empty, then so is the provider package list. If the provider package list is 
not a String, or if it contains an element that is an empty string, a 
(|javax.management.remote.JMXProviderException|) is thrown. 

If the provider package list exists and is not empty, then for each element pkg 
of the list, the factory will attempt to load the class 

pkg.protocol.ServerProvider 

If the environment parameter to 
newJMXConnectorServer(|javax.management.remote.JMXConnectorServerFactory|) 
contains the key jmx.remote.protocol.provider.class.loader then the associated 
value is the class loader to use to load the provider. If the associated value 
is not an instance of (|java.lang.ClassLoader|) , an 
(|java.lang.IllegalArgumentException|) is thrown. 

If the jmx.remote.protocol.provider.class.loader key is not present in the 
environment parameter, the calling thread's context class loader is used. 

If the attempt to load this class produces a 
(|java.lang.ClassNotFoundException|) , the search for a handler continues with 
the next element of the list. 

Otherwise, a problem with the provider found is signalled by a 
(|javax.management.remote.JMXProviderException|) whose 
<em>cause</em>(|javax.management.remote.JMXProviderException|) indicates the 
underlying exception, as follows: 



if the attempt to load the class produces an exception other than 
ClassNotFoundException, that is the cause; 

if (|java.lang.Class|) for the class produces an exception, that is the cause. 



If no provider is found by the above steps, including the default case where 
there is no provider package list, then the implementation will use its own 
provider for protocol, or it will throw a MalformedURLException if there is 
none. An implementation may choose to find providers by other means. For 
example, it may support the JAR conventions for service providers, where the 
service interface is JMXConnectorServerProvider. 

Every implementation must support the RMI connector protocols, specified with 
the string rmi or iiop. 

Once a provider is found, the result of the newJMXConnectorServer method is the 
result of calling 
newJMXConnectorServer(|javax.management.remote.JMXConnectorServerProvider|) on 
the provider. 

The Map parameter passed to the JMXConnectorServerProvider is a new read-only 
Map that contains all the entries that were in the environment parameter to 
JMXConnectorServerFactory.newJMXConnectorServer(|javax.management.remote.JMXConnectorServerFactory|)
, if there was one. Additionally, if the 
jmx.remote.protocol.provider.class.loader key is not present in the environment 
parameter, it is added to the new read-only Map. The associated value is the 
calling thread's context class loader. 



*javax.management.remote.JMXConnectorServerFactory.newJMXConnectorServer(JMXServiceURL,Map,MBeanServer)*

public static |javax.management.remote.JMXConnectorServer| newJMXConnectorServer(
  javax.management.remote.JMXServiceURL serviceURL,
  java.util.Map environment,
  javax.management.MBeanServer mbeanServer)
  throws |java.io.IOException|
         
Creates a connector server at the given address. The resultant server is not 
started until its start(|javax.management.remote.JMXConnectorServer|) method is 
called. 

    serviceURL - the address of the new connector server. The actual address of the new 
       connector server, as returned by its {@link 
       JMXConnectorServer#getAddress() getAddress} method, will not necessarily 
       be exactly the same. For example, it might include a port number if the 
       original address did not. 
    environment - a set of attributes to control the new connector server's behaviour. This 
       parameter can be null. Keys in this map must be Strings. The appropriate 
       type of each associated value depends on the attribute. The contents of 
       environment are not changed by this call. 
    mbeanServer - the MBean server that this connector server is attached to. Null if this 
       connector server will be attached to an MBean server by being registered 
       in it. 

    Returns: a JMXConnectorServer representing the new connector server. Each successful 
             call to this method produces a different object. 


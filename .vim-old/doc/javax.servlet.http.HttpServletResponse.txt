*javax.servlet.http.HttpServletResponse* *HttpServletResponse* Extends theServle

public interface interface HttpServletResponse

  implements |javax.servlet.ServletResponse|

|javax.servlet.http.HttpServletResponse_Description|
|javax.servlet.http.HttpServletResponse_Fields|
|javax.servlet.http.HttpServletResponse_Constructors|
|javax.servlet.http.HttpServletResponse_Methods|

================================================================================

*javax.servlet.http.HttpServletResponse_Fields*
|int_javax.servlet.http.HttpServletResponse.SC_ACCEPTED|
|int_javax.servlet.http.HttpServletResponse.SC_BAD_GATEWAY|
|int_javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST|
|int_javax.servlet.http.HttpServletResponse.SC_CONFLICT|
|int_javax.servlet.http.HttpServletResponse.SC_CONTINUE|
|int_javax.servlet.http.HttpServletResponse.SC_CREATED|
|int_javax.servlet.http.HttpServletResponse.SC_EXPECTATION_FAILED|
|int_javax.servlet.http.HttpServletResponse.SC_FORBIDDEN|
|int_javax.servlet.http.HttpServletResponse.SC_FOUND|
|int_javax.servlet.http.HttpServletResponse.SC_GATEWAY_TIMEOUT|
|int_javax.servlet.http.HttpServletResponse.SC_GONE|
|int_javax.servlet.http.HttpServletResponse.SC_HTTP_VERSION_NOT_SUPPORTED|
|int_javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR|
|int_javax.servlet.http.HttpServletResponse.SC_LENGTH_REQUIRED|
|int_javax.servlet.http.HttpServletResponse.SC_METHOD_NOT_ALLOWED|
|int_javax.servlet.http.HttpServletResponse.SC_MOVED_PERMANENTLY|
|int_javax.servlet.http.HttpServletResponse.SC_MOVED_TEMPORARILY|
|int_javax.servlet.http.HttpServletResponse.SC_MULTIPLE_CHOICES|
|int_javax.servlet.http.HttpServletResponse.SC_NO_CONTENT|
|int_javax.servlet.http.HttpServletResponse.SC_NON_AUTHORITATIVE_INFORMATION|
|int_javax.servlet.http.HttpServletResponse.SC_NOT_ACCEPTABLE|
|int_javax.servlet.http.HttpServletResponse.SC_NOT_FOUND|
|int_javax.servlet.http.HttpServletResponse.SC_NOT_IMPLEMENTED|
|int_javax.servlet.http.HttpServletResponse.SC_NOT_MODIFIED|
|int_javax.servlet.http.HttpServletResponse.SC_OK|
|int_javax.servlet.http.HttpServletResponse.SC_PARTIAL_CONTENT|
|int_javax.servlet.http.HttpServletResponse.SC_PAYMENT_REQUIRED|
|int_javax.servlet.http.HttpServletResponse.SC_PRECONDITION_FAILED|
|int_javax.servlet.http.HttpServletResponse.SC_PROXY_AUTHENTICATION_REQUIRED|
|int_javax.servlet.http.HttpServletResponse.SC_REQUEST_ENTITY_TOO_LARGE|
|int_javax.servlet.http.HttpServletResponse.SC_REQUEST_TIMEOUT|
|int_javax.servlet.http.HttpServletResponse.SC_REQUEST_URI_TOO_LONG|
|int_javax.servlet.http.HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE|
|int_javax.servlet.http.HttpServletResponse.SC_RESET_CONTENT|
|int_javax.servlet.http.HttpServletResponse.SC_SEE_OTHER|
|int_javax.servlet.http.HttpServletResponse.SC_SERVICE_UNAVAILABLE|
|int_javax.servlet.http.HttpServletResponse.SC_SWITCHING_PROTOCOLS|
|int_javax.servlet.http.HttpServletResponse.SC_TEMPORARY_REDIRECT|
|int_javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED|
|int_javax.servlet.http.HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE|
|int_javax.servlet.http.HttpServletResponse.SC_USE_PROXY|

*javax.servlet.http.HttpServletResponse_Methods*
|javax.servlet.http.HttpServletResponse.addCookie(Cookie)|Adds the specified co
|javax.servlet.http.HttpServletResponse.addDateHeader(String,long)|Adds a respo
|javax.servlet.http.HttpServletResponse.addHeader(String,String)|Adds a respons
|javax.servlet.http.HttpServletResponse.addIntHeader(String,int)|Adds a respons
|javax.servlet.http.HttpServletResponse.containsHeader(String)|Returns a boolea
|javax.servlet.http.HttpServletResponse.encodeRedirectUrl(String)|
|javax.servlet.http.HttpServletResponse.encodeRedirectURL(String)|Encodes the s
|javax.servlet.http.HttpServletResponse.encodeUrl(String)|
|javax.servlet.http.HttpServletResponse.encodeURL(String)|Encodes the specified
|javax.servlet.http.HttpServletResponse.sendError(int)|Sends an error response 
|javax.servlet.http.HttpServletResponse.sendError(int,String)|Sends an error re
|javax.servlet.http.HttpServletResponse.sendRedirect(String)|Sends a temporary 
|javax.servlet.http.HttpServletResponse.setDateHeader(String,long)|Sets a respo
|javax.servlet.http.HttpServletResponse.setHeader(String,String)|Sets a respons
|javax.servlet.http.HttpServletResponse.setIntHeader(String,int)|Sets a respons
|javax.servlet.http.HttpServletResponse.setStatus(int)|Sets the status code for
|javax.servlet.http.HttpServletResponse.setStatus(int,String)|

*javax.servlet.http.HttpServletResponse_Description*

Extends the (|javax.servlet.ServletResponse|) interface to provide 
HTTP-specific functionality in sending a response. For example, it has methods 
to access HTTP headers and cookies. 

The servlet container creates an HttpServletResponse object and passes it as an 
argument to the servlet's service methods (doGet, doPost, etc). 



*int_javax.servlet.http.HttpServletResponse.SC_ACCEPTED*

Status code (202) indicating that a request was accepted for processing, but 
was not completed. 


*int_javax.servlet.http.HttpServletResponse.SC_BAD_GATEWAY*

Status code (502) indicating that the HTTP server received an invalid response 
from a server it consulted when acting as a proxy or gateway. 


*int_javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST*

Status code (400) indicating the request sent by the client was syntactically 
incorrect. 


*int_javax.servlet.http.HttpServletResponse.SC_CONFLICT*

Status code (409) indicating that the request could not be completed due to a 
conflict with the current state of the resource. 


*int_javax.servlet.http.HttpServletResponse.SC_CONTINUE*

Status code (100) indicating the client can continue. 


*int_javax.servlet.http.HttpServletResponse.SC_CREATED*

Status code (201) indicating the request succeeded and created a new resource 
on the server. 


*int_javax.servlet.http.HttpServletResponse.SC_EXPECTATION_FAILED*

Status code (417) indicating that the server could not meet the expectation 
given in the Expect request header. 


*int_javax.servlet.http.HttpServletResponse.SC_FORBIDDEN*

Status code (403) indicating the server understood the request but refused to 
fulfill it. 


*int_javax.servlet.http.HttpServletResponse.SC_FOUND*

Status code (302) indicating that the resource reside temporarily under a 
different URI. Since the redirection might be altered on occasion, the client 
should continue to use the Request-URI for future requests.(HTTP/1.1) To 
represent the status code (302), it is recommended to use this variable. 


*int_javax.servlet.http.HttpServletResponse.SC_GATEWAY_TIMEOUT*

Status code (504) indicating that the server did not receive a timely response 
from the upstream server while acting as a gateway or proxy. 


*int_javax.servlet.http.HttpServletResponse.SC_GONE*

Status code (410) indicating that the resource is no longer available at the 
server and no forwarding address is known. This condition SHOULD be considered 
permanent. 


*int_javax.servlet.http.HttpServletResponse.SC_HTTP_VERSION_NOT_SUPPORTED*

Status code (505) indicating that the server does not support or refuses to 
support the HTTP protocol version that was used in the request message. 


*int_javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR*

Status code (500) indicating an error inside the HTTP server which prevented it 
from fulfilling the request. 


*int_javax.servlet.http.HttpServletResponse.SC_LENGTH_REQUIRED*

Status code (411) indicating that the request cannot be handled without a 
defined Content-Length. 


*int_javax.servlet.http.HttpServletResponse.SC_METHOD_NOT_ALLOWED*

Status code (405) indicating that the method specified in the Request-Line is 
not allowed for the resource identified by the Request-URI. 


*int_javax.servlet.http.HttpServletResponse.SC_MOVED_PERMANENTLY*

Status code (301) indicating that the resource has permanently moved to a new 
location, and that future references should use a new URI with their requests. 


*int_javax.servlet.http.HttpServletResponse.SC_MOVED_TEMPORARILY*

Status code (302) indicating that the resource has temporarily moved to another 
location, but that future references should still use the original URI to 
access the resource. 

This definition is being retained for backwards compatibility. SC_FOUND is now 
the preferred definition. 


*int_javax.servlet.http.HttpServletResponse.SC_MULTIPLE_CHOICES*

Status code (300) indicating that the requested resource corresponds to any one 
of a set of representations, each with its own specific location. 


*int_javax.servlet.http.HttpServletResponse.SC_NO_CONTENT*

Status code (204) indicating that the request succeeded but that there was no 
new information to return. 


*int_javax.servlet.http.HttpServletResponse.SC_NON_AUTHORITATIVE_INFORMATION*

Status code (203) indicating that the meta information presented by the client 
did not originate from the server. 


*int_javax.servlet.http.HttpServletResponse.SC_NOT_ACCEPTABLE*

Status code (406) indicating that the resource identified by the request is 
only capable of generating response entities which have content characteristics 
not acceptable according to the accept headers sent in the request. 


*int_javax.servlet.http.HttpServletResponse.SC_NOT_FOUND*

Status code (404) indicating that the requested resource is not available. 


*int_javax.servlet.http.HttpServletResponse.SC_NOT_IMPLEMENTED*

Status code (501) indicating the HTTP server does not support the functionality 
needed to fulfill the request. 


*int_javax.servlet.http.HttpServletResponse.SC_NOT_MODIFIED*

Status code (304) indicating that a conditional GET operation found that the 
resource was available and not modified. 


*int_javax.servlet.http.HttpServletResponse.SC_OK*

Status code (200) indicating the request succeeded normally. 


*int_javax.servlet.http.HttpServletResponse.SC_PARTIAL_CONTENT*

Status code (206) indicating that the server has fulfilled the partial GET 
request for the resource. 


*int_javax.servlet.http.HttpServletResponse.SC_PAYMENT_REQUIRED*

Status code (402) reserved for future use. 


*int_javax.servlet.http.HttpServletResponse.SC_PRECONDITION_FAILED*

Status code (412) indicating that the precondition given in one or more of the 
request-header fields evaluated to false when it was tested on the server. 


*int_javax.servlet.http.HttpServletResponse.SC_PROXY_AUTHENTICATION_REQUIRED*

Status code (407) indicating that the client MUST first authenticate itself 
with the proxy. 


*int_javax.servlet.http.HttpServletResponse.SC_REQUEST_ENTITY_TOO_LARGE*

Status code (413) indicating that the server is refusing to process the request 
because the request entity is larger than the server is willing or able to 
process. 


*int_javax.servlet.http.HttpServletResponse.SC_REQUEST_TIMEOUT*

Status code (408) indicating that the client did not produce a request within 
the time that the server was prepared to wait. 


*int_javax.servlet.http.HttpServletResponse.SC_REQUEST_URI_TOO_LONG*

Status code (414) indicating that the server is refusing to service the request 
because the Request-URI is longer than the server is willing to interpret. 


*int_javax.servlet.http.HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE*

Status code (416) indicating that the server cannot serve the requested byte 
range. 


*int_javax.servlet.http.HttpServletResponse.SC_RESET_CONTENT*

Status code (205) indicating that the agent SHOULD reset the document view 
which caused the request to be sent. 


*int_javax.servlet.http.HttpServletResponse.SC_SEE_OTHER*

Status code (303) indicating that the response to the request can be found 
under a different URI. 


*int_javax.servlet.http.HttpServletResponse.SC_SERVICE_UNAVAILABLE*

Status code (503) indicating that the HTTP server is temporarily overloaded, 
and unable to handle the request. 


*int_javax.servlet.http.HttpServletResponse.SC_SWITCHING_PROTOCOLS*

Status code (101) indicating the server is switching protocols according to 
Upgrade header. 


*int_javax.servlet.http.HttpServletResponse.SC_TEMPORARY_REDIRECT*

Status code (307) indicating that the requested resource resides temporarily 
under a different URI. The temporary URI SHOULD be given by the Location field 
in the response. 


*int_javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED*

Status code (401) indicating that the request requires HTTP authentication. 


*int_javax.servlet.http.HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE*

Status code (415) indicating that the server is refusing to service the request 
because the entity of the request is in a format not supported by the requested 
resource for the requested method. 


*int_javax.servlet.http.HttpServletResponse.SC_USE_PROXY*

Status code (305) indicating that the requested resource MUST be accessed 
through the proxy given by the Location field. 



*javax.servlet.http.HttpServletResponse.addCookie(Cookie)*

public void addCookie(javax.servlet.http.Cookie cookie)

Adds the specified cookie to the response. This method can be called multiple 
times to set more than one cookie. 


    cookie - the Cookie to return to the client 

*javax.servlet.http.HttpServletResponse.addDateHeader(String,long)*

public void addDateHeader(
  java.lang.String name,
  long date)

Adds a response header with the given name and date-value. The date is 
specified in terms of milliseconds since the epoch. This method allows response 
headers to have multiple values. 


    name - the name of the header to set 
    date - the additional date value 

*javax.servlet.http.HttpServletResponse.addHeader(String,String)*

public void addHeader(
  java.lang.String name,
  java.lang.String value)

Adds a response header with the given name and value. This method allows 
response headers to have multiple values. 


    name - the name of the header 
    value - the additional header value If it contains octet string, it should be encoded 
       according to RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt) 

*javax.servlet.http.HttpServletResponse.addIntHeader(String,int)*

public void addIntHeader(
  java.lang.String name,
  int value)

Adds a response header with the given name and integer value. This method 
allows response headers to have multiple values. 


    name - the name of the header 
    value - the assigned integer value 

*javax.servlet.http.HttpServletResponse.containsHeader(String)*

public boolean containsHeader(java.lang.String name)

Returns a boolean indicating whether the named response header has already been 
set. 


    name - the header name 

    Returns: true if the named response header has already been set; false otherwise 

*javax.servlet.http.HttpServletResponse.encodeRedirectUrl(String)*

public |java.lang.String| encodeRedirectUrl(java.lang.String url)



    Deprecated: As of version 2.1, use 
			encodeRedirectURL(String url) instead

    url - the url to be encoded. 

    Returns: the encoded URL if encoding is needed; the unchanged URL otherwise. 

*javax.servlet.http.HttpServletResponse.encodeRedirectURL(String)*

public |java.lang.String| encodeRedirectURL(java.lang.String url)

Encodes the specified URL for use in the sendRedirect method or, if encoding is 
not needed, returns the URL unchanged. The implementation of this method 
includes the logic to determine whether the session ID needs to be encoded in 
the URL. Because the rules for making this determination can differ from those 
used to decide whether to encode a normal link, this method is separated from 
the encodeURL method. 

All URLs sent to the HttpServletResponse.sendRedirect method should be run 
through this method. Otherwise, URL rewriting cannot be used with browsers 
which do not support cookies. 


    url - the url to be encoded. 

    Returns: the encoded URL if encoding is needed; the unchanged URL otherwise. 

*javax.servlet.http.HttpServletResponse.encodeUrl(String)*

public |java.lang.String| encodeUrl(java.lang.String url)



    Deprecated: As of version 2.1, use encodeURL(String url) instead

    url - the url to be encoded. 

    Returns: the encoded URL if encoding is needed; the unchanged URL otherwise. 

*javax.servlet.http.HttpServletResponse.encodeURL(String)*

public |java.lang.String| encodeURL(java.lang.String url)

Encodes the specified URL by including the session ID in it, or, if encoding is 
not needed, returns the URL unchanged. The implementation of this method 
includes the logic to determine whether the session ID needs to be encoded in 
the URL. For example, if the browser supports cookies, or session tracking is 
turned off, URL encoding is unnecessary. 

For robust session tracking, all URLs emitted by a servlet should be run 
through this method. Otherwise, URL rewriting cannot be used with browsers 
which do not support cookies. 


    url - the url to be encoded. 

    Returns: the encoded URL if encoding is needed; the unchanged URL otherwise. 

*javax.servlet.http.HttpServletResponse.sendError(int)*

public void sendError(int sc)
  throws |java.io.IOException|
         
Sends an error response to the client using the specified status code and 
clearing the buffer. If the response has already been committed, this method 
throws an IllegalStateException. After using this method, the response should 
be considered to be committed and should not be written to. 


    sc - the error status code 

*javax.servlet.http.HttpServletResponse.sendError(int,String)*

public void sendError(
  int sc,
  java.lang.String msg)
  throws |java.io.IOException|
         
Sends an error response to the client using the specified status. The server 
defaults to creating the response to look like an HTML-formatted server error 
page containing the specified message, setting the content type to "text/html", 
leaving cookies and other headers unmodified. 

If an error-page declaration has been made for the web application 
corresponding to the status code passed in, it will be served back in 
preference to the suggested msg parameter. 

If the response has already been committed, this method throws an 
IllegalStateException. After using this method, the response should be 
considered to be committed and should not be written to. 


    sc - the error status code 
    msg - the descriptive message 

*javax.servlet.http.HttpServletResponse.sendRedirect(String)*

public void sendRedirect(java.lang.String location)
  throws |java.io.IOException|
         
Sends a temporary redirect response to the client using the specified redirect 
location URL. This method can accept relative URLs; the servlet container must 
convert the relative URL to an absolute URL before sending the response to the 
client. If the location is relative without a leading '/' the container 
interprets it as relative to the current request URI. If the location is 
relative with a leading '/' the container interprets it as relative to the 
servlet container root. 

If the response has already been committed, this method throws an 
IllegalStateException. After using this method, the response should be 
considered to be committed and should not be written to. 


    location - the redirect location URL 

*javax.servlet.http.HttpServletResponse.setDateHeader(String,long)*

public void setDateHeader(
  java.lang.String name,
  long date)

Sets a response header with the given name and date-value. The date is 
specified in terms of milliseconds since the epoch. If the header had already 
been set, the new value overwrites the previous one. The containsHeader method 
can be used to test for the presence of a header before setting its value. 


    name - the name of the header to set 
    date - the assigned date value 

*javax.servlet.http.HttpServletResponse.setHeader(String,String)*

public void setHeader(
  java.lang.String name,
  java.lang.String value)

Sets a response header with the given name and value. If the header had already 
been set, the new value overwrites the previous one. The containsHeader method 
can be used to test for the presence of a header before setting its value. 


    name - the name of the header 
    value - the header value If it contains octet string, it should be encoded according to 
       RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt) 

*javax.servlet.http.HttpServletResponse.setIntHeader(String,int)*

public void setIntHeader(
  java.lang.String name,
  int value)

Sets a response header with the given name and integer value. If the header had 
already been set, the new value overwrites the previous one. The containsHeader 
method can be used to test for the presence of a header before setting its 
value. 


    name - the name of the header 
    value - the assigned integer value 

*javax.servlet.http.HttpServletResponse.setStatus(int)*

public void setStatus(int sc)

Sets the status code for this response. This method is used to set the return 
status code when there is no error (for example, for the status codes SC_OK or 
SC_MOVED_TEMPORARILY). If there is an error, and the caller wishes to invoke an 
error-page defined in the web application, the sendError method should be used 
instead. The container clears the buffer and sets the Location header, 
preserving cookies and other headers. 


    sc - the status code 

*javax.servlet.http.HttpServletResponse.setStatus(int,String)*

public void setStatus(
  int sc,
  java.lang.String sm)



    Deprecated: As of version 2.1, due to ambiguous meaning of the 
 message parameter. To set a status code 
 use <code>setStatus(int)</code>, to send an error with a description
 use <code>sendError(int, String)</code>.

 Sets the status code and message for this response.

    sc - the status code 
    sm - the status message 



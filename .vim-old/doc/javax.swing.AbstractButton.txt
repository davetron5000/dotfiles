*javax.swing.AbstractButton* *AbstractButton* Defines common behaviors for buttons and menu items.

public abstract class AbstractButton
  extends    |javax.swing.JComponent|
  implements |java.awt.ItemSelectable|
             |javax.swing.SwingConstants|

|javax.swing.AbstractButton_Description|
|javax.swing.AbstractButton_Fields|
|javax.swing.AbstractButton_Constructors|
|javax.swing.AbstractButton_Methods|

====================================================================================================================================================================================

*javax.swing.AbstractButton_Fields*
|java.awt.event.ActionListener_javax.swing.AbstractButton.actionListener|
|java.lang.String_javax.swing.AbstractButton.BORDER_PAINTED_CHANGED_PROPERTY|
|javax.swing.event.ChangeEvent_javax.swing.AbstractButton.changeEvent|
|javax.swing.event.ChangeListener_javax.swing.AbstractButton.changeListener|
|java.lang.String_javax.swing.AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY|
|java.lang.String_javax.swing.AbstractButton.DISABLED_ICON_CHANGED_PROPERTY|
|java.lang.String_javax.swing.AbstractButton.DISABLED_SELECTED_ICON_CHANGED_PROPERTY|
|java.lang.String_javax.swing.AbstractButton.FOCUS_PAINTED_CHANGED_PROPERTY|
|java.lang.String_javax.swing.AbstractButton.HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY|
|java.lang.String_javax.swing.AbstractButton.HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY|
|java.lang.String_javax.swing.AbstractButton.ICON_CHANGED_PROPERTY|
|java.awt.event.ItemListener_javax.swing.AbstractButton.itemListener|
|java.lang.String_javax.swing.AbstractButton.MARGIN_CHANGED_PROPERTY|
|java.lang.String_javax.swing.AbstractButton.MNEMONIC_CHANGED_PROPERTY|
|javax.swing.ButtonModel_javax.swing.AbstractButton.model|
|java.lang.String_javax.swing.AbstractButton.MODEL_CHANGED_PROPERTY|
|java.lang.String_javax.swing.AbstractButton.PRESSED_ICON_CHANGED_PROPERTY|
|java.lang.String_javax.swing.AbstractButton.ROLLOVER_ENABLED_CHANGED_PROPERTY|
|java.lang.String_javax.swing.AbstractButton.ROLLOVER_ICON_CHANGED_PROPERTY|
|java.lang.String_javax.swing.AbstractButton.ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY|
|java.lang.String_javax.swing.AbstractButton.SELECTED_ICON_CHANGED_PROPERTY|
|java.lang.String_javax.swing.AbstractButton.TEXT_CHANGED_PROPERTY|
|java.lang.String_javax.swing.AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY|
|java.lang.String_javax.swing.AbstractButton.VERTICAL_TEXT_POSITION_CHANGED_PROPERTY|

*javax.swing.AbstractButton_Constructors*
|javax.swing.AbstractButton()|

*javax.swing.AbstractButton_Methods*
|javax.swing.AbstractButton.addActionListener(ActionListener)|Adds an ActionListener to the button.
|javax.swing.AbstractButton.addChangeListener(ChangeListener)|Adds a ChangeListener to the button.
|javax.swing.AbstractButton.addImpl(Component,Object,int)|Adds the specified component to this container at the specified  index, refer tojava.awt.Container#addImpl(Component, Obj
|javax.swing.AbstractButton.addItemListener(ItemListener)|Adds an ItemListener to the checkbox.
|javax.swing.AbstractButton.checkHorizontalKey(int,String)|Verify that key is a legal value for the  horizontalAlignment properties.
|javax.swing.AbstractButton.checkVerticalKey(int,String)|Ensures that the key is a valid.
|javax.swing.AbstractButton.configurePropertiesFromAction(Action)|Factory method which sets the ActionEvent  source's properties according to values from the  Action instance.
|javax.swing.AbstractButton.createActionListener()|
|javax.swing.AbstractButton.createActionPropertyChangeListener(Action)|Factory method which creates the PropertyChangeListener  used to update the ActionEvent source as properties
|javax.swing.AbstractButton.createChangeListener()|Subclasses that want to handle ChangeEvents differently  can override this to return another ChangeListener  implementation.
|javax.swing.AbstractButton.createItemListener()|
|javax.swing.AbstractButton.doClick()|Programmatically perform a "click".
|javax.swing.AbstractButton.doClick(int)|Programmatically perform a "click".
|javax.swing.AbstractButton.fireActionPerformed(ActionEvent)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.AbstractButton.fireItemStateChanged(ItemEvent)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.AbstractButton.fireStateChanged()|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.AbstractButton.getAction()|Returns the currently set Action for this  ActionEvent source, or null  if no Action is set.
|javax.swing.AbstractButton.getActionCommand()|Returns the action command for this button.
|javax.swing.AbstractButton.getActionListeners()|Returns an array of all the ActionListeners added  to this AbstractButton with addActionListener().
|javax.swing.AbstractButton.getChangeListeners()|Returns an array of all the ChangeListeners added  to this AbstractButton with addChangeListener().
|javax.swing.AbstractButton.getDisabledIcon()|Returns the icon used by the button when it's disabled.
|javax.swing.AbstractButton.getDisabledSelectedIcon()|Returns the icon used by the button when it's disabled and selected.
|javax.swing.AbstractButton.getDisplayedMnemonicIndex()|Returns the character, as an index, that the look and feel should  provide decoration for as representing the mnemonic char
|javax.swing.AbstractButton.getHorizontalAlignment()|Returns the horizontal alignment of the icon and text.
|javax.swing.AbstractButton.getHorizontalTextPosition()|Returns the horizontal position of the text relative to the icon.
|javax.swing.AbstractButton.getIcon()|Returns the default icon.
|javax.swing.AbstractButton.getIconTextGap()|Returns the amount of space between the text and the icon  displayed in this button.
|javax.swing.AbstractButton.getItemListeners()|Returns an array of all the ItemListeners added  to this AbstractButton with addItemListener().
|javax.swing.AbstractButton.getLabel()|Returns the label text.
|javax.swing.AbstractButton.getMargin()|Returns the margin between the button's border and  the label.
|javax.swing.AbstractButton.getMnemonic()|Returns the keyboard mnemonic from the the current model.
|javax.swing.AbstractButton.getModel()|Returns the model that this button represents.
|javax.swing.AbstractButton.getMultiClickThreshhold()|Gets the amount of time (in milliseconds) required between  mouse press events for the button to generate the corresponding  
|javax.swing.AbstractButton.getPressedIcon()|Returns the pressed icon for the button.
|javax.swing.AbstractButton.getRolloverIcon()|Returns the rollover icon for the button.
|javax.swing.AbstractButton.getRolloverSelectedIcon()|Returns the rollover selection icon for the button.
|javax.swing.AbstractButton.getSelectedIcon()|Returns the selected icon for the button.
|javax.swing.AbstractButton.getSelectedObjects()|Returns an array (length 1) containing the label or  null if the button is not selected.
|javax.swing.AbstractButton.getText()|Returns the button's text.
|javax.swing.AbstractButton.getUI()|Returns the Lobject that renders this component.
|javax.swing.AbstractButton.getVerticalAlignment()|Returns the vertical alignment of the text and icon.
|javax.swing.AbstractButton.getVerticalTextPosition()|Returns the vertical position of the text relative to the icon.
|javax.swing.AbstractButton.imageUpdate(Image,int,int,int,int,int)|This is overridden to return false if the current Icon's  Image is not equal to the  passed in Image img.
|javax.swing.AbstractButton.init(String,Icon)|
|javax.swing.AbstractButton.isBorderPainted()|Gets the borderPainted property.
|javax.swing.AbstractButton.isContentAreaFilled()|Gets the contentAreaFilled property.
|javax.swing.AbstractButton.isFocusPainted()|Gets the paintFocus property.
|javax.swing.AbstractButton.isRolloverEnabled()|Gets the rolloverEnabled property.
|javax.swing.AbstractButton.isSelected()|Returns the state of the button.
|javax.swing.AbstractButton.paintBorder(Graphics)|Paint the button's border if BorderPainted  property is true and the button has a border.
|javax.swing.AbstractButton.paramString()|Returns a string representation of this AbstractButton.
|javax.swing.AbstractButton.removeActionListener(ActionListener)|Removes an ActionListener from the button.
|javax.swing.AbstractButton.removeChangeListener(ChangeListener)|Removes a ChangeListener from the button.
|javax.swing.AbstractButton.removeItemListener(ItemListener)|Removes an ItemListener from the button.
|javax.swing.AbstractButton.setAction(Action)|Sets the Action for the ActionEvent source.
|javax.swing.AbstractButton.setActionCommand(String)|Sets the action command for this button.
|javax.swing.AbstractButton.setBorderPainted(boolean)|Sets the borderPainted property.
|javax.swing.AbstractButton.setContentAreaFilled(boolean)|Sets the contentAreaFilled property.
|javax.swing.AbstractButton.setDisabledIcon(Icon)|Sets the disabled icon for the button.
|javax.swing.AbstractButton.setDisabledSelectedIcon(Icon)|Sets the disabled selection icon for the button.
|javax.swing.AbstractButton.setDisplayedMnemonicIndex(int)|Provides a hint to the look and feel as to which character in the  text should be decorated to represent the mnemonic.
|javax.swing.AbstractButton.setEnabled(boolean)|Enables (or disables) the button.
|javax.swing.AbstractButton.setFocusPainted(boolean)|Sets the paintFocus property, which must  be true for the focus state to be painted.
|javax.swing.AbstractButton.setHorizontalAlignment(int)|Sets the horizontal alignment of the icon and text.
|javax.swing.AbstractButton.setHorizontalTextPosition(int)|Sets the horizontal position of the text relative to the icon.
|javax.swing.AbstractButton.setIcon(Icon)|Sets the button's default icon.
|javax.swing.AbstractButton.setIconTextGap(int)|If both the icon and text properties are set, this property  defines the space between them.
|javax.swing.AbstractButton.setLabel(String)|Sets the label text.
|javax.swing.AbstractButton.setLayout(LayoutManager)|Sets the layout manager for this container, refer tojava.awt.Container#setLayout(LayoutManager)for a complete description of t
|javax.swing.AbstractButton.setMargin(Insets)|Sets space for margin between the button's border and  the label.
|javax.swing.AbstractButton.setMnemonic(char)|This method is now obsolete, please use setMnemonic(int)  to set the mnemonic for a button.
|javax.swing.AbstractButton.setMnemonic(int)|Sets the keyboard mnemonic on the current model.
|javax.swing.AbstractButton.setModel(ButtonModel)|Sets the model that this button represents.
|javax.swing.AbstractButton.setMultiClickThreshhold(long)|Sets the amount of time (in milliseconds) required between  mouse press events for the button to generate the correspondi
|javax.swing.AbstractButton.setPressedIcon(Icon)|Sets the pressed icon for the button.
|javax.swing.AbstractButton.setRolloverEnabled(boolean)|Sets the rolloverEnabled property, which  must be true for rollover effects to occur.
|javax.swing.AbstractButton.setRolloverIcon(Icon)|Sets the rollover icon for the button.
|javax.swing.AbstractButton.setRolloverSelectedIcon(Icon)|Sets the rollover selected icon for the button.
|javax.swing.AbstractButton.setSelected(boolean)|Sets the state of the button.
|javax.swing.AbstractButton.setSelectedIcon(Icon)|Sets the selected icon for the button.
|javax.swing.AbstractButton.setText(String)|Sets the button's text.
|javax.swing.AbstractButton.setUI(ButtonUI)|Sets the Lobject that renders this component.
|javax.swing.AbstractButton.setVerticalAlignment(int)|Sets the vertical alignment of the icon and text.
|javax.swing.AbstractButton.setVerticalTextPosition(int)|Sets the vertical position of the text relative to the icon.
|javax.swing.AbstractButton.updateUI()|Resets the UI property to a value from the current look  and feel.

*javax.swing.AbstractButton_Description*

Defines common behaviors for buttons and menu items. For further information see How to Use Buttons, Check Boxes, and Radio Buttons, a section in The Java Tutorial. 



Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*java.awt.event.ActionListener_javax.swing.AbstractButton.actionListener*

The button model's ActionListener. 


*java.lang.String_javax.swing.AbstractButton.BORDER_PAINTED_CHANGED_PROPERTY*

Identifies a change to having the border drawn, or having it not drawn. 


*javax.swing.event.ChangeEvent_javax.swing.AbstractButton.changeEvent*

Only one ChangeEvent is needed per button instance since the event's only state is the source property. The source of events generated is always "this". 


*javax.swing.event.ChangeListener_javax.swing.AbstractButton.changeListener*

The button model's changeListener. 


*java.lang.String_javax.swing.AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY*

Identifies a change to having the button paint the content area. 


*java.lang.String_javax.swing.AbstractButton.DISABLED_ICON_CHANGED_PROPERTY*

Identifies a change to the icon used when the button has been disabled. 


*java.lang.String_javax.swing.AbstractButton.DISABLED_SELECTED_ICON_CHANGED_PROPERTY*

Identifies a change to the icon used when the button has been disabled and selected. 


*java.lang.String_javax.swing.AbstractButton.FOCUS_PAINTED_CHANGED_PROPERTY*

Identifies a change to having the border highlighted when focused, or not. 


*java.lang.String_javax.swing.AbstractButton.HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY*

Identifies a change in the button's horizontal alignment. 


*java.lang.String_javax.swing.AbstractButton.HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY*

Identifies a change in the button's horizontal text position. 


*java.lang.String_javax.swing.AbstractButton.ICON_CHANGED_PROPERTY*

Identifies a change to the icon that represents the button. 


*java.awt.event.ItemListener_javax.swing.AbstractButton.itemListener*

The button model's ItemListener. 


*java.lang.String_javax.swing.AbstractButton.MARGIN_CHANGED_PROPERTY*

Identifies a change in the button's margins. 


*java.lang.String_javax.swing.AbstractButton.MNEMONIC_CHANGED_PROPERTY*

Identifies a change to the button's mnemonic. 


*javax.swing.ButtonModel_javax.swing.AbstractButton.model*

The data model that determines the button's state. 


*java.lang.String_javax.swing.AbstractButton.MODEL_CHANGED_PROPERTY*

Identifies a change in the button model. 


*java.lang.String_javax.swing.AbstractButton.PRESSED_ICON_CHANGED_PROPERTY*

Identifies a change to the icon used when the button has been pressed. 


*java.lang.String_javax.swing.AbstractButton.ROLLOVER_ENABLED_CHANGED_PROPERTY*

Identifies a change from rollover enabled to disabled or back to enabled. 


*java.lang.String_javax.swing.AbstractButton.ROLLOVER_ICON_CHANGED_PROPERTY*

Identifies a change to the icon used when the cursor is over the button. 


*java.lang.String_javax.swing.AbstractButton.ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY*

Identifies a change to the icon used when the cursor is over the button and it has been selected. 


*java.lang.String_javax.swing.AbstractButton.SELECTED_ICON_CHANGED_PROPERTY*

Identifies a change to the icon used when the button has been selected. 


*java.lang.String_javax.swing.AbstractButton.TEXT_CHANGED_PROPERTY*

Identifies a change in the button's text. 


*java.lang.String_javax.swing.AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY*

Identifies a change in the button's vertical alignment. 


*java.lang.String_javax.swing.AbstractButton.VERTICAL_TEXT_POSITION_CHANGED_PROPERTY*

Identifies a change in the button's vertical text position. 



*javax.swing.AbstractButton()*

public AbstractButton()




*javax.swing.AbstractButton.addActionListener(ActionListener)*

public void addActionListener(java.awt.event.ActionListener l)

Adds an ActionListener to the button. 


    l - the ActionListener to be added 

*javax.swing.AbstractButton.addChangeListener(ChangeListener)*

public void addChangeListener(javax.swing.event.ChangeListener l)

Adds a ChangeListener to the button. 


    l - the listener to be added 

*javax.swing.AbstractButton.addImpl(Component,Object,int)*

protected void addImpl(
  java.awt.Component comp,
  java.lang.Object constraints,
  int index)

Adds the specified component to this container at the specified index, refer to (|java.awt.Container|) for a complete description of this method. 


    comp - the component to be added 
    constraints - an object expressing layout constraints for this component 
    index - the position in the container's list at which to insert the component, where -1 means append to the end 

*javax.swing.AbstractButton.addItemListener(ItemListener)*

public void addItemListener(java.awt.event.ItemListener l)

Adds an ItemListener to the checkbox. 


    l - the ItemListener to be added 

*javax.swing.AbstractButton.checkHorizontalKey(int,String)*

protected int checkHorizontalKey(
  int key,
  java.lang.String exception)

Verify that key is a legal value for the horizontalAlignment properties. 


    key - the property value to check, one of the following values: 

SwingConstants.RIGHT (the default) SwingConstants.LEFT SwingConstants.CENTER SwingConstants.LEADING SwingConstants.TRAILING 
    exception - the IllegalArgumentException detail message 

*javax.swing.AbstractButton.checkVerticalKey(int,String)*

protected int checkVerticalKey(
  int key,
  java.lang.String exception)

Ensures that the key is a valid. Throws an IllegalArgumentException exception otherwise. 


    key - the value to check, one of the following values: 

SwingConstants.CENTER (the default) SwingConstants.TOP SwingConstants.BOTTOM 
    exception - a string to be passed to the IllegalArgumentException call if key is not one of the valid values listed above 

*javax.swing.AbstractButton.configurePropertiesFromAction(Action)*

protected void configurePropertiesFromAction(javax.swing.Action a)

Factory method which sets the ActionEvent source's properties according to values from the Action instance. The properties which are set may differ for subclasses. By default, the 
properties which get set are Text, Icon, Enabled, ToolTipText, ActionCommand, and Mnemonic. 

If the Action passed in is null, the following things will occur: 

the text is set to null, the icon is set to null, enabled is set to true, the tooltip text is set to null 


    a - the Action from which to get the properties, or null 

*javax.swing.AbstractButton.createActionListener()*

protected |java.awt.event.ActionListener| createActionListener()





*javax.swing.AbstractButton.createActionPropertyChangeListener(Action)*

protected |java.beans.PropertyChangeListener| createActionPropertyChangeListener(javax.swing.Action a)

Factory method which creates the PropertyChangeListener used to update the ActionEvent source as properties change on its Action instance. Subclasses may override this in order to 
provide their own PropertyChangeListener if the set of properties which should be kept up to date differs from the default properties (Text, Icon, Enabled, ToolTipText, Mnemonic). 

Note that PropertyChangeListeners should avoid holding strong references to the ActionEvent source, as this may hinder garbage collection of the ActionEvent source and all 
components in its containment hierarchy. 


    a - the new action for the button 

*javax.swing.AbstractButton.createChangeListener()*

protected |javax.swing.event.ChangeListener| createChangeListener()

Subclasses that want to handle ChangeEvents differently can override this to return another ChangeListener implementation. 



    Returns: the new ChangeListener 

*javax.swing.AbstractButton.createItemListener()*

protected |java.awt.event.ItemListener| createItemListener()





*javax.swing.AbstractButton.doClick()*

public void doClick()

Programmatically perform a "click". This does the same thing as if the user had pressed and released the button. 



*javax.swing.AbstractButton.doClick(int)*

public void doClick(int pressTime)

Programmatically perform a "click". This does the same thing as if the user had pressed and released the button. The button stays visually "pressed" for pressTime milliseconds. 


    pressTime - the time to "hold down" the button, in milliseconds 

*javax.swing.AbstractButton.fireActionPerformed(ActionEvent)*

protected void fireActionPerformed(java.awt.event.ActionEvent event)

Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the event parameter. 


    event - the ActionEvent object 

*javax.swing.AbstractButton.fireItemStateChanged(ItemEvent)*

protected void fireItemStateChanged(java.awt.event.ItemEvent event)

Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the event parameter. 


    event - the ItemEvent object 

*javax.swing.AbstractButton.fireStateChanged()*

protected void fireStateChanged()

Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created. 



*javax.swing.AbstractButton.getAction()*

public |javax.swing.Action| getAction()

Returns the currently set Action for this ActionEvent source, or null if no Action is set. 



    Returns: the Action for this ActionEvent source, or null 

*javax.swing.AbstractButton.getActionCommand()*

public |java.lang.String| getActionCommand()

Returns the action command for this button. 



    Returns: the action command for this button 

*javax.swing.AbstractButton.getActionListeners()*

public |java.awt.event.ActionListener|[] getActionListeners()

Returns an array of all the ActionListeners added to this AbstractButton with addActionListener(). 



    Returns: all of the ActionListeners added or an empty array if no listeners have been added 

*javax.swing.AbstractButton.getChangeListeners()*

public |javax.swing.event.ChangeListener|[] getChangeListeners()

Returns an array of all the ChangeListeners added to this AbstractButton with addChangeListener(). 



    Returns: all of the ChangeListeners added or an empty array if no listeners have been added 

*javax.swing.AbstractButton.getDisabledIcon()*

public |javax.swing.Icon| getDisabledIcon()

Returns the icon used by the button when it's disabled. If no disabled icon has been set this will forward the call to the look and feel to construct an appropriate disabled Icon. 

Some look and feels might not render the disabled Icon, in which case they will ignore this. 



    Returns: the disabledIcon property 

*javax.swing.AbstractButton.getDisabledSelectedIcon()*

public |javax.swing.Icon| getDisabledSelectedIcon()

Returns the icon used by the button when it's disabled and selected. If no disabled selection icon has been set, this will forward the call to the LookAndFeel to construct an 
appropriate disabled Icon from the selection icon if it has been set and to getDisabledIcon() otherwise. 

Some look and feels might not render the disabled selected Icon, in which case they will ignore this. 



    Returns: the disabledSelectedIcon property 

*javax.swing.AbstractButton.getDisplayedMnemonicIndex()*

public int getDisplayedMnemonicIndex()

Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character. 



    Returns: index representing mnemonic character 

*javax.swing.AbstractButton.getHorizontalAlignment()*

public int getHorizontalAlignment()

Returns the horizontal alignment of the icon and text. 



    Returns: the horizontalAlignment property, one of the following values: 

SwingConstants.RIGHT (the default) SwingConstants.LEFT SwingConstants.CENTER SwingConstants.LEADING SwingConstants.TRAILING 

*javax.swing.AbstractButton.getHorizontalTextPosition()*

public int getHorizontalTextPosition()

Returns the horizontal position of the text relative to the icon. 



    Returns: the horizontalTextPosition property, one of the following values: 

SwingConstants.RIGHT SwingConstants.LEFT SwingConstants.CENTER SwingConstants.LEADING SwingConstants.TRAILING (the default) 

*javax.swing.AbstractButton.getIcon()*

public |javax.swing.Icon| getIcon()

Returns the default icon. 



    Returns: the default Icon 

*javax.swing.AbstractButton.getIconTextGap()*

public int getIconTextGap()

Returns the amount of space between the text and the icon displayed in this button. 



    Returns: an int equal to the number of pixels between the text and the icon. 

*javax.swing.AbstractButton.getItemListeners()*

public |java.awt.event.ItemListener|[] getItemListeners()

Returns an array of all the ItemListeners added to this AbstractButton with addItemListener(). 



    Returns: all of the ItemListeners added or an empty array if no listeners have been added 

*javax.swing.AbstractButton.getLabel()*

public |java.lang.String| getLabel()

Returns the label text. 

    Deprecated: - Replaced by <code>getText</code>


    Returns: a String containing the label 

*javax.swing.AbstractButton.getMargin()*

public |java.awt.Insets| getMargin()

Returns the margin between the button's border and the label. 



    Returns: an Insets object specifying the margin between the botton's border and the label 

*javax.swing.AbstractButton.getMnemonic()*

public int getMnemonic()

Returns the keyboard mnemonic from the the current model. 



    Returns: the keyboard mnemonic from the model 

*javax.swing.AbstractButton.getModel()*

public |javax.swing.ButtonModel| getModel()

Returns the model that this button represents. 



    Returns: the model property 

*javax.swing.AbstractButton.getMultiClickThreshhold()*

public long getMultiClickThreshhold()

Gets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events. 



    Returns: the amount of time required between mouse press events to generate corresponding action events 

*javax.swing.AbstractButton.getPressedIcon()*

public |javax.swing.Icon| getPressedIcon()

Returns the pressed icon for the button. 



    Returns: the pressedIcon property 

*javax.swing.AbstractButton.getRolloverIcon()*

public |javax.swing.Icon| getRolloverIcon()

Returns the rollover icon for the button. 



    Returns: the rolloverIcon property 

*javax.swing.AbstractButton.getRolloverSelectedIcon()*

public |javax.swing.Icon| getRolloverSelectedIcon()

Returns the rollover selection icon for the button. 



    Returns: the rolloverSelectedIcon property 

*javax.swing.AbstractButton.getSelectedIcon()*

public |javax.swing.Icon| getSelectedIcon()

Returns the selected icon for the button. 



    Returns: the selectedIcon property 

*javax.swing.AbstractButton.getSelectedObjects()*

public |java.lang.Object|[] getSelectedObjects()

Returns an array (length 1) containing the label or null if the button is not selected. 



    Returns: an array containing 1 Object: the text of the button, if the item is selected; otherwise null 

*javax.swing.AbstractButton.getText()*

public |java.lang.String| getText()

Returns the button's text. 



    Returns: the buttons text 

*javax.swing.AbstractButton.getUI()*

public |javax.swing.plaf.ButtonUI| getUI()

Returns the Lobject that renders this component. 



    Returns: the ButtonUI object 

*javax.swing.AbstractButton.getVerticalAlignment()*

public int getVerticalAlignment()

Returns the vertical alignment of the text and icon. 



    Returns: the verticalAlignment property, one of the following values: 

SwingConstants.CENTER (the default) SwingConstants.TOP SwingConstants.BOTTOM 

*javax.swing.AbstractButton.getVerticalTextPosition()*

public int getVerticalTextPosition()

Returns the vertical position of the text relative to the icon. 



    Returns: the verticalTextPosition property, one of the following values: 

SwingConstants.CENTER (the default) SwingConstants.TOP SwingConstants.BOTTOM 

*javax.swing.AbstractButton.imageUpdate(Image,int,int,int,int,int)*

public boolean imageUpdate(
  java.awt.Image img,
  int infoflags,
  int x,
  int y,
  int w,
  int h)

This is overridden to return false if the current Icon's Image is not equal to the passed in Image img. 


    img - the Image to be compared 
    infoflags - flags used to repaint the button when the image is updated and which determine how much is to be painted 
    x - the x coordinate 
    y - the y coordinate 
    w - the width 
    h - the height 

*javax.swing.AbstractButton.init(String,Icon)*

protected void init(
  java.lang.String text,
  javax.swing.Icon icon)





*javax.swing.AbstractButton.isBorderPainted()*

public boolean isBorderPainted()

Gets the borderPainted property. 



    Returns: the value of the borderPainted property 

*javax.swing.AbstractButton.isContentAreaFilled()*

public boolean isContentAreaFilled()

Gets the contentAreaFilled property. 



    Returns: the contentAreaFilled property 

*javax.swing.AbstractButton.isFocusPainted()*

public boolean isFocusPainted()

Gets the paintFocus property. 



    Returns: the paintFocus property 

*javax.swing.AbstractButton.isRolloverEnabled()*

public boolean isRolloverEnabled()

Gets the rolloverEnabled property. 



    Returns: the value of the rolloverEnabled property 

*javax.swing.AbstractButton.isSelected()*

public boolean isSelected()

Returns the state of the button. True if the toggle button is selected, false if it's not. 



    Returns: true if the toggle button is selected, otherwise false 

*javax.swing.AbstractButton.paintBorder(Graphics)*

protected void paintBorder(java.awt.Graphics g)

Paint the button's border if BorderPainted property is true and the button has a border. 


    g - the Graphics context in which to paint 

*javax.swing.AbstractButton.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this AbstractButton. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary 
between implementations. The returned string may be empty but may not be null. 

Overriding paramString to provide information about the specific new aspects of the JFC components. 



    Returns: a string representation of this AbstractButton 

*javax.swing.AbstractButton.removeActionListener(ActionListener)*

public void removeActionListener(java.awt.event.ActionListener l)

Removes an ActionListener from the button. If the listener is the currently set Action for the button, then the Action is set to null. 


    l - the listener to be removed 

*javax.swing.AbstractButton.removeChangeListener(ChangeListener)*

public void removeChangeListener(javax.swing.event.ChangeListener l)

Removes a ChangeListener from the button. 


    l - the listener to be removed 

*javax.swing.AbstractButton.removeItemListener(ItemListener)*

public void removeItemListener(java.awt.event.ItemListener l)

Removes an ItemListener from the button. 


    l - the ItemListener to be removed 

*javax.swing.AbstractButton.setAction(Action)*

public void setAction(javax.swing.Action a)

Sets the Action for the ActionEvent source. The new Action replaces any previously set Action but does not affect ActionListeners independently added with addActionListener. If 
the Action is already a registered ActionListener for the button, it is not re-registered. 

A side-effect of setting the Action is that the ActionEvent source's properties are immediately set from the values in the Action (performed by the method 
configurePropertiesFromAction) and subsequently updated as the Action's properties change (via a PropertyChangeListener created by the method createActionPropertyChangeListener. 


    a - the Action for the AbstractButton, or null 

*javax.swing.AbstractButton.setActionCommand(String)*

public void setActionCommand(java.lang.String actionCommand)

Sets the action command for this button. 


    actionCommand - the action command for this button 

*javax.swing.AbstractButton.setBorderPainted(boolean)*

public void setBorderPainted(boolean b)

Sets the borderPainted property. If true and the button has a border, the border is painted. The default value for the borderPainted property is true. 


    b - if true and border property is not null, the border is painted 

*javax.swing.AbstractButton.setContentAreaFilled(boolean)*

public void setContentAreaFilled(boolean b)

Sets the contentAreaFilled property. If true the button will paint the content area. If you wish to have a transparent button, such as an icon only button, for example, then you 
should set this to false. Do not call setOpaque(false). The default value for the the contentAreaFilled property is true. 

This function may cause the component's opaque property to change. 

The exact behavior of calling this function varies on a component-by-component and Lbasis. 


    b - if true, the content should be filled; if false the content area is not filled 

*javax.swing.AbstractButton.setDisabledIcon(Icon)*

public void setDisabledIcon(javax.swing.Icon disabledIcon)

Sets the disabled icon for the button. 


    disabledIcon - the icon used as the disabled image 

*javax.swing.AbstractButton.setDisabledSelectedIcon(Icon)*

public void setDisabledSelectedIcon(javax.swing.Icon disabledSelectedIcon)

Sets the disabled selection icon for the button. 


    disabledSelectedIcon - the icon used as the disabled selection image 

*javax.swing.AbstractButton.setDisplayedMnemonicIndex(int)*

public void setDisplayedMnemonicIndex(int index)
  throws |java.lang.IllegalArgumentException|
         
Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic. Not all look and feels may support this. A value of -1 
indicates either there is no mnemonic, the mnemonic character is not contained in the string, or the developer does not wish the mnemonic to be displayed. 

The value of this is updated as the properties relating to the mnemonic change (such as the mnemonic itself, the text...). You should only ever have to call this if you do not 
wish the default character to be underlined. For example, if the text was 'Save As', with a mnemonic of 'a', and you wanted the 'A' to be decorated, as 'Save As', you would have 
to invoke setDisplayedMnemonicIndex(5) after invoking setMnemonic(KeyEvent.VK_A). 


    index - Index into the String to underline 

*javax.swing.AbstractButton.setEnabled(boolean)*

public void setEnabled(boolean b)

Enables (or disables) the button. 


    b - true to enable the button, otherwise false 

*javax.swing.AbstractButton.setFocusPainted(boolean)*

public void setFocusPainted(boolean b)

Sets the paintFocus property, which must be true for the focus state to be painted. The default value for the paintFocus property is true. Some look and feels might not paint 
focus state; they will ignore this property. 


    b - if true, the focus state should be painted 

*javax.swing.AbstractButton.setHorizontalAlignment(int)*

public void setHorizontalAlignment(int alignment)

Sets the horizontal alignment of the icon and text. 


    alignment - one of the following values: 

SwingConstants.RIGHT (the default) SwingConstants.LEFT SwingConstants.CENTER SwingConstants.LEADING SwingConstants.TRAILING 

*javax.swing.AbstractButton.setHorizontalTextPosition(int)*

public void setHorizontalTextPosition(int textPosition)

Sets the horizontal position of the text relative to the icon. 


    textPosition - one of the following values: 

SwingConstants.RIGHT SwingConstants.LEFT SwingConstants.CENTER SwingConstants.LEADING SwingConstants.TRAILING (the default) 

*javax.swing.AbstractButton.setIcon(Icon)*

public void setIcon(javax.swing.Icon defaultIcon)

Sets the button's default icon. This icon is also used as the "pressed" and "disabled" icon if there is no explicitly set pressed icon. 


    defaultIcon - the icon used as the default image 

*javax.swing.AbstractButton.setIconTextGap(int)*

public void setIconTextGap(int iconTextGap)

If both the icon and text properties are set, this property defines the space between them. 

The default value of this property is 4 pixels. 

This is a JavaBeans bound property. 



*javax.swing.AbstractButton.setLabel(String)*

public void setLabel(java.lang.String label)

Sets the label text. 

    Deprecated: - Replaced by <code>setText(text)</code>

    label - a String containing the text 

*javax.swing.AbstractButton.setLayout(LayoutManager)*

public void setLayout(java.awt.LayoutManager mgr)

Sets the layout manager for this container, refer to (|java.awt.Container|) for a complete description of this method. 


    mgr - the specified layout manager 

*javax.swing.AbstractButton.setMargin(Insets)*

public void setMargin(java.awt.Insets m)

Sets space for margin between the button's border and the label. Setting to null will cause the button to use the default margin. The button's default Border object will use this 
value to create the proper margin. However, if a non-default border is set on the button, it is that Border object's responsibility to create the appropriate margin space (else 
this property will effectively be ignored). 


    m - the space between the border and the label 

*javax.swing.AbstractButton.setMnemonic(char)*

public void setMnemonic(char mnemonic)

This method is now obsolete, please use setMnemonic(int) to set the mnemonic for a button. This method is only designed to handle character values which fall between 'a' and 'z' 
or 'A' and 'Z'. 


    mnemonic - a char specifying the mnemonic value 

*javax.swing.AbstractButton.setMnemonic(int)*

public void setMnemonic(int mnemonic)

Sets the keyboard mnemonic on the current model. The mnemonic is the key which when combined with the look and feel's mouseless modifier (usually Alt) will activate this button if 
focus is contained somewhere within this button's ancestor window. 

A mnemonic must correspond to a single key on the keyboard and should be specified using one of the VK_XXX keycodes defined in java.awt.event.KeyEvent. Mnemonics are 
case-insensitive, therefore a key event with the corresponding keycode would cause the button to be activated whether or not the Shift modifier was pressed. 

If the character defined by the mnemonic is found within the button's label string, the first occurrence of it will be underlined to indicate the mnemonic to the user. 


    mnemonic - the key code which represents the mnemonic 

*javax.swing.AbstractButton.setModel(ButtonModel)*

public void setModel(javax.swing.ButtonModel newModel)

Sets the model that this button represents. 


    newModel - the new ButtonModel 

*javax.swing.AbstractButton.setMultiClickThreshhold(long)*

public void setMultiClickThreshhold(long threshhold)

Sets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events. After the initial mouse press occurs (and 
action event generated) any subsequent mouse press events which occur on intervals less than the threshhold will be ignored and no corresponding action event generated. By default 
the threshhold is 0, which means that for each mouse press, an action event will be fired, no matter how quickly the mouse clicks occur. In buttons where this behavior is not 
desirable (for example, the "OK" button in a dialog), this threshhold should be set to an appropriate positive value. 


    threshhold - the amount of time required between mouse press events to generate corresponding action events 

*javax.swing.AbstractButton.setPressedIcon(Icon)*

public void setPressedIcon(javax.swing.Icon pressedIcon)

Sets the pressed icon for the button. 


    pressedIcon - the icon used as the "pressed" image 

*javax.swing.AbstractButton.setRolloverEnabled(boolean)*

public void setRolloverEnabled(boolean b)

Sets the rolloverEnabled property, which must be true for rollover effects to occur. The default value for the rolloverEnabled property is false. Some look and feels might not 
implement rollover effects; they will ignore this property. 


    b - if true, rollover effects should be painted 

*javax.swing.AbstractButton.setRolloverIcon(Icon)*

public void setRolloverIcon(javax.swing.Icon rolloverIcon)

Sets the rollover icon for the button. 


    rolloverIcon - the icon used as the "rollover" image 

*javax.swing.AbstractButton.setRolloverSelectedIcon(Icon)*

public void setRolloverSelectedIcon(javax.swing.Icon rolloverSelectedIcon)

Sets the rollover selected icon for the button. 


    rolloverSelectedIcon - the icon used as the "selected rollover" image 

*javax.swing.AbstractButton.setSelected(boolean)*

public void setSelected(boolean b)

Sets the state of the button. Note that this method does not trigger an actionEvent. Call doClick to perform a programatic action change. 


    b - true if the button is selected, otherwise false 

*javax.swing.AbstractButton.setSelectedIcon(Icon)*

public void setSelectedIcon(javax.swing.Icon selectedIcon)

Sets the selected icon for the button. 


    selectedIcon - the icon used as the "selected" image 

*javax.swing.AbstractButton.setText(String)*

public void setText(java.lang.String text)

Sets the button's text. 


    text - the string used to set the text 

*javax.swing.AbstractButton.setUI(ButtonUI)*

public void setUI(javax.swing.plaf.ButtonUI ui)

Sets the Lobject that renders this component. 


    ui - the ButtonUI Lobject 

*javax.swing.AbstractButton.setVerticalAlignment(int)*

public void setVerticalAlignment(int alignment)

Sets the vertical alignment of the icon and text. 


    alignment - one of the following values: 

SwingConstants.CENTER (the default) SwingConstants.TOP SwingConstants.BOTTOM 

*javax.swing.AbstractButton.setVerticalTextPosition(int)*

public void setVerticalTextPosition(int textPosition)

Sets the vertical position of the text relative to the icon. 


    textPosition - one of the following values: 

SwingConstants.CENTER (the default) SwingConstants.TOP SwingConstants.BOTTOM 

*javax.swing.AbstractButton.updateUI()*

public void updateUI()

Resets the UI property to a value from the current look and feel. Subtypes of AbstractButton should override this to update the UI. For example, JButton might do the following: 

setUI((ButtonUI)UIManager.getUI( "ButtonUI", "javax.swing.plaf.basic.BasicButtonUI", this)); 





*javax.sound.midi.MidiSystem* *MidiSystem* The MidiSystem class provides access 

public class MidiSystem
  extends    |java.lang.Object|

|javax.sound.midi.MidiSystem_Description|
|javax.sound.midi.MidiSystem_Fields|
|javax.sound.midi.MidiSystem_Constructors|
|javax.sound.midi.MidiSystem_Methods|

================================================================================

*javax.sound.midi.MidiSystem_Methods*
|javax.sound.midi.MidiSystem.getMidiDevice(MidiDevice.Info)|Obtains the request
|javax.sound.midi.MidiSystem.getMidiDeviceInfo()|Obtains an array of informatio
|javax.sound.midi.MidiSystem.getMidiFileFormat(File)|Obtains the MIDI file form
|javax.sound.midi.MidiSystem.getMidiFileFormat(InputStream)|Obtains the MIDI fi
|javax.sound.midi.MidiSystem.getMidiFileFormat(URL)|Obtains the MIDI file forma
|javax.sound.midi.MidiSystem.getMidiFileTypes()|Obtains the set of MIDI file ty
|javax.sound.midi.MidiSystem.getMidiFileTypes(Sequence)|Obtains the set of MIDI
|javax.sound.midi.MidiSystem.getReceiver()|Obtains a MIDI receiver from an exte
|javax.sound.midi.MidiSystem.getSequence(File)|Obtains a MIDI sequence from the
|javax.sound.midi.MidiSystem.getSequence(InputStream)|Obtains a MIDI sequence f
|javax.sound.midi.MidiSystem.getSequence(URL)|Obtains a MIDI sequence from the 
|javax.sound.midi.MidiSystem.getSequencer()|Obtains the default Sequencer, conn
|javax.sound.midi.MidiSystem.getSequencer(boolean)|Obtains the default Sequence
|javax.sound.midi.MidiSystem.getSoundbank(File)|Constructs a Soundbank by readi
|javax.sound.midi.MidiSystem.getSoundbank(InputStream)|Constructs a MIDI sound 
|javax.sound.midi.MidiSystem.getSoundbank(URL)|Constructs a Soundbank by readin
|javax.sound.midi.MidiSystem.getSynthesizer()|Obtains the default synthesizer.
|javax.sound.midi.MidiSystem.getTransmitter()|Obtains a MIDI transmitter from a
|javax.sound.midi.MidiSystem.isFileTypeSupported(int)|Indicates whether file wr
|javax.sound.midi.MidiSystem.isFileTypeSupported(int,Sequence)|Indicates whethe
|javax.sound.midi.MidiSystem.write(Sequence,int,File)|Writes a stream of bytes 
|javax.sound.midi.MidiSystem.write(Sequence,int,OutputStream)|Writes a stream o

*javax.sound.midi.MidiSystem_Description*

The MidiSystem class provides access to the installed MIDI system resources, 
including devices such as synthesizers, sequencers, and MIDI input and output 
ports. A typical simple MIDI application might begin by invoking one or more 
MidiSystem methods to learn what devices are installed and to obtain the ones 
needed in that application. 

The class also has methods for reading files, streams, and URLs that contain 
standard MIDI file data or soundbanks. You can query the MidiSystem for the 
format of a specified MIDI file. 

You cannot instantiate a MidiSystem; all the methods are static. 

Properties can be used to specify default MIDI devices. Both system properties 
and a properties file are considered. The properties file is 
lib/sound.properties in the JRE directory. If a property exists both as a 
system property and in the properties file, the system property takes 
precedence. If none is specified, a suitable default is chosen among the 
available devices. The syntax of the properties file is specified in 
Properties.load(|java.util.Properties|) . The following table lists the 
available property keys and which methods consider them: 



Property Key Interface Affected Method 

javax.sound.midi.Receiver (|javax.sound.midi.Receiver|) 
(|javax.sound.midi.MidiSystem|) 

javax.sound.midi.Sequencer (|javax.sound.midi.Sequencer|) 
(|javax.sound.midi.MidiSystem|) 

javax.sound.midi.Synthesizer (|javax.sound.midi.Synthesizer|) 
(|javax.sound.midi.MidiSystem|) 

javax.sound.midi.Transmitter (|javax.sound.midi.Transmitter|) 
(|javax.sound.midi.MidiSystem|) 



The property value consists of the provider class name and the device name, 
separated by the hash mark (#). The provider class name is the fully-qualified 
name of a concrete MIDI device 
provider(|javax.sound.midi.spi.MidiDeviceProvider|) class. The device name is 
matched against the String returned by the getName method of MidiDevice.Info. 
Either the class name, or the device name may be omitted. If only the class 
name is specified, the trailing hash mark is optional. 

If the provider class is specified, and it can be successully retrieved from 
the installed providers, the list of MidiDevice.Info objects is retrieved from 
the provider. Otherwise, or when these devices do not provide a subsequent 
match, the list is retrieved from (|javax.sound.midi.MidiSystem|) to contain 
all available MidiDevice.Info objects. 

If a device name is specified, the resulting list of MidiDevice.Info objects is 
searched: the first one with a matching name, and whose MidiDevice implements 
the respective interface, will be returned. If no matching MidiDevice.Info 
object is found, or the device name is not specified, the first suitable device 
from the resulting list will be returned. For Sequencer and Synthesizer, a 
device is suitable if it implements the respective interface; whereas for 
Receiver and Transmitter, a device is suitable if it implements neither 
Sequencer nor Synthesizer and provides at least one Receiver or Transmitter, 
respectively. 

For example, the property javax.sound.midi.Receiver with a value 
com.sun.media.sound.MidiProvider#SunMIDI1 will have the following consequences 
when getReceiver is called: if the class com.sun.media.sound.MidiProvider 
exists in the list of installed MIDI device providers, the first Receiver 
device with name SunMIDI1 will be returned. If it cannot be found, the first 
Receiver from that provider will be returned, regardless of name. If there is 
none, the first Receiver with name SunMIDI1 in the list of all devices (as 
returned by getMidiDeviceInfo) will be returned, or, if not found, the first 
Receiver that can be found in the list of all devices is returned. If that 
fails, too, a MidiUnavailableException is thrown. 


*javax.sound.midi.MidiSystem.getMidiDevice(MidiDevice.Info)*

public static |javax.sound.midi.MidiDevice| getMidiDevice(javax.sound.midi.MidiDevice.Info info)
  throws |javax.sound.midi.MidiUnavailableException|
         
Obtains the requested MIDI device. 

    info - a device information object representing the desired device. 

    Returns: the requested device 
*javax.sound.midi.MidiSystem.getMidiDeviceInfo()*

public static |javax.sound.midi.MidiDevice.Info| getMidiDeviceInfo()

Obtains an array of information objects representing the set of all MIDI 
devices available on the system. A returned information object can then be used 
to obtain the corresponding device object, by invoking 
getMidiDevice(|javax.sound.midi.MidiSystem|) . 


    Returns: an array of MidiDevice.Info objects, one for each installed MIDI device. If no 
             such devices are installed, an array of length 0 is returned. 
*javax.sound.midi.MidiSystem.getMidiFileFormat(File)*

public static |javax.sound.midi.MidiFileFormat| getMidiFileFormat(java.io.File file)
  throws |javax.sound.midi.InvalidMidiDataException|
         |java.io.IOException|
         
Obtains the MIDI file format of the specified File. The File must point to 
valid MIDI file data for a file type recognized by the system. 

This operation can only succeed for files of a type which can be parsed by an 
installed file reader. It may fail with an InvalidMidiDataException even for 
valid files if no compatible file reader is installed. It will also fail with 
an InvalidMidiDataException if a compatible file reader is installed, but 
encounters errors while determining the file format. 

    file - the File from which file format information should be extracted 

    Returns: a MidiFileFormat object describing the MIDI file format 
*javax.sound.midi.MidiSystem.getMidiFileFormat(InputStream)*

public static |javax.sound.midi.MidiFileFormat| getMidiFileFormat(java.io.InputStream stream)
  throws |javax.sound.midi.InvalidMidiDataException|
         |java.io.IOException|
         
Obtains the MIDI file format of the data in the specified input stream. The 
stream must point to valid MIDI file data for a file type recognized by the 
system. 

This method and/or the code it invokes may need to read some data from the 
stream to determine whether its data format is supported. The implementation 
may therefore need to mark the stream, read enough data to determine whether it 
is in a supported format, and reset the stream's read pointer to its original 
position. If the input stream does not permit this set of operations, this 
method may fail with an IOException. 

This operation can only succeed for files of a type which can be parsed by an 
installed file reader. It may fail with an InvalidMidiDataException even for 
valid files if no compatible file reader is installed. It will also fail with 
an InvalidMidiDataException if a compatible file reader is installed, but 
encounters errors while determining the file format. 

    stream - the input stream from which file format information should be extracted 

    Returns: an MidiFileFormat object describing the MIDI file format 
*javax.sound.midi.MidiSystem.getMidiFileFormat(URL)*

public static |javax.sound.midi.MidiFileFormat| getMidiFileFormat(java.net.URL url)
  throws |javax.sound.midi.InvalidMidiDataException|
         |java.io.IOException|
         
Obtains the MIDI file format of the data in the specified URL. The URL must 
point to valid MIDI file data for a file type recognized by the system. 

This operation can only succeed for files of a type which can be parsed by an 
installed file reader. It may fail with an InvalidMidiDataException even for 
valid files if no compatible file reader is installed. It will also fail with 
an InvalidMidiDataException if a compatible file reader is installed, but 
encounters errors while determining the file format. 

    url - the URL from which file format information should be extracted 

    Returns: a MidiFileFormat object describing the MIDI file format 
*javax.sound.midi.MidiSystem.getMidiFileTypes()*

public static int getMidiFileTypes()

Obtains the set of MIDI file types for which file writing support is provided 
by the system. 


    Returns: array of unique file types. If no file types are supported, an array of length 
             0 is returned. 
*javax.sound.midi.MidiSystem.getMidiFileTypes(Sequence)*

public static int getMidiFileTypes(javax.sound.midi.Sequence sequence)

Obtains the set of MIDI file types that the system can write from the sequence 
specified. 

    sequence - the sequence for which MIDI file type support is queried 

    Returns: the set of unique supported file types. If no file types are supported, returns 
             an array of length 0. 
*javax.sound.midi.MidiSystem.getReceiver()*

public static |javax.sound.midi.Receiver| getReceiver()
  throws |javax.sound.midi.MidiUnavailableException|
         
Obtains a MIDI receiver from an external MIDI port or other default device. 

If the system property javax.sound.midi.Receiver is defined or it is defined in 
the file sound.properties, it is used to identify the device that provides the 
default receiver. For details, refer to the class 
description(|javax.sound.midi.MidiSystem|) . 

If a suitable MIDI port is not available, the Receiver is retrieved from an 
installed synthesizer. 

If this method returns successfully, the 
MidiDevice(|javax.sound.midi.MidiDevice|) the Receiver belongs to is opened 
implicitly, if it is not already open. It is possible to close an implicitly 
opened device by calling close(|javax.sound.midi.Receiver|) on the returned 
Receiver. All open Receiver instances have to be closed in order to release 
system resources hold by the MidiDevice. For a detailed description of 
open/close behaviour see the class description of 
MidiDevice(|javax.sound.midi.MidiDevice|) . 


    Returns: the default MIDI receiver 
*javax.sound.midi.MidiSystem.getSequence(File)*

public static |javax.sound.midi.Sequence| getSequence(java.io.File file)
  throws |javax.sound.midi.InvalidMidiDataException|
         |java.io.IOException|
         
Obtains a MIDI sequence from the specified File. The File must point to valid 
MIDI file data for a file type recognized by the system. 

This operation can only succeed for files of a type which can be parsed by an 
installed file reader. It may fail with an InvalidMidiDataException even for 
valid files if no compatible file reader is installed. It will also fail with 
an InvalidMidiDataException if a compatible file reader is installed, but 
encounters errors while constructing the Sequence object from the file data. 

    file - the File from which the Sequence should be constructed 

    Returns: a Sequence object based on the MIDI file data pointed to by the File 
*javax.sound.midi.MidiSystem.getSequence(InputStream)*

public static |javax.sound.midi.Sequence| getSequence(java.io.InputStream stream)
  throws |javax.sound.midi.InvalidMidiDataException|
         |java.io.IOException|
         
Obtains a MIDI sequence from the specified input stream. The stream must point 
to valid MIDI file data for a file type recognized by the system. 

This method and/or the code it invokes may need to read some data from the 
stream to determine whether its data format is supported. The implementation 
may therefore need to mark the stream, read enough data to determine whether it 
is in a supported format, and reset the stream's read pointer to its original 
position. If the input stream does not permit this set of operations, this 
method may fail with an IOException. 

This operation can only succeed for files of a type which can be parsed by an 
installed file reader. It may fail with an InvalidMidiDataException even for 
valid files if no compatible file reader is installed. It will also fail with 
an InvalidMidiDataException if a compatible file reader is installed, but 
encounters errors while constructing the Sequence object from the file data. 

    stream - the input stream from which the Sequence should be constructed 

    Returns: a Sequence object based on the MIDI file data contained in the input stream 
*javax.sound.midi.MidiSystem.getSequence(URL)*

public static |javax.sound.midi.Sequence| getSequence(java.net.URL url)
  throws |javax.sound.midi.InvalidMidiDataException|
         |java.io.IOException|
         
Obtains a MIDI sequence from the specified URL. The URL must point to valid 
MIDI file data for a file type recognized by the system. 

This operation can only succeed for files of a type which can be parsed by an 
installed file reader. It may fail with an InvalidMidiDataException even for 
valid files if no compatible file reader is installed. It will also fail with 
an InvalidMidiDataException if a compatible file reader is installed, but 
encounters errors while constructing the Sequence object from the file data. 

    url - the URL from which the Sequence should be constructed 

    Returns: a Sequence object based on the MIDI file data pointed to by the URL 
*javax.sound.midi.MidiSystem.getSequencer()*

public static |javax.sound.midi.Sequencer| getSequencer()
  throws |javax.sound.midi.MidiUnavailableException|
         
Obtains the default Sequencer, connected to a default device. The returned 
Sequencer instance is connected to the default Synthesizer, as returned by 
(|javax.sound.midi.MidiSystem|) . If there is no Synthesizer available, or the 
default Synthesizer cannot be opened, the sequencer is connected to the default 
Receiver, as returned by (|javax.sound.midi.MidiSystem|) . The connection is 
made by retrieving a Transmitter instance from the Sequencer and setting its 
Receiver. Closing and re-opening the sequencer will restore the connection to 
the default device. 

This method is equivalent to calling getSequencer(true). 

If the system property javax.sound.midi.Sequencer is defined or it is defined 
in the file sound.properties, it is used to identify the default sequencer. For 
details, refer to the class description(|javax.sound.midi.MidiSystem|) . 


    Returns: the default sequencer, connected to a default Receiver 
*javax.sound.midi.MidiSystem.getSequencer(boolean)*

public static |javax.sound.midi.Sequencer| getSequencer(boolean connected)
  throws |javax.sound.midi.MidiUnavailableException|
         
Obtains the default Sequencer, optionally connected to a default device. 

If connected is true, the returned Sequencer instance is connected to the 
default Synthesizer, as returned by (|javax.sound.midi.MidiSystem|) . If there 
is no Synthesizer available, or the default Synthesizer cannot be opened, the 
sequencer is connected to the default Receiver, as returned by 
(|javax.sound.midi.MidiSystem|) . The connection is made by retrieving a 
Transmitter instance from the Sequencer and setting its Receiver. Closing and 
re-opening the sequencer will restore the connection to the default device. 

If connected is false, the returned Sequencer instance is not connected, it has 
no open Transmitters. In order to play the sequencer on a MIDI device, or a 
Synthesizer, it is necessary to get a Transmitter and set its Receiver. 

If the system property javax.sound.midi.Sequencer is defined or it is defined 
in the file "sound.properties", it is used to identify the default sequencer. 
For details, refer to the class description(|javax.sound.midi.MidiSystem|) . 


    Returns: the default sequencer 
*javax.sound.midi.MidiSystem.getSoundbank(File)*

public static |javax.sound.midi.Soundbank| getSoundbank(java.io.File file)
  throws |javax.sound.midi.InvalidMidiDataException|
         |java.io.IOException|
         
Constructs a Soundbank by reading it from the specified File. The File must 
point to a valid MIDI soundbank file. 

    file - the source of the sound bank data 

    Returns: the sound bank 
*javax.sound.midi.MidiSystem.getSoundbank(InputStream)*

public static |javax.sound.midi.Soundbank| getSoundbank(java.io.InputStream stream)
  throws |javax.sound.midi.InvalidMidiDataException|
         |java.io.IOException|
         
Constructs a MIDI sound bank by reading it from the specified stream. The 
stream must point to a valid MIDI soundbank file. In general, MIDI soundbank 
providers may need to read some data from the stream before determining whether 
they support it. These parsers must be able to mark the stream, read enough 
data to determine whether they support the stream, and, if not, reset the 
stream's read pointer to its original position. If the input stream does not 
support this, this method may fail with an IOException. 

    stream - the source of the sound bank data. 

    Returns: the sound bank 
*javax.sound.midi.MidiSystem.getSoundbank(URL)*

public static |javax.sound.midi.Soundbank| getSoundbank(java.net.URL url)
  throws |javax.sound.midi.InvalidMidiDataException|
         |java.io.IOException|
         
Constructs a Soundbank by reading it from the specified URL. The URL must point 
to a valid MIDI soundbank file. 

    url - the source of the sound bank data 

    Returns: the sound bank 
*javax.sound.midi.MidiSystem.getSynthesizer()*

public static |javax.sound.midi.Synthesizer| getSynthesizer()
  throws |javax.sound.midi.MidiUnavailableException|
         
Obtains the default synthesizer. 

If the system property javax.sound.midi.Synthesizer is defined or it is defined 
in the file sound.properties, it is used to identify the default synthesizer. 
For details, refer to the class description(|javax.sound.midi.MidiSystem|) . 


    Returns: the default synthesizer 
*javax.sound.midi.MidiSystem.getTransmitter()*

public static |javax.sound.midi.Transmitter| getTransmitter()
  throws |javax.sound.midi.MidiUnavailableException|
         
Obtains a MIDI transmitter from an external MIDI port or other default source. 

If the system property javax.sound.midi.Transmitter is defined or it is defined 
in the file sound.properties, it is used to identify the device that provides 
the default transmitter. For details, refer to the class 
description(|javax.sound.midi.MidiSystem|) . 

If this method returns successfully, the 
MidiDevice(|javax.sound.midi.MidiDevice|) the Transmitter belongs to is opened 
implicitly, if it is not already open. It is possible to close an implicitly 
opened device by calling close(|javax.sound.midi.Transmitter|) on the returned 
Transmitter. All open Transmitter instances have to be closed in order to 
release system resources hold by the MidiDevice. For a detailed description of 
open/close behaviour see the class description of 
MidiDevice(|javax.sound.midi.MidiDevice|) . 


    Returns: the default MIDI transmitter 
*javax.sound.midi.MidiSystem.isFileTypeSupported(int)*

public static boolean isFileTypeSupported(int fileType)

Indicates whether file writing support for the specified MIDI file type is 
provided by the system. 

    fileType - the file type for which write capabilities are queried 

    Returns: true if the file type is supported, otherwise false 
*javax.sound.midi.MidiSystem.isFileTypeSupported(int,Sequence)*

public static boolean isFileTypeSupported(
  int fileType,
  javax.sound.midi.Sequence sequence)

Indicates whether a MIDI file of the file type specified can be written from 
the sequence indicated. 

    fileType - the file type for which write capabilities are queried 
    sequence - the sequence for which file writing support is queried 

    Returns: true if the file type is supported for this sequence, otherwise false 
*javax.sound.midi.MidiSystem.write(Sequence,int,File)*

public static int write(
  javax.sound.midi.Sequence in,
  int type,
  java.io.File out)
  throws |java.io.IOException|
         
Writes a stream of bytes representing a file of the MIDI file type indicated to 
the external file provided. 

    in - sequence containing MIDI data to be written to the file 
    type - the file type of the file to be written to the output stream 
    out - external file to which the file data should be written 

    Returns: the number of bytes written to the file 
*javax.sound.midi.MidiSystem.write(Sequence,int,OutputStream)*

public static int write(
  javax.sound.midi.Sequence in,
  int fileType,
  java.io.OutputStream out)
  throws |java.io.IOException|
         
Writes a stream of bytes representing a file of the MIDI file type indicated to 
the output stream provided. 

    in - sequence containing MIDI data to be written to the file 
    fileType - the file type of the file to be written to the output stream 
    out - stream to which the file data should be written 

    Returns: the number of bytes written to the output stream 


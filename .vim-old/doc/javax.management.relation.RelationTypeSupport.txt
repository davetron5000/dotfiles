*javax.management.relation.RelationTypeSupport* *RelationTypeSupport* A Relation

public class RelationTypeSupport
  extends    |java.lang.Object|
  implements |javax.management.relation.RelationType|

|javax.management.relation.RelationTypeSupport_Description|
|javax.management.relation.RelationTypeSupport_Fields|
|javax.management.relation.RelationTypeSupport_Constructors|
|javax.management.relation.RelationTypeSupport_Methods|

================================================================================

*javax.management.relation.RelationTypeSupport_Constructors*
|javax.management.relation.RelationTypeSupport(String)|Constructor to be used f
|javax.management.relation.RelationTypeSupport(String,RoleInfo[])|Constructor w

*javax.management.relation.RelationTypeSupport_Methods*
|javax.management.relation.RelationTypeSupport.addRoleInfo(RoleInfo)|Add a role
|javax.management.relation.RelationTypeSupport.getRelationTypeName()|Returns th
|javax.management.relation.RelationTypeSupport.getRoleInfo(String)|Returns the 
|javax.management.relation.RelationTypeSupport.getRoleInfos()|Returns the list 

*javax.management.relation.RelationTypeSupport_Description*

A RelationTypeSupport object implements the RelationType interface. It 
represents a relation type, providing role information for each role expected 
to be supported in every relation of that type. 

A relation type includes a relation type name and a list of role infos 
(represented by RoleInfo objects). 

A relation type has to be declared in the Relation Service: - either using the 
createRelationType() method, where a RelationTypeSupport object will be created 
and kept in the Relation Service - either using the addRelationType() method 
where the user has to create an object implementing the RelationType interface, 
and this object will be used as representing a relation type in the Relation 
Service. 


*javax.management.relation.RelationTypeSupport(String)*

protected RelationTypeSupport(java.lang.String theRelTypeName)

Constructor to be used for subclasses. 

    theRelTypeName - Name of relation type. 

*javax.management.relation.RelationTypeSupport(String,RoleInfo[])*

public RelationTypeSupport(
  java.lang.String theRelTypeName,
  javax.management.relation.RoleInfo[] theRoleInfoArray)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.InvalidRelationTypeException|
         
Constructor where all role definitions are dynamically created and passed as 
parameter. 

    theRelTypeName - Name of relation type 
    theRoleInfoArray - List of role definitions (RoleInfo objects) 

*javax.management.relation.RelationTypeSupport.addRoleInfo(RoleInfo)*

protected void addRoleInfo(javax.management.relation.RoleInfo theRoleInfo)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.InvalidRelationTypeException|
         
Add a role info. This method of course should not be used after the creation of 
the relation type, because updating it would invalidate that the relations 
created associated to that type still conform to it. Can throw a 
RuntimeException if trying to update a relation type declared in the Relation 
Service. 

    theRoleInfo - role info to be added. 

*javax.management.relation.RelationTypeSupport.getRelationTypeName()*

public |java.lang.String| getRelationTypeName()

Returns the relation type name. 


    Returns: the relation type name. 
*javax.management.relation.RelationTypeSupport.getRoleInfo(String)*

public |javax.management.relation.RoleInfo| getRoleInfo(java.lang.String theRoleInfoName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RoleInfoNotFoundException|
         
Returns the role info (RoleInfo object) for the given role info name (null if 
not found). 

    theRoleInfoName - role info name 

    Returns: RoleInfo object providing role definition does not exist 
*javax.management.relation.RelationTypeSupport.getRoleInfos()*

public |java.util.List| getRoleInfos()

Returns the list of role definitions (ArrayList of RoleInfo objects). 




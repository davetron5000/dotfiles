*org.omg.CORBA.TypeCodeHolder* *TypeCodeHolder* The Holder for TypeCode.

public final class TypeCodeHolder
  extends    |java.lang.Object|
  implements |org.omg.CORBA.portable.Streamable|

|org.omg.CORBA.TypeCodeHolder_Description|
|org.omg.CORBA.TypeCodeHolder_Fields|
|org.omg.CORBA.TypeCodeHolder_Constructors|
|org.omg.CORBA.TypeCodeHolder_Methods|

================================================================================

*org.omg.CORBA.TypeCodeHolder_Fields*
|org.omg.CORBA.TypeCode_org.omg.CORBA.TypeCodeHolder.value|

*org.omg.CORBA.TypeCodeHolder_Constructors*
|org.omg.CORBA.TypeCodeHolder()|Constructs a new TypeCodeHolder object with its
|org.omg.CORBA.TypeCodeHolder(TypeCode)|Constructs a new TypeCodeHolder object 

*org.omg.CORBA.TypeCodeHolder_Methods*
|org.omg.CORBA.TypeCodeHolder._read(InputStream)|Reads from input and initalize
|org.omg.CORBA.TypeCodeHolder._type()|Returns the TypeCode corresponding to the
|org.omg.CORBA.TypeCodeHolder._write(OutputStream)|Marshals to output the value

*org.omg.CORBA.TypeCodeHolder_Description*

The Holder for TypeCode. For more information on Holder files, see "Generated 
Files: Holder Files". A Holder class for a TypeCode object that is used to 
store "out" and "inout" parameters in IDL operations. If an IDL operation 
signature has an IDL TypeCode as an "out" or "inout" parameter, the programmer 
must pass an instance of TypeCodeHolder as the corresponding parameter in the 
method invocation; for "inout" parameters, the programmer must also fill the 
"in" value to be sent to the server. Before the method invocation returns, the 
ORB will fill in the value corresponding to the "out" value returned from the 
server. 

If myTypeCodeHolder is an instance of TypeCodeHolder, the value stored in its 
value field can be accessed with myTypeCodeHolder.value. 


*org.omg.CORBA.TypeCode_org.omg.CORBA.TypeCodeHolder.value*

The Holder for TypeCode. For more information on Holder files, see "Generated 
Files: Holder Files". A Holder class for a TypeCode object that is used to 
store "out" and "inout" parameters in IDL operations. If an IDL operation 
signature has an IDL TypeCode as an "out" or "inout" parameter, the programmer 
must pass an instance of TypeCodeHolder as the corresponding parameter in the 
method invocation; for "inout" parameters, the programmer must also fill the 
"in" value to be sent to the server. Before the method invocation returns, the 
ORB will fill in the value corresponding to the "out" value returned from the 
server. 

If myTypeCodeHolder is an instance of TypeCodeHolder, the value stored in its 
value field can be accessed with myTypeCodeHolder.value. 



*org.omg.CORBA.TypeCodeHolder()*

public TypeCodeHolder()

Constructs a new TypeCodeHolder object with its value field initialized to 
null. 


*org.omg.CORBA.TypeCodeHolder(TypeCode)*

public TypeCodeHolder(org.omg.CORBA.TypeCode initial)

Constructs a new TypeCodeHolder object with its value field initialized to the 
given TypeCode object. 

    initial - the TypeCode object with which to initialize the value field of the 
       newly-created TypeCodeHolder object 

*org.omg.CORBA.TypeCodeHolder._read(InputStream)*

public void _read(org.omg.CORBA.portable.InputStream input)

Reads from input and initalizes the value in this TypeCodeHolder object with 
the unmarshalled data. 

    input - the InputStream containing CDR formatted data from the wire 

*org.omg.CORBA.TypeCodeHolder._type()*

public |org.omg.CORBA.TypeCode| _type()

Returns the TypeCode corresponding to the value held in this TypeCodeHolder 
object. 


    Returns: the TypeCode of the value held in this TypeCodeHolder object 
*org.omg.CORBA.TypeCodeHolder._write(OutputStream)*

public void _write(org.omg.CORBA.portable.OutputStream output)

Marshals to output the value in this TypeCodeHolder object. 

    output - the OutputStream which will contain the CDR formatted data 



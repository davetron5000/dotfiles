*javax.swing.plaf.metal.MetalRootPaneUI* *MetalRootPaneUI* Provides the metal look and feel implementation of RootPaneUI.

public class MetalRootPaneUI
  extends    |javax.swing.plaf.basic.BasicRootPaneUI|

|javax.swing.plaf.metal.MetalRootPaneUI_Description|
|javax.swing.plaf.metal.MetalRootPaneUI_Fields|
|javax.swing.plaf.metal.MetalRootPaneUI_Constructors|
|javax.swing.plaf.metal.MetalRootPaneUI_Methods|

====================================================================================================================================================================================

*javax.swing.plaf.metal.MetalRootPaneUI_Constructors*
|javax.swing.plaf.metal.MetalRootPaneUI()|

*javax.swing.plaf.metal.MetalRootPaneUI_Methods*
|javax.swing.plaf.metal.MetalRootPaneUI.createUI(JComponent)|Creates a UI for a JRootPane.
|javax.swing.plaf.metal.MetalRootPaneUI.installUI(JComponent)|Invokes supers implementation of installUI to install  the necessary state onto the passed in JRootPane  to render th
|javax.swing.plaf.metal.MetalRootPaneUI.propertyChange(PropertyChangeEvent)|Invoked when a property changes.
|javax.swing.plaf.metal.MetalRootPaneUI.uninstallUI(JComponent)|Invokes supers implementation to uninstall any of its state.

*javax.swing.plaf.metal.MetalRootPaneUI_Description*

Provides the metal look and feel implementation of RootPaneUI. 

MetalRootPaneUI provides support for the windowDecorationStyle property of JRootPane. MetalRootPaneUI does this by way of installing a custom LayoutManager, a private Component to 
render the appropriate widgets, and a private Border. The LayoutManager is always installed, regardless of the value of the windowDecorationStyle property, but the Border and 
Component are only installed/added if the windowDecorationStyle is other than JRootPane.NONE. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.plaf.metal.MetalRootPaneUI()*

public MetalRootPaneUI()




*javax.swing.plaf.metal.MetalRootPaneUI.createUI(JComponent)*

public static |javax.swing.plaf.ComponentUI| createUI(javax.swing.JComponent c)

Creates a UI for a JRootPane. 


    c - the JRootPane the RootPaneUI will be created for 

    Returns: the RootPaneUI implementation for the passed in JRootPane 

*javax.swing.plaf.metal.MetalRootPaneUI.installUI(JComponent)*

public void installUI(javax.swing.JComponent c)

Invokes supers implementation of installUI to install the necessary state onto the passed in JRootPane to render the metal look and feel implementation of RootPaneUI. If the 
windowDecorationStyle property of the JRootPane is other than JRootPane.NONE, this will add a custom Component to render the widgets to JRootPane, as well as installing a custom 
Border and LayoutManager on the JRootPane. 


    c - the JRootPane to install state onto 

*javax.swing.plaf.metal.MetalRootPaneUI.propertyChange(PropertyChangeEvent)*

public void propertyChange(java.beans.PropertyChangeEvent e)

Invoked when a property changes. MetalRootPaneUI is primarily interested in events originating from the JRootPane it has been installed on identifying the property 
windowDecorationStyle. If the windowDecorationStyle has changed to a value other than JRootPane.NONE, this will add a Component to the JRootPane to render the window decorations, 
as well as installing a Border on the JRootPane. On the other hand, if the windowDecorationStyle has changed to JRootPane.NONE, this will remove the Component that has been added 
to the JRootPane as well resetting the Border to what it was before installUI was invoked. 


    e - A PropertyChangeEvent object describing the event source and the property that has changed. 

*javax.swing.plaf.metal.MetalRootPaneUI.uninstallUI(JComponent)*

public void uninstallUI(javax.swing.JComponent c)

Invokes supers implementation to uninstall any of its state. This will also reset the LayoutManager of the JRootPane. If a Component has been added to the JRootPane to render the 
window decoration style, this method will remove it. Similarly, this will revert the Border and LayoutManager of the JRootPane to what it was before installUI was invoked. 


    c - the JRootPane to uninstall state from 



*org.xml.sax.Attributes* *Attributes* Interface for a list of XML attributes.

public interface interface Attributes


|org.xml.sax.Attributes_Description|
|org.xml.sax.Attributes_Fields|
|org.xml.sax.Attributes_Constructors|
|org.xml.sax.Attributes_Methods|

================================================================================

*org.xml.sax.Attributes_Methods*
|org.xml.sax.Attributes.getIndex(String)|Look up the index of an attribute by X
|org.xml.sax.Attributes.getIndex(String,String)|Look up the index of an attribu
|org.xml.sax.Attributes.getLength()|Return the number of attributes in the list
|org.xml.sax.Attributes.getLocalName(int)|Look up an attribute's local name by 
|org.xml.sax.Attributes.getQName(int)|Look up an attribute's XML qualified (pre
|org.xml.sax.Attributes.getType(int)|Look up an attribute's type by index.
|org.xml.sax.Attributes.getType(String)|Look up an attribute's type by XML qual
|org.xml.sax.Attributes.getType(String,String)|Look up an attribute's type by N
|org.xml.sax.Attributes.getURI(int)|Look up an attribute's Namespace URI by ind
|org.xml.sax.Attributes.getValue(int)|Look up an attribute's value by index.
|org.xml.sax.Attributes.getValue(String)|Look up an attribute's value by XML qu
|org.xml.sax.Attributes.getValue(String,String)|Look up an attribute's value by

*org.xml.sax.Attributes_Description*

Interface for a list of XML attributes. 

This module, both source code and documentation, is in the Public Domain, and 
comes with NO WARRANTY. See http://www.saxproject.org for further information. 

This interface allows access to a list of attributes in three different ways: 

by attribute index; by Namespace-qualified name; or by qualified (prefixed) 
name. 

The list will not contain attributes that were declared #IMPLIED but not 
specified in the start tag. It will also not contain attributes used as 
Namespace declarations (xmlns*) unless the 
http://xml.org/sax/features/namespace-prefixes feature is set to true (it is 
false by default). Because SAX2 conforms to the original "Namespaces in XML" 
recommendation, it normally does not give namespace declaration attributes a 
namespace URI. 

Some SAX2 parsers may support using an optional feature flag 
(http://xml.org/sax/features/xmlns-uris) to request that those attributes be 
given URIs, conforming to a later backwards-incompatible revision of that 
recommendation. (The attribute's "local name" will be the prefix, or "xmlns" 
when defining a default element namespace.) For portability, handler code 
should always resolve that conflict, rather than requiring parsers that can 
change the setting of that feature flag. 

If the namespace-prefixes feature (see above) is false, access by qualified 
name may not be available; if the http://xml.org/sax/features/namespaces 
feature is false, access by Namespace-qualified names may not be available. 

This interface replaces the now-deprecated SAX1 
AttributeList(|org.xml.sax.AttributeList|) interface, which does not contain 
Namespace support. In addition to Namespace support, it adds the getIndex 
methods (below). 

The order of attributes in the list is unspecified, and will vary from 
implementation to implementation. 


*org.xml.sax.Attributes.getIndex(String)*

public int getIndex(java.lang.String qName)

Look up the index of an attribute by XML qualified (prefixed) name. 

    qName - The qualified (prefixed) name. 

    Returns: The index of the attribute, or -1 if it does not appear in the list. 
*org.xml.sax.Attributes.getIndex(String,String)*

public int getIndex(
  java.lang.String uri,
  java.lang.String localName)

Look up the index of an attribute by Namespace name. 

    uri - The Namespace URI, or the empty string if the name has no Namespace URI. 
    localName - The attribute's local name. 

    Returns: The index of the attribute, or -1 if it does not appear in the list. 
*org.xml.sax.Attributes.getLength()*

public int getLength()

Return the number of attributes in the list. 

Once you know the number of attributes, you can iterate through the list. 


    Returns: The number of attributes in the list. 
*org.xml.sax.Attributes.getLocalName(int)*

public |java.lang.String| getLocalName(int index)

Look up an attribute's local name by index. 

    index - The attribute index (zero-based). 

    Returns: The local name, or the empty string if Namespace processing is not being 
             performed, or null if the index is out of range. 
*org.xml.sax.Attributes.getQName(int)*

public |java.lang.String| getQName(int index)

Look up an attribute's XML qualified (prefixed) name by index. 

    index - The attribute index (zero-based). 

    Returns: The XML qualified name, or the empty string if none is available, or null if 
             the index is out of range. 
*org.xml.sax.Attributes.getType(int)*

public |java.lang.String| getType(int index)

Look up an attribute's type by index. 

The attribute type is one of the strings "CDATA", "ID", "IDREF", "IDREFS", 
"NMTOKEN", "NMTOKENS", "ENTITY", "ENTITIES", or "NOTATION" (always in upper 
case). 

If the parser has not read a declaration for the attribute, or if the parser 
does not report attribute types, then it must return the value "CDATA" as 
stated in the XML 1.0 Recommendation (clause 3.3.3, "Attribute-Value 
Normalization"). 

For an enumerated attribute that is not a notation, the parser will report the 
type as "NMTOKEN". 

    index - The attribute index (zero-based). 

    Returns: The attribute's type as a string, or null if the index is out of range. 
*org.xml.sax.Attributes.getType(String)*

public |java.lang.String| getType(java.lang.String qName)

Look up an attribute's type by XML qualified (prefixed) name. 

See getType(int)(|org.xml.sax.Attributes|) for a description of the possible 
types. 

    qName - The XML qualified name. 

    Returns: The attribute type as a string, or null if the attribute is not in the list or 
             if qualified names are not available. 
*org.xml.sax.Attributes.getType(String,String)*

public |java.lang.String| getType(
  java.lang.String uri,
  java.lang.String localName)

Look up an attribute's type by Namespace name. 

See getType(int)(|org.xml.sax.Attributes|) for a description of the possible 
types. 

    uri - The Namespace URI, or the empty String if the name has no Namespace URI. 
    localName - The local name of the attribute. 

    Returns: The attribute type as a string, or null if the attribute is not in the list or 
             if Namespace processing is not being performed. 
*org.xml.sax.Attributes.getURI(int)*

public |java.lang.String| getURI(int index)

Look up an attribute's Namespace URI by index. 

    index - The attribute index (zero-based). 

    Returns: The Namespace URI, or the empty string if none is available, or null if the 
             index is out of range. 
*org.xml.sax.Attributes.getValue(int)*

public |java.lang.String| getValue(int index)

Look up an attribute's value by index. 

If the attribute value is a list of tokens (IDREFS, ENTITIES, or NMTOKENS), the 
tokens will be concatenated into a single string with each token separated by a 
single space. 

    index - The attribute index (zero-based). 

    Returns: The attribute's value as a string, or null if the index is out of range. 
*org.xml.sax.Attributes.getValue(String)*

public |java.lang.String| getValue(java.lang.String qName)

Look up an attribute's value by XML qualified (prefixed) name. 

See getValue(int)(|org.xml.sax.Attributes|) for a description of the possible 
values. 

    qName - The XML qualified name. 

    Returns: The attribute value as a string, or null if the attribute is not in the list or 
             if qualified names are not available. 
*org.xml.sax.Attributes.getValue(String,String)*

public |java.lang.String| getValue(
  java.lang.String uri,
  java.lang.String localName)

Look up an attribute's value by Namespace name. 

See getValue(int)(|org.xml.sax.Attributes|) for a description of the possible 
values. 

    uri - The Namespace URI, or the empty String if the name has no Namespace URI. 
    localName - The local name of the attribute. 

    Returns: The attribute value as a string, or null if the attribute is not in the list. 


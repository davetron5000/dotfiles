*org.omg.CORBA.IRObjectOperations* *IRObjectOperations* This is the Operations i

public interface interface IRObjectOperations


|org.omg.CORBA.IRObjectOperations_Description|
|org.omg.CORBA.IRObjectOperations_Fields|
|org.omg.CORBA.IRObjectOperations_Constructors|
|org.omg.CORBA.IRObjectOperations_Methods|

================================================================================

*org.omg.CORBA.IRObjectOperations_Methods*
|org.omg.CORBA.IRObjectOperations.def_kind()|Returns the DefinitionKind corresp
|org.omg.CORBA.IRObjectOperations.destroy()|Destroys this object.

*org.omg.CORBA.IRObjectOperations_Description*

This is the Operations interface for the mapping from IRObject. Several 
interfaces are used as base interfaces for objects in the Interface Repository 
(IR). These base interfaces are not instantiable. A common set of operations is 
used to locate objects within the Interface Repository. Some of these 
operations are defined in the IRObject. All IR objects inherit from the 
IRObject interface, which provides an operation for identifying the actual type 
of the object. (The IDL base interface IRObject represents the most generic 
interface from which all other Interface Repository interfaces are derived, 
even the Repository itself.) All java implementations of IR objects must 
implement the IRObjectOperations interface. 


*org.omg.CORBA.IRObjectOperations.def_kind()*

public |org.omg.CORBA.DefinitionKind| def_kind()

Returns the DefinitionKind corresponding to this Interface Repository object. 


    Returns: the DefinitionKind corresponding to this Interface Repository object. 
*org.omg.CORBA.IRObjectOperations.destroy()*

public void destroy()

Destroys this object. If the object is a Container, this method is applied to 
all its contents. If the object contains an IDLType attribute for an anonymous 
type, that IDLType is destroyed. If the object is currently contained in some 
other object, it is removed. If the method is invoked on a Repository or on a 
PrimitiveDef then the BAD_INV_ORDER exception is raised with minor value 2. An 
attempt to destroy an object that would leave the repository in an incoherent 
state causes BAD_INV_ORDER exception to be raised with the minor code 1. 




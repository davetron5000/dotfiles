*javax.management.remote.JMXConnectorFactory* *JMXConnectorFactory* Factory to c

public class JMXConnectorFactory
  extends    |java.lang.Object|

|javax.management.remote.JMXConnectorFactory_Description|
|javax.management.remote.JMXConnectorFactory_Fields|
|javax.management.remote.JMXConnectorFactory_Constructors|
|javax.management.remote.JMXConnectorFactory_Methods|

================================================================================

*javax.management.remote.JMXConnectorFactory_Fields*
|java.lang.String_javax.management.remote.JMXConnectorFactory.DEFAULT_CLASS_LOADER|
|java.lang.String_javax.management.remote.JMXConnectorFactory.PROTOCOL_PROVIDER_CLASS_LOADER|
|java.lang.String_javax.management.remote.JMXConnectorFactory.PROTOCOL_PROVIDER_PACKAGES|

*javax.management.remote.JMXConnectorFactory_Methods*
|javax.management.remote.JMXConnectorFactory.connect(JMXServiceURL)|Creates a c
|javax.management.remote.JMXConnectorFactory.connect(JMXServiceURL,Map)|Creates
|javax.management.remote.JMXConnectorFactory.newJMXConnector(JMXServiceURL,Map)|

*javax.management.remote.JMXConnectorFactory_Description*

Factory to create JMX API connector clients. There are no instances of this 
class. 

Connections are usually made using the 
connect(|javax.management.remote.JMXConnectorFactory|) method of this class. 
More advanced applications can separate the creation of the connector client, 
using newJMXConnector(|javax.management.remote.JMXConnectorFactory|) and the 
establishment of the connection itself, using 
(|javax.management.remote.JMXConnector|) . 

Each client is created by an instance of 
(|javax.management.remote.JMXConnectorProvider|) . This instance is found as 
follows. Suppose the given (|javax.management.remote.JMXServiceURL|) looks like 
"service:jmx:protocol:remainder". Then the factory will attempt to find the 
appropriate (|javax.management.remote.JMXConnectorProvider|) for protocol. Each 
occurrence of the character + or - in protocol is replaced by . or _, 
respectively. 

A provider package list is searched for as follows: 



If the environment parameter to 
newJMXConnector(|javax.management.remote.JMXConnectorFactory|) contains the key 
jmx.remote.protocol.provider.pkgs then the associated value is the provider 
package list. 

Otherwise, if the system property jmx.remote.protocol.provider.pkgs exists, 
then its value is the provider package list. 

Otherwise, there is no provider package list. 



The provider package list is a string that is interpreted as a list of 
non-empty Java package names separated by vertical bars (|). If the string is 
empty, then so is the provider package list. If the provider package list is 
not a String, or if it contains an element that is an empty string, a 
(|javax.management.remote.JMXProviderException|) is thrown. 

If the provider package list exists and is not empty, then for each element pkg 
of the list, the factory will attempt to load the class 

pkg.protocol.ClientProvider 

If the environment parameter to 
newJMXConnector(|javax.management.remote.JMXConnectorFactory|) contains the key 
jmx.remote.protocol.provider.class.loader then the associated value is the 
class loader to use to load the provider. If the associated value is not an 
instance of (|java.lang.ClassLoader|) , an 
(|java.lang.IllegalArgumentException|) is thrown. 

If the jmx.remote.protocol.provider.class.loader key is not present in the 
environment parameter, the calling thread's context class loader is used. 

If the attempt to load this class produces a 
(|java.lang.ClassNotFoundException|) , the search for a handler continues with 
the next element of the list. 

Otherwise, a problem with the provider found is signalled by a 
(|javax.management.remote.JMXProviderException|) whose 
<em>cause</em>(|javax.management.remote.JMXProviderException|) indicates the 
underlying exception, as follows: 



if the attempt to load the class produces an exception other than 
ClassNotFoundException, that is the cause; 

if (|java.lang.Class|) for the class produces an exception, that is the cause. 



If no provider is found by the above steps, including the default case where 
there is no provider package list, then the implementation will use its own 
provider for protocol, or it will throw a MalformedURLException if there is 
none. An implementation may choose to find providers by other means. For 
example, it may support the JAR conventions for service providers, where the 
service interface is JMXConnectorProvider. 

Every implementation must support the RMI connector protocols, specified with 
the string rmi or iiop. 

Once a provider is found, the result of the newJMXConnector method is the 
result of calling 
newJMXConnector(|javax.management.remote.JMXConnectorProvider|) on the 
provider. 

The Map parameter passed to the JMXConnectorProvider is a new read-only Map 
that contains all the entries that were in the environment parameter to 
JMXConnectorFactory.newJMXConnector(|javax.management.remote.JMXConnectorFactory|)
, if there was one. Additionally, if the 
jmx.remote.protocol.provider.class.loader key is not present in the environment 
parameter, it is added to the new read-only Map. The associated value is the 
calling thread's context class loader. 


*java.lang.String_javax.management.remote.JMXConnectorFactory.DEFAULT_CLASS_LOADER*

Factory to create JMX API connector clients. There are no instances of this 
class. 

Connections are usually made using the 
connect(|javax.management.remote.JMXConnectorFactory|) method of this class. 
More advanced applications can separate the creation of the connector client, 
using newJMXConnector(|javax.management.remote.JMXConnectorFactory|) and the 
establishment of the connection itself, using 
(|javax.management.remote.JMXConnector|) . 

Each client is created by an instance of 
(|javax.management.remote.JMXConnectorProvider|) . This instance is found as 
follows. Suppose the given (|javax.management.remote.JMXServiceURL|) looks like 
"service:jmx:protocol:remainder". Then the factory will attempt to find the 
appropriate (|javax.management.remote.JMXConnectorProvider|) for protocol. Each 
occurrence of the character + or - in protocol is replaced by . or _, 
respectively. 

A provider package list is searched for as follows: 



If the environment parameter to 
newJMXConnector(|javax.management.remote.JMXConnectorFactory|) contains the key 
jmx.remote.protocol.provider.pkgs then the associated value is the provider 
package list. 

Otherwise, if the system property jmx.remote.protocol.provider.pkgs exists, 
then its value is the provider package list. 

Otherwise, there is no provider package list. 



The provider package list is a string that is interpreted as a list of 
non-empty Java package names separated by vertical bars (|). If the string is 
empty, then so is the provider package list. If the provider package list is 
not a String, or if it contains an element that is an empty string, a 
(|javax.management.remote.JMXProviderException|) is thrown. 

If the provider package list exists and is not empty, then for each element pkg 
of the list, the factory will attempt to load the class 

pkg.protocol.ClientProvider 

If the environment parameter to 
newJMXConnector(|javax.management.remote.JMXConnectorFactory|) contains the key 
jmx.remote.protocol.provider.class.loader then the associated value is the 
class loader to use to load the provider. If the associated value is not an 
instance of (|java.lang.ClassLoader|) , an 
(|java.lang.IllegalArgumentException|) is thrown. 

If the jmx.remote.protocol.provider.class.loader key is not present in the 
environment parameter, the calling thread's context class loader is used. 

If the attempt to load this class produces a 
(|java.lang.ClassNotFoundException|) , the search for a handler continues with 
the next element of the list. 

Otherwise, a problem with the provider found is signalled by a 
(|javax.management.remote.JMXProviderException|) whose 
<em>cause</em>(|javax.management.remote.JMXProviderException|) indicates the 
underlying exception, as follows: 



if the attempt to load the class produces an exception other than 
ClassNotFoundException, that is the cause; 

if (|java.lang.Class|) for the class produces an exception, that is the cause. 



If no provider is found by the above steps, including the default case where 
there is no provider package list, then the implementation will use its own 
provider for protocol, or it will throw a MalformedURLException if there is 
none. An implementation may choose to find providers by other means. For 
example, it may support the JAR conventions for service providers, where the 
service interface is JMXConnectorProvider. 

Every implementation must support the RMI connector protocols, specified with 
the string rmi or iiop. 

Once a provider is found, the result of the newJMXConnector method is the 
result of calling 
newJMXConnector(|javax.management.remote.JMXConnectorProvider|) on the 
provider. 

The Map parameter passed to the JMXConnectorProvider is a new read-only Map 
that contains all the entries that were in the environment parameter to 
JMXConnectorFactory.newJMXConnector(|javax.management.remote.JMXConnectorFactory|)
, if there was one. Additionally, if the 
jmx.remote.protocol.provider.class.loader key is not present in the environment 
parameter, it is added to the new read-only Map. The associated value is the 
calling thread's context class loader. 


*java.lang.String_javax.management.remote.JMXConnectorFactory.PROTOCOL_PROVIDER_CLASS_LOADER*

Factory to create JMX API connector clients. There are no instances of this 
class. 

Connections are usually made using the 
connect(|javax.management.remote.JMXConnectorFactory|) method of this class. 
More advanced applications can separate the creation of the connector client, 
using newJMXConnector(|javax.management.remote.JMXConnectorFactory|) and the 
establishment of the connection itself, using 
(|javax.management.remote.JMXConnector|) . 

Each client is created by an instance of 
(|javax.management.remote.JMXConnectorProvider|) . This instance is found as 
follows. Suppose the given (|javax.management.remote.JMXServiceURL|) looks like 
"service:jmx:protocol:remainder". Then the factory will attempt to find the 
appropriate (|javax.management.remote.JMXConnectorProvider|) for protocol. Each 
occurrence of the character + or - in protocol is replaced by . or _, 
respectively. 

A provider package list is searched for as follows: 



If the environment parameter to 
newJMXConnector(|javax.management.remote.JMXConnectorFactory|) contains the key 
jmx.remote.protocol.provider.pkgs then the associated value is the provider 
package list. 

Otherwise, if the system property jmx.remote.protocol.provider.pkgs exists, 
then its value is the provider package list. 

Otherwise, there is no provider package list. 



The provider package list is a string that is interpreted as a list of 
non-empty Java package names separated by vertical bars (|). If the string is 
empty, then so is the provider package list. If the provider package list is 
not a String, or if it contains an element that is an empty string, a 
(|javax.management.remote.JMXProviderException|) is thrown. 

If the provider package list exists and is not empty, then for each element pkg 
of the list, the factory will attempt to load the class 

pkg.protocol.ClientProvider 

If the environment parameter to 
newJMXConnector(|javax.management.remote.JMXConnectorFactory|) contains the key 
jmx.remote.protocol.provider.class.loader then the associated value is the 
class loader to use to load the provider. If the associated value is not an 
instance of (|java.lang.ClassLoader|) , an 
(|java.lang.IllegalArgumentException|) is thrown. 

If the jmx.remote.protocol.provider.class.loader key is not present in the 
environment parameter, the calling thread's context class loader is used. 

If the attempt to load this class produces a 
(|java.lang.ClassNotFoundException|) , the search for a handler continues with 
the next element of the list. 

Otherwise, a problem with the provider found is signalled by a 
(|javax.management.remote.JMXProviderException|) whose 
<em>cause</em>(|javax.management.remote.JMXProviderException|) indicates the 
underlying exception, as follows: 



if the attempt to load the class produces an exception other than 
ClassNotFoundException, that is the cause; 

if (|java.lang.Class|) for the class produces an exception, that is the cause. 



If no provider is found by the above steps, including the default case where 
there is no provider package list, then the implementation will use its own 
provider for protocol, or it will throw a MalformedURLException if there is 
none. An implementation may choose to find providers by other means. For 
example, it may support the JAR conventions for service providers, where the 
service interface is JMXConnectorProvider. 

Every implementation must support the RMI connector protocols, specified with 
the string rmi or iiop. 

Once a provider is found, the result of the newJMXConnector method is the 
result of calling 
newJMXConnector(|javax.management.remote.JMXConnectorProvider|) on the 
provider. 

The Map parameter passed to the JMXConnectorProvider is a new read-only Map 
that contains all the entries that were in the environment parameter to 
JMXConnectorFactory.newJMXConnector(|javax.management.remote.JMXConnectorFactory|)
, if there was one. Additionally, if the 
jmx.remote.protocol.provider.class.loader key is not present in the environment 
parameter, it is added to the new read-only Map. The associated value is the 
calling thread's context class loader. 


*java.lang.String_javax.management.remote.JMXConnectorFactory.PROTOCOL_PROVIDER_PACKAGES*

Factory to create JMX API connector clients. There are no instances of this 
class. 

Connections are usually made using the 
connect(|javax.management.remote.JMXConnectorFactory|) method of this class. 
More advanced applications can separate the creation of the connector client, 
using newJMXConnector(|javax.management.remote.JMXConnectorFactory|) and the 
establishment of the connection itself, using 
(|javax.management.remote.JMXConnector|) . 

Each client is created by an instance of 
(|javax.management.remote.JMXConnectorProvider|) . This instance is found as 
follows. Suppose the given (|javax.management.remote.JMXServiceURL|) looks like 
"service:jmx:protocol:remainder". Then the factory will attempt to find the 
appropriate (|javax.management.remote.JMXConnectorProvider|) for protocol. Each 
occurrence of the character + or - in protocol is replaced by . or _, 
respectively. 

A provider package list is searched for as follows: 



If the environment parameter to 
newJMXConnector(|javax.management.remote.JMXConnectorFactory|) contains the key 
jmx.remote.protocol.provider.pkgs then the associated value is the provider 
package list. 

Otherwise, if the system property jmx.remote.protocol.provider.pkgs exists, 
then its value is the provider package list. 

Otherwise, there is no provider package list. 



The provider package list is a string that is interpreted as a list of 
non-empty Java package names separated by vertical bars (|). If the string is 
empty, then so is the provider package list. If the provider package list is 
not a String, or if it contains an element that is an empty string, a 
(|javax.management.remote.JMXProviderException|) is thrown. 

If the provider package list exists and is not empty, then for each element pkg 
of the list, the factory will attempt to load the class 

pkg.protocol.ClientProvider 

If the environment parameter to 
newJMXConnector(|javax.management.remote.JMXConnectorFactory|) contains the key 
jmx.remote.protocol.provider.class.loader then the associated value is the 
class loader to use to load the provider. If the associated value is not an 
instance of (|java.lang.ClassLoader|) , an 
(|java.lang.IllegalArgumentException|) is thrown. 

If the jmx.remote.protocol.provider.class.loader key is not present in the 
environment parameter, the calling thread's context class loader is used. 

If the attempt to load this class produces a 
(|java.lang.ClassNotFoundException|) , the search for a handler continues with 
the next element of the list. 

Otherwise, a problem with the provider found is signalled by a 
(|javax.management.remote.JMXProviderException|) whose 
<em>cause</em>(|javax.management.remote.JMXProviderException|) indicates the 
underlying exception, as follows: 



if the attempt to load the class produces an exception other than 
ClassNotFoundException, that is the cause; 

if (|java.lang.Class|) for the class produces an exception, that is the cause. 



If no provider is found by the above steps, including the default case where 
there is no provider package list, then the implementation will use its own 
provider for protocol, or it will throw a MalformedURLException if there is 
none. An implementation may choose to find providers by other means. For 
example, it may support the JAR conventions for service providers, where the 
service interface is JMXConnectorProvider. 

Every implementation must support the RMI connector protocols, specified with 
the string rmi or iiop. 

Once a provider is found, the result of the newJMXConnector method is the 
result of calling 
newJMXConnector(|javax.management.remote.JMXConnectorProvider|) on the 
provider. 

The Map parameter passed to the JMXConnectorProvider is a new read-only Map 
that contains all the entries that were in the environment parameter to 
JMXConnectorFactory.newJMXConnector(|javax.management.remote.JMXConnectorFactory|)
, if there was one. Additionally, if the 
jmx.remote.protocol.provider.class.loader key is not present in the environment 
parameter, it is added to the new read-only Map. The associated value is the 
calling thread's context class loader. 



*javax.management.remote.JMXConnectorFactory.connect(JMXServiceURL)*

public static |javax.management.remote.JMXConnector| connect(javax.management.remote.JMXServiceURL serviceURL)
  throws |java.io.IOException|
         
Creates a connection to the connector server at the given address. 

This method is equivalent to connect(serviceURL, 
null)(|javax.management.remote.JMXConnectorFactory|) . 

    serviceURL - the address of the connector server to connect to. 

    Returns: a JMXConnector whose {@link JMXConnector#connect connect} method has been 
             called. 
*javax.management.remote.JMXConnectorFactory.connect(JMXServiceURL,Map)*

public static |javax.management.remote.JMXConnector| connect(
  javax.management.remote.JMXServiceURL serviceURL,
  java.util.Map environment)
  throws |java.io.IOException|
         
Creates a connection to the connector server at the given address. 

This method is equivalent to: 



JMXConnector conn = JMXConnectorFactory.newJMXConnector(serviceURL, 
environment); conn.connect(environment); 

    serviceURL - the address of the connector server to connect to. 
    environment - a set of attributes to determine how the connection is made. This parameter can 
       be null. Keys in this map must be Strings. The appropriate type of each 
       associated value depends on the attribute. The contents of environment 
       are not changed by this call. 

    Returns: a JMXConnector representing the newly-made connection. Each successful call to 
             this method produces a different object. 
*javax.management.remote.JMXConnectorFactory.newJMXConnector(JMXServiceURL,Map)*

public static |javax.management.remote.JMXConnector| newJMXConnector(
  javax.management.remote.JMXServiceURL serviceURL,
  java.util.Map environment)
  throws |java.io.IOException|
         
Creates a connector client for the connector server at the given address. The 
resultant client is not connected until its 
connect(|javax.management.remote.JMXConnector|) method is called. 

    serviceURL - the address of the connector server to connect to. 
    environment - a set of attributes to determine how the connection is made. This parameter can 
       be null. Keys in this map must be Strings. The appropriate type of each 
       associated value depends on the attribute. The contents of environment 
       are not changed by this call. 

    Returns: a JMXConnector representing the new connector client. Each successful call to 
             this method produces a different object. 


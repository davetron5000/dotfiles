*org.w3c.dom.Element* *Element* The Element interface represents an element in a

public interface interface Element

  implements |org.w3c.dom.Node|

|org.w3c.dom.Element_Description|
|org.w3c.dom.Element_Fields|
|org.w3c.dom.Element_Constructors|
|org.w3c.dom.Element_Methods|

================================================================================

*org.w3c.dom.Element_Methods*
|org.w3c.dom.Element.getAttribute(String)|Retrieves an attribute value by name.
|org.w3c.dom.Element.getAttributeNode(String)|Retrieves an attribute node by na
|org.w3c.dom.Element.getAttributeNodeNS(String,String)|Retrieves an Attr node b
|org.w3c.dom.Element.getAttributeNS(String,String)|Retrieves an attribute value
|org.w3c.dom.Element.getElementsByTagName(String)|Returns a NodeList of all des
|org.w3c.dom.Element.getElementsByTagNameNS(String,String)|Returns a NodeList o
|org.w3c.dom.Element.getSchemaTypeInfo()|The type information associated with t
|org.w3c.dom.Element.getTagName()|The name of the element.
|org.w3c.dom.Element.hasAttribute(String)|Returns true when an attribute with a
|org.w3c.dom.Element.hasAttributeNS(String,String)|Returns true when an attribu
|org.w3c.dom.Element.removeAttribute(String)|Removes an attribute by name.
|org.w3c.dom.Element.removeAttributeNode(Attr)|Removes the specified attribute 
|org.w3c.dom.Element.removeAttributeNS(String,String)|Removes an attribute by l
|org.w3c.dom.Element.setAttribute(String,String)|Adds a new attribute.
|org.w3c.dom.Element.setAttributeNode(Attr)|Adds a new attribute node.
|org.w3c.dom.Element.setAttributeNodeNS(Attr)|Adds a new attribute.
|org.w3c.dom.Element.setAttributeNS(String,String,String)|Adds a new attribute.
|org.w3c.dom.Element.setIdAttribute(String,boolean)|If the parameter isId is tr
|org.w3c.dom.Element.setIdAttributeNode(Attr,boolean)|If the parameter isId is 
|org.w3c.dom.Element.setIdAttributeNS(String,String,boolean)|If the parameter i

*org.w3c.dom.Element_Description*

The Element interface represents an element in an HTML or XML document. 
Elements may have attributes associated with them; since the Element interface 
inherits from Node, the generic Node interface attribute attributes may be used 
to retrieve the set of all attributes for an element. There are methods on the 
Element interface to retrieve either an Attr object by name or an attribute 
value by name. In XML, where an attribute value may contain entity references, 
an Attr object should be retrieved to examine the possibly fairly complex 
sub-tree representing the attribute value. On the other hand, in HTML, where 
all attributes have simple string values, methods to directly access an 
attribute value can safely be used as a convenience. Note: In DOM Level 2, the 
method normalize is inherited from the Node interface where it was moved. See 
also the Document Object Model (DOM) Level 3 Core Specification. 


*org.w3c.dom.Element.getAttribute(String)*

public |java.lang.String| getAttribute(java.lang.String name)

Retrieves an attribute value by name. 

    name - The name of the attribute to retrieve. 

    Returns: The Attr value as a string, or the empty string if that attribute does not have 
             a specified or default value. 
*org.w3c.dom.Element.getAttributeNode(String)*

public |org.w3c.dom.Attr| getAttributeNode(java.lang.String name)

Retrieves an attribute node by name. To retrieve an attribute node by qualified 
name and namespace URI, use the getAttributeNodeNS method. 

    name - The name (nodeName) of the attribute to retrieve. 

    Returns: The Attr node with the specified name ( nodeName) or null if there is no such 
             attribute. 
*org.w3c.dom.Element.getAttributeNodeNS(String,String)*

public |org.w3c.dom.Attr| getAttributeNodeNS(
  java.lang.String namespaceURI,
  java.lang.String localName)
  throws |org.w3c.dom.DOMException|
         
Retrieves an Attr node by local name and namespace URI. Per [XML Namespaces] , 
applications must use the value null as the namespaceURI parameter for methods 
if they wish to have no namespace. 

    namespaceURI - The namespace URI of the attribute to retrieve. 
    localName - The local name of the attribute to retrieve. 

    Returns: The Attr node with the specified attribute local name and namespace URI or null 
             if there is no such attribute. 
*org.w3c.dom.Element.getAttributeNS(String,String)*

public |java.lang.String| getAttributeNS(
  java.lang.String namespaceURI,
  java.lang.String localName)
  throws |org.w3c.dom.DOMException|
         
Retrieves an attribute value by local name and namespace URI. Per [XML 
Namespaces] , applications must use the value null as the namespaceURI 
parameter for methods if they wish to have no namespace. 

    namespaceURI - The namespace URI of the attribute to retrieve. 
    localName - The local name of the attribute to retrieve. 

    Returns: The Attr value as a string, or the empty string if that attribute does not have 
             a specified or default value. 
*org.w3c.dom.Element.getElementsByTagName(String)*

public |org.w3c.dom.NodeList| getElementsByTagName(java.lang.String name)

Returns a NodeList of all descendant Elements with a given tag name, in 
document order. 

    name - The name of the tag to match on. The special value "*" matches all tags. 

    Returns: A list of matching Element nodes. 
*org.w3c.dom.Element.getElementsByTagNameNS(String,String)*

public |org.w3c.dom.NodeList| getElementsByTagNameNS(
  java.lang.String namespaceURI,
  java.lang.String localName)
  throws |org.w3c.dom.DOMException|
         
Returns a NodeList of all the descendant Elements with a given local name and 
namespace URI in document order. 

    namespaceURI - The namespace URI of the elements to match on. The special value "*" matches 
       all namespaces. 
    localName - The local name of the elements to match on. The special value "*" matches all 
       local names. 

    Returns: A new NodeList object containing all the matched Elements. 
*org.w3c.dom.Element.getSchemaTypeInfo()*

public |org.w3c.dom.TypeInfo| getSchemaTypeInfo()

The type information associated with this element. 


*org.w3c.dom.Element.getTagName()*

public |java.lang.String| getTagName()

The name of the element. If Node.localName is different from null, this 
attribute is a qualified name. For example, in: 

<elementExample id="demo"> ... </elementExample> , 

tagName has the value "elementExample". Note that this is case-preserving in 
XML, as are all of the operations of the DOM. The HTML DOM returns the tagName 
of an HTML element in the canonical uppercase form, regardless of the case in 
the source HTML document. 


*org.w3c.dom.Element.hasAttribute(String)*

public boolean hasAttribute(java.lang.String name)

Returns true when an attribute with a given name is specified on this element 
or has a default value, false otherwise. 

    name - The name of the attribute to look for. 

    Returns: true if an attribute with the given name is specified on this element or has a 
             default value, false otherwise. 
*org.w3c.dom.Element.hasAttributeNS(String,String)*

public boolean hasAttributeNS(
  java.lang.String namespaceURI,
  java.lang.String localName)
  throws |org.w3c.dom.DOMException|
         
Returns true when an attribute with a given local name and namespace URI is 
specified on this element or has a default value, false otherwise. Per [XML 
Namespaces] , applications must use the value null as the namespaceURI 
parameter for methods if they wish to have no namespace. 

    namespaceURI - The namespace URI of the attribute to look for. 
    localName - The local name of the attribute to look for. 

    Returns: true if an attribute with the given local name and namespace URI is specified 
             or has a default value on this element, false otherwise. 
*org.w3c.dom.Element.removeAttribute(String)*

public void removeAttribute(java.lang.String name)
  throws |org.w3c.dom.DOMException|
         
Removes an attribute by name. If a default value for the removed attribute is 
defined in the DTD, a new attribute immediately appears with the default value 
as well as the corresponding namespace URI, local name, and prefix when 
applicable. The implementation may handle default values from other schemas 
similarly but applications should use Document.normalizeDocument() to guarantee 
this information is up-to-date. If no attribute with this name is found, this 
method has no effect. To remove an attribute by local name and namespace URI, 
use the removeAttributeNS method. 

    name - The name of the attribute to remove. 

*org.w3c.dom.Element.removeAttributeNode(Attr)*

public |org.w3c.dom.Attr| removeAttributeNode(org.w3c.dom.Attr oldAttr)
  throws |org.w3c.dom.DOMException|
         
Removes the specified attribute node. If a default value for the removed Attr 
node is defined in the DTD, a new node immediately appears with the default 
value as well as the corresponding namespace URI, local name, and prefix when 
applicable. The implementation may handle default values from other schemas 
similarly but applications should use Document.normalizeDocument() to guarantee 
this information is up-to-date. 

    oldAttr - The Attr node to remove from the attribute list. 

    Returns: The Attr node that was removed. 
*org.w3c.dom.Element.removeAttributeNS(String,String)*

public void removeAttributeNS(
  java.lang.String namespaceURI,
  java.lang.String localName)
  throws |org.w3c.dom.DOMException|
         
Removes an attribute by local name and namespace URI. If a default value for 
the removed attribute is defined in the DTD, a new attribute immediately 
appears with the default value as well as the corresponding namespace URI, 
local name, and prefix when applicable. The implementation may handle default 
values from other schemas similarly but applications should use 
Document.normalizeDocument() to guarantee this information is up-to-date. If no 
attribute with this local name and namespace URI is found, this method has no 
effect. Per [XML Namespaces] , applications must use the value null as the 
namespaceURI parameter for methods if they wish to have no namespace. 

    namespaceURI - The namespace URI of the attribute to remove. 
    localName - The local name of the attribute to remove. 

*org.w3c.dom.Element.setAttribute(String,String)*

public void setAttribute(
  java.lang.String name,
  java.lang.String value)
  throws |org.w3c.dom.DOMException|
         
Adds a new attribute. If an attribute with that name is already present in the 
element, its value is changed to be that of the value parameter. This value is 
a simple string; it is not parsed as it is being set. So any markup (such as 
syntax to be recognized as an entity reference) is treated as literal text, and 
needs to be appropriately escaped by the implementation when it is written out. 
In order to assign an attribute value that contains entity references, the user 
must create an Attr node plus any Text and EntityReference nodes, build the 
appropriate subtree, and use setAttributeNode to assign it as the value of an 
attribute. To set an attribute with a qualified name and namespace URI, use the 
setAttributeNS method. 

    name - The name of the attribute to create or alter. 
    value - Value to set in string form. 

*org.w3c.dom.Element.setAttributeNode(Attr)*

public |org.w3c.dom.Attr| setAttributeNode(org.w3c.dom.Attr newAttr)
  throws |org.w3c.dom.DOMException|
         
Adds a new attribute node. If an attribute with that name ( nodeName) is 
already present in the element, it is replaced by the new one. Replacing an 
attribute node by itself has no effect. To add a new attribute node with a 
qualified name and namespace URI, use the setAttributeNodeNS method. 

    newAttr - The Attr node to add to the attribute list. 

    Returns: If the newAttr attribute replaces an existing attribute, the replaced Attr node 
             is returned, otherwise null is returned. 
*org.w3c.dom.Element.setAttributeNodeNS(Attr)*

public |org.w3c.dom.Attr| setAttributeNodeNS(org.w3c.dom.Attr newAttr)
  throws |org.w3c.dom.DOMException|
         
Adds a new attribute. If an attribute with that local name and that namespace 
URI is already present in the element, it is replaced by the new one. Replacing 
an attribute node by itself has no effect. Per [XML Namespaces] , applications 
must use the value null as the namespaceURI parameter for methods if they wish 
to have no namespace. 

    newAttr - The Attr node to add to the attribute list. 

    Returns: If the newAttr attribute replaces an existing attribute with the same local 
             name and namespace URI, the replaced Attr node is returned, 
             otherwise null is returned. 
*org.w3c.dom.Element.setAttributeNS(String,String,String)*

public void setAttributeNS(
  java.lang.String namespaceURI,
  java.lang.String qualifiedName,
  java.lang.String value)
  throws |org.w3c.dom.DOMException|
         
Adds a new attribute. If an attribute with the same local name and namespace 
URI is already present on the element, its prefix is changed to be the prefix 
part of the qualifiedName, and its value is changed to be the value parameter. 
This value is a simple string; it is not parsed as it is being set. So any 
markup (such as syntax to be recognized as an entity reference) is treated as 
literal text, and needs to be appropriately escaped by the implementation when 
it is written out. In order to assign an attribute value that contains entity 
references, the user must create an Attr node plus any Text and EntityReference 
nodes, build the appropriate subtree, and use setAttributeNodeNS or 
setAttributeNode to assign it as the value of an attribute. Per [XML 
Namespaces] , applications must use the value null as the namespaceURI 
parameter for methods if they wish to have no namespace. 

    namespaceURI - The namespace URI of the attribute to create or alter. 
    qualifiedName - The qualified name of the attribute to create or alter. 
    value - The value to set in string form. 

*org.w3c.dom.Element.setIdAttribute(String,boolean)*

public void setIdAttribute(
  java.lang.String name,
  boolean isId)
  throws |org.w3c.dom.DOMException|
         
If the parameter isId is true, this method declares the specified attribute to 
be a user-determined ID attribute . This affects the value of Attr.isId and the 
behavior of Document.getElementById, but does not change any schema that may be 
in use, in particular this does not affect the Attr.schemaTypeInfo of the 
specified Attr node. Use the value false for the parameter isId to undeclare an 
attribute for being a user-determined ID attribute. To specify an attribute by 
local name and namespace URI, use the setIdAttributeNS method. 

    name - The name of the attribute. 
    isId - Whether the attribute is a of type ID. 

*org.w3c.dom.Element.setIdAttributeNode(Attr,boolean)*

public void setIdAttributeNode(
  org.w3c.dom.Attr idAttr,
  boolean isId)
  throws |org.w3c.dom.DOMException|
         
If the parameter isId is true, this method declares the specified attribute to 
be a user-determined ID attribute . This affects the value of Attr.isId and the 
behavior of Document.getElementById, but does not change any schema that may be 
in use, in particular this does not affect the Attr.schemaTypeInfo of the 
specified Attr node. Use the value false for the parameter isId to undeclare an 
attribute for being a user-determined ID attribute. 

    idAttr - The attribute node. 
    isId - Whether the attribute is a of type ID. 

*org.w3c.dom.Element.setIdAttributeNS(String,String,boolean)*

public void setIdAttributeNS(
  java.lang.String namespaceURI,
  java.lang.String localName,
  boolean isId)
  throws |org.w3c.dom.DOMException|
         
If the parameter isId is true, this method declares the specified attribute to 
be a user-determined ID attribute . This affects the value of Attr.isId and the 
behavior of Document.getElementById, but does not change any schema that may be 
in use, in particular this does not affect the Attr.schemaTypeInfo of the 
specified Attr node. Use the value false for the parameter isId to undeclare an 
attribute for being a user-determined ID attribute. 

    namespaceURI - The namespace URI of the attribute. 
    localName - The local name of the attribute. 
    isId - Whether the attribute is a of type ID. 



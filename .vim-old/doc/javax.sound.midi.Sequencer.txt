*javax.sound.midi.Sequencer* *Sequencer* A hardware or software device that play

public interface interface Sequencer

  implements |javax.sound.midi.MidiDevice|

|javax.sound.midi.Sequencer_Description|
|javax.sound.midi.Sequencer_Fields|
|javax.sound.midi.Sequencer_Constructors|
|javax.sound.midi.Sequencer_Methods|

================================================================================

*javax.sound.midi.Sequencer_Fields*
|int_javax.sound.midi.Sequencer.LOOP_CONTINUOUSLY|

*javax.sound.midi.Sequencer_Methods*
|javax.sound.midi.Sequencer.addControllerEventListener(ControllerEventListener,int[])|
|javax.sound.midi.Sequencer.addMetaEventListener(MetaEventListener)|Registers a
|javax.sound.midi.Sequencer.getLoopCount()|Obtains the number of repetitions fo
|javax.sound.midi.Sequencer.getLoopEndPoint()|Obtains the end position of the l
|javax.sound.midi.Sequencer.getLoopStartPoint()|Obtains the start position of t
|javax.sound.midi.Sequencer.getMasterSyncMode()|Obtains the current master sync
|javax.sound.midi.Sequencer.getMasterSyncModes()|Obtains the set of master sync
|javax.sound.midi.Sequencer.getMicrosecondLength()|Obtains the length of the cu
|javax.sound.midi.Sequencer.getMicrosecondPosition()|Obtains the current positi
|javax.sound.midi.Sequencer.getSequence()|Obtains the sequence on which the Seq
|javax.sound.midi.Sequencer.getSlaveSyncMode()|Obtains the current slave synchr
|javax.sound.midi.Sequencer.getSlaveSyncModes()|Obtains the set of slave synchr
|javax.sound.midi.Sequencer.getTempoFactor()|Returns the current tempo factor f
|javax.sound.midi.Sequencer.getTempoInBPM()|Obtains the current tempo, expresse
|javax.sound.midi.Sequencer.getTempoInMPQ()|Obtains the current tempo, expresse
|javax.sound.midi.Sequencer.getTickLength()|Obtains the length of the current s
|javax.sound.midi.Sequencer.getTickPosition()|Obtains the current position in t
|javax.sound.midi.Sequencer.getTrackMute(int)|Obtains the current mute state fo
|javax.sound.midi.Sequencer.getTrackSolo(int)|Obtains the current solo state fo
|javax.sound.midi.Sequencer.isRecording()|Indicates whether the Sequencer is cu
|javax.sound.midi.Sequencer.isRunning()|Indicates whether the Sequencer is curr
|javax.sound.midi.Sequencer.recordDisable(Track)|Disables recording to the spec
|javax.sound.midi.Sequencer.recordEnable(Track,int)|Prepares the specified trac
|javax.sound.midi.Sequencer.removeControllerEventListener(ControllerEventListener,int[])|
|javax.sound.midi.Sequencer.removeMetaEventListener(MetaEventListener)|Removes 
|javax.sound.midi.Sequencer.setLoopCount(int)|Sets the number of repetitions of
|javax.sound.midi.Sequencer.setLoopEndPoint(long)|Sets the last MIDI tick that 
|javax.sound.midi.Sequencer.setLoopStartPoint(long)|Sets the first MIDI tick th
|javax.sound.midi.Sequencer.setMasterSyncMode(Sequencer.SyncMode)|Sets the sour
|javax.sound.midi.Sequencer.setMicrosecondPosition(long)|Sets the current posit
|javax.sound.midi.Sequencer.setSequence(InputStream)|Sets the current sequence 
|javax.sound.midi.Sequencer.setSequence(Sequence)|Sets the current sequence on 
|javax.sound.midi.Sequencer.setSlaveSyncMode(Sequencer.SyncMode)|Sets the slave
|javax.sound.midi.Sequencer.setTempoFactor(float)|Scales the sequencer's actual
|javax.sound.midi.Sequencer.setTempoInBPM(float)|Sets the tempo in beats per mi
|javax.sound.midi.Sequencer.setTempoInMPQ(float)|Sets the tempo in microseconds
|javax.sound.midi.Sequencer.setTickPosition(long)|Sets the current sequencer po
|javax.sound.midi.Sequencer.setTrackMute(int,boolean)|Sets the mute state for a
|javax.sound.midi.Sequencer.setTrackSolo(int,boolean)|Sets the solo state for a
|javax.sound.midi.Sequencer.start()|Starts playback of the MIDI data in the cur
|javax.sound.midi.Sequencer.startRecording()|Starts recording and playback of M
|javax.sound.midi.Sequencer.stop()|Stops recording, if active, and playback of 
|javax.sound.midi.Sequencer.stopRecording()|Stops recording, if active.

*javax.sound.midi.Sequencer_Description*

A hardware or software device that plays back a MIDI 
sequence(|javax.sound.midi.Sequence|) is known as a sequencer. A MIDI sequence 
contains lists of time-stamped MIDI data, such as might be read from a standard 
MIDI file. Most sequencers also provide functions for creating and editing 
sequences. 

The Sequencer interface includes methods for the following basic MIDI sequencer 
operations: 

obtaining a sequence from MIDI file data starting and stopping playback moving 
to an arbitrary position in the sequence changing the tempo (speed) of playback 
synchronizing playback to an internal clock or to received MIDI messages 
controlling the timing of another device 

In addition, the following operations are supported, either directly, or 
indirectly through objects that the Sequencer has access to: 

editing the data by adding or deleting individual MIDI events or entire tracks 
muting or soloing individual tracks in the sequence notifying listener objects 
about any meta-events or control-change events encountered while playing back 
the sequence. 


*int_javax.sound.midi.Sequencer.LOOP_CONTINUOUSLY*

A hardware or software device that plays back a MIDI 
sequence(|javax.sound.midi.Sequence|) is known as a sequencer. A MIDI sequence 
contains lists of time-stamped MIDI data, such as might be read from a standard 
MIDI file. Most sequencers also provide functions for creating and editing 
sequences. 

The Sequencer interface includes methods for the following basic MIDI sequencer 
operations: 

obtaining a sequence from MIDI file data starting and stopping playback moving 
to an arbitrary position in the sequence changing the tempo (speed) of playback 
synchronizing playback to an internal clock or to received MIDI messages 
controlling the timing of another device 

In addition, the following operations are supported, either directly, or 
indirectly through objects that the Sequencer has access to: 

editing the data by adding or deleting individual MIDI events or entire tracks 
muting or soloing individual tracks in the sequence notifying listener objects 
about any meta-events or control-change events encountered while playing back 
the sequence. 



*javax.sound.midi.Sequencer.addControllerEventListener(ControllerEventListener,int[])*

public int addControllerEventListener(
  javax.sound.midi.ControllerEventListener listener,
  int[] controllers)

Registers a controller event listener to receive notification whenever the 
sequencer processes a control-change event of the requested type or types. The 
types are specified by the controllers argument, which should contain an array 
of MIDI controller numbers. (Each number should be between 0 and 127, 
inclusive. See the MIDI 1.0 Specification for the numbers that correspond to 
various types of controllers.) 

The returned array contains the MIDI controller numbers for which the listener 
will now receive events. Some sequencers might not support controller event 
notification, in which case the array has a length of 0. Other sequencers might 
support notification for some controllers but not all. This method may be 
invoked repeatedly. Each time, the returned array indicates all the controllers 
that the listener will be notified about, not only the controllers requested in 
that particular invocation. 

    listener - the controller event listener to add to the list of registered listeners 
    controllers - the MIDI controller numbers for which change notification is requested 

    Returns: the numbers of all the MIDI controllers whose changes will now be reported to 
             the specified listener 
*javax.sound.midi.Sequencer.addMetaEventListener(MetaEventListener)*

public boolean addMetaEventListener(javax.sound.midi.MetaEventListener listener)

Registers a meta-event listener to receive notification whenever a meta-event 
is encountered in the sequence and processed by the sequencer. This method can 
fail if, for instance,this class of sequencer does not support meta-event 
notification. 

    listener - listener to add 

    Returns: true if the listener was successfully added, otherwise false 
*javax.sound.midi.Sequencer.getLoopCount()*

public int getLoopCount()

Obtains the number of repetitions for playback. 


    Returns: the number of loops after which playback plays to the end of the sequence 
*javax.sound.midi.Sequencer.getLoopEndPoint()*

public long getLoopEndPoint()

Obtains the end position of the loop, in MIDI ticks. 


    Returns: the end position of the loop, in MIDI ticks (zero-based), or -1 to indicate the 
             end of the sequence 
*javax.sound.midi.Sequencer.getLoopStartPoint()*

public long getLoopStartPoint()

Obtains the start position of the loop, in MIDI ticks. 


    Returns: the start position of the loop, in MIDI ticks (zero-based) 
*javax.sound.midi.Sequencer.getMasterSyncMode()*

public |javax.sound.midi.Sequencer.SyncMode| getMasterSyncMode()

Obtains the current master synchronization mode for this sequencer. 


    Returns: the current master synchronization mode 
*javax.sound.midi.Sequencer.getMasterSyncModes()*

public |javax.sound.midi.Sequencer.SyncMode| getMasterSyncModes()

Obtains the set of master synchronization modes supported by this sequencer. 


    Returns: the available master synchronization modes 
*javax.sound.midi.Sequencer.getMicrosecondLength()*

public long getMicrosecondLength()

Obtains the length of the current sequence, expressed in microseconds, or 0 if 
no sequence is set. 


    Returns: length of the sequence in microseconds. 
*javax.sound.midi.Sequencer.getMicrosecondPosition()*

public long getMicrosecondPosition()

Obtains the current position in the sequence, expressed in microseconds. 


    Returns: the current position in microseconds 
*javax.sound.midi.Sequencer.getSequence()*

public |javax.sound.midi.Sequence| getSequence()

Obtains the sequence on which the Sequencer is currently operating. 

This method can be called even if the Sequencer is closed. 


    Returns: the current sequence, or null if no sequence is currently set. 
*javax.sound.midi.Sequencer.getSlaveSyncMode()*

public |javax.sound.midi.Sequencer.SyncMode| getSlaveSyncMode()

Obtains the current slave synchronization mode for this sequencer. 


    Returns: the current slave synchronization mode 
*javax.sound.midi.Sequencer.getSlaveSyncModes()*

public |javax.sound.midi.Sequencer.SyncMode| getSlaveSyncModes()

Obtains the set of slave synchronization modes supported by the sequencer. 


    Returns: the available slave synchronization modes 
*javax.sound.midi.Sequencer.getTempoFactor()*

public float getTempoFactor()

Returns the current tempo factor for the sequencer. The default is 1.0. 


    Returns: tempo factor. 
*javax.sound.midi.Sequencer.getTempoInBPM()*

public float getTempoInBPM()

Obtains the current tempo, expressed in beats per minute. The actual tempo of 
playback is the product of the returned value and the tempo factor. 


    Returns: the current tempo in beats per minute 
*javax.sound.midi.Sequencer.getTempoInMPQ()*

public float getTempoInMPQ()

Obtains the current tempo, expressed in microseconds per quarter note. The 
actual tempo of playback is the product of the returned value and the tempo 
factor. 


    Returns: the current tempo in microseconds per quarter note 
*javax.sound.midi.Sequencer.getTickLength()*

public long getTickLength()

Obtains the length of the current sequence, expressed in MIDI ticks, or 0 if no 
sequence is set. 


    Returns: length of the sequence in ticks 
*javax.sound.midi.Sequencer.getTickPosition()*

public long getTickPosition()

Obtains the current position in the sequence, expressed in MIDI ticks. (The 
duration of a tick in seconds is determined both by the tempo and by the timing 
resolution stored in the (|javax.sound.midi.Sequence|) .) 


    Returns: 
*javax.sound.midi.Sequencer.getTrackMute(int)*

public boolean getTrackMute(int track)

Obtains the current mute state for a track. The default mute state for all 
tracks which have not been muted is false. In any case where the specified 
track has not been muted, this method should return false. This applies if the 
sequencer does not support muting of tracks, and if the specified track index 
is not valid. 

    track - the track number. Tracks in the current sequence are numbered from 0 to the 
       number of tracks in the sequence minus 1. 

    Returns: true if muted, false if not. 
*javax.sound.midi.Sequencer.getTrackSolo(int)*

public boolean getTrackSolo(int track)

Obtains the current solo state for a track. The default mute state for all 
tracks which have not been solo'd is false. In any case where the specified 
track has not been solo'd, this method should return false. This applies if the 
sequencer does not support soloing of tracks, and if the specified track index 
is not valid. 

    track - the track number. Tracks in the current sequence are numbered from 0 to the 
       number of tracks in the sequence minus 1. 

    Returns: true if solo'd, false if not. 
*javax.sound.midi.Sequencer.isRecording()*

public boolean isRecording()

Indicates whether the Sequencer is currently recording. The default is false. 
The Sequencer begins recording when (|javax.sound.midi.Sequencer|) is called, 
and then returns true until (|javax.sound.midi.Sequencer|) or 
(|javax.sound.midi.Sequencer|) is called. 


    Returns: true if the Sequencer is recording, otherwise false 
*javax.sound.midi.Sequencer.isRunning()*

public boolean isRunning()

Indicates whether the Sequencer is currently running. The default is false. The 
Sequencer starts running when either (|javax.sound.midi.Sequencer|) or 
(|javax.sound.midi.Sequencer|) is called. isRunning then returns true until 
playback of the sequence completes or (|javax.sound.midi.Sequencer|) is called. 


    Returns: true if the Sequencer is running, otherwise false 
*javax.sound.midi.Sequencer.recordDisable(Track)*

public void recordDisable(javax.sound.midi.Track track)

Disables recording to the specified track. Events will no longer be recorded 
into this track. 

    track - the track to disable for recording, or null to disable recording for all 
       tracks. 

*javax.sound.midi.Sequencer.recordEnable(Track,int)*

public void recordEnable(
  javax.sound.midi.Track track,
  int channel)

Prepares the specified track for recording events received on a particular 
channel. Once enabled, a track will receive events when recording is active. 

    track - the track to which events will be recorded 
    channel - the channel on which events will be received. If -1 is specified for the 
       channel value, the track will receive data from all channels. 

*javax.sound.midi.Sequencer.removeControllerEventListener(ControllerEventListener,int[])*

public int removeControllerEventListener(
  javax.sound.midi.ControllerEventListener listener,
  int[] controllers)

Removes a controller event listener's interest in one or more types of 
controller event. The controllers argument is an array of MIDI numbers 
corresponding to the controllers for which the listener should no longer 
receive change notifications. To completely remove this listener from the list 
of registered listeners, pass in null for controllers. The returned array 
contains the MIDI controller numbers for which the listener will now receive 
events. The array has a length of 0 if the listener will not receive change 
notifications for any controllers. 

    listener - old listener 
    controllers - the MIDI controller numbers for which change notification should be cancelled, 
       or null to cancel for all controllers 

    Returns: the numbers of all the MIDI controllers whose changes will now be reported to 
             the specified listener 
*javax.sound.midi.Sequencer.removeMetaEventListener(MetaEventListener)*

public void removeMetaEventListener(javax.sound.midi.MetaEventListener listener)

Removes the specified meta-event listener from this sequencer's list of 
registered listeners, if in fact the listener is registered. 

    listener - the meta-event listener to remove 

*javax.sound.midi.Sequencer.setLoopCount(int)*

public void setLoopCount(int count)

Sets the number of repetitions of the loop for playback. When the playback 
position reaches the loop end point, it will loop back to the loop start point 
count times, after which playback will continue to play to the end of the 
sequence. 

If the current position when this method is invoked is greater than the loop 
end point, playback continues to the end of the sequence without looping, 
unless the loop end point is changed subsequently. 

A count value of 0 disables looping: playback will continue at the loop end 
point, and it will not loop back to the loop start point. This is a sequencer's 
default. 

If playback is stopped during looping, the current loop status is cleared; 
subsequent start requests are not affected by an interrupted loop operation. 

    count - the number of times playback should loop back from the loop's end position to 
       the loop's start position, or {@link #LOOP_CONTINUOUSLY} to indicate 
       that looping should continue until interrupted 

*javax.sound.midi.Sequencer.setLoopEndPoint(long)*

public void setLoopEndPoint(long tick)

Sets the last MIDI tick that will be played in the loop. If the loop count is 
0, the loop end point has no effect and playback continues to play when 
reaching the loop end point. 

A value of -1 for the ending point indicates the last tick of the sequence. 
Otherwise, the ending point must be greater than or equal to the starting 
point, and it must fall within the size of the loaded sequence. 

A sequencer's loop end point defaults to -1, meaning the end of the sequence. 

    tick - the loop's ending position, in MIDI ticks (zero-based), or -1 to indicate the 
       final tick 

*javax.sound.midi.Sequencer.setLoopStartPoint(long)*

public void setLoopStartPoint(long tick)

Sets the first MIDI tick that will be played in the loop. If the loop count is 
greater than 0, playback will jump to this point when reaching the loop end 
point. 

A value of 0 for the starting point means the beginning of the loaded sequence. 
The starting point must be lower than or equal to the ending point, and it must 
fall within the size of the loaded sequence. 

A sequencer's loop start point defaults to start of the sequence. 

    tick - the loop's starting position, in MIDI ticks (zero-based) 

*javax.sound.midi.Sequencer.setMasterSyncMode(Sequencer.SyncMode)*

public void setMasterSyncMode(javax.sound.midi.Sequencer.SyncMode sync)

Sets the source of timing information used by this sequencer. The sequencer 
synchronizes to the master, which is the internal clock, MIDI clock, or MIDI 
time code, depending on the value of sync. The sync argument must be one of the 
supported modes, as returned by (|javax.sound.midi.Sequencer|) . 

    sync - the desired master synchronization mode 

*javax.sound.midi.Sequencer.setMicrosecondPosition(long)*

public void setMicrosecondPosition(long microseconds)

Sets the current position in the sequence, expressed in microseconds 

    microseconds - desired position in microseconds 

*javax.sound.midi.Sequencer.setSequence(InputStream)*

public void setSequence(java.io.InputStream stream)
  throws |javax.sound.midi.InvalidMidiDataException|
         |java.io.IOException|
         
Sets the current sequence on which the sequencer operates. The stream must 
point to MIDI file data. 

This method can be called even if the Sequencer is closed. 

    stream - stream containing MIDI file data. 

*javax.sound.midi.Sequencer.setSequence(Sequence)*

public void setSequence(javax.sound.midi.Sequence sequence)
  throws |javax.sound.midi.InvalidMidiDataException|
         
Sets the current sequence on which the sequencer operates. 

This method can be called even if the Sequencer is closed. 

    sequence - the sequence to be loaded. 

*javax.sound.midi.Sequencer.setSlaveSyncMode(Sequencer.SyncMode)*

public void setSlaveSyncMode(javax.sound.midi.Sequencer.SyncMode sync)

Sets the slave synchronization mode for the sequencer. This indicates the type 
of timing information sent by the sequencer to its receiver. The sync argument 
must be one of the supported modes, as returned by 
(|javax.sound.midi.Sequencer|) . 

    sync - the desired slave synchronization mode 

*javax.sound.midi.Sequencer.setTempoFactor(float)*

public void setTempoFactor(float factor)

Scales the sequencer's actual playback tempo by the factor provided. The 
default is 1.0. A value of 1.0 represents the natural rate (the tempo specified 
in the sequence), 2.0 means twice as fast, etc. The tempo factor does not 
affect the values returned by (|javax.sound.midi.Sequencer|) and 
(|javax.sound.midi.Sequencer|) . Those values indicate the tempo prior to 
scaling. 

Note that the tempo factor cannot be adjusted when external synchronization is 
used. In that situation, setTempoFactor always sets the tempo factor to 1.0. 

    factor - the requested tempo scalar 

*javax.sound.midi.Sequencer.setTempoInBPM(float)*

public void setTempoInBPM(float bpm)

Sets the tempo in beats per minute. The actual tempo of playback is the product 
of the specified value and the tempo factor. 

    bpm - desired new tempo in beats per minute 

*javax.sound.midi.Sequencer.setTempoInMPQ(float)*

public void setTempoInMPQ(float mpq)

Sets the tempo in microseconds per quarter note. The actual tempo of playback 
is the product of the specified value and the tempo factor. 

    mpq - desired new tempo in microseconds per quarter note. 

*javax.sound.midi.Sequencer.setTickPosition(long)*

public void setTickPosition(long tick)

Sets the current sequencer position in MIDI ticks 

    tick - the desired tick position 

*javax.sound.midi.Sequencer.setTrackMute(int,boolean)*

public void setTrackMute(
  int track,
  boolean mute)

Sets the mute state for a track. This method may fail for a number of reasons. 
For example, the track number specified may not be valid for the current 
sequence, or the sequencer may not support this functionality. An application 
which needs to verify whether this operation succeeded should follow this call 
with a call to (|javax.sound.midi.Sequencer|) . 

    track - the track number. Tracks in the current sequence are numbered from 0 to the 
       number of tracks in the sequence minus 1. 
    mute - the new mute state for the track. true implies the track should be muted, false 
       implies the track should be unmuted. 

*javax.sound.midi.Sequencer.setTrackSolo(int,boolean)*

public void setTrackSolo(
  int track,
  boolean solo)

Sets the solo state for a track. If solo is true only this track and other 
solo'd tracks will sound. If solo is false then only other solo'd tracks will 
sound, unless no tracks are solo'd in which case all un-muted tracks will 
sound. 

This method may fail for a number of reasons. For example, the track number 
specified may not be valid for the current sequence, or the sequencer may not 
support this functionality. An application which needs to verify whether this 
operation succeeded should follow this call with a call to 
(|javax.sound.midi.Sequencer|) . 

    track - the track number. Tracks in the current sequence are numbered from 0 to the 
       number of tracks in the sequence minus 1. 
    solo - the new solo state for the track. true implies the track should be solo'd, 
       false implies the track should not be solo'd. 

*javax.sound.midi.Sequencer.start()*

public void start()

Starts playback of the MIDI data in the currently loaded sequence. Playback 
will begin from the current position. If the playback position reaches the loop 
end point, and the loop count is greater than 0, playback will resume at the 
loop start point for the number of repetitions set with setLoopCount. After 
that, or if the loop count is 0, playback will continue to play to the end of 
the sequence. 

The implementation ensures that the synthesizer is brought to a consistent 
state when jumping to the loop start point by sending appropriate controllers, 
pitch bend, and program change events. 


*javax.sound.midi.Sequencer.startRecording()*

public void startRecording()

Starts recording and playback of MIDI data. Data is recorded to all enabled 
tracks, on the channel(s) for which they were enabled. Recording begins at the 
current position of the sequencer. Any events already in the track are 
overwritten for the duration of the recording session. Events from the 
currently loaded sequence, if any, are delivered to the sequencer's 
transmitter(s) along with messages received during recording. 

Note that tracks are not by default enabled for recording. In order to record 
MIDI data, at least one track must be specifically enabled for recording. 


*javax.sound.midi.Sequencer.stop()*

public void stop()

Stops recording, if active, and playback of the currently loaded sequence, if 
any. 


*javax.sound.midi.Sequencer.stopRecording()*

public void stopRecording()

Stops recording, if active. Playback of the current sequence continues. 




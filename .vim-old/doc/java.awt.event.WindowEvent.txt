*java.awt.event.WindowEvent* *WindowEvent* A low-level event that indicates that a window has changed its status.

public class WindowEvent
  extends    |java.awt.event.ComponentEvent|

|java.awt.event.WindowEvent_Description|
|java.awt.event.WindowEvent_Fields|
|java.awt.event.WindowEvent_Constructors|
|java.awt.event.WindowEvent_Methods|

====================================================================================================================================================================================

*java.awt.event.WindowEvent_Fields*
|int_java.awt.event.WindowEvent.WINDOW_ACTIVATED|
|int_java.awt.event.WindowEvent.WINDOW_CLOSED|
|int_java.awt.event.WindowEvent.WINDOW_CLOSING|
|int_java.awt.event.WindowEvent.WINDOW_DEACTIVATED|
|int_java.awt.event.WindowEvent.WINDOW_DEICONIFIED|
|int_java.awt.event.WindowEvent.WINDOW_FIRST|
|int_java.awt.event.WindowEvent.WINDOW_GAINED_FOCUS|
|int_java.awt.event.WindowEvent.WINDOW_ICONIFIED|
|int_java.awt.event.WindowEvent.WINDOW_LAST|
|int_java.awt.event.WindowEvent.WINDOW_LOST_FOCUS|
|int_java.awt.event.WindowEvent.WINDOW_OPENED|
|int_java.awt.event.WindowEvent.WINDOW_STATE_CHANGED|

*java.awt.event.WindowEvent_Constructors*
|java.awt.event.WindowEvent(Window,int)|Constructs a WindowEvent object.
|java.awt.event.WindowEvent(Window,int,int,int)|Constructs a WindowEvent object with the specified  previous and new window states.
|java.awt.event.WindowEvent(Window,int,Window)|Constructs a WindowEvent object with the  specified opposite Window.
|java.awt.event.WindowEvent(Window,int,Window,int,int)|Constructs a WindowEvent object.

*java.awt.event.WindowEvent_Methods*
|java.awt.event.WindowEvent.getNewState()|For WINDOW_STATE_CHANGED events returns the  new state of the window.
|java.awt.event.WindowEvent.getOldState()|For WINDOW_STATE_CHANGED events returns the  previous state of the window.
|java.awt.event.WindowEvent.getOppositeWindow()|Returns the other Window involved in this focus or activation change.
|java.awt.event.WindowEvent.getWindow()|Returns the originator of the event.
|java.awt.event.WindowEvent.paramString()|Returns a parameter string identifying this event.

*java.awt.event.WindowEvent_Description*

A low-level event that indicates that a window has changed its status. This low-level event is generated by a Window object when it is opened, closed, activated, deactivated, 
iconified, or deiconified, or when focus is transfered into or out of the Window. 

The event is passed to every WindowListener or WindowAdapter object which registered to receive such events using the window's addWindowListener method. (WindowAdapter objects 
implement the WindowListener interface.) Each such listener object gets this WindowEvent when the event occurs. 



*int_java.awt.event.WindowEvent.WINDOW_ACTIVATED*

The window-activated event type. This event is delivered when the Window becomes the active Window. Only a Frame or a Dialog can be the active Window. The native windowing system 
may denote the active Window or its children with special decorations, such as a highlighted title bar. The active Window is always either the focused Window, or the first Frame 
or Dialog that is an owner of the focused Window. 


*int_java.awt.event.WindowEvent.WINDOW_CLOSED*

The window closed event. This event is delivered after the window has been closed as the result of a call to dispose. 


*int_java.awt.event.WindowEvent.WINDOW_CLOSING*

The "window is closing" event. This event is delivered when the user attempts to close the window from the window's system menu. If the program does not explicitly hide or dispose 
the window while processing this event, the window close operation will be cancelled. 


*int_java.awt.event.WindowEvent.WINDOW_DEACTIVATED*

The window-deactivated event type. This event is delivered when the Window is no longer the active Window. Only a Frame or a Dialog can be the active Window. The native windowing 
system may denote the active Window or its children with special decorations, such as a highlighted title bar. The active Window is always either the focused Window, or the first 
Frame or Dialog that is an owner of the focused Window. 


*int_java.awt.event.WindowEvent.WINDOW_DEICONIFIED*

The window deiconified event type. This event is delivered when the window has been changed from a minimized to a normal state. 


*int_java.awt.event.WindowEvent.WINDOW_FIRST*

The first number in the range of ids used for window events. 


*int_java.awt.event.WindowEvent.WINDOW_GAINED_FOCUS*

The window-gained-focus event type. This event is delivered when the Window becomes the focused Window, which means that the Window, or one of its subcomponents, will receive 
keyboard events. 


*int_java.awt.event.WindowEvent.WINDOW_ICONIFIED*

The window iconified event. This event is delivered when the window has been changed from a normal to a minimized state. For many platforms, a minimized window is displayed as the 
icon specified in the window's iconImage property. 


*int_java.awt.event.WindowEvent.WINDOW_LAST*

The last number in the range of ids used for window events. 


*int_java.awt.event.WindowEvent.WINDOW_LOST_FOCUS*

The window-lost-focus event type. This event is delivered when a Window is no longer the focused Window, which means keyboard events will no longer be delivered to the Window or 
any of its subcomponents. 


*int_java.awt.event.WindowEvent.WINDOW_OPENED*

The window opened event. This event is delivered only the first time a window is made visible. 


*int_java.awt.event.WindowEvent.WINDOW_STATE_CHANGED*

The window-state-changed event type. This event is delivered when a Window's state is changed by virtue of it being iconified, maximized etc. 



*java.awt.event.WindowEvent(Window,int)*

public WindowEvent(
  java.awt.Window source,
  int id)

Constructs a WindowEvent object. Note that passing in an invalid id results in unspecified behavior. This method throws an IllegalArgumentException if source is null. 

    source - the Window object that originated the event 
    id - an integer indicating the type of event 

*java.awt.event.WindowEvent(Window,int,int,int)*

public WindowEvent(
  java.awt.Window source,
  int id,
  int oldState,
  int newState)

Constructs a WindowEvent object with the specified previous and new window states. Note that passing in an invalid id results in unspecified behavior. This method throws an 
IllegalArgumentException if source is null. 

    source - the Window object that originated the event 
    id - WINDOW_STATE_CHANGED event type. It is expected that this constructor will not be used for other WindowEvent types, because the previous and new window states are meaningless for 
       other event types. 
    oldState - an integer representing the previous window state 
    newState - an integer representing the new window state 

*java.awt.event.WindowEvent(Window,int,Window)*

public WindowEvent(
  java.awt.Window source,
  int id,
  java.awt.Window opposite)

Constructs a WindowEvent object with the specified opposite Window. The opposite Window is the other Window involved in this focus or activation change. For a WINDOW_ACTIVATED or 
WINDOW_GAINED_FOCUS event, this is the Window that lost activation or focus. For a WINDOW_DEACTIVATED or WINDOW_LOST_FOCUS event, this is the Window that gained activation or 
focus. If this focus change occurs with a native application, with a Java application in a different VM, or with no other Window, then the opposite Window is null. Note that 
passing in an invalid id results in unspecified behavior. This method throws an IllegalArgumentException if source is null. 

    source - the Window object that originated the event 
    id - WINDOW_ACTIVATED, WINDOW_DEACTIVATED, WINDOW_GAINED_FOCUS, or WINDOW_LOST_FOCUS. It is expected that this constructor will not be used for other WindowEvent types because the 
       opposite Window of such events will always be null 
    opposite - the other Window involved in the focus or activation change, or null 

*java.awt.event.WindowEvent(Window,int,Window,int,int)*

public WindowEvent(
  java.awt.Window source,
  int id,
  java.awt.Window opposite,
  int oldState,
  int newState)

Constructs a WindowEvent object. Note that passing in an invalid id results in unspecified behavior. This method throws an IllegalArgumentException if source is null. 

    source - the Window object that originated the event 
    id - an integer indicating the type of event. 
    opposite - the other window involved in the focus or activation change, or null 
    oldState - previous state of the window for window state change event 
    newState - new state of the window for window state change event 

*java.awt.event.WindowEvent.getNewState()*

public int getNewState()

For WINDOW_STATE_CHANGED events returns the new state of the window. The state is represented as a bitwise mask. 

NORMAL Indicates that no state bits are set. ICONIFIED MAXIMIZED_HORIZ MAXIMIZED_VERT MAXIMIZED_BOTH Concatenates MAXIMIZED_HORIZ and MAXIMIZED_VERT. 



    Returns: a bitwise mask of the new window state 

*java.awt.event.WindowEvent.getOldState()*

public int getOldState()

For WINDOW_STATE_CHANGED events returns the previous state of the window. The state is represented as a bitwise mask. 

NORMAL Indicates that no state bits are set. ICONIFIED MAXIMIZED_HORIZ MAXIMIZED_VERT MAXIMIZED_BOTH Concatenates MAXIMIZED_HORIZ and MAXIMIZED_VERT. 



    Returns: a bitwise mask of the previous window state 

*java.awt.event.WindowEvent.getOppositeWindow()*

public |java.awt.Window| getOppositeWindow()

Returns the other Window involved in this focus or activation change. For a WINDOW_ACTIVATED or WINDOW_GAINED_FOCUS event, this is the Window that lost activation or focus. For a 
WINDOW_DEACTIVATED or WINDOW_LOST_FOCUS event, this is the Window that gained activation or focus. For any other type of WindowEvent, or if the focus or activation change occurs 
with a native application, with a Java application in a different VM or context, or with no other Window, null is returned. 



    Returns: the other Window involved in the focus or activation change, or null 

*java.awt.event.WindowEvent.getWindow()*

public |java.awt.Window| getWindow()

Returns the originator of the event. 



    Returns: the Window object that originated the event 

*java.awt.event.WindowEvent.paramString()*

public |java.lang.String| paramString()

Returns a parameter string identifying this event. This method is useful for event-logging and for debugging. 



    Returns: a string identifying the event and its attributes 



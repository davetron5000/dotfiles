*org.w3c.dom.ls.LSInput* *LSInput* This interface represents an input source for

public interface interface LSInput


|org.w3c.dom.ls.LSInput_Description|
|org.w3c.dom.ls.LSInput_Fields|
|org.w3c.dom.ls.LSInput_Constructors|
|org.w3c.dom.ls.LSInput_Methods|

================================================================================

*org.w3c.dom.ls.LSInput_Methods*
|org.w3c.dom.ls.LSInput.getBaseURI()|The base URI to be used (see section 5.1.4
|org.w3c.dom.ls.LSInput.getByteStream()|An attribute of a language and binding 
|org.w3c.dom.ls.LSInput.getCertifiedText()|If set to true, assume that the inpu
|org.w3c.dom.ls.LSInput.getCharacterStream()|An attribute of a language and bin
|org.w3c.dom.ls.LSInput.getEncoding()|The character encoding, if known.
|org.w3c.dom.ls.LSInput.getPublicId()|The public identifier for this input sour
|org.w3c.dom.ls.LSInput.getStringData()|String data to parse.
|org.w3c.dom.ls.LSInput.getSystemId()|The system identifier, a URI reference [I
|org.w3c.dom.ls.LSInput.setBaseURI(String)|The base URI to be used (see section
|org.w3c.dom.ls.LSInput.setByteStream(InputStream)|An attribute of a language a
|org.w3c.dom.ls.LSInput.setCertifiedText(boolean)|If set to true, assume that t
|org.w3c.dom.ls.LSInput.setCharacterStream(Reader)|An attribute of a language a
|org.w3c.dom.ls.LSInput.setEncoding(String)|The character encoding, if known.
|org.w3c.dom.ls.LSInput.setPublicId(String)|The public identifier for this inpu
|org.w3c.dom.ls.LSInput.setStringData(String)|String data to parse.
|org.w3c.dom.ls.LSInput.setSystemId(String)|The system identifier, a URI refere

*org.w3c.dom.ls.LSInput_Description*

This interface represents an input source for data. This interface allows an 
application to encapsulate information about an input source in a single 
object, which may include a public identifier, a system identifier, a byte 
stream (possibly with a specified encoding), a base URI, and/or a character 
stream. The exact definitions of a byte stream and a character stream are 
binding dependent. The application is expected to provide objects that 
implement this interface whenever such objects are needed. The application can 
either provide its own objects that implement this interface, or it can use the 
generic factory method DOMImplementationLS.createLSInput() to create objects 
that implement this interface. The LSParser will use the LSInput object to 
determine how to read data. The LSParser will look at the different inputs 
specified in the LSInput in the following order to know which one to read from, 
the first one that is not null and not an empty string will be used: 

LSInput.characterStream 

LSInput.byteStream 

LSInput.stringData 

LSInput.systemId 

LSInput.publicId 

If all inputs are null, the LSParser will report a DOMError with its 
DOMError.type set to "no-input-specified" and its DOMError.severity set to 
DOMError.SEVERITY_FATAL_ERROR. LSInput objects belong to the application. The 
DOM implementation will never modify them (though it may make copies and modify 
the copies, if necessary). See also the Document Object Model (DOM) Level 3 
Load and Save Specification. 


*org.w3c.dom.ls.LSInput.getBaseURI()*

public |java.lang.String| getBaseURI()

The base URI to be used (see section 5.1.4 in [IETF RFC 2396]) for resolving a 
relative systemId to an absolute URI. If, when used, the base URI is itself a 
relative URI, an empty string, or null, the behavior is implementation 
dependent. 


*org.w3c.dom.ls.LSInput.getByteStream()*

public |java.io.InputStream| getByteStream()

An attribute of a language and binding dependent type that represents a stream 
of bytes. If the application knows the character encoding of the byte stream, 
it should set the encoding attribute. Setting the encoding in this way will 
override any encoding specified in an XML declaration in the data. 


*org.w3c.dom.ls.LSInput.getCertifiedText()*

public boolean getCertifiedText()

If set to true, assume that the input is certified (see section 2.13 in [XML 
1.1]) when parsing [XML 1.1]. 


*org.w3c.dom.ls.LSInput.getCharacterStream()*

public |java.io.Reader| getCharacterStream()

An attribute of a language and binding dependent type that represents a stream 
of 16-bit units. The application must encode the stream using UTF-16 (defined 
in [Unicode] and in [ISO/IEC 10646]). It is not a requirement to have an XML 
declaration when using character streams. If an XML declaration is present, the 
value of the encoding attribute will be ignored. 


*org.w3c.dom.ls.LSInput.getEncoding()*

public |java.lang.String| getEncoding()

The character encoding, if known. The encoding must be a string acceptable for 
an XML encoding declaration ([XML 1.0] section 4.3.3 "Character Encoding in 
Entities"). This attribute has no effect when the application provides a 
character stream or string data. For other sources of input, an encoding 
specified by means of this attribute will override any encoding specified in 
the XML declaration or the Text declaration, or an encoding obtained from a 
higher level protocol, such as HTTP [IETF RFC 2616]. 


*org.w3c.dom.ls.LSInput.getPublicId()*

public |java.lang.String| getPublicId()

The public identifier for this input source. This may be mapped to an input 
source using an implementation dependent mechanism (such as catalogues or other 
mappings). The public identifier, if specified, may also be reported as part of 
the location information when errors are reported. 


*org.w3c.dom.ls.LSInput.getStringData()*

public |java.lang.String| getStringData()

String data to parse. If provided, this will always be treated as a sequence of 
16-bit units (UTF-16 encoded characters). It is not a requirement to have an 
XML declaration when using stringData. If an XML declaration is present, the 
value of the encoding attribute will be ignored. 


*org.w3c.dom.ls.LSInput.getSystemId()*

public |java.lang.String| getSystemId()

The system identifier, a URI reference [IETF RFC 2396], for this input source. 
The system identifier is optional if there is a byte stream, a character 
stream, or string data. It is still useful to provide one, since the 
application will use it to resolve any relative URIs and can include it in 
error messages and warnings. (The LSParser will only attempt to fetch the 
resource identified by the URI reference if there is no other input available 
in the input source.) If the application knows the character encoding of the 
object pointed to by the system identifier, it can set the encoding using the 
encoding attribute. If the specified system ID is a relative URI reference (see 
section 5 in [IETF RFC 2396]), the DOM implementation will attempt to resolve 
the relative URI with the baseURI as the base, if that fails, the behavior is 
implementation dependent. 


*org.w3c.dom.ls.LSInput.setBaseURI(String)*

public void setBaseURI(java.lang.String baseURI)

The base URI to be used (see section 5.1.4 in [IETF RFC 2396]) for resolving a 
relative systemId to an absolute URI. If, when used, the base URI is itself a 
relative URI, an empty string, or null, the behavior is implementation 
dependent. 


*org.w3c.dom.ls.LSInput.setByteStream(InputStream)*

public void setByteStream(java.io.InputStream byteStream)

An attribute of a language and binding dependent type that represents a stream 
of bytes. If the application knows the character encoding of the byte stream, 
it should set the encoding attribute. Setting the encoding in this way will 
override any encoding specified in an XML declaration in the data. 


*org.w3c.dom.ls.LSInput.setCertifiedText(boolean)*

public void setCertifiedText(boolean certifiedText)

If set to true, assume that the input is certified (see section 2.13 in [XML 
1.1]) when parsing [XML 1.1]. 


*org.w3c.dom.ls.LSInput.setCharacterStream(Reader)*

public void setCharacterStream(java.io.Reader characterStream)

An attribute of a language and binding dependent type that represents a stream 
of 16-bit units. The application must encode the stream using UTF-16 (defined 
in [Unicode] and in [ISO/IEC 10646]). It is not a requirement to have an XML 
declaration when using character streams. If an XML declaration is present, the 
value of the encoding attribute will be ignored. 


*org.w3c.dom.ls.LSInput.setEncoding(String)*

public void setEncoding(java.lang.String encoding)

The character encoding, if known. The encoding must be a string acceptable for 
an XML encoding declaration ([XML 1.0] section 4.3.3 "Character Encoding in 
Entities"). This attribute has no effect when the application provides a 
character stream or string data. For other sources of input, an encoding 
specified by means of this attribute will override any encoding specified in 
the XML declaration or the Text declaration, or an encoding obtained from a 
higher level protocol, such as HTTP [IETF RFC 2616]. 


*org.w3c.dom.ls.LSInput.setPublicId(String)*

public void setPublicId(java.lang.String publicId)

The public identifier for this input source. This may be mapped to an input 
source using an implementation dependent mechanism (such as catalogues or other 
mappings). The public identifier, if specified, may also be reported as part of 
the location information when errors are reported. 


*org.w3c.dom.ls.LSInput.setStringData(String)*

public void setStringData(java.lang.String stringData)

String data to parse. If provided, this will always be treated as a sequence of 
16-bit units (UTF-16 encoded characters). It is not a requirement to have an 
XML declaration when using stringData. If an XML declaration is present, the 
value of the encoding attribute will be ignored. 


*org.w3c.dom.ls.LSInput.setSystemId(String)*

public void setSystemId(java.lang.String systemId)

The system identifier, a URI reference [IETF RFC 2396], for this input source. 
The system identifier is optional if there is a byte stream, a character 
stream, or string data. It is still useful to provide one, since the 
application will use it to resolve any relative URIs and can include it in 
error messages and warnings. (The LSParser will only attempt to fetch the 
resource identified by the URI reference if there is no other input available 
in the input source.) If the application knows the character encoding of the 
object pointed to by the system identifier, it can set the encoding using the 
encoding attribute. If the specified system ID is a relative URI reference (see 
section 5 in [IETF RFC 2396]), the DOM implementation will attempt to resolve 
the relative URI with the baseURI as the base, if that fails, the behavior is 
implementation dependent. 




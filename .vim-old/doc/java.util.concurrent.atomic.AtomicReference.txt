*java.util.concurrent.atomic.AtomicReference* *AtomicReference* An object reference that may be updated atomically.

public class AtomicReference<V>
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.util.concurrent.atomic.AtomicReference_Description|
|java.util.concurrent.atomic.AtomicReference_Fields|
|java.util.concurrent.atomic.AtomicReference_Constructors|
|java.util.concurrent.atomic.AtomicReference_Methods|

====================================================================================================================================================================================

*java.util.concurrent.atomic.AtomicReference_Constructors*
|java.util.concurrent.atomic.AtomicReference()|Create a new AtomicReference with null initial value.
|java.util.concurrent.atomic.AtomicReference(V)|Create a new AtomicReference with the given initial value.

*java.util.concurrent.atomic.AtomicReference_Methods*
|java.util.concurrent.atomic.AtomicReference.compareAndSet(V,V)|Atomically set the value to the given updated value  if the current value == the expected value.
|java.util.concurrent.atomic.AtomicReference.get()|Get the current value.
|java.util.concurrent.atomic.AtomicReference.getAndSet(V)|Set to the given value and return the old value.
|java.util.concurrent.atomic.AtomicReference.set(V)|Set to the given value.
|java.util.concurrent.atomic.AtomicReference.toString()|Returns the String representation of the current value.
|java.util.concurrent.atomic.AtomicReference.weakCompareAndSet(V,V)|Atomically set the value to the given updated value  if the current value == the expected value.

*java.util.concurrent.atomic.AtomicReference_Description*

An object reference that may be updated atomically. See the (|java.util.concurrent.atomic|) package specification for description of the properties of atomic variables. 



*java.util.concurrent.atomic.AtomicReference()*

public AtomicReference()

Create a new AtomicReference with null initial value. 


*java.util.concurrent.atomic.AtomicReference(V)*

public AtomicReference(V initialValue)

Create a new AtomicReference with the given initial value. 

    initialValue - the initial value 

*java.util.concurrent.atomic.AtomicReference.compareAndSet(V,V)*

public final boolean compareAndSet(
  V expect,
  V update)

Atomically set the value to the given updated value if the current value == the expected value. 


    expect - the expected value 
    update - the new value 

    Returns: true if successful. False return indicates that the actual value was not equal to the expected value. 

*java.util.concurrent.atomic.AtomicReference.get()*

public final |V| get()

Get the current value. 



    Returns: the current value 

*java.util.concurrent.atomic.AtomicReference.getAndSet(V)*

public final |V| getAndSet(V newValue)

Set to the given value and return the old value. 


    newValue - the new value 

    Returns: the previous value 

*java.util.concurrent.atomic.AtomicReference.set(V)*

public final void set(V newValue)

Set to the given value. 


    newValue - the new value 

*java.util.concurrent.atomic.AtomicReference.toString()*

public |java.lang.String| toString()

Returns the String representation of the current value. 



    Returns: the String representation of the current value. 

*java.util.concurrent.atomic.AtomicReference.weakCompareAndSet(V,V)*

public final boolean weakCompareAndSet(
  V expect,
  V update)

Atomically set the value to the given updated value if the current value == the expected value. May fail spuriously. 


    expect - the expected value 
    update - the new value 

    Returns: true if successful. 



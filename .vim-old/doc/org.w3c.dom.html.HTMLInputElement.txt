*org.w3c.dom.html.HTMLInputElement* *HTMLInputElement* Form control.

public interface interface HTMLInputElement

  implements |org.w3c.dom.html.HTMLElement|

|org.w3c.dom.html.HTMLInputElement_Description|
|org.w3c.dom.html.HTMLInputElement_Fields|
|org.w3c.dom.html.HTMLInputElement_Constructors|
|org.w3c.dom.html.HTMLInputElement_Methods|

================================================================================

*org.w3c.dom.html.HTMLInputElement_Methods*
|org.w3c.dom.html.HTMLInputElement.blur()|Removes keyboard focus from this elem
|org.w3c.dom.html.HTMLInputElement.click()|Simulate a mouse-click.
|org.w3c.dom.html.HTMLInputElement.focus()|Gives keyboard focus to this element
|org.w3c.dom.html.HTMLInputElement.getAccept()|A comma-separated list of conten
|org.w3c.dom.html.HTMLInputElement.getAccessKey()|A single character access key
|org.w3c.dom.html.HTMLInputElement.getAlign()|Aligns this object (vertically or
|org.w3c.dom.html.HTMLInputElement.getAlt()|Alternate text for user agents not 
|org.w3c.dom.html.HTMLInputElement.getChecked()|When the type attribute of the 
|org.w3c.dom.html.HTMLInputElement.getDefaultChecked()|When type has the value 
|org.w3c.dom.html.HTMLInputElement.getDefaultValue()|When the type attribute of
|org.w3c.dom.html.HTMLInputElement.getDisabled()|The control is unavailable in 
|org.w3c.dom.html.HTMLInputElement.getForm()|Returns the FORM element containin
|org.w3c.dom.html.HTMLInputElement.getMaxLength()|Maximum number of characters 
|org.w3c.dom.html.HTMLInputElement.getName()|Form control or object name when s
|org.w3c.dom.html.HTMLInputElement.getReadOnly()|This control is read-only.
|org.w3c.dom.html.HTMLInputElement.getSize()|Size information.
|org.w3c.dom.html.HTMLInputElement.getSrc()|When the type attribute has the val
|org.w3c.dom.html.HTMLInputElement.getTabIndex()|Index that represents the elem
|org.w3c.dom.html.HTMLInputElement.getType()|The type of control created.
|org.w3c.dom.html.HTMLInputElement.getUseMap()|Use client-side image map.
|org.w3c.dom.html.HTMLInputElement.getValue()|When the type attribute of the el
|org.w3c.dom.html.HTMLInputElement.select()|Select the contents of the text are
|org.w3c.dom.html.HTMLInputElement.setAccept(String)|
|org.w3c.dom.html.HTMLInputElement.setAccessKey(String)|
|org.w3c.dom.html.HTMLInputElement.setAlign(String)|
|org.w3c.dom.html.HTMLInputElement.setAlt(String)|
|org.w3c.dom.html.HTMLInputElement.setChecked(boolean)|
|org.w3c.dom.html.HTMLInputElement.setDefaultChecked(boolean)|
|org.w3c.dom.html.HTMLInputElement.setDefaultValue(String)|
|org.w3c.dom.html.HTMLInputElement.setDisabled(boolean)|
|org.w3c.dom.html.HTMLInputElement.setMaxLength(int)|
|org.w3c.dom.html.HTMLInputElement.setName(String)|
|org.w3c.dom.html.HTMLInputElement.setReadOnly(boolean)|
|org.w3c.dom.html.HTMLInputElement.setSize(String)|
|org.w3c.dom.html.HTMLInputElement.setSrc(String)|
|org.w3c.dom.html.HTMLInputElement.setTabIndex(int)|
|org.w3c.dom.html.HTMLInputElement.setUseMap(String)|
|org.w3c.dom.html.HTMLInputElement.setValue(String)|

*org.w3c.dom.html.HTMLInputElement_Description*

Form control. Note. Depending upon the environment in which the page is being 
viewed, the value property may be read-only for the file upload input type. For 
the "password" input type, the actual value returned may be masked to prevent 
unauthorized use. See the INPUT element definition in HTML 4.0. See also the 
Document Object Model (DOM) Level 2 Specification. 


*org.w3c.dom.html.HTMLInputElement.blur()*

public void blur()

Removes keyboard focus from this element. 


*org.w3c.dom.html.HTMLInputElement.click()*

public void click()

Simulate a mouse-click. For INPUT elements whose type attribute has one of the 
following values: "Button", "Checkbox", "Radio", "Reset", or "Submit". 


*org.w3c.dom.html.HTMLInputElement.focus()*

public void focus()

Gives keyboard focus to this element. 


*org.w3c.dom.html.HTMLInputElement.getAccept()*

public |java.lang.String| getAccept()

A comma-separated list of content types that a server processing this form will 
handle correctly. See the accept attribute definition in HTML 4.0. 


*org.w3c.dom.html.HTMLInputElement.getAccessKey()*

public |java.lang.String| getAccessKey()

A single character access key to give access to the form control. See the 
accesskey attribute definition in HTML 4.0. 


*org.w3c.dom.html.HTMLInputElement.getAlign()*

public |java.lang.String| getAlign()

Aligns this object (vertically or horizontally) with respect to its surrounding 
text. See the align attribute definition in HTML 4.0. This attribute is 
deprecated in HTML 4.0. 


*org.w3c.dom.html.HTMLInputElement.getAlt()*

public |java.lang.String| getAlt()

Alternate text for user agents not rendering the normal content of this 
element. See the alt attribute definition in HTML 4.0. 


*org.w3c.dom.html.HTMLInputElement.getChecked()*

public boolean getChecked()

When the type attribute of the element has the value "Radio" or "Checkbox", 
this represents the current state of the form control, in an interactive user 
agent. Changes to this attribute change the state of the form control, but do 
not change the value of the HTML value attribute of the element. 


*org.w3c.dom.html.HTMLInputElement.getDefaultChecked()*

public boolean getDefaultChecked()

When type has the value "Radio" or "Checkbox", this represents the HTML checked 
attribute of the element. The value of this attribute does not change if the 
state of the corresponding form control, in an interactive user agent, changes. 
Changes to this attribute, however, resets the state of the form control. See 
the checked attribute definition in HTML 4.0. 


*org.w3c.dom.html.HTMLInputElement.getDefaultValue()*

public |java.lang.String| getDefaultValue()

When the type attribute of the element has the value "Text", "File" or 
"Password", this represents the HTML value attribute of the element. The value 
of this attribute does not change if the contents of the corresponding form 
control, in an interactive user agent, changes. Changing this attribute, 
however, resets the contents of the form control. See the value attribute 
definition in HTML 4.0. 


*org.w3c.dom.html.HTMLInputElement.getDisabled()*

public boolean getDisabled()

The control is unavailable in this context. See the disabled attribute 
definition in HTML 4.0. 


*org.w3c.dom.html.HTMLInputElement.getForm()*

public |org.w3c.dom.html.HTMLFormElement| getForm()

Returns the FORM element containing this control. Returns null if this control 
is not within the context of a form. 


*org.w3c.dom.html.HTMLInputElement.getMaxLength()*

public int getMaxLength()

Maximum number of characters for text fields, when type has the value "Text" or 
"Password". See the maxlength attribute definition in HTML 4.0. 


*org.w3c.dom.html.HTMLInputElement.getName()*

public |java.lang.String| getName()

Form control or object name when submitted with a form. See the name attribute 
definition in HTML 4.0. 


*org.w3c.dom.html.HTMLInputElement.getReadOnly()*

public boolean getReadOnly()

This control is read-only. Relevant only when type has the value "Text" or 
"Password". See the readonly attribute definition in HTML 4.0. 


*org.w3c.dom.html.HTMLInputElement.getSize()*

public |java.lang.String| getSize()

Size information. The precise meaning is specific to each type of field. See 
the size attribute definition in HTML 4.0. 


*org.w3c.dom.html.HTMLInputElement.getSrc()*

public |java.lang.String| getSrc()

When the type attribute has the value "Image", this attribute specifies the 
location of the image to be used to decorate the graphical submit button. See 
the src attribute definition in HTML 4.0. 


*org.w3c.dom.html.HTMLInputElement.getTabIndex()*

public int getTabIndex()

Index that represents the element's position in the tabbing order. See the 
tabindex attribute definition in HTML 4.0. 


*org.w3c.dom.html.HTMLInputElement.getType()*

public |java.lang.String| getType()

The type of control created. See the type attribute definition in HTML 4.0. 


*org.w3c.dom.html.HTMLInputElement.getUseMap()*

public |java.lang.String| getUseMap()

Use client-side image map. See the usemap attribute definition in HTML 4.0. 


*org.w3c.dom.html.HTMLInputElement.getValue()*

public |java.lang.String| getValue()

When the type attribute of the element has the value "Text", "File" or 
"Password", this represents the current contents of the corresponding form 
control, in an interactive user agent. Changing this attribute changes the 
contents of the form control, but does not change the value of the HTML value 
attribute of the element. When the type attribute of the element has the value 
"Button", "Hidden", "Submit", "Reset", "Image", "Checkbox" or "Radio", this 
represents the HTML value attribute of the element. See the value attribute 
definition in HTML 4.0. 


*org.w3c.dom.html.HTMLInputElement.select()*

public void select()

Select the contents of the text area. For INPUT elements whose type attribute 
has one of the following values: "Text", "File", or "Password". 


*org.w3c.dom.html.HTMLInputElement.setAccept(String)*

public void setAccept(java.lang.String accept)




*org.w3c.dom.html.HTMLInputElement.setAccessKey(String)*

public void setAccessKey(java.lang.String accessKey)




*org.w3c.dom.html.HTMLInputElement.setAlign(String)*

public void setAlign(java.lang.String align)




*org.w3c.dom.html.HTMLInputElement.setAlt(String)*

public void setAlt(java.lang.String alt)




*org.w3c.dom.html.HTMLInputElement.setChecked(boolean)*

public void setChecked(boolean checked)




*org.w3c.dom.html.HTMLInputElement.setDefaultChecked(boolean)*

public void setDefaultChecked(boolean defaultChecked)




*org.w3c.dom.html.HTMLInputElement.setDefaultValue(String)*

public void setDefaultValue(java.lang.String defaultValue)




*org.w3c.dom.html.HTMLInputElement.setDisabled(boolean)*

public void setDisabled(boolean disabled)




*org.w3c.dom.html.HTMLInputElement.setMaxLength(int)*

public void setMaxLength(int maxLength)




*org.w3c.dom.html.HTMLInputElement.setName(String)*

public void setName(java.lang.String name)




*org.w3c.dom.html.HTMLInputElement.setReadOnly(boolean)*

public void setReadOnly(boolean readOnly)




*org.w3c.dom.html.HTMLInputElement.setSize(String)*

public void setSize(java.lang.String size)




*org.w3c.dom.html.HTMLInputElement.setSrc(String)*

public void setSrc(java.lang.String src)




*org.w3c.dom.html.HTMLInputElement.setTabIndex(int)*

public void setTabIndex(int tabIndex)




*org.w3c.dom.html.HTMLInputElement.setUseMap(String)*

public void setUseMap(java.lang.String useMap)




*org.w3c.dom.html.HTMLInputElement.setValue(String)*

public void setValue(java.lang.String value)






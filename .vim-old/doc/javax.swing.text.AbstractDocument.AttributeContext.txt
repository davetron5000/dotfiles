*javax.swing.text.AbstractDocument.AttributeContext* *AbstractDocument.AttributeContext* An interface that can be used to allow MutableAttributeSet 
 implementations to use pluggab

public static interface interface AbstractDocument.AttributeContext


|javax.swing.text.AbstractDocument.AttributeContext_Description|
|javax.swing.text.AbstractDocument.AttributeContext_Fields|
|javax.swing.text.AbstractDocument.AttributeContext_Constructors|
|javax.swing.text.AbstractDocument.AttributeContext_Methods|

====================================================================================================================================================================================

*javax.swing.text.AbstractDocument.AttributeContext_Methods*
|javax.swing.text.AbstractDocument.AttributeContext.addAttribute(AttributeSet,Object,Object)|Adds an attribute to the given set, and returns  the new representative set.
|javax.swing.text.AbstractDocument.AttributeContext.addAttributes(AttributeSet,AttributeSet)|Adds a set of attributes to the element.
|javax.swing.text.AbstractDocument.AttributeContext.getEmptySet()|Fetches an empty AttributeSet.
|javax.swing.text.AbstractDocument.AttributeContext.reclaim(AttributeSet)|Reclaims an attribute set.
|javax.swing.text.AbstractDocument.AttributeContext.removeAttribute(AttributeSet,Object)|Removes an attribute from the set.
|javax.swing.text.AbstractDocument.AttributeContext.removeAttributes(AttributeSet,AttributeSet)|Removes a set of attributes for the element.
|javax.swing.text.AbstractDocument.AttributeContext.removeAttributes(AttributeSet,Enumeration<?>)|Removes a set of attributes for the element.

*javax.swing.text.AbstractDocument.AttributeContext_Description*

An interface that can be used to allow MutableAttributeSet implementations to use pluggable attribute compression techniques. Each mutation of the attribute set can be used to 
exchange a previous AttributeSet instance with another, preserving the possibility of the AttributeSet remaining immutable. An implementation is provided by the StyleContext 
class. 

The Element implementations provided by this class use this interface to provide their MutableAttributeSet implementations, so that different AttributeSet compression techniques 
can be employed. The method getAttributeContext should be implemented to return the object responsible for implementing the desired compression technique. 



*javax.swing.text.AbstractDocument.AttributeContext.addAttribute(AttributeSet,Object,Object)*

public |javax.swing.text.AttributeSet| addAttribute(
  javax.swing.text.AttributeSet old,
  java.lang.Object name,
  java.lang.Object value)

Adds an attribute to the given set, and returns the new representative set. 


    old - the old attribute set 
    name - the non-null attribute name 
    value - the attribute value 

    Returns: the updated attribute set 

*javax.swing.text.AbstractDocument.AttributeContext.addAttributes(AttributeSet,AttributeSet)*

public |javax.swing.text.AttributeSet| addAttributes(
  javax.swing.text.AttributeSet old,
  javax.swing.text.AttributeSet attr)

Adds a set of attributes to the element. 


    old - the old attribute set 
    attr - the attributes to add 

    Returns: the updated attribute set 

*javax.swing.text.AbstractDocument.AttributeContext.getEmptySet()*

public |javax.swing.text.AttributeSet| getEmptySet()

Fetches an empty AttributeSet. 



    Returns: the attribute set 

*javax.swing.text.AbstractDocument.AttributeContext.reclaim(AttributeSet)*

public void reclaim(javax.swing.text.AttributeSet a)

Reclaims an attribute set. This is a way for a MutableAttributeSet to mark that it no longer need a particular immutable set. This is only necessary in 1.1 where there are no weak 
references. A 1.1 implementation would call this in its finalize method. 


    a - the attribute set to reclaim 

*javax.swing.text.AbstractDocument.AttributeContext.removeAttribute(AttributeSet,Object)*

public |javax.swing.text.AttributeSet| removeAttribute(
  javax.swing.text.AttributeSet old,
  java.lang.Object name)

Removes an attribute from the set. 


    old - the old attribute set 
    name - the non-null attribute name 

    Returns: the updated attribute set 

*javax.swing.text.AbstractDocument.AttributeContext.removeAttributes(AttributeSet,AttributeSet)*

public |javax.swing.text.AttributeSet| removeAttributes(
  javax.swing.text.AttributeSet old,
  javax.swing.text.AttributeSet attrs)

Removes a set of attributes for the element. 


    old - the old attribute set 
    attrs - the attributes 

    Returns: the updated attribute set 

*javax.swing.text.AbstractDocument.AttributeContext.removeAttributes(AttributeSet,Enumeration<?>)*

public |javax.swing.text.AttributeSet| removeAttributes(
  javax.swing.text.AttributeSet old,
  java.util.Enumeration<?> names)

Removes a set of attributes for the element. 


    old - the old attribute set 
    names - the attribute names 

    Returns: the updated attribute set 



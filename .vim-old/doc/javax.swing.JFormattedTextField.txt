*javax.swing.JFormattedTextField* *JFormattedTextField* JFormattedTextField extends JTextField adding
 support for formatting arbitrary values, as well as retrieving a particular
 

public class JFormattedTextField
  extends    |javax.swing.JTextField|

|javax.swing.JFormattedTextField_Description|
|javax.swing.JFormattedTextField_Fields|
|javax.swing.JFormattedTextField_Constructors|
|javax.swing.JFormattedTextField_Methods|

====================================================================================================================================================================================

*javax.swing.JFormattedTextField_Fields*
|int_javax.swing.JFormattedTextField.COMMIT|
|int_javax.swing.JFormattedTextField.COMMIT_OR_REVERT|
|int_javax.swing.JFormattedTextField.PERSIST|
|int_javax.swing.JFormattedTextField.REVERT|

*javax.swing.JFormattedTextField_Constructors*
|javax.swing.JFormattedTextField()|Creates a JFormattedTextField with no  AbstractFormatterFactory.
|javax.swing.JFormattedTextField(Format)|Creates a JFormattedTextField.
|javax.swing.JFormattedTextField(JFormattedTextField.AbstractFormatter)|Creates a JFormattedTextField with the specified  AbstractFormatter.
|javax.swing.JFormattedTextField(JFormattedTextField.AbstractFormatterFactory)|Creates a JFormattedTextField with the specified  AbstractFormatterFactory.
|javax.swing.JFormattedTextField(JFormattedTextField.AbstractFormatterFactory,Object)|Creates a JFormattedTextField with the specified  AbstractFormatterFactory and initial value.
|javax.swing.JFormattedTextField(Object)|Creates a JFormattedTextField with the specified value.

*javax.swing.JFormattedTextField_Methods*
|javax.swing.JFormattedTextField.commitEdit()|Forces the current value to be taken from the  AbstractFormatter and set as the current value.
|javax.swing.JFormattedTextField.getActions()|Fetches the command list for the editor.
|javax.swing.JFormattedTextField.getFocusLostBehavior()|Returns the behavior when focus is lost.
|javax.swing.JFormattedTextField.getFormatter()|Returns the AbstractFormatter that is used to format and  parse the current value.
|javax.swing.JFormattedTextField.getFormatterFactory()|Returns the current AbstractFormatterFactory.
|javax.swing.JFormattedTextField.getUIClassID()|Gets the class ID for a UI.
|javax.swing.JFormattedTextField.getValue()|Returns the last valid value.
|javax.swing.JFormattedTextField.invalidEdit()|Invoked when the user inputs an invalid value.
|javax.swing.JFormattedTextField.isEditValid()|Returns true if the current value being edited is valid.
|javax.swing.JFormattedTextField.processFocusEvent(FocusEvent)|Processes any focus events, such as  FocusEvent.FOCUS_GAINED or  FocusEvent.FOCUS_LOST.
|javax.swing.JFormattedTextField.processInputMethodEvent(InputMethodEvent)|Processes any input method events, such as  InputMethodEvent.INPUT_METHOD_TEXT_CHANGED or  InputMethodEv
|javax.swing.JFormattedTextField.setDocument(Document)|Associates the editor with a text document.
|javax.swing.JFormattedTextField.setFocusLostBehavior(int)|Sets the behavior when focus is lost.
|javax.swing.JFormattedTextField.setFormatter(JFormattedTextField.AbstractFormatter)|Sets the current AbstractFormatter.
|javax.swing.JFormattedTextField.setFormatterFactory(JFormattedTextField.AbstractFormatterFactory)|Sets the AbstractFormatterFactory.
|javax.swing.JFormattedTextField.setValue(Object)|Sets the value that will be formatted by an  AbstractFormatter obtained from the current  AbstractFormatterFactory.

*javax.swing.JFormattedTextField_Description*

JFormattedTextField extends JTextField adding support for formatting arbitrary values, as well as retrieving a particular object once the user has edited the text. The following 
illustrates configuring a JFormattedTextField to edit dates: 

JFormattedTextField ftf = new JFormattedTextField(); ftf.setValue(new Date()); 

Once a JFormattedTextField has been created, you can listen for editing changes by way of adding a PropertyChangeListener and listening for PropertyChangeEvents with the property 
name value. 

JFormattedTextField allows configuring what action should be taken when focus is lost. The possible configurations are: 

ValueDescription JFormattedTextField.REVERT Revert the display to match that of getValue, possibly losing the current edit. JFormattedTextField.COMMIT Commits the current value. 
If the value being edited isn't considered a legal value by the AbstractFormatter that is, a ParseException is thrown, then the value will not change, and then edited value will 
persist. JFormattedTextField.COMMIT_OR_REVERT Similar to COMMIT, but if the value isn't legal, behave like REVERT. JFormattedTextField.PERSIST Do nothing, don't obtain a new 
AbstractFormatter, and don't update the value. 

The default is JFormattedTextField.COMMIT_OR_REVERT, refer to (|javax.swing.JFormattedTextField|) for more information on this. 

JFormattedTextField allows the focus to leave, even if the currently edited value is invalid. To lock the focus down while the JFormattedTextField is an invalid edit state you can 
attach an InputVerifier. The following code snippet shows a potential implementation of such an InputVerifier: 

public class FormattedTextFieldVerifier extends InputVerifier { public boolean verify(JComponent input) { if (input instanceof JFormattedTextField) { JFormattedTextField ftf = 
(JFormattedTextField)input; AbstractFormatter formatter = ftf.getFormatter(); if (formatter != null) { String text = ftf.getText(); try { formatter.stringToValue(text); return 
true; } catch (ParseException pe) { return false; } } } return true; } public boolean shouldYieldFocus(JComponent input) { return verify(input); } } 

Alternatively, you could invoke commitEdit, which would also commit the value. 

JFormattedTextField does not do the formatting it self, rather formatting is done through an instance of JFormattedTextField.AbstractFormatter which is obtained from an instance 
of JFormattedTextField.AbstractFormatterFactory. Instances of JFormattedTextField.AbstractFormatter are notified when they become active by way of the install method, at which 
point the JFormattedTextField.AbstractFormatter can install whatever it needs to, typically a DocumentFilter. Similarly when JFormattedTextField no longer needs the 
AbstractFormatter, it will invoke uninstall. 

JFormattedTextField typically queries the AbstractFormatterFactory for an AbstractFormat when it gains or loses focus. Although this can change based on the focus lost policy. If 
the focus lost policy is JFormattedTextField.PERSIST and the JFormattedTextField has been edited, the AbstractFormatterFactory will not be queried until the value has been 
commited. Similarly if the focus lost policy is JFormattedTextField.COMMIT and an exception is thrown from stringToValue, the AbstractFormatterFactory will not be querired when 
focus is lost or gained. 

JFormattedTextField.AbstractFormatter is also responsible for determining when values are commited to the JFormattedTextField. Some JFormattedTextField.AbstractFormatters will 
make new values available on every edit, and others will never commit the value. You can force the current value to be obtained from the current 
JFormattedTextField.AbstractFormatter by way of invoking commitEdit. commitEdit will be invoked whenever return is pressed in the JFormattedTextField. 

If an AbstractFormatterFactory has not been explicitly set, one will be set based on the Class of the value type after setValue has been invoked (assuming value is non-null). For 
example, in the following code an appropriate AbstractFormatterFactory and AbstractFormatter will be created to handle formatting of numbers: 

JFormattedTextField tf = new JFormattedTextField(); tf.setValue(new Number(100)); 

Warning: As the AbstractFormatter will typically install a DocumentFilter on the Document, and a NavigationFilter on the JFormattedTextField you should not install your own. If 
you do, you are likely to see odd behavior in that the editing policy of the AbstractFormatter will not be enforced. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*int_javax.swing.JFormattedTextField.COMMIT*

Constant identifying that when focus is lost, commitEdit should be invoked. If in commiting the new value a ParseException is thrown, the invalid value will remain. 


*int_javax.swing.JFormattedTextField.COMMIT_OR_REVERT*

Constant identifying that when focus is lost, commitEdit should be invoked. If in commiting the new value a ParseException is thrown, the value will be reverted. 


*int_javax.swing.JFormattedTextField.PERSIST*

Constant identifying that when focus is lost, the edited value should be left. 


*int_javax.swing.JFormattedTextField.REVERT*

Constant identifying that when focus is lost, editing value should be reverted to current value set on the JFormattedTextField. 



*javax.swing.JFormattedTextField()*

public JFormattedTextField()

Creates a JFormattedTextField with no AbstractFormatterFactory. Use setMask or setFormatterFactory to configure the JFormattedTextField to edit a particular type of value. 


*javax.swing.JFormattedTextField(Format)*

public JFormattedTextField(java.text.Format format)

Creates a JFormattedTextField. format is wrapped in an appropriate AbstractFormatter which is then wrapped in an AbstractFormatterFactory. 

    format - Format used to look up an AbstractFormatter 

*javax.swing.JFormattedTextField(JFormattedTextField.AbstractFormatter)*

public JFormattedTextField(javax.swing.JFormattedTextField.AbstractFormatter formatter)

Creates a JFormattedTextField with the specified AbstractFormatter. The AbstractFormatter is placed in an AbstractFormatterFactory. 

    formatter - AbstractFormatter to use for formatting. 

*javax.swing.JFormattedTextField(JFormattedTextField.AbstractFormatterFactory)*

public JFormattedTextField(javax.swing.JFormattedTextField.AbstractFormatterFactory factory)

Creates a JFormattedTextField with the specified AbstractFormatterFactory. 

    factory - AbstractFormatterFactory used for formatting. 

*javax.swing.JFormattedTextField(JFormattedTextField.AbstractFormatterFactory,Object)*

public JFormattedTextField(
  javax.swing.JFormattedTextField.AbstractFormatterFactory factory,
  java.lang.Object currentValue)

Creates a JFormattedTextField with the specified AbstractFormatterFactory and initial value. 

    factory - AbstractFormatterFactory used for formatting. 
    currentValue - Initial value to use 

*javax.swing.JFormattedTextField(Object)*

public JFormattedTextField(java.lang.Object value)

Creates a JFormattedTextField with the specified value. This will create an AbstractFormatterFactory based on the type of value. 

    value - Initial value for the JFormattedTextField 

*javax.swing.JFormattedTextField.commitEdit()*

public void commitEdit()
  throws |java.text.ParseException|
         
Forces the current value to be taken from the AbstractFormatter and set as the current value. This has no effect if there is no current AbstractFormatter installed. 



*javax.swing.JFormattedTextField.getActions()*

public |javax.swing.Action|[] getActions()

Fetches the command list for the editor. This is the list of commands supported by the plugged-in UI augmented by the collection of commands that the editor itself supports. These 
are useful for binding to events, such as in a keymap. 



    Returns: the command list 

*javax.swing.JFormattedTextField.getFocusLostBehavior()*

public int getFocusLostBehavior()

Returns the behavior when focus is lost. This will be one of COMMIT_OR_REVERT, COMMIT, REVERT or PERSIST Note that some AbstractFormatters may push changes as they occur, so that 
the value of this will have no effect. 



    Returns: returns behavior when focus is lost 

*javax.swing.JFormattedTextField.getFormatter()*

public |javax.swing.JFormattedTextField.AbstractFormatter| getFormatter()

Returns the AbstractFormatter that is used to format and parse the current value. 



    Returns: AbstractFormatter used for formatting 

*javax.swing.JFormattedTextField.getFormatterFactory()*

public |javax.swing.JFormattedTextField.AbstractFormatterFactory| getFormatterFactory()

Returns the current AbstractFormatterFactory. 



    Returns: AbstractFormatterFactory used to determine AbstractFormatters 

*javax.swing.JFormattedTextField.getUIClassID()*

public |java.lang.String| getUIClassID()

Gets the class ID for a UI. 



    Returns: the string "FormattedTextFieldUI" 

*javax.swing.JFormattedTextField.getValue()*

public |java.lang.Object| getValue()

Returns the last valid value. Based on the editing policy of the AbstractFormatter this may not return the current value. The currently edited value can be obtained by invoking 
commitEdit followed by getValue. 



    Returns: Last valid value 

*javax.swing.JFormattedTextField.invalidEdit()*

protected void invalidEdit()

Invoked when the user inputs an invalid value. This gives the component a chance to provide feedback. The default implementation beeps. 



*javax.swing.JFormattedTextField.isEditValid()*

public boolean isEditValid()

Returns true if the current value being edited is valid. The value of this is managed by the current AbstractFormatter, as such there is no public setter for it. 



    Returns: true if the current value being edited is valid. 

*javax.swing.JFormattedTextField.processFocusEvent(FocusEvent)*

protected void processFocusEvent(java.awt.event.FocusEvent e)

Processes any focus events, such as FocusEvent.FOCUS_GAINED or FocusEvent.FOCUS_LOST. 


    e - the FocusEvent 

*javax.swing.JFormattedTextField.processInputMethodEvent(InputMethodEvent)*

protected void processInputMethodEvent(java.awt.event.InputMethodEvent e)

Processes any input method events, such as InputMethodEvent.INPUT_METHOD_TEXT_CHANGED or InputMethodEvent.CARET_POSITION_CHANGED. 


    e - the InputMethodEvent 

*javax.swing.JFormattedTextField.setDocument(Document)*

public void setDocument(javax.swing.text.Document doc)

Associates the editor with a text document. The currently registered factory is used to build a view for the document, which gets displayed by the editor after revalidation. A 
PropertyChange event ("document") is propagated to each listener. 


    doc - the document to display/edit 

*javax.swing.JFormattedTextField.setFocusLostBehavior(int)*

public void setFocusLostBehavior(int behavior)

Sets the behavior when focus is lost. This will be one of JFormattedTextField.COMMIT_OR_REVERT, JFormattedTextField.REVERT, JFormattedTextField.COMMIT or 
JFormattedTextField.PERSIST Note that some AbstractFormatters may push changes as they occur, so that the value of this will have no effect. 

This will throw an IllegalArgumentException if the object passed in is not one of the afore mentioned values. 

The default value of this property is JFormattedTextField.COMMIT_OR_REVERT. 


    behavior - Identifies behavior when focus is lost 

*javax.swing.JFormattedTextField.setFormatter(JFormattedTextField.AbstractFormatter)*

protected void setFormatter(javax.swing.JFormattedTextField.AbstractFormatter format)

Sets the current AbstractFormatter. 

You should not normally invoke this, instead set the AbstractFormatterFactory or set the value. JFormattedTextField will invoke this as the state of the JFormattedTextField 
changes and requires the value to be reset. JFormattedTextField passes in the AbstractFormatter obtained from the AbstractFormatterFactory. 

This is a JavaBeans bound property. 


    format - AbstractFormatter to use for formatting 

*javax.swing.JFormattedTextField.setFormatterFactory(JFormattedTextField.AbstractFormatterFactory)*

public void setFormatterFactory(javax.swing.JFormattedTextField.AbstractFormatterFactory tf)

Sets the AbstractFormatterFactory. AbstractFormatterFactory is able to return an instance of AbstractFormatter that is used to format a value for display, as well an enforcing an 
editing policy. 

If you have not explicitly set an AbstractFormatterFactory by way of this method (or a constructor) an AbstractFormatterFactory and consequently an AbstractFormatter will be used 
based on the Class of the value. NumberFormatter will be used for Numbers, DateFormatter will be used for Dates, otherwise DefaultFormatter will be used. 

This is a JavaBeans bound property. 


    tf - AbstractFormatterFactory used to lookup instances of AbstractFormatter 

*javax.swing.JFormattedTextField.setValue(Object)*

public void setValue(java.lang.Object value)

Sets the value that will be formatted by an AbstractFormatter obtained from the current AbstractFormatterFactory. If no AbstractFormatterFactory has been specified, this will 
attempt to create one based on the type of value. 

The default value of this property is null. 

This is a JavaBeans bound property. 


    value - Current value to display 



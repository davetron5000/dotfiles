*java.util.concurrent.AbstractExecutorService* *AbstractExecutorService* Provides default implementation ofExecutorServiceexecution methods.

public abstract class AbstractExecutorService
  extends    |java.lang.Object|
  implements |java.util.concurrent.ExecutorService|

|java.util.concurrent.AbstractExecutorService_Description|
|java.util.concurrent.AbstractExecutorService_Fields|
|java.util.concurrent.AbstractExecutorService_Constructors|
|java.util.concurrent.AbstractExecutorService_Methods|

====================================================================================================================================================================================

*java.util.concurrent.AbstractExecutorService_Constructors*
|java.util.concurrent.AbstractExecutorService()|

*java.util.concurrent.AbstractExecutorService_Methods*
|java.util.concurrent.AbstractExecutorService.invokeAll(Collection<Callable<T>>)|
|java.util.concurrent.AbstractExecutorService.invokeAll(Collection<Callable<T>>,long,TimeUnit)|
|java.util.concurrent.AbstractExecutorService.invokeAny(Collection<Callable<T>>)|
|java.util.concurrent.AbstractExecutorService.invokeAny(Collection<Callable<T>>,long,TimeUnit)|
|java.util.concurrent.AbstractExecutorService.submit(Callable<T>)|
|java.util.concurrent.AbstractExecutorService.submit(Runnable)|
|java.util.concurrent.AbstractExecutorService.submit(Runnable,T)|

*java.util.concurrent.AbstractExecutorService_Description*

Provides default implementation of (|java.util.concurrent.ExecutorService|) execution methods. This class implements the submit, invokeAny and invokeAll methods using the default 
(|java.util.concurrent.FutureTask|) class provided in this package. For example, the implementation of submit(Runnable) creates an associated FutureTask that is executed and 
returned. Subclasses overriding these methods to use different (|java.util.concurrent.Future|) implementations should do so consistently for each of these methods. 



*java.util.concurrent.AbstractExecutorService()*

public AbstractExecutorService()




*java.util.concurrent.AbstractExecutorService.invokeAll(Collection<Callable<T>>)*

public |java.util.List|<Future<T>> invokeAll(java.util.Collection<java.util.concurrent.Callable<T>> tasks)
  throws |java.lang.InterruptedException|
         




*java.util.concurrent.AbstractExecutorService.invokeAll(Collection<Callable<T>>,long,TimeUnit)*

public |java.util.List|<Future<T>> invokeAll(
  java.util.Collection<java.util.concurrent.Callable<T>> tasks,
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         




*java.util.concurrent.AbstractExecutorService.invokeAny(Collection<Callable<T>>)*

public |T| invokeAny(java.util.Collection<java.util.concurrent.Callable<T>> tasks)
  throws |java.util.concurrent.ExecutionException|
         |java.lang.InterruptedException|
         




*java.util.concurrent.AbstractExecutorService.invokeAny(Collection<Callable<T>>,long,TimeUnit)*

public |T| invokeAny(
  java.util.Collection<java.util.concurrent.Callable<T>> tasks,
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.util.concurrent.ExecutionException|
         |java.lang.InterruptedException|
         |java.util.concurrent.TimeoutException|
         




*java.util.concurrent.AbstractExecutorService.submit(Callable<T>)*

public |java.util.concurrent.Future|<T> submit(java.util.concurrent.Callable<T> task)





*java.util.concurrent.AbstractExecutorService.submit(Runnable)*

public |java.util.concurrent.Future|<?> submit(java.lang.Runnable task)





*java.util.concurrent.AbstractExecutorService.submit(Runnable,T)*

public |java.util.concurrent.Future|<T> submit(
  java.lang.Runnable task,
  T result)







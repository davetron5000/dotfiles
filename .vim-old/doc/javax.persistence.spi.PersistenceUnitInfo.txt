*javax.persistence.spi.PersistenceUnitInfo* *PersistenceUnitInfo* Interface impl

public interface interface PersistenceUnitInfo


|javax.persistence.spi.PersistenceUnitInfo_Description|
|javax.persistence.spi.PersistenceUnitInfo_Fields|
|javax.persistence.spi.PersistenceUnitInfo_Constructors|
|javax.persistence.spi.PersistenceUnitInfo_Methods|

================================================================================

*javax.persistence.spi.PersistenceUnitInfo_Methods*
|javax.persistence.spi.PersistenceUnitInfo.addTransformer(ClassTransformer)|Add
|javax.persistence.spi.PersistenceUnitInfo.excludeUnlistedClasses()|Returns whe
|javax.persistence.spi.PersistenceUnitInfo.getClassLoader()|Returns ClassLoader
|javax.persistence.spi.PersistenceUnitInfo.getJarFileUrls()|Returns a list of U
|javax.persistence.spi.PersistenceUnitInfo.getJtaDataSource()|Returns the JTA-e
|javax.persistence.spi.PersistenceUnitInfo.getManagedClassNames()|Returns the l
|javax.persistence.spi.PersistenceUnitInfo.getMappingFileNames()|Returns the li
|javax.persistence.spi.PersistenceUnitInfo.getNewTempClassLoader()|Return a new
|javax.persistence.spi.PersistenceUnitInfo.getNonJtaDataSource()|Returns the no
|javax.persistence.spi.PersistenceUnitInfo.getPersistenceProviderClassName()|Re
|javax.persistence.spi.PersistenceUnitInfo.getPersistenceUnitName()|Returns the
|javax.persistence.spi.PersistenceUnitInfo.getPersistenceUnitRootUrl()|Returns 
|javax.persistence.spi.PersistenceUnitInfo.getProperties()|Returns properties o
|javax.persistence.spi.PersistenceUnitInfo.getTransactionType()|Returns the tra

*javax.persistence.spi.PersistenceUnitInfo_Description*

Interface implemented by the container and used by the persistence provider 
when creating an (|javax.persistence.EntityManagerFactory|) . 



*javax.persistence.spi.PersistenceUnitInfo.addTransformer(ClassTransformer)*

public void addTransformer(javax.persistence.spi.ClassTransformer transformer)

Add a transformer supplied by the provider that will be called for every new 
class definition or class redefinition that gets loaded by the loader returned 
by the (|javax.persistence.spi.PersistenceUnitInfo|) method. The transformer 
has no effect on the result returned by the 
(|javax.persistence.spi.PersistenceUnitInfo|) method. Classes are only 
transformed once within the same classloading scope, regardless of how many 
persistence units they may be a part of. 


    transformer - A provider-supplied transformer that the Container invokes at 
       class-(re)definition time 

*javax.persistence.spi.PersistenceUnitInfo.excludeUnlistedClasses()*

public boolean excludeUnlistedClasses()

Returns whether classes in the root of the persistence unit that have not been 
explicitly listed are to be included in the set of managed classes. This value 
corresponds to the <exclude-unlisted-classes> element in the persistence.xml 
file. 



    Returns: Whether classes in the root of the persistence unit that have not been 
             explicitly listed are to be included in the set of managed 
             classes. This value corresponds to the <exclude-unlisted-classes> 
             element in the persistence.xml file. 

*javax.persistence.spi.PersistenceUnitInfo.getClassLoader()*

public |java.lang.ClassLoader| getClassLoader()

Returns ClassLoader that the provider may use to load any classes, resources, 
or open URLs. 



    Returns: ClassLoader that the provider may use to load any classes, resources, or open 
             URLs. 

*javax.persistence.spi.PersistenceUnitInfo.getJarFileUrls()*

public |java.util.List|<URL> getJarFileUrls()

Returns a list of URLs for the jar files or exploded jar file directories that 
the persistence provider must examine for managed classes of the persistence 
unit. Each URL corresponds to a named element in the persistence.xml file. A 
URL will either be a file: URL referring to a jar file or referring to a 
directory that contains an exploded jar file, or some other URL from which an 
InputStream in jar format can be obtained. 



    Returns: a list of URL objects referring to jar files or directories. 

*javax.persistence.spi.PersistenceUnitInfo.getJtaDataSource()*

public |javax.sql.DataSource| getJtaDataSource()

Returns the JTA-enabled data source to be used by the persistence provider. The 
data source corresponds to the <jta-data-source> element in the persistence.xml 
file or is provided at deployment or by the container. 



    Returns: the JTA-enabled data source to be used by the persistence provider. The data 
             source corresponds to the <jta-data-source> element in the 
             persistence.xml file or is provided at deployment or by the 
             container. 

*javax.persistence.spi.PersistenceUnitInfo.getManagedClassNames()*

public |java.util.List|<String> getManagedClassNames()

Returns the list of the names of the classes that the persistence provider must 
add it to its set of managed classes. Each name corresponds to a named <class> 
element in the persistence.xml file. 



    Returns: The list of the names of the classes that the persistence provider must add it 
             to its set of managed classes. Each name corresponds to a named 
             <class> element in the persistence.xml file. 

*javax.persistence.spi.PersistenceUnitInfo.getMappingFileNames()*

public |java.util.List|<String> getMappingFileNames()

Returns the list of mapping file names that the persistence provider must load 
to determine the mappings for the entity classes. The mapping files must be in 
the standard XML mapping format, be uniquely named and be resource-loadable 
from the application classpath. This list will not include the orm.xml file if 
one was specified. Each mapping file name corresponds to a <mapping-file> 
element in the persistence.xml file. 



    Returns: The list of mapping file names that the persistence provider must load to 
             determine the mappings for the entity classes. The mapping files 
             must be in the standard XML mapping format, be uniquely named and 
             be resource-loadable from the application classpath. This list 
             will not include the orm.xml file if one was specified. Each 
             mapping file name corresponds to a <mapping-file> element in the 
             persistence.xml file. 

*javax.persistence.spi.PersistenceUnitInfo.getNewTempClassLoader()*

public |java.lang.ClassLoader| getNewTempClassLoader()

Return a new instance of a ClassLoader that the provider may use to temporarily 
load any classes, resources, or open URLs. The scope and classpath of this 
loader is exactly the same as that of the loader returned by 
(|javax.persistence.spi.PersistenceUnitInfo|) . None of the classes loaded by 
this class loader will be visible to application components. The provider may 
only use this ClassLoader within the scope of the 
(|javax.persistence.spi.PersistenceProvider|) call. 



    Returns: Temporary ClassLoader with same visibility as current loader 

*javax.persistence.spi.PersistenceUnitInfo.getNonJtaDataSource()*

public |javax.sql.DataSource| getNonJtaDataSource()

Returns the non-JTA-enabled data source to be used by the persistence provider 
for accessing data outside a JTA transaction. The data source corresponds to 
the named <non-jta-data-source> element in the persistence.xml file or provided 
at deployment or by the container. 



    Returns: The non-JTA-enabled data source to be used by the persistence provider for 
             accessing data outside a JTA transaction. The data source 
             corresponds to the named <non-jta-data-source> element in the 
             persistence.xml file or provided at deployment or by the 
             container. 

*javax.persistence.spi.PersistenceUnitInfo.getPersistenceProviderClassName()*

public |java.lang.String| getPersistenceProviderClassName()

Returns the fully qualified name of the persistence provider implementation 
class. Corresponds to the <provider> element in the persistence.xml file. 



    Returns: The fully qualified name of the persistence provider implementation class. 
             Corresponds to the <provider> element in the persistence.xml file. 

*javax.persistence.spi.PersistenceUnitInfo.getPersistenceUnitName()*

public |java.lang.String| getPersistenceUnitName()

Returns the name of the persistence unit. Corresponds to the name attribute in 
the persistence.xml file. 



    Returns: The name of the persistence unit. Corresponds to the name attribute in the 
             persistence.xml file. 

*javax.persistence.spi.PersistenceUnitInfo.getPersistenceUnitRootUrl()*

public |java.net.URL| getPersistenceUnitRootUrl()

Returns the URL for the jar file or directory that is the root of the 
persistence unit. (If the persistence unit is rooted in the WEB-INF/classes 
directory, this will be the URL of that directory.) The URL will either be a 
file: URL referring to a jar file or referring to a directory that contains an 
exploded jar file, or some other URL from which an InputStream in jar format 
can be obtained. 



    Returns: a URL referring to a jar file or directory. 

*javax.persistence.spi.PersistenceUnitInfo.getProperties()*

public |java.util.Properties| getProperties()

Returns properties object. Each property corresponds to a <property> element in 
the persistence.xml file 



    Returns: Properties object. Each property corresponds to a <property> element in the 
             persistence.xml file 

*javax.persistence.spi.PersistenceUnitInfo.getTransactionType()*

public |javax.persistence.spi.PersistenceUnitTransactionType| getTransactionType()

Returns the transaction type of the entity managers created by the 
EntityManagerFactory. The transaction type corresponds to the transaction-type 
attribute in the persistence.xml file. 



    Returns: The transaction type of the entity managers created by the 
             EntityManagerFactory. The transaction type corresponds to the 
             transaction-type attribute in the persistence.xml file. 



*javax.management.modelmbean.DescriptorSupport* *DescriptorSupport* This class r

public class DescriptorSupport
  extends    |java.lang.Object|
  implements |javax.management.Descriptor|

|javax.management.modelmbean.DescriptorSupport_Description|
|javax.management.modelmbean.DescriptorSupport_Fields|
|javax.management.modelmbean.DescriptorSupport_Constructors|
|javax.management.modelmbean.DescriptorSupport_Methods|

================================================================================

*javax.management.modelmbean.DescriptorSupport_Constructors*
|javax.management.modelmbean.DescriptorSupport()|Descriptor default constructor
|javax.management.modelmbean.DescriptorSupport(DescriptorSupport)|Descriptor co
|javax.management.modelmbean.DescriptorSupport(int)|Descriptor constructor.
|javax.management.modelmbean.DescriptorSupport(String)|Descriptor constructor t
|javax.management.modelmbean.DescriptorSupport(String[])|Constructor taking fie
|javax.management.modelmbean.DescriptorSupport(String[],Object[])|Constructor t

*javax.management.modelmbean.DescriptorSupport_Methods*
|javax.management.modelmbean.DescriptorSupport.clone()|Returns a new Descriptor
|javax.management.modelmbean.DescriptorSupport.getFieldNames()|Returns all the 
|javax.management.modelmbean.DescriptorSupport.getFields()|Returns all the fiel
|javax.management.modelmbean.DescriptorSupport.getFieldValue(String)|Returns th
|javax.management.modelmbean.DescriptorSupport.getFieldValues(String[])|Returns
|javax.management.modelmbean.DescriptorSupport.isValid()|Returns true if all of
|javax.management.modelmbean.DescriptorSupport.removeField(String)|Removes a fi
|javax.management.modelmbean.DescriptorSupport.setField(String,Object)|Sets the
|javax.management.modelmbean.DescriptorSupport.setFields(String[],Object[])|Set
|javax.management.modelmbean.DescriptorSupport.toString()|Returns a human reada
|javax.management.modelmbean.DescriptorSupport.toXMLString()|Returns an XML Str

*javax.management.modelmbean.DescriptorSupport_Description*

This class represents the metadata set for a ModelMBean element. A descriptor 
is part of the ModelMBeanInfo, ModelMBeanNotificationInfo, 
ModelMBeanAttributeInfo, ModelMBeanConstructorInfo, and 
ModelMBeanParameterInfo. 

A descriptor consists of a collection of fields. Each field is in 
fieldname=fieldvalue format. Field names are not case sensitive, case will be 
preserved on field values. 

All field names and values are not predefined. New fields can be defined and 
added by any program. Some fields have been predefined for consistency of 
implementation and support by the ModelMBeanInfo, ModelMBeanAttributeInfo, 
ModelMBeanConstructorInfo, ModelMBeanNotificationInfo, ModelMBeanOperationInfo 
and ModelMBean classes. 


*javax.management.modelmbean.DescriptorSupport()*

public DescriptorSupport()

Descriptor default constructor. Default initial descriptor size is 20. It will 
grow as needed. Note that the created empty descriptor is not a valid 
descriptor (the method isValid(|javax.management.modelmbean.DescriptorSupport|) 
returns false) 


*javax.management.modelmbean.DescriptorSupport(DescriptorSupport)*

public DescriptorSupport(javax.management.modelmbean.DescriptorSupport inDescr)

Descriptor constructor taking a Descriptor as parameter. Creates a new 
descriptor initialized to the values of the descriptor passed in parameter. 

    inDescr - the descriptor to be used to initialize the constructed descriptor. If it is 
       null or contains no descriptor fields, an empty Descriptor will be 
       created. 

*javax.management.modelmbean.DescriptorSupport(int)*

public DescriptorSupport(int initNumFields)
  throws |javax.management.MBeanException|
         |javax.management.RuntimeOperationsException|
         
Descriptor constructor. Takes as parameter the initial capacity of the Map that 
stores the descriptor fields. Capacity will grow as needed. Note that the 
created empty descriptor is not a valid descriptor (the method 
isValid(|javax.management.modelmbean.DescriptorSupport|) returns false). 

    initNumFields - The initial capacity of the Map that stores the descriptor fields. 

*javax.management.modelmbean.DescriptorSupport(String)*

public DescriptorSupport(java.lang.String inStr)
  throws |javax.management.MBeanException|
         |javax.management.RuntimeOperationsException|
         |javax.management.modelmbean.XMLParseException|
         
Descriptor constructor taking an XML String. 

The format of the XML string is not defined, but an implementation must ensure 
that the string returned by 
toXMLString()(|javax.management.modelmbean.DescriptorSupport|) on an existing 
descriptor can be used to instantiate an equivalent descriptor using this 
constructor. 

In this implementation, all field values will be created as Strings. If the 
field values are not Strings, the programmer will have to reset or convert 
these fields correctly. 

    inStr - An XML-formatted string used to populate this Descriptor. The format is not 
       defined, but any implementation must ensure that the string returned by 
       method {@link #toXMLString toXMLString} on an existing descriptor can be 
       used to instantiate an equivalent descriptor when instantiated using 
       this constructor. 

*javax.management.modelmbean.DescriptorSupport(String[])*

public DescriptorSupport(java.lang.String[] fields)

Constructor taking fields in the fieldName=fieldValue format. 

    fields - String array with each element containing a field name and value. If this array 
       is null or empty, then the default constructor will be executed. Null 
       strings or empty strings will be ignored. 

All field values should be Strings. If the field values are not Strings, the 
       programmer will have to reset or convert these fields correctly. 

Note: Each string should be of the form fieldName=fieldValue. 

*javax.management.modelmbean.DescriptorSupport(String[],Object[])*

public DescriptorSupport(
  java.lang.String[] fieldNames,
  java.lang.Object[] fieldValues)
  throws |javax.management.RuntimeOperationsException|
         
Constructor taking field names and field values. The array and array elements 
cannot be null. 

    fieldNames - String array of field names. No elements of this array can be null. 
    fieldValues - Object array of the corresponding field values. Elements of the array can be 
       null. The fieldValue must be valid for the fieldName (as defined in 
       method {@link #isValid isValid}) 

Note: array sizes of parameters should match. If both arrays are null or empty, 
       then an empty descriptor is created. 

*javax.management.modelmbean.DescriptorSupport.clone()*

public synchronized |java.lang.Object| clone()
  throws |javax.management.RuntimeOperationsException|
         
Returns a new Descriptor which is a duplicate of the Descriptor. 


*javax.management.modelmbean.DescriptorSupport.getFieldNames()*

public synchronized |java.lang.String| getFieldNames()

Returns all the fields names in the descriptor. The order is not the order in 
which the fields were set. 


    Returns: String array of fields names. If the descriptor is empty, you will get an empty 
             array. 
*javax.management.modelmbean.DescriptorSupport.getFields()*

public synchronized |java.lang.String| getFields()

Returns all the fields in the descriptor. The order is not the order in which 
the fields were set. 


    Returns: String array of fields in the format fieldName=fieldValue. If there are no 
             fields in the descriptor, then an empty String array is returned. 
             If a fieldValue is not a String then the toString() method is 
             called on it and its returned value is used as the value for the 
             field enclosed in parenthesis. 
*javax.management.modelmbean.DescriptorSupport.getFieldValue(String)*

public synchronized |java.lang.Object| getFieldValue(java.lang.String inFieldName)
  throws |javax.management.RuntimeOperationsException|
         
Returns the value for a specific fieldname. 

    inFieldName - The field name in question; if not found, null is returned. 

    Returns: An Object representing the field value 
*javax.management.modelmbean.DescriptorSupport.getFieldValues(String[])*

public synchronized |java.lang.Object| getFieldValues(java.lang.String[] fieldNames)

Returns all the field values in the descriptor as an array of Objects. The 
returned values are in the same order as the fieldNames String array parameter. 

    fieldNames - String array of the names of the fields that the values should be returned for. 
       If the array is empty then an empty array will be returned. If the array 
       is 'null' then all values will be returned. The order is not the order 
       in which the fields were set. If a field name in the array does not 
       exist, then null is returned for the matching array element being 
       returned. 

    Returns: Object array of field values. If the descriptor is empty, you will get an empty 
             array. 
*javax.management.modelmbean.DescriptorSupport.isValid()*

public synchronized boolean isValid()
  throws |javax.management.RuntimeOperationsException|
         
Returns true if all of the fields have legal values given their names. 

This implementation does not support interoperating with a directory or lookup 
service. Thus, conforming to the specification, no checking is done on the 
"export" field. 

Otherwise this implementation returns false if: 

name and descriptorType fieldNames are not defined, or null, or empty, or not 
String class, role, getMethod, setMethod fieldNames, if defined, are null or 
not String persistPeriod, currencyTimeLimit, lastUpdatedTimeStamp, 
lastReturnedTimeStamp if defined, are null, or not a Numeric String or not a 
Numeric Value >= -1 log fieldName, if defined, is null, or not a Boolean or not 
a String with value "t", "f", "true", "false". These String values must not be 
case sensitive. visibility fieldName, if defined, is null, or not a Numeric 
String or a not Numeric Value >= 1 and severity fieldName, if defined, is null, 
or not a Numeric String or not a Numeric Value >= 0 and persistPolicy 
fieldName, if defined, is null, or not a following String : "OnUpdate", 
"OnTimer", "NoMoreOftenThan", "Always", "Never". These String values must not 
be case sensitive. 


*javax.management.modelmbean.DescriptorSupport.removeField(String)*

public synchronized void removeField(java.lang.String fieldName)

Removes a field from the descriptor. 

    fieldName - String name of the field to be removed. If the field is not found no exception 
       is thrown. 

*javax.management.modelmbean.DescriptorSupport.setField(String,Object)*

public synchronized void setField(
  java.lang.String inFieldName,
  java.lang.Object fieldValue)
  throws |javax.management.RuntimeOperationsException|
         
Sets the string value for a specific fieldname. The value must be valid for the 
field (as defined in method 
isValid(|javax.management.modelmbean.DescriptorSupport|) ). If the field does 
not exist, it is added at the end of the Descriptor. If it does exist, the 
value is replaced. 

    inFieldName - The field name to be set. Must not be null or empty string. 
    fieldValue - The field value to be set for the field name. Can be null or empty string. 

*javax.management.modelmbean.DescriptorSupport.setFields(String[],Object[])*

public synchronized void setFields(
  java.lang.String[] fieldNames,
  java.lang.Object[] fieldValues)
  throws |javax.management.RuntimeOperationsException|
         
Sets all Fields in the list to the new value with the same index in the 
fieldValue array. Array sizes must match. The field value will be validated 
before it is set (by calling the method 
isValid(|javax.management.modelmbean.DescriptorSupport|) ). If it is not valid, 
then an exception will be thrown. If the arrays are empty, then no change will 
take effect. 

    fieldNames - String array of field names. The array and array elements cannot be null. 
    fieldValues - Object array of the corresponding field values. The array cannot be null. 
       Elements of the array can be null. 

*javax.management.modelmbean.DescriptorSupport.toString()*

public synchronized |java.lang.String| toString()

Returns a human readable string representing the descriptor. The string will be 
in the format of "fieldName=fieldValue,fieldName2=fieldValue2,..." 

If there are no fields in the descriptor, then an empty String is returned. 

If a fieldValue is an object then the toString() method is called on it and its 
returned value is used as the value for the field enclosed in parenthesis. 


*javax.management.modelmbean.DescriptorSupport.toXMLString()*

public synchronized |java.lang.String| toXMLString()

Returns an XML String representing the descriptor. 

The format is not defined, but an implementation must ensure that the string 
returned by this method can be used to build an equivalent descriptor when 
instantiated using the constructor DescriptorSupport(String 
inStr)(|javax.management.modelmbean.DescriptorSupport|) . 

Fields which are not String objects will have toString() called on them to 
create the value. The value will be enclosed in parentheses. It is not 
guaranteed that you can reconstruct these objects unless they have been 
specifically set up to support toString() in a meaningful format and have a 
matching constructor that accepts a String in the same format. 

If the descriptor is empty the following String is returned: 
<Descriptor></Descriptor> 


    Returns: the XML string. 


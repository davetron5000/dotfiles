*org.omg.CORBA.StringHolder* *StringHolder* The Holder for String.

public final class StringHolder
  extends    |java.lang.Object|
  implements |org.omg.CORBA.portable.Streamable|

|org.omg.CORBA.StringHolder_Description|
|org.omg.CORBA.StringHolder_Fields|
|org.omg.CORBA.StringHolder_Constructors|
|org.omg.CORBA.StringHolder_Methods|

================================================================================

*org.omg.CORBA.StringHolder_Fields*
|java.lang.String_org.omg.CORBA.StringHolder.value|

*org.omg.CORBA.StringHolder_Constructors*
|org.omg.CORBA.StringHolder()|Constructs a new StringHolder object with its  va
|org.omg.CORBA.StringHolder(String)|Constructs a new StringHolder object with i

*org.omg.CORBA.StringHolder_Methods*
|org.omg.CORBA.StringHolder._read(InputStream)|Reads the unmarshalled data from
|org.omg.CORBA.StringHolder._type()|Retrieves the TypeCode object that correspo
|org.omg.CORBA.StringHolder._write(OutputStream)|Marshals the value held by thi

*org.omg.CORBA.StringHolder_Description*

The Holder for String. For more information on Holder files, see "Generated 
Files: Holder Files". A Holder class for a String that is used to store "out" 
and "inout" parameters in IDL operations. If an IDL operation signature has an 
IDL string as an "out" or "inout" parameter, the programmer must pass an 
instance of StringHolder as the corresponding parameter in the method 
invocation; for "inout" parameters, the programmer must also fill the "in" 
value to be sent to the server. Before the method invocation returns, the ORB 
will fill in the value corresponding to the "out" value returned from the 
server. 

If myStringHolder is an instance of StringHolder, the value stored in its value 
field can be accessed with myStringHolder.value. 


*java.lang.String_org.omg.CORBA.StringHolder.value*

The Holder for String. For more information on Holder files, see "Generated 
Files: Holder Files". A Holder class for a String that is used to store "out" 
and "inout" parameters in IDL operations. If an IDL operation signature has an 
IDL string as an "out" or "inout" parameter, the programmer must pass an 
instance of StringHolder as the corresponding parameter in the method 
invocation; for "inout" parameters, the programmer must also fill the "in" 
value to be sent to the server. Before the method invocation returns, the ORB 
will fill in the value corresponding to the "out" value returned from the 
server. 

If myStringHolder is an instance of StringHolder, the value stored in its value 
field can be accessed with myStringHolder.value. 



*org.omg.CORBA.StringHolder()*

public StringHolder()

Constructs a new StringHolder object with its value field initialized to null. 


*org.omg.CORBA.StringHolder(String)*

public StringHolder(java.lang.String initial)

Constructs a new StringHolder object with its value field initialized to the 
given String. 

    initial - the String with which to initialize the value field of the newly-created 
       StringHolder object 

*org.omg.CORBA.StringHolder._read(InputStream)*

public void _read(org.omg.CORBA.portable.InputStream input)

Reads the unmarshalled data from input and assigns it to the value field of 
this StringHolder object. 

    input - the InputStream containing CDR formatted data from the wire. 

*org.omg.CORBA.StringHolder._type()*

public |org.omg.CORBA.TypeCode| _type()

Retrieves the TypeCode object that corresponds to the value held in this 
StringHolder object. 


    Returns: the type code of the value held in this StringHolder object 
*org.omg.CORBA.StringHolder._write(OutputStream)*

public void _write(org.omg.CORBA.portable.OutputStream output)

Marshals the value held by this StringHolder object to the output stream 
output. 

    output - the OutputStream which will contain the CDR formatted data. 



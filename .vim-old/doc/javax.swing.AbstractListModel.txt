*javax.swing.AbstractListModel* *AbstractListModel* The abstract definition for the data model that provides
 a List with its contents.

public abstract class AbstractListModel
  extends    |java.lang.Object|
  implements |javax.swing.ListModel|
             |java.io.Serializable|

|javax.swing.AbstractListModel_Description|
|javax.swing.AbstractListModel_Fields|
|javax.swing.AbstractListModel_Constructors|
|javax.swing.AbstractListModel_Methods|

====================================================================================================================================================================================

*javax.swing.AbstractListModel_Fields*
|javax.swing.event.EventListenerList_javax.swing.AbstractListModel.listenerList|

*javax.swing.AbstractListModel_Constructors*
|javax.swing.AbstractListModel()|

*javax.swing.AbstractListModel_Methods*
|javax.swing.AbstractListModel.addListDataListener(ListDataListener)|Adds a listener to the list that's notified each time a change  to the data model occurs.
|javax.swing.AbstractListModel.fireContentsChanged(Object,int,int)|AbstractListModel subclasses must call this method  after  one or more elements of the list change.
|javax.swing.AbstractListModel.fireIntervalAdded(Object,int,int)|AbstractListModel subclasses must call this method  after  one or more elements are added to the model.
|javax.swing.AbstractListModel.fireIntervalRemoved(Object,int,int)|AbstractListModel subclasses must call this method  after one or more elements are removed from the model.
|javax.swing.AbstractListModel.getListDataListeners()|Returns an array of all the list data listeners  registered on this AbstractListModel.
|javax.swing.AbstractListModel.getListeners(Class<T>)|Returns an array of all the objects currently registered as  FooListeners  upon this model.
|javax.swing.AbstractListModel.removeListDataListener(ListDataListener)|Removes a listener from the list that's notified each time a   change to the data model occurs.

*javax.swing.AbstractListModel_Description*

The abstract definition for the data model that provides a List with its contents. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.event.EventListenerList_javax.swing.AbstractListModel.listenerList*





*javax.swing.AbstractListModel()*

public AbstractListModel()




*javax.swing.AbstractListModel.addListDataListener(ListDataListener)*

public void addListDataListener(javax.swing.event.ListDataListener l)

Adds a listener to the list that's notified each time a change to the data model occurs. 


    l - the ListDataListener to be added 

*javax.swing.AbstractListModel.fireContentsChanged(Object,int,int)*

protected void fireContentsChanged(
  java.lang.Object source,
  int index0,
  int index1)

AbstractListModel subclasses must call this method after one or more elements of the list change. The changed elements are specified by the closed interval index0, index1 -- the 
endpoints are included. Note that index0 need not be less than or equal to index1. 


    source - the ListModel that changed, typically "this" 
    index0 - one end of the new interval 
    index1 - the other end of the new interval 

*javax.swing.AbstractListModel.fireIntervalAdded(Object,int,int)*

protected void fireIntervalAdded(
  java.lang.Object source,
  int index0,
  int index1)

AbstractListModel subclasses must call this method after one or more elements are added to the model. The new elements are specified by a closed interval index0, index1 -- the 
enpoints are included. Note that index0 need not be less than or equal to index1. 


    source - the ListModel that changed, typically "this" 
    index0 - one end of the new interval 
    index1 - the other end of the new interval 

*javax.swing.AbstractListModel.fireIntervalRemoved(Object,int,int)*

protected void fireIntervalRemoved(
  java.lang.Object source,
  int index0,
  int index1)

AbstractListModel subclasses must call this method after one or more elements are removed from the model. index0 and index1 are the end points of the interval that's been removed. 
Note that index0 need not be less than or equal to index1. 


    source - the ListModel that changed, typically "this" 
    index0 - one end of the removed interval, including index0 
    index1 - the other end of the removed interval, including index1 

*javax.swing.AbstractListModel.getListDataListeners()*

public |javax.swing.event.ListDataListener|[] getListDataListeners()

Returns an array of all the list data listeners registered on this AbstractListModel. 



    Returns: all of this model's ListDataListeners, or an empty array if no list data listeners are currently registered 

*javax.swing.AbstractListModel.getListeners(Class<T>)*

public |T|[] getListeners(java.lang.Class<T> listenerType)

Returns an array of all the objects currently registered as FooListeners upon this model. FooListeners are registered using the addFooListener method. 

You can specify the listenerType argument with a class literal, such as FooListener.class. For example, you can query a list model m for its list data listeners with the following 
code: 

ListDataListener[] ldls = (ListDataListener[])(m.getListeners(ListDataListener.class)); 

If no such listeners exist, this method returns an empty array. 


    listenerType - the type of listeners requested; this parameter should specify an interface that descends from java.util.EventListener 

    Returns: an array of all objects registered as FooListeners on this model, or an empty array if no such listeners have been added 

*javax.swing.AbstractListModel.removeListDataListener(ListDataListener)*

public void removeListDataListener(javax.swing.event.ListDataListener l)

Removes a listener from the list that's notified each time a change to the data model occurs. 


    l - the ListDataListener to be removed 



*javax.servlet.ServletRequest* *ServletRequest* Defines an object to provide cli

public interface interface ServletRequest


|javax.servlet.ServletRequest_Description|
|javax.servlet.ServletRequest_Fields|
|javax.servlet.ServletRequest_Constructors|
|javax.servlet.ServletRequest_Methods|

================================================================================

*javax.servlet.ServletRequest_Methods*
|javax.servlet.ServletRequest.getAttribute(String)|Returns the value of the nam
|javax.servlet.ServletRequest.getAttributeNames()|Returns an Enumeration contai
|javax.servlet.ServletRequest.getCharacterEncoding()|Returns the name of the ch
|javax.servlet.ServletRequest.getContentLength()|Returns the length, in bytes, 
|javax.servlet.ServletRequest.getContentType()|Returns the MIME type of the bod
|javax.servlet.ServletRequest.getInputStream()|Retrieves the body of the reques
|javax.servlet.ServletRequest.getLocalAddr()|Returns the Internet Protocol (IP)
|javax.servlet.ServletRequest.getLocale()|Returns the preferred Locale that the
|javax.servlet.ServletRequest.getLocales()|Returns an Enumeration of Locale obj
|javax.servlet.ServletRequest.getLocalName()|Returns the host name of the Inter
|javax.servlet.ServletRequest.getLocalPort()|Returns the Internet Protocol (IP)
|javax.servlet.ServletRequest.getParameter(String)|Returns the value of a reque
|javax.servlet.ServletRequest.getParameterMap()|Returns a java.util.Map of the 
|javax.servlet.ServletRequest.getParameterNames()|Returns an Enumeration of Str
|javax.servlet.ServletRequest.getParameterValues(String)|Returns an array of St
|javax.servlet.ServletRequest.getProtocol()|Returns the name and version of the
|javax.servlet.ServletRequest.getReader()|Retrieves the body of the request as 
|javax.servlet.ServletRequest.getRealPath(String)|
|javax.servlet.ServletRequest.getRemoteAddr()|Returns the Internet Protocol (IP
|javax.servlet.ServletRequest.getRemoteHost()|Returns the fully qualified name 
|javax.servlet.ServletRequest.getRemotePort()|Returns the Internet Protocol (IP
|javax.servlet.ServletRequest.getRequestDispatcher(String)|Returns aRequestDisp
|javax.servlet.ServletRequest.getScheme()|Returns the name of the scheme used t
|javax.servlet.ServletRequest.getServerName()|Returns the host name of the serv
|javax.servlet.ServletRequest.getServerPort()|Returns the port number to which 
|javax.servlet.ServletRequest.isSecure()|Returns a boolean indicating whether t
|javax.servlet.ServletRequest.removeAttribute(String)|Removes an attribute from
|javax.servlet.ServletRequest.setAttribute(String,Object)|Stores an attribute i
|javax.servlet.ServletRequest.setCharacterEncoding(String)|Overrides the name o

*javax.servlet.ServletRequest_Description*

Defines an object to provide client request information to a servlet. The 
servlet container creates a ServletRequest object and passes it as an argument 
to the servlet's service method. 

A ServletRequest object provides data including parameter name and values, 
attributes, and an input stream. Interfaces that extend ServletRequest can 
provide additional protocol-specific data (for example, HTTP data is provided 
by (|javax.servlet.http.HttpServletRequest|) . 



*javax.servlet.ServletRequest.getAttribute(String)*

public |java.lang.Object| getAttribute(java.lang.String name)

Returns the value of the named attribute as an Object, or null if no attribute 
of the given name exists. 

Attributes can be set two ways. The servlet container may set attributes to 
make available custom information about a request. For example, for requests 
made using HTTPS, the attribute javax.servlet.request.X509Certificate can be 
used to retrieve information on the certificate of the client. Attributes can 
also be set programatically using (|javax.servlet.ServletRequest|) . This 
allows information to be embedded into a request before a 
(|javax.servlet.RequestDispatcher|) call. 

Attribute names should follow the same conventions as package names. This 
specification reserves names matching java.*, javax.*, and sun.*. 


    name - a String specifying the name of the attribute 

    Returns: an Object containing the value of the attribute, or null if the attribute does 
             not exist 

*javax.servlet.ServletRequest.getAttributeNames()*

public |java.util.Enumeration| getAttributeNames()

Returns an Enumeration containing the names of the attributes available to this 
request. This method returns an empty Enumeration if the request has no 
attributes available to it. 



    Returns: an Enumeration of strings containing the names of the request's attributes 

*javax.servlet.ServletRequest.getCharacterEncoding()*

public |java.lang.String| getCharacterEncoding()

Returns the name of the character encoding used in the body of this request. 
This method returns null if the request does not specify a character encoding 



    Returns: a String containing the name of the character encoding, or null if the request 
             does not specify a character encoding 

*javax.servlet.ServletRequest.getContentLength()*

public int getContentLength()

Returns the length, in bytes, of the request body and made available by the 
input stream, or -1 if the length is not known. For HTTP servlets, same as the 
value of the CGI variable CONTENT_LENGTH. 



    Returns: an integer containing the length of the request body or -1 if the length is not 
             known 

*javax.servlet.ServletRequest.getContentType()*

public |java.lang.String| getContentType()

Returns the MIME type of the body of the request, or null if the type is not 
known. For HTTP servlets, same as the value of the CGI variable CONTENT_TYPE. 



    Returns: a String containing the name of the MIME type of the request, or null if the 
             type is not known 

*javax.servlet.ServletRequest.getInputStream()*

public |javax.servlet.ServletInputStream| getInputStream()
  throws |java.io.IOException|
         
Retrieves the body of the request as binary data using a 
(|javax.servlet.ServletInputStream|) . Either this method or 
(|javax.servlet.ServletRequest|) may be called to read the body, not both. 



    Returns: a {@link ServletInputStream} object containing the body of the request 

*javax.servlet.ServletRequest.getLocalAddr()*

public |java.lang.String| getLocalAddr()

Returns the Internet Protocol (IP) address of the interface on which the 
request was received. 



    Returns: a String containing the IP address on which the request was received. 

*javax.servlet.ServletRequest.getLocale()*

public |java.util.Locale| getLocale()

Returns the preferred Locale that the client will accept content in, based on 
the Accept-Language header. If the client request doesn't provide an 
Accept-Language header, this method returns the default locale for the server. 



    Returns: the preferred Locale for the client 

*javax.servlet.ServletRequest.getLocales()*

public |java.util.Enumeration| getLocales()

Returns an Enumeration of Locale objects indicating, in decreasing order 
starting with the preferred locale, the locales that are acceptable to the 
client based on the Accept-Language header. If the client request doesn't 
provide an Accept-Language header, this method returns an Enumeration 
containing one Locale, the default locale for the server. 



    Returns: an Enumeration of preferred Locale objects for the client 

*javax.servlet.ServletRequest.getLocalName()*

public |java.lang.String| getLocalName()

Returns the host name of the Internet Protocol (IP) interface on which the 
request was received. 



    Returns: a String containing the host name of the IP on which the request was received. 

*javax.servlet.ServletRequest.getLocalPort()*

public int getLocalPort()

Returns the Internet Protocol (IP) port number of the interface on which the 
request was received. 



    Returns: an integer specifying the port number 

*javax.servlet.ServletRequest.getParameter(String)*

public |java.lang.String| getParameter(java.lang.String name)

Returns the value of a request parameter as a String, or null if the parameter 
does not exist. Request parameters are extra information sent with the request. 
For HTTP servlets, parameters are contained in the query string or posted form 
data. 

You should only use this method when you are sure the parameter has only one 
value. If the parameter might have more than one value, use 
(|javax.servlet.ServletRequest|) . 

If you use this method with a multivalued parameter, the value returned is 
equal to the first value in the array returned by getParameterValues. 

If the parameter data was sent in the request body, such as occurs with an HTTP 
POST request, then reading the body directly via 
(|javax.servlet.ServletRequest|) or (|javax.servlet.ServletRequest|) can 
interfere with the execution of this method. 


    name - a String specifying the name of the parameter 

    Returns: a String representing the single value of the parameter 

*javax.servlet.ServletRequest.getParameterMap()*

public |java.util.Map| getParameterMap()

Returns a java.util.Map of the parameters of this request. Request parameters 
are extra information sent with the request. For HTTP servlets, parameters are 
contained in the query string or posted form data. 



    Returns: an immutable java.util.Map containing parameter names as keys and parameter 
             values as map values. The keys in the parameter map are of type 
             String. The values in the parameter map are of type String array. 

*javax.servlet.ServletRequest.getParameterNames()*

public |java.util.Enumeration| getParameterNames()

Returns an Enumeration of String objects containing the names of the parameters 
contained in this request. If the request has no parameters, the method returns 
an empty Enumeration. 



    Returns: an Enumeration of String objects, each String containing the name of a request 
             parameter; or an empty Enumeration if the request has no 
             parameters 

*javax.servlet.ServletRequest.getParameterValues(String)*

public |java.lang.String|[] getParameterValues(java.lang.String name)

Returns an array of String objects containing all of the values the given 
request parameter has, or null if the parameter does not exist. 

If the parameter has a single value, the array has a length of 1. 


    name - a String containing the name of the parameter whose value is requested 

    Returns: an array of String objects containing the parameter's values 

*javax.servlet.ServletRequest.getProtocol()*

public |java.lang.String| getProtocol()

Returns the name and version of the protocol the request uses in the form 
protocol/majorVersion.minorVersion, for example, HTTP/1.1. For HTTP servlets, 
the value returned is the same as the value of the CGI variable 
SERVER_PROTOCOL. 



    Returns: a String containing the protocol name and version number 

*javax.servlet.ServletRequest.getReader()*

public |java.io.BufferedReader| getReader()
  throws |java.io.IOException|
         
Retrieves the body of the request as character data using a BufferedReader. The 
reader translates the character data according to the character encoding used 
on the body. Either this method or (|javax.servlet.ServletRequest|) may be 
called to read the body, not both. 



    Returns: a BufferedReader containing the body of the request 

*javax.servlet.ServletRequest.getRealPath(String)*

public |java.lang.String| getRealPath(java.lang.String path)



    Deprecated: As of Version 2.1 of the Java Servlet API,
 			use {@link ServletContext#getRealPath} instead.


*javax.servlet.ServletRequest.getRemoteAddr()*

public |java.lang.String| getRemoteAddr()

Returns the Internet Protocol (IP) address of the client or last proxy that 
sent the request. For HTTP servlets, same as the value of the CGI variable 
REMOTE_ADDR. 



    Returns: a String containing the IP address of the client that sent the request 

*javax.servlet.ServletRequest.getRemoteHost()*

public |java.lang.String| getRemoteHost()

Returns the fully qualified name of the client or the last proxy that sent the 
request. If the engine cannot or chooses not to resolve the hostname (to 
improve performance), this method returns the dotted-string form of the IP 
address. For HTTP servlets, same as the value of the CGI variable REMOTE_HOST. 



    Returns: a String containing the fully qualified name of the client 

*javax.servlet.ServletRequest.getRemotePort()*

public int getRemotePort()

Returns the Internet Protocol (IP) source port of the client or last proxy that 
sent the request. 



    Returns: an integer specifying the port number 

*javax.servlet.ServletRequest.getRequestDispatcher(String)*

public |javax.servlet.RequestDispatcher| getRequestDispatcher(java.lang.String path)

Returns a (|javax.servlet.RequestDispatcher|) object that acts as a wrapper for 
the resource located at the given path. A RequestDispatcher object can be used 
to forward a request to the resource or to include the resource in a response. 
The resource can be dynamic or static. 

The pathname specified may be relative, although it cannot extend outside the 
current servlet context. If the path begins with a "/" it is interpreted as 
relative to the current context root. This method returns null if the servlet 
container cannot return a RequestDispatcher. 

The difference between this method and (|javax.servlet.ServletContext|) is that 
this method can take a relative path. 


    path - a String specifying the pathname to the resource. If it is relative, it must be 
       relative against the current servlet. 

    Returns: a RequestDispatcher object that acts as a wrapper for the resource at the 
             specified path, or null if the servlet container cannot return a 
             RequestDispatcher 

*javax.servlet.ServletRequest.getScheme()*

public |java.lang.String| getScheme()

Returns the name of the scheme used to make this request, for example, http, 
https, or ftp. Different schemes have different rules for constructing URLs, as 
noted in RFC 1738. 



    Returns: a String containing the name of the scheme used to make this request 

*javax.servlet.ServletRequest.getServerName()*

public |java.lang.String| getServerName()

Returns the host name of the server to which the request was sent. It is the 
value of the part before ":" in the Host header value, if any, or the resolved 
server name, or the server IP address. 



    Returns: a String containing the name of the server 

*javax.servlet.ServletRequest.getServerPort()*

public int getServerPort()

Returns the port number to which the request was sent. It is the value of the 
part after ":" in the Host header value, if any, or the server port where the 
client connection was accepted on. 



    Returns: an integer specifying the port number 

*javax.servlet.ServletRequest.isSecure()*

public boolean isSecure()

Returns a boolean indicating whether this request was made using a secure 
channel, such as HTTPS. 



    Returns: a boolean indicating if the request was made using a secure channel 

*javax.servlet.ServletRequest.removeAttribute(String)*

public void removeAttribute(java.lang.String name)

Removes an attribute from this request. This method is not generally needed as 
attributes only persist as long as the request is being handled. 

Attribute names should follow the same conventions as package names. Names 
beginning with java.*, javax.*, and com.sun.*, are reserved for use by Sun 
Microsystems. 


    name - a String specifying the name of the attribute to remove 

*javax.servlet.ServletRequest.setAttribute(String,Object)*

public void setAttribute(
  java.lang.String name,
  java.lang.Object o)

Stores an attribute in this request. Attributes are reset between requests. 
This method is most often used in conjunction with 
(|javax.servlet.RequestDispatcher|) . 

Attribute names should follow the same conventions as package names. Names 
beginning with java.*, javax.*, and com.sun.*, are reserved for use by Sun 
Microsystems. If the object passed in is null, the effect is the same as 
calling (|javax.servlet.ServletRequest|) . It is warned that when the request 
is dispatched from the servlet resides in a different web application by 
RequestDispatcher, the object set by this method may not be correctly retrieved 
in the caller servlet. 


    name - a String specifying the name of the attribute 
    o - the Object to be stored 

*javax.servlet.ServletRequest.setCharacterEncoding(String)*

public void setCharacterEncoding(java.lang.String env)
  throws |java.io.UnsupportedEncodingException|
         
Overrides the name of the character encoding used in the body of this request. 
This method must be called prior to reading request parameters or reading input 
using getReader(). Otherwise, it has no effect. 


    env - String containing the name of the character encoding. 



*javax.sound.sampled.Clip* *Clip* The Clip interface represents a special kind o

public interface interface Clip

  implements |javax.sound.sampled.DataLine|

|javax.sound.sampled.Clip_Description|
|javax.sound.sampled.Clip_Fields|
|javax.sound.sampled.Clip_Constructors|
|javax.sound.sampled.Clip_Methods|

================================================================================

*javax.sound.sampled.Clip_Fields*
|int_javax.sound.sampled.Clip.LOOP_CONTINUOUSLY|

*javax.sound.sampled.Clip_Methods*
|javax.sound.sampled.Clip.getFrameLength()|Obtains the media length in sample f
|javax.sound.sampled.Clip.getMicrosecondLength()|Obtains the media duration in 
|javax.sound.sampled.Clip.loop(int)|Starts looping playback from the current po
|javax.sound.sampled.Clip.open(AudioFormat,byte[],int,int)|Opens the clip, mean
|javax.sound.sampled.Clip.open(AudioInputStream)|Opens the clip with the format
|javax.sound.sampled.Clip.setFramePosition(int)|Sets the media position in samp
|javax.sound.sampled.Clip.setLoopPoints(int,int)|Sets the first and last sample
|javax.sound.sampled.Clip.setMicrosecondPosition(long)|Sets the media position 

*javax.sound.sampled.Clip_Description*

The Clip interface represents a special kind of data line whose audio data can 
be loaded prior to playback, instead of being streamed in real time. 

Because the data is pre-loaded and has a known length, you can set a clip to 
start playing at any position in its audio data. You can also create a loop, so 
that when the clip is played it will cycle repeatedly. Loops are specified with 
a starting and ending sample frame, along with the number of times that the 
loop should be played. 

Clips may be obtained from a (|javax.sound.sampled.Mixer|) that supports lines 
of this type. Data is loaded into a clip when it is opened. 

Playback of an audio clip may be started and stopped using the start and stop 
methods. These methods do not reset the media position; start causes playback 
to continue from the position where playback was last stopped. To restart 
playback from the beginning of the clip's audio data, simply follow the 
invocation of stop(|javax.sound.sampled.DataLine|) with setFramePosition(0), 
which rewinds the media to the beginning of the clip. 


*int_javax.sound.sampled.Clip.LOOP_CONTINUOUSLY*

The Clip interface represents a special kind of data line whose audio data can 
be loaded prior to playback, instead of being streamed in real time. 

Because the data is pre-loaded and has a known length, you can set a clip to 
start playing at any position in its audio data. You can also create a loop, so 
that when the clip is played it will cycle repeatedly. Loops are specified with 
a starting and ending sample frame, along with the number of times that the 
loop should be played. 

Clips may be obtained from a (|javax.sound.sampled.Mixer|) that supports lines 
of this type. Data is loaded into a clip when it is opened. 

Playback of an audio clip may be started and stopped using the start and stop 
methods. These methods do not reset the media position; start causes playback 
to continue from the position where playback was last stopped. To restart 
playback from the beginning of the clip's audio data, simply follow the 
invocation of stop(|javax.sound.sampled.DataLine|) with setFramePosition(0), 
which rewinds the media to the beginning of the clip. 



*javax.sound.sampled.Clip.getFrameLength()*

public int getFrameLength()

Obtains the media length in sample frames. 


    Returns: the media length, expressed in sample frames, or AudioSystem.NOT_SPECIFIED if 
             the line is not open. 
*javax.sound.sampled.Clip.getMicrosecondLength()*

public long getMicrosecondLength()

Obtains the media duration in microseconds 


    Returns: the media duration, expressed in microseconds, or AudioSystem.NOT_SPECIFIED if 
             the line is not open. 
*javax.sound.sampled.Clip.loop(int)*

public void loop(int count)

Starts looping playback from the current position. Playback will continue to 
the loop's end point, then loop back to the loop start point count times, and 
finally continue playback to the end of the clip. 

If the current position when this method is invoked is greater than the loop 
end point, playback simply continues to the end of the clip without looping. 

A count value of 0 indicates that any current looping should cease and playback 
should continue to the end of the clip. The behavior is undefined when this 
method is invoked with any other value during a loop operation. 

If playback is stopped during looping, the current loop status is cleared; the 
behavior of subsequent loop and start requests is not affected by an 
interrupted loop operation. 

    count - the number of times playback should loop back from the loop's end position to 
       the loop's start position, or {@link #LOOP_CONTINUOUSLY} to indicate 
       that looping should continue until interrupted 

*javax.sound.sampled.Clip.open(AudioFormat,byte[],int,int)*

public void open(
  javax.sound.sampled.AudioFormat format,
  byte[] data,
  int offset,
  int bufferSize)
  throws |javax.sound.sampled.LineUnavailableException|
         
Opens the clip, meaning that it should acquire any required system resources 
and become operational. The clip is opened with the format and audio data 
indicated. If this operation succeeds, the line is marked as open and an 
OPEN(|javax.sound.sampled.LineEvent.Type|) event is dispatched to the line's 
listeners. 

Invoking this method on a line which is already open is illegal and may result 
in an IllegalStateException. 

Note that some lines, once closed, cannot be reopened. Attempts to reopen such 
a line will always result in a (|javax.sound.sampled.LineUnavailableException|) 
. 

    format - the format of the supplied audio data 
    data - a byte array containing audio data to load into the clip 
    offset - the point at which to start copying, expressed in bytes from the beginning of 
       the array 
    bufferSize - the number of bytes of data to load into the clip from the array. 

*javax.sound.sampled.Clip.open(AudioInputStream)*

public void open(javax.sound.sampled.AudioInputStream stream)
  throws |java.io.IOException|
         |javax.sound.sampled.LineUnavailableException|
         
Opens the clip with the format and audio data present in the provided audio 
input stream. Opening a clip means that it should acquire any required system 
resources and become operational. If this operation input stream. If this 
operation succeeds, the line is marked open and an 
OPEN(|javax.sound.sampled.LineEvent.Type|) event is dispatched to the line's 
listeners. 

Invoking this method on a line which is already open is illegal and may result 
in an IllegalStateException. 

Note that some lines, once closed, cannot be reopened. Attempts to reopen such 
a line will always result in a (|javax.sound.sampled.LineUnavailableException|) 
. 

    stream - an audio input stream from which audio data will be read into the clip 

*javax.sound.sampled.Clip.setFramePosition(int)*

public void setFramePosition(int frames)

Sets the media position in sample frames. The position is zero-based; the first 
frame is frame number zero. When the clip begins playing the next time, it will 
start by playing the frame at this position. 

To obtain the current position in sample frames, use the 
getFramePosition(|javax.sound.sampled.DataLine|) method of DataLine. 

    frames - the desired new media position, expressed in sample frames 

*javax.sound.sampled.Clip.setLoopPoints(int,int)*

public void setLoopPoints(
  int start,
  int end)

Sets the first and last sample frames that will be played in the loop. The 
ending point must be greater than or equal to the starting point, and both must 
fall within the the size of the loaded media. A value of 0 for the starting 
point means the beginning of the loaded media. Similarly, a value of -1 for the 
ending point indicates the last frame of the media. 

    start - the loop's starting position, in sample frames (zero-based) 
    end - the loop's ending position, in sample frames (zero-based), or -1 to indicate 
       the final frame 

*javax.sound.sampled.Clip.setMicrosecondPosition(long)*

public void setMicrosecondPosition(long microseconds)

Sets the media position in microseconds. When the clip begins playing the next 
time, it will start at this position. The level of precision is not guaranteed. 
For example, an implementation might calculate the microsecond position from 
the current frame position and the audio sample frame rate. The precision in 
microseconds would then be limited to the number of microseconds per sample 
frame. 

To obtain the current position in microseconds, use the 
getMicrosecondPosition(|javax.sound.sampled.DataLine|) method of DataLine. 

    microseconds - the desired new media position, expressed in microseconds 



*javax.servlet.http.Cookie* *Cookie* Creates a cookie, a small amount of informa

public class Cookie
  extends    |java.lang.Object|
  implements |java.lang.Cloneable|

|javax.servlet.http.Cookie_Description|
|javax.servlet.http.Cookie_Fields|
|javax.servlet.http.Cookie_Constructors|
|javax.servlet.http.Cookie_Methods|

================================================================================

*javax.servlet.http.Cookie_Constructors*
|javax.servlet.http.Cookie(String,String)|Constructs a cookie with a specified 

*javax.servlet.http.Cookie_Methods*
|javax.servlet.http.Cookie.clone()|Overrides the standard java.lang.Object.clon
|javax.servlet.http.Cookie.getComment()|Returns the comment describing the purp
|javax.servlet.http.Cookie.getDomain()|Returns the domain name set for this coo
|javax.servlet.http.Cookie.getMaxAge()|Returns the maximum age of the cookie, s
|javax.servlet.http.Cookie.getName()|Returns the name of the cookie.
|javax.servlet.http.Cookie.getPath()|Returns the path on the server   to which 
|javax.servlet.http.Cookie.getSecure()|Returns true if the browser is sending c
|javax.servlet.http.Cookie.getValue()|Returns the value of the cookie.
|javax.servlet.http.Cookie.getVersion()|Returns the version of the protocol thi
|javax.servlet.http.Cookie.setComment(String)|Specifies a comment that describe
|javax.servlet.http.Cookie.setDomain(String)|Specifies the domain within which 
|javax.servlet.http.Cookie.setMaxAge(int)|Sets the maximum age of the cookie in
|javax.servlet.http.Cookie.setPath(String)|Specifies a path for the cookie  to 
|javax.servlet.http.Cookie.setSecure(boolean)|Indicates to the browser whether 
|javax.servlet.http.Cookie.setValue(String)|Assigns a new value to a cookie aft
|javax.servlet.http.Cookie.setVersion(int)|Sets the version of the cookie proto

*javax.servlet.http.Cookie_Description*

Creates a cookie, a small amount of information sent by a servlet to a Web 
browser, saved by the browser, and later sent back to the server. A cookie's 
value can uniquely identify a client, so cookies are commonly used for session 
management. 

A cookie has a name, a single value, and optional attributes such as a comment, 
path and domain qualifiers, a maximum age, and a version number. Some Web 
browsers have bugs in how they handle the optional attributes, so use them 
sparingly to improve the interoperability of your servlets. 

The servlet sends cookies to the browser by using the 
(|javax.servlet.http.HttpServletResponse|) method, which adds fields to HTTP 
response headers to send cookies to the browser, one at a time. The browser is 
expected to support 20 cookies for each Web server, 300 cookies total, and may 
limit cookie size to 4 KB each. 

The browser returns cookies to the servlet by adding fields to HTTP request 
headers. Cookies can be retrieved from a request by using the 
(|javax.servlet.http.HttpServletRequest|) method. Several cookies might have 
the same name but different path attributes. 

Cookies affect the caching of the Web pages that use them. HTTP 1.0 does not 
cache pages that use cookies created with this class. This class does not 
support the cache control defined with HTTP 1.1. 

This class supports both the Version 0 (by Netscape) and Version 1 (by RFC 
2109) cookie specifications. By default, cookies are created using Version 0 to 
ensure the best interoperability. 



*javax.servlet.http.Cookie(String,String)*

public Cookie(
  java.lang.String name,
  java.lang.String value)

Constructs a cookie with a specified name and value. 

The name must conform to RFC 2109. That means it can contain only ASCII 
alphanumeric characters and cannot contain commas, semicolons, or white space 
or begin with a $ character. The cookie's name cannot be changed after 
creation. 

The value can be anything the server chooses to send. Its value is probably of 
interest only to the server. The cookie's value can be changed after creation 
with the setValue method. 

By default, cookies are created according to the Netscape cookie specification. 
The version can be changed with the setVersion method. 

    name - a String specifying the name of the cookie 
    value - a String specifying the value of the cookie 

*javax.servlet.http.Cookie.clone()*

public |java.lang.Object| clone()

Overrides the standard java.lang.Object.clone method to return a copy of this 
cookie. 



*javax.servlet.http.Cookie.getComment()*

public |java.lang.String| getComment()

Returns the comment describing the purpose of this cookie, or null if the 
cookie has no comment. 



    Returns: a String containing the comment, or null if none 

*javax.servlet.http.Cookie.getDomain()*

public |java.lang.String| getDomain()

Returns the domain name set for this cookie. The form of the domain name is set 
by RFC 2109. 



    Returns: a String containing the domain name 

*javax.servlet.http.Cookie.getMaxAge()*

public int getMaxAge()

Returns the maximum age of the cookie, specified in seconds, By default, -1 
indicating the cookie will persist until browser shutdown. 



    Returns: an integer specifying the maximum age of the cookie in seconds; if negative, 
             means the cookie persists until browser shutdown 

*javax.servlet.http.Cookie.getName()*

public |java.lang.String| getName()

Returns the name of the cookie. The name cannot be changed after creation. 



    Returns: a String specifying the cookie's name 

*javax.servlet.http.Cookie.getPath()*

public |java.lang.String| getPath()

Returns the path on the server to which the browser returns this cookie. The 
cookie is visible to all subpaths on the server. 



    Returns: a String specifying a path that contains a servlet name, for example, /catalog 

*javax.servlet.http.Cookie.getSecure()*

public boolean getSecure()

Returns true if the browser is sending cookies only over a secure protocol, or 
false if the browser can send cookies using any protocol. 



    Returns: true if the browser uses a secure protocol; otherwise, true 

*javax.servlet.http.Cookie.getValue()*

public |java.lang.String| getValue()

Returns the value of the cookie. 



    Returns: a String containing the cookie's present value 

*javax.servlet.http.Cookie.getVersion()*

public int getVersion()

Returns the version of the protocol this cookie complies with. Version 1 
complies with RFC 2109, and version 0 complies with the original cookie 
specification drafted by Netscape. Cookies provided by a browser use and 
identify the browser's cookie version. 



    Returns: 0 if the cookie complies with the original Netscape specification; 1 if the 
             cookie complies with RFC 2109 

*javax.servlet.http.Cookie.setComment(String)*

public void setComment(java.lang.String purpose)

Specifies a comment that describes a cookie's purpose. The comment is useful if 
the browser presents the cookie to the user. Comments are not supported by 
Netscape Version 0 cookies. 


    purpose - a String specifying the comment to display to the user 

*javax.servlet.http.Cookie.setDomain(String)*

public void setDomain(java.lang.String pattern)

Specifies the domain within which this cookie should be presented. 

The form of the domain name is specified by RFC 2109. A domain name begins with 
a dot (.foo.com) and means that the cookie is visible to servers in a specified 
Domain Name System (DNS) zone (for example, www.foo.com, but not a.b.foo.com). 
By default, cookies are only returned to the server that sent them. 


    pattern - a String containing the domain name within which this cookie is visible; form 
       is according to RFC 2109 

*javax.servlet.http.Cookie.setMaxAge(int)*

public void setMaxAge(int expiry)

Sets the maximum age of the cookie in seconds. 

A positive value indicates that the cookie will expire after that many seconds 
have passed. Note that the value is the maximum age when the cookie will 
expire, not the cookie's current age. 

A negative value means that the cookie is not stored persistently and will be 
deleted when the Web browser exits. A zero value causes the cookie to be 
deleted. 


    expiry - an integer specifying the maximum age of the cookie in seconds; if negative, 
       means the cookie is not stored; if zero, deletes the cookie 

*javax.servlet.http.Cookie.setPath(String)*

public void setPath(java.lang.String uri)

Specifies a path for the cookie to which the client should return the cookie. 

The cookie is visible to all the pages in the directory you specify, and all 
the pages in that directory's subdirectories. A cookie's path must include the 
servlet that set the cookie, for example, /catalog, which makes the cookie 
visible to all directories on the server under /catalog. 

Consult RFC 2109 (available on the Internet) for more information on setting 
path names for cookies. 


    uri - a String specifying a path 

*javax.servlet.http.Cookie.setSecure(boolean)*

public void setSecure(boolean flag)

Indicates to the browser whether the cookie should only be sent using a secure 
protocol, such as HTTPS or SSL. 

The default value is false. 


    flag - if true, sends the cookie from the browser to the server only when using a 
       secure protocol; if false, sent on any protocol 

*javax.servlet.http.Cookie.setValue(String)*

public void setValue(java.lang.String newValue)

Assigns a new value to a cookie after the cookie is created. If you use a 
binary value, you may want to use BASE64 encoding. 

With Version 0 cookies, values should not contain white space, brackets, 
parentheses, equals signs, commas, double quotes, slashes, question marks, at 
signs, colons, and semicolons. Empty values may not behave the same way on all 
browsers. 


    newValue - a String specifying the new value 

*javax.servlet.http.Cookie.setVersion(int)*

public void setVersion(int v)

Sets the version of the cookie protocol this cookie complies with. Version 0 
complies with the original Netscape cookie specification. Version 1 complies 
with RFC 2109. 

Since RFC 2109 is still somewhat new, consider version 1 as experimental; do 
not use it yet on production sites. 


    v - 0 if the cookie should comply with the original Netscape specification; 1 if 
       the cookie should comply with RFC 2109 



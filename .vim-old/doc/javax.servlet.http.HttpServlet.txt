*javax.servlet.http.HttpServlet* *HttpServlet* Provides an abstract class to be 

public abstract class HttpServlet
  extends    |javax.servlet.GenericServlet|
  implements |java.io.Serializable|

|javax.servlet.http.HttpServlet_Description|
|javax.servlet.http.HttpServlet_Fields|
|javax.servlet.http.HttpServlet_Constructors|
|javax.servlet.http.HttpServlet_Methods|

================================================================================

*javax.servlet.http.HttpServlet_Constructors*
|javax.servlet.http.HttpServlet()|Does nothing, because this is an abstract cla

*javax.servlet.http.HttpServlet_Methods*
|javax.servlet.http.HttpServlet.doDelete(HttpServletRequest,HttpServletResponse)|
|javax.servlet.http.HttpServlet.doGet(HttpServletRequest,HttpServletResponse)|C
|javax.servlet.http.HttpServlet.doHead(HttpServletRequest,HttpServletResponse)|
|javax.servlet.http.HttpServlet.doOptions(HttpServletRequest,HttpServletResponse)|
|javax.servlet.http.HttpServlet.doPost(HttpServletRequest,HttpServletResponse)|
|javax.servlet.http.HttpServlet.doPut(HttpServletRequest,HttpServletResponse)|C
|javax.servlet.http.HttpServlet.doTrace(HttpServletRequest,HttpServletResponse)|
|javax.servlet.http.HttpServlet.getLastModified(HttpServletRequest)|Returns the
|javax.servlet.http.HttpServlet.service(HttpServletRequest,HttpServletResponse)|
|javax.servlet.http.HttpServlet.service(ServletRequest,ServletResponse)|Dispatc

*javax.servlet.http.HttpServlet_Description*

Provides an abstract class to be subclassed to create an HTTP servlet suitable 
for a Web site. A subclass of HttpServlet must override at least one method, 
usually one of these: 

doGet, if the servlet supports HTTP GET requests doPost, for HTTP POST requests 
doPut, for HTTP PUT requests doDelete, for HTTP DELETE requests init and 
destroy, to manage resources that are held for the life of the servlet 
getServletInfo, which the servlet uses to provide information about itself 

There's almost no reason to override the service method. service handles 
standard HTTP requests by dispatching them to the handler methods for each HTTP 
request type (the doXXX methods listed above). 

Likewise, there's almost no reason to override the doOptions and doTrace 
methods. 

Servlets typically run on multithreaded servers, so be aware that a servlet 
must handle concurrent requests and be careful to synchronize access to shared 
resources. Shared resources include in-memory data such as instance or class 
variables and external objects such as files, database connections, and network 
connections. See the 

Java Tutorial on Multithreaded Programming for more information on handling 
multiple threads in a Java program. 



*javax.servlet.http.HttpServlet()*

public HttpServlet()

Does nothing, because this is an abstract class. 


*javax.servlet.http.HttpServlet.doDelete(HttpServletRequest,HttpServletResponse)*

protected void doDelete(
  javax.servlet.http.HttpServletRequest req,
  javax.servlet.http.HttpServletResponse resp)
  throws |java.io.IOException|
         |javax.servlet.ServletException|
         
Called by the server (via the service method) to allow a servlet to handle a 
DELETE request. 

The DELETE operation allows a client to remove a document or Web page from the 
server. 

This method does not need to be either safe or idempotent. Operations requested 
through DELETE can have side effects for which users can be held accountable. 
When using this method, it may be useful to save a copy of the affected URL in 
temporary storage. 

If the HTTP DELETE request is incorrectly formatted, doDelete returns an HTTP 
"Bad Request" message. 


    req - the {@link HttpServletRequest} object that contains the request the client made 
       of the servlet 
    resp - the {@link HttpServletResponse} object that contains the response the servlet 
       returns to the client 

*javax.servlet.http.HttpServlet.doGet(HttpServletRequest,HttpServletResponse)*

protected void doGet(
  javax.servlet.http.HttpServletRequest req,
  javax.servlet.http.HttpServletResponse resp)
  throws |java.io.IOException|
         |javax.servlet.ServletException|
         
Called by the server (via the service method) to allow a servlet to handle a 
GET request. 

Overriding this method to support a GET request also automatically supports an 
HTTP HEAD request. A HEAD request is a GET request that returns no body in the 
response, only the request header fields. 

When overriding this method, read the request data, write the response headers, 
get the response's writer or output stream object, and finally, write the 
response data. It's best to include content type and encoding. When using a 
PrintWriter object to return the response, set the content type before 
accessing the PrintWriter object. 

The servlet container must write the headers before committing the response, 
because in HTTP the headers must be sent before the response body. 

Where possible, set the Content-Length header (with the 
(|javax.servlet.ServletResponse|) method), to allow the servlet container to 
use a persistent connection to return its response to the client, improving 
performance. The content length is automatically set if the entire response 
fits inside the response buffer. 

When using HTTP 1.1 chunked encoding (which means that the response has a 
Transfer-Encoding header), do not set the Content-Length header. 

The GET method should be safe, that is, without any side effects for which 
users are held responsible. For example, most form queries have no side 
effects. If a client request is intended to change stored data, the request 
should use some other HTTP method. 

The GET method should also be idempotent, meaning that it can be safely 
repeated. Sometimes making a method safe also makes it idempotent. For example, 
repeating queries is both safe and idempotent, but buying a product online or 
modifying data is neither safe nor idempotent. 

If the request is incorrectly formatted, doGet returns an HTTP "Bad Request" 
message. 


    req - an {@link HttpServletRequest} object that contains the request the client has 
       made of the servlet 
    resp - an {@link HttpServletResponse} object that contains the response the servlet 
       sends to the client 

*javax.servlet.http.HttpServlet.doHead(HttpServletRequest,HttpServletResponse)*

protected void doHead(
  javax.servlet.http.HttpServletRequest req,
  javax.servlet.http.HttpServletResponse resp)
  throws |java.io.IOException|
         |javax.servlet.ServletException|
         
Receives an HTTP HEAD request from the protected service method and handles the 
request. The client sends a HEAD request when it wants to see only the headers 
of a response, such as Content-Type or Content-Length. The HTTP HEAD method 
counts the output bytes in the response to set the Content-Length header 
accurately. 

If you override this method, you can avoid computing the response body and just 
set the response headers directly to improve performance. Make sure that the 
doHead method you write is both safe and idempotent (that is, protects itself 
from being called multiple times for one HTTP HEAD request). 

If the HTTP HEAD request is incorrectly formatted, doHead returns an HTTP "Bad 
Request" message. 


    req - the request object that is passed to the servlet 
    resp - the response object that the servlet uses to return the headers to the clien 

*javax.servlet.http.HttpServlet.doOptions(HttpServletRequest,HttpServletResponse)*

protected void doOptions(
  javax.servlet.http.HttpServletRequest req,
  javax.servlet.http.HttpServletResponse resp)
  throws |java.io.IOException|
         |javax.servlet.ServletException|
         
Called by the server (via the service method) to allow a servlet to handle a 
OPTIONS request. 

The OPTIONS request determines which HTTP methods the server supports and 
returns an appropriate header. For example, if a servlet overrides doGet, this 
method returns the following header: 

Allow: GET, HEAD, TRACE, OPTIONS 

There's no need to override this method unless the servlet implements new HTTP 
methods, beyond those implemented by HTTP 1.1. 


    req - the {@link HttpServletRequest} object that contains the request the client made 
       of the servlet 
    resp - the {@link HttpServletResponse} object that contains the response the servlet 
       returns to the client 

*javax.servlet.http.HttpServlet.doPost(HttpServletRequest,HttpServletResponse)*

protected void doPost(
  javax.servlet.http.HttpServletRequest req,
  javax.servlet.http.HttpServletResponse resp)
  throws |java.io.IOException|
         |javax.servlet.ServletException|
         
Called by the server (via the service method) to allow a servlet to handle a 
POST request. 

The HTTP POST method allows the client to send data of unlimited length to the 
Web server a single time and is useful when posting information such as credit 
card numbers. 

When overriding this method, read the request data, write the response headers, 
get the response's writer or output stream object, and finally, write the 
response data. It's best to include content type and encoding. When using a 
PrintWriter object to return the response, set the content type before 
accessing the PrintWriter object. 

The servlet container must write the headers before committing the response, 
because in HTTP the headers must be sent before the response body. 

Where possible, set the Content-Length header (with the 
(|javax.servlet.ServletResponse|) method), to allow the servlet container to 
use a persistent connection to return its response to the client, improving 
performance. The content length is automatically set if the entire response 
fits inside the response buffer. 

When using HTTP 1.1 chunked encoding (which means that the response has a 
Transfer-Encoding header), do not set the Content-Length header. 

This method does not need to be either safe or idempotent. Operations requested 
through POST can have side effects for which the user can be held accountable, 
for example, updating stored data or buying items online. 

If the HTTP POST request is incorrectly formatted, doPost returns an HTTP "Bad 
Request" message. 


    req - an {@link HttpServletRequest} object that contains the request the client has 
       made of the servlet 
    resp - an {@link HttpServletResponse} object that contains the response the servlet 
       sends to the client 

*javax.servlet.http.HttpServlet.doPut(HttpServletRequest,HttpServletResponse)*

protected void doPut(
  javax.servlet.http.HttpServletRequest req,
  javax.servlet.http.HttpServletResponse resp)
  throws |java.io.IOException|
         |javax.servlet.ServletException|
         
Called by the server (via the service method) to allow a servlet to handle a 
PUT request. 

The PUT operation allows a client to place a file on the server and is similar 
to sending a file by FTP. 

When overriding this method, leave intact any content headers sent with the 
request (including Content-Length, Content-Type, Content-Transfer-Encoding, 
Content-Encoding, Content-Base, Content-Language, Content-Location, 
Content-MD5, and Content-Range). If your method cannot handle a content header, 
it must issue an error message (HTTP 501 - Not Implemented) and discard the 
request. For more information on HTTP 1.1, see RFC 2616 . 

This method does not need to be either safe or idempotent. Operations that 
doPut performs can have side effects for which the user can be held 
accountable. When using this method, it may be useful to save a copy of the 
affected URL in temporary storage. 

If the HTTP PUT request is incorrectly formatted, doPut returns an HTTP "Bad 
Request" message. 


    req - the {@link HttpServletRequest} object that contains the request the client made 
       of the servlet 
    resp - the {@link HttpServletResponse} object that contains the response the servlet 
       returns to the client 

*javax.servlet.http.HttpServlet.doTrace(HttpServletRequest,HttpServletResponse)*

protected void doTrace(
  javax.servlet.http.HttpServletRequest req,
  javax.servlet.http.HttpServletResponse resp)
  throws |java.io.IOException|
         |javax.servlet.ServletException|
         
Called by the server (via the service method) to allow a servlet to handle a 
TRACE request. 

A TRACE returns the headers sent with the TRACE request to the client, so that 
they can be used in debugging. There's no need to override this method. 


    req - the {@link HttpServletRequest} object that contains the request the client made 
       of the servlet 
    resp - the {@link HttpServletResponse} object that contains the response the servlet 
       returns to the client 

*javax.servlet.http.HttpServlet.getLastModified(HttpServletRequest)*

protected long getLastModified(javax.servlet.http.HttpServletRequest req)

Returns the time the HttpServletRequest object was last modified, in 
milliseconds since midnight January 1, 1970 GMT. If the time is unknown, this 
method returns a negative number (the default). 

Servlets that support HTTP GET requests and can quickly determine their last 
modification time should override this method. This makes browser and proxy 
caches work more effectively, reducing the load on server and network 
resources. 


    req - the HttpServletRequest object that is sent to the servlet 

    Returns: a long integer specifying the time the HttpServletRequest object was last 
             modified, in milliseconds since midnight, January 1, 1970 GMT, or 
             -1 if the time is not known 

*javax.servlet.http.HttpServlet.service(HttpServletRequest,HttpServletResponse)*

protected void service(
  javax.servlet.http.HttpServletRequest req,
  javax.servlet.http.HttpServletResponse resp)
  throws |java.io.IOException|
         |javax.servlet.ServletException|
         
Receives standard HTTP requests from the public service method and dispatches 
them to the doXXX methods defined in this class. This method is an 
HTTP-specific version of the (|javax.servlet.Servlet|) method. There's no need 
to override this method. 


    req - the {@link HttpServletRequest} object that contains the request the client made 
       of the servlet 
    resp - the {@link HttpServletResponse} object that contains the response the servlet 
       returns to the client 

*javax.servlet.http.HttpServlet.service(ServletRequest,ServletResponse)*

public void service(
  javax.servlet.ServletRequest req,
  javax.servlet.ServletResponse res)
  throws |java.io.IOException|
         |javax.servlet.ServletException|
         
Dispatches client requests to the protected service method. There's no need to 
override this method. 


    req - the {@link HttpServletRequest} object that contains the request the client made 
       of the servlet 
    res - the {@link HttpServletResponse} object that contains the response the servlet 
       returns to the client 



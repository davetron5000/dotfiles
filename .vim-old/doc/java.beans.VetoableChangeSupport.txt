*java.beans.VetoableChangeSupport* *VetoableChangeSupport* This is a utility class that can be used by beans that support constrained
 properties.

public class VetoableChangeSupport
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.beans.VetoableChangeSupport_Description|
|java.beans.VetoableChangeSupport_Fields|
|java.beans.VetoableChangeSupport_Constructors|
|java.beans.VetoableChangeSupport_Methods|

====================================================================================================================================================================================

*java.beans.VetoableChangeSupport_Constructors*
|java.beans.VetoableChangeSupport(Object)|Constructs a VetoableChangeSupport object.

*java.beans.VetoableChangeSupport_Methods*
|java.beans.VetoableChangeSupport.addVetoableChangeListener(String,VetoableChangeListener)|Add a VetoableChangeListener for a specific property.
|java.beans.VetoableChangeSupport.addVetoableChangeListener(VetoableChangeListener)|Add a VetoableListener to the listener list.
|java.beans.VetoableChangeSupport.fireVetoableChange(PropertyChangeEvent)|Fire a vetoable property update to any registered listeners.
|java.beans.VetoableChangeSupport.fireVetoableChange(String,boolean,boolean)|Report a boolean vetoable property update to any registered listeners.
|java.beans.VetoableChangeSupport.fireVetoableChange(String,int,int)|Report a int vetoable property update to any registered listeners.
|java.beans.VetoableChangeSupport.fireVetoableChange(String,Object,Object)|Report a vetoable property update to any registered listeners.
|java.beans.VetoableChangeSupport.getVetoableChangeListeners()|Returns the list of VetoableChangeListeners.
|java.beans.VetoableChangeSupport.getVetoableChangeListeners(String)|Returns an array of all the listeners which have been associated   with the named property.
|java.beans.VetoableChangeSupport.hasListeners(String)|Check if there are any listeners for a specific property, including  those registered on all properties.
|java.beans.VetoableChangeSupport.removeVetoableChangeListener(String,VetoableChangeListener)|Remove a VetoableChangeListener for a specific property.
|java.beans.VetoableChangeSupport.removeVetoableChangeListener(VetoableChangeListener)|Remove a VetoableChangeListener from the listener list.

*java.beans.VetoableChangeSupport_Description*

This is a utility class that can be used by beans that support constrained properties. You can use an instance of this class as a member field of your bean and delegate various 
work to it. 

This class is serializable. When it is serialized it will save (and restore) any listeners that are themselves serializable. Any non-serializable listeners will be skipped during 
serialization. 



*java.beans.VetoableChangeSupport(Object)*

public VetoableChangeSupport(java.lang.Object sourceBean)

Constructs a VetoableChangeSupport object. 

    sourceBean - The bean to be given as the source for any events. 

*java.beans.VetoableChangeSupport.addVetoableChangeListener(String,VetoableChangeListener)*

public synchronized void addVetoableChangeListener(
  java.lang.String propertyName,
  java.beans.VetoableChangeListener listener)

Add a VetoableChangeListener for a specific property. The listener will be invoked only when a call on fireVetoableChange names that specific property. The same listener object 
may be added more than once. For each property, the listener will be invoked the number of times it was added for that property. If propertyName or listener is null, no exception 
is thrown and no action is taken. 


    propertyName - The name of the property to listen on. 
    listener - The VetoableChangeListener to be added 

*java.beans.VetoableChangeSupport.addVetoableChangeListener(VetoableChangeListener)*

public synchronized void addVetoableChangeListener(java.beans.VetoableChangeListener listener)

Add a VetoableListener to the listener list. The listener is registered for all properties. The same listener object may be added more than once, and will be called as many times 
as it is added. If listener is null, no exception is thrown and no action is taken. 


    listener - The VetoableChangeListener to be added 

*java.beans.VetoableChangeSupport.fireVetoableChange(PropertyChangeEvent)*

public void fireVetoableChange(java.beans.PropertyChangeEvent evt)
  throws |java.beans.PropertyVetoException|
         
Fire a vetoable property update to any registered listeners. If anyone vetos the change, then fire a new event reverting everyone to the old value and then rethrow the 
PropertyVetoException. 

No event is fired if old and new are equal and non-null. 


    evt - The PropertyChangeEvent to be fired. 

*java.beans.VetoableChangeSupport.fireVetoableChange(String,boolean,boolean)*

public void fireVetoableChange(
  java.lang.String propertyName,
  boolean oldValue,
  boolean newValue)
  throws |java.beans.PropertyVetoException|
         
Report a boolean vetoable property update to any registered listeners. No event is fired if old and new are equal and non-null. 

This is merely a convenience wrapper around the more general fireVetoableChange method that takes Object values. 


    propertyName - The programmatic name of the property that is about to change. 
    oldValue - The old value of the property. 
    newValue - The new value of the property. 

*java.beans.VetoableChangeSupport.fireVetoableChange(String,int,int)*

public void fireVetoableChange(
  java.lang.String propertyName,
  int oldValue,
  int newValue)
  throws |java.beans.PropertyVetoException|
         
Report a int vetoable property update to any registered listeners. No event is fired if old and new are equal and non-null. 

This is merely a convenience wrapper around the more general fireVetoableChange method that takes Object values. 


    propertyName - The programmatic name of the property that is about to change. 
    oldValue - The old value of the property. 
    newValue - The new value of the property. 

*java.beans.VetoableChangeSupport.fireVetoableChange(String,Object,Object)*

public void fireVetoableChange(
  java.lang.String propertyName,
  java.lang.Object oldValue,
  java.lang.Object newValue)
  throws |java.beans.PropertyVetoException|
         
Report a vetoable property update to any registered listeners. If anyone vetos the change, then fire a new event reverting everyone to the old value and then rethrow the 
PropertyVetoException. 

No event is fired if old and new are equal and non-null. 


    propertyName - The programmatic name of the property that is about to change.. 
    oldValue - The old value of the property. 
    newValue - The new value of the property. 

*java.beans.VetoableChangeSupport.getVetoableChangeListeners()*

public synchronized |java.beans.VetoableChangeListener|[] getVetoableChangeListeners()

Returns the list of VetoableChangeListeners. If named vetoable change listeners were added, then VetoableChangeListenerProxy wrappers will returned 



    Returns: List of VetoableChangeListeners and VetoableChangeListenerProxys if named property change listeners were added. 

*java.beans.VetoableChangeSupport.getVetoableChangeListeners(String)*

public synchronized |java.beans.VetoableChangeListener|[] getVetoableChangeListeners(java.lang.String propertyName)

Returns an array of all the listeners which have been associated with the named property. 


    propertyName - The name of the property being listened to 

    Returns: all the VetoableChangeListeners associated with the named property. If no such listeners have been added, or if propertyName is null, an empty array is returned. 

*java.beans.VetoableChangeSupport.hasListeners(String)*

public synchronized boolean hasListeners(java.lang.String propertyName)

Check if there are any listeners for a specific property, including those registered on all properties. If propertyName is null, only check for listeners registered on all 
properties. 


    propertyName - the property name. 

    Returns: true if there are one or more listeners for the given property 

*java.beans.VetoableChangeSupport.removeVetoableChangeListener(String,VetoableChangeListener)*

public synchronized void removeVetoableChangeListener(
  java.lang.String propertyName,
  java.beans.VetoableChangeListener listener)

Remove a VetoableChangeListener for a specific property. If listener was added more than once to the same event source for the specified property, it will be notified one less 
time after being removed. If propertyName is null, no exception is thrown and no action is taken. If listener is null, or was never added for the specified property, no exception 
is thrown and no action is taken. 


    propertyName - The name of the property that was listened on. 
    listener - The VetoableChangeListener to be removed 

*java.beans.VetoableChangeSupport.removeVetoableChangeListener(VetoableChangeListener)*

public synchronized void removeVetoableChangeListener(java.beans.VetoableChangeListener listener)

Remove a VetoableChangeListener from the listener list. This removes a VetoableChangeListener that was registered for all properties. If listener was added more than once to the 
same event source, it will be notified one less time after being removed. If listener is null, or was never added, no exception is thrown and no action is taken. 


    listener - The VetoableChangeListener to be removed 



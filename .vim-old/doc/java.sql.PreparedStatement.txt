*java.sql.PreparedStatement* *PreparedStatement* An object that represents a precompiled SQL statement.

public interface interface PreparedStatement

  implements |java.sql.Statement|

|java.sql.PreparedStatement_Description|
|java.sql.PreparedStatement_Fields|
|java.sql.PreparedStatement_Constructors|
|java.sql.PreparedStatement_Methods|

====================================================================================================================================================================================

*java.sql.PreparedStatement_Methods*
|java.sql.PreparedStatement.addBatch()|Adds a set of parameters to this PreparedStatement  object's batch of commands.
|java.sql.PreparedStatement.clearParameters()|Clears the current parameter values immediately.
|java.sql.PreparedStatement.execute()|Executes the SQL statement in this PreparedStatement object,  which may be any kind of SQL statement.
|java.sql.PreparedStatement.executeQuery()|Executes the SQL query in this PreparedStatement object  and returns the ResultSet object generated by the query.
|java.sql.PreparedStatement.executeUpdate()|Executes the SQL statement in this PreparedStatement object,  which must be an SQL INSERT, UPDATE or  DELETE statement; or an SQL state
|java.sql.PreparedStatement.getMetaData()|Retrieves a ResultSetMetaData object that contains  information about the columns of the ResultSet object  that will be returned when thi
|java.sql.PreparedStatement.getParameterMetaData()|Retrieves the number, types and properties of this   PreparedStatement object's parameters.
|java.sql.PreparedStatement.setArray(int,Array)|Sets the designated parameter to the given Array object.
|java.sql.PreparedStatement.setAsciiStream(int,InputStream,int)|Sets the designated parameter to the given input stream, which will have   the specified number of bytes.
|java.sql.PreparedStatement.setBigDecimal(int,BigDecimal)|Sets the designated parameter to the given java.math.BigDecimal value.
|java.sql.PreparedStatement.setBinaryStream(int,InputStream,int)|Sets the designated parameter to the given input stream, which will have   the specified number of bytes.
|java.sql.PreparedStatement.setBlob(int,Blob)|Sets the designated parameter to the given Blob object.
|java.sql.PreparedStatement.setBoolean(int,boolean)|Sets the designated parameter to the given Java boolean value.
|java.sql.PreparedStatement.setByte(int,byte)|Sets the designated parameter to the given Java byte value.
|java.sql.PreparedStatement.setBytes(int,byte[])|Sets the designated parameter to the given Java array of bytes.
|java.sql.PreparedStatement.setCharacterStream(int,Reader,int)|Sets the designated parameter to the given Reader  object, which is the given number of characters long.
|java.sql.PreparedStatement.setClob(int,Clob)|Sets the designated parameter to the given Clob object.
|java.sql.PreparedStatement.setDate(int,Date)|Sets the designated parameter to the given java.sql.Date value.
|java.sql.PreparedStatement.setDate(int,Date,Calendar)|Sets the designated parameter to the given java.sql.Date value,  using the given Calendar object.
|java.sql.PreparedStatement.setDouble(int,double)|Sets the designated parameter to the given Java double value.
|java.sql.PreparedStatement.setFloat(int,float)|Sets the designated parameter to the given Java float value.
|java.sql.PreparedStatement.setInt(int,int)|Sets the designated parameter to the given Java int value.
|java.sql.PreparedStatement.setLong(int,long)|Sets the designated parameter to the given Java long value.
|java.sql.PreparedStatement.setNull(int,int)|Sets the designated parameter to SQL NULL.
|java.sql.PreparedStatement.setNull(int,int,String)|Sets the designated parameter to SQL NULL.
|java.sql.PreparedStatement.setObject(int,Object)|Sets the value of the designated parameter using the given object.
|java.sql.PreparedStatement.setObject(int,Object,int)|Sets the value of the designated parameter with the given object.
|java.sql.PreparedStatement.setObject(int,Object,int,int)|Sets the value of the designated parameter with the given object.
|java.sql.PreparedStatement.setRef(int,Ref)|Sets the designated parameter to the given   REF(<structured-type>) value.
|java.sql.PreparedStatement.setShort(int,short)|Sets the designated parameter to the given Java short value.
|java.sql.PreparedStatement.setString(int,String)|Sets the designated parameter to the given Java String value.
|java.sql.PreparedStatement.setTime(int,Time)|Sets the designated parameter to the given java.sql.Time value.
|java.sql.PreparedStatement.setTime(int,Time,Calendar)|Sets the designated parameter to the given java.sql.Time value,  using the given Calendar object.
|java.sql.PreparedStatement.setTimestamp(int,Timestamp)|Sets the designated parameter to the given java.sql.Timestamp value.
|java.sql.PreparedStatement.setTimestamp(int,Timestamp,Calendar)|Sets the designated parameter to the given java.sql.Timestamp value,  using the given Calendar object.
|java.sql.PreparedStatement.setUnicodeStream(int,InputStream,int)|Sets the designated parameter to the given input stream, which   will have the specified number of bytes.
|java.sql.PreparedStatement.setURL(int,URL)|Sets the designated parameter to the given java.net.URL value.

*java.sql.PreparedStatement_Description*

An object that represents a precompiled SQL statement. A SQL statement is precompiled and stored in a PreparedStatement object. This object can then be used to efficiently execute 
this statement multiple times. 

Note: The setter methods (setShort, setString, and so on) for setting IN parameter values must specify types that are compatible with the defined SQL type of the input parameter. 
For instance, if the IN parameter has SQL type INTEGER, then the method setInt should be used. 

If arbitrary parameter type conversions are required, the method setObject should be used with a target SQL type. 

In the following example of setting a parameter, con represents an active connection: 

PreparedStatement pstmt = con.prepareStatement("UPDATE EMPLOYEES SET SALARY = ? WHERE ID = ?"); pstmt.setBigDecimal(1, 153833.00) pstmt.setInt(2, 110592) 



*java.sql.PreparedStatement.addBatch()*

public void addBatch()
  throws |java.sql.SQLException|
         
Adds a set of parameters to this PreparedStatement object's batch of commands. 



*java.sql.PreparedStatement.clearParameters()*

public void clearParameters()
  throws |java.sql.SQLException|
         
Clears the current parameter values immediately. In general, parameter values remain in force for repeated use of a statement. Setting a parameter value automatically clears its 
previous value. However, in some cases it is useful to immediately release the resources used by the current parameter values; this can be done by calling the method 
clearParameters. 



*java.sql.PreparedStatement.execute()*

public boolean execute()
  throws |java.sql.SQLException|
         
Executes the SQL statement in this PreparedStatement object, which may be any kind of SQL statement. Some prepared statements return multiple results; the execute method handles 
these complex statements as well as the simpler form of statements handled by the methods executeQuery and executeUpdate. 

The execute method returns a boolean to indicate the form of the first result. You must call either the method getResultSet or getUpdateCount to retrieve the result; you must call 
getMoreResults to move to any subsequent result(s). 



    Returns: true if the first result is a ResultSet object; false if the first result is an update count or there is no result 

*java.sql.PreparedStatement.executeQuery()*

public |java.sql.ResultSet| executeQuery()
  throws |java.sql.SQLException|
         
Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query. 



    Returns: a ResultSet object that contains the data produced by the query; never null 

*java.sql.PreparedStatement.executeUpdate()*

public int executeUpdate()
  throws |java.sql.SQLException|
         
Executes the SQL statement in this PreparedStatement object, which must be an SQL INSERT, UPDATE or DELETE statement; or an SQL statement that returns nothing, such as a DDL 
statement. 



    Returns: either (1) the row count for INSERT, UPDATE, or DELETE statements or (2) 0 for SQL statements that return nothing 

*java.sql.PreparedStatement.getMetaData()*

public |java.sql.ResultSetMetaData| getMetaData()
  throws |java.sql.SQLException|
         
Retrieves a ResultSetMetaData object that contains information about the columns of the ResultSet object that will be returned when this PreparedStatement object is executed. 

Because a PreparedStatement object is precompiled, it is possible to know about the ResultSet object that it will return without having to execute it. Consequently, it is possible 
to invoke the method getMetaData on a PreparedStatement object rather than waiting to execute it and then invoking the ResultSet.getMetaData method on the ResultSet object that is 
returned. 

NOTE: Using this method may be expensive for some drivers due to the lack of underlying DBMS support. 



    Returns: the description of a ResultSet object's columns or null if the driver cannot return a ResultSetMetaData object 

*java.sql.PreparedStatement.getParameterMetaData()*

public |java.sql.ParameterMetaData| getParameterMetaData()
  throws |java.sql.SQLException|
         
Retrieves the number, types and properties of this PreparedStatement object's parameters. 



    Returns: a ParameterMetaData object that contains information about the number, types and properties of this PreparedStatement object's parameters 

*java.sql.PreparedStatement.setArray(int,Array)*

public void setArray(
  int i,
  java.sql.Array x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Array object. The driver converts this to an SQL ARRAY value when it sends it to the database. 


    i - the first parameter is 1, the second is 2, ... 
    x - an Array object that maps an SQL ARRAY value 

*java.sql.PreparedStatement.setAsciiStream(int,InputStream,int)*

public void setAsciiStream(
  int parameterIndex,
  java.io.InputStream x,
  int length)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large ASCII value is input to a LONGVARCHAR parameter, it may 
be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion 
from ASCII to the database char format. 

Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the Java input stream that contains the ASCII parameter value 
    length - the number of bytes in the stream 

*java.sql.PreparedStatement.setBigDecimal(int,BigDecimal)*

public void setBigDecimal(
  int parameterIndex,
  java.math.BigDecimal x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given java.math.BigDecimal value. The driver converts this to an SQL NUMERIC value when it sends it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*java.sql.PreparedStatement.setBinaryStream(int,InputStream,int)*

public void setBinaryStream(
  int parameterIndex,
  java.io.InputStream x,
  int length)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a LONGVARBINARY parameter, it 
may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. 

Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the java input stream which contains the binary parameter value 
    length - the number of bytes in the stream 

*java.sql.PreparedStatement.setBlob(int,Blob)*

public void setBlob(
  int i,
  java.sql.Blob x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Blob object. The driver converts this to an SQL BLOB value when it sends it to the database. 


    i - the first parameter is 1, the second is 2, ... 
    x - a Blob object that maps an SQL BLOB value 

*java.sql.PreparedStatement.setBoolean(int,boolean)*

public void setBoolean(
  int parameterIndex,
  boolean x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java boolean value. The driver converts this to an SQL BIT value when it sends it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*java.sql.PreparedStatement.setByte(int,byte)*

public void setByte(
  int parameterIndex,
  byte x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java byte value. The driver converts this to an SQL TINYINT value when it sends it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*java.sql.PreparedStatement.setBytes(int,byte[])*

public void setBytes(
  int parameterIndex,
  byte[] x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java array of bytes. The driver converts this to an SQL VARBINARY or LONGVARBINARY (depending on the argument's size relative to the 
driver's limits on VARBINARY values) when it sends it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*java.sql.PreparedStatement.setCharacterStream(int,Reader,int)*

public void setCharacterStream(
  int parameterIndex,
  java.io.Reader reader,
  int length)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may 
be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary 
conversion from UNICODE to the database char format. 

Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    reader - the java.io.Reader object that contains the Unicode data 
    length - the number of characters in the stream 

*java.sql.PreparedStatement.setClob(int,Clob)*

public void setClob(
  int i,
  java.sql.Clob x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Clob object. The driver converts this to an SQL CLOB value when it sends it to the database. 


    i - the first parameter is 1, the second is 2, ... 
    x - a Clob object that maps an SQL CLOB value 

*java.sql.PreparedStatement.setDate(int,Date)*

public void setDate(
  int parameterIndex,
  java.sql.Date x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given java.sql.Date value. The driver converts this to an SQL DATE value when it sends it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*java.sql.PreparedStatement.setDate(int,Date,Calendar)*

public void setDate(
  int parameterIndex,
  java.sql.Date x,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given java.sql.Date value, using the given Calendar object. The driver uses the Calendar object to construct an SQL DATE value, which the 
driver then sends to the database. With a Calendar object, the driver can calculate the date taking into account a custom timezone. If no Calendar object is specified, the driver 
uses the default timezone, which is that of the virtual machine running the application. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 
    cal - the Calendar object the driver will use to construct the date 

*java.sql.PreparedStatement.setDouble(int,double)*

public void setDouble(
  int parameterIndex,
  double x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java double value. The driver converts this to an SQL DOUBLE value when it sends it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*java.sql.PreparedStatement.setFloat(int,float)*

public void setFloat(
  int parameterIndex,
  float x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java float value. The driver converts this to an SQL FLOAT value when it sends it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*java.sql.PreparedStatement.setInt(int,int)*

public void setInt(
  int parameterIndex,
  int x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java int value. The driver converts this to an SQL INTEGER value when it sends it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*java.sql.PreparedStatement.setLong(int,long)*

public void setLong(
  int parameterIndex,
  long x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java long value. The driver converts this to an SQL BIGINT value when it sends it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*java.sql.PreparedStatement.setNull(int,int)*

public void setNull(
  int parameterIndex,
  int sqlType)
  throws |java.sql.SQLException|
         
Sets the designated parameter to SQL NULL. 

Note: You must specify the parameter's SQL type. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    sqlType - the SQL type code defined in java.sql.Types 

*java.sql.PreparedStatement.setNull(int,int,String)*

public void setNull(
  int paramIndex,
  int sqlType,
  java.lang.String typeName)
  throws |java.sql.SQLException|
         
Sets the designated parameter to SQL NULL. This version of the method setNull should be used for user-defined types and REF type parameters. Examples of user-defined types 
include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. 

Note: To be portable, applications must give the SQL type code and the fully-qualified SQL type name when specifying a NULL user-defined or REF parameter. In the case of a 
user-defined type the name is the type name of the parameter itself. For a REF parameter, the name is the type name of the referenced type. If a JDBC driver does not need the type 
code or type name information, it may ignore it. 

Although it is intended for user-defined and Ref parameters, this method may be used to set a null parameter of any JDBC type. If the parameter does not have a user-defined or REF 
type, the given typeName is ignored. 


    paramIndex - the first parameter is 1, the second is 2, ... 
    sqlType - a value from java.sql.Types 
    typeName - the fully-qualified name of an SQL user-defined type; ignored if the parameter is not a user-defined type or REF 

*java.sql.PreparedStatement.setObject(int,Object)*

public void setObject(
  int parameterIndex,
  java.lang.Object x)
  throws |java.sql.SQLException|
         
Sets the value of the designated parameter using the given object. The second parameter must be of type Object; therefore, the java.lang equivalent objects should be used for 
built-in types. 

The JDBC specification specifies a standard mapping from Java Object types to SQL types. The given argument will be converted to the corresponding SQL type before being sent to 
the database. 

Note that this method may be used to pass datatabase- specific abstract data types, by using a driver-specific Java type. 

If the object is of a class implementing the interface SQLData, the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, 
the object is of a class implementing Ref, Blob, Clob, Struct, or Array, the driver should pass it to the database as a value of the corresponding SQL type. 

This method throws an exception if there is an ambiguity, for example, if the object is of a class implementing more than one of the interfaces named above. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the object containing the input parameter value 

*java.sql.PreparedStatement.setObject(int,Object,int)*

public void setObject(
  int parameterIndex,
  java.lang.Object x,
  int targetSqlType)
  throws |java.sql.SQLException|
         
Sets the value of the designated parameter with the given object. This method is like the method setObject above, except that it assumes a scale of zero. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the object containing the input parameter value 
    targetSqlType - the SQL type (as defined in java.sql.Types) to be sent to the database 

*java.sql.PreparedStatement.setObject(int,Object,int,int)*

public void setObject(
  int parameterIndex,
  java.lang.Object x,
  int targetSqlType,
  int scale)
  throws |java.sql.SQLException|
         
Sets the value of the designated parameter with the given object. The second argument must be an object type; for integral values, the java.lang equivalent objects should be used. 

The given Java object will be converted to the given targetSqlType before being sent to the database. 

If the object has a custom mapping (is of a class implementing the interface SQLData), the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. 
If, on the other hand, the object is of a class implementing Ref, Blob, Clob, Struct, or Array, the driver should pass it to the database as a value of the corresponding SQL type. 

Note that this method may be used to pass database-specific abstract data types. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the object containing the input parameter value 
    targetSqlType - the SQL type (as defined in java.sql.Types) to be sent to the database. The scale argument may further qualify this type. 
    scale - for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types, this is the number of digits after the decimal point. For all other types, this value will be ignored. 

*java.sql.PreparedStatement.setRef(int,Ref)*

public void setRef(
  int i,
  java.sql.Ref x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given REF(<structured-type>) value. The driver converts this to an SQL REF value when it sends it to the database. 


    i - the first parameter is 1, the second is 2, ... 
    x - an SQL REF value 

*java.sql.PreparedStatement.setShort(int,short)*

public void setShort(
  int parameterIndex,
  short x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java short value. The driver converts this to an SQL SMALLINT value when it sends it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*java.sql.PreparedStatement.setString(int,String)*

public void setString(
  int parameterIndex,
  java.lang.String x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java String value. The driver converts this to an SQL VARCHAR or LONGVARCHAR value (depending on the argument's size relative to the 
driver's limits on VARCHAR values) when it sends it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*java.sql.PreparedStatement.setTime(int,Time)*

public void setTime(
  int parameterIndex,
  java.sql.Time x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given java.sql.Time value. The driver converts this to an SQL TIME value when it sends it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*java.sql.PreparedStatement.setTime(int,Time,Calendar)*

public void setTime(
  int parameterIndex,
  java.sql.Time x,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given java.sql.Time value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIME value, which the 
driver then sends to the database. With a Calendar object, the driver can calculate the time taking into account a custom timezone. If no Calendar object is specified, the driver 
uses the default timezone, which is that of the virtual machine running the application. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 
    cal - the Calendar object the driver will use to construct the time 

*java.sql.PreparedStatement.setTimestamp(int,Timestamp)*

public void setTimestamp(
  int parameterIndex,
  java.sql.Timestamp x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given java.sql.Timestamp value. The driver converts this to an SQL TIMESTAMP value when it sends it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*java.sql.PreparedStatement.setTimestamp(int,Timestamp,Calendar)*

public void setTimestamp(
  int parameterIndex,
  java.sql.Timestamp x,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIMESTAMP value, 
which the driver then sends to the database. With a Calendar object, the driver can calculate the timestamp taking into account a custom timezone. If no Calendar object is 
specified, the driver uses the default timezone, which is that of the virtual machine running the application. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 
    cal - the Calendar object the driver will use to construct the timestamp 

*java.sql.PreparedStatement.setUnicodeStream(int,InputStream,int)*

public void setUnicodeStream(
  int parameterIndex,
  java.io.InputStream x,
  int length)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given input stream, which will have the specified number of bytes. A Unicode character has two bytes, with the first byte being the high byte, 
and the second being the low byte. 

When a very large Unicode value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as 
needed until end-of-file is reached. The JDBC driver will do any necessary conversion from Unicode to the database char format. 

Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. 

    Deprecated

    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - a java.io.InputStream object that contains the Unicode parameter value as two-byte Unicode characters 
    length - the number of bytes in the stream 

*java.sql.PreparedStatement.setURL(int,URL)*

public void setURL(
  int parameterIndex,
  java.net.URL x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given java.net.URL value. The driver converts this to an SQL DATALINK value when it sends it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the java.net.URL object to be set 



*javax.sound.sampled.AudioFormat.Encoding* *AudioFormat.Encoding* The Encoding c

public static class AudioFormat.Encoding
  extends    |java.lang.Object|

|javax.sound.sampled.AudioFormat.Encoding_Description|
|javax.sound.sampled.AudioFormat.Encoding_Fields|
|javax.sound.sampled.AudioFormat.Encoding_Constructors|
|javax.sound.sampled.AudioFormat.Encoding_Methods|

================================================================================

*javax.sound.sampled.AudioFormat.Encoding_Fields*
|javax.sound.sampled.AudioFormat.Encoding_javax.sound.sampled.AudioFormat.Encoding.ALAW|
|javax.sound.sampled.AudioFormat.Encoding_javax.sound.sampled.AudioFormat.Encoding.PCM_SIGNED|
|javax.sound.sampled.AudioFormat.Encoding_javax.sound.sampled.AudioFormat.Encoding.PCM_UNSIGNED|
|javax.sound.sampled.AudioFormat.Encoding_javax.sound.sampled.AudioFormat.Encoding.ULAW|

*javax.sound.sampled.AudioFormat.Encoding_Constructors*
|javax.sound.sampled.AudioFormat.Encoding(String)|Constructs a new encoding.

*javax.sound.sampled.AudioFormat.Encoding_Methods*
|javax.sound.sampled.AudioFormat.Encoding.equals(Object)|Finalizes the equals m
|javax.sound.sampled.AudioFormat.Encoding.hashCode()|Finalizes the hashCode met
|javax.sound.sampled.AudioFormat.Encoding.toString()|Provides the String repres

*javax.sound.sampled.AudioFormat.Encoding_Description*

The Encoding class names the specific type of data representation used for an 
audio stream. The encoding includes aspects of the sound format other than the 
number of channels, sample rate, sample size, frame rate, frame size, and byte 
order. 

One ubiquitous type of audio encoding is pulse-code modulation (PCM), which is 
simply a linear (proportional) representation of the sound waveform. With PCM, 
the number stored in each sample is proportional to the instantaneous amplitude 
of the sound pressure at that point in time. The numbers are frequently signed 
or unsigned integers. Besides PCM, other encodings include mu-law and a-law, 
which are nonlinear mappings of the sound amplitude that are often used for 
recording speech. 

You can use a predefined encoding by referring to one of the static objects 
created by this class, such as PCM_SIGNED or PCM_UNSIGNED. Service providers 
can create new encodings, such as compressed audio formats or floating-point 
PCM samples, and make these available through the 
(|javax.sound.sampled.AudioSystem|) class. 

The Encoding class is static, so that all AudioFormat objects that have the 
same encoding will refer to the same object (rather than different instances of 
the same class). This allows matches to be made by checking that two format's 
encodings are equal. 


*javax.sound.sampled.AudioFormat.Encoding_javax.sound.sampled.AudioFormat.Encoding.ALAW*

The Encoding class names the specific type of data representation used for an 
audio stream. The encoding includes aspects of the sound format other than the 
number of channels, sample rate, sample size, frame rate, frame size, and byte 
order. 

One ubiquitous type of audio encoding is pulse-code modulation (PCM), which is 
simply a linear (proportional) representation of the sound waveform. With PCM, 
the number stored in each sample is proportional to the instantaneous amplitude 
of the sound pressure at that point in time. The numbers are frequently signed 
or unsigned integers. Besides PCM, other encodings include mu-law and a-law, 
which are nonlinear mappings of the sound amplitude that are often used for 
recording speech. 

You can use a predefined encoding by referring to one of the static objects 
created by this class, such as PCM_SIGNED or PCM_UNSIGNED. Service providers 
can create new encodings, such as compressed audio formats or floating-point 
PCM samples, and make these available through the 
(|javax.sound.sampled.AudioSystem|) class. 

The Encoding class is static, so that all AudioFormat objects that have the 
same encoding will refer to the same object (rather than different instances of 
the same class). This allows matches to be made by checking that two format's 
encodings are equal. 


*javax.sound.sampled.AudioFormat.Encoding_javax.sound.sampled.AudioFormat.Encoding.PCM_SIGNED*

The Encoding class names the specific type of data representation used for an 
audio stream. The encoding includes aspects of the sound format other than the 
number of channels, sample rate, sample size, frame rate, frame size, and byte 
order. 

One ubiquitous type of audio encoding is pulse-code modulation (PCM), which is 
simply a linear (proportional) representation of the sound waveform. With PCM, 
the number stored in each sample is proportional to the instantaneous amplitude 
of the sound pressure at that point in time. The numbers are frequently signed 
or unsigned integers. Besides PCM, other encodings include mu-law and a-law, 
which are nonlinear mappings of the sound amplitude that are often used for 
recording speech. 

You can use a predefined encoding by referring to one of the static objects 
created by this class, such as PCM_SIGNED or PCM_UNSIGNED. Service providers 
can create new encodings, such as compressed audio formats or floating-point 
PCM samples, and make these available through the 
(|javax.sound.sampled.AudioSystem|) class. 

The Encoding class is static, so that all AudioFormat objects that have the 
same encoding will refer to the same object (rather than different instances of 
the same class). This allows matches to be made by checking that two format's 
encodings are equal. 


*javax.sound.sampled.AudioFormat.Encoding_javax.sound.sampled.AudioFormat.Encoding.PCM_UNSIGNED*

The Encoding class names the specific type of data representation used for an 
audio stream. The encoding includes aspects of the sound format other than the 
number of channels, sample rate, sample size, frame rate, frame size, and byte 
order. 

One ubiquitous type of audio encoding is pulse-code modulation (PCM), which is 
simply a linear (proportional) representation of the sound waveform. With PCM, 
the number stored in each sample is proportional to the instantaneous amplitude 
of the sound pressure at that point in time. The numbers are frequently signed 
or unsigned integers. Besides PCM, other encodings include mu-law and a-law, 
which are nonlinear mappings of the sound amplitude that are often used for 
recording speech. 

You can use a predefined encoding by referring to one of the static objects 
created by this class, such as PCM_SIGNED or PCM_UNSIGNED. Service providers 
can create new encodings, such as compressed audio formats or floating-point 
PCM samples, and make these available through the 
(|javax.sound.sampled.AudioSystem|) class. 

The Encoding class is static, so that all AudioFormat objects that have the 
same encoding will refer to the same object (rather than different instances of 
the same class). This allows matches to be made by checking that two format's 
encodings are equal. 


*javax.sound.sampled.AudioFormat.Encoding_javax.sound.sampled.AudioFormat.Encoding.ULAW*

The Encoding class names the specific type of data representation used for an 
audio stream. The encoding includes aspects of the sound format other than the 
number of channels, sample rate, sample size, frame rate, frame size, and byte 
order. 

One ubiquitous type of audio encoding is pulse-code modulation (PCM), which is 
simply a linear (proportional) representation of the sound waveform. With PCM, 
the number stored in each sample is proportional to the instantaneous amplitude 
of the sound pressure at that point in time. The numbers are frequently signed 
or unsigned integers. Besides PCM, other encodings include mu-law and a-law, 
which are nonlinear mappings of the sound amplitude that are often used for 
recording speech. 

You can use a predefined encoding by referring to one of the static objects 
created by this class, such as PCM_SIGNED or PCM_UNSIGNED. Service providers 
can create new encodings, such as compressed audio formats or floating-point 
PCM samples, and make these available through the 
(|javax.sound.sampled.AudioSystem|) class. 

The Encoding class is static, so that all AudioFormat objects that have the 
same encoding will refer to the same object (rather than different instances of 
the same class). This allows matches to be made by checking that two format's 
encodings are equal. 



*javax.sound.sampled.AudioFormat.Encoding(String)*

public AudioFormat.Encoding(java.lang.String name)

Constructs a new encoding. 

    name - the name of the new type of encoding 

*javax.sound.sampled.AudioFormat.Encoding.equals(Object)*

public final boolean equals(java.lang.Object obj)

Finalizes the equals method 


*javax.sound.sampled.AudioFormat.Encoding.hashCode()*

public final int hashCode()

Finalizes the hashCode method 


*javax.sound.sampled.AudioFormat.Encoding.toString()*

public final |java.lang.String| toString()

Provides the String representation of the encoding. This String is the same 
name that was passed to the constructor. For the predefined encodings, the name 
is similar to the encoding's variable (field) name. For example, 
PCM_SIGNED.toString() returns the name "pcm_signed". 


    Returns: the encoding name 


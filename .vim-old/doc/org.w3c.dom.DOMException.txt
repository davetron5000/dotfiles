*org.w3c.dom.DOMException* *DOMException* DOM operations only raise exceptions i

public class DOMException
  extends    |java.lang.RuntimeException|

|org.w3c.dom.DOMException_Description|
|org.w3c.dom.DOMException_Fields|
|org.w3c.dom.DOMException_Constructors|
|org.w3c.dom.DOMException_Methods|

================================================================================

*org.w3c.dom.DOMException_Fields*
|short_org.w3c.dom.DOMException.code|
|short_org.w3c.dom.DOMException.DOMSTRING_SIZE_ERR|
|short_org.w3c.dom.DOMException.HIERARCHY_REQUEST_ERR|
|short_org.w3c.dom.DOMException.INDEX_SIZE_ERR|
|short_org.w3c.dom.DOMException.INUSE_ATTRIBUTE_ERR|
|short_org.w3c.dom.DOMException.INVALID_ACCESS_ERR|
|short_org.w3c.dom.DOMException.INVALID_CHARACTER_ERR|
|short_org.w3c.dom.DOMException.INVALID_MODIFICATION_ERR|
|short_org.w3c.dom.DOMException.INVALID_STATE_ERR|
|short_org.w3c.dom.DOMException.NAMESPACE_ERR|
|short_org.w3c.dom.DOMException.NO_DATA_ALLOWED_ERR|
|short_org.w3c.dom.DOMException.NO_MODIFICATION_ALLOWED_ERR|
|short_org.w3c.dom.DOMException.NOT_FOUND_ERR|
|short_org.w3c.dom.DOMException.NOT_SUPPORTED_ERR|
|short_org.w3c.dom.DOMException.SYNTAX_ERR|
|short_org.w3c.dom.DOMException.TYPE_MISMATCH_ERR|
|short_org.w3c.dom.DOMException.VALIDATION_ERR|
|short_org.w3c.dom.DOMException.WRONG_DOCUMENT_ERR|

*org.w3c.dom.DOMException_Constructors*
|org.w3c.dom.DOMException(short,String)|

*org.w3c.dom.DOMException_Description*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.code*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.DOMSTRING_SIZE_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.HIERARCHY_REQUEST_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.INDEX_SIZE_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.INUSE_ATTRIBUTE_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.INVALID_ACCESS_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.INVALID_CHARACTER_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.INVALID_MODIFICATION_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.INVALID_STATE_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.NAMESPACE_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.NO_DATA_ALLOWED_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.NO_MODIFICATION_ALLOWED_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.NOT_FOUND_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.NOT_SUPPORTED_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.SYNTAX_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.TYPE_MISMATCH_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.VALIDATION_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*short_org.w3c.dom.DOMException.WRONG_DOCUMENT_ERR*

DOM operations only raise exceptions in "exceptional" circumstances, i.e., when 
an operation is impossible to perform (either for logical reasons, because data 
is lost, or because the implementation has become unstable). In general, DOM 
methods return specific error values in ordinary processing situations, such as 
out-of-bound errors when using NodeList. Implementations should raise other 
exceptions under other circumstances. For example, implementations should raise 
an implementation-dependent exception if a null argument is passed when null 
was not expected. Some languages and object systems do not support the concept 
of exceptions. For such systems, error conditions may be indicated using native 
error reporting mechanisms. For some bindings, for example, methods may return 
error codes similar to those listed in the corresponding method descriptions. 
See also the Document Object Model (DOM) Level 3 Core Specification. 



*org.w3c.dom.DOMException(short,String)*

public DOMException(
  short code,
  java.lang.String message)





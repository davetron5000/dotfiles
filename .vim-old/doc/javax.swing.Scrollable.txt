*javax.swing.Scrollable* *Scrollable* An interface that provides information to a scrolling container
 like JScrollPane.

public interface interface Scrollable


|javax.swing.Scrollable_Description|
|javax.swing.Scrollable_Fields|
|javax.swing.Scrollable_Constructors|
|javax.swing.Scrollable_Methods|

====================================================================================================================================================================================

*javax.swing.Scrollable_Methods*
|javax.swing.Scrollable.getPreferredScrollableViewportSize()|Returns the preferred size of the viewport for a view component.
|javax.swing.Scrollable.getScrollableBlockIncrement(Rectangle,int,int)|Components that display logical rows or columns should compute  the scroll increment that will completely ex
|javax.swing.Scrollable.getScrollableTracksViewportHeight()|Return true if a viewport should always force the height of this   Scrollable to match the height of the viewport.
|javax.swing.Scrollable.getScrollableTracksViewportWidth()|Return true if a viewport should always force the width of this   Scrollable to match the width of the viewport.
|javax.swing.Scrollable.getScrollableUnitIncrement(Rectangle,int,int)|Components that display logical rows or columns should compute  the scroll increment that will completely exp

*javax.swing.Scrollable_Description*

An interface that provides information to a scrolling container like JScrollPane. A complex component that's likely to be used as a viewing a JScrollPane viewport (or other 
scrolling container) should implement this interface. 



*javax.swing.Scrollable.getPreferredScrollableViewportSize()*

public |java.awt.Dimension| getPreferredScrollableViewportSize()

Returns the preferred size of the viewport for a view component. For example, the preferred size of a JList component is the size required to accommodate all of the cells in its 
list. However, the value of preferredScrollableViewportSize is the size required for JList.getVisibleRowCount rows. A component without any properties that would affect the 
viewport size should just return getPreferredSize here. 



    Returns: the preferredSize of a JViewport whose view is this Scrollable 

*javax.swing.Scrollable.getScrollableBlockIncrement(Rectangle,int,int)*

public int getScrollableBlockIncrement(
  java.awt.Rectangle visibleRect,
  int orientation,
  int direction)

Components that display logical rows or columns should compute the scroll increment that will completely expose one block of rows or columns, depending on the value of 
orientation. 

Scrolling containers, like JScrollPane, will use this method each time the user requests a block scroll. 


    visibleRect - The view area visible within the viewport 
    orientation - Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL. 
    direction - Less than zero to scroll up/left, greater than zero for down/right. 

    Returns: The "block" increment for scrolling in the specified direction. This value should always be positive. 

*javax.swing.Scrollable.getScrollableTracksViewportHeight()*

public boolean getScrollableTracksViewportHeight()

Return true if a viewport should always force the height of this Scrollable to match the height of the viewport. For example a columnar text view that flowed text in left to right 
columns could effectively disable vertical scrolling by returning true here. 

Scrolling containers, like JViewport, will use this method each time they are validated. 



    Returns: True if a viewport should force the Scrollables height to match its own. 

*javax.swing.Scrollable.getScrollableTracksViewportWidth()*

public boolean getScrollableTracksViewportWidth()

Return true if a viewport should always force the width of this Scrollable to match the width of the viewport. For example a normal text view that supported line wrapping would 
return true here, since it would be undesirable for wrapped lines to disappear beyond the right edge of the viewport. Note that returning true for a Scrollable whose ancestor is a 
JScrollPane effectively disables horizontal scrolling. 

Scrolling containers, like JViewport, will use this method each time they are validated. 



    Returns: True if a viewport should force the Scrollables width to match its own. 

*javax.swing.Scrollable.getScrollableUnitIncrement(Rectangle,int,int)*

public int getScrollableUnitIncrement(
  java.awt.Rectangle visibleRect,
  int orientation,
  int direction)

Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation. 
Ideally, components should handle a partially exposed row or column by returning the distance required to completely expose the item. 

Scrolling containers, like JScrollPane, will use this method each time the user requests a unit scroll. 


    visibleRect - The view area visible within the viewport 
    orientation - Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL. 
    direction - Less than zero to scroll up/left, greater than zero for down/right. 

    Returns: The "unit" increment for scrolling in the specified direction. This value should always be positive. 



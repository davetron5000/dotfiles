*java.awt.image.BandedSampleModel* *BandedSampleModel* This class represents image data which is stored in a band interleaved
  fashion and for
  which each sample of a pixel occup

public final class BandedSampleModel
  extends    |java.awt.image.ComponentSampleModel|

|java.awt.image.BandedSampleModel_Description|
|java.awt.image.BandedSampleModel_Fields|
|java.awt.image.BandedSampleModel_Constructors|
|java.awt.image.BandedSampleModel_Methods|

====================================================================================================================================================================================

*java.awt.image.BandedSampleModel_Constructors*
|java.awt.image.BandedSampleModel(int,int,int,int)|Constructs a BandedSampleModel with the specified parameters.
|java.awt.image.BandedSampleModel(int,int,int,int,int[],int[])|Constructs a BandedSampleModel with the specified parameters.

*java.awt.image.BandedSampleModel_Methods*
|java.awt.image.BandedSampleModel.createCompatibleSampleModel(int,int)|Creates a new BandedSampleModel with the specified  width and height.
|java.awt.image.BandedSampleModel.createDataBuffer()|Creates a DataBuffer that corresponds to this BandedSampleModel,  The DataBuffer's data type, number of banks, and size  will 
|java.awt.image.BandedSampleModel.createSubsetSampleModel(int[])|Creates a new BandedSampleModel with a subset of the bands of this  BandedSampleModel.
|java.awt.image.BandedSampleModel.getDataElements(int,int,Object,DataBuffer)|Returns data for a single pixel in a primitive array of type  TransferType.
|java.awt.image.BandedSampleModel.getPixel(int,int,int[],DataBuffer)|Returns all samples for the specified pixel in an int array.
|java.awt.image.BandedSampleModel.getPixels(int,int,int,int,int[],DataBuffer)|Returns all samples for the specified rectangle of pixels in  an int array, one sample per data array
|java.awt.image.BandedSampleModel.getSample(int,int,int,DataBuffer)|Returns as int the sample in a specified band for the pixel  located at (x,y).
|java.awt.image.BandedSampleModel.getSampleDouble(int,int,int,DataBuffer)|Returns the sample in a specified band  for a pixel located at (x,y) as a double.
|java.awt.image.BandedSampleModel.getSampleFloat(int,int,int,DataBuffer)|Returns the sample in a specified band  for the pixel located at (x,y) as a float.
|java.awt.image.BandedSampleModel.getSamples(int,int,int,int,int,int[],DataBuffer)|Returns the samples in a specified band for the specified rectangle  of pixels in an int array, 
|java.awt.image.BandedSampleModel.hashCode()|
|java.awt.image.BandedSampleModel.setDataElements(int,int,Object,DataBuffer)|Sets the data for a single pixel in the specified DataBuffer from a  primitive array of type TransferT
|java.awt.image.BandedSampleModel.setPixel(int,int,int[],DataBuffer)|Sets a pixel in the DataBuffer using an int array of samples for input.
|java.awt.image.BandedSampleModel.setPixels(int,int,int,int,int[],DataBuffer)|Sets all samples for a rectangle of pixels from an int array containing  one sample per array element
|java.awt.image.BandedSampleModel.setSample(int,int,int,double,DataBuffer)|Sets a sample in the specified band for the pixel located at (x,y)  in the DataBuffer using a double for
|java.awt.image.BandedSampleModel.setSample(int,int,int,float,DataBuffer)|Sets a sample in the specified band for the pixel located at (x,y)  in the DataBuffer using a float for i
|java.awt.image.BandedSampleModel.setSample(int,int,int,int,DataBuffer)|Sets a sample in the specified band for the pixel located at (x,y)  in the DataBuffer using an int for inpu
|java.awt.image.BandedSampleModel.setSamples(int,int,int,int,int,int[],DataBuffer)|Sets the samples in the specified band for the specified rectangle  of pixels from an int array 

*java.awt.image.BandedSampleModel_Description*

This class represents image data which is stored in a band interleaved fashion and for which each sample of a pixel occupies one data element of the DataBuffer. It subclasses 
ComponentSampleModel but provides a more efficent implementation for accessing band interleaved image data than is provided by ComponentSampleModel. This class should typically be 
used when working with images which store sample data for each band in a different bank of the DataBuffer. Accessor methods are provided so that image data can be manipulated 
directly. Pixel stride is the number of data array elements between two samples for the same band on the same scanline. The pixel stride for a BandedSampleModel is one. Scanline 
stride is the number of data array elements between a given sample and the corresponding sample in the same column of the next scanline. Band offsets denote the number of data 
array elements from the first data array element of the bank of the DataBuffer holding each band to the first sample of the band. The bands are numbered from 0 to N-1. Bank 
indices denote the correspondence between a bank of the data buffer and a band of image data. This class supports TYPE_BYTE(|java.awt.image.DataBuffer|) , 
TYPE_USHORT(|java.awt.image.DataBuffer|) , TYPE_SHORT(|java.awt.image.DataBuffer|) , TYPE_INT(|java.awt.image.DataBuffer|) , TYPE_FLOAT(|java.awt.image.DataBuffer|) , and 
TYPE_DOUBLE(|java.awt.image.DataBuffer|) datatypes 



*java.awt.image.BandedSampleModel(int,int,int,int)*

public BandedSampleModel(
  int dataType,
  int w,
  int h,
  int numBands)

Constructs a BandedSampleModel with the specified parameters. The pixel stride will be one data element. The scanline stride will be the same as the width. Each band will be 
stored in a separate bank and all band offsets will be zero. 

    dataType - The data type for storing samples. 
    w - The width (in pixels) of the region of image data described. 
    h - The height (in pixels) of the region of image data described. 
    numBands - The number of bands for the image data. 

*java.awt.image.BandedSampleModel(int,int,int,int,int[],int[])*

public BandedSampleModel(
  int dataType,
  int w,
  int h,
  int scanlineStride,
  int[] bankIndices,
  int[] bandOffsets)

Constructs a BandedSampleModel with the specified parameters. The number of bands will be inferred from the lengths of the bandOffsets bankIndices arrays, which must be equal. The 
pixel stride will be one data element. 

    dataType - The data type for storing samples. 
    w - The width (in pixels) of the region of image data described. 
    h - The height (in pixels) of the region of image data described. 
    scanlineStride - The line stride of the of the image data. 
    bankIndices - The bank index for each band. 
    bandOffsets - The band offset for each band. 

*java.awt.image.BandedSampleModel.createCompatibleSampleModel(int,int)*

public |java.awt.image.SampleModel| createCompatibleSampleModel(
  int w,
  int h)

Creates a new BandedSampleModel with the specified width and height. The new BandedSampleModel will have the same number of bands, storage data type, and bank indices as this 
BandedSampleModel. The band offsets will be compressed such that the offset between bands will be w*pixelStride and the minimum of all of the band offsets is zero. 


    w - the width of the resulting BandedSampleModel 
    h - the height of the resulting BandedSampleModel 

    Returns: a new BandedSampleModel with the specified width and height. 

*java.awt.image.BandedSampleModel.createDataBuffer()*

public |java.awt.image.DataBuffer| createDataBuffer()

Creates a DataBuffer that corresponds to this BandedSampleModel, The DataBuffer's data type, number of banks, and size will be consistent with this BandedSampleModel. 



*java.awt.image.BandedSampleModel.createSubsetSampleModel(int[])*

public |java.awt.image.SampleModel| createSubsetSampleModel(int[] bands)

Creates a new BandedSampleModel with a subset of the bands of this BandedSampleModel. The new BandedSampleModel can be used with any DataBuffer that the existing BandedSampleModel 
can be used with. The new BandedSampleModel/DataBuffer combination will represent an image with a subset of the bands of the original BandedSampleModel/DataBuffer combination. 



*java.awt.image.BandedSampleModel.getDataElements(int,int,Object,DataBuffer)*

public |java.lang.Object| getDataElements(
  int x,
  int y,
  java.lang.Object obj,
  java.awt.image.DataBuffer data)

Returns data for a single pixel in a primitive array of type TransferType. For a BandedSampleModel, this will be the same as the data type, and samples will be returned one per 
array element. Generally, obj should be passed in as null, so that the Object will be created automatically and will be of the right primitive data type. 

The following code illustrates transferring data for one pixel from DataBuffer db1, whose storage layout is described by BandedSampleModel bsm1, to DataBuffer db2, whose storage 
layout is described by BandedSampleModel bsm2. The transfer will generally be more efficient than using getPixel/setPixel. 

BandedSampleModel bsm1, bsm2; DataBufferInt db1, db2; bsm2.setDataElements(x, y, bsm1.getDataElements(x, y, null, db1), db2); 

Using getDataElements/setDataElements to transfer between two DataBuffer/SampleModel pairs is legitimate if the SampleModels have the same number of bands, corresponding bands 
have the same number of bits per sample, and the TransferTypes are the same. 

If obj is non-null, it should be a primitive array of type TransferType. Otherwise, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException may be thrown if the 
coordinates are not in bounds, or if obj is non-null and is not large enough to hold the pixel data. 


    x,&nbsp;y - The coordinates of the pixel location 
    obj - If non-null, a primitive array in which to return the pixel data. 
    data - The DataBuffer containing the image data. 

    Returns: the data for the specified pixel. 

*java.awt.image.BandedSampleModel.getPixel(int,int,int[],DataBuffer)*

public int[] getPixel(
  int x,
  int y,
  int[] iArray,
  java.awt.image.DataBuffer data)

Returns all samples for the specified pixel in an int array. ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. 


    x,&nbsp;y - The coordinates of the pixel location 
    iArray - If non-null, returns the samples in this array 
    data - The DataBuffer containing the image data 

    Returns: the samples for the specified pixel. 

*java.awt.image.BandedSampleModel.getPixels(int,int,int,int,int[],DataBuffer)*

public int[] getPixels(
  int x,
  int y,
  int w,
  int h,
  int[] iArray,
  java.awt.image.DataBuffer data)

Returns all samples for the specified rectangle of pixels in an int array, one sample per data array element. ArrayIndexOutOfBoundsException may be thrown if the coordinates are 
not in bounds. 


    x,&nbsp;y - The coordinates of the upper left pixel location 
    w - The width of the pixel rectangle 
    h - The height of the pixel rectangle 
    iArray - If non-null, returns the samples in this array 
    data - The DataBuffer containing the image data 

    Returns: the samples for the pixels within the specified region. 

*java.awt.image.BandedSampleModel.getSample(int,int,int,DataBuffer)*

public int getSample(
  int x,
  int y,
  int b,
  java.awt.image.DataBuffer data)

Returns as int the sample in a specified band for the pixel located at (x,y). ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. 


    x,&nbsp;y - The coordinates of the pixel location 
    b - The band to return 
    data - The DataBuffer containing the image data 

    Returns: the sample in the specified band for the specified pixel. 

*java.awt.image.BandedSampleModel.getSampleDouble(int,int,int,DataBuffer)*

public double getSampleDouble(
  int x,
  int y,
  int b,
  java.awt.image.DataBuffer data)

Returns the sample in a specified band for a pixel located at (x,y) as a double. ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. 


    x,&nbsp;y - The coordinates of the pixel location 
    b - The band to return 
    data - The DataBuffer containing the image data 

    Returns: a double value that represents the sample in the specified band for the specified pixel. 

*java.awt.image.BandedSampleModel.getSampleFloat(int,int,int,DataBuffer)*

public float getSampleFloat(
  int x,
  int y,
  int b,
  java.awt.image.DataBuffer data)

Returns the sample in a specified band for the pixel located at (x,y) as a float. ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. 


    x,&nbsp;y - Thecoordinates of the pixel location 
    b - The band to return 
    data - The DataBuffer containing the image data 

    Returns: a float value that represents the sample in the specified band for the specified pixel. 

*java.awt.image.BandedSampleModel.getSamples(int,int,int,int,int,int[],DataBuffer)*

public int[] getSamples(
  int x,
  int y,
  int w,
  int h,
  int b,
  int[] iArray,
  java.awt.image.DataBuffer data)

Returns the samples in a specified band for the specified rectangle of pixels in an int array, one sample per data array element. ArrayIndexOutOfBoundsException may be thrown if 
the coordinates are not in bounds. 


    x,&nbsp;y - The coordinates of the upper left pixel location 
    w - The width of the pixel rectangle 
    h - The height of the pixel rectangle 
    b - The band to return 
    iArray - If non-null, returns the samples in this array 
    data - The DataBuffer containing the image data 

    Returns: the samples in the specified band for the pixels within the specified region. 

*java.awt.image.BandedSampleModel.hashCode()*

public int hashCode()





*java.awt.image.BandedSampleModel.setDataElements(int,int,Object,DataBuffer)*

public void setDataElements(
  int x,
  int y,
  java.lang.Object obj,
  java.awt.image.DataBuffer data)

Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType. For a BandedSampleModel, this will be the same as the data type, and 
samples are transferred one per array element. 

The following code illustrates transferring data for one pixel from DataBuffer db1, whose storage layout is described by BandedSampleModel bsm1, to DataBuffer db2, whose storage 
layout is described by BandedSampleModel bsm2. The transfer will generally be more efficient than using getPixel/setPixel. 

BandedSampleModel bsm1, bsm2; DataBufferInt db1, db2; bsm2.setDataElements(x, y, bsm1.getDataElements(x, y, null, db1), db2); 

Using getDataElements/setDataElements to transfer between two DataBuffer/SampleModel pairs is legitimate if the SampleModels have the same number of bands, corresponding bands 
have the same number of bits per sample, and the TransferTypes are the same. 

obj must be a primitive array of type TransferType. Otherwise, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in 
bounds, or if obj is not large enough to hold the pixel data. 


    x,&nbsp;y - The coordinates of the pixel location 
    obj - If non-null, returns the primitive array in this object 
    data - The DataBuffer containing the image data 

*java.awt.image.BandedSampleModel.setPixel(int,int,int[],DataBuffer)*

public void setPixel(
  int x,
  int y,
  int[] iArray,
  java.awt.image.DataBuffer data)

Sets a pixel in the DataBuffer using an int array of samples for input. ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in bounds. 


    x,&nbsp;y - The coordinates of the pixel location 
    iArray - The input samples in an int array 
    data - The DataBuffer containing the image data 

*java.awt.image.BandedSampleModel.setPixels(int,int,int,int,int[],DataBuffer)*

public void setPixels(
  int x,
  int y,
  int w,
  int h,
  int[] iArray,
  java.awt.image.DataBuffer data)

Sets all samples for a rectangle of pixels from an int array containing one sample per array element. ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in 
bounds. 


    x,&nbsp;y - The coordinates of the upper left pixel location 
    w - The width of the pixel rectangle 
    h - The height of the pixel rectangle 
    iArray - The input samples in an int array 
    data - The DataBuffer containing the image data 

*java.awt.image.BandedSampleModel.setSample(int,int,int,double,DataBuffer)*

public void setSample(
  int x,
  int y,
  int b,
  double s,
  java.awt.image.DataBuffer data)

Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input. ArrayIndexOutOfBoundsException may be thrown if the coordinates are 
not in bounds. 


    x,&nbsp;y - The coordinates of the pixel location 
    b - The band to set 
    s - The input sample as a double 
    data - The DataBuffer containing the image data 

*java.awt.image.BandedSampleModel.setSample(int,int,int,float,DataBuffer)*

public void setSample(
  int x,
  int y,
  int b,
  float s,
  java.awt.image.DataBuffer data)

Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input. ArrayIndexOutOfBoundsException may be thrown if the coordinates are 
not in bounds. 


    x,&nbsp;y - The coordinates of the pixel location 
    b - The band to set 
    s - The input sample as a float 
    data - The DataBuffer containing the image data 

*java.awt.image.BandedSampleModel.setSample(int,int,int,int,DataBuffer)*

public void setSample(
  int x,
  int y,
  int b,
  int s,
  java.awt.image.DataBuffer data)

Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input. ArrayIndexOutOfBoundsException may be thrown if the coordinates are 
not in bounds. 


    x,&nbsp;y - The coordinates of the pixel location 
    b - The band to set 
    s - The input sample as an int 
    data - The DataBuffer containing the image data 

*java.awt.image.BandedSampleModel.setSamples(int,int,int,int,int,int[],DataBuffer)*

public void setSamples(
  int x,
  int y,
  int w,
  int h,
  int b,
  int[] iArray,
  java.awt.image.DataBuffer data)

Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per data array element. ArrayIndexOutOfBoundsException may be 
thrown if the coordinates are not in bounds. 


    x,&nbsp;y - The coordinates of the upper left pixel location 
    w - The width of the pixel rectangle 
    h - The height of the pixel rectangle 
    b - The band to set 
    iArray - The input sample array 
    data - The DataBuffer containing the image data 



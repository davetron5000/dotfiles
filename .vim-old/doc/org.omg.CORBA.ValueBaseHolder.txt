*org.omg.CORBA.ValueBaseHolder* *ValueBaseHolder* The Holder for ValueBase.

public final class ValueBaseHolder
  extends    |java.lang.Object|
  implements |org.omg.CORBA.portable.Streamable|

|org.omg.CORBA.ValueBaseHolder_Description|
|org.omg.CORBA.ValueBaseHolder_Fields|
|org.omg.CORBA.ValueBaseHolder_Constructors|
|org.omg.CORBA.ValueBaseHolder_Methods|

================================================================================

*org.omg.CORBA.ValueBaseHolder_Fields*
|java.io.Serializable_org.omg.CORBA.ValueBaseHolder.value|

*org.omg.CORBA.ValueBaseHolder_Constructors*
|org.omg.CORBA.ValueBaseHolder()|Constructs a new ValueBaseHolder object with i
|org.omg.CORBA.ValueBaseHolder(Serializable)|Constructs a new ValueBaseHolder o

*org.omg.CORBA.ValueBaseHolder_Methods*
|org.omg.CORBA.ValueBaseHolder._read(InputStream)|Reads from input and initaliz
|org.omg.CORBA.ValueBaseHolder._type()|Returns the TypeCode object   correspond
|org.omg.CORBA.ValueBaseHolder._write(OutputStream)|Marshals to output the valu

*org.omg.CORBA.ValueBaseHolder_Description*

The Holder for ValueBase. For more information on Holder files, see "Generated 
Files: Holder Files". A Holder class for a java.io.Serializable that is used to 
store "out" and "inout" parameters in IDL methods. If an IDL method signature 
has an IDL ValueBase as an "out" or "inout" parameter, the programmer must pass 
an instance of ValueBaseHolder as the corresponding parameter in the method 
invocation; for "inout" parameters, the programmer must also fill the "in" 
value to be sent to the server. Before the method invocation returns, the ORB 
will fill in the value corresponding to the "out" value returned from the 
server. 

If myValueBaseHolder is an instance of ValueBaseHolder, the value stored in its 
value field can be accessed with myValueBaseHolder.value. 


*java.io.Serializable_org.omg.CORBA.ValueBaseHolder.value*

The Holder for ValueBase. For more information on Holder files, see "Generated 
Files: Holder Files". A Holder class for a java.io.Serializable that is used to 
store "out" and "inout" parameters in IDL methods. If an IDL method signature 
has an IDL ValueBase as an "out" or "inout" parameter, the programmer must pass 
an instance of ValueBaseHolder as the corresponding parameter in the method 
invocation; for "inout" parameters, the programmer must also fill the "in" 
value to be sent to the server. Before the method invocation returns, the ORB 
will fill in the value corresponding to the "out" value returned from the 
server. 

If myValueBaseHolder is an instance of ValueBaseHolder, the value stored in its 
value field can be accessed with myValueBaseHolder.value. 



*org.omg.CORBA.ValueBaseHolder()*

public ValueBaseHolder()

Constructs a new ValueBaseHolder object with its value field initialized to 0. 


*org.omg.CORBA.ValueBaseHolder(Serializable)*

public ValueBaseHolder(java.io.Serializable initial)

Constructs a new ValueBaseHolder object with its value field initialized to the 
given java.io.Serializable. 

    initial - the java.io.Serializable with which to initialize the value field of the 
       newly-created ValueBaseHolder object 

*org.omg.CORBA.ValueBaseHolder._read(InputStream)*

public void _read(org.omg.CORBA.portable.InputStream input)

Reads from input and initalizes the value in the Holder with the unmarshalled 
data. 

    input - the InputStream containing CDR formatted data from the wire 

*org.omg.CORBA.ValueBaseHolder._type()*

public |org.omg.CORBA.TypeCode| _type()

Returns the TypeCode object corresponding to the value held in the Holder. 


    Returns: the TypeCode of the value held in the holder 
*org.omg.CORBA.ValueBaseHolder._write(OutputStream)*

public void _write(org.omg.CORBA.portable.OutputStream output)

Marshals to output the value in the Holder. 

    output - the OutputStream which will contain the CDR formatted data 



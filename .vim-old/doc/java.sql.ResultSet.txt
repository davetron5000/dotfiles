*java.sql.ResultSet* *ResultSet* A table of data representing a database result set, which
 is usually generated by executing a statement that queries the database.

public interface interface ResultSet


|java.sql.ResultSet_Description|
|java.sql.ResultSet_Fields|
|java.sql.ResultSet_Constructors|
|java.sql.ResultSet_Methods|

====================================================================================================================================================================================

*java.sql.ResultSet_Fields*
|int_java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT|
|int_java.sql.ResultSet.CONCUR_READ_ONLY|
|int_java.sql.ResultSet.CONCUR_UPDATABLE|
|int_java.sql.ResultSet.FETCH_FORWARD|
|int_java.sql.ResultSet.FETCH_REVERSE|
|int_java.sql.ResultSet.FETCH_UNKNOWN|
|int_java.sql.ResultSet.HOLD_CURSORS_OVER_COMMIT|
|int_java.sql.ResultSet.TYPE_FORWARD_ONLY|
|int_java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE|
|int_java.sql.ResultSet.TYPE_SCROLL_SENSITIVE|

*java.sql.ResultSet_Methods*
|java.sql.ResultSet.absolute(int)|Moves the cursor to the given row number in  this ResultSet object.
|java.sql.ResultSet.afterLast()|Moves the cursor to the end of  this ResultSet object, just after the  last row.
|java.sql.ResultSet.beforeFirst()|Moves the cursor to the front of  this ResultSet object, just before the  first row.
|java.sql.ResultSet.cancelRowUpdates()|Cancels the updates made to the current row in this  ResultSet object.
|java.sql.ResultSet.clearWarnings()|Clears all warnings reported on this ResultSet object.
|java.sql.ResultSet.close()|Releases this ResultSet object's database and  JDBC resources immediately instead of waiting for  this to happen when it is automatically closed.
|java.sql.ResultSet.deleteRow()|Deletes the current row from this ResultSet object   and from the underlying database.
|java.sql.ResultSet.findColumn(String)|Maps the given ResultSet column name to its  ResultSet column index.
|java.sql.ResultSet.first()|Moves the cursor to the first row in  this ResultSet object.
|java.sql.ResultSet.getArray(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as an Array object  in the Java programming language.
|java.sql.ResultSet.getArray(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as an Array object  in the Java programming language
|java.sql.ResultSet.getAsciiStream(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a stream of ASCII characters.
|java.sql.ResultSet.getAsciiStream(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as a stream of  ASCII characters.
|java.sql.ResultSet.getBigDecimal(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as a  java.math.BigDecimal with full precision.
|java.sql.ResultSet.getBigDecimal(int,int)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a java.sql.BigDecimal in the Java programm
|java.sql.ResultSet.getBigDecimal(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as a  java.math.BigDecimal with full precision.
|java.sql.ResultSet.getBigDecimal(String,int)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a java.math.BigDecimal in the Java prog
|java.sql.ResultSet.getBinaryStream(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as a binary stream of  uninterpreted bytes.
|java.sql.ResultSet.getBinaryStream(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as a stream of uninterpreted  bytes.
|java.sql.ResultSet.getBlob(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as a Blob object  in the Java programming language.
|java.sql.ResultSet.getBlob(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as a Blob object  in the Java programming language.
|java.sql.ResultSet.getBoolean(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a boolean in the Java programming language.
|java.sql.ResultSet.getBoolean(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a boolean in the Java programming language.
|java.sql.ResultSet.getByte(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a byte in the Java programming language.
|java.sql.ResultSet.getByte(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a byte in the Java programming language.
|java.sql.ResultSet.getBytes(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a byte array in the Java programming language.
|java.sql.ResultSet.getBytes(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a byte array in the Java programming language.
|java.sql.ResultSet.getCharacterStream(int)|Retrieves the value of the designated column in the current row   of this ResultSet object as a  java.io.Reader object.
|java.sql.ResultSet.getCharacterStream(String)|Retrieves the value of the designated column in the current row   of this ResultSet object as a  java.io.Reader object.
|java.sql.ResultSet.getClob(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as a Clob object  in the Java programming language.
|java.sql.ResultSet.getClob(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as a Clob object  in the Java programming language.
|java.sql.ResultSet.getConcurrency()|Retrieves the concurrency mode of this ResultSet object.
|java.sql.ResultSet.getCursorName()|Retrieves the name of the SQL cursor used by this ResultSet  object.
|java.sql.ResultSet.getDate(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a java.sql.Date object in the Java programming langu
|java.sql.ResultSet.getDate(int,Calendar)|Retrieves the value of the designated column in the current row  of this ResultSet object as a java.sql.Date object  in the Java programm
|java.sql.ResultSet.getDate(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a java.sql.Date object in the Java programming la
|java.sql.ResultSet.getDate(String,Calendar)|Retrieves the value of the designated column in the current row  of this ResultSet object as a java.sql.Date object  in the Java progr
|java.sql.ResultSet.getDouble(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a double in the Java programming language.
|java.sql.ResultSet.getDouble(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a double in the Java programming language.
|java.sql.ResultSet.getFetchDirection()|Retrieves the fetch direction for this   ResultSet object.
|java.sql.ResultSet.getFetchSize()|Retrieves the fetch size for this   ResultSet object.
|java.sql.ResultSet.getFloat(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a float in the Java programming language.
|java.sql.ResultSet.getFloat(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a float in the Java programming language.
|java.sql.ResultSet.getInt(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as  an int in the Java programming language.
|java.sql.ResultSet.getInt(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as  an int in the Java programming language.
|java.sql.ResultSet.getLong(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a long in the Java programming language.
|java.sql.ResultSet.getLong(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a long in the Java programming language.
|java.sql.ResultSet.getMetaData()|Retrieves the  number, types and properties of  this ResultSet object's columns.
|java.sql.ResultSet.getObject(int)|Gets the value of the designated column in the current row   of this ResultSet object as   an Object in the Java programming language.
|java.sql.ResultSet.getObject(int,Map<String,Class<?>>)|Retrieves the value of the designated column in the current row  of this ResultSet object as an Object  in the Java program
|java.sql.ResultSet.getObject(String)|Gets the value of the designated column in the current row   of this ResultSet object as   an Object in the Java programming language.
|java.sql.ResultSet.getObject(String,Map<String,Class<?>>)|Retrieves the value of the designated column in the current row  of this ResultSet object as an Object  in the Java prog
|java.sql.ResultSet.getRef(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as a Ref object  in the Java programming language.
|java.sql.ResultSet.getRef(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as a Ref object  in the Java programming language.
|java.sql.ResultSet.getRow()|Retrieves the current row number.
|java.sql.ResultSet.getShort(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a short in the Java programming language.
|java.sql.ResultSet.getShort(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a short in the Java programming language.
|java.sql.ResultSet.getStatement()|Retrieves the Statement object that produced this   ResultSet object.
|java.sql.ResultSet.getString(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a String in the Java programming language.
|java.sql.ResultSet.getString(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a String in the Java programming language.
|java.sql.ResultSet.getTime(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a java.sql.Time object in the Java programming langu
|java.sql.ResultSet.getTime(int,Calendar)|Retrieves the value of the designated column in the current row  of this ResultSet object as a java.sql.Time object  in the Java programm
|java.sql.ResultSet.getTime(String)|Retrieves the value of the designated column in the current row    of this ResultSet object as  a java.sql.Time object in the Java programming 
|java.sql.ResultSet.getTime(String,Calendar)|Retrieves the value of the designated column in the current row  of this ResultSet object as a java.sql.Time object  in the Java progr
|java.sql.ResultSet.getTimestamp(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a java.sql.Timestamp object in the Java program
|java.sql.ResultSet.getTimestamp(int,Calendar)|Retrieves the value of the designated column in the current row  of this ResultSet object as a java.sql.Timestamp object  in the Jav
|java.sql.ResultSet.getTimestamp(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as  a java.sql.Timestamp object.
|java.sql.ResultSet.getTimestamp(String,Calendar)|Retrieves the value of the designated column in the current row  of this ResultSet object as a java.sql.Timestamp object  in the 
|java.sql.ResultSet.getType()|Retrieves the type of this ResultSet object.
|java.sql.ResultSet.getUnicodeStream(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as  as a stream of two-byte Unicode characters.
|java.sql.ResultSet.getUnicodeStream(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as a stream of two-byte  Unicode characters.
|java.sql.ResultSet.getURL(int)|Retrieves the value of the designated column in the current row  of this ResultSet object as a java.net.URL  object in the Java programming languag
|java.sql.ResultSet.getURL(String)|Retrieves the value of the designated column in the current row  of this ResultSet object as a java.net.URL  object in the Java programming lang
|java.sql.ResultSet.getWarnings()|Retrieves the first warning reported by calls on this   ResultSet object.
|java.sql.ResultSet.insertRow()|Inserts the contents of the insert row into this   ResultSet object and into the database.
|java.sql.ResultSet.isAfterLast()|Retrieves whether the cursor is after the last row in   this ResultSet object.
|java.sql.ResultSet.isBeforeFirst()|Retrieves whether the cursor is before the first row in   this ResultSet object.
|java.sql.ResultSet.isFirst()|Retrieves whether the cursor is on the first row of  this ResultSet object.
|java.sql.ResultSet.isLast()|Retrieves whether the cursor is on the last row of   this ResultSet object.
|java.sql.ResultSet.last()|Moves the cursor to the last row in  this ResultSet object.
|java.sql.ResultSet.moveToCurrentRow()|Moves the cursor to the remembered cursor position, usually the  current row.
|java.sql.ResultSet.moveToInsertRow()|Moves the cursor to the insert row.
|java.sql.ResultSet.next()|Moves the cursor down one row from its current position.
|java.sql.ResultSet.previous()|Moves the cursor to the previous row in this  ResultSet object.
|java.sql.ResultSet.refreshRow()|Refreshes the current row with its most recent value in   the database.
|java.sql.ResultSet.relative(int)|Moves the cursor a relative number of rows, either positive or negative.
|java.sql.ResultSet.rowDeleted()|Retrieves whether a row has been deleted.
|java.sql.ResultSet.rowInserted()|Retrieves whether the current row has had an insertion.
|java.sql.ResultSet.rowUpdated()|Retrieves whether the current row has been updated.
|java.sql.ResultSet.setFetchDirection(int)|Gives a hint as to the direction in which the rows in this  ResultSet object will be processed.
|java.sql.ResultSet.setFetchSize(int)|Gives the JDBC driver a hint as to the number of rows that should   be fetched from the database when more rows are needed for this   ResultS
|java.sql.ResultSet.updateArray(int,Array)|Updates the designated column with a java.sql.Array value.
|java.sql.ResultSet.updateArray(String,Array)|Updates the designated column with a java.sql.Array value.
|java.sql.ResultSet.updateAsciiStream(int,InputStream,int)|Updates the designated column with an ascii stream value.
|java.sql.ResultSet.updateAsciiStream(String,InputStream,int)|Updates the designated column with an ascii stream value.
|java.sql.ResultSet.updateBigDecimal(int,BigDecimal)|Updates the designated column with a java.math.BigDecimal   value.
|java.sql.ResultSet.updateBigDecimal(String,BigDecimal)|Updates the designated column with a java.sql.BigDecimal  value.
|java.sql.ResultSet.updateBinaryStream(int,InputStream,int)|Updates the designated column with a binary stream value.
|java.sql.ResultSet.updateBinaryStream(String,InputStream,int)|Updates the designated column with a binary stream value.
|java.sql.ResultSet.updateBlob(int,Blob)|Updates the designated column with a java.sql.Blob value.
|java.sql.ResultSet.updateBlob(String,Blob)|Updates the designated column with a java.sql.Blob value.
|java.sql.ResultSet.updateBoolean(int,boolean)|Updates the designated column with a boolean value.
|java.sql.ResultSet.updateBoolean(String,boolean)|Updates the designated column with a boolean value.
|java.sql.ResultSet.updateByte(int,byte)|Updates the designated column with a byte value.
|java.sql.ResultSet.updateByte(String,byte)|Updates the designated column with a byte value.
|java.sql.ResultSet.updateBytes(int,byte[])|Updates the designated column with a byte array value.
|java.sql.ResultSet.updateBytes(String,byte[])|Updates the designated column with a byte array value.
|java.sql.ResultSet.updateCharacterStream(int,Reader,int)|Updates the designated column with a character stream value.
|java.sql.ResultSet.updateCharacterStream(String,Reader,int)|Updates the designated column with a character stream value.
|java.sql.ResultSet.updateClob(int,Clob)|Updates the designated column with a java.sql.Clob value.
|java.sql.ResultSet.updateClob(String,Clob)|Updates the designated column with a java.sql.Clob value.
|java.sql.ResultSet.updateDate(int,Date)|Updates the designated column with a java.sql.Date value.
|java.sql.ResultSet.updateDate(String,Date)|Updates the designated column with a java.sql.Date value.
|java.sql.ResultSet.updateDouble(int,double)|Updates the designated column with a double value.
|java.sql.ResultSet.updateDouble(String,double)|Updates the designated column with a double value.
|java.sql.ResultSet.updateFloat(int,float)|Updates the designated column with a float value.
|java.sql.ResultSet.updateFloat(String,float)|Updates the designated column with a float	 value.
|java.sql.ResultSet.updateInt(int,int)|Updates the designated column with an int value.
|java.sql.ResultSet.updateInt(String,int)|Updates the designated column with an int value.
|java.sql.ResultSet.updateLong(int,long)|Updates the designated column with a long value.
|java.sql.ResultSet.updateLong(String,long)|Updates the designated column with a long value.
|java.sql.ResultSet.updateNull(int)|Gives a nullable column a null value.
|java.sql.ResultSet.updateNull(String)|Updates the designated column with a null value.
|java.sql.ResultSet.updateObject(int,Object)|Updates the designated column with an Object value.
|java.sql.ResultSet.updateObject(int,Object,int)|Updates the designated column with an Object value.
|java.sql.ResultSet.updateObject(String,Object)|Updates the designated column with an Object value.
|java.sql.ResultSet.updateObject(String,Object,int)|Updates the designated column with an Object value.
|java.sql.ResultSet.updateRef(int,Ref)|Updates the designated column with a java.sql.Ref value.
|java.sql.ResultSet.updateRef(String,Ref)|Updates the designated column with a java.sql.Ref value.
|java.sql.ResultSet.updateRow()|Updates the underlying database with the new contents of the  current row of this ResultSet object.
|java.sql.ResultSet.updateShort(int,short)|Updates the designated column with a short value.
|java.sql.ResultSet.updateShort(String,short)|Updates the designated column with a short value.
|java.sql.ResultSet.updateString(int,String)|Updates the designated column with a String value.
|java.sql.ResultSet.updateString(String,String)|Updates the designated column with a String value.
|java.sql.ResultSet.updateTime(int,Time)|Updates the designated column with a java.sql.Time value.
|java.sql.ResultSet.updateTime(String,Time)|Updates the designated column with a java.sql.Time value.
|java.sql.ResultSet.updateTimestamp(int,Timestamp)|Updates the designated column with a java.sql.Timestamp  value.
|java.sql.ResultSet.updateTimestamp(String,Timestamp)|Updates the designated column with a java.sql.Timestamp  value.
|java.sql.ResultSet.wasNull()|Reports whether  the last column read had a value of SQL NULL.

*java.sql.ResultSet_Description*

A table of data representing a database result set, which is usually generated by executing a statement that queries the database. 

A ResultSet object maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. The next method moves the cursor to the next 
row, and because it returns false when there are no more rows in the ResultSet object, it can be used in a while loop to iterate through the result set. 

A default ResultSet object is not updatable and has a cursor that moves forward only. Thus, you can iterate through it only once and only from the first row to the last row. It is 
possible to produce ResultSet objects that are scrollable and/or updatable. The following code fragment, in which con is a valid Connection object, illustrates how to make a 
result set that is scrollable and insensitive to updates by others, and that is updatable. See ResultSet fields for other options. 

Statement stmt = con.createStatement( ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE); ResultSet rs = stmt.executeQuery("SELECT a, b FROM TABLE2"); // rs will be 
scrollable, will not show changes made by others, // and will be updatable 



The ResultSet interface provides getter methods (getBoolean, getLong, and so on) for retrieving column values from the current row. Values can be retrieved using either the index 
number of the column or the name of the column. In general, using the column index will be more efficient. Columns are numbered from 1. For maximum portability, result set columns 
within each row should be read in left-to-right order, and each column should be read only once. 

For the getter methods, a JDBC driver attempts to convert the underlying data to the Java type specified in the getter method and returns a suitable Java value. The JDBC 
specification has a table showing the allowable mappings from SQL types to Java types that can be used by the ResultSet getter methods. 

Column names used as input to getter methods are case insensitive. When a getter method is called with a column name and several columns have the same name, the value of the first 
matching column will be returned. The column name option is designed to be used when column names are used in the SQL query that generated the result set. For columns that are NOT 
explicitly named in the query, it is best to use column numbers. If column names are used, there is no way for the programmer to guarantee that they actually refer to the intended 
columns. 

A set of updater methods were added to this interface in the JDBC 2.0 API (JDK 1.2). The comments regarding parameters to the getter methods also apply to parameters to the 
updater methods. 

The updater methods may be used in two ways: 

to update a column value in the current row. In a scrollable ResultSet object, the cursor can be moved backwards and forwards, to an absolute position, or to a position relative 
to the current row. The following code fragment updates the NAME column in the fifth row of the ResultSet object rs and then uses the method updateRow to update the data source 
table from which rs was derived. 

rs.absolute(5); // moves the cursor to the fifth row of rs rs.updateString("NAME", "AINSWORTH"); // updates the // NAME column of row 5 to be AINSWORTH rs.updateRow(); // updates 
the row in the data source 



to insert column values into the insert row. An updatable ResultSet object has a special row associated with it that serves as a staging area for building a row to be inserted. 
The following code fragment moves the cursor to the insert row, builds a three-column row, and inserts it into rs and into the data source table using the method insertRow. 

rs.moveToInsertRow(); // moves cursor to the insert row rs.updateString(1, "AINSWORTH"); // updates the // first column of the insert row to be AINSWORTH rs.updateInt(2,35); // 
updates the second column to be 35 rs.updateBoolean(3, true); // updates the third column to true rs.insertRow(); rs.moveToCurrentRow(); 



A ResultSet object is automatically closed when the Statement object that generated it is closed, re-executed, or used to retrieve the next result from a sequence of multiple 
results. 

The number, types and properties of a ResultSet object's columns are provided by the ResulSetMetaData object returned by the ResultSet.getMetaData method. 



*int_java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT*

The constant indicating that ResultSet objects should be closed when the method Connection.commit is called. 


*int_java.sql.ResultSet.CONCUR_READ_ONLY*

The constant indicating the concurrency mode for a ResultSet object that may NOT be updated. 


*int_java.sql.ResultSet.CONCUR_UPDATABLE*

The constant indicating the concurrency mode for a ResultSet object that may be updated. 


*int_java.sql.ResultSet.FETCH_FORWARD*

The constant indicating that the rows in a result set will be processed in a forward direction; first-to-last. This constant is used by the method setFetchDirection as a hint to 
the driver, which the driver may ignore. 


*int_java.sql.ResultSet.FETCH_REVERSE*

The constant indicating that the rows in a result set will be processed in a reverse direction; last-to-first. This constant is used by the method setFetchDirection as a hint to 
the driver, which the driver may ignore. 


*int_java.sql.ResultSet.FETCH_UNKNOWN*

The constant indicating that the order in which rows in a result set will be processed is unknown. This constant is used by the method setFetchDirection as a hint to the driver, 
which the driver may ignore. 


*int_java.sql.ResultSet.HOLD_CURSORS_OVER_COMMIT*

The constant indicating that ResultSet objects should not be closed when the method Connection.commit is called. 


*int_java.sql.ResultSet.TYPE_FORWARD_ONLY*

The constant indicating the type for a ResultSet object whose cursor may move only forward. 


*int_java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE*

The constant indicating the type for a ResultSet object that is scrollable but generally not sensitive to changes made by others. 


*int_java.sql.ResultSet.TYPE_SCROLL_SENSITIVE*

The constant indicating the type for a ResultSet object that is scrollable and generally sensitive to changes made by others. 



*java.sql.ResultSet.absolute(int)*

public boolean absolute(int row)
  throws |java.sql.SQLException|
         
Moves the cursor to the given row number in this ResultSet object. 

If the row number is positive, the cursor moves to the given row number with respect to the beginning of the result set. The first row is row 1, the second is row 2, and so on. 

If the given row number is negative, the cursor moves to an absolute row position with respect to the end of the result set. For example, calling the method absolute(-1) positions 
the cursor on the last row; calling the method absolute(-2) moves the cursor to the next-to-last row, and so on. 

An attempt to position the cursor beyond the first/last row in the result set leaves the cursor before the first row or after the last row. 

Note: Calling absolute(1) is the same as calling first(). Calling absolute(-1) is the same as calling last(). 


    row - the number of the row to which the cursor should move. A positive number indicates the row number counting from the beginning of the result set; a negative number indicates the 
       row number counting from the end of the result set 

    Returns: true if the cursor is on the result set; false otherwise 

*java.sql.ResultSet.afterLast()*

public void afterLast()
  throws |java.sql.SQLException|
         
Moves the cursor to the end of this ResultSet object, just after the last row. This method has no effect if the result set contains no rows. 



*java.sql.ResultSet.beforeFirst()*

public void beforeFirst()
  throws |java.sql.SQLException|
         
Moves the cursor to the front of this ResultSet object, just before the first row. This method has no effect if the result set contains no rows. 



*java.sql.ResultSet.cancelRowUpdates()*

public void cancelRowUpdates()
  throws |java.sql.SQLException|
         
Cancels the updates made to the current row in this ResultSet object. This method may be called after calling an updater method(s) and before calling the method updateRow to roll 
back the updates made to a row. If no updates have been made or updateRow has already been called, this method has no effect. 



*java.sql.ResultSet.clearWarnings()*

public void clearWarnings()
  throws |java.sql.SQLException|
         
Clears all warnings reported on this ResultSet object. After this method is called, the method getWarnings returns null until a new warning is reported for this ResultSet object. 



*java.sql.ResultSet.close()*

public void close()
  throws |java.sql.SQLException|
         
Releases this ResultSet object's database and JDBC resources immediately instead of waiting for this to happen when it is automatically closed. 

Note: A ResultSet object is automatically closed by the Statement object that generated it when that Statement object is closed, re-executed, or is used to retrieve the next 
result from a sequence of multiple results. A ResultSet object is also automatically closed when it is garbage collected. 



*java.sql.ResultSet.deleteRow()*

public void deleteRow()
  throws |java.sql.SQLException|
         
Deletes the current row from this ResultSet object and from the underlying database. This method cannot be called when the cursor is on the insert row. 



*java.sql.ResultSet.findColumn(String)*

public int findColumn(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Maps the given ResultSet column name to its ResultSet column index. 


    columnName - the name of the column 

    Returns: the column index of the given column name 

*java.sql.ResultSet.first()*

public boolean first()
  throws |java.sql.SQLException|
         
Moves the cursor to the first row in this ResultSet object. 



    Returns: true if the cursor is on a valid row; false if there are no rows in the result set 

*java.sql.ResultSet.getArray(int)*

public |java.sql.Array| getArray(int i)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as an Array object in the Java programming language. 


    i - the first column is 1, the second is 2, ... 

    Returns: an Array object representing the SQL ARRAY value in the specified column 

*java.sql.ResultSet.getArray(String)*

public |java.sql.Array| getArray(java.lang.String colName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as an Array object in the Java programming language. 


    colName - the name of the column from which to retrieve the value 

    Returns: an Array object representing the SQL ARRAY value in the specified column 

*java.sql.ResultSet.getAsciiStream(int)*

public |java.io.InputStream| getAsciiStream(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a stream of ASCII characters. The value can then be read in chunks from the stream. 
This method is particularly suitable for retrieving large LONGVARCHAR values. The JDBC driver will do any necessary conversion from the database format into ASCII. 

Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a getter method implicitly closes the stream. Also, a 
stream may return 0 when the method InputStream.available is called whether there is data available or not. 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: a Java input stream that delivers the database column value as a stream of one-byte ASCII characters; if the value is SQL NULL, the value returned is null 

*java.sql.ResultSet.getAsciiStream(String)*

public |java.io.InputStream| getAsciiStream(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a stream of ASCII characters. The value can then be read in chunks from the stream. 
This method is particularly suitable for retrieving large LONGVARCHAR values. The JDBC driver will do any necessary conversion from the database format into ASCII. 

Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a getter method implicitly closes the stream. Also, a 
stream may return 0 when the method available is called whether there is data available or not. 


    columnName - the SQL name of the column 

    Returns: a Java input stream that delivers the database column value as a stream of one-byte ASCII characters. If the value is SQL NULL, the value returned is null. 

*java.sql.ResultSet.getBigDecimal(int)*

public |java.math.BigDecimal| getBigDecimal(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal with full precision. 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: the column value (full precision); if the value is SQL NULL, the value returned is null in the Java programming language. 

*java.sql.ResultSet.getBigDecimal(int,int)*

public |java.math.BigDecimal| getBigDecimal(
  int columnIndex,
  int scale)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.BigDecimal in the Java programming language. 

    Deprecated

    columnIndex - the first column is 1, the second is 2, ... 
    scale - the number of digits to the right of the decimal point 

    Returns: the column value; if the value is SQL NULL, the value returned is null 

*java.sql.ResultSet.getBigDecimal(String)*

public |java.math.BigDecimal| getBigDecimal(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal with full precision. 


    columnName - the column name 

    Returns: the column value (full precision); if the value is SQL NULL, the value returned is null in the Java programming language. 

*java.sql.ResultSet.getBigDecimal(String,int)*

public |java.math.BigDecimal| getBigDecimal(
  java.lang.String columnName,
  int scale)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal in the Java programming language. 

    Deprecated

    columnName - the SQL name of the column 
    scale - the number of digits to the right of the decimal point 

    Returns: the column value; if the value is SQL NULL, the value returned is null 

*java.sql.ResultSet.getBinaryStream(int)*

public |java.io.InputStream| getBinaryStream(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a binary stream of uninterpreted bytes. The value can then be read in chunks from the 
stream. This method is particularly suitable for retrieving large LONGVARBINARY values. 

Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a getter method implicitly closes the stream. Also, a 
stream may return 0 when the method InputStream.available is called whether there is data available or not. 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: a Java input stream that delivers the database column value as a stream of uninterpreted bytes; if the value is SQL NULL, the value returned is null 

*java.sql.ResultSet.getBinaryStream(String)*

public |java.io.InputStream| getBinaryStream(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a stream of uninterpreted bytes. The value can then be read in chunks from the stream. 
This method is particularly suitable for retrieving large LONGVARBINARY values. 

Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a getter method implicitly closes the stream. Also, a 
stream may return 0 when the method available is called whether there is data available or not. 


    columnName - the SQL name of the column 

    Returns: a Java input stream that delivers the database column value as a stream of uninterpreted bytes; if the value is SQL NULL, the result is null 

*java.sql.ResultSet.getBlob(int)*

public |java.sql.Blob| getBlob(int i)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a Blob object in the Java programming language. 


    i - the first column is 1, the second is 2, ... 

    Returns: a Blob object representing the SQL BLOB value in the specified column 

*java.sql.ResultSet.getBlob(String)*

public |java.sql.Blob| getBlob(java.lang.String colName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a Blob object in the Java programming language. 


    colName - the name of the column from which to retrieve the value 

    Returns: a Blob object representing the SQL BLOB value in the specified column 

*java.sql.ResultSet.getBoolean(int)*

public boolean getBoolean(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a boolean in the Java programming language. 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: the column value; if the value is SQL NULL, the value returned is false 

*java.sql.ResultSet.getBoolean(String)*

public boolean getBoolean(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a boolean in the Java programming language. 


    columnName - the SQL name of the column 

    Returns: the column value; if the value is SQL NULL, the value returned is false 

*java.sql.ResultSet.getByte(int)*

public byte getByte(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a byte in the Java programming language. 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: the column value; if the value is SQL NULL, the value returned is 0 

*java.sql.ResultSet.getByte(String)*

public byte getByte(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a byte in the Java programming language. 


    columnName - the SQL name of the column 

    Returns: the column value; if the value is SQL NULL, the value returned is 0 

*java.sql.ResultSet.getBytes(int)*

public byte[] getBytes(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a byte array in the Java programming language. The bytes represent the raw values 
returned by the driver. 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: the column value; if the value is SQL NULL, the value returned is null 

*java.sql.ResultSet.getBytes(String)*

public byte[] getBytes(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a byte array in the Java programming language. The bytes represent the raw values 
returned by the driver. 


    columnName - the SQL name of the column 

    Returns: the column value; if the value is SQL NULL, the value returned is null 

*java.sql.ResultSet.getCharacterStream(int)*

public |java.io.Reader| getCharacterStream(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object. 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: a java.io.Reader object that contains the column value; if the value is SQL NULL, the value returned is null in the Java programming language. 

*java.sql.ResultSet.getCharacterStream(String)*

public |java.io.Reader| getCharacterStream(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object. 


    columnName - the name of the column 

    Returns: a java.io.Reader object that contains the column value; if the value is SQL NULL, the value returned is null in the Java programming language 

*java.sql.ResultSet.getClob(int)*

public |java.sql.Clob| getClob(int i)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a Clob object in the Java programming language. 


    i - the first column is 1, the second is 2, ... 

    Returns: a Clob object representing the SQL CLOB value in the specified column 

*java.sql.ResultSet.getClob(String)*

public |java.sql.Clob| getClob(java.lang.String colName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a Clob object in the Java programming language. 


    colName - the name of the column from which to retrieve the value 

    Returns: a Clob object representing the SQL CLOB value in the specified column 

*java.sql.ResultSet.getConcurrency()*

public int getConcurrency()
  throws |java.sql.SQLException|
         
Retrieves the concurrency mode of this ResultSet object. The concurrency used is determined by the Statement object that created the result set. 



    Returns: the concurrency type, either ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE 

*java.sql.ResultSet.getCursorName()*

public |java.lang.String| getCursorName()
  throws |java.sql.SQLException|
         
Retrieves the name of the SQL cursor used by this ResultSet object. 

In SQL, a result table is retrieved through a cursor that is named. The current row of a result set can be updated or deleted using a positioned update/delete statement that 
references the cursor name. To insure that the cursor has the proper isolation level to support update, the cursor's SELECT statement should be of the form SELECT FOR UPDATE. If 
FOR UPDATE is omitted, the positioned updates may fail. 

The JDBC API supports this SQL feature by providing the name of the SQL cursor used by a ResultSet object. The current row of a ResultSet object is also the current row of this 
SQL cursor. 

Note: If positioned update is not supported, a SQLException is thrown. 



    Returns: the SQL name for this ResultSet object's cursor 

*java.sql.ResultSet.getDate(int)*

public |java.sql.Date| getDate(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language. 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: the column value; if the value is SQL NULL, the value returned is null 

*java.sql.ResultSet.getDate(int,Calendar)*

public |java.sql.Date| getDate(
  int columnIndex,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language. This method uses the given 
calendar to construct an appropriate millisecond value for the date if the underlying database does not store timezone information. 


    columnIndex - the first column is 1, the second is 2, ... 
    cal - the java.util.Calendar object to use in constructing the date 

    Returns: the column value as a java.sql.Date object; if the value is SQL NULL, the value returned is null in the Java programming language 

*java.sql.ResultSet.getDate(String)*

public |java.sql.Date| getDate(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language. 


    columnName - the SQL name of the column 

    Returns: the column value; if the value is SQL NULL, the value returned is null 

*java.sql.ResultSet.getDate(String,Calendar)*

public |java.sql.Date| getDate(
  java.lang.String columnName,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language. This method uses the given 
calendar to construct an appropriate millisecond value for the date if the underlying database does not store timezone information. 


    columnName - the SQL name of the column from which to retrieve the value 
    cal - the java.util.Calendar object to use in constructing the date 

    Returns: the column value as a java.sql.Date object; if the value is SQL NULL, the value returned is null in the Java programming language 

*java.sql.ResultSet.getDouble(int)*

public double getDouble(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a double in the Java programming language. 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: the column value; if the value is SQL NULL, the value returned is 0 

*java.sql.ResultSet.getDouble(String)*

public double getDouble(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a double in the Java programming language. 


    columnName - the SQL name of the column 

    Returns: the column value; if the value is SQL NULL, the value returned is 0 

*java.sql.ResultSet.getFetchDirection()*

public int getFetchDirection()
  throws |java.sql.SQLException|
         
Retrieves the fetch direction for this ResultSet object. 



    Returns: the current fetch direction for this ResultSet object 

*java.sql.ResultSet.getFetchSize()*

public int getFetchSize()
  throws |java.sql.SQLException|
         
Retrieves the fetch size for this ResultSet object. 



    Returns: the current fetch size for this ResultSet object 

*java.sql.ResultSet.getFloat(int)*

public float getFloat(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a float in the Java programming language. 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: the column value; if the value is SQL NULL, the value returned is 0 

*java.sql.ResultSet.getFloat(String)*

public float getFloat(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a float in the Java programming language. 


    columnName - the SQL name of the column 

    Returns: the column value; if the value is SQL NULL, the value returned is 0 

*java.sql.ResultSet.getInt(int)*

public int getInt(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as an int in the Java programming language. 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: the column value; if the value is SQL NULL, the value returned is 0 

*java.sql.ResultSet.getInt(String)*

public int getInt(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as an int in the Java programming language. 


    columnName - the SQL name of the column 

    Returns: the column value; if the value is SQL NULL, the value returned is 0 

*java.sql.ResultSet.getLong(int)*

public long getLong(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a long in the Java programming language. 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: the column value; if the value is SQL NULL, the value returned is 0 

*java.sql.ResultSet.getLong(String)*

public long getLong(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a long in the Java programming language. 


    columnName - the SQL name of the column 

    Returns: the column value; if the value is SQL NULL, the value returned is 0 

*java.sql.ResultSet.getMetaData()*

public |java.sql.ResultSetMetaData| getMetaData()
  throws |java.sql.SQLException|
         
Retrieves the number, types and properties of this ResultSet object's columns. 



    Returns: the description of this ResultSet object's columns 

*java.sql.ResultSet.getObject(int)*

public |java.lang.Object| getObject(int columnIndex)
  throws |java.sql.SQLException|
         
Gets the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language. 

This method will return the value of the given column as a Java object. The type of the Java object will be the default Java object type corresponding to the column's SQL type, 
following the mapping for built-in types specified in the JDBC specification. If the value is an SQL NULL, the driver returns a Java null. 

This method may also be used to read database-specific abstract data types. 

In the JDBC 2.0 API, the behavior of method getObject is extended to materialize data of SQL user-defined types. When a column contains a structured or distinct value, the 
behavior of this method is as if it were a call to: getObject(columnIndex, this.getStatement().getConnection().getTypeMap()). 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: a java.lang.Object holding the column value 

*java.sql.ResultSet.getObject(int,Map<String,Class<?>>)*

public |java.lang.Object| getObject(
  int i,
  java.util.Map<java.lang.String, java.lang.Class<?>> map)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language. If the value is an SQL NULL, the driver 
returns a Java null. This method uses the given Map object for the custom mapping of the SQL structured or distinct type that is being retrieved. 


    i - the first column is 1, the second is 2, ... 
    map - a java.util.Map object that contains the mapping from SQL type names to classes in the Java programming language 

    Returns: an Object in the Java programming language representing the SQL value 

*java.sql.ResultSet.getObject(String)*

public |java.lang.Object| getObject(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Gets the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language. 

This method will return the value of the given column as a Java object. The type of the Java object will be the default Java object type corresponding to the column's SQL type, 
following the mapping for built-in types specified in the JDBC specification. If the value is an SQL NULL, the driver returns a Java null. 

This method may also be used to read database-specific abstract data types. 

In the JDBC 2.0 API, the behavior of the method getObject is extended to materialize data of SQL user-defined types. When a column contains a structured or distinct value, the 
behavior of this method is as if it were a call to: getObject(columnIndex, this.getStatement().getConnection().getTypeMap()). 


    columnName - the SQL name of the column 

    Returns: a java.lang.Object holding the column value 

*java.sql.ResultSet.getObject(String,Map<String,Class<?>>)*

public |java.lang.Object| getObject(
  java.lang.String colName,
  java.util.Map<java.lang.String, java.lang.Class<?>> map)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language. If the value is an SQL NULL, the driver 
returns a Java null. This method uses the specified Map object for custom mapping if appropriate. 


    colName - the name of the column from which to retrieve the value 
    map - a java.util.Map object that contains the mapping from SQL type names to classes in the Java programming language 

    Returns: an Object representing the SQL value in the specified column 

*java.sql.ResultSet.getRef(int)*

public |java.sql.Ref| getRef(int i)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a Ref object in the Java programming language. 


    i - the first column is 1, the second is 2, ... 

    Returns: a Ref object representing an SQL REF value 

*java.sql.ResultSet.getRef(String)*

public |java.sql.Ref| getRef(java.lang.String colName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a Ref object in the Java programming language. 


    colName - the column name 

    Returns: a Ref object representing the SQL REF value in the specified column 

*java.sql.ResultSet.getRow()*

public int getRow()
  throws |java.sql.SQLException|
         
Retrieves the current row number. The first row is number 1, the second number 2, and so on. 



    Returns: the current row number; 0 if there is no current row 

*java.sql.ResultSet.getShort(int)*

public short getShort(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a short in the Java programming language. 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: the column value; if the value is SQL NULL, the value returned is 0 

*java.sql.ResultSet.getShort(String)*

public short getShort(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a short in the Java programming language. 


    columnName - the SQL name of the column 

    Returns: the column value; if the value is SQL NULL, the value returned is 0 

*java.sql.ResultSet.getStatement()*

public |java.sql.Statement| getStatement()
  throws |java.sql.SQLException|
         
Retrieves the Statement object that produced this ResultSet object. If the result set was generated some other way, such as by a DatabaseMetaData method, this method returns null. 



    Returns: the Statment object that produced this ResultSet object or null if the result set was produced some other way 

*java.sql.ResultSet.getString(int)*

public |java.lang.String| getString(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language. 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: the column value; if the value is SQL NULL, the value returned is null 

*java.sql.ResultSet.getString(String)*

public |java.lang.String| getString(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language. 


    columnName - the SQL name of the column 

    Returns: the column value; if the value is SQL NULL, the value returned is null 

*java.sql.ResultSet.getTime(int)*

public |java.sql.Time| getTime(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language. 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: the column value; if the value is SQL NULL, the value returned is null 

*java.sql.ResultSet.getTime(int,Calendar)*

public |java.sql.Time| getTime(
  int columnIndex,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language. This method uses the given 
calendar to construct an appropriate millisecond value for the time if the underlying database does not store timezone information. 


    columnIndex - the first column is 1, the second is 2, ... 
    cal - the java.util.Calendar object to use in constructing the time 

    Returns: the column value as a java.sql.Time object; if the value is SQL NULL, the value returned is null in the Java programming language 

*java.sql.ResultSet.getTime(String)*

public |java.sql.Time| getTime(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language. 


    columnName - the SQL name of the column 

    Returns: the column value; if the value is SQL NULL, the value returned is null 

*java.sql.ResultSet.getTime(String,Calendar)*

public |java.sql.Time| getTime(
  java.lang.String columnName,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language. This method uses the given 
calendar to construct an appropriate millisecond value for the time if the underlying database does not store timezone information. 


    columnName - the SQL name of the column 
    cal - the java.util.Calendar object to use in constructing the time 

    Returns: the column value as a java.sql.Time object; if the value is SQL NULL, the value returned is null in the Java programming language 

*java.sql.ResultSet.getTimestamp(int)*

public |java.sql.Timestamp| getTimestamp(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language. 


    columnIndex - the first column is 1, the second is 2, ... 

    Returns: the column value; if the value is SQL NULL, the value returned is null 

*java.sql.ResultSet.getTimestamp(int,Calendar)*

public |java.sql.Timestamp| getTimestamp(
  int columnIndex,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language. This method uses the 
given calendar to construct an appropriate millisecond value for the timestamp if the underlying database does not store timezone information. 


    columnIndex - the first column is 1, the second is 2, ... 
    cal - the java.util.Calendar object to use in constructing the timestamp 

    Returns: the column value as a java.sql.Timestamp object; if the value is SQL NULL, the value returned is null in the Java programming language 

*java.sql.ResultSet.getTimestamp(String)*

public |java.sql.Timestamp| getTimestamp(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object. 


    columnName - the SQL name of the column 

    Returns: the column value; if the value is SQL NULL, the value returned is null 

*java.sql.ResultSet.getTimestamp(String,Calendar)*

public |java.sql.Timestamp| getTimestamp(
  java.lang.String columnName,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language. This method uses the 
given calendar to construct an appropriate millisecond value for the timestamp if the underlying database does not store timezone information. 


    columnName - the SQL name of the column 
    cal - the java.util.Calendar object to use in constructing the date 

    Returns: the column value as a java.sql.Timestamp object; if the value is SQL NULL, the value returned is null in the Java programming language 

*java.sql.ResultSet.getType()*

public int getType()
  throws |java.sql.SQLException|
         
Retrieves the type of this ResultSet object. The type is determined by the Statement object that created the result set. 



    Returns: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE 

*java.sql.ResultSet.getUnicodeStream(int)*

public |java.io.InputStream| getUnicodeStream(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as as a stream of two-byte Unicode characters. The first byte is the high byte; the second 
byte is the low byte. 

The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARCHARvalues. The JDBC driver will do any necessary conversion 
from the database format into Unicode. 

Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a getter method implicitly closes the stream. Also, a 
stream may return 0 when the method InputStream.available is called, whether there is data available or not. 

    Deprecated: use <code>getCharacterStream</code> in place of 
              <code>getUnicodeStream</code>

    columnIndex - the first column is 1, the second is 2, ... 

    Returns: a Java input stream that delivers the database column value as a stream of two-byte Unicode characters; if the value is SQL NULL, the value returned is null 

*java.sql.ResultSet.getUnicodeStream(String)*

public |java.io.InputStream| getUnicodeStream(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a stream of two-byte Unicode characters. The first byte is the high byte; the second 
byte is the low byte. 

The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARCHAR values. The JDBC technology-enabled driver will do any 
necessary conversion from the database format into Unicode. 

Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a getter method implicitly closes the stream. Also, a 
stream may return 0 when the method InputStream.available is called, whether there is data available or not. 

    Deprecated: use <code>getCharacterStream</code> instead

    columnName - the SQL name of the column 

    Returns: a Java input stream that delivers the database column value as a stream of two-byte Unicode characters. If the value is SQL NULL, the value returned is null. 

*java.sql.ResultSet.getURL(int)*

public |java.net.URL| getURL(int columnIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.net.URL object in the Java programming language. 


    columnIndex - the index of the column 1 is the first, 2 is the second,... 

    Returns: the column value as a java.net.URL object; if the value is SQL NULL, the value returned is null in the Java programming language 

*java.sql.ResultSet.getURL(String)*

public |java.net.URL| getURL(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated column in the current row of this ResultSet object as a java.net.URL object in the Java programming language. 


    columnName - the SQL name of the column 

    Returns: the column value as a java.net.URL object; if the value is SQL NULL, the value returned is null in the Java programming language 

*java.sql.ResultSet.getWarnings()*

public |java.sql.SQLWarning| getWarnings()
  throws |java.sql.SQLException|
         
Retrieves the first warning reported by calls on this ResultSet object. Subsequent warnings on this ResultSet object will be chained to the SQLWarning object that this method 
returns. 

The warning chain is automatically cleared each time a new row is read. This method may not be called on a ResultSet object that has been closed; doing so will cause an 
SQLException to be thrown. 

Note: This warning chain only covers warnings caused by ResultSet methods. Any warning caused by Statement methods (such as reading OUT parameters) will be chained on the 
Statement object. 



    Returns: the first SQLWarning object reported or null if there are none 

*java.sql.ResultSet.insertRow()*

public void insertRow()
  throws |java.sql.SQLException|
         
Inserts the contents of the insert row into this ResultSet object and into the database. The cursor must be on the insert row when this method is called. 



*java.sql.ResultSet.isAfterLast()*

public boolean isAfterLast()
  throws |java.sql.SQLException|
         
Retrieves whether the cursor is after the last row in this ResultSet object. 



    Returns: true if the cursor is after the last row; false if the cursor is at any other position or the result set contains no rows 

*java.sql.ResultSet.isBeforeFirst()*

public boolean isBeforeFirst()
  throws |java.sql.SQLException|
         
Retrieves whether the cursor is before the first row in this ResultSet object. 



    Returns: true if the cursor is before the first row; false if the cursor is at any other position or the result set contains no rows 

*java.sql.ResultSet.isFirst()*

public boolean isFirst()
  throws |java.sql.SQLException|
         
Retrieves whether the cursor is on the first row of this ResultSet object. 



    Returns: true if the cursor is on the first row; false otherwise 

*java.sql.ResultSet.isLast()*

public boolean isLast()
  throws |java.sql.SQLException|
         
Retrieves whether the cursor is on the last row of this ResultSet object. Note: Calling the method isLast may be expensive because the JDBC driver might need to fetch ahead one 
row in order to determine whether the current row is the last row in the result set. 



    Returns: true if the cursor is on the last row; false otherwise 

*java.sql.ResultSet.last()*

public boolean last()
  throws |java.sql.SQLException|
         
Moves the cursor to the last row in this ResultSet object. 



    Returns: true if the cursor is on a valid row; false if there are no rows in the result set 

*java.sql.ResultSet.moveToCurrentRow()*

public void moveToCurrentRow()
  throws |java.sql.SQLException|
         
Moves the cursor to the remembered cursor position, usually the current row. This method has no effect if the cursor is not on the insert row. 



*java.sql.ResultSet.moveToInsertRow()*

public void moveToInsertRow()
  throws |java.sql.SQLException|
         
Moves the cursor to the insert row. The current cursor position is remembered while the cursor is positioned on the insert row. 

The insert row is a special row associated with an updatable result set. It is essentially a buffer where a new row may be constructed by calling the updater methods prior to 
inserting the row into the result set. 

Only the updater, getter, and insertRow methods may be called when the cursor is on the insert row. All of the columns in a result set must be given a value each time this method 
is called before calling insertRow. An updater method must be called before a getter method can be called on a column value. 



*java.sql.ResultSet.next()*

public boolean next()
  throws |java.sql.SQLException|
         
Moves the cursor down one row from its current position. A ResultSet cursor is initially positioned before the first row; the first call to the method next makes the first row the 
current row; the second call makes the second row the current row, and so on. 

If an input stream is open for the current row, a call to the method next will implicitly close it. A ResultSet object's warning chain is cleared when a new row is read. 



    Returns: true if the new current row is valid; false if there are no more rows 

*java.sql.ResultSet.previous()*

public boolean previous()
  throws |java.sql.SQLException|
         
Moves the cursor to the previous row in this ResultSet object. 



    Returns: true if the cursor is on a valid row; false if it is off the result set 

*java.sql.ResultSet.refreshRow()*

public void refreshRow()
  throws |java.sql.SQLException|
         
Refreshes the current row with its most recent value in the database. This method cannot be called when the cursor is on the insert row. 

The refreshRow method provides a way for an application to explicitly tell the JDBC driver to refetch a row(s) from the database. An application may want to call refreshRow when 
caching or prefetching is being done by the JDBC driver to fetch the latest value of a row from the database. The JDBC driver may actually refresh multiple rows at once if the 
fetch size is greater than one. 

All values are refetched subject to the transaction isolation level and cursor sensitivity. If refreshRow is called after calling an updater method, but before calling the method 
updateRow, then the updates made to the row are lost. Calling the method refreshRow frequently will likely slow performance. 



*java.sql.ResultSet.relative(int)*

public boolean relative(int rows)
  throws |java.sql.SQLException|
         
Moves the cursor a relative number of rows, either positive or negative. Attempting to move beyond the first/last row in the result set positions the cursor before/after the the 
first/last row. Calling relative(0) is valid, but does not change the cursor position. 

Note: Calling the method relative(1) is identical to calling the method next() and calling the method relative(-1) is identical to calling the method previous(). 


    rows - an int specifying the number of rows to move from the current row; a positive number moves the cursor forward; a negative number moves the cursor backward 

    Returns: true if the cursor is on a row; false otherwise 

*java.sql.ResultSet.rowDeleted()*

public boolean rowDeleted()
  throws |java.sql.SQLException|
         
Retrieves whether a row has been deleted. A deleted row may leave a visible "hole" in a result set. This method can be used to detect holes in a result set. The value returned 
depends on whether or not this ResultSet object can detect deletions. 



    Returns: true if a row was deleted and deletions are detected; false otherwise 

*java.sql.ResultSet.rowInserted()*

public boolean rowInserted()
  throws |java.sql.SQLException|
         
Retrieves whether the current row has had an insertion. The value returned depends on whether or not this ResultSet object can detect visible inserts. 



    Returns: true if a row has had an insertion and insertions are detected; false otherwise 

*java.sql.ResultSet.rowUpdated()*

public boolean rowUpdated()
  throws |java.sql.SQLException|
         
Retrieves whether the current row has been updated. The value returned depends on whether or not the result set can detect updates. 



    Returns: true if both (1) the row has been visibly updated by the owner or another and (2) updates are detected 

*java.sql.ResultSet.setFetchDirection(int)*

public void setFetchDirection(int direction)
  throws |java.sql.SQLException|
         
Gives a hint as to the direction in which the rows in this ResultSet object will be processed. The initial value is determined by the Statement object that produced this ResultSet 
object. The fetch direction may be changed at any time. 


    direction - an int specifying the suggested fetch direction; one of ResultSet.FETCH_FORWARD, ResultSet.FETCH_REVERSE, or ResultSet.FETCH_UNKNOWN 

*java.sql.ResultSet.setFetchSize(int)*

public void setFetchSize(int rows)
  throws |java.sql.SQLException|
         
Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for this ResultSet object. If the fetch size specified is 
zero, the JDBC driver ignores the value and is free to make its own best guess as to what the fetch size should be. The default value is set by the Statement object that created 
the result set. The fetch size may be changed at any time. 


    rows - the number of rows to fetch 

*java.sql.ResultSet.updateArray(int,Array)*

public void updateArray(
  int columnIndex,
  java.sql.Array x)
  throws |java.sql.SQLException|
         
Updates the designated column with a java.sql.Array value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateArray(String,Array)*

public void updateArray(
  java.lang.String columnName,
  java.sql.Array x)
  throws |java.sql.SQLException|
         
Updates the designated column with a java.sql.Array value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateAsciiStream(int,InputStream,int)*

public void updateAsciiStream(
  int columnIndex,
  java.io.InputStream x,
  int length)
  throws |java.sql.SQLException|
         
Updates the designated column with an ascii stream value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 
    length - the length of the stream 

*java.sql.ResultSet.updateAsciiStream(String,InputStream,int)*

public void updateAsciiStream(
  java.lang.String columnName,
  java.io.InputStream x,
  int length)
  throws |java.sql.SQLException|
         
Updates the designated column with an ascii stream value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 
    length - the length of the stream 

*java.sql.ResultSet.updateBigDecimal(int,BigDecimal)*

public void updateBigDecimal(
  int columnIndex,
  java.math.BigDecimal x)
  throws |java.sql.SQLException|
         
Updates the designated column with a java.math.BigDecimal value. The updater methods are used to update column values in the current row or the insert row. The updater methods do 
not update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateBigDecimal(String,BigDecimal)*

public void updateBigDecimal(
  java.lang.String columnName,
  java.math.BigDecimal x)
  throws |java.sql.SQLException|
         
Updates the designated column with a java.sql.BigDecimal value. The updater methods are used to update column values in the current row or the insert row. The updater methods do 
not update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateBinaryStream(int,InputStream,int)*

public void updateBinaryStream(
  int columnIndex,
  java.io.InputStream x,
  int length)
  throws |java.sql.SQLException|
         
Updates the designated column with a binary stream value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 
    length - the length of the stream 

*java.sql.ResultSet.updateBinaryStream(String,InputStream,int)*

public void updateBinaryStream(
  java.lang.String columnName,
  java.io.InputStream x,
  int length)
  throws |java.sql.SQLException|
         
Updates the designated column with a binary stream value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 
    length - the length of the stream 

*java.sql.ResultSet.updateBlob(int,Blob)*

public void updateBlob(
  int columnIndex,
  java.sql.Blob x)
  throws |java.sql.SQLException|
         
Updates the designated column with a java.sql.Blob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateBlob(String,Blob)*

public void updateBlob(
  java.lang.String columnName,
  java.sql.Blob x)
  throws |java.sql.SQLException|
         
Updates the designated column with a java.sql.Blob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateBoolean(int,boolean)*

public void updateBoolean(
  int columnIndex,
  boolean x)
  throws |java.sql.SQLException|
         
Updates the designated column with a boolean value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update 
the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateBoolean(String,boolean)*

public void updateBoolean(
  java.lang.String columnName,
  boolean x)
  throws |java.sql.SQLException|
         
Updates the designated column with a boolean value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update 
the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateByte(int,byte)*

public void updateByte(
  int columnIndex,
  byte x)
  throws |java.sql.SQLException|
         
Updates the designated column with a byte value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the 
underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateByte(String,byte)*

public void updateByte(
  java.lang.String columnName,
  byte x)
  throws |java.sql.SQLException|
         
Updates the designated column with a byte value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the 
underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateBytes(int,byte[])*

public void updateBytes(
  int columnIndex,
  byte[] x)
  throws |java.sql.SQLException|
         
Updates the designated column with a byte array value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update 
the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateBytes(String,byte[])*

public void updateBytes(
  java.lang.String columnName,
  byte[] x)
  throws |java.sql.SQLException|
         
Updates the designated column with a byte array value. 

The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or 
insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateCharacterStream(int,Reader,int)*

public void updateCharacterStream(
  int columnIndex,
  java.io.Reader x,
  int length)
  throws |java.sql.SQLException|
         
Updates the designated column with a character stream value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 
    length - the length of the stream 

*java.sql.ResultSet.updateCharacterStream(String,Reader,int)*

public void updateCharacterStream(
  java.lang.String columnName,
  java.io.Reader reader,
  int length)
  throws |java.sql.SQLException|
         
Updates the designated column with a character stream value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    reader - the java.io.Reader object containing the new column value 
    length - the length of the stream 

*java.sql.ResultSet.updateClob(int,Clob)*

public void updateClob(
  int columnIndex,
  java.sql.Clob x)
  throws |java.sql.SQLException|
         
Updates the designated column with a java.sql.Clob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateClob(String,Clob)*

public void updateClob(
  java.lang.String columnName,
  java.sql.Clob x)
  throws |java.sql.SQLException|
         
Updates the designated column with a java.sql.Clob value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateDate(int,Date)*

public void updateDate(
  int columnIndex,
  java.sql.Date x)
  throws |java.sql.SQLException|
         
Updates the designated column with a java.sql.Date value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateDate(String,Date)*

public void updateDate(
  java.lang.String columnName,
  java.sql.Date x)
  throws |java.sql.SQLException|
         
Updates the designated column with a java.sql.Date value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateDouble(int,double)*

public void updateDouble(
  int columnIndex,
  double x)
  throws |java.sql.SQLException|
         
Updates the designated column with a double value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the 
underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateDouble(String,double)*

public void updateDouble(
  java.lang.String columnName,
  double x)
  throws |java.sql.SQLException|
         
Updates the designated column with a double value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the 
underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateFloat(int,float)*

public void updateFloat(
  int columnIndex,
  float x)
  throws |java.sql.SQLException|
         
Updates the designated column with a float value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the 
underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateFloat(String,float)*

public void updateFloat(
  java.lang.String columnName,
  float x)
  throws |java.sql.SQLException|
         
Updates the designated column with a float value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the 
underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateInt(int,int)*

public void updateInt(
  int columnIndex,
  int x)
  throws |java.sql.SQLException|
         
Updates the designated column with an int value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the 
underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateInt(String,int)*

public void updateInt(
  java.lang.String columnName,
  int x)
  throws |java.sql.SQLException|
         
Updates the designated column with an int value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the 
underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateLong(int,long)*

public void updateLong(
  int columnIndex,
  long x)
  throws |java.sql.SQLException|
         
Updates the designated column with a long value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the 
underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateLong(String,long)*

public void updateLong(
  java.lang.String columnName,
  long x)
  throws |java.sql.SQLException|
         
Updates the designated column with a long value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the 
underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateNull(int)*

public void updateNull(int columnIndex)
  throws |java.sql.SQLException|
         
Gives a nullable column a null value. 

The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the underlying database; instead the updateRow or 
insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 

*java.sql.ResultSet.updateNull(String)*

public void updateNull(java.lang.String columnName)
  throws |java.sql.SQLException|
         
Updates the designated column with a null value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the 
underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 

*java.sql.ResultSet.updateObject(int,Object)*

public void updateObject(
  int columnIndex,
  java.lang.Object x)
  throws |java.sql.SQLException|
         
Updates the designated column with an Object value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update 
the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateObject(int,Object,int)*

public void updateObject(
  int columnIndex,
  java.lang.Object x,
  int scale)
  throws |java.sql.SQLException|
         
Updates the designated column with an Object value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update 
the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 
    scale - for java.sql.Types.DECIMA or java.sql.Types.NUMERIC types, this is the number of digits after the decimal point. For all other types this value will be ignored. 

*java.sql.ResultSet.updateObject(String,Object)*

public void updateObject(
  java.lang.String columnName,
  java.lang.Object x)
  throws |java.sql.SQLException|
         
Updates the designated column with an Object value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update 
the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateObject(String,Object,int)*

public void updateObject(
  java.lang.String columnName,
  java.lang.Object x,
  int scale)
  throws |java.sql.SQLException|
         
Updates the designated column with an Object value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update 
the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 
    scale - for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types, this is the number of digits after the decimal point. For all other types this value will be ignored. 

*java.sql.ResultSet.updateRef(int,Ref)*

public void updateRef(
  int columnIndex,
  java.sql.Ref x)
  throws |java.sql.SQLException|
         
Updates the designated column with a java.sql.Ref value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateRef(String,Ref)*

public void updateRef(
  java.lang.String columnName,
  java.sql.Ref x)
  throws |java.sql.SQLException|
         
Updates the designated column with a java.sql.Ref value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateRow()*

public void updateRow()
  throws |java.sql.SQLException|
         
Updates the underlying database with the new contents of the current row of this ResultSet object. This method cannot be called when the cursor is on the insert row. 



*java.sql.ResultSet.updateShort(int,short)*

public void updateShort(
  int columnIndex,
  short x)
  throws |java.sql.SQLException|
         
Updates the designated column with a short value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the 
underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateShort(String,short)*

public void updateShort(
  java.lang.String columnName,
  short x)
  throws |java.sql.SQLException|
         
Updates the designated column with a short value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the 
underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateString(int,String)*

public void updateString(
  int columnIndex,
  java.lang.String x)
  throws |java.sql.SQLException|
         
Updates the designated column with a String value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the 
underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateString(String,String)*

public void updateString(
  java.lang.String columnName,
  java.lang.String x)
  throws |java.sql.SQLException|
         
Updates the designated column with a String value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not update the 
underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateTime(int,Time)*

public void updateTime(
  int columnIndex,
  java.sql.Time x)
  throws |java.sql.SQLException|
         
Updates the designated column with a java.sql.Time value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateTime(String,Time)*

public void updateTime(
  java.lang.String columnName,
  java.sql.Time x)
  throws |java.sql.SQLException|
         
Updates the designated column with a java.sql.Time value. The updater methods are used to update column values in the current row or the insert row. The updater methods do not 
update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.updateTimestamp(int,Timestamp)*

public void updateTimestamp(
  int columnIndex,
  java.sql.Timestamp x)
  throws |java.sql.SQLException|
         
Updates the designated column with a java.sql.Timestamp value. The updater methods are used to update column values in the current row or the insert row. The updater methods do 
not update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnIndex - the first column is 1, the second is 2, ... 
    x - the new column value 

*java.sql.ResultSet.updateTimestamp(String,Timestamp)*

public void updateTimestamp(
  java.lang.String columnName,
  java.sql.Timestamp x)
  throws |java.sql.SQLException|
         
Updates the designated column with a java.sql.Timestamp value. The updater methods are used to update column values in the current row or the insert row. The updater methods do 
not update the underlying database; instead the updateRow or insertRow methods are called to update the database. 


    columnName - the name of the column 
    x - the new column value 

*java.sql.ResultSet.wasNull()*

public boolean wasNull()
  throws |java.sql.SQLException|
         
Reports whether the last column read had a value of SQL NULL. Note that you must first call one of the getter methods on a column to try to read its value and then call the method 
wasNull to see if the value read was SQL NULL. 



    Returns: true if the last column value read was SQL NULL and false otherwise 



*javax.print.attribute.DateTimeSyntax* *DateTimeSyntax* Class DateTimeSyntax is an abstract base class providing the common 
 implementation of all attributes whose value is a date

public abstract class DateTimeSyntax
  extends    |java.lang.Object|
  implements |java.io.Serializable|
             |java.lang.Cloneable|

|javax.print.attribute.DateTimeSyntax_Description|
|javax.print.attribute.DateTimeSyntax_Fields|
|javax.print.attribute.DateTimeSyntax_Constructors|
|javax.print.attribute.DateTimeSyntax_Methods|

====================================================================================================================================================================================

*javax.print.attribute.DateTimeSyntax_Constructors*
|javax.print.attribute.DateTimeSyntax(Date)|Construct a new date-time attribute with the given  java.util.Date  value.

*javax.print.attribute.DateTimeSyntax_Methods*
|javax.print.attribute.DateTimeSyntax.equals(Object)|Returns whether this date-time attribute is equivalent to the passed in   object.
|javax.print.attribute.DateTimeSyntax.getValue()|Returns this date-time attribute's java.util.Date  value.
|javax.print.attribute.DateTimeSyntax.hashCode()|Returns a hash code value for this date-time attribute.
|javax.print.attribute.DateTimeSyntax.toString()|Returns a string value corresponding to this date-time attribute.

*javax.print.attribute.DateTimeSyntax_Description*

Class DateTimeSyntax is an abstract base class providing the common implementation of all attributes whose value is a date and time. 

Under the hood, a date-time attribute is stored as a value of class java.util.Date}. You can get a date-time attribute's Date value by calling 
<CODE>getValue()</CODE>(|javax.print.attribute.DateTimeSyntax|) . A date-time attribute's Date value is established when it is constructed (see 
<CODE>DateTimeSyntax(Date)</CODE>(|javax.print.attribute.DateTimeSyntax|) ). Once constructed, a date-time attribute's value is immutable. 

To construct a date-time attribute from separate values of the year, month, day, hour, minute, and so on, use a java.util.Calendar object to construct a java.util.Date object, 
then use the java.util.Dateobject to construct the date-time attribute. To convert a date-time attribute to separate values of the year, month, day, hour, minute, and so on, 
create a java.util.Calendar object and set it to the java.util.Date from the date-time attribute. Class DateTimeSyntax stores its value in the form of a java.util.Date 

rather than a java.util.Calendar because it typically takes less memory to store and less time to compare a java.util.Date than a java.util.Calendar. 



*javax.print.attribute.DateTimeSyntax(Date)*

protected DateTimeSyntax(java.util.Date value)

Construct a new date-time attribute with the given java.util.Date value. 

    value - java.util.Date value. 

*javax.print.attribute.DateTimeSyntax.equals(Object)*

public boolean equals(java.lang.Object object)

Returns whether this date-time attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: 

object is not null. 

object is an instance of class DateTimeSyntax. 

This date-time attribute's java.util.Date value and object's java.util.Date value are equal. 


    object - Object to compare to. 

    Returns: True if object is equivalent to this date-time attribute, false otherwise. 

*javax.print.attribute.DateTimeSyntax.getValue()*

public |java.util.Date| getValue()

Returns this date-time attribute's java.util.Date value. 



    Returns: 

*javax.print.attribute.DateTimeSyntax.hashCode()*

public int hashCode()

Returns a hash code value for this date-time attribute. The hashcode is that of this attribute's java.util.Date value. 



*javax.print.attribute.DateTimeSyntax.toString()*

public |java.lang.String| toString()

Returns a string value corresponding to this date-time attribute. The string value is just this attribute's java.util.Date value converted to a string. 





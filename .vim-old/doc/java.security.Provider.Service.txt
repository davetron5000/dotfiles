*java.security.Provider.Service* *Provider.Service* The description of a security service.

public static class Provider.Service
  extends    |java.lang.Object|

|java.security.Provider.Service_Description|
|java.security.Provider.Service_Fields|
|java.security.Provider.Service_Constructors|
|java.security.Provider.Service_Methods|

====================================================================================================================================================================================

*java.security.Provider.Service_Constructors*
|java.security.Provider.Service(Provider,String,String,String,List<String>,Map<String,String>)|Construct a new service.

*java.security.Provider.Service_Methods*
|java.security.Provider.Service.getAlgorithm()|Return the name of the algorithm of this service.
|java.security.Provider.Service.getAttribute(String)|Return the value of the specified attribute or null if this  attribute is not set for this Service.
|java.security.Provider.Service.getClassName()|Return the name of the class implementing this service.
|java.security.Provider.Service.getProvider()|Return the Provider of this service.
|java.security.Provider.Service.getType()|Get the type of this service.
|java.security.Provider.Service.newInstance(Object)|Return a new instance of the implementation described by this  service.
|java.security.Provider.Service.supportsParameter(Object)|Test whether this Service can use the specified parameter.
|java.security.Provider.Service.toString()|Return a String representation of this service.

*java.security.Provider.Service_Description*

The description of a security service. It encapsulates the properties of a service and contains a factory method to obtain new implementation instances of this service. 

Each service has a provider that offers the service, a type, an algorithm name, and the name of the class that implements the service. Optionally, it also includes a list of 
alternate algorithm names for this service (aliases) and attributes, which are a map of (name, value) String pairs. 

This class defines the methods supportsParameter()(|java.security.Provider.Service|) and newInstance()(|java.security.Provider.Service|) which are used by the Java security 
framework when it searches for suitable services and instantes them. The valid arguments to those methods depend on the type of service. For the service types defined within J2SE, 
see the 

Java Cryptography Architecture API Specification and Reference for the valid values. Note that components outside of J2SE can define additional types of services and their 
behavior. 

Instances of this class are immutable. 



*java.security.Provider.Service(Provider,String,String,String,List<String>,Map<String,String>)*

public Provider.Service(
  java.security.Provider provider,
  java.lang.String type,
  java.lang.String algorithm,
  java.lang.String className,
  java.util.List<java.lang.String> aliases,
  java.util.Map<java.lang.String, java.lang.String> attributes)

Construct a new service. 

    provider - the provider that offers this service 
    type - the type of this service 
    algorithm - the algorithm name 
    className - the name of the class implementing this service 
    aliases - List of aliases or null if algorithm has no aliases 
    attributes - Map of attributes or null if this implementation has no attributes 

*java.security.Provider.Service.getAlgorithm()*

public final |java.lang.String| getAlgorithm()

Return the name of the algorithm of this service. For example, SHA-1. 



    Returns: the algorithm of this service 

*java.security.Provider.Service.getAttribute(String)*

public final |java.lang.String| getAttribute(java.lang.String name)

Return the value of the specified attribute or null if this attribute is not set for this Service. 


    name - the name of the requested attribute 

    Returns: the value of the specified attribute or null if the attribute is not present 

*java.security.Provider.Service.getClassName()*

public final |java.lang.String| getClassName()

Return the name of the class implementing this service. 



    Returns: the name of the class implementing this service 

*java.security.Provider.Service.getProvider()*

public final |java.security.Provider| getProvider()

Return the Provider of this service. 



    Returns: the Provider of this service 

*java.security.Provider.Service.getType()*

public final |java.lang.String| getType()

Get the type of this service. For example, MessageDigest. 



    Returns: the type of this service 

*java.security.Provider.Service.newInstance(Object)*

public |java.lang.Object| newInstance(java.lang.Object constructorParameter)
  throws |java.security.NoSuchAlgorithmException|
         
Return a new instance of the implementation described by this service. The security provider framework uses this method to construct implementations. Applications will typically 
not need to call it. 

The default implementation uses reflection to invoke the standard constructor for this type of service. Security providers can override this method to implement instantiation in a 
different way. For details and the values of constructorParameter that are valid for the various types of services see the 

Java Cryptography Architecture API Specification and Reference. 


    constructorParameter - the value to pass to the constructor, or null if this type of service does not use a constructorParameter. 

    Returns: a new implementation of this service 

*java.security.Provider.Service.supportsParameter(Object)*

public boolean supportsParameter(java.lang.Object parameter)

Test whether this Service can use the specified parameter. Returns false if this service cannot use the parameter. Returns true if this service can use the parameter, if a fast 
test is infeasible, or if the status is unknown. 

The security provider framework uses this method with some types of services to quickly exclude non-matching implementations for consideration. Applications will typically not 
need to call it. 

For details and the values of parameter that are valid for the various types of services see the top of this class and the 

Java Cryptography Architecture API Specification and Reference. Security providers can override it to implement their own test. 


    parameter - the parameter to test 

    Returns: false if this this service cannot use the specified parameter; true if it can possibly use the parameter 

*java.security.Provider.Service.toString()*

public |java.lang.String| toString()

Return a String representation of this service. 



    Returns: a String representation of this service. 



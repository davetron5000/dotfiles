*javax.sound.sampled.AudioSystem* *AudioSystem* The AudioSystem class acts as th

public class AudioSystem
  extends    |java.lang.Object|

|javax.sound.sampled.AudioSystem_Description|
|javax.sound.sampled.AudioSystem_Fields|
|javax.sound.sampled.AudioSystem_Constructors|
|javax.sound.sampled.AudioSystem_Methods|

================================================================================

*javax.sound.sampled.AudioSystem_Fields*
|int_javax.sound.sampled.AudioSystem.NOT_SPECIFIED|

*javax.sound.sampled.AudioSystem_Methods*
|javax.sound.sampled.AudioSystem.getAudioFileFormat(File)|Obtains the audio fil
|javax.sound.sampled.AudioSystem.getAudioFileFormat(InputStream)|Obtains the au
|javax.sound.sampled.AudioSystem.getAudioFileFormat(URL)|Obtains the audio file
|javax.sound.sampled.AudioSystem.getAudioFileTypes()|Obtains the file types for
|javax.sound.sampled.AudioSystem.getAudioFileTypes(AudioInputStream)|Obtains th
|javax.sound.sampled.AudioSystem.getAudioInputStream(AudioFormat.Encoding,AudioInputStream)|
|javax.sound.sampled.AudioSystem.getAudioInputStream(AudioFormat,AudioInputStream)|
|javax.sound.sampled.AudioSystem.getAudioInputStream(File)|Obtains an audio inp
|javax.sound.sampled.AudioSystem.getAudioInputStream(InputStream)|Obtains an au
|javax.sound.sampled.AudioSystem.getAudioInputStream(URL)|Obtains an audio inpu
|javax.sound.sampled.AudioSystem.getClip()|Obtains a clip that can be used for 
|javax.sound.sampled.AudioSystem.getClip(Mixer.Info)|Obtains a clip from the sp
|javax.sound.sampled.AudioSystem.getLine(Line.Info)|Obtains a line that matches
|javax.sound.sampled.AudioSystem.getMixer(Mixer.Info)|Obtains the requested aud
|javax.sound.sampled.AudioSystem.getMixerInfo()|Obtains an array of mixer info 
|javax.sound.sampled.AudioSystem.getSourceDataLine(AudioFormat)|Obtains a sourc
|javax.sound.sampled.AudioSystem.getSourceDataLine(AudioFormat,Mixer.Info)|Obta
|javax.sound.sampled.AudioSystem.getSourceLineInfo(Line.Info)|Obtains informati
|javax.sound.sampled.AudioSystem.getTargetDataLine(AudioFormat)|Obtains a targe
|javax.sound.sampled.AudioSystem.getTargetDataLine(AudioFormat,Mixer.Info)|Obta
|javax.sound.sampled.AudioSystem.getTargetEncodings(AudioFormat.Encoding)|Obtai
|javax.sound.sampled.AudioSystem.getTargetEncodings(AudioFormat)|Obtains the en
|javax.sound.sampled.AudioSystem.getTargetFormats(AudioFormat.Encoding,AudioFormat)|
|javax.sound.sampled.AudioSystem.getTargetLineInfo(Line.Info)|Obtains informati
|javax.sound.sampled.AudioSystem.isConversionSupported(AudioFormat.Encoding,AudioFormat)|
|javax.sound.sampled.AudioSystem.isConversionSupported(AudioFormat,AudioFormat)|
|javax.sound.sampled.AudioSystem.isFileTypeSupported(AudioFileFormat.Type)|Indi
|javax.sound.sampled.AudioSystem.isFileTypeSupported(AudioFileFormat.Type,AudioInputStream)|
|javax.sound.sampled.AudioSystem.isLineSupported(Line.Info)|Indicates whether t
|javax.sound.sampled.AudioSystem.write(AudioInputStream,AudioFileFormat.Type,File)|
|javax.sound.sampled.AudioSystem.write(AudioInputStream,AudioFileFormat.Type,OutputStream)|

*javax.sound.sampled.AudioSystem_Description*

The AudioSystem class acts as the entry point to the sampled-audio system 
resources. This class lets you query and access the mixers that are installed 
on the system. AudioSystem includes a number of methods for converting audio 
data between different formats, and for translating between audio files and 
streams. It also provides a method for obtaining a (|javax.sound.sampled.Line|) 
directly from the AudioSystem without dealing explicitly with mixers. 

Properties can be used to specify the default mixer for specific line types. 
Both system properties and a properties file are considered. In the Sun 
reference implementation, the properties file is lib/sound.properties in the 
JRE directory. If a property exists both as a system property and in the 
properties file, the system property takes precedence. If none is specified, a 
suitable default is chosen among the available devices. The syntax of the 
properties file is specified in Properties.load(|java.util.Properties|) . The 
following table lists the available property keys and which methods consider 
them: 



Property Key Interface Affected Method(s) 

javax.sound.sampled.Clip (|javax.sound.sampled.Clip|) 
(|javax.sound.sampled.AudioSystem|) , (|javax.sound.sampled.AudioSystem|) 

javax.sound.sampled.Port (|javax.sound.sampled.Port|) 
(|javax.sound.sampled.AudioSystem|) 

javax.sound.sampled.SourceDataLine (|javax.sound.sampled.SourceDataLine|) 
(|javax.sound.sampled.AudioSystem|) , (|javax.sound.sampled.AudioSystem|) 

javax.sound.sampled.TargetDataLine (|javax.sound.sampled.TargetDataLine|) 
(|javax.sound.sampled.AudioSystem|) , (|javax.sound.sampled.AudioSystem|) 



The property value consists of the provider class name and the mixer name, 
separated by the hash mark (#). The provider class name is the fully-qualified 
name of a concrete mixer provider(|javax.sound.sampled.spi.MixerProvider|) 
class. The mixer name is matched against the String returned by the getName 
method of Mixer.Info. Either the class name, or the mixer name may be omitted. 
If only the class name is specified, the trailing hash mark is optional. 

If the provider class is specified, and it can be successully retrieved from 
the installed providers, the list of Mixer.Info objects is retrieved from the 
provider. Otherwise, or when these mixers do not provide a subsequent match, 
the list is retrieved from (|javax.sound.sampled.AudioSystem|) to contain all 
available Mixer.Info objects. 

If a mixer name is specified, the resulting list of Mixer.Info objects is 
searched: the first one with a matching name, and whose Mixer provides the 
respective line interface, will be returned. If no matching Mixer.Info object 
is found, or the mixer name is not specified, the first mixer from the 
resulting list, which provides the respective line interface, will be returned. 

For example, the property javax.sound.sampled.Clip with a value 
com.sun.media.sound.MixerProvider#SunClip will have the following consequences 
when getLine is called requesting a Clip instance: if the class 
com.sun.media.sound.MixerProvider exists in the list of installed mixer 
providers, the first Clip from the first mixer with name SunClip will be 
returned. If it cannot be found, the first Clip from the first mixer of the 
specified provider will be returned, regardless of name. If there is none, the 
first Clip from the first Mixer with name SunClip in the list of all mixers (as 
returned by getMixerInfo) will be returned, or, if not found, the first Clip of 
the first Mixerthat can be found in the list of all mixers is returned. If that 
fails, too, an IllegalArgumentException is thrown. 


*int_javax.sound.sampled.AudioSystem.NOT_SPECIFIED*

The AudioSystem class acts as the entry point to the sampled-audio system 
resources. This class lets you query and access the mixers that are installed 
on the system. AudioSystem includes a number of methods for converting audio 
data between different formats, and for translating between audio files and 
streams. It also provides a method for obtaining a (|javax.sound.sampled.Line|) 
directly from the AudioSystem without dealing explicitly with mixers. 

Properties can be used to specify the default mixer for specific line types. 
Both system properties and a properties file are considered. In the Sun 
reference implementation, the properties file is lib/sound.properties in the 
JRE directory. If a property exists both as a system property and in the 
properties file, the system property takes precedence. If none is specified, a 
suitable default is chosen among the available devices. The syntax of the 
properties file is specified in Properties.load(|java.util.Properties|) . The 
following table lists the available property keys and which methods consider 
them: 



Property Key Interface Affected Method(s) 

javax.sound.sampled.Clip (|javax.sound.sampled.Clip|) 
(|javax.sound.sampled.AudioSystem|) , (|javax.sound.sampled.AudioSystem|) 

javax.sound.sampled.Port (|javax.sound.sampled.Port|) 
(|javax.sound.sampled.AudioSystem|) 

javax.sound.sampled.SourceDataLine (|javax.sound.sampled.SourceDataLine|) 
(|javax.sound.sampled.AudioSystem|) , (|javax.sound.sampled.AudioSystem|) 

javax.sound.sampled.TargetDataLine (|javax.sound.sampled.TargetDataLine|) 
(|javax.sound.sampled.AudioSystem|) , (|javax.sound.sampled.AudioSystem|) 



The property value consists of the provider class name and the mixer name, 
separated by the hash mark (#). The provider class name is the fully-qualified 
name of a concrete mixer provider(|javax.sound.sampled.spi.MixerProvider|) 
class. The mixer name is matched against the String returned by the getName 
method of Mixer.Info. Either the class name, or the mixer name may be omitted. 
If only the class name is specified, the trailing hash mark is optional. 

If the provider class is specified, and it can be successully retrieved from 
the installed providers, the list of Mixer.Info objects is retrieved from the 
provider. Otherwise, or when these mixers do not provide a subsequent match, 
the list is retrieved from (|javax.sound.sampled.AudioSystem|) to contain all 
available Mixer.Info objects. 

If a mixer name is specified, the resulting list of Mixer.Info objects is 
searched: the first one with a matching name, and whose Mixer provides the 
respective line interface, will be returned. If no matching Mixer.Info object 
is found, or the mixer name is not specified, the first mixer from the 
resulting list, which provides the respective line interface, will be returned. 

For example, the property javax.sound.sampled.Clip with a value 
com.sun.media.sound.MixerProvider#SunClip will have the following consequences 
when getLine is called requesting a Clip instance: if the class 
com.sun.media.sound.MixerProvider exists in the list of installed mixer 
providers, the first Clip from the first mixer with name SunClip will be 
returned. If it cannot be found, the first Clip from the first mixer of the 
specified provider will be returned, regardless of name. If there is none, the 
first Clip from the first Mixer with name SunClip in the list of all mixers (as 
returned by getMixerInfo) will be returned, or, if not found, the first Clip of 
the first Mixerthat can be found in the list of all mixers is returned. If that 
fails, too, an IllegalArgumentException is thrown. 



*javax.sound.sampled.AudioSystem.getAudioFileFormat(File)*

public static |javax.sound.sampled.AudioFileFormat| getAudioFileFormat(java.io.File file)
  throws |java.io.IOException|
         |javax.sound.sampled.UnsupportedAudioFileException|
         
Obtains the audio file format of the specified File. The File must point to 
valid audio file data. 

    file - the File from which file format information should be extracted 

    Returns: an AudioFileFormat object describing the audio file format 
*javax.sound.sampled.AudioSystem.getAudioFileFormat(InputStream)*

public static |javax.sound.sampled.AudioFileFormat| getAudioFileFormat(java.io.InputStream stream)
  throws |java.io.IOException|
         |javax.sound.sampled.UnsupportedAudioFileException|
         
Obtains the audio file format of the provided input stream. The stream must 
point to valid audio file data. The implementation of this method may require 
multiple parsers to examine the stream to determine whether they support it. 
These parsers must be able to mark the stream, read enough data to determine 
whether they support the stream, and, if not, reset the stream's read pointer 
to its original position. If the input stream does not support these 
operations, this method may fail with an IOException. 

    stream - the input stream from which file format information should be extracted 

    Returns: an AudioFileFormat object describing the stream's audio file format 
*javax.sound.sampled.AudioSystem.getAudioFileFormat(URL)*

public static |javax.sound.sampled.AudioFileFormat| getAudioFileFormat(java.net.URL url)
  throws |java.io.IOException|
         |javax.sound.sampled.UnsupportedAudioFileException|
         
Obtains the audio file format of the specified URL. The URL must point to valid 
audio file data. 

    url - the URL from which file format information should be extracted 

    Returns: an AudioFileFormat object describing the audio file format 
*javax.sound.sampled.AudioSystem.getAudioFileTypes()*

public static |javax.sound.sampled.AudioFileFormat.Type| getAudioFileTypes()

Obtains the file types for which file writing support is provided by the 
system. 


    Returns: array of unique file types. If no file types are supported, an array of length 
             0 is returned. 
*javax.sound.sampled.AudioSystem.getAudioFileTypes(AudioInputStream)*

public static |javax.sound.sampled.AudioFileFormat.Type| getAudioFileTypes(javax.sound.sampled.AudioInputStream stream)

Obtains the file types that the system can write from the audio input stream 
specified. 

    stream - the audio input stream for which audio file type support is queried 

    Returns: array of file types. If no file types are supported, an array of length 0 is 
             returned. 
*javax.sound.sampled.AudioSystem.getAudioInputStream(AudioFormat.Encoding,AudioInputStream)*

public static |javax.sound.sampled.AudioInputStream| getAudioInputStream(
  javax.sound.sampled.AudioFormat.Encoding targetEncoding,
  javax.sound.sampled.AudioInputStream sourceStream)

Obtains an audio input stream of the indicated encoding, by converting the 
provided audio input stream. 

    targetEncoding - the desired encoding after conversion 
    sourceStream - the stream to be converted 

    Returns: an audio input stream of the indicated encoding 
*javax.sound.sampled.AudioSystem.getAudioInputStream(AudioFormat,AudioInputStream)*

public static |javax.sound.sampled.AudioInputStream| getAudioInputStream(
  javax.sound.sampled.AudioFormat targetFormat,
  javax.sound.sampled.AudioInputStream sourceStream)

Obtains an audio input stream of the indicated format, by converting the 
provided audio input stream. 

    targetFormat - the desired audio format after conversion 
    sourceStream - the stream to be converted 

    Returns: an audio input stream of the indicated format 
*javax.sound.sampled.AudioSystem.getAudioInputStream(File)*

public static |javax.sound.sampled.AudioInputStream| getAudioInputStream(java.io.File file)
  throws |java.io.IOException|
         |javax.sound.sampled.UnsupportedAudioFileException|
         
Obtains an audio input stream from the provided File. The File must point to 
valid audio file data. 

    file - the File for which the AudioInputStream should be constructed 

    Returns: an AudioInputStream object based on the audio file data pointed to by the File 
*javax.sound.sampled.AudioSystem.getAudioInputStream(InputStream)*

public static |javax.sound.sampled.AudioInputStream| getAudioInputStream(java.io.InputStream stream)
  throws |java.io.IOException|
         |javax.sound.sampled.UnsupportedAudioFileException|
         
Obtains an audio input stream from the provided input stream. The stream must 
point to valid audio file data. The implementation of this method may require 
multiple parsers to examine the stream to determine whether they support it. 
These parsers must be able to mark the stream, read enough data to determine 
whether they support the stream, and, if not, reset the stream's read pointer 
to its original position. If the input stream does not support these operation, 
this method may fail with an IOException. 

    stream - the input stream from which the AudioInputStream should be constructed 

    Returns: an AudioInputStream object based on the audio file data contained in the input 
             stream. 
*javax.sound.sampled.AudioSystem.getAudioInputStream(URL)*

public static |javax.sound.sampled.AudioInputStream| getAudioInputStream(java.net.URL url)
  throws |java.io.IOException|
         |javax.sound.sampled.UnsupportedAudioFileException|
         
Obtains an audio input stream from the URL provided. The URL must point to 
valid audio file data. 

    url - the URL for which the AudioInputStream should be constructed 

    Returns: an AudioInputStream object based on the audio file data pointed to by the URL 
*javax.sound.sampled.AudioSystem.getClip()*

public static |javax.sound.sampled.Clip| getClip()
  throws |javax.sound.sampled.LineUnavailableException|
         
Obtains a clip that can be used for playing back an audio file or an audio 
stream. The returned clip will be provided by the default system mixer, or, if 
not possible, by any other mixer installed in the system that supports a Clip 
object. 

The returned clip must be opened with the open(AudioFormat) or 
open(AudioInputStream) method. 

This is a high-level method that uses getMixer and internally. 

If the system property javax.sound.sampled.Clip is defined or it is defined in 
the file sound.properties, it is used to retrieve the default clip. For 
details, refer to the class description(|javax.sound.sampled.AudioSystem|) . 


    Returns: the desired clip object 
*javax.sound.sampled.AudioSystem.getClip(Mixer.Info)*

public static |javax.sound.sampled.Clip| getClip(javax.sound.sampled.Mixer.Info mixerInfo)
  throws |javax.sound.sampled.LineUnavailableException|
         
Obtains a clip from the specified mixer that can be used for playing back an 
audio file or an audio stream. 

The returned clip must be opened with the open(AudioFormat) or 
open(AudioInputStream) method. 

This is a high-level method that uses getMixer and internally. 

    mixerInfo - a Mixer.Info object representing the desired mixer, or null for the system 
       default mixer 

    Returns: a clip object from the specified mixer 
*javax.sound.sampled.AudioSystem.getLine(Line.Info)*

public static |javax.sound.sampled.Line| getLine(javax.sound.sampled.Line.Info info)
  throws |javax.sound.sampled.LineUnavailableException|
         
Obtains a line that matches the description in the specified Line.Info object. 

If a DataLine is requested, and info is an instance of DataLine.Info specifying 
at least one fully qualified audio format, the last one will be used as the 
default format of the returned DataLine. 

If system properties javax.sound.sampled.Clip, javax.sound.sampled.Port, 
javax.sound.sampled.SourceDataLine and javax.sound.sampled.TargetDataLine are 
defined or they are defined in the file sound.properties, they are used to 
retrieve default lines. For details, refer to the class 
description(|javax.sound.sampled.AudioSystem|) . 

If the respective property is not set, or the mixer requested in the property 
is not installed or does not provide the requested line, all installed mixers 
are queried for the requested line type. A Line will be returned from the first 
mixer providing the requested line type. 

    info - a Line.Info object describing the desired kind of line 

    Returns: a line of the requested kind 
*javax.sound.sampled.AudioSystem.getMixer(Mixer.Info)*

public static |javax.sound.sampled.Mixer| getMixer(javax.sound.sampled.Mixer.Info info)

Obtains the requested audio mixer. 

    info - a Mixer.Info object representing the desired mixer, or null for the system 
       default mixer 

    Returns: the requested mixer 
*javax.sound.sampled.AudioSystem.getMixerInfo()*

public static |javax.sound.sampled.Mixer.Info| getMixerInfo()

Obtains an array of mixer info objects that represents the set of audio mixers 
that are currently installed on the system. 


    Returns: an array of info objects for the currently installed mixers. If no mixers are 
             available on the system, an array of length 0 is returned. 
*javax.sound.sampled.AudioSystem.getSourceDataLine(AudioFormat)*

public static |javax.sound.sampled.SourceDataLine| getSourceDataLine(javax.sound.sampled.AudioFormat format)
  throws |javax.sound.sampled.LineUnavailableException|
         
Obtains a source data line that can be used for playing back audio data in the 
format specified by the AudioFormat object. The returned line will be provided 
by the default system mixer, or, if not possible, by any other mixer installed 
in the system that supports a matching SourceDataLine object. 

The returned line should be opened with the open(AudioFormat) or 
open(AudioFormat, int) method. 

This is a high-level method that uses getMixer and internally. 

The returned SourceDataLine's default audio format will be initialized with 
format. 

If the system property javax.sound.sampled.SourceDataLine is defined or it is 
defined in the file sound.properties, it is used to retrieve the default source 
data line. For details, refer to the class 
description(|javax.sound.sampled.AudioSystem|) . 

    format - an AudioFormat object specifying the supported audio format of the returned 
       line, or null for any audio format 

    Returns: the desired SourceDataLine object 
*javax.sound.sampled.AudioSystem.getSourceDataLine(AudioFormat,Mixer.Info)*

public static |javax.sound.sampled.SourceDataLine| getSourceDataLine(
  javax.sound.sampled.AudioFormat format,
  javax.sound.sampled.Mixer.Info mixerinfo)
  throws |javax.sound.sampled.LineUnavailableException|
         
Obtains a source data line that can be used for playing back audio data in the 
format specified by the AudioFormat object, provided by the mixer specified by 
the Mixer.Info object. 

The returned line should be opened with the open(AudioFormat) or 
open(AudioFormat, int) method. 

This is a high-level method that uses getMixer and internally. 

The returned SourceDataLine's default audio format will be initialized with 
format. 

    format - an AudioFormat object specifying the supported audio format of the returned 
       line, or null for any audio format 
    mixerinfo - a Mixer.Info object representing the desired mixer, or null for the system 
       default mixer 

    Returns: the desired SourceDataLine object 
*javax.sound.sampled.AudioSystem.getSourceLineInfo(Line.Info)*

public static |javax.sound.sampled.Line.Info| getSourceLineInfo(javax.sound.sampled.Line.Info info)

Obtains information about all source lines of a particular type that are 
supported by the installed mixers. 

    info - a Line.Info object that specifies the kind of lines about which information is 
       requested 

    Returns: an array of Line.Info objects describing source lines matching the type 
             requested. If no matching source lines are supported, an array of 
             length 0 is returned. 
*javax.sound.sampled.AudioSystem.getTargetDataLine(AudioFormat)*

public static |javax.sound.sampled.TargetDataLine| getTargetDataLine(javax.sound.sampled.AudioFormat format)
  throws |javax.sound.sampled.LineUnavailableException|
         
Obtains a target data line that can be used for recording audio data in the 
format specified by the AudioFormat object. The returned line will be provided 
by the default system mixer, or, if not possible, by any other mixer installed 
in the system that supports a matching TargetDataLine object. 

The returned line should be opened with the open(AudioFormat) or 
open(AudioFormat, int) method. 

This is a high-level method that uses getMixer and internally. 

The returned TargetDataLine's default audio format will be initialized with 
format. 

    format - an AudioFormat object specifying the supported audio format of the returned 
       line, or null for any audio format 

    Returns: the desired TargetDataLine object 
*javax.sound.sampled.AudioSystem.getTargetDataLine(AudioFormat,Mixer.Info)*

public static |javax.sound.sampled.TargetDataLine| getTargetDataLine(
  javax.sound.sampled.AudioFormat format,
  javax.sound.sampled.Mixer.Info mixerinfo)
  throws |javax.sound.sampled.LineUnavailableException|
         
Obtains a target data line that can be used for recording audio data in the 
format specified by the AudioFormat object, provided by the mixer specified by 
the Mixer.Info object. 

The returned line should be opened with the open(AudioFormat) or 
open(AudioFormat, int) method. 

This is a high-level method that uses getMixer and internally. 

The returned TargetDataLine's default audio format will be initialized with 
format. 

If the system property javax.sound.sampled.TargetDataLine is defined or it is 
defined in the file sound.properties, it is used to retrieve the default target 
data line. For details, refer to the class 
description(|javax.sound.sampled.AudioSystem|) . 

    format - an AudioFormat object specifying the supported audio format of the returned 
       line, or null for any audio format 
    mixerinfo - a Mixer.Info object representing the desired mixer, or null for the system 
       default mixer 

    Returns: the desired TargetDataLine object 
*javax.sound.sampled.AudioSystem.getTargetEncodings(AudioFormat.Encoding)*

public static |javax.sound.sampled.AudioFormat.Encoding| getTargetEncodings(javax.sound.sampled.AudioFormat.Encoding sourceEncoding)

Obtains the encodings that the system can obtain from an audio input stream 
with the specified encoding using the set of installed format converters. 

    sourceEncoding - the encoding for which conversion support is queried 

    Returns: array of encodings. If sourceEncodingis not supported, an array of length 0 is 
             returned. Otherwise, the array will have a length of at least 1, 
             representing sourceEncoding (no conversion). 
*javax.sound.sampled.AudioSystem.getTargetEncodings(AudioFormat)*

public static |javax.sound.sampled.AudioFormat.Encoding| getTargetEncodings(javax.sound.sampled.AudioFormat sourceFormat)

Obtains the encodings that the system can obtain from an audio input stream 
with the specified format using the set of installed format converters. 

    sourceFormat - the audio format for which conversion is queried 

    Returns: array of encodings. If sourceFormatis not supported, an array of length 0 is 
             returned. Otherwise, the array will have a length of at least 1, 
             representing the encoding of sourceFormat (no conversion). 
*javax.sound.sampled.AudioSystem.getTargetFormats(AudioFormat.Encoding,AudioFormat)*

public static |javax.sound.sampled.AudioFormat| getTargetFormats(
  javax.sound.sampled.AudioFormat.Encoding targetEncoding,
  javax.sound.sampled.AudioFormat sourceFormat)

Obtains the formats that have a particular encoding and that the system can 
obtain from a stream of the specified format using the set of installed format 
converters. 

    targetEncoding - the desired encoding after conversion 
    sourceFormat - the audio format before conversion 

    Returns: array of formats. If no formats of the specified encoding are supported, an 
             array of length 0 is returned. 
*javax.sound.sampled.AudioSystem.getTargetLineInfo(Line.Info)*

public static |javax.sound.sampled.Line.Info| getTargetLineInfo(javax.sound.sampled.Line.Info info)

Obtains information about all target lines of a particular type that are 
supported by the installed mixers. 

    info - a Line.Info object that specifies the kind of lines about which information is 
       requested 

    Returns: an array of Line.Info objects describing target lines matching the type 
             requested. If no matching target lines are supported, an array of 
             length 0 is returned. 
*javax.sound.sampled.AudioSystem.isConversionSupported(AudioFormat.Encoding,AudioFormat)*

public static boolean isConversionSupported(
  javax.sound.sampled.AudioFormat.Encoding targetEncoding,
  javax.sound.sampled.AudioFormat sourceFormat)

Indicates whether an audio input stream of the specified encoding can be 
obtained from an audio input stream that has the specified format. 

    targetEncoding - the desired encoding after conversion 
    sourceFormat - the audio format before conversion 

    Returns: true if the conversion is supported, otherwise false 
*javax.sound.sampled.AudioSystem.isConversionSupported(AudioFormat,AudioFormat)*

public static boolean isConversionSupported(
  javax.sound.sampled.AudioFormat targetFormat,
  javax.sound.sampled.AudioFormat sourceFormat)

Indicates whether an audio input stream of a specified format can be obtained 
from an audio input stream of another specified format. 

    targetFormat - the desired audio format after conversion 
    sourceFormat - the audio format before conversion 

    Returns: true if the conversion is supported, otherwise false 
*javax.sound.sampled.AudioSystem.isFileTypeSupported(AudioFileFormat.Type)*

public static boolean isFileTypeSupported(javax.sound.sampled.AudioFileFormat.Type fileType)

Indicates whether file writing support for the specified file type is provided 
by the system. 

    fileType - the file type for which write capabilities are queried 

    Returns: true if the file type is supported, otherwise false 
*javax.sound.sampled.AudioSystem.isFileTypeSupported(AudioFileFormat.Type,AudioInputStream)*

public static boolean isFileTypeSupported(
  javax.sound.sampled.AudioFileFormat.Type fileType,
  javax.sound.sampled.AudioInputStream stream)

Indicates whether an audio file of the specified file type can be written from 
the indicated audio input stream. 

    fileType - the file type for which write capabilities are queried 
    stream - the stream for which file-writing support is queried 

    Returns: true if the file type is supported for this audio input stream, otherwise false 
*javax.sound.sampled.AudioSystem.isLineSupported(Line.Info)*

public static boolean isLineSupported(javax.sound.sampled.Line.Info info)

Indicates whether the system supports any lines that match the specified 
Line.Info object. A line is supported if any installed mixer supports it. 

    info - a Line.Info object describing the line for which support is queried 

    Returns: true if at least one matching line is supported, otherwise false 
*javax.sound.sampled.AudioSystem.write(AudioInputStream,AudioFileFormat.Type,File)*

public static int write(
  javax.sound.sampled.AudioInputStream stream,
  javax.sound.sampled.AudioFileFormat.Type fileType,
  java.io.File out)
  throws |java.io.IOException|
         
Writes a stream of bytes representing an audio file of the specified file type 
to the external file provided. 

    stream - the audio input stream containing audio data to be written to the file 
    fileType - the kind of audio file to write 
    out - the external file to which the file data should be written 

    Returns: the number of bytes written to the file 
*javax.sound.sampled.AudioSystem.write(AudioInputStream,AudioFileFormat.Type,OutputStream)*

public static int write(
  javax.sound.sampled.AudioInputStream stream,
  javax.sound.sampled.AudioFileFormat.Type fileType,
  java.io.OutputStream out)
  throws |java.io.IOException|
         
Writes a stream of bytes representing an audio file of the specified file type 
to the output stream provided. Some file types require that the length be 
written into the file header; such files cannot be written from start to finish 
unless the length is known in advance. An attempt to write a file of such a 
type will fail with an IOException if the length in the audio file type is 
AudioSystem.NOT_SPECIFIED. 

    stream - the audio input stream containing audio data to be written to the file 
    fileType - the kind of audio file to write 
    out - the stream to which the file data should be written 

    Returns: the number of bytes written to the output stream 


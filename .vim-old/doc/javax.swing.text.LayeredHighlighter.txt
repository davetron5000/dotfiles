*javax.swing.text.LayeredHighlighter* *LayeredHighlighter* 

public abstract class LayeredHighlighter
  extends    |java.lang.Object|
  implements |javax.swing.text.Highlighter|

|javax.swing.text.LayeredHighlighter_Description|
|javax.swing.text.LayeredHighlighter_Fields|
|javax.swing.text.LayeredHighlighter_Constructors|
|javax.swing.text.LayeredHighlighter_Methods|

====================================================================================================================================================================================

*javax.swing.text.LayeredHighlighter_Constructors*
|javax.swing.text.LayeredHighlighter()|

*javax.swing.text.LayeredHighlighter_Methods*
|javax.swing.text.LayeredHighlighter.paintLayeredHighlights(Graphics,int,int,Shape,JTextComponent,View)|When leaf Views (such as LabelView) are rendering they should  call into th

*javax.swing.text.LayeredHighlighter_Description*





*javax.swing.text.LayeredHighlighter()*

public LayeredHighlighter()




*javax.swing.text.LayeredHighlighter.paintLayeredHighlights(Graphics,int,int,Shape,JTextComponent,View)*

public abstract void paintLayeredHighlights(
  java.awt.Graphics g,
  int p0,
  int p1,
  java.awt.Shape viewBounds,
  javax.swing.text.JTextComponent editor,
  javax.swing.text.View view)

When leaf Views (such as LabelView) are rendering they should call into this method. If a highlight is in the given region it will be drawn immediately. 


    g - Graphics used to draw 
    p0 - starting offset of view 
    p1 - ending offset of view 
    viewBounds - Bounds of View 
    editor - JTextComponent 
    view - View instance being rendered 



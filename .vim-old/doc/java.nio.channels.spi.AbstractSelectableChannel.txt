*java.nio.channels.spi.AbstractSelectableChannel* *AbstractSelectableChannel* Base implementation class for selectable channels.

public abstract class AbstractSelectableChannel
  extends    |java.nio.channels.SelectableChannel|

|java.nio.channels.spi.AbstractSelectableChannel_Description|
|java.nio.channels.spi.AbstractSelectableChannel_Fields|
|java.nio.channels.spi.AbstractSelectableChannel_Constructors|
|java.nio.channels.spi.AbstractSelectableChannel_Methods|

====================================================================================================================================================================================

*java.nio.channels.spi.AbstractSelectableChannel_Constructors*
|java.nio.channels.spi.AbstractSelectableChannel(SelectorProvider)|Initializes a new instance of this class.

*java.nio.channels.spi.AbstractSelectableChannel_Methods*
|java.nio.channels.spi.AbstractSelectableChannel.blockingLock()|
|java.nio.channels.spi.AbstractSelectableChannel.configureBlocking(boolean)|Adjusts this channel's blocking mode.
|java.nio.channels.spi.AbstractSelectableChannel.implCloseChannel()|Closes this channel.
|java.nio.channels.spi.AbstractSelectableChannel.implCloseSelectableChannel()|Closes this selectable channel.
|java.nio.channels.spi.AbstractSelectableChannel.implConfigureBlocking(boolean)|Adjusts this channel's blocking mode.
|java.nio.channels.spi.AbstractSelectableChannel.isBlocking()|
|java.nio.channels.spi.AbstractSelectableChannel.isRegistered()|
|java.nio.channels.spi.AbstractSelectableChannel.keyFor(Selector)|
|java.nio.channels.spi.AbstractSelectableChannel.provider()|Returns the provider that created this channel.
|java.nio.channels.spi.AbstractSelectableChannel.register(Selector,int,Object)|Registers this channel with the given selector, returning a selection key.

*java.nio.channels.spi.AbstractSelectableChannel_Description*

Base implementation class for selectable channels. 

This class defines methods that handle the mechanics of channel registration, deregistration, and closing. It maintains the current blocking mode of this channel as well as its 
current set of selection keys. It performs all of the synchronization required to implement the (|java.nio.channels.SelectableChannel|) specification. Implementations of the 
abstract protected methods defined in this class need not synchronize against other threads that might be engaged in the same operations. 



*java.nio.channels.spi.AbstractSelectableChannel(SelectorProvider)*

protected AbstractSelectableChannel(java.nio.channels.spi.SelectorProvider provider)

Initializes a new instance of this class. 


*java.nio.channels.spi.AbstractSelectableChannel.blockingLock()*

public final |java.lang.Object| blockingLock()





*java.nio.channels.spi.AbstractSelectableChannel.configureBlocking(boolean)*

public final |java.nio.channels.SelectableChannel| configureBlocking(boolean block)
  throws |java.io.IOException|
         
Adjusts this channel's blocking mode. 

If the given blocking mode is different from the current blocking mode then this method invokes the implConfigureBlocking(|java.nio.channels.spi.AbstractSelectableChannel|) 
method, while holding the appropriate locks, in order to change the mode. 



*java.nio.channels.spi.AbstractSelectableChannel.implCloseChannel()*

protected final void implCloseChannel()
  throws |java.io.IOException|
         
Closes this channel. 

This method, which is specified in the (|java.nio.channels.spi.AbstractInterruptibleChannel|) class and is invoked by the close(|java.nio.channels.Channel|) method, in turn 
invokes the implCloseSelectableChannel(|java.nio.channels.spi.AbstractSelectableChannel|) method in order to perform the actual work of closing this channel. It then cancels all 
of this channel's keys. 



*java.nio.channels.spi.AbstractSelectableChannel.implCloseSelectableChannel()*

protected abstract void implCloseSelectableChannel()
  throws |java.io.IOException|
         
Closes this selectable channel. 

This method is invoked by the close(|java.nio.channels.Channel|) method in order to perform the actual work of closing the channel. This method is only invoked if the channel has 
not yet been closed, and it is never invoked more than once. 

An implementation of this method must arrange for any other thread that is blocked in an I/O operation upon this channel to return immediately, either by throwing an exception or 
by returning normally. 



*java.nio.channels.spi.AbstractSelectableChannel.implConfigureBlocking(boolean)*

protected abstract void implConfigureBlocking(boolean block)
  throws |java.io.IOException|
         
Adjusts this channel's blocking mode. 

This method is invoked by the configureBlocking(|java.nio.channels.spi.AbstractSelectableChannel|) method in order to perform the actual work of changing the blocking mode. This 
method is only invoked if the new mode is different from the current mode. 



*java.nio.channels.spi.AbstractSelectableChannel.isBlocking()*

public final boolean isBlocking()





*java.nio.channels.spi.AbstractSelectableChannel.isRegistered()*

public final boolean isRegistered()





*java.nio.channels.spi.AbstractSelectableChannel.keyFor(Selector)*

public final |java.nio.channels.SelectionKey| keyFor(java.nio.channels.Selector sel)





*java.nio.channels.spi.AbstractSelectableChannel.provider()*

public final |java.nio.channels.spi.SelectorProvider| provider()

Returns the provider that created this channel. 



    Returns: The provider that created this channel 

*java.nio.channels.spi.AbstractSelectableChannel.register(Selector,int,Object)*

public final |java.nio.channels.SelectionKey| register(
  java.nio.channels.Selector sel,
  int ops,
  java.lang.Object att)
  throws |java.nio.channels.ClosedChannelException|
         
Registers this channel with the given selector, returning a selection key. 

This method first verifies that this channel is open and that the given initial interest set is valid. 

If this channel is already registered with the given selector then the selection key representing that registration is returned after setting its interest set to the given value. 

Otherwise this channel has not yet been registered with the given selector, so the register(|java.nio.channels.spi.AbstractSelector|) method of the selector is invoked while 
holding the appropriate locks. The resulting key is added to this channel's key set before being returned. 





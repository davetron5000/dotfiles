*javax.swing.tree.AbstractLayoutCache* *AbstractLayoutCache* Warning:
 Serialized objects of this class will not be compatible with
 future Swing releases.

public abstract class AbstractLayoutCache
  extends    |java.lang.Object|
  implements |javax.swing.tree.RowMapper|

|javax.swing.tree.AbstractLayoutCache_Description|
|javax.swing.tree.AbstractLayoutCache_Fields|
|javax.swing.tree.AbstractLayoutCache_Constructors|
|javax.swing.tree.AbstractLayoutCache_Methods|

====================================================================================================================================================================================

*javax.swing.tree.AbstractLayoutCache_Fields*
|javax.swing.tree.AbstractLayoutCache.NodeDimensions_javax.swing.tree.AbstractLayoutCache.nodeDimensions|
|boolean_javax.swing.tree.AbstractLayoutCache.rootVisible|
|int_javax.swing.tree.AbstractLayoutCache.rowHeight|
|javax.swing.tree.TreeModel_javax.swing.tree.AbstractLayoutCache.treeModel|
|javax.swing.tree.TreeSelectionModel_javax.swing.tree.AbstractLayoutCache.treeSelectionModel|

*javax.swing.tree.AbstractLayoutCache_Constructors*
|javax.swing.tree.AbstractLayoutCache()|

*javax.swing.tree.AbstractLayoutCache_Methods*
|javax.swing.tree.AbstractLayoutCache.getBounds(TreePath,Rectangle)|Returns a rectangle giving the bounds needed to draw path.
|javax.swing.tree.AbstractLayoutCache.getExpandedState(TreePath)|Returns true if the path is expanded, and visible.
|javax.swing.tree.AbstractLayoutCache.getModel()|Returns the TreeModel that is providing the data.
|javax.swing.tree.AbstractLayoutCache.getNodeDimensions()|Returns the object that renders nodes in the tree, and which is   responsible for calculating the dimensions of individua
|javax.swing.tree.AbstractLayoutCache.getNodeDimensions(Object,int,int,boolean,Rectangle)|Returns, by reference in placeIn,  the size needed to represent value.
|javax.swing.tree.AbstractLayoutCache.getPathClosestTo(int,int)|Returns the path to the node that is closest to x,y.
|javax.swing.tree.AbstractLayoutCache.getPathForRow(int)|Returns the path for passed in row.
|javax.swing.tree.AbstractLayoutCache.getPreferredHeight()|Returns the preferred height.
|javax.swing.tree.AbstractLayoutCache.getPreferredWidth(Rectangle)|Returns the preferred width for the passed in region.
|javax.swing.tree.AbstractLayoutCache.getRowCount()|Number of rows being displayed.
|javax.swing.tree.AbstractLayoutCache.getRowForPath(TreePath)|Returns the row that the last item identified in path is visible  at.
|javax.swing.tree.AbstractLayoutCache.getRowHeight()|Returns the height of each row.
|javax.swing.tree.AbstractLayoutCache.getRowsForPaths(TreePath[])|Returns the rows that the TreePath instances in  path are being displayed at.
|javax.swing.tree.AbstractLayoutCache.getSelectionModel()|Returns the model used to maintain the selection.
|javax.swing.tree.AbstractLayoutCache.getVisibleChildCount(TreePath)|Returns the number of visible children for row.
|javax.swing.tree.AbstractLayoutCache.getVisiblePathsFrom(TreePath)|Returns an Enumerator that increments over the visible   paths starting at the passed in location.
|javax.swing.tree.AbstractLayoutCache.invalidatePathBounds(TreePath)|Instructs the LayoutCache that the bounds for  path are invalid, and need to be updated.
|javax.swing.tree.AbstractLayoutCache.invalidateSizes()|Informs the TreeState that it needs to recalculate  all the sizes it is referencing.
|javax.swing.tree.AbstractLayoutCache.isExpanded(TreePath)|Returns true if the value identified by row is currently expanded.
|javax.swing.tree.AbstractLayoutCache.isFixedRowHeight()|Returns true if the height of each row is a fixed size.
|javax.swing.tree.AbstractLayoutCache.isRootVisible()|Returns true if the root node of the tree is displayed.
|javax.swing.tree.AbstractLayoutCache.setExpandedState(TreePath,boolean)|Marks the path path expanded state to  isExpanded.
|javax.swing.tree.AbstractLayoutCache.setModel(TreeModel)|Sets the TreeModel that will provide the data.
|javax.swing.tree.AbstractLayoutCache.setNodeDimensions(AbstractLayoutCache.NodeDimensions)|Sets the renderer that is responsible for drawing nodes in the tree  and which is thref
|javax.swing.tree.AbstractLayoutCache.setRootVisible(boolean)|Determines whether or not the root node from  the TreeModel is visible.
|javax.swing.tree.AbstractLayoutCache.setRowHeight(int)|Sets the height of each cell.
|javax.swing.tree.AbstractLayoutCache.setSelectionModel(TreeSelectionModel)|Sets the TreeSelectionModel used to manage the  selection to new LSM.
|javax.swing.tree.AbstractLayoutCache.treeNodesChanged(TreeModelEvent)|Invoked after a node (or a set of siblings) has changed in some  way.
|javax.swing.tree.AbstractLayoutCache.treeNodesInserted(TreeModelEvent)|Invoked after nodes have been inserted into the tree.
|javax.swing.tree.AbstractLayoutCache.treeNodesRemoved(TreeModelEvent)|Invoked after nodes have been removed from the tree.
|javax.swing.tree.AbstractLayoutCache.treeStructureChanged(TreeModelEvent)|Invoked after the tree has drastically changed structure from a  given node down.

*javax.swing.tree.AbstractLayoutCache_Description*

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.tree.AbstractLayoutCache.NodeDimensions_javax.swing.tree.AbstractLayoutCache.nodeDimensions*

Object responsible for getting the size of a node. 


*boolean_javax.swing.tree.AbstractLayoutCache.rootVisible*

True if the root node is displayed, false if its children are the highest visible nodes. 


*int_javax.swing.tree.AbstractLayoutCache.rowHeight*

Height to use for each row. If this is <= 0 the renderer will be used to determine the height for each row. 


*javax.swing.tree.TreeModel_javax.swing.tree.AbstractLayoutCache.treeModel*

Model providing information. 


*javax.swing.tree.TreeSelectionModel_javax.swing.tree.AbstractLayoutCache.treeSelectionModel*

Selection model. 



*javax.swing.tree.AbstractLayoutCache()*

public AbstractLayoutCache()




*javax.swing.tree.AbstractLayoutCache.getBounds(TreePath,Rectangle)*

public abstract |java.awt.Rectangle| getBounds(
  javax.swing.tree.TreePath path,
  java.awt.Rectangle placeIn)

Returns a rectangle giving the bounds needed to draw path. 


    path - a TreePath specifying a node 
    placeIn - a Rectangle object giving the available space 

    Returns: a Rectangle object specifying the space to be used 

*javax.swing.tree.AbstractLayoutCache.getExpandedState(TreePath)*

public abstract boolean getExpandedState(javax.swing.tree.TreePath path)

Returns true if the path is expanded, and visible. 


    path - the path being queried 

    Returns: true if the path is expanded and visible, false otherwise 

*javax.swing.tree.AbstractLayoutCache.getModel()*

public |javax.swing.tree.TreeModel| getModel()

Returns the TreeModel that is providing the data. 



    Returns: the TreeModel that is providing the data 

*javax.swing.tree.AbstractLayoutCache.getNodeDimensions()*

public |javax.swing.tree.AbstractLayoutCache.NodeDimensions| getNodeDimensions()

Returns the object that renders nodes in the tree, and which is responsible for calculating the dimensions of individual nodes. 



    Returns: the NodeDimensions object 

*javax.swing.tree.AbstractLayoutCache.getNodeDimensions(Object,int,int,boolean,Rectangle)*

protected |java.awt.Rectangle| getNodeDimensions(
  java.lang.Object value,
  int row,
  int depth,
  boolean expanded,
  java.awt.Rectangle placeIn)

Returns, by reference in placeIn, the size needed to represent value. If inPlace is null, a newly created Rectangle should be returned, otherwise the value should be placed in 
inPlace and returned. This will return null if there is no renderer. 


    value - the value to be represented 
    row - row being queried 
    depth - the depth of the row 
    expanded - true if row is expanded, false otherwise 
    placeIn - a Rectangle containing the size needed to represent value 

    Returns: a Rectangle containing the node dimensions, or null if node has no dimension 

*javax.swing.tree.AbstractLayoutCache.getPathClosestTo(int,int)*

public abstract |javax.swing.tree.TreePath| getPathClosestTo(
  int x,
  int y)

Returns the path to the node that is closest to x,y. If there is nothing currently visible this will return null, otherwise it'll always return a valid path. If you need to test 
if the returned object is exactly at x, y you should get the bounds for the returned path and test x, y against that. 


    x - the horizontal component of the desired location 
    y - the vertical component of the desired location 

    Returns: the TreePath closest to the specified point 

*javax.swing.tree.AbstractLayoutCache.getPathForRow(int)*

public abstract |javax.swing.tree.TreePath| getPathForRow(int row)

Returns the path for passed in row. If row is not visible null is returned. 


    row - the row being queried 

    Returns: the TreePath for the given row 

*javax.swing.tree.AbstractLayoutCache.getPreferredHeight()*

public int getPreferredHeight()

Returns the preferred height. 



    Returns: the preferred height 

*javax.swing.tree.AbstractLayoutCache.getPreferredWidth(Rectangle)*

public int getPreferredWidth(java.awt.Rectangle bounds)

Returns the preferred width for the passed in region. The region is defined by the path closest to (bounds.x, bounds.y) and ends at bounds.height + bounds.y. If bounds is null, 
the preferred width for all the nodes will be returned (and this may be a VERY expensive computation). 


    bounds - the region being queried 

    Returns: the preferred width for the passed in region 

*javax.swing.tree.AbstractLayoutCache.getRowCount()*

public abstract int getRowCount()

Number of rows being displayed. 



    Returns: the number of rows being displayed 

*javax.swing.tree.AbstractLayoutCache.getRowForPath(TreePath)*

public abstract int getRowForPath(javax.swing.tree.TreePath path)

Returns the row that the last item identified in path is visible at. Will return -1 if any of the elements in path are not currently visible. 


    path - the TreePath being queried 

    Returns: the row where the last item in path is visible or -1 if any elements in path aren't currently visible 

*javax.swing.tree.AbstractLayoutCache.getRowHeight()*

public int getRowHeight()

Returns the height of each row. If the returned value is less than or equal to 0 the height for each row is determined by the renderer. 



*javax.swing.tree.AbstractLayoutCache.getRowsForPaths(TreePath[])*

public int[] getRowsForPaths(javax.swing.tree.TreePath[] paths)

Returns the rows that the TreePath instances in path are being displayed at. This method should return an array of the same length as that passed in, and if one of the TreePaths 
in path is not valid its entry in the array should be set to -1. 


    paths - the array of TreePaths being queried 

    Returns: an array of the same length that is passed in containing the rows that each corresponding where each TreePath is displayed; if paths is null, null is returned 

*javax.swing.tree.AbstractLayoutCache.getSelectionModel()*

public |javax.swing.tree.TreeSelectionModel| getSelectionModel()

Returns the model used to maintain the selection. 



    Returns: the treeSelectionModel 

*javax.swing.tree.AbstractLayoutCache.getVisibleChildCount(TreePath)*

public abstract int getVisibleChildCount(javax.swing.tree.TreePath path)

Returns the number of visible children for row. 


    path - the path being queried 

    Returns: the number of visible children for the specified path 

*javax.swing.tree.AbstractLayoutCache.getVisiblePathsFrom(TreePath)*

public abstract |java.util.Enumeration|<TreePath> getVisiblePathsFrom(javax.swing.tree.TreePath path)

Returns an Enumerator that increments over the visible paths starting at the passed in location. The ordering of the enumeration is based on how the paths are displayed. The first 
element of the returned enumeration will be path, unless it isn't visible, in which case null will be returned. 


    path - the starting location for the enumeration 

    Returns: the Enumerator starting at the desired location 

*javax.swing.tree.AbstractLayoutCache.invalidatePathBounds(TreePath)*

public abstract void invalidatePathBounds(javax.swing.tree.TreePath path)

Instructs the LayoutCache that the bounds for path are invalid, and need to be updated. 


    path - the path being updated 

*javax.swing.tree.AbstractLayoutCache.invalidateSizes()*

public abstract void invalidateSizes()

Informs the TreeState that it needs to recalculate all the sizes it is referencing. 



*javax.swing.tree.AbstractLayoutCache.isExpanded(TreePath)*

public abstract boolean isExpanded(javax.swing.tree.TreePath path)

Returns true if the value identified by row is currently expanded. 



*javax.swing.tree.AbstractLayoutCache.isFixedRowHeight()*

protected boolean isFixedRowHeight()

Returns true if the height of each row is a fixed size. 



*javax.swing.tree.AbstractLayoutCache.isRootVisible()*

public boolean isRootVisible()

Returns true if the root node of the tree is displayed. 



    Returns: true if the root node of the tree is displayed 

*javax.swing.tree.AbstractLayoutCache.setExpandedState(TreePath,boolean)*

public abstract void setExpandedState(
  javax.swing.tree.TreePath path,
  boolean isExpanded)

Marks the path path expanded state to isExpanded. 


    path - the path being expanded or collapsed 
    isExpanded - true if the path should be expanded, false otherwise 

*javax.swing.tree.AbstractLayoutCache.setModel(TreeModel)*

public void setModel(javax.swing.tree.TreeModel newModel)

Sets the TreeModel that will provide the data. 


    newModel - the TreeModel that is to provide the data 

*javax.swing.tree.AbstractLayoutCache.setNodeDimensions(AbstractLayoutCache.NodeDimensions)*

public void setNodeDimensions(javax.swing.tree.AbstractLayoutCache.NodeDimensions nd)

Sets the renderer that is responsible for drawing nodes in the tree and which is threfore responsible for calculating the dimensions of individual nodes. 


    nd - a NodeDimensions object 

*javax.swing.tree.AbstractLayoutCache.setRootVisible(boolean)*

public void setRootVisible(boolean rootVisible)

Determines whether or not the root node from the TreeModel is visible. 


    rootVisible - true if the root node of the tree is to be displayed 

*javax.swing.tree.AbstractLayoutCache.setRowHeight(int)*

public void setRowHeight(int rowHeight)

Sets the height of each cell. If the specified value is less than or equal to zero the current cell renderer is queried for each row's height. 


    rowHeight - the height of each cell, in pixels 

*javax.swing.tree.AbstractLayoutCache.setSelectionModel(TreeSelectionModel)*

public void setSelectionModel(javax.swing.tree.TreeSelectionModel newLSM)

Sets the TreeSelectionModel used to manage the selection to new LSM. 


    newLSM - the new TreeSelectionModel 

*javax.swing.tree.AbstractLayoutCache.treeNodesChanged(TreeModelEvent)*

public abstract void treeNodesChanged(javax.swing.event.TreeModelEvent e)

Invoked after a node (or a set of siblings) has changed in some way. The node(s) have not changed locations in the tree or altered their children arrays, but other attributes have 
changed and may affect presentation. Example: the name of a file has changed, but it is in the same location in the file system. 

e.path() returns the path the parent of the changed node(s). 

e.childIndices() returns the index(es) of the changed node(s). 


    e - the TreeModelEvent 

*javax.swing.tree.AbstractLayoutCache.treeNodesInserted(TreeModelEvent)*

public abstract void treeNodesInserted(javax.swing.event.TreeModelEvent e)

Invoked after nodes have been inserted into the tree. 

e.path() returns the parent of the new nodes e.childIndices() returns the indices of the new nodes in ascending order. 


    e - the TreeModelEvent 

*javax.swing.tree.AbstractLayoutCache.treeNodesRemoved(TreeModelEvent)*

public abstract void treeNodesRemoved(javax.swing.event.TreeModelEvent e)

Invoked after nodes have been removed from the tree. Note that if a subtree is removed from the tree, this method may only be invoked once for the root of the removed subtree, not 
once for each individual set of siblings removed. 

e.path() returns the former parent of the deleted nodes. 

e.childIndices() returns the indices the nodes had before they were deleted in ascending order. 


    e - the TreeModelEvent 

*javax.swing.tree.AbstractLayoutCache.treeStructureChanged(TreeModelEvent)*

public abstract void treeStructureChanged(javax.swing.event.TreeModelEvent e)

Invoked after the tree has drastically changed structure from a given node down. If the path returned by e.getPath() is of length one and the first element does not identify the 
current root node the first element should become the new root of the tree. 

e.path() holds the path to the node. e.childIndices() returns null. 


    e - the TreeModelEvent 



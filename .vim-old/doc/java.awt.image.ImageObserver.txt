*java.awt.image.ImageObserver* *ImageObserver* An asynchronous update interface for receiving notifications about
 Image information as the Image is constructed.

public interface interface ImageObserver


|java.awt.image.ImageObserver_Description|
|java.awt.image.ImageObserver_Fields|
|java.awt.image.ImageObserver_Constructors|
|java.awt.image.ImageObserver_Methods|

====================================================================================================================================================================================

*java.awt.image.ImageObserver_Fields*
|int_java.awt.image.ImageObserver.ABORT|
|int_java.awt.image.ImageObserver.ALLBITS|
|int_java.awt.image.ImageObserver.ERROR|
|int_java.awt.image.ImageObserver.FRAMEBITS|
|int_java.awt.image.ImageObserver.HEIGHT|
|int_java.awt.image.ImageObserver.PROPERTIES|
|int_java.awt.image.ImageObserver.SOMEBITS|
|int_java.awt.image.ImageObserver.WIDTH|

*java.awt.image.ImageObserver_Methods*
|java.awt.image.ImageObserver.imageUpdate(Image,int,int,int,int,int)|This method is called when information about an image which was  previously requested using an asynchronous in

*java.awt.image.ImageObserver_Description*

An asynchronous update interface for receiving notifications about Image information as the Image is constructed. 



*int_java.awt.image.ImageObserver.ABORT*

This flag in the infoflags argument to imageUpdate indicates that an image which was being tracked asynchronously was aborted before production was complete. No more information 
will become available without further action to trigger another image production sequence. If the ERROR flag was not also set in this image update, then accessing any of the data 
in the image will restart the production again, probably from the beginning. 


*int_java.awt.image.ImageObserver.ALLBITS*

This flag in the infoflags argument to imageUpdate indicates that a static image which was previously drawn is now complete and can be drawn again in its final form. The x, y, 
width, and height arguments to the imageUpdate callback method should be ignored. 


*int_java.awt.image.ImageObserver.ERROR*

This flag in the infoflags argument to imageUpdate indicates that an image which was being tracked asynchronously has encountered an error. No further information will become 
available and drawing the image will fail. As a convenience, the ABORT flag will be indicated at the same time to indicate that the image production was aborted. 


*int_java.awt.image.ImageObserver.FRAMEBITS*

This flag in the infoflags argument to imageUpdate indicates that another complete frame of a multi-frame image which was previously drawn is now available to be drawn again. The 
x, y, width, and height arguments to the imageUpdate callback method should be ignored. 


*int_java.awt.image.ImageObserver.HEIGHT*

This flag in the infoflags argument to imageUpdate indicates that the height of the base image is now available and can be taken from the height argument to the imageUpdate 
callback method. 


*int_java.awt.image.ImageObserver.PROPERTIES*

This flag in the infoflags argument to imageUpdate indicates that the properties of the image are now available. 


*int_java.awt.image.ImageObserver.SOMEBITS*

This flag in the infoflags argument to imageUpdate indicates that more pixels needed for drawing a scaled variation of the image are available. The bounding box of the new pixels 
can be taken from the x, y, width, and height arguments to the imageUpdate callback method. 


*int_java.awt.image.ImageObserver.WIDTH*

This flag in the infoflags argument to imageUpdate indicates that the width of the base image is now available and can be taken from the width argument to the imageUpdate callback 
method. 



*java.awt.image.ImageObserver.imageUpdate(Image,int,int,int,int,int)*

public boolean imageUpdate(
  java.awt.Image img,
  int infoflags,
  int x,
  int y,
  int width,
  int height)

This method is called when information about an image which was previously requested using an asynchronous interface becomes available. Asynchronous interfaces are method calls 
such as getWidth(ImageObserver) and drawImage(img, x, y, ImageObserver) which take an ImageObserver object as an argument. Those methods register the caller as interested either 
in information about the overall image itself (in the case of getWidth(ImageObserver)) or about an output version of an image (in the case of the drawImage(img, x, y, [w, h,] 
ImageObserver) call). 

This method should return true if further updates are needed or false if the required information has been acquired. The image which was being tracked is passed in using the img 
argument. Various constants are combined to form the infoflags argument which indicates what information about the image is now available. The interpretation of the x, y, width, 
and height arguments depends on the contents of the infoflags argument. 

The infoflags argument should be the bitwise inclusive OR of the following flags: WIDTH, HEIGHT, PROPERTIES, SOMEBITS, FRAMEBITS, ALLBITS, ERROR, ABORT. 


    img - the image being observed. 
    infoflags - the bitwise inclusive OR of the following flags: WIDTH, HEIGHT, PROPERTIES, SOMEBITS, FRAMEBITS, ALLBITS, ERROR, ABORT. 
    x - the x coordinate. 
    y - the y coordinate. 
    width - the width. 
    height - the height. 

    Returns: false if the infoflags indicate that the image is completely loaded; true otherwise. 



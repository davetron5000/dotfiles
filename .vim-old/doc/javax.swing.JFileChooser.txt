*javax.swing.JFileChooser* *JFileChooser* JFileChooser provides a simple mechanism for the user to
 choose a file.

public class JFileChooser
  extends    |javax.swing.JComponent|
  implements |javax.accessibility.Accessible|

|javax.swing.JFileChooser_Description|
|javax.swing.JFileChooser_Fields|
|javax.swing.JFileChooser_Constructors|
|javax.swing.JFileChooser_Methods|

====================================================================================================================================================================================

*javax.swing.JFileChooser_Fields*
|java.lang.String_javax.swing.JFileChooser.ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY|
|javax.accessibility.AccessibleContext_javax.swing.JFileChooser.accessibleContext|
|java.lang.String_javax.swing.JFileChooser.ACCESSORY_CHANGED_PROPERTY|
|java.lang.String_javax.swing.JFileChooser.APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY|
|java.lang.String_javax.swing.JFileChooser.APPROVE_BUTTON_TEXT_CHANGED_PROPERTY|
|java.lang.String_javax.swing.JFileChooser.APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY|
|int_javax.swing.JFileChooser.APPROVE_OPTION|
|java.lang.String_javax.swing.JFileChooser.APPROVE_SELECTION|
|int_javax.swing.JFileChooser.CANCEL_OPTION|
|java.lang.String_javax.swing.JFileChooser.CANCEL_SELECTION|
|java.lang.String_javax.swing.JFileChooser.CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY|
|java.lang.String_javax.swing.JFileChooser.CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY|
|int_javax.swing.JFileChooser.CUSTOM_DIALOG|
|java.lang.String_javax.swing.JFileChooser.DIALOG_TITLE_CHANGED_PROPERTY|
|java.lang.String_javax.swing.JFileChooser.DIALOG_TYPE_CHANGED_PROPERTY|
|int_javax.swing.JFileChooser.DIRECTORIES_ONLY|
|java.lang.String_javax.swing.JFileChooser.DIRECTORY_CHANGED_PROPERTY|
|int_javax.swing.JFileChooser.ERROR_OPTION|
|java.lang.String_javax.swing.JFileChooser.FILE_FILTER_CHANGED_PROPERTY|
|java.lang.String_javax.swing.JFileChooser.FILE_HIDING_CHANGED_PROPERTY|
|java.lang.String_javax.swing.JFileChooser.FILE_SELECTION_MODE_CHANGED_PROPERTY|
|java.lang.String_javax.swing.JFileChooser.FILE_SYSTEM_VIEW_CHANGED_PROPERTY|
|java.lang.String_javax.swing.JFileChooser.FILE_VIEW_CHANGED_PROPERTY|
|int_javax.swing.JFileChooser.FILES_AND_DIRECTORIES|
|int_javax.swing.JFileChooser.FILES_ONLY|
|java.lang.String_javax.swing.JFileChooser.MULTI_SELECTION_ENABLED_CHANGED_PROPERTY|
|int_javax.swing.JFileChooser.OPEN_DIALOG|
|int_javax.swing.JFileChooser.SAVE_DIALOG|
|java.lang.String_javax.swing.JFileChooser.SELECTED_FILE_CHANGED_PROPERTY|
|java.lang.String_javax.swing.JFileChooser.SELECTED_FILES_CHANGED_PROPERTY|

*javax.swing.JFileChooser_Constructors*
|javax.swing.JFileChooser()|Constructs a JFileChooser pointing to the user's  default directory.
|javax.swing.JFileChooser(File)|Constructs a JFileChooser using the given File  as the path.
|javax.swing.JFileChooser(File,FileSystemView)|Constructs a JFileChooser using the given current directory  and FileSystemView.
|javax.swing.JFileChooser(FileSystemView)|Constructs a JFileChooser using the given  FileSystemView.
|javax.swing.JFileChooser(String)|Constructs a JFileChooser using the given path.
|javax.swing.JFileChooser(String,FileSystemView)|Constructs a JFileChooser using the given current directory  path and FileSystemView.

*javax.swing.JFileChooser_Methods*
|javax.swing.JFileChooser.accept(File)|Returns true if the file should be displayed.
|javax.swing.JFileChooser.addActionListener(ActionListener)|Adds an ActionListener to the file chooser.
|javax.swing.JFileChooser.addChoosableFileFilter(FileFilter)|Adds a filter to the list of user choosable file filters.
|javax.swing.JFileChooser.approveSelection()|Called by the UI when the user hits the Approve button  (labeled "Open" or "Save", by default).
|javax.swing.JFileChooser.cancelSelection()|Called by the UI when the user chooses the Cancel button.
|javax.swing.JFileChooser.changeToParentDirectory()|Changes the directory to be set to the parent of the  current directory.
|javax.swing.JFileChooser.createDialog(Component)|Creates and returns a new JDialog wrapping  this centered on the parent  in the parent's frame.
|javax.swing.JFileChooser.ensureFileIsVisible(File)|Makes sure that the specified file is viewable, and  not hidden.
|javax.swing.JFileChooser.fireActionPerformed(String)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.JFileChooser.getAcceptAllFileFilter()|Returns the AcceptAll file filter.
|javax.swing.JFileChooser.getAccessibleContext()|Gets the AccessibleContext associated with this JFileChooser.
|javax.swing.JFileChooser.getAccessory()|Returns the accessory component.
|javax.swing.JFileChooser.getActionListeners()|Returns an array of all the action listeners   registered on this file chooser.
|javax.swing.JFileChooser.getApproveButtonMnemonic()|Returns the approve button's mnemonic.
|javax.swing.JFileChooser.getApproveButtonText()|Returns the text used in the ApproveButton in the  FileChooserUI.
|javax.swing.JFileChooser.getApproveButtonToolTipText()|Returns the tooltip text used in the ApproveButton.
|javax.swing.JFileChooser.getChoosableFileFilters()|Gets the list of user choosable file filters.
|javax.swing.JFileChooser.getControlButtonsAreShown()|Returns the value of the controlButtonsAreShown  property.
|javax.swing.JFileChooser.getCurrentDirectory()|Returns the current directory.
|javax.swing.JFileChooser.getDescription(File)|Returns the file description.
|javax.swing.JFileChooser.getDialogTitle()|Gets the string that goes in the JFileChooser's titlebar.
|javax.swing.JFileChooser.getDialogType()|Returns the type of this dialog.
|javax.swing.JFileChooser.getDragEnabled()|Gets the value of the dragEnabled property.
|javax.swing.JFileChooser.getFileFilter()|Returns the currently selected file filter.
|javax.swing.JFileChooser.getFileSelectionMode()|Returns the current file-selection mode.
|javax.swing.JFileChooser.getFileSystemView()|Returns the file system view.
|javax.swing.JFileChooser.getFileView()|Returns the current file view.
|javax.swing.JFileChooser.getIcon(File)|Returns the icon for this file or type of file, depending  on the system.
|javax.swing.JFileChooser.getName(File)|Returns the filename.
|javax.swing.JFileChooser.getSelectedFile()|Returns the selected file.
|javax.swing.JFileChooser.getSelectedFiles()|Returns a list of selected files if the file chooser is  set to allow multiple selection.
|javax.swing.JFileChooser.getTypeDescription(File)|Returns the file type.
|javax.swing.JFileChooser.getUI()|Gets the UI object which implements the Lfor this component.
|javax.swing.JFileChooser.getUIClassID()|Returns a string that specifies the name of the Lclass  that renders this component.
|javax.swing.JFileChooser.isAcceptAllFileFilterUsed()|Returns whether the AcceptAll FileFilter is used.
|javax.swing.JFileChooser.isDirectorySelectionEnabled()|Convenience call that determines if directories are selectable based  on the current file selection mode.
|javax.swing.JFileChooser.isFileHidingEnabled()|Returns true if hidden files are not shown in the file chooser;  otherwise, returns false.
|javax.swing.JFileChooser.isFileSelectionEnabled()|Convenience call that determines if files are selectable based on the  current file selection mode.
|javax.swing.JFileChooser.isMultiSelectionEnabled()|Returns true if multiple files can be selected.
|javax.swing.JFileChooser.isTraversable(File)|Returns true if the file (directory) can be visited.
|javax.swing.JFileChooser.paramString()|Returns a string representation of this JFileChooser.
|javax.swing.JFileChooser.removeActionListener(ActionListener)|Removes an ActionListener from the file chooser.
|javax.swing.JFileChooser.removeChoosableFileFilter(FileFilter)|Removes a filter from the list of user choosable file filters.
|javax.swing.JFileChooser.rescanCurrentDirectory()|Tells the UI to rescan its files list from the current directory.
|javax.swing.JFileChooser.resetChoosableFileFilters()|Resets the choosable file filter list to its starting state.
|javax.swing.JFileChooser.setAcceptAllFileFilterUsed(boolean)|Determines whether the AcceptAll FileFilter is used  as an available choice in the choosable filter list.
|javax.swing.JFileChooser.setAccessory(JComponent)|Sets the accessory component.
|javax.swing.JFileChooser.setApproveButtonMnemonic(char)|Sets the approve button's mnemonic using a character.
|javax.swing.JFileChooser.setApproveButtonMnemonic(int)|Sets the approve button's mnemonic using a numeric keycode.
|javax.swing.JFileChooser.setApproveButtonText(String)|Sets the text used in the ApproveButton in the  FileChooserUI.
|javax.swing.JFileChooser.setApproveButtonToolTipText(String)|Sets the tooltip text used in the ApproveButton.
|javax.swing.JFileChooser.setControlButtonsAreShown(boolean)|Sets the property   that indicates whether the approve and cancel  buttons are shown in the file chooser.
|javax.swing.JFileChooser.setCurrentDirectory(File)|Sets the current directory.
|javax.swing.JFileChooser.setDialogTitle(String)|Sets the string that goes in the JFileChooser window's  title bar.
|javax.swing.JFileChooser.setDialogType(int)|Sets the type of this dialog.
|javax.swing.JFileChooser.setDragEnabled(boolean)|Sets the dragEnabled property,  which must be true to enable  automatic drag handling (the first part of drag and drop)  on this 
|javax.swing.JFileChooser.setFileFilter(FileFilter)|Sets the current file filter.
|javax.swing.JFileChooser.setFileHidingEnabled(boolean)|Sets file hiding on or off.
|javax.swing.JFileChooser.setFileSelectionMode(int)|Sets the JFileChooser to allow the user to just  select files, just select  directories, or select both files and directories.
|javax.swing.JFileChooser.setFileSystemView(FileSystemView)|Sets the file system view that the JFileChooser uses for  accessing and creating file system resources, such as finding
|javax.swing.JFileChooser.setFileView(FileView)|Sets the file view to used to retrieve UI information, such as  the icon that represents a file or the type description of a file.
|javax.swing.JFileChooser.setMultiSelectionEnabled(boolean)|Sets the file chooser to allow multiple file selections.
|javax.swing.JFileChooser.setSelectedFile(File)|Sets the selected file.
|javax.swing.JFileChooser.setSelectedFiles(File[])|Sets the list of selected files if the file chooser is  set to allow multiple selection.
|javax.swing.JFileChooser.setup(FileSystemView)|Performs common constructor initialization and setup.
|javax.swing.JFileChooser.showDialog(Component,String)|Pops a custom file chooser dialog with a custom approve button.
|javax.swing.JFileChooser.showOpenDialog(Component)|Pops up an "Open File" file chooser dialog.
|javax.swing.JFileChooser.showSaveDialog(Component)|Pops up a "Save File" file chooser dialog.
|javax.swing.JFileChooser.updateUI()|Resets the UI property to a value from the current look and feel.

*javax.swing.JFileChooser_Description*

JFileChooser provides a simple mechanism for the user to choose a file. For information about using JFileChooser, see How to Use File Choosers, a section in The Java Tutorial. 



The following code pops up a file chooser for the user's home directory that sees only .jpg and .gif images: 

JFileChooser chooser = new JFileChooser(); // Note: source for ExampleFileFilter can be found in FileChooserDemo, // under the demo/jfc directory in the JDK. ExampleFileFilter 
filter = new ExampleFileFilter(); filter.addExtension("jpg"); filter.addExtension("gif"); filter.setDescription("JPG & GIF Images"); chooser.setFileFilter(filter); int returnVal = 
chooser.showOpenDialog(parent); if(returnVal == JFileChooser.APPROVE_OPTION) { System.out.println("You chose to open this file: " + chooser.getSelectedFile().getName()); } 



*java.lang.String_javax.swing.JFileChooser.ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY*

Identifies whether a the AcceptAllFileFilter is used or not. 


*javax.accessibility.AccessibleContext_javax.swing.JFileChooser.accessibleContext*




*java.lang.String_javax.swing.JFileChooser.ACCESSORY_CHANGED_PROPERTY*

Says that a different accessory component is in use (for example, to preview files). 


*java.lang.String_javax.swing.JFileChooser.APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY*

Identifies change in the mnemonic for the approve (yes, ok) button. 


*java.lang.String_javax.swing.JFileChooser.APPROVE_BUTTON_TEXT_CHANGED_PROPERTY*

Identifies change in the text on the approve (yes, ok) button. 


*java.lang.String_javax.swing.JFileChooser.APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY*

Identifies change in the tooltip text for the approve (yes, ok) button. 


*int_javax.swing.JFileChooser.APPROVE_OPTION*

Return value if approve (yes, ok) is chosen. 


*java.lang.String_javax.swing.JFileChooser.APPROVE_SELECTION*

Instruction to approve the current selection (same as pressing yes or ok). 


*int_javax.swing.JFileChooser.CANCEL_OPTION*

Return value if cancel is chosen. 


*java.lang.String_javax.swing.JFileChooser.CANCEL_SELECTION*

Instruction to cancel the current selection. 


*java.lang.String_javax.swing.JFileChooser.CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY*

Identifies a change in the list of predefined file filters the user can choose from. 


*java.lang.String_javax.swing.JFileChooser.CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY*

Instruction to display the control buttons. 


*int_javax.swing.JFileChooser.CUSTOM_DIALOG*

Type value indicating that the JFileChooser supports a developer-specified file operation. 


*java.lang.String_javax.swing.JFileChooser.DIALOG_TITLE_CHANGED_PROPERTY*

Identifies a change in the dialog title. 


*java.lang.String_javax.swing.JFileChooser.DIALOG_TYPE_CHANGED_PROPERTY*

Identifies a change in the type of files displayed (files only, directories only, or both files and directories). 


*int_javax.swing.JFileChooser.DIRECTORIES_ONLY*

Instruction to display only directories. 


*java.lang.String_javax.swing.JFileChooser.DIRECTORY_CHANGED_PROPERTY*

Identifies user's directory change. 


*int_javax.swing.JFileChooser.ERROR_OPTION*

Return value if an error occured. 


*java.lang.String_javax.swing.JFileChooser.FILE_FILTER_CHANGED_PROPERTY*

User changed the kind of files to display. 


*java.lang.String_javax.swing.JFileChooser.FILE_HIDING_CHANGED_PROPERTY*

Identifies a change in the display-hidden-files property. 


*java.lang.String_javax.swing.JFileChooser.FILE_SELECTION_MODE_CHANGED_PROPERTY*

Identifies a change in the kind of selection (single, multiple, etc.). 


*java.lang.String_javax.swing.JFileChooser.FILE_SYSTEM_VIEW_CHANGED_PROPERTY*

Says that a different object is being used to find available drives on the system. 


*java.lang.String_javax.swing.JFileChooser.FILE_VIEW_CHANGED_PROPERTY*

Says that a different object is being used to retrieve file information. 


*int_javax.swing.JFileChooser.FILES_AND_DIRECTORIES*

Instruction to display both files and directories. 


*int_javax.swing.JFileChooser.FILES_ONLY*

Instruction to display only files. 


*java.lang.String_javax.swing.JFileChooser.MULTI_SELECTION_ENABLED_CHANGED_PROPERTY*

Enables multiple-file selections. 


*int_javax.swing.JFileChooser.OPEN_DIALOG*

Type value indicating that the JFileChooser supports an "Open" file operation. 


*int_javax.swing.JFileChooser.SAVE_DIALOG*

Type value indicating that the JFileChooser supports a "Save" file operation. 


*java.lang.String_javax.swing.JFileChooser.SELECTED_FILE_CHANGED_PROPERTY*

Identifies change in user's single-file selection. 


*java.lang.String_javax.swing.JFileChooser.SELECTED_FILES_CHANGED_PROPERTY*

Identifies change in user's multiple-file selection. 



*javax.swing.JFileChooser()*

public JFileChooser()

Constructs a JFileChooser pointing to the user's default directory. This default depends on the operating system. It is typically the "My Documents" folder on Windows, and the 
user's home directory on Unix. 


*javax.swing.JFileChooser(File)*

public JFileChooser(java.io.File currentDirectory)

Constructs a JFileChooser using the given File as the path. Passing in a null file causes the file chooser to point to the user's default directory. This default depends on the 
operating system. It is typically the "My Documents" folder on Windows, and the user's home directory on Unix. 

    currentDirectory - a File object specifying the path to a file or directory 

*javax.swing.JFileChooser(File,FileSystemView)*

public JFileChooser(
  java.io.File currentDirectory,
  javax.swing.filechooser.FileSystemView fsv)

Constructs a JFileChooser using the given current directory and FileSystemView. 


*javax.swing.JFileChooser(FileSystemView)*

public JFileChooser(javax.swing.filechooser.FileSystemView fsv)

Constructs a JFileChooser using the given FileSystemView. 


*javax.swing.JFileChooser(String)*

public JFileChooser(java.lang.String currentDirectoryPath)

Constructs a JFileChooser using the given path. Passing in a null string causes the file chooser to point to the user's default directory. This default depends on the operating 
system. It is typically the "My Documents" folder on Windows, and the user's home directory on Unix. 

    currentDirectoryPath - a String giving the path to a file or directory 

*javax.swing.JFileChooser(String,FileSystemView)*

public JFileChooser(
  java.lang.String currentDirectoryPath,
  javax.swing.filechooser.FileSystemView fsv)

Constructs a JFileChooser using the given current directory path and FileSystemView. 


*javax.swing.JFileChooser.accept(File)*

public boolean accept(java.io.File f)

Returns true if the file should be displayed. 


    f - the File 

    Returns: true if the file should be displayed, otherwise false 

*javax.swing.JFileChooser.addActionListener(ActionListener)*

public void addActionListener(java.awt.event.ActionListener l)

Adds an ActionListener to the file chooser. 


    l - the listener to be added 

*javax.swing.JFileChooser.addChoosableFileFilter(FileFilter)*

public void addChoosableFileFilter(javax.swing.filechooser.FileFilter filter)

Adds a filter to the list of user choosable file filters. For information on setting the file selection mode, see setFileSelectionMode(|javax.swing.JFileChooser|) . 


    filter - the FileFilter to add to the choosable file filter list 

*javax.swing.JFileChooser.approveSelection()*

public void approveSelection()

Called by the UI when the user hits the Approve button (labeled "Open" or "Save", by default). This can also be called by the programmer. This method causes an action event to 
fire with the command string equal to APPROVE_SELECTION. 



*javax.swing.JFileChooser.cancelSelection()*

public void cancelSelection()

Called by the UI when the user chooses the Cancel button. This can also be called by the programmer. This method causes an action event to fire with the command string equal to 
CANCEL_SELECTION. 



*javax.swing.JFileChooser.changeToParentDirectory()*

public void changeToParentDirectory()

Changes the directory to be set to the parent of the current directory. 



*javax.swing.JFileChooser.createDialog(Component)*

protected |javax.swing.JDialog| createDialog(java.awt.Component parent)
  throws |java.awt.HeadlessException|
         
Creates and returns a new JDialog wrapping this centered on the parent in the parent's frame. This method can be overriden to further manipulate the dialog, to disable resizing, 
set the location, etc. Example: 

class MyFileChooser extends JFileChooser { protected JDialog createDialog(Component parent) throws HeadlessException { JDialog dialog = super.createDialog(parent); 
dialog.setLocation(300, 200); dialog.setResizable(false); return dialog; } } 


    parent - the parent component of the dialog; can be null 

    Returns: a new JDialog containing this instance 

*javax.swing.JFileChooser.ensureFileIsVisible(File)*

public void ensureFileIsVisible(java.io.File f)

Makes sure that the specified file is viewable, and not hidden. 


    f - a File object 

*javax.swing.JFileChooser.fireActionPerformed(String)*

protected void fireActionPerformed(java.lang.String command)

Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the command parameter. 



*javax.swing.JFileChooser.getAcceptAllFileFilter()*

public |javax.swing.filechooser.FileFilter| getAcceptAllFileFilter()

Returns the AcceptAll file filter. For example, on Microsoft Windows this would be All Files (*.*). 



*javax.swing.JFileChooser.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JFileChooser. For file choosers, the AccessibleContext takes the form of an AccessibleJFileChooser. A new AccessibleJFileChooser 
instance is created if necessary. 



    Returns: an AccessibleJFileChooser that serves as the AccessibleContext of this JFileChooser 

*javax.swing.JFileChooser.getAccessory()*

public |javax.swing.JComponent| getAccessory()

Returns the accessory component. 



    Returns: this JFileChooser's accessory component, or null 

*javax.swing.JFileChooser.getActionListeners()*

public |java.awt.event.ActionListener|[] getActionListeners()

Returns an array of all the action listeners registered on this file chooser. 



    Returns: all of this file chooser's ActionListeners or an empty array if no action listeners are currently registered 

*javax.swing.JFileChooser.getApproveButtonMnemonic()*

public int getApproveButtonMnemonic()

Returns the approve button's mnemonic. 



    Returns: an integer value for the mnemonic key 

*javax.swing.JFileChooser.getApproveButtonText()*

public |java.lang.String| getApproveButtonText()

Returns the text used in the ApproveButton in the FileChooserUI. If null, the UI object will determine the button's text. 

Typically, this would be "Open" or "Save". 



    Returns: the text used in the ApproveButton 

*javax.swing.JFileChooser.getApproveButtonToolTipText()*

public |java.lang.String| getApproveButtonToolTipText()

Returns the tooltip text used in the ApproveButton. If null, the UI object will determine the button's text. 



    Returns: the text used in the ApproveButton 

*javax.swing.JFileChooser.getChoosableFileFilters()*

public |javax.swing.filechooser.FileFilter|[] getChoosableFileFilters()

Gets the list of user choosable file filters. 



    Returns: a FileFilter array containing all the choosable file filters 

*javax.swing.JFileChooser.getControlButtonsAreShown()*

public boolean getControlButtonsAreShown()

Returns the value of the controlButtonsAreShown property. 



    Returns: the value of the controlButtonsAreShown property 

*javax.swing.JFileChooser.getCurrentDirectory()*

public |java.io.File| getCurrentDirectory()

Returns the current directory. 



    Returns: the current directory 

*javax.swing.JFileChooser.getDescription(File)*

public |java.lang.String| getDescription(java.io.File f)

Returns the file description. 


    f - the File 

    Returns: the String containing the file description for f 

*javax.swing.JFileChooser.getDialogTitle()*

public |java.lang.String| getDialogTitle()

Gets the string that goes in the JFileChooser's titlebar. 



*javax.swing.JFileChooser.getDialogType()*

public int getDialogType()

Returns the type of this dialog. The default is JFileChooser.OPEN_DIALOG. 



    Returns: the type of dialog to be displayed: 

JFileChooser.OPEN_DIALOG JFileChooser.SAVE_DIALOG JFileChooser.CUSTOM_DIALOG 

*javax.swing.JFileChooser.getDragEnabled()*

public boolean getDragEnabled()

Gets the value of the dragEnabled property. 



    Returns: the value of the dragEnabled property 

*javax.swing.JFileChooser.getFileFilter()*

public |javax.swing.filechooser.FileFilter| getFileFilter()

Returns the currently selected file filter. 



    Returns: the current file filter 

*javax.swing.JFileChooser.getFileSelectionMode()*

public int getFileSelectionMode()

Returns the current file-selection mode. The default is JFilesChooser.FILES_ONLY. 



    Returns: the type of files to be displayed, one of the following: 

JFileChooser.FILES_ONLY JFileChooser.DIRECTORIES_ONLY JFileChooser.FILES_AND_DIRECTORIES 

*javax.swing.JFileChooser.getFileSystemView()*

public |javax.swing.filechooser.FileSystemView| getFileSystemView()

Returns the file system view. 



    Returns: the FileSystemView object 

*javax.swing.JFileChooser.getFileView()*

public |javax.swing.filechooser.FileView| getFileView()

Returns the current file view. 



*javax.swing.JFileChooser.getIcon(File)*

public |javax.swing.Icon| getIcon(java.io.File f)

Returns the icon for this file or type of file, depending on the system. 


    f - the File 

    Returns: the Icon for this file, or type of file 

*javax.swing.JFileChooser.getName(File)*

public |java.lang.String| getName(java.io.File f)

Returns the filename. 


    f - the File 

    Returns: the String containing the filename for f 

*javax.swing.JFileChooser.getSelectedFile()*

public |java.io.File| getSelectedFile()

Returns the selected file. This can be set either by the programmer via setFile or by a user action, such as either typing the filename into the UI or selecting the file from a 
list in the UI. 



    Returns: the selected file 

*javax.swing.JFileChooser.getSelectedFiles()*

public |java.io.File|[] getSelectedFiles()

Returns a list of selected files if the file chooser is set to allow multiple selection. 



*javax.swing.JFileChooser.getTypeDescription(File)*

public |java.lang.String| getTypeDescription(java.io.File f)

Returns the file type. 


    f - the File 

    Returns: the String containing the file type description for f 

*javax.swing.JFileChooser.getUI()*

public |javax.swing.plaf.FileChooserUI| getUI()

Gets the UI object which implements the Lfor this component. 



    Returns: the FileChooserUI object that implements the FileChooserUI L&F 

*javax.swing.JFileChooser.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns a string that specifies the name of the Lclass that renders this component. 



    Returns: the string "FileChooserUI" 

*javax.swing.JFileChooser.isAcceptAllFileFilterUsed()*

public boolean isAcceptAllFileFilterUsed()

Returns whether the AcceptAll FileFilter is used. 



    Returns: true if the AcceptAll FileFilter is used 

*javax.swing.JFileChooser.isDirectorySelectionEnabled()*

public boolean isDirectorySelectionEnabled()

Convenience call that determines if directories are selectable based on the current file selection mode. 



*javax.swing.JFileChooser.isFileHidingEnabled()*

public boolean isFileHidingEnabled()

Returns true if hidden files are not shown in the file chooser; otherwise, returns false. 



    Returns: the status of the file hiding property 

*javax.swing.JFileChooser.isFileSelectionEnabled()*

public boolean isFileSelectionEnabled()

Convenience call that determines if files are selectable based on the current file selection mode. 



*javax.swing.JFileChooser.isMultiSelectionEnabled()*

public boolean isMultiSelectionEnabled()

Returns true if multiple files can be selected. 



    Returns: true if multiple files can be selected 

*javax.swing.JFileChooser.isTraversable(File)*

public boolean isTraversable(java.io.File f)

Returns true if the file (directory) can be visited. Returns false if the directory cannot be traversed. 


    f - the File 

    Returns: true if the file/directory can be traversed, otherwise false 

*javax.swing.JFileChooser.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JFileChooser. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary 
between implementations. The returned string may be empty but may not be null. 



    Returns: a string representation of this JFileChooser 

*javax.swing.JFileChooser.removeActionListener(ActionListener)*

public void removeActionListener(java.awt.event.ActionListener l)

Removes an ActionListener from the file chooser. 


    l - the listener to be removed 

*javax.swing.JFileChooser.removeChoosableFileFilter(FileFilter)*

public boolean removeChoosableFileFilter(javax.swing.filechooser.FileFilter f)

Removes a filter from the list of user choosable file filters. Returns true if the file filter was removed. 



*javax.swing.JFileChooser.rescanCurrentDirectory()*

public void rescanCurrentDirectory()

Tells the UI to rescan its files list from the current directory. 



*javax.swing.JFileChooser.resetChoosableFileFilters()*

public void resetChoosableFileFilters()

Resets the choosable file filter list to its starting state. Normally, this removes all added file filters while leaving the AcceptAll file filter. 



*javax.swing.JFileChooser.setAcceptAllFileFilterUsed(boolean)*

public void setAcceptAllFileFilterUsed(boolean b)

Determines whether the AcceptAll FileFilter is used as an available choice in the choosable filter list. If false, the AcceptAll file filter is removed from the list of available 
file filters. If true, the AcceptAll file filter will become the the actively used file filter. 



*javax.swing.JFileChooser.setAccessory(JComponent)*

public void setAccessory(javax.swing.JComponent newAccessory)

Sets the accessory component. An accessory is often used to show a preview image of the selected file; however, it can be used for anything that the programmer wishes, such as 
extra custom file chooser controls. 

Note: if there was a previous accessory, you should unregister any listeners that the accessory might have registered with the file chooser. 



*javax.swing.JFileChooser.setApproveButtonMnemonic(char)*

public void setApproveButtonMnemonic(char mnemonic)

Sets the approve button's mnemonic using a character. 


    mnemonic - a character value for the mnemonic key 

*javax.swing.JFileChooser.setApproveButtonMnemonic(int)*

public void setApproveButtonMnemonic(int mnemonic)

Sets the approve button's mnemonic using a numeric keycode. 


    mnemonic - an integer value for the mnemonic key 

*javax.swing.JFileChooser.setApproveButtonText(String)*

public void setApproveButtonText(java.lang.String approveButtonText)

Sets the text used in the ApproveButton in the FileChooserUI. 


    approveButtonText - the text used in the ApproveButton 

*javax.swing.JFileChooser.setApproveButtonToolTipText(String)*

public void setApproveButtonToolTipText(java.lang.String toolTipText)

Sets the tooltip text used in the ApproveButton. If null, the UI object will determine the button's text. 



    Returns: the text used in the ApproveButton 

*javax.swing.JFileChooser.setControlButtonsAreShown(boolean)*

public void setControlButtonsAreShown(boolean b)

Sets the property that indicates whether the approve and cancel buttons are shown in the file chooser. This property is true by default. Look and feels that always show these 
buttons will ignore the value of this property. This method fires a property-changed event, using the string value of CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY as the name of the 
property. 


    b - false if control buttons should not be shown; otherwise, true 

*javax.swing.JFileChooser.setCurrentDirectory(File)*

public void setCurrentDirectory(java.io.File dir)

Sets the current directory. Passing in null sets the file chooser to point to the user's default directory. This default depends on the operating system. It is typically the "My 
Documents" folder on Windows, and the user's home directory on Unix. 

If the file passed in as currentDirectory is not a directory, the parent of the file will be used as the currentDirectory. If the parent is not traversable, then it will walk up 
the parent tree until it finds a traversable directory, or hits the root of the file system. 


    dir - the current directory to point to 

*javax.swing.JFileChooser.setDialogTitle(String)*

public void setDialogTitle(java.lang.String dialogTitle)

Sets the string that goes in the JFileChooser window's title bar. 


    dialogTitle - the new String for the title bar 

*javax.swing.JFileChooser.setDialogType(int)*

public void setDialogType(int dialogType)

Sets the type of this dialog. Use OPEN_DIALOG when you want to bring up a file chooser that the user can use to open a file. Likewise, use SAVE_DIALOG for letting the user choose 
a file for saving. Use CUSTOM_DIALOG when you want to use the file chooser in a context other than "Open" or "Save". For instance, you might want to bring up a file chooser that 
allows the user to choose a file to execute. Note that you normally would not need to set the JFileChooser to use CUSTOM_DIALOG since a call to setApproveButtonText does this for 
you. The default dialog type is JFileChooser.OPEN_DIALOG. 


    dialogType - the type of dialog to be displayed: 

JFileChooser.OPEN_DIALOG JFileChooser.SAVE_DIALOG JFileChooser.CUSTOM_DIALOG 

*javax.swing.JFileChooser.setDragEnabled(boolean)*

public void setDragEnabled(boolean b)

Sets the dragEnabled property, which must be true to enable automatic drag handling (the first part of drag and drop) on this component. The transferHandler property needs to be 
set to a non-null value for the drag to do anything. The default value of the dragEnabled property is false. 



When automatic drag handling is enabled, most look and feels begin a drag-and-drop operation whenever the user presses the mouse button over a selection and then moves the mouse a 
few pixels. Setting this property to true can therefore have a subtle effect on how selections behave. 



Some look and feels might not support automatic drag and drop; they will ignore this property. You can work around such look and feels by modifying the component to directly call 
the exportAsDrag method of a TransferHandler. 


    b - the value to set the dragEnabled property to 

*javax.swing.JFileChooser.setFileFilter(FileFilter)*

public void setFileFilter(javax.swing.filechooser.FileFilter filter)

Sets the current file filter. The file filter is used by the file chooser to filter out files from the user's view. 


    filter - the new current file filter to use 

*javax.swing.JFileChooser.setFileHidingEnabled(boolean)*

public void setFileHidingEnabled(boolean b)

Sets file hiding on or off. If true, hidden files are not shown in the file chooser. The job of determining which files are shown is done by the FileView. 


    b - the boolean value that determines whether file hiding is turned on 

*javax.swing.JFileChooser.setFileSelectionMode(int)*

public void setFileSelectionMode(int mode)

Sets the JFileChooser to allow the user to just select files, just select directories, or select both files and directories. The default is JFilesChooser.FILES_ONLY. 


    mode - the type of files to be displayed: 

JFileChooser.FILES_ONLY JFileChooser.DIRECTORIES_ONLY JFileChooser.FILES_AND_DIRECTORIES 

*javax.swing.JFileChooser.setFileSystemView(FileSystemView)*

public void setFileSystemView(javax.swing.filechooser.FileSystemView fsv)

Sets the file system view that the JFileChooser uses for accessing and creating file system resources, such as finding the floppy drive and getting a list of root drives. 


    fsv - the new FileSystemView 

*javax.swing.JFileChooser.setFileView(FileView)*

public void setFileView(javax.swing.filechooser.FileView fileView)

Sets the file view to used to retrieve UI information, such as the icon that represents a file or the type description of a file. 



*javax.swing.JFileChooser.setMultiSelectionEnabled(boolean)*

public void setMultiSelectionEnabled(boolean b)

Sets the file chooser to allow multiple file selections. 


    b - true if multiple files may be selected 

*javax.swing.JFileChooser.setSelectedFile(File)*

public void setSelectedFile(java.io.File file)

Sets the selected file. If the file's parent directory is not the current directory, changes the current directory to be the file's parent directory. 


    file - the selected file 

*javax.swing.JFileChooser.setSelectedFiles(File[])*

public void setSelectedFiles(java.io.File[] selectedFiles)

Sets the list of selected files if the file chooser is set to allow multiple selection. 



*javax.swing.JFileChooser.setup(FileSystemView)*

protected void setup(javax.swing.filechooser.FileSystemView view)

Performs common constructor initialization and setup. 



*javax.swing.JFileChooser.showDialog(Component,String)*

public int showDialog(
  java.awt.Component parent,
  java.lang.String approveButtonText)
  throws |java.awt.HeadlessException|
         
Pops a custom file chooser dialog with a custom approve button. For example, the following code pops up a file chooser with a "Run Application" button (instead of the normal 
"Save" or "Open" button): 

filechooser.showDialog(parentFrame, "Run Application"); 

Alternatively, the following code does the same thing: 

JFileChooser chooser = new JFileChooser(null); chooser.setApproveButtonText("Run Application"); chooser.showDialog(parentFrame, null); 







The parent argument determines two things: the frame on which the open dialog depends and the component whose position the look and feel should consider when placing the dialog. 
If the parent is a Frame object (such as a JFrame) then the dialog depends on the frame and the look and feel positions the dialog relative to the frame (for example, centered 
over the frame). If the parent is a component, then the dialog depends on the frame containing the component, and is positioned relative to the component (for example, centered 
over the component). If the parent is null, then the dialog depends on no visible window, and it's placed in a look-and-feel-dependent position such as the center of the screen. 


    parent - the parent component of the dialog; can be null 
    approveButtonText - the text of the ApproveButton 

    Returns: the return state of the file chooser on popdown: 

JFileChooser.CANCEL_OPTION JFileChooser.APPROVE_OPTION JFileCHooser.ERROR_OPTION if an error occurs or the dialog is dismissed 

*javax.swing.JFileChooser.showOpenDialog(Component)*

public int showOpenDialog(java.awt.Component parent)
  throws |java.awt.HeadlessException|
         
Pops up an "Open File" file chooser dialog. Note that the text that appears in the approve button is determined by the L&F. 


    parent - the parent component of the dialog, can be null; see showDialog for details 

    Returns: the return state of the file chooser on popdown: 

JFileChooser.CANCEL_OPTION JFileChooser.APPROVE_OPTION JFileCHooser.ERROR_OPTION if an error occurs or the dialog is dismissed 

*javax.swing.JFileChooser.showSaveDialog(Component)*

public int showSaveDialog(java.awt.Component parent)
  throws |java.awt.HeadlessException|
         
Pops up a "Save File" file chooser dialog. Note that the text that appears in the approve button is determined by the L&F. 


    parent - the parent component of the dialog, can be null; see showDialog for details 

    Returns: the return state of the file chooser on popdown: 

JFileChooser.CANCEL_OPTION JFileChooser.APPROVE_OPTION JFileCHooser.ERROR_OPTION if an error occurs or the dialog is dismissed 

*javax.swing.JFileChooser.updateUI()*

public void updateUI()

Resets the UI property to a value from the current look and feel. 





*java.io.StringReader* *StringReader* A character stream whose source is a string.

public class StringReader
  extends    |java.io.Reader|

|java.io.StringReader_Description|
|java.io.StringReader_Fields|
|java.io.StringReader_Constructors|
|java.io.StringReader_Methods|

====================================================================================================================================================================================

*java.io.StringReader_Constructors*
|java.io.StringReader(String)|Create a new string reader.

*java.io.StringReader_Methods*
|java.io.StringReader.close()|Close the stream.
|java.io.StringReader.mark(int)|Mark the present position in the stream.
|java.io.StringReader.markSupported()|Tell whether this stream supports the mark() operation, which it does.
|java.io.StringReader.read()|Read a single character.
|java.io.StringReader.read(char[],int,int)|Read characters into a portion of an array.
|java.io.StringReader.ready()|Tell whether this stream is ready to be read.
|java.io.StringReader.reset()|Reset the stream to the most recent mark, or to the beginning of the  string if it has never been marked.
|java.io.StringReader.skip(long)|Skips the specified number of characters in the stream.

*java.io.StringReader_Description*

A character stream whose source is a string. 



*java.io.StringReader(String)*

public StringReader(java.lang.String s)

Create a new string reader. 

    s - String providing the character stream. 

*java.io.StringReader.close()*

public void close()

Close the stream. 



*java.io.StringReader.mark(int)*

public void mark(int readAheadLimit)
  throws |java.io.IOException|
         
Mark the present position in the stream. Subsequent calls to reset() will reposition the stream to this point. 


    readAheadLimit - Limit on the number of characters that may be read while still preserving the mark. Because the stream's input comes from a string, there is no actual limit, so this argument must 
       not be negative, but is otherwise ignored. 

*java.io.StringReader.markSupported()*

public boolean markSupported()

Tell whether this stream supports the mark() operation, which it does. 



*java.io.StringReader.read()*

public int read()
  throws |java.io.IOException|
         
Read a single character. 



    Returns: The character read, or -1 if the end of the stream has been reached 

*java.io.StringReader.read(char[],int,int)*

public int read(
  char[] cbuf,
  int off,
  int len)
  throws |java.io.IOException|
         
Read characters into a portion of an array. 


    cbuf - Destination buffer 
    off - Offset at which to start writing characters 
    len - Maximum number of characters to read 

    Returns: The number of characters read, or -1 if the end of the stream has been reached 

*java.io.StringReader.ready()*

public boolean ready()
  throws |java.io.IOException|
         
Tell whether this stream is ready to be read. 



    Returns: True if the next read() is guaranteed not to block for input 

*java.io.StringReader.reset()*

public void reset()
  throws |java.io.IOException|
         
Reset the stream to the most recent mark, or to the beginning of the string if it has never been marked. 



*java.io.StringReader.skip(long)*

public long skip(long ns)
  throws |java.io.IOException|
         
Skips the specified number of characters in the stream. Returns the number of characters that were skipped. 

The ns parameter may be negative, even though the skip method of the (|java.io.Reader|) superclass throws an exception in this case. Negative values of ns cause the stream to skip 
backwards. Negative return values indicate a skip backwards. It is not possible to skip backwards past the beginning of the string. 

If the entire string has been read or skipped, then this method has no effect and always returns 0. 





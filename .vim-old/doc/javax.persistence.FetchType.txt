*javax.persistence.FetchType* *FetchType* Defines strategies for fetching data f

public final enumFetchType
  extends    |java.lang.Enum|

|javax.persistence.FetchType_Description|
|javax.persistence.FetchType_Fields|
|javax.persistence.FetchType_Constructors|
|javax.persistence.FetchType_Methods|

================================================================================

*javax.persistence.FetchType_Methods*
|javax.persistence.FetchType.valueOf(String)|
|javax.persistence.FetchType.values()|

*javax.persistence.FetchType_Description*

Defines strategies for fetching data from the database. The EAGER strategy is a 
requirement on the persistence provider runtime that data must be eagerly 
fetched. The LAZY strategy is a hint to the persistence provider runtime that 
data should be fetched lazily when it is first accessed. The implementation is 
permitted to eagerly fetch data for which the LAZY strategy hint has been 
specified. In particular, lazy fetching might only be available for 
(|javax.persistence.Basic|) mappings for which property-based access is used. 



Example: Basic(fetch=LAZY) protected String getName() { return name; } 



*javax.persistence.FetchType.valueOf(String)*

public static |javax.persistence.FetchType| valueOf(java.lang.String name)





*javax.persistence.FetchType.values()*

public static final |javax.persistence.FetchType|[] values()







*javax.naming.CompositeName* *CompositeName* This class represents a composite name -- a sequence of 
 component names spanning multiple namespaces.

public class CompositeName
  extends    |java.lang.Object|
  implements |javax.naming.Name|

|javax.naming.CompositeName_Description|
|javax.naming.CompositeName_Fields|
|javax.naming.CompositeName_Constructors|
|javax.naming.CompositeName_Methods|

====================================================================================================================================================================================

*javax.naming.CompositeName_Constructors*
|javax.naming.CompositeName()|Constructs a new empty composite name.
|javax.naming.CompositeName(Enumeration<String>)|Constructs a new composite name instance using the components  specified by 'comps'.
|javax.naming.CompositeName(String)|Constructs a new composite name instance by parsing the string n  using the composite name syntax (left-to-right, slash separated).

*javax.naming.CompositeName_Methods*
|javax.naming.CompositeName.add(int,String)|Adds a single component at a specified position within this  composite name.
|javax.naming.CompositeName.add(String)|Adds a single component to the end of this composite name.
|javax.naming.CompositeName.addAll(int,Name)|Adds the components of a composite name -- in order -- at a specified  position within this composite name.
|javax.naming.CompositeName.addAll(Name)|Adds the components of a composite name -- in order -- to the end of  this composite name.
|javax.naming.CompositeName.clone()|Generates a copy of this composite name.
|javax.naming.CompositeName.compareTo(Object)|Compares this CompositeName with the specified Object for order.
|javax.naming.CompositeName.endsWith(Name)|Determines whether a composite name is a suffix of this composite name.
|javax.naming.CompositeName.equals(Object)|Determines whether two composite names are equal.
|javax.naming.CompositeName.get(int)|Retrieves a component of this composite name.
|javax.naming.CompositeName.getAll()|Retrieves the components of this composite name as an enumeration  of strings.
|javax.naming.CompositeName.getPrefix(int)|Creates a composite name whose components consist of a prefix of the  components in this composite name.
|javax.naming.CompositeName.getSuffix(int)|Creates a composite name whose components consist of a suffix of the  components in this composite name.
|javax.naming.CompositeName.hashCode()|Computes the hash code of this composite name.
|javax.naming.CompositeName.isEmpty()|Determines whether this composite name is empty.
|javax.naming.CompositeName.remove(int)|Deletes a component from this composite name.
|javax.naming.CompositeName.size()|Retrieves the number of components in this composite name.
|javax.naming.CompositeName.startsWith(Name)|Determines whether a composite name is a prefix of this composite name.
|javax.naming.CompositeName.toString()|Generates the string representation of this composite name.

*javax.naming.CompositeName_Description*

This class represents a composite name -- a sequence of component names spanning multiple namespaces. Each component is a string name from the namespace of a naming system. If the 
component comes from a hierarchical namespace, that component can be further parsed into its atomic parts by using the CompoundName class. 

The components of a composite name are numbered. The indexes of a composite name with N components range from 0 up to, but not including, N. This range may be written as [0,N). 
The most significant component is at index 0. An empty composite name has no components. 

JNDI Composite Name Syntax JNDI defines a standard string representation for composite names. This representation is the concatenation of the components of a composite name from 
left to right using the component separator (a forward slash character (/)) to separate each component. The JNDI syntax defines the following meta characters: 

escape (backward slash \), quote characters (single (') and double quotes (")), and component separator (forward slash character (/)). 

Any occurrence of a leading quote, an escape preceding any meta character, an escape at the end of a component, or a component separator character in an unquoted component must be 
preceded by an escape character when that component is being composed into a composite name string. Alternatively, to avoid adding escape characters as described, the entire 
component can be quoted using matching single quotes or matching double quotes. A single quote occurring within a double-quoted component is not considered a meta character (and 
need not be escaped), and vice versa. 

When two composite names are compared, the case of the characters is significant. 

A leading component separator (the composite name string begins with a separator) denotes a leading empty component (a component consisting of an empty string). A trailing 
component separator (the composite name string ends with a separator) denotes a trailing empty component. Adjacent component separators denote an empty component. 

Composite Name Examples This table shows examples of some composite names. Each row shows the string form of a composite name and its corresponding structural form 
(CompositeName). 

String Name CompositeName 

"" 

{} (the empty name == new CompositeName("") == new CompositeName()) 

"x" 

{"x"} 

"x/y" 

{"x", "y"} 

"x/" {"x", ""} 

"/x" {"", "x"} 

"/" {""} 

"//" {"", ""} 

"/x/" {"", "x", ""} 

"x//y" {"x", "", "y"} 



Composition Examples Here are some composition examples. The right column shows composing string composite names while the left column shows composing the corresponding 
CompositeNames. Notice that composing the string forms of two composite names simply involves concatenating their string forms together. 



String Names CompositeNames 

"x/y"		+ "/"	= x/y/ 

{"x", "y"}	+ {""}	= {"x", "y", ""} 

""		+ "x"	= "x" 

{}		+ {"x"}	= {"x"} 

"/"		+ "x"	= "/x" 

{""}		+ {"x"} = {"", "x"} 

"x" + ""	+ ""	= "x" 

{"x"} + {}	+ {}	= {"x"} 

Multithreaded Access A CompositeName instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a CompositeName should lock 
the object. 



*javax.naming.CompositeName()*

public CompositeName()

Constructs a new empty composite name. Such a name returns true when isEmpty() is invoked on it. 


*javax.naming.CompositeName(Enumeration<String>)*

protected CompositeName(java.util.Enumeration<java.lang.String> comps)

Constructs a new composite name instance using the components specified by 'comps'. This protected method is intended to be to be used by subclasses of CompositeName when they 
override methods such as clone(), getPrefix(), getSuffix(). 

    comps - A non-null enumeration containing the components for the new composite name. Each element is of class String. The enumeration will be consumed to extract its elements. 

*javax.naming.CompositeName(String)*

public CompositeName(java.lang.String n)
  throws |javax.naming.InvalidNameException|
         
Constructs a new composite name instance by parsing the string n using the composite name syntax (left-to-right, slash separated). The composite name syntax is described in detail 
in the class description. 

    n - The non-null string to parse. 

*javax.naming.CompositeName.add(int,String)*

public |javax.naming.Name| add(
  int posn,
  java.lang.String comp)
  throws |javax.naming.InvalidNameException|
         
Adds a single component at a specified position within this composite name. Components of this composite name at or after the index of the new component are shifted up by one 
(away from index 0) to accommodate the new component. 


    comp - The non-null component to add. 
    posn - The index at which to add the new component. Must be in the range [0,size()]. 

    Returns: The updated CompositeName, not a new one. Cannot be null. 

*javax.naming.CompositeName.add(String)*

public |javax.naming.Name| add(java.lang.String comp)
  throws |javax.naming.InvalidNameException|
         
Adds a single component to the end of this composite name. 


    comp - The non-null component to add. 

    Returns: The updated CompositeName, not a new one. Cannot be null. 

*javax.naming.CompositeName.addAll(int,Name)*

public |javax.naming.Name| addAll(
  int posn,
  javax.naming.Name n)
  throws |javax.naming.InvalidNameException|
         
Adds the components of a composite name -- in order -- at a specified position within this composite name. Components of this composite name at or after the index of the first new 
component are shifted up (away from index 0) to accommodate the new components. 


    n - The non-null components to add. 
    posn - The index in this name at which to add the new components. Must be in the range [0,size()]. 

    Returns: The updated CompositeName, not a new one. Cannot be null. 

*javax.naming.CompositeName.addAll(Name)*

public |javax.naming.Name| addAll(javax.naming.Name suffix)
  throws |javax.naming.InvalidNameException|
         
Adds the components of a composite name -- in order -- to the end of this composite name. 


    suffix - The non-null components to add. 

    Returns: The updated CompositeName, not a new one. Cannot be null. 

*javax.naming.CompositeName.clone()*

public |java.lang.Object| clone()

Generates a copy of this composite name. Changes to the components of this composite name won't affect the new copy and vice versa. 



    Returns: A non-null copy of this composite name. 

*javax.naming.CompositeName.compareTo(Object)*

public int compareTo(java.lang.Object obj)

Compares this CompositeName with the specified Object for order. Returns a negative integer, zero, or a positive integer as this Name is less than, equal to, or greater than the 
given Object. 

If obj is null or not an instance of CompositeName, ClassCastException is thrown. 

See equals() for what it means for two composite names to be equal. If two composite names are equal, 0 is returned. 

Ordering of composite names follows the lexicographical rules for string comparison, with the extension that this applies to all the components in the composite name. The effect 
is as if all the components were lined up in their specified ordered and the lexicographical rules applied over the two line-ups. If this composite name is "lexicographically" 
lesser than obj, a negative number is returned. If this composite name is "lexicographically" greater than obj, a positive number is returned. 


    obj - The non-null object to compare against. 

    Returns: a negative integer, zero, or a positive integer as this Name is less than, equal to, or greater than the given Object. 

*javax.naming.CompositeName.endsWith(Name)*

public boolean endsWith(javax.naming.Name n)

Determines whether a composite name is a suffix of this composite name. A composite name 'n' is a suffix if it it is equal to getSuffix(size()-n.size())--in other words, this 
composite name ends with 'n'. If n is null or not a composite name, false is returned. 


    n - The possibly null name to check. 

    Returns: true if n is a CompositeName and is a suffix of this composite name, false otherwise. 

*javax.naming.CompositeName.equals(Object)*

public boolean equals(java.lang.Object obj)

Determines whether two composite names are equal. If obj is null or not a composite name, false is returned. Two composite names are equal if each component in one is equal to the 
corresponding component in the other. This implies both have the same number of components, and each component's equals() test against the corresponding component in the other 
name returns true. 


    obj - The possibly null object to compare against. 

    Returns: true if obj is equal to this composite name, false otherwise. 

*javax.naming.CompositeName.get(int)*

public |java.lang.String| get(int posn)

Retrieves a component of this composite name. 


    posn - The 0-based index of the component to retrieve. Must be in the range [0,size()). 

    Returns: The non-null component at index posn. 

*javax.naming.CompositeName.getAll()*

public |java.util.Enumeration|<String> getAll()

Retrieves the components of this composite name as an enumeration of strings. The effects of updates to this composite name on this enumeration is undefined. 



    Returns: A non-null enumeration of the components of this composite name. Each element of the enumeration is of class String. 

*javax.naming.CompositeName.getPrefix(int)*

public |javax.naming.Name| getPrefix(int posn)

Creates a composite name whose components consist of a prefix of the components in this composite name. Subsequent changes to this composite name does not affect the name that is 
returned. 


    posn - The 0-based index of the component at which to stop. Must be in the range [0,size()]. 

    Returns: A composite name consisting of the components at indexes in the range [0,posn). 

*javax.naming.CompositeName.getSuffix(int)*

public |javax.naming.Name| getSuffix(int posn)

Creates a composite name whose components consist of a suffix of the components in this composite name. Subsequent changes to this composite name does not affect the name that is 
returned. 


    posn - The 0-based index of the component at which to start. Must be in the range [0,size()]. 

    Returns: A composite name consisting of the components at indexes in the range [posn,size()). If posn is equal to size(), an empty composite name is returned. 

*javax.naming.CompositeName.hashCode()*

public int hashCode()

Computes the hash code of this composite name. The hash code is the sum of the hash codes of individual components of this composite name. 



    Returns: An int representing the hash code of this name. 

*javax.naming.CompositeName.isEmpty()*

public boolean isEmpty()

Determines whether this composite name is empty. A composite name is empty if it has zero components. 



    Returns: true if this composite name is empty, false otherwise. 

*javax.naming.CompositeName.remove(int)*

public |java.lang.Object| remove(int posn)
  throws |javax.naming.InvalidNameException|
         
Deletes a component from this composite name. The component of this composite name at position 'posn' is removed, and components at indices greater than 'posn' are shifted down 
(towards index 0) by one. 


    posn - The index of the component to delete. Must be in the range [0,size()). 

    Returns: The component removed (a String). 

*javax.naming.CompositeName.size()*

public int size()

Retrieves the number of components in this composite name. 



    Returns: The nonnegative number of components in this composite name. 

*javax.naming.CompositeName.startsWith(Name)*

public boolean startsWith(javax.naming.Name n)

Determines whether a composite name is a prefix of this composite name. A composite name 'n' is a prefix if it is equal to getPrefix(n.size())--in other words, this composite name 
starts with 'n'. If 'n' is null or not a composite name, false is returned. 


    n - The possibly null name to check. 

    Returns: true if n is a CompositeName and is a prefix of this composite name, false otherwise. 

*javax.naming.CompositeName.toString()*

public |java.lang.String| toString()

Generates the string representation of this composite name. The string representation consists of enumerating in order each component of the composite name and separating each 
component by a forward slash character. Quoting and escape characters are applied where necessary according to the JNDI syntax, which is described in the class description. An 
empty component is represented by an empty string. 

The string representation thus generated can be passed to the CompositeName constructor to create a new equivalent composite name. 



    Returns: A non-null string representation of this composite name. 



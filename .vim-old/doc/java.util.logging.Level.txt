*java.util.logging.Level* *Level* The Level class defines a set of standard logging levels that
 can be used to control logging output.

public class Level
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.util.logging.Level_Description|
|java.util.logging.Level_Fields|
|java.util.logging.Level_Constructors|
|java.util.logging.Level_Methods|

====================================================================================================================================================================================

*java.util.logging.Level_Fields*
|java.util.logging.Level_java.util.logging.Level.ALL|
|java.util.logging.Level_java.util.logging.Level.CONFIG|
|java.util.logging.Level_java.util.logging.Level.FINE|
|java.util.logging.Level_java.util.logging.Level.FINER|
|java.util.logging.Level_java.util.logging.Level.FINEST|
|java.util.logging.Level_java.util.logging.Level.INFO|
|java.util.logging.Level_java.util.logging.Level.OFF|
|java.util.logging.Level_java.util.logging.Level.SEVERE|
|java.util.logging.Level_java.util.logging.Level.WARNING|

*java.util.logging.Level_Constructors*
|java.util.logging.Level(String,int)|Create a named Level with a given integer value.
|java.util.logging.Level(String,int,String)|Create a named Level with a given integer value and a  given localization resource name.

*java.util.logging.Level_Methods*
|java.util.logging.Level.equals(Object)|Compare two objects for value equality.
|java.util.logging.Level.getLocalizedName()|Return the localized string name of the Level, for  the current default locale.
|java.util.logging.Level.getName()|Return the non-localized string name of the Level.
|java.util.logging.Level.getResourceBundleName()|Return the level's localization resource bundle name, or  null if no localization bundle is defined.
|java.util.logging.Level.hashCode()|Generate a hashcode.
|java.util.logging.Level.intValue()|Get the integer value for this level.
|java.util.logging.Level.parse(String)|Parse a level name string into a Level.
|java.util.logging.Level.toString()|

*java.util.logging.Level_Description*

The Level class defines a set of standard logging levels that can be used to control logging output. The logging Level objects are ordered and are specified by ordered integers. 
Enabling logging at a given level also enables logging at all higher levels. 

Clients should normally use the predefined Level constants such as Level.SEVERE. 

The levels in descending order are: 

SEVERE (highest value) WARNING INFO CONFIG FINE FINER FINEST (lowest value) 

In addition there is a level OFF that can be used to turn off logging, and a level ALL that can be used to enable logging of all messages. 

It is possible for third parties to define additional logging levels by subclassing Level. In such cases subclasses should take care to chose unique integer level values and to 
ensure that they maintain the Object uniqueness property across serialization by defining a suitable readResolve method. 



*java.util.logging.Level_java.util.logging.Level.ALL*

ALL indicates that all messages should be logged. This level is initialized to Integer.MIN_VALUE. 


*java.util.logging.Level_java.util.logging.Level.CONFIG*

CONFIG is a message level for static configuration messages. 

CONFIG messages are intended to provide a variety of static configuration information, to assist in debugging problems that may be associated with particular configurations. For 
example, CONFIG message might include the CPU type, the graphics depth, the GUI look-and-feel, etc. This level is initialized to 700. 


*java.util.logging.Level_java.util.logging.Level.FINE*

FINE is a message level providing tracing information. 

All of FINE, FINER, and FINEST are intended for relatively detailed tracing. The exact meaning of the three levels will vary between subsystems, but in general, FINEST should be 
used for the most voluminous detailed output, FINER for somewhat less detailed output, and FINE for the lowest volume (and most important) messages. 

In general the FINE level should be used for information that will be broadly interesting to developers who do not have a specialized interest in the specific subsystem. 

FINE messages might include things like minor (recoverable) failures. Issues indicating potential performance problems are also worth logging as FINE. This level is initialized to 
500. 


*java.util.logging.Level_java.util.logging.Level.FINER*

FINER indicates a fairly detailed tracing message. By default logging calls for entering, returning, or throwing an exception are traced at this level. This level is initialized 
to 400. 


*java.util.logging.Level_java.util.logging.Level.FINEST*

FINEST indicates a highly detailed tracing message. This level is initialized to 300. 


*java.util.logging.Level_java.util.logging.Level.INFO*

INFO is a message level for informational messages. 

Typically INFO messages will be written to the console or its equivalent. So the INFO level should only be used for reasonably significant messages that will make sense to end 
users and system admins. This level is initialized to 800. 


*java.util.logging.Level_java.util.logging.Level.OFF*

OFF is a special level that can be used to turn off logging. This level is initialized to Integer.MAX_VALUE. 


*java.util.logging.Level_java.util.logging.Level.SEVERE*

SEVERE is a message level indicating a serious failure. 

In general SEVERE messages should describe events that are of considerable importance and which will prevent normal program execution. They should be reasonably intelligible to 
end users and to system administrators. This level is initialized to 1000. 


*java.util.logging.Level_java.util.logging.Level.WARNING*

WARNING is a message level indicating a potential problem. 

In general WARNING messages should describe events that will be of interest to end users or system managers, or which indicate potential problems. This level is initialized to 
900. 



*java.util.logging.Level(String,int)*

protected Level(
  java.lang.String name,
  int value)

Create a named Level with a given integer value. 

Note that this constructor is "protected" to allow subclassing. In general clients of logging should use one of the constant Level objects such as SEVERE or FINEST. However, if 
clients need to add new logging levels, they may subclass Level and define new constants. 

    name - the name of the Level, for example "SEVERE". 
    value - an integer value for the level. 

*java.util.logging.Level(String,int,String)*

protected Level(
  java.lang.String name,
  int value,
  java.lang.String resourceBundleName)

Create a named Level with a given integer value and a given localization resource name. 

    name - the name of the Level, for example "SEVERE". 
    value - an integer value for the level. 
    resourceBundleName - name of a resource bundle to use in localizing the given name. If the resourceBundleName is null or an empty string, it is ignored. 

*java.util.logging.Level.equals(Object)*

public boolean equals(java.lang.Object ox)

Compare two objects for value equality. 



    Returns: true if and only if the two objects have the same level value. 

*java.util.logging.Level.getLocalizedName()*

public |java.lang.String| getLocalizedName()

Return the localized string name of the Level, for the current default locale. 

If no localization information is available, the non-localized name is returned. 



    Returns: localized name 

*java.util.logging.Level.getName()*

public |java.lang.String| getName()

Return the non-localized string name of the Level. 



    Returns: non-localized name 

*java.util.logging.Level.getResourceBundleName()*

public |java.lang.String| getResourceBundleName()

Return the level's localization resource bundle name, or null if no localization bundle is defined. 



    Returns: localization resource bundle name 

*java.util.logging.Level.hashCode()*

public int hashCode()

Generate a hashcode. 



    Returns: a hashcode based on the level value 

*java.util.logging.Level.intValue()*

public final int intValue()

Get the integer value for this level. This integer value can be used for efficient ordering comparisons between Level objects. 



    Returns: the integer value for this level. 

*java.util.logging.Level.parse(String)*

public static synchronized |java.util.logging.Level| parse(java.lang.String name)
  throws |java.lang.IllegalArgumentException|
         
Parse a level name string into a Level. 

The argument string may consist of either a level name or an integer value. 

For example: 

"SEVERE" "1000" 


    name - string to be parsed 

    Returns: The parsed value. Passing an integer that corresponds to a known name (eg 700) will return the associated name (eg CONFIG). Passing an integer that does not (eg 1) will return a 
             new level name initialized to that value. 

*java.util.logging.Level.toString()*

public final |java.lang.String| toString()





    Returns: the non-localized name of the Level, for example "INFO". 



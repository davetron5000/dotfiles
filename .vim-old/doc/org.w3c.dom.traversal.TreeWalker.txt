*org.w3c.dom.traversal.TreeWalker* *TreeWalker* TreeWalker objects are used to n

public interface interface TreeWalker


|org.w3c.dom.traversal.TreeWalker_Description|
|org.w3c.dom.traversal.TreeWalker_Fields|
|org.w3c.dom.traversal.TreeWalker_Constructors|
|org.w3c.dom.traversal.TreeWalker_Methods|

================================================================================

*org.w3c.dom.traversal.TreeWalker_Methods*
|org.w3c.dom.traversal.TreeWalker.firstChild()|Moves the TreeWalker to the firs
|org.w3c.dom.traversal.TreeWalker.getCurrentNode()|The node at which the TreeWa
|org.w3c.dom.traversal.TreeWalker.getExpandEntityReferences()|The value of this
|org.w3c.dom.traversal.TreeWalker.getFilter()|The filter used to screen nodes.
|org.w3c.dom.traversal.TreeWalker.getRoot()|The root node of the TreeWalker, as
|org.w3c.dom.traversal.TreeWalker.getWhatToShow()|This attribute determines whi
|org.w3c.dom.traversal.TreeWalker.lastChild()|Moves the TreeWalker to the last 
|org.w3c.dom.traversal.TreeWalker.nextNode()|Moves the TreeWalker to the next v
|org.w3c.dom.traversal.TreeWalker.nextSibling()|Moves the TreeWalker to the nex
|org.w3c.dom.traversal.TreeWalker.parentNode()|Moves to and returns the closest
|org.w3c.dom.traversal.TreeWalker.previousNode()|Moves the TreeWalker to the pr
|org.w3c.dom.traversal.TreeWalker.previousSibling()|Moves the TreeWalker to the
|org.w3c.dom.traversal.TreeWalker.setCurrentNode(Node)|The node at which the Tr

*org.w3c.dom.traversal.TreeWalker_Description*

TreeWalker objects are used to navigate a document tree or subtree using the 
view of the document defined by their whatToShow flags and filter (if any). Any 
function which performs navigation using a TreeWalker will automatically 
support any view defined by a TreeWalker. Omitting nodes from the logical view 
of a subtree can result in a structure that is substantially different from the 
same subtree in the complete, unfiltered document. Nodes that are siblings in 
the TreeWalker view may be children of different, widely separated nodes in the 
original view. For instance, consider a NodeFilter that skips all nodes except 
for Text nodes and the root node of a document. In the logical view that 
results, all text nodes will be siblings and appear as direct children of the 
root node, no matter how deeply nested the structure of the original document. 
See also the Document Object Model (DOM) Level 2 Traversal and Range 
Specification. 


*org.w3c.dom.traversal.TreeWalker.firstChild()*

public |org.w3c.dom.Node| firstChild()

Moves the TreeWalker to the first visible child of the current node, and 
returns the new node. If the current node has no visible children, returns 
null, and retains the current node. 


    Returns: The new node, or null if the current node has no visible children in the 
             TreeWalker's logical view. 
*org.w3c.dom.traversal.TreeWalker.getCurrentNode()*

public |org.w3c.dom.Node| getCurrentNode()

The node at which the TreeWalker is currently positioned. Alterations to the 
DOM tree may cause the current node to no longer be accepted by the 
TreeWalker's associated filter. currentNode may also be explicitly set to any 
node, whether or not it is within the subtree specified by the root node or 
would be accepted by the filter and whatToShow flags. Further traversal occurs 
relative to currentNode even if it is not part of the current view, by applying 
the filters in the requested direction; if no traversal is possible, 
currentNode is not changed. 


*org.w3c.dom.traversal.TreeWalker.getExpandEntityReferences()*

public boolean getExpandEntityReferences()

The value of this flag determines whether the children of entity reference 
nodes are visible to the TreeWalker. If false, these children and their 
descendants will be rejected. Note that this rejection takes precedence over 
whatToShow and the filter, if any. To produce a view of the document that has 
entity references expanded and does not expose the entity reference node 
itself, use the whatToShow flags to hide the entity reference node and set 
expandEntityReferences to true when creating the TreeWalker. To produce a view 
of the document that has entity reference nodes but no entity expansion, use 
the whatToShow flags to show the entity reference node and set 
expandEntityReferences to false. 


*org.w3c.dom.traversal.TreeWalker.getFilter()*

public |org.w3c.dom.traversal.NodeFilter| getFilter()

The filter used to screen nodes. 


*org.w3c.dom.traversal.TreeWalker.getRoot()*

public |org.w3c.dom.Node| getRoot()

The root node of the TreeWalker, as specified when it was created. 


*org.w3c.dom.traversal.TreeWalker.getWhatToShow()*

public int getWhatToShow()

This attribute determines which node types are presented via the TreeWalker. 
The available set of constants is defined in the NodeFilter interface. Nodes 
not accepted by whatToShow will be skipped, but their children may still be 
considered. Note that this skip takes precedence over the filter, if any. 


*org.w3c.dom.traversal.TreeWalker.lastChild()*

public |org.w3c.dom.Node| lastChild()

Moves the TreeWalker to the last visible child of the current node, and returns 
the new node. If the current node has no visible children, returns null, and 
retains the current node. 


    Returns: The new node, or null if the current node has no children in the TreeWalker's 
             logical view. 
*org.w3c.dom.traversal.TreeWalker.nextNode()*

public |org.w3c.dom.Node| nextNode()

Moves the TreeWalker to the next visible node in document order relative to the 
current node, and returns the new node. If the current node has no next node, 
or if the search for nextNode attempts to step upward from the TreeWalker's 
root node, returns null, and retains the current node. 


    Returns: The new node, or null if the current node has no next node in the TreeWalker's 
             logical view. 
*org.w3c.dom.traversal.TreeWalker.nextSibling()*

public |org.w3c.dom.Node| nextSibling()

Moves the TreeWalker to the next sibling of the current node, and returns the 
new node. If the current node has no visible next sibling, returns null, and 
retains the current node. 


    Returns: The new node, or null if the current node has no next sibling. in the 
             TreeWalker's logical view. 
*org.w3c.dom.traversal.TreeWalker.parentNode()*

public |org.w3c.dom.Node| parentNode()

Moves to and returns the closest visible ancestor node of the current node. If 
the search for parentNode attempts to step upward from the TreeWalker's root 
node, or if it fails to find a visible ancestor node, this method retains the 
current position and returns null. 


    Returns: The new parent node, or null if the current node has no parent in the 
             TreeWalker's logical view. 
*org.w3c.dom.traversal.TreeWalker.previousNode()*

public |org.w3c.dom.Node| previousNode()

Moves the TreeWalker to the previous visible node in document order relative to 
the current node, and returns the new node. If the current node has no previous 
node, or if the search for previousNode attempts to step upward from the 
TreeWalker's root node, returns null, and retains the current node. 


    Returns: The new node, or null if the current node has no previous node in the 
             TreeWalker's logical view. 
*org.w3c.dom.traversal.TreeWalker.previousSibling()*

public |org.w3c.dom.Node| previousSibling()

Moves the TreeWalker to the previous sibling of the current node, and returns 
the new node. If the current node has no visible previous sibling, returns 
null, and retains the current node. 


    Returns: The new node, or null if the current node has no previous sibling. in the 
             TreeWalker's logical view. 
*org.w3c.dom.traversal.TreeWalker.setCurrentNode(Node)*

public void setCurrentNode(org.w3c.dom.Node currentNode)
  throws |org.w3c.dom.DOMException|
         
The node at which the TreeWalker is currently positioned. Alterations to the 
DOM tree may cause the current node to no longer be accepted by the 
TreeWalker's associated filter. currentNode may also be explicitly set to any 
node, whether or not it is within the subtree specified by the root node or 
would be accepted by the filter and whatToShow flags. Further traversal occurs 
relative to currentNode even if it is not part of the current view, by applying 
the filters in the requested direction; if no traversal is possible, 
currentNode is not changed. 




*javax.swing.JMenuItem* *JMenuItem* An implementation of an item in a menu.

public class JMenuItem
  extends    |javax.swing.AbstractButton|
  implements |javax.accessibility.Accessible|
             |javax.swing.MenuElement|

|javax.swing.JMenuItem_Description|
|javax.swing.JMenuItem_Fields|
|javax.swing.JMenuItem_Constructors|
|javax.swing.JMenuItem_Methods|

====================================================================================================================================================================================

*javax.swing.JMenuItem_Constructors*
|javax.swing.JMenuItem()|Creates a JMenuItem with no set text or icon.
|javax.swing.JMenuItem(Action)|Creates a menu item whose properties are taken from the   specified Action.
|javax.swing.JMenuItem(Icon)|Creates a JMenuItem with the specified icon.
|javax.swing.JMenuItem(String)|Creates a JMenuItem with the specified text.
|javax.swing.JMenuItem(String,Icon)|Creates a JMenuItem with the specified text and icon.
|javax.swing.JMenuItem(String,int)|Creates a JMenuItem with the specified text and  keyboard mnemonic.

*javax.swing.JMenuItem_Methods*
|javax.swing.JMenuItem.addMenuDragMouseListener(MenuDragMouseListener)|Adds a MenuDragMouseListener to the menu item.
|javax.swing.JMenuItem.addMenuKeyListener(MenuKeyListener)|Adds a MenuKeyListener to the menu item.
|javax.swing.JMenuItem.configurePropertiesFromAction(Action)|Factory method which sets the ActionEvent source's  properties according to values from the Action instance.
|javax.swing.JMenuItem.createActionPropertyChangeListener(Action)|Factory method which creates the PropertyChangeListener  used to update the ActionEvent source as properties  cha
|javax.swing.JMenuItem.fireMenuDragMouseDragged(MenuDragMouseEvent)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.JMenuItem.fireMenuDragMouseEntered(MenuDragMouseEvent)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.JMenuItem.fireMenuDragMouseExited(MenuDragMouseEvent)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.JMenuItem.fireMenuDragMouseReleased(MenuDragMouseEvent)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.JMenuItem.fireMenuKeyPressed(MenuKeyEvent)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.JMenuItem.fireMenuKeyReleased(MenuKeyEvent)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.JMenuItem.fireMenuKeyTyped(MenuKeyEvent)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.JMenuItem.getAccelerator()|Returns the KeyStroke which serves as an accelerator   for the menu item.
|javax.swing.JMenuItem.getAccessibleContext()|Returns the AccessibleContext associated with this   JMenuItem.
|javax.swing.JMenuItem.getComponent()|Returns the java.awt.Component used to paint  this object.
|javax.swing.JMenuItem.getMenuDragMouseListeners()|Returns an array of all the MenuDragMouseListeners added  to this JMenuItem with addMenuDragMouseListener().
|javax.swing.JMenuItem.getMenuKeyListeners()|Returns an array of all the MenuKeyListeners added  to this JMenuItem with addMenuKeyListener().
|javax.swing.JMenuItem.getSubElements()|This method returns an array containing the sub-menu  components for this menu component.
|javax.swing.JMenuItem.getUIClassID()|Returns the suffix used to construct the name of the Lclass used to  render this component.
|javax.swing.JMenuItem.init(String,Icon)|Initializes the menu item with the specified text and icon.
|javax.swing.JMenuItem.isArmed()|Returns whether the menu item is "armed".
|javax.swing.JMenuItem.menuSelectionChanged(boolean)|Called by the MenuSelectionManager when the  MenuElement is selected or unselected.
|javax.swing.JMenuItem.paramString()|Returns a string representation of this JMenuItem.
|javax.swing.JMenuItem.processKeyEvent(KeyEvent,MenuElement[],MenuSelectionManager)|Processes a key event forwarded from the   MenuSelectionManager and changes the menu selection,
|javax.swing.JMenuItem.processMenuDragMouseEvent(MenuDragMouseEvent)|Handles mouse drag in a menu.
|javax.swing.JMenuItem.processMenuKeyEvent(MenuKeyEvent)|Handles a keystroke in a menu.
|javax.swing.JMenuItem.processMouseEvent(MouseEvent,MenuElement[],MenuSelectionManager)|Processes a mouse event forwarded from the  MenuSelectionManager and changes the menu  sele
|javax.swing.JMenuItem.removeMenuDragMouseListener(MenuDragMouseListener)|Removes a MenuDragMouseListener from the menu item.
|javax.swing.JMenuItem.removeMenuKeyListener(MenuKeyListener)|Removes a MenuKeyListener from the menu item.
|javax.swing.JMenuItem.setAccelerator(KeyStroke)|Sets the key combination which invokes the menu item's  action listeners without navigating the menu hierarchy.
|javax.swing.JMenuItem.setArmed(boolean)|Identifies the menu item as "armed".
|javax.swing.JMenuItem.setEnabled(boolean)|Enables or disables the menu item.
|javax.swing.JMenuItem.setUI(MenuItemUI)|Sets the look and feel object that renders this component.
|javax.swing.JMenuItem.updateUI()|Resets the UI property with a value from the current look and feel.

*javax.swing.JMenuItem_Description*

An implementation of an item in a menu. A menu item is essentially a button sitting in a list. When the user selects the "button", the action associated with the menu item is 
performed. A JMenuItem contained in a JPopupMenu performs exactly that function. 

For further documentation and for examples, see How to Use Menus in The Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.JMenuItem()*

public JMenuItem()

Creates a JMenuItem with no set text or icon. 


*javax.swing.JMenuItem(Action)*

public JMenuItem(javax.swing.Action a)

Creates a menu item whose properties are taken from the specified Action. 

    a - the action of the JMenuItem 

*javax.swing.JMenuItem(Icon)*

public JMenuItem(javax.swing.Icon icon)

Creates a JMenuItem with the specified icon. 

    icon - the icon of the JMenuItem 

*javax.swing.JMenuItem(String)*

public JMenuItem(java.lang.String text)

Creates a JMenuItem with the specified text. 

    text - the text of the JMenuItem 

*javax.swing.JMenuItem(String,Icon)*

public JMenuItem(
  java.lang.String text,
  javax.swing.Icon icon)

Creates a JMenuItem with the specified text and icon. 

    text - the text of the JMenuItem 
    icon - the icon of the JMenuItem 

*javax.swing.JMenuItem(String,int)*

public JMenuItem(
  java.lang.String text,
  int mnemonic)

Creates a JMenuItem with the specified text and keyboard mnemonic. 

    text - the text of the JMenuItem 
    mnemonic - the keyboard mnemonic for the JMenuItem 

*javax.swing.JMenuItem.addMenuDragMouseListener(MenuDragMouseListener)*

public void addMenuDragMouseListener(javax.swing.event.MenuDragMouseListener l)

Adds a MenuDragMouseListener to the menu item. 


    l - the MenuDragMouseListener to be added 

*javax.swing.JMenuItem.addMenuKeyListener(MenuKeyListener)*

public void addMenuKeyListener(javax.swing.event.MenuKeyListener l)

Adds a MenuKeyListener to the menu item. 


    l - the MenuKeyListener to be added 

*javax.swing.JMenuItem.configurePropertiesFromAction(Action)*

protected void configurePropertiesFromAction(javax.swing.Action a)

Factory method which sets the ActionEvent source's properties according to values from the Action instance. The properties which are set may differ for subclasses. By default, 
this method sets the same properties as AbstractButton.configurePropertiesFromAction(), plus Accelerator. 


    a - the Action from which to get the properties, or null 

*javax.swing.JMenuItem.createActionPropertyChangeListener(Action)*

protected |java.beans.PropertyChangeListener| createActionPropertyChangeListener(javax.swing.Action a)

Factory method which creates the PropertyChangeListener used to update the ActionEvent source as properties change on its Action instance. Subclasses may override this in order to 
provide their own PropertyChangeListener if the set of properties which should be kept up to date differs. 

Note that PropertyChangeListeners should avoid holding strong references to the ActionEvent source, as this may hinder garbage collection of the ActionEvent source and all 
components in its containment hierarchy. 


    a - the Action from which to get the properties, or null 

*javax.swing.JMenuItem.fireMenuDragMouseDragged(MenuDragMouseEvent)*

protected void fireMenuDragMouseDragged(javax.swing.event.MenuDragMouseEvent event)

Notifies all listeners that have registered interest for notification on this event type. 


    event - a MenuDragMouseEvent 

*javax.swing.JMenuItem.fireMenuDragMouseEntered(MenuDragMouseEvent)*

protected void fireMenuDragMouseEntered(javax.swing.event.MenuDragMouseEvent event)

Notifies all listeners that have registered interest for notification on this event type. 


    event - a MenuMouseDragEvent 

*javax.swing.JMenuItem.fireMenuDragMouseExited(MenuDragMouseEvent)*

protected void fireMenuDragMouseExited(javax.swing.event.MenuDragMouseEvent event)

Notifies all listeners that have registered interest for notification on this event type. 


    event - a MenuDragMouseEvent 

*javax.swing.JMenuItem.fireMenuDragMouseReleased(MenuDragMouseEvent)*

protected void fireMenuDragMouseReleased(javax.swing.event.MenuDragMouseEvent event)

Notifies all listeners that have registered interest for notification on this event type. 


    event - a MenuDragMouseEvent 

*javax.swing.JMenuItem.fireMenuKeyPressed(MenuKeyEvent)*

protected void fireMenuKeyPressed(javax.swing.event.MenuKeyEvent event)

Notifies all listeners that have registered interest for notification on this event type. 


    event - a MenuKeyEvent 

*javax.swing.JMenuItem.fireMenuKeyReleased(MenuKeyEvent)*

protected void fireMenuKeyReleased(javax.swing.event.MenuKeyEvent event)

Notifies all listeners that have registered interest for notification on this event type. 


    event - a MenuKeyEvent 

*javax.swing.JMenuItem.fireMenuKeyTyped(MenuKeyEvent)*

protected void fireMenuKeyTyped(javax.swing.event.MenuKeyEvent event)

Notifies all listeners that have registered interest for notification on this event type. 


    event - a MenuKeyEvent 

*javax.swing.JMenuItem.getAccelerator()*

public |javax.swing.KeyStroke| getAccelerator()

Returns the KeyStroke which serves as an accelerator for the menu item. 



    Returns: a KeyStroke object identifying the accelerator key 

*javax.swing.JMenuItem.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Returns the AccessibleContext associated with this JMenuItem. For JMenuItems, the AccessibleContext takes the form of an AccessibleJMenuItem. A new AccessibleJMenuItme instance is 
created if necessary. 



    Returns: an AccessibleJMenuItem that serves as the AccessibleContext of this JMenuItem 

*javax.swing.JMenuItem.getComponent()*

public |java.awt.Component| getComponent()

Returns the java.awt.Component used to paint this object. The returned component will be used to convert events and detect if an event is inside a menu component. 



    Returns: the Component that paints this menu item 

*javax.swing.JMenuItem.getMenuDragMouseListeners()*

public |javax.swing.event.MenuDragMouseListener|[] getMenuDragMouseListeners()

Returns an array of all the MenuDragMouseListeners added to this JMenuItem with addMenuDragMouseListener(). 



    Returns: all of the MenuDragMouseListeners added or an empty array if no listeners have been added 

*javax.swing.JMenuItem.getMenuKeyListeners()*

public |javax.swing.event.MenuKeyListener|[] getMenuKeyListeners()

Returns an array of all the MenuKeyListeners added to this JMenuItem with addMenuKeyListener(). 



    Returns: all of the MenuKeyListeners added or an empty array if no listeners have been added 

*javax.swing.JMenuItem.getSubElements()*

public |javax.swing.MenuElement|[] getSubElements()

This method returns an array containing the sub-menu components for this menu component. 



    Returns: an array of MenuElements 

*javax.swing.JMenuItem.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the suffix used to construct the name of the Lclass used to render this component. 



    Returns: the string "MenuItemUI" 

*javax.swing.JMenuItem.init(String,Icon)*

protected void init(
  java.lang.String text,
  javax.swing.Icon icon)

Initializes the menu item with the specified text and icon. 


    text - the text of the JMenuItem 
    icon - the icon of the JMenuItem 

*javax.swing.JMenuItem.isArmed()*

public boolean isArmed()

Returns whether the menu item is "armed". 



    Returns: true if the menu item is armed, and it can be selected 

*javax.swing.JMenuItem.menuSelectionChanged(boolean)*

public void menuSelectionChanged(boolean isIncluded)

Called by the MenuSelectionManager when the MenuElement is selected or unselected. 


    isIncluded - true if this menu item is on the part of the menu path that changed, false if this menu is part of the a menu path that changed, but this particular part of that path is still the 
       same 

*javax.swing.JMenuItem.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JMenuItem. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary 
between implementations. The returned string may be empty but may not be null. 



    Returns: a string representation of this JMenuItem 

*javax.swing.JMenuItem.processKeyEvent(KeyEvent,MenuElement[],MenuSelectionManager)*

public void processKeyEvent(
  java.awt.event.KeyEvent e,
  javax.swing.MenuElement[] path,
  javax.swing.MenuSelectionManager manager)

Processes a key event forwarded from the MenuSelectionManager and changes the menu selection, if necessary, by using MenuSelectionManager's API. 

Note: you do not have to forward the event to sub-components. This is done automatically by the MenuSelectionManager. 


    e - a KeyEvent 
    path - the MenuElement path array 
    manager - the MenuSelectionManager 

*javax.swing.JMenuItem.processMenuDragMouseEvent(MenuDragMouseEvent)*

public void processMenuDragMouseEvent(javax.swing.event.MenuDragMouseEvent e)

Handles mouse drag in a menu. 


    e - a MenuDragMouseEvent object 

*javax.swing.JMenuItem.processMenuKeyEvent(MenuKeyEvent)*

public void processMenuKeyEvent(javax.swing.event.MenuKeyEvent e)

Handles a keystroke in a menu. 


    e - a MenuKeyEvent object 

*javax.swing.JMenuItem.processMouseEvent(MouseEvent,MenuElement[],MenuSelectionManager)*

public void processMouseEvent(
  java.awt.event.MouseEvent e,
  javax.swing.MenuElement[] path,
  javax.swing.MenuSelectionManager manager)

Processes a mouse event forwarded from the MenuSelectionManager and changes the menu selection, if necessary, by using the MenuSelectionManager's API. 

Note: you do not have to forward the event to sub-components. This is done automatically by the MenuSelectionManager. 


    e - a MouseEvent 
    path - the MenuElement path array 
    manager - the MenuSelectionManager 

*javax.swing.JMenuItem.removeMenuDragMouseListener(MenuDragMouseListener)*

public void removeMenuDragMouseListener(javax.swing.event.MenuDragMouseListener l)

Removes a MenuDragMouseListener from the menu item. 


    l - the MenuDragMouseListener to be removed 

*javax.swing.JMenuItem.removeMenuKeyListener(MenuKeyListener)*

public void removeMenuKeyListener(javax.swing.event.MenuKeyListener l)

Removes a MenuKeyListener from the menu item. 


    l - the MenuKeyListener to be removed 

*javax.swing.JMenuItem.setAccelerator(KeyStroke)*

public void setAccelerator(javax.swing.KeyStroke keyStroke)

Sets the key combination which invokes the menu item's action listeners without navigating the menu hierarchy. It is the UI's responsibility to install the correct action. Note 
that when the keyboard accelerator is typed, it will work whether or not the menu is currently displayed. 


    keyStroke - the KeyStroke which will serve as an accelerator 

*javax.swing.JMenuItem.setArmed(boolean)*

public void setArmed(boolean b)

Identifies the menu item as "armed". If the mouse button is released while it is over this item, the menu's action event will fire. If the mouse button is released elsewhere, the 
event will not fire and the menu item will be disarmed. 


    b - true to arm the menu item so it can be selected 

*javax.swing.JMenuItem.setEnabled(boolean)*

public void setEnabled(boolean b)

Enables or disables the menu item. 


    b - true to enable the item 

*javax.swing.JMenuItem.setUI(MenuItemUI)*

public void setUI(javax.swing.plaf.MenuItemUI ui)

Sets the look and feel object that renders this component. 


    ui - the JMenuItemUI Lobject 

*javax.swing.JMenuItem.updateUI()*

public void updateUI()

Resets the UI property with a value from the current look and feel. 





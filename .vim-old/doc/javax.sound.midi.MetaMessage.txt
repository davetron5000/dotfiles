*javax.sound.midi.MetaMessage* *MetaMessage* A MetaMessage is a MidiMessage that

public class MetaMessage
  extends    |javax.sound.midi.MidiMessage|

|javax.sound.midi.MetaMessage_Description|
|javax.sound.midi.MetaMessage_Fields|
|javax.sound.midi.MetaMessage_Constructors|
|javax.sound.midi.MetaMessage_Methods|

================================================================================

*javax.sound.midi.MetaMessage_Fields*
|int_javax.sound.midi.MetaMessage.META|

*javax.sound.midi.MetaMessage_Constructors*
|javax.sound.midi.MetaMessage()|Constructs a new MetaMessage.
|javax.sound.midi.MetaMessage(byte[])|Constructs a new MetaMessage.

*javax.sound.midi.MetaMessage_Methods*
|javax.sound.midi.MetaMessage.clone()|Creates a new object of the same class an
|javax.sound.midi.MetaMessage.getData()|Obtains a copy of the data for the meta
|javax.sound.midi.MetaMessage.getType()|Obtains the type of the MetaMessage.
|javax.sound.midi.MetaMessage.setMessage(int,byte[],int)|Sets the message param

*javax.sound.midi.MetaMessage_Description*

A MetaMessage is a (|javax.sound.midi.MidiMessage|) that is not meaningful to 
synthesizers, but that can be stored in a MIDI file and interpreted by a 
sequencer program. (See the discussion in the MidiMessage class description.) 
The Standard MIDI Files specification defines various types of meta-events, 
such as sequence number, lyric, cue point, and set tempo. There are also 
meta-events for such information as lyrics, copyrights, tempo indications, time 
and key signatures, markers, etc. For more information, see the Standard MIDI 
Files 1.0 specification, which is part of the Complete MIDI 1.0 Detailed 
Specification published by the MIDI Manufacturer's Association 
(http://www.midi.org). 

When data is being transported using MIDI wire protocol, a 
(|javax.sound.midi.ShortMessage|) with the status value 0xFF represents a 
system reset message. In MIDI files, this same status value denotes a 
MetaMessage. The types of meta-message are distinguished from each other by the 
first byte that follows the status byte 0xFF. The subsequent bytes are data 
bytes. As with system exclusive messages, there are an arbitrary number of data 
bytes, depending on the type of MetaMessage. 


*int_javax.sound.midi.MetaMessage.META*

A MetaMessage is a (|javax.sound.midi.MidiMessage|) that is not meaningful to 
synthesizers, but that can be stored in a MIDI file and interpreted by a 
sequencer program. (See the discussion in the MidiMessage class description.) 
The Standard MIDI Files specification defines various types of meta-events, 
such as sequence number, lyric, cue point, and set tempo. There are also 
meta-events for such information as lyrics, copyrights, tempo indications, time 
and key signatures, markers, etc. For more information, see the Standard MIDI 
Files 1.0 specification, which is part of the Complete MIDI 1.0 Detailed 
Specification published by the MIDI Manufacturer's Association 
(http://www.midi.org). 

When data is being transported using MIDI wire protocol, a 
(|javax.sound.midi.ShortMessage|) with the status value 0xFF represents a 
system reset message. In MIDI files, this same status value denotes a 
MetaMessage. The types of meta-message are distinguished from each other by the 
first byte that follows the status byte 0xFF. The subsequent bytes are data 
bytes. As with system exclusive messages, there are an arbitrary number of data 
bytes, depending on the type of MetaMessage. 



*javax.sound.midi.MetaMessage()*

public MetaMessage()

Constructs a new MetaMessage. The contents of the message are not set here; use 
setMessage(|javax.sound.midi.MetaMessage|) to set them subsequently. 


*javax.sound.midi.MetaMessage(byte[])*

protected MetaMessage(byte[] data)

Constructs a new MetaMessage. 

    data - an array of bytes containing the complete message. The message data may be 
       changed using the setMessage method. 

*javax.sound.midi.MetaMessage.clone()*

public |java.lang.Object| clone()

Creates a new object of the same class and with the same contents as this 
object. 


    Returns: a clone of this instance 
*javax.sound.midi.MetaMessage.getData()*

public byte getData()

Obtains a copy of the data for the meta message. The returned array of bytes 
does not include the status byte or the message length data. The length of the 
data for the meta message is the length of the array. Note that the length of 
the entire message includes the status byte and the meta message type byte, and 
therefore may be longer than the returned array. 


    Returns: array containing the meta message data. 
*javax.sound.midi.MetaMessage.getType()*

public int getType()

Obtains the type of the MetaMessage. 


    Returns: an integer representing the MetaMessage type 
*javax.sound.midi.MetaMessage.setMessage(int,byte[],int)*

public void setMessage(
  int type,
  byte[] data,
  int length)
  throws |javax.sound.midi.InvalidMidiDataException|
         
Sets the message parameters for a MetaMessage. Since only one status byte 
value, 0xFF, is allowed for meta-messages, it does not need to be specified 
here. Calls to getStatus(|javax.sound.midi.MidiMessage|) return 0xFF for all 
meta-messages. 

The type argument should be a valid value for the byte that follows the status 
byte in the MetaMessage. The data argument should contain all the subsequent 
bytes of the MetaMessage. In other words, the byte that specifies the type of 
MetaMessage is not considered a data byte. 

    type - meta-message type (must be less than 128) 
    data - the data bytes in the MIDI message 
    length - the number of bytes in the data byte array 



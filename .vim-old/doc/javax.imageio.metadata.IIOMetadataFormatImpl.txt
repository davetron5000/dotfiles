*javax.imageio.metadata.IIOMetadataFormatImpl* *IIOMetadataFormatImpl* A concrete class providing a reusable implementation of the
 IIOMetadataFormat interface.

public abstract class IIOMetadataFormatImpl
  extends    |java.lang.Object|
  implements |javax.imageio.metadata.IIOMetadataFormat|

|javax.imageio.metadata.IIOMetadataFormatImpl_Description|
|javax.imageio.metadata.IIOMetadataFormatImpl_Fields|
|javax.imageio.metadata.IIOMetadataFormatImpl_Constructors|
|javax.imageio.metadata.IIOMetadataFormatImpl_Methods|

====================================================================================================================================================================================

*javax.imageio.metadata.IIOMetadataFormatImpl_Fields*
|java.lang.String_javax.imageio.metadata.IIOMetadataFormatImpl.standardMetadataFormatName|

*javax.imageio.metadata.IIOMetadataFormatImpl_Constructors*
|javax.imageio.metadata.IIOMetadataFormatImpl(String,int)|Constructs a blank IIOMetadataFormatImpl instance,  with a given root element name and child policy (other than  CHILD_PO
|javax.imageio.metadata.IIOMetadataFormatImpl(String,int,int)|Constructs a blank IIOMetadataFormatImpl instance,  with a given root element name and a child policy of  CHILD_POLIC

*javax.imageio.metadata.IIOMetadataFormatImpl_Methods*
|javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(String,String,int,boolean,int,int)|Adds a new attribute to a previously defined element that will  be defined by a list 
|javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(String,String,int,boolean,String)|Adds a new attribute to a previously defined element that may  be set to an arbitrary 
|javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(String,String,int,boolean,String,List<String>)|Adds a new attribute to a previously defined element that will  be define
|javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(String,String,int,boolean,String,String,String,boolean,boolean)|Adds a new attribute to a previously defined element tha
|javax.imageio.metadata.IIOMetadataFormatImpl.addBooleanAttribute(String,String,boolean,boolean)|Adds a new attribute to a previously defined element that will  be defined by the 
|javax.imageio.metadata.IIOMetadataFormatImpl.addChildElement(String,String)|Adds an existing element to the list of legal children for a  given parent node type.
|javax.imageio.metadata.IIOMetadataFormatImpl.addElement(String,String,int)|Adds a new element type to this metadata document format with a  child policy other than CHILD_POLICY_R
|javax.imageio.metadata.IIOMetadataFormatImpl.addElement(String,String,int,int)|Adds a new element type to this metadata document format with a  child policy of CHILD_POLICY_REPEA
|javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(String,Class<?>,int,int)|Allows an Object reference of a given class type  to be stored in nodes implementing the name
|javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(String,Class<T>,boolean,T)|Allows an Object reference of a given class type  to be stored in nodes implementing the na
|javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(String,Class<T>,boolean,T,List<?extendsT>)|Allows an Object reference of a given class type  to be stored in nodes imp
|javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(String,Class<T>,T,Comparable<?superT>,Comparable<?superT>,boolean,boolean)|Allows an Object reference of a given class
|javax.imageio.metadata.IIOMetadataFormatImpl.canNodeAppear(String,ImageTypeSpecifier)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeDataType(String,String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeDefaultValue(String,String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeDescription(String,String,Locale)|Returns a String containing a description of the  named attribute, or null.
|javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeEnumerations(String,String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeListMaxLength(String,String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeListMinLength(String,String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeMaxValue(String,String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeMinValue(String,String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeNames(String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeValueType(String,String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getChildNames(String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getChildPolicy(String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getElementDescription(String,Locale)|Returns a String containing a description of the  named element, or null.
|javax.imageio.metadata.IIOMetadataFormatImpl.getElementMaxChildren(String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getElementMinChildren(String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getObjectArrayMaxLength(String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getObjectArrayMinLength(String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getObjectClass(String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getObjectDefaultValue(String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getObjectEnumerations(String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getObjectMaxValue(String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getObjectMinValue(String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getObjectValueType(String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.getResourceBaseName()|Returns the currently set base name for locating  ResourceBundles.
|javax.imageio.metadata.IIOMetadataFormatImpl.getRootName()|
|javax.imageio.metadata.IIOMetadataFormatImpl.getStandardFormatInstance()|Returns an IIOMetadataFormat object describing the  standard, plug-in neutral javax.imageio_1.0  metadata
|javax.imageio.metadata.IIOMetadataFormatImpl.isAttributeRequired(String,String)|
|javax.imageio.metadata.IIOMetadataFormatImpl.removeAttribute(String,String)|Removes an attribute from a previously defined element.
|javax.imageio.metadata.IIOMetadataFormatImpl.removeElement(String)|Removes an element from the format.
|javax.imageio.metadata.IIOMetadataFormatImpl.removeObjectValue(String)|Disallows an Object reference from being stored in  nodes implementing the named element.
|javax.imageio.metadata.IIOMetadataFormatImpl.setResourceBaseName(String)|Sets a new base name for locating ResourceBundles  containing descriptions of elements and attributes for

*javax.imageio.metadata.IIOMetadataFormatImpl_Description*

A concrete class providing a reusable implementation of the IIOMetadataFormat interface. In addition, a static instance representing the standard, plug-in neutral 
javax_imageio_1.0 format is provided by the getStandardFormatInstance method. 

In order to supply localized descriptions of elements and attributes, a ResourceBundle with a base name of this.getClass().getName() + "Resources" should be supplied via the usual 
mechanism used by ResourceBundle.getBundle. Briefly, the subclasser supplies one or more additional classes according to a naming convention (by default, the fully-qualified name 
of the subclass extending IIMetadataFormatImpl, plus the string "Resources", plus the country, language, and variant codes separated by underscores). At run time, calls to 
getElementDescription or getAttributeDescription will attempt to load such classes dynamically according to the supplied locale, and will use either the element name, or the 
element name followed by a '/' character followed by the attribute name as a key. This key will be supplied to the ResourceBundle's getString method, and the resulting localized 
description of the node or attribute is returned. 

The subclass may supply a different base name for the resource bundles using the setResourceBaseName method. 

A subclass may choose its own localization mechanism, if so desired, by overriding the supplied implementations of getElementDescription and getAttributeDescription. 



*java.lang.String_javax.imageio.metadata.IIOMetadataFormatImpl.standardMetadataFormatName*

A String constant containing the standard format name, "javax_imageio_1.0". 



*javax.imageio.metadata.IIOMetadataFormatImpl(String,int)*

public IIOMetadataFormatImpl(
  java.lang.String rootName,
  int childPolicy)

Constructs a blank IIOMetadataFormatImpl instance, with a given root element name and child policy (other than CHILD_POLICY_REPEAT). Additional elements, and their attributes and 
Object reference information may be added using the various add methods. 

    rootName - the name of the root element. 
    childPolicy - one of the CHILD_POLICY_* constants, other than CHILD_POLICY_REPEAT. 

*javax.imageio.metadata.IIOMetadataFormatImpl(String,int,int)*

public IIOMetadataFormatImpl(
  java.lang.String rootName,
  int minChildren,
  int maxChildren)

Constructs a blank IIOMetadataFormatImpl instance, with a given root element name and a child policy of CHILD_POLICY_REPEAT. Additional elements, and their attributes and Object 
reference information may be added using the various add methods. 

    rootName - the name of the root element. 
    minChildren - the minimum number of children of the node. 
    maxChildren - the maximum number of children of the node. 

*javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(String,String,int,boolean,int,int)*

protected void addAttribute(
  java.lang.String elementName,
  java.lang.String attrName,
  int dataType,
  boolean required,
  int listMinLength,
  int listMaxLength)

Adds a new attribute to a previously defined element that will be defined by a list of values. 


    elementName - the name of the element. 
    attrName - the name of the attribute being added. 
    dataType - the data type (string format) of the attribute, one of the DATATYPE_* constants. 
    required - true if the attribute must be present. 
    listMinLength - the smallest legal number of list items. 
    listMaxLength - the largest legal number of list items. 

*javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(String,String,int,boolean,String)*

protected void addAttribute(
  java.lang.String elementName,
  java.lang.String attrName,
  int dataType,
  boolean required,
  java.lang.String defaultValue)

Adds a new attribute to a previously defined element that may be set to an arbitrary value. 


    elementName - the name of the element. 
    attrName - the name of the attribute being added. 
    dataType - the data type (string format) of the attribute, one of the DATATYPE_* constants. 
    required - true if the attribute must be present. 
    defaultValue - the default value for the attribute, or null. 

*javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(String,String,int,boolean,String,List<String>)*

protected void addAttribute(
  java.lang.String elementName,
  java.lang.String attrName,
  int dataType,
  boolean required,
  java.lang.String defaultValue,
  java.util.List<java.lang.String> enumeratedValues)

Adds a new attribute to a previously defined element that will be defined by a set of enumerated values. 


    elementName - the name of the element. 
    attrName - the name of the attribute being added. 
    dataType - the data type (string format) of the attribute, one of the DATATYPE_* constants. 
    required - true if the attribute must be present. 
    defaultValue - the default value for the attribute, or null. 
    enumeratedValues - a List of Strings containing the legal values for the attribute. 

*javax.imageio.metadata.IIOMetadataFormatImpl.addAttribute(String,String,int,boolean,String,String,String,boolean,boolean)*

protected void addAttribute(
  java.lang.String elementName,
  java.lang.String attrName,
  int dataType,
  boolean required,
  java.lang.String defaultValue,
  java.lang.String minValue,
  java.lang.String maxValue,
  boolean minInclusive,
  boolean maxInclusive)

Adds a new attribute to a previously defined element that will be defined by a range of values. 


    elementName - the name of the element. 
    attrName - the name of the attribute being added. 
    dataType - the data type (string format) of the attribute, one of the DATATYPE_* constants. 
    required - true if the attribute must be present. 
    defaultValue - the default value for the attribute, or null. 
    minValue - the smallest (inclusive or exclusive depending on the value of minInclusive) legal value for the attribute, as a String. 
    maxValue - the largest (inclusive or exclusive depending on the value of minInclusive) legal value for the attribute, as a String. 
    minInclusive - true if minValue is inclusive. 
    maxInclusive - true if maxValue is inclusive. 

*javax.imageio.metadata.IIOMetadataFormatImpl.addBooleanAttribute(String,String,boolean,boolean)*

protected void addBooleanAttribute(
  java.lang.String elementName,
  java.lang.String attrName,
  boolean hasDefaultValue,
  boolean defaultValue)

Adds a new attribute to a previously defined element that will be defined by the enumerated values TRUE and FALSE, with a datatype of DATATYPE_BOOLEAN. 


    elementName - the name of the element. 
    attrName - the name of the attribute being added. 
    hasDefaultValue - true if a default value should be present. 
    defaultValue - the default value for the attribute as a boolean, ignored if hasDefaultValue is false. 

*javax.imageio.metadata.IIOMetadataFormatImpl.addChildElement(String,String)*

protected void addChildElement(
  java.lang.String elementName,
  java.lang.String parentName)

Adds an existing element to the list of legal children for a given parent node type. 


    parentName - the name of the element that will be the new parent of the element. 
    elementName - the name of the element to be addded as a child. 

*javax.imageio.metadata.IIOMetadataFormatImpl.addElement(String,String,int)*

protected void addElement(
  java.lang.String elementName,
  java.lang.String parentName,
  int childPolicy)

Adds a new element type to this metadata document format with a child policy other than CHILD_POLICY_REPEAT. 


    elementName - the name of the new element. 
    parentName - the name of the element that will be the parent of the new element. 
    childPolicy - one of the CHILD_POLICY_* constants, other than CHILD_POLICY_REPEAT, indicating the child policy of the new element. 

*javax.imageio.metadata.IIOMetadataFormatImpl.addElement(String,String,int,int)*

protected void addElement(
  java.lang.String elementName,
  java.lang.String parentName,
  int minChildren,
  int maxChildren)

Adds a new element type to this metadata document format with a child policy of CHILD_POLICY_REPEAT. 


    elementName - the name of the new element. 
    parentName - the name of the element that will be the parent of the new element. 
    minChildren - the minimum number of children of the node. 
    maxChildren - the maximum number of children of the node. 

*javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(String,Class<?>,int,int)*

protected void addObjectValue(
  java.lang.String elementName,
  java.lang.Class<?> classType,
  int arrayMinLength,
  int arrayMaxLength)

Allows an Object reference of a given class type to be stored in nodes implementing the named element. The value of the Object must an array of objects of class type given by 
classType, with at least arrayMinLength and at most arrayMaxLength elements. 

If an Object reference was previously allowed, the previous settings are overwritten. 


    elementName - the name of the element. 
    classType - a Class variable indicating the legal class type for the object value. 
    arrayMinLength - the smallest legal length for the array. 
    arrayMaxLength - the largest legal length for the array. 

*javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(String,Class<T>,boolean,T)*

protected void addObjectValue(
  java.lang.String elementName,
  java.lang.Class<T> classType,
  boolean required,
  T defaultValue)

Allows an Object reference of a given class type to be stored in nodes implementing the named element. The value of the Object is unconstrained other than by its class type. 

If an Object reference was previously allowed, the previous settings are overwritten. 


    elementName - the name of the element. 
    classType - a Class variable indicating the legal class type for the object value. 
    required - true if an object value must be present. 
    defaultValue - the default value for the Object reference, or null. 

*javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(String,Class<T>,boolean,T,List<?extendsT>)*

protected void addObjectValue(
  java.lang.String elementName,
  java.lang.Class<T> classType,
  boolean required,
  T defaultValue,
  java.util.List<? extends T> enumeratedValues)

Allows an Object reference of a given class type to be stored in nodes implementing the named element. The value of the Object must be one of the values given by enumeratedValues. 

If an Object reference was previously allowed, the previous settings are overwritten. 


    elementName - the name of the element. 
    classType - a Class variable indicating the legal class type for the object value. 
    required - true if an object value must be present. 
    defaultValue - the default value for the Object reference, or null. 
    enumeratedValues - a List of Objects containing the legal values for the object reference. 

*javax.imageio.metadata.IIOMetadataFormatImpl.addObjectValue(String,Class<T>,T,Comparable<?superT>,Comparable<?superT>,boolean,boolean)*

protected void addObjectValue(
  java.lang.String elementName,
  java.lang.Class<T> classType,
  T extends java.lang.Object & java.lang.Comparable<? super T> defaultValue,
  java.lang.Comparable<? super T> minValue,
  java.lang.Comparable<? super T> maxValue,
  boolean minInclusive,
  boolean maxInclusive)

Allows an Object reference of a given class type to be stored in nodes implementing the named element. The value of the Object must be within the range given by minValue and 
maxValue. Furthermore, the class type must implement the Comparable interface. 

If an Object reference was previously allowed, the previous settings are overwritten. 


    elementName - the name of the element. 
    classType - a Class variable indicating the legal class type for the object value. 
    defaultValue - the default value for the 
    minValue - the smallest (inclusive or exclusive depending on the value of minInclusive) legal value for the object value, as a String. 
    maxValue - the largest (inclusive or exclusive depending on the value of minInclusive) legal value for the object value, as a String. 
    minInclusive - true if minValue is inclusive. 
    maxInclusive - true if maxValue is inclusive. 

*javax.imageio.metadata.IIOMetadataFormatImpl.canNodeAppear(String,ImageTypeSpecifier)*

public abstract boolean canNodeAppear(
  java.lang.String elementName,
  javax.imageio.ImageTypeSpecifier imageType)





*javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeDataType(String,String)*

public int getAttributeDataType(
  java.lang.String elementName,
  java.lang.String attrName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeDefaultValue(String,String)*

public |java.lang.String| getAttributeDefaultValue(
  java.lang.String elementName,
  java.lang.String attrName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeDescription(String,String,Locale)*

public |java.lang.String| getAttributeDescription(
  java.lang.String elementName,
  java.lang.String attrName,
  java.util.Locale locale)

Returns a String containing a description of the named attribute, or null. The desciption will be localized for the supplied Locale if possible. 

The default implementation will first locate a ResourceBundle using the current resource base name set by setResourceBaseName and the supplied Locale, using the fallback mechanism 
described in the comments for ResourceBundle.getBundle. If a ResourceBundle is found, the element name followed by a "/" character followed by the attribute name (elementName + 
"/" + attrName) will be used as a key to its getString method, and the result returned. If no ResourceBundle is found, or no such key is present, null will be returned. 

If locale is null, the current default Locale returned by Locale.getLocale will be used. 


    elementName - the name of the element. 
    attrName - the name of the attribute. 
    locale - the Locale for which localization will be attempted, or null. 

    Returns: the attribute description. 

*javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeEnumerations(String,String)*

public |java.lang.String|[] getAttributeEnumerations(
  java.lang.String elementName,
  java.lang.String attrName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeListMaxLength(String,String)*

public int getAttributeListMaxLength(
  java.lang.String elementName,
  java.lang.String attrName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeListMinLength(String,String)*

public int getAttributeListMinLength(
  java.lang.String elementName,
  java.lang.String attrName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeMaxValue(String,String)*

public |java.lang.String| getAttributeMaxValue(
  java.lang.String elementName,
  java.lang.String attrName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeMinValue(String,String)*

public |java.lang.String| getAttributeMinValue(
  java.lang.String elementName,
  java.lang.String attrName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeNames(String)*

public |java.lang.String|[] getAttributeNames(java.lang.String elementName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeValueType(String,String)*

public int getAttributeValueType(
  java.lang.String elementName,
  java.lang.String attrName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getChildNames(String)*

public |java.lang.String|[] getChildNames(java.lang.String elementName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getChildPolicy(String)*

public int getChildPolicy(java.lang.String elementName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getElementDescription(String,Locale)*

public |java.lang.String| getElementDescription(
  java.lang.String elementName,
  java.util.Locale locale)

Returns a String containing a description of the named element, or null. The desciption will be localized for the supplied Locale if possible. 

The default implementation will first locate a ResourceBundle using the current resource base name set by setResourceBaseName and the supplied Locale, using the fallback mechanism 
described in the comments for ResourceBundle.getBundle. If a ResourceBundle is found, the element name will be used as a key to its getString method, and the result returned. If 
no ResourceBundle is found, or no such key is present, null will be returned. 

If locale is null, the current default Locale returned by Locale.getLocale will be used. 


    elementName - the name of the element. 
    locale - the Locale for which localization will be attempted. 

    Returns: the element description. 

*javax.imageio.metadata.IIOMetadataFormatImpl.getElementMaxChildren(String)*

public int getElementMaxChildren(java.lang.String elementName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getElementMinChildren(String)*

public int getElementMinChildren(java.lang.String elementName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getObjectArrayMaxLength(String)*

public int getObjectArrayMaxLength(java.lang.String elementName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getObjectArrayMinLength(String)*

public int getObjectArrayMinLength(java.lang.String elementName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getObjectClass(String)*

public |java.lang.Class|<?> getObjectClass(java.lang.String elementName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getObjectDefaultValue(String)*

public |java.lang.Object| getObjectDefaultValue(java.lang.String elementName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getObjectEnumerations(String)*

public |java.lang.Object|[] getObjectEnumerations(java.lang.String elementName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getObjectMaxValue(String)*

public |java.lang.Comparable|<?> getObjectMaxValue(java.lang.String elementName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getObjectMinValue(String)*

public |java.lang.Comparable|<?> getObjectMinValue(java.lang.String elementName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getObjectValueType(String)*

public int getObjectValueType(java.lang.String elementName)





*javax.imageio.metadata.IIOMetadataFormatImpl.getResourceBaseName()*

protected |java.lang.String| getResourceBaseName()

Returns the currently set base name for locating ResourceBundles. 



    Returns: a String containing the base name. 

*javax.imageio.metadata.IIOMetadataFormatImpl.getRootName()*

public |java.lang.String| getRootName()





*javax.imageio.metadata.IIOMetadataFormatImpl.getStandardFormatInstance()*

public static |javax.imageio.metadata.IIOMetadataFormat| getStandardFormatInstance()

Returns an IIOMetadataFormat object describing the standard, plug-in neutral javax.imageio_1.0 metadata document format described in the comment of the javax.imageio.metadata 
package. 



    Returns: a predefined IIOMetadataFormat instance. 

*javax.imageio.metadata.IIOMetadataFormatImpl.isAttributeRequired(String,String)*

public boolean isAttributeRequired(
  java.lang.String elementName,
  java.lang.String attrName)





*javax.imageio.metadata.IIOMetadataFormatImpl.removeAttribute(String,String)*

protected void removeAttribute(
  java.lang.String elementName,
  java.lang.String attrName)

Removes an attribute from a previously defined element. If no attribute with the given name was present in the given element, nothing happens and no exception is thrown. 


    elementName - the name of the element. 
    attrName - the name of the attribute being removed. 

*javax.imageio.metadata.IIOMetadataFormatImpl.removeElement(String)*

protected void removeElement(java.lang.String elementName)

Removes an element from the format. If no element with the given name was present, nothing happens and no exception is thrown. 


    elementName - the name of the element to be removed. 

*javax.imageio.metadata.IIOMetadataFormatImpl.removeObjectValue(String)*

protected void removeObjectValue(java.lang.String elementName)

Disallows an Object reference from being stored in nodes implementing the named element. 


    elementName - the name of the element. 

*javax.imageio.metadata.IIOMetadataFormatImpl.setResourceBaseName(String)*

protected void setResourceBaseName(java.lang.String resourceBaseName)

Sets a new base name for locating ResourceBundles containing descriptions of elements and attributes for this format. 

Prior to the first time this method is called, the base name will be equal to this.getClass().getName() + "Resources". 


    resourceBaseName - a String containg the new base name. 



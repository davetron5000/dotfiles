*javax.print.attribute.ResolutionSyntax* *ResolutionSyntax* Class ResolutionSyntax is an abstract base class providing the common 
 implementation of all attributes denoting a prin

public abstract class ResolutionSyntax
  extends    |java.lang.Object|
  implements |java.io.Serializable|
             |java.lang.Cloneable|

|javax.print.attribute.ResolutionSyntax_Description|
|javax.print.attribute.ResolutionSyntax_Fields|
|javax.print.attribute.ResolutionSyntax_Constructors|
|javax.print.attribute.ResolutionSyntax_Methods|

====================================================================================================================================================================================

*javax.print.attribute.ResolutionSyntax_Fields*
|int_javax.print.attribute.ResolutionSyntax.DPCM|
|int_javax.print.attribute.ResolutionSyntax.DPI|

*javax.print.attribute.ResolutionSyntax_Constructors*
|javax.print.attribute.ResolutionSyntax(int,int,int)|Construct a new resolution attribute from the given items.

*javax.print.attribute.ResolutionSyntax_Methods*
|javax.print.attribute.ResolutionSyntax.equals(Object)|Returns whether this resolution attribute is equivalent to the passed in   object.
|javax.print.attribute.ResolutionSyntax.getCrossFeedResolution(int)|Returns this resolution attribute's cross feed direction resolution in   the given units.
|javax.print.attribute.ResolutionSyntax.getCrossFeedResolutionDphi()|Returns this resolution attribute's cross feed direction resolution in   units of dphi.
|javax.print.attribute.ResolutionSyntax.getFeedResolution(int)|Returns this resolution attribute's feed direction resolution in the   given units.
|javax.print.attribute.ResolutionSyntax.getFeedResolutionDphi()|Returns this resolution attribute's feed direction resolution in units   of dphi.
|javax.print.attribute.ResolutionSyntax.getResolution(int)|Get this resolution attribute's resolution values in the given units.
|javax.print.attribute.ResolutionSyntax.hashCode()|Returns a hash code value for this resolution attribute.
|javax.print.attribute.ResolutionSyntax.lessThanOrEquals(ResolutionSyntax)|Determine whether this resolution attribute's value is less than or   equal to the given resolution attr
|javax.print.attribute.ResolutionSyntax.toString()|Returns a string version of this resolution attribute.
|javax.print.attribute.ResolutionSyntax.toString(int,String)|Returns a string version of this resolution attribute in the given units.

*javax.print.attribute.ResolutionSyntax_Description*

Class ResolutionSyntax is an abstract base class providing the common implementation of all attributes denoting a printer resolution. 

A resolution attribute's value consists of two items, the cross feed direction resolution and the feed direction resolution. A resolution attribute may be constructed by supplying 
the two values and indicating the units in which the values are measured. Methods are provided to return a resolution attribute's values, indicating the units in which the values 
are to be returned. The two most common resolution units are dots per inch (dpi) and dots per centimeter (dpcm), and exported constants 
<CODE>DPI</CODE>(|javax.print.attribute.ResolutionSyntax|) and <CODE>DPCM</CODE>(|javax.print.attribute.ResolutionSyntax|) are provided for indicating those units. 

Once constructed, a resolution attribute's value is immutable. 

Design 

A resolution attribute's cross feed direction resolution and feed direction resolution values are stored internally using units of dots per 100 inches (dphi). Storing the values 
in dphi rather than, say, metric units allows precise integer arithmetic conversions between dpi and dphi and between dpcm and dphi: 1 dpi = 100 dphi, 1 dpcm = 254 dphi. Thus, the 
values can be stored into and retrieved back from a resolution attribute in either units with no loss of precision. This would not be guaranteed if a floating point representation 
were used. However, roundoff error will in general occur if a resolution attribute's values are created in one units and retrieved in different units; for example, 600 dpi will be 
rounded to 236 dpcm, whereas the true value (to five figures) is 236.22 dpcm. 

Storing the values internally in common units of dphi lets two resolution attributes be compared without regard to the units in which they were created; for example, 300 dpcm will 
compare equal to 762 dpi, as they both are stored as 76200 dphi. In particular, a lookup service can match resolution attributes based on equality of their serialized 
representations regardless of the units in which they were created. Again, using integers for internal storage allows precise equality comparisons to be done, which would not be 
guaranteed if a floating point representation were used. 

The exported constant <CODE>DPI</CODE>(|javax.print.attribute.ResolutionSyntax|) is actually the conversion factor by which to multiply a value in dpi to get the value in dphi. 
Likewise, the exported constant <CODE>DPCM</CODE>(|javax.print.attribute.ResolutionSyntax|) is the conversion factor by which to multiply a value in dpcm to get the value in dphi. 
A client can specify a resolution value in units other than dpi or dpcm by supplying its own conversion factor. However, since the internal units of dphi was chosen with 
supporting only the external units of dpi and dpcm in mind, there is no guarantee that the conversion factor for the client's units will be an exact integer. If the conversion 
factor isn't an exact integer, resolution values in the client's units won't be stored precisely. 



*int_javax.print.attribute.ResolutionSyntax.DPCM*

Value to indicate units of dots per centimeter (dpcm). It is actually the conversion factor by which to multiply dpcm to yield dphi (254). 


*int_javax.print.attribute.ResolutionSyntax.DPI*

Value to indicate units of dots per inch (dpi). It is actually the conversion factor by which to multiply dpi to yield dphi (100). 



*javax.print.attribute.ResolutionSyntax(int,int,int)*

public ResolutionSyntax(
  int crossFeedResolution,
  int feedResolution,
  int units)

Construct a new resolution attribute from the given items. 

    crossFeedResolution - Cross feed direction resolution. 
    feedResolution - Feed direction resolution. 
    units - Unit conversion factor, e.g. {@link #DPI DPI} or {@link #DPCM DPCM}. 

*javax.print.attribute.ResolutionSyntax.equals(Object)*

public boolean equals(java.lang.Object object)

Returns whether this resolution attribute is equivalent to the passed in object. To be equivalent, all of the following conditions must be true: 

object is not null. 

object is an instance of class ResolutionSyntax. 

This attribute's cross feed direction resolution is equal to object's cross feed direction resolution. 

This attribute's feed direction resolution is equal to object's feed direction resolution. 


    object - Object to compare to. 

    Returns: True if object is equivalent to this resolution attribute, false otherwise. 

*javax.print.attribute.ResolutionSyntax.getCrossFeedResolution(int)*

public int getCrossFeedResolution(int units)

Returns this resolution attribute's cross feed direction resolution in the given units. The value is rounded to the nearest integer. 


    units - Unit conversion factor, e.g. {@link #DPI DPI} or {@link #DPCM DPCM}. 

    Returns: Cross feed direction resolution. 

*javax.print.attribute.ResolutionSyntax.getCrossFeedResolutionDphi()*

protected int getCrossFeedResolutionDphi()

Returns this resolution attribute's cross feed direction resolution in units of dphi. (For use in a subclass.) 



    Returns: Cross feed direction resolution. 

*javax.print.attribute.ResolutionSyntax.getFeedResolution(int)*

public int getFeedResolution(int units)

Returns this resolution attribute's feed direction resolution in the given units. The value is rounded to the nearest integer. 


    units - Unit conversion factor, e.g. {@link #DPI DPI} or {@link #DPCM DPCM}. 

    Returns: Feed direction resolution. 

*javax.print.attribute.ResolutionSyntax.getFeedResolutionDphi()*

protected int getFeedResolutionDphi()

Returns this resolution attribute's feed direction resolution in units of dphi. (For use in a subclass.) 



    Returns: Feed direction resolution. 

*javax.print.attribute.ResolutionSyntax.getResolution(int)*

public int[] getResolution(int units)

Get this resolution attribute's resolution values in the given units. The values are rounded to the nearest integer. 


    units - Unit conversion factor, e.g. {@link #DPI DPI} or {@link #DPCM DPCM}. 

    Returns: A two-element array with the cross feed direction resolution at index 0 and the feed direction resolution at index 1. 

*javax.print.attribute.ResolutionSyntax.hashCode()*

public int hashCode()

Returns a hash code value for this resolution attribute. 



*javax.print.attribute.ResolutionSyntax.lessThanOrEquals(ResolutionSyntax)*

public boolean lessThanOrEquals(javax.print.attribute.ResolutionSyntax other)

Determine whether this resolution attribute's value is less than or equal to the given resolution attribute's value. This is true if all of the following conditions are true: 

This attribute's cross feed direction resolution is less than or equal to the other attribute's cross feed direction resolution. 

This attribute's feed direction resolution is less than or equal to the other attribute's feed direction resolution. 


    other - Resolution attribute to compare with. 

    Returns: True if this resolution attribute is less than or equal to the other resolution attribute, false otherwise. 

*javax.print.attribute.ResolutionSyntax.toString()*

public |java.lang.String| toString()

Returns a string version of this resolution attribute. The string takes the form "CxF dphi", where C is the cross feed direction resolution and F is the feed direction resolution. 
The values are reported in the internal units of dphi. 



*javax.print.attribute.ResolutionSyntax.toString(int,String)*

public |java.lang.String| toString(
  int units,
  java.lang.String unitsName)

Returns a string version of this resolution attribute in the given units. The string takes the form "CxF U", where C is the cross feed direction resolution, F is the feed 
direction resolution, and U is the units name. The values are rounded to the nearest integer. 


    units - Unit conversion factor, e.g. {@link #DPI DPI} or {@link #DPCM DPCM}. 
    unitsName - Units name string, e.g. "dpi" or "dpcm". If null, no units name is appended to the result. 

    Returns: String version of this resolution attribute. 



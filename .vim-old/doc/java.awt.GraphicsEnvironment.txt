*java.awt.GraphicsEnvironment* *GraphicsEnvironment* The GraphicsEnvironment class describes the collection
 ofGraphicsDeviceobjects andjava.awt.Fontobjects
 available to a Java(tm

public abstract class GraphicsEnvironment
  extends    |java.lang.Object|

|java.awt.GraphicsEnvironment_Description|
|java.awt.GraphicsEnvironment_Fields|
|java.awt.GraphicsEnvironment_Constructors|
|java.awt.GraphicsEnvironment_Methods|

====================================================================================================================================================================================

*java.awt.GraphicsEnvironment_Constructors*
|java.awt.GraphicsEnvironment()|This is an abstract class and cannot be instantiated directly.

*java.awt.GraphicsEnvironment_Methods*
|java.awt.GraphicsEnvironment.createGraphics(BufferedImage)|Returns a Graphics2D object for rendering into the  specifiedBufferedImage.
|java.awt.GraphicsEnvironment.getAllFonts()|Returns an array containing a one-point size instance of all fonts  available in this GraphicsEnvironment.
|java.awt.GraphicsEnvironment.getAvailableFontFamilyNames()|Returns an array containing the names of all font families in this  GraphicsEnvironment localized for the default local
|java.awt.GraphicsEnvironment.getAvailableFontFamilyNames(Locale)|Returns an array containing the names of all font families in this  GraphicsEnvironment localized for the specifi
|java.awt.GraphicsEnvironment.getCenterPoint()|Returns the Point where Windows should be centered.
|java.awt.GraphicsEnvironment.getDefaultScreenDevice()|Returns the default screen GraphicsDevice.
|java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()|Returns the local GraphicsEnvironment.
|java.awt.GraphicsEnvironment.getMaximumWindowBounds()|Returns the maximum bounds for centered Windows.
|java.awt.GraphicsEnvironment.getScreenDevices()|Returns an array of all of the screen GraphicsDevice  objects.
|java.awt.GraphicsEnvironment.isHeadless()|Tests whether or not a display, keyboard, and mouse can be  supported in this environment.
|java.awt.GraphicsEnvironment.isHeadlessInstance()|Returns whether or not a display, keyboard, and mouse can be   supported in this graphics environment.
|java.awt.GraphicsEnvironment.preferLocaleFonts()|Indicates a preference for locale-specific fonts in the mapping of  logical fonts to physical fonts.
|java.awt.GraphicsEnvironment.preferProportionalFonts()|Indicates a preference for proportional over non-proportional (e.g.

*java.awt.GraphicsEnvironment_Description*

The GraphicsEnvironment class describes the collection of (|java.awt.GraphicsDevice|) objects and (|java.awt.Font|) objects available to a Java(tm) application on a particular 
platform. The resources in this GraphicsEnvironment might be local or on a remote machine. GraphicsDevice objects can be screens, printers or image buffers and are the destination 
of (|java.awt.Graphics2D|) drawing methods. Each GraphicsDevice has a number of (|java.awt.GraphicsConfiguration|) objects associated with it. These objects specify the different 
configurations in which the GraphicsDevice can be used. 



*java.awt.GraphicsEnvironment()*

protected GraphicsEnvironment()

This is an abstract class and cannot be instantiated directly. Instances must be obtained from a suitable factory or query method. 


*java.awt.GraphicsEnvironment.createGraphics(BufferedImage)*

public abstract |java.awt.Graphics2D| createGraphics(java.awt.image.BufferedImage img)

Returns a Graphics2D object for rendering into the specified (|java.awt.image.BufferedImage|) . 


    img - the specified BufferedImage 

    Returns: a Graphics2D to be used for rendering into the specified BufferedImage 

*java.awt.GraphicsEnvironment.getAllFonts()*

public abstract |java.awt.Font|[] getAllFonts()

Returns an array containing a one-point size instance of all fonts available in this GraphicsEnvironment. Typical usage would be to allow a user to select a particular font. Then, 
the application can size the font and set various font attributes by calling the deriveFont method on the choosen instance. 

This method provides for the application the most precise control over which Font instance is used to render text. If a font in this GraphicsEnvironment has multiple programmable 
variations, only one instance of that Font is returned in the array, and other variations must be derived by the application. 

If a font in this environment has multiple programmable variations, such as Multiple-Master fonts, only one instance of that font is returned in the Font array. The other 
variations must be derived by the application. 



    Returns: an array of Font objects 

*java.awt.GraphicsEnvironment.getAvailableFontFamilyNames()*

public abstract |java.lang.String|[] getAvailableFontFamilyNames()

Returns an array containing the names of all font families in this GraphicsEnvironment localized for the default locale, as returned by Locale.getDefault(). 

Typical usage would be for presentation to a user for selection of a particular family name. An application can then specify this name when creating a font, in conjunction with a 
style, such as bold or italic, giving the font system flexibility in choosing its own best match among multiple fonts in the same font family. 



    Returns: an array of String containing font family names localized for the default locale, or a suitable alternative name if no name exists for this locale. 

*java.awt.GraphicsEnvironment.getAvailableFontFamilyNames(Locale)*

public abstract |java.lang.String|[] getAvailableFontFamilyNames(java.util.Locale l)

Returns an array containing the names of all font families in this GraphicsEnvironment localized for the specified locale. 

Typical usage would be for presentation to a user for selection of a particular family name. An application can then specify this name when creating a font, in conjunction with a 
style, such as bold or italic, giving the font system flexibility in choosing its own best match among multiple fonts in the same font family. 


    l - a {@link Locale} object that represents a particular geographical, political, or cultural region. Specifying null is equivalent to specifying Locale.getDefault(). 

    Returns: an array of String containing font family names localized for the specified Locale, or a suitable alternative name if no name exists for the specified locale. 

*java.awt.GraphicsEnvironment.getCenterPoint()*

public |java.awt.Point| getCenterPoint()
  throws |java.awt.HeadlessException|
         
Returns the Point where Windows should be centered. It is recommended that centered Windows be checked to ensure they fit within the available display area using 
getMaximumWindowBounds(). 



    Returns: the point where Windows should be centered 

*java.awt.GraphicsEnvironment.getDefaultScreenDevice()*

public abstract |java.awt.GraphicsDevice| getDefaultScreenDevice()
  throws |java.awt.HeadlessException|
         
Returns the default screen GraphicsDevice. 



    Returns: the GraphicsDevice that represents the default screen device 

*java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()*

public static synchronized |java.awt.GraphicsEnvironment| getLocalGraphicsEnvironment()

Returns the local GraphicsEnvironment. 



    Returns: the local GraphicsEnvironment 

*java.awt.GraphicsEnvironment.getMaximumWindowBounds()*

public |java.awt.Rectangle| getMaximumWindowBounds()
  throws |java.awt.HeadlessException|
         
Returns the maximum bounds for centered Windows. These bounds account for objects in the native windowing system such as task bars and menu bars. The returned bounds will reside 
on a single display with one exception: on multi-screen systems where Windows should be centered across all displays, this method returns the bounds of the entire display area. 

To get the usable bounds of a single display, use GraphicsConfiguration.getBounds() and Toolkit.getScreenInsets(). 



    Returns: the maximum bounds for centered Windows 

*java.awt.GraphicsEnvironment.getScreenDevices()*

public abstract |java.awt.GraphicsDevice|[] getScreenDevices()
  throws |java.awt.HeadlessException|
         
Returns an array of all of the screen GraphicsDevice objects. 



    Returns: an array containing all the GraphicsDevice objects that represent screen devices 

*java.awt.GraphicsEnvironment.isHeadless()*

public static boolean isHeadless()

Tests whether or not a display, keyboard, and mouse can be supported in this environment. If this method returns true, a HeadlessException is thrown from areas of the Toolkit and 
GraphicsEnvironment that are dependent on a display, keyboard, or mouse. 



    Returns: true if this environment cannot support a display, keyboard, and mouse; false otherwise 

*java.awt.GraphicsEnvironment.isHeadlessInstance()*

public boolean isHeadlessInstance()

Returns whether or not a display, keyboard, and mouse can be supported in this graphics environment. If this returns true, HeadlessException will be thrown from areas of the 
graphics environment that are dependent on a display, keyboard, or mouse. 



    Returns: true if a display, keyboard, and mouse can be supported in this environment; false otherwise 

*java.awt.GraphicsEnvironment.preferLocaleFonts()*

public void preferLocaleFonts()

Indicates a preference for locale-specific fonts in the mapping of logical fonts to physical fonts. Calling this method indicates that font rendering should primarily use fonts 
specific to the primary writing system (the one indicated by the default encoding and the initial default locale). For example, if the primary writing system is Japanese, then 
characters should be rendered using a Japanese font if possible, and other fonts should only be used for characters for which the Japanese font doesn't have glyphs. 

The actual change in font rendering behavior resulting from a call to this method is implementation dependent; it may have no effect at all, or the requested behavior may already 
match the default behavior. The behavior may differ between font rendering in lightweight and peered components. Since calling this method requests a different font, clients 
should expect different metrics, and may need to recalculate window sizes and layout. Therefore this method should be called before user interface initialisation. 



*java.awt.GraphicsEnvironment.preferProportionalFonts()*

public void preferProportionalFonts()

Indicates a preference for proportional over non-proportional (e.g. dual-spaced CJK fonts) fonts in the mapping of logical fonts to physical fonts. If the default mapping contains 
fonts for which proportional and non-proportional variants exist, then calling this method indicates the mapping should use a proportional variant. 

The actual change in font rendering behavior resulting from a call to this method is implementation dependent; it may have no effect at all. The behavior may differ between font 
rendering in lightweight and peered components. Since calling this method requests a different font, clients should expect different metrics, and may need to recalculate window 
sizes and layout. Therefore this method should be called before user interface initialisation. 





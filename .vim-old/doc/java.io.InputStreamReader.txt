*java.io.InputStreamReader* *InputStreamReader* An InputStreamReader is a bridge from byte streams to character streams: It
 reads bytes and decodes them into characters using a sp

public class InputStreamReader
  extends    |java.io.Reader|

|java.io.InputStreamReader_Description|
|java.io.InputStreamReader_Fields|
|java.io.InputStreamReader_Constructors|
|java.io.InputStreamReader_Methods|

====================================================================================================================================================================================

*java.io.InputStreamReader_Constructors*
|java.io.InputStreamReader(InputStream)|Create an InputStreamReader that uses the default charset.
|java.io.InputStreamReader(InputStream,Charset)|Create an InputStreamReader that uses the given charset.
|java.io.InputStreamReader(InputStream,CharsetDecoder)|Create an InputStreamReader that uses the given charset decoder.
|java.io.InputStreamReader(InputStream,String)|Create an InputStreamReader that uses the named charset.

*java.io.InputStreamReader_Methods*
|java.io.InputStreamReader.close()|Close the stream.
|java.io.InputStreamReader.getEncoding()|Return the name of the character encoding being used by this stream.
|java.io.InputStreamReader.read()|Read a single character.
|java.io.InputStreamReader.read(char[],int,int)|Read characters into a portion of an array.
|java.io.InputStreamReader.ready()|Tell whether this stream is ready to be read.

*java.io.InputStreamReader_Description*

An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified 
<code>charset</code>(|java.nio.charset.Charset|) . The charset that it uses may be specified by name or may be given explicitly, or the platform's default charset may be accepted. 

Each invocation of one of an InputStreamReader's read() methods may cause one or more bytes to be read from the underlying byte-input stream. To enable the efficient conversion of 
bytes to characters, more bytes may be read ahead from the underlying stream than are necessary to satisfy the current read operation. 

For top efficiency, consider wrapping an InputStreamReader within a BufferedReader. For example: 



BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); 



*java.io.InputStreamReader(InputStream)*

public InputStreamReader(java.io.InputStream in)

Create an InputStreamReader that uses the default charset. 

    in - An InputStream 

*java.io.InputStreamReader(InputStream,Charset)*

public InputStreamReader(
  java.io.InputStream in,
  java.nio.charset.Charset cs)

Create an InputStreamReader that uses the given charset. 

    in - An InputStream 
    cs - A charset 

*java.io.InputStreamReader(InputStream,CharsetDecoder)*

public InputStreamReader(
  java.io.InputStream in,
  java.nio.charset.CharsetDecoder dec)

Create an InputStreamReader that uses the given charset decoder. 

    in - An InputStream 
    dec - A charset decoder 

*java.io.InputStreamReader(InputStream,String)*

public InputStreamReader(
  java.io.InputStream in,
  java.lang.String charsetName)
  throws |java.io.UnsupportedEncodingException|
         
Create an InputStreamReader that uses the named charset. 

    in - An InputStream 
    charsetName - The name of a supported {@link java.nio.charset.Charset charset} 

*java.io.InputStreamReader.close()*

public void close()
  throws |java.io.IOException|
         
Close the stream. 



*java.io.InputStreamReader.getEncoding()*

public |java.lang.String| getEncoding()

Return the name of the character encoding being used by this stream. 

If the encoding has an historical name then that name is returned; otherwise the encoding's canonical name is returned. 

If this instance was created with the (|java.io.InputStreamReader|) constructor then the returned name, being unique for the encoding, may differ from the name passed to the 
constructor. This method may return null if the stream has been closed. 



    Returns: The historical name of this encoding, or possibly null if the stream has been closed 

*java.io.InputStreamReader.read()*

public int read()
  throws |java.io.IOException|
         
Read a single character. 



    Returns: The character read, or -1 if the end of the stream has been reached 

*java.io.InputStreamReader.read(char[],int,int)*

public int read(
  char[] cbuf,
  int offset,
  int length)
  throws |java.io.IOException|
         
Read characters into a portion of an array. 


    cbuf - Destination buffer 
    offset - Offset at which to start storing characters 
    length - Maximum number of characters to read 

    Returns: The number of characters read, or -1 if the end of the stream has been reached 

*java.io.InputStreamReader.ready()*

public boolean ready()
  throws |java.io.IOException|
         
Tell whether this stream is ready to be read. An InputStreamReader is ready if its input buffer is not empty, or if bytes are available to be read from the underlying byte stream. 





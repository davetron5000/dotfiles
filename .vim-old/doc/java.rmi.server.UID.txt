*java.rmi.server.UID* *UID* A UID represents an identifier that is unique over time
 with respect to the host it is generated on, or one of 216
 "well-known" identifiers.

public final class UID
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.rmi.server.UID_Description|
|java.rmi.server.UID_Fields|
|java.rmi.server.UID_Constructors|
|java.rmi.server.UID_Methods|

====================================================================================================================================================================================

*java.rmi.server.UID_Constructors*
|java.rmi.server.UID()|Generates a UID that is unique over time with  respect to the host that it was generated on.
|java.rmi.server.UID(short)|Creates a "well-known" UID.

*java.rmi.server.UID_Methods*
|java.rmi.server.UID.equals(Object)|Compares the specified object with this UID for  equality.
|java.rmi.server.UID.hashCode()|Returns the hash code value for this UID.
|java.rmi.server.UID.read(DataInput)|Constructs and returns a new UID instance by  unmarshalling a binary representation from an  DataInput instance.
|java.rmi.server.UID.toString()|Returns a string representation of this UID.
|java.rmi.server.UID.write(DataOutput)|Marshals a binary representation of this UID to  a DataOutput instance.

*java.rmi.server.UID_Description*

A UID represents an identifier that is unique over time with respect to the host it is generated on, or one of 216 "well-known" identifiers. 

The (|java.rmi.server.UID|) constructor can be used to generate an identifier that is unique over time with respect to the host it is generated on. The (|java.rmi.server.UID|) 
constructor can be used to create one of 216 well-known identifiers. 

A UID instance contains three primitive values: 

unique, an int that uniquely identifies the VM that this UID was generated in, with respect to its host and at the time represented by the time value (an example implementation of 
the unique value would be a process identifier), or zero for a well-known UID time, a long equal to a time (as returned by (|java.lang.System|) ) at which the VM that this UID was 
generated in was alive, or zero for a well-known UID count, a short to distinguish UIDs generated in the same VM with the same time value 

An independently generated UID instance is unique over time with respect to the host it is generated on as long as the host requires more than one millisecond to reboot and its 
system clock is never set backward. A globally unique identifier can be constructed by pairing a UID instance with a unique host identifier, such as an IP address. 



*java.rmi.server.UID()*

public UID()

Generates a UID that is unique over time with respect to the host that it was generated on. 


*java.rmi.server.UID(short)*

public UID(short num)

Creates a "well-known" UID. 

There are 216 possible such well-known ids. 

A UID created via this constructor will not clash with any UIDs generated via the no-arg constructor. 

    num - number for well-known UID 

*java.rmi.server.UID.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares the specified object with this UID for equality. 

This method returns true if and only if the specified object is a UID instance with the same unique, time, and count values as this one. 


    obj - the object to compare this UID to 

    Returns: true if the given object is equivalent to this one, and false otherwise 

*java.rmi.server.UID.hashCode()*

public int hashCode()

Returns the hash code value for this UID. 



    Returns: the hash code value for this UID 

*java.rmi.server.UID.read(DataInput)*

public static |java.rmi.server.UID| read(java.io.DataInput in)
  throws |java.io.IOException|
         
Constructs and returns a new UID instance by unmarshalling a binary representation from an DataInput instance. 

Specifically, this method first invokes the given stream's (|java.io.DataInput|) method to read a unique value, then it invoke's the stream's (|java.io.DataInput|) method to read 
a time value, then it invoke's the stream's (|java.io.DataInput|) method to read a count value, and then it creates and returns a new UID instance that contains the unique, time, 
and count values that were read from the stream. 


    in - the DataInput instance to read UID from 

    Returns: unmarshalled UID instance 

*java.rmi.server.UID.toString()*

public |java.lang.String| toString()

Returns a string representation of this UID. 



    Returns: a string representation of this UID 

*java.rmi.server.UID.write(DataOutput)*

public void write(java.io.DataOutput out)
  throws |java.io.IOException|
         
Marshals a binary representation of this UID to a DataOutput instance. 

Specifically, this method first invokes the given stream's (|java.io.DataOutput|) method with this UID's unique value, then it invokes the stream's (|java.io.DataOutput|) method 
with this UID's time value, and then it invokes the stream's (|java.io.DataOutput|) method with this UID's count value. 


    out - the DataOutput instance to write this UID to 



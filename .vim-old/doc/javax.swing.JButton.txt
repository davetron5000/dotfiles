*javax.swing.JButton* *JButton* An implementation of a "push" button.

public class JButton
  extends    |javax.swing.AbstractButton|
  implements |javax.accessibility.Accessible|

|javax.swing.JButton_Description|
|javax.swing.JButton_Fields|
|javax.swing.JButton_Constructors|
|javax.swing.JButton_Methods|

====================================================================================================================================================================================

*javax.swing.JButton_Constructors*
|javax.swing.JButton()|Creates a button with no set text or icon.
|javax.swing.JButton(Action)|Creates a button where properties are taken from the   Action supplied.
|javax.swing.JButton(Icon)|Creates a button with an icon.
|javax.swing.JButton(String)|Creates a button with text.
|javax.swing.JButton(String,Icon)|Creates a button with initial text and an icon.

*javax.swing.JButton_Methods*
|javax.swing.JButton.configurePropertiesFromAction(Action)|Factory method which sets the AbstractButton's properties  according to values from the Action instance.
|javax.swing.JButton.getAccessibleContext()|Gets the AccessibleContext associated with this  JButton.
|javax.swing.JButton.getUIClassID()|Returns a string that specifies the name of the Lclass  that renders this component.
|javax.swing.JButton.isDefaultButton()|Gets the value of the defaultButton property,  which if true means that this button is the current  default button for its JRootPane.
|javax.swing.JButton.isDefaultCapable()|Gets the value of the defaultCapable property.
|javax.swing.JButton.paramString()|Returns a string representation of this JButton.
|javax.swing.JButton.removeNotify()|Overrides JComponent.removeNotify to check if  this button is currently set as the default button on the  RootPane, and if so, sets the RootPan
|javax.swing.JButton.setDefaultCapable(boolean)|Sets the defaultCapable property,  which determines whether this button can be  made the default button for its root pane.
|javax.swing.JButton.updateUI()|Resets the UI property to a value from the current look and  feel.

*javax.swing.JButton_Description*

An implementation of a "push" button. See How to Use Buttons, Check Boxes, and Radio Buttons in The Java Tutorial for information and examples of using buttons. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.JButton()*

public JButton()

Creates a button with no set text or icon. 


*javax.swing.JButton(Action)*

public JButton(javax.swing.Action a)

Creates a button where properties are taken from the Action supplied. 

    a - the Action used to specify the new button 

*javax.swing.JButton(Icon)*

public JButton(javax.swing.Icon icon)

Creates a button with an icon. 

    icon - the Icon image to display on the button 

*javax.swing.JButton(String)*

public JButton(java.lang.String text)

Creates a button with text. 

    text - the text of the button 

*javax.swing.JButton(String,Icon)*

public JButton(
  java.lang.String text,
  javax.swing.Icon icon)

Creates a button with initial text and an icon. 

    text - the text of the button 
    icon - the Icon image to display on the button 

*javax.swing.JButton.configurePropertiesFromAction(Action)*

protected void configurePropertiesFromAction(javax.swing.Action a)

Factory method which sets the AbstractButton's properties according to values from the Action instance. The properties which get set may differ for AbstractButton subclasses. By 
default, the properties which get set are Text, Icon, Enabled, ToolTipText, ActionCommand, and Mnemonic. 


    a - the Action from which to get the properties, or null 

*javax.swing.JButton.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JButton. For JButtons, the AccessibleContext takes the form of an AccessibleJButton. A new AccessibleJButton instance is created if 
necessary. 



    Returns: an AccessibleJButton that serves as the AccessibleContext of this JButton 

*javax.swing.JButton.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns a string that specifies the name of the Lclass that renders this component. 



    Returns: the string "ButtonUI" 

*javax.swing.JButton.isDefaultButton()*

public boolean isDefaultButton()

Gets the value of the defaultButton property, which if true means that this button is the current default button for its JRootPane. Most look and feels render the default button 
differently, and may potentially provide bindings to access the default button. 



    Returns: the value of the defaultButton property 

*javax.swing.JButton.isDefaultCapable()*

public boolean isDefaultCapable()

Gets the value of the defaultCapable property. 



    Returns: the value of the defaultCapable property 

*javax.swing.JButton.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JButton. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between 
implementations. The returned string may be empty but may not be null. 



    Returns: a string representation of this JButton 

*javax.swing.JButton.removeNotify()*

public void removeNotify()

Overrides JComponent.removeNotify to check if this button is currently set as the default button on the RootPane, and if so, sets the RootPane's default button to null to ensure 
the RootPane doesn't hold onto an invalid button reference. 



*javax.swing.JButton.setDefaultCapable(boolean)*

public void setDefaultCapable(boolean defaultCapable)

Sets the defaultCapable property, which determines whether this button can be made the default button for its root pane. The default value of the defaultCapable property is true 
unless otherwise specified by the look and feel. 


    defaultCapable - true if this button will be capable of being the default button on the RootPane; otherwise false 

*javax.swing.JButton.updateUI()*

public void updateUI()

Resets the UI property to a value from the current look and feel. 





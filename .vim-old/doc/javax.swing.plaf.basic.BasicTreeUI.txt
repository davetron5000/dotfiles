*javax.swing.plaf.basic.BasicTreeUI* *BasicTreeUI* The basic Lfor a hierarchical data structure.

public class BasicTreeUI
  extends    |javax.swing.plaf.TreeUI|

|javax.swing.plaf.basic.BasicTreeUI_Description|
|javax.swing.plaf.basic.BasicTreeUI_Fields|
|javax.swing.plaf.basic.BasicTreeUI_Constructors|
|javax.swing.plaf.basic.BasicTreeUI_Methods|

====================================================================================================================================================================================

*javax.swing.plaf.basic.BasicTreeUI_Fields*
|javax.swing.tree.TreeCellEditor_javax.swing.plaf.basic.BasicTreeUI.cellEditor|
|javax.swing.Icon_javax.swing.plaf.basic.BasicTreeUI.collapsedIcon|
|boolean_javax.swing.plaf.basic.BasicTreeUI.createdCellEditor|
|boolean_javax.swing.plaf.basic.BasicTreeUI.createdRenderer|
|javax.swing.tree.TreeCellRenderer_javax.swing.plaf.basic.BasicTreeUI.currentCellRenderer|
|int_javax.swing.plaf.basic.BasicTreeUI.depthOffset|
|java.util.Hashtable<javax.swing.tree.TreePath, java.lang.Boolean>_javax.swing.plaf.basic.BasicTreeUI.drawingCache|
|java.awt.Component_javax.swing.plaf.basic.BasicTreeUI.editingComponent|
|javax.swing.tree.TreePath_javax.swing.plaf.basic.BasicTreeUI.editingPath|
|int_javax.swing.plaf.basic.BasicTreeUI.editingRow|
|boolean_javax.swing.plaf.basic.BasicTreeUI.editorHasDifferentSize|
|javax.swing.Icon_javax.swing.plaf.basic.BasicTreeUI.expandedIcon|
|boolean_javax.swing.plaf.basic.BasicTreeUI.largeModel|
|int_javax.swing.plaf.basic.BasicTreeUI.lastSelectedRow|
|int_javax.swing.plaf.basic.BasicTreeUI.leftChildIndent|
|javax.swing.tree.AbstractLayoutCache.NodeDimensions_javax.swing.plaf.basic.BasicTreeUI.nodeDimensions|
|java.awt.Dimension_javax.swing.plaf.basic.BasicTreeUI.preferredMinSize|
|java.awt.Dimension_javax.swing.plaf.basic.BasicTreeUI.preferredSize|
|javax.swing.CellRendererPane_javax.swing.plaf.basic.BasicTreeUI.rendererPane|
|int_javax.swing.plaf.basic.BasicTreeUI.rightChildIndent|
|boolean_javax.swing.plaf.basic.BasicTreeUI.stopEditingInCompleteEditing|
|int_javax.swing.plaf.basic.BasicTreeUI.totalChildIndent|
|javax.swing.JTree_javax.swing.plaf.basic.BasicTreeUI.tree|
|javax.swing.tree.TreeModel_javax.swing.plaf.basic.BasicTreeUI.treeModel|
|javax.swing.tree.TreeSelectionModel_javax.swing.plaf.basic.BasicTreeUI.treeSelectionModel|
|javax.swing.tree.AbstractLayoutCache_javax.swing.plaf.basic.BasicTreeUI.treeState|
|boolean_javax.swing.plaf.basic.BasicTreeUI.validCachedPreferredSize|

*javax.swing.plaf.basic.BasicTreeUI_Constructors*
|javax.swing.plaf.basic.BasicTreeUI()|

*javax.swing.plaf.basic.BasicTreeUI_Methods*
|javax.swing.plaf.basic.BasicTreeUI.cancelEditing(JTree)|Cancels the current editing session.
|javax.swing.plaf.basic.BasicTreeUI.checkForClickInExpandControl(TreePath,int,int)|If the mouseX and mouseY are in the  expand/collapse region of the row, this will toggle  the ro
|javax.swing.plaf.basic.BasicTreeUI.completeEditing()|Messages to stop the editing session.
|javax.swing.plaf.basic.BasicTreeUI.completeEditing(boolean,boolean,boolean)|Stops the editing session.
|javax.swing.plaf.basic.BasicTreeUI.completeUIInstall()|Invoked from installUI after all the defaults/listeners have been  installed.
|javax.swing.plaf.basic.BasicTreeUI.completeUIUninstall()|
|javax.swing.plaf.basic.BasicTreeUI.configureLayoutCache()|Resets the TreeState instance based on the tree we're providing the  look and feel for.
|javax.swing.plaf.basic.BasicTreeUI.createCellEditorListener()|Creates a listener to handle events from the current editor.
|javax.swing.plaf.basic.BasicTreeUI.createCellRendererPane()|Returns the renderer pane that renderer components are placed in.
|javax.swing.plaf.basic.BasicTreeUI.createComponentListener()|Creates and returns a new ComponentHandler.
|javax.swing.plaf.basic.BasicTreeUI.createDefaultCellEditor()|Creates a default cell editor.
|javax.swing.plaf.basic.BasicTreeUI.createDefaultCellRenderer()|Returns the default cell renderer that is used to do the  stamping of each node.
|javax.swing.plaf.basic.BasicTreeUI.createFocusListener()|Creates a listener that is responsible for updating the display  when focus is lost/gained.
|javax.swing.plaf.basic.BasicTreeUI.createKeyListener()|Creates the listener reponsible for getting key events from  the tree.
|javax.swing.plaf.basic.BasicTreeUI.createLayoutCache()|Creates the object responsible for managing what is expanded, as  well as the size of nodes.
|javax.swing.plaf.basic.BasicTreeUI.createMouseListener()|Creates the listener responsible for updating the selection based on  mouse events.
|javax.swing.plaf.basic.BasicTreeUI.createNodeDimensions()|Creates an instance of NodeDimensions that is able to determine  the size of a given node in the tree.
|javax.swing.plaf.basic.BasicTreeUI.createPropertyChangeListener()|Creates a listener that is responsible that updates the UI based on  how the tree changes.
|javax.swing.plaf.basic.BasicTreeUI.createSelectionModelPropertyChangeListener()|Creates the listener responsible for getting property change  events from the selection model.
|javax.swing.plaf.basic.BasicTreeUI.createTreeExpansionListener()|Creates and returns the object responsible for updating the treestate  when nodes expanded state changes.
|javax.swing.plaf.basic.BasicTreeUI.createTreeModelListener()|Returns a listener that can update the tree when the model changes.
|javax.swing.plaf.basic.BasicTreeUI.createTreeSelectionListener()|Creates the listener that updates the display based on selection change  methods.
|javax.swing.plaf.basic.BasicTreeUI.createUI(JComponent)|
|javax.swing.plaf.basic.BasicTreeUI.drawCentered(Component,Graphics,Icon,int,int)|
|javax.swing.plaf.basic.BasicTreeUI.drawDashedHorizontalLine(Graphics,int,int,int)|
|javax.swing.plaf.basic.BasicTreeUI.drawDashedVerticalLine(Graphics,int,int,int)|
|javax.swing.plaf.basic.BasicTreeUI.ensureRowsAreVisible(int,int)|Ensures that the rows identified by beginRow through endRow are  visible.
|javax.swing.plaf.basic.BasicTreeUI.getCellEditor()|
|javax.swing.plaf.basic.BasicTreeUI.getCellRenderer()|Return currentCellRenderer, which will either be the trees  renderer, or defaultCellRenderer, which ever wasn't null.
|javax.swing.plaf.basic.BasicTreeUI.getClosestPathForLocation(JTree,int,int)|Returns the path to the node that is closest to x,y.
|javax.swing.plaf.basic.BasicTreeUI.getCollapsedIcon()|
|javax.swing.plaf.basic.BasicTreeUI.getEditingPath(JTree)|Returns the path to the element that is being edited.
|javax.swing.plaf.basic.BasicTreeUI.getExpandedIcon()|
|javax.swing.plaf.basic.BasicTreeUI.getHashColor()|
|javax.swing.plaf.basic.BasicTreeUI.getHorizontalLegBuffer()|The horizontal element of legs between nodes starts at the  right of the left-hand side of the child node by default.
|javax.swing.plaf.basic.BasicTreeUI.getLastChildPath(TreePath)|Returns a path to the last child of parent.
|javax.swing.plaf.basic.BasicTreeUI.getLeftChildIndent()|
|javax.swing.plaf.basic.BasicTreeUI.getMaximumSize(JComponent)|Returns the maximum size for this component, which will be the  preferred size if the instance is currently in a JTr
|javax.swing.plaf.basic.BasicTreeUI.getMinimumSize(JComponent)|Returns the minimum size for this component.
|javax.swing.plaf.basic.BasicTreeUI.getModel()|
|javax.swing.plaf.basic.BasicTreeUI.getPathBounds(JTree,TreePath)|Returns the Rectangle enclosing the label portion that the  last item in path will be drawn into.
|javax.swing.plaf.basic.BasicTreeUI.getPathForRow(JTree,int)|Returns the path for passed in row.
|javax.swing.plaf.basic.BasicTreeUI.getPreferredMinSize()|Returns the minimum preferred size.
|javax.swing.plaf.basic.BasicTreeUI.getPreferredSize(JComponent)|Returns the preferred size to properly display the tree,  this is a cover method for getPreferredSize(c, false).
|javax.swing.plaf.basic.BasicTreeUI.getPreferredSize(JComponent,boolean)|Returns the preferred size to represent the tree in  c.
|javax.swing.plaf.basic.BasicTreeUI.getRightChildIndent()|
|javax.swing.plaf.basic.BasicTreeUI.getRowCount(JTree)|Returns the number of rows that are being displayed.
|javax.swing.plaf.basic.BasicTreeUI.getRowForPath(JTree,TreePath)|Returns the row that the last item identified in path is visible  at.
|javax.swing.plaf.basic.BasicTreeUI.getRowHeight()|
|javax.swing.plaf.basic.BasicTreeUI.getRowX(int,int)|Returns the location, along the x-axis, to render a particular row  at.
|javax.swing.plaf.basic.BasicTreeUI.getSelectionModel()|
|javax.swing.plaf.basic.BasicTreeUI.getShowsRootHandles()|
|javax.swing.plaf.basic.BasicTreeUI.getVerticalLegBuffer()|The vertical element of legs between nodes starts at the bottom of the  parent node by default.
|javax.swing.plaf.basic.BasicTreeUI.handleExpandControlClick(TreePath,int,int)|Messaged when the user clicks the particular row, this invokes  toggleExpandState.
|javax.swing.plaf.basic.BasicTreeUI.installComponents()|Intalls the subcomponents of the tree, which is the renderer pane.
|javax.swing.plaf.basic.BasicTreeUI.installDefaults()|
|javax.swing.plaf.basic.BasicTreeUI.installKeyboardActions()|
|javax.swing.plaf.basic.BasicTreeUI.installListeners()|
|javax.swing.plaf.basic.BasicTreeUI.installUI(JComponent)|
|javax.swing.plaf.basic.BasicTreeUI.isEditable()|
|javax.swing.plaf.basic.BasicTreeUI.isEditing(JTree)|Returns true if the tree is being edited.
|javax.swing.plaf.basic.BasicTreeUI.isLargeModel()|
|javax.swing.plaf.basic.BasicTreeUI.isLeaf(int)|
|javax.swing.plaf.basic.BasicTreeUI.isLocationInExpandControl(TreePath,int,int)|Returns true if mouseX and mouseY fall  in the area of row that is used to expand/collapse the node
|javax.swing.plaf.basic.BasicTreeUI.isMultiSelectEvent(MouseEvent)|Returning true signifies a mouse event on the node should select  from the anchor point.
|javax.swing.plaf.basic.BasicTreeUI.isRootVisible()|
|javax.swing.plaf.basic.BasicTreeUI.isToggleEvent(MouseEvent)|Returning true indicates the row under the mouse should be toggled  based on the event.
|javax.swing.plaf.basic.BasicTreeUI.isToggleSelectionEvent(MouseEvent)|Returning true signifies a mouse event on the node should toggle  the selection of only the row under mouse.
|javax.swing.plaf.basic.BasicTreeUI.paint(Graphics,JComponent)|
|javax.swing.plaf.basic.BasicTreeUI.paintExpandControl(Graphics,Rectangle,Insets,Rectangle,TreePath,int,boolean,boolean,boolean)|Paints the expand (toggle) part of a row.
|javax.swing.plaf.basic.BasicTreeUI.paintHorizontalLine(Graphics,JComponent,int,int,int)|Paints a horizontal line.
|javax.swing.plaf.basic.BasicTreeUI.paintHorizontalPartOfLeg(Graphics,Rectangle,Insets,Rectangle,TreePath,int,boolean,boolean,boolean)|Paints the horizontal part of the leg.
|javax.swing.plaf.basic.BasicTreeUI.paintRow(Graphics,Rectangle,Insets,Rectangle,TreePath,int,boolean,boolean,boolean)|Paints the renderer part of a row.
|javax.swing.plaf.basic.BasicTreeUI.paintVerticalLine(Graphics,JComponent,int,int,int)|Paints a vertical line.
|javax.swing.plaf.basic.BasicTreeUI.paintVerticalPartOfLeg(Graphics,Rectangle,Insets,TreePath)|Paints the vertical part of the leg.
|javax.swing.plaf.basic.BasicTreeUI.pathWasCollapsed(TreePath)|Messaged from the VisibleTreeNode after it has collapsed.
|javax.swing.plaf.basic.BasicTreeUI.pathWasExpanded(TreePath)|Messaged from the VisibleTreeNode after it has been expanded.
|javax.swing.plaf.basic.BasicTreeUI.prepareForUIInstall()|Invoked after the tree instance variable has been  set, but before any defaults/listeners have been installed.
|javax.swing.plaf.basic.BasicTreeUI.prepareForUIUninstall()|
|javax.swing.plaf.basic.BasicTreeUI.selectPathForEvent(TreePath,MouseEvent)|Messaged to update the selection based on a MouseEvent over a  particular row.
|javax.swing.plaf.basic.BasicTreeUI.setCellEditor(TreeCellEditor)|Sets the cell editor.
|javax.swing.plaf.basic.BasicTreeUI.setCellRenderer(TreeCellRenderer)|Sets the TreeCellRenderer to tcr.
|javax.swing.plaf.basic.BasicTreeUI.setCollapsedIcon(Icon)|
|javax.swing.plaf.basic.BasicTreeUI.setEditable(boolean)|Configures the receiver to allow, or not allow, editing.
|javax.swing.plaf.basic.BasicTreeUI.setExpandedIcon(Icon)|
|javax.swing.plaf.basic.BasicTreeUI.setHashColor(Color)|
|javax.swing.plaf.basic.BasicTreeUI.setLargeModel(boolean)|Updates the componentListener, if necessary.
|javax.swing.plaf.basic.BasicTreeUI.setLeftChildIndent(int)|
|javax.swing.plaf.basic.BasicTreeUI.setModel(TreeModel)|Sets the TreeModel.
|javax.swing.plaf.basic.BasicTreeUI.setPreferredMinSize(Dimension)|Sets the preferred minimum size.
|javax.swing.plaf.basic.BasicTreeUI.setRightChildIndent(int)|
|javax.swing.plaf.basic.BasicTreeUI.setRootVisible(boolean)|Sets the root to being visible.
|javax.swing.plaf.basic.BasicTreeUI.setRowHeight(int)|Sets the row height, this is forwarded to the treeState.
|javax.swing.plaf.basic.BasicTreeUI.setSelectionModel(TreeSelectionModel)|Resets the selection model.
|javax.swing.plaf.basic.BasicTreeUI.setShowsRootHandles(boolean)|Determines whether the node handles are to be displayed.
|javax.swing.plaf.basic.BasicTreeUI.shouldPaintExpandControl(TreePath,int,boolean,boolean,boolean)|Returns true if the expand (toggle) control should be drawn for  the specified r
|javax.swing.plaf.basic.BasicTreeUI.startEditing(TreePath,MouseEvent)|Will start editing for node if there is a cellEditor and  shouldSelectCell returns true.
|javax.swing.plaf.basic.BasicTreeUI.startEditingAtPath(JTree,TreePath)|Selects the last item in path and tries to edit it.
|javax.swing.plaf.basic.BasicTreeUI.stopEditing(JTree)|Stops the current editing session.
|javax.swing.plaf.basic.BasicTreeUI.toggleExpandState(TreePath)|Expands path if it is not expanded, or collapses row if it is expanded.
|javax.swing.plaf.basic.BasicTreeUI.uninstallComponents()|Uninstalls the renderer pane.
|javax.swing.plaf.basic.BasicTreeUI.uninstallDefaults()|
|javax.swing.plaf.basic.BasicTreeUI.uninstallKeyboardActions()|
|javax.swing.plaf.basic.BasicTreeUI.uninstallListeners()|
|javax.swing.plaf.basic.BasicTreeUI.uninstallUI(JComponent)|
|javax.swing.plaf.basic.BasicTreeUI.updateCachedPreferredSize()|Updates the preferredSize instance variable,  which is returned from getPreferredSize().
|javax.swing.plaf.basic.BasicTreeUI.updateCellEditor()|Updates the cellEditor based on the editability of the JTree that  we're contained in.
|javax.swing.plaf.basic.BasicTreeUI.updateDepthOffset()|Updates how much each depth should be offset by.
|javax.swing.plaf.basic.BasicTreeUI.updateExpandedDescendants(TreePath)|Updates the expanded state of all the descendants of path  by getting the expanded descendants from the tre
|javax.swing.plaf.basic.BasicTreeUI.updateLayoutCacheExpandedNodes()|Makes all the nodes that are expanded in JTree expanded in LayoutCache.
|javax.swing.plaf.basic.BasicTreeUI.updateRenderer()|Messaged from the tree we're in when the renderer has changed.
|javax.swing.plaf.basic.BasicTreeUI.updateSize()|Marks the cached size as being invalid, and messages the  tree with treeDidChange.

*javax.swing.plaf.basic.BasicTreeUI_Description*

The basic Lfor a hierarchical data structure. 



*javax.swing.tree.TreeCellEditor_javax.swing.plaf.basic.BasicTreeUI.cellEditor*

Editor for the tree. 


*javax.swing.Icon_javax.swing.plaf.basic.BasicTreeUI.collapsedIcon*




*boolean_javax.swing.plaf.basic.BasicTreeUI.createdCellEditor*

Set to true if editor that is currently in the tree was created by this instance. 


*boolean_javax.swing.plaf.basic.BasicTreeUI.createdRenderer*

Set to true if the renderer that is currently in the tree was created by this instance. 


*javax.swing.tree.TreeCellRenderer_javax.swing.plaf.basic.BasicTreeUI.currentCellRenderer*

Renderer that is being used to do the actual cell drawing. 


*int_javax.swing.plaf.basic.BasicTreeUI.depthOffset*

How much the depth should be offset to properly calculate x locations. This is based on whether or not the root is visible, and if the root handles are visible. 


*java.util.Hashtable<javax.swing.tree.TreePath, java.lang.Boolean>_javax.swing.plaf.basic.BasicTreeUI.drawingCache*

Used for minimizing the drawing of vertical lines. 


*java.awt.Component_javax.swing.plaf.basic.BasicTreeUI.editingComponent*

When editing, this will be the Component that is doing the actual editing. 


*javax.swing.tree.TreePath_javax.swing.plaf.basic.BasicTreeUI.editingPath*

Path that is being edited. 


*int_javax.swing.plaf.basic.BasicTreeUI.editingRow*

Row that is being edited. Should only be referenced if editingComponent is not null. 


*boolean_javax.swing.plaf.basic.BasicTreeUI.editorHasDifferentSize*

Set to true if the editor has a different size than the renderer. 


*javax.swing.Icon_javax.swing.plaf.basic.BasicTreeUI.expandedIcon*




*boolean_javax.swing.plaf.basic.BasicTreeUI.largeModel*

True if doing optimizations for a largeModel. Subclasses that don't support this may wish to override createLayoutCache to not return a FixedHeightLayoutCache instance. 


*int_javax.swing.plaf.basic.BasicTreeUI.lastSelectedRow*

Index of the row that was last selected. 


*int_javax.swing.plaf.basic.BasicTreeUI.leftChildIndent*

Distance between left margin and where vertical dashes will be drawn. 


*javax.swing.tree.AbstractLayoutCache.NodeDimensions_javax.swing.plaf.basic.BasicTreeUI.nodeDimensions*

Reponsible for telling the TreeState the size needed for a node. 


*java.awt.Dimension_javax.swing.plaf.basic.BasicTreeUI.preferredMinSize*

Minimum preferred size. 


*java.awt.Dimension_javax.swing.plaf.basic.BasicTreeUI.preferredSize*

Size needed to completely display all the nodes. 


*javax.swing.CellRendererPane_javax.swing.plaf.basic.BasicTreeUI.rendererPane*

Used to paint the TreeCellRenderer. 


*int_javax.swing.plaf.basic.BasicTreeUI.rightChildIndent*

Distance to add to leftChildIndent to determine where cell contents will be drawn. 


*boolean_javax.swing.plaf.basic.BasicTreeUI.stopEditingInCompleteEditing*

Set to false when editing and shouldSelectCell() returns true meaning the node should be selected before editing, used in completeEditing. 


*int_javax.swing.plaf.basic.BasicTreeUI.totalChildIndent*

Total distance that will be indented. The sum of leftChildIndent and rightChildIndent. 


*javax.swing.JTree_javax.swing.plaf.basic.BasicTreeUI.tree*

Component that we're going to be drawing into. 


*javax.swing.tree.TreeModel_javax.swing.plaf.basic.BasicTreeUI.treeModel*

Used to determine what to display. 


*javax.swing.tree.TreeSelectionModel_javax.swing.plaf.basic.BasicTreeUI.treeSelectionModel*

Model maintaing the selection. 


*javax.swing.tree.AbstractLayoutCache_javax.swing.plaf.basic.BasicTreeUI.treeState*

Object responsible for handling sizing and expanded issues. 


*boolean_javax.swing.plaf.basic.BasicTreeUI.validCachedPreferredSize*

Is the preferredSize valid? 



*javax.swing.plaf.basic.BasicTreeUI()*

public BasicTreeUI()




*javax.swing.plaf.basic.BasicTreeUI.cancelEditing(JTree)*

public void cancelEditing(javax.swing.JTree tree)

Cancels the current editing session. 



*javax.swing.plaf.basic.BasicTreeUI.checkForClickInExpandControl(TreePath,int,int)*

protected void checkForClickInExpandControl(
  javax.swing.tree.TreePath path,
  int mouseX,
  int mouseY)

If the mouseX and mouseY are in the expand/collapse region of the row, this will toggle the row. 



*javax.swing.plaf.basic.BasicTreeUI.completeEditing()*

protected void completeEditing()

Messages to stop the editing session. If the UI the receiver is providing the look and feel for returns true from getInvokesStopCellEditing, stopCellEditing will invoked on the 
current editor. Then completeEditing will be messaged with false, true, false to cancel any lingering editing. 



*javax.swing.plaf.basic.BasicTreeUI.completeEditing(boolean,boolean,boolean)*

protected void completeEditing(
  boolean messageStop,
  boolean messageCancel,
  boolean messageTree)

Stops the editing session. If messageStop is true the editor is messaged with stopEditing, if messageCancel is true the editor is messaged with cancelEditing. If messageTree is 
true the treeModel is messaged with valueForPathChanged. 



*javax.swing.plaf.basic.BasicTreeUI.completeUIInstall()*

protected void completeUIInstall()

Invoked from installUI after all the defaults/listeners have been installed. 



*javax.swing.plaf.basic.BasicTreeUI.completeUIUninstall()*

protected void completeUIUninstall()





*javax.swing.plaf.basic.BasicTreeUI.configureLayoutCache()*

protected void configureLayoutCache()

Resets the TreeState instance based on the tree we're providing the look and feel for. 



*javax.swing.plaf.basic.BasicTreeUI.createCellEditorListener()*

protected |javax.swing.event.CellEditorListener| createCellEditorListener()

Creates a listener to handle events from the current editor. 



*javax.swing.plaf.basic.BasicTreeUI.createCellRendererPane()*

protected |javax.swing.CellRendererPane| createCellRendererPane()

Returns the renderer pane that renderer components are placed in. 



*javax.swing.plaf.basic.BasicTreeUI.createComponentListener()*

protected |java.awt.event.ComponentListener| createComponentListener()

Creates and returns a new ComponentHandler. This is used for the large model to mark the validCachedPreferredSize as invalid when the component moves. 



*javax.swing.plaf.basic.BasicTreeUI.createDefaultCellEditor()*

protected |javax.swing.tree.TreeCellEditor| createDefaultCellEditor()

Creates a default cell editor. 



*javax.swing.plaf.basic.BasicTreeUI.createDefaultCellRenderer()*

protected |javax.swing.tree.TreeCellRenderer| createDefaultCellRenderer()

Returns the default cell renderer that is used to do the stamping of each node. 



*javax.swing.plaf.basic.BasicTreeUI.createFocusListener()*

protected |java.awt.event.FocusListener| createFocusListener()

Creates a listener that is responsible for updating the display when focus is lost/gained. 



*javax.swing.plaf.basic.BasicTreeUI.createKeyListener()*

protected |java.awt.event.KeyListener| createKeyListener()

Creates the listener reponsible for getting key events from the tree. 



*javax.swing.plaf.basic.BasicTreeUI.createLayoutCache()*

protected |javax.swing.tree.AbstractLayoutCache| createLayoutCache()

Creates the object responsible for managing what is expanded, as well as the size of nodes. 



*javax.swing.plaf.basic.BasicTreeUI.createMouseListener()*

protected |java.awt.event.MouseListener| createMouseListener()

Creates the listener responsible for updating the selection based on mouse events. 



*javax.swing.plaf.basic.BasicTreeUI.createNodeDimensions()*

protected |javax.swing.tree.AbstractLayoutCache.NodeDimensions| createNodeDimensions()

Creates an instance of NodeDimensions that is able to determine the size of a given node in the tree. 



*javax.swing.plaf.basic.BasicTreeUI.createPropertyChangeListener()*

protected |java.beans.PropertyChangeListener| createPropertyChangeListener()

Creates a listener that is responsible that updates the UI based on how the tree changes. 



*javax.swing.plaf.basic.BasicTreeUI.createSelectionModelPropertyChangeListener()*

protected |java.beans.PropertyChangeListener| createSelectionModelPropertyChangeListener()

Creates the listener responsible for getting property change events from the selection model. 



*javax.swing.plaf.basic.BasicTreeUI.createTreeExpansionListener()*

protected |javax.swing.event.TreeExpansionListener| createTreeExpansionListener()

Creates and returns the object responsible for updating the treestate when nodes expanded state changes. 



*javax.swing.plaf.basic.BasicTreeUI.createTreeModelListener()*

protected |javax.swing.event.TreeModelListener| createTreeModelListener()

Returns a listener that can update the tree when the model changes. 



*javax.swing.plaf.basic.BasicTreeUI.createTreeSelectionListener()*

protected |javax.swing.event.TreeSelectionListener| createTreeSelectionListener()

Creates the listener that updates the display based on selection change methods. 



*javax.swing.plaf.basic.BasicTreeUI.createUI(JComponent)*

public static |javax.swing.plaf.ComponentUI| createUI(javax.swing.JComponent x)





*javax.swing.plaf.basic.BasicTreeUI.drawCentered(Component,Graphics,Icon,int,int)*

protected void drawCentered(
  java.awt.Component c,
  java.awt.Graphics graphics,
  javax.swing.Icon icon,
  int x,
  int y)





*javax.swing.plaf.basic.BasicTreeUI.drawDashedHorizontalLine(Graphics,int,int,int)*

protected void drawDashedHorizontalLine(
  java.awt.Graphics g,
  int y,
  int x1,
  int x2)





*javax.swing.plaf.basic.BasicTreeUI.drawDashedVerticalLine(Graphics,int,int,int)*

protected void drawDashedVerticalLine(
  java.awt.Graphics g,
  int x,
  int y1,
  int y2)





*javax.swing.plaf.basic.BasicTreeUI.ensureRowsAreVisible(int,int)*

protected void ensureRowsAreVisible(
  int beginRow,
  int endRow)

Ensures that the rows identified by beginRow through endRow are visible. 



*javax.swing.plaf.basic.BasicTreeUI.getCellEditor()*

protected |javax.swing.tree.TreeCellEditor| getCellEditor()





*javax.swing.plaf.basic.BasicTreeUI.getCellRenderer()*

protected |javax.swing.tree.TreeCellRenderer| getCellRenderer()

Return currentCellRenderer, which will either be the trees renderer, or defaultCellRenderer, which ever wasn't null. 



*javax.swing.plaf.basic.BasicTreeUI.getClosestPathForLocation(JTree,int,int)*

public |javax.swing.tree.TreePath| getClosestPathForLocation(
  javax.swing.JTree tree,
  int x,
  int y)

Returns the path to the node that is closest to x,y. If there is nothing currently visible this will return null, otherwise it'll always return a valid path. If you need to test 
if the returned object is exactly at x, y you should get the bounds for the returned path and test x, y against that. 



*javax.swing.plaf.basic.BasicTreeUI.getCollapsedIcon()*

public |javax.swing.Icon| getCollapsedIcon()





*javax.swing.plaf.basic.BasicTreeUI.getEditingPath(JTree)*

public |javax.swing.tree.TreePath| getEditingPath(javax.swing.JTree tree)

Returns the path to the element that is being edited. 



*javax.swing.plaf.basic.BasicTreeUI.getExpandedIcon()*

public |javax.swing.Icon| getExpandedIcon()





*javax.swing.plaf.basic.BasicTreeUI.getHashColor()*

protected |java.awt.Color| getHashColor()





*javax.swing.plaf.basic.BasicTreeUI.getHorizontalLegBuffer()*

protected int getHorizontalLegBuffer()

The horizontal element of legs between nodes starts at the right of the left-hand side of the child node by default. This method makes the leg end before that. 



*javax.swing.plaf.basic.BasicTreeUI.getLastChildPath(TreePath)*

protected |javax.swing.tree.TreePath| getLastChildPath(javax.swing.tree.TreePath parent)

Returns a path to the last child of parent. 



*javax.swing.plaf.basic.BasicTreeUI.getLeftChildIndent()*

public int getLeftChildIndent()





*javax.swing.plaf.basic.BasicTreeUI.getMaximumSize(JComponent)*

public |java.awt.Dimension| getMaximumSize(javax.swing.JComponent c)

Returns the maximum size for this component, which will be the preferred size if the instance is currently in a JTree, or 0, 0. 



*javax.swing.plaf.basic.BasicTreeUI.getMinimumSize(JComponent)*

public |java.awt.Dimension| getMinimumSize(javax.swing.JComponent c)

Returns the minimum size for this component. Which will be the min preferred size or 0, 0. 



*javax.swing.plaf.basic.BasicTreeUI.getModel()*

protected |javax.swing.tree.TreeModel| getModel()





*javax.swing.plaf.basic.BasicTreeUI.getPathBounds(JTree,TreePath)*

public |java.awt.Rectangle| getPathBounds(
  javax.swing.JTree tree,
  javax.swing.tree.TreePath path)

Returns the Rectangle enclosing the label portion that the last item in path will be drawn into. Will return null if any component in path is currently valid. 



*javax.swing.plaf.basic.BasicTreeUI.getPathForRow(JTree,int)*

public |javax.swing.tree.TreePath| getPathForRow(
  javax.swing.JTree tree,
  int row)

Returns the path for passed in row. If row is not visible null is returned. 



*javax.swing.plaf.basic.BasicTreeUI.getPreferredMinSize()*

public |java.awt.Dimension| getPreferredMinSize()

Returns the minimum preferred size. 



*javax.swing.plaf.basic.BasicTreeUI.getPreferredSize(JComponent)*

public |java.awt.Dimension| getPreferredSize(javax.swing.JComponent c)

Returns the preferred size to properly display the tree, this is a cover method for getPreferredSize(c, false). 



*javax.swing.plaf.basic.BasicTreeUI.getPreferredSize(JComponent,boolean)*

public |java.awt.Dimension| getPreferredSize(
  javax.swing.JComponent c,
  boolean checkConsistancy)

Returns the preferred size to represent the tree in c. If checkConsistancy is true checkConsistancy is messaged first. 



*javax.swing.plaf.basic.BasicTreeUI.getRightChildIndent()*

public int getRightChildIndent()





*javax.swing.plaf.basic.BasicTreeUI.getRowCount(JTree)*

public int getRowCount(javax.swing.JTree tree)

Returns the number of rows that are being displayed. 



*javax.swing.plaf.basic.BasicTreeUI.getRowForPath(JTree,TreePath)*

public int getRowForPath(
  javax.swing.JTree tree,
  javax.swing.tree.TreePath path)

Returns the row that the last item identified in path is visible at. Will return -1 if any of the elements in path are not currently visible. 



*javax.swing.plaf.basic.BasicTreeUI.getRowHeight()*

protected int getRowHeight()





*javax.swing.plaf.basic.BasicTreeUI.getRowX(int,int)*

protected int getRowX(
  int row,
  int depth)

Returns the location, along the x-axis, to render a particular row at. The return value does not include any Insets specified on the JTree. This does not check for the validity of 
the row or depth, it is assumed to be correct and will not throw an Exception if the row or depth doesn't match that of the tree. 


    row - Row to return x location for 
    depth - Depth of the row 

    Returns: amount to indent the given row. 

*javax.swing.plaf.basic.BasicTreeUI.getSelectionModel()*

protected |javax.swing.tree.TreeSelectionModel| getSelectionModel()





*javax.swing.plaf.basic.BasicTreeUI.getShowsRootHandles()*

protected boolean getShowsRootHandles()





*javax.swing.plaf.basic.BasicTreeUI.getVerticalLegBuffer()*

protected int getVerticalLegBuffer()

The vertical element of legs between nodes starts at the bottom of the parent node by default. This method makes the leg start below that. 



*javax.swing.plaf.basic.BasicTreeUI.handleExpandControlClick(TreePath,int,int)*

protected void handleExpandControlClick(
  javax.swing.tree.TreePath path,
  int mouseX,
  int mouseY)

Messaged when the user clicks the particular row, this invokes toggleExpandState. 



*javax.swing.plaf.basic.BasicTreeUI.installComponents()*

protected void installComponents()

Intalls the subcomponents of the tree, which is the renderer pane. 



*javax.swing.plaf.basic.BasicTreeUI.installDefaults()*

protected void installDefaults()





*javax.swing.plaf.basic.BasicTreeUI.installKeyboardActions()*

protected void installKeyboardActions()





*javax.swing.plaf.basic.BasicTreeUI.installListeners()*

protected void installListeners()





*javax.swing.plaf.basic.BasicTreeUI.installUI(JComponent)*

public void installUI(javax.swing.JComponent c)





*javax.swing.plaf.basic.BasicTreeUI.isEditable()*

protected boolean isEditable()





*javax.swing.plaf.basic.BasicTreeUI.isEditing(JTree)*

public boolean isEditing(javax.swing.JTree tree)

Returns true if the tree is being edited. The item that is being edited can be returned by getEditingPath(). 



*javax.swing.plaf.basic.BasicTreeUI.isLargeModel()*

protected boolean isLargeModel()





*javax.swing.plaf.basic.BasicTreeUI.isLeaf(int)*

protected boolean isLeaf(int row)





    Returns: true if the node at row is a leaf. 

*javax.swing.plaf.basic.BasicTreeUI.isLocationInExpandControl(TreePath,int,int)*

protected boolean isLocationInExpandControl(
  javax.swing.tree.TreePath path,
  int mouseX,
  int mouseY)

Returns true if mouseX and mouseY fall in the area of row that is used to expand/collapse the node and the node at row does not represent a leaf. 



*javax.swing.plaf.basic.BasicTreeUI.isMultiSelectEvent(MouseEvent)*

protected boolean isMultiSelectEvent(java.awt.event.MouseEvent event)

Returning true signifies a mouse event on the node should select from the anchor point. 



*javax.swing.plaf.basic.BasicTreeUI.isRootVisible()*

protected boolean isRootVisible()





*javax.swing.plaf.basic.BasicTreeUI.isToggleEvent(MouseEvent)*

protected boolean isToggleEvent(java.awt.event.MouseEvent event)

Returning true indicates the row under the mouse should be toggled based on the event. This is invoked after checkForClickInExpandControl, implying the location is not in the 
expand (toggle) control 



*javax.swing.plaf.basic.BasicTreeUI.isToggleSelectionEvent(MouseEvent)*

protected boolean isToggleSelectionEvent(java.awt.event.MouseEvent event)

Returning true signifies a mouse event on the node should toggle the selection of only the row under mouse. 



*javax.swing.plaf.basic.BasicTreeUI.paint(Graphics,JComponent)*

public void paint(
  java.awt.Graphics g,
  javax.swing.JComponent c)





*javax.swing.plaf.basic.BasicTreeUI.paintExpandControl(Graphics,Rectangle,Insets,Rectangle,TreePath,int,boolean,boolean,boolean)*

protected void paintExpandControl(
  java.awt.Graphics g,
  java.awt.Rectangle clipBounds,
  java.awt.Insets insets,
  java.awt.Rectangle bounds,
  javax.swing.tree.TreePath path,
  int row,
  boolean isExpanded,
  boolean hasBeenExpanded,
  boolean isLeaf)

Paints the expand (toggle) part of a row. The receiver should NOT modify clipBounds, or insets. 



*javax.swing.plaf.basic.BasicTreeUI.paintHorizontalLine(Graphics,JComponent,int,int,int)*

protected void paintHorizontalLine(
  java.awt.Graphics g,
  javax.swing.JComponent c,
  int y,
  int left,
  int right)

Paints a horizontal line. 



*javax.swing.plaf.basic.BasicTreeUI.paintHorizontalPartOfLeg(Graphics,Rectangle,Insets,Rectangle,TreePath,int,boolean,boolean,boolean)*

protected void paintHorizontalPartOfLeg(
  java.awt.Graphics g,
  java.awt.Rectangle clipBounds,
  java.awt.Insets insets,
  java.awt.Rectangle bounds,
  javax.swing.tree.TreePath path,
  int row,
  boolean isExpanded,
  boolean hasBeenExpanded,
  boolean isLeaf)

Paints the horizontal part of the leg. The receiver should NOT modify clipBounds, or insets. NOTE: parentRow can be -1 if the root is not visible. 



*javax.swing.plaf.basic.BasicTreeUI.paintRow(Graphics,Rectangle,Insets,Rectangle,TreePath,int,boolean,boolean,boolean)*

protected void paintRow(
  java.awt.Graphics g,
  java.awt.Rectangle clipBounds,
  java.awt.Insets insets,
  java.awt.Rectangle bounds,
  javax.swing.tree.TreePath path,
  int row,
  boolean isExpanded,
  boolean hasBeenExpanded,
  boolean isLeaf)

Paints the renderer part of a row. The receiver should NOT modify clipBounds, or insets. 



*javax.swing.plaf.basic.BasicTreeUI.paintVerticalLine(Graphics,JComponent,int,int,int)*

protected void paintVerticalLine(
  java.awt.Graphics g,
  javax.swing.JComponent c,
  int x,
  int top,
  int bottom)

Paints a vertical line. 



*javax.swing.plaf.basic.BasicTreeUI.paintVerticalPartOfLeg(Graphics,Rectangle,Insets,TreePath)*

protected void paintVerticalPartOfLeg(
  java.awt.Graphics g,
  java.awt.Rectangle clipBounds,
  java.awt.Insets insets,
  javax.swing.tree.TreePath path)

Paints the vertical part of the leg. The receiver should NOT modify clipBounds, insets. 



*javax.swing.plaf.basic.BasicTreeUI.pathWasCollapsed(TreePath)*

protected void pathWasCollapsed(javax.swing.tree.TreePath path)

Messaged from the VisibleTreeNode after it has collapsed. 



*javax.swing.plaf.basic.BasicTreeUI.pathWasExpanded(TreePath)*

protected void pathWasExpanded(javax.swing.tree.TreePath path)

Messaged from the VisibleTreeNode after it has been expanded. 



*javax.swing.plaf.basic.BasicTreeUI.prepareForUIInstall()*

protected void prepareForUIInstall()

Invoked after the tree instance variable has been set, but before any defaults/listeners have been installed. 



*javax.swing.plaf.basic.BasicTreeUI.prepareForUIUninstall()*

protected void prepareForUIUninstall()





*javax.swing.plaf.basic.BasicTreeUI.selectPathForEvent(TreePath,MouseEvent)*

protected void selectPathForEvent(
  javax.swing.tree.TreePath path,
  java.awt.event.MouseEvent event)

Messaged to update the selection based on a MouseEvent over a particular row. If the event is a toggle selection event, the row is either selected, or deselected. If the event 
identifies a multi selection event, the selection is updated from the anchor point. Otherwise the row is selected, and if the event specified a toggle event the row is 
expanded/collapsed. 



*javax.swing.plaf.basic.BasicTreeUI.setCellEditor(TreeCellEditor)*

protected void setCellEditor(javax.swing.tree.TreeCellEditor editor)

Sets the cell editor. 



*javax.swing.plaf.basic.BasicTreeUI.setCellRenderer(TreeCellRenderer)*

protected void setCellRenderer(javax.swing.tree.TreeCellRenderer tcr)

Sets the TreeCellRenderer to tcr. This invokes updateRenderer. 



*javax.swing.plaf.basic.BasicTreeUI.setCollapsedIcon(Icon)*

public void setCollapsedIcon(javax.swing.Icon newG)





*javax.swing.plaf.basic.BasicTreeUI.setEditable(boolean)*

protected void setEditable(boolean newValue)

Configures the receiver to allow, or not allow, editing. 



*javax.swing.plaf.basic.BasicTreeUI.setExpandedIcon(Icon)*

public void setExpandedIcon(javax.swing.Icon newG)





*javax.swing.plaf.basic.BasicTreeUI.setHashColor(Color)*

protected void setHashColor(java.awt.Color color)





*javax.swing.plaf.basic.BasicTreeUI.setLargeModel(boolean)*

protected void setLargeModel(boolean largeModel)

Updates the componentListener, if necessary. 



*javax.swing.plaf.basic.BasicTreeUI.setLeftChildIndent(int)*

public void setLeftChildIndent(int newAmount)





*javax.swing.plaf.basic.BasicTreeUI.setModel(TreeModel)*

protected void setModel(javax.swing.tree.TreeModel model)

Sets the TreeModel. 



*javax.swing.plaf.basic.BasicTreeUI.setPreferredMinSize(Dimension)*

public void setPreferredMinSize(java.awt.Dimension newSize)

Sets the preferred minimum size. 



*javax.swing.plaf.basic.BasicTreeUI.setRightChildIndent(int)*

public void setRightChildIndent(int newAmount)





*javax.swing.plaf.basic.BasicTreeUI.setRootVisible(boolean)*

protected void setRootVisible(boolean newValue)

Sets the root to being visible. 



*javax.swing.plaf.basic.BasicTreeUI.setRowHeight(int)*

protected void setRowHeight(int rowHeight)

Sets the row height, this is forwarded to the treeState. 



*javax.swing.plaf.basic.BasicTreeUI.setSelectionModel(TreeSelectionModel)*

protected void setSelectionModel(javax.swing.tree.TreeSelectionModel newLSM)

Resets the selection model. The appropriate listener are installed on the model. 



*javax.swing.plaf.basic.BasicTreeUI.setShowsRootHandles(boolean)*

protected void setShowsRootHandles(boolean newValue)

Determines whether the node handles are to be displayed. 



*javax.swing.plaf.basic.BasicTreeUI.shouldPaintExpandControl(TreePath,int,boolean,boolean,boolean)*

protected boolean shouldPaintExpandControl(
  javax.swing.tree.TreePath path,
  int row,
  boolean isExpanded,
  boolean hasBeenExpanded,
  boolean isLeaf)

Returns true if the expand (toggle) control should be drawn for the specified row. 



*javax.swing.plaf.basic.BasicTreeUI.startEditing(TreePath,MouseEvent)*

protected boolean startEditing(
  javax.swing.tree.TreePath path,
  java.awt.event.MouseEvent event)

Will start editing for node if there is a cellEditor and shouldSelectCell returns true. This assumes that path is valid and visible. 



*javax.swing.plaf.basic.BasicTreeUI.startEditingAtPath(JTree,TreePath)*

public void startEditingAtPath(
  javax.swing.JTree tree,
  javax.swing.tree.TreePath path)

Selects the last item in path and tries to edit it. Editing will fail if the CellEditor won't allow it for the selected item. 



*javax.swing.plaf.basic.BasicTreeUI.stopEditing(JTree)*

public boolean stopEditing(javax.swing.JTree tree)

Stops the current editing session. This has no effect if the tree isn't being edited. Returns true if the editor allows the editing session to stop. 



*javax.swing.plaf.basic.BasicTreeUI.toggleExpandState(TreePath)*

protected void toggleExpandState(javax.swing.tree.TreePath path)

Expands path if it is not expanded, or collapses row if it is expanded. If expanding a path and JTree scrolls on expand, ensureRowsAreVisible is invoked to scroll as many of the 
children to visible as possible (tries to scroll to last visible descendant of path). 



*javax.swing.plaf.basic.BasicTreeUI.uninstallComponents()*

protected void uninstallComponents()

Uninstalls the renderer pane. 



*javax.swing.plaf.basic.BasicTreeUI.uninstallDefaults()*

protected void uninstallDefaults()





*javax.swing.plaf.basic.BasicTreeUI.uninstallKeyboardActions()*

protected void uninstallKeyboardActions()





*javax.swing.plaf.basic.BasicTreeUI.uninstallListeners()*

protected void uninstallListeners()





*javax.swing.plaf.basic.BasicTreeUI.uninstallUI(JComponent)*

public void uninstallUI(javax.swing.JComponent c)





*javax.swing.plaf.basic.BasicTreeUI.updateCachedPreferredSize()*

protected void updateCachedPreferredSize()

Updates the preferredSize instance variable, which is returned from getPreferredSize(). For left to right orientations, the size is determined from the current 
AbstractLayoutCache. For RTL orientations, the preferred size becomes the width minus the minimum x position. 



*javax.swing.plaf.basic.BasicTreeUI.updateCellEditor()*

protected void updateCellEditor()

Updates the cellEditor based on the editability of the JTree that we're contained in. If the tree is editable but doesn't have a cellEditor, a basic one will be used. 



*javax.swing.plaf.basic.BasicTreeUI.updateDepthOffset()*

protected void updateDepthOffset()

Updates how much each depth should be offset by. 



*javax.swing.plaf.basic.BasicTreeUI.updateExpandedDescendants(TreePath)*

protected void updateExpandedDescendants(javax.swing.tree.TreePath path)

Updates the expanded state of all the descendants of path by getting the expanded descendants from the tree and forwarding to the tree state. 



*javax.swing.plaf.basic.BasicTreeUI.updateLayoutCacheExpandedNodes()*

protected void updateLayoutCacheExpandedNodes()

Makes all the nodes that are expanded in JTree expanded in LayoutCache. This invokes updateExpandedDescendants with the root path. 



*javax.swing.plaf.basic.BasicTreeUI.updateRenderer()*

protected void updateRenderer()

Messaged from the tree we're in when the renderer has changed. 



*javax.swing.plaf.basic.BasicTreeUI.updateSize()*

protected void updateSize()

Marks the cached size as being invalid, and messages the tree with treeDidChange. 





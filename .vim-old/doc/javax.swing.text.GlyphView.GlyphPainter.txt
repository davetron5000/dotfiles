*javax.swing.text.GlyphView.GlyphPainter* *GlyphView.GlyphPainter* A class to perform rendering of the glyphs.

public abstract static class GlyphView.GlyphPainter
  extends    |java.lang.Object|

|javax.swing.text.GlyphView.GlyphPainter_Description|
|javax.swing.text.GlyphView.GlyphPainter_Fields|
|javax.swing.text.GlyphView.GlyphPainter_Constructors|
|javax.swing.text.GlyphView.GlyphPainter_Methods|

====================================================================================================================================================================================

*javax.swing.text.GlyphView.GlyphPainter_Constructors*
|javax.swing.text.GlyphView.GlyphPainter()|

*javax.swing.text.GlyphView.GlyphPainter_Methods*
|javax.swing.text.GlyphView.GlyphPainter.getAscent(GlyphView)|
|javax.swing.text.GlyphView.GlyphPainter.getBoundedPosition(GlyphView,int,float,float)|Determines the model location that represents the  maximum advance that fits within the give
|javax.swing.text.GlyphView.GlyphPainter.getDescent(GlyphView)|
|javax.swing.text.GlyphView.GlyphPainter.getHeight(GlyphView)|
|javax.swing.text.GlyphView.GlyphPainter.getNextVisualPositionFrom(GlyphView,int,Position.Bias,Shape,int,Position.Bias[])|Provides a way to determine the next visually represented
|javax.swing.text.GlyphView.GlyphPainter.getPainter(GlyphView,int,int)|Create a painter to use for the given GlyphView.
|javax.swing.text.GlyphView.GlyphPainter.getSpan(GlyphView,int,int,TabExpander,float)|Determine the span the glyphs given a start location  (for tab expansion).
|javax.swing.text.GlyphView.GlyphPainter.modelToView(GlyphView,int,Position.Bias,Shape)|Provides a mapping from the document model coordinate space  to the coordinate space of the
|javax.swing.text.GlyphView.GlyphPainter.paint(GlyphView,Graphics,Shape,int,int)|Paint the glyphs representing the given range.
|javax.swing.text.GlyphView.GlyphPainter.viewToModel(GlyphView,float,float,Shape,Position.Bias[])|Provides a mapping from the view coordinate space to the logical  coordinate spac

*javax.swing.text.GlyphView.GlyphPainter_Description*

A class to perform rendering of the glyphs. This can be implemented to be stateless, or to hold some information as a cache to facilitate faster rendering and model/view 
translation. At a minimum, the GlyphPainter allows a View implementation to perform its duties independant of a particular version of JVM and selection of capabilities (i.e. 
shaping for i18n, etc). 



*javax.swing.text.GlyphView.GlyphPainter()*

public GlyphView.GlyphPainter()




*javax.swing.text.GlyphView.GlyphPainter.getAscent(GlyphView)*

public abstract float getAscent(javax.swing.text.GlyphView v)





*javax.swing.text.GlyphView.GlyphPainter.getBoundedPosition(GlyphView,int,float,float)*

public abstract int getBoundedPosition(
  javax.swing.text.GlyphView v,
  int p0,
  float x,
  float len)

Determines the model location that represents the maximum advance that fits within the given span. This could be used to break the given view. The result should be a location just 
shy of the given advance. This differs from viewToModel which returns the closest position which might be proud of the maximum advance. 


    v - the view to find the model location to break at. 
    p0 - the location in the model where the fragment should start it's representation >= 0. 
    x - the graphic location along the axis that the broken view would occupy >= 0. This may be useful for things like tab calculations. 
    len - specifies the distance into the view where a potential break is desired >= 0. 

    Returns: the maximum model location possible for a break. 

*javax.swing.text.GlyphView.GlyphPainter.getDescent(GlyphView)*

public abstract float getDescent(javax.swing.text.GlyphView v)





*javax.swing.text.GlyphView.GlyphPainter.getHeight(GlyphView)*

public abstract float getHeight(javax.swing.text.GlyphView v)





*javax.swing.text.GlyphView.GlyphPainter.getNextVisualPositionFrom(GlyphView,int,Position.Bias,Shape,int,Position.Bias[])*

public int getNextVisualPositionFrom(
  javax.swing.text.GlyphView v,
  int pos,
  javax.swing.text.Position.Bias b,
  java.awt.Shape a,
  int direction,
  javax.swing.text.Position.Bias[] biasRet)
  throws |javax.swing.text.BadLocationException|
         
Provides a way to determine the next visually represented model location that one might place a caret. Some views may not be visible, they might not be in the same order found in 
the model, or they just might not allow access to some of the locations in the model. 


    v - the view to use 
    pos - the position to convert >= 0 
    b - either Position.Bias.Forward or Position.Bias.Backward 
    a - the allocated region to render into 
    direction - the direction from the current position that can be thought of as the arrow keys typically found on a keyboard. This may be SwingConstants.WEST, SwingConstants.EAST, 
       SwingConstants.NORTH, or SwingConstants.SOUTH. 
    biasRet - either Position.Bias.Forward or Position.Bias.Backward is returned as the zero-th element of this array 

    Returns: the location within the model that best represents the next location visual position. 

*javax.swing.text.GlyphView.GlyphPainter.getPainter(GlyphView,int,int)*

public |javax.swing.text.GlyphView.GlyphPainter| getPainter(
  javax.swing.text.GlyphView v,
  int p0,
  int p1)

Create a painter to use for the given GlyphView. If the painter carries state it can create another painter to represent a new GlyphView that is being created. If the painter 
doesn't hold any significant state, it can return itself. The default behavior is to return itself. 


    v - the GlyphView to provide a painter for 
    p0 - the starting document offset >= 0 
    p1 - the ending document offset >= p0 

*javax.swing.text.GlyphView.GlyphPainter.getSpan(GlyphView,int,int,TabExpander,float)*

public abstract float getSpan(
  javax.swing.text.GlyphView v,
  int p0,
  int p1,
  javax.swing.text.TabExpander e,
  float x)

Determine the span the glyphs given a start location (for tab expansion). 



*javax.swing.text.GlyphView.GlyphPainter.modelToView(GlyphView,int,Position.Bias,Shape)*

public abstract |java.awt.Shape| modelToView(
  javax.swing.text.GlyphView v,
  int pos,
  javax.swing.text.Position.Bias bias,
  java.awt.Shape a)
  throws |javax.swing.text.BadLocationException|
         
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it. This is shared by the broken views. 


    v - the GlyphView containing the destination coordinate space 
    pos - the position to convert 
    bias - either Position.Bias.Forward or Position.Bias.Backward 
    a - Bounds of the View 

    Returns: the bounding box of the given position 

*javax.swing.text.GlyphView.GlyphPainter.paint(GlyphView,Graphics,Shape,int,int)*

public abstract void paint(
  javax.swing.text.GlyphView v,
  java.awt.Graphics g,
  java.awt.Shape a,
  int p0,
  int p1)

Paint the glyphs representing the given range. 



*javax.swing.text.GlyphView.GlyphPainter.viewToModel(GlyphView,float,float,Shape,Position.Bias[])*

public abstract int viewToModel(
  javax.swing.text.GlyphView v,
  float x,
  float y,
  java.awt.Shape a,
  javax.swing.text.Position.Bias[] biasReturn)

Provides a mapping from the view coordinate space to the logical coordinate space of the model. 


    v - the GlyphView to provide a mapping for 
    x - the X coordinate 
    y - the Y coordinate 
    a - the allocated region to render into 
    biasReturn - either Position.Bias.Forward or Position.Bias.Backward is returned as the zero-th element of this array 

    Returns: the location within the model that best represents the given point of view 



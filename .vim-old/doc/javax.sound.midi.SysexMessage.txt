*javax.sound.midi.SysexMessage* *SysexMessage* A SysexMessage object represents 

public class SysexMessage
  extends    |javax.sound.midi.MidiMessage|

|javax.sound.midi.SysexMessage_Description|
|javax.sound.midi.SysexMessage_Fields|
|javax.sound.midi.SysexMessage_Constructors|
|javax.sound.midi.SysexMessage_Methods|

================================================================================

*javax.sound.midi.SysexMessage_Fields*
|int_javax.sound.midi.SysexMessage.SPECIAL_SYSTEM_EXCLUSIVE|
|int_javax.sound.midi.SysexMessage.SYSTEM_EXCLUSIVE|

*javax.sound.midi.SysexMessage_Constructors*
|javax.sound.midi.SysexMessage()|Constructs a new SysexMessage.
|javax.sound.midi.SysexMessage(byte[])|Constructs a new SysexMessage.

*javax.sound.midi.SysexMessage_Methods*
|javax.sound.midi.SysexMessage.clone()|Creates a new object of the same class a
|javax.sound.midi.SysexMessage.getData()|Obtains a copy of the data for the sys
|javax.sound.midi.SysexMessage.setMessage(byte[],int)|Sets the data for the sys
|javax.sound.midi.SysexMessage.setMessage(int,byte[],int)|Sets the data for the

*javax.sound.midi.SysexMessage_Description*

A SysexMessage object represents a MIDI system exclusive message. 

When a system exclusive message is read from a MIDI file, it always has a 
defined length. Data from a system exclusive message from a MIDI file should be 
stored in the data array of a SysexMessage as follows: the system exclusive 
message status byte (0xF0 or 0xF7), all message data bytes, and finally the 
end-of-exclusive flag (0xF7). The length reported by the SysexMessage object is 
therefore the length of the system exclusive data plus two: one byte for the 
status byte and one for the end-of-exclusive flag. 

As dictated by the Standard MIDI Files specification, two status byte values 
are legal for a SysexMessage read from a MIDI file: 

0xF0: System Exclusive message (same as in MIDI wire protocol) 0xF7: Special 
System Exclusive message 

When Java Sound is used to handle system exclusive data that is being received 
using MIDI wire protocol, it should place the data in one or more 
SysexMessages. In this case, the length of the system exclusive data is not 
known in advance; the end of the system exclusive data is marked by an 
end-of-exclusive flag (0xF7) in the MIDI wire byte stream. 

0xF0: System Exclusive message (same as in MIDI wire protocol) 0xF7: End of 
Exclusive (EOX) 

The first SysexMessage object containing data for a particular system exclusive 
message should have the status value 0xF0. If this message contains all the 
system exclusive data for the message, it should end with the status byte 0xF7 
(EOX). Otherwise, additional system exclusive data should be sent in one or 
more SysexMessages with a status value of 0xF7. The SysexMessage containing the 
last of the data for the system exclusive message should end with the value 
0xF7 (EOX) to mark the end of the system exclusive message. 

If system exclusive data from SysexMessages objects is being transmitted using 
MIDI wire protocol, only the initial 0xF0 status byte, the system exclusive 
data itself, and the final 0xF7 (EOX) byte should be propagated; any 0xF7 
status bytes used to indicate that a SysexMessage contains continuing system 
exclusive data should not be propagated via MIDI wire protocol. 


*int_javax.sound.midi.SysexMessage.SPECIAL_SYSTEM_EXCLUSIVE*

A SysexMessage object represents a MIDI system exclusive message. 

When a system exclusive message is read from a MIDI file, it always has a 
defined length. Data from a system exclusive message from a MIDI file should be 
stored in the data array of a SysexMessage as follows: the system exclusive 
message status byte (0xF0 or 0xF7), all message data bytes, and finally the 
end-of-exclusive flag (0xF7). The length reported by the SysexMessage object is 
therefore the length of the system exclusive data plus two: one byte for the 
status byte and one for the end-of-exclusive flag. 

As dictated by the Standard MIDI Files specification, two status byte values 
are legal for a SysexMessage read from a MIDI file: 

0xF0: System Exclusive message (same as in MIDI wire protocol) 0xF7: Special 
System Exclusive message 

When Java Sound is used to handle system exclusive data that is being received 
using MIDI wire protocol, it should place the data in one or more 
SysexMessages. In this case, the length of the system exclusive data is not 
known in advance; the end of the system exclusive data is marked by an 
end-of-exclusive flag (0xF7) in the MIDI wire byte stream. 

0xF0: System Exclusive message (same as in MIDI wire protocol) 0xF7: End of 
Exclusive (EOX) 

The first SysexMessage object containing data for a particular system exclusive 
message should have the status value 0xF0. If this message contains all the 
system exclusive data for the message, it should end with the status byte 0xF7 
(EOX). Otherwise, additional system exclusive data should be sent in one or 
more SysexMessages with a status value of 0xF7. The SysexMessage containing the 
last of the data for the system exclusive message should end with the value 
0xF7 (EOX) to mark the end of the system exclusive message. 

If system exclusive data from SysexMessages objects is being transmitted using 
MIDI wire protocol, only the initial 0xF0 status byte, the system exclusive 
data itself, and the final 0xF7 (EOX) byte should be propagated; any 0xF7 
status bytes used to indicate that a SysexMessage contains continuing system 
exclusive data should not be propagated via MIDI wire protocol. 


*int_javax.sound.midi.SysexMessage.SYSTEM_EXCLUSIVE*

A SysexMessage object represents a MIDI system exclusive message. 

When a system exclusive message is read from a MIDI file, it always has a 
defined length. Data from a system exclusive message from a MIDI file should be 
stored in the data array of a SysexMessage as follows: the system exclusive 
message status byte (0xF0 or 0xF7), all message data bytes, and finally the 
end-of-exclusive flag (0xF7). The length reported by the SysexMessage object is 
therefore the length of the system exclusive data plus two: one byte for the 
status byte and one for the end-of-exclusive flag. 

As dictated by the Standard MIDI Files specification, two status byte values 
are legal for a SysexMessage read from a MIDI file: 

0xF0: System Exclusive message (same as in MIDI wire protocol) 0xF7: Special 
System Exclusive message 

When Java Sound is used to handle system exclusive data that is being received 
using MIDI wire protocol, it should place the data in one or more 
SysexMessages. In this case, the length of the system exclusive data is not 
known in advance; the end of the system exclusive data is marked by an 
end-of-exclusive flag (0xF7) in the MIDI wire byte stream. 

0xF0: System Exclusive message (same as in MIDI wire protocol) 0xF7: End of 
Exclusive (EOX) 

The first SysexMessage object containing data for a particular system exclusive 
message should have the status value 0xF0. If this message contains all the 
system exclusive data for the message, it should end with the status byte 0xF7 
(EOX). Otherwise, additional system exclusive data should be sent in one or 
more SysexMessages with a status value of 0xF7. The SysexMessage containing the 
last of the data for the system exclusive message should end with the value 
0xF7 (EOX) to mark the end of the system exclusive message. 

If system exclusive data from SysexMessages objects is being transmitted using 
MIDI wire protocol, only the initial 0xF0 status byte, the system exclusive 
data itself, and the final 0xF7 (EOX) byte should be propagated; any 0xF7 
status bytes used to indicate that a SysexMessage contains continuing system 
exclusive data should not be propagated via MIDI wire protocol. 



*javax.sound.midi.SysexMessage()*

public SysexMessage()

Constructs a new SysexMessage. The contents of the new message are guaranteed 
to specify a valid MIDI message. Subsequently, you may set the contents of the 
message using one of the setMessage methods. 


*javax.sound.midi.SysexMessage(byte[])*

protected SysexMessage(byte[] data)

Constructs a new SysexMessage. 

    data - an array of bytes containing the complete message. The message data may be 
       changed using the setMessage method. 

*javax.sound.midi.SysexMessage.clone()*

public |java.lang.Object| clone()

Creates a new object of the same class and with the same contents as this 
object. 


    Returns: a clone of this instance 
*javax.sound.midi.SysexMessage.getData()*

public byte getData()

Obtains a copy of the data for the system exclusive message. The returned array 
of bytes does not include the status byte. 


    Returns: array containing the system exclusive message data. 
*javax.sound.midi.SysexMessage.setMessage(byte[],int)*

public void setMessage(
  byte[] data,
  int length)
  throws |javax.sound.midi.InvalidMidiDataException|
         
Sets the data for the system exclusive message. The first byte of the data 
array must be a valid system exclusive status byte (0xF0 or 0xF7). 

    data - the system exclusive message data 
    length - the length of the valid message data in the array, including the status byte. 

*javax.sound.midi.SysexMessage.setMessage(int,byte[],int)*

public void setMessage(
  int status,
  byte[] data,
  int length)
  throws |javax.sound.midi.InvalidMidiDataException|
         
Sets the data for the system exclusive message. 

    status - the status byte for the message (0xF0 or 0xF7) 
    data - the system exclusive message data 
    length - the length of the valid message data in the array 



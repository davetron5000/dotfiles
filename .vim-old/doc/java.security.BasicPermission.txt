*java.security.BasicPermission* *BasicPermission* The BasicPermission class extends the Permission class, and
 can be used as the base class for permissions that want to
 follow th

public abstract class BasicPermission
  extends    |java.security.Permission|
  implements |java.io.Serializable|

|java.security.BasicPermission_Description|
|java.security.BasicPermission_Fields|
|java.security.BasicPermission_Constructors|
|java.security.BasicPermission_Methods|

====================================================================================================================================================================================

*java.security.BasicPermission_Constructors*
|java.security.BasicPermission(String)|Creates a new BasicPermission with the specified name.
|java.security.BasicPermission(String,String)|Creates a new BasicPermission object with the specified name.

*java.security.BasicPermission_Methods*
|java.security.BasicPermission.equals(Object)|Checks two BasicPermission objects for equality.
|java.security.BasicPermission.getActions()|Returns the canonical string representation of the actions,  which currently is the empty string "", since there are no actions for  a 
|java.security.BasicPermission.hashCode()|Returns the hash code value for this object.
|java.security.BasicPermission.implies(Permission)|Checks if the specified permission is "implied" by  this object.
|java.security.BasicPermission.newPermissionCollection()|Returns a new PermissionCollection object for storing BasicPermission  objects.

*java.security.BasicPermission_Description*

The BasicPermission class extends the Permission class, and can be used as the base class for permissions that want to follow the same naming convention as BasicPermission. 

The name for a BasicPermission is the name of the given permission (for example, "exit", "setFactory", "print.queueJob", etc). The naming convention follows the hierarchical 
property naming convention. An asterisk may appear by itself, or if immediately preceded by a "." may appear at the end of the name, to signify a wildcard match. For example, "*" 
and "java.*" are valid, while "*java", "a*b", and "java*" are not valid. 

The action string (inherited from Permission) is unused. Thus, BasicPermission is commonly used as the base class for "named" permissions (ones that contain a name but no actions 
list; you either have the named permission or you don't.) Subclasses may implement actions on top of BasicPermission, if desired. 





*java.security.BasicPermission(String)*

public BasicPermission(java.lang.String name)

Creates a new BasicPermission with the specified name. Name is the symbolic name of the permission, such as "setFactory", "print.queueJob", or "topLevelWindow", etc. 

    name - the name of the BasicPermission. 

*java.security.BasicPermission(String,String)*

public BasicPermission(
  java.lang.String name,
  java.lang.String actions)

Creates a new BasicPermission object with the specified name. The name is the symbolic name of the BasicPermission, and the actions String is currently unused. 

    name - the name of the BasicPermission. 
    actions - ignored. 

*java.security.BasicPermission.equals(Object)*

public boolean equals(java.lang.Object obj)

Checks two BasicPermission objects for equality. Checks that obj's class is the same as this object's class and has the same name as this object. 


    obj - the object we are testing for equality with this object. 

    Returns: true if obj is a BasicPermission, and has the same name as this BasicPermission object, false otherwise. 

*java.security.BasicPermission.getActions()*

public |java.lang.String| getActions()

Returns the canonical string representation of the actions, which currently is the empty string "", since there are no actions for a BasicPermission. 



    Returns: the empty string "". 

*java.security.BasicPermission.hashCode()*

public int hashCode()

Returns the hash code value for this object. The hash code used is the hash code of the name, that is, getName().hashCode(), where getName is from the Permission superclass. 



    Returns: a hash code value for this object. 

*java.security.BasicPermission.implies(Permission)*

public boolean implies(java.security.Permission p)

Checks if the specified permission is "implied" by this object. 

More specifically, this method returns true if: 

p's class is the same as this object's class, and p's name equals or (in the case of wildcards) is implied by this object's name. For example, "a.b.*" implies "a.b.c". 


    p - the permission to check against. 

    Returns: true if the passed permission is equal to or implied by this permission, false otherwise. 

*java.security.BasicPermission.newPermissionCollection()*

public |java.security.PermissionCollection| newPermissionCollection()

Returns a new PermissionCollection object for storing BasicPermission objects. 

A BasicPermissionCollection stores a collection of BasicPermission permissions. 

BasicPermission objects must be stored in a manner that allows them to be inserted in any order, but that also enables the PermissionCollection implies method to be implemented in 
an efficient (and consistent) manner. 



    Returns: a new PermissionCollection object suitable for storing BasicPermissions. 



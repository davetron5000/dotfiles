*javax.sound.sampled.Mixer* *Mixer* A mixer is an audio device with one or more 

public interface interface Mixer

  implements |javax.sound.sampled.Line|

|javax.sound.sampled.Mixer_Description|
|javax.sound.sampled.Mixer_Fields|
|javax.sound.sampled.Mixer_Constructors|
|javax.sound.sampled.Mixer_Methods|

================================================================================

*javax.sound.sampled.Mixer_Methods*
|javax.sound.sampled.Mixer.getLine(Line.Info)|Obtains a line that is available 
|javax.sound.sampled.Mixer.getMaxLines(Line.Info)|Obtains the approximate maxim
|javax.sound.sampled.Mixer.getMixerInfo()|Obtains information about this mixer,
|javax.sound.sampled.Mixer.getSourceLineInfo()|Obtains information about the se
|javax.sound.sampled.Mixer.getSourceLineInfo(Line.Info)|Obtains information abo
|javax.sound.sampled.Mixer.getSourceLines()|Obtains the set of all source lines
|javax.sound.sampled.Mixer.getTargetLineInfo()|Obtains information about the se
|javax.sound.sampled.Mixer.getTargetLineInfo(Line.Info)|Obtains information abo
|javax.sound.sampled.Mixer.getTargetLines()|Obtains the set of all target lines
|javax.sound.sampled.Mixer.isLineSupported(Line.Info)|Indicates whether the mix
|javax.sound.sampled.Mixer.isSynchronizationSupported(Line[],boolean)|Reports w
|javax.sound.sampled.Mixer.synchronize(Line[],boolean)|Synchronizes two or more
|javax.sound.sampled.Mixer.unsynchronize(Line[])|Releases synchronization for t

*javax.sound.sampled.Mixer_Description*

A mixer is an audio device with one or more lines. It need not be designed for 
mixing audio signals. A mixer that actually mixes audio has multiple input 
(source) lines and at least one output (target) line. The former are often 
instances of classes that implement (|javax.sound.sampled.SourceDataLine|) , 
and the latter, (|javax.sound.sampled.TargetDataLine|) . 
(|javax.sound.sampled.Port|) objects, too, are either source lines or target 
lines. A mixer can accept prerecorded, loopable sound as input, by having some 
of its source lines be instances of objects that implement the 
(|javax.sound.sampled.Clip|) interface. 

Through methods of the Line interface, which Mixer extends, a mixer might 
provide a set of controls that are global to the mixer. For example, the mixer 
can have a master gain control. These global controls are distinct from the 
controls belonging to each of the mixer's individual lines. 

Some mixers, especially those with internal digital mixing capabilities, may 
provide additional capabilities by implementing the DataLine interface. 

A mixer can support synchronization of its lines. When one line in a 
synchronized group is started or stopped, the other lines in the group 
automatically start or stop simultaneously with the explicitly affected one. 


*javax.sound.sampled.Mixer.getLine(Line.Info)*

public |javax.sound.sampled.Line| getLine(javax.sound.sampled.Line.Info info)
  throws |javax.sound.sampled.LineUnavailableException|
         
Obtains a line that is available for use and that matches the description in 
the specified Line.Info object. 

If a DataLine is requested, and info is an instance of DataLine.Info specifying 
at least one fully qualified audio format, the last one will be used as the 
default format of the returned DataLine. 

    info - describes the desired line 

*javax.sound.sampled.Mixer.getMaxLines(Line.Info)*

public int getMaxLines(javax.sound.sampled.Line.Info info)

Obtains the approximate maximum number of lines of the requested type that can 
be open simultaneously on the mixer. 

Certain types of mixers do not have a hard bound and may allow opening more 
lines. Since certain lines are a shared resource, a mixer may not be able to 
open the maximum number of lines if another process has opened lines of this 
mixer. 

The requested type is any line that matches the description in the provided 
Line.Info object. For example, if the info object represents a speaker port, 
and the mixer supports exactly one speaker port, this method should return 1. 
If the info object represents a source data line and the mixer supports the use 
of 32 source data lines simultaneously, the return value should be 32. If there 
is no limit, this function returns AudioSystem.NOT_SPECIFIED. 

    info - a Line.Info that describes the line for which the number of supported instances 
       is queried 

    Returns: the maximum number of matching lines supported, or AudioSystem.NOT_SPECIFIED 
*javax.sound.sampled.Mixer.getMixerInfo()*

public |javax.sound.sampled.Mixer.Info| getMixerInfo()

Obtains information about this mixer, including the product's name, version, 
vendor, etc. 


    Returns: a mixer info object that describes this mixer 
*javax.sound.sampled.Mixer.getSourceLineInfo()*

public |javax.sound.sampled.Line.Info| getSourceLineInfo()

Obtains information about the set of source lines supported by this mixer. Some 
source lines may only be available when this mixer is open. 


    Returns: array of Line.Info objects representing source lines for this mixer. If no 
             source lines are supported, an array of length 0 is returned. 
*javax.sound.sampled.Mixer.getSourceLineInfo(Line.Info)*

public |javax.sound.sampled.Line.Info| getSourceLineInfo(javax.sound.sampled.Line.Info info)

Obtains information about source lines of a particular type supported by the 
mixer. Some source lines may only be available when this mixer is open. 

    info - a Line.Info object describing lines about which information is queried 

    Returns: an array of Line.Info objects describing source lines matching the type 
             requested. If no matching source lines are supported, an array of 
             length 0 is returned. 
*javax.sound.sampled.Mixer.getSourceLines()*

public |javax.sound.sampled.Line| getSourceLines()

Obtains the set of all source lines currently open to this mixer. 


    Returns: the source lines currently open to the mixer. If no source lines are currently 
             open to this mixer, an array of length 0 is returned. 
*javax.sound.sampled.Mixer.getTargetLineInfo()*

public |javax.sound.sampled.Line.Info| getTargetLineInfo()

Obtains information about the set of target lines supported by this mixer. Some 
target lines may only be available when this mixer is open. 


    Returns: array of Line.Info objects representing target lines for this mixer. If no 
             target lines are supported, an array of length 0 is returned. 
*javax.sound.sampled.Mixer.getTargetLineInfo(Line.Info)*

public |javax.sound.sampled.Line.Info| getTargetLineInfo(javax.sound.sampled.Line.Info info)

Obtains information about target lines of a particular type supported by the 
mixer. Some target lines may only be available when this mixer is open. 

    info - a Line.Info object describing lines about which information is queried 

    Returns: an array of Line.Info objects describing target lines matching the type 
             requested. If no matching target lines are supported, an array of 
             length 0 is returned. 
*javax.sound.sampled.Mixer.getTargetLines()*

public |javax.sound.sampled.Line| getTargetLines()

Obtains the set of all target lines currently open from this mixer. 


    Returns: target lines currently open from the mixer. If no target lines are currently 
             open from this mixer, an array of length 0 is returned. 
*javax.sound.sampled.Mixer.isLineSupported(Line.Info)*

public boolean isLineSupported(javax.sound.sampled.Line.Info info)

Indicates whether the mixer supports a line (or lines) that match the specified 
Line.Info object. Some lines may only be supported when this mixer is open. 

    info - describes the line for which support is queried 

    Returns: true if at least one matching line is supported, false otherwise 
*javax.sound.sampled.Mixer.isSynchronizationSupported(Line[],boolean)*

public boolean isSynchronizationSupported(
  javax.sound.sampled.Line[] lines,
  boolean maintainSync)

Reports whether this mixer supports synchronization of the specified set of 
lines. 

    lines - the set of lines for which synchronization support is queried 
    maintainSync - true if the synchronization must be precisely maintained (i.e., the 
       synchronization must be sample-accurate) at all times during operation 
       of the lines , or false if precise synchronization is required only 
       during start and stop operations 

    Returns: true if the lines can be synchronized, false otherwise 
*javax.sound.sampled.Mixer.synchronize(Line[],boolean)*

public void synchronize(
  javax.sound.sampled.Line[] lines,
  boolean maintainSync)

Synchronizes two or more lines. Any subsequent command that starts or stops 
audio playback or capture for one of these lines will exert the same effect on 
the other lines in the group, so that they start or stop playing or capturing 
data simultaneously. 

    lines - the lines that should be synchronized 
    maintainSync - true if the synchronization must be precisely maintained (i.e., the 
       synchronization must be sample-accurate) at all times during operation 
       of the lines , or false if precise synchronization is required only 
       during start and stop operations 

*javax.sound.sampled.Mixer.unsynchronize(Line[])*

public void unsynchronize(javax.sound.sampled.Line[] lines)

Releases synchronization for the specified lines. The array must be identical 
to one for which synchronization has already been established; otherwise an 
exception may be thrown. However, null may be specified, in which case all 
currently synchronized lines that belong to this mixer are unsynchronized. 

    lines - the synchronized lines for which synchronization should be released, or null 
       for all this mixer's synchronized lines 



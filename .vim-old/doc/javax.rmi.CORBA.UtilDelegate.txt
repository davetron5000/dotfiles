*javax.rmi.CORBA.UtilDelegate* *UtilDelegate* Supports delegation for method implementations inUtil.

public interface interface UtilDelegate


|javax.rmi.CORBA.UtilDelegate_Description|
|javax.rmi.CORBA.UtilDelegate_Fields|
|javax.rmi.CORBA.UtilDelegate_Constructors|
|javax.rmi.CORBA.UtilDelegate_Methods|

====================================================================================================================================================================================

*javax.rmi.CORBA.UtilDelegate_Methods*
|javax.rmi.CORBA.UtilDelegate.copyObject(Object,ORB)|Delegation call forUtil#copyObject.
|javax.rmi.CORBA.UtilDelegate.copyObjects(Object[],ORB)|Delegation call forUtil#copyObjects.
|javax.rmi.CORBA.UtilDelegate.createValueHandler()|Delegation call forUtil#createValueHandler.
|javax.rmi.CORBA.UtilDelegate.getCodebase(Class)|Delegation call forUtil#getCodebase.
|javax.rmi.CORBA.UtilDelegate.getTie(Remote)|Delegation call forUtil#getTie.
|javax.rmi.CORBA.UtilDelegate.isLocal(Stub)|Delegation call forUtil#isLocal.
|javax.rmi.CORBA.UtilDelegate.loadClass(String,String,ClassLoader)|Delegation call forUtil#loadClass.
|javax.rmi.CORBA.UtilDelegate.mapSystemException(SystemException)|Delegation call forUtil#mapSystemException.
|javax.rmi.CORBA.UtilDelegate.readAny(InputStream)|Delegation call forUtil#readAny.
|javax.rmi.CORBA.UtilDelegate.registerTarget(Tie,Remote)|Delegation call forUtil#registerTarget.
|javax.rmi.CORBA.UtilDelegate.unexportObject(Remote)|Delegation call forUtil#unexportObject.
|javax.rmi.CORBA.UtilDelegate.wrapException(Throwable)|Delegation call forUtil#wrapException.
|javax.rmi.CORBA.UtilDelegate.writeAbstractObject(OutputStream,Object)|Delegation call forUtil#writeAbstractObject.
|javax.rmi.CORBA.UtilDelegate.writeAny(OutputStream,Object)|Delegation call forUtil#writeAny.
|javax.rmi.CORBA.UtilDelegate.writeRemoteObject(OutputStream,Object)|Delegation call forUtil#writeRemoteObject.

*javax.rmi.CORBA.UtilDelegate_Description*

Supports delegation for method implementations in (|javax.rmi.CORBA.Util|) . The delegate is a singleton instance of a class that implements this interface and provides a 
replacement implementation for all the methods of javax.rmi.CORBA.Util. 

Delegation is enabled by providing the delegate's class name as the value of the javax.rmi.CORBA.UtilClass system property. 



*javax.rmi.CORBA.UtilDelegate.copyObject(Object,ORB)*

public |java.lang.Object| copyObject(
  java.lang.Object obj,
  org.omg.CORBA.ORB orb)
  throws |java.rmi.RemoteException|
         
Delegation call for (|javax.rmi.CORBA.Util|) . 



*javax.rmi.CORBA.UtilDelegate.copyObjects(Object[],ORB)*

public |java.lang.Object|[] copyObjects(
  java.lang.Object[] obj,
  org.omg.CORBA.ORB orb)
  throws |java.rmi.RemoteException|
         
Delegation call for (|javax.rmi.CORBA.Util|) . 



*javax.rmi.CORBA.UtilDelegate.createValueHandler()*

public |javax.rmi.CORBA.ValueHandler| createValueHandler()

Delegation call for (|javax.rmi.CORBA.Util|) . 



*javax.rmi.CORBA.UtilDelegate.getCodebase(Class)*

public |java.lang.String| getCodebase(java.lang.Class clz)

Delegation call for (|javax.rmi.CORBA.Util|) . 



*javax.rmi.CORBA.UtilDelegate.getTie(Remote)*

public |javax.rmi.CORBA.Tie| getTie(java.rmi.Remote target)

Delegation call for (|javax.rmi.CORBA.Util|) . 



*javax.rmi.CORBA.UtilDelegate.isLocal(Stub)*

public boolean isLocal(javax.rmi.CORBA.Stub stub)
  throws |java.rmi.RemoteException|
         
Delegation call for (|javax.rmi.CORBA.Util|) . 



*javax.rmi.CORBA.UtilDelegate.loadClass(String,String,ClassLoader)*

public |java.lang.Class| loadClass(
  java.lang.String className,
  java.lang.String remoteCodebase,
  java.lang.ClassLoader loader)
  throws |java.lang.ClassNotFoundException|
         
Delegation call for (|javax.rmi.CORBA.Util|) . 



*javax.rmi.CORBA.UtilDelegate.mapSystemException(SystemException)*

public |java.rmi.RemoteException| mapSystemException(org.omg.CORBA.SystemException ex)

Delegation call for (|javax.rmi.CORBA.Util|) . 



*javax.rmi.CORBA.UtilDelegate.readAny(InputStream)*

public |java.lang.Object| readAny(org.omg.CORBA.portable.InputStream in)

Delegation call for (|javax.rmi.CORBA.Util|) . 



*javax.rmi.CORBA.UtilDelegate.registerTarget(Tie,Remote)*

public void registerTarget(
  javax.rmi.CORBA.Tie tie,
  java.rmi.Remote target)

Delegation call for (|javax.rmi.CORBA.Util|) . 



*javax.rmi.CORBA.UtilDelegate.unexportObject(Remote)*

public void unexportObject(java.rmi.Remote target)
  throws |java.rmi.NoSuchObjectException|
         
Delegation call for (|javax.rmi.CORBA.Util|) . 



*javax.rmi.CORBA.UtilDelegate.wrapException(Throwable)*

public |java.rmi.RemoteException| wrapException(java.lang.Throwable obj)

Delegation call for (|javax.rmi.CORBA.Util|) . 



*javax.rmi.CORBA.UtilDelegate.writeAbstractObject(OutputStream,Object)*

public void writeAbstractObject(
  org.omg.CORBA.portable.OutputStream out,
  java.lang.Object obj)

Delegation call for (|javax.rmi.CORBA.Util|) . 



*javax.rmi.CORBA.UtilDelegate.writeAny(OutputStream,Object)*

public void writeAny(
  org.omg.CORBA.portable.OutputStream out,
  java.lang.Object obj)

Delegation call for (|javax.rmi.CORBA.Util|) . 



*javax.rmi.CORBA.UtilDelegate.writeRemoteObject(OutputStream,Object)*

public void writeRemoteObject(
  org.omg.CORBA.portable.OutputStream out,
  java.lang.Object obj)

Delegation call for (|javax.rmi.CORBA.Util|) . 





*java.awt.Font* *Font* The Font class represents fonts, which are used to
 render text in a visible way.

public class Font
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.awt.Font_Description|
|java.awt.Font_Fields|
|java.awt.Font_Constructors|
|java.awt.Font_Methods|

====================================================================================================================================================================================

*java.awt.Font_Fields*
|int_java.awt.Font.BOLD|
|int_java.awt.Font.CENTER_BASELINE|
|int_java.awt.Font.HANGING_BASELINE|
|int_java.awt.Font.ITALIC|
|int_java.awt.Font.LAYOUT_LEFT_TO_RIGHT|
|int_java.awt.Font.LAYOUT_NO_LIMIT_CONTEXT|
|int_java.awt.Font.LAYOUT_NO_START_CONTEXT|
|int_java.awt.Font.LAYOUT_RIGHT_TO_LEFT|
|java.lang.String_java.awt.Font.name|
|int_java.awt.Font.PLAIN|
|float_java.awt.Font.pointSize|
|int_java.awt.Font.ROMAN_BASELINE|
|int_java.awt.Font.size|
|int_java.awt.Font.style|
|int_java.awt.Font.TRUETYPE_FONT|
|int_java.awt.Font.TYPE1_FONT|

*java.awt.Font_Constructors*
|java.awt.Font(Map<?extendsAttributedCharacterIterator.Attribute,?>)|Creates a new Font with the specified attributes.
|java.awt.Font(String,int,int)|Creates a new Font from the specified name, style and  point size.

*java.awt.Font_Methods*
|java.awt.Font.canDisplay(char)|Checks if this Font has a glyph for the specified  character.
|java.awt.Font.canDisplay(int)|Checks if this Font has a glyph for the specified  character.
|java.awt.Font.canDisplayUpTo(char[],int,int)|Indicates whether or not this Font can display  the characters in the specified text   starting at start and ending at   limit.
|java.awt.Font.canDisplayUpTo(CharacterIterator,int,int)|Indicates whether or not this Font can display the  text specified by the iter starting at  start and ending at limit.
|java.awt.Font.canDisplayUpTo(String)|Indicates whether or not this Font can display a  specified String.
|java.awt.Font.createFont(int,File)|Returns a new Font using the specified font type  and the specified font file.
|java.awt.Font.createFont(int,InputStream)|Returns a new Font using the specified font type  and input data.
|java.awt.Font.createGlyphVector(FontRenderContext,char[])|Creates ajava.awt.font.GlyphVector GlyphVectorby  mapping characters to glyphs one-to-one based on the  Unicode cmap in 
|java.awt.Font.createGlyphVector(FontRenderContext,CharacterIterator)|Creates ajava.awt.font.GlyphVector GlyphVectorby  mapping the specified characters to glyphs one-to-one based
|java.awt.Font.createGlyphVector(FontRenderContext,int[])|Creates ajava.awt.font.GlyphVector GlyphVectorby  mapping characters to glyphs one-to-one based on the  Unicode cmap in t
|java.awt.Font.createGlyphVector(FontRenderContext,String)|Creates ajava.awt.font.GlyphVector GlyphVectorby   mapping characters to glyphs one-to-one based on the   Unicode cmap i
|java.awt.Font.decode(String)|Returns the Font that the str   argument describes.
|java.awt.Font.deriveFont(AffineTransform)|Creates a new Font object by replicating the current  Font object and applying a new transform to it.
|java.awt.Font.deriveFont(float)|Creates a new Font object by replicating the current  Font object and applying a new size to it.
|java.awt.Font.deriveFont(int)|Creates a new Font object by replicating the current  Font object and applying a new style to it.
|java.awt.Font.deriveFont(int,AffineTransform)|Creates a new Font object by replicating this  Font object and applying a new style and transform.
|java.awt.Font.deriveFont(int,float)|Creates a new Font object by replicating this  Font object and applying a new style and size.
|java.awt.Font.deriveFont(Map<?extendsAttributedCharacterIterator.Attribute,?>)|Creates a new Font object by replicating the current  Font object and applying a new set of font at
|java.awt.Font.equals(Object)|Compares this Font object to the specified   Object.
|java.awt.Font.finalize()|Disposes the native Font object.
|java.awt.Font.getAttributes()|Returns a map of font attributes available in this  Font.
|java.awt.Font.getAvailableAttributes()|Returns the keys of all the attributes supported by this   Font.
|java.awt.Font.getBaselineFor(char)|Returns the baseline appropriate for displaying this character.
|java.awt.Font.getFamily()|Returns the family name of this Font.
|java.awt.Font.getFamily(Locale)|Returns the family name of this Font, localized for  the specified locale.
|java.awt.Font.getFont(Map<?extendsAttributedCharacterIterator.Attribute,?>)|Returns a Font appropriate to this attribute set.
|java.awt.Font.getFont(String)|Returns a Font object from the system properties list.
|java.awt.Font.getFont(String,Font)|Gets the specified Font from the system properties  list.
|java.awt.Font.getFontName()|Returns the font face name of this Font.
|java.awt.Font.getFontName(Locale)|Returns the font face name of the Font, localized  for the specified locale.
|java.awt.Font.getItalicAngle()|Returns the italic angle of this Font.
|java.awt.Font.getLineMetrics(char[],int,int,FontRenderContext)|Returns a LineMetrics object created with the  specified arguments.
|java.awt.Font.getLineMetrics(CharacterIterator,int,int,FontRenderContext)|Returns a LineMetrics object created with the  specified arguments.
|java.awt.Font.getLineMetrics(String,FontRenderContext)|Returns aLineMetricsobject created with the specified  String andFontRenderContext.
|java.awt.Font.getLineMetrics(String,int,int,FontRenderContext)|Returns a LineMetrics object created with the  specified arguments.
|java.awt.Font.getMaxCharBounds(FontRenderContext)|Returns the bounds for the character with the maximum  bounds as defined in the specified FontRenderContext.
|java.awt.Font.getMissingGlyphCode()|Returns the glyphCode which is used when this Font   does not have a glyph for a specified unicode.
|java.awt.Font.getName()|Returns the logical name of this Font.
|java.awt.Font.getNumGlyphs()|Returns the number of glyphs in this Font.
|java.awt.Font.getPeer()|Gets the peer of this Font.
|java.awt.Font.getPSName()|Returns the postscript name of this Font.
|java.awt.Font.getSize()|Returns the point size of this Font, rounded to  an integer.
|java.awt.Font.getSize2D()|Returns the point size of this Font in  float value.
|java.awt.Font.getStringBounds(char[],int,int,FontRenderContext)|Returns the logical bounds of the specified array of characters  in the specified FontRenderContext.
|java.awt.Font.getStringBounds(CharacterIterator,int,int,FontRenderContext)|Returns the logical bounds of the characters indexed in the  specifiedCharacterIteratorin the  specifie
|java.awt.Font.getStringBounds(String,FontRenderContext)|Returns the logical bounds of the specified String in  the specified FontRenderContext.
|java.awt.Font.getStringBounds(String,int,int,FontRenderContext)|Returns the logical bounds of the specified String in  the specified FontRenderContext.
|java.awt.Font.getStyle()|Returns the style of this Font.
|java.awt.Font.getTransform()|Returns a copy of the transform associated with this   Font.
|java.awt.Font.hashCode()|Returns a hashcode for this Font.
|java.awt.Font.hasUniformLineMetrics()|Checks whether or not this Font has uniform   line metrics.
|java.awt.Font.isBold()|Indicates whether or not this Font object's style is  BOLD.
|java.awt.Font.isItalic()|Indicates whether or not this Font object's style is  ITALIC.
|java.awt.Font.isPlain()|Indicates whether or not this Font object's style is  PLAIN.
|java.awt.Font.isTransformed()|Indicates whether or not this Font object has a  transform that affects its size in addition to the Size  attribute.
|java.awt.Font.layoutGlyphVector(FontRenderContext,char[],int,int,int)|Returns a new GlyphVector object, performing full  layout of the text if possible.
|java.awt.Font.toString()|Converts this Font object to a String  representation.

*java.awt.Font_Description*

The Font class represents fonts, which are used to render text in a visible way. A font provides the information needed to map sequences of characters to sequences of glyphs and 
to render sequences of glyphs on Graphics and Component objects. 

Characters and Glyphs 

A character is a symbol that represents an item such as a letter, a digit, or punctuation in an abstract way. For example, 'g', LATIN SMALL LETTER G, is a character. 

A glyph is a shape used to render a character or a sequence of characters. In simple writing systems, such as Latin, typically one glyph represents one character. In general, 
however, characters and glyphs do not have one-to-one correspondence. For example, the character '' LATIN SMALL LETTER A WITH ACUTE, can be represented by two glyphs: one for 'a' 
and one for ''. On the other hand, the two-character string "fi" can be represented by a single glyph, an "fi" ligature. In complex writing systems, such as Arabic or the South 
and South-East Asian writing systems, the relationship between characters and glyphs can be more complicated and involve context-dependent selection of glyphs as well as glyph 
reordering. 

A font encapsulates the collection of glyphs needed to render a selected set of characters as well as the tables needed to map sequences of characters to corresponding sequences 
of glyphs. 

Physical and Logical Fonts 

The Java 2 platform distinguishes between two kinds of fonts: physical fonts and logical fonts. 

Physical fonts are the actual font libraries containing glyph data and tables to map from character sequences to glyph sequences, using a font technology such as TrueType or 
PostScript Type 1. All implementations of the Java 2 platform must support TrueType fonts; support for other font technologies is implementation dependent. Physical fonts may use 
names such as Helvetica, Palatino, HonMincho, or any number of other font names. Typically, each physical font supports only a limited set of writing systems, for example, only 
Latin characters or only Japanese and Basic Latin. The set of available physical fonts varies between configurations. Applications that require specific fonts can bundle them and 
instantiate them using the createFont(|java.awt.Font|) method. 

Logical fonts are the five font families defined by the Java platform which must be supported by any Java runtime environment: Serif, SansSerif, Monospaced, Dialog, and 
DialogInput. These logical fonts are not actual font libraries. Instead, the logical font names are mapped to physical fonts by the Java runtime environment. The mapping is 
implementation and usually locale dependent, so the look and the metrics provided by them vary. Typically, each logical font name maps to several physical fonts in order to cover 
a large range of characters. 

Peered AWT components, such as Label(|java.awt.Label|) and TextField(|java.awt.TextField|) , can only use logical fonts. 

For a discussion of the relative advantages and disadvantages of using physical or logical fonts, see the Internationalization FAQ document. 

Font Faces and Names 

A Font can have many faces, such as heavy, medium, oblique, gothic and regular. All of these faces have similar typographic design. 

There are three different names that you can get from a Font object. The logical font name is simply the name that was used to construct the font. The font face name, or just font 
name for short, is the name of a particular font face, like Helvetica Bold. The family name is the name of the font family that determines the typographic design across several 
faces, like Helvetica. 

The Font class represents an instance of a font face from a collection of font faces that are present in the system resources of the host system. As examples, Arial Bold and 
Courier Bold Italic are font faces. There can be several Font objects associated with a font face, each differing in size, style, transform and font features. The 
getAllFonts(|java.awt.GraphicsEnvironment|) method of the GraphicsEnvironment class returns an array of all font faces available in the system. These font faces are returned as 
Font objects with a size of 1, identity transform and default font features. These base fonts can then be used to derive new Font objects with varying sizes, styles, transforms 
and font features via the deriveFont methods in this class. 



*int_java.awt.Font.BOLD*

The bold style constant. This can be combined with the other style constants (except PLAIN) for mixed styles. 


*int_java.awt.Font.CENTER_BASELINE*

The baseline used in ideographic scripts like Chinese, Japanese, and Korean when laying out text. 


*int_java.awt.Font.HANGING_BASELINE*

The baseline used in Devanigiri and similar scripts when laying out text. 


*int_java.awt.Font.ITALIC*

The italicized style constant. This can be combined with the other style constants (except PLAIN) for mixed styles. 


*int_java.awt.Font.LAYOUT_LEFT_TO_RIGHT*

A flag to layoutGlyphVector indicating that text is left-to-right as determined by Bidi analysis. 


*int_java.awt.Font.LAYOUT_NO_LIMIT_CONTEXT*

A flag to layoutGlyphVector indicating that text in the char array after the indicated limit should not be examined. 


*int_java.awt.Font.LAYOUT_NO_START_CONTEXT*

A flag to layoutGlyphVector indicating that text in the char array before the indicated start should not be examined. 


*int_java.awt.Font.LAYOUT_RIGHT_TO_LEFT*

A flag to layoutGlyphVector indicating that text is right-to-left as determined by Bidi analysis. 


*java.lang.String_java.awt.Font.name*

The logical name of this Font, as passed to the constructor. 


*int_java.awt.Font.PLAIN*

The plain style constant. 


*float_java.awt.Font.pointSize*

The point size of this Font in float. 


*int_java.awt.Font.ROMAN_BASELINE*

The baseline used in most Roman scripts when laying out text. 


*int_java.awt.Font.size*

The point size of this Font, rounded to integer. 


*int_java.awt.Font.style*

The style of this Font, as passed to the constructor. This style can be PLAIN, BOLD, ITALIC, or BOLD+ITALIC. 


*int_java.awt.Font.TRUETYPE_FONT*

Identify a font resource of type TRUETYPE. Used to specify a TrueType font resource to the (|java.awt.Font|) method. 


*int_java.awt.Font.TYPE1_FONT*

Identify a font resource of type TYPE1. Used to specify a Type1 font resource to the (|java.awt.Font|) method. 



*java.awt.Font(Map<?extendsAttributedCharacterIterator.Attribute,?>)*

public Font(java.util.Map<? extends java.text.AttributedCharacterIterator.Attribute, ?> attributes)

Creates a new Font with the specified attributes. This Font only recognizes keys defined in (|java.awt.font.TextAttribute|) as attributes. If attributes is null, a new Font is 
initialized with default attributes. 

    attributes - the attributes to assign to the new Font, or null 

*java.awt.Font(String,int,int)*

public Font(
  java.lang.String name,
  int style,
  int size)

Creates a new Font from the specified name, style and point size. 

The font name can be a font face name or a font family name. It is used together with the style to find an appropriate font face. When a font family name is specified, the style 
argument is used to select the most appropriate face from the family. When a font face name is specified, the face's style and the style argument are merged to locate the best 
matching font from the same family. For example if face name "Arial Bold" is specified with style Font.ITALIC, the font system looks for a face in the "Arial" family that is bold 
and italic, and may associate the font instance with the physical font face "Arial Bold Italic". The style argument is merged with the specified face's style, not added or 
subtracted. This means, specifying a bold face and a bold style does not double-embolden the font, and specifying a bold face and a plain style does not lighten the font. 

If no face for the requested style can be found, the font system may apply algorithmic styling to achieve the desired style. For example, if ITALIC is requested, but no italic 
face is available, glyphs from the plain face may be algorithmically obliqued (slanted). 

Font name lookup is case insensitive, using the case folding rules of the US locale. 

    name - the font name. This can be a font face name or a font family name, and may represent either a logical font or a physical font found in this GraphicsEnvironment. The family names 
       for logical fonts are: Dialog, DialogInput, Monospaced, Serif, or SansSerif. If name is null, the logical font name of the new Font as returned by getName()is set to the 
       name "Default". 
    style - the style constant for the Font The style argument is an integer bitmask that may be PLAIN, or a bitwise union of BOLD and/or ITALIC (for example, ITALIC or BOLD|ITALIC). If the 
       style argument does not conform to one of the expected integer bitmasks then the style is set to PLAIN. 
    size - the point size of the Font 

*java.awt.Font.canDisplay(char)*

public boolean canDisplay(char c)

Checks if this Font has a glyph for the specified character. 

Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the (|java.awt.Font|) method or canDisplayUpTo 
methods. 


    c - the character for which a glyph is needed 

    Returns: true if this Font has a glyph for this character; false otherwise. 

*java.awt.Font.canDisplay(int)*

public boolean canDisplay(int codePoint)

Checks if this Font has a glyph for the specified character. 


    codePoint - the character (Unicode code point) for which a glyph is needed. 

    Returns: true if this Font has a glyph for the character; false otherwise. 

*java.awt.Font.canDisplayUpTo(char[],int,int)*

public int canDisplayUpTo(
  char[] text,
  int start,
  int limit)

Indicates whether or not this Font can display the characters in the specified text starting at start and ending at limit. This method is a convenience overload. 


    text - the specified array of char values 
    start - the specified starting offset (in chars) into the specified array of char values 
    limit - the specified ending offset (in chars) into the specified array of char values 

    Returns: an offset into text that points to the first character in text that this Font cannot display; or -1 if this Font can display all characters in text. 

*java.awt.Font.canDisplayUpTo(CharacterIterator,int,int)*

public int canDisplayUpTo(
  java.text.CharacterIterator iter,
  int start,
  int limit)

Indicates whether or not this Font can display the text specified by the iter starting at start and ending at limit. 


    iter - a {@link CharacterIterator} object 
    start - the specified starting offset into the specified CharacterIterator. 
    limit - the specified ending offset into the specified CharacterIterator. 

    Returns: an offset into iter that points to the first character in iter that this Font cannot display; or -1 if this Font can display all characters in iter. 

*java.awt.Font.canDisplayUpTo(String)*

public int canDisplayUpTo(java.lang.String str)

Indicates whether or not this Font can display a specified String. For strings with Unicode encoding, it is important to know if a particular font can display the string. This 
method returns an offset into the String str which is the first character this Font cannot display without using the missing glyph code. If the Font can display all characters, -1 
is returned. 


    str - a String object 

    Returns: an offset into str that points to the first character in str that this Font cannot display; or -1 if this Font can display all characters in str. 

*java.awt.Font.createFont(int,File)*

public static |java.awt.Font| createFont(
  int fontFormat,
  java.io.File fontFile)
  throws |java.awt.FontFormatException|
         |java.io.IOException|
         
Returns a new Font using the specified font type and the specified font file. The new Font is created with a point size of 1 and style PLAIN(|java.awt.Font|) . This base font can 
then be used with the deriveFont methods in this class to derive new Font objects with varying sizes, styles, transforms and font features. 


    fontFormat - the type of the Font, which is {@link #TRUETYPE_FONT TRUETYPE_FONT} if a TrueType resource is specified or {@link #TYPE1_FONT TYPE1_FONT} if a Type 1 resource is specified. So 
       long as the returned font, or its derived fonts are referenced the implementation may continue to access fontFile to retrieve font data. Thus the results are undefined if 
       the file is changed, or becomes inaccessible. 
    fontFile - a File object representing the input data for the font. 

    Returns: a new Font created with the specified font type. 

*java.awt.Font.createFont(int,InputStream)*

public static |java.awt.Font| createFont(
  int fontFormat,
  java.io.InputStream fontStream)
  throws |java.awt.FontFormatException|
         |java.io.IOException|
         
Returns a new Font using the specified font type and input data. The new Font is created with a point size of 1 and style PLAIN(|java.awt.Font|) . This base font can then be used 
with the deriveFont methods in this class to derive new Font objects with varying sizes, styles, transforms and font features. This method does not close the 
(|java.io.InputStream|) . 


    fontFormat - the type of the Font, which is {@link #TRUETYPE_FONT TRUETYPE_FONT} if a TrueType resource is specified. or {@link #TYPE1_FONT TYPE1_FONT} if a Type 1 resource is specified. 
    fontStream - an InputStream object representing the input data for the font. 

    Returns: a new Font created with the specified font type. 

*java.awt.Font.createGlyphVector(FontRenderContext,char[])*

public |java.awt.font.GlyphVector| createGlyphVector(
  java.awt.font.FontRenderContext frc,
  char[] chars)

Creates a GlyphVector(|java.awt.font.GlyphVector|) by mapping characters to glyphs one-to-one based on the Unicode cmap in this Font. This method does no other processing besides 
the mapping of glyphs to characters. This means that this method is not useful for some scripts, such as Arabic, Hebrew, Thai, and Indic, that require reordering, shaping, or 
ligature substitution. 


    frc - the specified FontRenderContext 
    chars - the specified array of characters 

    Returns: a new GlyphVector created with the specified array of characters and the specified FontRenderContext. 

*java.awt.Font.createGlyphVector(FontRenderContext,CharacterIterator)*

public |java.awt.font.GlyphVector| createGlyphVector(
  java.awt.font.FontRenderContext frc,
  java.text.CharacterIterator ci)

Creates a GlyphVector(|java.awt.font.GlyphVector|) by mapping the specified characters to glyphs one-to-one based on the Unicode cmap in this Font. This method does no other 
processing besides the mapping of glyphs to characters. This means that this method is not useful for some scripts, such as Arabic, Hebrew, Thai, and Indic, that require 
reordering, shaping, or ligature substitution. 


    frc - the specified FontRenderContext 
    ci - the specified CharacterIterator 

    Returns: a new GlyphVector created with the specified CharacterIterator and the specified FontRenderContext. 

*java.awt.Font.createGlyphVector(FontRenderContext,int[])*

public |java.awt.font.GlyphVector| createGlyphVector(
  java.awt.font.FontRenderContext frc,
  int[] glyphCodes)

Creates a GlyphVector(|java.awt.font.GlyphVector|) by mapping characters to glyphs one-to-one based on the Unicode cmap in this Font. This method does no other processing besides 
the mapping of glyphs to characters. This means that this method is not useful for some scripts, such as Arabic, Hebrew, Thai, and Indic, that require reordering, shaping, or 
ligature substitution. 


    frc - the specified FontRenderContext 
    glyphCodes - the specified integer array 

    Returns: a new GlyphVector created with the specified integer array and the specified FontRenderContext. 

*java.awt.Font.createGlyphVector(FontRenderContext,String)*

public |java.awt.font.GlyphVector| createGlyphVector(
  java.awt.font.FontRenderContext frc,
  java.lang.String str)

Creates a GlyphVector(|java.awt.font.GlyphVector|) by mapping characters to glyphs one-to-one based on the Unicode cmap in this Font. This method does no other processing besides 
the mapping of glyphs to characters. This means that this method is not useful for some scripts, such as Arabic, Hebrew, Thai, and Indic, that require reordering, shaping, or 
ligature substitution. 


    frc - the specified FontRenderContext 
    str - the specified String 

    Returns: a new GlyphVector created with the specified String and the specified FontRenderContext. 

*java.awt.Font.decode(String)*

public static |java.awt.Font| decode(java.lang.String str)

Returns the Font that the str argument describes. To ensure that this method returns the desired Font, format the str parameter in one of these ways 

fontname-style-pointsize fontname-pointsize fontname-style fontname fontname style pointsize fontname pointsize fontname style fontname 

in which style is one of the four case-insensitive strings: "PLAIN", "BOLD", "BOLDITALIC", or "ITALIC", and pointsize is a positive decimal integer representation of the point 
size. For example, if you want a font that is Arial, bold, with a point size of 18, you would call this method with: "Arial-BOLD-18". This is equivalent to calling the Font 
constructor : new Font("Arial", Font.BOLD, 18); and the values are interpreted as specified by that constructor. 

A valid trailing decimal field is always interpreted as the pointsize. Therefore a fontname containing a trailing decimal value should not be used in the fontname only form. 

If a style name field is not one of the valid style strings, it is interpreted as part of the font name, and the default style is used. 

Only one of ' ' or '-' may be used to separate fields in the input. The identified separator is the one closest to the end of the string which separates a valid pointsize, or a 
valid style name from the rest of the string. Null (empty) pointsize and style fields are treated as valid fields with the default value for that field. 

Some font names may include the separator characters ' ' or '-'. If str is not formed with 3 components, e.g. such that style or pointsize fields are not present in str, and 
fontname also contains a character determined to be the separator character then these characters where they appear as intended to be part of fontname may instead be interpreted 
as separators so the font name may not be properly recognised. 

The default size is 12 and the default style is PLAIN. If str does not specify a valid size, the returned Font has a size of 12. If str does not specify a valid style, the 
returned Font has a style of PLAIN. If you do not specify a valid font name in the str argument, this method will return a font with the family name "Dialog". To determine what 
font family names are available on your system, use the (|java.awt.GraphicsEnvironment|) method. If str is null, a new Font is returned with the family name "Dialog", a size of 12 
and a PLAIN style. 


    str - the name of the font, or null 

    Returns: the Font object that str describes, or a new default Font if str is null. 

*java.awt.Font.deriveFont(AffineTransform)*

public |java.awt.Font| deriveFont(java.awt.geom.AffineTransform trans)

Creates a new Font object by replicating the current Font object and applying a new transform to it. 


    trans - the AffineTransform associated with the new Font 

    Returns: a new Font object. 

*java.awt.Font.deriveFont(float)*

public |java.awt.Font| deriveFont(float size)

Creates a new Font object by replicating the current Font object and applying a new size to it. 


    size - the size for the new Font. 

    Returns: a new Font object. 

*java.awt.Font.deriveFont(int)*

public |java.awt.Font| deriveFont(int style)

Creates a new Font object by replicating the current Font object and applying a new style to it. 


    style - the style for the new Font 

    Returns: a new Font object. 

*java.awt.Font.deriveFont(int,AffineTransform)*

public |java.awt.Font| deriveFont(
  int style,
  java.awt.geom.AffineTransform trans)

Creates a new Font object by replicating this Font object and applying a new style and transform. 


    style - the style for the new Font 
    trans - the AffineTransform associated with the new Font 

    Returns: a new Font object. 

*java.awt.Font.deriveFont(int,float)*

public |java.awt.Font| deriveFont(
  int style,
  float size)

Creates a new Font object by replicating this Font object and applying a new style and size. 


    style - the style for the new Font 
    size - the size for the new Font 

    Returns: a new Font object. 

*java.awt.Font.deriveFont(Map<?extendsAttributedCharacterIterator.Attribute,?>)*

public |java.awt.Font| deriveFont(java.util.Map<? extends java.text.AttributedCharacterIterator.Attribute, ?> attributes)

Creates a new Font object by replicating the current Font object and applying a new set of font attributes to it. 


    attributes - a map of attributes enabled for the new Font 

    Returns: a new Font object. 

*java.awt.Font.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this Font object to the specified Object. 


    obj - the Object to compare 

    Returns: true if the objects are the same or if the argument is a Font object describing the same font as this object; false otherwise. 

*java.awt.Font.finalize()*

protected void finalize()
  throws |java.lang.Throwable|
         
Disposes the native Font object. 



*java.awt.Font.getAttributes()*

public |java.util.Map|<TextAttribute,?> getAttributes()

Returns a map of font attributes available in this Font. Attributes include things like ligatures and glyph substitution. 



    Returns: the attributes map of this Font. 

*java.awt.Font.getAvailableAttributes()*

public |java.text.AttributedCharacterIterator.Attribute|[] getAvailableAttributes()

Returns the keys of all the attributes supported by this Font. These attributes can be used to derive other fonts. 



    Returns: an array containing the keys of all the attributes supported by this Font. 

*java.awt.Font.getBaselineFor(char)*

public byte getBaselineFor(char c)

Returns the baseline appropriate for displaying this character. 

Large fonts can support different writing systems, and each system can use a different baseline. The character argument determines the writing system to use. Clients should not 
assume all characters use the same baseline. 


    c - a character used to identify the writing system 

    Returns: the baseline appropriate for the specified character. 

*java.awt.Font.getFamily()*

public |java.lang.String| getFamily()

Returns the family name of this Font. 

The family name of a font is font specific. Two fonts such as Helvetica Italic and Helvetica Bold have the same family name, Helvetica, whereas their font face names are Helvetica 
Bold and Helvetica Italic. The list of available family names may be obtained by using the (|java.awt.GraphicsEnvironment|) method. 

Use getName to get the logical name of the font. Use getFontName to get the font face name of the font. 



    Returns: a String that is the family name of this Font. 

*java.awt.Font.getFamily(Locale)*

public |java.lang.String| getFamily(java.util.Locale l)

Returns the family name of this Font, localized for the specified locale. 

The family name of a font is font specific. Two fonts such as Helvetica Italic and Helvetica Bold have the same family name, Helvetica, whereas their font face names are Helvetica 
Bold and Helvetica Italic. The list of available family names may be obtained by using the (|java.awt.GraphicsEnvironment|) method. 

Use getFontName to get the font face name of the font. 


    l - locale for which to get the family name 

    Returns: a String representing the family name of the font, localized for the specified locale. 

*java.awt.Font.getFont(Map<?extendsAttributedCharacterIterator.Attribute,?>)*

public static |java.awt.Font| getFont(java.util.Map<? extends java.text.AttributedCharacterIterator.Attribute, ?> attributes)

Returns a Font appropriate to this attribute set. 


    attributes - the attributes to assign to the new Font 

    Returns: a new Font created with the specified attributes 

*java.awt.Font.getFont(String)*

public static |java.awt.Font| getFont(java.lang.String nm)

Returns a Font object from the system properties list. nm is treated as the name of a system property to be obtained. The String value of this property is then interpreted as a 
Font object according to the specification of Font.decode(String) If the specified property is not found, null is returned instead. 


    nm - the property name 

    Returns: a Font object that the property name describes, or null if no such property exists. 

*java.awt.Font.getFont(String,Font)*

public static |java.awt.Font| getFont(
  java.lang.String nm,
  java.awt.Font font)

Gets the specified Font from the system properties list. As in the getProperty method of System, the first argument is treated as the name of a system property to be obtained. The 
String value of this property is then interpreted as a Font object. 

The property value should be one of the forms accepted by Font.decode(String) If the specified property is not found, the font argument is returned instead. 


    nm - the case-insensitive property name 
    font - a default Font to return if property nm is not defined 

    Returns: the Font value of the property. 

*java.awt.Font.getFontName()*

public |java.lang.String| getFontName()

Returns the font face name of this Font. For example, Helvetica Bold could be returned as a font face name. Use getFamily to get the family name of the font. Use getName to get 
the logical name of the font. 



    Returns: a String representing the font face name of this Font. 

*java.awt.Font.getFontName(Locale)*

public |java.lang.String| getFontName(java.util.Locale l)

Returns the font face name of the Font, localized for the specified locale. For example, Helvetica Fett could be returned as the font face name. Use getFamily to get the family 
name of the font. 


    l - a locale for which to get the font face name 

    Returns: a String representing the font face name, localized for the specified locale. 

*java.awt.Font.getItalicAngle()*

public float getItalicAngle()

Returns the italic angle of this Font. The italic angle is the inverse slope of the caret which best matches the posture of this Font. 



    Returns: the angle of the ITALIC style of this Font. 

*java.awt.Font.getLineMetrics(char[],int,int,FontRenderContext)*

public |java.awt.font.LineMetrics| getLineMetrics(
  char[] chars,
  int beginIndex,
  int limit,
  java.awt.font.FontRenderContext frc)

Returns a LineMetrics object created with the specified arguments. 


    chars - an array of characters 
    beginIndex - the initial offset of chars 
    limit - the end offset of chars 
    frc - the specified FontRenderContext 

    Returns: a LineMetrics object created with the specified arguments. 

*java.awt.Font.getLineMetrics(CharacterIterator,int,int,FontRenderContext)*

public |java.awt.font.LineMetrics| getLineMetrics(
  java.text.CharacterIterator ci,
  int beginIndex,
  int limit,
  java.awt.font.FontRenderContext frc)

Returns a LineMetrics object created with the specified arguments. 


    ci - the specified CharacterIterator 
    beginIndex - the initial offset in ci 
    limit - the end offset of ci 
    frc - the specified FontRenderContext 

    Returns: a LineMetrics object created with the specified arguments. 

*java.awt.Font.getLineMetrics(String,FontRenderContext)*

public |java.awt.font.LineMetrics| getLineMetrics(
  java.lang.String str,
  java.awt.font.FontRenderContext frc)

Returns a (|java.awt.font.LineMetrics|) object created with the specified String and (|java.awt.font.FontRenderContext|) . 


    str - the specified String 
    frc - the specified FontRenderContext 

    Returns: a LineMetrics object created with the specified String and {@link FontRenderContext}. 

*java.awt.Font.getLineMetrics(String,int,int,FontRenderContext)*

public |java.awt.font.LineMetrics| getLineMetrics(
  java.lang.String str,
  int beginIndex,
  int limit,
  java.awt.font.FontRenderContext frc)

Returns a LineMetrics object created with the specified arguments. 


    str - the specified String 
    beginIndex - the initial offset of str 
    limit - the end offset of str 
    frc - the specified FontRenderContext 

    Returns: a LineMetrics object created with the specified arguments. 

*java.awt.Font.getMaxCharBounds(FontRenderContext)*

public |java.awt.geom.Rectangle2D| getMaxCharBounds(java.awt.font.FontRenderContext frc)

Returns the bounds for the character with the maximum bounds as defined in the specified FontRenderContext. 


    frc - the specified FontRenderContext 

    Returns: a Rectangle2D that is the bounding box for the character with the maximum bounds. 

*java.awt.Font.getMissingGlyphCode()*

public int getMissingGlyphCode()

Returns the glyphCode which is used when this Font does not have a glyph for a specified unicode. 



    Returns: the glyphCode of this Font. 

*java.awt.Font.getName()*

public |java.lang.String| getName()

Returns the logical name of this Font. Use getFamily to get the family name of the font. Use getFontName to get the font face name of the font. 



    Returns: a String representing the logical name of this Font. 

*java.awt.Font.getNumGlyphs()*

public int getNumGlyphs()

Returns the number of glyphs in this Font. Glyph codes for this Font range from 0 to getNumGlyphs() - 1. 



    Returns: the number of glyphs in this Font. 

*java.awt.Font.getPeer()*

public |java.awt.peer.FontPeer| getPeer()

Gets the peer of this Font. 

    Deprecated: Font rendering is now platform independent.


    Returns: the peer of the Font. 

*java.awt.Font.getPSName()*

public |java.lang.String| getPSName()

Returns the postscript name of this Font. Use getFamily to get the family name of the font. Use getFontName to get the font face name of the font. 



    Returns: a String representing the postscript name of this Font. 

*java.awt.Font.getSize()*

public int getSize()

Returns the point size of this Font, rounded to an integer. Most users are familiar with the idea of using point size to specify the size of glyphs in a font. This point size 
defines a measurement between the baseline of one line to the baseline of the following line in a single spaced text document. The point size is based on typographic points, 
approximately 1/72 of an inch. 

The Java(tm)2D API adopts the convention that one point is equivalent to one unit in user coordinates. When using a normalized transform for converting user space coordinates to 
device space coordinates 72 user space units equal 1 inch in device space. In this case one point is 1/72 of an inch. 



    Returns: the point size of this Font in 1/72 of an inch units. 

*java.awt.Font.getSize2D()*

public float getSize2D()

Returns the point size of this Font in float value. 



    Returns: the point size of this Font as a float value. 

*java.awt.Font.getStringBounds(char[],int,int,FontRenderContext)*

public |java.awt.geom.Rectangle2D| getStringBounds(
  char[] chars,
  int beginIndex,
  int limit,
  java.awt.font.FontRenderContext frc)

Returns the logical bounds of the specified array of characters in the specified FontRenderContext. The logical bounds contains the origin, ascent, advance, and height, which 
includes the leading. The logical bounds does not always enclose all the text. For example, in some languages and in some fonts, accent marks can be positioned above the ascent or 
below the descent. To obtain a visual bounding box, which encloses all the text, use the getBounds(|java.awt.font.TextLayout|) method of TextLayout. 


    chars - an array of characters 
    beginIndex - the initial offset in the array of characters 
    limit - the end offset in the array of characters 
    frc - the specified FontRenderContext 

    Returns: a Rectangle2D that is the bounding box of the specified array of characters in the specified FontRenderContext. 

*java.awt.Font.getStringBounds(CharacterIterator,int,int,FontRenderContext)*

public |java.awt.geom.Rectangle2D| getStringBounds(
  java.text.CharacterIterator ci,
  int beginIndex,
  int limit,
  java.awt.font.FontRenderContext frc)

Returns the logical bounds of the characters indexed in the specified (|java.text.CharacterIterator|) in the specified FontRenderContext. The logical bounds contains the origin, 
ascent, advance, and height, which includes the leading. The logical bounds does not always enclose all the text. For example, in some languages and in some fonts, accent marks 
can be positioned above the ascent or below the descent. To obtain a visual bounding box, which encloses all the text, use the getBounds(|java.awt.font.TextLayout|) method of 
TextLayout. 


    ci - the specified CharacterIterator 
    beginIndex - the initial offset in ci 
    limit - the end offset in ci 
    frc - the specified FontRenderContext 

    Returns: a Rectangle2D that is the bounding box of the characters indexed in the specified CharacterIterator in the specified FontRenderContext. 

*java.awt.Font.getStringBounds(String,FontRenderContext)*

public |java.awt.geom.Rectangle2D| getStringBounds(
  java.lang.String str,
  java.awt.font.FontRenderContext frc)

Returns the logical bounds of the specified String in the specified FontRenderContext. The logical bounds contains the origin, ascent, advance, and height, which includes the 
leading. The logical bounds does not always enclose all the text. For example, in some languages and in some fonts, accent marks can be positioned above the ascent or below the 
descent. To obtain a visual bounding box, which encloses all the text, use the getBounds(|java.awt.font.TextLayout|) method of TextLayout. 


    str - the specified String 
    frc - the specified FontRenderContext 

    Returns: a {@link Rectangle2D} that is the bounding box of the specified String in the specified FontRenderContext. 

*java.awt.Font.getStringBounds(String,int,int,FontRenderContext)*

public |java.awt.geom.Rectangle2D| getStringBounds(
  java.lang.String str,
  int beginIndex,
  int limit,
  java.awt.font.FontRenderContext frc)

Returns the logical bounds of the specified String in the specified FontRenderContext. The logical bounds contains the origin, ascent, advance, and height, which includes the 
leading. The logical bounds does not always enclose all the text. For example, in some languages and in some fonts, accent marks can be positioned above the ascent or below the 
descent. To obtain a visual bounding box, which encloses all the text, use the getBounds(|java.awt.font.TextLayout|) method of TextLayout. 


    str - the specified String 
    beginIndex - the initial offset of str 
    limit - the end offset of str 
    frc - the specified FontRenderContext 

    Returns: a Rectangle2D that is the bounding box of the specified String in the specified FontRenderContext. 

*java.awt.Font.getStyle()*

public int getStyle()

Returns the style of this Font. The style can be PLAIN, BOLD, ITALIC, or BOLD+ITALIC. 



    Returns: the style of this Font 

*java.awt.Font.getTransform()*

public |java.awt.geom.AffineTransform| getTransform()

Returns a copy of the transform associated with this Font. 



    Returns: an {@link AffineTransform} object representing the transform attribute of this Font object. 

*java.awt.Font.hashCode()*

public int hashCode()

Returns a hashcode for this Font. 



    Returns: a hashcode value for this Font. 

*java.awt.Font.hasUniformLineMetrics()*

public boolean hasUniformLineMetrics()

Checks whether or not this Font has uniform line metrics. A logical Font might be a composite font, which means that it is composed of different physical fonts to cover different 
code ranges. Each of these fonts might have different LineMetrics. If the logical Font is a single font then the metrics would be uniform. 



    Returns: true if this Font has uniform line metrics; false otherwise. 

*java.awt.Font.isBold()*

public boolean isBold()

Indicates whether or not this Font object's style is BOLD. 



    Returns: true if this Font object's style is BOLD; false otherwise. 

*java.awt.Font.isItalic()*

public boolean isItalic()

Indicates whether or not this Font object's style is ITALIC. 



    Returns: true if this Font object's style is ITALIC; false otherwise. 

*java.awt.Font.isPlain()*

public boolean isPlain()

Indicates whether or not this Font object's style is PLAIN. 



    Returns: true if this Font has a PLAIN sytle; false otherwise. 

*java.awt.Font.isTransformed()*

public boolean isTransformed()

Indicates whether or not this Font object has a transform that affects its size in addition to the Size attribute. 



    Returns: true if this Font object has a non-identity AffineTransform attribute. false otherwise. 

*java.awt.Font.layoutGlyphVector(FontRenderContext,char[],int,int,int)*

public |java.awt.font.GlyphVector| layoutGlyphVector(
  java.awt.font.FontRenderContext frc,
  char[] text,
  int start,
  int limit,
  int flags)

Returns a new GlyphVector object, performing full layout of the text if possible. Full layout is required for complex text, such as Arabic or Hindi. Support for different scripts 
depends on the font and implementation. Bidi, and should only be performed on text that has a uniform direction. The direction is indicated in the flags parameter,by using 
LAYOUT_RIGHT_TO_LEFT to indicate a right-to-left (Arabic and Hebrew) run direction, or LAYOUT_LEFT_TO_RIGHT to indicate a left-to-right (English) run direction. 

In addition, some operations, such as Arabic shaping, require context, so that the characters at the start and limit can have the proper shapes. Sometimes the data in the buffer 
outside the provided range does not have valid data. The values LAYOUT_NO_START_CONTEXT and LAYOUT_NO_LIMIT_CONTEXT can be added to the flags parameter to indicate that the text 
before start, or after limit, respectively, should not be examined for context. 

All other values for the flags parameter are reserved. 


    frc - the specified FontRenderContext 
    text - the text to layout 
    start - the start of the text to use for the GlyphVector 
    limit - the limit of the text to use for the GlyphVector 
    flags - control flags as described above 

    Returns: a new GlyphVector representing the text between start and limit, with glyphs chosen and positioned so as to best represent the text 

*java.awt.Font.toString()*

public |java.lang.String| toString()

Converts this Font object to a String representation. 



    Returns: a String representation of this Font object. 



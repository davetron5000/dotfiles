*javax.sound.midi.Sequencer.SyncMode* *Sequencer.SyncMode* A SyncMode object rep

public static class Sequencer.SyncMode
  extends    |java.lang.Object|

|javax.sound.midi.Sequencer.SyncMode_Description|
|javax.sound.midi.Sequencer.SyncMode_Fields|
|javax.sound.midi.Sequencer.SyncMode_Constructors|
|javax.sound.midi.Sequencer.SyncMode_Methods|

================================================================================

*javax.sound.midi.Sequencer.SyncMode_Fields*
|javax.sound.midi.Sequencer.SyncMode_javax.sound.midi.Sequencer.SyncMode.INTERNAL_CLOCK|
|javax.sound.midi.Sequencer.SyncMode_javax.sound.midi.Sequencer.SyncMode.MIDI_SYNC|
|javax.sound.midi.Sequencer.SyncMode_javax.sound.midi.Sequencer.SyncMode.MIDI_TIME_CODE|
|javax.sound.midi.Sequencer.SyncMode_javax.sound.midi.Sequencer.SyncMode.NO_SYNC|

*javax.sound.midi.Sequencer.SyncMode_Constructors*
|javax.sound.midi.Sequencer.SyncMode(String)|Constructs a synchronization mode.

*javax.sound.midi.Sequencer.SyncMode_Methods*
|javax.sound.midi.Sequencer.SyncMode.equals(Object)|Determines whether two obje
|javax.sound.midi.Sequencer.SyncMode.hashCode()|Finalizes the hashcode method.
|javax.sound.midi.Sequencer.SyncMode.toString()|Provides this synchronization m

*javax.sound.midi.Sequencer.SyncMode_Description*

A SyncMode object represents one of the ways in which a MIDI sequencer's notion 
of time can be synchronized with a master or slave device. If the sequencer is 
being synchronized to a master, the sequencer revises its current time in 
response to messages from the master. If the sequencer has a slave, the 
sequencer similarly sends messages to control the slave's timing. 

There are three predefined modes that specify possible masters for a sequencer: 
INTERNAL_CLOCK, MIDI_SYNC, and MIDI_TIME_CODE. The latter two work if the 
sequencer receives MIDI messages from another device. In these two modes, the 
sequencer's time gets reset based on system real-time timing clock messages or 
MIDI time code (MTC) messages, respectively. These two modes can also be used 
as slave modes, in which case the sequencer sends the corresponding types of 
MIDI messages to its receiver (whether or not the sequencer is also receiving 
them from a master). A fourth mode, NO_SYNC, is used to indicate that the 
sequencer should not control its receiver's timing. 


*javax.sound.midi.Sequencer.SyncMode_javax.sound.midi.Sequencer.SyncMode.INTERNAL_CLOCK*

A SyncMode object represents one of the ways in which a MIDI sequencer's notion 
of time can be synchronized with a master or slave device. If the sequencer is 
being synchronized to a master, the sequencer revises its current time in 
response to messages from the master. If the sequencer has a slave, the 
sequencer similarly sends messages to control the slave's timing. 

There are three predefined modes that specify possible masters for a sequencer: 
INTERNAL_CLOCK, MIDI_SYNC, and MIDI_TIME_CODE. The latter two work if the 
sequencer receives MIDI messages from another device. In these two modes, the 
sequencer's time gets reset based on system real-time timing clock messages or 
MIDI time code (MTC) messages, respectively. These two modes can also be used 
as slave modes, in which case the sequencer sends the corresponding types of 
MIDI messages to its receiver (whether or not the sequencer is also receiving 
them from a master). A fourth mode, NO_SYNC, is used to indicate that the 
sequencer should not control its receiver's timing. 


*javax.sound.midi.Sequencer.SyncMode_javax.sound.midi.Sequencer.SyncMode.MIDI_SYNC*

A SyncMode object represents one of the ways in which a MIDI sequencer's notion 
of time can be synchronized with a master or slave device. If the sequencer is 
being synchronized to a master, the sequencer revises its current time in 
response to messages from the master. If the sequencer has a slave, the 
sequencer similarly sends messages to control the slave's timing. 

There are three predefined modes that specify possible masters for a sequencer: 
INTERNAL_CLOCK, MIDI_SYNC, and MIDI_TIME_CODE. The latter two work if the 
sequencer receives MIDI messages from another device. In these two modes, the 
sequencer's time gets reset based on system real-time timing clock messages or 
MIDI time code (MTC) messages, respectively. These two modes can also be used 
as slave modes, in which case the sequencer sends the corresponding types of 
MIDI messages to its receiver (whether or not the sequencer is also receiving 
them from a master). A fourth mode, NO_SYNC, is used to indicate that the 
sequencer should not control its receiver's timing. 


*javax.sound.midi.Sequencer.SyncMode_javax.sound.midi.Sequencer.SyncMode.MIDI_TIME_CODE*

A SyncMode object represents one of the ways in which a MIDI sequencer's notion 
of time can be synchronized with a master or slave device. If the sequencer is 
being synchronized to a master, the sequencer revises its current time in 
response to messages from the master. If the sequencer has a slave, the 
sequencer similarly sends messages to control the slave's timing. 

There are three predefined modes that specify possible masters for a sequencer: 
INTERNAL_CLOCK, MIDI_SYNC, and MIDI_TIME_CODE. The latter two work if the 
sequencer receives MIDI messages from another device. In these two modes, the 
sequencer's time gets reset based on system real-time timing clock messages or 
MIDI time code (MTC) messages, respectively. These two modes can also be used 
as slave modes, in which case the sequencer sends the corresponding types of 
MIDI messages to its receiver (whether or not the sequencer is also receiving 
them from a master). A fourth mode, NO_SYNC, is used to indicate that the 
sequencer should not control its receiver's timing. 


*javax.sound.midi.Sequencer.SyncMode_javax.sound.midi.Sequencer.SyncMode.NO_SYNC*

A SyncMode object represents one of the ways in which a MIDI sequencer's notion 
of time can be synchronized with a master or slave device. If the sequencer is 
being synchronized to a master, the sequencer revises its current time in 
response to messages from the master. If the sequencer has a slave, the 
sequencer similarly sends messages to control the slave's timing. 

There are three predefined modes that specify possible masters for a sequencer: 
INTERNAL_CLOCK, MIDI_SYNC, and MIDI_TIME_CODE. The latter two work if the 
sequencer receives MIDI messages from another device. In these two modes, the 
sequencer's time gets reset based on system real-time timing clock messages or 
MIDI time code (MTC) messages, respectively. These two modes can also be used 
as slave modes, in which case the sequencer sends the corresponding types of 
MIDI messages to its receiver (whether or not the sequencer is also receiving 
them from a master). A fourth mode, NO_SYNC, is used to indicate that the 
sequencer should not control its receiver's timing. 



*javax.sound.midi.Sequencer.SyncMode(String)*

protected Sequencer.SyncMode(java.lang.String name)

Constructs a synchronization mode. 

    name - name of the synchronization mode 

*javax.sound.midi.Sequencer.SyncMode.equals(Object)*

public final boolean equals(java.lang.Object obj)

Determines whether two objects are equal. Returns true if the objects are 
identical 

    obj - the reference object with which to compare 

    Returns: true if this object is the same as the obj argument, false otherwise 
*javax.sound.midi.Sequencer.SyncMode.hashCode()*

public final int hashCode()

Finalizes the hashcode method. 


*javax.sound.midi.Sequencer.SyncMode.toString()*

public final |java.lang.String| toString()

Provides this synchronization mode's name as the string representation of the 
mode. 


    Returns: the name of this synchronization mode 


*org.omg.CORBA.Object* *Object* The definition for a CORBA object reference.

public interface interface Object


|org.omg.CORBA.Object_Description|
|org.omg.CORBA.Object_Fields|
|org.omg.CORBA.Object_Constructors|
|org.omg.CORBA.Object_Methods|

================================================================================

*org.omg.CORBA.Object_Methods*
|org.omg.CORBA.Object._create_request(Context,String,NVList,NamedValue)|Creates
|org.omg.CORBA.Object._create_request(Context,String,NVList,NamedValue,ExceptionList,ContextList)|
|org.omg.CORBA.Object._duplicate()|Returns a duplicate of this CORBA object ref
|org.omg.CORBA.Object._get_domain_managers()|Retrieves the DomainManagers of th
|org.omg.CORBA.Object._get_interface_def()|Obtains an InterfaceDef for the obje
|org.omg.CORBA.Object._get_policy(int)|Returns the Policy object of the specifi
|org.omg.CORBA.Object._hash(int)|Returns an ORB-internal identifier for this ob
|org.omg.CORBA.Object._is_a(String)|Checks whether this object is an instance o
|org.omg.CORBA.Object._is_equivalent(Object)|Determines whether the two object 
|org.omg.CORBA.Object._non_existent()|Determines whether the server object for 
|org.omg.CORBA.Object._release()|Signals that the caller is done using this obj
|org.omg.CORBA.Object._request(String)|Creates a Request instance for use in th
|org.omg.CORBA.Object._set_policy_override(Policy[],SetOverrideType)|Returns a 

*org.omg.CORBA.Object_Description*

The definition for a CORBA object reference. 

A CORBA object reference is a handle for a particular CORBA object implemented 
by a server. A CORBA object reference identifies the same CORBA object each 
time the reference is used to invoke a method on the object. A CORBA object may 
have multiple, distinct object references. 

The org.omg.CORBA.Object interface is the root of the inheritance hierarchy for 
all CORBA object references in the Java programming language, analogous to 
java.rmi.Remote for RMI remote objects. 

A CORBA object may be either local or remote. If it is a local object (that is, 
running in the same VM as the client), invocations may be directly serviced by 
the object instance, and the object reference could point to the actual 
instance of the object implementation class. If a CORBA object is a remote 
object (that is, running in a different VM from the client), the object 
reference points to a stub (proxy) which uses the ORB machinery to make a 
remote invocation on the server where the object implementation resides. 

Default implementations of the methods in the interface org.omg.CORBA.Object 
are provided in the class org.omg.CORBA.portable.ObjectImpl, which is the base 
class for stubs and object implementations. 


*org.omg.CORBA.Object._create_request(Context,String,NVList,NamedValue)*

public |org.omg.CORBA.Request| _create_request(
  org.omg.CORBA.Context ctx,
  java.lang.String operation,
  org.omg.CORBA.NVList arg_list,
  org.omg.CORBA.NamedValue result)

Creates a Request instance initialized with the given context, method name, 
list of arguments, and container for the method's return value. 

    ctx - a Context object containing a list of properties 
    operation - the name of the method to be invoked 
    arg_list - an NVList containing the actual arguments to the method being invoked 
    result - a NamedValue object to serve as a container for the method's return value 

    Returns: the newly-created Request object 
*org.omg.CORBA.Object._create_request(Context,String,NVList,NamedValue,ExceptionList,ContextList)*

public |org.omg.CORBA.Request| _create_request(
  org.omg.CORBA.Context ctx,
  java.lang.String operation,
  org.omg.CORBA.NVList arg_list,
  org.omg.CORBA.NamedValue result,
  org.omg.CORBA.ExceptionList exclist,
  org.omg.CORBA.ContextList ctxlist)

Creates a Request instance initialized with the given context, method name, 
list of arguments, container for the method's return value, list of possible 
exceptions, and list of context strings needing to be resolved. 

    ctx - a Context object containing a list of properties 
    operation - the name of the method to be invoked 
    arg_list - an NVList containing the actual arguments to the method being invoked 
    result - a NamedValue object to serve as a container for the method's return value 
    exclist - an ExceptionList object containing a list of possible exceptions the method can 
       throw 
    ctxlist - a ContextList object containing a list of context strings that need to be 
       resolved and sent with the Request instance 

    Returns: the newly-created Request object 
*org.omg.CORBA.Object._duplicate()*

public |org.omg.CORBA.Object| _duplicate()

Returns a duplicate of this CORBA object reference. The server object 
implementation is not involved in creating the duplicate, and the 
implementation cannot distinguish whether the original object reference or a 
duplicate was used to make a request. 

Note that this method is not very useful in the Java platform, since memory 
management is handled by the VM. It is included for compliance with the CORBA 
APIs. 

The method _duplicate may return this object reference itself. 


    Returns: a duplicate of this object reference or this object reference itself 
*org.omg.CORBA.Object._get_domain_managers()*

public |org.omg.CORBA.DomainManager| _get_domain_managers()

Retrieves the DomainManagers of this object. This allows administration 
services (and applications) to retrieve the domain managers, and hence the 
security and other policies applicable to individual objects that are members 
of the domain. 


    Returns: the list of immediately enclosing domain managers of this object. At least one 
             domain manager is always returned in the list since by default 
             each object is associated with at least one domain manager at 
             creation. 
*org.omg.CORBA.Object._get_interface_def()*

public |org.omg.CORBA.Object| _get_interface_def()

Obtains an InterfaceDef for the object implementation referenced by this object 
reference. The InterfaceDef object may be used to introspect on the methods, 
attributes, and other type information for the object referred to by this 
object reference. 


    Returns: the InterfaceDef object in the Interface Repository which provides type 
             information about the object referred to by this object reference 
*org.omg.CORBA.Object._get_policy(int)*

public |org.omg.CORBA.Policy| _get_policy(int policy_type)

Returns the Policy object of the specified type which applies to this object. 

    policy_type - the type of policy to be obtained 

    Returns: A Policy object of the type specified by the policy_type parameter 
*org.omg.CORBA.Object._hash(int)*

public int _hash(int maximum)

Returns an ORB-internal identifier for this object reference. This is a hash 
identifier, which does not change during the lifetime of the object reference, 
and so neither will any hash function of that identifier change. The value 
returned is not guaranteed to be unique; in other words, another object 
reference may have the same hash value. If two object references hash 
differently, then they are distinct object references; however, both may still 
refer to the same CORBA object. 

    maximum - the upper bound on the hash value returned by the ORB 

    Returns: the ORB-internal hash identifier for this object reference 
*org.omg.CORBA.Object._is_a(String)*

public boolean _is_a(java.lang.String repositoryIdentifier)

Checks whether this object is an instance of a class that implements the given 
interface. 

    repositoryIdentifier - the interface to check against 

    Returns: true if this object reference is an instance of a class that implements the 
             interface; false otherwise 
*org.omg.CORBA.Object._is_equivalent(Object)*

public boolean _is_equivalent(org.omg.CORBA.Object other)

Determines whether the two object references are equivalent, so far as the ORB 
can easily determine. Two object references are equivalent if they are 
identical. Two distinct object references which in fact refer to the same 
object are also equivalent. However, ORBs are not required to attempt 
determination of whether two distinct object references refer to the same 
object, since such determination could be impractically expensive. 

    other - the other object reference with which to check for equivalence 

    Returns: true if this object reference is known to be equivalent to the given object 
             reference. Note that false indicates only that the two object 
             references are distinct, not necessarily that they reference 
             distinct objects. 
*org.omg.CORBA.Object._non_existent()*

public boolean _non_existent()

Determines whether the server object for this object reference has been 
destroyed. 


    Returns: true if the ORB knows authoritatively that the server object does not exist; 
             false otherwise 
*org.omg.CORBA.Object._release()*

public void _release()

Signals that the caller is done using this object reference, so internal ORB 
resources associated with this object reference can be released. Note that the 
object implementation is not involved in this operation, and other references 
to the same object are not affected. 


*org.omg.CORBA.Object._request(String)*

public |org.omg.CORBA.Request| _request(java.lang.String operation)

Creates a Request instance for use in the Dynamic Invocation Interface. 

    operation - the name of the method to be invoked using the Request instance 

    Returns: the newly-created Request instance 
*org.omg.CORBA.Object._set_policy_override(Policy[],SetOverrideType)*

public |org.omg.CORBA.Object| _set_policy_override(
  org.omg.CORBA.Policy[] policies,
  org.omg.CORBA.SetOverrideType set_add)

Returns a new Object with the given policies either replacing any existing 
policies in this Object or with the given policies added to the existing ones, 
depending on the value of the given SetOverrideType object. 

    policies - an array of Policy objects containing the policies to be added or to be used as 
       replacements 
    set_add - either SetOverrideType.SET_OVERRIDE, indicating that the given policies will 
       replace any existing ones, or SetOverrideType.ADD_OVERRIDE, indicating 
       that the given policies should be added to any existing ones 

    Returns: a new Object with the given policies replacing or added to those in this Object 


*javax.sound.midi.Track* *Track* A MIDI track is an independent stream of MIDI e

public class Track
  extends    |java.lang.Object|

|javax.sound.midi.Track_Description|
|javax.sound.midi.Track_Fields|
|javax.sound.midi.Track_Constructors|
|javax.sound.midi.Track_Methods|

================================================================================

*javax.sound.midi.Track_Methods*
|javax.sound.midi.Track.add(MidiEvent)|Adds a new event to the track.
|javax.sound.midi.Track.get(int)|Obtains the event at the specified index.
|javax.sound.midi.Track.remove(MidiEvent)|Removes the specified event from the 
|javax.sound.midi.Track.size()|Obtains the number of events in this track.
|javax.sound.midi.Track.ticks()|Obtains the length of the track, expressed in M

*javax.sound.midi.Track_Description*

A MIDI track is an independent stream of MIDI events (time-stamped MIDI data) 
that can be stored along with other tracks in a standard MIDI file. The MIDI 
specification allows only 16 channels of MIDI data, but tracks are a way to get 
around this limitation. A MIDI file can contain any number of tracks, each 
containing its own stream of up to 16 channels of MIDI data. 

A Track occupies a middle level in the hierarchy of data played by a 
(|javax.sound.midi.Sequencer|) : sequencers play sequences, which contain 
tracks, which contain MIDI events. A sequencer may provide controls that mute 
or solo individual tracks. 

The timing information and resolution for a track is controlled by and stored 
in the sequence containing the track. A given Track is considered to belong to 
the particular (|javax.sound.midi.Sequence|) that maintains its timing. For 
this reason, a new (empty) track is created by calling the 
(|javax.sound.midi.Sequence|) method, rather than by directly invoking a Track 
constructor. 

The Track class provides methods to edit the track by adding or removing 
MidiEvent objects from it. These operations keep the event list in the correct 
time order. Methods are also included to obtain the track's size, in terms of 
either the number of events it contains or its duration in ticks. 


*javax.sound.midi.Track.add(MidiEvent)*

public boolean add(javax.sound.midi.MidiEvent event)

Adds a new event to the track. However, if the event is already contained in 
the track, it is not added again. The list of events is kept in time order, 
meaning that this event inserted at the appropriate place in the list, not 
necessarily at the end. 

    event - the event to add 

    Returns: true if the event did not already exist in the track and was added, otherwise 
             false 
*javax.sound.midi.Track.get(int)*

public |javax.sound.midi.MidiEvent| get(int index)
  throws |java.lang.ArrayIndexOutOfBoundsException|
         
Obtains the event at the specified index. 

    index - the location of the desired event in the event vector 

*javax.sound.midi.Track.remove(MidiEvent)*

public boolean remove(javax.sound.midi.MidiEvent event)

Removes the specified event from the track. 

    event - the event to remove 

    Returns: true if the event existed in the track and was removed, otherwise false 
*javax.sound.midi.Track.size()*

public int size()

Obtains the number of events in this track. 


    Returns: the size of the track's event vector 
*javax.sound.midi.Track.ticks()*

public long ticks()

Obtains the length of the track, expressed in MIDI ticks. (The duration of a 
tick in seconds is determined by the timing resolution of the Sequence 
containing this track, and also by the tempo of the music as set by the 
sequencer.) 


    Returns: the duration, in ticks 


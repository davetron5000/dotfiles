*java.awt.image.DirectColorModel* *DirectColorModel* The DirectColorModel class is a ColorModel
 class that works with pixel values that represent RGB
 color and alpha information 

public class DirectColorModel
  extends    |java.awt.image.PackedColorModel|

|java.awt.image.DirectColorModel_Description|
|java.awt.image.DirectColorModel_Fields|
|java.awt.image.DirectColorModel_Constructors|
|java.awt.image.DirectColorModel_Methods|

====================================================================================================================================================================================

*java.awt.image.DirectColorModel_Constructors*
|java.awt.image.DirectColorModel(ColorSpace,int,int,int,int,int,boolean,int)|Constructs a DirectColorModel from the specified  parameters.
|java.awt.image.DirectColorModel(int,int,int,int)|Constructs a DirectColorModel from the specified masks   that indicate which bits in an int pixel representation   contain the re
|java.awt.image.DirectColorModel(int,int,int,int,int)|Constructs a DirectColorModel from the specified masks   that indicate which bits in an int pixel representation  contain the

*java.awt.image.DirectColorModel_Methods*
|java.awt.image.DirectColorModel.coerceData(WritableRaster,boolean)|Forces the raster data to match the state specified in the  isAlphaPremultiplied variable, assuming the data is
|java.awt.image.DirectColorModel.createCompatibleWritableRaster(int,int)|Creates a WritableRaster with the specified width and  height that has a data layout (SampleModel) compati
|java.awt.image.DirectColorModel.getAlpha(int)|Returns the alpha component for the specified pixel, scaled  from 0 to 255.
|java.awt.image.DirectColorModel.getAlpha(Object)|Returns the alpha component for the specified pixel, scaled  from 0 to 255.
|java.awt.image.DirectColorModel.getAlphaMask()|Returns the mask indicating which bits in an int pixel   representation contain the alpha component.
|java.awt.image.DirectColorModel.getBlue(int)|Returns the blue color component for the specified pixel, scaled  from 0 to 255 in the default RGB ColorSpace, sRGB.
|java.awt.image.DirectColorModel.getBlue(Object)|Returns the blue color component for the specified pixel, scaled  from 0 to 255 in the default RGB ColorSpace, sRGB.
|java.awt.image.DirectColorModel.getBlueMask()|Returns the mask indicating which bits in an int pixel   representation contain the blue color component.
|java.awt.image.DirectColorModel.getComponents(int,int[],int)|Returns an array of unnormalized color/alpha components given a pixel  in this ColorModel.
|java.awt.image.DirectColorModel.getComponents(Object,int[],int)|Returns an array of unnormalized color/alpha components given a pixel  in this ColorModel.
|java.awt.image.DirectColorModel.getDataElement(int[],int)|Returns a pixel value represented as an int in this   ColorModel, given an array of unnormalized color/alpha   component
|java.awt.image.DirectColorModel.getDataElements(int[],int,Object)|Returns a data element array representation of a pixel in this  ColorModel, given an array of unnormalized color
|java.awt.image.DirectColorModel.getDataElements(int,Object)|Returns a data element array representation of a pixel in this  ColorModel, given an integer pixel representation in t
|java.awt.image.DirectColorModel.getGreen(int)|Returns the green color component for the specified pixel, scaled  from 0 to 255 in the default RGB ColorSpace, sRGB.
|java.awt.image.DirectColorModel.getGreen(Object)|Returns the green color component for the specified pixel, scaled  from 0 to 255 in the default RGB ColorSpace, sRGB.
|java.awt.image.DirectColorModel.getGreenMask()|Returns the mask indicating which bits in an int pixel   representation contain the green color component.
|java.awt.image.DirectColorModel.getRed(int)|Returns the red color component for the specified pixel, scaled  from 0 to 255 in the default RGB ColorSpace, sRGB.
|java.awt.image.DirectColorModel.getRed(Object)|Returns the red color component for the specified pixel, scaled  from 0 to 255 in the default RGB ColorSpace, sRGB.
|java.awt.image.DirectColorModel.getRedMask()|Returns the mask indicating which bits in an int pixel   representation contain the red color component.
|java.awt.image.DirectColorModel.getRGB(int)|Returns the color/alpha components of the pixel in the default  RGB color model format.
|java.awt.image.DirectColorModel.getRGB(Object)|Returns the color/alpha components for the specified pixel in the  default RGB color model format.
|java.awt.image.DirectColorModel.isCompatibleRaster(Raster)|Returns true if raster is compatible  with this ColorModel and false if it is  not.
|java.awt.image.DirectColorModel.toString()|Returns a String that represents this  DirectColorModel.

*java.awt.image.DirectColorModel_Description*

The DirectColorModel class is a ColorModel class that works with pixel values that represent RGB color and alpha information as separate samples and that pack all samples for a 
single pixel into a single int, short, or byte quantity. This class can be used only with ColorSpaces of type ColorSpace.TYPE_RGB. In addition, for each component of the 
ColorSpace, the minimum normalized component value obtained via the getMinValue() method of ColorSpace must be 0.0, and the maximum value obtained via the getMaxValue() method 
must be 1.0 (these min/max values are typical for RGB spaces). There must be three color samples in the pixel values and there can be a single alpha sample. For those methods that 
use a primitive array pixel representation of type transferType, the array length is always one. The transfer types supported are DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, and 
DataBuffer.TYPE_INT. Color and alpha samples are stored in the single element of the array in bits indicated by bit masks. Each bit mask must be contiguous and masks must not 
overlap. The same masks apply to the single int pixel representation used by other methods. The correspondence of masks and color/alpha samples is as follows: 

Masks are identified by indices running from 0 through 2 if no alpha is present, or 3 if an alpha is present. The first three indices refer to color samples; index 0 corresponds 
to red, index 1 to green, and index 2 to blue. Index 3 corresponds to the alpha sample, if present. 

The translation from pixel values to color/alpha components for display or processing purposes is a one-to-one correspondence of samples to components. A DirectColorModel is 
typically used with image data which uses masks to define packed samples. For example, a DirectColorModel can be used in conjunction with a SinglePixelPackedSampleModel to 
construct a (|java.awt.image.BufferedImage|) . Normally the masks used by the (|java.awt.image.SampleModel|) and the ColorModel would be the same. However, if they are different, 
the color interpretation of pixel data will be done according to the masks of the ColorModel. 

A single int pixel representation is valid for all objects of this class, since it is always possible to represent pixel values used with this class in a single int. Therefore, 
methods which use this representation will not throw an IllegalArgumentException due to an invalid pixel value. 

This color model is similar to an X11 TrueColor visual. The default RGB ColorModel specified by the getRGBdefault(|java.awt.image.ColorModel|) method is a DirectColorModel with 
the following parameters: 

Number of bits: 32 Red mask: 0x00ff0000 Green mask: 0x0000ff00 Blue mask: 0x000000ff Alpha mask: 0xff000000 Color space: sRGB isAlphaPremultiplied: False Transparency: 
Transparency.TRANSLUCENT transferType: DataBuffer.TYPE_INT 

Many of the methods in this class are final. This is because the underlying native graphics code makes assumptions about the layout and operation of this class and those 
assumptions are reflected in the implementations of the methods here that are marked final. You can subclass this class for other reasons, but you cannot override or modify the 
behavior of those methods. 



*java.awt.image.DirectColorModel(ColorSpace,int,int,int,int,int,boolean,int)*

public DirectColorModel(
  java.awt.color.ColorSpace space,
  int bits,
  int rmask,
  int gmask,
  int bmask,
  int amask,
  boolean isAlphaPremultiplied,
  int transferType)

Constructs a DirectColorModel from the specified parameters. Color components are in the specified ColorSpace, which must be of type ColorSpace.TYPE_RGB and have minimum 
normalized component values which are all 0.0 and maximum values which are all 1.0. The masks specify which bits in an int pixel representation contain the red, green and blue 
color samples and the alpha sample, if present. If amask is 0, pixel values do not contain alpha information and all pixels are treated as opaque, which means that alpha=1.0. All 
of the bits in each mask must be contiguous and fit in the specified number of least significant bits of an int pixel representation. If there is alpha, the boolean 
isAlphaPremultiplied specifies how to interpret color and alpha samples in pixel values. If the boolean is true, color samples are assumed to have been multiplied by the alpha 
sample. The transparency value is Transparency.OPAQUE, if no alpha is present, or Transparency.TRANSLUCENT otherwise. The transfer type is the type of primitive array used to 
represent pixel values and must be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT. 

    space - the specified ColorSpace 
    bits - the number of bits in the pixel values; for example, the sum of the number of bits in the masks. 
    rmask - specifies a mask indicating which bits in an integer pixel contain the red component 
    gmask - specifies a mask indicating which bits in an integer pixel contain the green component 
    bmask - specifies a mask indicating which bits in an integer pixel contain the blue component 
    amask - specifies a mask indicating which bits in an integer pixel contain the alpha component 
    isAlphaPremultiplied - true if color samples are premultiplied by the alpha sample; false otherwise 
    transferType - the type of array used to represent pixel values 

*java.awt.image.DirectColorModel(int,int,int,int)*

public DirectColorModel(
  int bits,
  int rmask,
  int gmask,
  int bmask)

Constructs a DirectColorModel from the specified masks that indicate which bits in an int pixel representation contain the red, green and blue color samples. As pixel values do 
not contain alpha information, all pixels are treated as opaque, which means that alpha=1.0. All of the bits in each mask must be contiguous and fit in the specified number of 
least significant bits of an int pixel representation. The ColorSpace is the default sRGB space. The transparency value is Transparency.OPAQUE. The transfer type is the smallest 
of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT that can hold a single pixel. 

    bits - the number of bits in the pixel values; for example, the sum of the number of bits in the masks. 
    rmask - specifies a mask indicating which bits in an integer pixel contain the red component 
    gmask - specifies a mask indicating which bits in an integer pixel contain the green component 
    bmask - specifies a mask indicating which bits in an integer pixel contain the blue component 

*java.awt.image.DirectColorModel(int,int,int,int,int)*

public DirectColorModel(
  int bits,
  int rmask,
  int gmask,
  int bmask,
  int amask)

Constructs a DirectColorModel from the specified masks that indicate which bits in an int pixel representation contain the red, green and blue color samples and the alpha sample, 
if present. If amask is 0, pixel values do not contain alpha information and all pixels are treated as opaque, which means that alpha=1.0. All of the bits in each mask must be 
contiguous and fit in the specified number of least significant bits of an int pixel representation. Alpha, if present, is not premultiplied. The ColorSpace is the default sRGB 
space. The transparency value is Transparency.OPAQUE if no alpha is present, or Transparency.TRANSLUCENT otherwise. The transfer type is the smallest of DataBuffer.TYPE_BYTE, 
DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT that can hold a single pixel. 

    bits - the number of bits in the pixel values; for example, the sum of the number of bits in the masks. 
    rmask - specifies a mask indicating which bits in an integer pixel contain the red component 
    gmask - specifies a mask indicating which bits in an integer pixel contain the green component 
    bmask - specifies a mask indicating which bits in an integer pixel contain the blue component 
    amask - specifies a mask indicating which bits in an integer pixel contain the alpha component 

*java.awt.image.DirectColorModel.coerceData(WritableRaster,boolean)*

public final |java.awt.image.ColorModel| coerceData(
  java.awt.image.WritableRaster raster,
  boolean isAlphaPremultiplied)

Forces the raster data to match the state specified in the isAlphaPremultiplied variable, assuming the data is currently correctly described by this ColorModel. It may multiply or 
divide the color raster data by alpha, or do nothing if the data is in the correct state. If the data needs to be coerced, this method will also return an instance of this 
ColorModel with the isAlphaPremultiplied flag set appropriately. This method will throw a UnsupportedOperationException if this transferType is not supported by this ColorModel. 
Since ColorModel can be subclassed, subclasses inherit the implementation of this method and if they don't override it then they throw an exception if they use an unsupported 
transferType. 


    raster - the WritableRaster data 
    isAlphaPremultiplied - true if the alpha is premultiplied; false otherwise 

    Returns: a ColorModel object that represents the coerced data. 

*java.awt.image.DirectColorModel.createCompatibleWritableRaster(int,int)*

public final |java.awt.image.WritableRaster| createCompatibleWritableRaster(
  int w,
  int h)

Creates a WritableRaster with the specified width and height that has a data layout (SampleModel) compatible with this ColorModel. 


    w - the width to apply to the new WritableRaster 
    h - the height to apply to the new WritableRaster 

    Returns: a WritableRaster object with the specified width and height. 

*java.awt.image.DirectColorModel.getAlpha(int)*

public final int getAlpha(int pixel)

Returns the alpha component for the specified pixel, scaled from 0 to 255. The pixel value is specified as an int. 


    pixel - the specified pixel 

    Returns: the value of the alpha component of pixel from 0 to 255. 

*java.awt.image.DirectColorModel.getAlpha(Object)*

public int getAlpha(java.lang.Object inData)

Returns the alpha component for the specified pixel, scaled from 0 to 255. The pixel value is specified by an array of data elements of type transferType passed in as an object 
reference. If inData is not a primitive array of type transferType, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if inData is not large enough to 
hold a pixel value for this ColorModel. Since DirectColorModel can be subclassed, subclasses inherit the implementation of this method and if they don't override it then they 
throw an exception if they use an unsupported transferType. If this transferType is not supported, an UnsupportedOperationException is thrown. 


    inData - the specified pixel 

    Returns: the alpha component of the specified pixel, scaled from 0 to 255. 

*java.awt.image.DirectColorModel.getAlphaMask()*

public final int getAlphaMask()

Returns the mask indicating which bits in an int pixel representation contain the alpha component. 



    Returns: the mask, which indicates which bits of the int pixel representation contain the alpha sample. 

*java.awt.image.DirectColorModel.getBlue(int)*

public final int getBlue(int pixel)

Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB. A color conversion is done if necessary. The pixel value is 
specified as an int. The returned value is a non pre-multiplied value. Thus, if the alpha is premultiplied, this method divides it out before returning the value. If the alpha 
value is 0, for example, the blue value is 0. 


    pixel - the specified pixel 

    Returns: the blue color component for the specified pixel, from 0 to 255 in the sRGB ColorSpace. 

*java.awt.image.DirectColorModel.getBlue(Object)*

public int getBlue(java.lang.Object inData)

Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB. A color conversion is done if necessary. The pixel value is 
specified by an array of data elements of type transferType passed in as an object reference. The returned value is a non pre-multiplied value. Thus, if the alpha is 
premultiplied, this method divides it out before returning the value. If the alpha value is 0, for example, the blue value is 0. If inData is not a primitive array of type 
transferType, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if inData is not large enough to hold a pixel value for this ColorModel. Since 
DirectColorModel can be subclassed, subclasses inherit the implementation of this method and if they don't override it then they throw an exception if they use an unsupported 
transferType. An UnsupportedOperationException is thrown if this transferType is not supported by this ColorModel. 


    inData - the array containing the pixel value 

    Returns: the value of the blue component of the specified pixel. 

*java.awt.image.DirectColorModel.getBlueMask()*

public final int getBlueMask()

Returns the mask indicating which bits in an int pixel representation contain the blue color component. 



    Returns: the mask, which indicates which bits of the int pixel representation contain the blue color sample. 

*java.awt.image.DirectColorModel.getComponents(int,int[],int)*

public final int[] getComponents(
  int pixel,
  int[] components,
  int offset)

Returns an array of unnormalized color/alpha components given a pixel in this ColorModel. The pixel value is specified as an int. If the components array is null, a new array is 
allocated. The components array is returned. Color/alpha components are stored in the components array starting at offset, even if the array is allocated by this method. An 
ArrayIndexOutOfBoundsException is thrown if the components array is not null and is not large enough to hold all the color and alpha components, starting at offset. 


    pixel - the specified pixel 
    components - the array to receive the color and alpha components of the specified pixel 
    offset - the offset into the components array at which to start storing the color and alpha components 

    Returns: an array containing the color and alpha components of the specified pixel starting at the specified offset. 

*java.awt.image.DirectColorModel.getComponents(Object,int[],int)*

public final int[] getComponents(
  java.lang.Object pixel,
  int[] components,
  int offset)

Returns an array of unnormalized color/alpha components given a pixel in this ColorModel. The pixel value is specified by an array of data elements of type transferType passed in 
as an object reference. If pixel is not a primitive array of type transferType, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if pixel is not large 
enough to hold a pixel value for this ColorModel. If the components array is null, a new array is allocated. The components array is returned. Color/alpha components are stored in 
the components array starting at offset, even if the array is allocated by this method. An ArrayIndexOutOfBoundsException is thrown if the components array is not null and is not 
large enough to hold all the color and alpha components, starting at offset. Since DirectColorModel can be subclassed, subclasses inherit the implementation of this method and if 
they don't override it then they throw an exception if they use an unsupported transferType. 


    pixel - the specified pixel 
    components - the array to receive the color and alpha components of the specified pixel 
    offset - the offset into the components array at which to start storing the color and alpha components 

    Returns: an array containing the color and alpha components of the specified pixel starting at the specified offset. 

*java.awt.image.DirectColorModel.getDataElement(int[],int)*

public int getDataElement(
  int[] components,
  int offset)

Returns a pixel value represented as an int in this ColorModel, given an array of unnormalized color/alpha components. An ArrayIndexOutOfBoundsException is thrown if the 
components array is not large enough to hold all the color and alpha components, starting at offset. 


    components - an array of unnormalized color and alpha components 
    offset - the index into components at which to begin retrieving the color and alpha components 

    Returns: an int pixel value in this ColorModel corresponding to the specified components. 

*java.awt.image.DirectColorModel.getDataElements(int[],int,Object)*

public |java.lang.Object| getDataElements(
  int[] components,
  int offset,
  java.lang.Object obj)

Returns a data element array representation of a pixel in this ColorModel, given an array of unnormalized color/alpha components. This array can then be passed to the 
setDataElements method of a WritableRaster object. An ArrayIndexOutOfBoundsException is thrown if the components array is not large enough to hold all the color and alpha 
components, starting at offset. If the obj variable is null, a new array is allocated. If obj is not null, it must be a primitive array of type transferType; otherwise, a 
ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if obj is not large enough to hold a pixel value for this ColorModel. Since DirectColorModel can be 
subclassed, subclasses inherit the implementation of this method and if they don't override it then they throw an exception if they use an unsupported transferType. 


    components - an array of unnormalized color and alpha components 
    offset - the index into components at which to begin retrieving color and alpha components 
    obj - the Object representing an array of color and alpha components 

    Returns: an Object representing an array of color and alpha components. 

*java.awt.image.DirectColorModel.getDataElements(int,Object)*

public |java.lang.Object| getDataElements(
  int rgb,
  java.lang.Object pixel)

Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model. This array can then be passed to 
the setDataElements method of a WritableRaster object. If the pixel variable is null, a new array is allocated. If pixel is not null, it must be a primitive array of type 
transferType; otherwise, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if pixel is not large enough to hold a pixel value for this ColorModel. The 
pixel array is returned. Since DirectColorModel can be subclassed, subclasses inherit the implementation of this method and if they don't override it then they throw an exception 
if they use an unsupported transferType. 


    rgb - the integer pixel representation in the default RGB color model 
    pixel - the specified pixel 

    Returns: an array representation of the specified pixel in this ColorModel 

*java.awt.image.DirectColorModel.getGreen(int)*

public final int getGreen(int pixel)

Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB. A color conversion is done if necessary. The pixel value is 
specified as an int. The returned value is a non pre-multiplied value. Thus, if the alpha is premultiplied, this method divides it out before returning the value. If the alpha 
value is 0, for example, the green value is 0. 


    pixel - the specified pixel 

    Returns: the green color component for the specified pixel, from 0 to 255 in the sRGB ColorSpace. 

*java.awt.image.DirectColorModel.getGreen(Object)*

public int getGreen(java.lang.Object inData)

Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB. A color conversion is done if necessary. The pixel value is 
specified by an array of data elements of type transferType passed in as an object reference. The returned value is a non pre-multiplied value. Thus, if the alpha is 
premultiplied, this method divides it out before returning the value. If the alpha value is 0, for example, the green value is 0. If inData is not a primitive array of type 
transferType, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if inData is not large enough to hold a pixel value for this ColorModel. Since 
DirectColorModel can be subclassed, subclasses inherit the implementation of this method and if they don't override it then they throw an exception if they use an unsupported 
transferType. An UnsupportedOperationException is thrown if this transferType is not supported by this ColorModel. 


    inData - the array containing the pixel value 

    Returns: the value of the green component of the specified pixel. 

*java.awt.image.DirectColorModel.getGreenMask()*

public final int getGreenMask()

Returns the mask indicating which bits in an int pixel representation contain the green color component. 



    Returns: the mask, which indicates which bits of the int pixel representation contain the green color sample. 

*java.awt.image.DirectColorModel.getRed(int)*

public final int getRed(int pixel)

Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB. A color conversion is done if necessary. The pixel value is 
specified as an int. The returned value is a non pre-multiplied value. Thus, if the alpha is premultiplied, this method divides it out before returning the value. If the alpha 
value is 0, for example, the red value is 0. 


    pixel - the specified pixel 

    Returns: the red color component for the specified pixel, from 0 to 255 in the sRGB ColorSpace. 

*java.awt.image.DirectColorModel.getRed(Object)*

public int getRed(java.lang.Object inData)

Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB. A color conversion is done if necessary. The pixel value is 
specified by an array of data elements of type transferType passed in as an object reference. The returned value is a non pre-multiplied value. Thus, if the alpha is 
premultiplied, this method divides it out before returning the value. If the alpha value is 0, for example, the red value is 0. If inData is not a primitive array of type 
transferType, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if inData is not large enough to hold a pixel value for this ColorModel. Since 
DirectColorModel can be subclassed, subclasses inherit the implementation of this method and if they don't override it then they throw an exception if they use an unsupported 
transferType. An UnsupportedOperationException is thrown if this transferType is not supported by this ColorModel. 


    inData - the array containing the pixel value 

    Returns: the value of the red component of the specified pixel. 

*java.awt.image.DirectColorModel.getRedMask()*

public final int getRedMask()

Returns the mask indicating which bits in an int pixel representation contain the red color component. 



    Returns: the mask, which indicates which bits of the int pixel representation contain the red color sample. 

*java.awt.image.DirectColorModel.getRGB(int)*

public final int getRGB(int pixel)

Returns the color/alpha components of the pixel in the default RGB color model format. A color conversion is done if necessary. The pixel value is specified as an int. The 
returned value is in a non pre-multiplied format. Thus, if the alpha is premultiplied, this method divides it out of the color components. If the alpha value is 0, for example, 
the color values are each 0. 


    pixel - the specified pixel 

    Returns: the RGB value of the color/alpha components of the specified pixel. 

*java.awt.image.DirectColorModel.getRGB(Object)*

public int getRGB(java.lang.Object inData)

Returns the color/alpha components for the specified pixel in the default RGB color model format. A color conversion is done if necessary. The pixel value is specified by an array 
of data elements of type transferType passed in as an object reference. If inData is not a primitive array of type transferType, a ClassCastException is thrown. An 
ArrayIndexOutOfBoundsException is thrown if inData is not large enough to hold a pixel value for this ColorModel. The returned value is in a non pre-multiplied format. Thus, if 
the alpha is premultiplied, this method divides it out of the color components. If the alpha value is 0, for example, the color values is 0. Since DirectColorModel can be 
subclassed, subclasses inherit the implementation of this method and if they don't override it then they throw an exception if they use an unsupported transferType. 


    inData - the specified pixel 

    Returns: the color and alpha components of the specified pixel. 

*java.awt.image.DirectColorModel.isCompatibleRaster(Raster)*

public boolean isCompatibleRaster(java.awt.image.Raster raster)

Returns true if raster is compatible with this ColorModel and false if it is not. 


    raster - the {@link Raster} object to test for compatibility 

    Returns: true if raster is compatible with this ColorModel; false otherwise. 

*java.awt.image.DirectColorModel.toString()*

public |java.lang.String| toString()

Returns a String that represents this DirectColorModel. 



    Returns: a String representing this DirectColorModel. 



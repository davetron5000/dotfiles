*java.awt.GraphicsDevice* *GraphicsDevice* The GraphicsDevice class describes the graphics devices
 that might be available in a particular graphics environment.

public abstract class GraphicsDevice
  extends    |java.lang.Object|

|java.awt.GraphicsDevice_Description|
|java.awt.GraphicsDevice_Fields|
|java.awt.GraphicsDevice_Constructors|
|java.awt.GraphicsDevice_Methods|

====================================================================================================================================================================================

*java.awt.GraphicsDevice_Fields*
|int_java.awt.GraphicsDevice.TYPE_IMAGE_BUFFER|
|int_java.awt.GraphicsDevice.TYPE_PRINTER|
|int_java.awt.GraphicsDevice.TYPE_RASTER_SCREEN|

*java.awt.GraphicsDevice_Constructors*
|java.awt.GraphicsDevice()|This is an abstract class that cannot be instantiated directly.

*java.awt.GraphicsDevice_Methods*
|java.awt.GraphicsDevice.getAvailableAcceleratedMemory()|This method returns the number of bytes available in  accelerated memory on this device.
|java.awt.GraphicsDevice.getBestConfiguration(GraphicsConfigTemplate)|Returns the "best" configuration possible that passes the  criteria defined in theGraphicsConfigTemplate.
|java.awt.GraphicsDevice.getConfigurations()|Returns all of the GraphicsConfiguration  objects associated with this GraphicsDevice.
|java.awt.GraphicsDevice.getDefaultConfiguration()|Returns the default GraphicsConfiguration  associated with this GraphicsDevice.
|java.awt.GraphicsDevice.getDisplayMode()|Returns the current display mode of this   GraphicsDevice.
|java.awt.GraphicsDevice.getDisplayModes()|Returns all display modes available for this        GraphicsDevice.
|java.awt.GraphicsDevice.getFullScreenWindow()|Returns the Window object representing the   full-screen window if the device is in full-screen mode.
|java.awt.GraphicsDevice.getIDstring()|Returns the identification string associated with this   GraphicsDevice.
|java.awt.GraphicsDevice.getType()|Returns the type of this GraphicsDevice.
|java.awt.GraphicsDevice.isDisplayChangeSupported()|Returns true if this GraphicsDevice  supports low-level display changes.
|java.awt.GraphicsDevice.isFullScreenSupported()|Returns true if this GraphicsDevice  supports full-screen exclusive mode.
|java.awt.GraphicsDevice.setDisplayMode(DisplayMode)|Sets the display mode of this graphics device.
|java.awt.GraphicsDevice.setFullScreenWindow(Window)|Enter full-screen mode, or return to windowed mode.

*java.awt.GraphicsDevice_Description*

The GraphicsDevice class describes the graphics devices that might be available in a particular graphics environment. These include screen and printer devices. Note that there can 
be many screens and many printers in an instance of (|java.awt.GraphicsEnvironment|) . Each graphics device has one or more (|java.awt.GraphicsConfiguration|) objects associated 
with it. These objects specify the different configurations in which the GraphicsDevice can be used. 

In a multi-screen environment, the GraphicsConfiguration objects can be used to render components on multiple screens. The following code sample demonstrates how to create a 
JFrame object for each GraphicsConfiguration on each screen device in the GraphicsEnvironment: 

GraphicsEnvironment ge = GraphicsEnvironment. getLocalGraphicsEnvironment(); GraphicsDevice[] gs = ge.getScreenDevices(); for (int j = 0; j < gs.length; j++) { GraphicsDevice gd = 
gs[j]; GraphicsConfiguration[] gc = gd.getConfigurations(); for (int i=0; i < gc.length; i++) { JFrame f = new JFrame(gs[j].getDefaultConfiguration()); Canvas c = new 
Canvas(gc[i]); Rectangle gcBounds = gc[i].getBounds(); int xoffs = gcBounds.x; int yoffs = gcBounds.y; f.getContentPane().add(c); f.setLocation((i*50)+xoffs, (i*60)+yoffs); 
f.show(); } } 



*int_java.awt.GraphicsDevice.TYPE_IMAGE_BUFFER*

Device is an image buffer. This buffer can reside in device or system memory but it is not physically viewable by the user. 


*int_java.awt.GraphicsDevice.TYPE_PRINTER*

Device is a printer. 


*int_java.awt.GraphicsDevice.TYPE_RASTER_SCREEN*

Device is a raster screen. 



*java.awt.GraphicsDevice()*

protected GraphicsDevice()

This is an abstract class that cannot be instantiated directly. Instances must be obtained from a suitable factory or query method. 


*java.awt.GraphicsDevice.getAvailableAcceleratedMemory()*

public int getAvailableAcceleratedMemory()

This method returns the number of bytes available in accelerated memory on this device. Some images are created or cached in accelerated memory on a first-come, first-served 
basis. On some operating systems, this memory is a finite resource. Calling this method and scheduling the creation and flushing of images carefully may enable applications to 
make the most efficient use of that finite resource. 

Note that the number returned is a snapshot of how much memory is available; some images may still have problems being allocated into that memory. For example, depending on 
operating system, driver, memory configuration, and thread situations, the full extent of the size reported may not be available for a given image. There are further inquiry 
methods on the (|java.awt.ImageCapabilities|) object associated with a VolatileImage that can be used to determine whether a particular VolatileImage has been created in 
accelerated memory. 



    Returns: number of bytes available in accelerated memory. A negative return value indicates that accelerated memory is unlimited. 

*java.awt.GraphicsDevice.getBestConfiguration(GraphicsConfigTemplate)*

public |java.awt.GraphicsConfiguration| getBestConfiguration(java.awt.GraphicsConfigTemplate gct)

Returns the "best" configuration possible that passes the criteria defined in the (|java.awt.GraphicsConfigTemplate|) . 


    gct - the GraphicsConfigTemplate object used to obtain a valid GraphicsConfiguration 

    Returns: a GraphicsConfiguration that passes the criteria defined in the specified GraphicsConfigTemplate. 

*java.awt.GraphicsDevice.getConfigurations()*

public abstract |java.awt.GraphicsConfiguration|[] getConfigurations()

Returns all of the GraphicsConfiguration objects associated with this GraphicsDevice. 



    Returns: an array of GraphicsConfiguration objects that are associated with this GraphicsDevice. 

*java.awt.GraphicsDevice.getDefaultConfiguration()*

public abstract |java.awt.GraphicsConfiguration| getDefaultConfiguration()

Returns the default GraphicsConfiguration associated with this GraphicsDevice. 



    Returns: the default GraphicsConfiguration of this GraphicsDevice. 

*java.awt.GraphicsDevice.getDisplayMode()*

public |java.awt.DisplayMode| getDisplayMode()

Returns the current display mode of this GraphicsDevice. 



    Returns: the current display mode of this graphics device. 

*java.awt.GraphicsDevice.getDisplayModes()*

public |java.awt.DisplayMode|[] getDisplayModes()

Returns all display modes available for this GraphicsDevice. 



    Returns: all of the display modes available for this graphics device. 

*java.awt.GraphicsDevice.getFullScreenWindow()*

public |java.awt.Window| getFullScreenWindow()

Returns the Window object representing the full-screen window if the device is in full-screen mode. 



    Returns: the full-screen window, or null if the device is not in full-screen mode. 

*java.awt.GraphicsDevice.getIDstring()*

public abstract |java.lang.String| getIDstring()

Returns the identification string associated with this GraphicsDevice. 

A particular program might use more than one GraphicsDevice in a GraphicsEnvironment. This method returns a String identifying a particular GraphicsDevice in the local 
GraphicsEnvironment. Although there is no public method to set this String, a programmer can use the String for debugging purposes. Vendors of the JavaTM Runtime Environment can 
format the return value of the String. To determine how to interpret the value of the String, contact the vendor of your Java Runtime. To find out who the vendor is, from your 
program, call the getProperty(|java.lang.System|) method of the System class with "java.vendor". 



    Returns: a String that is the identification of this GraphicsDevice. 

*java.awt.GraphicsDevice.getType()*

public abstract int getType()

Returns the type of this GraphicsDevice. 



    Returns: the type of this GraphicsDevice, which can either be TYPE_RASTER_SCREEN, TYPE_PRINTER or TYPE_IMAGE_BUFFER. 

*java.awt.GraphicsDevice.isDisplayChangeSupported()*

public boolean isDisplayChangeSupported()

Returns true if this GraphicsDevice supports low-level display changes. 



    Returns: whether low-level display changes are supported for this graphics device. Note that this may or may not be dependent on full-screen exclusive mode. 

*java.awt.GraphicsDevice.isFullScreenSupported()*

public boolean isFullScreenSupported()

Returns true if this GraphicsDevice supports full-screen exclusive mode. 



    Returns: whether full-screen exclusive mode is available for this graphics device 

*java.awt.GraphicsDevice.setDisplayMode(DisplayMode)*

public void setDisplayMode(java.awt.DisplayMode dm)

Sets the display mode of this graphics device. This may only be allowed in full-screen, exclusive mode. 


    dm - the new display mode of this graphics device 

*java.awt.GraphicsDevice.setFullScreenWindow(Window)*

public void setFullScreenWindow(java.awt.Window w)

Enter full-screen mode, or return to windowed mode. 

If isFullScreenSupported returns true, full screen mode is considered to be exclusive, which implies: 

Windows cannot overlap the full-screen window. All other application windows will always appear beneath the full-screen window in the Z-order. Input method windows are disabled. 
It is advisable to call Component.enableInputMethods(false) to make a component a non-client of the input method framework. 

If isFullScreenSupported returns false, full-screen exclusive mode is simulated by resizing the window to the size of the screen and positioning it at (0,0). 

When entering full-screen exclusive mode, if the window to be used as the full-screen window is not visible, this method will make it visible. It will remain visible when 
returning to windowed mode. 

When returning to windowed mode from an exclusive full-screen window, any display changes made by calling setDisplayMode are automatically restored to their original state. 


    w - a window to use as the full-screen window; null if returning to windowed mode. Some platforms expect the fullscreen window to be a top-level component (i.e., a Frame); therefore 
       it is preferable to use a Frame here rather than a Window. 



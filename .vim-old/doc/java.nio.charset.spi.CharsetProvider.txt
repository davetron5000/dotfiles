*java.nio.charset.spi.CharsetProvider* *CharsetProvider* Charset service-provider class.

public abstract class CharsetProvider
  extends    |java.lang.Object|

|java.nio.charset.spi.CharsetProvider_Description|
|java.nio.charset.spi.CharsetProvider_Fields|
|java.nio.charset.spi.CharsetProvider_Constructors|
|java.nio.charset.spi.CharsetProvider_Methods|

====================================================================================================================================================================================

*java.nio.charset.spi.CharsetProvider_Constructors*
|java.nio.charset.spi.CharsetProvider()|Initializes a new charset provider.

*java.nio.charset.spi.CharsetProvider_Methods*
|java.nio.charset.spi.CharsetProvider.charsetForName(String)|Retrieves a charset for the given charset name.
|java.nio.charset.spi.CharsetProvider.charsets()|Creates an iterator that iterates over the charsets supported by this  provider.

*java.nio.charset.spi.CharsetProvider_Description*

Charset service-provider class. 

A charset provider is a concrete subclass of this class that has a zero-argument constructor and some number of associated charset implementation classes. Charset providers may be 
installed in an instance of the Java platform as extensions, that is, jar files placed into any of the usual extension directories. Providers may also be made available by adding 
them to the applet or application class path or by some other platform-specific means. Charset providers are looked up via the current thread's </code>context class 
loader<code>(|java.lang.Thread|) . 

A charset provider identifies itself with a provider-configuration file named java.nio.charset.spi.CharsetProvider in the resource directory META-INF/services. The file should 
contain a list of fully-qualified concrete charset-provider class names, one per line. A line is terminated by any one of a line feed ('\n'), a carriage return ('\r'), or a 
carriage return followed immediately by a line feed. Space and tab characters surrounding each name, as well as blank lines, are ignored. The comment character is '#' ('u0023'); 
on each line all characters following the first comment character are ignored. The file must be encoded in UTF-8. 

If a particular concrete charset provider class is named in more than one configuration file, or is named in the same configuration file more than once, then the duplicates will 
be ignored. The configuration file naming a particular provider need not be in the same jar file or other distribution unit as the provider itself. The provider must be accessible 
from the same class loader that was initially queried to locate the configuration file; this is not necessarily the class loader that loaded the file. 



*java.nio.charset.spi.CharsetProvider()*

protected CharsetProvider()

Initializes a new charset provider. 


*java.nio.charset.spi.CharsetProvider.charsetForName(String)*

public abstract |java.nio.charset.Charset| charsetForName(java.lang.String charsetName)

Retrieves a charset for the given charset name. 


    charsetName - The name of the requested charset; may be either a canonical name or an alias 

    Returns: A charset object for the named charset, or null if the named charset is not supported by this provider 

*java.nio.charset.spi.CharsetProvider.charsets()*

public abstract |java.util.Iterator|<Charset> charsets()

Creates an iterator that iterates over the charsets supported by this provider. This method is used in the implementation of the 
Charset.availableCharsets(|java.nio.charset.Charset|) method. 



    Returns: The new iterator 



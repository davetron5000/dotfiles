*javax.swing.UIDefaults* *UIDefaults* A table of defaults for Swing components.

public class UIDefaults
  extends    |java.util.Hashtable|

|javax.swing.UIDefaults_Description|
|javax.swing.UIDefaults_Fields|
|javax.swing.UIDefaults_Constructors|
|javax.swing.UIDefaults_Methods|

====================================================================================================================================================================================

*javax.swing.UIDefaults_Constructors*
|javax.swing.UIDefaults()|Create an empty defaults table.
|javax.swing.UIDefaults(Object[])|Create a defaults table initialized with the specified  key/value pairs.

*javax.swing.UIDefaults_Methods*
|javax.swing.UIDefaults.addPropertyChangeListener(PropertyChangeListener)|Adds a PropertyChangeListener to the listener list.
|javax.swing.UIDefaults.addResourceBundle(String)|Adds a resource bundle to the list of resource bundles that are  searched for localized values.
|javax.swing.UIDefaults.firePropertyChange(String,Object,Object)|Support for reporting bound property changes.
|javax.swing.UIDefaults.get(Object)|Returns the value for key.
|javax.swing.UIDefaults.get(Object,Locale)|Returns the value for key associated with the given locale.
|javax.swing.UIDefaults.getBoolean(Object)|If the value of key is boolean, return the  boolean value, otherwise return false.
|javax.swing.UIDefaults.getBoolean(Object,Locale)|If the value of key for the given Locale  is boolean, return the boolean value, otherwise return false.
|javax.swing.UIDefaults.getBorder(Object)|If the value of key is a Border return it,  otherwise return null.
|javax.swing.UIDefaults.getBorder(Object,Locale)|If the value of key for the given Locale  is a Border return it, otherwise return null.
|javax.swing.UIDefaults.getColor(Object)|If the value of key is a Color return it,  otherwise return null.
|javax.swing.UIDefaults.getColor(Object,Locale)|If the value of key for the given Locale  is a Color return it, otherwise return null.
|javax.swing.UIDefaults.getDefaultLocale()|Returns the default locale.
|javax.swing.UIDefaults.getDimension(Object)|If the value of key is a Dimension return it,  otherwise return null.
|javax.swing.UIDefaults.getDimension(Object,Locale)|If the value of key for the given Locale  is a Dimension return it, otherwise return null.
|javax.swing.UIDefaults.getFont(Object)|If the value of key is a Font return it,  otherwise return null.
|javax.swing.UIDefaults.getFont(Object,Locale)|If the value of key for the given Locale  is a Font return it, otherwise return null.
|javax.swing.UIDefaults.getIcon(Object)|If the value of key is an Icon return it,  otherwise return null.
|javax.swing.UIDefaults.getIcon(Object,Locale)|If the value of key for the given Locale  is an Icon return it, otherwise return null.
|javax.swing.UIDefaults.getInsets(Object)|If the value of key is an Insets return it,  otherwise return null.
|javax.swing.UIDefaults.getInsets(Object,Locale)|If the value of key for the given Locale  is an Insets return it, otherwise return null.
|javax.swing.UIDefaults.getInt(Object)|If the value of key is an Integer return its  integer value, otherwise return 0.
|javax.swing.UIDefaults.getInt(Object,Locale)|If the value of key for the given Locale  is an Integer return its integer value, otherwise return 0.
|javax.swing.UIDefaults.getPropertyChangeListeners()|Returns an array of all the PropertyChangeListeners added  to this UIDefaults with addPropertyChangeListener().
|javax.swing.UIDefaults.getString(Object)|If the value of key is a String return it,  otherwise return null.
|javax.swing.UIDefaults.getString(Object,Locale)|If the value of key for the given Locale  is a String return it, otherwise return null.
|javax.swing.UIDefaults.getUI(JComponent)|Creates an ComponentUI implementation for the  specified component.
|javax.swing.UIDefaults.getUIClass(String)|Returns the Lclass that renders this component.
|javax.swing.UIDefaults.getUIClass(String,ClassLoader)|The value of get(uidClassID) must be the  String name of a  class that implements the corresponding ComponentUI  class.
|javax.swing.UIDefaults.getUIError(String)|If getUI() fails for any reason,  it calls this method before returning null.
|javax.swing.UIDefaults.put(Object,Object)|Sets the value of key to value for all locales.
|javax.swing.UIDefaults.putDefaults(Object[])|Puts all of the key/value pairs in the database and  unconditionally generates one PropertyChangeEvent.
|javax.swing.UIDefaults.removePropertyChangeListener(PropertyChangeListener)|Removes a PropertyChangeListener from the listener list.
|javax.swing.UIDefaults.removeResourceBundle(String)|Removes a resource bundle from the list of resource bundles that are  searched for localized defaults.
|javax.swing.UIDefaults.setDefaultLocale(Locale)|Sets the default locale.

*javax.swing.UIDefaults_Description*

A table of defaults for Swing components. Applications can set/get default values via the UIManager. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.UIDefaults()*

public UIDefaults()

Create an empty defaults table. 


*javax.swing.UIDefaults(Object[])*

public UIDefaults(java.lang.Object[] keyValueList)

Create a defaults table initialized with the specified key/value pairs. For example: 

Object[] uiDefaults = { "Font", new Font("Dialog", Font.BOLD, 12), "Color", Color.red, "five", new Integer(5) } UIDefaults myDefaults = new UIDefaults(uiDefaults); 

    keyValueList - an array of objects containing the key/value pairs 

*javax.swing.UIDefaults.addPropertyChangeListener(PropertyChangeListener)*

public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener listener)

Adds a PropertyChangeListener to the listener list. The listener is registered for all properties. 

A PropertyChangeEvent will get fired whenever a default is changed. 


    listener - the PropertyChangeListener to be added 

*javax.swing.UIDefaults.addResourceBundle(String)*

public synchronized void addResourceBundle(java.lang.String bundleName)

Adds a resource bundle to the list of resource bundles that are searched for localized values. Resource bundles are searched in the reverse order they were added. In other words, 
the most recently added bundle is searched first. 


    bundleName - the base name of the resource bundle to be added 

*javax.swing.UIDefaults.firePropertyChange(String,Object,Object)*

protected void firePropertyChange(
  java.lang.String propertyName,
  java.lang.Object oldValue,
  java.lang.Object newValue)

Support for reporting bound property changes. If oldValue and newValue are not equal and the PropertyChangeEventx listener list isn't empty, then fire a PropertyChange event to 
each listener. 


    propertyName - the programmatic name of the property that was changed 
    oldValue - the old value of the property 
    newValue - the new value of the property 

*javax.swing.UIDefaults.get(Object)*

public |java.lang.Object| get(java.lang.Object key)

Returns the value for key. If the value is a UIDefaults.LazyValue then the real value is computed with LazyValue.createValue(), the table entry is replaced, and the real value is 
returned. If the value is an UIDefaults.ActiveValue the table entry is not replaced - the value is computed with ActiveValue.createValue() for each get() call. 

If the key is not found in the table then it is searched for in the list of resource bundles maintained by this object. The resource bundles are searched most recently added first 
using the locale returned by getDefaultLocale. LazyValues and ActiveValues are not supported in the resource bundles. 


    key - the desired key 

    Returns: the value for key 

*javax.swing.UIDefaults.get(Object,Locale)*

public |java.lang.Object| get(
  java.lang.Object key,
  java.util.Locale l)

Returns the value for key associated with the given locale. If the value is a UIDefaults.LazyValue then the real value is computed with LazyValue.createValue(), the table entry is 
replaced, and the real value is returned. If the value is an UIDefaults.ActiveValue the table entry is not replaced - the value is computed with ActiveValue.createValue() for each 
get() call. 

If the key is not found in the table then it is searched for in the list of resource bundles maintained by this object. The resource bundles are searched most recently added first 
using the given locale. LazyValues and ActiveValues are not supported in the resource bundles. 


    key - the desired key 
    l - the desired locale 

    Returns: the value for key 

*javax.swing.UIDefaults.getBoolean(Object)*

public boolean getBoolean(java.lang.Object key)

If the value of key is boolean, return the boolean value, otherwise return false. 


    key - an Object specifying the key for the desired boolean value 

    Returns: if the value of key is boolean, return the boolean value, otherwise return false. 

*javax.swing.UIDefaults.getBoolean(Object,Locale)*

public boolean getBoolean(
  java.lang.Object key,
  java.util.Locale l)

If the value of key for the given Locale is boolean, return the boolean value, otherwise return false. 


    key - an Object specifying the key for the desired boolean value 
    l - the desired locale 

    Returns: if the value for key and Locale is boolean, return the boolean value, otherwise return false. 

*javax.swing.UIDefaults.getBorder(Object)*

public |javax.swing.border.Border| getBorder(java.lang.Object key)

If the value of key is a Border return it, otherwise return null. 


    key - the desired key 

    Returns: if the value for key is a Border, return the Border object; otherwise return null 

*javax.swing.UIDefaults.getBorder(Object,Locale)*

public |javax.swing.border.Border| getBorder(
  java.lang.Object key,
  java.util.Locale l)

If the value of key for the given Locale is a Border return it, otherwise return null. 


    key - the desired key 
    l - the desired locale 

    Returns: if the value for key and Locale is a Border, return the Border object; otherwise return null 

*javax.swing.UIDefaults.getColor(Object)*

public |java.awt.Color| getColor(java.lang.Object key)

If the value of key is a Color return it, otherwise return null. 


    key - the desired key 

    Returns: if the value for key is a Color, return the Color object; otherwise return null 

*javax.swing.UIDefaults.getColor(Object,Locale)*

public |java.awt.Color| getColor(
  java.lang.Object key,
  java.util.Locale l)

If the value of key for the given Locale is a Color return it, otherwise return null. 


    key - the desired key 
    l - the desired locale 

    Returns: if the value for key and Locale is a Color, return the Color object; otherwise return null 

*javax.swing.UIDefaults.getDefaultLocale()*

public |java.util.Locale| getDefaultLocale()

Returns the default locale. The default locale is used in retrieving localized values via get methods that do not take a locale argument. As of release 1.4, Swing UI objects 
should retrieve localized values using the locale of their component rather than the default locale. The default locale exists to provide compatibility with pre 1.4 behaviour. 



    Returns: the default locale 

*javax.swing.UIDefaults.getDimension(Object)*

public |java.awt.Dimension| getDimension(java.lang.Object key)

If the value of key is a Dimension return it, otherwise return null. 


    key - the desired key 

    Returns: if the value for key is a Dimension, return the Dimension object; otherwise return null 

*javax.swing.UIDefaults.getDimension(Object,Locale)*

public |java.awt.Dimension| getDimension(
  java.lang.Object key,
  java.util.Locale l)

If the value of key for the given Locale is a Dimension return it, otherwise return null. 


    key - the desired key 
    l - the desired locale 

    Returns: if the value for key and Locale is a Dimension, return the Dimension object; otherwise return null 

*javax.swing.UIDefaults.getFont(Object)*

public |java.awt.Font| getFont(java.lang.Object key)

If the value of key is a Font return it, otherwise return null. 


    key - the desired key 

    Returns: if the value for key is a Font, return the Font object; otherwise return null 

*javax.swing.UIDefaults.getFont(Object,Locale)*

public |java.awt.Font| getFont(
  java.lang.Object key,
  java.util.Locale l)

If the value of key for the given Locale is a Font return it, otherwise return null. 


    key - the desired key 
    l - the desired locale 

    Returns: if the value for key and Locale is a Font, return the Font object; otherwise return null 

*javax.swing.UIDefaults.getIcon(Object)*

public |javax.swing.Icon| getIcon(java.lang.Object key)

If the value of key is an Icon return it, otherwise return null. 


    key - the desired key 

    Returns: if the value for key is an Icon, return the Icon object; otherwise return null 

*javax.swing.UIDefaults.getIcon(Object,Locale)*

public |javax.swing.Icon| getIcon(
  java.lang.Object key,
  java.util.Locale l)

If the value of key for the given Locale is an Icon return it, otherwise return null. 


    key - the desired key 
    l - the desired locale 

    Returns: if the value for key and Locale is an Icon, return the Icon object; otherwise return null 

*javax.swing.UIDefaults.getInsets(Object)*

public |java.awt.Insets| getInsets(java.lang.Object key)

If the value of key is an Insets return it, otherwise return null. 


    key - the desired key 

    Returns: if the value for key is an Insets, return the Insets object; otherwise return null 

*javax.swing.UIDefaults.getInsets(Object,Locale)*

public |java.awt.Insets| getInsets(
  java.lang.Object key,
  java.util.Locale l)

If the value of key for the given Locale is an Insets return it, otherwise return null. 


    key - the desired key 
    l - the desired locale 

    Returns: if the value for key and Locale is an Insets, return the Insets object; otherwise return null 

*javax.swing.UIDefaults.getInt(Object)*

public int getInt(java.lang.Object key)

If the value of key is an Integer return its integer value, otherwise return 0. 


    key - the desired key 

    Returns: if the value for key is an Integer, return its value, otherwise return 0 

*javax.swing.UIDefaults.getInt(Object,Locale)*

public int getInt(
  java.lang.Object key,
  java.util.Locale l)

If the value of key for the given Locale is an Integer return its integer value, otherwise return 0. 


    key - the desired key 
    l - the desired locale 

    Returns: if the value for key and Locale is an Integer, return its value, otherwise return 0 

*javax.swing.UIDefaults.getPropertyChangeListeners()*

public synchronized |java.beans.PropertyChangeListener|[] getPropertyChangeListeners()

Returns an array of all the PropertyChangeListeners added to this UIDefaults with addPropertyChangeListener(). 



    Returns: all of the PropertyChangeListeners added or an empty array if no listeners have been added 

*javax.swing.UIDefaults.getString(Object)*

public |java.lang.String| getString(java.lang.Object key)

If the value of key is a String return it, otherwise return null. 


    key - the desired key 

    Returns: if the value for key is a String, return the String object; otherwise return null 

*javax.swing.UIDefaults.getString(Object,Locale)*

public |java.lang.String| getString(
  java.lang.Object key,
  java.util.Locale l)

If the value of key for the given Locale is a String return it, otherwise return null. 


    key - the desired key 
    l - the desired Locale 

    Returns: if the value for key for the given Locale is a String, return the String object; otherwise return null 

*javax.swing.UIDefaults.getUI(JComponent)*

public |javax.swing.plaf.ComponentUI| getUI(javax.swing.JComponent target)

Creates an ComponentUI implementation for the specified component. In other words create the look and feel specific delegate object for target. This is done in two steps: 

Look up the name of the ComponentUI implementation class under the value returned by target.getUIClassID(). Use the implementation classes static createUI() method to construct a 
look and feel delegate. 


    target - the JComponent which needs a UI 

    Returns: the ComponentUI object 

*javax.swing.UIDefaults.getUIClass(String)*

public |java.lang.Class|<? extends javax.swing.plaf.ComponentUI> getUIClass(java.lang.String uiClassID)

Returns the Lclass that renders this component. 


    uiClassID - a string containing the class ID 

    Returns: the Class object returned by getUIClass(uiClassID, null) 

*javax.swing.UIDefaults.getUIClass(String,ClassLoader)*

public |java.lang.Class|<? extends javax.swing.plaf.ComponentUI> getUIClass(
  java.lang.String uiClassID,
  java.lang.ClassLoader uiClassLoader)

The value of get(uidClassID) must be the String name of a class that implements the corresponding ComponentUI class. If the class hasn't been loaded before, this method looks up 
the class with uiClassLoader.loadClass() if a non null class loader is provided, classForName() otherwise. 

If a mapping for uiClassID exists or if the specified class can't be found, return null. 

This method is used by getUI, it's usually not necessary to call it directly. 


    uiClassID - a string containing the class ID 
    uiClassLoader - the object which will load the class 

    Returns: the value of Class.forName(get(uidClassID)) 

*javax.swing.UIDefaults.getUIError(String)*

protected void getUIError(java.lang.String msg)

If getUI() fails for any reason, it calls this method before returning null. Subclasses may choose to do more or less here. 


    msg - message string to print 

*javax.swing.UIDefaults.put(Object,Object)*

public |java.lang.Object| put(
  java.lang.Object key,
  java.lang.Object value)

Sets the value of key to value for all locales. If key is a string and the new value isn't equal to the old one, fire a PropertyChangeEvent. If value is null, the key is removed 
from the table. 


    key - the unique Object who's value will be used to retrieve the data value associated with it 
    value - the new Object to store as data under that key 

    Returns: the previous Object value, or null 

*javax.swing.UIDefaults.putDefaults(Object[])*

public void putDefaults(java.lang.Object[] keyValueList)

Puts all of the key/value pairs in the database and unconditionally generates one PropertyChangeEvent. The events oldValue and newValue will be null and its propertyName will be 
"UIDefaults". The key/value pairs are added for all locales. 


    keyValueList - an array of key/value pairs 

*javax.swing.UIDefaults.removePropertyChangeListener(PropertyChangeListener)*

public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener listener)

Removes a PropertyChangeListener from the listener list. This removes a PropertyChangeListener that was registered for all properties. 


    listener - the PropertyChangeListener to be removed 

*javax.swing.UIDefaults.removeResourceBundle(String)*

public synchronized void removeResourceBundle(java.lang.String bundleName)

Removes a resource bundle from the list of resource bundles that are searched for localized defaults. 


    bundleName - the base name of the resource bundle to be removed 

*javax.swing.UIDefaults.setDefaultLocale(Locale)*

public void setDefaultLocale(java.util.Locale l)

Sets the default locale. The default locale is used in retrieving localized values via get methods that do not take a locale argument. As of release 1.4, Swing UI objects should 
retrieve localized values using the locale of their component rather than the default locale. The default locale exists to provide compatibility with pre 1.4 behaviour. 


    l - the new default locale 



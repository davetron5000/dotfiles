*javax.naming.event.EventDirContext* *EventDirContext* Contains methods for registering listeners to be notified
 of events fired when objects named in a directory context changes.

public interface interface EventDirContext

  implements |javax.naming.event.EventContext|
             |javax.naming.directory.DirContext|

|javax.naming.event.EventDirContext_Description|
|javax.naming.event.EventDirContext_Fields|
|javax.naming.event.EventDirContext_Constructors|
|javax.naming.event.EventDirContext_Methods|

====================================================================================================================================================================================

*javax.naming.event.EventDirContext_Methods*
|javax.naming.event.EventDirContext.addNamingListener(Name,String,Object[],SearchControls,NamingListener)|Adds a listener for receiving naming events fired  when objects identifie
|javax.naming.event.EventDirContext.addNamingListener(Name,String,SearchControls,NamingListener)|Adds a listener for receiving naming events fired  when objects identified by the 
|javax.naming.event.EventDirContext.addNamingListener(String,String,Object[],SearchControls,NamingListener)|Adds a listener for receiving naming events fired when  objects identif
|javax.naming.event.EventDirContext.addNamingListener(String,String,SearchControls,NamingListener)|Adds a listener for receiving naming events fired when  objects identified by th

*javax.naming.event.EventDirContext_Description*

Contains methods for registering listeners to be notified of events fired when objects named in a directory context changes. 

The methods in this interface support identification of objects by RFC 2254 search filters. 

Using the search filter, it is possible to register interest in objects that do not exist at the time of registration but later come into existence and satisfy the filter. 
However, there might be limitations in the extent to which this can be supported by the service provider and underlying protocol/service. If the caller submits a filter that 
cannot be supported in this way, addNamingListener() throws an InvalidSearchFilterException. 

See EventContext for a description of event source and target, and information about listener registration/deregistration that are also applicable to methods in this interface. 
See the package description for information on threading issues. 

A SearchControls or array object passed as a parameter to any method is owned by the caller. The service provider will not modify the object or keep a reference to it. 



*javax.naming.event.EventDirContext.addNamingListener(Name,String,Object[],SearchControls,NamingListener)*

public void addNamingListener(
  javax.naming.Name target,
  java.lang.String filter,
  java.lang.Object[] filterArgs,
  javax.naming.directory.SearchControls ctls,
  javax.naming.event.NamingListener l)
  throws |javax.naming.NamingException|
         
Adds a listener for receiving naming events fired when objects identified by the search filter filter and filter arguments at the object named by the target are modified. The 
scope, returningObj flag, and returningAttributes flag from the search controls ctls are used to control the selection of objects that the listener is interested in, and 
determines what information is returned in the eventual NamingEvent object. Note that the requested information to be returned might not be present in the NamingEvent object if 
they are unavailable or could not be obtained by the service provider or service. 


    target - The nonnull name of the object resolved relative to this context. 
    filter - The nonnull string filter (see RFC2254). 
    filterArgs - The possibly null array of arguments for the filter. 
    ctls - The possibly null search controls. If null, the default search controls are used. 
    l - The nonnull listener. 

*javax.naming.event.EventDirContext.addNamingListener(Name,String,SearchControls,NamingListener)*

public void addNamingListener(
  javax.naming.Name target,
  java.lang.String filter,
  javax.naming.directory.SearchControls ctls,
  javax.naming.event.NamingListener l)
  throws |javax.naming.NamingException|
         
Adds a listener for receiving naming events fired when objects identified by the search filter filter at the object named by target are modified. 

The scope, returningObj flag, and returningAttributes flag from the search controls ctls are used to control the selection of objects that the listener is interested in, and 
determines what information is returned in the eventual NamingEvent object. Note that the requested information to be returned might not be present in the NamingEvent object if 
they are unavailable or could not be obtained by the service provider or service. 


    target - The nonnull name of the object resolved relative to this context. 
    filter - The nonnull string filter (see RFC2254). 
    ctls - The possibly null search controls. If null, the default search controls are used. 
    l - The nonnull listener. 

*javax.naming.event.EventDirContext.addNamingListener(String,String,Object[],SearchControls,NamingListener)*

public void addNamingListener(
  java.lang.String target,
  java.lang.String filter,
  java.lang.Object[] filterArgs,
  javax.naming.directory.SearchControls ctls,
  javax.naming.event.NamingListener l)
  throws |javax.naming.NamingException|
         
Adds a listener for receiving naming events fired when objects identified by the search filter filter and filter arguments at the object named by the string target name are 
modified. See the overload that accepts a Name for details of how this method behaves. 


    target - The nonnull string name of the object resolved relative to this context. 
    filter - The nonnull string filter (see RFC2254). 
    filterArgs - The possibly null array of arguments for the filter. 
    ctls - The possibly null search controls. If null, the default search controls is used. 
    l - The nonnull listener. 

*javax.naming.event.EventDirContext.addNamingListener(String,String,SearchControls,NamingListener)*

public void addNamingListener(
  java.lang.String target,
  java.lang.String filter,
  javax.naming.directory.SearchControls ctls,
  javax.naming.event.NamingListener l)
  throws |javax.naming.NamingException|
         
Adds a listener for receiving naming events fired when objects identified by the search filter filter at the object named by the string target name are modified. See the overload 
that accepts a Name for details of how this method behaves. 


    target - The nonnull string name of the object resolved relative to this context. 
    filter - The nonnull string filter (see RFC2254). 
    ctls - The possibly null search controls. If null, the default search controls is used. 
    l - The nonnull listener. 



*java.awt.event.HierarchyEvent* *HierarchyEvent* An event which indicates a change to the Component
 hierarchy to which a Component belongs.

public class HierarchyEvent
  extends    |java.awt.AWTEvent|

|java.awt.event.HierarchyEvent_Description|
|java.awt.event.HierarchyEvent_Fields|
|java.awt.event.HierarchyEvent_Constructors|
|java.awt.event.HierarchyEvent_Methods|

====================================================================================================================================================================================

*java.awt.event.HierarchyEvent_Fields*
|int_java.awt.event.HierarchyEvent.ANCESTOR_MOVED|
|int_java.awt.event.HierarchyEvent.ANCESTOR_RESIZED|
|int_java.awt.event.HierarchyEvent.DISPLAYABILITY_CHANGED|
|int_java.awt.event.HierarchyEvent.HIERARCHY_CHANGED|
|int_java.awt.event.HierarchyEvent.HIERARCHY_FIRST|
|int_java.awt.event.HierarchyEvent.HIERARCHY_LAST|
|int_java.awt.event.HierarchyEvent.PARENT_CHANGED|
|int_java.awt.event.HierarchyEvent.SHOWING_CHANGED|

*java.awt.event.HierarchyEvent_Constructors*
|java.awt.event.HierarchyEvent(Component,int,Component,Container)|Constructs an HierarchyEvent object to identify a  change in the Component hierarchy.
|java.awt.event.HierarchyEvent(Component,int,Component,Container,long)|Constructs an HierarchyEvent object to identify  a change in the Component hierarchy.

*java.awt.event.HierarchyEvent_Methods*
|java.awt.event.HierarchyEvent.getChanged()|Returns the Component at the top of the hierarchy which was  changed.
|java.awt.event.HierarchyEvent.getChangedParent()|Returns the parent of the Component returned by   getChanged().
|java.awt.event.HierarchyEvent.getChangeFlags()|Returns a bitmask which indicates the type(s) of  HIERARCHY_CHANGED events represented in this event object.
|java.awt.event.HierarchyEvent.getComponent()|Returns the originator of the event.
|java.awt.event.HierarchyEvent.paramString()|Returns a parameter string identifying this event.

*java.awt.event.HierarchyEvent_Description*

An event which indicates a change to the Component hierarchy to which a Component belongs. 

Hierarchy Change Events (HierarchyListener) 

addition of an ancestor removal of an ancestor hierarchy made displayable hierarchy made undisplayable hierarchy shown on the screen (both visible and displayable) hierarchy 
hidden on the screen (either invisible or undisplayable) 

Ancestor Reshape Events (HierarchyBoundsListener) 

an ancestor was resized an ancestor was moved 



Hierarchy events are provided for notification purposes ONLY. The AWT will automatically handle changes to the hierarchy internally so that GUI layout and displayability works 
properly regardless of whether a program is receiving these events or not. 

This event is generated by a Container object (such as a Panel) when the Container is added, removed, moved, or resized, and passed down the hierarchy. It is also generated by a 
Component object when that object's addNotify, removeNotify, show, or hide method is called. ANCESTOR_MOVED and ANCESTOR_RESIZED events are dispatched to every 
HierarchyBoundsListener or HierarchyBoundsAdapter object which registered to receive such events using the Component's addHierarchyBoundsListener method. (HierarchyBoundsAdapter 
objects implement the HierarchyBoundsListener interface.) HIERARCHY_CHANGED events are dispatched to every HierarchyListener object which registered to receive such events using 
the Component's addHierarchyListener method. Each such listener object gets this HierarchyEvent when the event occurs. 



*int_java.awt.event.HierarchyEvent.ANCESTOR_MOVED*

The event id indicating an ancestor-Container was moved. 


*int_java.awt.event.HierarchyEvent.ANCESTOR_RESIZED*

The event id indicating an ancestor-Container was resized. 


*int_java.awt.event.HierarchyEvent.DISPLAYABILITY_CHANGED*

Indicates that the HIERARCHY_CHANGED event was generated due to a change in the displayability of the hierarchy. To discern the current displayability of the hierarchy, call 
Component.isDisplayable. Displayability changes occur in response to explicit or implicit calls to Component.addNotify and Component.removeNotify. 


*int_java.awt.event.HierarchyEvent.HIERARCHY_CHANGED*

The event id indicating that modification was made to the entire hierarchy tree. 


*int_java.awt.event.HierarchyEvent.HIERARCHY_FIRST*

Marks the first integer id for the range of hierarchy event ids. 


*int_java.awt.event.HierarchyEvent.HIERARCHY_LAST*

Marks the last integer id for the range of ancestor event ids. 


*int_java.awt.event.HierarchyEvent.PARENT_CHANGED*

Indicates that the HIERARCHY_CHANGED event was generated by a reparenting operation. 


*int_java.awt.event.HierarchyEvent.SHOWING_CHANGED*

Indicates that the HIERARCHY_CHANGED event was generated due to a change in the showing state of the hierarchy. To discern the current showing state of the hierarchy, call 
Component.isShowing. Showing state changes occur when either the displayability or visibility of the hierarchy occurs. Visibility changes occur in response to explicit or implicit 
calls to Component.show and Component.hide. 



*java.awt.event.HierarchyEvent(Component,int,Component,Container)*

public HierarchyEvent(
  java.awt.Component source,
  int id,
  java.awt.Component changed,
  java.awt.Container changedParent)

Constructs an HierarchyEvent object to identify a change in the Component hierarchy. Note that passing in an invalid id results in unspecified behavior. This method throws an 
IllegalArgumentException if source is null. 

    source - the Component object that originated the event 
    id - an integer indicating the type of event 
    changed - the Component at the top of the hierarchy which was changed 
    changedParent - the parent of changed; this may be the parent before or after the change, depending on the type of change 

*java.awt.event.HierarchyEvent(Component,int,Component,Container,long)*

public HierarchyEvent(
  java.awt.Component source,
  int id,
  java.awt.Component changed,
  java.awt.Container changedParent,
  long changeFlags)

Constructs an HierarchyEvent object to identify a change in the Component hierarchy. Note that passing in an invalid id results in unspecified behavior. This method throws an 
IllegalArgumentException if source is null. 

    source - the Component object that originated the event 
    id - an integer indicating the type of event 
    changed - the Component at the top of the hierarchy which was changed 
    changedParent - the parent of changed; this may be the parent before or after the change, depending on the type of change 
    changeFlags - a bitmask which indicates the type(s) of HIERARCHY_CHANGED events represented in this event object 

*java.awt.event.HierarchyEvent.getChanged()*

public |java.awt.Component| getChanged()

Returns the Component at the top of the hierarchy which was changed. 



    Returns: the changed Component 

*java.awt.event.HierarchyEvent.getChangedParent()*

public |java.awt.Container| getChangedParent()

Returns the parent of the Component returned by getChanged(). For a HIERARCHY_CHANGED event where the change was of type PARENT_CHANGED via a call to Container.add, the parent 
returned is the parent after the add operation. For a HIERARCHY_CHANGED event where the change was of type PARENT_CHANGED via a call to Container.remove, the parent returned is 
the parent before the remove operation. For all other events and types, the parent returned is the parent during the operation. 



    Returns: the parent of the changed Component 

*java.awt.event.HierarchyEvent.getChangeFlags()*

public long getChangeFlags()

Returns a bitmask which indicates the type(s) of HIERARCHY_CHANGED events represented in this event object. The bits have been bitwise-ored together. 



    Returns: the bitmask, or 0 if this is not an HIERARCHY_CHANGED event 

*java.awt.event.HierarchyEvent.getComponent()*

public |java.awt.Component| getComponent()

Returns the originator of the event. 



    Returns: the Component object that originated the event, or null if the object is not a Component. 

*java.awt.event.HierarchyEvent.paramString()*

public |java.lang.String| paramString()

Returns a parameter string identifying this event. This method is useful for event-logging and for debugging. 



    Returns: a string identifying the event and its attributes 



*javax.swing.SwingUtilities* *SwingUtilities* A collection of utility methods for Swing.

public class SwingUtilities
  extends    |java.lang.Object|
  implements |javax.swing.SwingConstants|

|javax.swing.SwingUtilities_Description|
|javax.swing.SwingUtilities_Fields|
|javax.swing.SwingUtilities_Constructors|
|javax.swing.SwingUtilities_Methods|

====================================================================================================================================================================================

*javax.swing.SwingUtilities_Methods*
|javax.swing.SwingUtilities.calculateInnerArea(JComponent,Rectangle)|Stores the position and size of  the inner painting area of the specified component  in r and returns r.
|javax.swing.SwingUtilities.computeDifference(Rectangle,Rectangle)|Convenience returning an array of rect representing the regions within  rectA that do not overlap with rectB.
|javax.swing.SwingUtilities.computeIntersection(int,int,int,int,Rectangle)|Convenience to calculate the intersection of two rectangles  without allocating a new rectangle.
|javax.swing.SwingUtilities.computeStringWidth(FontMetrics,String)|Compute the width of the string using a font with the specified  "metrics" (sizes).
|javax.swing.SwingUtilities.computeUnion(int,int,int,int,Rectangle)|Convenience method that calculates the union of two rectangles  without allocating a new rectangle.
|javax.swing.SwingUtilities.convertMouseEvent(Component,MouseEvent,Component)|Returns a MouseEvent similar to sourceEvent except that its x  and y members have been converted to d
|javax.swing.SwingUtilities.convertPoint(Component,int,int,Component)|Convert the point (x,y) in source coordinate system to  destination coordinate system.
|javax.swing.SwingUtilities.convertPoint(Component,Point,Component)|Convert a aPoint in source coordinate system to  destination coordinate system.
|javax.swing.SwingUtilities.convertPointFromScreen(Point,Component)|Convert a point from a screen coordinates to a component's   coordinate system
|javax.swing.SwingUtilities.convertPointToScreen(Point,Component)|Convert a point from a component's coordinate system to  screen coordinates.
|javax.swing.SwingUtilities.convertRectangle(Component,Rectangle,Component)|Convert the rectangle aRectangle in source coordinate system to  destination coordinate system.
|javax.swing.SwingUtilities.findFocusOwner(Component)|Return the child Component of the specified  Component that is the focus owner, if any.
|javax.swing.SwingUtilities.getAccessibleAt(Component,Point)|Returns the Accessible child contained at the  local coordinate Point, if one exists.
|javax.swing.SwingUtilities.getAccessibleChild(Component,int)|Return the nth Accessible child of the object.
|javax.swing.SwingUtilities.getAccessibleChildrenCount(Component)|Returns the number of accessible children in the object.
|javax.swing.SwingUtilities.getAccessibleIndexInParent(Component)|Get the index of this object in its accessible parent.
|javax.swing.SwingUtilities.getAccessibleStateSet(Component)|Get the state of this object.
|javax.swing.SwingUtilities.getAncestorNamed(String,Component)|Convenience method for searching above comp in the  component hierarchy and returns the first object of name it  fin
|javax.swing.SwingUtilities.getAncestorOfClass(Class<?>,Component)|Convenience method for searching above comp in the  component hierarchy and returns the first object of class c 
|javax.swing.SwingUtilities.getDeepestComponentAt(Component,int,int)|Returns the deepest visible descendent Component of parent   that contains the location x, y.
|javax.swing.SwingUtilities.getLocalBounds(Component)|Return the rectangle (0,0,bounds.width,bounds.height) for the component aComponent
|javax.swing.SwingUtilities.getRoot(Component)|Returns the root component for the current component tree.
|javax.swing.SwingUtilities.getRootPane(Component)|If c is a JRootPane descendant return its JRootPane ancestor.
|javax.swing.SwingUtilities.getUIActionMap(JComponent)|Returns the ActionMap provided by the UI   in component component.
|javax.swing.SwingUtilities.getUIInputMap(JComponent,int)|Returns the InputMap provided by the UI for condition  condition in component component.
|javax.swing.SwingUtilities.getWindowAncestor(Component)|Returns the first Window  ancestor of c, or  null if c is not contained inside a Window.
|javax.swing.SwingUtilities.invokeAndWait(Runnable)|Causes doRun.run() to be executed synchronously on the  AWT event dispatching thread.
|javax.swing.SwingUtilities.invokeLater(Runnable)|Causes doRun.run() to be executed asynchronously on the  AWT event dispatching thread.
|javax.swing.SwingUtilities.isDescendingFrom(Component,Component)|Return true if a component a descends from a component b
|javax.swing.SwingUtilities.isEventDispatchThread()|Returns true if the current thread is an AWT event dispatching thread.
|javax.swing.SwingUtilities.isLeftMouseButton(MouseEvent)|Returns true if the mouse event specifies the left mouse button.
|javax.swing.SwingUtilities.isMiddleMouseButton(MouseEvent)|Returns true if the mouse event specifies the middle mouse button.
|javax.swing.SwingUtilities.isRectangleContainingRectangle(Rectangle,Rectangle)|Return true if a contains b
|javax.swing.SwingUtilities.isRightMouseButton(MouseEvent)|Returns true if the mouse event specifies the right mouse button.
|javax.swing.SwingUtilities.layoutCompoundLabel(FontMetrics,String,Icon,int,int,int,int,Rectangle,Rectangle,Rectangle,int)|Compute and return the location of the icons origin, the
|javax.swing.SwingUtilities.layoutCompoundLabel(JComponent,FontMetrics,String,Icon,int,int,int,int,Rectangle,Rectangle,Rectangle,int)|Compute and return the location of the icons 
|javax.swing.SwingUtilities.notifyAction(Action,KeyStroke,KeyEvent,Object,int)|Invokes actionPerformed on action if  action is enabled (and non null).
|javax.swing.SwingUtilities.paintComponent(Graphics,Component,Container,int,int,int,int)|Paints a component c on an arbitrary graphics   g in the  specified rectangle, specifying 
|javax.swing.SwingUtilities.paintComponent(Graphics,Component,Container,Rectangle)|Paints a component c on an arbitrary graphics   g in the specified rectangle, specifying a Recta
|javax.swing.SwingUtilities.processKeyBindings(KeyEvent)|Process the key bindings for the Component associated with  event.
|javax.swing.SwingUtilities.replaceUIActionMap(JComponent,ActionMap)|Convenience method to change the UI ActionMap for component  to uiActionMap.
|javax.swing.SwingUtilities.replaceUIInputMap(JComponent,int,InputMap)|Convenience method to change the UI InputMap for component  to uiInputMap.
|javax.swing.SwingUtilities.updateComponentTreeUI(Component)|A simple minded look and feel change: ask each node in the tree  to updateUI() -- that is, to initialize its UI proper
|javax.swing.SwingUtilities.windowForComponent(Component)|Returns the first Window  ancestor of c, or  null if c is not contained inside a Window.

*javax.swing.SwingUtilities_Description*

A collection of utility methods for Swing. 



*javax.swing.SwingUtilities.calculateInnerArea(JComponent,Rectangle)*

public static |java.awt.Rectangle| calculateInnerArea(
  javax.swing.JComponent c,
  java.awt.Rectangle r)

Stores the position and size of the inner painting area of the specified component in r and returns r. The position and size specify the bounds of the component, adjusted so as 
not to include the border area (the insets). This method is useful for classes that implement painting code. 


    c - the JComponent in question; if null, this method returns null 
    r - the Rectangle instance to be modified; may be null 

    Returns: null if the Component is null; otherwise, returns the passed-in rectangle (if non-null) or a new rectangle specifying position and size information 

*javax.swing.SwingUtilities.computeDifference(Rectangle,Rectangle)*

public static |java.awt.Rectangle|[] computeDifference(
  java.awt.Rectangle rectA,
  java.awt.Rectangle rectB)

Convenience returning an array of rect representing the regions within rectA that do not overlap with rectB. If the two Rects do not overlap, returns an empty array 



*javax.swing.SwingUtilities.computeIntersection(int,int,int,int,Rectangle)*

public static |java.awt.Rectangle| computeIntersection(
  int x,
  int y,
  int width,
  int height,
  java.awt.Rectangle dest)

Convenience to calculate the intersection of two rectangles without allocating a new rectangle. If the two rectangles don't intersect, then the returned rectangle begins at (0,0) 
and has zero width and height. 


    x - the X coordinate of the first rectangle's top-left point 
    y - the Y coordinate of the first rectangle's top-left point 
    width - the width of the first rectangle 
    height - the height of the first rectangle 
    dest - the second rectangle 

    Returns: dest, modified to specify the intersection 

*javax.swing.SwingUtilities.computeStringWidth(FontMetrics,String)*

public static int computeStringWidth(
  java.awt.FontMetrics fm,
  java.lang.String str)

Compute the width of the string using a font with the specified "metrics" (sizes). 


    fm - a FontMetrics object to compute with 
    str - the String to compute 

    Returns: an int containing the string width 

*javax.swing.SwingUtilities.computeUnion(int,int,int,int,Rectangle)*

public static |java.awt.Rectangle| computeUnion(
  int x,
  int y,
  int width,
  int height,
  java.awt.Rectangle dest)

Convenience method that calculates the union of two rectangles without allocating a new rectangle. 


    x - the x-coordinate of the first rectangle 
    y - the y-coordinate of the first rectangle 
    width - the width of the first rectangle 
    height - the height of the first rectangle 
    dest - the coordinates of the second rectangle; the union of the two rectangles is returned in this rectangle 

    Returns: the dest Rectangle 

*javax.swing.SwingUtilities.convertMouseEvent(Component,MouseEvent,Component)*

public static |java.awt.event.MouseEvent| convertMouseEvent(
  java.awt.Component source,
  java.awt.event.MouseEvent sourceEvent,
  java.awt.Component destination)

Returns a MouseEvent similar to sourceEvent except that its x and y members have been converted to destination's coordinate system. If source is null, sourceEvent x and y members 
are assumed to be into destination's root component coordinate system. If destination is null, the returned MouseEvent will be in source's coordinate system. sourceEvent will not 
be changed. A new event is returned. the source field of the returned event will be set to destination if destination is non null use the translateMouseEvent() method to translate 
a mouse event from one component to another without changing the source. 



*javax.swing.SwingUtilities.convertPoint(Component,int,int,Component)*

public static |java.awt.Point| convertPoint(
  java.awt.Component source,
  int x,
  int y,
  java.awt.Component destination)

Convert the point (x,y) in source coordinate system to destination coordinate system. If source>is null,(x,y) is assumed to be in destination's root component coordinate system. 
If destinationis null, (x,y) will be converted to source's root component coordinate system. If both source and destination are null, return (x,y) without any conversion. 



*javax.swing.SwingUtilities.convertPoint(Component,Point,Component)*

public static |java.awt.Point| convertPoint(
  java.awt.Component source,
  java.awt.Point aPoint,
  java.awt.Component destination)

Convert a aPoint in source coordinate system to destination coordinate system. If source>is null,aPoint is assumed to be in destination's root component coordinate system. If 
destinationis null, aPoint will be converted to source's root component coordinate system. If both source and destination are null, return aPoint without any conversion. 



*javax.swing.SwingUtilities.convertPointFromScreen(Point,Component)*

public static void convertPointFromScreen(
  java.awt.Point p,
  java.awt.Component c)

Convert a point from a screen coordinates to a component's coordinate system 


    p - a Point object (converted to the new coordinate system) 
    c - a Component object 

*javax.swing.SwingUtilities.convertPointToScreen(Point,Component)*

public static void convertPointToScreen(
  java.awt.Point p,
  java.awt.Component c)

Convert a point from a component's coordinate system to screen coordinates. 


    p - a Point object (converted to the new coordinate system) 
    c - a Component object 

*javax.swing.SwingUtilities.convertRectangle(Component,Rectangle,Component)*

public static |java.awt.Rectangle| convertRectangle(
  java.awt.Component source,
  java.awt.Rectangle aRectangle,
  java.awt.Component destination)

Convert the rectangle aRectangle in source coordinate system to destination coordinate system. If source>is null,aRectangle is assumed to be in destination's root component 
coordinate system. If destinationis null, aRectangle will be converted to source's root component coordinate system. If both source and destination are null, return aRectangle 
without any conversion. 



*javax.swing.SwingUtilities.findFocusOwner(Component)*

public static |java.awt.Component| findFocusOwner(java.awt.Component c)

Return the child Component of the specified Component that is the focus owner, if any. 

    Deprecated: As of 1.4, replaced by
   <code>KeyboardFocusManager.getFocusOwner()</code>.

    c - the root of the Component hierarchy to search for the focus owner 

    Returns: the focus owner, or null if there is no focus owner, or if the focus owner is not comp, or a descendant of comp 

*javax.swing.SwingUtilities.getAccessibleAt(Component,Point)*

public static |javax.accessibility.Accessible| getAccessibleAt(
  java.awt.Component c,
  java.awt.Point p)

Returns the Accessible child contained at the local coordinate Point, if one exists. Otherwise returns null. 



    Returns: the Accessible at the specified location, if it exists; otherwise null 

*javax.swing.SwingUtilities.getAccessibleChild(Component,int)*

public static |javax.accessibility.Accessible| getAccessibleChild(
  java.awt.Component c,
  int i)

Return the nth Accessible child of the object. 

Note: as of the Java 2 platform v1.3, it is recommended that developers call Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead of using this method. 


    i - zero-based index of child 

    Returns: the nth Accessible child of the object 

*javax.swing.SwingUtilities.getAccessibleChildrenCount(Component)*

public static int getAccessibleChildrenCount(java.awt.Component c)

Returns the number of accessible children in the object. If all of the children of this object implement Accessible, than this method should return the number of children of this 
object. 

Note: as of the Java 2 platform v1.3, it is recommended that developers call Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead of using this method. 



    Returns: the number of accessible children in the object. 

*javax.swing.SwingUtilities.getAccessibleIndexInParent(Component)*

public static int getAccessibleIndexInParent(java.awt.Component c)

Get the index of this object in its accessible parent. 

Note: as of the Java 2 platform v1.3, it is recommended that developers call Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead of using this method. 



    Returns: -1 of this object does not have an accessible parent. Otherwise, the index of the child in its accessible parent. 

*javax.swing.SwingUtilities.getAccessibleStateSet(Component)*

public static |javax.accessibility.AccessibleStateSet| getAccessibleStateSet(java.awt.Component c)

Get the state of this object. 

Note: as of the Java 2 platform v1.3, it is recommended that developers call Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead of using this method. 



    Returns: an instance of AccessibleStateSet containing the current state set of the object 

*javax.swing.SwingUtilities.getAncestorNamed(String,Component)*

public static |java.awt.Container| getAncestorNamed(
  java.lang.String name,
  java.awt.Component comp)

Convenience method for searching above comp in the component hierarchy and returns the first object of name it finds. Can return null, if name cannot be found. 



*javax.swing.SwingUtilities.getAncestorOfClass(Class<?>,Component)*

public static |java.awt.Container| getAncestorOfClass(
  java.lang.Class<?> c,
  java.awt.Component comp)

Convenience method for searching above comp in the component hierarchy and returns the first object of class c it finds. Can return null, if a class c cannot be found. 



*javax.swing.SwingUtilities.getDeepestComponentAt(Component,int,int)*

public static |java.awt.Component| getDeepestComponentAt(
  java.awt.Component parent,
  int x,
  int y)

Returns the deepest visible descendent Component of parent that contains the location x, y. If parent does not contain the specified location, then null is returned. If parent is 
not a container, or none of parent's visible descendents contain the specified location, parent is returned. 


    parent - the root component to begin the search 
    x - the x target location 
    y - the y target location 

*javax.swing.SwingUtilities.getLocalBounds(Component)*

public static |java.awt.Rectangle| getLocalBounds(java.awt.Component aComponent)

Return the rectangle (0,0,bounds.width,bounds.height) for the component aComponent 



*javax.swing.SwingUtilities.getRoot(Component)*

public static |java.awt.Component| getRoot(java.awt.Component c)

Returns the root component for the current component tree. 



    Returns: the first ancestor of c that's a Window or the last Applet ancestor 

*javax.swing.SwingUtilities.getRootPane(Component)*

public static |javax.swing.JRootPane| getRootPane(java.awt.Component c)

If c is a JRootPane descendant return its JRootPane ancestor. If c is a RootPaneContainer then return its JRootPane. 



    Returns: the JRootPane for Component c or null. 

*javax.swing.SwingUtilities.getUIActionMap(JComponent)*

public static |javax.swing.ActionMap| getUIActionMap(javax.swing.JComponent component)

Returns the ActionMap provided by the UI in component component. This will return null if the UI has not installed an ActionMap. 



*javax.swing.SwingUtilities.getUIInputMap(JComponent,int)*

public static |javax.swing.InputMap| getUIInputMap(
  javax.swing.JComponent component,
  int condition)

Returns the InputMap provided by the UI for condition condition in component component. This will return null if the UI has not installed a InputMap of the specified type. 



*javax.swing.SwingUtilities.getWindowAncestor(Component)*

public static |java.awt.Window| getWindowAncestor(java.awt.Component c)

Returns the first Window ancestor of c, or null if c is not contained inside a Window. 


    c - Component to get Window ancestor of. 

    Returns: the first Window ancestor of c, or null if c is not contained inside a Window. 

*javax.swing.SwingUtilities.invokeAndWait(Runnable)*

public static void invokeAndWait(java.lang.Runnable doRun)
  throws |java.lang.InterruptedException|
         |java.lang.reflect.InvocationTargetException|
         
Causes doRun.run() to be executed synchronously on the AWT event dispatching thread. This call blocks until all pending AWT events have been processed and (then) doRun.run() 
returns. This method should be used when an application thread needs to update the GUI. It should'nt be called from the EventDispatchThread. Here's an example that creates a new 
application thread that uses invokeAndWait to print a string from the event dispatching thread and then, when that's finished, print a string from the application thread. 

final Runnable doHelloWorld = new Runnable() { public void run() { System.out.println("Hello World on " + Thread.currentThread()); } }; 

Thread appThread = new Thread() { public void run() { try { SwingUtilities.invokeAndWait(doHelloWorld); } catch (Exception e) { e.printStackTrace(); } System.out.println("Finished 
on " + Thread.currentThread()); } }; appThread.start(); 

Note that if the Runnable.run method throws an uncaught exception (on the event dispatching thread) it's caught and rethrown, as an InvocationTargetException, on the caller's 
thread. 

Additional documentation and examples for this method can be found in How to Use Threads, in The Java Tutorial. 

As of 1.3 this method is just a cover for java.awt.EventQueue.invokeAndWait(). 



*javax.swing.SwingUtilities.invokeLater(Runnable)*

public static void invokeLater(java.lang.Runnable doRun)

Causes doRun.run() to be executed asynchronously on the AWT event dispatching thread. This will happen after all pending AWT events have been processed. This method should be used 
when an application thread needs to update the GUI. In the following example the invokeLater call queues the Runnable object doHelloWorld on the event dispatching thread and then 
prints a message. 

Runnable doHelloWorld = new Runnable() { public void run() { System.out.println("Hello World on " + Thread.currentThread()); } }; 

SwingUtilities.invokeLater(doHelloWorld); System.out.println("This might well be displayed before the other message."); 

If invokeLater is called from the event dispatching thread -- for example, from a JButton's ActionListener -- the doRun.run() will still be deferred until all pending events have 
been processed. Note that if the doRun.run() throws an uncaught exception the event dispatching thread will unwind (not the current thread). 

Additional documentation and examples for this method can be found in How to Use Threads, in The Java Tutorial. 

As of 1.3 this method is just a cover for java.awt.EventQueue.invokeLater(). 



*javax.swing.SwingUtilities.isDescendingFrom(Component,Component)*

public static boolean isDescendingFrom(
  java.awt.Component a,
  java.awt.Component b)

Return true if a component a descends from a component b 



*javax.swing.SwingUtilities.isEventDispatchThread()*

public static boolean isEventDispatchThread()

Returns true if the current thread is an AWT event dispatching thread. 

As of 1.3 this method is just a cover for java.awt.EventQueue.isDispatchThread(). 



    Returns: true if the current thread is an AWT event dispatching thread 

*javax.swing.SwingUtilities.isLeftMouseButton(MouseEvent)*

public static boolean isLeftMouseButton(java.awt.event.MouseEvent anEvent)

Returns true if the mouse event specifies the left mouse button. 


    anEvent - a MouseEvent object 

    Returns: true if the left mouse button was active 

*javax.swing.SwingUtilities.isMiddleMouseButton(MouseEvent)*

public static boolean isMiddleMouseButton(java.awt.event.MouseEvent anEvent)

Returns true if the mouse event specifies the middle mouse button. 


    anEvent - a MouseEvent object 

    Returns: true if the middle mouse button was active 

*javax.swing.SwingUtilities.isRectangleContainingRectangle(Rectangle,Rectangle)*

public static final boolean isRectangleContainingRectangle(
  java.awt.Rectangle a,
  java.awt.Rectangle b)

Return true if a contains b 



*javax.swing.SwingUtilities.isRightMouseButton(MouseEvent)*

public static boolean isRightMouseButton(java.awt.event.MouseEvent anEvent)

Returns true if the mouse event specifies the right mouse button. 


    anEvent - a MouseEvent object 

    Returns: true if the right mouse button was active 

*javax.swing.SwingUtilities.layoutCompoundLabel(FontMetrics,String,Icon,int,int,int,int,Rectangle,Rectangle,Rectangle,int)*

public static |java.lang.String| layoutCompoundLabel(
  java.awt.FontMetrics fm,
  java.lang.String text,
  javax.swing.Icon icon,
  int verticalAlignment,
  int horizontalAlignment,
  int verticalTextPosition,
  int horizontalTextPosition,
  java.awt.Rectangle viewR,
  java.awt.Rectangle iconR,
  java.awt.Rectangle textR,
  int textIconGap)

Compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string. Locations are 
computed relative to the viewR rectangle. This layoutCompoundLabel() does not know how to handle LEADING/TRAILING values in horizontalTextPosition (they will default to RIGHT) and 
in horizontalAlignment (they will default to CENTER). Use the other version of layoutCompoundLabel() instead. 



*javax.swing.SwingUtilities.layoutCompoundLabel(JComponent,FontMetrics,String,Icon,int,int,int,int,Rectangle,Rectangle,Rectangle,int)*

public static |java.lang.String| layoutCompoundLabel(
  javax.swing.JComponent c,
  java.awt.FontMetrics fm,
  java.lang.String text,
  javax.swing.Icon icon,
  int verticalAlignment,
  int horizontalAlignment,
  int verticalTextPosition,
  int horizontalTextPosition,
  java.awt.Rectangle viewR,
  java.awt.Rectangle iconR,
  java.awt.Rectangle textR,
  int textIconGap)

Compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string. Locations are 
computed relative to the viewR rectangle. The JComponents orientation (LEADING/TRAILING) will also be taken into account and translated into LEFT/RIGHT values accordingly. 



*javax.swing.SwingUtilities.notifyAction(Action,KeyStroke,KeyEvent,Object,int)*

public static boolean notifyAction(
  javax.swing.Action action,
  javax.swing.KeyStroke ks,
  java.awt.event.KeyEvent event,
  java.lang.Object sender,
  int modifiers)

Invokes actionPerformed on action if action is enabled (and non null). The command for the ActionEvent is determined by: 

If the action was registered via registerKeyboardAction, then the command string passed in (null will be used if null was passed in). Action value with name 
Action.ACTION_COMMAND_KEY, unless null. String value of the KeyEvent, unless getKeyChar returns KeyEvent.CHAR_UNDEFINED.. 

This will return true if action is non-null and actionPerformed is invoked on it. 



*javax.swing.SwingUtilities.paintComponent(Graphics,Component,Container,int,int,int,int)*

public static void paintComponent(
  java.awt.Graphics g,
  java.awt.Component c,
  java.awt.Container p,
  int x,
  int y,
  int w,
  int h)

Paints a component c on an arbitrary graphics g in the specified rectangle, specifying the rectangle's upper left corner and size. The component is reparented to a private 
container (whose parent becomes p) which prevents c.validate() and c.repaint() calls from propagating up the tree. The intermediate container has no other effect. 

The component should either descend from JComponent or be another kind of lightweight component. A lightweight component is one whose "lightweight" property (returned by the 
Component isLightweight method) is true. If the Component is not lightweight, bad things map happen: crashes, exceptions, painting problems... 


    g - the Graphics object to draw on 
    c - the Component to draw 
    p - the intermediate Container 
    x - an int specifying the left side of the area draw in, in pixels, measured from the left edge of the graphics context 
    y - an int specifying the top of the area to draw in, in pixels measured down from the top edge of the graphics context 
    w - an int specifying the width of the area draw in, in pixels 
    h - an int specifying the height of the area draw in, in pixels 

*javax.swing.SwingUtilities.paintComponent(Graphics,Component,Container,Rectangle)*

public static void paintComponent(
  java.awt.Graphics g,
  java.awt.Component c,
  java.awt.Container p,
  java.awt.Rectangle r)

Paints a component c on an arbitrary graphics g in the specified rectangle, specifying a Rectangle object. The component is reparented to a private container (whose parent becomes 
p) which prevents c.validate() and c.repaint() calls from propagating up the tree. The intermediate container has no other effect. 

The component should either descend from JComponent or be another kind of lightweight component. A lightweight component is one whose "lightweight" property (returned by the 
Component isLightweight method) is true. If the Component is not lightweight, bad things map happen: crashes, exceptions, painting problems... 


    g - the Graphics object to draw on 
    c - the Component to draw 
    p - the intermediate Container 
    r - the Rectangle to draw in 

*javax.swing.SwingUtilities.processKeyBindings(KeyEvent)*

public static boolean processKeyBindings(java.awt.event.KeyEvent event)

Process the key bindings for the Component associated with event. This method is only useful if event.getComponent() does not descend from JComponent, or your are not invoking 
super.processKeyEvent from within your JComponent subclass. JComponent automatically processes bindings from within its processKeyEvent method, hence you rarely need to directly 
invoke this method. 


    event - KeyEvent used to identify which bindings to process, as well as which Component has focus. 

    Returns: true if a binding has found and processed 

*javax.swing.SwingUtilities.replaceUIActionMap(JComponent,ActionMap)*

public static void replaceUIActionMap(
  javax.swing.JComponent component,
  javax.swing.ActionMap uiActionMap)

Convenience method to change the UI ActionMap for component to uiActionMap. If uiActionMap is null, this removes any previously installed UI ActionMap. 



*javax.swing.SwingUtilities.replaceUIInputMap(JComponent,int,InputMap)*

public static void replaceUIInputMap(
  javax.swing.JComponent component,
  int type,
  javax.swing.InputMap uiInputMap)

Convenience method to change the UI InputMap for component to uiInputMap. If uiInputMap is null, this removes any previously installed UI InputMap. 



*javax.swing.SwingUtilities.updateComponentTreeUI(Component)*

public static void updateComponentTreeUI(java.awt.Component c)

A simple minded look and feel change: ask each node in the tree to updateUI() -- that is, to initialize its UI property with the current look and feel. 



*javax.swing.SwingUtilities.windowForComponent(Component)*

public static |java.awt.Window| windowForComponent(java.awt.Component c)

Returns the first Window ancestor of c, or null if c is not contained inside a Window. 

Note: This method provides the same functionality as getWindowAncestor. 


    c - Component to get Window ancestor of. 

    Returns: the first Window ancestor of c, or null if c is not contained inside a Window. 



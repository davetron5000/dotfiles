*org.omg.CORBA.IntHolder* *IntHolder* The Holder for Int.

public final class IntHolder
  extends    |java.lang.Object|
  implements |org.omg.CORBA.portable.Streamable|

|org.omg.CORBA.IntHolder_Description|
|org.omg.CORBA.IntHolder_Fields|
|org.omg.CORBA.IntHolder_Constructors|
|org.omg.CORBA.IntHolder_Methods|

================================================================================

*org.omg.CORBA.IntHolder_Fields*
|int_org.omg.CORBA.IntHolder.value|

*org.omg.CORBA.IntHolder_Constructors*
|org.omg.CORBA.IntHolder()|Constructs a new IntHolder object with its  value fi
|org.omg.CORBA.IntHolder(int)|Constructs a new IntHolder object with its  value

*org.omg.CORBA.IntHolder_Methods*
|org.omg.CORBA.IntHolder._read(InputStream)|Reads unmarshalled data from input 
|org.omg.CORBA.IntHolder._type()|Retrieves the TypeCode object that corresponds
|org.omg.CORBA.IntHolder._write(OutputStream)|Marshals the value in this IntHol

*org.omg.CORBA.IntHolder_Description*

The Holder for Int. For more information on Holder files, see "Generated Files: 
Holder Files". A Holder class for an int that is used to store "out" and 
"inout" parameters in IDL methods. If an IDL method signature has an IDL long 
as an "out" or "inout" parameter, the programmer must pass an instance of 
IntHolder as the corresponding parameter in the method invocation; for "inout" 
parameters, the programmer must also fill the "in" value to be sent to the 
server. Before the method invocation returns, the ORB will fill in the value 
corresponding to the "out" value returned from the server. 

If myIntHolder is an instance of IntHolder, the value stored in its value field 
can be accessed with myIntHolder.value. 


*int_org.omg.CORBA.IntHolder.value*

The Holder for Int. For more information on Holder files, see "Generated Files: 
Holder Files". A Holder class for an int that is used to store "out" and 
"inout" parameters in IDL methods. If an IDL method signature has an IDL long 
as an "out" or "inout" parameter, the programmer must pass an instance of 
IntHolder as the corresponding parameter in the method invocation; for "inout" 
parameters, the programmer must also fill the "in" value to be sent to the 
server. Before the method invocation returns, the ORB will fill in the value 
corresponding to the "out" value returned from the server. 

If myIntHolder is an instance of IntHolder, the value stored in its value field 
can be accessed with myIntHolder.value. 



*org.omg.CORBA.IntHolder()*

public IntHolder()

Constructs a new IntHolder object with its value field initialized to 0. 


*org.omg.CORBA.IntHolder(int)*

public IntHolder(int initial)

Constructs a new IntHolder object with its value field initialized to the given 
int. 

    initial - the int with which to initialize the value field of the newly-created IntHolder 
       object 

*org.omg.CORBA.IntHolder._read(InputStream)*

public void _read(org.omg.CORBA.portable.InputStream input)

Reads unmarshalled data from input and assigns it to the value field in this 
IntHolder object. 

    input - the InputStream object containing CDR formatted data from the wire 

*org.omg.CORBA.IntHolder._type()*

public |org.omg.CORBA.TypeCode| _type()

Retrieves the TypeCode object that corresponds to the value held in this 
IntHolder object's value field. 


    Returns: the type code for the value held in this IntHolder object 
*org.omg.CORBA.IntHolder._write(OutputStream)*

public void _write(org.omg.CORBA.portable.OutputStream output)

Marshals the value in this IntHolder object's value field to the output stream 
output. 

    output - the OutputStream object that will contain the CDR formatted data 



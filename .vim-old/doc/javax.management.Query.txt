*javax.management.Query* *Query* Constructs query object constraints.

public class Query
  extends    |java.lang.Object|

|javax.management.Query_Description|
|javax.management.Query_Fields|
|javax.management.Query_Constructors|
|javax.management.Query_Methods|

================================================================================

*javax.management.Query_Fields*
|int_javax.management.Query.DIV|
|int_javax.management.Query.EQ|
|int_javax.management.Query.GE|
|int_javax.management.Query.GT|
|int_javax.management.Query.LE|
|int_javax.management.Query.LT|
|int_javax.management.Query.MINUS|
|int_javax.management.Query.PLUS|
|int_javax.management.Query.TIMES|

*javax.management.Query_Constructors*
|javax.management.Query()|Basic constructor.

*javax.management.Query_Methods*
|javax.management.Query.and(QueryExp,QueryExp)|Returns a query expression that 
|javax.management.Query.anySubString(AttributeValueExp,StringValueExp)|Returns 
|javax.management.Query.attr(String)|Returns a new attribute expression.
|javax.management.Query.attr(String,String)|Returns a new qualified attribute e
|javax.management.Query.between(ValueExp,ValueExp,ValueExp)|Returns a query exp
|javax.management.Query.classattr()|Returns a new class attribute expression wh
|javax.management.Query.div(ValueExp,ValueExp)|Returns a binary expression repr
|javax.management.Query.eq(ValueExp,ValueExp)|Returns a query expression that r
|javax.management.Query.finalSubString(AttributeValueExp,StringValueExp)|Return
|javax.management.Query.geq(ValueExp,ValueExp)|Returns a query expression that 
|javax.management.Query.gt(ValueExp,ValueExp)|Returns a query expression that r
|javax.management.Query.in(ValueExp,ValueExp[])|Returns an expression constrain
|javax.management.Query.initialSubString(AttributeValueExp,StringValueExp)|Retu
|javax.management.Query.leq(ValueExp,ValueExp)|Returns a query expression that 
|javax.management.Query.lt(ValueExp,ValueExp)|Returns a query expression that r
|javax.management.Query.match(AttributeValueExp,StringValueExp)|Returns a query
|javax.management.Query.minus(ValueExp,ValueExp)|Returns a binary expression re
|javax.management.Query.not(QueryExp)|Returns a constraint that is the negation
|javax.management.Query.or(QueryExp,QueryExp)|Returns a query expression that i
|javax.management.Query.plus(ValueExp,ValueExp)|Returns a binary expression rep
|javax.management.Query.times(ValueExp,ValueExp)|Returns a binary expression re
|javax.management.Query.value(boolean)|Returns a boolean value expression that 
|javax.management.Query.value(double)|Returns a numeric value expression that c
|javax.management.Query.value(float)|Returns a numeric value expression that ca
|javax.management.Query.value(int)|Returns a numeric value expression that can 
|javax.management.Query.value(long)|Returns a numeric value expression that can
|javax.management.Query.value(Number)|Returns a numeric value expression that c
|javax.management.Query.value(String)|Returns a new string expression.

*javax.management.Query_Description*

Constructs query object constraints. The static methods provided return query 
expressions that may be used in listing and enumerating MBeans. Individual 
constraint construction methods allow only appropriate types as arguments. 
Composition of calls can construct arbitrary nestings of constraints, as the 
following example illustrates: 



QueryExp exp = Query.and(Query.gt(Query.attr("age"),Query.value(5)), 
Query.match(Query.attr("name"), Query.value("Smith"))); 


*int_javax.management.Query.DIV*

Constructs query object constraints. The static methods provided return query 
expressions that may be used in listing and enumerating MBeans. Individual 
constraint construction methods allow only appropriate types as arguments. 
Composition of calls can construct arbitrary nestings of constraints, as the 
following example illustrates: 



QueryExp exp = Query.and(Query.gt(Query.attr("age"),Query.value(5)), 
Query.match(Query.attr("name"), Query.value("Smith"))); 


*int_javax.management.Query.EQ*

Constructs query object constraints. The static methods provided return query 
expressions that may be used in listing and enumerating MBeans. Individual 
constraint construction methods allow only appropriate types as arguments. 
Composition of calls can construct arbitrary nestings of constraints, as the 
following example illustrates: 



QueryExp exp = Query.and(Query.gt(Query.attr("age"),Query.value(5)), 
Query.match(Query.attr("name"), Query.value("Smith"))); 


*int_javax.management.Query.GE*

Constructs query object constraints. The static methods provided return query 
expressions that may be used in listing and enumerating MBeans. Individual 
constraint construction methods allow only appropriate types as arguments. 
Composition of calls can construct arbitrary nestings of constraints, as the 
following example illustrates: 



QueryExp exp = Query.and(Query.gt(Query.attr("age"),Query.value(5)), 
Query.match(Query.attr("name"), Query.value("Smith"))); 


*int_javax.management.Query.GT*

Constructs query object constraints. The static methods provided return query 
expressions that may be used in listing and enumerating MBeans. Individual 
constraint construction methods allow only appropriate types as arguments. 
Composition of calls can construct arbitrary nestings of constraints, as the 
following example illustrates: 



QueryExp exp = Query.and(Query.gt(Query.attr("age"),Query.value(5)), 
Query.match(Query.attr("name"), Query.value("Smith"))); 


*int_javax.management.Query.LE*

Constructs query object constraints. The static methods provided return query 
expressions that may be used in listing and enumerating MBeans. Individual 
constraint construction methods allow only appropriate types as arguments. 
Composition of calls can construct arbitrary nestings of constraints, as the 
following example illustrates: 



QueryExp exp = Query.and(Query.gt(Query.attr("age"),Query.value(5)), 
Query.match(Query.attr("name"), Query.value("Smith"))); 


*int_javax.management.Query.LT*

Constructs query object constraints. The static methods provided return query 
expressions that may be used in listing and enumerating MBeans. Individual 
constraint construction methods allow only appropriate types as arguments. 
Composition of calls can construct arbitrary nestings of constraints, as the 
following example illustrates: 



QueryExp exp = Query.and(Query.gt(Query.attr("age"),Query.value(5)), 
Query.match(Query.attr("name"), Query.value("Smith"))); 


*int_javax.management.Query.MINUS*

Constructs query object constraints. The static methods provided return query 
expressions that may be used in listing and enumerating MBeans. Individual 
constraint construction methods allow only appropriate types as arguments. 
Composition of calls can construct arbitrary nestings of constraints, as the 
following example illustrates: 



QueryExp exp = Query.and(Query.gt(Query.attr("age"),Query.value(5)), 
Query.match(Query.attr("name"), Query.value("Smith"))); 


*int_javax.management.Query.PLUS*

Constructs query object constraints. The static methods provided return query 
expressions that may be used in listing and enumerating MBeans. Individual 
constraint construction methods allow only appropriate types as arguments. 
Composition of calls can construct arbitrary nestings of constraints, as the 
following example illustrates: 



QueryExp exp = Query.and(Query.gt(Query.attr("age"),Query.value(5)), 
Query.match(Query.attr("name"), Query.value("Smith"))); 


*int_javax.management.Query.TIMES*

Constructs query object constraints. The static methods provided return query 
expressions that may be used in listing and enumerating MBeans. Individual 
constraint construction methods allow only appropriate types as arguments. 
Composition of calls can construct arbitrary nestings of constraints, as the 
following example illustrates: 



QueryExp exp = Query.and(Query.gt(Query.attr("age"),Query.value(5)), 
Query.match(Query.attr("name"), Query.value("Smith"))); 



*javax.management.Query()*

public Query()

Basic constructor. 


*javax.management.Query.and(QueryExp,QueryExp)*

public static |javax.management.QueryExp| and(
  javax.management.QueryExp q1,
  javax.management.QueryExp q2)

Returns a query expression that is the conjunction of two other query 
expressions. 

    q1 - A query expression. 
    q2 - Another query expression. 

    Returns: The conjunction of the two arguments. 
*javax.management.Query.anySubString(AttributeValueExp,StringValueExp)*

public static |javax.management.QueryExp| anySubString(
  javax.management.AttributeValueExp a,
  javax.management.StringValueExp s)

Returns a query expression that represents a matching constraint on a string 
argument. The value must contain the given string value. 

    a - An attribute expression. 
    s - A string value expression representing the substring. 

    Returns: The constraint that a matches s. 
*javax.management.Query.attr(String)*

public static |javax.management.AttributeValueExp| attr(java.lang.String name)

Returns a new attribute expression. 

Evaluating this expression for a given objectName includes performing 
MBeanServer.getAttribute(objectName, name)(|javax.management.MBeanServer|) . 

    name - The name of the attribute. 

    Returns: An attribute expression for the attribute named name. 
*javax.management.Query.attr(String,String)*

public static |javax.management.AttributeValueExp| attr(
  java.lang.String className,
  java.lang.String name)

Returns a new qualified attribute expression. 

Evaluating this expression for a given objectName includes performing 
MBeanServer.getObjectInstance(objectName)(|javax.management.MBeanServer|) and 
MBeanServer.getAttribute(objectName, name)(|javax.management.MBeanServer|) . 

    className - The name of the class possessing the attribute. 
    name - The name of the attribute. 

    Returns: An attribute expression for the attribute named name. 
*javax.management.Query.between(ValueExp,ValueExp,ValueExp)*

public static |javax.management.QueryExp| between(
  javax.management.ValueExp v1,
  javax.management.ValueExp v2,
  javax.management.ValueExp v3)

Returns a query expression that represents the constraint that one value is 
between two other values. 

    v1 - A value expression that is "between" v2 and v3. 
    v2 - Value expression that represents a boundary of the constraint. 
    v3 - Value expression that represents a boundary of the constraint. 

    Returns: The constraint that v1 lies between v2 and v3. 
*javax.management.Query.classattr()*

public static |javax.management.AttributeValueExp| classattr()

Returns a new class attribute expression which can be used in any Query call 
that expects a ValueExp. 

Evaluating this expression for a given objectName includes performing 
MBeanServer.getObjectInstance(objectName)(|javax.management.MBeanServer|) . 


    Returns: A class attribute expression. 
*javax.management.Query.div(ValueExp,ValueExp)*

public static |javax.management.ValueExp| div(
  javax.management.ValueExp value1,
  javax.management.ValueExp value2)

Returns a binary expression representing the quotient of two numeric values. 

    value1 - The first '/' operand. 
    value2 - The second '/' operand. 

    Returns: A ValueExp representing the quotient of two arguments. 
*javax.management.Query.eq(ValueExp,ValueExp)*

public static |javax.management.QueryExp| eq(
  javax.management.ValueExp v1,
  javax.management.ValueExp v2)

Returns a query expression that represents an equality constraint on two 
values. 

    v1 - A value expression. 
    v2 - Another value expression. 

    Returns: A "equal to" constraint on the arguments. 
*javax.management.Query.finalSubString(AttributeValueExp,StringValueExp)*

public static |javax.management.QueryExp| finalSubString(
  javax.management.AttributeValueExp a,
  javax.management.StringValueExp s)

Returns a query expression that represents a matching constraint on a string 
argument. The value must contain the given string value. 

    a - An attribute expression. 
    s - A string value expression representing the end of the string value. 

    Returns: The constraint that a matches s. 
*javax.management.Query.geq(ValueExp,ValueExp)*

public static |javax.management.QueryExp| geq(
  javax.management.ValueExp v1,
  javax.management.ValueExp v2)

Returns a query expression that represents a "greater than or equal to" 
constraint on two values. 

    v1 - A value expression. 
    v2 - Another value expression. 

    Returns: A "greater than or equal to" constraint on the arguments. 
*javax.management.Query.gt(ValueExp,ValueExp)*

public static |javax.management.QueryExp| gt(
  javax.management.ValueExp v1,
  javax.management.ValueExp v2)

Returns a query expression that represents a "greater than" constraint on two 
values. 

    v1 - A value expression. 
    v2 - Another value expression. 

    Returns: A "greater than" constraint on the arguments. 
*javax.management.Query.in(ValueExp,ValueExp[])*

public static |javax.management.QueryExp| in(
  javax.management.ValueExp val,
  javax.management.ValueExp[] valueList)

Returns an expression constraining a value to be one of an explicit list. 

    val - A value to be constrained. 
    valueList - An array of ValueExps. 

    Returns: A QueryExp that represents the constraint. 
*javax.management.Query.initialSubString(AttributeValueExp,StringValueExp)*

public static |javax.management.QueryExp| initialSubString(
  javax.management.AttributeValueExp a,
  javax.management.StringValueExp s)

Returns a query expression that represents a matching constraint on a string 
argument. The value must start with the given string value. 

    a - An attribute expression. 
    s - A string value expression representing the beginning of the string value. 

    Returns: The constraint that a matches s. 
*javax.management.Query.leq(ValueExp,ValueExp)*

public static |javax.management.QueryExp| leq(
  javax.management.ValueExp v1,
  javax.management.ValueExp v2)

Returns a query expression that represents a "less than or equal to" constraint 
on two values. 

    v1 - A value expression. 
    v2 - Another value expression. 

    Returns: A "less than or equal to" constraint on the arguments. 
*javax.management.Query.lt(ValueExp,ValueExp)*

public static |javax.management.QueryExp| lt(
  javax.management.ValueExp v1,
  javax.management.ValueExp v2)

Returns a query expression that represents a "less than" constraint on two 
values. 

    v1 - A value expression. 
    v2 - Another value expression. 

    Returns: A "less than" constraint on the arguments. 
*javax.management.Query.match(AttributeValueExp,StringValueExp)*

public static |javax.management.QueryExp| match(
  javax.management.AttributeValueExp a,
  javax.management.StringValueExp s)

Returns a query expression that represents a matching constraint on a string 
argument. The matching syntax is consistent with file globbing: Supports "?", 
"*", "[", each of which may be escaped with "\"; Character classes may use "!" 
for negation and "-" for range. (* for any character sequence, ? for a single 
arbitrary character, [...] for a character sequence). For example: a*b?c would 
match a string starting with the character a, followed by any number of 
characters, followed by a b, any single character, and a c. 

    a - An attribute expression 
    s - A string value expression representing a matching constraint 

    Returns: A query expression that represents the matching constraint on the string 
             argument. 
*javax.management.Query.minus(ValueExp,ValueExp)*

public static |javax.management.ValueExp| minus(
  javax.management.ValueExp value1,
  javax.management.ValueExp value2)

Returns a binary expression representing the difference between two numeric 
values. 

    value1 - The first '-' operand. 
    value2 - The second '-' operand. 

    Returns: A ValueExp representing the difference between two arguments. 
*javax.management.Query.not(QueryExp)*

public static |javax.management.QueryExp| not(javax.management.QueryExp queryExp)

Returns a constraint that is the negation of its argument. 

    queryExp - The constraint to negate. 

    Returns: A negated constraint. 
*javax.management.Query.or(QueryExp,QueryExp)*

public static |javax.management.QueryExp| or(
  javax.management.QueryExp q1,
  javax.management.QueryExp q2)

Returns a query expression that is the disjunction of two other query 
expressions. 

    q1 - A query expression. 
    q2 - Another query expression. 

    Returns: The disjunction of the two arguments. 
*javax.management.Query.plus(ValueExp,ValueExp)*

public static |javax.management.ValueExp| plus(
  javax.management.ValueExp value1,
  javax.management.ValueExp value2)

Returns a binary expression representing the sum of two numeric values, or the 
concatenation of two string values. 

    value1 - The first '+' operand. 
    value2 - The second '+' operand. 

    Returns: A ValueExp representing the sum or concatenation of the two arguments. 
*javax.management.Query.times(ValueExp,ValueExp)*

public static |javax.management.ValueExp| times(
  javax.management.ValueExp value1,
  javax.management.ValueExp value2)

Returns a binary expression representing the product of two numeric values. 

    value1 - The first '*' operand. 
    value2 - The second '*' operand. 

    Returns: A ValueExp representing the product. 
*javax.management.Query.value(boolean)*

public static |javax.management.ValueExp| value(boolean val)

Returns a boolean value expression that can be used in any Query call that 
expects a ValueExp. 

    val - A boolean value. 

    Returns: A ValueExp object containing the argument. 
*javax.management.Query.value(double)*

public static |javax.management.ValueExp| value(double val)

Returns a numeric value expression that can be used in any Query call that 
expects a ValueExp. 

    val - A double value. 

    Returns: A ValueExp object containing the argument. 
*javax.management.Query.value(float)*

public static |javax.management.ValueExp| value(float val)

Returns a numeric value expression that can be used in any Query call that 
expects a ValueExp. 

    val - A float value. 

    Returns: A ValueExp object containing the argument. 
*javax.management.Query.value(int)*

public static |javax.management.ValueExp| value(int val)

Returns a numeric value expression that can be used in any Query call that 
expects a ValueExp. 

    val - An int value. 

    Returns: A ValueExp object containing the argument. 
*javax.management.Query.value(long)*

public static |javax.management.ValueExp| value(long val)

Returns a numeric value expression that can be used in any Query call that 
expects a ValueExp. 

    val - A long value. 

    Returns: A ValueExp object containing the argument. 
*javax.management.Query.value(Number)*

public static |javax.management.ValueExp| value(java.lang.Number val)

Returns a numeric value expression that can be used in any Query call that 
expects a ValueExp. 

    val - An instance of Number. 

    Returns: A ValueExp object containing the argument. 
*javax.management.Query.value(String)*

public static |javax.management.StringValueExp| value(java.lang.String val)

Returns a new string expression. 

    val - The string value. 

    Returns: A ValueExp object containing the string argument. 


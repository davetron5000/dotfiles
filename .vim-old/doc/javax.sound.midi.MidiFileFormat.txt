*javax.sound.midi.MidiFileFormat* *MidiFileFormat* A MidiFileFormat object encap

public class MidiFileFormat
  extends    |java.lang.Object|

|javax.sound.midi.MidiFileFormat_Description|
|javax.sound.midi.MidiFileFormat_Fields|
|javax.sound.midi.MidiFileFormat_Constructors|
|javax.sound.midi.MidiFileFormat_Methods|

================================================================================

*javax.sound.midi.MidiFileFormat_Fields*
|int_javax.sound.midi.MidiFileFormat.byteLength|
|float_javax.sound.midi.MidiFileFormat.divisionType|
|long_javax.sound.midi.MidiFileFormat.microsecondLength|
|int_javax.sound.midi.MidiFileFormat.resolution|
|int_javax.sound.midi.MidiFileFormat.type|
|int_javax.sound.midi.MidiFileFormat.UNKNOWN_LENGTH|

*javax.sound.midi.MidiFileFormat_Constructors*
|javax.sound.midi.MidiFileFormat(int,float,int,int,long)|Constructs a MidiFileF
|javax.sound.midi.MidiFileFormat(int,float,int,int,long,Map)|Construct a MidiFi

*javax.sound.midi.MidiFileFormat_Methods*
|javax.sound.midi.MidiFileFormat.getByteLength()|Obtains the length of the MIDI
|javax.sound.midi.MidiFileFormat.getDivisionType()|Obtains the timing division 
|javax.sound.midi.MidiFileFormat.getMicrosecondLength()|Obtains the length of t
|javax.sound.midi.MidiFileFormat.getProperty(String)|Obtain the property value 
|javax.sound.midi.MidiFileFormat.getResolution()|Obtains the timing resolution 
|javax.sound.midi.MidiFileFormat.getType()|Obtains the MIDI file type.
|javax.sound.midi.MidiFileFormat.properties()|Obtain an unmodifiable map of pro

*javax.sound.midi.MidiFileFormat_Description*

A MidiFileFormat object encapsulates a MIDI file's type, as well as its length 
and timing information. 

A MidiFileFormat object can include a set of properties. A property is a pair 
of key and value: the key is of type String, the associated property value is 
an arbitrary object. Properties specify additional informational meta data 
(like a author, or copyright). Properties are optional information, and file 
reader and file writer implementations are not required to provide or recognize 
properties. 

The following table lists some common properties that should be used in 
implementations: 



Property key Value type Description 

author String(|java.lang.String|) name of the author of this file 

title String(|java.lang.String|) title of this file 

copyright String(|java.lang.String|) copyright message 

date Date(|java.util.Date|) date of the recording or release 

comment String(|java.lang.String|) an arbitrary text 




*int_javax.sound.midi.MidiFileFormat.byteLength*

A MidiFileFormat object encapsulates a MIDI file's type, as well as its length 
and timing information. 

A MidiFileFormat object can include a set of properties. A property is a pair 
of key and value: the key is of type String, the associated property value is 
an arbitrary object. Properties specify additional informational meta data 
(like a author, or copyright). Properties are optional information, and file 
reader and file writer implementations are not required to provide or recognize 
properties. 

The following table lists some common properties that should be used in 
implementations: 



Property key Value type Description 

author String(|java.lang.String|) name of the author of this file 

title String(|java.lang.String|) title of this file 

copyright String(|java.lang.String|) copyright message 

date Date(|java.util.Date|) date of the recording or release 

comment String(|java.lang.String|) an arbitrary text 




*float_javax.sound.midi.MidiFileFormat.divisionType*

A MidiFileFormat object encapsulates a MIDI file's type, as well as its length 
and timing information. 

A MidiFileFormat object can include a set of properties. A property is a pair 
of key and value: the key is of type String, the associated property value is 
an arbitrary object. Properties specify additional informational meta data 
(like a author, or copyright). Properties are optional information, and file 
reader and file writer implementations are not required to provide or recognize 
properties. 

The following table lists some common properties that should be used in 
implementations: 



Property key Value type Description 

author String(|java.lang.String|) name of the author of this file 

title String(|java.lang.String|) title of this file 

copyright String(|java.lang.String|) copyright message 

date Date(|java.util.Date|) date of the recording or release 

comment String(|java.lang.String|) an arbitrary text 




*long_javax.sound.midi.MidiFileFormat.microsecondLength*

A MidiFileFormat object encapsulates a MIDI file's type, as well as its length 
and timing information. 

A MidiFileFormat object can include a set of properties. A property is a pair 
of key and value: the key is of type String, the associated property value is 
an arbitrary object. Properties specify additional informational meta data 
(like a author, or copyright). Properties are optional information, and file 
reader and file writer implementations are not required to provide or recognize 
properties. 

The following table lists some common properties that should be used in 
implementations: 



Property key Value type Description 

author String(|java.lang.String|) name of the author of this file 

title String(|java.lang.String|) title of this file 

copyright String(|java.lang.String|) copyright message 

date Date(|java.util.Date|) date of the recording or release 

comment String(|java.lang.String|) an arbitrary text 




*int_javax.sound.midi.MidiFileFormat.resolution*

A MidiFileFormat object encapsulates a MIDI file's type, as well as its length 
and timing information. 

A MidiFileFormat object can include a set of properties. A property is a pair 
of key and value: the key is of type String, the associated property value is 
an arbitrary object. Properties specify additional informational meta data 
(like a author, or copyright). Properties are optional information, and file 
reader and file writer implementations are not required to provide or recognize 
properties. 

The following table lists some common properties that should be used in 
implementations: 



Property key Value type Description 

author String(|java.lang.String|) name of the author of this file 

title String(|java.lang.String|) title of this file 

copyright String(|java.lang.String|) copyright message 

date Date(|java.util.Date|) date of the recording or release 

comment String(|java.lang.String|) an arbitrary text 




*int_javax.sound.midi.MidiFileFormat.type*

A MidiFileFormat object encapsulates a MIDI file's type, as well as its length 
and timing information. 

A MidiFileFormat object can include a set of properties. A property is a pair 
of key and value: the key is of type String, the associated property value is 
an arbitrary object. Properties specify additional informational meta data 
(like a author, or copyright). Properties are optional information, and file 
reader and file writer implementations are not required to provide or recognize 
properties. 

The following table lists some common properties that should be used in 
implementations: 



Property key Value type Description 

author String(|java.lang.String|) name of the author of this file 

title String(|java.lang.String|) title of this file 

copyright String(|java.lang.String|) copyright message 

date Date(|java.util.Date|) date of the recording or release 

comment String(|java.lang.String|) an arbitrary text 




*int_javax.sound.midi.MidiFileFormat.UNKNOWN_LENGTH*

A MidiFileFormat object encapsulates a MIDI file's type, as well as its length 
and timing information. 

A MidiFileFormat object can include a set of properties. A property is a pair 
of key and value: the key is of type String, the associated property value is 
an arbitrary object. Properties specify additional informational meta data 
(like a author, or copyright). Properties are optional information, and file 
reader and file writer implementations are not required to provide or recognize 
properties. 

The following table lists some common properties that should be used in 
implementations: 



Property key Value type Description 

author String(|java.lang.String|) name of the author of this file 

title String(|java.lang.String|) title of this file 

copyright String(|java.lang.String|) copyright message 

date Date(|java.util.Date|) date of the recording or release 

comment String(|java.lang.String|) an arbitrary text 





*javax.sound.midi.MidiFileFormat(int,float,int,int,long)*

public MidiFileFormat(
  int type,
  float divisionType,
  int resolution,
  int bytes,
  long microseconds)

Constructs a MidiFileFormat. 

    type - the MIDI file type (0, 1, or 2) 
    divisionType - the timing division type (PPQ or one of the SMPTE types) 
    resolution - the timing resolution 
    bytes - the length of the MIDI file in bytes, or UNKNOWN_LENGTH if not known 
    microseconds - the duration of the file in microseconds, or UNKNOWN_LENGTH if not known 

*javax.sound.midi.MidiFileFormat(int,float,int,int,long,Map)*

public MidiFileFormat(
  int type,
  float divisionType,
  int resolution,
  int bytes,
  long microseconds,
  java.util.Map properties)

Construct a MidiFileFormat with a set of properties. 

    type - the MIDI file type (0, 1, or 2) 
    divisionType - the timing division type (PPQ or one of the SMPTE types) 
    resolution - the timing resolution 
    bytes - the length of the MIDI file in bytes, or UNKNOWN_LENGTH if not known 
    microseconds - the duration of the file in microseconds, or UNKNOWN_LENGTH if not known 
    properties - a Map<String,Object> object with properties 

*javax.sound.midi.MidiFileFormat.getByteLength()*

public int getByteLength()

Obtains the length of the MIDI file, expressed in 8-bit bytes. 


    Returns: the number of bytes in the file, or UNKNOWN_LENGTH if not known 
*javax.sound.midi.MidiFileFormat.getDivisionType()*

public float getDivisionType()

Obtains the timing division type for the MIDI file. 


    Returns: the division type (PPQ or one of the SMPTE types) 
*javax.sound.midi.MidiFileFormat.getMicrosecondLength()*

public long getMicrosecondLength()

Obtains the length of the MIDI file, expressed in microseconds. 


    Returns: the file's duration in microseconds, or UNKNOWN_LENGTH if not known 
*javax.sound.midi.MidiFileFormat.getProperty(String)*

public |java.lang.Object| getProperty(java.lang.String key)

Obtain the property value specified by the key. The concept of properties is 
further explained in the class description(|javax.sound.midi.MidiFileFormat|) . 

If the specified property is not defined for a particular file format, this 
method returns null. 

    key - the key of the desired property 

    Returns: the value of the property with the specified key, or null if the property does 
             not exist. 
*javax.sound.midi.MidiFileFormat.getResolution()*

public int getResolution()

Obtains the timing resolution for the MIDI file. If the division type is PPQ, 
the resolution is specified in ticks per beat. For SMTPE timing, the resolution 
is specified in ticks per frame. 


    Returns: the number of ticks per beat (PPQ) or per frame (SMPTE) 
*javax.sound.midi.MidiFileFormat.getType()*

public int getType()

Obtains the MIDI file type. 


    Returns: the file's type (0, 1, or 2) 
*javax.sound.midi.MidiFileFormat.properties()*

public |java.util.Map| properties()

Obtain an unmodifiable map of properties. The concept of properties is further 
explained in the class description(|javax.sound.midi.MidiFileFormat|) . 


    Returns: a Map<String,Object> object containing all properties. If no properties are 
             recognized, an empty map is returned. 


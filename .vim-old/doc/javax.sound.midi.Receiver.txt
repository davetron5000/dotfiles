*javax.sound.midi.Receiver* *Receiver* A Receiver receives MidiEvent objects and

public interface interface Receiver


|javax.sound.midi.Receiver_Description|
|javax.sound.midi.Receiver_Fields|
|javax.sound.midi.Receiver_Constructors|
|javax.sound.midi.Receiver_Methods|

================================================================================

*javax.sound.midi.Receiver_Methods*
|javax.sound.midi.Receiver.close()|Indicates that the application has finished 
|javax.sound.midi.Receiver.send(MidiMessage,long)|Sends a MIDI message and time

*javax.sound.midi.Receiver_Description*

A Receiver receives (|javax.sound.midi.MidiEvent|) objects and typically does 
something useful in response, such as interpreting them to generate sound or 
raw MIDI output. Common MIDI receivers include synthesizers and MIDI Out ports. 


*javax.sound.midi.Receiver.close()*

public void close()

Indicates that the application has finished using the receiver, and that 
limited resources it requires may be released or made available. 

If the creation of this Receiver resulted in implicitly opening the underlying 
device, the device is implicitly closed by this method. This is true unless the 
device is kept open by other Receiver or Transmitter instances that opened the 
device implicitly, and unless the device has been opened explicitly. If the 
device this Receiver is retrieved from is closed explicitly by calling 
MidiDevice.close(|javax.sound.midi.MidiDevice|) , the Receiver is closed, too. 
For a detailed description of open/close behaviour see the class description of 
MidiDevice(|javax.sound.midi.MidiDevice|) . 


*javax.sound.midi.Receiver.send(MidiMessage,long)*

public void send(
  javax.sound.midi.MidiMessage message,
  long timeStamp)

Sends a MIDI message and time-stamp to this receiver. If time-stamping is not 
supported by this receiver, the time-stamp value should be -1. 

    message - the MIDI message to send 
    timeStamp - the time-stamp for the message, in microseconds. 



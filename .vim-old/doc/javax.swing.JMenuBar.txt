*javax.swing.JMenuBar* *JMenuBar* An implementation of a menu bar.

public class JMenuBar
  extends    |javax.swing.JComponent|
  implements |javax.accessibility.Accessible|
             |javax.swing.MenuElement|

|javax.swing.JMenuBar_Description|
|javax.swing.JMenuBar_Fields|
|javax.swing.JMenuBar_Constructors|
|javax.swing.JMenuBar_Methods|

====================================================================================================================================================================================

*javax.swing.JMenuBar_Constructors*
|javax.swing.JMenuBar()|Creates a new menu bar.

*javax.swing.JMenuBar_Methods*
|javax.swing.JMenuBar.add(JMenu)|Appends the specified menu to the end of the menu bar.
|javax.swing.JMenuBar.addNotify()|Overrides JComponent.addNotify to register this  menu bar with the current keyboard manager.
|javax.swing.JMenuBar.getAccessibleContext()|Gets the AccessibleContext associated with this JMenuBar.
|javax.swing.JMenuBar.getComponent()|Implemented to be a MenuElement.
|javax.swing.JMenuBar.getComponentAtIndex(int)|Returns the component at the specified index.
|javax.swing.JMenuBar.getComponentIndex(Component)|Returns the index of the specified component.
|javax.swing.JMenuBar.getHelpMenu()|Gets the help menu for the menu bar.
|javax.swing.JMenuBar.getMargin()|Returns the margin between the menubar's border and  its menus.
|javax.swing.JMenuBar.getMenu(int)|Returns the menu at the specified position in the menu bar.
|javax.swing.JMenuBar.getMenuCount()|Returns the number of items in the menu bar.
|javax.swing.JMenuBar.getSelectionModel()|Returns the model object that handles single selections.
|javax.swing.JMenuBar.getSubElements()|Implemented to be a MenuElement -- returns the  menus in this menu bar.
|javax.swing.JMenuBar.getUI()|Returns the menubar's current UI.
|javax.swing.JMenuBar.getUIClassID()|Returns the name of the Lclass that renders this component.
|javax.swing.JMenuBar.isBorderPainted()|Returns true if the menu bars border should be painted.
|javax.swing.JMenuBar.isSelected()|Returns true if the menu bar currently has a component selected.
|javax.swing.JMenuBar.menuSelectionChanged(boolean)|Implemented to be a MenuElement -- does nothing.
|javax.swing.JMenuBar.paintBorder(Graphics)|Paints the menubar's border if BorderPainted  property is true.
|javax.swing.JMenuBar.paramString()|Returns a string representation of this JMenuBar.
|javax.swing.JMenuBar.processKeyBinding(KeyStroke,KeyEvent,int,boolean)|Subclassed to check all the child menus.
|javax.swing.JMenuBar.processKeyEvent(KeyEvent,MenuElement[],MenuSelectionManager)|Implemented to be a MenuElement -- does nothing.
|javax.swing.JMenuBar.processMouseEvent(MouseEvent,MenuElement[],MenuSelectionManager)|Implemented to be a MenuElement -- does nothing.
|javax.swing.JMenuBar.removeNotify()|Overrides JComponent.removeNotify to unregister this  menu bar with the current keyboard manager.
|javax.swing.JMenuBar.setBorderPainted(boolean)|Sets whether the border should be painted.
|javax.swing.JMenuBar.setHelpMenu(JMenu)|Sets the help menu that appears when the user selects the  "help" option in the menu bar.
|javax.swing.JMenuBar.setMargin(Insets)|Sets the margin between the menubar's border and  its menus.
|javax.swing.JMenuBar.setSelected(Component)|Sets the currently selected component, producing a  a change to the selection model.
|javax.swing.JMenuBar.setSelectionModel(SingleSelectionModel)|Sets the model object to handle single selections.
|javax.swing.JMenuBar.setUI(MenuBarUI)|Sets the Lobject that renders this component.
|javax.swing.JMenuBar.updateUI()|Resets the UI property with a value from the current look and feel.

*javax.swing.JMenuBar_Description*

An implementation of a menu bar. You add JMenu objects to the menu bar to construct a menu. When the user selects a JMenu object, its associated JPopupMenu is displayed, allowing 
the user to select one of the JMenuItems on it. 

For information and examples of using menu bars see How to Use Menus, a section in The Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.JMenuBar()*

public JMenuBar()

Creates a new menu bar. 


*javax.swing.JMenuBar.add(JMenu)*

public |javax.swing.JMenu| add(javax.swing.JMenu c)

Appends the specified menu to the end of the menu bar. 


    c - the JMenu component to add 

    Returns: the menu component 

*javax.swing.JMenuBar.addNotify()*

public void addNotify()

Overrides JComponent.addNotify to register this menu bar with the current keyboard manager. 



*javax.swing.JMenuBar.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JMenuBar. For JMenuBars, the AccessibleContext takes the form of an AccessibleJMenuBar. A new AccessibleJMenuBar instance is 
created if necessary. 



    Returns: an AccessibleJMenuBar that serves as the AccessibleContext of this JMenuBar 

*javax.swing.JMenuBar.getComponent()*

public |java.awt.Component| getComponent()

Implemented to be a MenuElement. Returns this object. 



    Returns: the current Component (this) 

*javax.swing.JMenuBar.getComponentAtIndex(int)*

public |java.awt.Component| getComponentAtIndex(int i)

Returns the component at the specified index. 

    Deprecated: replaced by <code>getComponent(int i)</code>

    i - an integer specifying the position, where 0 is first 

    Returns: the Component at the position, or null for an invalid index 

*javax.swing.JMenuBar.getComponentIndex(Component)*

public int getComponentIndex(java.awt.Component c)

Returns the index of the specified component. 


    c - the Component to find 

    Returns: an integer giving the component's position, where 0 is first; or -1 if it can't be found 

*javax.swing.JMenuBar.getHelpMenu()*

public |javax.swing.JMenu| getHelpMenu()

Gets the help menu for the menu bar. This method is not yet implemented and will throw an exception. 



    Returns: the JMenu that delivers help to the user 

*javax.swing.JMenuBar.getMargin()*

public |java.awt.Insets| getMargin()

Returns the margin between the menubar's border and its menus. If there is no previous margin, it will create a default margin with zero size. 



    Returns: an Insets object containing the margin values 

*javax.swing.JMenuBar.getMenu(int)*

public |javax.swing.JMenu| getMenu(int index)

Returns the menu at the specified position in the menu bar. 


    index - an integer giving the position in the menu bar, where 0 is the first position 

    Returns: the JMenu at that position, or null if if there is no JMenu at that position (ie. if it is a JMenuItem) 

*javax.swing.JMenuBar.getMenuCount()*

public int getMenuCount()

Returns the number of items in the menu bar. 



    Returns: the number of items in the menu bar 

*javax.swing.JMenuBar.getSelectionModel()*

public |javax.swing.SingleSelectionModel| getSelectionModel()

Returns the model object that handles single selections. 



    Returns: the SingleSelectionModel property 

*javax.swing.JMenuBar.getSubElements()*

public |javax.swing.MenuElement|[] getSubElements()

Implemented to be a MenuElement -- returns the menus in this menu bar. This is the reason for implementing the MenuElement interface -- so that the menu bar can be treated the 
same as other menu elements. 



    Returns: an array of menu items in the menu bar. 

*javax.swing.JMenuBar.getUI()*

public |javax.swing.plaf.MenuBarUI| getUI()

Returns the menubar's current UI. 



*javax.swing.JMenuBar.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the name of the Lclass that renders this component. 



    Returns: the string "MenuBarUI" 

*javax.swing.JMenuBar.isBorderPainted()*

public boolean isBorderPainted()

Returns true if the menu bars border should be painted. 



    Returns: true if the border should be painted, else false 

*javax.swing.JMenuBar.isSelected()*

public boolean isSelected()

Returns true if the menu bar currently has a component selected. 



    Returns: true if a selection has been made, else false 

*javax.swing.JMenuBar.menuSelectionChanged(boolean)*

public void menuSelectionChanged(boolean isIncluded)

Implemented to be a MenuElement -- does nothing. 



*javax.swing.JMenuBar.paintBorder(Graphics)*

protected void paintBorder(java.awt.Graphics g)

Paints the menubar's border if BorderPainted property is true. 


    g - the Graphics context to use for painting 

*javax.swing.JMenuBar.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JMenuBar. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary 
between implementations. The returned string may be empty but may not be null. 



    Returns: a string representation of this JMenuBar 

*javax.swing.JMenuBar.processKeyBinding(KeyStroke,KeyEvent,int,boolean)*

protected boolean processKeyBinding(
  javax.swing.KeyStroke ks,
  java.awt.event.KeyEvent e,
  int condition,
  boolean pressed)

Subclassed to check all the child menus. 



*javax.swing.JMenuBar.processKeyEvent(KeyEvent,MenuElement[],MenuSelectionManager)*

public void processKeyEvent(
  java.awt.event.KeyEvent e,
  javax.swing.MenuElement[] path,
  javax.swing.MenuSelectionManager manager)

Implemented to be a MenuElement -- does nothing. 



*javax.swing.JMenuBar.processMouseEvent(MouseEvent,MenuElement[],MenuSelectionManager)*

public void processMouseEvent(
  java.awt.event.MouseEvent event,
  javax.swing.MenuElement[] path,
  javax.swing.MenuSelectionManager manager)

Implemented to be a MenuElement -- does nothing. 



*javax.swing.JMenuBar.removeNotify()*

public void removeNotify()

Overrides JComponent.removeNotify to unregister this menu bar with the current keyboard manager. 



*javax.swing.JMenuBar.setBorderPainted(boolean)*

public void setBorderPainted(boolean b)

Sets whether the border should be painted. 


    b - if true and border property is not null, the border is painted. 

*javax.swing.JMenuBar.setHelpMenu(JMenu)*

public void setHelpMenu(javax.swing.JMenu menu)

Sets the help menu that appears when the user selects the "help" option in the menu bar. This method is not yet implemented and will throw an exception. 


    menu - the JMenu that delivers help to the user 

*javax.swing.JMenuBar.setMargin(Insets)*

public void setMargin(java.awt.Insets m)

Sets the margin between the menubar's border and its menus. Setting to null will cause the menubar to use the default margins. 


    m - an Insets object containing the margin values 

*javax.swing.JMenuBar.setSelected(Component)*

public void setSelected(java.awt.Component sel)

Sets the currently selected component, producing a a change to the selection model. 


    sel - the Component to select 

*javax.swing.JMenuBar.setSelectionModel(SingleSelectionModel)*

public void setSelectionModel(javax.swing.SingleSelectionModel model)

Sets the model object to handle single selections. 


    model - the SingleSelectionModel to use 

*javax.swing.JMenuBar.setUI(MenuBarUI)*

public void setUI(javax.swing.plaf.MenuBarUI ui)

Sets the Lobject that renders this component. 


    ui - the new MenuBarUI Lobject 

*javax.swing.JMenuBar.updateUI()*

public void updateUI()

Resets the UI property with a value from the current look and feel. 





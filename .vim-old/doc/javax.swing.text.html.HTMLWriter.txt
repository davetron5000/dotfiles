*javax.swing.text.html.HTMLWriter* *HTMLWriter* This is a writer for HTMLDocuments.

public class HTMLWriter
  extends    |javax.swing.text.AbstractWriter|

|javax.swing.text.html.HTMLWriter_Description|
|javax.swing.text.html.HTMLWriter_Fields|
|javax.swing.text.html.HTMLWriter_Constructors|
|javax.swing.text.html.HTMLWriter_Methods|

====================================================================================================================================================================================

*javax.swing.text.html.HTMLWriter_Constructors*
|javax.swing.text.html.HTMLWriter(Writer,HTMLDocument)|Creates a new HTMLWriter.
|javax.swing.text.html.HTMLWriter(Writer,HTMLDocument,int,int)|Creates a new HTMLWriter.

*javax.swing.text.html.HTMLWriter_Methods*
|javax.swing.text.html.HTMLWriter.closeOutUnwantedEmbeddedTags(AttributeSet)|Searches the attribute set and for each tag  that is stored in the tag vector.
|javax.swing.text.html.HTMLWriter.comment(Element)|Writes out comments.
|javax.swing.text.html.HTMLWriter.emptyTag(Element)|Writes out all empty elements (all tags that have no  corresponding end tag).
|javax.swing.text.html.HTMLWriter.endTag(Element)|Writes out an end tag for the element.
|javax.swing.text.html.HTMLWriter.isBlockTag(AttributeSet)|Determines if the HTML.Tag associated with the  element is a block tag.
|javax.swing.text.html.HTMLWriter.matchNameAttribute(AttributeSet,HTML.Tag)|Returns true if the StyleConstants.NameAttribute is  equal to the tag that is passed in as a parameter.
|javax.swing.text.html.HTMLWriter.output(char[],int,int)|This method is overriden to map any character entities, such as  < to  and lt;.
|javax.swing.text.html.HTMLWriter.selectContent(AttributeSet)|Writes out the content of the SELECT form element.
|javax.swing.text.html.HTMLWriter.startTag(Element)|Writes out a start tag for the element.
|javax.swing.text.html.HTMLWriter.synthesizedElement(Element)|Returns true if the element is a  synthesized element.
|javax.swing.text.html.HTMLWriter.text(Element)|Writes out text.
|javax.swing.text.html.HTMLWriter.textAreaContent(AttributeSet)|Writes out text that is contained in a TEXTAREA form  element.
|javax.swing.text.html.HTMLWriter.write()|Iterates over the   Element tree and controls the writing out of  all the tags and its attributes.
|javax.swing.text.html.HTMLWriter.writeAttributes(AttributeSet)|Writes out the attribute set.
|javax.swing.text.html.HTMLWriter.writeEmbeddedTags(AttributeSet)|Searches for embedded tags in the AttributeSet  and writes them out.
|javax.swing.text.html.HTMLWriter.writeLineSeparator()|Writes the line separator.
|javax.swing.text.html.HTMLWriter.writeOption(Option)|Writes out the content of the Option form element.

*javax.swing.text.html.HTMLWriter_Description*

This is a writer for HTMLDocuments. 



*javax.swing.text.html.HTMLWriter(Writer,HTMLDocument)*

public HTMLWriter(
  java.io.Writer w,
  javax.swing.text.html.HTMLDocument doc)

Creates a new HTMLWriter. 

    w - a Writer 
    doc - an HTMLDocument 

*javax.swing.text.html.HTMLWriter(Writer,HTMLDocument,int,int)*

public HTMLWriter(
  java.io.Writer w,
  javax.swing.text.html.HTMLDocument doc,
  int pos,
  int len)

Creates a new HTMLWriter. 

    w - a Writer 
    doc - an HTMLDocument 
    pos - the document location from which to fetch the content 
    len - the amount to write out 

*javax.swing.text.html.HTMLWriter.closeOutUnwantedEmbeddedTags(AttributeSet)*

protected void closeOutUnwantedEmbeddedTags(javax.swing.text.AttributeSet attr)
  throws |java.io.IOException|
         
Searches the attribute set and for each tag that is stored in the tag vector. If the tag isnt found, then the tag is removed from the vector and a corresponding end tag is written 
out. 



*javax.swing.text.html.HTMLWriter.comment(Element)*

protected void comment(javax.swing.text.Element elem)
  throws |javax.swing.text.BadLocationException|
         |java.io.IOException|
         
Writes out comments. 


    elem - an Element 

*javax.swing.text.html.HTMLWriter.emptyTag(Element)*

protected void emptyTag(javax.swing.text.Element elem)
  throws |javax.swing.text.BadLocationException|
         |java.io.IOException|
         
Writes out all empty elements (all tags that have no corresponding end tag). 


    elem - an Element 

*javax.swing.text.html.HTMLWriter.endTag(Element)*

protected void endTag(javax.swing.text.Element elem)
  throws |java.io.IOException|
         
Writes out an end tag for the element. 


    elem - an Element 

*javax.swing.text.html.HTMLWriter.isBlockTag(AttributeSet)*

protected boolean isBlockTag(javax.swing.text.AttributeSet attr)

Determines if the HTML.Tag associated with the element is a block tag. 


    attr - an AttributeSet 

    Returns: true if tag is block tag, false otherwise. 

*javax.swing.text.html.HTMLWriter.matchNameAttribute(AttributeSet,HTML.Tag)*

protected boolean matchNameAttribute(
  javax.swing.text.AttributeSet attr,
  javax.swing.text.html.HTML.Tag tag)

Returns true if the StyleConstants.NameAttribute is equal to the tag that is passed in as a parameter. 



*javax.swing.text.html.HTMLWriter.output(char[],int,int)*

protected void output(
  char[] chars,
  int start,
  int length)
  throws |java.io.IOException|
         
This method is overriden to map any character entities, such as < to and lt;. super.output will be invoked to write the content. 



*javax.swing.text.html.HTMLWriter.selectContent(AttributeSet)*

protected void selectContent(javax.swing.text.AttributeSet attr)
  throws |java.io.IOException|
         
Writes out the content of the SELECT form element. 


    attr - the AttributeSet associated with the form element 

*javax.swing.text.html.HTMLWriter.startTag(Element)*

protected void startTag(javax.swing.text.Element elem)
  throws |javax.swing.text.BadLocationException|
         |java.io.IOException|
         
Writes out a start tag for the element. Ignores all synthesized elements. 


    elem - an Element 

*javax.swing.text.html.HTMLWriter.synthesizedElement(Element)*

protected boolean synthesizedElement(javax.swing.text.Element elem)

Returns true if the element is a synthesized element. Currently we are only testing for the p-implied tag. 



*javax.swing.text.html.HTMLWriter.text(Element)*

protected void text(javax.swing.text.Element elem)
  throws |javax.swing.text.BadLocationException|
         |java.io.IOException|
         
Writes out text. If a range is specified when the constructor is invoked, then only the appropriate range of text is written out. 


    elem - an Element 

*javax.swing.text.html.HTMLWriter.textAreaContent(AttributeSet)*

protected void textAreaContent(javax.swing.text.AttributeSet attr)
  throws |javax.swing.text.BadLocationException|
         |java.io.IOException|
         
Writes out text that is contained in a TEXTAREA form element. 


    attr - an AttributeSet 

*javax.swing.text.html.HTMLWriter.write()*

public void write()
  throws |javax.swing.text.BadLocationException|
         |java.io.IOException|
         
Iterates over the Element tree and controls the writing out of all the tags and its attributes. 



*javax.swing.text.html.HTMLWriter.writeAttributes(AttributeSet)*

protected void writeAttributes(javax.swing.text.AttributeSet attr)
  throws |java.io.IOException|
         
Writes out the attribute set. Ignores all attributes with a key of type HTML.Tag, attributes with a key of type StyleConstants, and attributes with a key of type 
HTML.Attribute.ENDTAG. 


    attr - an AttributeSet 

*javax.swing.text.html.HTMLWriter.writeEmbeddedTags(AttributeSet)*

protected void writeEmbeddedTags(javax.swing.text.AttributeSet attr)
  throws |java.io.IOException|
         
Searches for embedded tags in the AttributeSet and writes them out. It also stores these tags in a vector so that when appropriate the corresponding end tags can be written out. 



*javax.swing.text.html.HTMLWriter.writeLineSeparator()*

protected void writeLineSeparator()
  throws |java.io.IOException|
         
Writes the line separator. This is overriden to make sure we don't replace the newline content in case it is outside normal ascii. 



*javax.swing.text.html.HTMLWriter.writeOption(Option)*

protected void writeOption(javax.swing.text.html.Option option)
  throws |java.io.IOException|
         
Writes out the content of the Option form element. 


    option - an Option 



*javax.swing.JComponent.AccessibleJComponent* *JComponent.AccessibleJComponent* Inner class of JComponent used to provide default support for
 accessibility.

public abstract class JComponent.AccessibleJComponent
  extends    |java.awt.Container.AccessibleAWTContainer|
  implements |javax.accessibility.AccessibleExtendedComponent|

|javax.swing.JComponent.AccessibleJComponent_Description|
|javax.swing.JComponent.AccessibleJComponent_Fields|
|javax.swing.JComponent.AccessibleJComponent_Constructors|
|javax.swing.JComponent.AccessibleJComponent_Methods|

====================================================================================================================================================================================

*javax.swing.JComponent.AccessibleJComponent_Fields*
|java.awt.event.ContainerListener_javax.swing.JComponent.AccessibleJComponent.accessibleContainerHandler|
|java.awt.event.FocusListener_javax.swing.JComponent.AccessibleJComponent.accessibleFocusHandler|

*javax.swing.JComponent.AccessibleJComponent_Constructors*
|javax.swing.JComponent.AccessibleJComponent()|Though the class is abstract, this should be called by  all sub-classes.

*javax.swing.JComponent.AccessibleJComponent_Methods*
|javax.swing.JComponent.AccessibleJComponent.addPropertyChangeListener(PropertyChangeListener)|Adds a PropertyChangeListener to the listener list.
|javax.swing.JComponent.AccessibleJComponent.getAccessibleChild(int)|Returns the nth Accessible child of the object.
|javax.swing.JComponent.AccessibleJComponent.getAccessibleChildrenCount()|Returns the number of accessible children in the object.
|javax.swing.JComponent.AccessibleJComponent.getAccessibleDescription()|Gets the accessible description of this object.
|javax.swing.JComponent.AccessibleJComponent.getAccessibleKeyBinding()|Returns key bindings associated with this object
|javax.swing.JComponent.AccessibleJComponent.getAccessibleName()|Gets the accessible name of this object.
|javax.swing.JComponent.AccessibleJComponent.getAccessibleRole()|Gets the role of this object.
|javax.swing.JComponent.AccessibleJComponent.getAccessibleStateSet()|Gets the state of this object.
|javax.swing.JComponent.AccessibleJComponent.getBorderTitle(Border)|Recursively search through the border hierarchy (if it exists)  for a TitledBorder with a non-null title.
|javax.swing.JComponent.AccessibleJComponent.getTitledBorderText()|Returns the titled border text
|javax.swing.JComponent.AccessibleJComponent.getToolTipText()|Returns the tool tip text
|javax.swing.JComponent.AccessibleJComponent.removePropertyChangeListener(PropertyChangeListener)|Removes a PropertyChangeListener from the listener list.

*javax.swing.JComponent.AccessibleJComponent_Description*

Inner class of JComponent used to provide default support for accessibility. This class is not meant to be used directly by application developers, but is instead meant only to be 
subclassed by component developers. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*java.awt.event.ContainerListener_javax.swing.JComponent.AccessibleJComponent.accessibleContainerHandler*




*java.awt.event.FocusListener_javax.swing.JComponent.AccessibleJComponent.accessibleFocusHandler*





*javax.swing.JComponent.AccessibleJComponent()*

protected JComponent.AccessibleJComponent()

Though the class is abstract, this should be called by all sub-classes. 


*javax.swing.JComponent.AccessibleJComponent.addPropertyChangeListener(PropertyChangeListener)*

public void addPropertyChangeListener(java.beans.PropertyChangeListener listener)

Adds a PropertyChangeListener to the listener list. 


    listener - the PropertyChangeListener to be added 

*javax.swing.JComponent.AccessibleJComponent.getAccessibleChild(int)*

public |javax.accessibility.Accessible| getAccessibleChild(int i)

Returns the nth Accessible child of the object. 


    i - zero-based index of child 

    Returns: the nth Accessible child of the object 

*javax.swing.JComponent.AccessibleJComponent.getAccessibleChildrenCount()*

public int getAccessibleChildrenCount()

Returns the number of accessible children in the object. If all of the children of this object implement Accessible, than this method should return the number of children of this 
object. 



    Returns: the number of accessible children in the object. 

*javax.swing.JComponent.AccessibleJComponent.getAccessibleDescription()*

public |java.lang.String| getAccessibleDescription()

Gets the accessible description of this object. This should be a concise, localized description of what this object is - what is its meaning to the user. If the object has a 
tooltip, the tooltip text may be an appropriate string to return, assuming it contains a concise description of the object (instead of just the name of the object - for example a 
"Save" icon on a toolbar that had "save" as the tooltip text shouldn't return the tooltip text as the description, but something like "Saves the current text document" instead). 



    Returns: the localized description of the object -- can be null if this object does not have a description 

*javax.swing.JComponent.AccessibleJComponent.getAccessibleKeyBinding()*

public |javax.accessibility.AccessibleKeyBinding| getAccessibleKeyBinding()

Returns key bindings associated with this object 



    Returns: the key bindings, if supported, of the object; otherwise, null 

*javax.swing.JComponent.AccessibleJComponent.getAccessibleName()*

public |java.lang.String| getAccessibleName()

Gets the accessible name of this object. This should almost never return java.awt.Component.getName(), as that generally isn't a localized name, and doesn't have meaning for the 
user. If the object is fundamentally a text object (such as a menu item), the accessible name should be the text of the object (for example, "save"). If the object has a tooltip, 
the tooltip text may also be an appropriate String to return. 



    Returns: the localized name of the object -- can be null if this object does not have a name 

*javax.swing.JComponent.AccessibleJComponent.getAccessibleRole()*

public |javax.accessibility.AccessibleRole| getAccessibleRole()

Gets the role of this object. 



    Returns: an instance of AccessibleRole describing the role of the object 

*javax.swing.JComponent.AccessibleJComponent.getAccessibleStateSet()*

public |javax.accessibility.AccessibleStateSet| getAccessibleStateSet()

Gets the state of this object. 



    Returns: an instance of AccessibleStateSet containing the current state set of the object 

*javax.swing.JComponent.AccessibleJComponent.getBorderTitle(Border)*

protected |java.lang.String| getBorderTitle(javax.swing.border.Border b)

Recursively search through the border hierarchy (if it exists) for a TitledBorder with a non-null title. This does a depth first search on first the inside borders then the 
outside borders. The assumption is that titles make really pretty inside borders but not very pretty outside borders in compound border situations. It's rather arbitrary, but 
hopefully decent UI programmers will not create multiple titled borders for the same component. 



*javax.swing.JComponent.AccessibleJComponent.getTitledBorderText()*

public |java.lang.String| getTitledBorderText()

Returns the titled border text 



    Returns: the titled border text, if supported, of the object; otherwise, null 

*javax.swing.JComponent.AccessibleJComponent.getToolTipText()*

public |java.lang.String| getToolTipText()

Returns the tool tip text 



    Returns: the tool tip text, if supported, of the object; otherwise, null 

*javax.swing.JComponent.AccessibleJComponent.removePropertyChangeListener(PropertyChangeListener)*

public void removePropertyChangeListener(java.beans.PropertyChangeListener listener)

Removes a PropertyChangeListener from the listener list. This removes a PropertyChangeListener that was registered for all properties. 


    listener - the PropertyChangeListener to be removed 



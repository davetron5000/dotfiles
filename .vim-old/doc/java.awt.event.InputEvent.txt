*java.awt.event.InputEvent* *InputEvent* The root event class for all component-level input events.

public abstract class InputEvent
  extends    |java.awt.event.ComponentEvent|

|java.awt.event.InputEvent_Description|
|java.awt.event.InputEvent_Fields|
|java.awt.event.InputEvent_Constructors|
|java.awt.event.InputEvent_Methods|

====================================================================================================================================================================================

*java.awt.event.InputEvent_Fields*
|int_java.awt.event.InputEvent.ALT_DOWN_MASK|
|int_java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK|
|int_java.awt.event.InputEvent.ALT_GRAPH_MASK|
|int_java.awt.event.InputEvent.ALT_MASK|
|int_java.awt.event.InputEvent.BUTTON1_DOWN_MASK|
|int_java.awt.event.InputEvent.BUTTON1_MASK|
|int_java.awt.event.InputEvent.BUTTON2_DOWN_MASK|
|int_java.awt.event.InputEvent.BUTTON2_MASK|
|int_java.awt.event.InputEvent.BUTTON3_DOWN_MASK|
|int_java.awt.event.InputEvent.BUTTON3_MASK|
|int_java.awt.event.InputEvent.CTRL_DOWN_MASK|
|int_java.awt.event.InputEvent.CTRL_MASK|
|int_java.awt.event.InputEvent.META_DOWN_MASK|
|int_java.awt.event.InputEvent.META_MASK|
|int_java.awt.event.InputEvent.SHIFT_DOWN_MASK|
|int_java.awt.event.InputEvent.SHIFT_MASK|

*java.awt.event.InputEvent_Methods*
|java.awt.event.InputEvent.consume()|Consumes this event so that it will not be processed  in the default manner by the source which originated it.
|java.awt.event.InputEvent.getModifiers()|Returns the modifier mask for this event.
|java.awt.event.InputEvent.getModifiersEx()|Returns the extended modifier mask for this event.
|java.awt.event.InputEvent.getModifiersExText(int)|Returns a String describing the extended modifier keys and   mouse buttons, such as "Shift", "Button1", or "Ctrl+Shift".
|java.awt.event.InputEvent.getWhen()|Returns the timestamp of when this event occurred.
|java.awt.event.InputEvent.isAltDown()|Returns whether or not the Alt modifier is down on this event.
|java.awt.event.InputEvent.isAltGraphDown()|Returns whether or not the AltGraph modifier is down on this event.
|java.awt.event.InputEvent.isConsumed()|Returns whether or not this event has been consumed.
|java.awt.event.InputEvent.isControlDown()|Returns whether or not the Control modifier is down on this event.
|java.awt.event.InputEvent.isMetaDown()|Returns whether or not the Meta modifier is down on this event.
|java.awt.event.InputEvent.isShiftDown()|Returns whether or not the Shift modifier is down on this event.

*java.awt.event.InputEvent_Description*

The root event class for all component-level input events. 

Input events are delivered to listeners before they are processed normally by the source where they originated. This allows listeners and component subclasses to "consume" the 
event so that the source will not process them in their default manner. For example, consuming mousePressed events on a Button component will prevent the Button from being 
activated. 



*int_java.awt.event.InputEvent.ALT_DOWN_MASK*

The Alt key extended modifier constant. 


*int_java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK*

The AltGraph key extended modifier constant. 


*int_java.awt.event.InputEvent.ALT_GRAPH_MASK*

The AltGraph key modifier constant. 


*int_java.awt.event.InputEvent.ALT_MASK*

The Alt key modifier constant. It is recommended that ALT_DOWN_MASK be used instead. 


*int_java.awt.event.InputEvent.BUTTON1_DOWN_MASK*

The Mouse Button1 extended modifier constant. 


*int_java.awt.event.InputEvent.BUTTON1_MASK*

The Mouse Button1 modifier constant. It is recommended that BUTTON1_DOWN_MASK be used instead. 


*int_java.awt.event.InputEvent.BUTTON2_DOWN_MASK*

The Mouse Button2 extended modifier constant. 


*int_java.awt.event.InputEvent.BUTTON2_MASK*

The Mouse Button2 modifier constant. It is recommended that BUTTON2_DOWN_MASK be used instead. Note that BUTTON2_MASK has the same value as ALT_MASK. 


*int_java.awt.event.InputEvent.BUTTON3_DOWN_MASK*

The Mouse Button3 extended modifier constant. 


*int_java.awt.event.InputEvent.BUTTON3_MASK*

The Mouse Button3 modifier constant. It is recommended that BUTTON3_DOWN_MASK be used instead. Note that BUTTON3_MASK has the same value as META_MASK. 


*int_java.awt.event.InputEvent.CTRL_DOWN_MASK*

The Control key extended modifier constant. 


*int_java.awt.event.InputEvent.CTRL_MASK*

The Control key modifier constant. It is recommended that CTRL_DOWN_MASK be used instead. 


*int_java.awt.event.InputEvent.META_DOWN_MASK*

The Meta key extended modifier constant. 


*int_java.awt.event.InputEvent.META_MASK*

The Meta key modifier constant. It is recommended that META_DOWN_MASK be used instead. 


*int_java.awt.event.InputEvent.SHIFT_DOWN_MASK*

The Shift key extended modifier constant. 


*int_java.awt.event.InputEvent.SHIFT_MASK*

The Shift key modifier constant. It is recommended that SHIFT_DOWN_MASK be used instead. 



*java.awt.event.InputEvent.consume()*

public void consume()

Consumes this event so that it will not be processed in the default manner by the source which originated it. 



*java.awt.event.InputEvent.getModifiers()*

public int getModifiers()

Returns the modifier mask for this event. 



*java.awt.event.InputEvent.getModifiersEx()*

public int getModifiersEx()

Returns the extended modifier mask for this event. Extended modifiers represent the state of all modal keys, such as ALT, CTRL, META, and the mouse buttons just after the event 
occurred 

For example, if the user presses button 1 followed by button 2, and then releases them in the same order, the following sequence of events is generated: 

MOUSE_PRESSED: BUTTON1_DOWN_MASK MOUSE_PRESSED: BUTTON1_DOWN_MASK | BUTTON2_DOWN_MASK MOUSE_RELEASED: BUTTON2_DOWN_MASK MOUSE_CLICKED: BUTTON2_DOWN_MASK MOUSE_RELEASED: 
MOUSE_CLICKED: 

It is not recommended to compare the return value of this method using == because new modifiers can be added in the future. For example, the appropriate way to check that SHIFT 
and BUTTON1 are down, but CTRL is up is demonstrated by the following code: 

int onmask = SHIFT_DOWN_MASK | BUTTON1_DOWN_MASK; int offmask = CTRL_DOWN_MASK; if (event.getModifiersEx() & (onmask | offmask) == onmask) { ... } 

The above code will work even if new modifiers are added. 



*java.awt.event.InputEvent.getModifiersExText(int)*

public static |java.lang.String| getModifiersExText(int modifiers)

Returns a String describing the extended modifier keys and mouse buttons, such as "Shift", "Button1", or "Ctrl+Shift". These strings can be localized by changing the 
awt.properties file. 


    modifiers - a modifier mask describing the extended modifier keys and mouse buttons for the event 

    Returns: a text description of the combination of extended modifier keys and mouse buttons that were held down during the event. 

*java.awt.event.InputEvent.getWhen()*

public long getWhen()

Returns the timestamp of when this event occurred. 



*java.awt.event.InputEvent.isAltDown()*

public boolean isAltDown()

Returns whether or not the Alt modifier is down on this event. 



*java.awt.event.InputEvent.isAltGraphDown()*

public boolean isAltGraphDown()

Returns whether or not the AltGraph modifier is down on this event. 



*java.awt.event.InputEvent.isConsumed()*

public boolean isConsumed()

Returns whether or not this event has been consumed. 



*java.awt.event.InputEvent.isControlDown()*

public boolean isControlDown()

Returns whether or not the Control modifier is down on this event. 



*java.awt.event.InputEvent.isMetaDown()*

public boolean isMetaDown()

Returns whether or not the Meta modifier is down on this event. 



*java.awt.event.InputEvent.isShiftDown()*

public boolean isShiftDown()

Returns whether or not the Shift modifier is down on this event. 





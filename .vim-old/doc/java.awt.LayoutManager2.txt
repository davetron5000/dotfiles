*java.awt.LayoutManager2* *LayoutManager2* Defines an interface for classes that know how to layout Containers
 based on a layout constraints object.

public interface interface LayoutManager2

  implements |java.awt.LayoutManager|

|java.awt.LayoutManager2_Description|
|java.awt.LayoutManager2_Fields|
|java.awt.LayoutManager2_Constructors|
|java.awt.LayoutManager2_Methods|

====================================================================================================================================================================================

*java.awt.LayoutManager2_Methods*
|java.awt.LayoutManager2.addLayoutComponent(Component,Object)|Adds the specified component to the layout, using the specified  constraint object.
|java.awt.LayoutManager2.getLayoutAlignmentX(Container)|Returns the alignment along the x axis.
|java.awt.LayoutManager2.getLayoutAlignmentY(Container)|Returns the alignment along the y axis.
|java.awt.LayoutManager2.invalidateLayout(Container)|Invalidates the layout, indicating that if the layout manager  has cached information it should be discarded.
|java.awt.LayoutManager2.maximumLayoutSize(Container)|Calculates the maximum size dimensions for the specified container,  given the components it contains.

*java.awt.LayoutManager2_Description*

Defines an interface for classes that know how to layout Containers based on a layout constraints object. 

This interface extends the LayoutManager interface to deal with layouts explicitly in terms of constraint objects that specify how and where components should be added to the 
layout. 

This minimal extension to LayoutManager is intended for tool providers who wish to the creation of constraint-based layouts. It does not yet provide full, general support for 
custom constraint-based layout managers. 



*java.awt.LayoutManager2.addLayoutComponent(Component,Object)*

public void addLayoutComponent(
  java.awt.Component comp,
  java.lang.Object constraints)

Adds the specified component to the layout, using the specified constraint object. 


    comp - the component to be added 
    constraints - where/how the component is added to the layout. 

*java.awt.LayoutManager2.getLayoutAlignmentX(Container)*

public float getLayoutAlignmentX(java.awt.Container target)

Returns the alignment along the x axis. This specifies how the component would like to be aligned relative to other components. The value should be a number between 0 and 1 where 
0 represents alignment along the origin, 1 is aligned the furthest away from the origin, 0.5 is centered, etc. 



*java.awt.LayoutManager2.getLayoutAlignmentY(Container)*

public float getLayoutAlignmentY(java.awt.Container target)

Returns the alignment along the y axis. This specifies how the component would like to be aligned relative to other components. The value should be a number between 0 and 1 where 
0 represents alignment along the origin, 1 is aligned the furthest away from the origin, 0.5 is centered, etc. 



*java.awt.LayoutManager2.invalidateLayout(Container)*

public void invalidateLayout(java.awt.Container target)

Invalidates the layout, indicating that if the layout manager has cached information it should be discarded. 



*java.awt.LayoutManager2.maximumLayoutSize(Container)*

public |java.awt.Dimension| maximumLayoutSize(java.awt.Container target)

Calculates the maximum size dimensions for the specified container, given the components it contains. 





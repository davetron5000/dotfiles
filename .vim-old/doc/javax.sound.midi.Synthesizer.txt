*javax.sound.midi.Synthesizer* *Synthesizer* A Synthesizer generates sound.

public interface interface Synthesizer

  implements |javax.sound.midi.MidiDevice|

|javax.sound.midi.Synthesizer_Description|
|javax.sound.midi.Synthesizer_Fields|
|javax.sound.midi.Synthesizer_Constructors|
|javax.sound.midi.Synthesizer_Methods|

================================================================================

*javax.sound.midi.Synthesizer_Methods*
|javax.sound.midi.Synthesizer.getAvailableInstruments()|Obtains a list of instr
|javax.sound.midi.Synthesizer.getChannels()|Obtains the set of MIDI channels co
|javax.sound.midi.Synthesizer.getDefaultSoundbank()|Obtains the default soundba
|javax.sound.midi.Synthesizer.getLatency()|Obtains the processing latency incur
|javax.sound.midi.Synthesizer.getLoadedInstruments()|Obtains a list of the inst
|javax.sound.midi.Synthesizer.getMaxPolyphony()|Obtains the maximum number of n
|javax.sound.midi.Synthesizer.getVoiceStatus()|Obtains the current status of th
|javax.sound.midi.Synthesizer.isSoundbankSupported(Soundbank)|Informs the calle
|javax.sound.midi.Synthesizer.loadAllInstruments(Soundbank)|Loads onto the Synt
|javax.sound.midi.Synthesizer.loadInstrument(Instrument)|Makes a particular ins
|javax.sound.midi.Synthesizer.loadInstruments(Soundbank,Patch[])|Loads the inst
|javax.sound.midi.Synthesizer.remapInstrument(Instrument,Instrument)|Remaps an 
|javax.sound.midi.Synthesizer.unloadAllInstruments(Soundbank)|Unloads all instr
|javax.sound.midi.Synthesizer.unloadInstrument(Instrument)|Unloads a particular
|javax.sound.midi.Synthesizer.unloadInstruments(Soundbank,Patch[])|Unloads the 

*javax.sound.midi.Synthesizer_Description*

A Synthesizer generates sound. This usually happens when one of the 
Synthesizer's (|javax.sound.midi.MidiChannel|) objects receives a 
noteOn(|javax.sound.midi.MidiChannel|) message, either directly or via the 
Synthesizer object. Many Synthesizers support Receivers, through which MIDI 
events can be delivered to the Synthesizer. In such cases, the Synthesizer 
typically responds by sending a corresponding message to the appropriate 
MidiChannel, or by processing the event itself if the event isn't one of the 
MIDI channel messages. 

The Synthesizer interface includes methods for loading and unloading 
instruments from soundbanks. An instrument is a specification for synthesizing 
a certain type of sound, whether that sound emulates a traditional instrument 
or is some kind of sound effect or other imaginary sound. A soundbank is a 
collection of instruments, organized by bank and program number (via the 
instrument's Patch object). Different Synthesizer classes might implement 
different sound-synthesis techniques, meaning that some instruments and not 
others might be compatible with a given synthesizer. Also, synthesizers may 
have a limited amount of memory for instruments, meaning that not every 
soundbank and instrument can be used by every synthesizer, even if the 
synthesis technique is compatible. To see whether the instruments from a 
certain soundbank can be played by a given synthesizer, invoke the 
isSoundbankSupported(|javax.sound.midi.Synthesizer|) method of Synthesizer. 

"Loading" an instrument means that that instrument becomes available for 
synthesizing notes. The instrument is loaded into the bank and program location 
specified by its Patch object. Loading does not necessarily mean that 
subsequently played notes will immediately have the sound of this newly loaded 
instrument. For the instrument to play notes, one of the synthesizer's 
MidiChannel objects must receive (or have received) a program-change message 
that causes that particular instrument's bank and program number to be 
selected. 


*javax.sound.midi.Synthesizer.getAvailableInstruments()*

public |javax.sound.midi.Instrument| getAvailableInstruments()

Obtains a list of instruments that come with the synthesizer. These instruments 
might be built into the synthesizer, or they might be part of a default 
soundbank provided with the synthesizer, etc. 

Note that you don't use this method to find out which instruments are currently 
loaded onto the synthesizer; for that purpose, you use getLoadedInstruments(). 
Nor does the method indicate all the instruments that can be loaded onto the 
synthesizer; it only indicates the subset that come with the synthesizer. To 
learn whether another instrument can be loaded, you can invoke 
isSoundbankSupported(), and if the instrument's Soundbank is supported, you can 
try loading the instrument. 


    Returns: list of available instruments. 
*javax.sound.midi.Synthesizer.getChannels()*

public |javax.sound.midi.MidiChannel| getChannels()

Obtains the set of MIDI channels controlled by this synthesizer. Each non-null 
element in the returned array is a MidiChannel that receives the MIDI messages 
sent on that channel number. 

The MIDI 1.0 specification provides for 16 channels, so this method returns an 
array of at least 16 elements. However, if this synthesizer doesn't make use of 
all 16 channels, some of the elements of the array might be null, so you should 
check each element before using it. 


    Returns: an array of the MidiChannel objects managed by this Synthesizer. Some of the 
             array elements may be null. 
*javax.sound.midi.Synthesizer.getDefaultSoundbank()*

public |javax.sound.midi.Soundbank| getDefaultSoundbank()

Obtains the default soundbank for the synthesizer, if one exists. (Some 
synthesizers provide a default or built-in soundbank.) If a synthesizer doesn't 
have a default soundbank, instruments must be loaded explicitly from an 
external soundbank. 


    Returns: default soundbank, or null if one does not exist. 
*javax.sound.midi.Synthesizer.getLatency()*

public long getLatency()

Obtains the processing latency incurred by this synthesizer, expressed in 
microseconds. This latency measures the worst-case delay between the time a 
MIDI message is delivered to the synthesizer and the time that the synthesizer 
actually produces the corresponding result. 

Although the latency is expressed in microseconds, a synthesizer's actual 
measured delay may vary over a wider range than this resolution suggests. For 
example, a synthesizer might have a worst-case delay of a few milliseconds or 
more. 


    Returns: the worst-case delay, in microseconds 
*javax.sound.midi.Synthesizer.getLoadedInstruments()*

public |javax.sound.midi.Instrument| getLoadedInstruments()

Obtains a list of the instruments that are currently loaded onto this 
Synthesizer. 


    Returns: a list of currently loaded instruments 
*javax.sound.midi.Synthesizer.getMaxPolyphony()*

public int getMaxPolyphony()

Obtains the maximum number of notes that this synthesizer can sound 
simultaneously. 


    Returns: the maximum number of simultaneous notes 
*javax.sound.midi.Synthesizer.getVoiceStatus()*

public |javax.sound.midi.VoiceStatus| getVoiceStatus()

Obtains the current status of the voices produced by this synthesizer. If this 
class of Synthesizer does not provide voice information, the returned array 
will always be of length 0. Otherwise, its length is always equal to the total 
number of voices, as returned by getMaxPolyphony(). (See the VoiceStatus class 
description for an explanation of synthesizer voices.) 


    Returns: an array of VoiceStatus objects that supply information about the corresponding 
             synthesizer voices 
*javax.sound.midi.Synthesizer.isSoundbankSupported(Soundbank)*

public boolean isSoundbankSupported(javax.sound.midi.Soundbank soundbank)

Informs the caller whether this synthesizer is capable of loading instruments 
from the specified soundbank. If the soundbank is unsupported, any attempts to 
load instruments from it will result in an IllegalArgumentException. 

    soundbank - soundbank for which support is queried 

    Returns: true if the soundbank is supported, otherwise false 
*javax.sound.midi.Synthesizer.loadAllInstruments(Soundbank)*

public boolean loadAllInstruments(javax.sound.midi.Soundbank soundbank)

Loads onto the Synthesizer all instruments contained in the specified 
Soundbank. 

    soundbank - the Soundbank whose are instruments are to be loaded 

    Returns: true if the instruments are all successfully loaded (or already had been), 
             false if any instrument could not be loaded (for example, if the 
             Synthesizer had insufficient memory) 
*javax.sound.midi.Synthesizer.loadInstrument(Instrument)*

public boolean loadInstrument(javax.sound.midi.Instrument instrument)

Makes a particular instrument available for synthesis. This instrument is 
loaded into the patch location specified by its Patch object, so that if a 
program-change message is received (or has been received) that causes that 
patch to be selected, subsequent notes will be played using the sound of 
instrument. If the specified instrument is already loaded, this method does 
nothing and returns true. 

The instrument must be part of a soundbank that this Synthesizer supports. (To 
make sure, you can use the getSoundbank method of Instrument and the 
isSoundbankSupported method of Synthesizer.) 

    instrument - instrument to load 

    Returns: true if the instrument is successfully loaded (or already had been), false if 
             the instrument could not be loaded (for example, if the 
             synthesizer has insufficient memory to load it) 
*javax.sound.midi.Synthesizer.loadInstruments(Soundbank,Patch[])*

public boolean loadInstruments(
  javax.sound.midi.Soundbank soundbank,
  javax.sound.midi.Patch[] patchList)

Loads the instruments referenced by the specified patches, from the specified 
Soundbank. Each of the Patch objects indicates a bank and program number; the 
Instrument that has the matching Patch is loaded into that bank and program 
location. 

    soundbank - the Soundbank containing the instruments to load 
    patchList - list of patches for which instruments should be loaded 

    Returns: true if the instruments are all successfully loaded (or already had been), 
             false if any instrument could not be loaded (for example, if the 
             Synthesizer had insufficient memory) 
*javax.sound.midi.Synthesizer.remapInstrument(Instrument,Instrument)*

public boolean remapInstrument(
  javax.sound.midi.Instrument from,
  javax.sound.midi.Instrument to)

Remaps an instrument. Instrument to takes the place of instrument from. For 
example, if from was located at bank number 2, program number 11, remapping 
causes that bank and program location to be occupied instead by to. Instrument 
from is unloaded. 

    from - instrument to be replaced 
    to - new instrument to be used in place of the old instrument 

    Returns: true if the instrument could be remapped, false otherwise 
*javax.sound.midi.Synthesizer.unloadAllInstruments(Soundbank)*

public void unloadAllInstruments(javax.sound.midi.Soundbank soundbank)

Unloads all instruments contained in the specified Soundbank. 

    soundbank - soundbank containing instruments to unload 

*javax.sound.midi.Synthesizer.unloadInstrument(Instrument)*

public void unloadInstrument(javax.sound.midi.Instrument instrument)

Unloads a particular instrument. 

    instrument - instrument to unload 

*javax.sound.midi.Synthesizer.unloadInstruments(Soundbank,Patch[])*

public void unloadInstruments(
  javax.sound.midi.Soundbank soundbank,
  javax.sound.midi.Patch[] patchList)

Unloads the instruments referenced by the specified patches, from the MIDI 
sound bank specified. 

    soundbank - soundbank containing instruments to unload 
    patchList - list of patches for which instruments should be unloaded 



*org.w3c.dom.CharacterData* *CharacterData* The CharacterData interface extends 

public interface interface CharacterData

  implements |org.w3c.dom.Node|

|org.w3c.dom.CharacterData_Description|
|org.w3c.dom.CharacterData_Fields|
|org.w3c.dom.CharacterData_Constructors|
|org.w3c.dom.CharacterData_Methods|

================================================================================

*org.w3c.dom.CharacterData_Methods*
|org.w3c.dom.CharacterData.appendData(String)|Append the string to the end of t
|org.w3c.dom.CharacterData.deleteData(int,int)|Remove a range of 16-bit units f
|org.w3c.dom.CharacterData.getData()|The character data of the node that implem
|org.w3c.dom.CharacterData.getLength()|The number of 16-bit units that are avai
|org.w3c.dom.CharacterData.insertData(int,String)|Insert a string at the specif
|org.w3c.dom.CharacterData.replaceData(int,int,String)|Replace the characters s
|org.w3c.dom.CharacterData.setData(String)|The character data of the node that 
|org.w3c.dom.CharacterData.substringData(int,int)|Extracts a range of data from

*org.w3c.dom.CharacterData_Description*

The CharacterData interface extends Node with a set of attributes and methods 
for accessing character data in the DOM. For clarity this set is defined here 
rather than on each object that uses these attributes and methods. No DOM 
objects correspond directly to CharacterData, though Text and others do inherit 
the interface from it. All offsets in this interface start from 0. As explained 
in the DOMString interface, text strings in the DOM are represented in UTF-16, 
i.e. as a sequence of 16-bit units. In the following, the term 16-bit units is 
used whenever necessary to indicate that indexing on CharacterData is done in 
16-bit units. See also the Document Object Model (DOM) Level 3 Core 
Specification. 


*org.w3c.dom.CharacterData.appendData(String)*

public void appendData(java.lang.String arg)
  throws |org.w3c.dom.DOMException|
         
Append the string to the end of the character data of the node. Upon success, 
data provides access to the concatenation of data and the DOMString specified. 

    arg - The DOMString to append. 

*org.w3c.dom.CharacterData.deleteData(int,int)*

public void deleteData(
  int offset,
  int count)
  throws |org.w3c.dom.DOMException|
         
Remove a range of 16-bit units from the node. Upon success, data and length 
reflect the change. 

    offset - The offset from which to start removing. 
    count - The number of 16-bit units to delete. If the sum of offset and count exceeds 
       length then all 16-bit units from offset to the end of the data are 
       deleted. 

*org.w3c.dom.CharacterData.getData()*

public |java.lang.String| getData()
  throws |org.w3c.dom.DOMException|
         
The character data of the node that implements this interface. The DOM 
implementation may not put arbitrary limits on the amount of data that may be 
stored in a CharacterData node. However, implementation limits may mean that 
the entirety of a node's data may not fit into a single DOMString. In such 
cases, the user may call substringData to retrieve the data in appropriately 
sized pieces. 


*org.w3c.dom.CharacterData.getLength()*

public int getLength()

The number of 16-bit units that are available through data and the 
substringData method below. This may have the value zero, i.e., CharacterData 
nodes may be empty. 


*org.w3c.dom.CharacterData.insertData(int,String)*

public void insertData(
  int offset,
  java.lang.String arg)
  throws |org.w3c.dom.DOMException|
         
Insert a string at the specified 16-bit unit offset. 

    offset - The character offset at which to insert. 
    arg - The DOMString to insert. 

*org.w3c.dom.CharacterData.replaceData(int,int,String)*

public void replaceData(
  int offset,
  int count,
  java.lang.String arg)
  throws |org.w3c.dom.DOMException|
         
Replace the characters starting at the specified 16-bit unit offset with the 
specified string. 

    offset - The offset from which to start replacing. 
    count - The number of 16-bit units to replace. If the sum of offset and count exceeds 
       length, then all 16-bit units to the end of the data are replaced; 
       (i.e., the effect is the same as a remove method call with the same 
       range, followed by an append method invocation). 
    arg - The DOMString with which the range must be replaced. 

*org.w3c.dom.CharacterData.setData(String)*

public void setData(java.lang.String data)
  throws |org.w3c.dom.DOMException|
         
The character data of the node that implements this interface. The DOM 
implementation may not put arbitrary limits on the amount of data that may be 
stored in a CharacterData node. However, implementation limits may mean that 
the entirety of a node's data may not fit into a single DOMString. In such 
cases, the user may call substringData to retrieve the data in appropriately 
sized pieces. 


*org.w3c.dom.CharacterData.substringData(int,int)*

public |java.lang.String| substringData(
  int offset,
  int count)
  throws |org.w3c.dom.DOMException|
         
Extracts a range of data from the node. 

    offset - Start offset of substring to extract. 
    count - The number of 16-bit units to extract. 

    Returns: The specified substring. If the sum of offset and count exceeds the length, 
             then all 16-bit units to the end of the data are returned. 


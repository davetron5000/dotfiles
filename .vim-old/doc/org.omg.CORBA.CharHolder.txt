*org.omg.CORBA.CharHolder* *CharHolder* The Holder for Char.

public final class CharHolder
  extends    |java.lang.Object|
  implements |org.omg.CORBA.portable.Streamable|

|org.omg.CORBA.CharHolder_Description|
|org.omg.CORBA.CharHolder_Fields|
|org.omg.CORBA.CharHolder_Constructors|
|org.omg.CORBA.CharHolder_Methods|

================================================================================

*org.omg.CORBA.CharHolder_Fields*
|char_org.omg.CORBA.CharHolder.value|

*org.omg.CORBA.CharHolder_Constructors*
|org.omg.CORBA.CharHolder()|Constructs a new CharHolder object with its  value 
|org.omg.CORBA.CharHolder(char)|Constructs a new CharHolder object for the give

*org.omg.CORBA.CharHolder_Methods*
|org.omg.CORBA.CharHolder._read(InputStream)|Reads from input and initalizes th
|org.omg.CORBA.CharHolder._type()|Returns the TypeCode object  corresponding  t
|org.omg.CORBA.CharHolder._write(OutputStream)|Marshals to output the value in 

*org.omg.CORBA.CharHolder_Description*

The Holder for Char. For more information on Holder files, see "Generated 
Files: Holder Files". A Holder class for a char that is used to store "out" and 
"inout" parameters in IDL methods. If an IDL method signature has an IDL char 
as an "out" or "inout" parameter, the programmer must pass an instance of 
CharHolder as the corresponding parameter in the method invocation; for "inout" 
parameters, the programmer must also fill the "in" value to be sent to the 
server. Before the method invocation returns, the ORB will fill in the value 
corresponding to the "out" value returned from the server. 

If myCharHolder is an instance of CharHolder, the value stored in its value 
field can be accessed with myCharHolder.value. 


*char_org.omg.CORBA.CharHolder.value*

The Holder for Char. For more information on Holder files, see "Generated 
Files: Holder Files". A Holder class for a char that is used to store "out" and 
"inout" parameters in IDL methods. If an IDL method signature has an IDL char 
as an "out" or "inout" parameter, the programmer must pass an instance of 
CharHolder as the corresponding parameter in the method invocation; for "inout" 
parameters, the programmer must also fill the "in" value to be sent to the 
server. Before the method invocation returns, the ORB will fill in the value 
corresponding to the "out" value returned from the server. 

If myCharHolder is an instance of CharHolder, the value stored in its value 
field can be accessed with myCharHolder.value. 



*org.omg.CORBA.CharHolder()*

public CharHolder()

Constructs a new CharHolder object with its value field initialized to 0. 


*org.omg.CORBA.CharHolder(char)*

public CharHolder(char initial)

Constructs a new CharHolder object for the given char. 

    initial - the char with which to initialize the value field of the new CharHolder object 

*org.omg.CORBA.CharHolder._read(InputStream)*

public void _read(org.omg.CORBA.portable.InputStream input)

Reads from input and initalizes the value in this CharHolder object with the 
unmarshalled data. 

    input - the InputStream containing CDR formatted data from the wire 

*org.omg.CORBA.CharHolder._type()*

public |org.omg.CORBA.TypeCode| _type()

Returns the TypeCode object corresponding to the value held in this CharHolder 
object. 


    Returns: the TypeCode of the value held in this CharHolder object 
*org.omg.CORBA.CharHolder._write(OutputStream)*

public void _write(org.omg.CORBA.portable.OutputStream output)

Marshals to output the value in this CharHolder object. 

    output - the OutputStream which will contain the CDR formatted data 



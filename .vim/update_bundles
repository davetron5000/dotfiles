#!/usr/bin/env ruby

require 'optparse'

options = {}

opts = OptionParser.new do |o|
  o.on("--clean","Delete everything before re-cloning") do
    options[:clean] = true
  end
  o.on("--prune","Prune explicitly disabled plugins") do
    options[:prune] = true
  end
end
opts.parse!
git_bundles = [
  "git@github.com:msanders/snipmate.vim.git",
  "git@github.com:tpope/vim-markdown.git",
  "git@github.com:vim-ruby/vim-ruby.git",
  "https://github.com/ctrlpvim/ctrlp.vim",
  "git@github.com:jlanzarotta/bufexplorer.git",
  "git@github.com:tpope/vim-rails.git",
  "https://github.com/leshill/vim-json.git",
  "https://github.com/godlygeek/tabular.git",
  "git@github.com:nanotech/jellybeans.vim.git",
  "https://github.com/othree/html5.vim.git",
  "https://github.com/tpope/vim-obsession",
  "https://github.com/tpope/vim-projectionist",
  "git@github.com:rizzatti/dash.vim.git",
  "git@github.com:davetron5000/vim-timeline.git",
  "https://github.com/mustache/vim-mustache-handlebars.git",
  "git@github.com:hashivim/vim-terraform.git",
  "https://github.com/fatih/vim-go",
  "https://github.com/pangloss/vim-javascript.git",
  "git@github.com:maxmellon/vim-jsx-pretty",
  "git@github.com:davetron5000/vim-pml.git",
  "git@github.com:ParamagicDev/vim-medic_chalk.git",
  "git@github.com:vim-scripts/Risto-Color-Scheme.git",
  "git@github.com:fneu/breezy.git",
  "git@github.com:folke/tokyonight.nvim.git",
  "git@github.com:catppuccin/nvim.git",
  "git@github.com:epmatsw/ag.vim.git",
  "git@github.com:rose-pine/neovim.git",
  "git@github.com:github/copilot.vim.git",
  "git@github.com:nvim-lua/plenary.nvim", # Needed by CopilotChat
  "git@github.com:CopilotC-Nvim/CopilotChat.nvim",
  "git@github.com:nvim-tree/nvim-web-devicons.git", # Unclear if needed
  "git@github.com:vim-airline/vim-airline",
]

disabled = [
  "git@github.com:thisivan/vim-bufexplorer.git",
  "git@github.com:mistweaverco/bafa.nvim.git",
  "git@github.com:neovim/nvim-lspconfig.git",
  "git@github.com:mxw/vim-jsx.git",
  "git@github.com:scrooloose/syntastic.git",
  "https://github.com/tpope/vim-bundler",
  "git@github.com:freitass/todo.txt-vim.git",
  "git@github.com:edsono/vim-matchit.git",
  "https://github.com/janko-m/vim-test.git",
  "git@github.com:tpope/vim-git.git",
  "https://github.com/tpope/vim-fugitive.git",
  "git@github.com:vim-scripts/Command-T.git",
  "https://github.com/w0rp/ale",
  "https://github.com/lambdatoast/elm.vim",
  "git@github.com:davetron5000/java-javadoc-vim.git",
  "https://github.com/dag/vim-fish.git",
  "git@github.com:davetron5000/javax-javadoc-vim.git",
  "git@github.com:kana/vim-xml-autons.git",
  "git@github.com:vim-scripts/VimClojure.git",
  "git@github.com:jacekd/vim-iawriter.git",
	"git@github.com:juvenn/mustache.vim.git",
  "git@github.com:timcharper/textile.vim.git",
  "git@github.com:tpope/vim-cucumber.git",
  "git@github.com:derekwyatt/vim-scala.git",
  "git@github.com:dagwieers/asciidoc-vim.git",
  "git@github.com:elixir-lang/vim-elixir.git",
  "git@github.com:tpope/vim-haml.git",
  "git@github.com:thoughtbot/vim-rspec.git",
  "git@github.com:depuracao/vim-rdoc.git",
  "git@github.com:altercation/vim-colors-solarized.git",
  "git@github.com:tpope/vim-vividchalk.git",
  "git@github.com:kchmck/vim-coffee-script.git",
  "git@github.com:mikewest/vimroom.git",
  "https://github.com/leafgarland/typescript-vim.git",
]


mine = [
  'vim-pml',
  'java-javadoc-vim',
  'javax-javadoc-vim',
]

require 'fileutils'
require 'open-uri'

bundles_dir = File.join(File.dirname(__FILE__), "pack", "bundle", "start")
FileUtils.mkdir_p bundles_dir

FileUtils.cd(bundles_dir)

if options[:clean]
  puts "Trashing everything (lookout!)"
  Dir["*"].each do |d| 
    if mine.include? d
      puts "Skipping #{d}; it's mine, manually pull to update"
    else
      FileUtils.rm_rf d
    end
  end
end

updated_something = false
git_bundles.each do |url|
  dir = url.split('/').last.sub(/\.git$/, '')
  if File.exist?(dir)
    puts "  Skipping #{dir}, as it already exists"
  else
    puts "  Unpacking #{url} into #{dir}"
    if system({ "GIT_TERMINAL_PROMPT" => "0"},"git clone #{url} #{dir}")
      updated_something = true
      FileUtils.rm_rf(File.join(dir, ".git"))
    else
      STDERR.puts "Problem with #{url}"
    end
  end
end

disabled.each do |url|
  dir = url.split('/').last.sub(/\.git$/, '')
  if File.exist?(dir)
    if options[:prune]
      puts "Cleaning #{dir} that is now disabled"
      FileUtils.rm_rf dir
      updated_something = true
    else
      puts "You've disabled #{dir}, but haven't used --prune.  Being safe and leaving it"
    end
  end
end
if updated_something
  puts "Your plugins have changed.  Run :helptags ALL next time you open vim!"
end

*java.security.cert.CertPathBuilder* *CertPathBuilder* A class for building cert

public class CertPathBuilder
  extends    |java.lang.Object|

|java.security.cert.CertPathBuilder_Description|
|java.security.cert.CertPathBuilder_Fields|
|java.security.cert.CertPathBuilder_Constructors|
|java.security.cert.CertPathBuilder_Methods|

================================================================================

*java.security.cert.CertPathBuilder_Constructors*
|java.security.cert.CertPathBuilder(CertPathBuilderSpi,Provider,String)|Creates

*java.security.cert.CertPathBuilder_Methods*
|java.security.cert.CertPathBuilder.build(CertPathParameters)|Attempts to build
|java.security.cert.CertPathBuilder.getAlgorithm()|Returns the name of the algo
|java.security.cert.CertPathBuilder.getDefaultType()|Returns the default CertPa
|java.security.cert.CertPathBuilder.getInstance(String)|Returns a CertPathBuild
|java.security.cert.CertPathBuilder.getInstance(String,Provider)|Returns a Cert
|java.security.cert.CertPathBuilder.getInstance(String,String)|Returns a CertPa
|java.security.cert.CertPathBuilder.getProvider()|Returns the provider of this 

*java.security.cert.CertPathBuilder_Description*

A class for building certification paths (also known as certificate chains). 

This class uses a provider-based architecture, as described in the Java 
Cryptography Architecture. To create a CertPathBuilder, call one of the static 
getInstance methods, passing in the algorithm name of the CertPathBuilder 
desired and optionally the name of the provider desired. 

Once a CertPathBuilder object has been created, certification paths can be 
constructed by calling the build(|java.security.cert.CertPathBuilder|) method 
and passing it an algorithm-specific set of parameters. If successful, the 
result (including the CertPath that was built) is returned in an object that 
implements the CertPathBuilderResult interface. 

Concurrent Access 

The static methods of this class are guaranteed to be thread-safe. Multiple 
threads may concurrently invoke the static methods defined in this class with 
no ill effects. 

However, this is not true for the non-static methods defined by this class. 
Unless otherwise documented by a specific provider, threads that need to access 
a single CertPathBuilder instance concurrently should synchronize amongst 
themselves and provide the necessary locking. Multiple threads each 
manipulating a different CertPathBuilder instance need not synchronize. 


*java.security.cert.CertPathBuilder(CertPathBuilderSpi,Provider,String)*

protected CertPathBuilder(
  java.security.cert.CertPathBuilderSpi builderSpi,
  java.security.Provider provider,
  java.lang.String algorithm)

Creates a CertPathBuilder object of the given algorithm, and encapsulates the 
given provider implementation (SPI object) in it. 

    builderSpi - the provider implementation 
    provider - the provider 
    algorithm - the algorithm name 

*java.security.cert.CertPathBuilder.build(CertPathParameters)*

public final |java.security.cert.CertPathBuilderResult| build(java.security.cert.CertPathParameters params)
  throws |java.security.cert.CertPathBuilderException|
         |java.security.InvalidAlgorithmParameterException|
         
Attempts to build a certification path using the specified algorithm parameter 
set. 

    params - the algorithm parameters 

    Returns: the result of the build algorithm 
*java.security.cert.CertPathBuilder.getAlgorithm()*

public final |java.lang.String| getAlgorithm()

Returns the name of the algorithm of this CertPathBuilder. 


    Returns: the name of the algorithm of this CertPathBuilder 
*java.security.cert.CertPathBuilder.getDefaultType()*

public static final |java.lang.String| getDefaultType()

Returns the default CertPathBuilder type as specified in the Java security 
properties file, or the string PKIX if no such property exists. The Java 
security properties file is located in the file named 
<JAVA_HOME>/lib/security/java.security, where <JAVA_HOME> refers to the 
directory where the JDK was installed. 

The default CertPathBuilder type can be used by applications that do not want 
to use a hard-coded type when calling one of the getInstance methods, and want 
to provide a default type in case a user does not specify its own. 

The default CertPathBuilder type can be changed by setting the value of the 
"certpathbuilder.type" security property (in the Java security properties file) 
to the desired type. 


    Returns: the default CertPathBuilder type as specified in the Java security properties 
             file, or the string PKIX if no such property exists. 
*java.security.cert.CertPathBuilder.getInstance(String)*

public static |java.security.cert.CertPathBuilder| getInstance(java.lang.String algorithm)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a CertPathBuilder object that implements the specified algorithm. 

If the default provider package provides an implementation of the specified 
CertPathBuilder algorithm, an instance of CertPathBuilder containing that 
implementation is returned. If the requested algorithm is not available in the 
default package, other packages are searched. 

    algorithm - the name of the requested CertPathBuilder algorithm 

    Returns: a CertPathBuilder object that implements the specified algorithm 
*java.security.cert.CertPathBuilder.getInstance(String,Provider)*

public static |java.security.cert.CertPathBuilder| getInstance(
  java.lang.String algorithm,
  java.security.Provider provider)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a CertPathBuilder object that implements the specified algorithm, as 
supplied by the specified provider. Note: the provider doesn't have to be 
registered. 

    algorithm - the name of the requested CertPathBuilder algorithm 
    provider - the provider 

    Returns: a CertPathBuilder object that implements the specified algorithm, as supplied 
             by the specified provider 
*java.security.cert.CertPathBuilder.getInstance(String,String)*

public static |java.security.cert.CertPathBuilder| getInstance(
  java.lang.String algorithm,
  java.lang.String provider)
  throws |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         
Returns a CertPathBuilder object that implements the specified algorithm, as 
supplied by the specified provider. 

    algorithm - the name of the requested CertPathBuilder algorithm 
    provider - the name of the provider 

    Returns: a CertPathBuilder object that implements the specified algorithm, as supplied 
             by the specified provider 
*java.security.cert.CertPathBuilder.getProvider()*

public final |java.security.Provider| getProvider()

Returns the provider of this CertPathBuilder. 


    Returns: the provider of this CertPathBuilder 


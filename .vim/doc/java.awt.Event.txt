*java.awt.Event* *Event* NOTE: The Event class is obsolete and is 
 available only for backwards compatilibility.

public class Event
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.awt.Event_Description|
|java.awt.Event_Fields|
|java.awt.Event_Constructors|
|java.awt.Event_Methods|

====================================================================================================================================================================================

*java.awt.Event_Fields*
|int_java.awt.Event.ACTION_EVENT|
|int_java.awt.Event.ALT_MASK|
|java.lang.Object_java.awt.Event.arg|
|int_java.awt.Event.BACK_SPACE|
|int_java.awt.Event.CAPS_LOCK|
|int_java.awt.Event.clickCount|
|int_java.awt.Event.CTRL_MASK|
|int_java.awt.Event.DELETE|
|int_java.awt.Event.DOWN|
|int_java.awt.Event.END|
|int_java.awt.Event.ENTER|
|int_java.awt.Event.ESCAPE|
|java.awt.Event_java.awt.Event.evt|
|int_java.awt.Event.F1|
|int_java.awt.Event.F10|
|int_java.awt.Event.F11|
|int_java.awt.Event.F12|
|int_java.awt.Event.F2|
|int_java.awt.Event.F3|
|int_java.awt.Event.F4|
|int_java.awt.Event.F5|
|int_java.awt.Event.F6|
|int_java.awt.Event.F7|
|int_java.awt.Event.F8|
|int_java.awt.Event.F9|
|int_java.awt.Event.GOT_FOCUS|
|int_java.awt.Event.HOME|
|int_java.awt.Event.id|
|int_java.awt.Event.INSERT|
|int_java.awt.Event.key|
|int_java.awt.Event.KEY_ACTION|
|int_java.awt.Event.KEY_ACTION_RELEASE|
|int_java.awt.Event.KEY_PRESS|
|int_java.awt.Event.KEY_RELEASE|
|int_java.awt.Event.LEFT|
|int_java.awt.Event.LIST_DESELECT|
|int_java.awt.Event.LIST_SELECT|
|int_java.awt.Event.LOAD_FILE|
|int_java.awt.Event.LOST_FOCUS|
|int_java.awt.Event.META_MASK|
|int_java.awt.Event.modifiers|
|int_java.awt.Event.MOUSE_DOWN|
|int_java.awt.Event.MOUSE_DRAG|
|int_java.awt.Event.MOUSE_ENTER|
|int_java.awt.Event.MOUSE_EXIT|
|int_java.awt.Event.MOUSE_MOVE|
|int_java.awt.Event.MOUSE_UP|
|int_java.awt.Event.NUM_LOCK|
|int_java.awt.Event.PAUSE|
|int_java.awt.Event.PGDN|
|int_java.awt.Event.PGUP|
|int_java.awt.Event.PRINT_SCREEN|
|int_java.awt.Event.RIGHT|
|int_java.awt.Event.SAVE_FILE|
|int_java.awt.Event.SCROLL_ABSOLUTE|
|int_java.awt.Event.SCROLL_BEGIN|
|int_java.awt.Event.SCROLL_END|
|int_java.awt.Event.SCROLL_LINE_DOWN|
|int_java.awt.Event.SCROLL_LINE_UP|
|int_java.awt.Event.SCROLL_LOCK|
|int_java.awt.Event.SCROLL_PAGE_DOWN|
|int_java.awt.Event.SCROLL_PAGE_UP|
|int_java.awt.Event.SHIFT_MASK|
|int_java.awt.Event.TAB|
|java.lang.Object_java.awt.Event.target|
|int_java.awt.Event.UP|
|long_java.awt.Event.when|
|int_java.awt.Event.WINDOW_DEICONIFY|
|int_java.awt.Event.WINDOW_DESTROY|
|int_java.awt.Event.WINDOW_EXPOSE|
|int_java.awt.Event.WINDOW_ICONIFY|
|int_java.awt.Event.WINDOW_MOVED|
|int_java.awt.Event.x|
|int_java.awt.Event.y|

*java.awt.Event_Constructors*
|java.awt.Event(Object,int,Object)|NOTE: The Event class is obsolete and is  available only for backwards compatilibility.
|java.awt.Event(Object,long,int,int,int,int,int)|NOTE: The Event class is obsolete and is  available only for backwards compatilibility.
|java.awt.Event(Object,long,int,int,int,int,int,Object)|NOTE: The Event class is obsolete and is  available only for backwards compatilibility.

*java.awt.Event_Methods*
|java.awt.Event.controlDown()|NOTE: The Event class is obsolete and is  available only for backwards compatilibility.
|java.awt.Event.metaDown()|NOTE: The Event class is obsolete and is  available only for backwards compatilibility.
|java.awt.Event.paramString()|NOTE: The Event class is obsolete and is  available only for backwards compatilibility.
|java.awt.Event.shiftDown()|NOTE: The Event class is obsolete and is  available only for backwards compatilibility.
|java.awt.Event.toString()|NOTE: The Event class is obsolete and is  available only for backwards compatilibility.
|java.awt.Event.translate(int,int)|NOTE: The Event class is obsolete and is  available only for backwards compatilibility.

*java.awt.Event_Description*

NOTE: The Event class is obsolete and is available only for backwards compatilibility. It has been replaced by the AWTEvent class and its subclasses. 

Event is a platform-independent class that encapsulates events from the platform's Graphical User Interface in the Java1.0 event model. In Java1.1 and later versions, the Event 
class is maintained only for backwards compatibilty. The information in this class description is provided to assist programmers in converting Java1.0 programs to the new event 
model. 

In the Java1.0 event model, an event contains an (|java.awt.Event|) field that indicates what type of event it is and which other Event variables are relevant for the event. 

For keyboard events, (|java.awt.Event|) contains a value indicating which key was activated, and (|java.awt.Event|) contains the modifiers for that event. For the KEY_PRESS and 
KEY_RELEASE event ids, the value of key is the unicode character code for the key. For KEY_ACTION and KEY_ACTION_RELEASE, the value of key is one of the defined action-key 
identifiers in the Event class (PGUP, PGDN, F1, F2, etc). 



*int_java.awt.Event.ACTION_EVENT*

This event indicates that the user wants some action to occur. 


*int_java.awt.Event.ALT_MASK*

This flag indicates that the Alt key was down when the event occurred. For mouse events, this flag indicates that the middle mouse button was pressed or released. 


*java.lang.Object_java.awt.Event.arg*

An arbitrary argument of the event. The value of this field depends on the type of event. arg has been replaced by event specific property. 


*int_java.awt.Event.BACK_SPACE*

The BackSpace key. 


*int_java.awt.Event.CAPS_LOCK*

The Caps Lock key, a non-ASCII action key. 


*int_java.awt.Event.clickCount*

For MOUSE_DOWN events, this field indicates the number of consecutive clicks. For other events, its value is 0. This field has been replaced by MouseEvent.getClickCount(). 


*int_java.awt.Event.CTRL_MASK*

This flag indicates that the Control key was down when the event occurred. 


*int_java.awt.Event.DELETE*

The Delete key. 


*int_java.awt.Event.DOWN*

The Down Arrow key, a non-ASCII action key. 


*int_java.awt.Event.END*

The End key, a non-ASCII action key. 


*int_java.awt.Event.ENTER*

The Enter key. 


*int_java.awt.Event.ESCAPE*

The Escape key. 


*java.awt.Event_java.awt.Event.evt*

The next event. This field is set when putting events into a linked list. This has been replaced by EventQueue. 


*int_java.awt.Event.F1*

The F1 function key, a non-ASCII action key. 


*int_java.awt.Event.F10*

The F10 function key, a non-ASCII action key. 


*int_java.awt.Event.F11*

The F11 function key, a non-ASCII action key. 


*int_java.awt.Event.F12*

The F12 function key, a non-ASCII action key. 


*int_java.awt.Event.F2*

The F2 function key, a non-ASCII action key. 


*int_java.awt.Event.F3*

The F3 function key, a non-ASCII action key. 


*int_java.awt.Event.F4*

The F4 function key, a non-ASCII action key. 


*int_java.awt.Event.F5*

The F5 function key, a non-ASCII action key. 


*int_java.awt.Event.F6*

The F6 function key, a non-ASCII action key. 


*int_java.awt.Event.F7*

The F7 function key, a non-ASCII action key. 


*int_java.awt.Event.F8*

The F8 function key, a non-ASCII action key. 


*int_java.awt.Event.F9*

The F9 function key, a non-ASCII action key. 


*int_java.awt.Event.GOT_FOCUS*

A component gained the focus. 


*int_java.awt.Event.HOME*

The Home key, a non-ASCII action key. 


*int_java.awt.Event.id*

Indicates which type of event the event is, and which other Event variables are relevant for the event. This has been replaced by AWTEvent.getID() 


*int_java.awt.Event.INSERT*

The Insert key, a non-ASCII action key. 


*int_java.awt.Event.key*

The key code of the key that was pressed in a keyboard event. This has been replaced by KeyEvent.getKeyCode() 


*int_java.awt.Event.KEY_ACTION*

The user has pressed a non-ASCII action key. The key field contains a value that indicates that the event occurred on one of the action keys, which comprise the 12 function keys, 
the arrow (cursor) keys, Page Up, Page Down, Home, End, Print Screen, Scroll Lock, Caps Lock, Num Lock, Pause, and Insert. 


*int_java.awt.Event.KEY_ACTION_RELEASE*

The user has released a non-ASCII action key. The key field contains a value that indicates that the event occurred on one of the action keys, which comprise the 12 function keys, 
the arrow (cursor) keys, Page Up, Page Down, Home, End, Print Screen, Scroll Lock, Caps Lock, Num Lock, Pause, and Insert. 


*int_java.awt.Event.KEY_PRESS*

The user has pressed a normal key. 


*int_java.awt.Event.KEY_RELEASE*

The user has released a normal key. 


*int_java.awt.Event.LEFT*

The Left Arrow key, a non-ASCII action key. 


*int_java.awt.Event.LIST_DESELECT*

An item in a list has been deselected. 


*int_java.awt.Event.LIST_SELECT*

An item in a list has been selected. 


*int_java.awt.Event.LOAD_FILE*

A file loading event. 


*int_java.awt.Event.LOST_FOCUS*

A component lost the focus. 


*int_java.awt.Event.META_MASK*

This flag indicates that the Meta key was down when the event occurred. For mouse events, this flag indicates that the right button was pressed or released. 


*int_java.awt.Event.modifiers*

The state of the modifier keys. This is replaced with InputEvent.getModifiers() In java 1.1 MouseEvent and KeyEvent are subclasses of InputEvent. 


*int_java.awt.Event.MOUSE_DOWN*

The user has pressed the mouse button. The ALT_MASK flag indicates that the middle button has been pressed. The META_MASKflag indicates that the right button has been pressed. 


*int_java.awt.Event.MOUSE_DRAG*

The user has moved the mouse with a button pressed. The ALT_MASK flag indicates that the middle button is being pressed. The META_MASK flag indicates that the right button is 
being pressed. 


*int_java.awt.Event.MOUSE_ENTER*

The mouse has entered a component. 


*int_java.awt.Event.MOUSE_EXIT*

The mouse has exited a component. 


*int_java.awt.Event.MOUSE_MOVE*

The mouse has moved with no button pressed. 


*int_java.awt.Event.MOUSE_UP*

The user has released the mouse button. The ALT_MASK flag indicates that the middle button has been released. The META_MASKflag indicates that the right button has been released. 


*int_java.awt.Event.NUM_LOCK*

The Num Lock key, a non-ASCII action key. 


*int_java.awt.Event.PAUSE*

The Pause key, a non-ASCII action key. 


*int_java.awt.Event.PGDN*

The Page Down key, a non-ASCII action key. 


*int_java.awt.Event.PGUP*

The Page Up key, a non-ASCII action key. 


*int_java.awt.Event.PRINT_SCREEN*

The Print Screen key, a non-ASCII action key. 


*int_java.awt.Event.RIGHT*

The Right Arrow key, a non-ASCII action key. 


*int_java.awt.Event.SAVE_FILE*

A file saving event. 


*int_java.awt.Event.SCROLL_ABSOLUTE*

The user has moved the bubble (thumb) in a scroll bar, moving to an "absolute" position, rather than to an offset from the last postion. 


*int_java.awt.Event.SCROLL_BEGIN*

The scroll begin event. 


*int_java.awt.Event.SCROLL_END*

The scroll end event. 


*int_java.awt.Event.SCROLL_LINE_DOWN*

The user has activated the line down area of a scroll bar. 


*int_java.awt.Event.SCROLL_LINE_UP*

The user has activated the line up area of a scroll bar. 


*int_java.awt.Event.SCROLL_LOCK*

The Scroll Lock key, a non-ASCII action key. 


*int_java.awt.Event.SCROLL_PAGE_DOWN*

The user has activated the page down area of a scroll bar. 


*int_java.awt.Event.SCROLL_PAGE_UP*

The user has activated the page up area of a scroll bar. 


*int_java.awt.Event.SHIFT_MASK*

This flag indicates that the Shift key was down when the event occurred. 


*int_java.awt.Event.TAB*

The Tab key. 


*java.lang.Object_java.awt.Event.target*

The target component. This indicates the component over which the event occurred or with which the event is associated. This object has been replaced by AWTEvent.getSource() 


*int_java.awt.Event.UP*

The Up Arrow key, a non-ASCII action key. 


*long_java.awt.Event.when*

The time stamp. Replaced by InputEvent.getWhen(). 


*int_java.awt.Event.WINDOW_DEICONIFY*

The user has asked the window manager to de-iconify the window. 


*int_java.awt.Event.WINDOW_DESTROY*

The user has asked the window manager to kill the window. 


*int_java.awt.Event.WINDOW_EXPOSE*

The user has asked the window manager to expose the window. 


*int_java.awt.Event.WINDOW_ICONIFY*

The user has asked the window manager to iconify the window. 


*int_java.awt.Event.WINDOW_MOVED*

The user has asked the window manager to move the window. 


*int_java.awt.Event.x*

The x coordinate of the event. Replaced by MouseEvent.getX() 


*int_java.awt.Event.y*

The y coordinate of the event. Replaced by MouseEvent.getY() 



*java.awt.Event(Object,int,Object)*

public Event(
  java.lang.Object target,
  int id,
  java.lang.Object arg)

NOTE: The Event class is obsolete and is available only for backwards compatilibility. It has been replaced by the AWTEvent class and its subclasses. 

Creates an instance of Event with the specified target component, event type, and argument. 

    target - the target component. 
    id - the event type. 
    arg - the specified argument. 

*java.awt.Event(Object,long,int,int,int,int,int)*

public Event(
  java.lang.Object target,
  long when,
  int id,
  int x,
  int y,
  int key,
  int modifiers)

NOTE: The Event class is obsolete and is available only for backwards compatilibility. It has been replaced by the AWTEvent class and its subclasses. 

Creates an instance of Event, with the specified target component, time stamp, event type, x and y coordinates, keyboard key, state of the modifier keys, and an argument set to 
null. 

    target - the target component. 
    when - the time stamp. 
    id - the event type. 
    x - the x coordinate. 
    y - the y coordinate. 
    key - the key pressed in a keyboard event. 
    modifiers - the state of the modifier keys. 

*java.awt.Event(Object,long,int,int,int,int,int,Object)*

public Event(
  java.lang.Object target,
  long when,
  int id,
  int x,
  int y,
  int key,
  int modifiers,
  java.lang.Object arg)

NOTE: The Event class is obsolete and is available only for backwards compatilibility. It has been replaced by the AWTEvent class and its subclasses. 

Creates an instance of Event with the specified target component, time stamp, event type, x and y coordinates, keyboard key, state of the modifier keys, and argument. 

    target - the target component. 
    when - the time stamp. 
    id - the event type. 
    x - the x coordinate. 
    y - the y coordinate. 
    key - the key pressed in a keyboard event. 
    modifiers - the state of the modifier keys. 
    arg - the specified argument. 

*java.awt.Event.controlDown()*

public boolean controlDown()

NOTE: The Event class is obsolete and is available only for backwards compatilibility. It has been replaced by the AWTEvent class and its subclasses. 

Checks if the Control key is down. 



    Returns: true if the key is down; false otherwise. 

*java.awt.Event.metaDown()*

public boolean metaDown()

NOTE: The Event class is obsolete and is available only for backwards compatilibility. It has been replaced by the AWTEvent class and its subclasses. 

Checks if the Meta key is down. 



    Returns: true if the key is down; false otherwise. 

*java.awt.Event.paramString()*

protected |java.lang.String| paramString()

NOTE: The Event class is obsolete and is available only for backwards compatilibility. It has been replaced by the AWTEvent class and its subclasses. 

Returns a string representing the state of this Event. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary 
between implementations. The returned string may be empty but may not be null. 



    Returns: the parameter string of this event 

*java.awt.Event.shiftDown()*

public boolean shiftDown()

NOTE: The Event class is obsolete and is available only for backwards compatilibility. It has been replaced by the AWTEvent class and its subclasses. 

Checks if the Shift key is down. 



    Returns: true if the key is down; false otherwise. 

*java.awt.Event.toString()*

public |java.lang.String| toString()

NOTE: The Event class is obsolete and is available only for backwards compatilibility. It has been replaced by the AWTEvent class and its subclasses. 

Returns a representation of this event's values as a string. 



    Returns: a string that represents the event and the values of its member fields. 

*java.awt.Event.translate(int,int)*

public void translate(
  int dx,
  int dy)

NOTE: The Event class is obsolete and is available only for backwards compatilibility. It has been replaced by the AWTEvent class and its subclasses. 

Translates this event so that its x and y coordinates are increased by dx and dy, respectively. 

This method translates an event relative to the given component. This involves, at a minimum, translating the coordinates into the local coordinate system of the given component. 
It may also involve translating a region in the case of an expose event. 


    dx - the distance to translate the x coordinate. 
    dy - the distance to translate the y coordinate. 



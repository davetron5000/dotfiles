*javax.management.remote.JMXConnector* *JMXConnector* The client end of a JMX AP

public interface interface JMXConnector


|javax.management.remote.JMXConnector_Description|
|javax.management.remote.JMXConnector_Fields|
|javax.management.remote.JMXConnector_Constructors|
|javax.management.remote.JMXConnector_Methods|

================================================================================

*javax.management.remote.JMXConnector_Fields*
|java.lang.String_javax.management.remote.JMXConnector.CREDENTIALS|

*javax.management.remote.JMXConnector_Methods*
|javax.management.remote.JMXConnector.addConnectionNotificationListener(NotificationListener,NotificationFilter,Object)|
|javax.management.remote.JMXConnector.close()|Closes the client connection to i
|javax.management.remote.JMXConnector.connect()|Establishes the connection to t
|javax.management.remote.JMXConnector.connect(Map)|Establishes the connection t
|javax.management.remote.JMXConnector.getConnectionId()|Gets this connection's 
|javax.management.remote.JMXConnector.getMBeanServerConnection()|Returns an MBe
|javax.management.remote.JMXConnector.getMBeanServerConnection(Subject)|Returns
|javax.management.remote.JMXConnector.removeConnectionNotificationListener(NotificationListener)|
|javax.management.remote.JMXConnector.removeConnectionNotificationListener(NotificationListener,NotificationFilter,Object)|

*javax.management.remote.JMXConnector_Description*

The client end of a JMX API connector. An object of this type can be used to 
establish a connection to a connector server. 

A newly-created object of this type is unconnected. Its 
connect(|javax.management.remote.JMXConnector|) method must be called before it 
can be used. However, objects created by 
JMXConnectorFactory.connect(|javax.management.remote.JMXConnectorFactory|) are 
already connected. 


*java.lang.String_javax.management.remote.JMXConnector.CREDENTIALS*

The client end of a JMX API connector. An object of this type can be used to 
establish a connection to a connector server. 

A newly-created object of this type is unconnected. Its 
connect(|javax.management.remote.JMXConnector|) method must be called before it 
can be used. However, objects created by 
JMXConnectorFactory.connect(|javax.management.remote.JMXConnectorFactory|) are 
already connected. 



*javax.management.remote.JMXConnector.addConnectionNotificationListener(NotificationListener,NotificationFilter,Object)*

public void addConnectionNotificationListener(
  javax.management.NotificationListener listener,
  javax.management.NotificationFilter filter,
  java.lang.Object handback)

Adds a listener to be informed of changes in connection status. The listener 
will receive notifications of type 
(|javax.management.remote.JMXConnectionNotification|) . An implementation can 
send other types of notifications too. 

Any number of listeners can be added with this method. The same listener can be 
added more than once with the same or different values for the filter and 
handback. There is no special treatment of a duplicate entry. For example, if a 
listener is registered twice with no filter, then its handleNotification method 
will be called twice for each notification. 

    listener - a listener to receive connection status notifications. 
    filter - a filter to select which notifications are to be delivered to the listener, or 
       null if all notifications are to be delivered. 
    handback - an object to be given to the listener along with each notification. Can be 
       null. 

*javax.management.remote.JMXConnector.close()*

public void close()
  throws |java.io.IOException|
         
Closes the client connection to its server. Any ongoing or new request using 
the MBeanServerConnection returned by (|javax.management.remote.JMXConnector|) 
will get an IOException. 

If close has already been called successfully on this object, calling it again 
has no effect. If close has never been called, or if it was called but produced 
an exception, an attempt will be made to close the connection. This attempt can 
succeed, in which case close will return normally, or it can generate an 
exception. 

Closing a connection is a potentially slow operation. For example, if the 
server has crashed, the close operation might have to wait for a network 
protocol timeout. Callers that do not want to block in a close operation should 
do it in a separate thread. 


*javax.management.remote.JMXConnector.connect()*

public void connect()
  throws |java.io.IOException|
         
Establishes the connection to the connector server. This method is equivalent 
to connect(null)(|javax.management.remote.JMXConnector|) . 


*javax.management.remote.JMXConnector.connect(Map)*

public void connect(java.util.Map env)
  throws |java.io.IOException|
         
Establishes the connection to the connector server. 

If connect has already been called successfully on this object, calling it 
again has no effect. If, however, (|javax.management.remote.JMXConnector|) was 
called after connect, the new connect will throw an IOException. 

Otherwise, either connect has never been called on this object, or it has been 
called but produced an exception. Then calling connect will attempt to 
establish a connection to the connector server. 

    env - the properties of the connection. Properties in this map override properties in 
       the map specified when the JMXConnector was created, if any. This 
       parameter can be null, which is equivalent to an empty map. 

*javax.management.remote.JMXConnector.getConnectionId()*

public |java.lang.String| getConnectionId()
  throws |java.io.IOException|
         
Gets this connection's ID from the connector server. For a given connector 
server, every connection will have a unique id which does not change during the 
lifetime of the connection. 


    Returns: the unique ID of this connection. This is the same as the ID that the connector 
             server includes in its {@link JMXConnectionNotification}s. The 
             {@link javax.management.remote package description} describes the 
             conventions for connection IDs. 
*javax.management.remote.JMXConnector.getMBeanServerConnection()*

public |javax.management.MBeanServerConnection| getMBeanServerConnection()
  throws |java.io.IOException|
         
Returns an MBeanServerConnection object representing a remote MBean server. For 
a given JMXConnector, two successful calls to this method will usually return 
the same MBeanServerConnection object, though this is not required. 

For each method in the returned MBeanServerConnection, calling the method 
causes the corresponding method to be called in the remote MBean server. The 
value returned by the MBean server method is the value returned to the client. 
If the MBean server method produces an Exception, the same Exception is seen by 
the client. If the MBean server method, or the attempt to call it, produces an 
Error, the Error is wrapped in a 
(|javax.management.remote.JMXServerErrorException|) , which is seen by the 
client. 

Calling this method is equivalent to calling 
getMBeanServerConnection(null)(|javax.management.remote.JMXConnector|) meaning 
that no delegation subject is specified and that all the operations called on 
the MBeanServerConnection must use the authenticated subject, if any. 


    Returns: an object that implements the MBeanServerConnection interface by forwarding its 
             methods to the remote MBean server. 
*javax.management.remote.JMXConnector.getMBeanServerConnection(Subject)*

public |javax.management.MBeanServerConnection| getMBeanServerConnection(javax.security.auth.Subject delegationSubject)
  throws |java.io.IOException|
         
Returns an MBeanServerConnection object representing a remote MBean server on 
which operations are performed on behalf of the supplied delegation subject. 
For a given JMXConnector and Subject, two successful calls to this method will 
usually return the same MBeanServerConnection object, though this is not 
required. 

For each method in the returned MBeanServerConnection, calling the method 
causes the corresponding method to be called in the remote MBean server on 
behalf of the given delegation subject instead of the authenticated subject. 
The value returned by the MBean server method is the value returned to the 
client. If the MBean server method produces an Exception, the same Exception is 
seen by the client. If the MBean server method, or the attempt to call it, 
produces an Error, the Error is wrapped in a 
(|javax.management.remote.JMXServerErrorException|) , which is seen by the 
client. 

    delegationSubject - the Subject on behalf of which requests will be performed. Can be null, in 
       which case requests will be performed on behalf of the authenticated 
       Subject, if any. 

    Returns: an object that implements the MBeanServerConnection interface by forwarding its 
             methods to the remote MBean server on behalf of a given delegation 
             subject. 
*javax.management.remote.JMXConnector.removeConnectionNotificationListener(NotificationListener)*

public void removeConnectionNotificationListener(javax.management.NotificationListener listener)
  throws |javax.management.ListenerNotFoundException|
         
Removes a listener from the list to be informed of changes in status. The 
listener must previously have been added. If there is more than one matching 
listener, all are removed. 

    listener - a listener to receive connection status notifications. 

*javax.management.remote.JMXConnector.removeConnectionNotificationListener(NotificationListener,NotificationFilter,Object)*

public void removeConnectionNotificationListener(
  javax.management.NotificationListener l,
  javax.management.NotificationFilter f,
  java.lang.Object handback)
  throws |javax.management.ListenerNotFoundException|
         
Removes a listener from the list to be informed of changes in status. The 
listener must previously have been added with the same three parameters. If 
there is more than one matching listener, only one is removed. 

    l - a listener to receive connection status notifications. 
    f - a filter to select which notifications are to be delivered to the listener. Can 
       be null. 
    handback - an object to be given to the listener along with each notification. Can be 
       null. 



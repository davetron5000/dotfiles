*java.awt.DefaultKeyboardFocusManager* *DefaultKeyboardFocusManager* The default

public class DefaultKeyboardFocusManager
  extends    |java.awt.KeyboardFocusManager|

|java.awt.DefaultKeyboardFocusManager_Description|
|java.awt.DefaultKeyboardFocusManager_Fields|
|java.awt.DefaultKeyboardFocusManager_Constructors|
|java.awt.DefaultKeyboardFocusManager_Methods|

================================================================================

*java.awt.DefaultKeyboardFocusManager_Constructors*
|java.awt.DefaultKeyboardFocusManager()|

*java.awt.DefaultKeyboardFocusManager_Methods*
|java.awt.DefaultKeyboardFocusManager.dequeueKeyEvents(long,Component)|Releases
|java.awt.DefaultKeyboardFocusManager.discardKeyEvents(Component)|Discards all 
|java.awt.DefaultKeyboardFocusManager.dispatchEvent(AWTEvent)|This method is ca
|java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(KeyEvent)|Called by disp
|java.awt.DefaultKeyboardFocusManager.downFocusCycle(Container)|Moves the focus
|java.awt.DefaultKeyboardFocusManager.enqueueKeyEvents(long,Component)|Delays d
|java.awt.DefaultKeyboardFocusManager.focusNextComponent(Component)|Focuses the
|java.awt.DefaultKeyboardFocusManager.focusPreviousComponent(Component)|Focuses
|java.awt.DefaultKeyboardFocusManager.postProcessKeyEvent(KeyEvent)|This method
|java.awt.DefaultKeyboardFocusManager.processKeyEvent(Component,KeyEvent)|This 
|java.awt.DefaultKeyboardFocusManager.upFocusCycle(Component)|Moves the focus u

*java.awt.DefaultKeyboardFocusManager_Description*

The default KeyboardFocusManager for AWT applications. Focus traversal is done 
in response to a Component's focus traversal keys, and using a Container's 
FocusTraversalPolicy. 

Please see 

How to Use the Focus Subsystem, a section in The Java Tutorial, and the Focus 
Specification for more information. 


*java.awt.DefaultKeyboardFocusManager()*

public DefaultKeyboardFocusManager()




*java.awt.DefaultKeyboardFocusManager.dequeueKeyEvents(long,Component)*

protected synchronized void dequeueKeyEvents(
  long after,
  java.awt.Component untilFocused)

Releases for normal dispatching to the current focus owner all KeyEvents which 
were enqueued because of a call to enqueueKeyEvents with the same timestamp and 
Component. If the given timestamp is less than zero, the outstanding enqueue 
request for the given Component with the oldest timestamp (if any) should be 
cancelled. 

    after - the timestamp specified in the call to enqueueKeyEvents, or any value < 0 
    untilFocused - the Component specified in the call to enqueueKeyEvents 

*java.awt.DefaultKeyboardFocusManager.discardKeyEvents(Component)*

protected synchronized void discardKeyEvents(java.awt.Component comp)

Discards all KeyEvents which were enqueued because of one or more calls to 
enqueueKeyEvents with the specified Component, or one of its descendants. 

    comp - the Component specified in one or more calls to enqueueKeyEvents, or a parent 
       of such a Component 

*java.awt.DefaultKeyboardFocusManager.dispatchEvent(AWTEvent)*

public boolean dispatchEvent(java.awt.AWTEvent e)

This method is called by the AWT event dispatcher requesting that the current 
KeyboardFocusManager dispatch the specified event on its behalf. 
DefaultKeyboardFocusManagers dispatch all FocusEvents, all WindowEvents related 
to focus, and all KeyEvents. These events are dispatched based on the 
KeyboardFocusManager's notion of the focus owner and the focused and active 
Windows, sometimes overriding the source of the specified AWTEvent. If this 
method returns false, then the AWT event dispatcher will attempt to dispatch 
the event itself. 

    e - the AWTEvent to be dispatched 

    Returns: true if this method dispatched the event; false otherwise 
*java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(KeyEvent)*

public boolean dispatchKeyEvent(java.awt.event.KeyEvent e)

Called by dispatchEvent if no other KeyEventDispatcher in the dispatcher chain 
dispatched the KeyEvent, or if no other KeyEventDispatchers are registered. If 
the event has not been consumed, its target is enabled, and the focus owner is 
not null, this method dispatches the event to its target. This method will also 
subsequently dispatch the event to all registered KeyEventPostProcessors. After 
all this operations are finished, the event is passed to peers for processing. 

In all cases, this method returns true, since DefaultKeyboardFocusManager is 
designed so that neither dispatchEvent, nor the AWT event dispatcher, should 
take further action on the event in any situation. 

    e - the KeyEvent to be dispatched 

    Returns: 
*java.awt.DefaultKeyboardFocusManager.downFocusCycle(Container)*

public void downFocusCycle(java.awt.Container aContainer)

Moves the focus down one focus traversal cycle. If aContainer is a focus cycle 
root, then the focus owner is set to aContainer's default Component to focus, 
and the current focus cycle root is set to aContainer. If aContainer is not a 
focus cycle root, then no focus traversal operation occurs. 

    aContainer - the Container that is the basis for the focus traversal operation 

*java.awt.DefaultKeyboardFocusManager.enqueueKeyEvents(long,Component)*

protected synchronized void enqueueKeyEvents(
  long after,
  java.awt.Component untilFocused)

Delays dispatching of KeyEvents until the specified Component becomes the focus 
owner. KeyEvents with timestamps later than the specified timestamp will be 
enqueued until the specified Component receives a FOCUS_GAINED event, or the 
AWT cancels the delay request by invoking dequeueKeyEvents or discardKeyEvents. 

    after - timestamp of current event, or the current, system time if the current event 
       has no timestamp, or the AWT cannot determine which event is currently 
       being handled 
    untilFocused - Component which will receive a FOCUS_GAINED event before any pending KeyEvents 

*java.awt.DefaultKeyboardFocusManager.focusNextComponent(Component)*

public void focusNextComponent(java.awt.Component aComponent)

Focuses the Component after aComponent, typically based on a 
FocusTraversalPolicy. 

    aComponent - the Component that is the basis for the focus traversal operation 

*java.awt.DefaultKeyboardFocusManager.focusPreviousComponent(Component)*

public void focusPreviousComponent(java.awt.Component aComponent)

Focuses the Component before aComponent, typically based on a 
FocusTraversalPolicy. 

    aComponent - the Component that is the basis for the focus traversal operation 

*java.awt.DefaultKeyboardFocusManager.postProcessKeyEvent(KeyEvent)*

public boolean postProcessKeyEvent(java.awt.event.KeyEvent e)

This method will be called by dispatchKeyEvent. It will handle any unconsumed 
KeyEvents that map to an AWT MenuShortcut by consuming the event and activating 
the shortcut. 

    e - the KeyEvent to post-process 

    Returns: 
*java.awt.DefaultKeyboardFocusManager.processKeyEvent(Component,KeyEvent)*

public void processKeyEvent(
  java.awt.Component focusedComponent,
  java.awt.event.KeyEvent e)

This method initiates a focus traversal operation if and only if the KeyEvent 
represents a focus traversal key for the specified focusedComponent. It is 
expected that focusedComponent is the current focus owner, although this need 
not be the case. If it is not, focus traversal will nevertheless proceed as if 
focusedComponent were the focus owner. 

    focusedComponent - the Component that is the basis for a focus traversal operation if the 
       specified event represents a focus traversal key for the Component 
    e - the event that may represent a focus traversal key 

*java.awt.DefaultKeyboardFocusManager.upFocusCycle(Component)*

public void upFocusCycle(java.awt.Component aComponent)

Moves the focus up one focus traversal cycle. Typically, the focus owner is set 
to aComponent's focus cycle root, and the current focus cycle root is set to 
the new focus owner's focus cycle root. If, however, aComponent's focus cycle 
root is a Window, then the focus owner is set to the focus cycle root's default 
Component to focus, and the current focus cycle root is unchanged. 

    aComponent - the Component that is the basis for the focus traversal operation 



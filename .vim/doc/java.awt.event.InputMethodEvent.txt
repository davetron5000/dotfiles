*java.awt.event.InputMethodEvent* *InputMethodEvent* Input method events contain

public class InputMethodEvent
  extends    |java.awt.AWTEvent|

|java.awt.event.InputMethodEvent_Description|
|java.awt.event.InputMethodEvent_Fields|
|java.awt.event.InputMethodEvent_Constructors|
|java.awt.event.InputMethodEvent_Methods|

================================================================================

*java.awt.event.InputMethodEvent_Fields*
|int_java.awt.event.InputMethodEvent.CARET_POSITION_CHANGED|
|int_java.awt.event.InputMethodEvent.INPUT_METHOD_FIRST|
|int_java.awt.event.InputMethodEvent.INPUT_METHOD_LAST|
|int_java.awt.event.InputMethodEvent.INPUT_METHOD_TEXT_CHANGED|

*java.awt.event.InputMethodEvent_Constructors*
|java.awt.event.InputMethodEvent(Component,int,AttributedCharacterIterator,int,TextHitInfo,TextHitInfo)|
|java.awt.event.InputMethodEvent(Component,int,long,AttributedCharacterIterator,int,TextHitInfo,TextHitInfo)|
|java.awt.event.InputMethodEvent(Component,int,TextHitInfo,TextHitInfo)|Constru

*java.awt.event.InputMethodEvent_Methods*
|java.awt.event.InputMethodEvent.consume()|Consumes this event so that it will 
|java.awt.event.InputMethodEvent.getCaret()|Gets the caret.
|java.awt.event.InputMethodEvent.getCommittedCharacterCount()|Gets the number o
|java.awt.event.InputMethodEvent.getText()|Gets the combined committed and comp
|java.awt.event.InputMethodEvent.getVisiblePosition()|Gets the position that's 
|java.awt.event.InputMethodEvent.getWhen()|Returns the time stamp of when this 
|java.awt.event.InputMethodEvent.isConsumed()|Returns whether or not this event
|java.awt.event.InputMethodEvent.paramString()|Returns a parameter string ident

*java.awt.event.InputMethodEvent_Description*

Input method events contain information about text that is being composed using 
an input method. Whenever the text changes, the input method sends an event. If 
the text component that's currently using the input method is an active client, 
the event is dispatched to that component. Otherwise, it is dispatched to a 
separate composition window. 

The text included with the input method event consists of two parts: committed 
text and composed text. Either part may be empty. The two parts together 
replace any uncommitted composed text sent in previous events, or the currently 
selected committed text. Committed text should be integrated into the text 
component's persistent data, it will not be sent again. Composed text may be 
sent repeatedly, with changes to reflect the user's editing operations. 
Committed text always precedes composed text. 


*int_java.awt.event.InputMethodEvent.CARET_POSITION_CHANGED*

Input method events contain information about text that is being composed using 
an input method. Whenever the text changes, the input method sends an event. If 
the text component that's currently using the input method is an active client, 
the event is dispatched to that component. Otherwise, it is dispatched to a 
separate composition window. 

The text included with the input method event consists of two parts: committed 
text and composed text. Either part may be empty. The two parts together 
replace any uncommitted composed text sent in previous events, or the currently 
selected committed text. Committed text should be integrated into the text 
component's persistent data, it will not be sent again. Composed text may be 
sent repeatedly, with changes to reflect the user's editing operations. 
Committed text always precedes composed text. 


*int_java.awt.event.InputMethodEvent.INPUT_METHOD_FIRST*

Input method events contain information about text that is being composed using 
an input method. Whenever the text changes, the input method sends an event. If 
the text component that's currently using the input method is an active client, 
the event is dispatched to that component. Otherwise, it is dispatched to a 
separate composition window. 

The text included with the input method event consists of two parts: committed 
text and composed text. Either part may be empty. The two parts together 
replace any uncommitted composed text sent in previous events, or the currently 
selected committed text. Committed text should be integrated into the text 
component's persistent data, it will not be sent again. Composed text may be 
sent repeatedly, with changes to reflect the user's editing operations. 
Committed text always precedes composed text. 


*int_java.awt.event.InputMethodEvent.INPUT_METHOD_LAST*

Input method events contain information about text that is being composed using 
an input method. Whenever the text changes, the input method sends an event. If 
the text component that's currently using the input method is an active client, 
the event is dispatched to that component. Otherwise, it is dispatched to a 
separate composition window. 

The text included with the input method event consists of two parts: committed 
text and composed text. Either part may be empty. The two parts together 
replace any uncommitted composed text sent in previous events, or the currently 
selected committed text. Committed text should be integrated into the text 
component's persistent data, it will not be sent again. Composed text may be 
sent repeatedly, with changes to reflect the user's editing operations. 
Committed text always precedes composed text. 


*int_java.awt.event.InputMethodEvent.INPUT_METHOD_TEXT_CHANGED*

Input method events contain information about text that is being composed using 
an input method. Whenever the text changes, the input method sends an event. If 
the text component that's currently using the input method is an active client, 
the event is dispatched to that component. Otherwise, it is dispatched to a 
separate composition window. 

The text included with the input method event consists of two parts: committed 
text and composed text. Either part may be empty. The two parts together 
replace any uncommitted composed text sent in previous events, or the currently 
selected committed text. Committed text should be integrated into the text 
component's persistent data, it will not be sent again. Composed text may be 
sent repeatedly, with changes to reflect the user's editing operations. 
Committed text always precedes composed text. 



*java.awt.event.InputMethodEvent(Component,int,AttributedCharacterIterator,int,TextHitInfo,TextHitInfo)*

public InputMethodEvent(
  java.awt.Component source,
  int id,
  java.text.AttributedCharacterIterator text,
  int committedCharacterCount,
  java.awt.font.TextHitInfo caret,
  java.awt.font.TextHitInfo visiblePosition)

Constructs an InputMethodEvent with the specified source component, type, text, 
caret, and visiblePosition. 

The offsets of caret and visiblePosition are relative to the current composed 
text; that is, the composed text within text if this is an 
INPUT_METHOD_TEXT_CHANGED event, the composed text within the text of the 
preceding INPUT_METHOD_TEXT_CHANGED event otherwise. The time stamp for this 
event is initialized by invoking (|java.awt.EventQueue|) . Note that passing in 
an invalid id results in unspecified behavior. This method throws an 
IllegalArgumentException if source is null. 

    source - the object where the event originated 
    id - the event type 
    text - the combined committed and composed text, committed text first; must be null 
       when the event type is CARET_POSITION_CHANGED; may be null for 
       INPUT_METHOD_TEXT_CHANGED if there's no committed or composed text 
    committedCharacterCount - the number of committed characters in the text 
    caret - the caret (a.k.a. insertion point); null if there's no caret within current 
       composed text 
    visiblePosition - the position that's most important to be visible; null if there's no 
       recommendation for a visible position within current composed text 

*java.awt.event.InputMethodEvent(Component,int,long,AttributedCharacterIterator,int,TextHitInfo,TextHitInfo)*

public InputMethodEvent(
  java.awt.Component source,
  int id,
  long when,
  java.text.AttributedCharacterIterator text,
  int committedCharacterCount,
  java.awt.font.TextHitInfo caret,
  java.awt.font.TextHitInfo visiblePosition)

Constructs an InputMethodEvent with the specified source component, type, time, 
text, caret, and visiblePosition. 

The offsets of caret and visiblePosition are relative to the current composed 
text; that is, the composed text within text if this is an 
INPUT_METHOD_TEXT_CHANGED event, the composed text within the text of the 
preceding INPUT_METHOD_TEXT_CHANGED event otherwise. Note that passing in an 
invalid id results in unspecified behavior. This method throws an 
IllegalArgumentException if source is null. 

    source - the object where the event originated 
    id - the event type 
    when - a long integer that specifies the time the event occurred 
    text - the combined committed and composed text, committed text first; must be null 
       when the event type is CARET_POSITION_CHANGED; may be null for 
       INPUT_METHOD_TEXT_CHANGED if there's no committed or composed text 
    committedCharacterCount - the number of committed characters in the text 
    caret - the caret (a.k.a. insertion point); null if there's no caret within current 
       composed text 
    visiblePosition - the position that's most important to be visible; null if there's no 
       recommendation for a visible position within current composed text 

*java.awt.event.InputMethodEvent(Component,int,TextHitInfo,TextHitInfo)*

public InputMethodEvent(
  java.awt.Component source,
  int id,
  java.awt.font.TextHitInfo caret,
  java.awt.font.TextHitInfo visiblePosition)

Constructs an InputMethodEvent with the specified source component, type, 
caret, and visiblePosition. The text is set to null, committedCharacterCount to 
0. 

The offsets of caret and visiblePosition are relative to the current composed 
text; that is, the composed text within the text of the preceding 
INPUT_METHOD_TEXT_CHANGED event if the event being constructed as a 
CARET_POSITION_CHANGED event. For an INPUT_METHOD_TEXT_CHANGED event without 
text, caret and visiblePosition must be null. The time stamp for this event is 
initialized by invoking (|java.awt.EventQueue|) . Note that passing in an 
invalid id results in unspecified behavior. This method throws an 
IllegalArgumentException if source is null. 

    source - the object where the event originated 
    id - the event type 
    caret - the caret (a.k.a. insertion point); null if there's no caret within current 
       composed text 
    visiblePosition - the position that's most important to be visible; null if there's no 
       recommendation for a visible position within current composed text 

*java.awt.event.InputMethodEvent.consume()*

public void consume()

Consumes this event so that it will not be processed in the default manner by 
the source which originated it. 


*java.awt.event.InputMethodEvent.getCaret()*

public |java.awt.font.TextHitInfo| getCaret()

Gets the caret. 

The offset of the caret is relative to the current composed text; that is, the 
composed text within getText() if this is an INPUT_METHOD_TEXT_CHANGED event, 
the composed text within getText() of the preceding INPUT_METHOD_TEXT_CHANGED 
event otherwise. 


    Returns: the caret (a.k.a. insertion point). Null if there's no caret within current 
             composed text. 
*java.awt.event.InputMethodEvent.getCommittedCharacterCount()*

public int getCommittedCharacterCount()

Gets the number of committed characters in the text. 


*java.awt.event.InputMethodEvent.getText()*

public |java.text.AttributedCharacterIterator| getText()

Gets the combined committed and composed text. Characters from index 0 to index 
getCommittedCharacterCount() - 1 are committed text, the remaining characters 
are composed text. 


    Returns: the text. Always null for CARET_POSITION_CHANGED; may be null for 
             INPUT_METHOD_TEXT_CHANGED if there's no composed or committed 
             text. 
*java.awt.event.InputMethodEvent.getVisiblePosition()*

public |java.awt.font.TextHitInfo| getVisiblePosition()

Gets the position that's most important to be visible. 

The offset of the visible position is relative to the current composed text; 
that is, the composed text within getText() if this is an 
INPUT_METHOD_TEXT_CHANGED event, the composed text within getText() of the 
preceding INPUT_METHOD_TEXT_CHANGED event otherwise. 


    Returns: the position that's most important to be visible. Null if there's no 
             recommendation for a visible position within current composed 
             text. 
*java.awt.event.InputMethodEvent.getWhen()*

public long getWhen()

Returns the time stamp of when this event occurred. 


    Returns: this event's timestamp 
*java.awt.event.InputMethodEvent.isConsumed()*

public boolean isConsumed()

Returns whether or not this event has been consumed. 


*java.awt.event.InputMethodEvent.paramString()*

public |java.lang.String| paramString()

Returns a parameter string identifying this event. This method is useful for 
event-logging and for debugging. It contains the event ID in text form, the 
characters of the committed and composed text separated by "+", the number of 
committed characters, the caret, and the visible position. 


    Returns: a string identifying the event and its attributes 


*javax.swing.text.TabSet* *TabSet* A TabSet is comprised of many TabStops.

public class TabSet
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|javax.swing.text.TabSet_Description|
|javax.swing.text.TabSet_Fields|
|javax.swing.text.TabSet_Constructors|
|javax.swing.text.TabSet_Methods|

====================================================================================================================================================================================

*javax.swing.text.TabSet_Constructors*
|javax.swing.text.TabSet(TabStop[])|Creates and returns an instance of TabSet.

*javax.swing.text.TabSet_Methods*
|javax.swing.text.TabSet.equals(Object)|Indicates whether this TabSet is equal to another one.
|javax.swing.text.TabSet.getTab(int)|Returns the TabStop at index index.
|javax.swing.text.TabSet.getTabAfter(float)|Returns the Tab instance after location.
|javax.swing.text.TabSet.getTabCount()|Returns the number of Tab instances the receiver contains.
|javax.swing.text.TabSet.getTabIndex(TabStop)|
|javax.swing.text.TabSet.getTabIndexAfter(float)|Returns the index of the Tab to be used after location.
|javax.swing.text.TabSet.hashCode()|Returns a hashcode for this set of TabStops.
|javax.swing.text.TabSet.toString()|Returns the string representation of the set of tabs.

*javax.swing.text.TabSet_Description*

A TabSet is comprised of many TabStops. It offers methods for locating the closest TabStop to a given position and finding all the potential TabStops. It is also immutable. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.text.TabSet(TabStop[])*

public TabSet(javax.swing.text.TabStop[] tabs)

Creates and returns an instance of TabSet. The array of Tabs passed in must be sorted in ascending order. 


*javax.swing.text.TabSet.equals(Object)*

public boolean equals(java.lang.Object o)

Indicates whether this TabSet is equal to another one. 


    o - the TabSet instance which this instance should be compared to. 

    Returns: true if o is the instance of TabSet, has the same number of TabStops and they are all equal, false otherwise. 

*javax.swing.text.TabSet.getTab(int)*

public |javax.swing.text.TabStop| getTab(int index)

Returns the TabStop at index index. This will throw an IllegalArgumentException if index is outside the range of tabs. 



*javax.swing.text.TabSet.getTabAfter(float)*

public |javax.swing.text.TabStop| getTabAfter(float location)

Returns the Tab instance after location. This will return null if there are no tabs after location. 



*javax.swing.text.TabSet.getTabCount()*

public int getTabCount()

Returns the number of Tab instances the receiver contains. 



*javax.swing.text.TabSet.getTabIndex(TabStop)*

public int getTabIndex(javax.swing.text.TabStop tab)





    Returns: the index of the TabStop tab, or -1 if tab is not contained in the receiver. 

*javax.swing.text.TabSet.getTabIndexAfter(float)*

public int getTabIndexAfter(float location)

Returns the index of the Tab to be used after location. This will return -1 if there are no tabs after location. 



*javax.swing.text.TabSet.hashCode()*

public int hashCode()

Returns a hashcode for this set of TabStops. 



    Returns: a hashcode value for this set of TabStops. 

*javax.swing.text.TabSet.toString()*

public |java.lang.String| toString()

Returns the string representation of the set of tabs. 





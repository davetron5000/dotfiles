*javax.print.ServiceUIFactory* *ServiceUIFactory* Services may optionally provid

public abstract class ServiceUIFactory
  extends    |java.lang.Object|

|javax.print.ServiceUIFactory_Description|
|javax.print.ServiceUIFactory_Fields|
|javax.print.ServiceUIFactory_Constructors|
|javax.print.ServiceUIFactory_Methods|

================================================================================

*javax.print.ServiceUIFactory_Fields*
|int_javax.print.ServiceUIFactory.ABOUT_UIROLE|
|int_javax.print.ServiceUIFactory.ADMIN_UIROLE|
|java.lang.String_javax.print.ServiceUIFactory.DIALOG_UI|
|java.lang.String_javax.print.ServiceUIFactory.JCOMPONENT_UI|
|java.lang.String_javax.print.ServiceUIFactory.JDIALOG_UI|
|int_javax.print.ServiceUIFactory.MAIN_UIROLE|
|java.lang.String_javax.print.ServiceUIFactory.PANEL_UI|
|int_javax.print.ServiceUIFactory.RESERVED_UIROLE|

*javax.print.ServiceUIFactory_Constructors*
|javax.print.ServiceUIFactory()|

*javax.print.ServiceUIFactory_Methods*
|javax.print.ServiceUIFactory.getUI(int,String)|Get a UI object which may be ca
|javax.print.ServiceUIFactory.getUIClassNamesForRole(int)|Given a UI role obtai

*javax.print.ServiceUIFactory_Description*

Services may optionally provide UIs which allow different styles of interaction 
in different roles. One role may be end-user browsing and setting of print 
options. Another role may be administering the print service. 

Although the Print Service API does not presently provide standardised support 
for administering a print service, monitoring of the print service is possible 
and a UI may provide for private update mechanisms. 

The basic design intent is to allow applications to lazily locate and 
initialize services only when needed without any API dependencies except in an 
environment in which they are used. 

Swing UIs are preferred as they provide a more consistent Land can support 
accessibility APIs. 

Example usage: 

ServiceUIFactory factory = printService.getServiceUIFactory(); if (factory != 
null) { JComponent swingui = (JComponent)factory.getUI( 
ServiceUIFactory.MAIN_UIROLE, ServiceUIFactory.JCOMPONENT_UI); if (swingui != 
null) { tabbedpane.add("Custom UI", swingui); } } 


*int_javax.print.ServiceUIFactory.ABOUT_UIROLE*

Services may optionally provide UIs which allow different styles of interaction 
in different roles. One role may be end-user browsing and setting of print 
options. Another role may be administering the print service. 

Although the Print Service API does not presently provide standardised support 
for administering a print service, monitoring of the print service is possible 
and a UI may provide for private update mechanisms. 

The basic design intent is to allow applications to lazily locate and 
initialize services only when needed without any API dependencies except in an 
environment in which they are used. 

Swing UIs are preferred as they provide a more consistent Land can support 
accessibility APIs. 

Example usage: 

ServiceUIFactory factory = printService.getServiceUIFactory(); if (factory != 
null) { JComponent swingui = (JComponent)factory.getUI( 
ServiceUIFactory.MAIN_UIROLE, ServiceUIFactory.JCOMPONENT_UI); if (swingui != 
null) { tabbedpane.add("Custom UI", swingui); } } 


*int_javax.print.ServiceUIFactory.ADMIN_UIROLE*

Services may optionally provide UIs which allow different styles of interaction 
in different roles. One role may be end-user browsing and setting of print 
options. Another role may be administering the print service. 

Although the Print Service API does not presently provide standardised support 
for administering a print service, monitoring of the print service is possible 
and a UI may provide for private update mechanisms. 

The basic design intent is to allow applications to lazily locate and 
initialize services only when needed without any API dependencies except in an 
environment in which they are used. 

Swing UIs are preferred as they provide a more consistent Land can support 
accessibility APIs. 

Example usage: 

ServiceUIFactory factory = printService.getServiceUIFactory(); if (factory != 
null) { JComponent swingui = (JComponent)factory.getUI( 
ServiceUIFactory.MAIN_UIROLE, ServiceUIFactory.JCOMPONENT_UI); if (swingui != 
null) { tabbedpane.add("Custom UI", swingui); } } 


*java.lang.String_javax.print.ServiceUIFactory.DIALOG_UI*

Services may optionally provide UIs which allow different styles of interaction 
in different roles. One role may be end-user browsing and setting of print 
options. Another role may be administering the print service. 

Although the Print Service API does not presently provide standardised support 
for administering a print service, monitoring of the print service is possible 
and a UI may provide for private update mechanisms. 

The basic design intent is to allow applications to lazily locate and 
initialize services only when needed without any API dependencies except in an 
environment in which they are used. 

Swing UIs are preferred as they provide a more consistent Land can support 
accessibility APIs. 

Example usage: 

ServiceUIFactory factory = printService.getServiceUIFactory(); if (factory != 
null) { JComponent swingui = (JComponent)factory.getUI( 
ServiceUIFactory.MAIN_UIROLE, ServiceUIFactory.JCOMPONENT_UI); if (swingui != 
null) { tabbedpane.add("Custom UI", swingui); } } 


*java.lang.String_javax.print.ServiceUIFactory.JCOMPONENT_UI*

Services may optionally provide UIs which allow different styles of interaction 
in different roles. One role may be end-user browsing and setting of print 
options. Another role may be administering the print service. 

Although the Print Service API does not presently provide standardised support 
for administering a print service, monitoring of the print service is possible 
and a UI may provide for private update mechanisms. 

The basic design intent is to allow applications to lazily locate and 
initialize services only when needed without any API dependencies except in an 
environment in which they are used. 

Swing UIs are preferred as they provide a more consistent Land can support 
accessibility APIs. 

Example usage: 

ServiceUIFactory factory = printService.getServiceUIFactory(); if (factory != 
null) { JComponent swingui = (JComponent)factory.getUI( 
ServiceUIFactory.MAIN_UIROLE, ServiceUIFactory.JCOMPONENT_UI); if (swingui != 
null) { tabbedpane.add("Custom UI", swingui); } } 


*java.lang.String_javax.print.ServiceUIFactory.JDIALOG_UI*

Services may optionally provide UIs which allow different styles of interaction 
in different roles. One role may be end-user browsing and setting of print 
options. Another role may be administering the print service. 

Although the Print Service API does not presently provide standardised support 
for administering a print service, monitoring of the print service is possible 
and a UI may provide for private update mechanisms. 

The basic design intent is to allow applications to lazily locate and 
initialize services only when needed without any API dependencies except in an 
environment in which they are used. 

Swing UIs are preferred as they provide a more consistent Land can support 
accessibility APIs. 

Example usage: 

ServiceUIFactory factory = printService.getServiceUIFactory(); if (factory != 
null) { JComponent swingui = (JComponent)factory.getUI( 
ServiceUIFactory.MAIN_UIROLE, ServiceUIFactory.JCOMPONENT_UI); if (swingui != 
null) { tabbedpane.add("Custom UI", swingui); } } 


*int_javax.print.ServiceUIFactory.MAIN_UIROLE*

Services may optionally provide UIs which allow different styles of interaction 
in different roles. One role may be end-user browsing and setting of print 
options. Another role may be administering the print service. 

Although the Print Service API does not presently provide standardised support 
for administering a print service, monitoring of the print service is possible 
and a UI may provide for private update mechanisms. 

The basic design intent is to allow applications to lazily locate and 
initialize services only when needed without any API dependencies except in an 
environment in which they are used. 

Swing UIs are preferred as they provide a more consistent Land can support 
accessibility APIs. 

Example usage: 

ServiceUIFactory factory = printService.getServiceUIFactory(); if (factory != 
null) { JComponent swingui = (JComponent)factory.getUI( 
ServiceUIFactory.MAIN_UIROLE, ServiceUIFactory.JCOMPONENT_UI); if (swingui != 
null) { tabbedpane.add("Custom UI", swingui); } } 


*java.lang.String_javax.print.ServiceUIFactory.PANEL_UI*

Services may optionally provide UIs which allow different styles of interaction 
in different roles. One role may be end-user browsing and setting of print 
options. Another role may be administering the print service. 

Although the Print Service API does not presently provide standardised support 
for administering a print service, monitoring of the print service is possible 
and a UI may provide for private update mechanisms. 

The basic design intent is to allow applications to lazily locate and 
initialize services only when needed without any API dependencies except in an 
environment in which they are used. 

Swing UIs are preferred as they provide a more consistent Land can support 
accessibility APIs. 

Example usage: 

ServiceUIFactory factory = printService.getServiceUIFactory(); if (factory != 
null) { JComponent swingui = (JComponent)factory.getUI( 
ServiceUIFactory.MAIN_UIROLE, ServiceUIFactory.JCOMPONENT_UI); if (swingui != 
null) { tabbedpane.add("Custom UI", swingui); } } 


*int_javax.print.ServiceUIFactory.RESERVED_UIROLE*

Services may optionally provide UIs which allow different styles of interaction 
in different roles. One role may be end-user browsing and setting of print 
options. Another role may be administering the print service. 

Although the Print Service API does not presently provide standardised support 
for administering a print service, monitoring of the print service is possible 
and a UI may provide for private update mechanisms. 

The basic design intent is to allow applications to lazily locate and 
initialize services only when needed without any API dependencies except in an 
environment in which they are used. 

Swing UIs are preferred as they provide a more consistent Land can support 
accessibility APIs. 

Example usage: 

ServiceUIFactory factory = printService.getServiceUIFactory(); if (factory != 
null) { JComponent swingui = (JComponent)factory.getUI( 
ServiceUIFactory.MAIN_UIROLE, ServiceUIFactory.JCOMPONENT_UI); if (swingui != 
null) { tabbedpane.add("Custom UI", swingui); } } 



*javax.print.ServiceUIFactory()*

public ServiceUIFactory()




*javax.print.ServiceUIFactory.getUI(int,String)*

public abstract |java.lang.Object| getUI(
  int role,
  java.lang.String ui)

Get a UI object which may be cast to the requested UI type by the application 
and used in its user interface. 

    role - requested. Must be one of the standard roles or a private role supported by 
       this factory. 
    ui - type in which the role is requested. 

    Returns: the UI role or null if the requested UI role is not available from this factory 
*javax.print.ServiceUIFactory.getUIClassNamesForRole(int)*

public abstract |java.lang.String| getUIClassNamesForRole(int role)

Given a UI role obtained from this factory obtain the UI types available from 
this factory which implement this role. The returned Strings should refer to 
the static variables defined in this class so that applications can use 
equality of reference ("=="). 

    role - to be looked up. 

    Returns: the UI types supported by this class for the specified role, null if no UIs are 
             available for the role. 


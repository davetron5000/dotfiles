*javax.swing.SortingFocusTraversalPolicy* *SortingFocusTraversalPolicy* A FocusT

public class SortingFocusTraversalPolicy
  extends    |javax.swing.InternalFrameFocusTraversalPolicy|

|javax.swing.SortingFocusTraversalPolicy_Description|
|javax.swing.SortingFocusTraversalPolicy_Fields|
|javax.swing.SortingFocusTraversalPolicy_Constructors|
|javax.swing.SortingFocusTraversalPolicy_Methods|

================================================================================

*javax.swing.SortingFocusTraversalPolicy_Constructors*
|javax.swing.SortingFocusTraversalPolicy()|Constructs a SortingFocusTraversalPo
|javax.swing.SortingFocusTraversalPolicy(Comparator)|Constructs a SortingFocusT

*javax.swing.SortingFocusTraversalPolicy_Methods*
|javax.swing.SortingFocusTraversalPolicy.accept(Component)|Determines whether a
|javax.swing.SortingFocusTraversalPolicy.getComparator()|Returns the Comparator
|javax.swing.SortingFocusTraversalPolicy.getComponentAfter(Container,Component)|
|javax.swing.SortingFocusTraversalPolicy.getComponentBefore(Container,Component)|
|javax.swing.SortingFocusTraversalPolicy.getDefaultComponent(Container)|Returns
|javax.swing.SortingFocusTraversalPolicy.getFirstComponent(Container)|Returns t
|javax.swing.SortingFocusTraversalPolicy.getImplicitDownCycleTraversal()|Return
|javax.swing.SortingFocusTraversalPolicy.getLastComponent(Container)|Returns th
|javax.swing.SortingFocusTraversalPolicy.setComparator(Comparator)|Sets the Com
|javax.swing.SortingFocusTraversalPolicy.setImplicitDownCycleTraversal(boolean)|

*javax.swing.SortingFocusTraversalPolicy_Description*

A FocusTraversalPolicy that determines traversal order by sorting the 
Components of a focus traversal cycle based on a given Comparator. Portions of 
the Component hierarchy that are not visible and displayable will not be 
included. 

By default, SortingFocusTraversalPolicy implicitly transfers focus down- cycle. 
That is, during normal focus traversal, the Component traversed after a focus 
cycle root will be the focus-cycle-root's default Component to focus. This 
behavior can be disabled using the setImplicitDownCycleTraversal method. 

By default, methods of this class with return a Component only if it is 
visible, displayable, enabled, and focusable. Subclasses can modify this 
behavior by overriding the accept method. 

This policy takes into account focus traversal policy providers. When searching 
for first/last/next/previous Component, if a focus traversal policy provider is 
encountered, its focus traversal policy is used to perform the search 
operation. 


*javax.swing.SortingFocusTraversalPolicy()*

protected SortingFocusTraversalPolicy()

Constructs a SortingFocusTraversalPolicy without a Comparator. Subclasses must 
set the Comparator using setComparator before installing this 
FocusTraversalPolicy on a focus cycle root or KeyboardFocusManager. 


*javax.swing.SortingFocusTraversalPolicy(Comparator)*

public SortingFocusTraversalPolicy(java.util.Comparator comparator)

Constructs a SortingFocusTraversalPolicy with the specified Comparator. 


*javax.swing.SortingFocusTraversalPolicy.accept(Component)*

protected boolean accept(java.awt.Component aComponent)

Determines whether a Component is an acceptable choice as the new focus owner. 
By default, this method will accept a Component if and only if it is visible, 
displayable, enabled, and focusable. 

    aComponent - the Component whose fitness as a focus owner is to be tested 

    Returns: true if aComponent is visible, displayable, enabled, and focusable; false 
             otherwise 
*javax.swing.SortingFocusTraversalPolicy.getComparator()*

protected |java.util.Comparator| getComparator()

Returns the Comparator which will be used to sort the Components in a focus 
traversal cycle. 


    Returns: the Comparator which will be used for sorting 
*javax.swing.SortingFocusTraversalPolicy.getComponentAfter(Container,Component)*

public |java.awt.Component| getComponentAfter(
  java.awt.Container aContainer,
  java.awt.Component aComponent)

Returns the Component that should receive the focus after aComponent. 
aContainer must be a focus cycle root of aComponent or a focus traversal policy 
provider. 

By default, SortingFocusTraversalPolicy implicitly transfers focus down- cycle. 
That is, during normal focus traversal, the Component traversed after a focus 
cycle root will be the focus-cycle-root's default Component to focus. This 
behavior can be disabled using the setImplicitDownCycleTraversal method. 

If aContainer is focus traversal policy provider, the focus is always 
transferred down-cycle. 

    aContainer - a focus cycle root of aComponent or a focus traversal policy provider 
    aComponent - a (possibly indirect) child of aContainer, or aContainer itself 

    Returns: the Component that should receive the focus after aComponent, or null if no 
             suitable Component can be found 
*javax.swing.SortingFocusTraversalPolicy.getComponentBefore(Container,Component)*

public |java.awt.Component| getComponentBefore(
  java.awt.Container aContainer,
  java.awt.Component aComponent)

Returns the Component that should receive the focus before aComponent. 
aContainer must be a focus cycle root of aComponent or a focus traversal policy 
provider. 

By default, SortingFocusTraversalPolicy implicitly transfers focus down- cycle. 
That is, during normal focus traversal, the Component traversed after a focus 
cycle root will be the focus-cycle-root's default Component to focus. This 
behavior can be disabled using the setImplicitDownCycleTraversal method. 

If aContainer is focus traversal policy provider, the focus is always 
transferred down-cycle. 

    aContainer - a focus cycle root of aComponent or a focus traversal policy provider 
    aComponent - a (possibly indirect) child of aContainer, or aContainer itself 

    Returns: the Component that should receive the focus before aComponent, or null if no 
             suitable Component can be found 
*javax.swing.SortingFocusTraversalPolicy.getDefaultComponent(Container)*

public |java.awt.Component| getDefaultComponent(java.awt.Container aContainer)

Returns the default Component to focus. This Component will be the first to 
receive focus when traversing down into a new focus traversal cycle rooted at 
aContainer. The default implementation of this method returns the same 
Component as getFirstComponent. 

    aContainer - a focus cycle root of aComponent or a focus traversal policy provider whose 
       default Component is to be returned 

    Returns: the default Component in the traversal cycle of aContainer, or null if no 
             suitable Component can be found 
*javax.swing.SortingFocusTraversalPolicy.getFirstComponent(Container)*

public |java.awt.Component| getFirstComponent(java.awt.Container aContainer)

Returns the first Component in the traversal cycle. This method is used to 
determine the next Component to focus when traversal wraps in the forward 
direction. 

    aContainer - a focus cycle root of aComponent or a focus traversal policy provider whose 
       first Component is to be returned 

    Returns: the first Component in the traversal cycle of aContainer, or null if no 
             suitable Component can be found 
*javax.swing.SortingFocusTraversalPolicy.getImplicitDownCycleTraversal()*

public boolean getImplicitDownCycleTraversal()

Returns whether this SortingFocusTraversalPolicy transfers focus down- cycle 
implicitly. If true, during normal focus traversal, the Component traversed 
after a focus cycle root will be the focus-cycle-root's default Component to 
focus. If false, the next Component in the focus traversal cycle rooted at the 
specified focus cycle root will be traversed instead. 


    Returns: whether this SortingFocusTraversalPolicy transfers focus down- cycle implicitly 
*javax.swing.SortingFocusTraversalPolicy.getLastComponent(Container)*

public |java.awt.Component| getLastComponent(java.awt.Container aContainer)

Returns the last Component in the traversal cycle. This method is used to 
determine the next Component to focus when traversal wraps in the reverse 
direction. 

    aContainer - a focus cycle root of aComponent or a focus traversal policy provider whose 
       last Component is to be returned 

    Returns: the last Component in the traversal cycle of aContainer, or null if no suitable 
             Component can be found 
*javax.swing.SortingFocusTraversalPolicy.setComparator(Comparator)*

protected void setComparator(java.util.Comparator comparator)

Sets the Comparator which will be used to sort the Components in a focus 
traversal cycle. 

    comparator - the Comparator which will be used for sorting 

*javax.swing.SortingFocusTraversalPolicy.setImplicitDownCycleTraversal(boolean)*

public void setImplicitDownCycleTraversal(boolean implicitDownCycleTraversal)

Sets whether this SortingFocusTraversalPolicy transfers focus down-cycle 
implicitly. If true, during normal focus traversal, the Component traversed 
after a focus cycle root will be the focus- cycle-root's default Component to 
focus. If false, the next Component in the focus traversal cycle rooted at the 
specified focus cycle root will be traversed instead. The default value for 
this property is true. 

    implicitDownCycleTraversal - whether this SortingFocusTraversalPolicy transfers focus down-cycle implicitly 



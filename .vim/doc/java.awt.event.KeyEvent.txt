*java.awt.event.KeyEvent* *KeyEvent* An event which indicates that a keystroke occurred in a component.

public class KeyEvent
  extends    |java.awt.event.InputEvent|

|java.awt.event.KeyEvent_Description|
|java.awt.event.KeyEvent_Fields|
|java.awt.event.KeyEvent_Constructors|
|java.awt.event.KeyEvent_Methods|

====================================================================================================================================================================================

*java.awt.event.KeyEvent_Fields*
|char_java.awt.event.KeyEvent.CHAR_UNDEFINED|
|int_java.awt.event.KeyEvent.KEY_FIRST|
|int_java.awt.event.KeyEvent.KEY_LAST|
|int_java.awt.event.KeyEvent.KEY_LOCATION_LEFT|
|int_java.awt.event.KeyEvent.KEY_LOCATION_NUMPAD|
|int_java.awt.event.KeyEvent.KEY_LOCATION_RIGHT|
|int_java.awt.event.KeyEvent.KEY_LOCATION_STANDARD|
|int_java.awt.event.KeyEvent.KEY_LOCATION_UNKNOWN|
|int_java.awt.event.KeyEvent.KEY_PRESSED|
|int_java.awt.event.KeyEvent.KEY_RELEASED|
|int_java.awt.event.KeyEvent.KEY_TYPED|
|int_java.awt.event.KeyEvent.VK_0|
|int_java.awt.event.KeyEvent.VK_1|
|int_java.awt.event.KeyEvent.VK_2|
|int_java.awt.event.KeyEvent.VK_3|
|int_java.awt.event.KeyEvent.VK_4|
|int_java.awt.event.KeyEvent.VK_5|
|int_java.awt.event.KeyEvent.VK_6|
|int_java.awt.event.KeyEvent.VK_7|
|int_java.awt.event.KeyEvent.VK_8|
|int_java.awt.event.KeyEvent.VK_9|
|int_java.awt.event.KeyEvent.VK_A|
|int_java.awt.event.KeyEvent.VK_ACCEPT|
|int_java.awt.event.KeyEvent.VK_ADD|
|int_java.awt.event.KeyEvent.VK_AGAIN|
|int_java.awt.event.KeyEvent.VK_ALL_CANDIDATES|
|int_java.awt.event.KeyEvent.VK_ALPHANUMERIC|
|int_java.awt.event.KeyEvent.VK_ALT|
|int_java.awt.event.KeyEvent.VK_ALT_GRAPH|
|int_java.awt.event.KeyEvent.VK_AMPERSAND|
|int_java.awt.event.KeyEvent.VK_ASTERISK|
|int_java.awt.event.KeyEvent.VK_AT|
|int_java.awt.event.KeyEvent.VK_B|
|int_java.awt.event.KeyEvent.VK_BACK_QUOTE|
|int_java.awt.event.KeyEvent.VK_BACK_SLASH|
|int_java.awt.event.KeyEvent.VK_BACK_SPACE|
|int_java.awt.event.KeyEvent.VK_BEGIN|
|int_java.awt.event.KeyEvent.VK_BRACELEFT|
|int_java.awt.event.KeyEvent.VK_BRACERIGHT|
|int_java.awt.event.KeyEvent.VK_C|
|int_java.awt.event.KeyEvent.VK_CANCEL|
|int_java.awt.event.KeyEvent.VK_CAPS_LOCK|
|int_java.awt.event.KeyEvent.VK_CIRCUMFLEX|
|int_java.awt.event.KeyEvent.VK_CLEAR|
|int_java.awt.event.KeyEvent.VK_CLOSE_BRACKET|
|int_java.awt.event.KeyEvent.VK_CODE_INPUT|
|int_java.awt.event.KeyEvent.VK_COLON|
|int_java.awt.event.KeyEvent.VK_COMMA|
|int_java.awt.event.KeyEvent.VK_COMPOSE|
|int_java.awt.event.KeyEvent.VK_CONTEXT_MENU|
|int_java.awt.event.KeyEvent.VK_CONTROL|
|int_java.awt.event.KeyEvent.VK_CONVERT|
|int_java.awt.event.KeyEvent.VK_COPY|
|int_java.awt.event.KeyEvent.VK_CUT|
|int_java.awt.event.KeyEvent.VK_D|
|int_java.awt.event.KeyEvent.VK_DEAD_ABOVEDOT|
|int_java.awt.event.KeyEvent.VK_DEAD_ABOVERING|
|int_java.awt.event.KeyEvent.VK_DEAD_ACUTE|
|int_java.awt.event.KeyEvent.VK_DEAD_BREVE|
|int_java.awt.event.KeyEvent.VK_DEAD_CARON|
|int_java.awt.event.KeyEvent.VK_DEAD_CEDILLA|
|int_java.awt.event.KeyEvent.VK_DEAD_CIRCUMFLEX|
|int_java.awt.event.KeyEvent.VK_DEAD_DIAERESIS|
|int_java.awt.event.KeyEvent.VK_DEAD_DOUBLEACUTE|
|int_java.awt.event.KeyEvent.VK_DEAD_GRAVE|
|int_java.awt.event.KeyEvent.VK_DEAD_IOTA|
|int_java.awt.event.KeyEvent.VK_DEAD_MACRON|
|int_java.awt.event.KeyEvent.VK_DEAD_OGONEK|
|int_java.awt.event.KeyEvent.VK_DEAD_SEMIVOICED_SOUND|
|int_java.awt.event.KeyEvent.VK_DEAD_TILDE|
|int_java.awt.event.KeyEvent.VK_DEAD_VOICED_SOUND|
|int_java.awt.event.KeyEvent.VK_DECIMAL|
|int_java.awt.event.KeyEvent.VK_DELETE|
|int_java.awt.event.KeyEvent.VK_DIVIDE|
|int_java.awt.event.KeyEvent.VK_DOLLAR|
|int_java.awt.event.KeyEvent.VK_DOWN|
|int_java.awt.event.KeyEvent.VK_E|
|int_java.awt.event.KeyEvent.VK_END|
|int_java.awt.event.KeyEvent.VK_ENTER|
|int_java.awt.event.KeyEvent.VK_EQUALS|
|int_java.awt.event.KeyEvent.VK_ESCAPE|
|int_java.awt.event.KeyEvent.VK_EURO_SIGN|
|int_java.awt.event.KeyEvent.VK_EXCLAMATION_MARK|
|int_java.awt.event.KeyEvent.VK_F|
|int_java.awt.event.KeyEvent.VK_F1|
|int_java.awt.event.KeyEvent.VK_F10|
|int_java.awt.event.KeyEvent.VK_F11|
|int_java.awt.event.KeyEvent.VK_F12|
|int_java.awt.event.KeyEvent.VK_F13|
|int_java.awt.event.KeyEvent.VK_F14|
|int_java.awt.event.KeyEvent.VK_F15|
|int_java.awt.event.KeyEvent.VK_F16|
|int_java.awt.event.KeyEvent.VK_F17|
|int_java.awt.event.KeyEvent.VK_F18|
|int_java.awt.event.KeyEvent.VK_F19|
|int_java.awt.event.KeyEvent.VK_F2|
|int_java.awt.event.KeyEvent.VK_F20|
|int_java.awt.event.KeyEvent.VK_F21|
|int_java.awt.event.KeyEvent.VK_F22|
|int_java.awt.event.KeyEvent.VK_F23|
|int_java.awt.event.KeyEvent.VK_F24|
|int_java.awt.event.KeyEvent.VK_F3|
|int_java.awt.event.KeyEvent.VK_F4|
|int_java.awt.event.KeyEvent.VK_F5|
|int_java.awt.event.KeyEvent.VK_F6|
|int_java.awt.event.KeyEvent.VK_F7|
|int_java.awt.event.KeyEvent.VK_F8|
|int_java.awt.event.KeyEvent.VK_F9|
|int_java.awt.event.KeyEvent.VK_FINAL|
|int_java.awt.event.KeyEvent.VK_FIND|
|int_java.awt.event.KeyEvent.VK_FULL_WIDTH|
|int_java.awt.event.KeyEvent.VK_G|
|int_java.awt.event.KeyEvent.VK_GREATER|
|int_java.awt.event.KeyEvent.VK_H|
|int_java.awt.event.KeyEvent.VK_HALF_WIDTH|
|int_java.awt.event.KeyEvent.VK_HELP|
|int_java.awt.event.KeyEvent.VK_HIRAGANA|
|int_java.awt.event.KeyEvent.VK_HOME|
|int_java.awt.event.KeyEvent.VK_I|
|int_java.awt.event.KeyEvent.VK_INPUT_METHOD_ON_OFF|
|int_java.awt.event.KeyEvent.VK_INSERT|
|int_java.awt.event.KeyEvent.VK_INVERTED_EXCLAMATION_MARK|
|int_java.awt.event.KeyEvent.VK_J|
|int_java.awt.event.KeyEvent.VK_JAPANESE_HIRAGANA|
|int_java.awt.event.KeyEvent.VK_JAPANESE_KATAKANA|
|int_java.awt.event.KeyEvent.VK_JAPANESE_ROMAN|
|int_java.awt.event.KeyEvent.VK_K|
|int_java.awt.event.KeyEvent.VK_KANA|
|int_java.awt.event.KeyEvent.VK_KANA_LOCK|
|int_java.awt.event.KeyEvent.VK_KANJI|
|int_java.awt.event.KeyEvent.VK_KATAKANA|
|int_java.awt.event.KeyEvent.VK_KP_DOWN|
|int_java.awt.event.KeyEvent.VK_KP_LEFT|
|int_java.awt.event.KeyEvent.VK_KP_RIGHT|
|int_java.awt.event.KeyEvent.VK_KP_UP|
|int_java.awt.event.KeyEvent.VK_L|
|int_java.awt.event.KeyEvent.VK_LEFT|
|int_java.awt.event.KeyEvent.VK_LEFT_PARENTHESIS|
|int_java.awt.event.KeyEvent.VK_LESS|
|int_java.awt.event.KeyEvent.VK_M|
|int_java.awt.event.KeyEvent.VK_META|
|int_java.awt.event.KeyEvent.VK_MINUS|
|int_java.awt.event.KeyEvent.VK_MODECHANGE|
|int_java.awt.event.KeyEvent.VK_MULTIPLY|
|int_java.awt.event.KeyEvent.VK_N|
|int_java.awt.event.KeyEvent.VK_NONCONVERT|
|int_java.awt.event.KeyEvent.VK_NUM_LOCK|
|int_java.awt.event.KeyEvent.VK_NUMBER_SIGN|
|int_java.awt.event.KeyEvent.VK_NUMPAD0|
|int_java.awt.event.KeyEvent.VK_NUMPAD1|
|int_java.awt.event.KeyEvent.VK_NUMPAD2|
|int_java.awt.event.KeyEvent.VK_NUMPAD3|
|int_java.awt.event.KeyEvent.VK_NUMPAD4|
|int_java.awt.event.KeyEvent.VK_NUMPAD5|
|int_java.awt.event.KeyEvent.VK_NUMPAD6|
|int_java.awt.event.KeyEvent.VK_NUMPAD7|
|int_java.awt.event.KeyEvent.VK_NUMPAD8|
|int_java.awt.event.KeyEvent.VK_NUMPAD9|
|int_java.awt.event.KeyEvent.VK_O|
|int_java.awt.event.KeyEvent.VK_OPEN_BRACKET|
|int_java.awt.event.KeyEvent.VK_P|
|int_java.awt.event.KeyEvent.VK_PAGE_DOWN|
|int_java.awt.event.KeyEvent.VK_PAGE_UP|
|int_java.awt.event.KeyEvent.VK_PASTE|
|int_java.awt.event.KeyEvent.VK_PAUSE|
|int_java.awt.event.KeyEvent.VK_PERIOD|
|int_java.awt.event.KeyEvent.VK_PLUS|
|int_java.awt.event.KeyEvent.VK_PREVIOUS_CANDIDATE|
|int_java.awt.event.KeyEvent.VK_PRINTSCREEN|
|int_java.awt.event.KeyEvent.VK_PROPS|
|int_java.awt.event.KeyEvent.VK_Q|
|int_java.awt.event.KeyEvent.VK_QUOTE|
|int_java.awt.event.KeyEvent.VK_QUOTEDBL|
|int_java.awt.event.KeyEvent.VK_R|
|int_java.awt.event.KeyEvent.VK_RIGHT|
|int_java.awt.event.KeyEvent.VK_RIGHT_PARENTHESIS|
|int_java.awt.event.KeyEvent.VK_ROMAN_CHARACTERS|
|int_java.awt.event.KeyEvent.VK_S|
|int_java.awt.event.KeyEvent.VK_SCROLL_LOCK|
|int_java.awt.event.KeyEvent.VK_SEMICOLON|
|int_java.awt.event.KeyEvent.VK_SEPARATER|
|int_java.awt.event.KeyEvent.VK_SEPARATOR|
|int_java.awt.event.KeyEvent.VK_SHIFT|
|int_java.awt.event.KeyEvent.VK_SLASH|
|int_java.awt.event.KeyEvent.VK_SPACE|
|int_java.awt.event.KeyEvent.VK_STOP|
|int_java.awt.event.KeyEvent.VK_SUBTRACT|
|int_java.awt.event.KeyEvent.VK_T|
|int_java.awt.event.KeyEvent.VK_TAB|
|int_java.awt.event.KeyEvent.VK_U|
|int_java.awt.event.KeyEvent.VK_UNDEFINED|
|int_java.awt.event.KeyEvent.VK_UNDERSCORE|
|int_java.awt.event.KeyEvent.VK_UNDO|
|int_java.awt.event.KeyEvent.VK_UP|
|int_java.awt.event.KeyEvent.VK_V|
|int_java.awt.event.KeyEvent.VK_W|
|int_java.awt.event.KeyEvent.VK_WINDOWS|
|int_java.awt.event.KeyEvent.VK_X|
|int_java.awt.event.KeyEvent.VK_Y|
|int_java.awt.event.KeyEvent.VK_Z|

*java.awt.event.KeyEvent_Constructors*
|java.awt.event.KeyEvent(Component,int,long,int,int)|
|java.awt.event.KeyEvent(Component,int,long,int,int,char)|Constructs a KeyEvent object.
|java.awt.event.KeyEvent(Component,int,long,int,int,char,int)|

*java.awt.event.KeyEvent_Methods*
|java.awt.event.KeyEvent.getKeyChar()|Returns the character associated with the key in this event.
|java.awt.event.KeyEvent.getKeyCode()|Returns the integer keyCode associated with the key in this event.
|java.awt.event.KeyEvent.getKeyLocation()|Returns the location of the key that originated this key event.
|java.awt.event.KeyEvent.getKeyModifiersText(int)|Returns a String describing the modifier key(s),  such as "Shift", or "Ctrl+Shift".
|java.awt.event.KeyEvent.getKeyText(int)|Returns a String describing the keyCode, such as "HOME", "F1" or "A".
|java.awt.event.KeyEvent.isActionKey()|Returns whether the key in this event is an "action" key.
|java.awt.event.KeyEvent.paramString()|Returns a parameter string identifying this event.
|java.awt.event.KeyEvent.setKeyChar(char)|Set the keyChar value to indicate a logical character.
|java.awt.event.KeyEvent.setKeyCode(int)|Set the keyCode value to indicate a physical key.
|java.awt.event.KeyEvent.setModifiers(int)|Set the modifiers to indicate additional keys that were held down  (e.g.

*java.awt.event.KeyEvent_Description*

An event which indicates that a keystroke occurred in a component. 

This low-level event is generated by a component object (such as a text field) when a key is pressed, released, or typed. The event is passed to every KeyListener or KeyAdapter 
object which registered to receive such events using the component's addKeyListener method. (KeyAdapter objects implement the KeyListener interface.) Each such listener object 
gets this KeyEvent when the event occurs. 

"Key typed" events are higher-level and generally do not depend on the platform or keyboard layout. They are generated when a Unicode character is entered, and are the preferred 
way to find out about character input. In the simplest case, a key typed event is produced by a single key press (e.g., 'a'). Often, however, characters are produced by series of 
key presses (e.g., 'shift' + 'a'), and the mapping from key pressed events to key typed events may be many-to-one or many-to-many. Key releases are not usually necessary to 
generate a key typed event, but there are some cases where the key typed event is not generated until a key is released (e.g., entering ASCII sequences via the Alt-Numpad method 
in Windows). No key typed events are generated for keys that don't generate Unicode characters (e.g., action keys, modifier keys, etc.). 

The getKeyChar method always returns a valid Unicode character or CHAR_UNDEFINED. Character input is reported by KEY_TYPED events: KEY_PRESSED and KEY_RELEASED events are not 
necessarily associated with character input. Therefore, the result of the getKeyChar method is guaranteed to be meaningful only for KEY_TYPED events. 

For key pressed and key released events, the getKeyCode method returns the event's keyCode. For key typed events, the getKeyCode method always returns VK_UNDEFINED. 

"Key pressed" and "key released" events are lower-level and depend on the platform and keyboard layout. They are generated whenever a key is pressed or released, and are the only 
way to find out about keys that don't generate character input (e.g., action keys, modifier keys, etc.). The key being pressed or released is indicated by the getKeyCode method, 
which returns a virtual key code. 

Virtual key codes are used to report which keyboard key has been pressed, rather than a character generated by the combination of one or more keystrokes (such as "A", which comes 
from shift and "a"). 

For example, pressing the Shift key will cause a KEY_PRESSED event with a VK_SHIFT keyCode, while pressing the 'a' key will result in a VK_A keyCode. After the 'a' key is 
released, a KEY_RELEASED event will be fired with VK_A. Separately, a KEY_TYPED event with a keyChar value of 'A' is generated. 

Notes: 

Key combinations which do not result in Unicode characters, such as action keys like F1 and the HELP key, do not generate KEY_TYPED events. Not all keyboards or systems are 
capable of generating all virtual key codes. No attempt is made in Java to generate these keys artificially. Virtual key codes do not identify a physical key: they depend on the 
platform and keyboard layout. For example, the key that generates VK_Q when using a U.S. keyboard layout will generate VK_A when using a French keyboard layout. Not all characters 
have a keycode associated with them. For example, there is no keycode for the question mark because there is no keyboard for which it appears on the primary layer. In order to 
support the platform-independent handling of action keys, the Java platform uses a few additional virtual key constants for functions that would otherwise have to be recognized by 
interpreting virtual key codes and modifiers. For example, for Japanese Windows keyboards, VK_ALL_CANDIDATES is returned instead of VK_CONVERT with the ALT modifier. 

WARNING: Aside from those keys that are defined by the Java language (VK_ENTER, VK_BACK_SPACE, and VK_TAB), do not rely on the values of the VK_ constants. Sun reserves the right 
to change these values as needed to accomodate a wider range of keyboards in the future. 



*char_java.awt.event.KeyEvent.CHAR_UNDEFINED*

KEY_PRESSED and KEY_RELEASED events which do not map to a valid Unicode character use this for the keyChar value. 


*int_java.awt.event.KeyEvent.KEY_FIRST*

The first number in the range of ids used for key events. 


*int_java.awt.event.KeyEvent.KEY_LAST*

The last number in the range of ids used for key events. 


*int_java.awt.event.KeyEvent.KEY_LOCATION_LEFT*

A constant indicating that the key pressed or released is in the left key location (there is more than one possible location for this key). Example: the left shift key. 


*int_java.awt.event.KeyEvent.KEY_LOCATION_NUMPAD*

A constant indicating that the key event originated on the numeric keypad or with a virtual key corresponding to the numeric keypad. 


*int_java.awt.event.KeyEvent.KEY_LOCATION_RIGHT*

A constant indicating that the key pressed or released is in the right key location (there is more than one possible location for this key). Example: the right shift key. 


*int_java.awt.event.KeyEvent.KEY_LOCATION_STANDARD*

A constant indicating that the key pressed or released is not distinguished as the left or right version of a key, and did not originate on the numeric keypad (or did not 
originate with a virtual key corresponding to the numeric keypad). 


*int_java.awt.event.KeyEvent.KEY_LOCATION_UNKNOWN*

A constant indicating that the keyLocation is indeterminate or not relevant. KEY_TYPED events do not have a keyLocation; this value is used instead. 


*int_java.awt.event.KeyEvent.KEY_PRESSED*

The "key pressed" event. This event is generated when a key is pushed down. 


*int_java.awt.event.KeyEvent.KEY_RELEASED*

The "key released" event. This event is generated when a key is let up. 


*int_java.awt.event.KeyEvent.KEY_TYPED*

The "key typed" event. This event is generated when a character is entered. In the simplest case, it is produced by a single key press. Often, however, characters are produced by 
series of key presses, and the mapping from key pressed events to key typed events may be many-to-one or many-to-many. 


*int_java.awt.event.KeyEvent.VK_0*

VK_0 thru VK_9 are the same as ASCII '0' thru '9' (0x30 - 0x39) 


*int_java.awt.event.KeyEvent.VK_1*




*int_java.awt.event.KeyEvent.VK_2*




*int_java.awt.event.KeyEvent.VK_3*




*int_java.awt.event.KeyEvent.VK_4*




*int_java.awt.event.KeyEvent.VK_5*




*int_java.awt.event.KeyEvent.VK_6*




*int_java.awt.event.KeyEvent.VK_7*




*int_java.awt.event.KeyEvent.VK_8*




*int_java.awt.event.KeyEvent.VK_9*




*int_java.awt.event.KeyEvent.VK_A*

VK_A thru VK_Z are the same as ASCII 'A' thru 'Z' (0x41 - 0x5A) 


*int_java.awt.event.KeyEvent.VK_ACCEPT*

Constant for the Accept or Commit function key. 


*int_java.awt.event.KeyEvent.VK_ADD*




*int_java.awt.event.KeyEvent.VK_AGAIN*




*int_java.awt.event.KeyEvent.VK_ALL_CANDIDATES*

Constant for the All Candidates function key. 


*int_java.awt.event.KeyEvent.VK_ALPHANUMERIC*

Constant for the Alphanumeric function key. 


*int_java.awt.event.KeyEvent.VK_ALT*




*int_java.awt.event.KeyEvent.VK_ALT_GRAPH*

Constant for the AltGraph function key. 


*int_java.awt.event.KeyEvent.VK_AMPERSAND*




*int_java.awt.event.KeyEvent.VK_ASTERISK*




*int_java.awt.event.KeyEvent.VK_AT*

Constant for the "@" key. 


*int_java.awt.event.KeyEvent.VK_B*




*int_java.awt.event.KeyEvent.VK_BACK_QUOTE*




*int_java.awt.event.KeyEvent.VK_BACK_SLASH*

Constant for the back slash key, "\" 


*int_java.awt.event.KeyEvent.VK_BACK_SPACE*




*int_java.awt.event.KeyEvent.VK_BEGIN*

Constant for the Begin key. 


*int_java.awt.event.KeyEvent.VK_BRACELEFT*




*int_java.awt.event.KeyEvent.VK_BRACERIGHT*




*int_java.awt.event.KeyEvent.VK_C*




*int_java.awt.event.KeyEvent.VK_CANCEL*




*int_java.awt.event.KeyEvent.VK_CAPS_LOCK*




*int_java.awt.event.KeyEvent.VK_CIRCUMFLEX*

Constant for the "^" key. 


*int_java.awt.event.KeyEvent.VK_CLEAR*




*int_java.awt.event.KeyEvent.VK_CLOSE_BRACKET*

Constant for the close bracket key, "]" 


*int_java.awt.event.KeyEvent.VK_CODE_INPUT*

Constant for the Code Input function key. 


*int_java.awt.event.KeyEvent.VK_COLON*

Constant for the ":" key. 


*int_java.awt.event.KeyEvent.VK_COMMA*

Constant for the comma key, "," 


*int_java.awt.event.KeyEvent.VK_COMPOSE*

Constant for the Compose function key. 


*int_java.awt.event.KeyEvent.VK_CONTEXT_MENU*

Constant for the Microsoft Windows Context Menu key. 


*int_java.awt.event.KeyEvent.VK_CONTROL*




*int_java.awt.event.KeyEvent.VK_CONVERT*

Constant for the Convert function key. 


*int_java.awt.event.KeyEvent.VK_COPY*




*int_java.awt.event.KeyEvent.VK_CUT*




*int_java.awt.event.KeyEvent.VK_D*




*int_java.awt.event.KeyEvent.VK_DEAD_ABOVEDOT*




*int_java.awt.event.KeyEvent.VK_DEAD_ABOVERING*




*int_java.awt.event.KeyEvent.VK_DEAD_ACUTE*




*int_java.awt.event.KeyEvent.VK_DEAD_BREVE*




*int_java.awt.event.KeyEvent.VK_DEAD_CARON*




*int_java.awt.event.KeyEvent.VK_DEAD_CEDILLA*




*int_java.awt.event.KeyEvent.VK_DEAD_CIRCUMFLEX*




*int_java.awt.event.KeyEvent.VK_DEAD_DIAERESIS*




*int_java.awt.event.KeyEvent.VK_DEAD_DOUBLEACUTE*




*int_java.awt.event.KeyEvent.VK_DEAD_GRAVE*




*int_java.awt.event.KeyEvent.VK_DEAD_IOTA*




*int_java.awt.event.KeyEvent.VK_DEAD_MACRON*




*int_java.awt.event.KeyEvent.VK_DEAD_OGONEK*




*int_java.awt.event.KeyEvent.VK_DEAD_SEMIVOICED_SOUND*




*int_java.awt.event.KeyEvent.VK_DEAD_TILDE*




*int_java.awt.event.KeyEvent.VK_DEAD_VOICED_SOUND*




*int_java.awt.event.KeyEvent.VK_DECIMAL*




*int_java.awt.event.KeyEvent.VK_DELETE*




*int_java.awt.event.KeyEvent.VK_DIVIDE*




*int_java.awt.event.KeyEvent.VK_DOLLAR*

Constant for the "$" key. 


*int_java.awt.event.KeyEvent.VK_DOWN*

Constant for the non-numpad down arrow key. 


*int_java.awt.event.KeyEvent.VK_E*




*int_java.awt.event.KeyEvent.VK_END*




*int_java.awt.event.KeyEvent.VK_ENTER*




*int_java.awt.event.KeyEvent.VK_EQUALS*

Constant for the equals key, "=" 


*int_java.awt.event.KeyEvent.VK_ESCAPE*




*int_java.awt.event.KeyEvent.VK_EURO_SIGN*

Constant for the Euro currency sign key. 


*int_java.awt.event.KeyEvent.VK_EXCLAMATION_MARK*

Constant for the "!" key. 


*int_java.awt.event.KeyEvent.VK_F*




*int_java.awt.event.KeyEvent.VK_F1*

Constant for the F1 function key. 


*int_java.awt.event.KeyEvent.VK_F10*

Constant for the F10 function key. 


*int_java.awt.event.KeyEvent.VK_F11*

Constant for the F11 function key. 


*int_java.awt.event.KeyEvent.VK_F12*

Constant for the F12 function key. 


*int_java.awt.event.KeyEvent.VK_F13*

Constant for the F13 function key. 


*int_java.awt.event.KeyEvent.VK_F14*

Constant for the F14 function key. 


*int_java.awt.event.KeyEvent.VK_F15*

Constant for the F15 function key. 


*int_java.awt.event.KeyEvent.VK_F16*

Constant for the F16 function key. 


*int_java.awt.event.KeyEvent.VK_F17*

Constant for the F17 function key. 


*int_java.awt.event.KeyEvent.VK_F18*

Constant for the F18 function key. 


*int_java.awt.event.KeyEvent.VK_F19*

Constant for the F19 function key. 


*int_java.awt.event.KeyEvent.VK_F2*

Constant for the F2 function key. 


*int_java.awt.event.KeyEvent.VK_F20*

Constant for the F20 function key. 


*int_java.awt.event.KeyEvent.VK_F21*

Constant for the F21 function key. 


*int_java.awt.event.KeyEvent.VK_F22*

Constant for the F22 function key. 


*int_java.awt.event.KeyEvent.VK_F23*

Constant for the F23 function key. 


*int_java.awt.event.KeyEvent.VK_F24*

Constant for the F24 function key. 


*int_java.awt.event.KeyEvent.VK_F3*

Constant for the F3 function key. 


*int_java.awt.event.KeyEvent.VK_F4*

Constant for the F4 function key. 


*int_java.awt.event.KeyEvent.VK_F5*

Constant for the F5 function key. 


*int_java.awt.event.KeyEvent.VK_F6*

Constant for the F6 function key. 


*int_java.awt.event.KeyEvent.VK_F7*

Constant for the F7 function key. 


*int_java.awt.event.KeyEvent.VK_F8*

Constant for the F8 function key. 


*int_java.awt.event.KeyEvent.VK_F9*

Constant for the F9 function key. 


*int_java.awt.event.KeyEvent.VK_FINAL*




*int_java.awt.event.KeyEvent.VK_FIND*




*int_java.awt.event.KeyEvent.VK_FULL_WIDTH*

Constant for the Full-Width Characters function key. 


*int_java.awt.event.KeyEvent.VK_G*




*int_java.awt.event.KeyEvent.VK_GREATER*




*int_java.awt.event.KeyEvent.VK_H*




*int_java.awt.event.KeyEvent.VK_HALF_WIDTH*

Constant for the Half-Width Characters function key. 


*int_java.awt.event.KeyEvent.VK_HELP*




*int_java.awt.event.KeyEvent.VK_HIRAGANA*

Constant for the Hiragana function key. 


*int_java.awt.event.KeyEvent.VK_HOME*




*int_java.awt.event.KeyEvent.VK_I*




*int_java.awt.event.KeyEvent.VK_INPUT_METHOD_ON_OFF*

Constant for the input method on/off key. 


*int_java.awt.event.KeyEvent.VK_INSERT*




*int_java.awt.event.KeyEvent.VK_INVERTED_EXCLAMATION_MARK*

Constant for the inverted exclamation mark key. 


*int_java.awt.event.KeyEvent.VK_J*




*int_java.awt.event.KeyEvent.VK_JAPANESE_HIRAGANA*

Constant for the Japanese-Hiragana function key. This key switches to a Japanese input method and selects its Hiragana input mode. 


*int_java.awt.event.KeyEvent.VK_JAPANESE_KATAKANA*

Constant for the Japanese-Katakana function key. This key switches to a Japanese input method and selects its Katakana input mode. 


*int_java.awt.event.KeyEvent.VK_JAPANESE_ROMAN*

Constant for the Japanese-Roman function key. This key switches to a Japanese input method and selects its Roman-Direct input mode. 


*int_java.awt.event.KeyEvent.VK_K*




*int_java.awt.event.KeyEvent.VK_KANA*




*int_java.awt.event.KeyEvent.VK_KANA_LOCK*

Constant for the locking Kana function key. This key locks the keyboard into a Kana layout. 


*int_java.awt.event.KeyEvent.VK_KANJI*




*int_java.awt.event.KeyEvent.VK_KATAKANA*

Constant for the Katakana function key. 


*int_java.awt.event.KeyEvent.VK_KP_DOWN*

Constant for the numeric keypad down arrow key. 


*int_java.awt.event.KeyEvent.VK_KP_LEFT*

Constant for the numeric keypad left arrow key. 


*int_java.awt.event.KeyEvent.VK_KP_RIGHT*

Constant for the numeric keypad right arrow key. 


*int_java.awt.event.KeyEvent.VK_KP_UP*

Constant for the numeric keypad up arrow key. 


*int_java.awt.event.KeyEvent.VK_L*




*int_java.awt.event.KeyEvent.VK_LEFT*

Constant for the non-numpad left arrow key. 


*int_java.awt.event.KeyEvent.VK_LEFT_PARENTHESIS*

Constant for the "(" key. 


*int_java.awt.event.KeyEvent.VK_LESS*




*int_java.awt.event.KeyEvent.VK_M*




*int_java.awt.event.KeyEvent.VK_META*




*int_java.awt.event.KeyEvent.VK_MINUS*

Constant for the minus key, "-" 


*int_java.awt.event.KeyEvent.VK_MODECHANGE*




*int_java.awt.event.KeyEvent.VK_MULTIPLY*




*int_java.awt.event.KeyEvent.VK_N*




*int_java.awt.event.KeyEvent.VK_NONCONVERT*

Constant for the Don't Convert function key. 


*int_java.awt.event.KeyEvent.VK_NUM_LOCK*




*int_java.awt.event.KeyEvent.VK_NUMBER_SIGN*

Constant for the "#" key. 


*int_java.awt.event.KeyEvent.VK_NUMPAD0*




*int_java.awt.event.KeyEvent.VK_NUMPAD1*




*int_java.awt.event.KeyEvent.VK_NUMPAD2*




*int_java.awt.event.KeyEvent.VK_NUMPAD3*




*int_java.awt.event.KeyEvent.VK_NUMPAD4*




*int_java.awt.event.KeyEvent.VK_NUMPAD5*




*int_java.awt.event.KeyEvent.VK_NUMPAD6*




*int_java.awt.event.KeyEvent.VK_NUMPAD7*




*int_java.awt.event.KeyEvent.VK_NUMPAD8*




*int_java.awt.event.KeyEvent.VK_NUMPAD9*




*int_java.awt.event.KeyEvent.VK_O*




*int_java.awt.event.KeyEvent.VK_OPEN_BRACKET*

Constant for the open bracket key, "[" 


*int_java.awt.event.KeyEvent.VK_P*




*int_java.awt.event.KeyEvent.VK_PAGE_DOWN*




*int_java.awt.event.KeyEvent.VK_PAGE_UP*




*int_java.awt.event.KeyEvent.VK_PASTE*




*int_java.awt.event.KeyEvent.VK_PAUSE*




*int_java.awt.event.KeyEvent.VK_PERIOD*

Constant for the period key, "." 


*int_java.awt.event.KeyEvent.VK_PLUS*

Constant for the "+" key. 


*int_java.awt.event.KeyEvent.VK_PREVIOUS_CANDIDATE*

Constant for the Previous Candidate function key. 


*int_java.awt.event.KeyEvent.VK_PRINTSCREEN*




*int_java.awt.event.KeyEvent.VK_PROPS*




*int_java.awt.event.KeyEvent.VK_Q*




*int_java.awt.event.KeyEvent.VK_QUOTE*




*int_java.awt.event.KeyEvent.VK_QUOTEDBL*




*int_java.awt.event.KeyEvent.VK_R*




*int_java.awt.event.KeyEvent.VK_RIGHT*

Constant for the non-numpad right arrow key. 


*int_java.awt.event.KeyEvent.VK_RIGHT_PARENTHESIS*

Constant for the ")" key. 


*int_java.awt.event.KeyEvent.VK_ROMAN_CHARACTERS*

Constant for the Roman Characters function key. 


*int_java.awt.event.KeyEvent.VK_S*




*int_java.awt.event.KeyEvent.VK_SCROLL_LOCK*




*int_java.awt.event.KeyEvent.VK_SEMICOLON*

Constant for the semicolon key, ";" 


*int_java.awt.event.KeyEvent.VK_SEPARATER*

This constant is obsolete, and is included only for backwards compatibility. 


*int_java.awt.event.KeyEvent.VK_SEPARATOR*

Constant for the Numpad Separator key. 


*int_java.awt.event.KeyEvent.VK_SHIFT*




*int_java.awt.event.KeyEvent.VK_SLASH*

Constant for the forward slash key, "/" 


*int_java.awt.event.KeyEvent.VK_SPACE*




*int_java.awt.event.KeyEvent.VK_STOP*




*int_java.awt.event.KeyEvent.VK_SUBTRACT*




*int_java.awt.event.KeyEvent.VK_T*




*int_java.awt.event.KeyEvent.VK_TAB*




*int_java.awt.event.KeyEvent.VK_U*




*int_java.awt.event.KeyEvent.VK_UNDEFINED*

This value is used to indicate that the keyCode is unknown. KEY_TYPED events do not have a keyCode value; this value is used instead. 


*int_java.awt.event.KeyEvent.VK_UNDERSCORE*

Constant for the "_" key. 


*int_java.awt.event.KeyEvent.VK_UNDO*




*int_java.awt.event.KeyEvent.VK_UP*

Constant for the non-numpad up arrow key. 


*int_java.awt.event.KeyEvent.VK_V*




*int_java.awt.event.KeyEvent.VK_W*




*int_java.awt.event.KeyEvent.VK_WINDOWS*

Constant for the Microsoft Windows "Windows" key. It is used for both the left and right version of the key. 


*int_java.awt.event.KeyEvent.VK_X*




*int_java.awt.event.KeyEvent.VK_Y*




*int_java.awt.event.KeyEvent.VK_Z*





*java.awt.event.KeyEvent(Component,int,long,int,int)*

public KeyEvent(
  java.awt.Component source,
  int id,
  long when,
  int modifiers,
  int keyCode)




*java.awt.event.KeyEvent(Component,int,long,int,int,char)*

public KeyEvent(
  java.awt.Component source,
  int id,
  long when,
  int modifiers,
  int keyCode,
  char keyChar)

Constructs a KeyEvent object. Note that passing in an invalid id results in unspecified behavior. This method throws an IllegalArgumentException if source is null. 

    source - the Component that originated the event 
    id - an integer identifying the type of event 
    when - a long integer that specifies the time the event occurred 
    modifiers - the modifier keys down during event (shift, ctrl, alt, meta) Either extended _DOWN_MASK or old _MASK modifiers should be used, but both models should not be mixed in one event. 
       Use of the extended modifiers is preferred. 
    keyCode - the integer code for an actual key, or VK_UNDEFINED (for a key-typed event) 
    keyChar - the Unicode character generated by this event, or CHAR_UNDEFINED (for key-pressed and key-released events which do not map to a valid Unicode character) 

*java.awt.event.KeyEvent(Component,int,long,int,int,char,int)*

public KeyEvent(
  java.awt.Component source,
  int id,
  long when,
  int modifiers,
  int keyCode,
  char keyChar,
  int keyLocation)




*java.awt.event.KeyEvent.getKeyChar()*

public char getKeyChar()

Returns the character associated with the key in this event. For example, the KEY_TYPED event for shift + "a" returns the value for "A". 

KEY_PRESSED and KEY_RELEASED events are not intended for reporting of character input. Therefore, the values returned by this method are guaranteed to be meaningful only for 
KEY_TYPED events. 



    Returns: the Unicode character defined for this key event. If no valid Unicode character exists for this key event, CHAR_UNDEFINED is returned. 

*java.awt.event.KeyEvent.getKeyCode()*

public int getKeyCode()

Returns the integer keyCode associated with the key in this event. 



    Returns: the integer code for an actual key on the keyboard. (For KEY_TYPED events, the keyCode is VK_UNDEFINED.) 

*java.awt.event.KeyEvent.getKeyLocation()*

public int getKeyLocation()

Returns the location of the key that originated this key event. 

Some keys occur more than once on a keyboard, e.g. the left and right shift keys. Additionally, some keys occur on the numeric keypad. This provides a way of distinguishing such 
keys. 



    Returns: the location of the key that was pressed or released. Always returns KEY_LOCATION_UNKNOWN for KEY_TYPED events. 

*java.awt.event.KeyEvent.getKeyModifiersText(int)*

public static |java.lang.String| getKeyModifiersText(int modifiers)

Returns a String describing the modifier key(s), such as "Shift", or "Ctrl+Shift". These strings can be localized by changing the awt.properties file. 

Note that InputEvent.ALT_MASK and InputEvent.BUTTON2_MASK have the same value, so the string "Alt" is returned for both modifiers. Likewise, InputEvent.META_MASK and 
InputEvent.BUTTON3_MASK have the same value, so the string "Meta" is returned for both modifiers. 



    Returns: string a text description of the combination of modifier keys that were held down during the event 

*java.awt.event.KeyEvent.getKeyText(int)*

public static |java.lang.String| getKeyText(int keyCode)

Returns a String describing the keyCode, such as "HOME", "F1" or "A". These strings can be localized by changing the awt.properties file. 



    Returns: a string containing a text description for a physical key, identified by its keyCode 

*java.awt.event.KeyEvent.isActionKey()*

public boolean isActionKey()

Returns whether the key in this event is an "action" key. Typically an action key does not fire a unicode character and is not a modifier key. 



    Returns: true if the key is an "action" key, false otherwise 

*java.awt.event.KeyEvent.paramString()*

public |java.lang.String| paramString()

Returns a parameter string identifying this event. This method is useful for event logging and for debugging. 



    Returns: a string identifying the event and its attributes 

*java.awt.event.KeyEvent.setKeyChar(char)*

public void setKeyChar(char keyChar)

Set the keyChar value to indicate a logical character. 


    keyChar - a char corresponding to to the combination of keystrokes that make up this event. 

*java.awt.event.KeyEvent.setKeyCode(int)*

public void setKeyCode(int keyCode)

Set the keyCode value to indicate a physical key. 


    keyCode - an integer corresponding to an actual key on the keyboard. 

*java.awt.event.KeyEvent.setModifiers(int)*

public void setModifiers(int modifiers)

Set the modifiers to indicate additional keys that were held down (e.g. shift, ctrl, alt, meta) defined as part of InputEvent. 

NOTE: use of this method is not recommended, because many AWT implementations do not recognize modifier changes. This is especially true for KEY_TYPED events where the shift 
modifier is changed. 

    Deprecated: as of JDK1.1.4

    modifiers - an integer combination of the modifier constants. 



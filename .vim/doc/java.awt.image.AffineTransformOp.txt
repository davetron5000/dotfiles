*java.awt.image.AffineTransformOp* *AffineTransformOp* This class uses an affine

public class AffineTransformOp
  extends    |java.lang.Object|
  implements |java.awt.image.BufferedImageOp|
             |java.awt.image.RasterOp|

|java.awt.image.AffineTransformOp_Description|
|java.awt.image.AffineTransformOp_Fields|
|java.awt.image.AffineTransformOp_Constructors|
|java.awt.image.AffineTransformOp_Methods|

================================================================================

*java.awt.image.AffineTransformOp_Fields*
|int_java.awt.image.AffineTransformOp.TYPE_BICUBIC|
|int_java.awt.image.AffineTransformOp.TYPE_BILINEAR|
|int_java.awt.image.AffineTransformOp.TYPE_NEAREST_NEIGHBOR|

*java.awt.image.AffineTransformOp_Constructors*
|java.awt.image.AffineTransformOp(AffineTransform,int)|Constructs an AffineTran
|java.awt.image.AffineTransformOp(AffineTransform,RenderingHints)|Constructs an

*java.awt.image.AffineTransformOp_Methods*
|java.awt.image.AffineTransformOp.createCompatibleDestImage(BufferedImage,ColorModel)|
|java.awt.image.AffineTransformOp.createCompatibleDestRaster(Raster)|Creates a 
|java.awt.image.AffineTransformOp.filter(BufferedImage,BufferedImage)|Transform
|java.awt.image.AffineTransformOp.filter(Raster,WritableRaster)|Transforms the 
|java.awt.image.AffineTransformOp.getBounds2D(BufferedImage)|Returns the boundi
|java.awt.image.AffineTransformOp.getBounds2D(Raster)|Returns the bounding box 
|java.awt.image.AffineTransformOp.getInterpolationType()|Returns the interpolat
|java.awt.image.AffineTransformOp.getPoint2D(Point2D,Point2D)|Returns the locat
|java.awt.image.AffineTransformOp.getRenderingHints()|Returns the rendering hin
|java.awt.image.AffineTransformOp.getTransform()|Returns the affine transform u

*java.awt.image.AffineTransformOp_Description*

This class uses an affine transform to perform a linear mapping from 2D 
coordinates in the source image or Raster to 2D coordinates in the destination 
image or Raster. The type of interpolation that is used is specified through a 
constructor, either by a RenderingHints object or by one of the integer 
interpolation types defined in this class. 

If a RenderingHints object is specified in the constructor, the interpolation 
hint and the rendering quality hint are used to set the interpolation type for 
this operation. The color rendering hint and the dithering hint can be used 
when color conversion is required. 

Note that the following constraints have to be met: 

The source and destination must be different. For Raster objects, the number of 
bands in the source must be equal to the number of bands in the destination. 


*int_java.awt.image.AffineTransformOp.TYPE_BICUBIC*

This class uses an affine transform to perform a linear mapping from 2D 
coordinates in the source image or Raster to 2D coordinates in the destination 
image or Raster. The type of interpolation that is used is specified through a 
constructor, either by a RenderingHints object or by one of the integer 
interpolation types defined in this class. 

If a RenderingHints object is specified in the constructor, the interpolation 
hint and the rendering quality hint are used to set the interpolation type for 
this operation. The color rendering hint and the dithering hint can be used 
when color conversion is required. 

Note that the following constraints have to be met: 

The source and destination must be different. For Raster objects, the number of 
bands in the source must be equal to the number of bands in the destination. 


*int_java.awt.image.AffineTransformOp.TYPE_BILINEAR*

This class uses an affine transform to perform a linear mapping from 2D 
coordinates in the source image or Raster to 2D coordinates in the destination 
image or Raster. The type of interpolation that is used is specified through a 
constructor, either by a RenderingHints object or by one of the integer 
interpolation types defined in this class. 

If a RenderingHints object is specified in the constructor, the interpolation 
hint and the rendering quality hint are used to set the interpolation type for 
this operation. The color rendering hint and the dithering hint can be used 
when color conversion is required. 

Note that the following constraints have to be met: 

The source and destination must be different. For Raster objects, the number of 
bands in the source must be equal to the number of bands in the destination. 


*int_java.awt.image.AffineTransformOp.TYPE_NEAREST_NEIGHBOR*

This class uses an affine transform to perform a linear mapping from 2D 
coordinates in the source image or Raster to 2D coordinates in the destination 
image or Raster. The type of interpolation that is used is specified through a 
constructor, either by a RenderingHints object or by one of the integer 
interpolation types defined in this class. 

If a RenderingHints object is specified in the constructor, the interpolation 
hint and the rendering quality hint are used to set the interpolation type for 
this operation. The color rendering hint and the dithering hint can be used 
when color conversion is required. 

Note that the following constraints have to be met: 

The source and destination must be different. For Raster objects, the number of 
bands in the source must be equal to the number of bands in the destination. 



*java.awt.image.AffineTransformOp(AffineTransform,int)*

public AffineTransformOp(
  java.awt.geom.AffineTransform xform,
  int interpolationType)

Constructs an AffineTransformOp given an affine transform and the interpolation 
type. 

    xform - The AffineTransform to use for the operation. 
    interpolationType - One of the integer interpolation type constants defined by this class: {@link 
       #TYPE_NEAREST_NEIGHBOR TYPE_NEAREST_NEIGHBOR}, {@link #TYPE_BILINEAR 
       TYPE_BILINEAR}, {@link #TYPE_BICUBIC TYPE_BICUBIC}. 

*java.awt.image.AffineTransformOp(AffineTransform,RenderingHints)*

public AffineTransformOp(
  java.awt.geom.AffineTransform xform,
  java.awt.RenderingHints hints)

Constructs an AffineTransformOp given an affine transform. The interpolation 
type is determined from the RenderingHints object. If the interpolation hint is 
defined, it will be used. Otherwise, if the rendering quality hint is defined, 
the interpolation type is determined from its value. If no hints are specified 
(hints is null), the interpolation type is 
TYPE_NEAREST_NEIGHBOR(|java.awt.image.AffineTransformOp|) . 

    xform - The AffineTransform to use for the operation. 
    hints - The RenderingHints object used to specify the interpolation type for the 
       operation. 

*java.awt.image.AffineTransformOp.createCompatibleDestImage(BufferedImage,ColorModel)*

public |java.awt.image.BufferedImage| createCompatibleDestImage(
  java.awt.image.BufferedImage src,
  java.awt.image.ColorModel destCM)

Creates a zeroed destination image with the correct size and number of bands. A 
RasterFormatException may be thrown if the transformed width or height is equal 
to 0. 

If destCM is null, an appropriate ColorModel is used; this ColorModel may have 
an alpha channel even if the source ColorModel is opaque. 

    src - The BufferedImage to be transformed. 
    destCM - ColorModel of the destination. If null, an appropriate ColorModel is used. 

    Returns: The zeroed destination image. 
*java.awt.image.AffineTransformOp.createCompatibleDestRaster(Raster)*

public |java.awt.image.WritableRaster| createCompatibleDestRaster(java.awt.image.Raster src)

Creates a zeroed destination Raster with the correct size and number of bands. 
A RasterFormatException may be thrown if the transformed width or height is 
equal to 0. 

    src - The Raster to be transformed. 

    Returns: The zeroed destination Raster. 
*java.awt.image.AffineTransformOp.filter(BufferedImage,BufferedImage)*

public final |java.awt.image.BufferedImage| filter(
  java.awt.image.BufferedImage src,
  java.awt.image.BufferedImage dst)

Transforms the source BufferedImage and stores the results in the destination 
BufferedImage. If the color models for the two images do not match, a color 
conversion into the destination color model is performed. If the destination 
image is null, a BufferedImage is created with the source ColorModel. 

The coordinates of the rectangle returned by getBounds2D(BufferedImage) are not 
necessarily the same as the coordinates of the BufferedImage returned by this 
method. If the upper-left corner coordinates of the rectangle are negative then 
this part of the rectangle is not drawn. If the upper-left corner coordinates 
of the rectangle are positive then the filtered image is drawn at that position 
in the destination BufferedImage. 

An IllegalArgumentException is thrown if the source is the same as the 
destination. 

    src - The BufferedImage to transform. 
    dst - The BufferedImage in which to store the results of the transformation. 

    Returns: The filtered BufferedImage. 
*java.awt.image.AffineTransformOp.filter(Raster,WritableRaster)*

public final |java.awt.image.WritableRaster| filter(
  java.awt.image.Raster src,
  java.awt.image.WritableRaster dst)

Transforms the source Raster and stores the results in the destination Raster. 
This operation performs the transform band by band. 

If the destination Raster is null, a new Raster is created. An 
IllegalArgumentException may be thrown if the source is the same as the 
destination or if the number of bands in the source is not equal to the number 
of bands in the destination. 

The coordinates of the rectangle returned by getBounds2D(Raster) are not 
necessarily the same as the coordinates of the WritableRaster returned by this 
method. If the upper-left corner coordinates of rectangle are negative then 
this part of the rectangle is not drawn. If the coordinates of the rectangle 
are positive then the filtered image is drawn at that position in the 
destination Raster. 

    src - The Raster to transform. 
    dst - The Raster in which to store the results of the transformation. 

    Returns: The transformed Raster. 
*java.awt.image.AffineTransformOp.getBounds2D(BufferedImage)*

public final |java.awt.geom.Rectangle2D| getBounds2D(java.awt.image.BufferedImage src)

Returns the bounding box of the transformed destination. The rectangle returned 
is the actual bounding box of the transformed points. The coordinates of the 
upper-left corner of the returned rectangle might not be (0,0). 

    src - The BufferedImage to be transformed. 

    Returns: The Rectangle2D representing the destination's bounding box. 
*java.awt.image.AffineTransformOp.getBounds2D(Raster)*

public final |java.awt.geom.Rectangle2D| getBounds2D(java.awt.image.Raster src)

Returns the bounding box of the transformed destination. The rectangle returned 
will be the actual bounding box of the transformed points. The coordinates of 
the upper-left corner of the returned rectangle might not be (0,0). 

    src - The Raster to be transformed. 

    Returns: The Rectangle2D representing the destination's bounding box. 
*java.awt.image.AffineTransformOp.getInterpolationType()*

public final int getInterpolationType()

Returns the interpolation type used by this op. 


    Returns: the interpolation type. 
*java.awt.image.AffineTransformOp.getPoint2D(Point2D,Point2D)*

public final |java.awt.geom.Point2D| getPoint2D(
  java.awt.geom.Point2D srcPt,
  java.awt.geom.Point2D dstPt)

Returns the location of the corresponding destination point given a point in 
the source. If dstPt is specified, it is used to hold the return value. 

    srcPt - The Point2D that represents the source point. 
    dstPt - The Point2D in which to store the result. 

    Returns: The Point2D in the destination that corresponds to the specified point in the 
             source. 
*java.awt.image.AffineTransformOp.getRenderingHints()*

public final |java.awt.RenderingHints| getRenderingHints()

Returns the rendering hints used by this transform operation. 


    Returns: The RenderingHints object associated with this op. 
*java.awt.image.AffineTransformOp.getTransform()*

public final |java.awt.geom.AffineTransform| getTransform()

Returns the affine transform used by this transform operation. 


    Returns: The AffineTransform associated with this op. 


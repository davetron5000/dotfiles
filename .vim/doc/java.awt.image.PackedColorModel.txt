*java.awt.image.PackedColorModel* *PackedColorModel* The PackedColorModel class is an abstractColorModelclass that works with pixel values which represent
 color and alpha informat

public abstract class PackedColorModel
  extends    |java.awt.image.ColorModel|

|java.awt.image.PackedColorModel_Description|
|java.awt.image.PackedColorModel_Fields|
|java.awt.image.PackedColorModel_Constructors|
|java.awt.image.PackedColorModel_Methods|

====================================================================================================================================================================================

*java.awt.image.PackedColorModel_Constructors*
|java.awt.image.PackedColorModel(ColorSpace,int,int[],int,boolean,int,int)|Constructs a PackedColorModel from a color mask array,   which specifies which bits in an int pixel repr
|java.awt.image.PackedColorModel(ColorSpace,int,int,int,int,int,boolean,int,int)|Constructs a PackedColorModel from the specified  masks which indicate which bits in an int pixel 

*java.awt.image.PackedColorModel_Methods*
|java.awt.image.PackedColorModel.createCompatibleSampleModel(int,int)|Creates a SampleModel with the specified width and  height that has a data layout compatible with this   Colo
|java.awt.image.PackedColorModel.equals(Object)|Tests if the specified Object is an instance  of PackedColorModel and equals this  PackedColorModel.
|java.awt.image.PackedColorModel.getAlphaRaster(WritableRaster)|Returns aWritableRasterrepresenting the alpha channel of   an image, extracted from the input WritableRaster.
|java.awt.image.PackedColorModel.getMask(int)|Returns the mask indicating which bits in a pixel   contain the specified color/alpha sample.
|java.awt.image.PackedColorModel.getMasks()|Returns a mask array indicating which bits in a pixel  contain the color and alpha samples.
|java.awt.image.PackedColorModel.isCompatibleSampleModel(SampleModel)|Checks if the specified SampleModel is compatible  with this ColorModel.

*java.awt.image.PackedColorModel_Description*

The PackedColorModel class is an abstract (|java.awt.image.ColorModel|) class that works with pixel values which represent color and alpha information as separate samples and 
which pack all samples for a single pixel into a single int, short, or byte quantity. This class can be used with an arbitrary (|java.awt.color.ColorSpace|) . The number of color 
samples in the pixel values must be the same as the number of color components in the ColorSpace. There can be a single alpha sample. The array length is always 1 for those 
methods that use a primitive array pixel representation of type transferType. The transfer types supported are DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, and 
DataBuffer.TYPE_INT. Color and alpha samples are stored in the single element of the array in bits indicated by bit masks. Each bit mask must be contiguous and masks must not 
overlap. The same masks apply to the single int pixel representation used by other methods. The correspondence of masks and color/alpha samples is as follows: 

Masks are identified by indices running from 0 through getNumComponents(|java.awt.image.ColorModel|) -1. The first getNumColorComponents(|java.awt.image.ColorModel|) indices refer 
to color samples. If an alpha sample is present, it corresponds the last index. The order of the color indices is specified by the ColorSpace. Typically, this reflects the name of 
the color space type (for example, TYPE_RGB), index 0 corresponds to red, index 1 to green, and index 2 to blue. 

The translation from pixel values to color/alpha components for display or processing purposes is a one-to-one correspondence of samples to components. A PackedColorModel is 
typically used with image data that uses masks to define packed samples. For example, a PackedColorModel can be used in conjunction with a 
(|java.awt.image.SinglePixelPackedSampleModel|) to construct a (|java.awt.image.BufferedImage|) . Normally the masks used by the (|java.awt.image.SampleModel|) and the ColorModel 
would be the same. However, if they are different, the color interpretation of pixel data is done according to the masks of the ColorModel. 

A single int pixel representation is valid for all objects of this class since it is always possible to represent pixel values used with this class in a single int. Therefore, 
methods that use this representation do not throw an IllegalArgumentException due to an invalid pixel value. 

A subclass of PackedColorModel is (|java.awt.image.DirectColorModel|) , which is similar to an X11 TrueColor visual. 



*java.awt.image.PackedColorModel(ColorSpace,int,int[],int,boolean,int,int)*

public PackedColorModel(
  java.awt.color.ColorSpace space,
  int bits,
  int[] colorMaskArray,
  int alphaMask,
  boolean isAlphaPremultiplied,
  int trans,
  int transferType)

Constructs a PackedColorModel from a color mask array, which specifies which bits in an int pixel representation contain each of the color samples, and an alpha mask. Color 
components are in the specified ColorSpace. The length of colorMaskArray should be the number of components in the ColorSpace. All of the bits in each mask must be contiguous and 
fit in the specified number of least significant bits of an int pixel representation. If the alphaMask is 0, there is no alpha. If there is alpha, the boolean isAlphaPremultiplied 
specifies how to interpret color and alpha samples in pixel values. If the boolean is true, color samples are assumed to have been multiplied by the alpha sample. The 
transparency, trans, specifies what alpha values can be represented by this color model. The transfer type is the type of primitive array used to represent pixel values. 

    space - the specified ColorSpace 
    bits - the number of bits in the pixel values 
    colorMaskArray - array that specifies the masks representing the bits of the pixel values that represent the color components 
    alphaMask - specifies the mask representing the bits of the pixel values that represent the alpha component 
    isAlphaPremultiplied - true if color samples are premultiplied by the alpha sample; false otherwise 
    trans - specifies the alpha value that can be represented by this color model 
    transferType - the type of array used to represent pixel values 

*java.awt.image.PackedColorModel(ColorSpace,int,int,int,int,int,boolean,int,int)*

public PackedColorModel(
  java.awt.color.ColorSpace space,
  int bits,
  int rmask,
  int gmask,
  int bmask,
  int amask,
  boolean isAlphaPremultiplied,
  int trans,
  int transferType)

Constructs a PackedColorModel from the specified masks which indicate which bits in an int pixel representation contain the alpha, red, green and blue color samples. Color 
components are in the specified ColorSpace, which must be of type ColorSpace.TYPE_RGB. All of the bits in each mask must be contiguous and fit in the specified number of least 
significant bits of an int pixel representation. If amask is 0, there is no alpha. If there is alpha, the boolean isAlphaPremultiplied specifies how to interpret color and alpha 
samples in pixel values. If the boolean is true, color samples are assumed to have been multiplied by the alpha sample. The transparency, trans, specifies what alpha values can be 
represented by this color model. The transfer type is the type of primitive array used to represent pixel values. 

    space - the specified ColorSpace 
    bits - the number of bits in the pixel values 
    rmask - specifies the mask representing the bits of the pixel values that represent the red color component 
    gmask - specifies the mask representing the bits of the pixel values that represent the green color component 
    bmask - specifies the mask representing the bits of the pixel values that represent the blue color component 
    amask - specifies the mask representing the bits of the pixel values that represent the alpha component 
    isAlphaPremultiplied - true if color samples are premultiplied by the alpha sample; false otherwise 
    trans - specifies the alpha value that can be represented by this color model 
    transferType - the type of array used to represent pixel values 

*java.awt.image.PackedColorModel.createCompatibleSampleModel(int,int)*

public |java.awt.image.SampleModel| createCompatibleSampleModel(
  int w,
  int h)

Creates a SampleModel with the specified width and height that has a data layout compatible with this ColorModel. 


    w - the width (in pixels) of the region of the image data described 
    h - the height (in pixels) of the region of the image data described 

    Returns: the newly created SampleModel. 

*java.awt.image.PackedColorModel.equals(Object)*

public boolean equals(java.lang.Object obj)

Tests if the specified Object is an instance of PackedColorModel and equals this PackedColorModel. 


    obj - the Object to test for equality 

    Returns: true if the specified Object is an instance of PackedColorModel and equals this PackedColorModel; false otherwise. 

*java.awt.image.PackedColorModel.getAlphaRaster(WritableRaster)*

public |java.awt.image.WritableRaster| getAlphaRaster(java.awt.image.WritableRaster raster)

Returns a (|java.awt.image.WritableRaster|) representing the alpha channel of an image, extracted from the input WritableRaster. This method assumes that WritableRaster objects 
associated with this ColorModel store the alpha band, if present, as the last band of image data. Returns null if there is no separate spatial alpha channel associated with this 
ColorModel. This method creates a new WritableRaster, but shares the data array. 


    raster - a WritableRaster containing an image 

    Returns: a WritableRaster that represents the alpha channel of the image contained in raster. 

*java.awt.image.PackedColorModel.getMask(int)*

public final int getMask(int index)

Returns the mask indicating which bits in a pixel contain the specified color/alpha sample. For color samples, index corresponds to the placement of color sample names in the 
color space. Thus, an index equal to 0 for a CMYK ColorSpace would correspond to Cyan and an index equal to 1 would correspond to Magenta. If there is alpha, the alpha index would 
be: 

alphaIndex = numComponents() - 1; 


    index - the specified color or alpha sample 

    Returns: the mask, which indicates which bits of the int pixel representation contain the color or alpha sample specified by index. 

*java.awt.image.PackedColorModel.getMasks()*

public final int[] getMasks()

Returns a mask array indicating which bits in a pixel contain the color and alpha samples. 



    Returns: the mask array , which indicates which bits of the int pixel representation contain the color or alpha samples. 

*java.awt.image.PackedColorModel.isCompatibleSampleModel(SampleModel)*

public boolean isCompatibleSampleModel(java.awt.image.SampleModel sm)

Checks if the specified SampleModel is compatible with this ColorModel. If sm is null, this method returns false. 


    sm - the specified SampleModel, or null 

    Returns: true if the specified SampleModel is compatible with this ColorModel; false otherwise. 



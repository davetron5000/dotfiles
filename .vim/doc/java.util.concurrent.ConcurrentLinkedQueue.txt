*java.util.concurrent.ConcurrentLinkedQueue* *ConcurrentLinkedQueue* An unbounded thread-safeQueue queuebased on linked nodes.

public class ConcurrentLinkedQueue<E>
  extends    |java.util.AbstractQueue|
  implements |java.util.Queue|
             |java.io.Serializable|

|java.util.concurrent.ConcurrentLinkedQueue_Description|
|java.util.concurrent.ConcurrentLinkedQueue_Fields|
|java.util.concurrent.ConcurrentLinkedQueue_Constructors|
|java.util.concurrent.ConcurrentLinkedQueue_Methods|

====================================================================================================================================================================================

*java.util.concurrent.ConcurrentLinkedQueue_Constructors*
|java.util.concurrent.ConcurrentLinkedQueue()|Creates a ConcurrentLinkedQueue that is initially empty.
|java.util.concurrent.ConcurrentLinkedQueue(Collection<?extendsE>)|Creates a ConcurrentLinkedQueue   initially containing the elements of the given collection,  added in traversal

*java.util.concurrent.ConcurrentLinkedQueue_Methods*
|java.util.concurrent.ConcurrentLinkedQueue.add(E)|Adds the specified element to the tail of this queue.
|java.util.concurrent.ConcurrentLinkedQueue.contains(Object)|
|java.util.concurrent.ConcurrentLinkedQueue.isEmpty()|
|java.util.concurrent.ConcurrentLinkedQueue.iterator()|Returns an iterator over the elements in this queue in proper sequence.
|java.util.concurrent.ConcurrentLinkedQueue.offer(E)|Inserts the specified element to the tail of this queue.
|java.util.concurrent.ConcurrentLinkedQueue.peek()|
|java.util.concurrent.ConcurrentLinkedQueue.poll()|
|java.util.concurrent.ConcurrentLinkedQueue.remove(Object)|
|java.util.concurrent.ConcurrentLinkedQueue.size()|Returns the number of elements in this queue.
|java.util.concurrent.ConcurrentLinkedQueue.toArray()|
|java.util.concurrent.ConcurrentLinkedQueue.toArray(T[])|

*java.util.concurrent.ConcurrentLinkedQueue_Description*

An unbounded thread-safe queue(|java.util.Queue|) based on linked nodes. This queue orders elements FIFO (first-in-first-out). The head of the queue is that element that has been 
on the queue the longest time. The tail of the queue is that element that has been on the queue the shortest time. New elements are inserted at the tail of the queue, and the 
queue retrieval operations obtain elements at the head of the queue. A ConcurrentLinkedQueue is an appropriate choice when many threads will share access to a common collection. 
This queue does not permit null elements. 

This implementation employs an efficient wait-free algorithm based on one described in Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms by Maged 
M. Michael and Michael L. Scott. 

Beware that, unlike in most collections, the size method is NOT a constant-time operation. Because of the asynchronous nature of these queues, determining the current number of 
elements requires a traversal of the elements. 

This class and its iterator implement all of the optional methods of the (|java.util.Collection|) and (|java.util.Iterator|) interfaces. 

This class is a member of the <a href="/../guide/collections/index.html"> Java Collections Framework. 



*java.util.concurrent.ConcurrentLinkedQueue()*

public ConcurrentLinkedQueue()

Creates a ConcurrentLinkedQueue that is initially empty. 


*java.util.concurrent.ConcurrentLinkedQueue(Collection<?extendsE>)*

public ConcurrentLinkedQueue(java.util.Collection<? extends E> c)

Creates a ConcurrentLinkedQueue initially containing the elements of the given collection, added in traversal order of the collection's iterator. 

    c - the collection of elements to initially contain 

*java.util.concurrent.ConcurrentLinkedQueue.add(E)*

public boolean add(E o)

Adds the specified element to the tail of this queue. 


    o - the element to add. 

    Returns: true (as per the general contract of Collection.add). 

*java.util.concurrent.ConcurrentLinkedQueue.contains(Object)*

public boolean contains(java.lang.Object o)





*java.util.concurrent.ConcurrentLinkedQueue.isEmpty()*

public boolean isEmpty()





*java.util.concurrent.ConcurrentLinkedQueue.iterator()*

public |java.util.Iterator|<E> iterator()

Returns an iterator over the elements in this queue in proper sequence. The returned iterator is a "weakly consistent" iterator that will never throw 
(|java.util.ConcurrentModificationException|) , and guarantees to traverse elements as they existed upon construction of the iterator, and may (but is not guaranteed to) reflect 
any modifications subsequent to construction. 



    Returns: an iterator over the elements in this queue in proper sequence. 

*java.util.concurrent.ConcurrentLinkedQueue.offer(E)*

public boolean offer(E o)

Inserts the specified element to the tail of this queue. 


    o - the element to add. 

    Returns: true (as per the general contract of Queue.offer). 

*java.util.concurrent.ConcurrentLinkedQueue.peek()*

public |E| peek()





*java.util.concurrent.ConcurrentLinkedQueue.poll()*

public |E| poll()





*java.util.concurrent.ConcurrentLinkedQueue.remove(Object)*

public boolean remove(java.lang.Object o)





*java.util.concurrent.ConcurrentLinkedQueue.size()*

public int size()

Returns the number of elements in this queue. If this queue contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE. 

Beware that, unlike in most collections, this method is NOT a constant-time operation. Because of the asynchronous nature of these queues, determining the current number of 
elements requires an O(n) traversal. 



    Returns: the number of elements in this queue. 

*java.util.concurrent.ConcurrentLinkedQueue.toArray()*

public |java.lang.Object|[] toArray()





*java.util.concurrent.ConcurrentLinkedQueue.toArray(T[])*

public |T|[] toArray(T[] a)







*javax.management.modelmbean.RequiredModelMBean* *RequiredModelMBean* This class

public class RequiredModelMBean
  extends    |java.lang.Object|
  implements |javax.management.modelmbean.ModelMBean|
             |javax.management.MBeanRegistration|
             |javax.management.NotificationEmitter|

|javax.management.modelmbean.RequiredModelMBean_Description|
|javax.management.modelmbean.RequiredModelMBean_Fields|
|javax.management.modelmbean.RequiredModelMBean_Constructors|
|javax.management.modelmbean.RequiredModelMBean_Methods|

================================================================================

*javax.management.modelmbean.RequiredModelMBean_Constructors*
|javax.management.modelmbean.RequiredModelMBean()|Constructs an RequiredModelMB
|javax.management.modelmbean.RequiredModelMBean(ModelMBeanInfo)|Constructs a Re

*javax.management.modelmbean.RequiredModelMBean_Methods*
|javax.management.modelmbean.RequiredModelMBean.addAttributeChangeNotificationListener(NotificationListener,String,Object)|
|javax.management.modelmbean.RequiredModelMBean.addNotificationListener(NotificationListener,NotificationFilter,Object)|
|javax.management.modelmbean.RequiredModelMBean.getAttribute(String)|Returns th
|javax.management.modelmbean.RequiredModelMBean.getAttributes(String[])|Returns
|javax.management.modelmbean.RequiredModelMBean.getClassLoaderRepository()|Retu
|javax.management.modelmbean.RequiredModelMBean.getMBeanInfo()|Returns the attr
|javax.management.modelmbean.RequiredModelMBean.getNotificationInfo()|Returns t
|javax.management.modelmbean.RequiredModelMBean.invoke(String,Object[],String[])|
|javax.management.modelmbean.RequiredModelMBean.load()|Instantiates this MBean 
|javax.management.modelmbean.RequiredModelMBean.postDeregister()|Allows the MBe
|javax.management.modelmbean.RequiredModelMBean.postRegister(Boolean)|Allows th
|javax.management.modelmbean.RequiredModelMBean.preDeregister()|Allows the MBea
|javax.management.modelmbean.RequiredModelMBean.preRegister(MBeanServer,ObjectName)|
|javax.management.modelmbean.RequiredModelMBean.removeAttributeChangeNotificationListener(NotificationListener,String)|
|javax.management.modelmbean.RequiredModelMBean.removeNotificationListener(NotificationListener)|
|javax.management.modelmbean.RequiredModelMBean.removeNotificationListener(NotificationListener,NotificationFilter,Object)|
|javax.management.modelmbean.RequiredModelMBean.sendAttributeChangeNotification(Attribute,Attribute)|
|javax.management.modelmbean.RequiredModelMBean.sendAttributeChangeNotification(AttributeChangeNotification)|
|javax.management.modelmbean.RequiredModelMBean.sendNotification(Notification)|
|javax.management.modelmbean.RequiredModelMBean.sendNotification(String)|
|javax.management.modelmbean.RequiredModelMBean.setAttribute(Attribute)|Sets th
|javax.management.modelmbean.RequiredModelMBean.setAttributes(AttributeList)|Se
|javax.management.modelmbean.RequiredModelMBean.setManagedResource(Object,String)|
|javax.management.modelmbean.RequiredModelMBean.setModelMBeanInfo(ModelMBeanInfo)|
|javax.management.modelmbean.RequiredModelMBean.store()|Captures the current st

*javax.management.modelmbean.RequiredModelMBean_Description*

This class is the implementation of a ModelMBean. An appropriate implementation 
of a ModelMBean must be shipped with every JMX Agent and the class must be 
named RequiredModelMBean. 

Java resources wishing to be manageable instantiate the RequiredModelMBean 
using the MBeanServer's createMBean method. The resource then sets the 
MBeanInfo and Descriptors for the RequiredModelMBean instance. The attributes 
and operations exposed via the ModelMBeanInfo for the ModelMBean are accessible 
from MBeans, connectors/adaptors like other MBeans. Through the Descriptors, 
values and methods in the managed application can be defined and mapped to 
attributes and operations of the ModelMBean. This mapping can be defined in an 
XML formatted file or dynamically and programmatically at runtime. 

Every RequiredModelMBean which is instantiated in the MBeanServer becomes 
manageable: its attributes and operations become remotely accessible through 
the connectors/adaptors connected to that MBeanServer. 

A Java object cannot be registered in the MBeanServer unless it is a JMX 
compliant MBean. By instantiating a RequiredModelMBean, resources are 
guaranteed that the MBean is valid. 

MBeanException and RuntimeOperationsException must be thrown on every public 
method. This allows for wrapping exceptions from distributed communications 
(RMI, EJB, etc.) 


*javax.management.modelmbean.RequiredModelMBean()*

public RequiredModelMBean()
  throws |javax.management.MBeanException|
         |javax.management.RuntimeOperationsException|
         
Constructs an RequiredModelMBean with an empty ModelMBeanInfo. 

The RequiredModelMBean's MBeanInfo and Descriptors can be customized using the 
(|javax.management.modelmbean.RequiredModelMBean|) method. After the 
RequiredModelMBean's MBeanInfo and Descriptors are customized, the 
RequiredModelMBean can be registered with the MBeanServer. 


*javax.management.modelmbean.RequiredModelMBean(ModelMBeanInfo)*

public RequiredModelMBean(javax.management.modelmbean.ModelMBeanInfo mbi)
  throws |javax.management.MBeanException|
         |javax.management.RuntimeOperationsException|
         
Constructs a RequiredModelMBean object using ModelMBeanInfo passed in. As long 
as the RequiredModelMBean is not registered with the MBeanServer yet, the 
RequiredModelMBean's MBeanInfo and Descriptors can be customized using the 
(|javax.management.modelmbean.RequiredModelMBean|) method. After the 
RequiredModelMBean's MBeanInfo and Descriptors are customized, the 
RequiredModelMBean can be registered with the MBeanServer. 

    mbi - The ModelMBeanInfo object to be used by the RequiredModelMBean. The given 
       ModelMBeanInfo is cloned and modified as specified by {@link 
       #setModelMBeanInfo} 

*javax.management.modelmbean.RequiredModelMBean.addAttributeChangeNotificationListener(NotificationListener,String,Object)*

public void addAttributeChangeNotificationListener(
  javax.management.NotificationListener inlistener,
  java.lang.String inAttributeName,
  java.lang.Object inhandback)
  throws |java.lang.IllegalArgumentException|
         |javax.management.MBeanException|
         |javax.management.RuntimeOperationsException|
         



*javax.management.modelmbean.RequiredModelMBean.addNotificationListener(NotificationListener,NotificationFilter,Object)*

public void addNotificationListener(
  javax.management.NotificationListener listener,
  javax.management.NotificationFilter filter,
  java.lang.Object handback)
  throws |java.lang.IllegalArgumentException|
         
Registers an object which implements the NotificationListener interface as a 
listener. This object's 'handleNotification()' method will be invoked when any 
notification is issued through or by the ModelMBean. This does not include 
attributeChangeNotifications. They must be registered for independently. 

    listener - The listener object which will handles notifications emitted by the registered 
       MBean. 
    filter - The filter object. If null, no filtering will be performed before handling 
       notifications. 
    handback - The context to be sent to the listener with the notification when a 
       notification is emitted. 

*javax.management.modelmbean.RequiredModelMBean.getAttribute(String)*

public |java.lang.Object| getAttribute(java.lang.String attrName)
  throws |javax.management.AttributeNotFoundException|
         |javax.management.MBeanException|
         |javax.management.ReflectionException|
         
Returns the value of a specific attribute defined for this ModelMBean. The last 
value returned by an attribute may be cached in the attribute's descriptor. The 
valid value will be in the 'value' field if there is one. If the 
'currencyTimeLimit' field in the descriptor is: 

<0 Then the value is not cached and is never valid. The getter method is 
invoked for the attribute. The 'value' and 'lastUpdatedTimeStamp' fields are 
cleared. =0 Then the value is always cached and always valid. The 'value' field 
is returned. If there is no'value' field then the getter method is invoked for 
the attribute. The 'lastUpdatedTimeStamp' field and `value' fields are set to 
the attribute's value and the current time stamp. >0 Represents the number of 
seconds that the 'value' field is valid. The 'value' field is no longer valid 
when 'lastUpdatedTimeStamp' + 'currencyTimeLimit' > Now. 

When 'value' is valid, 'value' is returned. When 'value' is no longer valid 
then the getter method is invoked for the attribute. The 'lastUpdatedTimeStamp' 
field and `value' fields are updated. 



Note: because of inconsistencies in previous versions of this specification, it 
is recommended not to use negative or zero values for currencyTimeLimit. To 
indicate that a cached value is never valid, omit the currencyTimeLimit field. 
To indicate that it is always valid, use a very large number for this field. 

If the 'getMethod' field contains the name of a valid operation descriptor, 
then the method described by the operation descriptor is executed. The response 
from the method is returned as the value of the attribute. If the operation 
fails or the returned value is not of the same type as the attribute, an 
exception will be thrown. If no 'getMethod' field is defined then the default 
value of the attribute is returned. In this implementation, in every case where 
the getMethod needs to be called, because the method is invoked through the 
standard "invoke" method and thus needs operationInfo, an operation must be 
specified for that getMethod so that the invocation works correctly. 

    attrName - A String specifying the name of the attribute to be retrieved. It must match 
       the name of a ModelMBeanAttributeInfo. 

    Returns: The value of the retrieved attribute from the descriptor 'value' field or from 
             the invocation of the operation in the 'getMethod' field of the 
             descriptor. 
*javax.management.modelmbean.RequiredModelMBean.getAttributes(String[])*

public |javax.management.AttributeList| getAttributes(java.lang.String[] attrNames)

Returns the values of several attributes in the ModelMBean. Executes a 
getAttribute for each attribute name in the attrNames array passed in. 

    attrNames - A String array of names of the attributes to be retrieved. 

    Returns: The array of the retrieved attributes. 
*javax.management.modelmbean.RequiredModelMBean.getClassLoaderRepository()*

protected |javax.management.loading.ClassLoaderRepository| getClassLoaderRepository()

Return the Class Loader Repository used to perform class loading. Subclasses 
may wish to redefine this method in order to return the appropriate 
(|javax.management.loading.ClassLoaderRepository|) that should be used in this 
object. 


    Returns: the Class Loader Repository. 
*javax.management.modelmbean.RequiredModelMBean.getMBeanInfo()*

public |javax.management.MBeanInfo| getMBeanInfo()

Returns the attributes, operations, constructors and notifications that this 
RequiredModelMBean exposes for management. 


    Returns: An instance of ModelMBeanInfo allowing retrieval all attributes, operations, 
             and Notifications of this MBean. 
*javax.management.modelmbean.RequiredModelMBean.getNotificationInfo()*

public |javax.management.MBeanNotificationInfo| getNotificationInfo()

Returns the array of Notifications always generated by the RequiredModelMBean. 

RequiredModelMBean may always send also two additional notifications: 

One with descriptor 
"name=GENERIC,descriptorType=notification,log=T,severity=6,displayName=jmx.modelmbean.generic"
Second is a standard attribute change notification with descriptor 
"name=ATTRIBUTE_CHANGE,descriptorType=notification,log=T,severity=6,displayName=jmx.attribute.change"


Thus these two notifications are always added to those specified by the 
application. 


    Returns: MBeanNotificationInfo[] 
*javax.management.modelmbean.RequiredModelMBean.invoke(String,Object[],String[])*

public |java.lang.Object| invoke(
  java.lang.String opName,
  java.lang.Object[] opArgs,
  java.lang.String[] sig)
  throws |javax.management.MBeanException|
         |javax.management.ReflectionException|
         
Invokes a method on or through a RequiredModelMBean and returns the result of 
the method execution. 

If the given method to be invoked, together with the provided signature, 
matches one of RequiredModelMbean accessible methods, this one will be call. 
Otherwise the call to the given method will be tried on the managed resource. 

The last value returned by an operation may be cached in the operation's 
descriptor which is in the ModelMBeanOperationInfo's descriptor. The valid 
value will be in the 'value' field if there is one. If the 'currencyTimeLimit' 
field in the descriptor is: 

<0 Then the value is not cached and is never valid. The operation method is 
invoked. The 'value' and 'lastUpdatedTimeStamp' fields are cleared. =0 Then the 
value is always cached and always valid. The 'value' field is returned. If 
there is no 'value' field then the operation method is invoked for the 
attribute. The 'lastUpdatedTimeStamp' field and `value' fields are set to the 
operation's return value and the current time stamp. >0 Represents the number 
of seconds that the 'value' field is valid. The 'value' field is no longer 
valid when 'lastUpdatedTimeStamp' + 'currencyTimeLimit' > Now. 

When 'value' is valid, 'value' is returned. When 'value' is no longer valid 
then the operation method is invoked. The 'lastUpdatedTimeStamp' field and 
`value' fields are updated. 



Note: because of inconsistencies in previous versions of this specification, it 
is recommended not to use negative or zero values for currencyTimeLimit. To 
indicate that a cached value is never valid, omit the currencyTimeLimit field. 
To indicate that it is always valid, use a very large number for this field. 

    opName - The name of the method to be invoked. The name can be the fully qualified 
       method name including the classname, or just the method name if the 
       classname is defined in the 'class' field of the operation descriptor. 
    opArgs - An array containing the parameters to be set when the operation is invoked 
    sig - An array containing the signature of the operation. The class objects will be 
       loaded using the same class loader as the one used for loading the MBean 
       on which the operation was invoked. 

    Returns: The object returned by the method, which represents the result of invoking the 
             method on the specified managed resource. 
*javax.management.modelmbean.RequiredModelMBean.load()*

public void load()
  throws |javax.management.InstanceNotFoundException|
         |javax.management.MBeanException|
         |javax.management.RuntimeOperationsException|
         
Instantiates this MBean instance with the data found for the MBean in the 
persistent store. The data loaded could include attribute and operation values. 

This method should be called during construction or initialization of this 
instance, and before the MBean is registered with the MBeanServer. 

If the implementation of this class does not support persistence, an 
(|javax.management.MBeanException|) wrapping a 
(|javax.management.ServiceNotFoundException|) is thrown. 


*javax.management.modelmbean.RequiredModelMBean.postDeregister()*

public void postDeregister()

Allows the MBean to perform any operations needed after having been 
unregistered in the MBean server. 

In order to ensure proper run-time semantics of RequireModelMBean, Any subclass 
of RequiredModelMBean overloading or overriding this method should call 
super.postDeregister() in its own postDeregister implementation. 


*javax.management.modelmbean.RequiredModelMBean.postRegister(Boolean)*

public void postRegister(java.lang.Boolean registrationDone)

Allows the MBean to perform any operations needed after having been registered 
in the MBean server or after the registration has failed. 

In order to ensure proper run-time semantics of RequireModelMBean, Any subclass 
of RequiredModelMBean overloading or overriding this method should call 
super.postRegister(registrationDone) in its own postRegister implementation. 

    registrationDone - Indicates whether or not the MBean has been successfully registered in the 
       MBean server. The value false means that the registration phase has 
       failed. 

*javax.management.modelmbean.RequiredModelMBean.preDeregister()*

public void preDeregister()
  throws |java.lang.Exception|
         
Allows the MBean to perform any operations it needs before being unregistered 
by the MBean server. 

In order to ensure proper run-time semantics of RequireModelMBean, Any subclass 
of RequiredModelMBean overloading or overriding this method should call 
super.preDeregister() in its own preDeregister implementation. 


*javax.management.modelmbean.RequiredModelMBean.preRegister(MBeanServer,ObjectName)*

public |javax.management.ObjectName| preRegister(
  javax.management.MBeanServer server,
  javax.management.ObjectName name)
  throws |java.lang.Exception|
         
Allows the MBean to perform any operations it needs before being registered in 
the MBean server. If the name of the MBean is not specified, the MBean can 
provide a name for its registration. If any exception is raised, the MBean will 
not be registered in the MBean server. 

In order to ensure proper run-time semantics of RequireModelMBean, Any subclass 
of RequiredModelMBean overloading or overriding this method should call 
super.preRegister(server, name) in its own preRegister implementation. 

    server - The MBean server in which the MBean will be registered. 
    name - The object name of the MBean. This name is null if the name parameter to one of 
       the createMBean or registerMBean methods in the {@link MBeanServer} 
       interface is null. In that case, this method must return a non-null 
       ObjectName for the new MBean. 

    Returns: The name under which the MBean is to be registered. This value must not be 
             null. If the name parameter is not null, it will usually but not 
             necessarily be the returned value. 
*javax.management.modelmbean.RequiredModelMBean.removeAttributeChangeNotificationListener(NotificationListener,String)*

public void removeAttributeChangeNotificationListener(
  javax.management.NotificationListener inlistener,
  java.lang.String inAttributeName)
  throws |javax.management.ListenerNotFoundException|
         |javax.management.MBeanException|
         |javax.management.RuntimeOperationsException|
         



*javax.management.modelmbean.RequiredModelMBean.removeNotificationListener(NotificationListener)*

public void removeNotificationListener(javax.management.NotificationListener listener)
  throws |javax.management.ListenerNotFoundException|
         
Removes a listener for Notifications from the RequiredModelMBean. 

    listener - The listener name which was handling notifications emitted by the registered 
       MBean. This method will remove all information related to this listener. 

*javax.management.modelmbean.RequiredModelMBean.removeNotificationListener(NotificationListener,NotificationFilter,Object)*

public void removeNotificationListener(
  javax.management.NotificationListener listener,
  javax.management.NotificationFilter filter,
  java.lang.Object handback)
  throws |javax.management.ListenerNotFoundException|
         



*javax.management.modelmbean.RequiredModelMBean.sendAttributeChangeNotification(Attribute,Attribute)*

public void sendAttributeChangeNotification(
  javax.management.Attribute inOldVal,
  javax.management.Attribute inNewVal)
  throws |javax.management.MBeanException|
         |javax.management.RuntimeOperationsException|
         



*javax.management.modelmbean.RequiredModelMBean.sendAttributeChangeNotification(AttributeChangeNotification)*

public void sendAttributeChangeNotification(javax.management.AttributeChangeNotification ntfyObj)
  throws |javax.management.MBeanException|
         |javax.management.RuntimeOperationsException|
         



*javax.management.modelmbean.RequiredModelMBean.sendNotification(Notification)*

public void sendNotification(javax.management.Notification ntfyObj)
  throws |javax.management.MBeanException|
         |javax.management.RuntimeOperationsException|
         



*javax.management.modelmbean.RequiredModelMBean.sendNotification(String)*

public void sendNotification(java.lang.String ntfyText)
  throws |javax.management.MBeanException|
         |javax.management.RuntimeOperationsException|
         



*javax.management.modelmbean.RequiredModelMBean.setAttribute(Attribute)*

public void setAttribute(javax.management.Attribute attribute)
  throws |javax.management.AttributeNotFoundException|
         |javax.management.InvalidAttributeValueException|
         |javax.management.MBeanException|
         |javax.management.ReflectionException|
         
Sets the value of a specific attribute of a named ModelMBean. 

If the 'setMethod' field of the attribute's descriptor contains the name of a 
valid operation descriptor, then the method described by the operation 
descriptor is executed. In this implementation, the operation descriptor must 
be specified correctly and assigned to the modelMBeanInfo so that the 
'setMethod' works correctly. The response from the method is set as the value 
of the attribute in the descriptor. 

If currencyTimeLimit is > 0, then the new value for the attribute is cached in 
the attribute descriptor's 'value' field and the 'lastUpdatedTimeStamp' field 
is set to the current time stamp. 

If the persist field of the attribute's descriptor is not null then Persistence 
policy from the attribute descriptor is used to guide storing the attribute in 
a persistent store. Store the MBean if 'persistPolicy' field is: 

!= "never" = "always" = "onUpdate" = "onTimer" and now > 'lastPersistTime' + 
'persistPeriod' = "NoMoreOftenThan" and now > 'lastPersistTime' + 
'persistPeriod' 

Do not store the MBean if 'persistPolicy' field is: 

= "never" = "onTimer" now < 'lastPersistTime' + 'persistPeriod' = 
"NoMoreOftenThan" and now < 'lastPersistTime' + 'persistPeriod' 

The ModelMBeanInfo of the Model MBean is stored in a file. 

    attribute - The Attribute instance containing the name of the attribute to be set and the 
       value it is to be set to. 

*javax.management.modelmbean.RequiredModelMBean.setAttributes(AttributeList)*

public |javax.management.AttributeList| setAttributes(javax.management.AttributeList attributes)

Sets the values of an array of attributes of this ModelMBean. Executes the 
setAttribute() method for each attribute in the list. 

    attributes - A list of attributes: The identification of the attributes to be set and the 
       values they are to be set to. 

    Returns: The array of attributes that were set, with their new values in Attribute 
             instances. 
*javax.management.modelmbean.RequiredModelMBean.setManagedResource(Object,String)*

public void setManagedResource(
  java.lang.Object mr,
  java.lang.String mr_type)
  throws |javax.management.InstanceNotFoundException|
         |javax.management.modelmbean.InvalidTargetObjectTypeException|
         |javax.management.MBeanException|
         |javax.management.RuntimeOperationsException|
         
Sets the instance handle of the object against which to execute all methods in 
this ModelMBean management interface (MBeanInfo and Descriptors). 

    mr - Object that is the managed resource 
    mr_type - The type of reference for the managed resource. Can be: "ObjectReference", 
       "Handle", "IOR", "EJBHandle", or "RMIReference". In this implementation 
       only "ObjectReference" is supported. 

*javax.management.modelmbean.RequiredModelMBean.setModelMBeanInfo(ModelMBeanInfo)*

public void setModelMBeanInfo(javax.management.modelmbean.ModelMBeanInfo mbi)
  throws |javax.management.MBeanException|
         |javax.management.RuntimeOperationsException|
         
Initializes a ModelMBean object using ModelMBeanInfo passed in. This method 
makes it possible to set a customized ModelMBeanInfo on the ModelMBean as long 
as it is not registered with the MBeanServer. 

Once the ModelMBean's ModelMBeanInfo (with Descriptors) are customized and set 
on the ModelMBean, the ModelMBean be registered with the MBeanServer. 

If the ModelMBean is currently registered, this method throws a 
(|javax.management.RuntimeOperationsException|) wrapping an 
(|java.lang.IllegalStateException|) If the given inModelMBeanInfo does not 
contain any (|javax.management.modelmbean.ModelMBeanNotificationInfo|) for the 
GENERIC or ATTRIBUTE_CHANGE notifications, then the RequiredModelMBean will 
supply its own default 
ModelMBeanNotificationInfo(|javax.management.modelmbean.ModelMBeanNotificationInfo|)
s for those missing notifications. 

    mbi - The ModelMBeanInfo object to be used by the ModelMBean. 

*javax.management.modelmbean.RequiredModelMBean.store()*

public void store()
  throws |javax.management.InstanceNotFoundException|
         |javax.management.MBeanException|
         |javax.management.RuntimeOperationsException|
         
Captures the current state of this MBean instance and writes it out to the 
persistent store. The state stored could include attribute and operation 
values. 

If the implementation of this class does not support persistence, an 
(|javax.management.MBeanException|) wrapping a 
(|javax.management.ServiceNotFoundException|) is thrown. 

Persistence policy from the MBean and attribute descriptor is used to guide 
execution of this method. The MBean should be stored if 'persistPolicy' field 
is: 

!= "never" = "always" = "onTimer" and now > 'lastPersistTime' + 'persistPeriod' 
= "NoMoreOftenThan" and now > 'lastPersistTime' + 'persistPeriod' 

Do not store the MBean if 'persistPolicy' field is: 

= "never" = "onUpdate" = "onTimer" now < 'lastPersistTime' + 'persistPeriod' 




*java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy* *ThreadPoolExecutor.DiscardOldestPolicy* 

public static class ThreadPoolExecutor.DiscardOldestPolicy
  extends    |java.lang.Object|
  implements |java.util.concurrent.RejectedExecutionHandler|

|java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy_Description|
|java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy_Fields|
|java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy_Constructors|
|java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy_Methods|

================================================================================

*java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy_Constructors*
|java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy()|Creates a Discar

*java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy_Methods*
|java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy.rejectedExecution(Runnable,ThreadPoolExecutor)|

*java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy_Description*

A handler for rejected tasks that discards the oldest unhandled request and 
then retries execute, unless the executor is shut down, in which case the task 
is discarded. 


*java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy()*

public ThreadPoolExecutor.DiscardOldestPolicy()

Creates a DiscardOldestPolicy for the given executor. 


*java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy.rejectedExecution(Runnable,ThreadPoolExecutor)*

public void rejectedExecution(
  java.lang.Runnable r,
  java.util.concurrent.ThreadPoolExecutor e)

Obtains and ignores the next task that the executor would otherwise execute, if 
one is immediately available, and then retries execution of task r, unless the 
executor is shut down, in which case task r is instead discarded. 

    r - the runnable task requested to be executed 
    e - the executor attempting to execute this task 



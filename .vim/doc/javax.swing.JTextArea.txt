*javax.swing.JTextArea* *JTextArea* A JTextArea is a multi-line area that displays plain text.

public class JTextArea
  extends    |javax.swing.text.JTextComponent|

|javax.swing.JTextArea_Description|
|javax.swing.JTextArea_Fields|
|javax.swing.JTextArea_Constructors|
|javax.swing.JTextArea_Methods|

====================================================================================================================================================================================

*javax.swing.JTextArea_Constructors*
|javax.swing.JTextArea()|Constructs a new TextArea.
|javax.swing.JTextArea(Document)|Constructs a new JTextArea with the given document model, and defaults  for all of the other arguments (null, 0, 0).
|javax.swing.JTextArea(Document,String,int,int)|Constructs a new JTextArea with the specified number of rows  and columns, and the given model.
|javax.swing.JTextArea(int,int)|Constructs a new empty TextArea with the specified number of  rows and columns.
|javax.swing.JTextArea(String)|Constructs a new TextArea with the specified text displayed.
|javax.swing.JTextArea(String,int,int)|Constructs a new TextArea with the specified text and number  of rows and columns.

*javax.swing.JTextArea_Methods*
|javax.swing.JTextArea.append(String)|Appends the given text to the end of the document.
|javax.swing.JTextArea.createDefaultModel()|Creates the default implementation of the model  to be used at construction if one isn't explicitly   given.
|javax.swing.JTextArea.getAccessibleContext()|Gets the AccessibleContext associated with this JTextArea.
|javax.swing.JTextArea.getColumns()|Returns the number of columns in the TextArea.
|javax.swing.JTextArea.getColumnWidth()|Gets column width.
|javax.swing.JTextArea.getLineCount()|Determines the number of lines contained in the area.
|javax.swing.JTextArea.getLineEndOffset(int)|Determines the offset of the end of the given line.
|javax.swing.JTextArea.getLineOfOffset(int)|Translates an offset into the components text to a   line number.
|javax.swing.JTextArea.getLineStartOffset(int)|Determines the offset of the start of the given line.
|javax.swing.JTextArea.getLineWrap()|Gets the line-wrapping policy of the text area.
|javax.swing.JTextArea.getPreferredScrollableViewportSize()|Returns the preferred size of the viewport if this component  is embedded in a JScrollPane.
|javax.swing.JTextArea.getPreferredSize()|Returns the preferred size of the TextArea.
|javax.swing.JTextArea.getRowHeight()|Defines the meaning of the height of a row.
|javax.swing.JTextArea.getRows()|Returns the number of rows in the TextArea.
|javax.swing.JTextArea.getScrollableTracksViewportWidth()|Returns true if a viewport should always force the width of this   Scrollable to match the width of the viewport.
|javax.swing.JTextArea.getScrollableUnitIncrement(Rectangle,int,int)|Components that display logical rows or columns should compute  the scroll increment that will completely expo
|javax.swing.JTextArea.getTabSize()|Gets the number of characters used to expand tabs.
|javax.swing.JTextArea.getUIClassID()|Returns the class ID for the UI.
|javax.swing.JTextArea.getWrapStyleWord()|Gets the style of wrapping used if the text area is wrapping  lines.
|javax.swing.JTextArea.insert(String,int)|Inserts the specified text at the specified position.
|javax.swing.JTextArea.paramString()|Returns a string representation of this JTextArea.
|javax.swing.JTextArea.replaceRange(String,int,int)|Replaces text from the indicated start to end position with the  new text specified.
|javax.swing.JTextArea.setColumns(int)|Sets the number of columns for this TextArea.
|javax.swing.JTextArea.setFont(Font)|Sets the current font.
|javax.swing.JTextArea.setLineWrap(boolean)|Sets the line-wrapping policy of the text area.
|javax.swing.JTextArea.setRows(int)|Sets the number of rows for this TextArea.
|javax.swing.JTextArea.setTabSize(int)|Sets the number of characters to expand tabs to.
|javax.swing.JTextArea.setWrapStyleWord(boolean)|Sets the style of wrapping used if the text area is wrapping  lines.

*javax.swing.JTextArea_Description*

A JTextArea is a multi-line area that displays plain text. It is intended to be a lightweight component that provides source compatibility with the java.awt.TextArea class where 
it can reasonably do so. You can find information and examples of using all the text components in Using Text Components, a section in The Java Tutorial. 

This component has capabilities not found in the java.awt.TextArea class. The superclass should be consulted for additional capabilities. Alternative multi-line text classes with 
more capabilities are JTextPane and JEditorPane. 

The java.awt.TextArea internally handles scrolling. JTextArea is different in that it doesn't manage scrolling, but implements the swing Scrollable interface. This allows it to be 
placed inside a JScrollPane if scrolling behavior is desired, and used directly if scrolling is not desired. 

The java.awt.TextArea has the ability to do line wrapping. This was controlled by the horizontal scrolling policy. Since scrolling is not done by JTextArea directly, backward 
compatibility must be provided another way. JTextArea has a bound property for line wrapping that controls whether or not it will wrap lines. By default, the line wrapping 
property is set to false (not wrapped). 

java.awt.TextArea has two properties rows and columns that are used to determine the preferred size. JTextArea uses these properties to indicate the preferred size of the viewport 
when placed inside a JScrollPane to match the functionality provided by java.awt.TextArea. JTextArea has a preferred size of what is needed to display all of the text, so that it 
functions properly inside of a JScrollPane. If the value for rows or columns is equal to zero, the preferred size along that axis is used for the viewport preferred size along the 
same axis. 

The java.awt.TextArea could be monitored for changes by adding a TextListener for TextEvents. In the JTextComponent based components, changes are broadcasted from the model via a 
DocumentEvent to DocumentListeners. The DocumentEvent gives the location of the change and the kind of change if desired. The code fragment might look something like: 

DocumentListener myListener = ??; JTextArea myArea = ??; myArea.getDocument().addDocumentListener(myListener); 

Newlines 

For a discussion on how newlines are handled, see DefaultEditorKit. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.JTextArea()*

public JTextArea()

Constructs a new TextArea. A default model is set, the initial string is null, and rows/columns are set to 0. 


*javax.swing.JTextArea(Document)*

public JTextArea(javax.swing.text.Document doc)

Constructs a new JTextArea with the given document model, and defaults for all of the other arguments (null, 0, 0). 

    doc - the model to use 

*javax.swing.JTextArea(Document,String,int,int)*

public JTextArea(
  javax.swing.text.Document doc,
  java.lang.String text,
  int rows,
  int columns)

Constructs a new JTextArea with the specified number of rows and columns, and the given model. All of the constructors feed through this constructor. 

    doc - the model to use, or create a default one if null 
    text - the text to be displayed, null if none 
    rows - the number of rows >= 0 
    columns - the number of columns >= 0 

*javax.swing.JTextArea(int,int)*

public JTextArea(
  int rows,
  int columns)

Constructs a new empty TextArea with the specified number of rows and columns. A default model is created, and the initial string is null. 

    rows - the number of rows >= 0 
    columns - the number of columns >= 0 

*javax.swing.JTextArea(String)*

public JTextArea(java.lang.String text)

Constructs a new TextArea with the specified text displayed. A default model is created and rows/columns are set to 0. 

    text - the text to be displayed, or null 

*javax.swing.JTextArea(String,int,int)*

public JTextArea(
  java.lang.String text,
  int rows,
  int columns)

Constructs a new TextArea with the specified text and number of rows and columns. A default model is created. 

    text - the text to be displayed, or null 
    rows - the number of rows >= 0 
    columns - the number of columns >= 0 

*javax.swing.JTextArea.append(String)*

public void append(java.lang.String str)

Appends the given text to the end of the document. Does nothing if the model is null or the string is null or empty. 

This method is thread safe, although most Swing methods are not. Please see Threads and Swing for more information. 


    str - the text to insert 

*javax.swing.JTextArea.createDefaultModel()*

protected |javax.swing.text.Document| createDefaultModel()

Creates the default implementation of the model to be used at construction if one isn't explicitly given. A new instance of PlainDocument is returned. 



    Returns: the default document model 

*javax.swing.JTextArea.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JTextArea. For JTextAreas, the AccessibleContext takes the form of an AccessibleJTextArea. A new AccessibleJTextArea instance is 
created if necessary. 



    Returns: an AccessibleJTextArea that serves as the AccessibleContext of this JTextArea 

*javax.swing.JTextArea.getColumns()*

public int getColumns()

Returns the number of columns in the TextArea. 



    Returns: number of columns >= 0 

*javax.swing.JTextArea.getColumnWidth()*

protected int getColumnWidth()

Gets column width. The meaning of what a column is can be considered a fairly weak notion for some fonts. This method is used to define the width of a column. By default this is 
defined to be the width of the character m for the font used. This method can be redefined to be some alternative amount. 



    Returns: the column width >= 1 

*javax.swing.JTextArea.getLineCount()*

public int getLineCount()

Determines the number of lines contained in the area. 



    Returns: the number of lines > 0 

*javax.swing.JTextArea.getLineEndOffset(int)*

public int getLineEndOffset(int line)
  throws |javax.swing.text.BadLocationException|
         
Determines the offset of the end of the given line. 


    line - the line >= 0 

    Returns: the offset >= 0 

*javax.swing.JTextArea.getLineOfOffset(int)*

public int getLineOfOffset(int offset)
  throws |javax.swing.text.BadLocationException|
         
Translates an offset into the components text to a line number. 


    offset - the offset >= 0 

    Returns: the line number >= 0 

*javax.swing.JTextArea.getLineStartOffset(int)*

public int getLineStartOffset(int line)
  throws |javax.swing.text.BadLocationException|
         
Determines the offset of the start of the given line. 


    line - the line number to translate >= 0 

    Returns: the offset >= 0 

*javax.swing.JTextArea.getLineWrap()*

public boolean getLineWrap()

Gets the line-wrapping policy of the text area. If set to true the lines will be wrapped if they are too long to fit within the allocated width. If set to false, the lines will 
always be unwrapped. 



    Returns: if lines will be wrapped 

*javax.swing.JTextArea.getPreferredScrollableViewportSize()*

public |java.awt.Dimension| getPreferredScrollableViewportSize()

Returns the preferred size of the viewport if this component is embedded in a JScrollPane. This uses the desired column and row settings if they have been set, otherwise the 
superclass behavior is used. 



    Returns: The preferredSize of a JViewport whose view is this Scrollable. 

*javax.swing.JTextArea.getPreferredSize()*

public |java.awt.Dimension| getPreferredSize()

Returns the preferred size of the TextArea. This is the maximum of the size needed to display the text and the size requested for the viewport. 



    Returns: 

*javax.swing.JTextArea.getRowHeight()*

protected int getRowHeight()

Defines the meaning of the height of a row. This defaults to the height of the font. 



    Returns: the height >= 1 

*javax.swing.JTextArea.getRows()*

public int getRows()

Returns the number of rows in the TextArea. 



    Returns: the number of rows >= 0 

*javax.swing.JTextArea.getScrollableTracksViewportWidth()*

public boolean getScrollableTracksViewportWidth()

Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport. This is implemented to return true if the line wrapping policy is 
true, and false if lines are not being wrapped. 



    Returns: true if a viewport should force the Scrollables width to match its own. 

*javax.swing.JTextArea.getScrollableUnitIncrement(Rectangle,int,int)*

public int getScrollableUnitIncrement(
  java.awt.Rectangle visibleRect,
  int orientation,
  int direction)

Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation. This 
is implemented to use the values returned by the getRowHeight and getColumnWidth methods. 

Scrolling containers, like JScrollPane, will use this method each time the user requests a unit scroll. 


    visibleRect - the view area visible within the viewport 
    orientation - Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL. 
    direction - Less than zero to scroll up/left, greater than zero for down/right. 

    Returns: The "unit" increment for scrolling in the specified direction 

*javax.swing.JTextArea.getTabSize()*

public int getTabSize()

Gets the number of characters used to expand tabs. If the document is null or doesn't have a tab setting, return a default of 8. 



    Returns: the number of characters 

*javax.swing.JTextArea.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the class ID for the UI. 



    Returns: the ID ("TextAreaUI") 

*javax.swing.JTextArea.getWrapStyleWord()*

public boolean getWrapStyleWord()

Gets the style of wrapping used if the text area is wrapping lines. If set to true the lines will be wrapped at word boundaries (ie whitespace) if they are too long to fit within 
the allocated width. If set to false, the lines will be wrapped at character boundaries. 



    Returns: if the wrap style should be word boundaries instead of character boundaries 

*javax.swing.JTextArea.insert(String,int)*

public void insert(
  java.lang.String str,
  int pos)

Inserts the specified text at the specified position. Does nothing if the model is null or if the text is null or empty. 

This method is thread safe, although most Swing methods are not. Please see Threads and Swing for more information. 


    str - the text to insert 
    pos - the position at which to insert >= 0 

*javax.swing.JTextArea.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JTextArea. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary 
between implementations. The returned string may be empty but may not be null. 



    Returns: a string representation of this JTextArea. 

*javax.swing.JTextArea.replaceRange(String,int,int)*

public void replaceRange(
  java.lang.String str,
  int start,
  int end)

Replaces text from the indicated start to end position with the new text specified. Does nothing if the model is null. Simply does a delete if the new string is null or empty. 

This method is thread safe, although most Swing methods are not. Please see Threads and Swing for more information. 


    str - the text to use as the replacement 
    start - the start position >= 0 
    end - the end position >= start 

*javax.swing.JTextArea.setColumns(int)*

public void setColumns(int columns)

Sets the number of columns for this TextArea. Does an invalidate() after setting the new value. 


    columns - the number of columns >= 0 

*javax.swing.JTextArea.setFont(Font)*

public void setFont(java.awt.Font f)

Sets the current font. This removes cached row height and column width so the new font will be reflected, and calls revalidate(). 


    f - the font to use as the current font 

*javax.swing.JTextArea.setLineWrap(boolean)*

public void setLineWrap(boolean wrap)

Sets the line-wrapping policy of the text area. If set to true the lines will be wrapped if they are too long to fit within the allocated width. If set to false, the lines will 
always be unwrapped. A PropertyChange event ("lineWrap") is fired when the policy is changed. By default this property is false. 


    wrap - indicates if lines should be wrapped 

*javax.swing.JTextArea.setRows(int)*

public void setRows(int rows)

Sets the number of rows for this TextArea. Calls invalidate() after setting the new value. 


    rows - the number of rows >= 0 

*javax.swing.JTextArea.setTabSize(int)*

public void setTabSize(int size)

Sets the number of characters to expand tabs to. This will be multiplied by the maximum advance for variable width fonts. A PropertyChange event ("tabSize") is fired when the tab 
size changes. 


    size - number of characters to expand to 

*javax.swing.JTextArea.setWrapStyleWord(boolean)*

public void setWrapStyleWord(boolean word)

Sets the style of wrapping used if the text area is wrapping lines. If set to true the lines will be wrapped at word boundaries (whitespace) if they are too long to fit within the 
allocated width. If set to false, the lines will be wrapped at character boundaries. By default this property is false. 


    word - indicates if word boundaries should be used for line wrapping 



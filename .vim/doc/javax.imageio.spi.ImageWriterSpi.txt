*javax.imageio.spi.ImageWriterSpi* *ImageWriterSpi* The service provider interfa

public abstract class ImageWriterSpi
  extends    |javax.imageio.spi.ImageReaderWriterSpi|

|javax.imageio.spi.ImageWriterSpi_Description|
|javax.imageio.spi.ImageWriterSpi_Fields|
|javax.imageio.spi.ImageWriterSpi_Constructors|
|javax.imageio.spi.ImageWriterSpi_Methods|

================================================================================

*javax.imageio.spi.ImageWriterSpi_Fields*
|java.lang.Class[]_javax.imageio.spi.ImageWriterSpi.outputTypes|
|java.lang.String[]_javax.imageio.spi.ImageWriterSpi.readerSpiNames|
|java.lang.Class[]_javax.imageio.spi.ImageWriterSpi.STANDARD_OUTPUT_TYPE|

*javax.imageio.spi.ImageWriterSpi_Constructors*
|javax.imageio.spi.ImageWriterSpi()|Constructs a blank ImageWriterSpi.
|javax.imageio.spi.ImageWriterSpi(String,String,String[],String[],String[],String,Class[],String[],boolean,String,String,String[],String[],boolean,String,String,String[],String[])|

*javax.imageio.spi.ImageWriterSpi_Methods*
|javax.imageio.spi.ImageWriterSpi.canEncodeImage(ImageTypeSpecifier)|Returns tr
|javax.imageio.spi.ImageWriterSpi.canEncodeImage(RenderedImage)|Returns true if
|javax.imageio.spi.ImageWriterSpi.createWriterInstance()|Returns an instance of
|javax.imageio.spi.ImageWriterSpi.createWriterInstance(Object)|Returns an insta
|javax.imageio.spi.ImageWriterSpi.getImageReaderSpiNames()|Returns an array of 
|javax.imageio.spi.ImageWriterSpi.getOutputTypes()|Returns an array of Class ob
|javax.imageio.spi.ImageWriterSpi.isFormatLossless()|Returns true if the format
|javax.imageio.spi.ImageWriterSpi.isOwnWriter(ImageWriter)|Returns true if the 

*javax.imageio.spi.ImageWriterSpi_Description*

The service provider interface (SPI) for ImageWriters. For more information on 
service provider classes, see the class comment for the IIORegistry class. 

Each ImageWriterSpi provides several types of information about the ImageWriter 
class with which it is associated. 

The name of the vendor who defined the SPI class and a brief description of the 
class are available via the getVendorName, getDescription, and getVersion 
methods. These methods may be internationalized to provide locale-specific 
output. These methods are intended mainly to provide short, human-writable 
information that might be used to organize a pop-up menu or other list. 

Lists of format names, file suffixes, and MIME types associated with the 
service may be obtained by means of the getFormatNames, getFileSuffixes, and 
getMIMEType methods. These methods may be used to identify candidate 
ImageWriters for writing a particular file or stream based on manual format 
selection, file naming, or MIME associations. 

A more reliable way to determine which ImageWriters are likely to be able to 
parse a particular data stream is provided by the canEncodeImage method. This 
methods allows the service provider to inspect the actual image contents. 

Finally, an instance of the ImageWriter class associated with this service 
provider may be obtained by calling the createWriterInstance method. Any 
heavyweight initialization, such as the loading of native libraries or creation 
of large tables, should be deferred at least until the first invocation of this 
method. 


*java.lang.Class[]_javax.imageio.spi.ImageWriterSpi.outputTypes*

The service provider interface (SPI) for ImageWriters. For more information on 
service provider classes, see the class comment for the IIORegistry class. 

Each ImageWriterSpi provides several types of information about the ImageWriter 
class with which it is associated. 

The name of the vendor who defined the SPI class and a brief description of the 
class are available via the getVendorName, getDescription, and getVersion 
methods. These methods may be internationalized to provide locale-specific 
output. These methods are intended mainly to provide short, human-writable 
information that might be used to organize a pop-up menu or other list. 

Lists of format names, file suffixes, and MIME types associated with the 
service may be obtained by means of the getFormatNames, getFileSuffixes, and 
getMIMEType methods. These methods may be used to identify candidate 
ImageWriters for writing a particular file or stream based on manual format 
selection, file naming, or MIME associations. 

A more reliable way to determine which ImageWriters are likely to be able to 
parse a particular data stream is provided by the canEncodeImage method. This 
methods allows the service provider to inspect the actual image contents. 

Finally, an instance of the ImageWriter class associated with this service 
provider may be obtained by calling the createWriterInstance method. Any 
heavyweight initialization, such as the loading of native libraries or creation 
of large tables, should be deferred at least until the first invocation of this 
method. 


*java.lang.String[]_javax.imageio.spi.ImageWriterSpi.readerSpiNames*

The service provider interface (SPI) for ImageWriters. For more information on 
service provider classes, see the class comment for the IIORegistry class. 

Each ImageWriterSpi provides several types of information about the ImageWriter 
class with which it is associated. 

The name of the vendor who defined the SPI class and a brief description of the 
class are available via the getVendorName, getDescription, and getVersion 
methods. These methods may be internationalized to provide locale-specific 
output. These methods are intended mainly to provide short, human-writable 
information that might be used to organize a pop-up menu or other list. 

Lists of format names, file suffixes, and MIME types associated with the 
service may be obtained by means of the getFormatNames, getFileSuffixes, and 
getMIMEType methods. These methods may be used to identify candidate 
ImageWriters for writing a particular file or stream based on manual format 
selection, file naming, or MIME associations. 

A more reliable way to determine which ImageWriters are likely to be able to 
parse a particular data stream is provided by the canEncodeImage method. This 
methods allows the service provider to inspect the actual image contents. 

Finally, an instance of the ImageWriter class associated with this service 
provider may be obtained by calling the createWriterInstance method. Any 
heavyweight initialization, such as the loading of native libraries or creation 
of large tables, should be deferred at least until the first invocation of this 
method. 


*java.lang.Class[]_javax.imageio.spi.ImageWriterSpi.STANDARD_OUTPUT_TYPE*

The service provider interface (SPI) for ImageWriters. For more information on 
service provider classes, see the class comment for the IIORegistry class. 

Each ImageWriterSpi provides several types of information about the ImageWriter 
class with which it is associated. 

The name of the vendor who defined the SPI class and a brief description of the 
class are available via the getVendorName, getDescription, and getVersion 
methods. These methods may be internationalized to provide locale-specific 
output. These methods are intended mainly to provide short, human-writable 
information that might be used to organize a pop-up menu or other list. 

Lists of format names, file suffixes, and MIME types associated with the 
service may be obtained by means of the getFormatNames, getFileSuffixes, and 
getMIMEType methods. These methods may be used to identify candidate 
ImageWriters for writing a particular file or stream based on manual format 
selection, file naming, or MIME associations. 

A more reliable way to determine which ImageWriters are likely to be able to 
parse a particular data stream is provided by the canEncodeImage method. This 
methods allows the service provider to inspect the actual image contents. 

Finally, an instance of the ImageWriter class associated with this service 
provider may be obtained by calling the createWriterInstance method. Any 
heavyweight initialization, such as the loading of native libraries or creation 
of large tables, should be deferred at least until the first invocation of this 
method. 



*javax.imageio.spi.ImageWriterSpi()*

protected ImageWriterSpi()

Constructs a blank ImageWriterSpi. It is up to the subclass to initialize 
instance variables and/or override method implementations in order to provide 
working versions of all methods. 


*javax.imageio.spi.ImageWriterSpi(String,String,String[],String[],String[],String,Class[],String[],boolean,String,String,String[],String[],boolean,String,String,String[],String[])*

public ImageWriterSpi(
  java.lang.String vendorName,
  java.lang.String version,
  java.lang.String[] names,
  java.lang.String[] suffixes,
  java.lang.String[] MIMETypes,
  java.lang.String writerClassName,
  java.lang.Class[] outputTypes,
  java.lang.String[] readerSpiNames,
  boolean supportsStandardStreamMetadataFormat,
  java.lang.String nativeStreamMetadataFormatName,
  java.lang.String nativeStreamMetadataFormatClassName,
  java.lang.String[] extraStreamMetadataFormatNames,
  java.lang.String[] extraStreamMetadataFormatClassNames,
  boolean supportsStandardImageMetadataFormat,
  java.lang.String nativeImageMetadataFormatName,
  java.lang.String nativeImageMetadataFormatClassName,
  java.lang.String[] extraImageMetadataFormatNames,
  java.lang.String[] extraImageMetadataFormatClassNames)

Constructs an ImageWriterSpi with a given set of values. 

    vendorName - the vendor name, as a non-null String. 
    version - a version identifier, as a non-null String. 
    names - a non-null array of Strings indicating the format names. At least one entry 
       must be present. 
    suffixes - an array of Strings indicating the common file suffixes. If no suffixes are 
       defined, null should be supplied. An array of length 0 will be 
       normalized to null. 
    MIMETypes - an array of Strings indicating the format's MIME types. If no suffixes are 
       defined, null should be supplied. An array of length 0 will be 
       normalized to null. 
    writerClassName - the fully-qualified name of the associated ImageWriterSpi class, as a non-null 
       String. 
    outputTypes - an array of Class objects of length at least 1 indicating the legal output 
       types. 
    readerSpiNames - an array Strings of length at least 1 naming the classes of all associated 
       ImageReaders, or null. An array of length 0 is normalized to null. 
    supportsStandardStreamMetadataFormat - a boolean that indicates whether a stream metadata object can use trees 
       described by the standard metadata format. 
    nativeStreamMetadataFormatName - a String, or null, to be returned from getNativeStreamMetadataFormatName. 
    nativeStreamMetadataFormatClassName - a String, or null, to be used to instantiate a metadata format object to be 
       returned from getNativeStreamMetadataFormat. 
    extraStreamMetadataFormatNames - an array of Strings, or null, to be returned from 
       getExtraStreamMetadataFormatNames. An array of length 0 is normalized to 
       null. 
    extraStreamMetadataFormatClassNames - an array of Strings, or null, to be used to instantiate a metadata format 
       object to be returned from getStreamMetadataFormat. An array of length 0 
       is normalized to null. 
    supportsStandardImageMetadataFormat - a boolean that indicates whether an image metadata object can use trees 
       described by the standard metadata format. 
    nativeImageMetadataFormatName - a String, or null, to be returned from getNativeImageMetadataFormatName. 
    nativeImageMetadataFormatClassName - a String, or null, to be used to instantiate a metadata format object to be 
       returned from getNativeImageMetadataFormat. 
    extraImageMetadataFormatNames - an array of Strings to be returned from getExtraImageMetadataFormatNames. An 
       array of length 0 is normalized to null. 
    extraImageMetadataFormatClassNames - an array of Strings, or null, to be used to instantiate a metadata format 
       object to be returned from getImageMetadataFormat. An array of length 0 
       is normalized to null. 

*javax.imageio.spi.ImageWriterSpi.canEncodeImage(ImageTypeSpecifier)*

public abstract boolean canEncodeImage(javax.imageio.ImageTypeSpecifier type)

Returns true if the ImageWriter implementation associated with this service 
provider is able to encode an image with the given layout. The layout (i.e., 
the image's SampleModel and ColorModel) is described by an ImageTypeSpecifier 
object. 

A return value of true is not an absolute guarantee of successful encoding; the 
encoding process may still produce errors due to factors such as I/O errors, 
inconsistent or malformed data structures, etc. The intent is that a reasonable 
inspection of the basic structure of the image be performed in order to 
determine if it is within the scope of the encoding format. For example, a 
service provider for a format that can only encode greyscale would return false 
if handed an RGB BufferedImage. Similarly, a service provider for a format that 
can encode 8-bit RGB imagery might refuse to encode an image with an associated 
alpha channel. 

Different ImageWriters, and thus service providers, may choose to be more or 
less strict. For example, they might accept an image with premultiplied alpha 
even though it will have to be divided out of each pixel, at some loss of 
precision, in order to be stored. 

    type - an ImageTypeSpecifier specifying the layout of the image to be written. 

    Returns: true if this writer is likely to be able to encode images with the given 
             layout. 
*javax.imageio.spi.ImageWriterSpi.canEncodeImage(RenderedImage)*

public boolean canEncodeImage(java.awt.image.RenderedImage im)

Returns true if the ImageWriter implementation associated with this service 
provider is able to encode the given RenderedImage instance. Note that this 
includes instances of java.awt.image.BufferedImage. 

See the discussion for canEncodeImage(ImageTypeSpecifier) for information on 
the semantics of this method. 

    im - an instance of RenderedImage to be encoded. 

    Returns: true if this writer is likely to be able to encode this image. 
*javax.imageio.spi.ImageWriterSpi.createWriterInstance()*

public |javax.imageio.ImageWriter| createWriterInstance()
  throws |java.io.IOException|
         
Returns an instance of the ImageWriter implementation associated with this 
service provider. The returned object will initially be in an initial state as 
if its reset method had been called. 

The default implementation simply returns createWriterInstance(null). 


    Returns: an ImageWriter instance. 
*javax.imageio.spi.ImageWriterSpi.createWriterInstance(Object)*

public abstract |javax.imageio.ImageWriter| createWriterInstance(java.lang.Object extension)
  throws |java.io.IOException|
         
Returns an instance of the ImageWriter implementation associated with this 
service provider. The returned object will initially be in an initial state as 
if its reset method had been called. 

An Object may be supplied to the plug-in at construction time. The nature of 
the object is entirely plug-in specific. 

Typically, a plug-in will implement this method using code such as return new 
MyImageWriter(this). 

    extension - a plug-in specific extension object, which may be null. 

    Returns: an ImageWriter instance. 
*javax.imageio.spi.ImageWriterSpi.getImageReaderSpiNames()*

public |java.lang.String| getImageReaderSpiNames()

Returns an array of Strings containing all the fully qualified names of all the 
ImageReaderSpi classes that can understand the internal metadata representation 
used by the ImageWriter associated with this service provider, or null if there 
are no such ImageReaders specified. If a non-null value is returned, it must 
have non-zero length. 

The first item in the array must be the name of the service provider for the 
"preferred" reader, as it will be used to instantiate the ImageReader returned 
by ImageIO.getImageReader(ImageWriter). 

This mechanism may be used to obtain ImageReaders that will generated non-pixel 
meta-data (see IIOExtraDataInfo) in a structure understood by an ImageWriter. 
By reading the image and obtaining this data from one of the ImageReaders 
obtained with this method and passing it on to the ImageWriter, a client 
program can read an image, modify it in some way, and write it back out 
preserving all meta-data, without having to understand anything about the 
internal structure of the meta-data, or even about the image format. 


    Returns: an array of Strings of length at least 1 containing names of ImageReaderSpis, 
             or null. 
*javax.imageio.spi.ImageWriterSpi.getOutputTypes()*

public |java.lang.Class| getOutputTypes()

Returns an array of Class objects indicating what types of objects may be used 
as arguments to the writer's setOutput method. 

For most writers, which only output to an ImageOutputStream, a single-element 
array containing ImageOutputStream.class should be returned. 


    Returns: a non-null array of Classobjects of length at least 1. 
*javax.imageio.spi.ImageWriterSpi.isFormatLossless()*

public boolean isFormatLossless()

Returns true if the format that this writer outputs preserves pixel data 
bit-accurately. The default implementation returns true. 


    Returns: true if the format preserves full pixel accuracy. 
*javax.imageio.spi.ImageWriterSpi.isOwnWriter(ImageWriter)*

public boolean isOwnWriter(javax.imageio.ImageWriter writer)

Returns true if the ImageWriter object passed in is an instance of the 
ImageWriter associated with this service provider. 

    writer - an ImageWriter instance. 

    Returns: true if writer is recognized 


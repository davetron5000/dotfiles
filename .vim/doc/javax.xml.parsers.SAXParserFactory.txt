*javax.xml.parsers.SAXParserFactory* *SAXParserFactory* Defines a factory API th

public abstract class SAXParserFactory
  extends    |java.lang.Object|

|javax.xml.parsers.SAXParserFactory_Description|
|javax.xml.parsers.SAXParserFactory_Fields|
|javax.xml.parsers.SAXParserFactory_Constructors|
|javax.xml.parsers.SAXParserFactory_Methods|

================================================================================

*javax.xml.parsers.SAXParserFactory_Constructors*
|javax.xml.parsers.SAXParserFactory()|Protected constructor to force use of#new

*javax.xml.parsers.SAXParserFactory_Methods*
|javax.xml.parsers.SAXParserFactory.getFeature(String)|Returns the particular p
|javax.xml.parsers.SAXParserFactory.getSchema()|Gets theSchemaobject specified 
|javax.xml.parsers.SAXParserFactory.isNamespaceAware()|Indicates whether or not
|javax.xml.parsers.SAXParserFactory.isValidating()|Indicates whether or not the
|javax.xml.parsers.SAXParserFactory.isXIncludeAware()|Get state of XInclude pro
|javax.xml.parsers.SAXParserFactory.newInstance()|Obtain a new instance of a SA
|javax.xml.parsers.SAXParserFactory.newSAXParser()|Creates a new instance of a 
|javax.xml.parsers.SAXParserFactory.setFeature(String,boolean)|Sets the particu
|javax.xml.parsers.SAXParserFactory.setNamespaceAware(boolean)|Specifies that t
|javax.xml.parsers.SAXParserFactory.setSchema(Schema)|Set theSchemato be used b
|javax.xml.parsers.SAXParserFactory.setValidating(boolean)|Specifies that the p
|javax.xml.parsers.SAXParserFactory.setXIncludeAware(boolean)|Set state of XInc

*javax.xml.parsers.SAXParserFactory_Description*

Defines a factory API that enables applications to configure and obtain a SAX 
based parser to parse XML documents. 


*javax.xml.parsers.SAXParserFactory()*

protected SAXParserFactory()

Protected constructor to force use of (|javax.xml.parsers.SAXParserFactory|) . 


*javax.xml.parsers.SAXParserFactory.getFeature(String)*

public abstract boolean getFeature(java.lang.String name)
  throws |javax.xml.parsers.ParserConfigurationException|
         |org.xml.sax.SAXNotRecognizedException|
         |org.xml.sax.SAXNotSupportedException|
         
Returns the particular property requested for in the underlying implementation 
of org.xml.sax.XMLReader. 

    name - The name of the property to be retrieved. 

    Returns: Value of the requested property. 
*javax.xml.parsers.SAXParserFactory.getSchema()*

public |javax.xml.validation.Schema| getSchema()

Gets the (|javax.xml.validation.Schema|) object specified through the 
(|javax.xml.parsers.SAXParserFactory|) method. 


    Returns: the {@link Schema} object that was last set through the {@link 
             #setSchema(Schema)} method, or null if the method was not invoked 
             since a {@link SAXParserFactory} is created. 
*javax.xml.parsers.SAXParserFactory.isNamespaceAware()*

public boolean isNamespaceAware()

Indicates whether or not the factory is configured to produce parsers which are 
namespace aware. 


    Returns: true if the factory is configured to produce parsers which are namespace aware; 
             false otherwise. 
*javax.xml.parsers.SAXParserFactory.isValidating()*

public boolean isValidating()

Indicates whether or not the factory is configured to produce parsers which 
validate the XML content during parse. 


    Returns: true if the factory is configured to produce parsers which validate the XML 
             content during parse; false otherwise. 
*javax.xml.parsers.SAXParserFactory.isXIncludeAware()*

public boolean isXIncludeAware()

Get state of XInclude processing. 


    Returns: current state of XInclude processing 
*javax.xml.parsers.SAXParserFactory.newInstance()*

public static |javax.xml.parsers.SAXParserFactory| newInstance()

Obtain a new instance of a SAXParserFactory. This static method creates a new 
factory instance This method uses the following ordered lookup procedure to 
determine the SAXParserFactory implementation class to load: 

Use the javax.xml.parsers.SAXParserFactory system property. 

Use the properties file "lib/jaxp.properties" in the JRE directory. This 
configuration file is in standard java.util.Properties format and contains the 
fully qualified name of the implementation class with the key being the system 
property defined above. 

The jaxp.properties file is read only once by the JAXP implementation and it's 
values are then cached for future use. If the file does not exist when the 
first attempt is made to read from it, no further attempts are made to check 
for its existence. It is not possible to change the value of any property in 
jaxp.properties after it has been read for the first time. 

Use the Services API (as detailed in the JAR specification), if available, to 
determine the classname. The Services API will look for a classname in the file 
META-INF/services/javax.xml.parsers.SAXParserFactory in jars available to the 
runtime. 

Platform default SAXParserFactory instance. 



Once an application has obtained a reference to a SAXParserFactory it can use 
the factory to configure and obtain parser instances. 



Tip for Trouble-shooting Setting the jaxp.debug system property will cause this 
method to print a lot of debug messages to System.err about what it is doing 
and where it is looking at. 

If you have problems loading (|javax.xml.parsers.DocumentBuilder|) s, try: 

java -Djaxp.debug=1 YourProgram .... 


    Returns: A new instance of a SAXParserFactory. 
*javax.xml.parsers.SAXParserFactory.newSAXParser()*

public abstract |javax.xml.parsers.SAXParser| newSAXParser()
  throws |javax.xml.parsers.ParserConfigurationException|
         |org.xml.sax.SAXException|
         
Creates a new instance of a SAXParser using the currently configured factory 
parameters. 


    Returns: A new instance of a SAXParser. 
*javax.xml.parsers.SAXParserFactory.setFeature(String,boolean)*

public abstract void setFeature(
  java.lang.String name,
  boolean value)
  throws |javax.xml.parsers.ParserConfigurationException|
         |org.xml.sax.SAXNotRecognizedException|
         |org.xml.sax.SAXNotSupportedException|
         
Sets the particular feature in the underlying implementation of 
org.xml.sax.XMLReader. A list of the core features and properties can be found 
at http://www.saxproject.org/ 

All implementations are required to support the (|javax.xml.XMLConstants|) 
feature. When the feature is 

true: the implementation will limit XML processing to conform to implementation 
limits. Examples include enity expansion limits and XML Schema constructs that 
would consume large amounts of resources. If XML processing is limited for 
security reasons, it will be reported via a call to the registered 
(|org.xml.sax.ErrorHandler|) . See (|javax.xml.parsers.SAXParser|) parse 
methods for handler specification. 

When the feature is false, the implementation will processing XML according to 
the XML specifications without regard to possible implementation limits. 



    name - The name of the feature to be set. 
    value - The value of the feature to be set. 

*javax.xml.parsers.SAXParserFactory.setNamespaceAware(boolean)*

public void setNamespaceAware(boolean awareness)

Specifies that the parser produced by this code will provide support for XML 
namespaces. By default the value of this is set to false. 

    awareness - true if the parser produced by this code will provide support for XML 
       namespaces; false otherwise. 

*javax.xml.parsers.SAXParserFactory.setSchema(Schema)*

public void setSchema(javax.xml.validation.Schema schema)

Set the (|javax.xml.validation.Schema|) to be used by parsers created from this 
factory. 

When a (|javax.xml.validation.Schema|) is non-null, a parser will use a 
validator created from it to validate documents before it passes information 
down to the application. 

When warnings/errors/fatal errors are found by the validator, the parser must 
handle them as if those errors were found by the parser itself. In other words, 
if the user-specified (|org.xml.sax.ErrorHandler|) is set, it must receive 
those errors, and if not, they must be treated according to the implementation 
specific default error handling rules. 

A validator may modify the SAX event stream (for example by adding default 
values that were missing in documents), and a parser is responsible to make 
sure that the application will receive those modified event stream. 

Initialy, null is set as the (|javax.xml.validation.Schema|) . 

This processing will take effect even if the 
(|javax.xml.parsers.SAXParserFactory|) method returns false. 

It is an error to use the http://java.sun.com/xml/jaxp/properties/schemaSource 
property and/or the http://java.sun.com/xml/jaxp/properties/schemaLanguage 
property in conjunction with a non-null (|javax.xml.validation.Schema|) object. 
Such configuration will cause a (|org.xml.sax.SAXException|) exception when 
those properties are set on a (|javax.xml.parsers.SAXParser|) . 

Note for implmentors 

A parser must be able to work with any (|javax.xml.validation.Schema|) 
implementation. However, parsers and schemas are allowed to use 
implementation-specific custom mechanisms as long as they yield the result 
described in the specification. 

    schema - Schema to use, null to remove a schema. 

*javax.xml.parsers.SAXParserFactory.setValidating(boolean)*

public void setValidating(boolean validating)

Specifies that the parser produced by this code will validate documents as they 
are parsed. By default the value of this is set to false. 

Note that "the validation" here means a validating parser as defined in the XML 
recommendation. In other words, it essentially just controls the DTD 
validation. (except the legacy two properties defined in JAXP 1.2. See here for 
more details.) 



To use modern schema languages such as W3C XML Schema or RELAX NG instead of 
DTD, you can configure your parser to be a non-validating parser by leaving the 
(|javax.xml.parsers.SAXParserFactory|) method false, then use the 
(|javax.xml.parsers.SAXParserFactory|) method to associate a schema to a 
parser. 

    validating - true if the parser produced by this code will validate documents as they are 
       parsed; false otherwise. 

*javax.xml.parsers.SAXParserFactory.setXIncludeAware(boolean)*

public void setXIncludeAware(boolean state)

Set state of XInclude processing. 

If XInclude markup is found in the document instance, should it be processed as 
specified in XML Inclusions (XInclude) Version 1.0. 

XInclude processing defaults to false. 

    state - Set XInclude processing to true or false 



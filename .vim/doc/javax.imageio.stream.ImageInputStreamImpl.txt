*javax.imageio.stream.ImageInputStreamImpl* *ImageInputStreamImpl* An abstract c

public abstract class ImageInputStreamImpl
  extends    |java.lang.Object|
  implements |javax.imageio.stream.ImageInputStream|

|javax.imageio.stream.ImageInputStreamImpl_Description|
|javax.imageio.stream.ImageInputStreamImpl_Fields|
|javax.imageio.stream.ImageInputStreamImpl_Constructors|
|javax.imageio.stream.ImageInputStreamImpl_Methods|

================================================================================

*javax.imageio.stream.ImageInputStreamImpl_Fields*
|int_javax.imageio.stream.ImageInputStreamImpl.bitOffset|
|java.nio.ByteOrder_javax.imageio.stream.ImageInputStreamImpl.byteOrder|
|long_javax.imageio.stream.ImageInputStreamImpl.flushedPos|
|long_javax.imageio.stream.ImageInputStreamImpl.streamPos|

*javax.imageio.stream.ImageInputStreamImpl_Constructors*
|javax.imageio.stream.ImageInputStreamImpl()|Constructs an ImageInputStreamImpl

*javax.imageio.stream.ImageInputStreamImpl_Methods*
|javax.imageio.stream.ImageInputStreamImpl.checkClosed()|Throws an IOException 
|javax.imageio.stream.ImageInputStreamImpl.close()|
|javax.imageio.stream.ImageInputStreamImpl.finalize()|Finalizes this object pri
|javax.imageio.stream.ImageInputStreamImpl.flush()|
|javax.imageio.stream.ImageInputStreamImpl.flushBefore(long)|
|javax.imageio.stream.ImageInputStreamImpl.getBitOffset()|
|javax.imageio.stream.ImageInputStreamImpl.getByteOrder()|
|javax.imageio.stream.ImageInputStreamImpl.getFlushedPosition()|
|javax.imageio.stream.ImageInputStreamImpl.getStreamPosition()|
|javax.imageio.stream.ImageInputStreamImpl.isCached()|Default implementation re
|javax.imageio.stream.ImageInputStreamImpl.isCachedFile()|Default implementatio
|javax.imageio.stream.ImageInputStreamImpl.isCachedMemory()|Default implementat
|javax.imageio.stream.ImageInputStreamImpl.length()|Returns -1L to indicate tha
|javax.imageio.stream.ImageInputStreamImpl.mark()|Pushes the current stream pos
|javax.imageio.stream.ImageInputStreamImpl.read()|
|javax.imageio.stream.ImageInputStreamImpl.read(byte[])|A convenience method th
|javax.imageio.stream.ImageInputStreamImpl.read(byte[],int,int)|Reads up to len
|javax.imageio.stream.ImageInputStreamImpl.readBit()|
|javax.imageio.stream.ImageInputStreamImpl.readBits(int)|
|javax.imageio.stream.ImageInputStreamImpl.readBoolean()|
|javax.imageio.stream.ImageInputStreamImpl.readByte()|
|javax.imageio.stream.ImageInputStreamImpl.readBytes(IIOByteBuffer,int)|
|javax.imageio.stream.ImageInputStreamImpl.readChar()|
|javax.imageio.stream.ImageInputStreamImpl.readDouble()|
|javax.imageio.stream.ImageInputStreamImpl.readFloat()|
|javax.imageio.stream.ImageInputStreamImpl.readFully(byte[])|
|javax.imageio.stream.ImageInputStreamImpl.readFully(byte[],int,int)|
|javax.imageio.stream.ImageInputStreamImpl.readFully(char[],int,int)|
|javax.imageio.stream.ImageInputStreamImpl.readFully(double[],int,int)|
|javax.imageio.stream.ImageInputStreamImpl.readFully(float[],int,int)|
|javax.imageio.stream.ImageInputStreamImpl.readFully(int[],int,int)|
|javax.imageio.stream.ImageInputStreamImpl.readFully(long[],int,int)|
|javax.imageio.stream.ImageInputStreamImpl.readFully(short[],int,int)|
|javax.imageio.stream.ImageInputStreamImpl.readInt()|
|javax.imageio.stream.ImageInputStreamImpl.readLine()|
|javax.imageio.stream.ImageInputStreamImpl.readLong()|
|javax.imageio.stream.ImageInputStreamImpl.readShort()|
|javax.imageio.stream.ImageInputStreamImpl.readUnsignedByte()|
|javax.imageio.stream.ImageInputStreamImpl.readUnsignedInt()|
|javax.imageio.stream.ImageInputStreamImpl.readUnsignedShort()|
|javax.imageio.stream.ImageInputStreamImpl.readUTF()|
|javax.imageio.stream.ImageInputStreamImpl.reset()|Resets the current stream by
|javax.imageio.stream.ImageInputStreamImpl.seek(long)|
|javax.imageio.stream.ImageInputStreamImpl.setBitOffset(int)|
|javax.imageio.stream.ImageInputStreamImpl.setByteOrder(ByteOrder)|
|javax.imageio.stream.ImageInputStreamImpl.skipBytes(int)|Advances the current 
|javax.imageio.stream.ImageInputStreamImpl.skipBytes(long)|Advances the current

*javax.imageio.stream.ImageInputStreamImpl_Description*

An abstract class implementing the ImageInputStream interface. This class is 
designed to reduce the number of methods that must be implemented by 
subclasses. 

In particular, this class handles most or all of the details of byte order 
interpretation, buffering, mark/reset, discarding, closing, and disposing. 


*int_javax.imageio.stream.ImageInputStreamImpl.bitOffset*

An abstract class implementing the ImageInputStream interface. This class is 
designed to reduce the number of methods that must be implemented by 
subclasses. 

In particular, this class handles most or all of the details of byte order 
interpretation, buffering, mark/reset, discarding, closing, and disposing. 


*java.nio.ByteOrder_javax.imageio.stream.ImageInputStreamImpl.byteOrder*

An abstract class implementing the ImageInputStream interface. This class is 
designed to reduce the number of methods that must be implemented by 
subclasses. 

In particular, this class handles most or all of the details of byte order 
interpretation, buffering, mark/reset, discarding, closing, and disposing. 


*long_javax.imageio.stream.ImageInputStreamImpl.flushedPos*

An abstract class implementing the ImageInputStream interface. This class is 
designed to reduce the number of methods that must be implemented by 
subclasses. 

In particular, this class handles most or all of the details of byte order 
interpretation, buffering, mark/reset, discarding, closing, and disposing. 


*long_javax.imageio.stream.ImageInputStreamImpl.streamPos*

An abstract class implementing the ImageInputStream interface. This class is 
designed to reduce the number of methods that must be implemented by 
subclasses. 

In particular, this class handles most or all of the details of byte order 
interpretation, buffering, mark/reset, discarding, closing, and disposing. 



*javax.imageio.stream.ImageInputStreamImpl()*

public ImageInputStreamImpl()

Constructs an ImageInputStreamImpl. 


*javax.imageio.stream.ImageInputStreamImpl.checkClosed()*

protected final void checkClosed()
  throws |java.io.IOException|
         
Throws an IOException if the stream has been closed. Subclasses may call this 
method from any of their methods that require the stream not to be closed. 


*javax.imageio.stream.ImageInputStreamImpl.close()*

public void close()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.finalize()*

protected void finalize()
  throws |java.lang.Throwable|
         
Finalizes this object prior to garbage collection. The close method is called 
to close any open input source. This method should not be called from 
application code. 


*javax.imageio.stream.ImageInputStreamImpl.flush()*

public void flush()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.flushBefore(long)*

public void flushBefore(long pos)
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.getBitOffset()*

public int getBitOffset()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.getByteOrder()*

public |java.nio.ByteOrder| getByteOrder()




*javax.imageio.stream.ImageInputStreamImpl.getFlushedPosition()*

public long getFlushedPosition()




*javax.imageio.stream.ImageInputStreamImpl.getStreamPosition()*

public long getStreamPosition()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.isCached()*

public boolean isCached()

Default implementation returns false. Subclasses should override this if they 
cache data. 


*javax.imageio.stream.ImageInputStreamImpl.isCachedFile()*

public boolean isCachedFile()

Default implementation returns false. Subclasses should override this if they 
cache data in a temporary file. 


*javax.imageio.stream.ImageInputStreamImpl.isCachedMemory()*

public boolean isCachedMemory()

Default implementation returns false. Subclasses should override this if they 
cache data in main memory. 


*javax.imageio.stream.ImageInputStreamImpl.length()*

public long length()

Returns -1L to indicate that the stream has unknown length. Subclasses must 
override this method to provide actual length information. 


    Returns: -1L to indicate unknown length. 
*javax.imageio.stream.ImageInputStreamImpl.mark()*

public void mark()

Pushes the current stream position onto a stack of marked positions. 


*javax.imageio.stream.ImageInputStreamImpl.read()*

public abstract int read()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.read(byte[])*

public int read(byte[] b)
  throws |java.io.IOException|
         
A convenience method that calls read(b, 0, b.length). 

The bit offset within the stream is reset to zero before the read occurs. 


    Returns: the number of bytes actually read, or -1 to indicate EOF. 
*javax.imageio.stream.ImageInputStreamImpl.read(byte[],int,int)*

public abstract int read(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Reads up to len bytes from the stream, and stores them into b starting at index 
off. If no bytes can be read because the end of the stream has been reached, -1 
is returned. 

The bit offset within the stream must be reset to zero before the read occurs. 

Subclasses must provide an implementation for this method. The subclass 
implementation should update the stream position before exiting. 

    b - an array of bytes to be written to. 
    off - the starting position within b to write to. 
    len - the maximum number of bytes to read. 

    Returns: the number of bytes actually read, or -1 to indicate EOF. 
*javax.imageio.stream.ImageInputStreamImpl.readBit()*

public int readBit()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readBits(int)*

public long readBits(int numBits)
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readBoolean()*

public boolean readBoolean()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readByte()*

public byte readByte()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readBytes(IIOByteBuffer,int)*

public void readBytes(
  javax.imageio.stream.IIOByteBuffer buf,
  int len)
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readChar()*

public char readChar()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readDouble()*

public double readDouble()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readFloat()*

public float readFloat()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readFully(byte[])*

public void readFully(byte[] b)
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readFully(byte[],int,int)*

public void readFully(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readFully(char[],int,int)*

public void readFully(
  char[] c,
  int off,
  int len)
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readFully(double[],int,int)*

public void readFully(
  double[] d,
  int off,
  int len)
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readFully(float[],int,int)*

public void readFully(
  float[] f,
  int off,
  int len)
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readFully(int[],int,int)*

public void readFully(
  int[] i,
  int off,
  int len)
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readFully(long[],int,int)*

public void readFully(
  long[] l,
  int off,
  int len)
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readFully(short[],int,int)*

public void readFully(
  short[] s,
  int off,
  int len)
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readInt()*

public int readInt()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readLine()*

public |java.lang.String| readLine()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readLong()*

public long readLong()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readShort()*

public short readShort()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readUnsignedByte()*

public int readUnsignedByte()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readUnsignedInt()*

public long readUnsignedInt()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readUnsignedShort()*

public int readUnsignedShort()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.readUTF()*

public |java.lang.String| readUTF()
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.reset()*

public void reset()
  throws |java.io.IOException|
         
Resets the current stream byte and bit positions from the stack of marked 
positions. 

An IOException will be thrown if the previous marked position lies in the 
discarded portion of the stream. 


*javax.imageio.stream.ImageInputStreamImpl.seek(long)*

public void seek(long pos)
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.setBitOffset(int)*

public void setBitOffset(int bitOffset)
  throws |java.io.IOException|
         



*javax.imageio.stream.ImageInputStreamImpl.setByteOrder(ByteOrder)*

public void setByteOrder(java.nio.ByteOrder byteOrder)




*javax.imageio.stream.ImageInputStreamImpl.skipBytes(int)*

public int skipBytes(int n)
  throws |java.io.IOException|
         
Advances the current stream position by calling seek(getStreamPosition() + n). 

The bit offset is reset to zero. 

    n - the number of bytes to seek forward. 

    Returns: an int representing the number of bytes skipped. 
*javax.imageio.stream.ImageInputStreamImpl.skipBytes(long)*

public long skipBytes(long n)
  throws |java.io.IOException|
         
Advances the current stream position by calling seek(getStreamPosition() + n). 

The bit offset is reset to zero. 

    n - the number of bytes to seek forward. 

    Returns: a long representing the number of bytes skipped. 


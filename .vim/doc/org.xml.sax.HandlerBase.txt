*org.xml.sax.HandlerBase* *HandlerBase* Default base class for handlers.

public class HandlerBase
  extends    |java.lang.Object|
  implements |org.xml.sax.EntityResolver|
             |org.xml.sax.DTDHandler|
             |org.xml.sax.DocumentHandler|
             |org.xml.sax.ErrorHandler|

|org.xml.sax.HandlerBase_Description|
|org.xml.sax.HandlerBase_Fields|
|org.xml.sax.HandlerBase_Constructors|
|org.xml.sax.HandlerBase_Methods|

================================================================================

*org.xml.sax.HandlerBase_Constructors*
|org.xml.sax.HandlerBase()|

*org.xml.sax.HandlerBase_Methods*
|org.xml.sax.HandlerBase.characters(char[],int,int)|Receive notification of cha
|org.xml.sax.HandlerBase.endDocument()|Receive notification of the end of the d
|org.xml.sax.HandlerBase.endElement(String)|Receive notification of the end of 
|org.xml.sax.HandlerBase.error(SAXParseException)|Receive notification of a rec
|org.xml.sax.HandlerBase.fatalError(SAXParseException)|Report a fatal XML parsi
|org.xml.sax.HandlerBase.ignorableWhitespace(char[],int,int)|Receive notificati
|org.xml.sax.HandlerBase.notationDecl(String,String,String)|Receive notificatio
|org.xml.sax.HandlerBase.processingInstruction(String,String)|Receive notificat
|org.xml.sax.HandlerBase.resolveEntity(String,String)|Resolve an external entit
|org.xml.sax.HandlerBase.setDocumentLocator(Locator)|Receive a Locator object f
|org.xml.sax.HandlerBase.startDocument()|Receive notification of the beginning 
|org.xml.sax.HandlerBase.startElement(String,AttributeList)|Receive notificatio
|org.xml.sax.HandlerBase.unparsedEntityDecl(String,String,String,String)|Receiv
|org.xml.sax.HandlerBase.warning(SAXParseException)|Receive notification of a p

*org.xml.sax.HandlerBase_Description*

Default base class for handlers. 

This module, both source code and documentation, is in the Public Domain, and 
comes with NO WARRANTY. See http://www.saxproject.org for further information. 

This class implements the default behaviour for four SAX1 interfaces: 
EntityResolver, DTDHandler, DocumentHandler, and ErrorHandler. It is now 
obsolete, but is included in SAX2 to support legacy SAX1 applications. SAX2 
applications should use the 
DefaultHandler(|org.xml.sax.helpers.DefaultHandler|) class instead. 

Application writers can extend this class when they need to implement only part 
of an interface; parser writers can instantiate this class to provide default 
handlers when the application has not supplied its own. 

Note that the use of this class is optional. 


*org.xml.sax.HandlerBase()*

public HandlerBase()




*org.xml.sax.HandlerBase.characters(char[],int,int)*

public void characters(
  char[] ch,
  int start,
  int length)
  throws |org.xml.sax.SAXException|
         
Receive notification of character data inside an element. 

By default, do nothing. Application writers may override this method to take 
specific actions for each chunk of character data (such as adding the data to a 
node or buffer, or printing it to a file). 

    ch - The characters. 
    start - The start position in the character array. 
    length - The number of characters to use from the character array. 

*org.xml.sax.HandlerBase.endDocument()*

public void endDocument()
  throws |org.xml.sax.SAXException|
         
Receive notification of the end of the document. 

By default, do nothing. Application writers may override this method in a 
subclass to take specific actions at the beginning of a document (such as 
finalising a tree or closing an output file). 


*org.xml.sax.HandlerBase.endElement(String)*

public void endElement(java.lang.String name)
  throws |org.xml.sax.SAXException|
         
Receive notification of the end of an element. 

By default, do nothing. Application writers may override this method in a 
subclass to take specific actions at the end of each element (such as 
finalising a tree node or writing output to a file). 

    name - the element name 

*org.xml.sax.HandlerBase.error(SAXParseException)*

public void error(org.xml.sax.SAXParseException e)
  throws |org.xml.sax.SAXException|
         
Receive notification of a recoverable parser error. 

The default implementation does nothing. Application writers may override this 
method in a subclass to take specific actions for each error, such as inserting 
the message in a log file or printing it to the console. 

    e - The warning information encoded as an exception. 

*org.xml.sax.HandlerBase.fatalError(SAXParseException)*

public void fatalError(org.xml.sax.SAXParseException e)
  throws |org.xml.sax.SAXException|
         
Report a fatal XML parsing error. 

The default implementation throws a SAXParseException. Application writers may 
override this method in a subclass if they need to take specific actions for 
each fatal error (such as collecting all of the errors into a single report): 
in any case, the application must stop all regular processing when this method 
is invoked, since the document is no longer reliable, and the parser may no 
longer report parsing events. 

    e - The error information encoded as an exception. 

*org.xml.sax.HandlerBase.ignorableWhitespace(char[],int,int)*

public void ignorableWhitespace(
  char[] ch,
  int start,
  int length)
  throws |org.xml.sax.SAXException|
         
Receive notification of ignorable whitespace in element content. 

By default, do nothing. Application writers may override this method to take 
specific actions for each chunk of ignorable whitespace (such as adding data to 
a node or buffer, or printing it to a file). 

    ch - The whitespace characters. 
    start - The start position in the character array. 
    length - The number of characters to use from the character array. 

*org.xml.sax.HandlerBase.notationDecl(String,String,String)*

public void notationDecl(
  java.lang.String name,
  java.lang.String publicId,
  java.lang.String systemId)

Receive notification of a notation declaration. 

By default, do nothing. Application writers may override this method in a 
subclass if they wish to keep track of the notations declared in a document. 

    name - The notation name. 
    publicId - The notation public identifier, or null if not available. 
    systemId - The notation system identifier. 

*org.xml.sax.HandlerBase.processingInstruction(String,String)*

public void processingInstruction(
  java.lang.String target,
  java.lang.String data)
  throws |org.xml.sax.SAXException|
         
Receive notification of a processing instruction. 

By default, do nothing. Application writers may override this method in a 
subclass to take specific actions for each processing instruction, such as 
setting status variables or invoking other methods. 

    target - The processing instruction target. 
    data - The processing instruction data, or null if none is supplied. 

*org.xml.sax.HandlerBase.resolveEntity(String,String)*

public |org.xml.sax.InputSource| resolveEntity(
  java.lang.String publicId,
  java.lang.String systemId)
  throws |org.xml.sax.SAXException|
         
Resolve an external entity. 

Always return null, so that the parser will use the system identifier provided 
in the XML document. This method implements the SAX default behaviour: 
application writers can override it in a subclass to do special translations 
such as catalog lookups or URI redirection. 

    publicId - The public identifer, or null if none is available. 
    systemId - The system identifier provided in the XML document. 

    Returns: The new input source, or null to require the default behaviour. 
*org.xml.sax.HandlerBase.setDocumentLocator(Locator)*

public void setDocumentLocator(org.xml.sax.Locator locator)

Receive a Locator object for document events. 

By default, do nothing. Application writers may override this method in a 
subclass if they wish to store the locator for use with other document events. 

    locator - A locator for all SAX document events. 

*org.xml.sax.HandlerBase.startDocument()*

public void startDocument()
  throws |org.xml.sax.SAXException|
         
Receive notification of the beginning of the document. 

By default, do nothing. Application writers may override this method in a 
subclass to take specific actions at the beginning of a document (such as 
allocating the root node of a tree or creating an output file). 


*org.xml.sax.HandlerBase.startElement(String,AttributeList)*

public void startElement(
  java.lang.String name,
  org.xml.sax.AttributeList attributes)
  throws |org.xml.sax.SAXException|
         
Receive notification of the start of an element. 

By default, do nothing. Application writers may override this method in a 
subclass to take specific actions at the start of each element (such as 
allocating a new tree node or writing output to a file). 

    name - The element type name. 
    attributes - The specified or defaulted attributes. 

*org.xml.sax.HandlerBase.unparsedEntityDecl(String,String,String,String)*

public void unparsedEntityDecl(
  java.lang.String name,
  java.lang.String publicId,
  java.lang.String systemId,
  java.lang.String notationName)

Receive notification of an unparsed entity declaration. 

By default, do nothing. Application writers may override this method in a 
subclass to keep track of the unparsed entities declared in a document. 

    name - The entity name. 
    publicId - The entity public identifier, or null if not available. 
    systemId - The entity system identifier. 
    notationName - The name of the associated notation. 

*org.xml.sax.HandlerBase.warning(SAXParseException)*

public void warning(org.xml.sax.SAXParseException e)
  throws |org.xml.sax.SAXException|
         
Receive notification of a parser warning. 

The default implementation does nothing. Application writers may override this 
method in a subclass to take specific actions for each warning, such as 
inserting the message in a log file or printing it to the console. 

    e - The warning information encoded as an exception. 



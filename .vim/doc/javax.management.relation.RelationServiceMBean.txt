*javax.management.relation.RelationServiceMBean* *RelationServiceMBean* The Rela

public interface interface RelationServiceMBean


|javax.management.relation.RelationServiceMBean_Description|
|javax.management.relation.RelationServiceMBean_Fields|
|javax.management.relation.RelationServiceMBean_Constructors|
|javax.management.relation.RelationServiceMBean_Methods|

================================================================================

*javax.management.relation.RelationServiceMBean_Methods*
|javax.management.relation.RelationServiceMBean.addRelation(ObjectName)|Adds an
|javax.management.relation.RelationServiceMBean.addRelationType(RelationType)|A
|javax.management.relation.RelationServiceMBean.checkRoleReading(String,String)|
|javax.management.relation.RelationServiceMBean.checkRoleWriting(Role,String,Boolean)|
|javax.management.relation.RelationServiceMBean.createRelation(String,String,RoleList)|
|javax.management.relation.RelationServiceMBean.createRelationType(String,RoleInfo[])|
|javax.management.relation.RelationServiceMBean.findAssociatedMBeans(ObjectName,String,String)|
|javax.management.relation.RelationServiceMBean.findReferencingRelations(ObjectName,String,String)|
|javax.management.relation.RelationServiceMBean.findRelationsOfType(String)|Ret
|javax.management.relation.RelationServiceMBean.getAllRelationIds()|Returns all
|javax.management.relation.RelationServiceMBean.getAllRelationTypeNames()|Retri
|javax.management.relation.RelationServiceMBean.getAllRoles(String)|Returns all
|javax.management.relation.RelationServiceMBean.getPurgeFlag()|Returns the flag
|javax.management.relation.RelationServiceMBean.getReferencedMBeans(String)|Ret
|javax.management.relation.RelationServiceMBean.getRelationTypeName(String)|Ret
|javax.management.relation.RelationServiceMBean.getRole(String,String)|Retrieve
|javax.management.relation.RelationServiceMBean.getRoleCardinality(String,String)|
|javax.management.relation.RelationServiceMBean.getRoleInfo(String,String)|Retr
|javax.management.relation.RelationServiceMBean.getRoleInfos(String)|Retrieves 
|javax.management.relation.RelationServiceMBean.getRoles(String,String[])|Retri
|javax.management.relation.RelationServiceMBean.hasRelation(String)|Checks if t
|javax.management.relation.RelationServiceMBean.isActive()|Checks if the Relati
|javax.management.relation.RelationServiceMBean.isRelation(ObjectName)|Returns 
|javax.management.relation.RelationServiceMBean.isRelationMBean(String)|If the 
|javax.management.relation.RelationServiceMBean.purgeRelations()|Purges the rel
|javax.management.relation.RelationServiceMBean.removeRelation(String)|Removes 
|javax.management.relation.RelationServiceMBean.removeRelationType(String)|Remo
|javax.management.relation.RelationServiceMBean.sendRelationCreationNotification(String)|
|javax.management.relation.RelationServiceMBean.sendRelationRemovalNotification(String,List)|
|javax.management.relation.RelationServiceMBean.sendRoleUpdateNotification(String,Role,List)|
|javax.management.relation.RelationServiceMBean.setPurgeFlag(boolean)|Sets the 
|javax.management.relation.RelationServiceMBean.setRole(String,Role)|Sets the g
|javax.management.relation.RelationServiceMBean.setRoles(String,RoleList)|Sets 
|javax.management.relation.RelationServiceMBean.updateRoleMap(String,Role,List)|

*javax.management.relation.RelationServiceMBean_Description*

The Relation Service is in charge of creating and deleting relation types and 
relations, of handling the consistency and of providing query mechanisms. 


*javax.management.relation.RelationServiceMBean.addRelation(ObjectName)*

public void addRelation(javax.management.ObjectName theRelObjectName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.InstanceNotFoundException|
         |javax.management.relation.InvalidRelationIdException|
         |javax.management.relation.InvalidRelationServiceException|
         |javax.management.relation.InvalidRoleValueException|
         |java.lang.NoSuchMethodException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         |javax.management.relation.RelationTypeNotFoundException|
         |javax.management.relation.RoleNotFoundException|
         
Adds an MBean created by the user (and registered by him in the MBean Server) 
as a relation in the Relation Service. To be added as a relation, the MBean 
must conform to the following: - implement the Relation interface - have for 
RelationService ObjectName the ObjectName of current Relation Service - have a 
relation id that is unique and unused in current Relation Service - have for 
relation type a relation type created in the Relation Service - have roles 
conforming to the role info provided in the relation type. 

    theRelObjectName - ObjectName of the relation MBean to be added. 

*javax.management.relation.RelationServiceMBean.addRelationType(RelationType)*

public void addRelationType(javax.management.relation.RelationType theRelTypeObj)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.InvalidRelationTypeException|
         
Adds given object as a relation type. The object is expected to implement the 
RelationType interface. 

    theRelTypeObj - relation type object (implementing the RelationType interface) 

*javax.management.relation.RelationServiceMBean.checkRoleReading(String,String)*

public |java.lang.Integer| checkRoleReading(
  java.lang.String theRoleName,
  java.lang.String theRelTypeName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationTypeNotFoundException|
         
Checks if given Role can be read in a relation of the given type. 

    theRoleName - name of role to be checked 
    theRelTypeName - name of the relation type 

    Returns: an Integer wrapping an integer corresponding to possible problems represented 
             as constants in RoleUnresolved: - 0 if role can be read - integer 
             corresponding to RoleStatus.NO_ROLE_WITH_NAME - integer 
             corresponding to RoleStatus.ROLE_NOT_READABLE 
*javax.management.relation.RelationServiceMBean.checkRoleWriting(Role,String,Boolean)*

public |java.lang.Integer| checkRoleWriting(
  javax.management.relation.Role theRole,
  java.lang.String theRelTypeName,
  java.lang.Boolean theInitFlg)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationTypeNotFoundException|
         
Checks if given Role can be set in a relation of given type. 

    theRole - role to be checked 
    theRelTypeName - name of relation type 
    theInitFlg - flag to specify that the checking is done for the initialization of a role, 
       write access shall not be verified. 

    Returns: an Integer wrapping an integer corresponding to possible problems represented 
             as constants in RoleUnresolved: - 0 if role can be set - integer 
             corresponding to RoleStatus.NO_ROLE_WITH_NAME - integer for 
             RoleStatus.ROLE_NOT_WRITABLE - integer for 
             RoleStatus.LESS_THAN_MIN_ROLE_DEGREE - integer for 
             RoleStatus.MORE_THAN_MAX_ROLE_DEGREE - integer for 
             RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS - integer for 
             RoleStatus.REF_MBEAN_NOT_REGISTERED 
*javax.management.relation.RelationServiceMBean.createRelation(String,String,RoleList)*

public void createRelation(
  java.lang.String theRelId,
  java.lang.String theRelTypeName,
  javax.management.relation.RoleList theRoleList)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.InvalidRelationIdException|
         |javax.management.relation.InvalidRoleValueException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         |javax.management.relation.RelationTypeNotFoundException|
         |javax.management.relation.RoleNotFoundException|
         
Creates a simple relation (represented by a RelationSupport object) of given 
relation type, and adds it in the Relation Service. Roles are initialized 
according to the role list provided in parameter. The ones not initialized in 
this way are set to an empty ArrayList of ObjectNames. A RelationNotification, 
with type RELATION_BASIC_CREATION, is sent. 

    theRelId - relation identifier, to identify uniquely the relation inside the Relation 
       Service 
    theRelTypeName - name of the relation type (has to be created in the Relation Service) 
    theRoleList - role list to initialize roles of the relation (can be null). 

*javax.management.relation.RelationServiceMBean.createRelationType(String,RoleInfo[])*

public void createRelationType(
  java.lang.String theRelTypeName,
  javax.management.relation.RoleInfo[] theRoleInfoArray)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.InvalidRelationTypeException|
         
Creates a relation type (RelationTypeSupport object) with given role infos 
(provided by the RoleInfo objects), and adds it in the Relation Service. 

    theRelTypeName - name of the relation type 
    theRoleInfoArray - array of role infos 

*javax.management.relation.RelationServiceMBean.findAssociatedMBeans(ObjectName,String,String)*

public |java.util.Map| findAssociatedMBeans(
  javax.management.ObjectName theMBeanName,
  java.lang.String theRelTypeName,
  java.lang.String theRoleName)
  throws |java.lang.IllegalArgumentException|
         
Retrieves the MBeans associated to given one in a relation. This corresponds to 
CIM Associators and AssociatorNames operations. 

    theMBeanName - ObjectName of MBean 
    theRelTypeName - can be null; if specified, only the relations of that type will be considered 
       in the search. Else all relation types are considered. 
    theRoleName - can be null; if specified, only the relations where the MBean is referenced in 
       that role will be considered. Else all roles are considered. 

    Returns: an HashMap, where the keys are the ObjectNames of the MBeans associated to 
             given MBean, and the value is, for each key, an ArrayList of the 
             relation ids of the relations where the key MBean is associated to 
             given one (as they can be associated in several different 
             relations). 
*javax.management.relation.RelationServiceMBean.findReferencingRelations(ObjectName,String,String)*

public |java.util.Map| findReferencingRelations(
  javax.management.ObjectName theMBeanName,
  java.lang.String theRelTypeName,
  java.lang.String theRoleName)
  throws |java.lang.IllegalArgumentException|
         
Retrieves the relations where a given MBean is referenced. This corresponds to 
the CIM "References" and "ReferenceNames" operations. 

    theMBeanName - ObjectName of MBean 
    theRelTypeName - can be null; if specified, only the relations of that type will be considered 
       in the search. Else all relation types are considered. 
    theRoleName - can be null; if specified, only the relations where the MBean is referenced in 
       that role will be returned. Else all roles are considered. 

    Returns: an HashMap, where the keys are the relation ids of the relations where the 
             MBean is referenced, and the value is, for each key, an ArrayList 
             of role names (as an MBean can be referenced in several roles in 
             the same relation). 
*javax.management.relation.RelationServiceMBean.findRelationsOfType(String)*

public |java.util.List| findRelationsOfType(java.lang.String theRelTypeName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationTypeNotFoundException|
         
Returns the relation ids for relations of the given type. 

    theRelTypeName - relation type name 

    Returns: an ArrayList of relation ids. 
*javax.management.relation.RelationServiceMBean.getAllRelationIds()*

public |java.util.List| getAllRelationIds()

Returns all the relation ids for all the relations handled by the Relation 
Service. 


    Returns: ArrayList of String 
*javax.management.relation.RelationServiceMBean.getAllRelationTypeNames()*

public |java.util.List| getAllRelationTypeNames()

Retrieves names of all known relation types. 


    Returns: ArrayList of relation type names (Strings) 
*javax.management.relation.RelationServiceMBean.getAllRoles(String)*

public |javax.management.relation.RoleResult| getAllRoles(java.lang.String theRelId)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         
Returns all roles present in the relation. 

    theRelId - relation id 

    Returns: a RoleResult object, including a RoleList (for roles successfully retrieved) 
             and a RoleUnresolvedList (for roles not readable). 
*javax.management.relation.RelationServiceMBean.getPurgeFlag()*

public boolean getPurgeFlag()

Returns the flag to indicate if when a notification is received for the 
unregistration of an MBean referenced in a relation, if an immediate "purge" of 
the relations (look for the relations no longer valid) has to be performed, or 
if that will be performed only when the purgeRelations method is explicitly 
called. true is immediate purge. 


    Returns: true if purges are immediate. 
*javax.management.relation.RelationServiceMBean.getReferencedMBeans(String)*

public |java.util.Map| getReferencedMBeans(java.lang.String theRelId)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         
Retrieves MBeans referenced in the various roles of the relation. 

    theRelId - relation id 

    Returns: a HashMap mapping: ObjectName -> ArrayList of String (role names) 
*javax.management.relation.RelationServiceMBean.getRelationTypeName(String)*

public |java.lang.String| getRelationTypeName(java.lang.String theRelId)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         
Returns name of associated relation type for given relation. 

    theRelId - relation id 

    Returns: the name of the associated relation type. 
*javax.management.relation.RelationServiceMBean.getRole(String,String)*

public |java.util.List| getRole(
  java.lang.String theRelId,
  java.lang.String theRoleName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         |javax.management.relation.RoleNotFoundException|
         
Retrieves role value for given role name in given relation. 

    theRelId - relation id 
    theRoleName - name of role 

    Returns: the ArrayList of ObjectName objects being the role value 
*javax.management.relation.RelationServiceMBean.getRoleCardinality(String,String)*

public |java.lang.Integer| getRoleCardinality(
  java.lang.String theRelId,
  java.lang.String theRoleName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         |javax.management.relation.RoleNotFoundException|
         
Retrieves the number of MBeans currently referenced in the given role. 

    theRelId - relation id 
    theRoleName - name of role 

    Returns: the number of currently referenced MBeans in that role 
*javax.management.relation.RelationServiceMBean.getRoleInfo(String,String)*

public |javax.management.relation.RoleInfo| getRoleInfo(
  java.lang.String theRelTypeName,
  java.lang.String theRoleInfoName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationTypeNotFoundException|
         |javax.management.relation.RoleInfoNotFoundException|
         
Retrieves role info for given role of a given relation type. 

    theRelTypeName - name of relation type 
    theRoleInfoName - name of role 

    Returns: RoleInfo object. 
*javax.management.relation.RelationServiceMBean.getRoleInfos(String)*

public |java.util.List| getRoleInfos(java.lang.String theRelTypeName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationTypeNotFoundException|
         
Retrieves list of role infos (RoleInfo objects) of a given relation type. 

    theRelTypeName - name of relation type 

    Returns: ArrayList of RoleInfo. 
*javax.management.relation.RelationServiceMBean.getRoles(String,String[])*

public |javax.management.relation.RoleResult| getRoles(
  java.lang.String theRelId,
  java.lang.String[] theRoleNameArray)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         
Retrieves values of roles with given names in given relation. 

    theRelId - relation id 
    theRoleNameArray - array of names of roles to be retrieved 

    Returns: a RoleResult object, including a RoleList (for roles successfully retrieved) 
             and a RoleUnresolvedList (for roles not retrieved). 
*javax.management.relation.RelationServiceMBean.hasRelation(String)*

public |java.lang.Boolean| hasRelation(java.lang.String theRelId)
  throws |java.lang.IllegalArgumentException|
         
Checks if there is a relation identified in Relation Service with given 
relation id. 

    theRelId - relation id identifying the relation 

    Returns: boolean: true if there is a relation, false else 
*javax.management.relation.RelationServiceMBean.isActive()*

public void isActive()
  throws |javax.management.relation.RelationServiceNotRegisteredException|
         
Checks if the Relation Service is active. Current condition is that the 
Relation Service must be registered in the MBean Server 


*javax.management.relation.RelationServiceMBean.isRelation(ObjectName)*

public |java.lang.String| isRelation(javax.management.ObjectName theObjName)
  throws |java.lang.IllegalArgumentException|
         
Returns the relation id associated to the given ObjectName if the MBean has 
been added as a relation in the Relation Service. 

    theObjName - ObjectName of supposed relation 

    Returns: relation id (String) or null (if the ObjectName is not a relation handled by 
             the Relation Service) 
*javax.management.relation.RelationServiceMBean.isRelationMBean(String)*

public |javax.management.ObjectName| isRelationMBean(java.lang.String theRelId)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         
If the relation is represented by an MBean (created by the user and added as a 
relation in the Relation Service), returns the ObjectName of the MBean. 

    theRelId - relation id identifying the relation 

    Returns: ObjectName of the corresponding relation MBean, or null if the relation is not 
             an MBean. 
*javax.management.relation.RelationServiceMBean.purgeRelations()*

public void purgeRelations()
  throws |javax.management.relation.RelationServiceNotRegisteredException|
         
Purges the relations. 

Depending on the purgeFlag value, this method is either called automatically 
when a notification is received for the unregistration of an MBean referenced 
in a relation (if the flag is set to true), or not (if the flag is set to 
false). In that case it is up to the user to call it to maintain the 
consistency of the relations. To be kept in mind that if an MBean is 
unregistered and the purge not done immediately, if the ObjectName is reused 
and assigned to another MBean referenced in a relation, calling manually this 
purgeRelations() method will cause trouble, as will consider the ObjectName as 
corresponding to the unregistered MBean, not seeing the new one. 

The behavior depends on the cardinality of the role where the unregistered 
MBean is referenced: - if removing one MBean reference in the role makes its 
number of references less than the minimum degree, the relation has to be 
removed. - if the remaining number of references after removing the MBean 
reference is still in the cardinality range, keep the relation and update it 
calling its handleMBeanUnregistration() callback. 


*javax.management.relation.RelationServiceMBean.removeRelation(String)*

public void removeRelation(java.lang.String theRelId)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         
Removes given relation from the Relation Service. A RelationNotification 
notification is sent, its type being: - 
RelationNotification.RELATION_BASIC_REMOVAL if the relation was only internal 
to the Relation Service - RelationNotification.RELATION_MBEAN_REMOVAL if the 
relation is registered as an MBean. For MBeans referenced in such relation, 
nothing will be done, 

    theRelId - relation id of the relation to be removed 

*javax.management.relation.RelationServiceMBean.removeRelationType(String)*

public void removeRelationType(java.lang.String theRelTypeName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         |javax.management.relation.RelationTypeNotFoundException|
         
Removes given relation type from Relation Service. The relation objects of that 
type will be removed from the Relation Service. 

    theRelTypeName - name of the relation type to be removed 

*javax.management.relation.RelationServiceMBean.sendRelationCreationNotification(String)*

public void sendRelationCreationNotification(java.lang.String theRelId)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         
Sends a notification (RelationNotification) for a relation creation. The 
notification type is: - RelationNotification.RELATION_BASIC_CREATION if the 
relation is an object internal to the Relation Service - 
RelationNotification.RELATION_MBEAN_CREATION if the relation is a MBean added 
as a relation. The source object is the Relation Service itself. It is called 
in Relation Service createRelation() and addRelation() methods. 

    theRelId - relation identifier of the updated relation 

*javax.management.relation.RelationServiceMBean.sendRelationRemovalNotification(String,List)*

public void sendRelationRemovalNotification(
  java.lang.String theRelId,
  java.util.List theUnregMBeanList)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         
Sends a notification (RelationNotification) for a relation removal. The 
notification type is: - RelationNotification.RELATION_BASIC_REMOVAL if the 
relation is an object internal to the Relation Service - 
RelationNotification.RELATION_MBEAN_REMOVAL if the relation is a MBean added as 
a relation. The source object is the Relation Service itself. It is called in 
Relation Service removeRelation() method. 

    theRelId - relation identifier of the updated relation 
    theUnregMBeanList - List of ObjectNames of MBeans expected to be unregistered due to relation 
       removal (can be null) 

*javax.management.relation.RelationServiceMBean.sendRoleUpdateNotification(String,Role,List)*

public void sendRoleUpdateNotification(
  java.lang.String theRelId,
  javax.management.relation.Role theNewRole,
  java.util.List theOldRoleValue)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         
Sends a notification (RelationNotification) for a role update in the given 
relation. The notification type is: - 
RelationNotification.RELATION_BASIC_UPDATE if the relation is an object 
internal to the Relation Service - RelationNotification.RELATION_MBEAN_UPDATE 
if the relation is a MBean added as a relation. The source object is the 
Relation Service itself. It is called in relation MBean setRole() (for given 
role) and setRoles() (for each role) methods (implementation provided in 
RelationSupport class). It is also called in Relation Service setRole() (for 
given role) and setRoles() (for each role) methods. 

    theRelId - relation identifier of the updated relation 
    theNewRole - new role (name and new value) 
    theOldRoleValue - old role value (List of ObjectName objects) 

*javax.management.relation.RelationServiceMBean.setPurgeFlag(boolean)*

public void setPurgeFlag(boolean thePurgeFlg)

Sets the flag to indicate if when a notification is received for the 
unregistration of an MBean referenced in a relation, if an immediate "purge" of 
the relations (look for the relations no longer valid) has to be performed, or 
if that will be performed only when the purgeRelations method is explicitly 
called. true is immediate purge. 

    thePurgeFlg - 

*javax.management.relation.RelationServiceMBean.setRole(String,Role)*

public void setRole(
  java.lang.String theRelId,
  javax.management.relation.Role theRole)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.InvalidRoleValueException|
         |javax.management.relation.RelationNotFoundException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         |javax.management.relation.RelationTypeNotFoundException|
         |javax.management.relation.RoleNotFoundException|
         
Sets the given role in given relation. Will check the role according to its 
corresponding role definition provided in relation's relation type The Relation 
Service will keep track of the change to keep the consistency of relations by 
handling referenced MBean unregistrations. 

    theRelId - relation id 
    theRole - role to be set (name and new value) 

*javax.management.relation.RelationServiceMBean.setRoles(String,RoleList)*

public |javax.management.relation.RoleResult| setRoles(
  java.lang.String theRelId,
  javax.management.relation.RoleList theRoleList)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         
Sets the given roles in given relation. Will check the role according to its 
corresponding role definition provided in relation's relation type The Relation 
Service keeps track of the changes to keep the consistency of relations by 
handling referenced MBean unregistrations. 

    theRelId - relation id 
    theRoleList - list of roles to be set 

    Returns: a RoleResult object, including a RoleList (for roles successfully set) and a 
             RoleUnresolvedList (for roles not set). 
*javax.management.relation.RelationServiceMBean.updateRoleMap(String,Role,List)*

public void updateRoleMap(
  java.lang.String theRelId,
  javax.management.relation.Role theNewRole,
  java.util.List theOldRoleValue)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         
Handles update of the Relation Service role map for the update of given role in 
given relation. It is called in relation MBean setRole() (for given role) and 
setRoles() (for each role) methods (implementation provided in RelationSupport 
class). It is also called in Relation Service setRole() (for given role) and 
setRoles() (for each role) methods. To allow the Relation Service to maintain 
the consistency (in case of MBean unregistration) and to be able to perform 
queries, this method must be called when a role is updated. 

    theRelId - relation identifier of the updated relation 
    theNewRole - new role (name and new value) 
    theOldRoleValue - old role value (List of ObjectName objects) 



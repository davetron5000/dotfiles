*javax.swing.plaf.basic.BasicOptionPaneUI* *BasicOptionPaneUI* Provides the basi

public class BasicOptionPaneUI
  extends    |javax.swing.plaf.OptionPaneUI|

|javax.swing.plaf.basic.BasicOptionPaneUI_Description|
|javax.swing.plaf.basic.BasicOptionPaneUI_Fields|
|javax.swing.plaf.basic.BasicOptionPaneUI_Constructors|
|javax.swing.plaf.basic.BasicOptionPaneUI_Methods|

================================================================================

*javax.swing.plaf.basic.BasicOptionPaneUI_Fields*
|boolean_javax.swing.plaf.basic.BasicOptionPaneUI.hasCustomComponents|
|java.awt.Component_javax.swing.plaf.basic.BasicOptionPaneUI.initialFocusComponent|
|javax.swing.JComponent_javax.swing.plaf.basic.BasicOptionPaneUI.inputComponent|
|int_javax.swing.plaf.basic.BasicOptionPaneUI.MinimumHeight|
|java.awt.Dimension_javax.swing.plaf.basic.BasicOptionPaneUI.minimumSize|
|int_javax.swing.plaf.basic.BasicOptionPaneUI.MinimumWidth|
|javax.swing.JOptionPane_javax.swing.plaf.basic.BasicOptionPaneUI.optionPane|
|java.beans.PropertyChangeListener_javax.swing.plaf.basic.BasicOptionPaneUI.propertyChangeListener|

*javax.swing.plaf.basic.BasicOptionPaneUI_Constructors*
|javax.swing.plaf.basic.BasicOptionPaneUI()|

*javax.swing.plaf.basic.BasicOptionPaneUI_Methods*
|javax.swing.plaf.basic.BasicOptionPaneUI.addButtonComponents(Container,Object[],int)|
|javax.swing.plaf.basic.BasicOptionPaneUI.addIcon(Container)|Creates and adds a
|javax.swing.plaf.basic.BasicOptionPaneUI.addMessageComponents(Container,GridBagConstraints,Object,int,boolean)|
|javax.swing.plaf.basic.BasicOptionPaneUI.burstStringInto(Container,String,int)|
|javax.swing.plaf.basic.BasicOptionPaneUI.containsCustomComponents(JOptionPane)|
|javax.swing.plaf.basic.BasicOptionPaneUI.createButtonActionListener(int)|
|javax.swing.plaf.basic.BasicOptionPaneUI.createButtonArea()|Creates and return
|javax.swing.plaf.basic.BasicOptionPaneUI.createLayoutManager()|
|javax.swing.plaf.basic.BasicOptionPaneUI.createMessageArea()|Messaged from ins
|javax.swing.plaf.basic.BasicOptionPaneUI.createPropertyChangeListener()|
|javax.swing.plaf.basic.BasicOptionPaneUI.createSeparator()|
|javax.swing.plaf.basic.BasicOptionPaneUI.createUI(JComponent)|Creates a new Ba
|javax.swing.plaf.basic.BasicOptionPaneUI.getButtons()|Returns the buttons to d
|javax.swing.plaf.basic.BasicOptionPaneUI.getIcon()|Returns the icon from the J
|javax.swing.plaf.basic.BasicOptionPaneUI.getIconForType(int)|Returns the icon 
|javax.swing.plaf.basic.BasicOptionPaneUI.getInitialValueIndex()|Returns the in
|javax.swing.plaf.basic.BasicOptionPaneUI.getMaxCharactersPerLineCount()|Return
|javax.swing.plaf.basic.BasicOptionPaneUI.getMessage()|Returns the message to d
|javax.swing.plaf.basic.BasicOptionPaneUI.getMinimumOptionPaneSize()|Returns th
|javax.swing.plaf.basic.BasicOptionPaneUI.getPreferredSize(JComponent)|If c is 
|javax.swing.plaf.basic.BasicOptionPaneUI.getSizeButtonsToSameWidth()|Returns t
|javax.swing.plaf.basic.BasicOptionPaneUI.installComponents()|
|javax.swing.plaf.basic.BasicOptionPaneUI.installDefaults()|
|javax.swing.plaf.basic.BasicOptionPaneUI.installKeyboardActions()|
|javax.swing.plaf.basic.BasicOptionPaneUI.installListeners()|
|javax.swing.plaf.basic.BasicOptionPaneUI.installUI(JComponent)|Installs the re
|javax.swing.plaf.basic.BasicOptionPaneUI.resetInputValue()|Sets the input valu
|javax.swing.plaf.basic.BasicOptionPaneUI.selectInitialValue(JOptionPane)|If in
|javax.swing.plaf.basic.BasicOptionPaneUI.uninstallComponents()|
|javax.swing.plaf.basic.BasicOptionPaneUI.uninstallDefaults()|
|javax.swing.plaf.basic.BasicOptionPaneUI.uninstallKeyboardActions()|
|javax.swing.plaf.basic.BasicOptionPaneUI.uninstallListeners()|
|javax.swing.plaf.basic.BasicOptionPaneUI.uninstallUI(JComponent)|Removes the r

*javax.swing.plaf.basic.BasicOptionPaneUI_Description*

Provides the basic look and feel for a JOptionPane. BasicMessagePaneUI provides 
a means to place an icon, message and buttons into a Container. Generally, the 
layout will look like: 

------------------ | i | message | | c | message | | o | message | | n | 
message | ------------------ | buttons | |________________| 

icon is an instance of Icon that is wrapped inside a JLabel. The message is an 
opaque object and is tested for the following: if the message is a Component it 
is added to the Container, if it is an Icon it is wrapped inside a JLabel and 
added to the Container otherwise it is wrapped inside a JLabel. 

The above layout is used when the option pane's ComponentOrientation property 
is horizontal, left-to-right. The layout will be adjusted appropriately for 
other orientations. 

The Container, message, icon, and buttons are all determined from abstract 
methods. 


*boolean_javax.swing.plaf.basic.BasicOptionPaneUI.hasCustomComponents*

Provides the basic look and feel for a JOptionPane. BasicMessagePaneUI provides 
a means to place an icon, message and buttons into a Container. Generally, the 
layout will look like: 

------------------ | i | message | | c | message | | o | message | | n | 
message | ------------------ | buttons | |________________| 

icon is an instance of Icon that is wrapped inside a JLabel. The message is an 
opaque object and is tested for the following: if the message is a Component it 
is added to the Container, if it is an Icon it is wrapped inside a JLabel and 
added to the Container otherwise it is wrapped inside a JLabel. 

The above layout is used when the option pane's ComponentOrientation property 
is horizontal, left-to-right. The layout will be adjusted appropriately for 
other orientations. 

The Container, message, icon, and buttons are all determined from abstract 
methods. 


*java.awt.Component_javax.swing.plaf.basic.BasicOptionPaneUI.initialFocusComponent*

Provides the basic look and feel for a JOptionPane. BasicMessagePaneUI provides 
a means to place an icon, message and buttons into a Container. Generally, the 
layout will look like: 

------------------ | i | message | | c | message | | o | message | | n | 
message | ------------------ | buttons | |________________| 

icon is an instance of Icon that is wrapped inside a JLabel. The message is an 
opaque object and is tested for the following: if the message is a Component it 
is added to the Container, if it is an Icon it is wrapped inside a JLabel and 
added to the Container otherwise it is wrapped inside a JLabel. 

The above layout is used when the option pane's ComponentOrientation property 
is horizontal, left-to-right. The layout will be adjusted appropriately for 
other orientations. 

The Container, message, icon, and buttons are all determined from abstract 
methods. 


*javax.swing.JComponent_javax.swing.plaf.basic.BasicOptionPaneUI.inputComponent*

Provides the basic look and feel for a JOptionPane. BasicMessagePaneUI provides 
a means to place an icon, message and buttons into a Container. Generally, the 
layout will look like: 

------------------ | i | message | | c | message | | o | message | | n | 
message | ------------------ | buttons | |________________| 

icon is an instance of Icon that is wrapped inside a JLabel. The message is an 
opaque object and is tested for the following: if the message is a Component it 
is added to the Container, if it is an Icon it is wrapped inside a JLabel and 
added to the Container otherwise it is wrapped inside a JLabel. 

The above layout is used when the option pane's ComponentOrientation property 
is horizontal, left-to-right. The layout will be adjusted appropriately for 
other orientations. 

The Container, message, icon, and buttons are all determined from abstract 
methods. 


*int_javax.swing.plaf.basic.BasicOptionPaneUI.MinimumHeight*

Provides the basic look and feel for a JOptionPane. BasicMessagePaneUI provides 
a means to place an icon, message and buttons into a Container. Generally, the 
layout will look like: 

------------------ | i | message | | c | message | | o | message | | n | 
message | ------------------ | buttons | |________________| 

icon is an instance of Icon that is wrapped inside a JLabel. The message is an 
opaque object and is tested for the following: if the message is a Component it 
is added to the Container, if it is an Icon it is wrapped inside a JLabel and 
added to the Container otherwise it is wrapped inside a JLabel. 

The above layout is used when the option pane's ComponentOrientation property 
is horizontal, left-to-right. The layout will be adjusted appropriately for 
other orientations. 

The Container, message, icon, and buttons are all determined from abstract 
methods. 


*java.awt.Dimension_javax.swing.plaf.basic.BasicOptionPaneUI.minimumSize*

Provides the basic look and feel for a JOptionPane. BasicMessagePaneUI provides 
a means to place an icon, message and buttons into a Container. Generally, the 
layout will look like: 

------------------ | i | message | | c | message | | o | message | | n | 
message | ------------------ | buttons | |________________| 

icon is an instance of Icon that is wrapped inside a JLabel. The message is an 
opaque object and is tested for the following: if the message is a Component it 
is added to the Container, if it is an Icon it is wrapped inside a JLabel and 
added to the Container otherwise it is wrapped inside a JLabel. 

The above layout is used when the option pane's ComponentOrientation property 
is horizontal, left-to-right. The layout will be adjusted appropriately for 
other orientations. 

The Container, message, icon, and buttons are all determined from abstract 
methods. 


*int_javax.swing.plaf.basic.BasicOptionPaneUI.MinimumWidth*

Provides the basic look and feel for a JOptionPane. BasicMessagePaneUI provides 
a means to place an icon, message and buttons into a Container. Generally, the 
layout will look like: 

------------------ | i | message | | c | message | | o | message | | n | 
message | ------------------ | buttons | |________________| 

icon is an instance of Icon that is wrapped inside a JLabel. The message is an 
opaque object and is tested for the following: if the message is a Component it 
is added to the Container, if it is an Icon it is wrapped inside a JLabel and 
added to the Container otherwise it is wrapped inside a JLabel. 

The above layout is used when the option pane's ComponentOrientation property 
is horizontal, left-to-right. The layout will be adjusted appropriately for 
other orientations. 

The Container, message, icon, and buttons are all determined from abstract 
methods. 


*javax.swing.JOptionPane_javax.swing.plaf.basic.BasicOptionPaneUI.optionPane*

Provides the basic look and feel for a JOptionPane. BasicMessagePaneUI provides 
a means to place an icon, message and buttons into a Container. Generally, the 
layout will look like: 

------------------ | i | message | | c | message | | o | message | | n | 
message | ------------------ | buttons | |________________| 

icon is an instance of Icon that is wrapped inside a JLabel. The message is an 
opaque object and is tested for the following: if the message is a Component it 
is added to the Container, if it is an Icon it is wrapped inside a JLabel and 
added to the Container otherwise it is wrapped inside a JLabel. 

The above layout is used when the option pane's ComponentOrientation property 
is horizontal, left-to-right. The layout will be adjusted appropriately for 
other orientations. 

The Container, message, icon, and buttons are all determined from abstract 
methods. 


*java.beans.PropertyChangeListener_javax.swing.plaf.basic.BasicOptionPaneUI.propertyChangeListener*

Provides the basic look and feel for a JOptionPane. BasicMessagePaneUI provides 
a means to place an icon, message and buttons into a Container. Generally, the 
layout will look like: 

------------------ | i | message | | c | message | | o | message | | n | 
message | ------------------ | buttons | |________________| 

icon is an instance of Icon that is wrapped inside a JLabel. The message is an 
opaque object and is tested for the following: if the message is a Component it 
is added to the Container, if it is an Icon it is wrapped inside a JLabel and 
added to the Container otherwise it is wrapped inside a JLabel. 

The above layout is used when the option pane's ComponentOrientation property 
is horizontal, left-to-right. The layout will be adjusted appropriately for 
other orientations. 

The Container, message, icon, and buttons are all determined from abstract 
methods. 



*javax.swing.plaf.basic.BasicOptionPaneUI()*

public BasicOptionPaneUI()




*javax.swing.plaf.basic.BasicOptionPaneUI.addButtonComponents(Container,Object[],int)*

protected void addButtonComponents(
  java.awt.Container container,
  java.lang.Object[] buttons,
  int initialIndex)

Creates the appropriate object to represent each of the objects in buttons and 
adds it to container. This differs from addMessageComponents in that it will 
recurse on buttons and that if button is not a Component it will create an 
instance of JButton. 


*javax.swing.plaf.basic.BasicOptionPaneUI.addIcon(Container)*

protected void addIcon(java.awt.Container top)

Creates and adds a JLabel representing the icon returned from getIcon to top. 
This is messaged from createMessageArea 


*javax.swing.plaf.basic.BasicOptionPaneUI.addMessageComponents(Container,GridBagConstraints,Object,int,boolean)*

protected void addMessageComponents(
  java.awt.Container container,
  java.awt.GridBagConstraints cons,
  java.lang.Object msg,
  int maxll,
  boolean internallyCreated)

Creates the appropriate object to represent msg and places it into container. 
If msg is an instance of Component, it is added directly, if it is an Icon, a 
JLabel is created to represent it, otherwise a JLabel is created for the 
string, if d is an Object[], this method will be recursively invoked for the 
children. internallyCreated is true if Objc is an instance of Component and was 
created internally by this method (this is used to correctly set 
hasCustomComponents only if !internallyCreated). 


*javax.swing.plaf.basic.BasicOptionPaneUI.burstStringInto(Container,String,int)*

protected void burstStringInto(
  java.awt.Container c,
  java.lang.String d,
  int maxll)

Recursively creates new JLabel instances to represent d. Each JLabel instance 
is added to c. 


*javax.swing.plaf.basic.BasicOptionPaneUI.containsCustomComponents(JOptionPane)*

public boolean containsCustomComponents(javax.swing.JOptionPane op)

Returns true if in the last call to validateComponent the message or buttons 
contained a subclass of Component. 


*javax.swing.plaf.basic.BasicOptionPaneUI.createButtonActionListener(int)*

protected |java.awt.event.ActionListener| createButtonActionListener(int buttonIndex)




*javax.swing.plaf.basic.BasicOptionPaneUI.createButtonArea()*

protected |java.awt.Container| createButtonArea()

Creates and returns a Container containing the buttons. The buttons are created 
by calling getButtons. 


*javax.swing.plaf.basic.BasicOptionPaneUI.createLayoutManager()*

protected |java.awt.LayoutManager| createLayoutManager()




*javax.swing.plaf.basic.BasicOptionPaneUI.createMessageArea()*

protected |java.awt.Container| createMessageArea()

Messaged from installComponents to create a Container containing the body of 
the message. The icon is the created by calling addIcon. 


*javax.swing.plaf.basic.BasicOptionPaneUI.createPropertyChangeListener()*

protected |java.beans.PropertyChangeListener| createPropertyChangeListener()




*javax.swing.plaf.basic.BasicOptionPaneUI.createSeparator()*

protected |java.awt.Container| createSeparator()




*javax.swing.plaf.basic.BasicOptionPaneUI.createUI(JComponent)*

public static |javax.swing.plaf.ComponentUI| createUI(javax.swing.JComponent x)

Creates a new BasicOptionPaneUI instance. 


*javax.swing.plaf.basic.BasicOptionPaneUI.getButtons()*

protected |java.lang.Object| getButtons()

Returns the buttons to display from the JOptionPane the receiver is providing 
the look and feel for. If the JOptionPane has options set, they will be 
provided, otherwise if the optionType is YES_NO_OPTION, yesNoOptions is 
returned, if the type is YES_NO_CANCEL_OPTION yesNoCancelOptions is returned, 
otherwise defaultButtons are returned. 


*javax.swing.plaf.basic.BasicOptionPaneUI.getIcon()*

protected |javax.swing.Icon| getIcon()

Returns the icon from the JOptionPane the receiver is providing the look and 
feel for, or the default icon as returned from getDefaultIcon. 


*javax.swing.plaf.basic.BasicOptionPaneUI.getIconForType(int)*

protected |javax.swing.Icon| getIconForType(int messageType)

Returns the icon to use for the passed in type. 


*javax.swing.plaf.basic.BasicOptionPaneUI.getInitialValueIndex()*

protected int getInitialValueIndex()

Returns the initial index into the buttons to select. The index is calculated 
from the initial value from the JOptionPane and options of the JOptionPane or 
0. 


*javax.swing.plaf.basic.BasicOptionPaneUI.getMaxCharactersPerLineCount()*

protected int getMaxCharactersPerLineCount()

Returns the maximum number of characters to place on a line. 


*javax.swing.plaf.basic.BasicOptionPaneUI.getMessage()*

protected |java.lang.Object| getMessage()

Returns the message to display from the JOptionPane the receiver is providing 
the look and feel for. 


*javax.swing.plaf.basic.BasicOptionPaneUI.getMinimumOptionPaneSize()*

public |java.awt.Dimension| getMinimumOptionPaneSize()

Returns the minimum size the option pane should be. Primarily provided for 
subclassers wishing to offer a different minimum size. 


*javax.swing.plaf.basic.BasicOptionPaneUI.getPreferredSize(JComponent)*

public |java.awt.Dimension| getPreferredSize(javax.swing.JComponent c)

If c is the JOptionPane the receiver is contained in, the preferred size that 
is returned is the maximum of the preferred size of the LayoutManager for the 
JOptionPane, and getMinimumOptionPaneSize. 


*javax.swing.plaf.basic.BasicOptionPaneUI.getSizeButtonsToSameWidth()*

protected boolean getSizeButtonsToSameWidth()

Returns true, basic Lwants all the buttons to have the same width. 


*javax.swing.plaf.basic.BasicOptionPaneUI.installComponents()*

protected void installComponents()




*javax.swing.plaf.basic.BasicOptionPaneUI.installDefaults()*

protected void installDefaults()




*javax.swing.plaf.basic.BasicOptionPaneUI.installKeyboardActions()*

protected void installKeyboardActions()




*javax.swing.plaf.basic.BasicOptionPaneUI.installListeners()*

protected void installListeners()




*javax.swing.plaf.basic.BasicOptionPaneUI.installUI(JComponent)*

public void installUI(javax.swing.JComponent c)

Installs the receiver as the Lfor the passed in JOptionPane. 


*javax.swing.plaf.basic.BasicOptionPaneUI.resetInputValue()*

protected void resetInputValue()

Sets the input value in the option pane the receiver is providing the look and 
feel for based on the value in the inputComponent. 


*javax.swing.plaf.basic.BasicOptionPaneUI.selectInitialValue(JOptionPane)*

public void selectInitialValue(javax.swing.JOptionPane op)

If inputComponent is non-null, the focus is requested on that, otherwise 
request focus on the default value 


*javax.swing.plaf.basic.BasicOptionPaneUI.uninstallComponents()*

protected void uninstallComponents()




*javax.swing.plaf.basic.BasicOptionPaneUI.uninstallDefaults()*

protected void uninstallDefaults()




*javax.swing.plaf.basic.BasicOptionPaneUI.uninstallKeyboardActions()*

protected void uninstallKeyboardActions()




*javax.swing.plaf.basic.BasicOptionPaneUI.uninstallListeners()*

protected void uninstallListeners()




*javax.swing.plaf.basic.BasicOptionPaneUI.uninstallUI(JComponent)*

public void uninstallUI(javax.swing.JComponent c)

Removes the receiver from the Lcontroller of the passed in split pane. 




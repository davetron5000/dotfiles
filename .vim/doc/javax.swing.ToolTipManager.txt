*javax.swing.ToolTipManager* *ToolTipManager* Manages all the ToolTips in the system.

public class ToolTipManager
  extends    |java.awt.event.MouseAdapter|
  implements |java.awt.event.MouseMotionListener|

|javax.swing.ToolTipManager_Description|
|javax.swing.ToolTipManager_Fields|
|javax.swing.ToolTipManager_Constructors|
|javax.swing.ToolTipManager_Methods|

====================================================================================================================================================================================

*javax.swing.ToolTipManager_Fields*
|boolean_javax.swing.ToolTipManager.heavyWeightPopupEnabled|
|boolean_javax.swing.ToolTipManager.lightWeightPopupEnabled|

*javax.swing.ToolTipManager_Methods*
|javax.swing.ToolTipManager.getDismissDelay()|Returns the dismissal delay value.
|javax.swing.ToolTipManager.getInitialDelay()|Returns the initial delay value.
|javax.swing.ToolTipManager.getReshowDelay()|Returns the reshow delay property.
|javax.swing.ToolTipManager.isEnabled()|Returns true if this object is enabled.
|javax.swing.ToolTipManager.isLightWeightPopupEnabled()|Returns true if lightweight (all-Java) Tooltips  are in use, or false if heavyweight (native peer)  Tooltips are being used
|javax.swing.ToolTipManager.mouseDragged(MouseEvent)|Called when the mouse is pressed and dragged.
|javax.swing.ToolTipManager.mouseEntered(MouseEvent)|Called when the mouse enters the region of a component.
|javax.swing.ToolTipManager.mouseExited(MouseEvent)|Called when the mouse exits the region of a component.
|javax.swing.ToolTipManager.mouseMoved(MouseEvent)|Called when the mouse is moved.
|javax.swing.ToolTipManager.mousePressed(MouseEvent)|Called when the mouse is pressed.
|javax.swing.ToolTipManager.registerComponent(JComponent)|Registers a component for tooltip management.
|javax.swing.ToolTipManager.setDismissDelay(int)|Specifies the dismissal delay value.
|javax.swing.ToolTipManager.setEnabled(boolean)|Enables or disables the tooltip.
|javax.swing.ToolTipManager.setInitialDelay(int)|Specifies the initial delay value.
|javax.swing.ToolTipManager.setLightWeightPopupEnabled(boolean)|When displaying the JToolTip, the  ToolTipManager chooses to use a lightweight  JPanel if it fits.
|javax.swing.ToolTipManager.setReshowDelay(int)|Used to specify the amount of time before the user has to wait  initialDelay milliseconds before a tooltip will be  shown.
|javax.swing.ToolTipManager.sharedInstance()|Returns a shared ToolTipManager instance.
|javax.swing.ToolTipManager.unregisterComponent(JComponent)|Removes a component from tooltip control.

*javax.swing.ToolTipManager_Description*

Manages all the ToolTips in the system. 

ToolTipManager contains numerous properties for configuring how long it will take for the tooltips to become visible, and how long till they hide. Consider a component that has a 
different tooltip based on where the mouse is, such as JTree. When the mouse moves into the JTree and over a region that has a valid tooltip, the tooltip will become visibile 
after initialDelay milliseconds. After dismissDelay milliseconds the tooltip will be hidden. If the mouse is over a region that has a valid tooltip, and the tooltip is currently 
visible, when the mouse moves to a region that doesn't have a valid tooltip the tooltip will be hidden. If the mouse then moves back into a region that has a valid tooltip within 
reshowDelay milliseconds, the tooltip will immediately be shown, otherwise the tooltip will be shown again after initialDelay milliseconds. 



*boolean_javax.swing.ToolTipManager.heavyWeightPopupEnabled*




*boolean_javax.swing.ToolTipManager.lightWeightPopupEnabled*





*javax.swing.ToolTipManager.getDismissDelay()*

public int getDismissDelay()

Returns the dismissal delay value. 



    Returns: an integer representing the dismissal delay value, in milliseconds 

*javax.swing.ToolTipManager.getInitialDelay()*

public int getInitialDelay()

Returns the initial delay value. 



    Returns: an integer representing the initial delay value, in milliseconds 

*javax.swing.ToolTipManager.getReshowDelay()*

public int getReshowDelay()

Returns the reshow delay property. 



    Returns: reshown delay property 

*javax.swing.ToolTipManager.isEnabled()*

public boolean isEnabled()

Returns true if this object is enabled. 



    Returns: true if this object is enabled, false otherwise 

*javax.swing.ToolTipManager.isLightWeightPopupEnabled()*

public boolean isLightWeightPopupEnabled()

Returns true if lightweight (all-Java) Tooltips are in use, or false if heavyweight (native peer) Tooltips are being used. 



    Returns: true if lightweight ToolTips are in use 

*javax.swing.ToolTipManager.mouseDragged(MouseEvent)*

public void mouseDragged(java.awt.event.MouseEvent event)

Called when the mouse is pressed and dragged. Does nothing. 


    event - the event in question 

*javax.swing.ToolTipManager.mouseEntered(MouseEvent)*

public void mouseEntered(java.awt.event.MouseEvent event)

Called when the mouse enters the region of a component. This determines whether the tool tip should be shown. 


    event - the event in question 

*javax.swing.ToolTipManager.mouseExited(MouseEvent)*

public void mouseExited(java.awt.event.MouseEvent event)

Called when the mouse exits the region of a component. Any tool tip showing should be hidden. 


    event - the event in question 

*javax.swing.ToolTipManager.mouseMoved(MouseEvent)*

public void mouseMoved(java.awt.event.MouseEvent event)

Called when the mouse is moved. Determines whether the tool tip should be displayed. 


    event - the event in question 

*javax.swing.ToolTipManager.mousePressed(MouseEvent)*

public void mousePressed(java.awt.event.MouseEvent event)

Called when the mouse is pressed. Any tool tip showing should be hidden. 


    event - the event in question 

*javax.swing.ToolTipManager.registerComponent(JComponent)*

public void registerComponent(javax.swing.JComponent component)

Registers a component for tooltip management. 

This will register key bindings to show and hide the tooltip text only if component has focus bindings. This is done so that components that are not normally focus traversable, 
such as JLabel, are not made focus traversable as a result of invoking this method. 


    component - a JComponent object to add 

*javax.swing.ToolTipManager.setDismissDelay(int)*

public void setDismissDelay(int milliseconds)

Specifies the dismissal delay value. 


    milliseconds - the number of milliseconds to delay before taking away the tooltip 

*javax.swing.ToolTipManager.setEnabled(boolean)*

public void setEnabled(boolean flag)

Enables or disables the tooltip. 


    flag - true to enable the tip, false otherwise 

*javax.swing.ToolTipManager.setInitialDelay(int)*

public void setInitialDelay(int milliseconds)

Specifies the initial delay value. 


    milliseconds - the number of milliseconds to delay (after the cursor has paused) before displaying the tooltip 

*javax.swing.ToolTipManager.setLightWeightPopupEnabled(boolean)*

public void setLightWeightPopupEnabled(boolean aFlag)

When displaying the JToolTip, the ToolTipManager chooses to use a lightweight JPanel if it fits. This method allows you to disable this feature. You have to do disable it if your 
application mixes light weight and heavy weights components. 


    aFlag - true if a lightweight panel is desired, false otherwise 

*javax.swing.ToolTipManager.setReshowDelay(int)*

public void setReshowDelay(int milliseconds)

Used to specify the amount of time before the user has to wait initialDelay milliseconds before a tooltip will be shown. That is, if the tooltip is hidden, and the user moves into 
a region of the same Component that has a valid tooltip within milliseconds milliseconds the tooltip will immediately be shown. Otherwise, if the user moves into a region with a 
valid tooltip after milliseconds milliseconds, the user will have to wait an additional initialDelay milliseconds before the tooltip is shown again. 


    milliseconds - time in milliseconds 

*javax.swing.ToolTipManager.sharedInstance()*

public static |javax.swing.ToolTipManager| sharedInstance()

Returns a shared ToolTipManager instance. 



    Returns: a shared ToolTipManager object 

*javax.swing.ToolTipManager.unregisterComponent(JComponent)*

public void unregisterComponent(javax.swing.JComponent component)

Removes a component from tooltip control. 


    component - a JComponent object to remove 



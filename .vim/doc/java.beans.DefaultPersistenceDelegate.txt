*java.beans.DefaultPersistenceDelegate* *DefaultPersistenceDelegate* The Default

public class DefaultPersistenceDelegate
  extends    |java.beans.PersistenceDelegate|

|java.beans.DefaultPersistenceDelegate_Description|
|java.beans.DefaultPersistenceDelegate_Fields|
|java.beans.DefaultPersistenceDelegate_Constructors|
|java.beans.DefaultPersistenceDelegate_Methods|

================================================================================

*java.beans.DefaultPersistenceDelegate_Constructors*
|java.beans.DefaultPersistenceDelegate()|Creates a persistence delegate for a c
|java.beans.DefaultPersistenceDelegate(String[])|Creates a default persistence 

*java.beans.DefaultPersistenceDelegate_Methods*
|java.beans.DefaultPersistenceDelegate.initialize(Class,Object,Object,Encoder)|
|java.beans.DefaultPersistenceDelegate.instantiate(Object,Encoder)|This default
|java.beans.DefaultPersistenceDelegate.mutatesTo(Object,Object)|If the number o

*java.beans.DefaultPersistenceDelegate_Description*

The DefaultPersistenceDelegate is a concrete implementation of the abstract 
PersistenceDelegate class and is the delegate used by default for classes about 
which no information is available. The DefaultPersistenceDelegate provides, 
version resilient, public API-based persistence for classes that follow the 
JavaBeans conventions without any class specific configuration. 

The key assumptions are that the class has a nullary constructor and that its 
state is accurately represented by matching pairs of "setter" and "getter" 
methods in the order they are returned by the Introspector. In addition to 
providing code-free persistence for JavaBeans, the DefaultPersistenceDelegate 
provides a convenient means to effect persistent storage for classes that have 
a constructor that, while not nullary, simply requires some property values as 
arguments. 


*java.beans.DefaultPersistenceDelegate()*

public DefaultPersistenceDelegate()

Creates a persistence delegate for a class with a nullary constructor. 


*java.beans.DefaultPersistenceDelegate(String[])*

public DefaultPersistenceDelegate(java.lang.String[] constructorPropertyNames)

Creates a default persistence delegate for a class with a constructor whose 
arguments are the values of the property names as specified by 
constructorPropertyNames. The constructor arguments are created by evaluating 
the property names in the order they are supplied. To use this class to specify 
a single preferred constructor for use in the serialization of a particular 
type, we state the names of the properties that make up the constructor's 
arguments. For example, the Font class which does not define a nullary 
constructor can be handled with the following persistence delegate: 



new DefaultPersistenceDelegate(new String[]{"name", "style", "size"}); 

    constructorPropertyNames - The property names for the arguments of this constructor. 

*java.beans.DefaultPersistenceDelegate.initialize(Class,Object,Object,Encoder)*

protected void initialize(
  java.lang.Class type,
  java.lang.Object oldInstance,
  java.lang.Object newInstance,
  java.beans.Encoder out)

This default implementation of the initialize method assumes all state held in 
objects of this type is exposed via the matching pairs of "setter" and "getter" 
methods in the order they are returned by the Introspector. If a property 
descriptor defines a "transient" attribute with a value equal to Boolean.TRUE 
the property is ignored by this default implementation. Note that this use of 
the word "transient" is quite independent of the field modifier that is used by 
the ObjectOutputStream. 

For each non-transient property, an expression is created in which the nullary 
"getter" method is applied to the oldInstance. The value of this expression is 
the value of the property in the instance that is being serialized. If the 
value of this expression in the cloned environment mutatesTo the target value, 
the new value is initialized to make it equivalent to the old value. In this 
case, because the property value has not changed there is no need to call the 
corresponding "setter" method and no statement is emitted. If not however, the 
expression for this value is replaced with another expression (normally a 
constructor) and the corresponding "setter" method is called to install the new 
property value in the object. This scheme removes default information from the 
output produced by streams using this delegate. 

In passing these statements to the output stream, where they will be executed, 
side effects are made to the newInstance. In most cases this allows the problem 
of properties whose values depend on each other to actually help the 
serialization process by making the number of statements that need to be 
written to the output smaller. In general, the problem of handling 
interdependent properties is reduced to that of finding an order for the 
properties in a class such that no property value depends on the value of a 
subsequent property. 

    oldInstance - The instance to be copied. 
    newInstance - The instance that is to be modified. 
    out - The stream to which any initialization statements should be written. 

*java.beans.DefaultPersistenceDelegate.instantiate(Object,Encoder)*

protected |java.beans.Expression| instantiate(
  java.lang.Object oldInstance,
  java.beans.Encoder out)

This default implementation of the instantiate method returns an expression 
containing the predefined method name "new" which denotes a call to a 
constructor with the arguments as specified in the DefaultPersistenceDelegate's 
constructor. 

    oldInstance - The instance to be instantiated. 
    out - The code output stream. 

    Returns: An expression whose value is oldInstance. 
*java.beans.DefaultPersistenceDelegate.mutatesTo(Object,Object)*

protected boolean mutatesTo(
  java.lang.Object oldInstance,
  java.lang.Object newInstance)

If the number of arguments in the specified constructor is non-zero and the 
class of oldInstance explicitly declares an "equals" method this method returns 
the value of oldInstance.equals(newInstance). Otherwise, this method uses the 
superclass's definition which returns true if the classes of the two instances 
are equal. 

    oldInstance - The instance to be copied. 
    newInstance - The instance that is to be modified. 

    Returns: True if an equivalent copy of newInstance may be created by applying a series 
             of mutations to oldInstance. 


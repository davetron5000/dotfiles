*javax.swing.JDialog* *JDialog* The main class for creating a dialog window.

public class JDialog
  extends    |java.awt.Dialog|
  implements |javax.swing.WindowConstants|
             |javax.accessibility.Accessible|
             |javax.swing.RootPaneContainer|

|javax.swing.JDialog_Description|
|javax.swing.JDialog_Fields|
|javax.swing.JDialog_Constructors|
|javax.swing.JDialog_Methods|

================================================================================

*javax.swing.JDialog_Fields*
|javax.accessibility.AccessibleContext_javax.swing.JDialog.accessibleContext|
|javax.swing.JRootPane_javax.swing.JDialog.rootPane|
|boolean_javax.swing.JDialog.rootPaneCheckingEnabled|

*javax.swing.JDialog_Constructors*
|javax.swing.JDialog()|Creates a non-modal dialog without a title and without a
|javax.swing.JDialog(Dialog)|Creates a non-modal dialog without a title with th
|javax.swing.JDialog(Dialog,boolean)|Creates a modal or non-modal dialog withou
|javax.swing.JDialog(Dialog,String)|Creates a non-modal dialog with the specifi
|javax.swing.JDialog(Dialog,String,boolean)|Creates a modal or non-modal dialog
|javax.swing.JDialog(Dialog,String,boolean,GraphicsConfiguration)|Creates a mod
|javax.swing.JDialog(Frame)|Creates a non-modal dialog without a title with the
|javax.swing.JDialog(Frame,boolean)|Creates a modal or non-modal dialog without
|javax.swing.JDialog(Frame,String)|Creates a non-modal dialog with the specifie
|javax.swing.JDialog(Frame,String,boolean)|Creates a modal or non-modal dialog 
|javax.swing.JDialog(Frame,String,boolean,GraphicsConfiguration)|Creates a moda

*javax.swing.JDialog_Methods*
|javax.swing.JDialog.addImpl(Component,Object,int)|Adds the specified child Com
|javax.swing.JDialog.createRootPane()|Called by the constructor methods to crea
|javax.swing.JDialog.dialogInit()|Called by the constructors to init the JDialo
|javax.swing.JDialog.getAccessibleContext()|Gets the AccessibleContext associat
|javax.swing.JDialog.getContentPane()|Returns the contentPane object for this d
|javax.swing.JDialog.getDefaultCloseOperation()|Returns the operation which occ
|javax.swing.JDialog.getGlassPane()|Returns the glassPane object for this dialo
|javax.swing.JDialog.getJMenuBar()|Returns the menubar set on this dialog.
|javax.swing.JDialog.getLayeredPane()|Returns the layeredPane object for this d
|javax.swing.JDialog.getRootPane()|Returns the rootPane object for this dialog.
|javax.swing.JDialog.isDefaultLookAndFeelDecorated()|Returns true if newly crea
|javax.swing.JDialog.isRootPaneCheckingEnabled()|Returns whether calls to add a
|javax.swing.JDialog.paramString()|Returns a string representation of this JDia
|javax.swing.JDialog.processWindowEvent(WindowEvent)|Handles window events depe
|javax.swing.JDialog.remove(Component)|Removes the specified component from the
|javax.swing.JDialog.setContentPane(Container)|Sets the contentPane property.
|javax.swing.JDialog.setDefaultCloseOperation(int)|Sets the operation which wil
|javax.swing.JDialog.setDefaultLookAndFeelDecorated(boolean)|Provides a hint as
|javax.swing.JDialog.setGlassPane(Component)|Sets the glassPane property.
|javax.swing.JDialog.setJMenuBar(JMenuBar)|Sets the menubar for this dialog.
|javax.swing.JDialog.setLayeredPane(JLayeredPane)|Sets the layeredPane property
|javax.swing.JDialog.setLayout(LayoutManager)|Sets the LayoutManager.
|javax.swing.JDialog.setRootPane(JRootPane)|Sets the rootPane property.
|javax.swing.JDialog.setRootPaneCheckingEnabled(boolean)|Sets whether calls to 
|javax.swing.JDialog.update(Graphics)|Calls paint(g).

*javax.swing.JDialog_Description*

The main class for creating a dialog window. You can use this class to create a 
custom dialog, or invoke the many class methods in (|javax.swing.JOptionPane|) 
to create a variety of standard dialogs. For information about creating 
dialogs, see The Java Tutorial section How to Make Dialogs. 



The JDialog component contains a JRootPane as its only child. The contentPane 
should be the parent of any children of the JDialog. As a conveniance add and 
its variants, remove and setLayout have been overridden to forward to the 
contentPane as necessary. This means you can write: 

dialog.add(child); 

And the child will be added to the contentPane. The contentPane is always 
non-null. Attempting to set it to null generates an exception. The default 
contentPane has a BorderLayout manager set on it. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JDialog. 

Please see the JRootPane documentation for a complete description of the 
contentPane, glassPane, and layeredPane components. 

In a multi-screen environment, you can create a JDialog on a different screen 
device than its owner. See (|java.awt.Frame|) for more information. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.accessibility.AccessibleContext_javax.swing.JDialog.accessibleContext*

The main class for creating a dialog window. You can use this class to create a 
custom dialog, or invoke the many class methods in (|javax.swing.JOptionPane|) 
to create a variety of standard dialogs. For information about creating 
dialogs, see The Java Tutorial section How to Make Dialogs. 



The JDialog component contains a JRootPane as its only child. The contentPane 
should be the parent of any children of the JDialog. As a conveniance add and 
its variants, remove and setLayout have been overridden to forward to the 
contentPane as necessary. This means you can write: 

dialog.add(child); 

And the child will be added to the contentPane. The contentPane is always 
non-null. Attempting to set it to null generates an exception. The default 
contentPane has a BorderLayout manager set on it. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JDialog. 

Please see the JRootPane documentation for a complete description of the 
contentPane, glassPane, and layeredPane components. 

In a multi-screen environment, you can create a JDialog on a different screen 
device than its owner. See (|java.awt.Frame|) for more information. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JRootPane_javax.swing.JDialog.rootPane*

The main class for creating a dialog window. You can use this class to create a 
custom dialog, or invoke the many class methods in (|javax.swing.JOptionPane|) 
to create a variety of standard dialogs. For information about creating 
dialogs, see The Java Tutorial section How to Make Dialogs. 



The JDialog component contains a JRootPane as its only child. The contentPane 
should be the parent of any children of the JDialog. As a conveniance add and 
its variants, remove and setLayout have been overridden to forward to the 
contentPane as necessary. This means you can write: 

dialog.add(child); 

And the child will be added to the contentPane. The contentPane is always 
non-null. Attempting to set it to null generates an exception. The default 
contentPane has a BorderLayout manager set on it. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JDialog. 

Please see the JRootPane documentation for a complete description of the 
contentPane, glassPane, and layeredPane components. 

In a multi-screen environment, you can create a JDialog on a different screen 
device than its owner. See (|java.awt.Frame|) for more information. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.JDialog.rootPaneCheckingEnabled*

The main class for creating a dialog window. You can use this class to create a 
custom dialog, or invoke the many class methods in (|javax.swing.JOptionPane|) 
to create a variety of standard dialogs. For information about creating 
dialogs, see The Java Tutorial section How to Make Dialogs. 



The JDialog component contains a JRootPane as its only child. The contentPane 
should be the parent of any children of the JDialog. As a conveniance add and 
its variants, remove and setLayout have been overridden to forward to the 
contentPane as necessary. This means you can write: 

dialog.add(child); 

And the child will be added to the contentPane. The contentPane is always 
non-null. Attempting to set it to null generates an exception. The default 
contentPane has a BorderLayout manager set on it. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JDialog. 

Please see the JRootPane documentation for a complete description of the 
contentPane, glassPane, and layeredPane components. 

In a multi-screen environment, you can create a JDialog on a different screen 
device than its owner. See (|java.awt.Frame|) for more information. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.JDialog()*

public JDialog()
  throws |java.awt.HeadlessException|
         
Creates a non-modal dialog without a title and without a specified Frame owner. 
A shared, hidden frame will be set as the owner of the dialog. 

This constructor sets the component's locale property to the value returned by 
JComponent.getDefaultLocale. 


*javax.swing.JDialog(Dialog)*

public JDialog(java.awt.Dialog owner)
  throws |java.awt.HeadlessException|
         
Creates a non-modal dialog without a title with the specified Dialog as its 
owner. 

This constructor sets the component's locale property to the value returned by 
JComponent.getDefaultLocale. 

    owner - the non-null Dialog from which the dialog is displayed 

*javax.swing.JDialog(Dialog,boolean)*

public JDialog(
  java.awt.Dialog owner,
  boolean modal)
  throws |java.awt.HeadlessException|
         
Creates a modal or non-modal dialog without a title and with the specified 
owner dialog. 

This constructor sets the component's locale property to the value returned by 
JComponent.getDefaultLocale. 

    owner - the non-null Dialog from which the dialog is displayed 
    modal - true for a modal dialog, false for one that allows other windows to be active 
       at the same time 

*javax.swing.JDialog(Dialog,String)*

public JDialog(
  java.awt.Dialog owner,
  java.lang.String title)
  throws |java.awt.HeadlessException|
         
Creates a non-modal dialog with the specified title and with the specified 
owner dialog. 

This constructor sets the component's locale property to the value returned by 
JComponent.getDefaultLocale. 

    owner - the non-null Dialog from which the dialog is displayed 
    title - the String to display in the dialog's title bar 

*javax.swing.JDialog(Dialog,String,boolean)*

public JDialog(
  java.awt.Dialog owner,
  java.lang.String title,
  boolean modal)
  throws |java.awt.HeadlessException|
         
Creates a modal or non-modal dialog with the specified title and the specified 
owner frame. 

This constructor sets the component's locale property to the value returned by 
JComponent.getDefaultLocale. 

    owner - the non-null Dialog from which the dialog is displayed 
    title - the String to display in the dialog's title bar 
    modal - true for a modal dialog, false for one that allows other windows to be active 
       at the same time 

*javax.swing.JDialog(Dialog,String,boolean,GraphicsConfiguration)*

public JDialog(
  java.awt.Dialog owner,
  java.lang.String title,
  boolean modal,
  java.awt.GraphicsConfiguration gc)
  throws |java.awt.HeadlessException|
         
Creates a modal or non-modal dialog with the specified title, owner Dialog, and 
GraphicsConfiguration. 

NOTE: Any popup components (JComboBox, JPopupMenu, JMenuBar) created within a 
modal dialog will be forced to be lightweight. 

This constructor sets the component's locale property to the value returned by 
JComponent.getDefaultLocale. 

    owner - the Dialog from which the dialog is displayed 
    title - the String to display in the dialog's title bar 
    modal - true for a modal dialog, false for one that allows other windows to be active 
       at the same time 
    gc - the GraphicsConfiguration of the target screen device. If gc is null, the same 
       GraphicsConfiguration as the owning Dialog is used. 

*javax.swing.JDialog(Frame)*

public JDialog(java.awt.Frame owner)
  throws |java.awt.HeadlessException|
         
Creates a non-modal dialog without a title with the specified Frame as its 
owner. If owner is null, a shared, hidden frame will be set as the owner of the 
dialog. 

This constructor sets the component's locale property to the value returned by 
JComponent.getDefaultLocale. 

    owner - the Frame from which the dialog is displayed 

*javax.swing.JDialog(Frame,boolean)*

public JDialog(
  java.awt.Frame owner,
  boolean modal)
  throws |java.awt.HeadlessException|
         
Creates a modal or non-modal dialog without a title and with the specified 
owner Frame. If owner is null, a shared, hidden frame will be set as the owner 
of the dialog. 

This constructor sets the component's locale property to the value returned by 
JComponent.getDefaultLocale. 

    owner - the Frame from which the dialog is displayed 
    modal - true for a modal dialog, false for one that allows others windows to be active 
       at the same time 

*javax.swing.JDialog(Frame,String)*

public JDialog(
  java.awt.Frame owner,
  java.lang.String title)
  throws |java.awt.HeadlessException|
         
Creates a non-modal dialog with the specified title and with the specified 
owner frame. If owner is null, a shared, hidden frame will be set as the owner 
of the dialog. 

This constructor sets the component's locale property to the value returned by 
JComponent.getDefaultLocale. 

    owner - the Frame from which the dialog is displayed 
    title - the String to display in the dialog's title bar 

*javax.swing.JDialog(Frame,String,boolean)*

public JDialog(
  java.awt.Frame owner,
  java.lang.String title,
  boolean modal)
  throws |java.awt.HeadlessException|
         
Creates a modal or non-modal dialog with the specified title and the specified 
owner Frame. If owner is null, a shared, hidden frame will be set as the owner 
of this dialog. All constructors defer to this one. 

NOTE: Any popup components (JComboBox, JPopupMenu, JMenuBar) created within a 
modal dialog will be forced to be lightweight. 

This constructor sets the component's locale property to the value returned by 
JComponent.getDefaultLocale. 

    owner - the Frame from which the dialog is displayed 
    title - the String to display in the dialog's title bar 
    modal - true for a modal dialog, false for one that allows other windows to be active 
       at the same time 

*javax.swing.JDialog(Frame,String,boolean,GraphicsConfiguration)*

public JDialog(
  java.awt.Frame owner,
  java.lang.String title,
  boolean modal,
  java.awt.GraphicsConfiguration gc)

Creates a modal or non-modal dialog with the specified title, owner Frame, and 
GraphicsConfiguration. 

NOTE: Any popup components (JComboBox, JPopupMenu, JMenuBar) created within a 
modal dialog will be forced to be lightweight. 

This constructor sets the component's locale property to the value returned by 
JComponent.getDefaultLocale. 

    owner - the Frame from which the dialog is displayed 
    title - the String to display in the dialog's title bar 
    modal - true for a modal dialog, false for one that allows other windows to be active 
       at the same time 
    gc - the GraphicsConfiguration of the target screen device. If gc is null, the same 
       GraphicsConfiguration as the owning Frame is used. 

*javax.swing.JDialog.addImpl(Component,Object,int)*

protected void addImpl(
  java.awt.Component comp,
  java.lang.Object constraints,
  int index)

Adds the specified child Component. This method is overridden to conditionally 
forwad calls to the contentPane. By default, children are added to the 
contentPane instead of the frame, refer to (|javax.swing.RootPaneContainer|) 
for details. 

    comp - the component to be enhanced 
    constraints - the constraints to be respected 
    index - the index 

*javax.swing.JDialog.createRootPane()*

protected |javax.swing.JRootPane| createRootPane()

Called by the constructor methods to create the default rootPane. 


*javax.swing.JDialog.dialogInit()*

protected void dialogInit()

Called by the constructors to init the JDialog properly. 


*javax.swing.JDialog.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JDialog. For JDialogs, the 
AccessibleContext takes the form of an AccessibleJDialog. A new 
AccessibleJDialog instance is created if necessary. 


    Returns: an AccessibleJDialog that serves as the AccessibleContext of this JDialog 
*javax.swing.JDialog.getContentPane()*

public |java.awt.Container| getContentPane()

Returns the contentPane object for this dialog. 


    Returns: the contentPane property 
*javax.swing.JDialog.getDefaultCloseOperation()*

public int getDefaultCloseOperation()

Returns the operation which occurs when the user initiates a "close" on this 
dialog. 


    Returns: an integer indicating the window-close operation 
*javax.swing.JDialog.getGlassPane()*

public |java.awt.Component| getGlassPane()

Returns the glassPane object for this dialog. 


    Returns: the glassPane property 
*javax.swing.JDialog.getJMenuBar()*

public |javax.swing.JMenuBar| getJMenuBar()

Returns the menubar set on this dialog. 


*javax.swing.JDialog.getLayeredPane()*

public |javax.swing.JLayeredPane| getLayeredPane()

Returns the layeredPane object for this dialog. 


    Returns: the layeredPane property 
*javax.swing.JDialog.getRootPane()*

public |javax.swing.JRootPane| getRootPane()

Returns the rootPane object for this dialog. 


*javax.swing.JDialog.isDefaultLookAndFeelDecorated()*

public static boolean isDefaultLookAndFeelDecorated()

Returns true if newly created JDialogs should have their Window decorations 
provided by the current look and feel. This is only a hint, as certain look and 
feels may not support this feature. 


    Returns: true if look and feel should provide Window decorations. 
*javax.swing.JDialog.isRootPaneCheckingEnabled()*

protected boolean isRootPaneCheckingEnabled()

Returns whether calls to add and setLayout are forwarded to the contentPane. 


    Returns: true if add and setLayout are fowarded; false otherwise 
*javax.swing.JDialog.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JDialog. This method is intended to be 
used only for debugging purposes, and the content and format of the returned 
string may vary between implementations. The returned string may be empty but 
may not be null. 


    Returns: a string representation of this JDialog. 
*javax.swing.JDialog.processWindowEvent(WindowEvent)*

protected void processWindowEvent(java.awt.event.WindowEvent e)

Handles window events depending on the state of the defaultCloseOperation 
property. 


*javax.swing.JDialog.remove(Component)*

public void remove(java.awt.Component comp)

Removes the specified component from the container. If comp is not the 
rootPane, this will forward the call to the contentPane. This will do nothing 
if comp is not a child of the JDialog or contentPane. 

    comp - the component to be removed 

*javax.swing.JDialog.setContentPane(Container)*

public void setContentPane(java.awt.Container contentPane)

Sets the contentPane property. This method is called by the constructor. 

Swing's painting architecture requires an opaque JComponent in the containment 
hiearchy. This is typically provided by the content pane. If you replace the 
content pane it is recommended you replace it with an opaque JComponent. 

    contentPane - the contentPane object for this dialog 

*javax.swing.JDialog.setDefaultCloseOperation(int)*

public void setDefaultCloseOperation(int operation)

Sets the operation which will happen by default when the user initiates a 
"close" on this dialog. The possible choices are: 

DO_NOTHING_ON_CLOSE - do not do anything - require the program to handle the 
operation in the windowClosing method of a registered WindowListener object. 

HIDE_ON_CLOSE - automatically hide the dialog after invoking any registered 
WindowListener objects 

DISPOSE_ON_CLOSE - automatically hide and dispose the dialog after invoking any 
registered WindowListener objects 

The value is set to HIDE_ON_CLOSE by default. 

Note: When the last displayable window within the Java virtual machine (VM) is 
disposed of, the VM may terminate. See AWT Threading Issues for more 
information. 


*javax.swing.JDialog.setDefaultLookAndFeelDecorated(boolean)*

public static void setDefaultLookAndFeelDecorated(boolean defaultLookAndFeelDecorated)

Provides a hint as to whether or not newly created JDialogs should have their 
Window decorations (such as borders, widgets to close the window, title...) 
provided by the current look and feel. If defaultLookAndFeelDecorated is true, 
the current LookAndFeel supports providing window decorations, and the current 
window manager supports undecorated windows, then newly created JDialogs will 
have their Window decorations provided by the current LookAndFeel. Otherwise, 
newly created JDialogs will have their Window decorations provided by the 
current window manager. 

You can get the same effect on a single JDialog by doing the following: 

JDialog dialog = new JDialog(); dialog.setUndecorated(true); 
dialog.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG); 

    defaultLookAndFeelDecorated - A hint as to whether or not current look and feel should provide window 
       decorations 

*javax.swing.JDialog.setGlassPane(Component)*

public void setGlassPane(java.awt.Component glassPane)

Sets the glassPane property. This method is called by the constructor. 

    glassPane - the glassPane object for this dialog 

*javax.swing.JDialog.setJMenuBar(JMenuBar)*

public void setJMenuBar(javax.swing.JMenuBar menu)

Sets the menubar for this dialog. 

    menu - the menubar being placed in the dialog 

*javax.swing.JDialog.setLayeredPane(JLayeredPane)*

public void setLayeredPane(javax.swing.JLayeredPane layeredPane)

Sets the layeredPane property. This method is called by the constructor. 

    layeredPane - the new layeredPane property 

*javax.swing.JDialog.setLayout(LayoutManager)*

public void setLayout(java.awt.LayoutManager manager)

Sets the LayoutManager. Overridden to conditionally forward the call to the 
contentPane. Refer to (|javax.swing.RootPaneContainer|) for more information. 

    manager - the LayoutManager 

*javax.swing.JDialog.setRootPane(JRootPane)*

protected void setRootPane(javax.swing.JRootPane root)

Sets the rootPane property. This method is called by the constructor. 

    root - the rootPane object for this dialog 

*javax.swing.JDialog.setRootPaneCheckingEnabled(boolean)*

protected void setRootPaneCheckingEnabled(boolean enabled)

Sets whether calls to add and setLayout are forwarded to the contentPane. 

    enabled - true if add and setLayout are forwarded, false if they should operate directly 
       on the JDialog. 

*javax.swing.JDialog.update(Graphics)*

public void update(java.awt.Graphics g)

Calls paint(g). This method was overridden to prevent an unnecessary call to 
clear the background. 

    g - the Graphics context in which to paint 



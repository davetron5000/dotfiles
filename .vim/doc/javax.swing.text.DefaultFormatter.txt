*javax.swing.text.DefaultFormatter* *DefaultFormatter* DefaultFormatter formats 

public class DefaultFormatter
  extends    |javax.swing.JFormattedTextField.AbstractFormatter|
  implements |java.lang.Cloneable|
             |java.io.Serializable|

|javax.swing.text.DefaultFormatter_Description|
|javax.swing.text.DefaultFormatter_Fields|
|javax.swing.text.DefaultFormatter_Constructors|
|javax.swing.text.DefaultFormatter_Methods|

================================================================================

*javax.swing.text.DefaultFormatter_Constructors*
|javax.swing.text.DefaultFormatter()|Creates a DefaultFormatter.

*javax.swing.text.DefaultFormatter_Methods*
|javax.swing.text.DefaultFormatter.clone()|Creates a copy of the DefaultFormatt
|javax.swing.text.DefaultFormatter.getAllowsInvalid()|Returns whether or not th
|javax.swing.text.DefaultFormatter.getCommitsOnValidEdit()|Returns when edits a
|javax.swing.text.DefaultFormatter.getDocumentFilter()|Returns the DocumentFilt
|javax.swing.text.DefaultFormatter.getNavigationFilter()|Returns the Navigation
|javax.swing.text.DefaultFormatter.getOverwriteMode()|Returns the behavior when
|javax.swing.text.DefaultFormatter.getValueClass()|Returns that class that is u
|javax.swing.text.DefaultFormatter.install(JFormattedTextField)|Installs the De
|javax.swing.text.DefaultFormatter.setAllowsInvalid(boolean)|Sets whether or no
|javax.swing.text.DefaultFormatter.setCommitsOnValidEdit(boolean)|Sets when edi
|javax.swing.text.DefaultFormatter.setOverwriteMode(boolean)|Configures the beh
|javax.swing.text.DefaultFormatter.setValueClass(Class)|Sets that class that is
|javax.swing.text.DefaultFormatter.stringToValue(String)|Converts the passed in
|javax.swing.text.DefaultFormatter.valueToString(Object)|Converts the passed in

*javax.swing.text.DefaultFormatter_Description*

DefaultFormatter formats aribtrary objects. Formatting is done by invoking the 
toString method. In order to convert the value back to a String, your class 
must provide a constructor that takes a String argument. If no single argument 
constructor that takes a String is found, the returned value will be the String 
passed into stringToValue. 

Instances of DefaultFormatter can not be used in multiple instances of 
JFormattedTextField. To obtain a copy of an already configured 
DefaultFormatter, use the clone method. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.text.DefaultFormatter()*

public DefaultFormatter()

Creates a DefaultFormatter. 


*javax.swing.text.DefaultFormatter.clone()*

public |java.lang.Object| clone()
  throws |java.lang.CloneNotSupportedException|
         
Creates a copy of the DefaultFormatter. 


    Returns: copy of the DefaultFormatter 
*javax.swing.text.DefaultFormatter.getAllowsInvalid()*

public boolean getAllowsInvalid()

Returns whether or not the value being edited is allowed to be invalid for a 
length of time. 


    Returns: false if the edited value must always be valid 
*javax.swing.text.DefaultFormatter.getCommitsOnValidEdit()*

public boolean getCommitsOnValidEdit()

Returns when edits are published back to the JFormattedTextField. 


    Returns: true if edits are commited after evey valid edit 
*javax.swing.text.DefaultFormatter.getDocumentFilter()*

protected |javax.swing.text.DocumentFilter| getDocumentFilter()

Returns the DocumentFilter used to restrict the characters that can be input 
into the JFormattedTextField. 


    Returns: DocumentFilter to restrict edits 
*javax.swing.text.DefaultFormatter.getNavigationFilter()*

protected |javax.swing.text.NavigationFilter| getNavigationFilter()

Returns the NavigationFilter used to restrict where the cursor can be placed. 


    Returns: NavigationFilter to restrict navigation 
*javax.swing.text.DefaultFormatter.getOverwriteMode()*

public boolean getOverwriteMode()

Returns the behavior when inserting characters. 


    Returns: true if newly inserted characters overwrite existing characters 
*javax.swing.text.DefaultFormatter.getValueClass()*

public |java.lang.Class| getValueClass()

Returns that class that is used to create new Objects. 


    Returns: Class used to constuct return value from stringToValue 
*javax.swing.text.DefaultFormatter.install(JFormattedTextField)*

public void install(javax.swing.JFormattedTextField ftf)

Installs the DefaultFormatter onto a particular JFormattedTextField. This will 
invoke valueToString to convert the current value from the JFormattedTextField 
to a String. This will then install the Actions from getActions, the 
DocumentFilter returned from getDocumentFilter and the NavigationFilter 
returned from getNavigationFilter onto the JFormattedTextField. 

Subclasses will typically only need to override this if they wish to install 
additional listeners on the JFormattedTextField. 

If there is a ParseException in converting the current value to a String, this 
will set the text to an empty String, and mark the JFormattedTextField as being 
in an invalid state. 

While this is a public method, this is typically only useful for subclassers of 
JFormattedTextField. JFormattedTextField will invoke this method at the 
appropriate times when the value changes, or its internal state changes. 

    ftf - JFormattedTextField to format for, may be null indicating uninstall from 
       current JFormattedTextField. 

*javax.swing.text.DefaultFormatter.setAllowsInvalid(boolean)*

public void setAllowsInvalid(boolean allowsInvalid)

Sets whether or not the value being edited is allowed to be invalid for a 
length of time (that is, stringToValue throws a ParseException). It is often 
convenient to allow the user to temporarily input an invalid value. 

    allowsInvalid - Used to indicate if the edited value must always be valid 

*javax.swing.text.DefaultFormatter.setCommitsOnValidEdit(boolean)*

public void setCommitsOnValidEdit(boolean commit)

Sets when edits are published back to the JFormattedTextField. If true, 
commitEdit is invoked after every valid edit (any time the text is edited). On 
the other hand, if this is false than the DefaultFormatter does not publish 
edits back to the JFormattedTextField. As such, the only time the value of the 
JFormattedTextField will change is when commitEdit is invoked on 
JFormattedTextField, typically when enter is pressed or focus leaves the 
JFormattedTextField. 

    commit - Used to indicate when edits are commited back to the JTextComponent 

*javax.swing.text.DefaultFormatter.setOverwriteMode(boolean)*

public void setOverwriteMode(boolean overwriteMode)

Configures the behavior when inserting characters. If overwriteMode is true 
(the default), new characters overwrite existing characters in the model. 

    overwriteMode - Indicates if overwrite or overstrike mode is used 

*javax.swing.text.DefaultFormatter.setValueClass(Class)*

public void setValueClass(java.lang.Class valueClass)

Sets that class that is used to create new Objects. If the passed in class does 
not have a single argument constructor that takes a String, String values will 
be used. 

    valueClass - Class used to construct return value from stringToValue 

*javax.swing.text.DefaultFormatter.stringToValue(String)*

public |java.lang.Object| stringToValue(java.lang.String string)
  throws |java.text.ParseException|
         
Converts the passed in String into an instance of getValueClass by way of the 
constructor that takes a String argument. If getValueClass returns null, the 
Class of the current value in the JFormattedTextField will be used. If this is 
null, a String will be returned. If the constructor thows an exception, a 
ParseException will be thrown. If there is no single argument String 
constructor, string will be returned. 

    string - String to convert 

    Returns: Object representation of text 
*javax.swing.text.DefaultFormatter.valueToString(Object)*

public |java.lang.String| valueToString(java.lang.Object value)
  throws |java.text.ParseException|
         
Converts the passed in Object into a String by way of the toString method. 

    value - Value to convert 

    Returns: String representation of value 


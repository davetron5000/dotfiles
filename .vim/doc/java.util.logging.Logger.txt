*java.util.logging.Logger* *Logger* A Logger object is used to log messages for 

public class Logger
  extends    |java.lang.Object|

|java.util.logging.Logger_Description|
|java.util.logging.Logger_Fields|
|java.util.logging.Logger_Constructors|
|java.util.logging.Logger_Methods|

================================================================================

*java.util.logging.Logger_Fields*
|java.util.logging.Logger_java.util.logging.Logger.global|

*java.util.logging.Logger_Constructors*
|java.util.logging.Logger(String,String)|Protected method to construct a logger

*java.util.logging.Logger_Methods*
|java.util.logging.Logger.addHandler(Handler)|Add a log Handler to receive logg
|java.util.logging.Logger.config(String)|Log a CONFIG message.
|java.util.logging.Logger.entering(String,String)|Log a method entry.
|java.util.logging.Logger.entering(String,String,Object)|Log a method entry, wi
|java.util.logging.Logger.entering(String,String,Object[])|Log a method entry, 
|java.util.logging.Logger.exiting(String,String)|Log a method return.
|java.util.logging.Logger.exiting(String,String,Object)|Log a method return, wi
|java.util.logging.Logger.fine(String)|Log a FINE message.
|java.util.logging.Logger.finer(String)|Log a FINER message.
|java.util.logging.Logger.finest(String)|Log a FINEST message.
|java.util.logging.Logger.getAnonymousLogger()|Create an anonymous Logger.
|java.util.logging.Logger.getAnonymousLogger(String)|Create an anonymous Logger
|java.util.logging.Logger.getFilter()|Get the current filter for this Logger.
|java.util.logging.Logger.getHandlers()|Get the Handlers associated with this l
|java.util.logging.Logger.getLevel()|Get the log Level that has been specified 
|java.util.logging.Logger.getLogger(String)|Find or create a logger for a named
|java.util.logging.Logger.getLogger(String,String)|Find or create a logger for 
|java.util.logging.Logger.getName()|Get the name for this logger.
|java.util.logging.Logger.getParent()|Return the parent for this Logger.
|java.util.logging.Logger.getResourceBundle()|Retrieve the localization resourc
|java.util.logging.Logger.getResourceBundleName()|Retrieve the localization res
|java.util.logging.Logger.getUseParentHandlers()|Discover whether or not this l
|java.util.logging.Logger.info(String)|Log an INFO message.
|java.util.logging.Logger.isLoggable(Level)|Check if a message of the given lev
|java.util.logging.Logger.log(Level,String)|Log a message, with no arguments.
|java.util.logging.Logger.log(Level,String,Object)|Log a message, with one obje
|java.util.logging.Logger.log(Level,String,Object[])|Log a message, with an arr
|java.util.logging.Logger.log(Level,String,Throwable)|Log a message, with assoc
|java.util.logging.Logger.log(LogRecord)|Log a LogRecord.
|java.util.logging.Logger.logp(Level,String,String,String)|Log a message, speci
|java.util.logging.Logger.logp(Level,String,String,String,Object)|Log a message
|java.util.logging.Logger.logp(Level,String,String,String,Object[])|Log a messa
|java.util.logging.Logger.logp(Level,String,String,String,Throwable)|Log a mess
|java.util.logging.Logger.logrb(Level,String,String,String,String)|Log a messag
|java.util.logging.Logger.logrb(Level,String,String,String,String,Object)|Log a
|java.util.logging.Logger.logrb(Level,String,String,String,String,Object[])|Log
|java.util.logging.Logger.logrb(Level,String,String,String,String,Throwable)|Lo
|java.util.logging.Logger.removeHandler(Handler)|Remove a log Handler.
|java.util.logging.Logger.setFilter(Filter)|Set a filter to control output on t
|java.util.logging.Logger.setLevel(Level)|Set the log level specifying which me
|java.util.logging.Logger.setParent(Logger)|Set the parent for this Logger.
|java.util.logging.Logger.setUseParentHandlers(boolean)|Specify whether or not 
|java.util.logging.Logger.severe(String)|Log a SEVERE message.
|java.util.logging.Logger.throwing(String,String,Throwable)|Log throwing an exc
|java.util.logging.Logger.warning(String)|Log a WARNING message.

*java.util.logging.Logger_Description*

A Logger object is used to log messages for a specific system or application 
component. Loggers are normally named, using a hierarchical dot-separated 
namespace. Logger names can be arbitrary strings, but they should normally be 
based on the package name or class name of the logged component, such as 
java.net or javax.swing. In addition it is possible to create "anonymous" 
Loggers that are not stored in the Logger namespace. 

Logger objects may be obtained by calls on one of the getLogger factory 
methods. These will either create a new Logger or return a suitable existing 
Logger. 

Logging messages will be forwarded to registered Handler objects, which can 
forward the messages to a variety of destinations, including consoles, files, 
OS logs, etc. 

Each Logger keeps track of a "parent" Logger, which is its nearest existing 
ancestor in the Logger namespace. 

Each Logger has a "Level" associated with it. This reflects a minimum Level 
that this logger cares about. If a Logger's level is set to null, then its 
effective level is inherited from its parent, which may in turn obtain it 
recursively from its parent, and so on up the tree. 

The log level can be configured based on the properties from the logging 
configuration file, as described in the description of the LogManager class. 
However it may also be dynamically changed by calls on the Logger.setLevel 
method. If a logger's level is changed the change may also affect child 
loggers, since any child logger that has null as its level will inherit its 
effective level from its parent. 

On each logging call the Logger initially performs a cheap check of the request 
level (e.g. SEVERE or FINE) against the effective log level of the logger. If 
the request level is lower than the log level, the logging call returns 
immediately. 

After passing this initial (cheap) test, the Logger will allocate a LogRecord 
to describe the logging message. It will then call a Filter (if present) to do 
a more detailed check on whether the record should be published. If that passes 
it will then publish the LogRecord to its output Handlers. By default, loggers 
also publish to their parent's Handlers, recursively up the tree. 

Each Logger may have a ResourceBundle name associated with it. The named bundle 
will be used for localizing logging messages. If a Logger does not have its own 
ResourceBundle name, then it will inherit the ResourceBundle name from its 
parent, recursively up the tree. 

Most of the logger output methods take a "msg" argument. This msg argument may 
be either a raw value or a localization key. During formatting, if the logger 
has (or inherits) a localization ResourceBundle and if the ResourceBundle has a 
mapping for the msg string, then the msg string is replaced by the localized 
value. Otherwise the original msg string is used. Typically, formatters use 
java.text.MessageFormat style formatting to format parameters, so for example a 
format string "{0} {1}" would format two parameters as strings. 

When mapping ResourceBundle names to ResourceBundles, the Logger will first try 
to use the Thread's ContextClassLoader. If that is null it will try the 
SystemClassLoader instead. As a temporary transition feature in the initial 
implementation, if the Logger is unable to locate a ResourceBundle from the 
ContextClassLoader or SystemClassLoader the Logger will also search up the 
class stack and use successive calling ClassLoaders to try to locate a 
ResourceBundle. (This call stack search is to allow containers to transition to 
using ContextClassLoaders and is likely to be removed in future versions.) 

Formatting (including localization) is the responsibility of the output 
Handler, which will typically call a Formatter. 

Note that formatting need not occur synchronously. It may be delayed until a 
LogRecord is actually written to an external sink. 

The logging methods are grouped in five main categories: 

There are a set of "log" methods that take a log level, a message string, and 
optionally some parameters to the message string. 

There are a set of "logp" methods (for "log precise") that are like the "log" 
methods, but also take an explicit source class name and method name. 

There are a set of "logrb" method (for "log with resource bundle") that are 
like the "logp" method, but also take an explicit resource bundle name for use 
in localizing the log message. 

There are convenience methods for tracing method entries (the "entering" 
methods), method returns (the "exiting" methods) and throwing exceptions (the 
"throwing" methods). 

Finally, there are a set of convenience methods for use in the very simplest 
cases, when a developer simply wants to log a simple string at a given log 
level. These methods are named after the standard Level names ("severe", 
"warning", "info", etc.) and take a single argument, a message string. 

For the methods that do not take an explicit source name and method name, the 
Logging framework will make a "best effort" to determine which class and method 
called into the logging method. However, it is important to realize that this 
automatically inferred information may only be approximate (or may even be 
quite wrong!). Virtual machines are allowed to do extensive optimizations when 
JITing and may entirely remove stack frames, making it impossible to reliably 
locate the calling class and method. 

All methods on Logger are multi-thread safe. 

Subclassing Information: Note that a LogManager class may provide its own 
implementation of named Loggers for any point in the namespace. Therefore, any 
subclasses of Logger (unless they are implemented in conjunction with a new 
LogManager class) should take care to obtain a Logger instance from the 
LogManager class and should delegate operations such as "isLoggable" and 
"log(LogRecord)" to that instance. Note that in order to intercept all logging 
output, subclasses need only override the log(LogRecord) method. All the other 
logging methods are implemented as calls on this log(LogRecord) method. 


*java.util.logging.Logger_java.util.logging.Logger.global*

A Logger object is used to log messages for a specific system or application 
component. Loggers are normally named, using a hierarchical dot-separated 
namespace. Logger names can be arbitrary strings, but they should normally be 
based on the package name or class name of the logged component, such as 
java.net or javax.swing. In addition it is possible to create "anonymous" 
Loggers that are not stored in the Logger namespace. 

Logger objects may be obtained by calls on one of the getLogger factory 
methods. These will either create a new Logger or return a suitable existing 
Logger. 

Logging messages will be forwarded to registered Handler objects, which can 
forward the messages to a variety of destinations, including consoles, files, 
OS logs, etc. 

Each Logger keeps track of a "parent" Logger, which is its nearest existing 
ancestor in the Logger namespace. 

Each Logger has a "Level" associated with it. This reflects a minimum Level 
that this logger cares about. If a Logger's level is set to null, then its 
effective level is inherited from its parent, which may in turn obtain it 
recursively from its parent, and so on up the tree. 

The log level can be configured based on the properties from the logging 
configuration file, as described in the description of the LogManager class. 
However it may also be dynamically changed by calls on the Logger.setLevel 
method. If a logger's level is changed the change may also affect child 
loggers, since any child logger that has null as its level will inherit its 
effective level from its parent. 

On each logging call the Logger initially performs a cheap check of the request 
level (e.g. SEVERE or FINE) against the effective log level of the logger. If 
the request level is lower than the log level, the logging call returns 
immediately. 

After passing this initial (cheap) test, the Logger will allocate a LogRecord 
to describe the logging message. It will then call a Filter (if present) to do 
a more detailed check on whether the record should be published. If that passes 
it will then publish the LogRecord to its output Handlers. By default, loggers 
also publish to their parent's Handlers, recursively up the tree. 

Each Logger may have a ResourceBundle name associated with it. The named bundle 
will be used for localizing logging messages. If a Logger does not have its own 
ResourceBundle name, then it will inherit the ResourceBundle name from its 
parent, recursively up the tree. 

Most of the logger output methods take a "msg" argument. This msg argument may 
be either a raw value or a localization key. During formatting, if the logger 
has (or inherits) a localization ResourceBundle and if the ResourceBundle has a 
mapping for the msg string, then the msg string is replaced by the localized 
value. Otherwise the original msg string is used. Typically, formatters use 
java.text.MessageFormat style formatting to format parameters, so for example a 
format string "{0} {1}" would format two parameters as strings. 

When mapping ResourceBundle names to ResourceBundles, the Logger will first try 
to use the Thread's ContextClassLoader. If that is null it will try the 
SystemClassLoader instead. As a temporary transition feature in the initial 
implementation, if the Logger is unable to locate a ResourceBundle from the 
ContextClassLoader or SystemClassLoader the Logger will also search up the 
class stack and use successive calling ClassLoaders to try to locate a 
ResourceBundle. (This call stack search is to allow containers to transition to 
using ContextClassLoaders and is likely to be removed in future versions.) 

Formatting (including localization) is the responsibility of the output 
Handler, which will typically call a Formatter. 

Note that formatting need not occur synchronously. It may be delayed until a 
LogRecord is actually written to an external sink. 

The logging methods are grouped in five main categories: 

There are a set of "log" methods that take a log level, a message string, and 
optionally some parameters to the message string. 

There are a set of "logp" methods (for "log precise") that are like the "log" 
methods, but also take an explicit source class name and method name. 

There are a set of "logrb" method (for "log with resource bundle") that are 
like the "logp" method, but also take an explicit resource bundle name for use 
in localizing the log message. 

There are convenience methods for tracing method entries (the "entering" 
methods), method returns (the "exiting" methods) and throwing exceptions (the 
"throwing" methods). 

Finally, there are a set of convenience methods for use in the very simplest 
cases, when a developer simply wants to log a simple string at a given log 
level. These methods are named after the standard Level names ("severe", 
"warning", "info", etc.) and take a single argument, a message string. 

For the methods that do not take an explicit source name and method name, the 
Logging framework will make a "best effort" to determine which class and method 
called into the logging method. However, it is important to realize that this 
automatically inferred information may only be approximate (or may even be 
quite wrong!). Virtual machines are allowed to do extensive optimizations when 
JITing and may entirely remove stack frames, making it impossible to reliably 
locate the calling class and method. 

All methods on Logger are multi-thread safe. 

Subclassing Information: Note that a LogManager class may provide its own 
implementation of named Loggers for any point in the namespace. Therefore, any 
subclasses of Logger (unless they are implemented in conjunction with a new 
LogManager class) should take care to obtain a Logger instance from the 
LogManager class and should delegate operations such as "isLoggable" and 
"log(LogRecord)" to that instance. Note that in order to intercept all logging 
output, subclasses need only override the log(LogRecord) method. All the other 
logging methods are implemented as calls on this log(LogRecord) method. 



*java.util.logging.Logger(String,String)*

protected Logger(
  java.lang.String name,
  java.lang.String resourceBundleName)

Protected method to construct a logger for a named subsystem. 

The logger will be initially configured with a null Level and with 
useParentHandlers true. 

    name - A name for the logger. This should be a dot-separated name and should normally 
       be based on the package name or class name of the subsystem, such as 
       java.net or javax.swing. It may be null for anonymous Loggers. 
    resourceBundleName - name of ResourceBundle to be used for localizing messages for this logger. May 
       be null if none of the messages require localization. 

*java.util.logging.Logger.addHandler(Handler)*

public synchronized void addHandler(java.util.logging.Handler handler)
  throws |java.lang.SecurityException|
         
Add a log Handler to receive logging messages. 

By default, Loggers also send their output to their parent logger. Typically 
the root Logger is configured with a set of Handlers that essentially act as 
default handlers for all loggers. 

    handler - a logging Handler 

*java.util.logging.Logger.config(String)*

public void config(java.lang.String msg)

Log a CONFIG message. 

If the logger is currently enabled for the CONFIG message level then the given 
message is forwarded to all the registered output Handler objects. 

    msg - The string message (or a key in the message catalog) 

*java.util.logging.Logger.entering(String,String)*

public void entering(
  java.lang.String sourceClass,
  java.lang.String sourceMethod)

Log a method entry. 

This is a convenience method that can be used to log entry to a method. A 
LogRecord with message "ENTRY", log level FINER, and the given sourceMethod and 
sourceClass is logged. 

    sourceClass - name of class that issued the logging request 
    sourceMethod - name of method that is being entered 

*java.util.logging.Logger.entering(String,String,Object)*

public void entering(
  java.lang.String sourceClass,
  java.lang.String sourceMethod,
  java.lang.Object param1)

Log a method entry, with one parameter. 

This is a convenience method that can be used to log entry to a method. A 
LogRecord with message "ENTRY {0}", log level FINER, and the given 
sourceMethod, sourceClass, and parameter is logged. 

    sourceClass - name of class that issued the logging request 
    sourceMethod - name of method that is being entered 
    param1 - parameter to the method being entered 

*java.util.logging.Logger.entering(String,String,Object[])*

public void entering(
  java.lang.String sourceClass,
  java.lang.String sourceMethod,
  java.lang.Object[] params)

Log a method entry, with an array of parameters. 

This is a convenience method that can be used to log entry to a method. A 
LogRecord with message "ENTRY" (followed by a format {N} indicator for each 
entry in the parameter array), log level FINER, and the given sourceMethod, 
sourceClass, and parameters is logged. 

    sourceClass - name of class that issued the logging request 
    sourceMethod - name of method that is being entered 
    params - array of parameters to the method being entered 

*java.util.logging.Logger.exiting(String,String)*

public void exiting(
  java.lang.String sourceClass,
  java.lang.String sourceMethod)

Log a method return. 

This is a convenience method that can be used to log returning from a method. A 
LogRecord with message "RETURN", log level FINER, and the given sourceMethod 
and sourceClass is logged. 

    sourceClass - name of class that issued the logging request 
    sourceMethod - name of the method 

*java.util.logging.Logger.exiting(String,String,Object)*

public void exiting(
  java.lang.String sourceClass,
  java.lang.String sourceMethod,
  java.lang.Object result)

Log a method return, with result object. 

This is a convenience method that can be used to log returning from a method. A 
LogRecord with message "RETURN {0}", log level FINER, and the gives 
sourceMethod, sourceClass, and result object is logged. 

    sourceClass - name of class that issued the logging request 
    sourceMethod - name of the method 
    result - Object that is being returned 

*java.util.logging.Logger.fine(String)*

public void fine(java.lang.String msg)

Log a FINE message. 

If the logger is currently enabled for the FINE message level then the given 
message is forwarded to all the registered output Handler objects. 

    msg - The string message (or a key in the message catalog) 

*java.util.logging.Logger.finer(String)*

public void finer(java.lang.String msg)

Log a FINER message. 

If the logger is currently enabled for the FINER message level then the given 
message is forwarded to all the registered output Handler objects. 

    msg - The string message (or a key in the message catalog) 

*java.util.logging.Logger.finest(String)*

public void finest(java.lang.String msg)

Log a FINEST message. 

If the logger is currently enabled for the FINEST message level then the given 
message is forwarded to all the registered output Handler objects. 

    msg - The string message (or a key in the message catalog) 

*java.util.logging.Logger.getAnonymousLogger()*

public static synchronized |java.util.logging.Logger| getAnonymousLogger()

Create an anonymous Logger. The newly created Logger is not registered in the 
LogManager namespace. There will be no access checks on updates to the logger. 

This factory method is primarily intended for use from applets. Because the 
resulting Logger is anonymous it can be kept private by the creating class. 
This removes the need for normal security checks, which in turn allows 
untrusted applet code to update the control state of the Logger. For example an 
applet can do a setLevel or an addHandler on an anonymous Logger. 

Even although the new logger is anonymous, it is configured to have the root 
logger ("") as its parent. This means that by default it inherits its effective 
level and handlers from the root logger. 


    Returns: a newly created private Logger 
*java.util.logging.Logger.getAnonymousLogger(String)*

public static synchronized |java.util.logging.Logger| getAnonymousLogger(java.lang.String resourceBundleName)

Create an anonymous Logger. The newly created Logger is not registered in the 
LogManager namespace. There will be no access checks on updates to the logger. 

This factory method is primarily intended for use from applets. Because the 
resulting Logger is anonymous it can be kept private by the creating class. 
This removes the need for normal security checks, which in turn allows 
untrusted applet code to update the control state of the Logger. For example an 
applet can do a setLevel or an addHandler on an anonymous Logger. 

Even although the new logger is anonymous, it is configured to have the root 
logger ("") as its parent. This means that by default it inherits its effective 
level and handlers from the root logger. 

    resourceBundleName - name of ResourceBundle to be used for localizing messages for this logger. May 
       be null if none of the messages require localization. 

    Returns: a newly created private Logger 
*java.util.logging.Logger.getFilter()*

public |java.util.logging.Filter| getFilter()

Get the current filter for this Logger. 


    Returns: a filter object (may be null) 
*java.util.logging.Logger.getHandlers()*

public synchronized |java.util.logging.Handler| getHandlers()

Get the Handlers associated with this logger. 


    Returns: an array of all registered Handlers 
*java.util.logging.Logger.getLevel()*

public |java.util.logging.Level| getLevel()

Get the log Level that has been specified for this Logger. The result may be 
null, which means that this logger's effective level will be inherited from its 
parent. 


    Returns: this Logger's level 
*java.util.logging.Logger.getLogger(String)*

public static synchronized |java.util.logging.Logger| getLogger(java.lang.String name)

Find or create a logger for a named subsystem. If a logger has already been 
created with the given name it is returned. Otherwise a new logger is created. 

If a new logger is created its log level will be configured based on the 
LogManager configuration and it will configured to also send logging output to 
its parent's handlers. It will be registered in the LogManager global 
namespace. 

    name - A name for the logger. This should be a dot-separated name and should normally 
       be based on the package name or class name of the subsystem, such as 
       java.net or javax.swing 

    Returns: a suitable Logger 
*java.util.logging.Logger.getLogger(String,String)*

public static synchronized |java.util.logging.Logger| getLogger(
  java.lang.String name,
  java.lang.String resourceBundleName)

Find or create a logger for a named subsystem. If a logger has already been 
created with the given name it is returned. Otherwise a new logger is created. 

If a new logger is created its log level will be configured based on the 
LogManager and it will configured to also send logging output to its parent 
loggers Handlers. It will be registered in the LogManager global namespace. 

If the named Logger already exists and does not yet have a localization 
resource bundle then the given resource bundle name is used. If the named 
Logger already exists and has a different resource bundle name then an 
IllegalArgumentException is thrown. 

    name - A name for the logger. This should be a dot-separated name and should normally 
       be based on the package name or class name of the subsystem, such as 
       java.net or javax.swing 
    resourceBundleName - name of ResourceBundle to be used for localizing messages for this logger. May 
       be null if none of the messages require localization. 

    Returns: a suitable Logger 
*java.util.logging.Logger.getName()*

public |java.lang.String| getName()

Get the name for this logger. 


    Returns: logger name. Will be null for anonymous Loggers. 
*java.util.logging.Logger.getParent()*

public |java.util.logging.Logger| getParent()

Return the parent for this Logger. 

This method returns the nearest extant parent in the namespace. Thus if a 
Logger is called "a.b.c.d", and a Logger called "a.b" has been created but no 
logger "a.b.c" exists, then a call of getParent on the Logger "a.b.c.d" will 
return the Logger "a.b". 

The result will be null if it is called on the root Logger in the namespace. 


    Returns: nearest existing parent Logger 
*java.util.logging.Logger.getResourceBundle()*

public |java.util.ResourceBundle| getResourceBundle()

Retrieve the localization resource bundle for this logger for the current 
default locale. Note that if the result is null, then the Logger will use a 
resource bundle inherited from its parent. 


    Returns: localization bundle (may be null) 
*java.util.logging.Logger.getResourceBundleName()*

public |java.lang.String| getResourceBundleName()

Retrieve the localization resource bundle name for this logger. Note that if 
the result is null, then the Logger will use a resource bundle name inherited 
from its parent. 


    Returns: localization bundle name (may be null) 
*java.util.logging.Logger.getUseParentHandlers()*

public synchronized boolean getUseParentHandlers()

Discover whether or not this logger is sending its output to its parent logger. 


    Returns: true if output is to be sent to the logger's parent 
*java.util.logging.Logger.info(String)*

public void info(java.lang.String msg)

Log an INFO message. 

If the logger is currently enabled for the INFO message level then the given 
message is forwarded to all the registered output Handler objects. 

    msg - The string message (or a key in the message catalog) 

*java.util.logging.Logger.isLoggable(Level)*

public boolean isLoggable(java.util.logging.Level level)

Check if a message of the given level would actually be logged by this logger. 
This check is based on the Loggers effective level, which may be inherited from 
its parent. 

    level - a message logging level 

    Returns: true if the given message level is currently being logged. 
*java.util.logging.Logger.log(Level,String)*

public void log(
  java.util.logging.Level level,
  java.lang.String msg)

Log a message, with no arguments. 

If the logger is currently enabled for the given message level then the given 
message is forwarded to all the registered output Handler objects. 

    level - One of the message level identifiers, e.g. SEVERE 
    msg - The string message (or a key in the message catalog) 

*java.util.logging.Logger.log(Level,String,Object)*

public void log(
  java.util.logging.Level level,
  java.lang.String msg,
  java.lang.Object param1)

Log a message, with one object parameter. 

If the logger is currently enabled for the given message level then a 
corresponding LogRecord is created and forwarded to all the registered output 
Handler objects. 

    level - One of the message level identifiers, e.g. SEVERE 
    msg - The string message (or a key in the message catalog) 
    param1 - parameter to the message 

*java.util.logging.Logger.log(Level,String,Object[])*

public void log(
  java.util.logging.Level level,
  java.lang.String msg,
  java.lang.Object[] params)

Log a message, with an array of object arguments. 

If the logger is currently enabled for the given message level then a 
corresponding LogRecord is created and forwarded to all the registered output 
Handler objects. 

    level - One of the message level identifiers, e.g. SEVERE 
    msg - The string message (or a key in the message catalog) 
    params - array of parameters to the message 

*java.util.logging.Logger.log(Level,String,Throwable)*

public void log(
  java.util.logging.Level level,
  java.lang.String msg,
  java.lang.Throwable thrown)

Log a message, with associated Throwable information. 

If the logger is currently enabled for the given message level then the given 
arguments are stored in a LogRecord which is forwarded to all registered output 
handlers. 

Note that the thrown argument is stored in the LogRecord thrown property, 
rather than the LogRecord parameters property. Thus is it processed specially 
by output Formatters and is not treated as a formatting parameter to the 
LogRecord message property. 

    level - One of the message level identifiers, e.g. SEVERE 
    msg - The string message (or a key in the message catalog) 
    thrown - Throwable associated with log message. 

*java.util.logging.Logger.log(LogRecord)*

public void log(java.util.logging.LogRecord record)

Log a LogRecord. 

All the other logging methods in this class call through this method to 
actually perform any logging. Subclasses can override this single method to 
capture all log activity. 

    record - the LogRecord to be published 

*java.util.logging.Logger.logp(Level,String,String,String)*

public void logp(
  java.util.logging.Level level,
  java.lang.String sourceClass,
  java.lang.String sourceMethod,
  java.lang.String msg)

Log a message, specifying source class and method, with no arguments. 

If the logger is currently enabled for the given message level then the given 
message is forwarded to all the registered output Handler objects. 

    level - One of the message level identifiers, e.g. SEVERE 
    sourceClass - name of class that issued the logging request 
    sourceMethod - name of method that issued the logging request 
    msg - The string message (or a key in the message catalog) 

*java.util.logging.Logger.logp(Level,String,String,String,Object)*

public void logp(
  java.util.logging.Level level,
  java.lang.String sourceClass,
  java.lang.String sourceMethod,
  java.lang.String msg,
  java.lang.Object param1)

Log a message, specifying source class and method, with a single object 
parameter to the log message. 

If the logger is currently enabled for the given message level then a 
corresponding LogRecord is created and forwarded to all the registered output 
Handler objects. 

    level - One of the message level identifiers, e.g. SEVERE 
    sourceClass - name of class that issued the logging request 
    sourceMethod - name of method that issued the logging request 
    msg - The string message (or a key in the message catalog) 
    param1 - Parameter to the log message. 

*java.util.logging.Logger.logp(Level,String,String,String,Object[])*

public void logp(
  java.util.logging.Level level,
  java.lang.String sourceClass,
  java.lang.String sourceMethod,
  java.lang.String msg,
  java.lang.Object[] params)

Log a message, specifying source class and method, with an array of object 
arguments. 

If the logger is currently enabled for the given message level then a 
corresponding LogRecord is created and forwarded to all the registered output 
Handler objects. 

    level - One of the message level identifiers, e.g. SEVERE 
    sourceClass - name of class that issued the logging request 
    sourceMethod - name of method that issued the logging request 
    msg - The string message (or a key in the message catalog) 
    params - Array of parameters to the message 

*java.util.logging.Logger.logp(Level,String,String,String,Throwable)*

public void logp(
  java.util.logging.Level level,
  java.lang.String sourceClass,
  java.lang.String sourceMethod,
  java.lang.String msg,
  java.lang.Throwable thrown)

Log a message, specifying source class and method, with associated Throwable 
information. 

If the logger is currently enabled for the given message level then the given 
arguments are stored in a LogRecord which is forwarded to all registered output 
handlers. 

Note that the thrown argument is stored in the LogRecord thrown property, 
rather than the LogRecord parameters property. Thus is it processed specially 
by output Formatters and is not treated as a formatting parameter to the 
LogRecord message property. 

    level - One of the message level identifiers, e.g. SEVERE 
    sourceClass - name of class that issued the logging request 
    sourceMethod - name of method that issued the logging request 
    msg - The string message (or a key in the message catalog) 
    thrown - Throwable associated with log message. 

*java.util.logging.Logger.logrb(Level,String,String,String,String)*

public void logrb(
  java.util.logging.Level level,
  java.lang.String sourceClass,
  java.lang.String sourceMethod,
  java.lang.String bundleName,
  java.lang.String msg)

Log a message, specifying source class, method, and resource bundle name with 
no arguments. 

If the logger is currently enabled for the given message level then the given 
message is forwarded to all the registered output Handler objects. 

The msg string is localized using the named resource bundle. If the resource 
bundle name is null, or an empty String or invalid then the msg string is not 
localized. 

    level - One of the message level identifiers, e.g. SEVERE 
    sourceClass - name of class that issued the logging request 
    sourceMethod - name of method that issued the logging request 
    bundleName - name of resource bundle to localize msg, can be null 
    msg - The string message (or a key in the message catalog) 

*java.util.logging.Logger.logrb(Level,String,String,String,String,Object)*

public void logrb(
  java.util.logging.Level level,
  java.lang.String sourceClass,
  java.lang.String sourceMethod,
  java.lang.String bundleName,
  java.lang.String msg,
  java.lang.Object param1)

Log a message, specifying source class, method, and resource bundle name, with 
a single object parameter to the log message. 

If the logger is currently enabled for the given message level then a 
corresponding LogRecord is created and forwarded to all the registered output 
Handler objects. 

The msg string is localized using the named resource bundle. If the resource 
bundle name is null, or an empty String or invalid then the msg string is not 
localized. 

    level - One of the message level identifiers, e.g. SEVERE 
    sourceClass - name of class that issued the logging request 
    sourceMethod - name of method that issued the logging request 
    bundleName - name of resource bundle to localize msg, can be null 
    msg - The string message (or a key in the message catalog) 
    param1 - Parameter to the log message. 

*java.util.logging.Logger.logrb(Level,String,String,String,String,Object[])*

public void logrb(
  java.util.logging.Level level,
  java.lang.String sourceClass,
  java.lang.String sourceMethod,
  java.lang.String bundleName,
  java.lang.String msg,
  java.lang.Object[] params)

Log a message, specifying source class, method, and resource bundle name, with 
an array of object arguments. 

If the logger is currently enabled for the given message level then a 
corresponding LogRecord is created and forwarded to all the registered output 
Handler objects. 

The msg string is localized using the named resource bundle. If the resource 
bundle name is null, or an empty String or invalid then the msg string is not 
localized. 

    level - One of the message level identifiers, e.g. SEVERE 
    sourceClass - name of class that issued the logging request 
    sourceMethod - name of method that issued the logging request 
    bundleName - name of resource bundle to localize msg, can be null. 
    msg - The string message (or a key in the message catalog) 
    params - Array of parameters to the message 

*java.util.logging.Logger.logrb(Level,String,String,String,String,Throwable)*

public void logrb(
  java.util.logging.Level level,
  java.lang.String sourceClass,
  java.lang.String sourceMethod,
  java.lang.String bundleName,
  java.lang.String msg,
  java.lang.Throwable thrown)

Log a message, specifying source class, method, and resource bundle name, with 
associated Throwable information. 

If the logger is currently enabled for the given message level then the given 
arguments are stored in a LogRecord which is forwarded to all registered output 
handlers. 

The msg string is localized using the named resource bundle. If the resource 
bundle name is null, or an empty String or invalid then the msg string is not 
localized. 

Note that the thrown argument is stored in the LogRecord thrown property, 
rather than the LogRecord parameters property. Thus is it processed specially 
by output Formatters and is not treated as a formatting parameter to the 
LogRecord message property. 

    level - One of the message level identifiers, e.g. SEVERE 
    sourceClass - name of class that issued the logging request 
    sourceMethod - name of method that issued the logging request 
    bundleName - name of resource bundle to localize msg, can be null 
    msg - The string message (or a key in the message catalog) 
    thrown - Throwable associated with log message. 

*java.util.logging.Logger.removeHandler(Handler)*

public synchronized void removeHandler(java.util.logging.Handler handler)
  throws |java.lang.SecurityException|
         
Remove a log Handler. 

Returns silently if the given Handler is not found or is null 

    handler - a logging Handler 

*java.util.logging.Logger.setFilter(Filter)*

public void setFilter(java.util.logging.Filter newFilter)
  throws |java.lang.SecurityException|
         
Set a filter to control output on this Logger. 

After passing the initial "level" check, the Logger will call this Filter to 
check if a log record should really be published. 

    newFilter - a filter object (may be null) 

*java.util.logging.Logger.setLevel(Level)*

public void setLevel(java.util.logging.Level newLevel)
  throws |java.lang.SecurityException|
         
Set the log level specifying which message levels will be logged by this 
logger. Message levels lower than this value will be discarded. The level value 
Level.OFF can be used to turn off logging. 

If the new level is null, it means that this node should inherit its level from 
its nearest ancestor with a specific (non-null) level value. 

    newLevel - the new value for the log level (may be null) 

*java.util.logging.Logger.setParent(Logger)*

public void setParent(java.util.logging.Logger parent)

Set the parent for this Logger. This method is used by the LogManager to update 
a Logger when the namespace changes. 

It should not be called from application code. 

    parent - the new parent logger 

*java.util.logging.Logger.setUseParentHandlers(boolean)*

public synchronized void setUseParentHandlers(boolean useParentHandlers)

Specify whether or not this logger should send its output to it's parent 
Logger. This means that any LogRecords will also be written to the parent's 
Handlers, and potentially to its parent, recursively up the namespace. 

    useParentHandlers - true if output is to be sent to the logger's parent. 

*java.util.logging.Logger.severe(String)*

public void severe(java.lang.String msg)

Log a SEVERE message. 

If the logger is currently enabled for the SEVERE message level then the given 
message is forwarded to all the registered output Handler objects. 

    msg - The string message (or a key in the message catalog) 

*java.util.logging.Logger.throwing(String,String,Throwable)*

public void throwing(
  java.lang.String sourceClass,
  java.lang.String sourceMethod,
  java.lang.Throwable thrown)

Log throwing an exception. 

This is a convenience method to log that a method is terminating by throwing an 
exception. The logging is done using the FINER level. 

If the logger is currently enabled for the given message level then the given 
arguments are stored in a LogRecord which is forwarded to all registered output 
handlers. The LogRecord's message is set to "THROW". 

Note that the thrown argument is stored in the LogRecord thrown property, 
rather than the LogRecord parameters property. Thus is it processed specially 
by output Formatters and is not treated as a formatting parameter to the 
LogRecord message property. 

    sourceClass - name of class that issued the logging request 
    sourceMethod - name of the method. 
    thrown - The Throwable that is being thrown. 

*java.util.logging.Logger.warning(String)*

public void warning(java.lang.String msg)

Log a WARNING message. 

If the logger is currently enabled for the WARNING message level then the given 
message is forwarded to all the registered output Handler objects. 

    msg - The string message (or a key in the message catalog) 



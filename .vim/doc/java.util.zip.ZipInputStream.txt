*java.util.zip.ZipInputStream* *ZipInputStream* This class implements an input s

public class ZipInputStream
  extends    |java.util.zip.InflaterInputStream|
  implements |java.util.zip.ZipConstants|

|java.util.zip.ZipInputStream_Description|
|java.util.zip.ZipInputStream_Fields|
|java.util.zip.ZipInputStream_Constructors|
|java.util.zip.ZipInputStream_Methods|

================================================================================

*java.util.zip.ZipInputStream_Constructors*
|java.util.zip.ZipInputStream(InputStream)|Creates a new ZIP input stream.

*java.util.zip.ZipInputStream_Methods*
|java.util.zip.ZipInputStream.available()|Returns 0 after EOF has reached for t
|java.util.zip.ZipInputStream.close()|Closes this input stream and releases any
|java.util.zip.ZipInputStream.closeEntry()|Closes the current ZIP entry and pos
|java.util.zip.ZipInputStream.createZipEntry(String)|Creates a new ZipEntry obj
|java.util.zip.ZipInputStream.getNextEntry()|Reads the next ZIP file entry and 
|java.util.zip.ZipInputStream.read(byte[],int,int)|Reads from the current ZIP e
|java.util.zip.ZipInputStream.skip(long)|Skips specified number of bytes in the

*java.util.zip.ZipInputStream_Description*

This class implements an input stream filter for reading files in the ZIP file 
format. Includes support for both compressed and uncompressed entries. 


*java.util.zip.ZipInputStream(InputStream)*

public ZipInputStream(java.io.InputStream in)

Creates a new ZIP input stream. 

    in - the actual input stream 

*java.util.zip.ZipInputStream.available()*

public int available()
  throws |java.io.IOException|
         
Returns 0 after EOF has reached for the current entry data, otherwise always 
return 1. 

Programs should not count on this method to return the actual number of bytes 
that could be read without blocking. 


    Returns: 1 before EOF and 0 after EOF has reached for current entry. 
*java.util.zip.ZipInputStream.close()*

public void close()
  throws |java.io.IOException|
         
Closes this input stream and releases any system resources associated with the 
stream. 


*java.util.zip.ZipInputStream.closeEntry()*

public void closeEntry()
  throws |java.io.IOException|
         
Closes the current ZIP entry and positions the stream for reading the next 
entry. 


*java.util.zip.ZipInputStream.createZipEntry(String)*

protected |java.util.zip.ZipEntry| createZipEntry(java.lang.String name)

Creates a new ZipEntry object for the specified entry name. 

    name - the ZIP file entry name 

    Returns: the ZipEntry just created 
*java.util.zip.ZipInputStream.getNextEntry()*

public |java.util.zip.ZipEntry| getNextEntry()
  throws |java.io.IOException|
         
Reads the next ZIP file entry and positions the stream at the beginning of the 
entry data. 


    Returns: the next ZIP file entry, or null if there are no more entries 
*java.util.zip.ZipInputStream.read(byte[],int,int)*

public int read(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Reads from the current ZIP entry into an array of bytes. Blocks until some 
input is available. 

    b - the buffer into which the data is read 
    off - the start offset of the data 
    len - the maximum number of bytes read 

    Returns: the actual number of bytes read, or -1 if the end of the entry is reached 
*java.util.zip.ZipInputStream.skip(long)*

public long skip(long n)
  throws |java.io.IOException|
         
Skips specified number of bytes in the current ZIP entry. 

    n - the number of bytes to skip 

    Returns: the actual number of bytes skipped 


*javax.xml.namespace.QName* *QName* QName represents a qualified name
 as define

public class QName
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|javax.xml.namespace.QName_Description|
|javax.xml.namespace.QName_Fields|
|javax.xml.namespace.QName_Constructors|
|javax.xml.namespace.QName_Methods|

================================================================================

*javax.xml.namespace.QName_Constructors*
|javax.xml.namespace.QName(String)|QName constructor specifying the local part.
|javax.xml.namespace.QName(String,String)|QName constructor specifying the Name
|javax.xml.namespace.QName(String,String,String)|QName constructor specifying t

*javax.xml.namespace.QName_Methods*
|javax.xml.namespace.QName.equals(Object)|Test this QName for equality with ano
|javax.xml.namespace.QName.getLocalPart()|Get the local part of this QName.
|javax.xml.namespace.QName.getNamespaceURI()|Get the Namespace URI of this QNam
|javax.xml.namespace.QName.getPrefix()|Get the prefix of this QName.
|javax.xml.namespace.QName.hashCode()|Generate the hash code for this QName.
|javax.xml.namespace.QName.toString()|String representation of this  QName.
|javax.xml.namespace.QName.valueOf(String)|QName derived from parsing the forma

*javax.xml.namespace.QName_Description*

QName represents a qualified name as defined in the XML specifications: XML 
Schema Part2: Datatypes specification, Namespaces in XML, Namespaces in XML 
Errata. 

The value of a QName contains a Namespace URI, local part and prefix. 

The prefix is included in QName to retain lexical information when present in 
an XML input source(|javax.xml.transform.Source|) . The prefix is NOT used in 
QName.equals(Object)(|javax.xml.namespace.QName|) or to compute the 
QName.hashCode()(|javax.xml.namespace.QName|) . Equality and the hash code are 
defined using only the Namespace URI and local part. 

If not specified, the Namespace URI is set to 
XMLConstants.NULL_NS_URI(|javax.xml.XMLConstants|) . If not specified, the 
prefix is set to XMLConstants.DEFAULT_NS_PREFIX(|javax.xml.XMLConstants|) . 

QName is immutable. 


*javax.xml.namespace.QName(String)*

public QName(java.lang.String localPart)

QName constructor specifying the local part. 

If the local part is null an IllegalArgumentException is thrown. A local part 
of "" is allowed to preserve compatible behavior with QName 1.0. 

When using this constructor, the Namespace URI is set to 
XMLConstants.NULL_NS_URI(|javax.xml.XMLConstants|) and the prefix is set to 
XMLConstants.DEFAULT_NS_PREFIX(|javax.xml.XMLConstants|) . 

In an XML context, all Element and Attribute names exist in the context of a 
Namespace. Making this explicit during the construction of a QName helps 
prevent hard to diagnosis XML validity errors. The constructors QName(String 
namespaceURI, String localPart)(|javax.xml.namespace.QName|) and 
(|javax.xml.namespace.QName|) are preferred. 

The local part is not validated as a NCName as specified in Namespaces in XML. 

    localPart - local part of the QName 

*javax.xml.namespace.QName(String,String)*

public QName(
  java.lang.String namespaceURI,
  java.lang.String localPart)

QName constructor specifying the Namespace URI and local part. 

If the Namespace URI is null, it is set to 
XMLConstants.NULL_NS_URI(|javax.xml.XMLConstants|) . This value represents no 
explicitly defined Namespace as defined by the Namespaces in XML specification. 
This action preserves compatible behavior with QName 1.0. Explicitly providing 
the XMLConstants.NULL_NS_URI(|javax.xml.XMLConstants|) value is the preferred 
coding style. 

If the local part is null an IllegalArgumentException is thrown. A local part 
of "" is allowed to preserve compatible behavior with QName 1.0. 

When using this constructor, the prefix is set to 
XMLConstants.DEFAULT_NS_PREFIX(|javax.xml.XMLConstants|) . 

The Namespace URI is not validated as a URI reference. The local part is not 
validated as a NCName as specified in Namespaces in XML. 

    namespaceURI - Namespace URI of the QName 
    localPart - local part of the QName 

*javax.xml.namespace.QName(String,String,String)*

public QName(
  java.lang.String namespaceURI,
  java.lang.String localPart,
  java.lang.String prefix)

QName constructor specifying the Namespace URI, local part and prefix. 

If the Namespace URI is null, it is set to 
XMLConstants.NULL_NS_URI(|javax.xml.XMLConstants|) . This value represents no 
explicitly defined Namespace as defined by the Namespaces in XML specification. 
This action preserves compatible behavior with QName 1.0. Explicitly providing 
the XMLConstants.NULL_NS_URI(|javax.xml.XMLConstants|) value is the preferred 
coding style. 

If the local part is null an IllegalArgumentException is thrown. A local part 
of "" is allowed to preserve compatible behavior with QName 1.0. 

If the prefix is null, an IllegalArgumentException is thrown. Use 
XMLConstants.DEFAULT_NS_PREFIX(|javax.xml.XMLConstants|) to explicitly indicate 
that no prefix is present or the prefix is not relevant. 

The Namespace URI is not validated as a URI reference. The local part and 
prefix are not validated as a NCName as specified in Namespaces in XML. 

    namespaceURI - Namespace URI of the QName 
    localPart - local part of the QName 
    prefix - prefix of the QName 

*javax.xml.namespace.QName.equals(Object)*

public final boolean equals(java.lang.Object objectToTest)

Test this QName for equality with another Object. 

If the Object to be tested is not a QName or is null, then this method returns 
false. 

Two QNames are considered equal if and only if both the Namespace URI and local 
part are equal. This method uses String.equals() to check equality of the 
Namespace URI and local part. The prefix is NOT used to determine equality. 

This method satisfies the general contract of 
Object.equals(Object)(|java.lang.Object|) 

    objectToTest - the Object to test for equality with this QName 

    Returns: true if the given Object is equal to this QName else false 
*javax.xml.namespace.QName.getLocalPart()*

public |java.lang.String| getLocalPart()

Get the local part of this QName. 


    Returns: local part of this QName 
*javax.xml.namespace.QName.getNamespaceURI()*

public |java.lang.String| getNamespaceURI()

Get the Namespace URI of this QName. 


    Returns: Namespace URI of this QName 
*javax.xml.namespace.QName.getPrefix()*

public |java.lang.String| getPrefix()

Get the prefix of this QName. 

The prefix assigned to a QName might NOT be valid in a different context. For 
example, a QName may be assigned a prefix in the context of parsing a document 
but that prefix may be invalid in the context of a different document. 


    Returns: prefix of this QName 
*javax.xml.namespace.QName.hashCode()*

public final int hashCode()

Generate the hash code for this QName. 

The hash code is calculated using both the Namespace URI and the local part of 
the QName. The prefix is NOT used to calculate the hash code. 

This method satisfies the general contract of 
Object.hashCode()(|java.lang.Object|) . 


    Returns: hash code for this QName Object 
*javax.xml.namespace.QName.toString()*

public |java.lang.String| toString()

String representation of this QName. 

The commonly accepted way of representing a QName as a String was defined by 
James Clark. Although this is not a standard specification, it is in common 
use, e.g. (|javax.xml.transform.Transformer|) . This implementation represents 
a QName as: "{" + Namespace URI + "}" + local part. If the Namespace URI 
.equals(XMLConstants.NULL_NS_URI), only the local part is returned. An 
appropriate use of this method is for debugging or logging for human 
consumption. 

Note the prefix value is NOT returned as part of the String representation. 

This method satisfies the general contract of 
Object.toString()(|java.lang.Object|) . 


    Returns: String representation of this QName 
*javax.xml.namespace.QName.valueOf(String)*

public static |javax.xml.namespace.QName| valueOf(java.lang.String qNameAsString)

QName derived from parsing the formatted String. 

If the String is null or does not conform to 
QName.toString()(|javax.xml.namespace.QName|) formatting, an 
IllegalArgumentException is thrown. 

The String MUST be in the form returned by 
QName.toString()(|javax.xml.namespace.QName|) . 

The commonly accepted way of representing a QName as a String was defined by 
James Clark. Although this is not a standard specification, it is in common 
use, e.g. (|javax.xml.transform.Transformer|) . This implementation parses a 
String formatted as: "{" + Namespace URI + "}" + local part. If the Namespace 
URI .equals(XMLConstants.NULL_NS_URI), only the local part should be provided. 

The prefix value CANNOT be represented in the String and will be set to 
XMLConstants.DEFAULT_NS_PREFIX(|javax.xml.XMLConstants|) . 

This method does not do full validation of the resulting QName. The Namespace 
URI is not validated as a URI reference. The local part is not validated as a 
NCName as specified in Namespaces in XML. 

    qNameAsString - String representation of the QName 

    Returns: QName corresponding to the given String 


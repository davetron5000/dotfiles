*javax.swing.JInternalFrame* *JInternalFrame* A lightweight object that provides

public class JInternalFrame
  extends    |javax.swing.JComponent|
  implements |javax.accessibility.Accessible|
             |javax.swing.WindowConstants|
             |javax.swing.RootPaneContainer|

|javax.swing.JInternalFrame_Description|
|javax.swing.JInternalFrame_Fields|
|javax.swing.JInternalFrame_Constructors|
|javax.swing.JInternalFrame_Methods|

================================================================================

*javax.swing.JInternalFrame_Fields*
|boolean_javax.swing.JInternalFrame.closable|
|java.lang.String_javax.swing.JInternalFrame.CONTENT_PANE_PROPERTY|
|javax.swing.JInternalFrame.JDesktopIcon_javax.swing.JInternalFrame.desktopIcon|
|java.lang.String_javax.swing.JInternalFrame.FRAME_ICON_PROPERTY|
|javax.swing.Icon_javax.swing.JInternalFrame.frameIcon|
|java.lang.String_javax.swing.JInternalFrame.GLASS_PANE_PROPERTY|
|boolean_javax.swing.JInternalFrame.iconable|
|java.lang.String_javax.swing.JInternalFrame.IS_CLOSED_PROPERTY|
|java.lang.String_javax.swing.JInternalFrame.IS_ICON_PROPERTY|
|java.lang.String_javax.swing.JInternalFrame.IS_MAXIMUM_PROPERTY|
|java.lang.String_javax.swing.JInternalFrame.IS_SELECTED_PROPERTY|
|boolean_javax.swing.JInternalFrame.isClosed|
|boolean_javax.swing.JInternalFrame.isIcon|
|boolean_javax.swing.JInternalFrame.isMaximum|
|boolean_javax.swing.JInternalFrame.isSelected|
|java.lang.String_javax.swing.JInternalFrame.LAYERED_PANE_PROPERTY|
|boolean_javax.swing.JInternalFrame.maximizable|
|java.lang.String_javax.swing.JInternalFrame.MENU_BAR_PROPERTY|
|boolean_javax.swing.JInternalFrame.resizable|
|java.lang.String_javax.swing.JInternalFrame.ROOT_PANE_PROPERTY|
|javax.swing.JRootPane_javax.swing.JInternalFrame.rootPane|
|boolean_javax.swing.JInternalFrame.rootPaneCheckingEnabled|
|java.lang.String_javax.swing.JInternalFrame.title|
|java.lang.String_javax.swing.JInternalFrame.TITLE_PROPERTY|

*javax.swing.JInternalFrame_Constructors*
|javax.swing.JInternalFrame()|Creates a non-resizable, non-closable, non-maximi
|javax.swing.JInternalFrame(String)|Creates a non-resizable, non-closable, non-
|javax.swing.JInternalFrame(String,boolean)|Creates a non-closable, non-maximiz
|javax.swing.JInternalFrame(String,boolean,boolean)|Creates a non-maximizable, 
|javax.swing.JInternalFrame(String,boolean,boolean,boolean)|Creates a non-iconi
|javax.swing.JInternalFrame(String,boolean,boolean,boolean,boolean)|Creates a J

*javax.swing.JInternalFrame_Methods*
|javax.swing.JInternalFrame.addImpl(Component,Object,int)|Adds the specified ch
|javax.swing.JInternalFrame.addInternalFrameListener(InternalFrameListener)|Add
|javax.swing.JInternalFrame.createRootPane()|Called by the constructor to set u
|javax.swing.JInternalFrame.dispose()|Makes this internal frame  invisible, uns
|javax.swing.JInternalFrame.doDefaultCloseAction()|Fires an   INTERNAL_FRAME_CL
|javax.swing.JInternalFrame.fireInternalFrameEvent(int)|Fires an internal frame
|javax.swing.JInternalFrame.getAccessibleContext()|Gets the AccessibleContext a
|javax.swing.JInternalFrame.getContentPane()|Returns the content pane for this 
|javax.swing.JInternalFrame.getDefaultCloseOperation()|Returns the default oper
|javax.swing.JInternalFrame.getDesktopIcon()|Returns the JDesktopIcon used when
|javax.swing.JInternalFrame.getDesktopPane()|Convenience method that searches t
|javax.swing.JInternalFrame.getFocusCycleRootAncestor()|Always returns null bec
|javax.swing.JInternalFrame.getFocusOwner()|If this JInternalFrame is active,  
|javax.swing.JInternalFrame.getFrameIcon()|Returns the image displayed in the t
|javax.swing.JInternalFrame.getGlassPane()|Returns the glass pane for this inte
|javax.swing.JInternalFrame.getInternalFrameListeners()|Returns an array of all
|javax.swing.JInternalFrame.getJMenuBar()|Returns the current JMenuBar for this
|javax.swing.JInternalFrame.getLayer()|Convenience method for getting the layer
|javax.swing.JInternalFrame.getLayeredPane()|Returns the layered pane for this 
|javax.swing.JInternalFrame.getMenuBar()|Returns the current JMenuBar for this 
|javax.swing.JInternalFrame.getMostRecentFocusOwner()|Returns the child compone
|javax.swing.JInternalFrame.getNormalBounds()|If the JInternalFrame is not in m
|javax.swing.JInternalFrame.getRootPane()|Returns the rootPane object for this 
|javax.swing.JInternalFrame.getTitle()|Returns the title of the JInternalFrame.
|javax.swing.JInternalFrame.getUI()|Returns the look-and-feel object that rende
|javax.swing.JInternalFrame.getUIClassID()|Returns the name of the look-and-fee
|javax.swing.JInternalFrame.getWarningString()|Gets the warning string that is 
|javax.swing.JInternalFrame.hide()|
|javax.swing.JInternalFrame.isClosable()|Returns whether this JInternalFrame ca
|javax.swing.JInternalFrame.isClosed()|Returns whether this JInternalFrame is c
|javax.swing.JInternalFrame.isFocusCycleRoot()|Always returns true because all 
|javax.swing.JInternalFrame.isIcon()|Returns whether the JInternalFrame is curr
|javax.swing.JInternalFrame.isIconifiable()|Gets the iconable property,  which 
|javax.swing.JInternalFrame.isMaximizable()|Gets the value of the maximizable p
|javax.swing.JInternalFrame.isMaximum()|Returns whether the JInternalFrame is c
|javax.swing.JInternalFrame.isResizable()|Returns whether the JInternalFrame ca
|javax.swing.JInternalFrame.isRootPaneCheckingEnabled()|Returns whether calls t
|javax.swing.JInternalFrame.isSelected()|Returns whether the JInternalFrame is 
|javax.swing.JInternalFrame.moveToBack()|Convenience method that moves this com
|javax.swing.JInternalFrame.moveToFront()|Convenience method that moves this co
|javax.swing.JInternalFrame.pack()|Causes subcomponents of this JInternalFrame 
|javax.swing.JInternalFrame.paintComponent(Graphics)|Overridden to allow optimi
|javax.swing.JInternalFrame.paramString()|Returns a string representation of th
|javax.swing.JInternalFrame.remove(Component)|Removes the specified component f
|javax.swing.JInternalFrame.removeInternalFrameListener(InternalFrameListener)|
|javax.swing.JInternalFrame.reshape(int,int,int,int)|Moves and resizes this com
|javax.swing.JInternalFrame.restoreSubcomponentFocus()|Requests the internal fr
|javax.swing.JInternalFrame.setClosable(boolean)|Sets whether this JInternalFra
|javax.swing.JInternalFrame.setClosed(boolean)|Closes this internal frame if th
|javax.swing.JInternalFrame.setContentPane(Container)|Sets this JInternalFrame'
|javax.swing.JInternalFrame.setDefaultCloseOperation(int)|Sets the operation th
|javax.swing.JInternalFrame.setDesktopIcon(JInternalFrame.JDesktopIcon)|Sets th
|javax.swing.JInternalFrame.setFocusCycleRoot(boolean)|Does nothing because JIn
|javax.swing.JInternalFrame.setFrameIcon(Icon)|Sets an image to be displayed in
|javax.swing.JInternalFrame.setGlassPane(Component)|Sets this JInternalFrame's 
|javax.swing.JInternalFrame.setIcon(boolean)|Iconifies or de-iconifies this int
|javax.swing.JInternalFrame.setIconifiable(boolean)|Sets the iconable property,
|javax.swing.JInternalFrame.setJMenuBar(JMenuBar)|Sets the menuBar property for
|javax.swing.JInternalFrame.setLayer(int)|Convenience method for setting the la
|javax.swing.JInternalFrame.setLayer(Integer)|Convenience method for setting th
|javax.swing.JInternalFrame.setLayeredPane(JLayeredPane)|Sets this JInternalFra
|javax.swing.JInternalFrame.setLayout(LayoutManager)|Ensures that, by default, 
|javax.swing.JInternalFrame.setMaximizable(boolean)|Sets the maximizable proper
|javax.swing.JInternalFrame.setMaximum(boolean)|Maximizes and restores this int
|javax.swing.JInternalFrame.setMenuBar(JMenuBar)|Sets the menuBar property for 
|javax.swing.JInternalFrame.setNormalBounds(Rectangle)|Sets the normal bounds f
|javax.swing.JInternalFrame.setResizable(boolean)|Sets whether the JInternalFra
|javax.swing.JInternalFrame.setRootPane(JRootPane)|Sets the rootPane property  
|javax.swing.JInternalFrame.setRootPaneCheckingEnabled(boolean)|Sets whether ca
|javax.swing.JInternalFrame.setSelected(boolean)|Selects or deselects the inter
|javax.swing.JInternalFrame.setTitle(String)|Sets the JInternalFrame title.
|javax.swing.JInternalFrame.setUI(InternalFrameUI)|Sets the UI delegate for thi
|javax.swing.JInternalFrame.show()|If the internal frame is not visible,  bring
|javax.swing.JInternalFrame.toBack()|Sends this internal frame to the back.
|javax.swing.JInternalFrame.toFront()|Brings this internal frame to the front.
|javax.swing.JInternalFrame.updateUI()|Notification from the UIManager that the

*javax.swing.JInternalFrame_Description*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.JInternalFrame.closable*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JInternalFrame.CONTENT_PANE_PROPERTY*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JInternalFrame.JDesktopIcon_javax.swing.JInternalFrame.desktopIcon*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JInternalFrame.FRAME_ICON_PROPERTY*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.Icon_javax.swing.JInternalFrame.frameIcon*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JInternalFrame.GLASS_PANE_PROPERTY*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.JInternalFrame.iconable*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JInternalFrame.IS_CLOSED_PROPERTY*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JInternalFrame.IS_ICON_PROPERTY*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JInternalFrame.IS_MAXIMUM_PROPERTY*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JInternalFrame.IS_SELECTED_PROPERTY*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.JInternalFrame.isClosed*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.JInternalFrame.isIcon*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.JInternalFrame.isMaximum*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.JInternalFrame.isSelected*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JInternalFrame.LAYERED_PANE_PROPERTY*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.JInternalFrame.maximizable*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JInternalFrame.MENU_BAR_PROPERTY*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.JInternalFrame.resizable*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JInternalFrame.ROOT_PANE_PROPERTY*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JRootPane_javax.swing.JInternalFrame.rootPane*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.JInternalFrame.rootPaneCheckingEnabled*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JInternalFrame.title*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JInternalFrame.TITLE_PROPERTY*

A lightweight object that provides many of the features of a native frame, 
including dragging, closing, becoming an icon, resizing, title display, and 
support for a menu bar. For task-oriented documentation and examples of using 
internal frames, see How to Use Internal Frames, a section in The Java 
Tutorial. 



Generally, you add JInternalFrames to a JDesktopPane. The UI delegates the 
look-and-feel-specific actions to the DesktopManager object maintained by the 
JDesktopPane. 

The JInternalFrame content pane is where you add child components. As a 
conveniance add and its variants, remove and setLayout have been overridden to 
forward to the contentPane as necessary. This means you can write: 

internalFrame.add(child); 

And the child will be added to the contentPane. The content pane is actually 
managed by an instance of JRootPane, which also manages a layout pane, glass 
pane, and optional menu bar for the internal frame. Please see the JRootPane 
documentation for a complete description of these components. Refer to 
(|javax.swing.RootPaneContainer|) for details on adding, removing and setting 
the LayoutManager of a JInternalFrame. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.JInternalFrame()*

public JInternalFrame()

Creates a non-resizable, non-closable, non-maximizable, non-iconifiable 
JInternalFrame with no title. 


*javax.swing.JInternalFrame(String)*

public JInternalFrame(java.lang.String title)

Creates a non-resizable, non-closable, non-maximizable, non-iconifiable 
JInternalFrame with the specified title. Note that passing in a null title 
results in unspecified behavior and possibly an exception. 

    title - the non-null String to display in the title bar 

*javax.swing.JInternalFrame(String,boolean)*

public JInternalFrame(
  java.lang.String title,
  boolean resizable)

Creates a non-closable, non-maximizable, non-iconifiable JInternalFrame with 
the specified title and resizability. 

    title - the String to display in the title bar 
    resizable - if true, the internal frame can be resized 

*javax.swing.JInternalFrame(String,boolean,boolean)*

public JInternalFrame(
  java.lang.String title,
  boolean resizable,
  boolean closable)

Creates a non-maximizable, non-iconifiable JInternalFrame with the specified 
title, resizability, and closability. 

    title - the String to display in the title bar 
    resizable - if true, the internal frame can be resized 
    closable - if true, the internal frame can be closed 

*javax.swing.JInternalFrame(String,boolean,boolean,boolean)*

public JInternalFrame(
  java.lang.String title,
  boolean resizable,
  boolean closable,
  boolean maximizable)

Creates a non-iconifiable JInternalFrame with the specified title, 
resizability, closability, and maximizability. 

    title - the String to display in the title bar 
    resizable - if true, the internal frame can be resized 
    closable - if true, the internal frame can be closed 
    maximizable - if true, the internal frame can be maximized 

*javax.swing.JInternalFrame(String,boolean,boolean,boolean,boolean)*

public JInternalFrame(
  java.lang.String title,
  boolean resizable,
  boolean closable,
  boolean maximizable,
  boolean iconifiable)

Creates a JInternalFrame with the specified title, resizability, closability, 
maximizability, and iconifiability. All JInternalFrame constructors use this 
one. 

    title - the String to display in the title bar 
    resizable - if true, the internal frame can be resized 
    closable - if true, the internal frame can be closed 
    maximizable - if true, the internal frame can be maximized 
    iconifiable - if true, the internal frame can be iconified 

*javax.swing.JInternalFrame.addImpl(Component,Object,int)*

protected void addImpl(
  java.awt.Component comp,
  java.lang.Object constraints,
  int index)

Adds the specified child Component. This method is overridden to conditionally 
forwad calls to the contentPane. By default, children are added to the 
contentPane instead of the frame, refer to (|javax.swing.RootPaneContainer|) 
for details. 

    comp - the component to be enhanced 
    constraints - the constraints to be respected 
    index - the index 

*javax.swing.JInternalFrame.addInternalFrameListener(InternalFrameListener)*

public void addInternalFrameListener(javax.swing.event.InternalFrameListener l)

Adds the specified listener to receive internal frame events from this internal 
frame. 

    l - the internal frame listener 

*javax.swing.JInternalFrame.createRootPane()*

protected |javax.swing.JRootPane| createRootPane()

Called by the constructor to set up the JRootPane. 


    Returns: a new JRootPane 
*javax.swing.JInternalFrame.dispose()*

public void dispose()

Makes this internal frame invisible, unselected, and closed. If the frame is 
not already closed, this method fires an INTERNAL_FRAME_CLOSED event. The 
results of invoking this method are similar to setClosed(true), but dispose 
always succeeds in closing the internal frame and does not fire an 
INTERNAL_FRAME_CLOSING event. 


*javax.swing.JInternalFrame.doDefaultCloseAction()*

public void doDefaultCloseAction()

Fires an INTERNAL_FRAME_CLOSING event and then performs the action specified by 
the internal frame's default close operation. This method is typically invoked 
by the look-and-feel-implemented action handler for the internal frame's close 
button. 


*javax.swing.JInternalFrame.fireInternalFrameEvent(int)*

protected void fireInternalFrameEvent(int id)

Fires an internal frame event. 

    id - the type of the event being fired; one of the following: 

InternalFrameEvent.INTERNAL_FRAME_OPENED 
       InternalFrameEvent.INTERNAL_FRAME_CLOSING 
       InternalFrameEvent.INTERNAL_FRAME_CLOSED 
       InternalFrameEvent.INTERNAL_FRAME_ICONIFIED 
       InternalFrameEvent.INTERNAL_FRAME_DEICONIFIED 
       InternalFrameEvent.INTERNAL_FRAME_ACTIVATED 
       InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED 

If the event type is not one of the above, nothing happens. 

*javax.swing.JInternalFrame.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JInternalFrame. For internal 
frames, the AccessibleContext takes the form of an AccessibleJInternalFrame 
object. A new AccessibleJInternalFrame instance is created if necessary. 


    Returns: an AccessibleJInternalFrame that serves as the AccessibleContext of this 
             JInternalFrame 
*javax.swing.JInternalFrame.getContentPane()*

public |java.awt.Container| getContentPane()

Returns the content pane for this internal frame. 


    Returns: the content pane 
*javax.swing.JInternalFrame.getDefaultCloseOperation()*

public int getDefaultCloseOperation()

Returns the default operation that occurs when the user initiates a "close" on 
this internal frame. 


    Returns: the operation that will occur when the user closes the internal frame 
*javax.swing.JInternalFrame.getDesktopIcon()*

public |javax.swing.JInternalFrame.JDesktopIcon| getDesktopIcon()

Returns the JDesktopIcon used when this JInternalFrame is iconified. 


    Returns: the JDesktopIcon displayed on the desktop 
*javax.swing.JInternalFrame.getDesktopPane()*

public |javax.swing.JDesktopPane| getDesktopPane()

Convenience method that searches the ancestor hierarchy for a JDesktop 
instance. If JInternalFrame finds none, the desktopIcon tree is searched. 


    Returns: the JDesktopPane this internal frame belongs to, or null if none is found 
*javax.swing.JInternalFrame.getFocusCycleRootAncestor()*

public final |java.awt.Container| getFocusCycleRootAncestor()

Always returns null because JInternalFrames must always be roots of a focus 
traversal cycle. 


    Returns: 
*javax.swing.JInternalFrame.getFocusOwner()*

public |java.awt.Component| getFocusOwner()

If this JInternalFrame is active, returns the child that has focus. Otherwise, 
returns null. 


    Returns: the component with focus, or null if no children have focus 
*javax.swing.JInternalFrame.getFrameIcon()*

public |javax.swing.Icon| getFrameIcon()

Returns the image displayed in the title bar of this internal frame (usually in 
the top-left corner). 


    Returns: the Icon displayed in the title bar 
*javax.swing.JInternalFrame.getGlassPane()*

public |java.awt.Component| getGlassPane()

Returns the glass pane for this internal frame. 


    Returns: the glass pane 
*javax.swing.JInternalFrame.getInternalFrameListeners()*

public |javax.swing.event.InternalFrameListener| getInternalFrameListeners()

Returns an array of all the InternalFrameListeners added to this JInternalFrame 
with addInternalFrameListener. 


    Returns: all of the InternalFrameListeners added or an empty array if no listeners have 
             been added 
*javax.swing.JInternalFrame.getJMenuBar()*

public |javax.swing.JMenuBar| getJMenuBar()

Returns the current JMenuBar for this JInternalFrame, or null if no menu bar 
has been set. 


    Returns: the JMenuBar used by this internal frame 
*javax.swing.JInternalFrame.getLayer()*

public int getLayer()

Convenience method for getting the layer attribute of this component. 


    Returns: an Integer object specifying this frame's desktop layer 
*javax.swing.JInternalFrame.getLayeredPane()*

public |javax.swing.JLayeredPane| getLayeredPane()

Returns the layered pane for this internal frame. 


    Returns: a JLayeredPane object 
*javax.swing.JInternalFrame.getMenuBar()*

public |javax.swing.JMenuBar| getMenuBar()

Returns the current JMenuBar for this JInternalFrame, or null if no menu bar 
has been set. 


    Returns: the current menu bar, or null if none has been set 
*javax.swing.JInternalFrame.getMostRecentFocusOwner()*

public |java.awt.Component| getMostRecentFocusOwner()

Returns the child component of this JInternalFrame that will receive the focus 
when this JInternalFrame is selected. If this JInternalFrame is currently 
selected, this method returns the same component as the getFocusOwner method. 
If this JInternalFrame is not selected, then the child component that most 
recently requested focus will be returned. If no child component has ever 
requested focus, then this JInternalFrame's initial focusable component is 
returned. If no such child exists, then this JInternalFrame's default component 
to focus is returned. 


    Returns: the child component that will receive focus when this JInternalFrame is 
             selected 
*javax.swing.JInternalFrame.getNormalBounds()*

public |java.awt.Rectangle| getNormalBounds()

If the JInternalFrame is not in maximized state, returns getBounds(); 
otherwise, returns the bounds that the JInternalFrame would be restored to. 


    Returns: a Rectangle containing the bounds of this frame when in the normal state 
*javax.swing.JInternalFrame.getRootPane()*

public |javax.swing.JRootPane| getRootPane()

Returns the rootPane object for this internal frame. 


    Returns: the rootPane property 
*javax.swing.JInternalFrame.getTitle()*

public |java.lang.String| getTitle()

Returns the title of the JInternalFrame. 


    Returns: a String containing this internal frame's title 
*javax.swing.JInternalFrame.getUI()*

public |javax.swing.plaf.InternalFrameUI| getUI()

Returns the look-and-feel object that renders this component. 


    Returns: the InternalFrameUI object that renders this component 
*javax.swing.JInternalFrame.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the name of the look-and-feel class that renders this component. 


    Returns: the string "InternalFrameUI" 
*javax.swing.JInternalFrame.getWarningString()*

public final |java.lang.String| getWarningString()

Gets the warning string that is displayed with this internal frame. Since an 
internal frame is always secure (since it's fully contained within a window 
that might need a warning string) this method always returns null. 


    Returns: 
*javax.swing.JInternalFrame.hide()*

public void hide()




*javax.swing.JInternalFrame.isClosable()*

public boolean isClosable()

Returns whether this JInternalFrame can be closed by some user action. 


    Returns: true if this internal frame can be closed 
*javax.swing.JInternalFrame.isClosed()*

public boolean isClosed()

Returns whether this JInternalFrame is currently closed. 


    Returns: true if this internal frame is closed, false otherwise 
*javax.swing.JInternalFrame.isFocusCycleRoot()*

public final boolean isFocusCycleRoot()

Always returns true because all JInternalFrames must be roots of a focus 
traversal cycle. 


    Returns: 
*javax.swing.JInternalFrame.isIcon()*

public boolean isIcon()

Returns whether the JInternalFrame is currently iconified. 


    Returns: true if this internal frame is iconified 
*javax.swing.JInternalFrame.isIconifiable()*

public boolean isIconifiable()

Gets the iconable property, which by default is false. 


    Returns: the value of the iconable property. 
*javax.swing.JInternalFrame.isMaximizable()*

public boolean isMaximizable()

Gets the value of the maximizable property. 


    Returns: the value of the maximizable property 
*javax.swing.JInternalFrame.isMaximum()*

public boolean isMaximum()

Returns whether the JInternalFrame is currently maximized. 


    Returns: true if this internal frame is maximized, false otherwise 
*javax.swing.JInternalFrame.isResizable()*

public boolean isResizable()

Returns whether the JInternalFrame can be resized by some user action. 


    Returns: true if this internal frame can be resized, false otherwise 
*javax.swing.JInternalFrame.isRootPaneCheckingEnabled()*

protected boolean isRootPaneCheckingEnabled()

Returns whether calls to add and setLayout are forwarded to the contentPane. 


    Returns: true if add and setLayout are fowarded; false otherwise 
*javax.swing.JInternalFrame.isSelected()*

public boolean isSelected()

Returns whether the JInternalFrame is the currently "selected" or active frame. 


    Returns: true if this internal frame is currently selected (active) 
*javax.swing.JInternalFrame.moveToBack()*

public void moveToBack()

Convenience method that moves this component to position -1 if its parent is a 
JLayeredPane. 


*javax.swing.JInternalFrame.moveToFront()*

public void moveToFront()

Convenience method that moves this component to position 0 if its parent is a 
JLayeredPane. 


*javax.swing.JInternalFrame.pack()*

public void pack()

Causes subcomponents of this JInternalFrame to be laid out at their preferred 
size. Internal frames that are iconized or maximized are first restored and 
then packed. If the internal frame is unable to be restored its state is not 
changed and will not be packed. 


*javax.swing.JInternalFrame.paintComponent(Graphics)*

protected void paintComponent(java.awt.Graphics g)

Overridden to allow optimized painting when the internal frame is being 
dragged. 


*javax.swing.JInternalFrame.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JInternalFrame. This method is intended 
to be used only for debugging purposes, and the content and format of the 
returned string may vary between implementations. The returned string may be 
empty but may not be null. 


    Returns: a string representation of this JInternalFrame 
*javax.swing.JInternalFrame.remove(Component)*

public void remove(java.awt.Component comp)

Removes the specified component from the container. If comp is not a child of 
the JInternalFrame this will forward the call to the contentPane. 

    comp - the component to be removed 

*javax.swing.JInternalFrame.removeInternalFrameListener(InternalFrameListener)*

public void removeInternalFrameListener(javax.swing.event.InternalFrameListener l)

Removes the specified internal frame listener so that it no longer receives 
internal frame events from this internal frame. 

    l - the internal frame listener 

*javax.swing.JInternalFrame.reshape(int,int,int,int)*

public void reshape(
  int x,
  int y,
  int width,
  int height)

Moves and resizes this component. Unlike other components, this implementation 
also forces re-layout, so that frame decorations such as the title bar are 
always redisplayed. 

    x - an integer giving the component's new horizontal position measured in pixels 
       from the left of its container 
    y - an integer giving the component's new vertical position, measured in pixels 
       from the bottom of its container 
    width - an integer giving the component's new width in pixels 
    height - an integer giving the component's new height in pixels 

*javax.swing.JInternalFrame.restoreSubcomponentFocus()*

public void restoreSubcomponentFocus()

Requests the internal frame to restore focus to the last subcomponent that had 
focus. This is used by the UI when the user selected this internal frame -- for 
example, by clicking on the title bar. 


*javax.swing.JInternalFrame.setClosable(boolean)*

public void setClosable(boolean b)

Sets whether this JInternalFrame can be closed by some user action. 

    b - a boolean value, where true means this internal frame can be closed 

*javax.swing.JInternalFrame.setClosed(boolean)*

public void setClosed(boolean b)
  throws |java.beans.PropertyVetoException|
         
Closes this internal frame if the argument is true. Do not invoke this method 
with a false argument; the result of invoking setClosed(false) is unspecified. 



If the internal frame is already closed, this method does nothing and returns 
immediately. Otherwise, this method begins by firing an INTERNAL_FRAME_CLOSING 
event. Then this method sets the closed property to true unless a listener 
vetoes the property change. This method finishes by making the internal frame 
invisible and unselected, and then firing an INTERNAL_FRAME_CLOSED event. 



Note: To reuse an internal frame that has been closed, you must add it to a 
container (even if you never removed it from its previous container). 
Typically, this container will be the JDesktopPane that previously contained 
the internal frame. 

    b - must be true 

*javax.swing.JInternalFrame.setContentPane(Container)*

public void setContentPane(java.awt.Container c)

Sets this JInternalFrame's contentPane property. 

    c - the content pane for this internal frame 

*javax.swing.JInternalFrame.setDefaultCloseOperation(int)*

public void setDefaultCloseOperation(int operation)

Sets the operation that will happen by default when the user initiates a 
"close" on this internal frame. The possible choices are: 

DO_NOTHING_ON_CLOSE Do nothing. This requires the program to handle the 
operation in the windowClosing method of a registered InternalFrameListener 
object. HIDE_ON_CLOSE Automatically make the internal frame invisible. 
DISPOSE_ON_CLOSE Automatically dispose of the internal frame. 

The default value is DISPOSE_ON_CLOSE. Before performing the specified close 
operation, the internal frame fires an INTERNAL_FRAME_CLOSING event. 

    operation - one of the following constants defined in javax.swing.WindowConstants (an 
       interface implemented by JInternalFrame): DO_NOTHING_ON_CLOSE, 
       HIDE_ON_CLOSE, or DISPOSE_ON_CLOSE 

*javax.swing.JInternalFrame.setDesktopIcon(JInternalFrame.JDesktopIcon)*

public void setDesktopIcon(javax.swing.JInternalFrame.JDesktopIcon d)

Sets the JDesktopIcon associated with this JInternalFrame. 

    d - the JDesktopIcon to display on the desktop 

*javax.swing.JInternalFrame.setFocusCycleRoot(boolean)*

public final void setFocusCycleRoot(boolean focusCycleRoot)

Does nothing because JInternalFrames must always be roots of a focus traversal 
cycle. 

    focusCycleRoot - this value is ignored 

*javax.swing.JInternalFrame.setFrameIcon(Icon)*

public void setFrameIcon(javax.swing.Icon icon)

Sets an image to be displayed in the titlebar of this internal frame (usually 
in the top-left corner). This image is not the desktopIcon object, which is the 
image displayed in the JDesktop when this internal frame is iconified. 

Passing null to this function is valid, but the look and feel can choose the 
appropriate behavior for that situation, such as displaying no icon or a 
default icon for the look and feel. 

    icon - the Icon to display in the title bar 

*javax.swing.JInternalFrame.setGlassPane(Component)*

public void setGlassPane(java.awt.Component glass)

Sets this JInternalFrame's glassPane property. 

    glass - the glass pane for this internal frame 

*javax.swing.JInternalFrame.setIcon(boolean)*

public void setIcon(boolean b)
  throws |java.beans.PropertyVetoException|
         
Iconifies or de-iconifies this internal frame, if the look and feel supports 
iconification. If the internal frame's state changes to iconified, this method 
fires an INTERNAL_FRAME_ICONIFIED event. If the state changes to de-iconified, 
an INTERNAL_FRAME_DEICONIFIED event is fired. 

    b - a boolean, where true means to iconify this internal frame and false means to 
       de-iconify it 

*javax.swing.JInternalFrame.setIconifiable(boolean)*

public void setIconifiable(boolean b)

Sets the iconable property, which must be true for the user to be able to make 
the JInternalFrame an icon. Some look and feels might not implement 
iconification; they will ignore this property. 

    b - a boolean, where true means this internal frame can be iconified 

*javax.swing.JInternalFrame.setJMenuBar(JMenuBar)*

public void setJMenuBar(javax.swing.JMenuBar m)

Sets the menuBar property for this JInternalFrame. 

    m - the JMenuBar to use in this internal frame 

*javax.swing.JInternalFrame.setLayer(int)*

public void setLayer(int layer)

Convenience method for setting the layer attribute of this component. The 
method setLayer(Integer) should be used for layer values predefined in 
JLayeredPane. When using setLayer(int), care must be taken not to accidentally 
clash with those values. 

    layer - an integer specifying this internal frame's desktop layer 

*javax.swing.JInternalFrame.setLayer(Integer)*

public void setLayer(java.lang.Integer layer)

Convenience method for setting the layer attribute of this component. 

    layer - an Integer object specifying this frame's desktop layer 

*javax.swing.JInternalFrame.setLayeredPane(JLayeredPane)*

public void setLayeredPane(javax.swing.JLayeredPane layered)

Sets this JInternalFrame's layeredPane property. 

    layered - the JLayeredPane for this internal frame 

*javax.swing.JInternalFrame.setLayout(LayoutManager)*

public void setLayout(java.awt.LayoutManager manager)

Ensures that, by default, the layout of this component cannot be set. 
Overridden to conditionally forward the call to the contentPane. Refer to 
(|javax.swing.RootPaneContainer|) for more information. 

    manager - the LayoutManager 

*javax.swing.JInternalFrame.setMaximizable(boolean)*

public void setMaximizable(boolean b)

Sets the maximizable property, which determines whether the JInternalFrame can 
be maximized by some user action. Some look and feels might not support 
maximizing internal frames; they will ignore this property. 

    b - true to specify that this internal frame should be maximizable; false to 
       specify that it should not be 

*javax.swing.JInternalFrame.setMaximum(boolean)*

public void setMaximum(boolean b)
  throws |java.beans.PropertyVetoException|
         
Maximizes and restores this internal frame. A maximized frame is resized to 
fully fit the JDesktopPane area associated with the JInternalFrame. A restored 
frame's size is set to the JInternalFrame's actual size. 

    b - a boolean, where true maximizes this internal frame and false restores it 

*javax.swing.JInternalFrame.setMenuBar(JMenuBar)*

public void setMenuBar(javax.swing.JMenuBar m)

Sets the menuBar property for this JInternalFrame. 

    m - the JMenuBar to use in this internal frame 

*javax.swing.JInternalFrame.setNormalBounds(Rectangle)*

public void setNormalBounds(java.awt.Rectangle r)

Sets the normal bounds for this internal frame, the bounds that this internal 
frame would be restored to from its maximized state. This method is intended 
for use only by desktop managers. 

    r - the bounds that this internal frame should be restored to 

*javax.swing.JInternalFrame.setResizable(boolean)*

public void setResizable(boolean b)

Sets whether the JInternalFrame can be resized by some user action. 

    b - a boolean, where true means this internal frame can be resized 

*javax.swing.JInternalFrame.setRootPane(JRootPane)*

protected void setRootPane(javax.swing.JRootPane root)

Sets the rootPane property for this JInternalFrame. This method is called by 
the constructor. 

    root - the new JRootPane object 

*javax.swing.JInternalFrame.setRootPaneCheckingEnabled(boolean)*

protected void setRootPaneCheckingEnabled(boolean enabled)

Sets whether calls to add and setLayout are forwarded to the contentPane. 

    enabled - true if add and setLayout are forwarded, false if they should operate directly 
       on the JInternalFrame. 

*javax.swing.JInternalFrame.setSelected(boolean)*

public void setSelected(boolean selected)
  throws |java.beans.PropertyVetoException|
         
Selects or deselects the internal frame if it's showing. A JInternalFrame 
normally draws its title bar differently if it is the selected frame, which 
indicates to the user that this internal frame has the focus. When this method 
changes the state of the internal frame from deselected to selected, it fires 
an InternalFrameEvent.INTERNAL_FRAME_ACTIVATED event. If the change is from 
selected to deselected, an InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED event 
is fired. 

    selected - a boolean, where true means this internal frame should become selected 
       (currently active) and false means it should become deselected 

*javax.swing.JInternalFrame.setTitle(String)*

public void setTitle(java.lang.String title)

Sets the JInternalFrame title. title may have a null value. 

    title - the String to display in the title bar 

*javax.swing.JInternalFrame.setUI(InternalFrameUI)*

public void setUI(javax.swing.plaf.InternalFrameUI ui)

Sets the UI delegate for this JInternalFrame. 

    ui - the UI delegate 

*javax.swing.JInternalFrame.show()*

public void show()

If the internal frame is not visible, brings the internal frame to the front, 
makes it visible, and attempts to select it. The first time the internal frame 
is made visible, this method also fires an INTERNAL_FRAME_OPENED event. This 
method does nothing if the internal frame is already visible. Invoking this 
method has the same result as invoking setVisible(true). 


*javax.swing.JInternalFrame.toBack()*

public void toBack()

Sends this internal frame to the back. Places this internal frame at the bottom 
of the stacking order and makes the corresponding adjustment to other visible 
internal frames. 


*javax.swing.JInternalFrame.toFront()*

public void toFront()

Brings this internal frame to the front. Places this internal frame at the top 
of the stacking order and makes the corresponding adjustment to other visible 
internal frames. 


*javax.swing.JInternalFrame.updateUI()*

public void updateUI()

Notification from the UIManager that the look and feel has changed. Replaces 
the current UI object with the latest version from the UIManager. 




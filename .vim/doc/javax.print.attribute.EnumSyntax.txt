*javax.print.attribute.EnumSyntax* *EnumSyntax* Class EnumSyntax is an abstract 

public abstract class EnumSyntax
  extends    |java.lang.Object|
  implements |java.io.Serializable|
             |java.lang.Cloneable|

|javax.print.attribute.EnumSyntax_Description|
|javax.print.attribute.EnumSyntax_Fields|
|javax.print.attribute.EnumSyntax_Constructors|
|javax.print.attribute.EnumSyntax_Methods|

================================================================================

*javax.print.attribute.EnumSyntax_Constructors*
|javax.print.attribute.EnumSyntax(int)|Construct a new enumeration value with t

*javax.print.attribute.EnumSyntax_Methods*
|javax.print.attribute.EnumSyntax.clone()|Returns a clone of this enumeration v
|javax.print.attribute.EnumSyntax.getEnumValueTable()|Returns the enumeration v
|javax.print.attribute.EnumSyntax.getOffset()|Returns the lowest integer value 
|javax.print.attribute.EnumSyntax.getStringTable()|Returns the string table for
|javax.print.attribute.EnumSyntax.getValue()|Returns this enumeration value's i
|javax.print.attribute.EnumSyntax.hashCode()|Returns a hash code value for this
|javax.print.attribute.EnumSyntax.readResolve()|During object input, convert th
|javax.print.attribute.EnumSyntax.toString()|Returns a string value correspondi

*javax.print.attribute.EnumSyntax_Description*

Class EnumSyntax is an abstract base class providing the common implementation 
of all "type safe enumeration" objects. An enumeration class (which extends 
class EnumSyntax) provides a group of enumeration values (objects) that are 
singleton instances of the enumeration class; for example: 

public class Bach extends EnumSyntax { public static final Bach 
JOHANN_SEBASTIAN = new Bach(0); public static final Bach WILHELM_FRIEDEMANN = 
new Bach(1); public static final Bach CARL_PHILIP_EMMANUEL = new Bach(2); 
public static final Bach JOHANN_CHRISTIAN = new Bach(3); public static final 
Bach P_D_Q = new Bach(4); 

private static final String[] stringTable = { "Johann Sebastian Bach", "Wilhelm 
Friedemann Bach", "Carl Philip Emmanuel Bach", "Johann Christian Bach", "P.D.Q. 
Bach" }; 

protected String[] getStringTable() { return stringTable; } 

private static final Bach[] enumValueTable = { JOHANN_SEBASTIAN, 
WILHELM_FRIEDEMANN, CARL_PHILIP_EMMANUEL, JOHANN_CHRISTIAN, P_D_Q }; 

protected EnumSyntax[] getEnumValueTable() { return enumValueTable; } } 

You can then write code that uses the == and != operators to test enumeration 
values; for example: 

Bach theComposer; . . . if (theComposer == Bach.JOHANN_SEBASTIAN) { 
System.out.println ("The greatest composer of all time!"); } 

The equals() method for an enumeration class just does a test for identical 
objects (==). 

You can convert an enumeration value to a string by calling 
<CODE>toString()</CODE>(|javax.print.attribute.EnumSyntax|) . The string is 
obtained from a table supplied by the enumeration class. 

Under the hood, an enumeration value is just an integer, a different integer 
for each enumeration value within an enumeration class. You can get an 
enumeration value's integer value by calling 
<CODE>getValue()</CODE>(|javax.print.attribute.EnumSyntax|) . An enumeration 
value's integer value is established when it is constructed (see 
<CODE>EnumSyntax(int)</CODE>(|javax.print.attribute.EnumSyntax|) ). Since the 
constructor is protected, the only possible enumeration values are the 
singleton objects declared in the enumeration class; additional enumeration 
values cannot be created at run time. 

You can define a subclass of an enumeration class that extends it with 
additional enumeration values. The subclass's enumeration values' integer 
values need not be distinct from the superclass's enumeration values' integer 
values; the ==, !=, equals(), and toString() methods will still work properly 
even if the subclass uses some of the same integer values as the superclass. 
However, the application in which the enumeration class and subclass are used 
may need to have distinct integer values in the superclass and subclass. 


*javax.print.attribute.EnumSyntax(int)*

protected EnumSyntax(int value)

Construct a new enumeration value with the given integer value. 

    value - Integer value. 

*javax.print.attribute.EnumSyntax.clone()*

public |java.lang.Object| clone()

Returns a clone of this enumeration value, which to preserve the semantics of 
enumeration values is the same object as this enumeration value. 


*javax.print.attribute.EnumSyntax.getEnumValueTable()*

protected |javax.print.attribute.EnumSyntax| getEnumValueTable()

Returns the enumeration value table for this enumeration value's enumeration 
class. The enumeration class's integer values are assumed to lie in the range 
L..L+N-1, where L is the value returned by 
<CODE>getOffset()</CODE>(|javax.print.attribute.EnumSyntax|) and N is the 
length of the enumeration value table. The element in the enumeration value 
table at index i-L is the enumeration value object whose integer value is i; 
the <CODE>readResolve()</CODE>(|javax.print.attribute.EnumSyntax|) method needs 
this to preserve singleton semantics during deserialization of an enumeration 
instance. If an integer within the above range is not used by any enumeration 
value, leave the corresponding table element null. 

The default implementation returns null. If the enumeration class (a subclass 
of class EnumSyntax) does not override this method to return a non-null 
enumeration value table, and the subclass does not override the 
<CODE>readResolve()</CODE>(|javax.print.attribute.EnumSyntax|) method, the base 
class <CODE>readResolve()</CODE>(|javax.print.attribute.EnumSyntax|) method 
will throw an exception whenever an enumeration instance is deserialized from 
an object input stream. 


    Returns: the value table 
*javax.print.attribute.EnumSyntax.getOffset()*

protected int getOffset()

Returns the lowest integer value used by this enumeration value's enumeration 
class. 

The default implementation returns 0. If the enumeration class (a subclass of 
class EnumSyntax) uses integer values starting at other than 0, override this 
method in the subclass. 


    Returns: the offset of the lowest enumeration value. 
*javax.print.attribute.EnumSyntax.getStringTable()*

protected |java.lang.String| getStringTable()

Returns the string table for this enumeration value's enumeration class. The 
enumeration class's integer values are assumed to lie in the range L..L+N-1, 
where L is the value returned by 
<CODE>getOffset()</CODE>(|javax.print.attribute.EnumSyntax|) and N is the 
length of the string table. The element in the string table at index i-L is the 
value returned by <CODE>toString()</CODE>(|javax.print.attribute.EnumSyntax|) 
for the enumeration value whose integer value is i. If an integer within the 
above range is not used by any enumeration value, leave the corresponding table 
element null. 

The default implementation returns null. If the enumeration class (a subclass 
of class EnumSyntax) does not override this method to return a non-null string 
table, and the subclass does not override the 
<CODE>toString()</CODE>(|javax.print.attribute.EnumSyntax|) method, the base 
class <CODE>toString()</CODE>(|javax.print.attribute.EnumSyntax|) method will 
return just a string representation of this enumeration value's integer value. 


    Returns: the string table 
*javax.print.attribute.EnumSyntax.getValue()*

public int getValue()

Returns this enumeration value's integer value. 


    Returns: 
*javax.print.attribute.EnumSyntax.hashCode()*

public int hashCode()

Returns a hash code value for this enumeration value. The hash code is just 
this enumeration value's integer value. 


*javax.print.attribute.EnumSyntax.readResolve()*

protected |java.lang.Object| readResolve()
  throws |java.io.ObjectStreamException|
         
During object input, convert this deserialized enumeration instance to the 
proper enumeration value defined in the enumeration attribute class. 


    Returns: The enumeration singleton value stored at index i-L in the enumeration value 
             table returned by {@link #getEnumValueTable() 
             getEnumValueTable()}, where i is this enumeration value's integer 
             value and L is the value returned by {@link #getOffset() 
             getOffset()}. 
*javax.print.attribute.EnumSyntax.toString()*

public |java.lang.String| toString()

Returns a string value corresponding to this enumeration value. 




*java.io.BufferedWriter* *BufferedWriter* Write text to a character-output strea

public class BufferedWriter
  extends    |java.io.Writer|

|java.io.BufferedWriter_Description|
|java.io.BufferedWriter_Fields|
|java.io.BufferedWriter_Constructors|
|java.io.BufferedWriter_Methods|

================================================================================

*java.io.BufferedWriter_Constructors*
|java.io.BufferedWriter(Writer)|Create a buffered character-output stream that 
|java.io.BufferedWriter(Writer,int)|Create a new buffered character-output stre

*java.io.BufferedWriter_Methods*
|java.io.BufferedWriter.close()|Close the stream.
|java.io.BufferedWriter.flush()|Flush the stream.
|java.io.BufferedWriter.newLine()|Write a line separator.
|java.io.BufferedWriter.write(char[],int,int)|Write a portion of an array of ch
|java.io.BufferedWriter.write(int)|Write a single character.
|java.io.BufferedWriter.write(String,int,int)|Write a portion of a String.

*java.io.BufferedWriter_Description*

Write text to a character-output stream, buffering characters so as to provide 
for the efficient writing of single characters, arrays, and strings. 

The buffer size may be specified, or the default size may be accepted. The 
default is large enough for most purposes. 

A newLine() method is provided, which uses the platform's own notion of line 
separator as defined by the system property line.separator. Not all platforms 
use the newline character ('\n') to terminate lines. Calling this method to 
terminate each output line is therefore preferred to writing a newline 
character directly. 

In general, a Writer sends its output immediately to the underlying character 
or byte stream. Unless prompt output is required, it is advisable to wrap a 
BufferedWriter around any Writer whose write() operations may be costly, such 
as FileWriters and OutputStreamWriters. For example, 



PrintWriter out = new PrintWriter(new BufferedWriter(new 
FileWriter("foo.out"))); 

will buffer the PrintWriter's output to the file. Without buffering, each 
invocation of a print() method would cause characters to be converted into 
bytes that would then be written immediately to the file, which can be very 
inefficient. 


*java.io.BufferedWriter(Writer)*

public BufferedWriter(java.io.Writer out)

Create a buffered character-output stream that uses a default-sized output 
buffer. 

    out - A Writer 

*java.io.BufferedWriter(Writer,int)*

public BufferedWriter(
  java.io.Writer out,
  int sz)

Create a new buffered character-output stream that uses an output buffer of the 
given size. 

    out - A Writer 
    sz - Output-buffer size, a positive integer 

*java.io.BufferedWriter.close()*

public void close()
  throws |java.io.IOException|
         
Close the stream. 


*java.io.BufferedWriter.flush()*

public void flush()
  throws |java.io.IOException|
         
Flush the stream. 


*java.io.BufferedWriter.newLine()*

public void newLine()
  throws |java.io.IOException|
         
Write a line separator. The line separator string is defined by the system 
property line.separator, and is not necessarily a single newline ('\n') 
character. 


*java.io.BufferedWriter.write(char[],int,int)*

public void write(
  char[] cbuf,
  int off,
  int len)
  throws |java.io.IOException|
         
Write a portion of an array of characters. 

Ordinarily this method stores characters from the given array into this 
stream's buffer, flushing the buffer to the underlying stream as needed. If the 
requested length is at least as large as the buffer, however, then this method 
will flush the buffer and write the characters directly to the underlying 
stream. Thus redundant BufferedWriters will not copy data unnecessarily. 

    cbuf - A character array 
    off - Offset from which to start reading characters 
    len - Number of characters to write 

*java.io.BufferedWriter.write(int)*

public void write(int c)
  throws |java.io.IOException|
         
Write a single character. 


*java.io.BufferedWriter.write(String,int,int)*

public void write(
  java.lang.String s,
  int off,
  int len)
  throws |java.io.IOException|
         
Write a portion of a String. 

If the value of the len parameter is negative then no characters are written. 
This is contrary to the specification of this method in the 
superclass(|java.io.Writer|) , which requires that an 
(|java.lang.IndexOutOfBoundsException|) be thrown. 

    s - String to be written 
    off - Offset from which to start reading characters 
    len - Number of characters to be written 



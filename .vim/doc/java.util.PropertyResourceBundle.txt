*java.util.PropertyResourceBundle* *PropertyResourceBundle* PropertyResourceBund

public class PropertyResourceBundle
  extends    |java.util.ResourceBundle|

|java.util.PropertyResourceBundle_Description|
|java.util.PropertyResourceBundle_Fields|
|java.util.PropertyResourceBundle_Constructors|
|java.util.PropertyResourceBundle_Methods|

================================================================================

*java.util.PropertyResourceBundle_Constructors*
|java.util.PropertyResourceBundle(InputStream)|Creates a property resource bund

*java.util.PropertyResourceBundle_Methods*
|java.util.PropertyResourceBundle.getKeys()|Implementation of ResourceBundle.ge
|java.util.PropertyResourceBundle.handleGetObject(String)|

*java.util.PropertyResourceBundle_Description*

PropertyResourceBundle is a concrete subclass of ResourceBundle that manages 
resources for a locale using a set of static strings from a property file. See 
ResourceBundle(|java.util.ResourceBundle|) for more information about resource 
bundles. See Properties(|java.util.Properties|) for more information about 
properties files, in particular the information on character encodings. 

Unlike other types of resource bundle, you don't subclass 
PropertyResourceBundle. Instead, you supply properties files containing the 
resource data. ResourceBundle.getBundle will automatically look for the 
appropriate properties file and create a PropertyResourceBundle that refers to 
it. See ResourceBundle.getBundle(|java.util.ResourceBundle|) for a complete 
description of the search and instantiation strategy. 

The following example shows a member of a resource bundle family with the base 
name "MyResources". The text defines the bundle "MyResources_de", the German 
member of the bundle family. This member is based on PropertyResourceBundle, 
and the text therefore is the content of the file "MyResources_de.properties" 
(a related example shows how you can add bundles to this family that are 
implemented as subclasses of ListResourceBundle). The keys in this example are 
of the form "s1" etc. The actual keys are entirely up to your choice, so long 
as they are the same as the keys you use in your program to retrieve the 
objects from the bundle. Keys are case-sensitive. 



# MessageFormat pattern s1=Die Platte \"{1}\" enthlt {0}. 

# location of {0} in pattern s2=1 

# sample disk name s3=Meine Platte 

# first ChoiceFormat choice s4=keine Dateien 

# second ChoiceFormat choice s5=eine Datei 

# third ChoiceFormat choice s6={0,number} Dateien 

# sample date s7=3. Mrz 1996 




*java.util.PropertyResourceBundle(InputStream)*

public PropertyResourceBundle(java.io.InputStream stream)
  throws |java.io.IOException|
         
Creates a property resource bundle. 

    stream - property file to read from. 

*java.util.PropertyResourceBundle.getKeys()*

public |java.util.Enumeration| getKeys()

Implementation of ResourceBundle.getKeys. 


*java.util.PropertyResourceBundle.handleGetObject(String)*

public |java.lang.Object| handleGetObject(java.lang.String key)






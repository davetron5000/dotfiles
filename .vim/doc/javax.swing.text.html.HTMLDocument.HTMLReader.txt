*javax.swing.text.html.HTMLDocument.HTMLReader* *HTMLDocument.HTMLReader* An HTM

public class HTMLDocument.HTMLReader
  extends    |javax.swing.text.html.HTMLEditorKit.ParserCallback|

|javax.swing.text.html.HTMLDocument.HTMLReader_Description|
|javax.swing.text.html.HTMLDocument.HTMLReader_Fields|
|javax.swing.text.html.HTMLDocument.HTMLReader_Constructors|
|javax.swing.text.html.HTMLDocument.HTMLReader_Methods|

================================================================================

*javax.swing.text.html.HTMLDocument.HTMLReader_Fields*
|javax.swing.text.MutableAttributeSet_javax.swing.text.html.HTMLDocument.HTMLReader.charAttr|
|java.util.Vector_javax.swing.text.html.HTMLDocument.HTMLReader.parseBuffer|

*javax.swing.text.html.HTMLDocument.HTMLReader_Constructors*
|javax.swing.text.html.HTMLDocument.HTMLReader(int)|
|javax.swing.text.html.HTMLDocument.HTMLReader(int,int,int,HTML.Tag)|

*javax.swing.text.html.HTMLDocument.HTMLReader_Methods*
|javax.swing.text.html.HTMLDocument.HTMLReader.addContent(char[],int,int)|Adds 
|javax.swing.text.html.HTMLDocument.HTMLReader.addContent(char[],int,int,boolean)|
|javax.swing.text.html.HTMLDocument.HTMLReader.addSpecialElement(HTML.Tag,MutableAttributeSet)|
|javax.swing.text.html.HTMLDocument.HTMLReader.blockClose(HTML.Tag)|Adds an ins
|javax.swing.text.html.HTMLDocument.HTMLReader.blockOpen(HTML.Tag,MutableAttributeSet)|
|javax.swing.text.html.HTMLDocument.HTMLReader.flush()|The last method called o
|javax.swing.text.html.HTMLDocument.HTMLReader.handleComment(char[],int)|
|javax.swing.text.html.HTMLDocument.HTMLReader.handleEndOfLineString(String)|Th
|javax.swing.text.html.HTMLDocument.HTMLReader.handleEndTag(HTML.Tag,int)|Callb
|javax.swing.text.html.HTMLDocument.HTMLReader.handleSimpleTag(HTML.Tag,MutableAttributeSet,int)|
|javax.swing.text.html.HTMLDocument.HTMLReader.handleStartTag(HTML.Tag,MutableAttributeSet,int)|
|javax.swing.text.html.HTMLDocument.HTMLReader.handleText(char[],int)|Called by
|javax.swing.text.html.HTMLDocument.HTMLReader.popCharacterStyle()|Pops a previ
|javax.swing.text.html.HTMLDocument.HTMLReader.preContent(char[])|Adds the give
|javax.swing.text.html.HTMLDocument.HTMLReader.pushCharacterStyle()|Pushes the 
|javax.swing.text.html.HTMLDocument.HTMLReader.registerTag(HTML.Tag,HTMLDocument.HTMLReader.TagAction)|
|javax.swing.text.html.HTMLDocument.HTMLReader.textAreaContent(char[])|Adds the

*javax.swing.text.html.HTMLDocument.HTMLReader_Description*

An HTML reader to load an HTML document with an HTML element structure. This is 
a set of callbacks from the parser, implemented to create a set of elements 
tagged with attributes. The parse builds up tokens (ElementSpec) that describe 
the element subtree desired, and burst it into the document under the 
protection of a write lock using the insert method on the document outer class. 

The reader can be configured by registering actions (of type 
HTMLDocument.HTMLReader.TagAction) that describe how to handle the action. The 
idea behind the actions provided is that the most natural text editing 
operations can be provided if the element structure boils down to paragraphs 
with runs of some kind of style in them. Some things are more naturally 
specified structurally, so arbitrary structure should be allowed above the 
paragraphs, but will need to be edited with structural actions. The implication 
of this is that some of the HTML elements specified in the stream being parsed 
will be collapsed into attributes, and in some cases paragraphs will be 
synthesized. When HTML elements have been converted to attributes, the 
attribute key will be of type HTML.Tag, and the value will be of type 
AttributeSet so that no information is lost. This enables many of the existing 
actions to work so that the user can type input, hit the return key, backspace, 
delete, etc and have a reasonable result. Selections can be created, and 
attributes applied or removed, etc. With this in mind, the work done by the 
reader can be categorized into the following kinds of tasks: 

Block Build the structure like it's specified in the stream. This produces 
elements that contain other elements. Paragraph Like block except that it's 
expected that the element will be used with a paragraph view so a paragraph 
element won't need to be synthesized. Character Contribute the element as an 
attribute that will start and stop at arbitrary text locations. This will 
ultimately be mixed into a run of text, with all of the currently flattened 
HTML character elements. Special Produce an embedded graphical element. Form 
Produce an element that is like the embedded graphical element, except that it 
also has a component model associated with it. Hidden Create an element that is 
hidden from view when the document is being viewed read-only, and visible when 
the document is being edited. This is useful to keep the model from losing 
information, and used to store things like comments and unrecognized tags. 



Currently, <APPLET>, <PARAM>, <MAP>, <AREA>, <LINK>, <SCRIPT> and <STYLE> are 
unsupported. 

The assignment of the actions described is shown in the following table for the 
tags defined in HTML.Tag. 

TagAction HTML.Tag.A CharacterAction HTML.Tag.ADDRESS CharacterAction 
HTML.Tag.APPLET HiddenAction HTML.Tag.AREA AreaAction HTML.Tag.B 
CharacterAction HTML.Tag.BASE BaseAction HTML.Tag.BASEFONT CharacterAction 
HTML.Tag.BIG CharacterAction HTML.Tag.BLOCKQUOTEBlockAction HTML.Tag.BODY 
BlockAction HTML.Tag.BR SpecialAction HTML.Tag.CAPTION BlockAction 
HTML.Tag.CENTER BlockAction HTML.Tag.CITE CharacterAction HTML.Tag.CODE 
CharacterAction HTML.Tag.DD BlockAction HTML.Tag.DFN CharacterAction 
HTML.Tag.DIR BlockAction HTML.Tag.DIV BlockAction HTML.Tag.DL BlockAction 
HTML.Tag.DT ParagraphAction HTML.Tag.EM CharacterAction HTML.Tag.FONT 
CharacterAction HTML.Tag.FORM As of 1.4 a BlockAction HTML.Tag.FRAME 
SpecialAction HTML.Tag.FRAMESET BlockAction HTML.Tag.H1 ParagraphAction 
HTML.Tag.H2 ParagraphAction HTML.Tag.H3 ParagraphAction HTML.Tag.H4 
ParagraphAction HTML.Tag.H5 ParagraphAction HTML.Tag.H6 ParagraphAction 
HTML.Tag.HEAD HeadAction HTML.Tag.HR SpecialAction HTML.Tag.HTML BlockAction 
HTML.Tag.I CharacterAction HTML.Tag.IMG SpecialAction HTML.Tag.INPUT FormAction 
HTML.Tag.ISINDEX IsndexAction HTML.Tag.KBD CharacterAction HTML.Tag.LI 
BlockAction HTML.Tag.LINK LinkAction HTML.Tag.MAP MapAction HTML.Tag.MENU 
BlockAction HTML.Tag.META MetaAction HTML.Tag.NOFRAMES BlockAction 
HTML.Tag.OBJECT SpecialAction HTML.Tag.OL BlockAction HTML.Tag.OPTION 
FormAction HTML.Tag.P ParagraphAction HTML.Tag.PARAM HiddenAction HTML.Tag.PRE 
PreAction HTML.Tag.SAMP CharacterAction HTML.Tag.SCRIPT HiddenAction 
HTML.Tag.SELECT FormAction HTML.Tag.SMALL CharacterAction HTML.Tag.STRIKE 
CharacterAction HTML.Tag.S CharacterAction HTML.Tag.STRONG CharacterAction 
HTML.Tag.STYLE StyleAction HTML.Tag.SUB CharacterAction HTML.Tag.SUP 
CharacterAction HTML.Tag.TABLE BlockAction HTML.Tag.TD BlockAction 
HTML.Tag.TEXTAREA FormAction HTML.Tag.TH BlockAction HTML.Tag.TITLE TitleAction 
HTML.Tag.TR BlockAction HTML.Tag.TT CharacterAction HTML.Tag.U CharacterAction 
HTML.Tag.UL BlockAction HTML.Tag.VAR CharacterAction 

Once </html> is encountered, the Actions are no longer notified. 


*javax.swing.text.MutableAttributeSet_javax.swing.text.html.HTMLDocument.HTMLReader.charAttr*

An HTML reader to load an HTML document with an HTML element structure. This is 
a set of callbacks from the parser, implemented to create a set of elements 
tagged with attributes. The parse builds up tokens (ElementSpec) that describe 
the element subtree desired, and burst it into the document under the 
protection of a write lock using the insert method on the document outer class. 

The reader can be configured by registering actions (of type 
HTMLDocument.HTMLReader.TagAction) that describe how to handle the action. The 
idea behind the actions provided is that the most natural text editing 
operations can be provided if the element structure boils down to paragraphs 
with runs of some kind of style in them. Some things are more naturally 
specified structurally, so arbitrary structure should be allowed above the 
paragraphs, but will need to be edited with structural actions. The implication 
of this is that some of the HTML elements specified in the stream being parsed 
will be collapsed into attributes, and in some cases paragraphs will be 
synthesized. When HTML elements have been converted to attributes, the 
attribute key will be of type HTML.Tag, and the value will be of type 
AttributeSet so that no information is lost. This enables many of the existing 
actions to work so that the user can type input, hit the return key, backspace, 
delete, etc and have a reasonable result. Selections can be created, and 
attributes applied or removed, etc. With this in mind, the work done by the 
reader can be categorized into the following kinds of tasks: 

Block Build the structure like it's specified in the stream. This produces 
elements that contain other elements. Paragraph Like block except that it's 
expected that the element will be used with a paragraph view so a paragraph 
element won't need to be synthesized. Character Contribute the element as an 
attribute that will start and stop at arbitrary text locations. This will 
ultimately be mixed into a run of text, with all of the currently flattened 
HTML character elements. Special Produce an embedded graphical element. Form 
Produce an element that is like the embedded graphical element, except that it 
also has a component model associated with it. Hidden Create an element that is 
hidden from view when the document is being viewed read-only, and visible when 
the document is being edited. This is useful to keep the model from losing 
information, and used to store things like comments and unrecognized tags. 



Currently, <APPLET>, <PARAM>, <MAP>, <AREA>, <LINK>, <SCRIPT> and <STYLE> are 
unsupported. 

The assignment of the actions described is shown in the following table for the 
tags defined in HTML.Tag. 

TagAction HTML.Tag.A CharacterAction HTML.Tag.ADDRESS CharacterAction 
HTML.Tag.APPLET HiddenAction HTML.Tag.AREA AreaAction HTML.Tag.B 
CharacterAction HTML.Tag.BASE BaseAction HTML.Tag.BASEFONT CharacterAction 
HTML.Tag.BIG CharacterAction HTML.Tag.BLOCKQUOTEBlockAction HTML.Tag.BODY 
BlockAction HTML.Tag.BR SpecialAction HTML.Tag.CAPTION BlockAction 
HTML.Tag.CENTER BlockAction HTML.Tag.CITE CharacterAction HTML.Tag.CODE 
CharacterAction HTML.Tag.DD BlockAction HTML.Tag.DFN CharacterAction 
HTML.Tag.DIR BlockAction HTML.Tag.DIV BlockAction HTML.Tag.DL BlockAction 
HTML.Tag.DT ParagraphAction HTML.Tag.EM CharacterAction HTML.Tag.FONT 
CharacterAction HTML.Tag.FORM As of 1.4 a BlockAction HTML.Tag.FRAME 
SpecialAction HTML.Tag.FRAMESET BlockAction HTML.Tag.H1 ParagraphAction 
HTML.Tag.H2 ParagraphAction HTML.Tag.H3 ParagraphAction HTML.Tag.H4 
ParagraphAction HTML.Tag.H5 ParagraphAction HTML.Tag.H6 ParagraphAction 
HTML.Tag.HEAD HeadAction HTML.Tag.HR SpecialAction HTML.Tag.HTML BlockAction 
HTML.Tag.I CharacterAction HTML.Tag.IMG SpecialAction HTML.Tag.INPUT FormAction 
HTML.Tag.ISINDEX IsndexAction HTML.Tag.KBD CharacterAction HTML.Tag.LI 
BlockAction HTML.Tag.LINK LinkAction HTML.Tag.MAP MapAction HTML.Tag.MENU 
BlockAction HTML.Tag.META MetaAction HTML.Tag.NOFRAMES BlockAction 
HTML.Tag.OBJECT SpecialAction HTML.Tag.OL BlockAction HTML.Tag.OPTION 
FormAction HTML.Tag.P ParagraphAction HTML.Tag.PARAM HiddenAction HTML.Tag.PRE 
PreAction HTML.Tag.SAMP CharacterAction HTML.Tag.SCRIPT HiddenAction 
HTML.Tag.SELECT FormAction HTML.Tag.SMALL CharacterAction HTML.Tag.STRIKE 
CharacterAction HTML.Tag.S CharacterAction HTML.Tag.STRONG CharacterAction 
HTML.Tag.STYLE StyleAction HTML.Tag.SUB CharacterAction HTML.Tag.SUP 
CharacterAction HTML.Tag.TABLE BlockAction HTML.Tag.TD BlockAction 
HTML.Tag.TEXTAREA FormAction HTML.Tag.TH BlockAction HTML.Tag.TITLE TitleAction 
HTML.Tag.TR BlockAction HTML.Tag.TT CharacterAction HTML.Tag.U CharacterAction 
HTML.Tag.UL BlockAction HTML.Tag.VAR CharacterAction 

Once </html> is encountered, the Actions are no longer notified. 


*java.util.Vector_javax.swing.text.html.HTMLDocument.HTMLReader.parseBuffer*

An HTML reader to load an HTML document with an HTML element structure. This is 
a set of callbacks from the parser, implemented to create a set of elements 
tagged with attributes. The parse builds up tokens (ElementSpec) that describe 
the element subtree desired, and burst it into the document under the 
protection of a write lock using the insert method on the document outer class. 

The reader can be configured by registering actions (of type 
HTMLDocument.HTMLReader.TagAction) that describe how to handle the action. The 
idea behind the actions provided is that the most natural text editing 
operations can be provided if the element structure boils down to paragraphs 
with runs of some kind of style in them. Some things are more naturally 
specified structurally, so arbitrary structure should be allowed above the 
paragraphs, but will need to be edited with structural actions. The implication 
of this is that some of the HTML elements specified in the stream being parsed 
will be collapsed into attributes, and in some cases paragraphs will be 
synthesized. When HTML elements have been converted to attributes, the 
attribute key will be of type HTML.Tag, and the value will be of type 
AttributeSet so that no information is lost. This enables many of the existing 
actions to work so that the user can type input, hit the return key, backspace, 
delete, etc and have a reasonable result. Selections can be created, and 
attributes applied or removed, etc. With this in mind, the work done by the 
reader can be categorized into the following kinds of tasks: 

Block Build the structure like it's specified in the stream. This produces 
elements that contain other elements. Paragraph Like block except that it's 
expected that the element will be used with a paragraph view so a paragraph 
element won't need to be synthesized. Character Contribute the element as an 
attribute that will start and stop at arbitrary text locations. This will 
ultimately be mixed into a run of text, with all of the currently flattened 
HTML character elements. Special Produce an embedded graphical element. Form 
Produce an element that is like the embedded graphical element, except that it 
also has a component model associated with it. Hidden Create an element that is 
hidden from view when the document is being viewed read-only, and visible when 
the document is being edited. This is useful to keep the model from losing 
information, and used to store things like comments and unrecognized tags. 



Currently, <APPLET>, <PARAM>, <MAP>, <AREA>, <LINK>, <SCRIPT> and <STYLE> are 
unsupported. 

The assignment of the actions described is shown in the following table for the 
tags defined in HTML.Tag. 

TagAction HTML.Tag.A CharacterAction HTML.Tag.ADDRESS CharacterAction 
HTML.Tag.APPLET HiddenAction HTML.Tag.AREA AreaAction HTML.Tag.B 
CharacterAction HTML.Tag.BASE BaseAction HTML.Tag.BASEFONT CharacterAction 
HTML.Tag.BIG CharacterAction HTML.Tag.BLOCKQUOTEBlockAction HTML.Tag.BODY 
BlockAction HTML.Tag.BR SpecialAction HTML.Tag.CAPTION BlockAction 
HTML.Tag.CENTER BlockAction HTML.Tag.CITE CharacterAction HTML.Tag.CODE 
CharacterAction HTML.Tag.DD BlockAction HTML.Tag.DFN CharacterAction 
HTML.Tag.DIR BlockAction HTML.Tag.DIV BlockAction HTML.Tag.DL BlockAction 
HTML.Tag.DT ParagraphAction HTML.Tag.EM CharacterAction HTML.Tag.FONT 
CharacterAction HTML.Tag.FORM As of 1.4 a BlockAction HTML.Tag.FRAME 
SpecialAction HTML.Tag.FRAMESET BlockAction HTML.Tag.H1 ParagraphAction 
HTML.Tag.H2 ParagraphAction HTML.Tag.H3 ParagraphAction HTML.Tag.H4 
ParagraphAction HTML.Tag.H5 ParagraphAction HTML.Tag.H6 ParagraphAction 
HTML.Tag.HEAD HeadAction HTML.Tag.HR SpecialAction HTML.Tag.HTML BlockAction 
HTML.Tag.I CharacterAction HTML.Tag.IMG SpecialAction HTML.Tag.INPUT FormAction 
HTML.Tag.ISINDEX IsndexAction HTML.Tag.KBD CharacterAction HTML.Tag.LI 
BlockAction HTML.Tag.LINK LinkAction HTML.Tag.MAP MapAction HTML.Tag.MENU 
BlockAction HTML.Tag.META MetaAction HTML.Tag.NOFRAMES BlockAction 
HTML.Tag.OBJECT SpecialAction HTML.Tag.OL BlockAction HTML.Tag.OPTION 
FormAction HTML.Tag.P ParagraphAction HTML.Tag.PARAM HiddenAction HTML.Tag.PRE 
PreAction HTML.Tag.SAMP CharacterAction HTML.Tag.SCRIPT HiddenAction 
HTML.Tag.SELECT FormAction HTML.Tag.SMALL CharacterAction HTML.Tag.STRIKE 
CharacterAction HTML.Tag.S CharacterAction HTML.Tag.STRONG CharacterAction 
HTML.Tag.STYLE StyleAction HTML.Tag.SUB CharacterAction HTML.Tag.SUP 
CharacterAction HTML.Tag.TABLE BlockAction HTML.Tag.TD BlockAction 
HTML.Tag.TEXTAREA FormAction HTML.Tag.TH BlockAction HTML.Tag.TITLE TitleAction 
HTML.Tag.TR BlockAction HTML.Tag.TT CharacterAction HTML.Tag.U CharacterAction 
HTML.Tag.UL BlockAction HTML.Tag.VAR CharacterAction 

Once </html> is encountered, the Actions are no longer notified. 



*javax.swing.text.html.HTMLDocument.HTMLReader(int)*

public HTMLDocument.HTMLReader(int offset)




*javax.swing.text.html.HTMLDocument.HTMLReader(int,int,int,HTML.Tag)*

public HTMLDocument.HTMLReader(
  int offset,
  int popDepth,
  int pushDepth,
  javax.swing.text.html.HTML.Tag insertTag)




*javax.swing.text.html.HTMLDocument.HTMLReader.addContent(char[],int,int)*

protected void addContent(
  char[] data,
  int offs,
  int length)

Adds some text with the current character attributes. 

    embedded - the attributes of an embedded object. 

*javax.swing.text.html.HTMLDocument.HTMLReader.addContent(char[],int,int,boolean)*

protected void addContent(
  char[] data,
  int offs,
  int length,
  boolean generateImpliedPIfNecessary)

Adds some text with the current character attributes. 

    embedded - the attributes of an embedded object. 

*javax.swing.text.html.HTMLDocument.HTMLReader.addSpecialElement(HTML.Tag,MutableAttributeSet)*

protected void addSpecialElement(
  javax.swing.text.html.HTML.Tag t,
  javax.swing.text.MutableAttributeSet a)

Adds content that is basically specified entirely in the attribute set. 


*javax.swing.text.html.HTMLDocument.HTMLReader.blockClose(HTML.Tag)*

protected void blockClose(javax.swing.text.html.HTML.Tag t)

Adds an instruction to the parse buffer to close out a block element of the 
given type. 


*javax.swing.text.html.HTMLDocument.HTMLReader.blockOpen(HTML.Tag,MutableAttributeSet)*

protected void blockOpen(
  javax.swing.text.html.HTML.Tag t,
  javax.swing.text.MutableAttributeSet attr)

Adds an instruction to the parse buffer to create a block element with the 
given attributes. 


*javax.swing.text.html.HTMLDocument.HTMLReader.flush()*

public void flush()
  throws |javax.swing.text.BadLocationException|
         
The last method called on the reader. It allows any pending changes to be 
flushed into the document. Since this is currently loading synchronously, the 
entire set of changes are pushed in at this point. 


*javax.swing.text.html.HTMLDocument.HTMLReader.handleComment(char[],int)*

public void handleComment(
  char[] data,
  int pos)




*javax.swing.text.html.HTMLDocument.HTMLReader.handleEndOfLineString(String)*

public void handleEndOfLineString(java.lang.String eol)

This is invoked after the stream has been parsed, but before flush. eol will be 
one of \n, \r or \r\n, which ever is encountered the most in parsing the 
stream. 


*javax.swing.text.html.HTMLDocument.HTMLReader.handleEndTag(HTML.Tag,int)*

public void handleEndTag(
  javax.swing.text.html.HTML.Tag t,
  int pos)

Callback from the parser. Route to the appropriate handler for the tag. 


*javax.swing.text.html.HTMLDocument.HTMLReader.handleSimpleTag(HTML.Tag,MutableAttributeSet,int)*

public void handleSimpleTag(
  javax.swing.text.html.HTML.Tag t,
  javax.swing.text.MutableAttributeSet a,
  int pos)

Callback from the parser. Route to the appropriate handler for the tag. 


*javax.swing.text.html.HTMLDocument.HTMLReader.handleStartTag(HTML.Tag,MutableAttributeSet,int)*

public void handleStartTag(
  javax.swing.text.html.HTML.Tag t,
  javax.swing.text.MutableAttributeSet a,
  int pos)

Callback from the parser. Route to the appropriate handler for the tag. 


*javax.swing.text.html.HTMLDocument.HTMLReader.handleText(char[],int)*

public void handleText(
  char[] data,
  int pos)

Called by the parser to indicate a block of text was encountered. 


*javax.swing.text.html.HTMLDocument.HTMLReader.popCharacterStyle()*

protected void popCharacterStyle()

Pops a previously pushed character style off the stack to return to a previous 
style. 


*javax.swing.text.html.HTMLDocument.HTMLReader.preContent(char[])*

protected void preContent(char[] data)

Adds the given content that was encountered in a PRE element. This synthesizes 
lines to hold the runs of text, and makes calls to addContent to actually add 
the text. 


*javax.swing.text.html.HTMLDocument.HTMLReader.pushCharacterStyle()*

protected void pushCharacterStyle()

Pushes the current character style on a stack in preparation for forming a new 
nested character style. 


*javax.swing.text.html.HTMLDocument.HTMLReader.registerTag(HTML.Tag,HTMLDocument.HTMLReader.TagAction)*

protected void registerTag(
  javax.swing.text.html.HTML.Tag t,
  javax.swing.text.html.HTMLDocument.HTMLReader.TagAction a)

Registers a handler for the given tag. By default all of the well-known tags 
will have been registered. This can be used to change the handling of a 
particular tag or to add support for custom tags. 


*javax.swing.text.html.HTMLDocument.HTMLReader.textAreaContent(char[])*

protected void textAreaContent(char[] data)

Adds the given content to the textarea document. This method gets called when 
we are in a textarea context. Therefore all text that is seen belongs to the 
text area and is hence added to the TextAreaDocument associated with the text 
area. 




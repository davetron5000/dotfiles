*org.xml.sax.ContentHandler* *ContentHandler* Receive notification of the logica

public interface interface ContentHandler


|org.xml.sax.ContentHandler_Description|
|org.xml.sax.ContentHandler_Fields|
|org.xml.sax.ContentHandler_Constructors|
|org.xml.sax.ContentHandler_Methods|

================================================================================

*org.xml.sax.ContentHandler_Methods*
|org.xml.sax.ContentHandler.characters(char[],int,int)|Receive notification of 
|org.xml.sax.ContentHandler.endDocument()|Receive notification of the end of a 
|org.xml.sax.ContentHandler.endElement(String,String,String)|Receive notificati
|org.xml.sax.ContentHandler.endPrefixMapping(String)|End the scope of a prefix-
|org.xml.sax.ContentHandler.ignorableWhitespace(char[],int,int)|Receive notific
|org.xml.sax.ContentHandler.processingInstruction(String,String)|Receive notifi
|org.xml.sax.ContentHandler.setDocumentLocator(Locator)|Receive an object for l
|org.xml.sax.ContentHandler.skippedEntity(String)|Receive notification of a ski
|org.xml.sax.ContentHandler.startDocument()|Receive notification of the beginni
|org.xml.sax.ContentHandler.startElement(String,String,String,Attributes)|Recei
|org.xml.sax.ContentHandler.startPrefixMapping(String,String)|Begin the scope o

*org.xml.sax.ContentHandler_Description*

Receive notification of the logical content of a document. 

This module, both source code and documentation, is in the Public Domain, and 
comes with NO WARRANTY. See http://www.saxproject.org for further information. 

This is the main interface that most SAX applications implement: if the 
application needs to be informed of basic parsing events, it implements this 
interface and registers an instance with the SAX parser using the 
setContentHandler(|org.xml.sax.XMLReader|) method. The parser uses the instance 
to report basic document-related events like the start and end of elements and 
character data. 

The order of events in this interface is very important, and mirrors the order 
of information in the document itself. For example, all of an element's content 
(character data, processing instructions, and/or subelements) will appear, in 
order, between the startElement event and the corresponding endElement event. 

This interface is similar to the now-deprecated SAX 1.0 DocumentHandler 
interface, but it adds support for Namespaces and for reporting skipped 
entities (in non-validating XML processors). 

Implementors should note that there is also a ContentHandler class in the 
java.net package; that means that it's probably a bad idea to do 

import java.net.*; import org.xml.sax.*; 

In fact, "import ...*" is usually a sign of sloppy programming anyway, so the 
user should consider this a feature rather than a bug. 


*org.xml.sax.ContentHandler.characters(char[],int,int)*

public void characters(
  char[] ch,
  int start,
  int length)
  throws |org.xml.sax.SAXException|
         
Receive notification of character data. 

The Parser will call this method to report each chunk of character data. SAX 
parsers may return all contiguous character data in a single chunk, or they may 
split it into several chunks; however, all of the characters in any single 
event must come from the same external entity so that the Locator provides 
useful information. 

The application must not attempt to read from the array outside of the 
specified range. 

Individual characters may consist of more than one Java char value. There are 
two important cases where this happens, because characters can't be represented 
in just sixteen bits. In one case, characters are represented in a Surrogate 
Pair, using two special Unicode values. Such characters are in the so-called 
"Astral Planes", with a code point above U+FFFF. A second case involves 
composite characters, such as a base character combining with one or more 
accent characters. 

Your code should not assume that algorithms using char-at-a-time idioms will be 
working in character units; in some cases they will split characters. This is 
relevant wherever XML permits arbitrary characters, such as attribute values, 
processing instruction data, and comments as well as in data reported from this 
method. It's also generally relevant whenever Java code manipulates 
internationalized text; the issue isn't unique to XML. 

Note that some parsers will report whitespace in element content using the 
ignorableWhitespace(|org.xml.sax.ContentHandler|) method rather than this one 
(validating parsers must do so). 

    ch - the characters from the XML document 
    start - the start position in the array 
    length - the number of characters to read from the array 

*org.xml.sax.ContentHandler.endDocument()*

public void endDocument()
  throws |org.xml.sax.SAXException|
         
Receive notification of the end of a document. 

There is an apparent contradiction between the documentation for this method 
and the documentation for (|org.xml.sax.ErrorHandler|) . Until this ambiguity 
is resolved in a future major release, clients should make no assumptions about 
whether endDocument() will or will not be invoked when the parser has reported 
a fatalError() or thrown an exception. 

The SAX parser will invoke this method only once, and it will be the last 
method invoked during the parse. The parser shall not invoke this method until 
it has either abandoned parsing (because of an unrecoverable error) or reached 
the end of input. 


*org.xml.sax.ContentHandler.endElement(String,String,String)*

public void endElement(
  java.lang.String uri,
  java.lang.String localName,
  java.lang.String qName)
  throws |org.xml.sax.SAXException|
         
Receive notification of the end of an element. 

The SAX parser will invoke this method at the end of every element in the XML 
document; there will be a corresponding 
startElement(|org.xml.sax.ContentHandler|) event for every endElement event 
(even when the element is empty). 

For information on the names, see startElement. 

    uri - the Namespace URI, or the empty string if the element has no Namespace URI or 
       if Namespace processing is not being performed 
    localName - the local name (without prefix), or the empty string if Namespace processing is 
       not being performed 
    qName - the qualified XML name (with prefix), or the empty string if qualified names 
       are not available 

*org.xml.sax.ContentHandler.endPrefixMapping(String)*

public void endPrefixMapping(java.lang.String prefix)
  throws |org.xml.sax.SAXException|
         
End the scope of a prefix-URI mapping. 

See startPrefixMapping(|org.xml.sax.ContentHandler|) for details. These events 
will always occur immediately after the corresponding 
endElement(|org.xml.sax.ContentHandler|) event, but the order of 
endPrefixMapping(|org.xml.sax.ContentHandler|) events is not otherwise 
guaranteed. 

    prefix - the prefix that was being mapped. This is the empty string when a default 
       mapping scope ends. 

*org.xml.sax.ContentHandler.ignorableWhitespace(char[],int,int)*

public void ignorableWhitespace(
  char[] ch,
  int start,
  int length)
  throws |org.xml.sax.SAXException|
         
Receive notification of ignorable whitespace in element content. 

Validating Parsers must use this method to report each chunk of whitespace in 
element content (see the W3C XML 1.0 recommendation, section 2.10): 
non-validating parsers may also use this method if they are capable of parsing 
and using content models. 

SAX parsers may return all contiguous whitespace in a single chunk, or they may 
split it into several chunks; however, all of the characters in any single 
event must come from the same external entity, so that the Locator provides 
useful information. 

The application must not attempt to read from the array outside of the 
specified range. 

    ch - the characters from the XML document 
    start - the start position in the array 
    length - the number of characters to read from the array 

*org.xml.sax.ContentHandler.processingInstruction(String,String)*

public void processingInstruction(
  java.lang.String target,
  java.lang.String data)
  throws |org.xml.sax.SAXException|
         
Receive notification of a processing instruction. 

The Parser will invoke this method once for each processing instruction found: 
note that processing instructions may occur before or after the main document 
element. 

A SAX parser must never report an XML declaration (XML 1.0, section 2.8) or a 
text declaration (XML 1.0, section 4.3.1) using this method. 

Like characters()(|org.xml.sax.ContentHandler|) , processing instruction data 
may have characters that need more than one char value. 

    target - the processing instruction target 
    data - the processing instruction data, or null if none was supplied. The data does 
       not include any whitespace separating it from the target 

*org.xml.sax.ContentHandler.setDocumentLocator(Locator)*

public void setDocumentLocator(org.xml.sax.Locator locator)

Receive an object for locating the origin of SAX document events. 

SAX parsers are strongly encouraged (though not absolutely required) to supply 
a locator: if it does so, it must supply the locator to the application by 
invoking this method before invoking any of the other methods in the 
ContentHandler interface. 

The locator allows the application to determine the end position of any 
document-related event, even if the parser is not reporting an error. 
Typically, the application will use this information for reporting its own 
errors (such as character content that does not match an application's business 
rules). The information returned by the locator is probably not sufficient for 
use with a search engine. 

Note that the locator will return correct information only during the 
invocation SAX event callbacks after 
startDocument(|org.xml.sax.ContentHandler|) returns and before 
endDocument(|org.xml.sax.ContentHandler|) is called. The application should not 
attempt to use it at any other time. 

    locator - an object that can return the location of any SAX document event 

*org.xml.sax.ContentHandler.skippedEntity(String)*

public void skippedEntity(java.lang.String name)
  throws |org.xml.sax.SAXException|
         
Receive notification of a skipped entity. This is not called for entity 
references within markup constructs such as element start tags or markup 
declarations. (The XML recommendation requires reporting skipped external 
entities. SAX also reports internal entity expansion/non-expansion, except 
within markup constructs.) 

The Parser will invoke this method each time the entity is skipped. 
Non-validating processors may skip entities if they have not seen the 
declarations (because, for example, the entity was declared in an external DTD 
subset). All processors may skip external entities, depending on the values of 
the http://xml.org/sax/features/external-general-entities and the 
http://xml.org/sax/features/external-parameter-entities properties. 

    name - the name of the skipped entity. If it is a parameter entity, the name will 
       begin with '%', and if it is the external DTD subset, it will be the 
       string "[dtd]" 

*org.xml.sax.ContentHandler.startDocument()*

public void startDocument()
  throws |org.xml.sax.SAXException|
         
Receive notification of the beginning of a document. 

The SAX parser will invoke this method only once, before any other event 
callbacks (except for setDocumentLocator(|org.xml.sax.ContentHandler|) ). 


*org.xml.sax.ContentHandler.startElement(String,String,String,Attributes)*

public void startElement(
  java.lang.String uri,
  java.lang.String localName,
  java.lang.String qName,
  org.xml.sax.Attributes atts)
  throws |org.xml.sax.SAXException|
         
Receive notification of the beginning of an element. 

The Parser will invoke this method at the beginning of every element in the XML 
document; there will be a corresponding 
endElement(|org.xml.sax.ContentHandler|) event for every startElement event 
(even when the element is empty). All of the element's content will be 
reported, in order, before the corresponding endElement event. 

This event allows up to three name components for each element: 

the Namespace URI; the local name; and the qualified (prefixed) name. 

Any or all of these may be provided, depending on the values of the 
http://xml.org/sax/features/namespaces and the 
http://xml.org/sax/features/namespace-prefixes properties: 

the Namespace URI and local name are required when the namespaces property is 
true (the default), and are optional when the namespaces property is false (if 
one is specified, both must be); the qualified name is required when the 
namespace-prefixes property is true, and is optional when the 
namespace-prefixes property is false (the default). 

Note that the attribute list provided will contain only attributes with 
explicit values (specified or defaulted): #IMPLIED attributes will be omitted. 
The attribute list will contain attributes used for Namespace declarations 
(xmlns* attributes) only if the http://xml.org/sax/features/namespace-prefixes 
property is true (it is false by default, and support for a true value is 
optional). 

Like characters()(|org.xml.sax.ContentHandler|) , attribute values may have 
characters that need more than one char value. 

    uri - the Namespace URI, or the empty string if the element has no Namespace URI or 
       if Namespace processing is not being performed 
    localName - the local name (without prefix), or the empty string if Namespace processing is 
       not being performed 
    qName - the qualified name (with prefix), or the empty string if qualified names are 
       not available 
    atts - the attributes attached to the element. If there are no attributes, it shall be 
       an empty Attributes object. The value of this object after startElement 
       returns is undefined 

*org.xml.sax.ContentHandler.startPrefixMapping(String,String)*

public void startPrefixMapping(
  java.lang.String prefix,
  java.lang.String uri)
  throws |org.xml.sax.SAXException|
         
Begin the scope of a prefix-URI Namespace mapping. 

The information from this event is not necessary for normal Namespace 
processing: the SAX XML reader will automatically replace prefixes for element 
and attribute names when the http://xml.org/sax/features/namespaces feature is 
true (the default). 

There are cases, however, when applications need to use prefixes in character 
data or in attribute values, where they cannot safely be expanded 
automatically; the start/endPrefixMapping event supplies the information to the 
application to expand prefixes in those contexts itself, if necessary. 

Note that start/endPrefixMapping events are not guaranteed to be properly 
nested relative to each other: all startPrefixMapping events will occur 
immediately before the corresponding startElement(|org.xml.sax.ContentHandler|) 
event, and all endPrefixMapping(|org.xml.sax.ContentHandler|) events will occur 
immediately after the corresponding endElement(|org.xml.sax.ContentHandler|) 
event, but their order is not otherwise guaranteed. 

There should never be start/endPrefixMapping events for the "xml" prefix, since 
it is predeclared and immutable. 

    prefix - the Namespace prefix being declared. An empty string is used for the default 
       element namespace, which has no prefix. 
    uri - the Namespace URI the prefix is mapped to 



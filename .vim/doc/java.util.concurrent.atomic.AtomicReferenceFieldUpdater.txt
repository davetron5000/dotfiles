*java.util.concurrent.atomic.AtomicReferenceFieldUpdater* *AtomicReferenceFieldUpdater* 

public abstract class AtomicReferenceFieldUpdater
  extends    |java.lang.Object|

|java.util.concurrent.atomic.AtomicReferenceFieldUpdater_Description|
|java.util.concurrent.atomic.AtomicReferenceFieldUpdater_Fields|
|java.util.concurrent.atomic.AtomicReferenceFieldUpdater_Constructors|
|java.util.concurrent.atomic.AtomicReferenceFieldUpdater_Methods|

================================================================================

*java.util.concurrent.atomic.AtomicReferenceFieldUpdater_Constructors*
|java.util.concurrent.atomic.AtomicReferenceFieldUpdater()|Protected do-nothing

*java.util.concurrent.atomic.AtomicReferenceFieldUpdater_Methods*
|java.util.concurrent.atomic.AtomicReferenceFieldUpdater.compareAndSet(T,V,V)|A
|java.util.concurrent.atomic.AtomicReferenceFieldUpdater.get(T)|Get the current
|java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndSet(T,V)|Set to 
|java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(Class,Class,String)|
|java.util.concurrent.atomic.AtomicReferenceFieldUpdater.set(T,V)|Set the field
|java.util.concurrent.atomic.AtomicReferenceFieldUpdater.weakCompareAndSet(T,V,V)|

*java.util.concurrent.atomic.AtomicReferenceFieldUpdater_Description*

A reflection-based utility that enables atomic updates to designated volatile 
reference fields of designated classes. This class is designed for use in 
atomic data structures in which several reference fields of the same node are 
independently subject to atomic updates. For example, a tree node might be 
declared as 



class Node { private volatile Node left, right; 

private static final AtomicReferenceFieldUpdater<Node, Node> leftUpdater = 
AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, "left"); private 
static AtomicReferenceFieldUpdater<Node, Node> rightUpdater = 
AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, "right"); 

Node getLeft() { return left; } boolean compareAndSetLeft(Node expect, Node 
update) { return leftUpdater.compareAndSet(this, expect, update); } // ... and 
so on } 

Note that the guarantees of the compareAndSet method in this class are weaker 
than in other atomic classes. Because this class cannot ensure that all uses of 
the field are appropriate for purposes of atomic access, it can guarantee 
atomicity and volatile semantics only with respect to other invocations of 
compareAndSet and set. 


*java.util.concurrent.atomic.AtomicReferenceFieldUpdater()*

protected AtomicReferenceFieldUpdater()

Protected do-nothing constructor for use by subclasses. 


*java.util.concurrent.atomic.AtomicReferenceFieldUpdater.compareAndSet(T,V,V)*

public abstract boolean compareAndSet(
  java.lang.Object obj,
  java.lang.Object expect,
  java.lang.Object update)

Atomically set the value of the field of the given object managed by this 
Updater to the given updated value if the current value == the expected value. 
This method is guaranteed to be atomic with respect to other calls to 
compareAndSet and set, but not necessarily with respect to other changes in the 
field. 

    obj - An object whose field to conditionally set 
    expect - the expected value 
    update - the new value 

    Returns: true if successful. 
*java.util.concurrent.atomic.AtomicReferenceFieldUpdater.get(T)*

public abstract |java.lang.Object| get(java.lang.Object obj)

Get the current value held in the field by the given object. 

    obj - An object whose field to get 

    Returns: the current value 
*java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndSet(T,V)*

public |java.lang.Object| getAndSet(
  java.lang.Object obj,
  java.lang.Object newValue)

Set to the given value and return the old value. 

    obj - An object whose field to get and set 
    newValue - the new value 

    Returns: the previous value 
*java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(Class,Class,String)*

public static |java.util.concurrent.atomic.AtomicReferenceFieldUpdater| newUpdater(
  java.lang.Class tclass,
  java.lang.Class vclass,
  java.lang.String fieldName)

Creates an updater for objects with the given field. The Class arguments are 
needed to check that reflective types and generic types match. 

    tclass - the class of the objects holding the field. 
    vclass - the class of the field 
    fieldName - the name of the field to be updated. 

    Returns: 
*java.util.concurrent.atomic.AtomicReferenceFieldUpdater.set(T,V)*

public abstract void set(
  java.lang.Object obj,
  java.lang.Object newValue)

Set the field of the given object managed by this updater. This operation is 
guaranteed to act as a volatile store with respect to subsequent invocations of 
compareAndSet. 

    obj - An object whose field to set 
    newValue - the new value 

*java.util.concurrent.atomic.AtomicReferenceFieldUpdater.weakCompareAndSet(T,V,V)*

public abstract boolean weakCompareAndSet(
  java.lang.Object obj,
  java.lang.Object expect,
  java.lang.Object update)

Atomically set the value of the field of the given object managed by this 
Updater to the given updated value if the current value == the expected value. 
This method is guaranteed to be atomic with respect to other calls to 
compareAndSet and set, but not necessarily with respect to other changes in the 
field, and may fail spuriously. 

    obj - An object whose field to conditionally set 
    expect - the expected value 
    update - the new value 

    Returns: true if successful. 


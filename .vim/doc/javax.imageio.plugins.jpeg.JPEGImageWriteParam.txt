*javax.imageio.plugins.jpeg.JPEGImageWriteParam* *JPEGImageWriteParam* This clas

public class JPEGImageWriteParam
  extends    |javax.imageio.ImageWriteParam|

|javax.imageio.plugins.jpeg.JPEGImageWriteParam_Description|
|javax.imageio.plugins.jpeg.JPEGImageWriteParam_Fields|
|javax.imageio.plugins.jpeg.JPEGImageWriteParam_Constructors|
|javax.imageio.plugins.jpeg.JPEGImageWriteParam_Methods|

================================================================================

*javax.imageio.plugins.jpeg.JPEGImageWriteParam_Constructors*
|javax.imageio.plugins.jpeg.JPEGImageWriteParam(Locale)|Constructs a JPEGImageW

*javax.imageio.plugins.jpeg.JPEGImageWriteParam_Methods*
|javax.imageio.plugins.jpeg.JPEGImageWriteParam.areTablesSet()|Returns true if 
|javax.imageio.plugins.jpeg.JPEGImageWriteParam.getACHuffmanTables()|Returns a 
|javax.imageio.plugins.jpeg.JPEGImageWriteParam.getCompressionQualityDescriptions()|
|javax.imageio.plugins.jpeg.JPEGImageWriteParam.getCompressionQualityValues()|
|javax.imageio.plugins.jpeg.JPEGImageWriteParam.getDCHuffmanTables()|Returns a 
|javax.imageio.plugins.jpeg.JPEGImageWriteParam.getOptimizeHuffmanTables()|Retu
|javax.imageio.plugins.jpeg.JPEGImageWriteParam.getQTables()|Returns a copy of 
|javax.imageio.plugins.jpeg.JPEGImageWriteParam.isCompressionLossless()|Returns
|javax.imageio.plugins.jpeg.JPEGImageWriteParam.setEncodeTables(JPEGQTable[],JPEGHuffmanTable[],JPEGHuffmanTable[])|
|javax.imageio.plugins.jpeg.JPEGImageWriteParam.setOptimizeHuffmanTables(boolean)|
|javax.imageio.plugins.jpeg.JPEGImageWriteParam.unsetCompression()|Removes any 
|javax.imageio.plugins.jpeg.JPEGImageWriteParam.unsetEncodeTables()|Removes any

*javax.imageio.plugins.jpeg.JPEGImageWriteParam_Description*

This class adds the ability to set JPEG quantization and Huffman tables when 
using the built-in JPEG writer plug-in, and to request that optimized Huffman 
tables be computed for an image. An instance of this class will be returned 
from the getDefaultImageWriteParam methods of the built-in JPEG ImageWriter. 

The principal purpose of these additions is to allow the specification of 
tables to use in encoding abbreviated streams. The built-in JPEG writer will 
also accept an ordinary ImageWriteParam, in which case the writer will 
construct the necessary tables internally. 

In either case, the quality setting in an ImageWriteParam has the same meaning 
as for the underlying library: 1.00 means a quantization table of all 1's, 0.75 
means the "standard", visually lossless quantization table, and 0.00 means 
aquantization table of all 255's. 

While tables for abbreviated streams are often specified by first writing an 
abbreviated stream containing only the tables, in some applications the tables 
are fixed ahead of time. This class allows the tables to be specified directly 
from client code. 

Normally, the tables are specified in the IIOMetadata objects passed in to the 
writer, and any tables included in these objects are written to the stream. If 
no tables are specified in the metadata, then an abbreviated stream is written. 
If no tables are included in the metadata and no tables are specified in a 
JPEGImageWriteParam, then an abbreviated stream is encoded using the "standard" 
visually lossless tables. This class is necessary for specifying tables when an 
abbreviated stream must be written without writing any tables to a stream 
first. In order to use this class, the metadata object passed into the writer 
must contain no tables, and no stream metadata must be provided. See 
<code>JPEGQTable</code>(|javax.imageio.plugins.jpeg.JPEGQTable|) and 
<code>JPEGHuffmanTable</code>(|javax.imageio.plugins.jpeg.JPEGHuffmanTable|) 
for more information on the default tables. 

The default JPEGImageWriteParam returned by the getDefaultWriteParam method of 
the writer contains no tables. Default tables are included in the default 
IIOMetadata objects returned by the writer. 

If the metadata does contain tables, the tables given in a JPEGImageWriteParam 
are ignored. Furthermore, once a set of tables has been written, only tables in 
the metadata can override them for subsequent writes, whether to the same 
stream or a different one. In order to specify new tables using this class, the 
<code>reset</code>(|javax.imageio.ImageWriter|) method of the writer must be 
called. 

For more information about the operation of the built-in JPEG plug-ins, see the 
JPEG metadata format specification and usage notes. 


*javax.imageio.plugins.jpeg.JPEGImageWriteParam(Locale)*

public JPEGImageWriteParam(java.util.Locale locale)

Constructs a JPEGImageWriteParam. Tiling is not supported. Progressive encoding 
is supported. The default progressive mode is MODE_DISABLED. A single form of 
compression, named "JPEG", is supported. The default compression quality is 
0.75. 

    locale - a Locale to be used by the superclass to localize compression type names and 
       quality descriptions, or null. 

*javax.imageio.plugins.jpeg.JPEGImageWriteParam.areTablesSet()*

public boolean areTablesSet()

Returns true if tables are currently set. 


    Returns: true if tables are present. 
*javax.imageio.plugins.jpeg.JPEGImageWriteParam.getACHuffmanTables()*

public |javax.imageio.plugins.jpeg.JPEGHuffmanTable| getACHuffmanTables()

Returns a copy of the array of AC Huffman tables set on the most recent call to 
setEncodeTables, or null if tables are not currently set. 


    Returns: an array of JPEGHuffmanTable objects, or null. 
*javax.imageio.plugins.jpeg.JPEGImageWriteParam.getCompressionQualityDescriptions()*

public |java.lang.String| getCompressionQualityDescriptions()




*javax.imageio.plugins.jpeg.JPEGImageWriteParam.getCompressionQualityValues()*

public float getCompressionQualityValues()




*javax.imageio.plugins.jpeg.JPEGImageWriteParam.getDCHuffmanTables()*

public |javax.imageio.plugins.jpeg.JPEGHuffmanTable| getDCHuffmanTables()

Returns a copy of the array of DC Huffman tables set on the most recent call to 
setEncodeTables, or null if tables are not currently set. 


    Returns: an array of JPEGHuffmanTable objects, or null. 
*javax.imageio.plugins.jpeg.JPEGImageWriteParam.getOptimizeHuffmanTables()*

public boolean getOptimizeHuffmanTables()

Returns the value passed into the most recent call to setOptimizeHuffmanTables, 
or false if setOptimizeHuffmanTables has never been called. 


    Returns: true if the writer will generate optimized Huffman tables. 
*javax.imageio.plugins.jpeg.JPEGImageWriteParam.getQTables()*

public |javax.imageio.plugins.jpeg.JPEGQTable| getQTables()

Returns a copy of the array of quantization tables set on the most recent call 
to setEncodeTables, or null if tables are not currently set. 


    Returns: an array of JPEGQTable objects, or null. 
*javax.imageio.plugins.jpeg.JPEGImageWriteParam.isCompressionLossless()*

public boolean isCompressionLossless()

Returns false since the JPEG plug-in only supports lossy compression. 


    Returns: 
*javax.imageio.plugins.jpeg.JPEGImageWriteParam.setEncodeTables(JPEGQTable[],JPEGHuffmanTable[],JPEGHuffmanTable[])*

public void setEncodeTables(
  javax.imageio.plugins.jpeg.JPEGQTable[] qTables,
  javax.imageio.plugins.jpeg.JPEGHuffmanTable[] DCHuffmanTables,
  javax.imageio.plugins.jpeg.JPEGHuffmanTable[] ACHuffmanTables)

Sets the quantization and Huffman tables to use in encoding abbreviated 
streams. There may be a maximum of 4 tables of each type. These tables are 
ignored if tables are specified in the metadata. All arguments must be 
non-null. The two arrays of Huffman tables must have the same number of 
elements. The table specifiers in the frame and scan headers in the metadata 
are assumed to be equivalent to indices into these arrays. The argument arrays 
are copied by this method. 

    qTables - An array of quantization table objects. 
    DCHuffmanTables - An array of Huffman table objects. 
    ACHuffmanTables - An array of Huffman table objects. 

*javax.imageio.plugins.jpeg.JPEGImageWriteParam.setOptimizeHuffmanTables(boolean)*

public void setOptimizeHuffmanTables(boolean optimize)

Tells the writer to generate optimized Huffman tables for the image as part of 
the writing process. The default is false. If this flag is set to true, it 
overrides any tables specified in the metadata. Note that this means that any 
image written with this flag set to true will always contain Huffman tables. 

    optimize - A boolean indicating whether to generate optimized Huffman tables when writing. 

*javax.imageio.plugins.jpeg.JPEGImageWriteParam.unsetCompression()*

public void unsetCompression()

Removes any previous compression quality setting. 

The default implementation resets the compression quality to 0.75F. 


*javax.imageio.plugins.jpeg.JPEGImageWriteParam.unsetEncodeTables()*

public void unsetEncodeTables()

Removes any quantization and Huffman tables that are currently set. 




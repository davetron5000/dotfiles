*javax.management.ObjectName* *ObjectName* Represents the object name of an MBea

public class ObjectName
  extends    |java.lang.Object|
  implements |javax.management.QueryExp|
             |java.io.Serializable|

|javax.management.ObjectName_Description|
|javax.management.ObjectName_Fields|
|javax.management.ObjectName_Constructors|
|javax.management.ObjectName_Methods|

================================================================================

*javax.management.ObjectName_Constructors*
|javax.management.ObjectName(String)|Construct an object name from the given st
|javax.management.ObjectName(String,Hashtable)|Construct an object name with se
|javax.management.ObjectName(String,String,String)|Construct an object name wit

*javax.management.ObjectName_Methods*
|javax.management.ObjectName.apply(ObjectName)|Test whether this ObjectName, wh
|javax.management.ObjectName.equals(Object)|Compares the current object name wi
|javax.management.ObjectName.getCanonicalKeyPropertyListString()|Returns a stri
|javax.management.ObjectName.getCanonicalName()|Returns the canonical form of t
|javax.management.ObjectName.getDomain()|Returns the domain part.
|javax.management.ObjectName.getInstance(ObjectName)|Return an instance of Obje
|javax.management.ObjectName.getInstance(String)|Return an instance of ObjectNa
|javax.management.ObjectName.getInstance(String,Hashtable)|Return an instance o
|javax.management.ObjectName.getInstance(String,String,String)|Return an instan
|javax.management.ObjectName.getKeyProperty(String)|Obtains the value associate
|javax.management.ObjectName.getKeyPropertyList()|Returns the key properties as
|javax.management.ObjectName.getKeyPropertyListString()|Returns a string repres
|javax.management.ObjectName.hashCode()|Returns a hash code for this object nam
|javax.management.ObjectName.isDomainPattern()|Checks whether the object name i
|javax.management.ObjectName.isPattern()|Checks whether the object name is a pa
|javax.management.ObjectName.isPropertyPattern()|Checks whether the object name
|javax.management.ObjectName.quote(String)|Returns a quoted form of the given S
|javax.management.ObjectName.setMBeanServer(MBeanServer)|
|javax.management.ObjectName.toString()|Returns a string representation of the 
|javax.management.ObjectName.unquote(String)|Returns an unquoted form of the gi

*javax.management.ObjectName_Description*

Represents the object name of an MBean, or a pattern that can match the names 
of several MBeans. Instances of this class are immutable. 

An instance of this class can be used to represent: 

An object name An object name pattern, within the context of a query 

An object name consists of two parts, the domain and the key properties. 

The domain is a string of characters not including the character colon (:). 

If the domain includes at least one occurrence of the wildcard characters 
asterisk (*) or question mark (?), then the object name is a pattern. The 
asterisk matches any sequence of zero or more characters, while the question 
mark matches any single character. 

If the domain is empty, it will be replaced in certain contexts by the default 
domain of the MBean server in which the ObjectName is used. 

The key properties are an unordered set of keys and associated values. 

Each key is a nonempty string of characters which may not contain any of the 
characters comma (,), equals (=), colon, asterisk, or question mark. The same 
key may not occur twice in a given ObjectName. 

Each value associated with a key is a string of characters that is either 
unquoted or quoted. 

An unquoted value is a possibly empty string of characters which may not 
contain any of the characters comma, equals, colon, quote, asterisk, or 
question mark. 

A quoted value consists of a quote ("), followed by a possibly empty string of 
characters, followed by another quote. Within the string of characters, the 
backslash (\) has a special meaning. It must be followed by one of the 
following characters: 

Another backslash. The second backslash has no special meaning and the two 
characters represent a single backslash. 

The character 'n'. The two characters represent a newline ('\n' in Java). 

A quote. The two characters represent a quote, and that quote is not considered 
to terminate the quoted value. An ending closing quote must be present for the 
quoted value to be valid. 

A question mark (?) or star (*). The two characters represent a question mark 
or star respectively. 

A quote, question mark, or star may not appear inside a quoted value except 
immediately after an odd number of consecutive backslashes. 

The quotes surrounding a quoted value, and any backslashes within that value, 
are considered to be part of the value. 

An ObjectName may be a property pattern. In this case it may have zero or more 
keys and associated values. It matches a nonpattern ObjectName whose domain 
matches and that contains the same keys and associated values, as well as 
possibly other keys and values. 

An ObjectName is a pattern if its domain contains a wildcard or if the 
ObjectName is a property pattern. 

If an ObjectName is not a pattern, it must contain at least one key with its 
associated value. 

An ObjectName can be written as a String with the following elements in order: 

The domain. A colon (:). A key property list as defined below. 

A key property list written as a String is a comma-separated list of elements. 
Each element is either an asterisk or a key property. A key property consists 
of a key, an equals (=), and the associated value. 

At most one element of a key property list may be an asterisk. If the key 
property list contains an asterisk element, the ObjectName is a property 
pattern. 

Spaces have no special significance in a String representing an ObjectName. For 
example, the String: 

domain: key1 = value1 , key2 = value2 

represents an ObjectName with two keys. The name of each key contains six 
characters, of which the first and last are spaces. The value associated with 
the key "key1" also begins and ends with a space. 

In addition to the restrictions on characters spelt out above, no part of an 
ObjectName may contain a newline character ('\n'), whether the domain, a key, 
or a value, whether quoted or unquoted. The newline character can be 
represented in a quoted value with the sequence \n. 

The rules on special characters and quoting apply regardless of which 
constructor is used to make an ObjectName. 

To avoid collisions between MBeans supplied by different vendors, a useful 
convention is to begin the domain name with the reverse DNS name of the 
organization that specifies the MBeans, followed by a period and a string whose 
interpretation is determined by that organization. For example, MBeans 
specified by Sun Microsystems Inc., DNS name sun.com, would have domains such 
as com.sun.MyDomain. This is essentially the same convention as for 
Java-language package names. 


*javax.management.ObjectName(String)*

public ObjectName(java.lang.String name)
  throws |javax.management.MalformedObjectNameException|
         |java.lang.NullPointerException|
         
Construct an object name from the given string. 

    name - A string representation of the object name. 

*javax.management.ObjectName(String,Hashtable)*

public ObjectName(
  java.lang.String domain,
  java.util.Hashtable table)
  throws |javax.management.MalformedObjectNameException|
         |java.lang.NullPointerException|
         
Construct an object name with several key properties from a Hashtable. 

    domain - The domain part of the object name. 
    table - A hash table containing one or more key properties. The key of each entry in 
       the table is the key of a key property in the object name. The 
       associated value in the table is the associated value in the object 
       name. 

*javax.management.ObjectName(String,String,String)*

public ObjectName(
  java.lang.String domain,
  java.lang.String key,
  java.lang.String value)
  throws |javax.management.MalformedObjectNameException|
         |java.lang.NullPointerException|
         
Construct an object name with exactly one key property. 

    domain - The domain part of the object name. 
    key - The attribute in the key property of the object name. 
    value - The value in the key property of the object name. 

*javax.management.ObjectName.apply(ObjectName)*

public boolean apply(javax.management.ObjectName name)
  throws |java.lang.NullPointerException|
         
Test whether this ObjectName, which may be a pattern, matches another 
ObjectName. If name is a pattern, the result is false. If this ObjectName is a 
pattern, the result is true if and only if name matches the pattern. If neither 
this ObjectName nor name is a pattern, the result is true if and only if the 
two ObjectNames are equal as described for the (|javax.management.ObjectName|) 
method. 

    name - The name of the MBean to compare to. 

    Returns: True if name matches this ObjectName. 
*javax.management.ObjectName.equals(Object)*

public boolean equals(java.lang.Object object)

Compares the current object name with another object name. Two ObjectName 
instances are equal if and only if their canonical forms are equal. The 
canonical form is the string described for (|javax.management.ObjectName|) . 

    object - The object name that the current object name is to be compared with. 

    Returns: True if object is an ObjectName whose canonical form is equal to that of this 
             ObjectName. 
*javax.management.ObjectName.getCanonicalKeyPropertyListString()*

public |java.lang.String| getCanonicalKeyPropertyListString()

Returns a string representation of the list of key properties, in which the key 
properties are sorted in lexical order. This is used in lexicographic 
comparisons performed in order to select MBeans based on their key property 
list. Lexical order is the order implied by 
String.compareTo(String)(|java.lang.String|) . 


    Returns: The canonical key property list string. This string is independent of whether 
             the ObjectName is a pattern. 
*javax.management.ObjectName.getCanonicalName()*

public |java.lang.String| getCanonicalName()

Returns the canonical form of the name; that is, a string representation where 
the properties are sorted in lexical order. 

More precisely, the canonical form of the name is a String consisting of the 
domain part, a colon (:), the canonical key property list, and a pattern 
indication. 

The canonical key property list is the same string as described for 
(|javax.management.ObjectName|) . 

The pattern indication is: 

empty for an ObjectName that is not a property pattern; an asterisk for an 
ObjectName that is a property pattern with no keys; or a comma and an asterisk 
(,*) for an ObjectName that is a property pattern with at least one key. 


    Returns: The canonical form of the name. 
*javax.management.ObjectName.getDomain()*

public |java.lang.String| getDomain()

Returns the domain part. 


    Returns: 
*javax.management.ObjectName.getInstance(ObjectName)*

public static |javax.management.ObjectName| getInstance(javax.management.ObjectName name)
  throws |java.lang.NullPointerException|
         
Return an instance of ObjectName that can be used anywhere the given object can 
be used. The returned object may be of a subclass of ObjectName. If name is of 
a subclass of ObjectName, it is not guaranteed that the returned object will be 
of the same class. 

The returned value may or may not be identical to name. Calling this method 
twice with the same parameters may return the same object or two equal but not 
identical objects. 

Since ObjectName is immutable, it is not usually useful to make a copy of an 
ObjectName. The principal use of this method is to guard against a malicious 
caller who might pass an instance of a subclass with surprising behavior to 
sensitive code. Such code can call this method to obtain an ObjectName that is 
known not to have surprising behavior. 

    name - an instance of the ObjectName class or of a subclass 

    Returns: an instance of ObjectName or a subclass that is known to have the same 
             semantics. If name respects the semantics of ObjectName, then the 
             returned object is equal (though not necessarily identical) to 
             name. 
*javax.management.ObjectName.getInstance(String)*

public static |javax.management.ObjectName| getInstance(java.lang.String name)
  throws |javax.management.MalformedObjectNameException|
         |java.lang.NullPointerException|
         
Return an instance of ObjectName that can be used anywhere an object obtained 
with new ObjectName(name)(|javax.management.ObjectName|) can be used. The 
returned object may be of a subclass of ObjectName. Calling this method twice 
with the same parameters may return the same object or two equal but not 
identical objects. 

    name - A string representation of the object name. 

    Returns: an ObjectName corresponding to the given String. 
*javax.management.ObjectName.getInstance(String,Hashtable)*

public static |javax.management.ObjectName| getInstance(
  java.lang.String domain,
  java.util.Hashtable table)
  throws |javax.management.MalformedObjectNameException|
         |java.lang.NullPointerException|
         
Return an instance of ObjectName that can be used anywhere an object obtained 
with new ObjectName(domain, table)(|javax.management.ObjectName|) can be used. 
The returned object may be of a subclass of ObjectName. Calling this method 
twice with the same parameters may return the same object or two equal but not 
identical objects. 

    domain - The domain part of the object name. 
    table - A hash table containing one or more key properties. The key of each entry in 
       the table is the key of a key property in the object name. The 
       associated value in the table is the associated value in the object 
       name. 

    Returns: an ObjectName corresponding to the given domain and key mappings. 
*javax.management.ObjectName.getInstance(String,String,String)*

public static |javax.management.ObjectName| getInstance(
  java.lang.String domain,
  java.lang.String key,
  java.lang.String value)
  throws |javax.management.MalformedObjectNameException|
         |java.lang.NullPointerException|
         
Return an instance of ObjectName that can be used anywhere an object obtained 
with new ObjectName(domain, key, value)(|javax.management.ObjectName|) can be 
used. The returned object may be of a subclass of ObjectName. Calling this 
method twice with the same parameters may return the same object or two equal 
but not identical objects. 

    domain - The domain part of the object name. 
    key - The attribute in the key property of the object name. 
    value - The value in the key property of the object name. 

    Returns: an ObjectName corresponding to the given domain, key, and value. 
*javax.management.ObjectName.getKeyProperty(String)*

public |java.lang.String| getKeyProperty(java.lang.String property)
  throws |java.lang.NullPointerException|
         
Obtains the value associated with a key in a key property. 

    property - The property whose value is to be obtained. 

    Returns: The value of the property, or null if there is no such property in this 
             ObjectName. 
*javax.management.ObjectName.getKeyPropertyList()*

public |java.util.Hashtable| getKeyPropertyList()

Returns the key properties as a Hashtable. The returned value is a Hashtable in 
which each key is a key in the ObjectName's key property list and each value is 
the associated value. 

The returned value may be unmodifiable. If it is modifiable, changing it has no 
effect on this ObjectName. 


    Returns: The table of key properties. 
*javax.management.ObjectName.getKeyPropertyListString()*

public |java.lang.String| getKeyPropertyListString()

Returns a string representation of the list of key properties specified at 
creation time. If this ObjectName was constructed with the constructor 
(|javax.management.ObjectName|) , the key properties in the returned String 
will be in the same order as in the argument to the constructor. 


    Returns: The key property list string. This string is independent of whether the 
             ObjectName is a pattern. 
*javax.management.ObjectName.hashCode()*

public int hashCode()

Returns a hash code for this object name. 


*javax.management.ObjectName.isDomainPattern()*

public boolean isDomainPattern()

Checks whether the object name is a pattern on the domain part. 


    Returns: True if the name is a domain pattern, otherwise false. 
*javax.management.ObjectName.isPattern()*

public boolean isPattern()

Checks whether the object name is a pattern. An object name is a pattern if its 
domain contains a wildcard or if the object name is a property pattern. 


    Returns: True if the name is a pattern, otherwise false. 
*javax.management.ObjectName.isPropertyPattern()*

public boolean isPropertyPattern()

Checks whether the object name is a pattern on the key properties. 


    Returns: True if the name is a pattern, otherwise false. 
*javax.management.ObjectName.quote(String)*

public static |java.lang.String| quote(java.lang.String s)
  throws |java.lang.NullPointerException|
         
Returns a quoted form of the given String, suitable for inclusion in an 
ObjectName. The returned value can be used as the value associated with a key 
in an ObjectName. The String s may contain any character. Appropriate quoting 
ensures that the returned value is legal in an ObjectName. 

The returned value consists of a quote ('"'), a sequence of characters 
corresponding to the characters of s, and another quote. Characters in s appear 
unchanged within the returned value except: 

A quote ('"')is replaced by a backslash (\) followed by a quote. A star ('*') 
is replaced by a backslash (\) followed by a star. A question mark ('?') is 
replaced by a backslash (\) followed by a question mark. A backslash ('\') is 
replaced by two backslashes. A newline character (the character '\n' in Java) 
is replaced by a backslash followed by the character '\n'. 

    s - the String to be quoted. 

    Returns: the quoted String. 
*javax.management.ObjectName.setMBeanServer(MBeanServer)*

public void setMBeanServer(javax.management.MBeanServer mbs)




*javax.management.ObjectName.toString()*

public |java.lang.String| toString()

Returns a string representation of the object name. The format of this string 
is not specified, but users can expect that two ObjectNames return the same 
string if and only if they are equal. 


    Returns: a string representation of this object name. 
*javax.management.ObjectName.unquote(String)*

public static |java.lang.String| unquote(java.lang.String q)
  throws |java.lang.IllegalArgumentException|
         |java.lang.NullPointerException|
         
Returns an unquoted form of the given String. If q is a String returned by 
quote(s)(|javax.management.ObjectName|) , then unquote(q).equals(s). If there 
is no String s for which quote(s).equals(q), then unquote(q) throws an 
IllegalArgumentException. 

These rules imply that there is a one-to-one mapping between quoted and 
unquoted forms. 

    q - the String to be unquoted. 

    Returns: the unquoted String. 


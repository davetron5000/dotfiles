*java.awt.JobAttributes* *JobAttributes* A set of attributes which control a pri

public final class JobAttributes
  extends    |java.lang.Object|
  implements |java.lang.Cloneable|

|java.awt.JobAttributes_Description|
|java.awt.JobAttributes_Fields|
|java.awt.JobAttributes_Constructors|
|java.awt.JobAttributes_Methods|

================================================================================

*java.awt.JobAttributes_Constructors*
|java.awt.JobAttributes()|Constructs a JobAttributes instance with default  val
|java.awt.JobAttributes(int,JobAttributes.DefaultSelectionType,JobAttributes.DestinationType,JobAttributes.DialogType,String,int,int,JobAttributes.MultipleDocumentHandlingType,int[][],String,JobAttributes.SidesType)|
|java.awt.JobAttributes(JobAttributes)|Constructs a JobAttributes instance whic

*java.awt.JobAttributes_Methods*
|java.awt.JobAttributes.clone()|Creates and returns a copy of this JobAttribute
|java.awt.JobAttributes.equals(Object)|Determines whether two JobAttributes are
|java.awt.JobAttributes.getCopies()|Returns the number of copies the applicatio
|java.awt.JobAttributes.getDefaultSelection()|Specifies whether, for jobs using
|java.awt.JobAttributes.getDestination()|Specifies whether output will be to a 
|java.awt.JobAttributes.getDialog()|Returns whether, for jobs using these attri
|java.awt.JobAttributes.getFileName()|Specifies the file name for the output fi
|java.awt.JobAttributes.getFromPage()|Returns, for jobs using these attributes,
|java.awt.JobAttributes.getMaxPage()|Specifies the maximum value the user can s
|java.awt.JobAttributes.getMinPage()|Specifies the minimum value the user can s
|java.awt.JobAttributes.getMultipleDocumentHandling()|Specifies the handling of
|java.awt.JobAttributes.getPageRanges()|Specifies, for jobs using these attribu
|java.awt.JobAttributes.getPrinter()|Returns the destination printer for jobs u
|java.awt.JobAttributes.getSides()|Returns how consecutive pages should be impo
|java.awt.JobAttributes.getToPage()|Returns, for jobs using these attributes, t
|java.awt.JobAttributes.hashCode()|Returns a hash code value for this JobAttrib
|java.awt.JobAttributes.set(JobAttributes)|Sets all of the attributes of this J
|java.awt.JobAttributes.setCopies(int)|Specifies the number of copies the appli
|java.awt.JobAttributes.setCopiesToDefault()|Sets the number of copies the appl
|java.awt.JobAttributes.setDefaultSelection(JobAttributes.DefaultSelectionType)|
|java.awt.JobAttributes.setDestination(JobAttributes.DestinationType)|Specifies
|java.awt.JobAttributes.setDialog(JobAttributes.DialogType)|Specifies whether, 
|java.awt.JobAttributes.setFileName(String)|Specifies the file name for the out
|java.awt.JobAttributes.setFromPage(int)|Specifies, for jobs using these attrib
|java.awt.JobAttributes.setMaxPage(int)|Specifies the maximum value the user ca
|java.awt.JobAttributes.setMinPage(int)|Specifies the minimum value the user ca
|java.awt.JobAttributes.setMultipleDocumentHandling(JobAttributes.MultipleDocumentHandlingType)|
|java.awt.JobAttributes.setMultipleDocumentHandlingToDefault()|Sets the handlin
|java.awt.JobAttributes.setPageRanges(int[][])|Specifies, for jobs using these 
|java.awt.JobAttributes.setPrinter(String)|Specifies the destination printer fo
|java.awt.JobAttributes.setSides(JobAttributes.SidesType)|Specifies how consecu
|java.awt.JobAttributes.setSidesToDefault()|Sets how consecutive pages should b
|java.awt.JobAttributes.setToPage(int)|Specifies, for jobs using these attribut
|java.awt.JobAttributes.toString()|Returns a string representation of this JobA

*java.awt.JobAttributes_Description*

A set of attributes which control a print job. 

Instances of this class control the number of copies, default selection, 
destination, print dialog, file and printer names, page ranges, multiple 
document handling (including collation), and multi-page imposition (such as 
duplex) of every print job which uses the instance. Attribute names are 
compliant with the Internet Printing Protocol (IPP) 1.1 where possible. 
Attribute values are partially compliant where possible. 

To use a method which takes an inner class type, pass a reference to one of the 
constant fields of the inner class. Client code cannot create new instances of 
the inner class types because none of those classes has a public constructor. 
For example, to set the print dialog type to the cross-platform, pure Java 
print dialog, use the following code: 

import java.awt.JobAttributes; 

public class PureJavaPrintDialogExample { public void 
setPureJavaPrintDialog(JobAttributes jobAttributes) { 
jobAttributes.setDialog(JobAttributes.DialogType.COMMON); } } 

Every IPP attribute which supports an attributeName-default value has a 
corresponding setattributeNameToDefault method. Default value fields are not 
provided. 


*java.awt.JobAttributes()*

public JobAttributes()

Constructs a JobAttributes instance with default values for every attribute. 
The dialog defaults to DialogType.NATIVE. Min page defaults to 1. Max page 
defaults to Integer.MAX_VALUE. Destination defaults to DestinationType.PRINTER. 
Selection defaults to DefaultSelectionType.ALL. Number of copies defaults to 1. 
Multiple document handling defaults to 
MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES. Sides 
defaults to SidesType.ONE_SIDED. File name defaults to null. 


*java.awt.JobAttributes(int,JobAttributes.DefaultSelectionType,JobAttributes.DestinationType,JobAttributes.DialogType,String,int,int,JobAttributes.MultipleDocumentHandlingType,int[][],String,JobAttributes.SidesType)*

public JobAttributes(
  int copies,
  java.awt.JobAttributes.DefaultSelectionType defaultSelection,
  java.awt.JobAttributes.DestinationType destination,
  java.awt.JobAttributes.DialogType dialog,
  java.lang.String fileName,
  int maxPage,
  int minPage,
  java.awt.JobAttributes.MultipleDocumentHandlingType multipleDocumentHandling,
  int[][] pageRanges,
  java.lang.String printer,
  java.awt.JobAttributes.SidesType sides)

Constructs a JobAttributes instance with the specified values for every 
attribute. 

    copies - an integer greater than 0 
    defaultSelection - DefaultSelectionType.ALL, DefaultSelectionType.RANGE, or 
       DefaultSelectionType.SELECTION 
    destination - DesintationType.FILE or DesintationType.PRINTER 
    dialog - DialogType.COMMON, DialogType.NATIVE, or DialogType.NONE 
    fileName - the possibly null file name 
    maxPage - an integer greater than zero and greater than or equal to minPage 
    minPage - an integer greater than zero and less than or equal to maxPage 
    multipleDocumentHandling - MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_COLLATED_COPIES or 
       MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES 
    pageRanges - an array of integer arrays of two elements; an array is interpreted as a range 
       spanning all pages including and between the specified pages; ranges 
       must be in ascending order and must not overlap; specified page numbers 
       cannot be less than minPage nor greater than maxPage; for example: 

(new int[][] { new int[] { 1, 3 }, new int[] { 5, 5 }, new int[] { 15, 19 } }), 

specifies pages 1, 2, 3, 5, 15, 16, 17, 18, and 19. Note that (new int[][] { 
       new int[] { 1, 1 }, new int[] { 1, 2 } }), is an invalid set of page 
       ranges because the two ranges overlap 
    printer - the possibly null printer name 
    sides - SidesType.ONE_SIDED, SidesType.TWO_SIDED_LONG_EDGE, or 
       SidesType.TWO_SIDED_SHORT_EDGE 

*java.awt.JobAttributes(JobAttributes)*

public JobAttributes(java.awt.JobAttributes obj)

Constructs a JobAttributes instance which is a copy of the supplied 
JobAttributes. 

    obj - the JobAttributes to copy 

*java.awt.JobAttributes.clone()*

public |java.lang.Object| clone()

Creates and returns a copy of this JobAttributes. 


    Returns: the newly created copy; it is safe to cast this Object into a JobAttributes 
*java.awt.JobAttributes.equals(Object)*

public boolean equals(java.lang.Object obj)

Determines whether two JobAttributes are equal to each other. 

Two JobAttributes are equal if and only if each of their attributes are equal. 
Attributes of enumeration type are equal if and only if the fields refer to the 
same unique enumeration object. A set of page ranges is equal if and only if 
the sets are of equal length, each range enumerates the same pages, and the 
ranges are in the same order. 

    obj - the object whose equality will be checked. 

    Returns: whether obj is equal to this JobAttribute according to the above criteria. 
*java.awt.JobAttributes.getCopies()*

public int getCopies()

Returns the number of copies the application should render for jobs using these 
attributes. This attribute is updated to the value chosen by the user. 


    Returns: an integer greater than 0. 
*java.awt.JobAttributes.getDefaultSelection()*

public |java.awt.JobAttributes.DefaultSelectionType| getDefaultSelection()

Specifies whether, for jobs using these attributes, the application should 
print all pages, the range specified by the return value of getPageRanges, or 
the current selection. This attribute is updated to the value chosen by the 
user. 


    Returns: DefaultSelectionType.ALL, DefaultSelectionType.RANGE, or 
             DefaultSelectionType.SELECTION 
*java.awt.JobAttributes.getDestination()*

public |java.awt.JobAttributes.DestinationType| getDestination()

Specifies whether output will be to a printer or a file for jobs using these 
attributes. This attribute is updated to the value chosen by the user. 


    Returns: DesintationType.FILE or DesintationType.PRINTER 
*java.awt.JobAttributes.getDialog()*

public |java.awt.JobAttributes.DialogType| getDialog()

Returns whether, for jobs using these attributes, the user should see a print 
dialog in which to modify the print settings, and which type of print dialog 
should be displayed. DialogType.COMMON denotes a cross- platform, pure Java 
print dialog. DialogType.NATIVE denotes the platform's native print dialog. If 
a platform does not support a native print dialog, the pure Java print dialog 
is displayed instead. DialogType.NONE specifies no print dialog (i.e., 
background printing). This attribute cannot be modified by, and is not subject 
to any limitations of, the implementation or the target printer. 


    Returns: DialogType.COMMON, DialogType.NATIVE, or DialogType.NONE 
*java.awt.JobAttributes.getFileName()*

public |java.lang.String| getFileName()

Specifies the file name for the output file for jobs using these attributes. 
This attribute is updated to the value chosen by the user. 


    Returns: the possibly null file name 
*java.awt.JobAttributes.getFromPage()*

public int getFromPage()

Returns, for jobs using these attributes, the first page to be printed, if a 
range of pages is to be printed. This attribute is updated to the value chosen 
by the user. An application should ignore this attribute on output, unless the 
return value of the getDefaultSelection method is DefaultSelectionType.RANGE. 
An application should honor the return value of getPageRanges over the return 
value of this method, if possible. 


    Returns: an integer greater than zero and less than or equal to toPage and greater than 
             or equal to minPage and less than or equal to maxPage. 
*java.awt.JobAttributes.getMaxPage()*

public int getMaxPage()

Specifies the maximum value the user can specify as the last page to be printed 
for jobs using these attributes. This attribute cannot be modified by, and is 
not subject to any limitations of, the implementation or the target printer. 


    Returns: an integer greater than zero and greater than or equal to minPage. 
*java.awt.JobAttributes.getMinPage()*

public int getMinPage()

Specifies the minimum value the user can specify as the first page to be 
printed for jobs using these attributes. This attribute cannot be modified by, 
and is not subject to any limitations of, the implementation or the target 
printer. 


    Returns: an integer greater than zero and less than or equal to maxPage. 
*java.awt.JobAttributes.getMultipleDocumentHandling()*

public |java.awt.JobAttributes.MultipleDocumentHandlingType| getMultipleDocumentHandling()

Specifies the handling of multiple copies, including collation, for jobs using 
these attributes. This attribute is updated to the value chosen by the user. 


    Returns: MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_COLLATED_COPIES or 
             MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES. 
*java.awt.JobAttributes.getPageRanges()*

public int getPageRanges()

Specifies, for jobs using these attributes, the ranges of pages to be printed, 
if a range of pages is to be printed. All range numbers are inclusive. This 
attribute is updated to the value chosen by the user. An application should 
ignore this attribute on output, unless the return value of the 
getDefaultSelection method is DefaultSelectionType.RANGE. 


    Returns: an array of integer arrays of 2 elements. An array is interpreted as a range 
             spanning all pages including and between the specified pages. 
             Ranges must be in ascending order and must not overlap. Specified 
             page numbers cannot be less than minPage nor greater than maxPage. 
             For example: (new int[][] { new int[] { 1, 3 }, new int[] { 5, 5 
             }, new int[] { 15, 19 } }), specifies pages 1, 2, 3, 5, 15, 16, 
             17, 18, and 19. 
*java.awt.JobAttributes.getPrinter()*

public |java.lang.String| getPrinter()

Returns the destination printer for jobs using these attributes. This attribute 
is updated to the value chosen by the user. 


    Returns: the possibly null printer name. 
*java.awt.JobAttributes.getSides()*

public |java.awt.JobAttributes.SidesType| getSides()

Returns how consecutive pages should be imposed upon the sides of the print 
medium for jobs using these attributes. SidesType.ONE_SIDED imposes each 
consecutive page upon the same side of consecutive media sheets. This 
imposition is sometimes called simplex. SidesType.TWO_SIDED_LONG_EDGE imposes 
each consecutive pair of pages upon front and back sides of consecutive media 
sheets, such that the orientation of each pair of pages on the medium would be 
correct for the reader as if for binding on the long edge. This imposition is 
sometimes called duplex. SidesType.TWO_SIDED_SHORT_EDGE imposes each 
consecutive pair of pages upon front and back sides of consecutive media 
sheets, such that the orientation of each pair of pages on the medium would be 
correct for the reader as if for binding on the short edge. This imposition is 
sometimes called tumble. This attribute is updated to the value chosen by the 
user. 


    Returns: SidesType.ONE_SIDED, SidesType.TWO_SIDED_LONG_EDGE, or 
             SidesType.TWO_SIDED_SHORT_EDGE. 
*java.awt.JobAttributes.getToPage()*

public int getToPage()

Returns, for jobs using these attributes, the last page (inclusive) to be 
printed, if a range of pages is to be printed. This attribute is updated to the 
value chosen by the user. An application should ignore this attribute on 
output, unless the return value of the getDefaultSelection method is 
DefaultSelectionType.RANGE. An application should honor the return value of 
getPageRanges over the return value of this method, if possible. 


    Returns: an integer greater than zero and greater than or equal to toPage and greater 
             than or equal to minPage and less than or equal to maxPage. 
*java.awt.JobAttributes.hashCode()*

public int hashCode()

Returns a hash code value for this JobAttributes. 


    Returns: the hash code. 
*java.awt.JobAttributes.set(JobAttributes)*

public void set(java.awt.JobAttributes obj)

Sets all of the attributes of this JobAttributes to the same values as the 
attributes of obj. 

    obj - the JobAttributes to copy 

*java.awt.JobAttributes.setCopies(int)*

public void setCopies(int copies)

Specifies the number of copies the application should render for jobs using 
these attributes. Not specifying this attribute is equivalent to specifying 1. 

    copies - an integer greater than 0 

*java.awt.JobAttributes.setCopiesToDefault()*

public void setCopiesToDefault()

Sets the number of copies the application should render for jobs using these 
attributes to the default. The default number of copies is 1. 


*java.awt.JobAttributes.setDefaultSelection(JobAttributes.DefaultSelectionType)*

public void setDefaultSelection(java.awt.JobAttributes.DefaultSelectionType defaultSelection)

Specifies whether, for jobs using these attributes, the application should 
print all pages, the range specified by the return value of getPageRanges, or 
the current selection. Not specifying this attribute is equivalent to 
specifying DefaultSelectionType.ALL. 

    defaultSelection - DefaultSelectionType.ALL, DefaultSelectionType.RANGE, or 
       DefaultSelectionType.SELECTION. 

*java.awt.JobAttributes.setDestination(JobAttributes.DestinationType)*

public void setDestination(java.awt.JobAttributes.DestinationType destination)

Specifies whether output will be to a printer or a file for jobs using these 
attributes. Not specifying this attribute is equivalent to specifying 
DesintationType.PRINTER. 

    destination - DesintationType.FILE or DesintationType.PRINTER. 

*java.awt.JobAttributes.setDialog(JobAttributes.DialogType)*

public void setDialog(java.awt.JobAttributes.DialogType dialog)

Specifies whether, for jobs using these attributes, the user should see a print 
dialog in which to modify the print settings, and which type of print dialog 
should be displayed. DialogType.COMMON denotes a cross- platform, pure Java 
print dialog. DialogType.NATIVE denotes the platform's native print dialog. If 
a platform does not support a native print dialog, the pure Java print dialog 
is displayed instead. DialogType.NONE specifies no print dialog (i.e., 
background printing). Not specifying this attribute is equivalent to specifying 
DialogType.NATIVE. 

    dialog - DialogType.COMMON, DialogType.NATIVE, or DialogType.NONE. 

*java.awt.JobAttributes.setFileName(String)*

public void setFileName(java.lang.String fileName)

Specifies the file name for the output file for jobs using these attributes. 
Default is platform-dependent and implementation-defined. 

    fileName - the possibly null file name. 

*java.awt.JobAttributes.setFromPage(int)*

public void setFromPage(int fromPage)

Specifies, for jobs using these attributes, the first page to be printed, if a 
range of pages is to be printed. If this attribute is not specified, then the 
values from the pageRanges attribute are used. If pageRanges and either or both 
of fromPage and toPage are specified, pageRanges takes precedence. Specifying 
none of pageRanges, fromPage, or toPage is equivalent to calling 
setPageRanges(new int[][] { new int[] { minPage } }); 

    fromPage - an integer greater than zero and less than or equal to toPage and greater than 
       or equal to minPage and less than or equal to maxPage. 

*java.awt.JobAttributes.setMaxPage(int)*

public void setMaxPage(int maxPage)

Specifies the maximum value the user can specify as the last page to be printed 
for jobs using these attributes. Not specifying this attribute is equivalent to 
specifying Integer.MAX_VALUE. 

    maxPage - an integer greater than zero and greater than or equal to minPage 

*java.awt.JobAttributes.setMinPage(int)*

public void setMinPage(int minPage)

Specifies the minimum value the user can specify as the first page to be 
printed for jobs using these attributes. Not specifying this attribute is 
equivalent to specifying 1. 

    minPage - an integer greater than zero and less than or equal to maxPage. 

*java.awt.JobAttributes.setMultipleDocumentHandling(JobAttributes.MultipleDocumentHandlingType)*

public void setMultipleDocumentHandling(java.awt.JobAttributes.MultipleDocumentHandlingType multipleDocumentHandling)

Specifies the handling of multiple copies, including collation, for jobs using 
these attributes. Not specifying this attribute is equivalent to specifying 
MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES. 

    multipleDocumentHandling - MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_COLLATED_COPIES or 
       MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES. 

*java.awt.JobAttributes.setMultipleDocumentHandlingToDefault()*

public void setMultipleDocumentHandlingToDefault()

Sets the handling of multiple copies, including collation, for jobs using these 
attributes to the default. The default handling is 
MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES. 


*java.awt.JobAttributes.setPageRanges(int[][])*

public void setPageRanges(int[][] pageRanges)

Specifies, for jobs using these attributes, the ranges of pages to be printed, 
if a range of pages is to be printed. All range numbers are inclusive. If this 
attribute is not specified, then the values from the fromPage and toPages 
attributes are used. If pageRanges and either or both of fromPage and toPage 
are specified, pageRanges takes precedence. Specifying none of pageRanges, 
fromPage, or toPage is equivalent to calling setPageRanges(new int[][] { new 
int[] { minPage, minPage } }); 

    pageRanges - an array of integer arrays of 2 elements. An array is interpreted as a range 
       spanning all pages including and between the specified pages. Ranges 
       must be in ascending order and must not overlap. Specified page numbers 
       cannot be less than minPage nor greater than maxPage. For example: (new 
       int[][] { new int[] { 1, 3 }, new int[] { 5, 5 }, new int[] { 15, 19 } 
       }), specifies pages 1, 2, 3, 5, 15, 16, 17, 18, and 19. Note that (new 
       int[][] { new int[] { 1, 1 }, new int[] { 1, 2 } }), is an invalid set 
       of page ranges because the two ranges overlap. 

*java.awt.JobAttributes.setPrinter(String)*

public void setPrinter(java.lang.String printer)

Specifies the destination printer for jobs using these attributes. Default is 
platform-dependent and implementation-defined. 

    printer - the possibly null printer name. 

*java.awt.JobAttributes.setSides(JobAttributes.SidesType)*

public void setSides(java.awt.JobAttributes.SidesType sides)

Specifies how consecutive pages should be imposed upon the sides of the print 
medium for jobs using these attributes. SidesType.ONE_SIDED imposes each 
consecutive page upon the same side of consecutive media sheets. This 
imposition is sometimes called simplex. SidesType.TWO_SIDED_LONG_EDGE imposes 
each consecutive pair of pages upon front and back sides of consecutive media 
sheets, such that the orientation of each pair of pages on the medium would be 
correct for the reader as if for binding on the long edge. This imposition is 
sometimes called duplex. SidesType.TWO_SIDED_SHORT_EDGE imposes each 
consecutive pair of pages upon front and back sides of consecutive media 
sheets, such that the orientation of each pair of pages on the medium would be 
correct for the reader as if for binding on the short edge. This imposition is 
sometimes called tumble. Not specifying this attribute is equivalent to 
specifying SidesType.ONE_SIDED. 

    sides - SidesType.ONE_SIDED, SidesType.TWO_SIDED_LONG_EDGE, or 
       SidesType.TWO_SIDED_SHORT_EDGE. 

*java.awt.JobAttributes.setSidesToDefault()*

public void setSidesToDefault()

Sets how consecutive pages should be imposed upon the sides of the print medium 
for jobs using these attributes to the default. The default imposition is 
SidesType.ONE_SIDED. 


*java.awt.JobAttributes.setToPage(int)*

public void setToPage(int toPage)

Specifies, for jobs using these attributes, the last page (inclusive) to be 
printed, if a range of pages is to be printed. If this attribute is not 
specified, then the values from the pageRanges attribute are used. If 
pageRanges and either or both of fromPage and toPage are specified, pageRanges 
takes precedence. Specifying none of pageRanges, fromPage, or toPage is 
equivalent to calling setPageRanges(new int[][] { new int[] { minPage } }); 

    toPage - an integer greater than zero and greater than or equal to fromPage and greater 
       than or equal to minPage and less than or equal to maxPage. 

*java.awt.JobAttributes.toString()*

public |java.lang.String| toString()

Returns a string representation of this JobAttributes. 


    Returns: the string representation. 


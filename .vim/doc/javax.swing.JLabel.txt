*javax.swing.JLabel* *JLabel* A display area for a short text string or an image

public class JLabel
  extends    |javax.swing.JComponent|
  implements |javax.swing.SwingConstants|
             |javax.accessibility.Accessible|

|javax.swing.JLabel_Description|
|javax.swing.JLabel_Fields|
|javax.swing.JLabel_Constructors|
|javax.swing.JLabel_Methods|

================================================================================

*javax.swing.JLabel_Fields*
|java.awt.Component_javax.swing.JLabel.labelFor|

*javax.swing.JLabel_Constructors*
|javax.swing.JLabel()|Creates a JLabel instance with   no image and with an emp
|javax.swing.JLabel(Icon)|Creates a JLabel instance with the specified image.
|javax.swing.JLabel(Icon,int)|Creates a JLabel instance with the specified  ima
|javax.swing.JLabel(String)|Creates a JLabel instance with the specified text.
|javax.swing.JLabel(String,Icon,int)|Creates a JLabel instance with the specifi
|javax.swing.JLabel(String,int)|Creates a JLabel instance with the specified  t

*javax.swing.JLabel_Methods*
|javax.swing.JLabel.checkHorizontalKey(int,String)|Verify that key is a legal v
|javax.swing.JLabel.checkVerticalKey(int,String)|Verify that key is a legal val
|javax.swing.JLabel.getAccessibleContext()|Get the AccessibleContext of this ob
|javax.swing.JLabel.getDisabledIcon()|Returns the icon used by the label when i
|javax.swing.JLabel.getDisplayedMnemonic()|Return the keycode that indicates a 
|javax.swing.JLabel.getDisplayedMnemonicIndex()|Returns the character, as an in
|javax.swing.JLabel.getHorizontalAlignment()|Returns the alignment of the label
|javax.swing.JLabel.getHorizontalTextPosition()|Returns the horizontal position
|javax.swing.JLabel.getIcon()|Returns the graphic image (glyph, icon) that the 
|javax.swing.JLabel.getIconTextGap()|Returns the amount of space between the te
|javax.swing.JLabel.getLabelFor()|Get the component this is labelling.
|javax.swing.JLabel.getText()|Returns the text string that the label displays.
|javax.swing.JLabel.getUI()|Returns the Lobject that renders this component.
|javax.swing.JLabel.getUIClassID()|Returns a string that specifies the name of 
|javax.swing.JLabel.getVerticalAlignment()|Returns the alignment of the label's
|javax.swing.JLabel.getVerticalTextPosition()|Returns the vertical position of 
|javax.swing.JLabel.imageUpdate(Image,int,int,int,int,int)|This is overridden t
|javax.swing.JLabel.paramString()|Returns a string representation of this JLabe
|javax.swing.JLabel.setDisabledIcon(Icon)|Set the icon to be displayed if this 
|javax.swing.JLabel.setDisplayedMnemonic(char)|Specifies the displayedMnemonic 
|javax.swing.JLabel.setDisplayedMnemonic(int)|Specify a keycode that indicates 
|javax.swing.JLabel.setDisplayedMnemonicIndex(int)|Provides a hint to the look 
|javax.swing.JLabel.setHorizontalAlignment(int)|Sets the alignment of the label
|javax.swing.JLabel.setHorizontalTextPosition(int)|Sets the horizontal position
|javax.swing.JLabel.setIcon(Icon)|Defines the icon this component will display.
|javax.swing.JLabel.setIconTextGap(int)|If both the icon and text properties ar
|javax.swing.JLabel.setLabelFor(Component)|Set the component this is labelling.
|javax.swing.JLabel.setText(String)|Defines the single line of text this compon
|javax.swing.JLabel.setUI(LabelUI)|Sets the Lobject that renders this component
|javax.swing.JLabel.setVerticalAlignment(int)|Sets the alignment of the label's
|javax.swing.JLabel.setVerticalTextPosition(int)|Sets the vertical position of 
|javax.swing.JLabel.updateUI()|Resets the UI property to a value from the curre

*javax.swing.JLabel_Description*

A display area for a short text string or an image, or both. A label does not 
react to input events. As a result, it cannot get the keyboard focus. A label 
can, however, display a keyboard alternative as a convenience for a nearby 
component that has a keyboard alternative but can't display it. 

A JLabel object can display either text, an image, or both. You can specify 
where in the label's display area the label's contents are aligned by setting 
the vertical and horizontal alignment. By default, labels are vertically 
centered in their display area. Text-only labels are leading edge aligned, by 
default; image-only labels are horizontally centered, by default. 

You can also specify the position of the text relative to the image. By 
default, text is on the trailing edge of the image, with the text and image 
vertically aligned. 

A label's leading and trailing edge are determined from the value of its 
(|java.awt.ComponentOrientation|) property. At present, the default 
ComponentOrientation setting maps the leading edge to left and the trailing 
edge to right. 

Finally, you can use the setIconTextGap method to specify how many pixels 
should appear between the text and the image. The default is 4 pixels. 

See How to Use Labels in The Java Tutorial for further documentation. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Component_javax.swing.JLabel.labelFor*

A display area for a short text string or an image, or both. A label does not 
react to input events. As a result, it cannot get the keyboard focus. A label 
can, however, display a keyboard alternative as a convenience for a nearby 
component that has a keyboard alternative but can't display it. 

A JLabel object can display either text, an image, or both. You can specify 
where in the label's display area the label's contents are aligned by setting 
the vertical and horizontal alignment. By default, labels are vertically 
centered in their display area. Text-only labels are leading edge aligned, by 
default; image-only labels are horizontally centered, by default. 

You can also specify the position of the text relative to the image. By 
default, text is on the trailing edge of the image, with the text and image 
vertically aligned. 

A label's leading and trailing edge are determined from the value of its 
(|java.awt.ComponentOrientation|) property. At present, the default 
ComponentOrientation setting maps the leading edge to left and the trailing 
edge to right. 

Finally, you can use the setIconTextGap method to specify how many pixels 
should appear between the text and the image. The default is 4 pixels. 

See How to Use Labels in The Java Tutorial for further documentation. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.JLabel()*

public JLabel()

Creates a JLabel instance with no image and with an empty string for the title. 
The label is centered vertically in its display area. The label's contents, 
once set, will be displayed on the leading edge of the label's display area. 


*javax.swing.JLabel(Icon)*

public JLabel(javax.swing.Icon image)

Creates a JLabel instance with the specified image. The label is centered 
vertically and horizontally in its display area. 

    image - The image to be displayed by the label. 

*javax.swing.JLabel(Icon,int)*

public JLabel(
  javax.swing.Icon image,
  int horizontalAlignment)

Creates a JLabel instance with the specified image and horizontal alignment. 
The label is centered vertically in its display area. 

    image - The image to be displayed by the label. 
    horizontalAlignment - One of the following constants defined in SwingConstants: LEFT, CENTER, RIGHT, 
       LEADING or TRAILING. 

*javax.swing.JLabel(String)*

public JLabel(java.lang.String text)

Creates a JLabel instance with the specified text. The label is aligned against 
the leading edge of its display area, and centered vertically. 

    text - The text to be displayed by the label. 

*javax.swing.JLabel(String,Icon,int)*

public JLabel(
  java.lang.String text,
  javax.swing.Icon icon,
  int horizontalAlignment)

Creates a JLabel instance with the specified text, image, and horizontal 
alignment. The label is centered vertically in its display area. The text is on 
the trailing edge of the image. 

    text - The text to be displayed by the label. 
    icon - The image to be displayed by the label. 
    horizontalAlignment - One of the following constants defined in SwingConstants: LEFT, CENTER, RIGHT, 
       LEADING or TRAILING. 

*javax.swing.JLabel(String,int)*

public JLabel(
  java.lang.String text,
  int horizontalAlignment)

Creates a JLabel instance with the specified text and horizontal alignment. The 
label is centered vertically in its display area. 

    text - The text to be displayed by the label. 
    horizontalAlignment - One of the following constants defined in SwingConstants: LEFT, CENTER, RIGHT, 
       LEADING or TRAILING. 

*javax.swing.JLabel.checkHorizontalKey(int,String)*

protected int checkHorizontalKey(
  int key,
  java.lang.String message)

Verify that key is a legal value for the horizontalAlignment properties. 

    key - the property value to check 
    message - the IllegalArgumentException detail message 

*javax.swing.JLabel.checkVerticalKey(int,String)*

protected int checkVerticalKey(
  int key,
  java.lang.String message)

Verify that key is a legal value for the verticalAlignment or 
verticalTextPosition properties. 

    key - the property value to check 
    message - the IllegalArgumentException detail message 

*javax.swing.JLabel.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Get the AccessibleContext of this object 


    Returns: the AccessibleContext of this object 
*javax.swing.JLabel.getDisabledIcon()*

public |javax.swing.Icon| getDisabledIcon()

Returns the icon used by the label when it's disabled. If no disabled icon has 
been set this will forward the call to the look and feel to construct an 
appropriate disabled Icon. 

Some look and feels might not render the disabled Icon, in which case they will 
ignore this. 


    Returns: the disabledIcon property 
*javax.swing.JLabel.getDisplayedMnemonic()*

public int getDisplayedMnemonic()

Return the keycode that indicates a mnemonic key. This property is used when 
the label is part of a larger component. If the labelFor property of the label 
is not null, the label will call the requestFocus method of the component 
specified by the labelFor property when the mnemonic is activated. 


    Returns: int value for the mnemonic key 
*javax.swing.JLabel.getDisplayedMnemonicIndex()*

public int getDisplayedMnemonicIndex()

Returns the character, as an index, that the look and feel should provide 
decoration for as representing the mnemonic character. 


    Returns: index representing mnemonic character 
*javax.swing.JLabel.getHorizontalAlignment()*

public int getHorizontalAlignment()

Returns the alignment of the label's contents along the X axis. 


    Returns: The value of the horizontalAlignment property, one of the following constants 
             defined in SwingConstants: LEFT, CENTER, RIGHT, LEADING or 
             TRAILING. 
*javax.swing.JLabel.getHorizontalTextPosition()*

public int getHorizontalTextPosition()

Returns the horizontal position of the label's text, relative to its image. 


    Returns: One of the following constants defined in SwingConstants: LEFT, CENTER, RIGHT, 
             LEADING or TRAILING. 
*javax.swing.JLabel.getIcon()*

public |javax.swing.Icon| getIcon()

Returns the graphic image (glyph, icon) that the label displays. 


    Returns: 
*javax.swing.JLabel.getIconTextGap()*

public int getIconTextGap()

Returns the amount of space between the text and the icon displayed in this 
label. 


    Returns: an int equal to the number of pixels between the text and the icon. 
*javax.swing.JLabel.getLabelFor()*

public |java.awt.Component| getLabelFor()

Get the component this is labelling. 


    Returns: the Component this is labelling. Can be null if this does not label a 
             Component. If the displayedMnemonic property is set and the 
             labelFor property is also set, the label will call the 
             requestFocus method of the component specified by the labelFor 
             property when the mnemonic is activated. 
*javax.swing.JLabel.getText()*

public |java.lang.String| getText()

Returns the text string that the label displays. 


    Returns: 
*javax.swing.JLabel.getUI()*

public |javax.swing.plaf.LabelUI| getUI()

Returns the Lobject that renders this component. 


    Returns: LabelUI object 
*javax.swing.JLabel.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns a string that specifies the name of the lclass that renders this 
component. 


    Returns: String "LabelUI" 
*javax.swing.JLabel.getVerticalAlignment()*

public int getVerticalAlignment()

Returns the alignment of the label's contents along the Y axis. 


    Returns: The value of the verticalAlignment property, one of the following constants 
             defined in SwingConstants: TOP, CENTER, or BOTTOM. 
*javax.swing.JLabel.getVerticalTextPosition()*

public int getVerticalTextPosition()

Returns the vertical position of the label's text, relative to its image. 


    Returns: One of the following constants defined in SwingConstants: TOP, CENTER, or 
             BOTTOM. 
*javax.swing.JLabel.imageUpdate(Image,int,int,int,int,int)*

public boolean imageUpdate(
  java.awt.Image img,
  int infoflags,
  int x,
  int y,
  int w,
  int h)

This is overridden to return false if the current Icon's Image is not equal to 
the passed in Image img. 


*javax.swing.JLabel.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JLabel. This method is intended to be 
used only for debugging purposes, and the content and format of the returned 
string may vary between implementations. The returned string may be empty but 
may not be null. 


    Returns: a string representation of this JLabel. 
*javax.swing.JLabel.setDisabledIcon(Icon)*

public void setDisabledIcon(javax.swing.Icon disabledIcon)

Set the icon to be displayed if this JLabel is "disabled" 
(JLabel.setEnabled(false)). 

The default value of this property is null. 

    disabledIcon - the Icon to display when the component is disabled 

*javax.swing.JLabel.setDisplayedMnemonic(char)*

public void setDisplayedMnemonic(char aChar)

Specifies the displayedMnemonic as a char value. 

    aChar - a char specifying the mnemonic to display 

*javax.swing.JLabel.setDisplayedMnemonic(int)*

public void setDisplayedMnemonic(int key)

Specify a keycode that indicates a mnemonic key. This property is used when the 
label is part of a larger component. If the labelFor property of the label is 
not null, the label will call the requestFocus method of the component 
specified by the labelFor property when the mnemonic is activated. 


*javax.swing.JLabel.setDisplayedMnemonicIndex(int)*

public void setDisplayedMnemonicIndex(int index)
  throws |java.lang.IllegalArgumentException|
         
Provides a hint to the look and feel as to which character in the text should 
be decorated to represent the mnemonic. Not all look and feels may support 
this. A value of -1 indicates either there is no mnemonic, the mnemonic 
character is not contained in the string, or the developer does not wish the 
mnemonic to be displayed. 

The value of this is updated as the properties relating to the mnemonic change 
(such as the mnemonic itself, the text...). You should only ever have to call 
this if you do not wish the default character to be underlined. For example, if 
the text was 'Save As', with a mnemonic of 'a', and you wanted the 'A' to be 
decorated, as 'Save As', you would have to invoke setDisplayedMnemonicIndex(5) 
after invoking setMnemonic(KeyEvent.VK_A). 

    index - Index into the String to underline 

*javax.swing.JLabel.setHorizontalAlignment(int)*

public void setHorizontalAlignment(int alignment)

Sets the alignment of the label's contents along the X axis. 

This is a JavaBeans bound property. 

    alignment - One of the following constants defined in SwingConstants: LEFT, CENTER (the 
       default for image-only labels), RIGHT, LEADING (the default for 
       text-only labels) or TRAILING. 

*javax.swing.JLabel.setHorizontalTextPosition(int)*

public void setHorizontalTextPosition(int textPosition)

Sets the horizontal position of the label's text, relative to its image. 

    textPosition - One of the following constants defined in SwingConstants: LEFT, CENTER, RIGHT, 
       LEADING, or TRAILING (the default). 

*javax.swing.JLabel.setIcon(Icon)*

public void setIcon(javax.swing.Icon icon)

Defines the icon this component will display. If the value of icon is null, 
nothing is displayed. 

The default value of this property is null. 

This is a JavaBeans bound property. 


*javax.swing.JLabel.setIconTextGap(int)*

public void setIconTextGap(int iconTextGap)

If both the icon and text properties are set, this property defines the space 
between them. 

The default value of this property is 4 pixels. 

This is a JavaBeans bound property. 


*javax.swing.JLabel.setLabelFor(Component)*

public void setLabelFor(java.awt.Component c)

Set the component this is labelling. Can be null if this does not label a 
Component. If the displayedMnemonic property is set and the labelFor property 
is also set, the label will call the requestFocus method of the component 
specified by the labelFor property when the mnemonic is activated. 

    c - the Component this label is for, or null if the label is not the label for a 
       component 

*javax.swing.JLabel.setText(String)*

public void setText(java.lang.String text)

Defines the single line of text this component will display. If the value of 
text is null or empty string, nothing is displayed. 

The default value of this property is null. 

This is a JavaBeans bound property. 


*javax.swing.JLabel.setUI(LabelUI)*

public void setUI(javax.swing.plaf.LabelUI ui)

Sets the Lobject that renders this component. 

    ui - the LabelUI Lobject 

*javax.swing.JLabel.setVerticalAlignment(int)*

public void setVerticalAlignment(int alignment)

Sets the alignment of the label's contents along the Y axis. 

The default value of this property is CENTER. 

    alignment - One of the following constants defined in SwingConstants: TOP, CENTER (the 
       default), or BOTTOM. 

*javax.swing.JLabel.setVerticalTextPosition(int)*

public void setVerticalTextPosition(int textPosition)

Sets the vertical position of the label's text, relative to its image. 

The default value of this property is CENTER. 

This is a JavaBeans bound property. 

    textPosition - One of the following constants defined in SwingConstants: TOP, CENTER (the 
       default), or BOTTOM. 

*javax.swing.JLabel.updateUI()*

public void updateUI()

Resets the UI property to a value from the current look and feel. 




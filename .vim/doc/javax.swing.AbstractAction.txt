*javax.swing.AbstractAction* *AbstractAction* This class provides default implem

public abstract class AbstractAction
  extends    |java.lang.Object|
  implements |javax.swing.Action|
             |java.lang.Cloneable|
             |java.io.Serializable|

|javax.swing.AbstractAction_Description|
|javax.swing.AbstractAction_Fields|
|javax.swing.AbstractAction_Constructors|
|javax.swing.AbstractAction_Methods|

================================================================================

*javax.swing.AbstractAction_Fields*
|javax.swing.event.SwingPropertyChangeSupport_javax.swing.AbstractAction.changeSupport|
|boolean_javax.swing.AbstractAction.enabled|

*javax.swing.AbstractAction_Constructors*
|javax.swing.AbstractAction()|Defines an Action object with a default  descript
|javax.swing.AbstractAction(String)|Defines an Action object with the specified
|javax.swing.AbstractAction(String,Icon)|Defines an Action object with the spec

*javax.swing.AbstractAction_Methods*
|javax.swing.AbstractAction.addPropertyChangeListener(PropertyChangeListener)|A
|javax.swing.AbstractAction.clone()|Clones the abstract action.
|javax.swing.AbstractAction.firePropertyChange(String,Object,Object)|Supports r
|javax.swing.AbstractAction.getKeys()|Returns an array of Objects which are key
|javax.swing.AbstractAction.getPropertyChangeListeners()|Returns an array of al
|javax.swing.AbstractAction.getValue(String)|Gets the Object associated with th
|javax.swing.AbstractAction.isEnabled()|Returns true if the action is enabled.
|javax.swing.AbstractAction.putValue(String,Object)|Sets the Value associated w
|javax.swing.AbstractAction.removePropertyChangeListener(PropertyChangeListener)|
|javax.swing.AbstractAction.setEnabled(boolean)|Enables or disables the action.

*javax.swing.AbstractAction_Description*

This class provides default implementations for the JFC Action interface. 
Standard behaviors like the get and set methods for Action object properties 
(icon, text, and enabled) are defined here. The developer need only subclass 
this abstract class and define the actionPerformed method. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.event.SwingPropertyChangeSupport_javax.swing.AbstractAction.changeSupport*

This class provides default implementations for the JFC Action interface. 
Standard behaviors like the get and set methods for Action object properties 
(icon, text, and enabled) are defined here. The developer need only subclass 
this abstract class and define the actionPerformed method. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.AbstractAction.enabled*

This class provides default implementations for the JFC Action interface. 
Standard behaviors like the get and set methods for Action object properties 
(icon, text, and enabled) are defined here. The developer need only subclass 
this abstract class and define the actionPerformed method. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.AbstractAction()*

public AbstractAction()

Defines an Action object with a default description string and default icon. 


*javax.swing.AbstractAction(String)*

public AbstractAction(java.lang.String name)

Defines an Action object with the specified description string and a default 
icon. 


*javax.swing.AbstractAction(String,Icon)*

public AbstractAction(
  java.lang.String name,
  javax.swing.Icon icon)

Defines an Action object with the specified description string and a the 
specified icon. 


*javax.swing.AbstractAction.addPropertyChangeListener(PropertyChangeListener)*

public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener listener)

Adds a PropertyChangeListener to the listener list. The listener is registered 
for all properties. 

A PropertyChangeEvent will get fired in response to setting a bound property, 
e.g. setFont, setBackground, or setForeground. Note that if the current 
component is inheriting its foreground, background, or font from its container, 
then no event will be fired in response to a change in the inherited property. 

    listener - The PropertyChangeListener to be added 

*javax.swing.AbstractAction.clone()*

protected |java.lang.Object| clone()
  throws |java.lang.CloneNotSupportedException|
         
Clones the abstract action. This gives the clone its own copy of the key/value 
list, which is not handled for you by Object.clone(). 


*javax.swing.AbstractAction.firePropertyChange(String,Object,Object)*

protected void firePropertyChange(
  java.lang.String propertyName,
  java.lang.Object oldValue,
  java.lang.Object newValue)

Supports reporting bound property changes. This method can be called when a 
bound property has changed and it will send the appropriate PropertyChangeEvent 
to any registered PropertyChangeListeners. 


*javax.swing.AbstractAction.getKeys()*

public |java.lang.Object| getKeys()

Returns an array of Objects which are keys for which values have been set for 
this AbstractAction, or null if no keys have values set. 


    Returns: an array of key objects, or null if no keys have values set 
*javax.swing.AbstractAction.getPropertyChangeListeners()*

public synchronized |java.beans.PropertyChangeListener| getPropertyChangeListeners()

Returns an array of all the PropertyChangeListeners added to this 
AbstractAction with addPropertyChangeListener(). 


    Returns: all of the PropertyChangeListeners added or an empty array if no listeners have 
             been added 
*javax.swing.AbstractAction.getValue(String)*

public |java.lang.Object| getValue(java.lang.String key)

Gets the Object associated with the specified key. 

    key - a string containing the specified key 

    Returns: the binding Object stored with this key; if there are no keys, it will return 
             null 
*javax.swing.AbstractAction.isEnabled()*

public boolean isEnabled()

Returns true if the action is enabled. 


    Returns: true if the action is enabled, false otherwise 
*javax.swing.AbstractAction.putValue(String,Object)*

public void putValue(
  java.lang.String key,
  java.lang.Object newValue)

Sets the Value associated with the specified key. 

    key - the String that identifies the stored object 
    newValue - the Object to store using this key 

*javax.swing.AbstractAction.removePropertyChangeListener(PropertyChangeListener)*

public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener listener)

Removes a PropertyChangeListener from the listener list. This removes a 
PropertyChangeListener that was registered for all properties. 

    listener - the PropertyChangeListener to be removed 

*javax.swing.AbstractAction.setEnabled(boolean)*

public void setEnabled(boolean newValue)

Enables or disables the action. 

    newValue - true to enable the action, false to disable it 



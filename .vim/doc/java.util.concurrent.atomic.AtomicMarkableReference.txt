*java.util.concurrent.atomic.AtomicMarkableReference* *AtomicMarkableReference* 

public class AtomicMarkableReference
  extends    |java.lang.Object|

|java.util.concurrent.atomic.AtomicMarkableReference_Description|
|java.util.concurrent.atomic.AtomicMarkableReference_Fields|
|java.util.concurrent.atomic.AtomicMarkableReference_Constructors|
|java.util.concurrent.atomic.AtomicMarkableReference_Methods|

================================================================================

*java.util.concurrent.atomic.AtomicMarkableReference_Constructors*
|java.util.concurrent.atomic.AtomicMarkableReference(V,boolean)|Creates a new A

*java.util.concurrent.atomic.AtomicMarkableReference_Methods*
|java.util.concurrent.atomic.AtomicMarkableReference.attemptMark(V,boolean)|Ato
|java.util.concurrent.atomic.AtomicMarkableReference.compareAndSet(V,V,boolean,boolean)|
|java.util.concurrent.atomic.AtomicMarkableReference.get(boolean[])|Returns the
|java.util.concurrent.atomic.AtomicMarkableReference.getReference()|Returns the
|java.util.concurrent.atomic.AtomicMarkableReference.isMarked()|Returns the cur
|java.util.concurrent.atomic.AtomicMarkableReference.set(V,boolean)|Uncondition
|java.util.concurrent.atomic.AtomicMarkableReference.weakCompareAndSet(V,V,boolean,boolean)|

*java.util.concurrent.atomic.AtomicMarkableReference_Description*

An AtomicMarkableReference maintains an object reference along with a mark bit, 
that can be updated atomically. 

Implementation note. This implementation maintains markable references by 
creating internal objects representing "boxed" [reference, boolean] pairs. 


*java.util.concurrent.atomic.AtomicMarkableReference(V,boolean)*

public AtomicMarkableReference(
  java.lang.Object initialRef,
  boolean initialMark)

Creates a new AtomicMarkableReference with the given initial values. 

    initialRef - the initial reference 
    initialMark - the initial mark 

*java.util.concurrent.atomic.AtomicMarkableReference.attemptMark(V,boolean)*

public boolean attemptMark(
  java.lang.Object expectedReference,
  boolean newMark)

Atomically sets the value of the mark to the given update value if the current 
reference is == to the expected reference. Any given invocation of this 
operation may fail (return false) spuriously, but repeated invocation when the 
current value holds the expected value and no other thread is also attempting 
to set the value will eventually succeed. 

    expectedReference - the expected value of the reference 
    newMark - the new value for the mark 

    Returns: true if successful 
*java.util.concurrent.atomic.AtomicMarkableReference.compareAndSet(V,V,boolean,boolean)*

public boolean compareAndSet(
  java.lang.Object expectedReference,
  java.lang.Object newReference,
  boolean expectedMark,
  boolean newMark)

Atomically sets the value of both the reference and mark to the given update 
values if the current reference is == to the expected reference and the current 
mark is equal to the expected mark. 

    expectedReference - the expected value of the reference 
    newReference - the new value for the reference 
    expectedMark - the expected value of the mark 
    newMark - the new value for the mark 

    Returns: true if successful 
*java.util.concurrent.atomic.AtomicMarkableReference.get(boolean[])*

public |java.lang.Object| get(boolean[] markHolder)

Returns the current values of both the reference and the mark. Typical usage is 
boolean[1] holder; ref = v.get(holder); . 

    markHolder - an array of size of at least one. On return, markholder[0] will hold the value 
       of the mark. 

    Returns: the current value of the reference 
*java.util.concurrent.atomic.AtomicMarkableReference.getReference()*

public |java.lang.Object| getReference()

Returns the current value of the reference. 


    Returns: the current value of the reference 
*java.util.concurrent.atomic.AtomicMarkableReference.isMarked()*

public boolean isMarked()

Returns the current value of the mark. 


    Returns: the current value of the mark 
*java.util.concurrent.atomic.AtomicMarkableReference.set(V,boolean)*

public void set(
  java.lang.Object newReference,
  boolean newMark)

Unconditionally sets the value of both the reference and mark. 

    newReference - the new value for the reference 
    newMark - the new value for the mark 

*java.util.concurrent.atomic.AtomicMarkableReference.weakCompareAndSet(V,V,boolean,boolean)*

public boolean weakCompareAndSet(
  java.lang.Object expectedReference,
  java.lang.Object newReference,
  boolean expectedMark,
  boolean newMark)

Atomically sets the value of both the reference and mark to the given update 
values if the current reference is == to the expected reference and the current 
mark is equal to the expected mark. Any given invocation of this operation may 
fail (return false) spuriously, but repeated invocation when the current value 
holds the expected value and no other thread is also attempting to set the 
value will eventually succeed. 

    expectedReference - the expected value of the reference 
    newReference - the new value for the reference 
    expectedMark - the expected value of the mark 
    newMark - the new value for the mark 

    Returns: true if successful 


*java.net.SocketImpl* *SocketImpl* The abstract class SocketImpl is a common sup

public abstract class SocketImpl
  extends    |java.lang.Object|
  implements |java.net.SocketOptions|

|java.net.SocketImpl_Description|
|java.net.SocketImpl_Fields|
|java.net.SocketImpl_Constructors|
|java.net.SocketImpl_Methods|

================================================================================

*java.net.SocketImpl_Fields*
|java.net.InetAddress_java.net.SocketImpl.address|
|java.io.FileDescriptor_java.net.SocketImpl.fd|
|int_java.net.SocketImpl.localport|
|int_java.net.SocketImpl.port|

*java.net.SocketImpl_Constructors*
|java.net.SocketImpl()|

*java.net.SocketImpl_Methods*
|java.net.SocketImpl.accept(SocketImpl)|Accepts a connection.
|java.net.SocketImpl.available()|Returns the number of bytes that can be read f
|java.net.SocketImpl.bind(InetAddress,int)|Binds this socket to the specified l
|java.net.SocketImpl.close()|Closes this socket.
|java.net.SocketImpl.connect(InetAddress,int)|Connects this socket to the speci
|java.net.SocketImpl.connect(SocketAddress,int)|Connects this socket to the spe
|java.net.SocketImpl.connect(String,int)|Connects this socket to the specified 
|java.net.SocketImpl.create(boolean)|Creates either a stream or a datagram sock
|java.net.SocketImpl.getFileDescriptor()|Returns the value of this socket's fd 
|java.net.SocketImpl.getInetAddress()|Returns the value of this socket's addres
|java.net.SocketImpl.getInputStream()|Returns an input stream for this socket.
|java.net.SocketImpl.getLocalPort()|Returns the value of this socket's localpor
|java.net.SocketImpl.getOutputStream()|Returns an output stream for this socket
|java.net.SocketImpl.getPort()|Returns the value of this socket's port field.
|java.net.SocketImpl.listen(int)|Sets the maximum queue length for incoming con
|java.net.SocketImpl.sendUrgentData(int)|Send one byte of urgent data on the so
|java.net.SocketImpl.setPerformancePreferences(int,int,int)|Sets performance pr
|java.net.SocketImpl.shutdownInput()|Places the input stream for this socket at
|java.net.SocketImpl.shutdownOutput()|Disables the output stream for this socke
|java.net.SocketImpl.supportsUrgentData()|Returns whether or not this SocketImp
|java.net.SocketImpl.toString()|Returns the address and port of this socket as 

*java.net.SocketImpl_Description*

The abstract class SocketImpl is a common superclass of all classes that 
actually implement sockets. It is used to create both client and server 
sockets. 

A "plain" socket implements these methods exactly as described, without 
attempting to go through a firewall or proxy. 


*java.net.InetAddress_java.net.SocketImpl.address*

The abstract class SocketImpl is a common superclass of all classes that 
actually implement sockets. It is used to create both client and server 
sockets. 

A "plain" socket implements these methods exactly as described, without 
attempting to go through a firewall or proxy. 


*java.io.FileDescriptor_java.net.SocketImpl.fd*

The abstract class SocketImpl is a common superclass of all classes that 
actually implement sockets. It is used to create both client and server 
sockets. 

A "plain" socket implements these methods exactly as described, without 
attempting to go through a firewall or proxy. 


*int_java.net.SocketImpl.localport*

The abstract class SocketImpl is a common superclass of all classes that 
actually implement sockets. It is used to create both client and server 
sockets. 

A "plain" socket implements these methods exactly as described, without 
attempting to go through a firewall or proxy. 


*int_java.net.SocketImpl.port*

The abstract class SocketImpl is a common superclass of all classes that 
actually implement sockets. It is used to create both client and server 
sockets. 

A "plain" socket implements these methods exactly as described, without 
attempting to go through a firewall or proxy. 



*java.net.SocketImpl()*

public SocketImpl()




*java.net.SocketImpl.accept(SocketImpl)*

protected abstract void accept(java.net.SocketImpl s)
  throws |java.io.IOException|
         
Accepts a connection. 

    s - the accepted connection. 

*java.net.SocketImpl.available()*

protected abstract int available()
  throws |java.io.IOException|
         
Returns the number of bytes that can be read from this socket without blocking. 


    Returns: the number of bytes that can be read from this socket without blocking. 
*java.net.SocketImpl.bind(InetAddress,int)*

protected abstract void bind(
  java.net.InetAddress host,
  int port)
  throws |java.io.IOException|
         
Binds this socket to the specified local IP address and port number. 

    host - an IP address that belongs to a local interface. 
    port - the port number. 

*java.net.SocketImpl.close()*

protected abstract void close()
  throws |java.io.IOException|
         
Closes this socket. 


*java.net.SocketImpl.connect(InetAddress,int)*

protected abstract void connect(
  java.net.InetAddress address,
  int port)
  throws |java.io.IOException|
         
Connects this socket to the specified port number on the specified host. 

    address - the IP address of the remote host. 
    port - the port number. 

*java.net.SocketImpl.connect(SocketAddress,int)*

protected abstract void connect(
  java.net.SocketAddress address,
  int timeout)
  throws |java.io.IOException|
         
Connects this socket to the specified port number on the specified host. A 
timeout of zero is interpreted as an infinite timeout. The connection will then 
block until established or an error occurs. 

    address - the Socket address of the remote host. 
    timeout - the timeout value, in milliseconds, or zero for no timeout. 

*java.net.SocketImpl.connect(String,int)*

protected abstract void connect(
  java.lang.String host,
  int port)
  throws |java.io.IOException|
         
Connects this socket to the specified port on the named host. 

    host - the name of the remote host. 
    port - the port number. 

*java.net.SocketImpl.create(boolean)*

protected abstract void create(boolean stream)
  throws |java.io.IOException|
         
Creates either a stream or a datagram socket. 

    stream - if true, create a stream socket; otherwise, create a datagram socket. 

*java.net.SocketImpl.getFileDescriptor()*

protected |java.io.FileDescriptor| getFileDescriptor()

Returns the value of this socket's fd field. 


    Returns: the value of this socket's fd field. 
*java.net.SocketImpl.getInetAddress()*

protected |java.net.InetAddress| getInetAddress()

Returns the value of this socket's address field. 


    Returns: the value of this socket's address field. 
*java.net.SocketImpl.getInputStream()*

protected abstract |java.io.InputStream| getInputStream()
  throws |java.io.IOException|
         
Returns an input stream for this socket. 


    Returns: a stream for reading from this socket. 
*java.net.SocketImpl.getLocalPort()*

protected int getLocalPort()

Returns the value of this socket's localport field. 


    Returns: the value of this socket's localport field. 
*java.net.SocketImpl.getOutputStream()*

protected abstract |java.io.OutputStream| getOutputStream()
  throws |java.io.IOException|
         
Returns an output stream for this socket. 


    Returns: an output stream for writing to this socket. 
*java.net.SocketImpl.getPort()*

protected int getPort()

Returns the value of this socket's port field. 


    Returns: the value of this socket's port field. 
*java.net.SocketImpl.listen(int)*

protected abstract void listen(int backlog)
  throws |java.io.IOException|
         
Sets the maximum queue length for incoming connection indications (a request to 
connect) to the count argument. If a connection indication arrives when the 
queue is full, the connection is refused. 

    backlog - the maximum length of the queue. 

*java.net.SocketImpl.sendUrgentData(int)*

protected abstract void sendUrgentData(int data)
  throws |java.io.IOException|
         
Send one byte of urgent data on the socket. The byte to be sent is the low 
eight bits of the parameter 

    data - The byte of data to send 

*java.net.SocketImpl.setPerformancePreferences(int,int,int)*

protected void setPerformancePreferences(
  int connectionTime,
  int latency,
  int bandwidth)

Sets performance preferences for this socket. 

Sockets use the TCP/IP protocol by default. Some implementations may offer 
alternative protocols which have different performance characteristics than 
TCP/IP. This method allows the application to express its own preferences as to 
how these tradeoffs should be made when the implementation chooses from the 
available protocols. 

Performance preferences are described by three integers whose values indicate 
the relative importance of short connection time, low latency, and high 
bandwidth. The absolute values of the integers are irrelevant; in order to 
choose a protocol the values are simply compared, with larger values indicating 
stronger preferences. Negative values represent a lower priority than positive 
values. If the application prefers short connection time over both low latency 
and high bandwidth, for example, then it could invoke this method with the 
values (1, 0, 0). If the application prefers high bandwidth above low latency, 
and low latency above short connection time, then it could invoke this method 
with the values (0, 1, 2). 

By default, this method does nothing, unless it is overridden in a a sub-class. 

    connectionTime - An int expressing the relative importance of a short connection time 
    latency - An int expressing the relative importance of low latency 
    bandwidth - An int expressing the relative importance of high bandwidth 

*java.net.SocketImpl.shutdownInput()*

protected void shutdownInput()
  throws |java.io.IOException|
         
Places the input stream for this socket at "end of stream". Any data sent to 
this socket is acknowledged and then silently discarded. 

If you read from a socket input stream after invoking shutdownInput() on the 
socket, the stream will return EOF. 


*java.net.SocketImpl.shutdownOutput()*

protected void shutdownOutput()
  throws |java.io.IOException|
         
Disables the output stream for this socket. For a TCP socket, any previously 
written data will be sent followed by TCP's normal connection termination 
sequence. 

If you write to a socket output stream after invoking shutdownOutput() on the 
socket, the stream will throw an IOException. 


*java.net.SocketImpl.supportsUrgentData()*

protected boolean supportsUrgentData()

Returns whether or not this SocketImpl supports sending urgent data. By 
default, false is returned unless the method is overridden in a sub-class 


    Returns: true if urgent data supported 
*java.net.SocketImpl.toString()*

public |java.lang.String| toString()

Returns the address and port of this socket as a String. 


    Returns: a string representation of this socket. 


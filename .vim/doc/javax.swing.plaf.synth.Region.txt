*javax.swing.plaf.synth.Region* *Region* A distinct rendering area of a Swing co

public class Region
  extends    |java.lang.Object|

|javax.swing.plaf.synth.Region_Description|
|javax.swing.plaf.synth.Region_Fields|
|javax.swing.plaf.synth.Region_Constructors|
|javax.swing.plaf.synth.Region_Methods|

================================================================================

*javax.swing.plaf.synth.Region_Fields*
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.ARROW_BUTTON|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.BUTTON|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.CHECK_BOX|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.CHECK_BOX_MENU_ITEM|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.COLOR_CHOOSER|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.COMBO_BOX|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.DESKTOP_ICON|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.DESKTOP_PANE|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.EDITOR_PANE|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.FILE_CHOOSER|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.FORMATTED_TEXT_FIELD|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.INTERNAL_FRAME|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.INTERNAL_FRAME_TITLE_PANE|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.LABEL|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.LIST|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.MENU|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.MENU_BAR|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.MENU_ITEM|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.MENU_ITEM_ACCELERATOR|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.OPTION_PANE|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.PANEL|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.PASSWORD_FIELD|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.POPUP_MENU|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.POPUP_MENU_SEPARATOR|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.PROGRESS_BAR|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.RADIO_BUTTON|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.RADIO_BUTTON_MENU_ITEM|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.ROOT_PANE|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SCROLL_BAR|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SCROLL_BAR_THUMB|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SCROLL_BAR_TRACK|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SCROLL_PANE|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SEPARATOR|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SLIDER|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SLIDER_THUMB|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SLIDER_TRACK|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SPINNER|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SPLIT_PANE|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SPLIT_PANE_DIVIDER|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TABBED_PANE|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TABBED_PANE_CONTENT|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TABBED_PANE_TAB|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TABBED_PANE_TAB_AREA|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TABLE|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TABLE_HEADER|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TEXT_AREA|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TEXT_FIELD|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TEXT_PANE|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TOGGLE_BUTTON|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TOOL_BAR|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TOOL_BAR_CONTENT|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TOOL_BAR_DRAG_WINDOW|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TOOL_BAR_SEPARATOR|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TOOL_TIP|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TREE|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TREE_CELL|
|javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.VIEWPORT|

*javax.swing.plaf.synth.Region_Constructors*
|javax.swing.plaf.synth.Region(String,String,boolean)|Creates a Region with the

*javax.swing.plaf.synth.Region_Methods*
|javax.swing.plaf.synth.Region.getName()|Returns the name of the region.
|javax.swing.plaf.synth.Region.isSubregion()|Returns true if the Region is a su
|javax.swing.plaf.synth.Region.toString()|Returns the name of the Region.

*javax.swing.plaf.synth.Region_Description*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.ARROW_BUTTON*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.BUTTON*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.CHECK_BOX*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.CHECK_BOX_MENU_ITEM*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.COLOR_CHOOSER*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.COMBO_BOX*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.DESKTOP_ICON*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.DESKTOP_PANE*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.EDITOR_PANE*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.FILE_CHOOSER*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.FORMATTED_TEXT_FIELD*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.INTERNAL_FRAME*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.INTERNAL_FRAME_TITLE_PANE*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.LABEL*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.LIST*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.MENU*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.MENU_BAR*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.MENU_ITEM*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.MENU_ITEM_ACCELERATOR*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.OPTION_PANE*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.PANEL*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.PASSWORD_FIELD*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.POPUP_MENU*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.POPUP_MENU_SEPARATOR*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.PROGRESS_BAR*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.RADIO_BUTTON*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.RADIO_BUTTON_MENU_ITEM*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.ROOT_PANE*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SCROLL_BAR*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SCROLL_BAR_THUMB*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SCROLL_BAR_TRACK*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SCROLL_PANE*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SEPARATOR*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SLIDER*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SLIDER_THUMB*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SLIDER_TRACK*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SPINNER*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SPLIT_PANE*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.SPLIT_PANE_DIVIDER*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TABBED_PANE*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TABBED_PANE_CONTENT*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TABBED_PANE_TAB*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TABBED_PANE_TAB_AREA*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TABLE*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TABLE_HEADER*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TEXT_AREA*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TEXT_FIELD*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TEXT_PANE*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TOGGLE_BUTTON*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TOOL_BAR*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TOOL_BAR_CONTENT*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TOOL_BAR_DRAG_WINDOW*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TOOL_BAR_SEPARATOR*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TOOL_TIP*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TREE*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.TREE_CELL*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 


*javax.swing.plaf.synth.Region_javax.swing.plaf.synth.Region.VIEWPORT*

A distinct rendering area of a Swing component. A component may support one or 
more regions. Specific component regions are defined by the typesafe 
enumeration in this class. 

Regions are typically used as a way to identify the Components and areas a 
particular style is to apply to. Synth's file format allows you to bind styles 
based on the name of a Region. The name is derived from the field name of the 
constant: 

Map all characters to lowercase. Map the first character to uppercase. Map the 
first character after underscores to uppercase. Remove all underscores. 

For example, to identify the SPLIT_PANE Region you would use SplitPane. The 
following shows a custom SynthStyleFactory that returns a specific style for 
split panes: 

public SynthStyle getStyle(JComponent c, Region id) { if (id == 
Region.SPLIT_PANE) { return splitPaneStyle; } ... } 

The following xml accomplishes the same thing: 

<style id="splitPaneStyle"> ... </style> <bind style="splitPaneStyle" 
type="region" key="SplitPane"/> 



*javax.swing.plaf.synth.Region(String,String,boolean)*

protected Region(
  java.lang.String name,
  java.lang.String ui,
  boolean subregion)

Creates a Region with the specified name. This should only be used if you are 
creating your own JComponent subclass with a custom ComponentUI class. 

    name - Name of the region 
    ui - String that will be returned from component.getUIClassID. This will be null if 
       this is a subregion. 
    subregion - Whether or not this is a subregion. 

*javax.swing.plaf.synth.Region.getName()*

public |java.lang.String| getName()

Returns the name of the region. 


    Returns: name of the Region. 
*javax.swing.plaf.synth.Region.isSubregion()*

public boolean isSubregion()

Returns true if the Region is a subregion of a Component, otherwise false. For 
example, Region.BUTTON corresponds do a Component so that 
Region.BUTTON.isSubregion() returns false. 


    Returns: true if the Region is a subregion of a Component. 
*javax.swing.plaf.synth.Region.toString()*

public |java.lang.String| toString()

Returns the name of the Region. 


    Returns: name of the Region. 


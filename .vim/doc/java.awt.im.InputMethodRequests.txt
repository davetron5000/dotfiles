*java.awt.im.InputMethodRequests* *InputMethodRequests* InputMethodRequests defi

public interface interface InputMethodRequests


|java.awt.im.InputMethodRequests_Description|
|java.awt.im.InputMethodRequests_Fields|
|java.awt.im.InputMethodRequests_Constructors|
|java.awt.im.InputMethodRequests_Methods|

================================================================================

*java.awt.im.InputMethodRequests_Methods*
|java.awt.im.InputMethodRequests.cancelLatestCommittedText(AttributedCharacterIterator.Attribute[])|
|java.awt.im.InputMethodRequests.getCommittedText(int,int,AttributedCharacterIterator.Attribute[])|
|java.awt.im.InputMethodRequests.getCommittedTextLength()|Gets the length of th
|java.awt.im.InputMethodRequests.getInsertPositionOffset()|Gets the offset of t
|java.awt.im.InputMethodRequests.getLocationOffset(int,int)|Gets the offset wit
|java.awt.im.InputMethodRequests.getSelectedText(AttributedCharacterIterator.Attribute[])|
|java.awt.im.InputMethodRequests.getTextLocation(TextHitInfo)|Gets the location

*java.awt.im.InputMethodRequests_Description*

InputMethodRequests defines the requests that a text editing component has to 
handle in order to work with input methods. The component can implement this 
interface itself or use a separate object that implements it. The object 
implementing this interface must be returned from the component's 
getInputMethodRequests method. 

The text editing component also has to provide an input method event listener. 

The interface is designed to support one of two input user interfaces: 

on-the-spot input, where the composed text is displayed as part of the text 
component's text body. below-the-spot input, where the composed text is 
displayed in a separate composition window just below the insertion point where 
the text will be inserted when it is committed. Note that, if text is selected 
within the component's text body, this text will be replaced by the committed 
text upon commitment; therefore it is not considered part of the context that 
the text is input into. 


*java.awt.im.InputMethodRequests.cancelLatestCommittedText(AttributedCharacterIterator.Attribute[])*

public |java.text.AttributedCharacterIterator| cancelLatestCommittedText(java.text.AttributedCharacterIterator.Attribute[] attributes)

Gets the latest committed text from the text editing component and removes it 
from the component's text body. This is used for the "Undo Commit" feature in 
some input methods, where the committed text reverts to its previous composed 
state. The composed text will be sent to the component using an 
InputMethodEvent. 

Generally, this feature should only be supported immediately after the text was 
committed, not after the user performed other operations on the text. When the 
feature is not supported, return null. 

The input method may provide a list of attributes that it is interested in. In 
that case, information about other attributes that the implementor may have 
need not be made accessible through the iterator. If the list is null, all 
available attribute information should be made accessible. 

    attributes - a list of attributes that the input method is interested in 

    Returns: the latest committed text, or null when the "Undo Commit" feature is not 
             supported 
*java.awt.im.InputMethodRequests.getCommittedText(int,int,AttributedCharacterIterator.Attribute[])*

public |java.text.AttributedCharacterIterator| getCommittedText(
  int beginIndex,
  int endIndex,
  java.text.AttributedCharacterIterator.Attribute[] attributes)

Gets an iterator providing access to the entire text and attributes contained 
in the text editing component except for uncommitted text. Uncommitted 
(composed) text should be ignored for index calculations and should not be made 
accessible through the iterator. 

The input method may provide a list of attributes that it is interested in. In 
that case, information about other attributes that the implementor may have 
need not be made accessible through the iterator. If the list is null, all 
available attribute information should be made accessible. 

    beginIndex - the index of the first character 
    endIndex - the index of the character following the last character 
    attributes - a list of attributes that the input method is interested in 

    Returns: an iterator providing access to the text and its attributes 
*java.awt.im.InputMethodRequests.getCommittedTextLength()*

public int getCommittedTextLength()

Gets the length of the entire text contained in the text editing component 
except for uncommitted (composed) text. 


    Returns: the length of the text except for uncommitted text 
*java.awt.im.InputMethodRequests.getInsertPositionOffset()*

public int getInsertPositionOffset()

Gets the offset of the insert position in the committed text contained in the 
text editing component. This is the offset at which characters entered through 
an input method are inserted. This information is used by an input method, for 
example, to examine the text surrounding the insert position. 


    Returns: the offset of the insert position 
*java.awt.im.InputMethodRequests.getLocationOffset(int,int)*

public |java.awt.font.TextHitInfo| getLocationOffset(
  int x,
  int y)

Gets the offset within the composed text for the specified absolute x and y 
coordinates on the screen. This information is used, for example to handle 
mouse clicks and the mouse cursor. The offset is relative to the composed text, 
so offset 0 indicates the beginning of the composed text. 

Return null if the location is outside the area occupied by the composed text. 

    x - the absolute x coordinate on screen 
    y - the absolute y coordinate on screen 

    Returns: a text hit info describing the offset in the composed text. 
*java.awt.im.InputMethodRequests.getSelectedText(AttributedCharacterIterator.Attribute[])*

public |java.text.AttributedCharacterIterator| getSelectedText(java.text.AttributedCharacterIterator.Attribute[] attributes)

Gets the currently selected text from the text editing component. This may be 
used for a variety of purposes. One of them is the "Reconvert" feature in some 
input methods. In this case, the input method will typically send an input 
method event to replace the selected text with composed text. Depending on the 
input method's capabilities, this may be the original composed text for the 
selected text, the latest composed text entered anywhere in the text, or a 
version of the text that's converted back from the selected text. 

The input method may provide a list of attributes that it is interested in. In 
that case, information about other attributes that the implementor may have 
need not be made accessible through the iterator. If the list is null, all 
available attribute information should be made accessible. 

    attributes - a list of attributes that the input method is interested in 

    Returns: the currently selected text 
*java.awt.im.InputMethodRequests.getTextLocation(TextHitInfo)*

public |java.awt.Rectangle| getTextLocation(java.awt.font.TextHitInfo offset)

Gets the location of a specified offset in the current composed text, or of the 
selection in committed text. This information is, for example, used to position 
the candidate window near the composed text, or a composition window near the 
location where committed text will be inserted. 

If the component has composed text (because the most recent InputMethodEvent 
sent to it contained composed text), then the offset is relative to the 
composed text - offset 0 indicates the first character in the composed text. 
The location returned should be for this character. 

If the component doesn't have composed text, the offset should be ignored, and 
the location returned should reflect the beginning (in line direction) of the 
highlight in the last line containing selected text. For example, for 
horizontal left-to-right text (such as English), the location to the left of 
the left-most character on the last line containing selected text is returned. 
For vertical top-to-bottom text, with lines proceding from right to left, the 
location to the top of the left-most line containing selected text is returned. 

The location is represented as a 0-thickness caret, that is, it has 0 width if 
the text is drawn horizontally, and 0 height if the text is drawn vertically. 
Other text orientations need to be mapped to horizontal or vertical 
orientation. The rectangle uses absolute screen coordinates. 

    offset - the offset within the composed text, if there is composed text; null otherwise 

    Returns: a rectangle representing the screen location of the offset 


*java.util.Enumeration* *Enumeration* An object that implements the Enumeration 

public interface interface Enumeration


|java.util.Enumeration_Description|
|java.util.Enumeration_Fields|
|java.util.Enumeration_Constructors|
|java.util.Enumeration_Methods|

================================================================================

*java.util.Enumeration_Methods*
|java.util.Enumeration.hasMoreElements()|Tests if this enumeration contains mor
|java.util.Enumeration.nextElement()|Returns the next element of this enumerati

*java.util.Enumeration_Description*

An object that implements the Enumeration interface generates a series of 
elements, one at a time. Successive calls to the nextElement method return 
successive elements of the series. 

For example, to print all elements of a vector v: 

for (Enumeration e = v.elements() ; e.hasMoreElements() ;) { 
System.out.println(e.nextElement()); } 

Methods are provided to enumerate through the elements of a vector, the keys of 
a hashtable, and the values in a hashtable. Enumerations are also used to 
specify the input streams to a SequenceInputStream. 

NOTE: The functionality of this interface is duplicated by the Iterator 
interface. In addition, Iterator adds an optional remove operation, and has 
shorter method names. New implementations should consider using Iterator in 
preference to Enumeration. 


*java.util.Enumeration.hasMoreElements()*

public boolean hasMoreElements()

Tests if this enumeration contains more elements. 


    Returns: true if and only if this enumeration object contains at least one more element 
             to provide; false otherwise. 
*java.util.Enumeration.nextElement()*

public |java.lang.Object| nextElement()

Returns the next element of this enumeration if this enumeration object has at 
least one more element to provide. 


    Returns: the next element of this enumeration. 


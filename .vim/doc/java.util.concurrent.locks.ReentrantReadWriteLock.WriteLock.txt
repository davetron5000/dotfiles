*java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock* *ReentrantReadWriteLock.WriteLock* 

public static class ReentrantReadWriteLock.WriteLock
  extends    |java.lang.Object|
  implements |java.util.concurrent.locks.Lock|
             |java.io.Serializable|

|java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock_Description|
|java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock_Fields|
|java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock_Constructors|
|java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock_Methods|

================================================================================

*java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock_Constructors*
|java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock(ReentrantReadWriteLock)|

*java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock_Methods*
|java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.lock()|Acquire the
|java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.lockInterruptibly()|
|java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.newCondition()|Ret
|java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.toString()|Returns
|java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.tryLock()|Acquires
|java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.tryLock(long,TimeUnit)|
|java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock()|Attempts 

*java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock_Description*

The lock returned by method 
(|java.util.concurrent.locks.ReentrantReadWriteLock|) . 


*java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock(ReentrantReadWriteLock)*

protected ReentrantReadWriteLock.WriteLock(java.util.concurrent.locks.ReentrantReadWriteLock lock)

Constructor for use by subclasses 

    lock - the outer lock object 

*java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.lock()*

public void lock()

Acquire the write lock. 

Acquires the write lock if neither the read nor write lock are held by another 
thread and returns immediately, setting the write lock hold count to one. 

If the current thread already holds the write lock then the hold count is 
incremented by one and the method returns immediately. 

If the lock is held by another thread then the current thread becomes disabled 
for thread scheduling purposes and lies dormant until the write lock has been 
acquired, at which time the write lock hold count is set to one. 


*java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.lockInterruptibly()*

public void lockInterruptibly()
  throws |java.lang.InterruptedException|
         
Acquires the write lock unless the current thread is 
interrupted(|java.lang.Thread|) . 

Acquires the write lock if neither the read nor write lock are held by another 
thread and returns immediately, setting the write lock hold count to one. 

If the current thread already holds this lock then the hold count is 
incremented by one and the method returns immediately. 

If the lock is held by another thread then the current thread becomes disabled 
for thread scheduling purposes and lies dormant until one of two things 
happens: 



The write lock is acquired by the current thread; or 

Some other thread interrupts(|java.lang.Thread|) the current thread. 



If the write lock is acquired by the current thread then the lock hold count is 
set to one. 

If the current thread: 



has its interrupted status set on entry to this method; or 

is interrupted(|java.lang.Thread|) while acquiring the write lock, 



then (|java.lang.InterruptedException|) is thrown and the current thread's 
interrupted status is cleared. 

In this implementation, as this method is an explicit interruption point, 
preference is given to responding to the interrupt over normal or reentrant 
acquisition of the lock. 


*java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.newCondition()*

public |java.util.concurrent.locks.Condition| newCondition()

Returns a (|java.util.concurrent.locks.Condition|) instance for use with this 
(|java.util.concurrent.locks.Lock|) instance. The returned 
(|java.util.concurrent.locks.Condition|) instance supports the same usages as 
do the (|java.lang.Object|) monitor methods ( wait(|java.lang.Object|) , 
notify(|java.lang.Object|) , and notifyAll(|java.lang.Object|) ) when used with 
the built-in monitor lock. 



If this write lock is not held when any 
(|java.util.concurrent.locks.Condition|) method is called then an 
(|java.lang.IllegalMonitorStateException|) is thrown. (Read locks are held 
independently of write locks, so are not checked or affected. However it is 
essentially always an error to invoke a condition waiting method when the 
current thread has also acquired read locks, since other threads that could 
unblock it will not be able to acquire the write lock.) 

When the condition waiting(|java.util.concurrent.locks.Condition|) methods are 
called the write lock is released and, before they return, the write lock is 
reacquired and the lock hold count restored to what it was when the method was 
called. 

If a thread is interrupted(|java.lang.Thread|) while waiting then the wait will 
terminate, an (|java.lang.InterruptedException|) will be thrown, and the 
thread's interrupted status will be cleared. 

Waiting threads are signalled in FIFO order. 

The ordering of lock reacquisition for threads returning from waiting methods 
is the same as for threads initially acquiring the lock, which is in the 
default case not specified, but for fair locks favors those threads that have 
been waiting the longest. 




    Returns: the Condition object 
*java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.toString()*

public |java.lang.String| toString()

Returns a string identifying this lock, as well as its lock state. The state, 
in brackets includes either the String Unlocked or the String Locked by 
followed by the (|java.lang.Thread|) of the owning thread. 


    Returns: a string identifying this lock, as well as its lock state. 
*java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.tryLock()*

public boolean tryLock()

Acquires the write lock only if it is not held by another thread at the time of 
invocation. 

Acquires the write lock if neither the read nor write lock are held by another 
thread and returns immediately with the value true, setting the write lock hold 
count to one. Even when this lock has been set to use a fair ordering policy, a 
call to tryLock() will immediately acquire the lock if it is available, whether 
or not other threads are currently waiting for the write lock. This barging 
behavior can be useful in certain circumstances, even though it breaks 
fairness. If you want to honor the fairness setting for this lock, then use 
tryLock(0, TimeUnit.SECONDS) 
(|java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock|) which is almost 
equivalent (it also detects interruption). 

If the current thread already holds this lock then the hold count is 
incremented by one and the method returns true. 

If the lock is held by another thread then this method will return immediately 
with the value false. 


    Returns: true if the lock was free and was acquired by the current thread, or the write 
             lock was already held by the current thread; and false otherwise. 
*java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.tryLock(long,TimeUnit)*

public boolean tryLock(
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         
Acquires the write lock if it is not held by another thread within the given 
waiting time and the current thread has not been 
interrupted(|java.lang.Thread|) . 

Acquires the write lock if neither the read nor write lock are held by another 
thread and returns immediately with the value true, setting the write lock hold 
count to one. If this lock has been set to use a fair ordering policy then an 
available lock will not be acquired if any other threads are waiting for the 
write lock. This is in contrast to the 
(|java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock|) method. If you 
want a timed tryLock that does permit barging on a fair lock then combine the 
timed and un-timed forms together: 

if (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... } 

If the current thread already holds this lock then the hold count is 
incremented by one and the method returns true. 

If the lock is held by another thread then the current thread becomes disabled 
for thread scheduling purposes and lies dormant until one of three things 
happens: 



The write lock is acquired by the current thread; or 

Some other thread interrupts(|java.lang.Thread|) the current thread; or 

The specified waiting time elapses 



If the write lock is acquired then the value true is returned and the write 
lock hold count is set to one. 

If the current thread: 



has its interrupted status set on entry to this method; or 

is interrupted(|java.lang.Thread|) while acquiring the write lock, 



then (|java.lang.InterruptedException|) is thrown and the current thread's 
interrupted status is cleared. 

If the specified waiting time elapses then the value false is returned. If the 
time is less than or equal to zero, the method will not wait at all. 

In this implementation, as this method is an explicit interruption point, 
preference is given to responding to the interrupt over normal or reentrant 
acquisition of the lock, and over reporting the elapse of the waiting time. 

    timeout - the time to wait for the write lock 
    unit - the time unit of the timeout argument 

    Returns: true if the lock was free and was acquired by the current thread, or the write 
             lock was already held by the current thread; and false if the 
             waiting time elapsed before the lock could be acquired. 
*java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock()*

public void unlock()

Attempts to release this lock. 

If the current thread is the holder of this lock then the hold count is 
decremented. If the hold count is now zero then the lock is released. If the 
current thread is not the holder of this lock then 
(|java.lang.IllegalMonitorStateException|) is thrown. 




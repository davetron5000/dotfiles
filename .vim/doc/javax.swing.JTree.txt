*javax.swing.JTree* *JTree* 
 A control that displays a set of hierarchical data as an outline.

public class JTree
  extends    |javax.swing.JComponent|
  implements |javax.swing.Scrollable|
             |javax.accessibility.Accessible|

|javax.swing.JTree_Description|
|javax.swing.JTree_Fields|
|javax.swing.JTree_Constructors|
|javax.swing.JTree_Methods|

====================================================================================================================================================================================

*javax.swing.JTree_Fields*
|java.lang.String_javax.swing.JTree.ANCHOR_SELECTION_PATH_PROPERTY|
|java.lang.String_javax.swing.JTree.CELL_EDITOR_PROPERTY|
|java.lang.String_javax.swing.JTree.CELL_RENDERER_PROPERTY|
|javax.swing.tree.TreeCellEditor_javax.swing.JTree.cellEditor|
|javax.swing.tree.TreeCellRenderer_javax.swing.JTree.cellRenderer|
|boolean_javax.swing.JTree.editable|
|java.lang.String_javax.swing.JTree.EDITABLE_PROPERTY|
|java.lang.String_javax.swing.JTree.EXPANDS_SELECTED_PATHS_PROPERTY|
|java.lang.String_javax.swing.JTree.INVOKES_STOP_CELL_EDITING_PROPERTY|
|boolean_javax.swing.JTree.invokesStopCellEditing|
|java.lang.String_javax.swing.JTree.LARGE_MODEL_PROPERTY|
|boolean_javax.swing.JTree.largeModel|
|java.lang.String_javax.swing.JTree.LEAD_SELECTION_PATH_PROPERTY|
|java.lang.String_javax.swing.JTree.ROOT_VISIBLE_PROPERTY|
|boolean_javax.swing.JTree.rootVisible|
|java.lang.String_javax.swing.JTree.ROW_HEIGHT_PROPERTY|
|int_javax.swing.JTree.rowHeight|
|java.lang.String_javax.swing.JTree.SCROLLS_ON_EXPAND_PROPERTY|
|boolean_javax.swing.JTree.scrollsOnExpand|
|java.lang.String_javax.swing.JTree.SELECTION_MODEL_PROPERTY|
|javax.swing.tree.TreeSelectionModel_javax.swing.JTree.selectionModel|
|javax.swing.JTree.TreeSelectionRedirector_javax.swing.JTree.selectionRedirector|
|java.lang.String_javax.swing.JTree.SHOWS_ROOT_HANDLES_PROPERTY|
|boolean_javax.swing.JTree.showsRootHandles|
|java.lang.String_javax.swing.JTree.TOGGLE_CLICK_COUNT_PROPERTY|
|int_javax.swing.JTree.toggleClickCount|
|java.lang.String_javax.swing.JTree.TREE_MODEL_PROPERTY|
|javax.swing.tree.TreeModel_javax.swing.JTree.treeModel|
|javax.swing.event.TreeModelListener_javax.swing.JTree.treeModelListener|
|java.lang.String_javax.swing.JTree.VISIBLE_ROW_COUNT_PROPERTY|
|int_javax.swing.JTree.visibleRowCount|

*javax.swing.JTree_Constructors*
|javax.swing.JTree()|Returns a JTree with a sample model.
|javax.swing.JTree(Hashtable<?,?>)|Returns a JTree created from a Hashtable  which does not display with root.
|javax.swing.JTree(Object[])|Returns a JTree with each element of the  specified array as the  child of a new root node which is not displayed.
|javax.swing.JTree(TreeModel)|Returns an instance of JTree which displays the root node   -- the tree is created using the specified data model.
|javax.swing.JTree(TreeNode)|Returns a JTree with the specified  TreeNode as its root,  which displays the root node.
|javax.swing.JTree(TreeNode,boolean)|Returns a JTree with the specified TreeNode  as its root, which   displays the root node and which decides whether a node is a   leaf node in 
|javax.swing.JTree(Vector<?>)|Returns a JTree with each element of the specified  Vector as the  child of a new root node which is not displayed.

*javax.swing.JTree_Methods*
|javax.swing.JTree.addSelectionInterval(int,int)|Adds the paths between index0 and index1, inclusive, to the   selection.
|javax.swing.JTree.addSelectionPath(TreePath)|Adds the node identified by the specified TreePath  to the current selection.
|javax.swing.JTree.addSelectionPaths(TreePath[])|Adds each path in the array of paths to the current selection.
|javax.swing.JTree.addSelectionRow(int)|Adds the path at the specified row to the current selection.
|javax.swing.JTree.addSelectionRows(int[])|Adds the paths at each of the specified rows to the current selection.
|javax.swing.JTree.addTreeExpansionListener(TreeExpansionListener)|Adds a listener for TreeExpansion events.
|javax.swing.JTree.addTreeSelectionListener(TreeSelectionListener)|Adds a listener for TreeSelection events.
|javax.swing.JTree.addTreeWillExpandListener(TreeWillExpandListener)|Adds a listener for TreeWillExpand events.
|javax.swing.JTree.cancelEditing()|Cancels the current editing session.
|javax.swing.JTree.clearSelection()|Clears the selection.
|javax.swing.JTree.clearToggledPaths()|Clears the cache of toggled tree paths.
|javax.swing.JTree.collapsePath(TreePath)|Ensures that the node identified by the specified path is   collapsed and viewable.
|javax.swing.JTree.collapseRow(int)|Ensures that the node in the specified row is collapsed.
|javax.swing.JTree.convertValueToText(Object,boolean,boolean,boolean,int,boolean)|Called by the renderers to convert the specified value to  text.
|javax.swing.JTree.createTreeModel(Object)|Returns a TreeModel wrapping the specified object.
|javax.swing.JTree.createTreeModelListener()|Creates and returns an instance of TreeModelHandler.
|javax.swing.JTree.expandPath(TreePath)|Ensures that the node identified by the specified path is   expanded and viewable.
|javax.swing.JTree.expandRow(int)|Ensures that the node in the specified row is expanded and  viewable.
|javax.swing.JTree.fireTreeCollapsed(TreePath)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.JTree.fireTreeExpanded(TreePath)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.JTree.fireTreeWillCollapse(TreePath)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.JTree.fireTreeWillExpand(TreePath)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.JTree.fireValueChanged(TreeSelectionEvent)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.JTree.getAccessibleContext()|Gets the AccessibleContext associated with this JTree.
|javax.swing.JTree.getAnchorSelectionPath()|Returns the path identified as the anchor.
|javax.swing.JTree.getCellEditor()|Returns the editor used to edit entries in the tree.
|javax.swing.JTree.getCellRenderer()|Returns the current TreeCellRenderer   that is rendering each cell.
|javax.swing.JTree.getClosestPathForLocation(int,int)|Returns the path to the node that is closest to x,y.
|javax.swing.JTree.getClosestRowForLocation(int,int)|Returns the row to the node that is closest to x,y.
|javax.swing.JTree.getDefaultTreeModel()|Creates and returns a sample TreeModel.
|javax.swing.JTree.getDescendantToggledPaths(TreePath)|Returns an Enumeration of TreePaths  that have been expanded that  are descendants of parent.
|javax.swing.JTree.getDragEnabled()|Gets the value of the dragEnabled property.
|javax.swing.JTree.getEditingPath()|Returns the path to the element that is currently being edited.
|javax.swing.JTree.getExpandedDescendants(TreePath)|Returns an Enumeration of the descendants of the  path parent that  are currently expanded.
|javax.swing.JTree.getExpandsSelectedPaths()|Returns the expandsSelectedPaths property.
|javax.swing.JTree.getInvokesStopCellEditing()|Returns the indicator that tells what happens when editing is   interrupted.
|javax.swing.JTree.getLastSelectedPathComponent()|Returns the last path component in the first node of the current   selection.
|javax.swing.JTree.getLeadSelectionPath()|Returns the path identified as the lead.
|javax.swing.JTree.getLeadSelectionRow()|Returns the row index corresponding to the lead path.
|javax.swing.JTree.getMaxSelectionRow()|Returns the last selected row.
|javax.swing.JTree.getMinSelectionRow()|Gets the first selected row.
|javax.swing.JTree.getModel()|Returns the TreeModel that is providing the data.
|javax.swing.JTree.getNextMatch(String,int,Position.Bias)|Returns the TreePath to the next tree element that   begins with a prefix.
|javax.swing.JTree.getPathBetweenRows(int,int)|Returns JTreePath instances representing the path  between index0 and index1 (including index1).
|javax.swing.JTree.getPathBounds(TreePath)|Returns the Rectangle that the specified node will be drawn  into.
|javax.swing.JTree.getPathForLocation(int,int)|Returns the path for the node at the specified location.
|javax.swing.JTree.getPathForRow(int)|Returns the path for the specified row.
|javax.swing.JTree.getPreferredScrollableViewportSize()|Returns the preferred display size of a JTree.
|javax.swing.JTree.getRowBounds(int)|Returns the Rectangle that the node at the specified row is  drawn in.
|javax.swing.JTree.getRowCount()|Returns the number of rows that are currently being displayed.
|javax.swing.JTree.getRowForLocation(int,int)|Returns the row for the specified location.
|javax.swing.JTree.getRowForPath(TreePath)|Returns the row that displays the node identified by the specified  path.
|javax.swing.JTree.getRowHeight()|Returns the height of each row.
|javax.swing.JTree.getScrollableBlockIncrement(Rectangle,int,int)|Returns the amount for a block increment, which is the height or  width of visibleRect, based on orientation.
|javax.swing.JTree.getScrollableTracksViewportHeight()|Returns false to indicate that the height of the viewport does not   determine the height of the table, unless the preferred
|javax.swing.JTree.getScrollableTracksViewportWidth()|Returns false to indicate that the width of the viewport does not   determine the width of the table, unless the preferred wi
|javax.swing.JTree.getScrollableUnitIncrement(Rectangle,int,int)|Returns the amount to increment when scrolling.
|javax.swing.JTree.getScrollsOnExpand()|Returns the value of the scrollsOnExpand property.
|javax.swing.JTree.getSelectionCount()|Returns the number of nodes selected.
|javax.swing.JTree.getSelectionModel()|Returns the model for selections.
|javax.swing.JTree.getSelectionPath()|Returns the path to the first selected node.
|javax.swing.JTree.getSelectionPaths()|Returns the paths of all selected values.
|javax.swing.JTree.getSelectionRows()|Returns all of the currently selected rows.
|javax.swing.JTree.getShowsRootHandles()|Returns the value of the showsRootHandles property.
|javax.swing.JTree.getToggleClickCount()|Returns the number of mouse clicks needed to expand or close a node.
|javax.swing.JTree.getToolTipText(MouseEvent)|Overrides JComponent's getToolTipText  method in order to allow   renderer's tips to be used if it has text set.
|javax.swing.JTree.getTreeExpansionListeners()|Returns an array of all the TreeExpansionListeners added  to this JTree with addTreeExpansionListener().
|javax.swing.JTree.getTreeSelectionListeners()|Returns an array of all the TreeSelectionListeners added  to this JTree with addTreeSelectionListener().
|javax.swing.JTree.getTreeWillExpandListeners()|Returns an array of all the TreeWillExpandListeners added  to this JTree with addTreeWillExpandListener().
|javax.swing.JTree.getUI()|Returns the Lobject that renders this component.
|javax.swing.JTree.getUIClassID()|Returns the name of the Lclass that renders this component.
|javax.swing.JTree.getVisibleRowCount()|Returns the number of rows that are displayed in the display area.
|javax.swing.JTree.hasBeenExpanded(TreePath)|Returns true if the node identified by the path has ever been  expanded.
|javax.swing.JTree.isCollapsed(int)|Returns true if the node at the specified display row is collapsed.
|javax.swing.JTree.isCollapsed(TreePath)|Returns true if the value identified by path is currently collapsed,  this will return false if any of the values in path are currently  n
|javax.swing.JTree.isEditable()|Returns true if the tree is editable.
|javax.swing.JTree.isEditing()|Returns true if the tree is being edited.
|javax.swing.JTree.isExpanded(int)|Returns true if the node at the specified display row is currently  expanded.
|javax.swing.JTree.isExpanded(TreePath)|Returns true if the node identified by the path is currently expanded,
|javax.swing.JTree.isFixedRowHeight()|Returns true if the height of each display row is a fixed size.
|javax.swing.JTree.isLargeModel()|Returns true if the tree is configured for a large model.
|javax.swing.JTree.isPathEditable(TreePath)|Returns isEditable.
|javax.swing.JTree.isPathSelected(TreePath)|Returns true if the item identified by the path is currently selected.
|javax.swing.JTree.isRootVisible()|Returns true if the root node of the tree is displayed.
|javax.swing.JTree.isRowSelected(int)|Returns true if the node identified by row is selected.
|javax.swing.JTree.isSelectionEmpty()|Returns true if the selection is currently empty.
|javax.swing.JTree.isVisible(TreePath)|Returns true if the value identified by path is currently viewable,  which means it is either the root or all of its parents are expanded.
|javax.swing.JTree.makeVisible(TreePath)|Ensures that the node identified by path is currently viewable.
|javax.swing.JTree.paramString()|Returns a string representation of this JTree.
|javax.swing.JTree.removeDescendantSelectedPaths(TreePath,boolean)|Removes any paths in the selection that are descendants of  path.
|javax.swing.JTree.removeDescendantToggledPaths(Enumeration<TreePath>)|Removes any descendants of the TreePaths in  toRemove  that have been expanded.
|javax.swing.JTree.removeSelectionInterval(int,int)|Removes the nodes between index0 and index1, inclusive, from the   selection.
|javax.swing.JTree.removeSelectionPath(TreePath)|Removes the node identified by the specified path from the current  selection.
|javax.swing.JTree.removeSelectionPaths(TreePath[])|Removes the nodes identified by the specified paths from the   current selection.
|javax.swing.JTree.removeSelectionRow(int)|Removes the row at the index row from the current  selection.
|javax.swing.JTree.removeSelectionRows(int[])|Removes the rows that are selected at each of the specified  rows.
|javax.swing.JTree.removeTreeExpansionListener(TreeExpansionListener)|Removes a listener for TreeExpansion events.
|javax.swing.JTree.removeTreeSelectionListener(TreeSelectionListener)|Removes a TreeSelection listener.
|javax.swing.JTree.removeTreeWillExpandListener(TreeWillExpandListener)|Removes a listener for TreeWillExpand events.
|javax.swing.JTree.scrollPathToVisible(TreePath)|Makes sure all the path components in path are expanded (except  for the last path component) and scrolls so that the   node ident
|javax.swing.JTree.scrollRowToVisible(int)|Scrolls the item identified by row until it is displayed.
|javax.swing.JTree.setAnchorSelectionPath(TreePath)|Sets the path identified as the anchor.
|javax.swing.JTree.setCellEditor(TreeCellEditor)|Sets the cell editor.
|javax.swing.JTree.setCellRenderer(TreeCellRenderer)|Sets the TreeCellRenderer that will be used to  draw each cell.
|javax.swing.JTree.setDragEnabled(boolean)|Sets the dragEnabled property,  which must be true to enable  automatic drag handling (the first part of drag and drop)  on this compone
|javax.swing.JTree.setEditable(boolean)|Determines whether the tree is editable.
|javax.swing.JTree.setExpandedState(TreePath,boolean)|Sets the expanded state of this JTree.
|javax.swing.JTree.setExpandsSelectedPaths(boolean)|Configures the expandsSelectedPaths property.
|javax.swing.JTree.setInvokesStopCellEditing(boolean)|Determines what happens when editing is interrupted by selecting  another node in the tree, a change in the tree's data, or b
|javax.swing.JTree.setLargeModel(boolean)|Specifies whether the UI should use a large model.
|javax.swing.JTree.setLeadSelectionPath(TreePath)|Sets the path identifies as the lead.
|javax.swing.JTree.setModel(TreeModel)|Sets the TreeModel that will provide the data.
|javax.swing.JTree.setRootVisible(boolean)|Determines whether or not the root node from  the TreeModel is visible.
|javax.swing.JTree.setRowHeight(int)|Sets the height of each cell, in pixels.
|javax.swing.JTree.setScrollsOnExpand(boolean)|Sets the scrollsOnExpand property,  which determines whether the   tree might scroll to show previously hidden children.
|javax.swing.JTree.setSelectionInterval(int,int)|Selects the nodes between index0 and index1, inclusive.
|javax.swing.JTree.setSelectionModel(TreeSelectionModel)|Sets the tree's selection model.
|javax.swing.JTree.setSelectionPath(TreePath)|Selects the node identified by the specified path.
|javax.swing.JTree.setSelectionPaths(TreePath[])|Selects the nodes identified by the specified array of paths.
|javax.swing.JTree.setSelectionRow(int)|Selects the node at the specified row in the display.
|javax.swing.JTree.setSelectionRows(int[])|Selects the nodes corresponding to each of the specified rows  in the display.
|javax.swing.JTree.setShowsRootHandles(boolean)|Sets the value of the showsRootHandles property,  which specifies whether the node handles should be displayed.
|javax.swing.JTree.setToggleClickCount(int)|Sets the number of mouse clicks before a node will expand or close.
|javax.swing.JTree.setUI(TreeUI)|Sets the Lobject that renders this component.
|javax.swing.JTree.setVisibleRowCount(int)|Sets the number of rows that are to be displayed.
|javax.swing.JTree.startEditingAtPath(TreePath)|Selects the node identified by the specified path and initiates  editing.
|javax.swing.JTree.stopEditing()|Ends the current editing session.
|javax.swing.JTree.treeDidChange()|Sent when the tree has changed enough that we need to resize  the bounds, but not enough that we need to remove the  expanded node set (e.g node
|javax.swing.JTree.updateUI()|Notification from the UIManager that the Lhas changed.

*javax.swing.JTree_Description*

A control that displays a set of hierarchical data as an outline. You can find task-oriented documentation and examples of using trees in How to Use Trees, a section in The Java 
Tutorial. 

A specific node in a tree can be identified either by a TreePath (an object that encapsulates a node and all of its ancestors), or by its display row, where each row in the 
display area displays one node. An expanded node is a non-leaf node (as identified by TreeModel.isLeaf(node) returning false) that will displays its children when all its 
ancestors are expanded. A collapsed node is one which hides them. A hidden node is one which is under a collapsed ancestor. All of a viewable nodes parents are expanded, but may 
or may not be displayed. A displayed node is both viewable and in the display area, where it can be seen. 

The following JTree methods use "visible" to mean "displayed": 

isRootVisible() setRootVisible() scrollPathToVisible() scrollRowToVisible() getVisibleRowCount() setVisibleRowCount() 

The next group of JTree methods use "visible" to mean "viewable" (under an expanded parent): 

isVisible() makeVisible() 

If you are interested in knowing when the selection changes implement the TreeSelectionListener interface and add the instance using the method addTreeSelectionListener. 
valueChanged will be invoked when the selection changes, that is if the user clicks twice on the same node valueChanged will only be invoked once. 

If you are interested in detecting either double-click events or when a user clicks on a node, regardless of whether or not it was selected, we recommend you do the following: 

final JTree tree = ...; 

MouseListener ml = new MouseAdapter() { public void mousePressed(MouseEvent e) { int selRow = tree.getRowForLocation(e.getX(), e.getY()); TreePath selPath = 
tree.getPathForLocation(e.getX(), e.getY()); if(selRow != -1) { if(e.getClickCount() == 1) { mySingleClick(selRow, selPath); } else if(e.getClickCount() == 2) { 
myDoubleClick(selRow, selPath); } } } }; tree.addMouseListener(ml); 

NOTE: This example obtains both the path and row, but you only need to get the one you're interested in. 

To use JTree to display compound nodes (for example, nodes containing both a graphic icon and text), subclass (|javax.swing.tree.TreeCellRenderer|) and use (|javax.swing.JTree|) 
to tell the tree to use it. To edit such nodes, subclass (|javax.swing.tree.TreeCellEditor|) and use (|javax.swing.JTree|) . 

Like all JComponent classes, you can use (|javax.swing.InputMap|) and (|javax.swing.ActionMap|) to associate an (|javax.swing.Action|) object with a (|javax.swing.KeyStroke|) and 
execute the action under specified conditions. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*java.lang.String_javax.swing.JTree.ANCHOR_SELECTION_PATH_PROPERTY*

Bound property name for anchor selection path. 


*java.lang.String_javax.swing.JTree.CELL_EDITOR_PROPERTY*

Bound property name for cellEditor. 


*java.lang.String_javax.swing.JTree.CELL_RENDERER_PROPERTY*

Bound property name for cellRenderer. 


*javax.swing.tree.TreeCellEditor_javax.swing.JTree.cellEditor*

Editor for the entries. Default is null (tree is not editable). 


*javax.swing.tree.TreeCellRenderer_javax.swing.JTree.cellRenderer*

The cell used to draw nodes. If null, the UI uses a default cellRenderer. 


*boolean_javax.swing.JTree.editable*

Is the tree editable? Default is false. 


*java.lang.String_javax.swing.JTree.EDITABLE_PROPERTY*

Bound property name for editable. 


*java.lang.String_javax.swing.JTree.EXPANDS_SELECTED_PATHS_PROPERTY*

Bound property name for expands selected paths property 


*java.lang.String_javax.swing.JTree.INVOKES_STOP_CELL_EDITING_PROPERTY*

Bound property name for messagesStopCellEditing. 


*boolean_javax.swing.JTree.invokesStopCellEditing*

If true, when editing is to be stopped by way of selection changing, data in tree changing or other means stopCellEditing is invoked, and changes are saved. If false, 
cancelCellEditing is invoked, and changes are discarded. Default is false. 


*java.lang.String_javax.swing.JTree.LARGE_MODEL_PROPERTY*

Bound property name for largeModel. 


*boolean_javax.swing.JTree.largeModel*

Is this tree a large model? This is a code-optimization setting. A large model can be used when the cell height is the same for all nodes. The UI will then cache very little 
information and instead continually message the model. Without a large model the UI caches most of the information, resulting in fewer method calls to the model. 

This value is only a suggestion to the UI. Not all UIs will take advantage of it. Default value is false. 


*java.lang.String_javax.swing.JTree.LEAD_SELECTION_PATH_PROPERTY*

Bound property name for leadSelectionPath. 


*java.lang.String_javax.swing.JTree.ROOT_VISIBLE_PROPERTY*

Bound property name for rootVisible. 


*boolean_javax.swing.JTree.rootVisible*

True if the root node is displayed, false if its children are the highest visible nodes. 


*java.lang.String_javax.swing.JTree.ROW_HEIGHT_PROPERTY*

Bound property name for rowHeight. 


*int_javax.swing.JTree.rowHeight*

Height to use for each display row. If this is <= 0 the renderer determines the height for each row. 


*java.lang.String_javax.swing.JTree.SCROLLS_ON_EXPAND_PROPERTY*

Bound property name for scrollsOnExpand. 


*boolean_javax.swing.JTree.scrollsOnExpand*

If true, when a node is expanded, as many of the descendants are scrolled to be visible. 


*java.lang.String_javax.swing.JTree.SELECTION_MODEL_PROPERTY*

Bound property name for selectionModel. 


*javax.swing.tree.TreeSelectionModel_javax.swing.JTree.selectionModel*

Models the set of selected nodes in this tree. 


*javax.swing.JTree.TreeSelectionRedirector_javax.swing.JTree.selectionRedirector*

Creates a new event and passed it off the selectionListeners. 


*java.lang.String_javax.swing.JTree.SHOWS_ROOT_HANDLES_PROPERTY*

Bound property name for showsRootHandles. 


*boolean_javax.swing.JTree.showsRootHandles*

True if handles are displayed at the topmost level of the tree. 

A handle is a small icon that displays adjacent to the node which allows the user to click once to expand or collapse the node. A common interface shows a plus sign (+) for a node 
which can be expanded and a minus sign (-) for a node which can be collapsed. Handles are always shown for nodes below the topmost level. 

If the rootVisible setting specifies that the root node is to be displayed, then that is the only node at the topmost level. If the root node is not displayed, then all of its 
children are at the topmost level of the tree. Handles are always displayed for nodes other than the topmost. 

If the root node isn't visible, it is generally a good to make this value true. Otherwise, the tree looks exactly like a list, and users may not know that the "list entries" are 
actually tree nodes. 


*java.lang.String_javax.swing.JTree.TOGGLE_CLICK_COUNT_PROPERTY*

Bound property name for toggleClickCount. 


*int_javax.swing.JTree.toggleClickCount*

Number of mouse clicks before a node is expanded. 


*java.lang.String_javax.swing.JTree.TREE_MODEL_PROPERTY*

Bound property name for treeModel. 


*javax.swing.tree.TreeModel_javax.swing.JTree.treeModel*

The model that defines the tree displayed by this object. 


*javax.swing.event.TreeModelListener_javax.swing.JTree.treeModelListener*

Updates the expandedState. 


*java.lang.String_javax.swing.JTree.VISIBLE_ROW_COUNT_PROPERTY*

Bound property name for visibleRowCount. 


*int_javax.swing.JTree.visibleRowCount*

Number of rows to make visible at one time. This value is used for the Scrollable interface. It determines the preferred size of the display area. 



*javax.swing.JTree()*

public JTree()

Returns a JTree with a sample model. The default model used by the tree defines a leaf node as any node without children. 


*javax.swing.JTree(Hashtable<?,?>)*

public JTree(java.util.Hashtable<?, ?> value)

Returns a JTree created from a Hashtable which does not display with root. Each value-half of the key/value pairs in the HashTable becomes a child of the new root node. By 
default, the tree defines a leaf node as any node without children. 

    value - a Hashtable 

*javax.swing.JTree(Object[])*

public JTree(java.lang.Object[] value)

Returns a JTree with each element of the specified array as the child of a new root node which is not displayed. By default, the tree defines a leaf node as any node without 
children. 

    value - an array of Objects 

*javax.swing.JTree(TreeModel)*

public JTree(javax.swing.tree.TreeModel newModel)

Returns an instance of JTree which displays the root node -- the tree is created using the specified data model. 

    newModel - the TreeModel to use as the data model 

*javax.swing.JTree(TreeNode)*

public JTree(javax.swing.tree.TreeNode root)

Returns a JTree with the specified TreeNode as its root, which displays the root node. By default, the tree defines a leaf node as any node without children. 

    root - a TreeNode object 

*javax.swing.JTree(TreeNode,boolean)*

public JTree(
  javax.swing.tree.TreeNode root,
  boolean asksAllowsChildren)

Returns a JTree with the specified TreeNode as its root, which displays the root node and which decides whether a node is a leaf node in the specified manner. 

    root - a TreeNode object 
    asksAllowsChildren - if false, any node without children is a leaf node; if true, only nodes that do not allow children are leaf nodes 

*javax.swing.JTree(Vector<?>)*

public JTree(java.util.Vector<?> value)

Returns a JTree with each element of the specified Vector as the child of a new root node which is not displayed. By default, the tree defines a leaf node as any node without 
children. 

    value - a Vector 

*javax.swing.JTree.addSelectionInterval(int,int)*

public void addSelectionInterval(
  int index0,
  int index1)

Adds the paths between index0 and index1, inclusive, to the selection. 


    index0 - an integer specifying a display row, where 0 is the first row in the display 
    index1 - an integer specifying a second display row 

*javax.swing.JTree.addSelectionPath(TreePath)*

public void addSelectionPath(javax.swing.tree.TreePath path)

Adds the node identified by the specified TreePath to the current selection. If any component of the path isn't viewable, and getExpandsSelectedPaths is true it is made viewable. 

Note that JTree does not allow duplicate nodes to exist as children under the same parent -- each sibling must be a unique object. 


    path - the TreePath to add 

*javax.swing.JTree.addSelectionPaths(TreePath[])*

public void addSelectionPaths(javax.swing.tree.TreePath[] paths)

Adds each path in the array of paths to the current selection. If any component of any of the paths isn't viewable and getExpandsSelectedPaths is true, it is made viewable. 

Note that JTree does not allow duplicate nodes to exist as children under the same parent -- each sibling must be a unique object. 


    paths - an array of TreePath objects that specifies the nodes to add 

*javax.swing.JTree.addSelectionRow(int)*

public void addSelectionRow(int row)

Adds the path at the specified row to the current selection. 


    row - an integer specifying the row of the node to add, where 0 is the first row in the display 

*javax.swing.JTree.addSelectionRows(int[])*

public void addSelectionRows(int[] rows)

Adds the paths at each of the specified rows to the current selection. 


    rows - an array of ints specifying the rows to add, where 0 indicates the first row in the display 

*javax.swing.JTree.addTreeExpansionListener(TreeExpansionListener)*

public void addTreeExpansionListener(javax.swing.event.TreeExpansionListener tel)

Adds a listener for TreeExpansion events. 


    tel - a TreeExpansionListener that will be notified when a tree node is expanded or collapsed (a "negative expansion") 

*javax.swing.JTree.addTreeSelectionListener(TreeSelectionListener)*

public void addTreeSelectionListener(javax.swing.event.TreeSelectionListener tsl)

Adds a listener for TreeSelection events. 


    tsl - the TreeSelectionListener that will be notified when a node is selected or deselected (a "negative selection") 

*javax.swing.JTree.addTreeWillExpandListener(TreeWillExpandListener)*

public void addTreeWillExpandListener(javax.swing.event.TreeWillExpandListener tel)

Adds a listener for TreeWillExpand events. 


    tel - a TreeWillExpandListener that will be notified when a tree node will be expanded or collapsed (a "negative expansion") 

*javax.swing.JTree.cancelEditing()*

public void cancelEditing()

Cancels the current editing session. Has no effect if the tree isn't being edited. 



*javax.swing.JTree.clearSelection()*

public void clearSelection()

Clears the selection. 



*javax.swing.JTree.clearToggledPaths()*

protected void clearToggledPaths()

Clears the cache of toggled tree paths. This does NOT send out any TreeExpansionListener events. 



*javax.swing.JTree.collapsePath(TreePath)*

public void collapsePath(javax.swing.tree.TreePath path)

Ensures that the node identified by the specified path is collapsed and viewable. 


    path - the TreePath identifying a node 

*javax.swing.JTree.collapseRow(int)*

public void collapseRow(int row)

Ensures that the node in the specified row is collapsed. 

If row is = getRowCount this will have no effect. 


    row - an integer specifying a display row, where 0 is the first row in the display 

*javax.swing.JTree.convertValueToText(Object,boolean,boolean,boolean,int,boolean)*

public |java.lang.String| convertValueToText(
  java.lang.Object value,
  boolean selected,
  boolean expanded,
  boolean leaf,
  int row,
  boolean hasFocus)

Called by the renderers to convert the specified value to text. This implementation returns value.toString, ignoring all other arguments. To control the conversion, subclass this 
method and use any of the arguments you need. 


    value - the Object to convert to text 
    selected - true if the node is selected 
    expanded - true if the node is expanded 
    leaf - true if the node is a leaf node 
    row - an integer specifying the node's display row, where 0 is the first row in the display 
    hasFocus - true if the node has the focus 

    Returns: the String representation of the node's value 

*javax.swing.JTree.createTreeModel(Object)*

protected static |javax.swing.tree.TreeModel| createTreeModel(java.lang.Object value)

Returns a TreeModel wrapping the specified object. If the object is: an array of Objects, a Hashtable, or a Vector then a new root node is created with each of the incoming 
objects as children. Otherwise, a new root is created with the specified object as its value. 


    value - the Object used as the foundation for the TreeModel 

    Returns: a TreeModel wrapping the specified object 

*javax.swing.JTree.createTreeModelListener()*

protected |javax.swing.event.TreeModelListener| createTreeModelListener()

Creates and returns an instance of TreeModelHandler. The returned object is responsible for updating the expanded state when the TreeModel changes. 

For more information on what expanded state means, see the JTree description above. 



*javax.swing.JTree.expandPath(TreePath)*

public void expandPath(javax.swing.tree.TreePath path)

Ensures that the node identified by the specified path is expanded and viewable. If the last item in the path is a leaf, this will have no effect. 


    path - the TreePath identifying a node 

*javax.swing.JTree.expandRow(int)*

public void expandRow(int row)

Ensures that the node in the specified row is expanded and viewable. 

If row is = getRowCount this will have no effect. 


    row - an integer specifying a display row, where 0 is the first row in the display 

*javax.swing.JTree.fireTreeCollapsed(TreePath)*

public void fireTreeCollapsed(javax.swing.tree.TreePath path)

Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the path parameter. 


    path - the TreePath indicating the node that was collapsed 

*javax.swing.JTree.fireTreeExpanded(TreePath)*

public void fireTreeExpanded(javax.swing.tree.TreePath path)

Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the path parameter. 


    path - the TreePath indicating the node that was expanded 

*javax.swing.JTree.fireTreeWillCollapse(TreePath)*

public void fireTreeWillCollapse(javax.swing.tree.TreePath path)
  throws |javax.swing.tree.ExpandVetoException|
         
Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the path parameter. 


    path - the TreePath indicating the node that was expanded 

*javax.swing.JTree.fireTreeWillExpand(TreePath)*

public void fireTreeWillExpand(javax.swing.tree.TreePath path)
  throws |javax.swing.tree.ExpandVetoException|
         
Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the path parameter. 


    path - the TreePath indicating the node that was expanded 

*javax.swing.JTree.fireValueChanged(TreeSelectionEvent)*

protected void fireValueChanged(javax.swing.event.TreeSelectionEvent e)

Notifies all listeners that have registered interest for notification on this event type. 


    e - the TreeSelectionEvent to be fired; generated by the TreeSelectionModel when a node is selected or deselected 

*javax.swing.JTree.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JTree. For JTrees, the AccessibleContext takes the form of an AccessibleJTree. A new AccessibleJTree instance is created if 
necessary. 



    Returns: an AccessibleJTree that serves as the AccessibleContext of this JTree 

*javax.swing.JTree.getAnchorSelectionPath()*

public |javax.swing.tree.TreePath| getAnchorSelectionPath()

Returns the path identified as the anchor. 



    Returns: path identified as the anchor 

*javax.swing.JTree.getCellEditor()*

public |javax.swing.tree.TreeCellEditor| getCellEditor()

Returns the editor used to edit entries in the tree. 



    Returns: the TreeCellEditor in use, or null if the tree cannot be edited 

*javax.swing.JTree.getCellRenderer()*

public |javax.swing.tree.TreeCellRenderer| getCellRenderer()

Returns the current TreeCellRenderer that is rendering each cell. 



    Returns: the TreeCellRenderer that is rendering each cell 

*javax.swing.JTree.getClosestPathForLocation(int,int)*

public |javax.swing.tree.TreePath| getClosestPathForLocation(
  int x,
  int y)

Returns the path to the node that is closest to x,y. If no nodes are currently viewable, or there is no model, returns null, otherwise it always returns a valid path. To test if 
the node is exactly at x, y, get the node's bounds and test x, y against that. 


    x - an integer giving the number of pixels horizontally from the left edge of the display area, minus any left margin 
    y - an integer giving the number of pixels vertically from the top of the display area, minus any top margin 

    Returns: the TreePath for the node closest to that location, null if nothing is viewable or there is no model 

*javax.swing.JTree.getClosestRowForLocation(int,int)*

public int getClosestRowForLocation(
  int x,
  int y)

Returns the row to the node that is closest to x,y. If no nodes are viewable or there is no model, returns -1. Otherwise, it always returns a valid row. To test if the returned 
object is exactly at x, y, get the bounds for the node at the returned row and test x, y against that. 


    x - an integer giving the number of pixels horizontally from the left edge of the display area, minus any left margin 
    y - an integer giving the number of pixels vertically from the top of the display area, minus any top margin 

    Returns: the row closest to the location, -1 if nothing is viewable or there is no model 

*javax.swing.JTree.getDefaultTreeModel()*

protected static |javax.swing.tree.TreeModel| getDefaultTreeModel()

Creates and returns a sample TreeModel. Used primarily for beanbuilders to show something interesting. 



    Returns: the default TreeModel 

*javax.swing.JTree.getDescendantToggledPaths(TreePath)*

protected |java.util.Enumeration|<TreePath> getDescendantToggledPaths(javax.swing.tree.TreePath parent)

Returns an Enumeration of TreePaths that have been expanded that are descendants of parent. 



*javax.swing.JTree.getDragEnabled()*

public boolean getDragEnabled()

Gets the value of the dragEnabled property. 



    Returns: the value of the dragEnabled property 

*javax.swing.JTree.getEditingPath()*

public |javax.swing.tree.TreePath| getEditingPath()

Returns the path to the element that is currently being edited. 



    Returns: the TreePath for the node being edited 

*javax.swing.JTree.getExpandedDescendants(TreePath)*

public |java.util.Enumeration|<TreePath> getExpandedDescendants(javax.swing.tree.TreePath parent)

Returns an Enumeration of the descendants of the path parent that are currently expanded. If parent is not currently expanded, this will return null. If you expand/collapse nodes 
while iterating over the returned Enumeration this may not return all the expanded paths, or may return paths that are no longer expanded. 


    parent - the path which is to be examined 

    Returns: an Enumeration of the descendents of parent, or null if parent is not currently expanded 

*javax.swing.JTree.getExpandsSelectedPaths()*

public boolean getExpandsSelectedPaths()

Returns the expandsSelectedPaths property. 



    Returns: true if selection changes result in the parent path being expanded 

*javax.swing.JTree.getInvokesStopCellEditing()*

public boolean getInvokesStopCellEditing()

Returns the indicator that tells what happens when editing is interrupted. 



    Returns: the indicator that tells what happens when editing is interrupted 

*javax.swing.JTree.getLastSelectedPathComponent()*

public |java.lang.Object| getLastSelectedPathComponent()

Returns the last path component in the first node of the current selection. 



    Returns: the last Object in the first selected node's TreePath, or null if nothing is selected 

*javax.swing.JTree.getLeadSelectionPath()*

public |javax.swing.tree.TreePath| getLeadSelectionPath()

Returns the path identified as the lead. 



    Returns: path identified as the lead 

*javax.swing.JTree.getLeadSelectionRow()*

public int getLeadSelectionRow()

Returns the row index corresponding to the lead path. 



    Returns: an integer giving the row index of the lead path, where 0 is the first row in the display; or -1 if leadPath is null 

*javax.swing.JTree.getMaxSelectionRow()*

public int getMaxSelectionRow()

Returns the last selected row. 



    Returns: an integer designating the last selected row, where 0 is the first row in the display 

*javax.swing.JTree.getMinSelectionRow()*

public int getMinSelectionRow()

Gets the first selected row. 



    Returns: an integer designating the first selected row, where 0 is the first row in the display 

*javax.swing.JTree.getModel()*

public |javax.swing.tree.TreeModel| getModel()

Returns the TreeModel that is providing the data. 



    Returns: the TreeModel that is providing the data 

*javax.swing.JTree.getNextMatch(String,int,Position.Bias)*

public |javax.swing.tree.TreePath| getNextMatch(
  java.lang.String prefix,
  int startingRow,
  javax.swing.text.Position.Bias bias)

Returns the TreePath to the next tree element that begins with a prefix. To handle the conversion of a TreePath into a String, convertValueToText is used. 


    prefix - the string to test for a match 
    startingRow - the row for starting the search 
    bias - the search direction, either Position.Bias.Forward or Position.Bias.Backward. 

    Returns: the TreePath of the next tree element that starts with the prefix; otherwise null 

*javax.swing.JTree.getPathBetweenRows(int,int)*

protected |javax.swing.tree.TreePath|[] getPathBetweenRows(
  int index0,
  int index1)

Returns JTreePath instances representing the path between index0 and index1 (including index1). Returns null if there is no tree. 


    index0 - an integer specifying a display row, where 0 is the first row in the display 
    index1 - an integer specifying a second display row 

    Returns: an array of TreePath objects, one for each node between index0 and index1, inclusive; or null if there is no tree 

*javax.swing.JTree.getPathBounds(TreePath)*

public |java.awt.Rectangle| getPathBounds(javax.swing.tree.TreePath path)

Returns the Rectangle that the specified node will be drawn into. Returns null if any component in the path is hidden (under a collapsed parent). 

Note: This method returns a valid rectangle, even if the specified node is not currently displayed. 


    path - the TreePath identifying the node 

    Returns: the Rectangle the node is drawn in, or null 

*javax.swing.JTree.getPathForLocation(int,int)*

public |javax.swing.tree.TreePath| getPathForLocation(
  int x,
  int y)

Returns the path for the node at the specified location. 


    x - an integer giving the number of pixels horizontally from the left edge of the display area, minus any left margin 
    y - an integer giving the number of pixels vertically from the top of the display area, minus any top margin 

    Returns: the TreePath for the node at that location 

*javax.swing.JTree.getPathForRow(int)*

public |javax.swing.tree.TreePath| getPathForRow(int row)

Returns the path for the specified row. If row is not visible, null is returned. 


    row - an integer specifying a row 

    Returns: the TreePath to the specified node, null if row or row > getRowCount() 

*javax.swing.JTree.getPreferredScrollableViewportSize()*

public |java.awt.Dimension| getPreferredScrollableViewportSize()

Returns the preferred display size of a JTree. The height is determined from getVisibleRowCount and the width is the current preferred width. 



    Returns: a Dimension object containing the preferred size 

*javax.swing.JTree.getRowBounds(int)*

public |java.awt.Rectangle| getRowBounds(int row)

Returns the Rectangle that the node at the specified row is drawn in. 


    row - the row to be drawn, where 0 is the first row in the display 

    Returns: the Rectangle the node is drawn in 

*javax.swing.JTree.getRowCount()*

public int getRowCount()

Returns the number of rows that are currently being displayed. 



    Returns: the number of rows that are being displayed 

*javax.swing.JTree.getRowForLocation(int,int)*

public int getRowForLocation(
  int x,
  int y)

Returns the row for the specified location. 


    x - an integer giving the number of pixels horizontally from the left edge of the display area, minus any left margin 
    y - an integer giving the number of pixels vertically from the top of the display area, minus any top margin 

    Returns: the row corresponding to the location, or -1 if the location is not within the bounds of a displayed cell 

*javax.swing.JTree.getRowForPath(TreePath)*

public int getRowForPath(javax.swing.tree.TreePath path)

Returns the row that displays the node identified by the specified path. 


    path - the TreePath identifying a node 

    Returns: an integer specifying the display row, where 0 is the first row in the display, or -1 if any of the elements in path are hidden under a collapsed parent. 

*javax.swing.JTree.getRowHeight()*

public int getRowHeight()

Returns the height of each row. If the returned value is less than or equal to 0 the height for each row is determined by the renderer. 



*javax.swing.JTree.getScrollableBlockIncrement(Rectangle,int,int)*

public int getScrollableBlockIncrement(
  java.awt.Rectangle visibleRect,
  int orientation,
  int direction)

Returns the amount for a block increment, which is the height or width of visibleRect, based on orientation. 


    visibleRect - the view area visible within the viewport 
    orientation - either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL 
    direction - less than zero to scroll up/left, greater than zero for down/right. 

    Returns: the "block" increment for scrolling in the specified direction 

*javax.swing.JTree.getScrollableTracksViewportHeight()*

public boolean getScrollableTracksViewportHeight()

Returns false to indicate that the height of the viewport does not determine the height of the table, unless the preferred height of the tree is smaller than the viewports height. 
In other words: ensure that the tree is never smaller than its viewport. 



    Returns: 

*javax.swing.JTree.getScrollableTracksViewportWidth()*

public boolean getScrollableTracksViewportWidth()

Returns false to indicate that the width of the viewport does not determine the width of the table, unless the preferred width of the tree is smaller than the viewports width. In 
other words: ensure that the tree is never smaller than its viewport. 



    Returns: 

*javax.swing.JTree.getScrollableUnitIncrement(Rectangle,int,int)*

public int getScrollableUnitIncrement(
  java.awt.Rectangle visibleRect,
  int orientation,
  int direction)

Returns the amount to increment when scrolling. The amount is the height of the first displayed row that isn't completely in view or, if it is totally displayed, the height of the 
next row in the scrolling direction. 


    visibleRect - the view area visible within the viewport 
    orientation - either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL 
    direction - less than zero to scroll up/left, greater than zero for down/right 

    Returns: the "unit" increment for scrolling in the specified direction 

*javax.swing.JTree.getScrollsOnExpand()*

public boolean getScrollsOnExpand()

Returns the value of the scrollsOnExpand property. 



    Returns: the value of the scrollsOnExpand property 

*javax.swing.JTree.getSelectionCount()*

public int getSelectionCount()

Returns the number of nodes selected. 



    Returns: the number of nodes selected 

*javax.swing.JTree.getSelectionModel()*

public |javax.swing.tree.TreeSelectionModel| getSelectionModel()

Returns the model for selections. This should always return a non-null value. If you don't want to allow anything to be selected set the selection model to null, which forces an 
empty selection model to be used. 



*javax.swing.JTree.getSelectionPath()*

public |javax.swing.tree.TreePath| getSelectionPath()

Returns the path to the first selected node. 



    Returns: the TreePath for the first selected node, or null if nothing is currently selected 

*javax.swing.JTree.getSelectionPaths()*

public |javax.swing.tree.TreePath|[] getSelectionPaths()

Returns the paths of all selected values. 



    Returns: an array of TreePath objects indicating the selected nodes, or null if nothing is currently selected 

*javax.swing.JTree.getSelectionRows()*

public int[] getSelectionRows()

Returns all of the currently selected rows. This method is simply forwarded to the TreeSelectionModel. If nothing is selected null or an empty array will be returned, based on the 
TreeSelectionModel implementation. 



    Returns: an array of integers that identifies all currently selected rows where 0 is the first row in the display 

*javax.swing.JTree.getShowsRootHandles()*

public boolean getShowsRootHandles()

Returns the value of the showsRootHandles property. 



    Returns: the value of the showsRootHandles property 

*javax.swing.JTree.getToggleClickCount()*

public int getToggleClickCount()

Returns the number of mouse clicks needed to expand or close a node. 



    Returns: number of mouse clicks before node is expanded 

*javax.swing.JTree.getToolTipText(MouseEvent)*

public |java.lang.String| getToolTipText(java.awt.event.MouseEvent event)

Overrides JComponent's getToolTipText method in order to allow renderer's tips to be used if it has text set. 

NOTE: For JTree to properly display tooltips of its renderers, JTree must be a registered component with the ToolTipManager. This can be done by invoking 
ToolTipManager.sharedInstance().registerComponent(tree). This is not done automatically! 


    event - the MouseEvent that initiated the ToolTip display 

    Returns: a string containing the tooltip or null if event is null 

*javax.swing.JTree.getTreeExpansionListeners()*

public |javax.swing.event.TreeExpansionListener|[] getTreeExpansionListeners()

Returns an array of all the TreeExpansionListeners added to this JTree with addTreeExpansionListener(). 



    Returns: all of the TreeExpansionListeners added or an empty array if no listeners have been added 

*javax.swing.JTree.getTreeSelectionListeners()*

public |javax.swing.event.TreeSelectionListener|[] getTreeSelectionListeners()

Returns an array of all the TreeSelectionListeners added to this JTree with addTreeSelectionListener(). 



    Returns: all of the TreeSelectionListeners added or an empty array if no listeners have been added 

*javax.swing.JTree.getTreeWillExpandListeners()*

public |javax.swing.event.TreeWillExpandListener|[] getTreeWillExpandListeners()

Returns an array of all the TreeWillExpandListeners added to this JTree with addTreeWillExpandListener(). 



    Returns: all of the TreeWillExpandListeners added or an empty array if no listeners have been added 

*javax.swing.JTree.getUI()*

public |javax.swing.plaf.TreeUI| getUI()

Returns the Lobject that renders this component. 



    Returns: the TreeUI object that renders this component 

*javax.swing.JTree.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the name of the Lclass that renders this component. 



    Returns: the string "TreeUI" 

*javax.swing.JTree.getVisibleRowCount()*

public int getVisibleRowCount()

Returns the number of rows that are displayed in the display area. 



    Returns: the number of rows displayed 

*javax.swing.JTree.hasBeenExpanded(TreePath)*

public boolean hasBeenExpanded(javax.swing.tree.TreePath path)

Returns true if the node identified by the path has ever been expanded. 



    Returns: true if the path has ever been expanded 

*javax.swing.JTree.isCollapsed(int)*

public boolean isCollapsed(int row)

Returns true if the node at the specified display row is collapsed. 


    row - the row to check, where 0 is the first row in the display 

    Returns: true if the node is currently collapsed, otherwise false 

*javax.swing.JTree.isCollapsed(TreePath)*

public boolean isCollapsed(javax.swing.tree.TreePath path)

Returns true if the value identified by path is currently collapsed, this will return false if any of the values in path are currently not being displayed. 


    path - the TreePath to check 

    Returns: true if any of the nodes in the node's path are collapsed, false if all nodes in the path are expanded 

*javax.swing.JTree.isEditable()*

public boolean isEditable()

Returns true if the tree is editable. 



    Returns: true if the tree is editable 

*javax.swing.JTree.isEditing()*

public boolean isEditing()

Returns true if the tree is being edited. The item that is being edited can be obtained using getSelectionPath. 



    Returns: true if the user is currently editing a node 

*javax.swing.JTree.isExpanded(int)*

public boolean isExpanded(int row)

Returns true if the node at the specified display row is currently expanded. 


    row - the row to check, where 0 is the first row in the display 

    Returns: true if the node is currently expanded, otherwise false 

*javax.swing.JTree.isExpanded(TreePath)*

public boolean isExpanded(javax.swing.tree.TreePath path)

Returns true if the node identified by the path is currently expanded, 


    path - the TreePath specifying the node to check 

    Returns: false if any of the nodes in the node's path are collapsed, true if all nodes in the path are expanded 

*javax.swing.JTree.isFixedRowHeight()*

public boolean isFixedRowHeight()

Returns true if the height of each display row is a fixed size. 



    Returns: true if the height of each row is a fixed size 

*javax.swing.JTree.isLargeModel()*

public boolean isLargeModel()

Returns true if the tree is configured for a large model. 



    Returns: true if a large model is suggested 

*javax.swing.JTree.isPathEditable(TreePath)*

public boolean isPathEditable(javax.swing.tree.TreePath path)

Returns isEditable. This is invoked from the UI before editing begins to insure that the given path can be edited. This is provided as an entry point for subclassers to add 
filtered editing without having to resort to creating a new editor. 



    Returns: true if every parent node and the node itself is editable 

*javax.swing.JTree.isPathSelected(TreePath)*

public boolean isPathSelected(javax.swing.tree.TreePath path)

Returns true if the item identified by the path is currently selected. 


    path - a TreePath identifying a node 

    Returns: true if the node is selected 

*javax.swing.JTree.isRootVisible()*

public boolean isRootVisible()

Returns true if the root node of the tree is displayed. 



    Returns: true if the root node of the tree is displayed 

*javax.swing.JTree.isRowSelected(int)*

public boolean isRowSelected(int row)

Returns true if the node identified by row is selected. 


    row - an integer specifying a display row, where 0 is the first row in the display 

    Returns: true if the node is selected 

*javax.swing.JTree.isSelectionEmpty()*

public boolean isSelectionEmpty()

Returns true if the selection is currently empty. 



    Returns: true if the selection is currently empty 

*javax.swing.JTree.isVisible(TreePath)*

public boolean isVisible(javax.swing.tree.TreePath path)

Returns true if the value identified by path is currently viewable, which means it is either the root or all of its parents are expanded. Otherwise, this method returns false. 



    Returns: true if the node is viewable, otherwise false 

*javax.swing.JTree.makeVisible(TreePath)*

public void makeVisible(javax.swing.tree.TreePath path)

Ensures that the node identified by path is currently viewable. 


    path - the TreePath to make visible 

*javax.swing.JTree.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JTree. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary between 
implementations. The returned string may be empty but may not be null. 



    Returns: a string representation of this JTree. 

*javax.swing.JTree.removeDescendantSelectedPaths(TreePath,boolean)*

protected boolean removeDescendantSelectedPaths(
  javax.swing.tree.TreePath path,
  boolean includePath)

Removes any paths in the selection that are descendants of path. If includePath is true and path is selected, it will be removed from the selection. 



    Returns: true if a descendant was selected 

*javax.swing.JTree.removeDescendantToggledPaths(Enumeration<TreePath>)*

protected void removeDescendantToggledPaths(java.util.Enumeration<javax.swing.tree.TreePath> toRemove)

Removes any descendants of the TreePaths in toRemove that have been expanded. 



*javax.swing.JTree.removeSelectionInterval(int,int)*

public void removeSelectionInterval(
  int index0,
  int index1)

Removes the nodes between index0 and index1, inclusive, from the selection. 


    index0 - an integer specifying a display row, where 0 is the first row in the display 
    index1 - an integer specifying a second display row 

*javax.swing.JTree.removeSelectionPath(TreePath)*

public void removeSelectionPath(javax.swing.tree.TreePath path)

Removes the node identified by the specified path from the current selection. 


    path - the TreePath identifying a node 

*javax.swing.JTree.removeSelectionPaths(TreePath[])*

public void removeSelectionPaths(javax.swing.tree.TreePath[] paths)

Removes the nodes identified by the specified paths from the current selection. 


    paths - an array of TreePath objects that specifies the nodes to remove 

*javax.swing.JTree.removeSelectionRow(int)*

public void removeSelectionRow(int row)

Removes the row at the index row from the current selection. 


    row - the row to remove 

*javax.swing.JTree.removeSelectionRows(int[])*

public void removeSelectionRows(int[] rows)

Removes the rows that are selected at each of the specified rows. 


    rows - an array of ints specifying display rows, where 0 is the first row in the display 

*javax.swing.JTree.removeTreeExpansionListener(TreeExpansionListener)*

public void removeTreeExpansionListener(javax.swing.event.TreeExpansionListener tel)

Removes a listener for TreeExpansion events. 


    tel - the TreeExpansionListener to remove 

*javax.swing.JTree.removeTreeSelectionListener(TreeSelectionListener)*

public void removeTreeSelectionListener(javax.swing.event.TreeSelectionListener tsl)

Removes a TreeSelection listener. 


    tsl - the TreeSelectionListener to remove 

*javax.swing.JTree.removeTreeWillExpandListener(TreeWillExpandListener)*

public void removeTreeWillExpandListener(javax.swing.event.TreeWillExpandListener tel)

Removes a listener for TreeWillExpand events. 


    tel - the TreeWillExpandListener to remove 

*javax.swing.JTree.scrollPathToVisible(TreePath)*

public void scrollPathToVisible(javax.swing.tree.TreePath path)

Makes sure all the path components in path are expanded (except for the last path component) and scrolls so that the node identified by the path is displayed. Only works when this 
JTree is contained in a JScrollPane. 


    path - the TreePath identifying the node to bring into view 

*javax.swing.JTree.scrollRowToVisible(int)*

public void scrollRowToVisible(int row)

Scrolls the item identified by row until it is displayed. The minimum of amount of scrolling necessary to bring the row into view is performed. Only works when this JTree is 
contained in a JScrollPane. 


    row - an integer specifying the row to scroll, where 0 is the first row in the display 

*javax.swing.JTree.setAnchorSelectionPath(TreePath)*

public void setAnchorSelectionPath(javax.swing.tree.TreePath newPath)

Sets the path identified as the anchor. The anchor is not maintained by JTree, rather the UI will update it. 


    newPath - the new anchor path 

*javax.swing.JTree.setCellEditor(TreeCellEditor)*

public void setCellEditor(javax.swing.tree.TreeCellEditor cellEditor)

Sets the cell editor. A null value implies that the tree cannot be edited. If this represents a change in the cellEditor, the propertyChange method is invoked on all listeners. 


    cellEditor - the TreeCellEditor to use 

*javax.swing.JTree.setCellRenderer(TreeCellRenderer)*

public void setCellRenderer(javax.swing.tree.TreeCellRenderer x)

Sets the TreeCellRenderer that will be used to draw each cell. 


    x - the TreeCellRenderer that is to render each cell 

*javax.swing.JTree.setDragEnabled(boolean)*

public void setDragEnabled(boolean b)

Sets the dragEnabled property, which must be true to enable automatic drag handling (the first part of drag and drop) on this component. The transferHandler property needs to be 
set to a non-null value for the drag to do anything. The default value of the dragEnabled property is false. 



When automatic drag handling is enabled, most look and feels begin a drag-and-drop operation whenever the user presses the mouse button over a selection and then moves the mouse a 
few pixels. Setting this property to true can therefore have a subtle effect on how selections behave. 



Some look and feels might not support automatic drag and drop; they will ignore this property. You can work around such look and feels by modifying the component to directly call 
the exportAsDrag method of a TransferHandler. 


    b - the value to set the dragEnabled property to 

*javax.swing.JTree.setEditable(boolean)*

public void setEditable(boolean flag)

Determines whether the tree is editable. Fires a property change event if the new setting is different from the existing setting. 


    flag - a boolean value, true if the tree is editable 

*javax.swing.JTree.setExpandedState(TreePath,boolean)*

protected void setExpandedState(
  javax.swing.tree.TreePath path,
  boolean state)

Sets the expanded state of this JTree. If state is true, all parents of path and path are marked as expanded. If state is false, all parents of path are marked EXPANDED, but path 
itself is marked collapsed. This will fail if a TreeWillExpandListener vetos it. 



*javax.swing.JTree.setExpandsSelectedPaths(boolean)*

public void setExpandsSelectedPaths(boolean newValue)

Configures the expandsSelectedPaths property. If true, any time the selection is changed, either via the TreeSelectionModel, or the cover methods provided by JTree, the TreePaths 
parents will be expanded to make them visible (visible meaning the parent path is expanded, not necessarily in the visible rectangle of the JTree). If false, when the selection 
changes the nodes parent is not made visible (all its parents expanded). This is useful if you wish to have your selection model maintain paths that are not always visible (all 
parents expanded). 


    newValue - the new value for expandsSelectedPaths 

*javax.swing.JTree.setInvokesStopCellEditing(boolean)*

public void setInvokesStopCellEditing(boolean newValue)

Determines what happens when editing is interrupted by selecting another node in the tree, a change in the tree's data, or by some other means. Setting this property to true 
causes the changes to be automatically saved when editing is interrupted. 

Fires a property change for the INVOKES_STOP_CELL_EDITING_PROPERTY. 


    newValue - true means that stopCellEditing is invoked when editing is interrupted, and data is saved; false means that cancelCellEditing is invoked, and changes are lost 

*javax.swing.JTree.setLargeModel(boolean)*

public void setLargeModel(boolean newValue)

Specifies whether the UI should use a large model. (Not all UIs will implement this.) Fires a property change for the LARGE_MODEL_PROPERTY. 


    newValue - true to suggest a large model to the UI 

*javax.swing.JTree.setLeadSelectionPath(TreePath)*

public void setLeadSelectionPath(javax.swing.tree.TreePath newPath)

Sets the path identifies as the lead. The lead may not be selected. The lead is not maintained by JTree, rather the UI will update it. 


    newPath - the new lead path 

*javax.swing.JTree.setModel(TreeModel)*

public void setModel(javax.swing.tree.TreeModel newModel)

Sets the TreeModel that will provide the data. 


    newModel - the TreeModel that is to provide the data 

*javax.swing.JTree.setRootVisible(boolean)*

public void setRootVisible(boolean rootVisible)

Determines whether or not the root node from the TreeModel is visible. 


    rootVisible - true if the root node of the tree is to be displayed 

*javax.swing.JTree.setRowHeight(int)*

public void setRowHeight(int rowHeight)

Sets the height of each cell, in pixels. If the specified value is less than or equal to zero the current cell renderer is queried for each row's height. 


    rowHeight - the height of each cell, in pixels 

*javax.swing.JTree.setScrollsOnExpand(boolean)*

public void setScrollsOnExpand(boolean newValue)

Sets the scrollsOnExpand property, which determines whether the tree might scroll to show previously hidden children. If this property is true (the default), when a node expands 
the tree can use scrolling to make the maximum possible number of the node's descendants visible. In some look and feels, trees might not need to scroll when expanded; those look 
and feels will ignore this property. 


    newValue - false to disable scrolling on expansion; true to enable it 

*javax.swing.JTree.setSelectionInterval(int,int)*

public void setSelectionInterval(
  int index0,
  int index1)

Selects the nodes between index0 and index1, inclusive. 


    index0 - an integer specifying a display row, where 0 is the first row in the display 
    index1 - an integer specifying a second display row 

*javax.swing.JTree.setSelectionModel(TreeSelectionModel)*

public void setSelectionModel(javax.swing.tree.TreeSelectionModel selectionModel)

Sets the tree's selection model. When a null value is specified an emtpy selectionModel is used, which does not allow selections. 


    selectionModel - the TreeSelectionModel to use, or null to disable selections 

*javax.swing.JTree.setSelectionPath(TreePath)*

public void setSelectionPath(javax.swing.tree.TreePath path)

Selects the node identified by the specified path. If any component of the path is hidden (under a collapsed node), and getExpandsSelectedPaths is true it is exposed (made 
viewable). 


    path - the TreePath specifying the node to select 

*javax.swing.JTree.setSelectionPaths(TreePath[])*

public void setSelectionPaths(javax.swing.tree.TreePath[] paths)

Selects the nodes identified by the specified array of paths. If any component in any of the paths is hidden (under a collapsed node), and getExpandsSelectedPaths is true it is 
exposed (made viewable). 


    paths - an array of TreePath objects that specifies the nodes to select 

*javax.swing.JTree.setSelectionRow(int)*

public void setSelectionRow(int row)

Selects the node at the specified row in the display. 


    row - the row to select, where 0 is the first row in the display 

*javax.swing.JTree.setSelectionRows(int[])*

public void setSelectionRows(int[] rows)

Selects the nodes corresponding to each of the specified rows in the display. If a particular element of rows is = getRowCount, it will be ignored. If none of the elements in rows 
are valid rows, the selection will be cleared. That is it will be as if clearSelection was invoked. 


    rows - an array of ints specifying the rows to select, where 0 indicates the first row in the display 

*javax.swing.JTree.setShowsRootHandles(boolean)*

public void setShowsRootHandles(boolean newValue)

Sets the value of the showsRootHandles property, which specifies whether the node handles should be displayed. The default value of this property depends on the constructor used 
to create the JTree. Some look and feels might not support handles; they will ignore this property. 


    newValue - true if root handles should be displayed; otherwise, false 

*javax.swing.JTree.setToggleClickCount(int)*

public void setToggleClickCount(int clickCount)

Sets the number of mouse clicks before a node will expand or close. The default is two. 



*javax.swing.JTree.setUI(TreeUI)*

public void setUI(javax.swing.plaf.TreeUI ui)

Sets the Lobject that renders this component. 


    ui - the TreeUI Lobject 

*javax.swing.JTree.setVisibleRowCount(int)*

public void setVisibleRowCount(int newCount)

Sets the number of rows that are to be displayed. This will only work if the tree is contained in a JScrollPane, and will adjust the preferred size and size of that scrollpane. 


    newCount - the number of rows to display 

*javax.swing.JTree.startEditingAtPath(TreePath)*

public void startEditingAtPath(javax.swing.tree.TreePath path)

Selects the node identified by the specified path and initiates editing. The edit-attempt fails if the CellEditor does not allow editing for the specified item. 


    path - the TreePath identifying a node 

*javax.swing.JTree.stopEditing()*

public boolean stopEditing()

Ends the current editing session. (The DefaultTreeCellEditor object saves any edits that are currently in progress on a cell. Other implementations may operate differently.) Has 
no effect if the tree isn't being edited. 

Note: To make edit-saves automatic whenever the user changes their position in the tree, use (|javax.swing.JTree|) . 



    Returns: true if editing was in progress and is now stopped, false if editing was not in progress 

*javax.swing.JTree.treeDidChange()*

public void treeDidChange()

Sent when the tree has changed enough that we need to resize the bounds, but not enough that we need to remove the expanded node set (e.g nodes were expanded or collapsed, or 
nodes were inserted into the tree). You should never have to invoke this, the UI will invoke this as it needs to. 



*javax.swing.JTree.updateUI()*

public void updateUI()

Notification from the UIManager that the Lhas changed. Replaces the current UI object with the latest version from the UIManager. 





*java.util.concurrent.PriorityBlockingQueue* *PriorityBlockingQueue* An unbounde

public class PriorityBlockingQueue
  extends    |java.util.AbstractQueue|
  implements |java.util.concurrent.BlockingQueue|
             |java.io.Serializable|

|java.util.concurrent.PriorityBlockingQueue_Description|
|java.util.concurrent.PriorityBlockingQueue_Fields|
|java.util.concurrent.PriorityBlockingQueue_Constructors|
|java.util.concurrent.PriorityBlockingQueue_Methods|

================================================================================

*java.util.concurrent.PriorityBlockingQueue_Constructors*
|java.util.concurrent.PriorityBlockingQueue()|Creates a PriorityBlockingQueue w
|java.util.concurrent.PriorityBlockingQueue(Collection)|Creates a PriorityBlock
|java.util.concurrent.PriorityBlockingQueue(int)|Creates a PriorityBlockingQueu
|java.util.concurrent.PriorityBlockingQueue(int,Comparator)|Creates a PriorityB

*java.util.concurrent.PriorityBlockingQueue_Methods*
|java.util.concurrent.PriorityBlockingQueue.add(E)|Adds the specified element t
|java.util.concurrent.PriorityBlockingQueue.clear()|Atomically removes all of t
|java.util.concurrent.PriorityBlockingQueue.comparator()|Returns the comparator
|java.util.concurrent.PriorityBlockingQueue.contains(Object)|
|java.util.concurrent.PriorityBlockingQueue.drainTo(Collection)|
|java.util.concurrent.PriorityBlockingQueue.drainTo(Collection,int)|
|java.util.concurrent.PriorityBlockingQueue.iterator()|Returns an iterator over
|java.util.concurrent.PriorityBlockingQueue.offer(E)|Inserts the specified elem
|java.util.concurrent.PriorityBlockingQueue.offer(E,long,TimeUnit)|Inserts the 
|java.util.concurrent.PriorityBlockingQueue.peek()|
|java.util.concurrent.PriorityBlockingQueue.poll()|
|java.util.concurrent.PriorityBlockingQueue.poll(long,TimeUnit)|
|java.util.concurrent.PriorityBlockingQueue.put(E)|Adds the specified element t
|java.util.concurrent.PriorityBlockingQueue.remainingCapacity()|Always returns 
|java.util.concurrent.PriorityBlockingQueue.remove(Object)|Removes a single ins
|java.util.concurrent.PriorityBlockingQueue.size()|
|java.util.concurrent.PriorityBlockingQueue.take()|
|java.util.concurrent.PriorityBlockingQueue.toArray()|
|java.util.concurrent.PriorityBlockingQueue.toArray(T[])|
|java.util.concurrent.PriorityBlockingQueue.toString()|

*java.util.concurrent.PriorityBlockingQueue_Description*

An unbounded blocking queue(|java.util.concurrent.BlockingQueue|) that uses the 
same ordering rules as class (|java.util.PriorityQueue|) and supplies blocking 
retrieval operations. While this queue is logically unbounded, attempted 
additions may fail due to resource exhaustion (causing OutOfMemoryError). This 
class does not permit null elements. A priority queue relying on natural 
ordering also does not permit insertion of non-comparable objects (doing so 
results in ClassCastException). 

This class and its iterator implement all of the optional methods of the 
(|java.util.Collection|) and (|java.util.Iterator|) interfaces. The Iterator 
provided in method (|java.util.concurrent.PriorityBlockingQueue|) is not 
guaranteed to traverse the elements of the PriorityBlockingQueue in any 
particular order. If you need ordered traversal, consider using 
Arrays.sort(pq.toArray()). 

This class is a member of the <a href="/../guide/collections/index.html"> Java 
Collections Framework. 


*java.util.concurrent.PriorityBlockingQueue()*

public PriorityBlockingQueue()

Creates a PriorityBlockingQueue with the default initial capacity (11) that 
orders its elements according to their natural ordering (using Comparable). 


*java.util.concurrent.PriorityBlockingQueue(Collection)*

public PriorityBlockingQueue(java.util.Collection c)

Creates a PriorityBlockingQueue containing the elements in the specified 
collection. The priority queue has an initial capacity of 110% of the size of 
the specified collection. If the specified collection is a 
(|java.util.SortedSet|) or a (|java.util.PriorityQueue|) , this priority queue 
will be sorted according to the same comparator, or according to its elements' 
natural order if the collection is sorted according to its elements' natural 
order. Otherwise, this priority queue is ordered according to its elements' 
natural order. 

    c - the collection whose elements are to be placed into this priority queue. 

*java.util.concurrent.PriorityBlockingQueue(int)*

public PriorityBlockingQueue(int initialCapacity)

Creates a PriorityBlockingQueue with the specified initial capacity that orders 
its elements according to their natural ordering (using Comparable). 

    initialCapacity - the initial capacity for this priority queue. 

*java.util.concurrent.PriorityBlockingQueue(int,Comparator)*

public PriorityBlockingQueue(
  int initialCapacity,
  java.util.Comparator comparator)

Creates a PriorityBlockingQueue with the specified initial capacity that orders 
its elements according to the specified comparator. 

    initialCapacity - the initial capacity for this priority queue. 
    comparator - the comparator used to order this priority queue. If null then the order 
       depends on the elements' natural ordering. 

*java.util.concurrent.PriorityBlockingQueue.add(E)*

public boolean add(java.lang.Object o)

Adds the specified element to this queue. 

    o - the element to add 

    Returns: true (as per the general contract of Collection.add). 
*java.util.concurrent.PriorityBlockingQueue.clear()*

public void clear()

Atomically removes all of the elements from this queue. The queue will be empty 
after this call returns. 


*java.util.concurrent.PriorityBlockingQueue.comparator()*

public |java.util.Comparator| comparator()

Returns the comparator used to order this collection, or null if this 
collection is sorted according to its elements natural ordering (using 
Comparable). 


    Returns: the comparator used to order this collection, or null if this collection is 
             sorted according to its elements natural ordering. 
*java.util.concurrent.PriorityBlockingQueue.contains(Object)*

public boolean contains(java.lang.Object o)




*java.util.concurrent.PriorityBlockingQueue.drainTo(Collection)*

public int drainTo(java.util.Collection c)




*java.util.concurrent.PriorityBlockingQueue.drainTo(Collection,int)*

public int drainTo(
  java.util.Collection c,
  int maxElements)




*java.util.concurrent.PriorityBlockingQueue.iterator()*

public |java.util.Iterator| iterator()

Returns an iterator over the elements in this queue. The iterator does not 
return the elements in any particular order. The returned iterator is a 
thread-safe "fast-fail" iterator that will throw 
(|java.util.ConcurrentModificationException|) upon detected interference. 


    Returns: an iterator over the elements in this queue. 
*java.util.concurrent.PriorityBlockingQueue.offer(E)*

public boolean offer(java.lang.Object o)

Inserts the specified element into this priority queue. 

    o - the element to add 

    Returns: 
*java.util.concurrent.PriorityBlockingQueue.offer(E,long,TimeUnit)*

public boolean offer(
  java.lang.Object o,
  long timeout,
  java.util.concurrent.TimeUnit unit)

Inserts the specified element into this priority queue. As the queue is 
unbounded this method will never block. 

    o - the element to add 
    timeout - This parameter is ignored as the method never blocks 
    unit - This parameter is ignored as the method never blocks 

    Returns: 
*java.util.concurrent.PriorityBlockingQueue.peek()*

public |java.lang.Object| peek()




*java.util.concurrent.PriorityBlockingQueue.poll()*

public |java.lang.Object| poll()




*java.util.concurrent.PriorityBlockingQueue.poll(long,TimeUnit)*

public |java.lang.Object| poll(
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         



*java.util.concurrent.PriorityBlockingQueue.put(E)*

public void put(java.lang.Object o)

Adds the specified element to this priority queue. As the queue is unbounded 
this method will never block. 

    o - the element to add 

*java.util.concurrent.PriorityBlockingQueue.remainingCapacity()*

public int remainingCapacity()

Always returns Integer.MAX_VALUE because a PriorityBlockingQueue is not 
capacity constrained. 


    Returns: Integer.MAX_VALUE 
*java.util.concurrent.PriorityBlockingQueue.remove(Object)*

public boolean remove(java.lang.Object o)

Removes a single instance of the specified element from this queue, if it is 
present. 


*java.util.concurrent.PriorityBlockingQueue.size()*

public int size()




*java.util.concurrent.PriorityBlockingQueue.take()*

public |java.lang.Object| take()
  throws |java.lang.InterruptedException|
         



*java.util.concurrent.PriorityBlockingQueue.toArray()*

public |java.lang.Object| toArray()




*java.util.concurrent.PriorityBlockingQueue.toArray(T[])*

public |java.lang.Object| toArray(java.lang.Object[] a)




*java.util.concurrent.PriorityBlockingQueue.toString()*

public |java.lang.String| toString()






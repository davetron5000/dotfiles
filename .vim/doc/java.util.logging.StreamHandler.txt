*java.util.logging.StreamHandler* *StreamHandler* Stream based logging Handler.

public class StreamHandler
  extends    |java.util.logging.Handler|

|java.util.logging.StreamHandler_Description|
|java.util.logging.StreamHandler_Fields|
|java.util.logging.StreamHandler_Constructors|
|java.util.logging.StreamHandler_Methods|

================================================================================

*java.util.logging.StreamHandler_Constructors*
|java.util.logging.StreamHandler()|Create a StreamHandler, with no current outp
|java.util.logging.StreamHandler(OutputStream,Formatter)|Create a StreamHandler

*java.util.logging.StreamHandler_Methods*
|java.util.logging.StreamHandler.close()|Close the current output stream.
|java.util.logging.StreamHandler.flush()|Flush any buffered messages.
|java.util.logging.StreamHandler.isLoggable(LogRecord)|Check if this Handler wo
|java.util.logging.StreamHandler.publish(LogRecord)|Format and publish a LogRec
|java.util.logging.StreamHandler.setEncoding(String)|Set (or change) the charac
|java.util.logging.StreamHandler.setOutputStream(OutputStream)|Change the outpu

*java.util.logging.StreamHandler_Description*

Stream based logging Handler. 

This is primarily intended as a base class or support class to be used in 
implementing other logging Handlers. 

LogRecords are published to a given java.io.OutputStream. 

Configuration: By default each StreamHandler is initialized using the following 
LogManager configuration properties. If properties are not defined (or have 
invalid values) then the specified default values are used. 

java.util.logging.StreamHandler.level specifies the default level for the 
Handler (defaults to Level.INFO). java.util.logging.StreamHandler.filter 
specifies the name of a Filter class to use (defaults to no Filter). 
java.util.logging.StreamHandler.formatter specifies the name of a Formatter 
class to use (defaults to java.util.logging.SimpleFormatter). 
java.util.logging.StreamHandler.encoding the name of the character set encoding 
to use (defaults to the default platform encoding). 


*java.util.logging.StreamHandler()*

public StreamHandler()

Create a StreamHandler, with no current output stream. 


*java.util.logging.StreamHandler(OutputStream,Formatter)*

public StreamHandler(
  java.io.OutputStream out,
  java.util.logging.Formatter formatter)

Create a StreamHandler with a given Formatter and output stream. 

    out - the target output stream 
    formatter - Formatter to be used to format output 

*java.util.logging.StreamHandler.close()*

public synchronized void close()
  throws |java.lang.SecurityException|
         
Close the current output stream. 

The Formatter's "tail" string is written to the stream before it is closed. In 
addition, if the Formatter's "head" string has not yet been written to the 
stream, it will be written before the "tail" string. 


*java.util.logging.StreamHandler.flush()*

public synchronized void flush()

Flush any buffered messages. 


*java.util.logging.StreamHandler.isLoggable(LogRecord)*

public boolean isLoggable(java.util.logging.LogRecord record)

Check if this Handler would actually log a given LogRecord. 

This method checks if the LogRecord has an appropriate level and whether it 
satisfies any Filter. It will also return false if no output stream has been 
assigned yet or the LogRecord is Null. 

    record - a LogRecord 

    Returns: true if the LogRecord would be logged. 
*java.util.logging.StreamHandler.publish(LogRecord)*

public synchronized void publish(java.util.logging.LogRecord record)

Format and publish a LogRecord. 

The StreamHandler first checks if there is an OutputStream and if the given 
LogRecord has at least the required log level. If not it silently returns. If 
so, it calls any associated Filter to check if the record should be published. 
If so, it calls its Formatter to format the record and then writes the result 
to the current output stream. 

If this is the first LogRecord to be written to a given OutputStream, the 
Formatter's "head" string is written to the stream before the LogRecord is 
written. 

    record - description of the log event. A null record is silently ignored and is not 
       published 

*java.util.logging.StreamHandler.setEncoding(String)*

public void setEncoding(java.lang.String encoding)
  throws |java.lang.SecurityException|
         |java.io.UnsupportedEncodingException|
         
Set (or change) the character encoding used by this Handler. 

The encoding should be set before any LogRecords are written to the Handler. 

    encoding - The name of a supported character encoding. May be null, to indicate the 
       default platform encoding. 

*java.util.logging.StreamHandler.setOutputStream(OutputStream)*

protected synchronized void setOutputStream(java.io.OutputStream out)
  throws |java.lang.SecurityException|
         
Change the output stream. 

If there is a current output stream then the Formatter's tail string is written 
and the stream is flushed and closed. Then the output stream is replaced with 
the new output stream. 

    out - New output stream. May not be null. 



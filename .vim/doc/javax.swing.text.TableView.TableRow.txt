*javax.swing.text.TableView.TableRow* *TableView.TableRow* View of a row in a ro

public class TableView.TableRow
  extends    |javax.swing.text.BoxView|

|javax.swing.text.TableView.TableRow_Description|
|javax.swing.text.TableView.TableRow_Fields|
|javax.swing.text.TableView.TableRow_Constructors|
|javax.swing.text.TableView.TableRow_Methods|

================================================================================

*javax.swing.text.TableView.TableRow_Constructors*
|javax.swing.text.TableView.TableRow(Element)|Constructs a TableView for the gi

*javax.swing.text.TableView.TableRow_Methods*
|javax.swing.text.TableView.TableRow.getResizeWeight(int)|Determines the resiza
|javax.swing.text.TableView.TableRow.getViewAtPosition(int,Rectangle)|Fetches t
|javax.swing.text.TableView.TableRow.layoutMajorAxis(int,int,int[],int[])|Perfo
|javax.swing.text.TableView.TableRow.layoutMinorAxis(int,int,int[],int[])|Perfo
|javax.swing.text.TableView.TableRow.replace(int,int,View[])|Change the child v

*javax.swing.text.TableView.TableRow_Description*

View of a row in a row-centric table. 


*javax.swing.text.TableView.TableRow(Element)*

public TableView.TableRow(javax.swing.text.Element elem)

Constructs a TableView for the given element. 

    elem - the element that this view is responsible for 

*javax.swing.text.TableView.TableRow.getResizeWeight(int)*

public int getResizeWeight(int axis)

Determines the resizability of the view along the given axis. A value of 0 or 
less is not resizable. 

    axis - may be either View.X_AXIS or View.Y_AXIS 

    Returns: the resize weight 
*javax.swing.text.TableView.TableRow.getViewAtPosition(int,Rectangle)*

protected |javax.swing.text.View| getViewAtPosition(
  int pos,
  java.awt.Rectangle a)

Fetches the child view that represents the given position in the model. This is 
implemented to walk through the children looking for a range that contains the 
given position. In this view the children do not necessarily have a one to one 
mapping with the child elements. 

    pos - the search position >= 0 
    a - the allocation to the table on entry, and the allocation of the view containing 
       the position on exit 

    Returns: the view representing the given position, or null if there isn't one 
*javax.swing.text.TableView.TableRow.layoutMajorAxis(int,int,int[],int[])*

protected void layoutMajorAxis(
  int targetSpan,
  int axis,
  int[] offsets,
  int[] spans)

Perform layout for the major axis of the box (i.e. the axis that it 
represents). The results of the layout should be placed in the given arrays 
which represent the allocations to the children along the major axis. 

This is re-implemented to give each child the span of the column width for the 
table, and to give cells that span multiple columns the multi-column span. 

    targetSpan - the total span given to the view, which whould be used to layout the children. 
    axis - the axis being layed out. 
    offsets - the offsets from the origin of the view for each of the child views. This is a 
       return value and is filled in by the implementation of this method. 
    spans - the span of each child view. This is a return value and is filled in by the 
       implementation of this method. 

    Returns: the offset and span for each child view in the offsets and spans parameters 
*javax.swing.text.TableView.TableRow.layoutMinorAxis(int,int,int[],int[])*

protected void layoutMinorAxis(
  int targetSpan,
  int axis,
  int[] offsets,
  int[] spans)

Perform layout for the minor axis of the box (i.e. the axis orthoginal to the 
axis that it represents). The results of the layout should be placed in the 
given arrays which represent the allocations to the children along the minor 
axis. This is called by the superclass whenever the layout needs to be updated 
along the minor axis. 

This is implemented to delegate to the superclass, then adjust the span for any 
cell that spans multiple rows. 

    targetSpan - the total span given to the view, which whould be used to layout the children. 
    axis - the axis being layed out. 
    offsets - the offsets from the origin of the view for each of the child views. This is a 
       return value and is filled in by the implementation of this method. 
    spans - the span of each child view. This is a return value and is filled in by the 
       implementation of this method. 

    Returns: the offset and span for each child view in the offsets and spans parameters 
*javax.swing.text.TableView.TableRow.replace(int,int,View[])*

public void replace(
  int offset,
  int length,
  javax.swing.text.View[] views)

Change the child views. This is implemented to provide the superclass behavior 
and invalidate the grid so that rows and columns will be recalculated. 




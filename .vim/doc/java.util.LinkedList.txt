*java.util.LinkedList* *LinkedList* Linked list implementation of the List inter

public class LinkedList
  extends    |java.util.AbstractSequentialList|
  implements |java.util.List|
             |java.util.Queue|
             |java.lang.Cloneable|
             |java.io.Serializable|

|java.util.LinkedList_Description|
|java.util.LinkedList_Fields|
|java.util.LinkedList_Constructors|
|java.util.LinkedList_Methods|

================================================================================

*java.util.LinkedList_Constructors*
|java.util.LinkedList()|Constructs an empty list.
|java.util.LinkedList(Collection)|Constructs a list containing the elements of 

*java.util.LinkedList_Methods*
|java.util.LinkedList.add(E)|Appends the specified element to the end of this l
|java.util.LinkedList.add(int,E)|Inserts the specified element at the specified
|java.util.LinkedList.addAll(Collection)|Appends all of the elements in the spe
|java.util.LinkedList.addAll(int,Collection)|Inserts all of the elements in the
|java.util.LinkedList.addFirst(E)|Inserts the given element at the beginning of
|java.util.LinkedList.addLast(E)|Appends the given element to the end of this l
|java.util.LinkedList.clear()|Removes all of the elements from this list.
|java.util.LinkedList.clone()|Returns a shallow copy of this LinkedList.
|java.util.LinkedList.contains(Object)|Returns true if this list contains the s
|java.util.LinkedList.element()|Retrieves, but does not remove, the head (first
|java.util.LinkedList.get(int)|Returns the element at the specified position in
|java.util.LinkedList.getFirst()|Returns the first element in this list.
|java.util.LinkedList.getLast()|Returns the last element in this list.
|java.util.LinkedList.indexOf(Object)|Returns the index in this list of the fir
|java.util.LinkedList.lastIndexOf(Object)|Returns the index in this list of the
|java.util.LinkedList.listIterator(int)|Returns a list-iterator of the elements
|java.util.LinkedList.offer(E)|Adds the specified element as the tail (last ele
|java.util.LinkedList.peek()|Retrieves, but does not remove, the head (first el
|java.util.LinkedList.poll()|Retrieves and removes the head (first element) of 
|java.util.LinkedList.remove()|Retrieves and removes the head (first element) o
|java.util.LinkedList.remove(int)|Removes the element at the specified position
|java.util.LinkedList.remove(Object)|Removes the first occurrence of the specif
|java.util.LinkedList.removeFirst()|Removes and returns the first element from 
|java.util.LinkedList.removeLast()|Removes and returns the last element from th
|java.util.LinkedList.set(int,E)|Replaces the element at the specified position
|java.util.LinkedList.size()|Returns the number of elements in this list.
|java.util.LinkedList.toArray()|Returns an array containing all of the elements
|java.util.LinkedList.toArray(T[])|Returns an array containing all of the eleme

*java.util.LinkedList_Description*

Linked list implementation of the List interface. Implements all optional list 
operations, and permits all elements (including null). In addition to 
implementing the List interface, the LinkedList class provides uniformly named 
methods to get, remove and insert an element at the beginning and end of the 
list. These operations allow linked lists to be used as a stack, queue, or 
double-ended queue (deque). 

The class implements the Queue interface, providing first-in-first-out queue 
operations for add, poll, etc. Other stack and deque operations could be easily 
recast in terms of the standard list operations. They're included here 
primarily for convenience, though they may run slightly faster than the 
equivalent List operations. 

All of the operations perform as could be expected for a doubly-linked list. 
Operations that index into the list will traverse the list from the beginning 
or the end, whichever is closer to the specified index. 

Note that this implementation is not synchronized. If multiple threads access a 
list concurrently, and at least one of the threads modifies the list 
structurally, it must be synchronized externally. (A structural modification is 
any operation that adds or deletes one or more elements; merely setting the 
value of an element is not a structural modification.) This is typically 
accomplished by synchronizing on some object that naturally encapsulates the 
list. If no such object exists, the list should be "wrapped" using the 
Collections.synchronizedList method. This is best done at creation time, to 
prevent accidental unsynchronized access to the list: 

List list = Collections.synchronizedList(new LinkedList(...)); 

The iterators returned by the this class's iterator and listIterator methods 
are fail-fast: if the list is structurally modified at any time after the 
iterator is created, in any way except through the Iterator's own remove or add 
methods, the iterator will throw a ConcurrentModificationException. Thus, in 
the face of concurrent modification, the iterator fails quickly and cleanly, 
rather than risking arbitrary, non-deterministic behavior at an undetermined 
time in the future. 

Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, 
generally speaking, impossible to make any hard guarantees in the presence of 
unsynchronized concurrent modification. Fail-fast iterators throw 
ConcurrentModificationException on a best-effort basis. Therefore, it would be 
wrong to write a program that depended on this exception for its correctness: 
the fail-fast behavior of iterators should be used only to detect bugs. 

This class is a member of the <a href="/../guide/collections/index.html"> Java 
Collections Framework. 


*java.util.LinkedList()*

public LinkedList()

Constructs an empty list. 


*java.util.LinkedList(Collection)*

public LinkedList(java.util.Collection c)

Constructs a list containing the elements of the specified collection, in the 
order they are returned by the collection's iterator. 

    c - the collection whose elements are to be placed into this list. 

*java.util.LinkedList.add(E)*

public boolean add(java.lang.Object o)

Appends the specified element to the end of this list. 

    o - element to be appended to this list. 

    Returns: true (as per the general contract of Collection.add). 
*java.util.LinkedList.add(int,E)*

public void add(
  int index,
  java.lang.Object element)

Inserts the specified element at the specified position in this list. Shifts 
the element currently at that position (if any) and any subsequent elements to 
the right (adds one to their indices). 

    index - index at which the specified element is to be inserted. 
    element - element to be inserted. 

*java.util.LinkedList.addAll(Collection)*

public boolean addAll(java.util.Collection c)

Appends all of the elements in the specified collection to the end of this 
list, in the order that they are returned by the specified collection's 
iterator. The behavior of this operation is undefined if the specified 
collection is modified while the operation is in progress. (This implies that 
the behavior of this call is undefined if the specified Collection is this 
list, and this list is nonempty.) 

    c - the elements to be inserted into this list. 

    Returns: true if this list changed as a result of the call. 
*java.util.LinkedList.addAll(int,Collection)*

public boolean addAll(
  int index,
  java.util.Collection c)

Inserts all of the elements in the specified collection into this list, 
starting at the specified position. Shifts the element currently at that 
position (if any) and any subsequent elements to the right (increases their 
indices). The new elements will appear in the list in the order that they are 
returned by the specified collection's iterator. 

    index - index at which to insert first element from the specified collection. 
    c - elements to be inserted into this list. 

    Returns: true if this list changed as a result of the call. 
*java.util.LinkedList.addFirst(E)*

public void addFirst(java.lang.Object o)

Inserts the given element at the beginning of this list. 

    o - the element to be inserted at the beginning of this list. 

*java.util.LinkedList.addLast(E)*

public void addLast(java.lang.Object o)

Appends the given element to the end of this list. (Identical in function to 
the add method; included only for consistency.) 

    o - the element to be inserted at the end of this list. 

*java.util.LinkedList.clear()*

public void clear()

Removes all of the elements from this list. 


*java.util.LinkedList.clone()*

public |java.lang.Object| clone()

Returns a shallow copy of this LinkedList. (The elements themselves are not 
cloned.) 


    Returns: a shallow copy of this LinkedList instance. 
*java.util.LinkedList.contains(Object)*

public boolean contains(java.lang.Object o)

Returns true if this list contains the specified element. More formally, 
returns true if and only if this list contains at least one element e such that 
(o==null ? e==null : o.equals(e)). 

    o - element whose presence in this list is to be tested. 

    Returns: true if this list contains the specified element. 
*java.util.LinkedList.element()*

public |java.lang.Object| element()

Retrieves, but does not remove, the head (first element) of this list. 


    Returns: the head of this queue. 
*java.util.LinkedList.get(int)*

public |java.lang.Object| get(int index)

Returns the element at the specified position in this list. 

    index - index of element to return. 

    Returns: the element at the specified position in this list. 
*java.util.LinkedList.getFirst()*

public |java.lang.Object| getFirst()

Returns the first element in this list. 


    Returns: the first element in this list. 
*java.util.LinkedList.getLast()*

public |java.lang.Object| getLast()

Returns the last element in this list. 


    Returns: the last element in this list. 
*java.util.LinkedList.indexOf(Object)*

public int indexOf(java.lang.Object o)

Returns the index in this list of the first occurrence of the specified 
element, or -1 if the List does not contain this element. More formally, 
returns the lowest index i such that (o==null ? get(i)==null : 
o.equals(get(i))), or -1 if there is no such index. 

    o - element to search for. 

    Returns: the index in this list of the first occurrence of the specified element, or -1 
             if the list does not contain this element. 
*java.util.LinkedList.lastIndexOf(Object)*

public int lastIndexOf(java.lang.Object o)

Returns the index in this list of the last occurrence of the specified element, 
or -1 if the list does not contain this element. More formally, returns the 
highest index i such that (o==null ? get(i)==null : o.equals(get(i))), or -1 if 
there is no such index. 

    o - element to search for. 

    Returns: the index in this list of the last occurrence of the specified element, or -1 
             if the list does not contain this element. 
*java.util.LinkedList.listIterator(int)*

public |java.util.ListIterator| listIterator(int index)

Returns a list-iterator of the elements in this list (in proper sequence), 
starting at the specified position in the list. Obeys the general contract of 
List.listIterator(int). 

The list-iterator is fail-fast: if the list is structurally modified at any 
time after the Iterator is created, in any way except through the 
list-iterator's own remove or add methods, the list-iterator will throw a 
ConcurrentModificationException. Thus, in the face of concurrent modification, 
the iterator fails quickly and cleanly, rather than risking arbitrary, 
non-deterministic behavior at an undetermined time in the future. 

    index - index of first element to be returned from the list-iterator (by a call to 
       next). 

    Returns: a ListIterator of the elements in this list (in proper sequence), starting at 
             the specified position in the list. 
*java.util.LinkedList.offer(E)*

public boolean offer(java.lang.Object o)

Adds the specified element as the tail (last element) of this list. 

    o - the element to add. 

    Returns: true (as per the general contract of Queue.offer) 
*java.util.LinkedList.peek()*

public |java.lang.Object| peek()

Retrieves, but does not remove, the head (first element) of this list. 


    Returns: the head of this queue, or null if this queue is empty. 
*java.util.LinkedList.poll()*

public |java.lang.Object| poll()

Retrieves and removes the head (first element) of this list. 


    Returns: the head of this queue, or null if this queue is empty. 
*java.util.LinkedList.remove()*

public |java.lang.Object| remove()

Retrieves and removes the head (first element) of this list. 


    Returns: the head of this queue. 
*java.util.LinkedList.remove(int)*

public |java.lang.Object| remove(int index)

Removes the element at the specified position in this list. Shifts any 
subsequent elements to the left (subtracts one from their indices). Returns the 
element that was removed from the list. 

    index - the index of the element to removed. 

    Returns: the element previously at the specified position. 
*java.util.LinkedList.remove(Object)*

public boolean remove(java.lang.Object o)

Removes the first occurrence of the specified element in this list. If the list 
does not contain the element, it is unchanged. More formally, removes the 
element with the lowest index i such that (o==null ? get(i)==null : 
o.equals(get(i))) (if such an element exists). 

    o - element to be removed from this list, if present. 

    Returns: true if the list contained the specified element. 
*java.util.LinkedList.removeFirst()*

public |java.lang.Object| removeFirst()

Removes and returns the first element from this list. 


    Returns: the first element from this list. 
*java.util.LinkedList.removeLast()*

public |java.lang.Object| removeLast()

Removes and returns the last element from this list. 


    Returns: the last element from this list. 
*java.util.LinkedList.set(int,E)*

public |java.lang.Object| set(
  int index,
  java.lang.Object element)

Replaces the element at the specified position in this list with the specified 
element. 

    index - index of element to replace. 
    element - element to be stored at the specified position. 

    Returns: the element previously at the specified position. 
*java.util.LinkedList.size()*

public int size()

Returns the number of elements in this list. 


    Returns: the number of elements in this list. 
*java.util.LinkedList.toArray()*

public |java.lang.Object| toArray()

Returns an array containing all of the elements in this list in the correct 
order. 


    Returns: an array containing all of the elements in this list in the correct order. 
*java.util.LinkedList.toArray(T[])*

public |java.lang.Object| toArray(java.lang.Object[] a)

Returns an array containing all of the elements in this list in the correct 
order; the runtime type of the returned array is that of the specified array. 
If the list fits in the specified array, it is returned therein. Otherwise, a 
new array is allocated with the runtime type of the specified array and the 
size of this list. 

If the list fits in the specified array with room to spare (i.e., the array has 
more elements than the list), the element in the array immediately following 
the end of the collection is set to null. This is useful in determining the 
length of the list only if the caller knows that the list does not contain any 
null elements. 

    a - the array into which the elements of the list are to be stored, if it is big 
       enough; otherwise, a new array of the same runtime type is allocated for 
       this purpose. 

    Returns: an array containing the elements of the list. 


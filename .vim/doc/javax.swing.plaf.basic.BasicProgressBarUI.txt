*javax.swing.plaf.basic.BasicProgressBarUI* *BasicProgressBarUI* A Basic Limplem

public class BasicProgressBarUI
  extends    |javax.swing.plaf.ProgressBarUI|

|javax.swing.plaf.basic.BasicProgressBarUI_Description|
|javax.swing.plaf.basic.BasicProgressBarUI_Fields|
|javax.swing.plaf.basic.BasicProgressBarUI_Constructors|
|javax.swing.plaf.basic.BasicProgressBarUI_Methods|

================================================================================

*javax.swing.plaf.basic.BasicProgressBarUI_Fields*
|java.awt.Rectangle_javax.swing.plaf.basic.BasicProgressBarUI.boxRect|
|javax.swing.event.ChangeListener_javax.swing.plaf.basic.BasicProgressBarUI.changeListener|
|javax.swing.JProgressBar_javax.swing.plaf.basic.BasicProgressBarUI.progressBar|

*javax.swing.plaf.basic.BasicProgressBarUI_Constructors*
|javax.swing.plaf.basic.BasicProgressBarUI()|

*javax.swing.plaf.basic.BasicProgressBarUI_Methods*
|javax.swing.plaf.basic.BasicProgressBarUI.createUI(JComponent)|
|javax.swing.plaf.basic.BasicProgressBarUI.getAmountFull(Insets,int,int)|This d
|javax.swing.plaf.basic.BasicProgressBarUI.getAnimationIndex()|Gets the index o
|javax.swing.plaf.basic.BasicProgressBarUI.getBox(Rectangle)|Stores the positio
|javax.swing.plaf.basic.BasicProgressBarUI.getBoxLength(int,int)|Returns the le
|javax.swing.plaf.basic.BasicProgressBarUI.getCellLength()|Returns the width (i
|javax.swing.plaf.basic.BasicProgressBarUI.getCellSpacing()|Returns the spacing
|javax.swing.plaf.basic.BasicProgressBarUI.getMaximumSize(JComponent)|
|javax.swing.plaf.basic.BasicProgressBarUI.getMinimumSize(JComponent)|The Minim
|javax.swing.plaf.basic.BasicProgressBarUI.getPreferredInnerHorizontal()|
|javax.swing.plaf.basic.BasicProgressBarUI.getPreferredInnerVertical()|
|javax.swing.plaf.basic.BasicProgressBarUI.getPreferredSize(JComponent)|
|javax.swing.plaf.basic.BasicProgressBarUI.getSelectionBackground()|The "select
|javax.swing.plaf.basic.BasicProgressBarUI.getSelectionForeground()|The "select
|javax.swing.plaf.basic.BasicProgressBarUI.getStringPlacement(Graphics,String,int,int,int,int)|
|javax.swing.plaf.basic.BasicProgressBarUI.incrementAnimationIndex()|Sets the i
|javax.swing.plaf.basic.BasicProgressBarUI.installDefaults()|
|javax.swing.plaf.basic.BasicProgressBarUI.installListeners()|
|javax.swing.plaf.basic.BasicProgressBarUI.installUI(JComponent)|
|javax.swing.plaf.basic.BasicProgressBarUI.paint(Graphics,JComponent)|Delegates
|javax.swing.plaf.basic.BasicProgressBarUI.paintDeterminate(Graphics,JComponent)|
|javax.swing.plaf.basic.BasicProgressBarUI.paintIndeterminate(Graphics,JComponent)|
|javax.swing.plaf.basic.BasicProgressBarUI.paintString(Graphics,int,int,int,int,int,Insets)|
|javax.swing.plaf.basic.BasicProgressBarUI.setAnimationIndex(int)|Sets the inde
|javax.swing.plaf.basic.BasicProgressBarUI.setCellLength(int)|
|javax.swing.plaf.basic.BasicProgressBarUI.setCellSpacing(int)|
|javax.swing.plaf.basic.BasicProgressBarUI.startAnimationTimer()|Starts the ani
|javax.swing.plaf.basic.BasicProgressBarUI.stopAnimationTimer()|Stops the anima
|javax.swing.plaf.basic.BasicProgressBarUI.uninstallDefaults()|
|javax.swing.plaf.basic.BasicProgressBarUI.uninstallListeners()|Removes all lis
|javax.swing.plaf.basic.BasicProgressBarUI.uninstallUI(JComponent)|

*javax.swing.plaf.basic.BasicProgressBarUI_Description*

A Basic Limplementation of ProgressBarUI. 


*java.awt.Rectangle_javax.swing.plaf.basic.BasicProgressBarUI.boxRect*

A Basic Limplementation of ProgressBarUI. 


*javax.swing.event.ChangeListener_javax.swing.plaf.basic.BasicProgressBarUI.changeListener*

A Basic Limplementation of ProgressBarUI. 


*javax.swing.JProgressBar_javax.swing.plaf.basic.BasicProgressBarUI.progressBar*

A Basic Limplementation of ProgressBarUI. 



*javax.swing.plaf.basic.BasicProgressBarUI()*

public BasicProgressBarUI()




*javax.swing.plaf.basic.BasicProgressBarUI.createUI(JComponent)*

public static |javax.swing.plaf.ComponentUI| createUI(javax.swing.JComponent x)




*javax.swing.plaf.basic.BasicProgressBarUI.getAmountFull(Insets,int,int)*

protected int getAmountFull(
  java.awt.Insets b,
  int width,
  int height)

This determines the amount of the progress bar that should be filled based on 
the percent done gathered from the model. This is a common operation so it was 
abstracted out. It assumes that your progress bar is linear. That is, if you 
are making a circular progress indicator, you will want to override this 
method. 


*javax.swing.plaf.basic.BasicProgressBarUI.getAnimationIndex()*

protected int getAnimationIndex()

Gets the index of the current animation frame. 


*javax.swing.plaf.basic.BasicProgressBarUI.getBox(Rectangle)*

protected |java.awt.Rectangle| getBox(java.awt.Rectangle r)

Stores the position and size of the bouncing box that would be painted for the 
current animation index in r and returns r. Subclasses that add to the painting 
performed in this class's implementation of paintIndeterminate -- to draw an 
outline around the bouncing box, for example -- can use this method to get the 
location of the bouncing box that was just painted. By overriding this method, 
you have complete control over the size and position of the bouncing box, 
without having to reimplement paintIndeterminate. 

    r - the Rectangle instance to be modified; may be null 

    Returns: null if no box should be drawn; otherwise, returns the passed-in rectangle (if 
             non-null) or a new rectangle 
*javax.swing.plaf.basic.BasicProgressBarUI.getBoxLength(int,int)*

protected int getBoxLength(
  int availableLength,
  int otherDimension)

Returns the length of the "bouncing box" to be painted. This method is invoked 
by the default implementation of paintIndeterminate to get the width (if the 
progress bar is horizontal) or height (if vertical) of the box. For example: 



boxRect.width = getBoxLength(componentInnards.width, componentInnards.height); 



    availableLength - the amount of space available for the bouncing box to move in; for a horizontal 
       progress bar, for example, this should be the inside width of the 
       progress bar (the component width minus borders) 
    otherDimension - for a horizontal progress bar, this should be the inside height of the progress 
       bar; this value might be used to constrain or determine the return value 

    Returns: the size of the box dimension being determined; must be no larger than 
             availableLength 
*javax.swing.plaf.basic.BasicProgressBarUI.getCellLength()*

protected int getCellLength()

Returns the width (if HORIZONTAL) or height (if VERTICAL) of each of the 
indivdual cells/units to be rendered in the progress bar. However, for text 
rendering simplification and aesthetic considerations, this function will 
return 1 when the progress string is being rendered. 


    Returns: the value representing the spacing between cells 
*javax.swing.plaf.basic.BasicProgressBarUI.getCellSpacing()*

protected int getCellSpacing()

Returns the spacing between each of the cells/units in the progress bar. 
However, for text rendering simplification and aesthetic considerations, this 
function will return 0 when the progress string is being rendered. 


    Returns: the value representing the spacing between cells 
*javax.swing.plaf.basic.BasicProgressBarUI.getMaximumSize(JComponent)*

public |java.awt.Dimension| getMaximumSize(javax.swing.JComponent c)




*javax.swing.plaf.basic.BasicProgressBarUI.getMinimumSize(JComponent)*

public |java.awt.Dimension| getMinimumSize(javax.swing.JComponent c)

The Minimum size for this component is 10. The rationale here is that there 
should be at least one pixel per 10 percent. 


*javax.swing.plaf.basic.BasicProgressBarUI.getPreferredInnerHorizontal()*

protected |java.awt.Dimension| getPreferredInnerHorizontal()




*javax.swing.plaf.basic.BasicProgressBarUI.getPreferredInnerVertical()*

protected |java.awt.Dimension| getPreferredInnerVertical()




*javax.swing.plaf.basic.BasicProgressBarUI.getPreferredSize(JComponent)*

public |java.awt.Dimension| getPreferredSize(javax.swing.JComponent c)




*javax.swing.plaf.basic.BasicProgressBarUI.getSelectionBackground()*

protected |java.awt.Color| getSelectionBackground()

The "selectionBackground" is the color of the text when it is painted over an 
unfilled area of the progress bar. 


*javax.swing.plaf.basic.BasicProgressBarUI.getSelectionForeground()*

protected |java.awt.Color| getSelectionForeground()

The "selectionForeground" is the color of the text when it is painted over a 
filled area of the progress bar. 


*javax.swing.plaf.basic.BasicProgressBarUI.getStringPlacement(Graphics,String,int,int,int,int)*

protected |java.awt.Point| getStringPlacement(
  java.awt.Graphics g,
  java.lang.String progressString,
  int x,
  int y,
  int width,
  int height)

Designate the place where the progress string will be painted. This 
implementation places it at the center of the progress bar (in both x and y). 
Override this if you want to right, left, top, or bottom align the progress 
string or if you need to nudge it around for any reason. 


*javax.swing.plaf.basic.BasicProgressBarUI.incrementAnimationIndex()*

protected void incrementAnimationIndex()

Sets the index of the current animation frame, to the next valid value, which 
results in the progress bar being repainted. The next valid value is, by 
default, the current animation index plus one. If the new value would be too 
large, this method sets the index to 0. Subclasses might need to override this 
method to ensure that the index does not go over the number of frames needed 
for the particular progress bar instance. This method is invoked by the default 
animation thread every X milliseconds, where X is specified by the 
"ProgressBar.repaintInterval" UI default. 


*javax.swing.plaf.basic.BasicProgressBarUI.installDefaults()*

protected void installDefaults()




*javax.swing.plaf.basic.BasicProgressBarUI.installListeners()*

protected void installListeners()




*javax.swing.plaf.basic.BasicProgressBarUI.installUI(JComponent)*

public void installUI(javax.swing.JComponent c)




*javax.swing.plaf.basic.BasicProgressBarUI.paint(Graphics,JComponent)*

public void paint(
  java.awt.Graphics g,
  javax.swing.JComponent c)

Delegates painting to one of two methods: paintDeterminate or 
paintIndeterminate. 


*javax.swing.plaf.basic.BasicProgressBarUI.paintDeterminate(Graphics,JComponent)*

protected void paintDeterminate(
  java.awt.Graphics g,
  javax.swing.JComponent c)

All purpose paint method that should do the right thing for almost all linear, 
determinate progress bars. By setting a few values in the defaults table, 
things should work just fine to paint your progress bar. Naturally, override 
this if you are making a circular or semi-circular progress bar. 


*javax.swing.plaf.basic.BasicProgressBarUI.paintIndeterminate(Graphics,JComponent)*

protected void paintIndeterminate(
  java.awt.Graphics g,
  javax.swing.JComponent c)

All purpose paint method that should do the right thing for all linear 
bouncing-box progress bars. Override this if you are making another kind of 
progress bar. 


*javax.swing.plaf.basic.BasicProgressBarUI.paintString(Graphics,int,int,int,int,int,Insets)*

protected void paintString(
  java.awt.Graphics g,
  int x,
  int y,
  int width,
  int height,
  int amountFull,
  java.awt.Insets b)




*javax.swing.plaf.basic.BasicProgressBarUI.setAnimationIndex(int)*

protected void setAnimationIndex(int newValue)

Sets the index of the current animation frame to the specified value and 
requests that the progress bar be repainted. Subclasses that don't use the 
default painting code might need to override this method to change the way that 
the repaint method is invoked. 

    newValue - the new animation index; no checking is performed on its value 

*javax.swing.plaf.basic.BasicProgressBarUI.setCellLength(int)*

protected void setCellLength(int cellLen)




*javax.swing.plaf.basic.BasicProgressBarUI.setCellSpacing(int)*

protected void setCellSpacing(int cellSpace)




*javax.swing.plaf.basic.BasicProgressBarUI.startAnimationTimer()*

protected void startAnimationTimer()

Starts the animation thread, creating and initializing it if necessary. This 
method is invoked when an indeterminate progress bar should start animating. 
Reasons for this may include: 

The progress bar is determinate and becomes displayable The progress bar is 
displayable and becomes determinate The progress bar is displayable and 
determinate and this UI is installed 

If you implement your own animation thread, you must override this method. 


*javax.swing.plaf.basic.BasicProgressBarUI.stopAnimationTimer()*

protected void stopAnimationTimer()

Stops the animation thread. This method is invoked when the indeterminate 
animation should be stopped. Reasons for this may include: 

The progress bar changes to determinate The progress bar is no longer part of a 
displayable hierarchy This UI in uninstalled 

If you implement your own animation thread, you must override this method. 


*javax.swing.plaf.basic.BasicProgressBarUI.uninstallDefaults()*

protected void uninstallDefaults()




*javax.swing.plaf.basic.BasicProgressBarUI.uninstallListeners()*

protected void uninstallListeners()

Removes all listeners installed by this object. 


*javax.swing.plaf.basic.BasicProgressBarUI.uninstallUI(JComponent)*

public void uninstallUI(javax.swing.JComponent c)






*java.security.Permission* *Permission* Abstract class for representing access to a system resource.

public abstract class Permission
  extends    |java.lang.Object|
  implements |java.security.Guard|
             |java.io.Serializable|

|java.security.Permission_Description|
|java.security.Permission_Fields|
|java.security.Permission_Constructors|
|java.security.Permission_Methods|

====================================================================================================================================================================================

*java.security.Permission_Constructors*
|java.security.Permission(String)|Constructs a permission with the specified name.

*java.security.Permission_Methods*
|java.security.Permission.checkGuard(Object)|Implements the guard interface for a permission.
|java.security.Permission.equals(Object)|Checks two Permission objects for equality.
|java.security.Permission.getActions()|Returns the actions as a String.
|java.security.Permission.getName()|Returns the name of this Permission.
|java.security.Permission.hashCode()|Returns the hash code value for this Permission object.
|java.security.Permission.implies(Permission)|Checks if the specified permission's actions are "implied by"   this object's actions.
|java.security.Permission.newPermissionCollection()|Returns an empty PermissionCollection for a given Permission object, or null if  one is not defined.
|java.security.Permission.toString()|Returns a string describing this Permission.

*java.security.Permission_Description*

Abstract class for representing access to a system resource. All permissions have a name (whose interpretation depends on the subclass), as well as abstract functions for defining 
the semantics of the particular Permission subclass. 

Most Permission objects also include an "actions" list that tells the actions that are permitted for the object. For example, for a java.io.FilePermission object, the permission 
name is the pathname of a file (or directory), and the actions list (such as "read, write") specifies which actions are granted for the specified file (or for files in the 
specified directory). The actions list is optional for Permission objects, such as java.lang.RuntimePermission, that don't need such a list; you either have the named permission 
(such as "system.exit") or you don't. 

An important method that must be implemented by each subclass is the implies method to compare Permissions. Basically, "permission p1 implies permission p2" means that if one is 
granted permission p1, one is naturally granted permission p2. Thus, this is not an equality test, but rather more of a subset test. 

Permission objects are similar to String objects in that they are immutable once they have been created. Subclasses should not provide methods that can change the state of a 
permission once it has been created. 



*java.security.Permission(String)*

public Permission(java.lang.String name)

Constructs a permission with the specified name. 

    name - name of the Permission object being created. 

*java.security.Permission.checkGuard(Object)*

public void checkGuard(java.lang.Object object)
  throws |java.lang.SecurityException|
         
Implements the guard interface for a permission. The SecurityManager.checkPermission method is called, passing this permission object as the permission to check. Returns silently 
if access is granted. Otherwise, throws a SecurityException. 


    object - the object being guarded (currently ignored). 

*java.security.Permission.equals(Object)*

public abstract boolean equals(java.lang.Object obj)

Checks two Permission objects for equality. 

Do not use the equals method for making access control decisions; use the implies method. 


    obj - the object we are testing for equality with this object. 

    Returns: true if both Permission objects are equivalent. 

*java.security.Permission.getActions()*

public abstract |java.lang.String| getActions()

Returns the actions as a String. This is abstract so subclasses can defer creating a String representation until one is needed. Subclasses should always return actions in what 
they consider to be their canonical form. For example, two FilePermission objects created via the following: 



perm1 = new FilePermission(p1,"read,write"); perm2 = new FilePermission(p2,"write,read"); 

both return "read,write" when the getActions method is invoked. 



    Returns: the actions of this Permission. 

*java.security.Permission.getName()*

public final |java.lang.String| getName()

Returns the name of this Permission. For example, in the case of a java.io.FilePermission, the name will be a pathname. 



    Returns: the name of this Permission. 

*java.security.Permission.hashCode()*

public abstract int hashCode()

Returns the hash code value for this Permission object. 

The required hashCode behavior for Permission Objects is the following: 

Whenever it is invoked on the same Permission object more than once during an execution of a Java application, the hashCode method must consistently return the same integer. This 
integer need not remain consistent from one execution of an application to another execution of the same application. If two Permission objects are equal according to the equals 
method, then calling the hashCode method on each of the two Permission objects must produce the same integer result. 



    Returns: a hash code value for this object. 

*java.security.Permission.implies(Permission)*

public abstract boolean implies(java.security.Permission permission)

Checks if the specified permission's actions are "implied by" this object's actions. 

This must be implemented by subclasses of Permission, as they are the only ones that can impose semantics on a Permission object. 

The implies method is used by the AccessController to determine whether or not a requested permission is implied by another permission that is known to be valid in the current 
execution context. 


    permission - the permission to check against. 

    Returns: true if the specified permission is implied by this object, false if not. 

*java.security.Permission.newPermissionCollection()*

public |java.security.PermissionCollection| newPermissionCollection()

Returns an empty PermissionCollection for a given Permission object, or null if one is not defined. Subclasses of class Permission should override this if they need to store their 
permissions in a particular PermissionCollection object in order to provide the correct semantics when the PermissionCollection.implies method is called. If null is returned, then 
the caller of this method is free to store permissions of this type in any PermissionCollection they choose (one that uses a Hashtable, one that uses a Vector, etc). 



    Returns: a new PermissionCollection object for this type of Permission, or null if one is not defined. 

*java.security.Permission.toString()*

public |java.lang.String| toString()

Returns a string describing this Permission. The convention is to specify the class name, the permission name, and the actions in the following format: '("ClassName" "name" 
"actions")'. 



    Returns: information about this Permission. 



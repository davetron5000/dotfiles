*javax.swing.tree.TreeSelectionModel* *TreeSelectionModel* This interface repres

public interface interface TreeSelectionModel


|javax.swing.tree.TreeSelectionModel_Description|
|javax.swing.tree.TreeSelectionModel_Fields|
|javax.swing.tree.TreeSelectionModel_Constructors|
|javax.swing.tree.TreeSelectionModel_Methods|

================================================================================

*javax.swing.tree.TreeSelectionModel_Fields*
|int_javax.swing.tree.TreeSelectionModel.CONTIGUOUS_TREE_SELECTION|
|int_javax.swing.tree.TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION|
|int_javax.swing.tree.TreeSelectionModel.SINGLE_TREE_SELECTION|

*javax.swing.tree.TreeSelectionModel_Methods*
|javax.swing.tree.TreeSelectionModel.addPropertyChangeListener(PropertyChangeListener)|
|javax.swing.tree.TreeSelectionModel.addSelectionPath(TreePath)|Adds path to th
|javax.swing.tree.TreeSelectionModel.addSelectionPaths(TreePath[])|Adds paths t
|javax.swing.tree.TreeSelectionModel.addTreeSelectionListener(TreeSelectionListener)|
|javax.swing.tree.TreeSelectionModel.clearSelection()|Empties the current selec
|javax.swing.tree.TreeSelectionModel.getLeadSelectionPath()|Returns the last pa
|javax.swing.tree.TreeSelectionModel.getLeadSelectionRow()|Returns the lead sel
|javax.swing.tree.TreeSelectionModel.getMaxSelectionRow()|Returns the largest v
|javax.swing.tree.TreeSelectionModel.getMinSelectionRow()|Returns the smallest 
|javax.swing.tree.TreeSelectionModel.getRowMapper()|Returns the RowMapper insta
|javax.swing.tree.TreeSelectionModel.getSelectionCount()|Returns the number of 
|javax.swing.tree.TreeSelectionModel.getSelectionMode()|Returns the current sel
|javax.swing.tree.TreeSelectionModel.getSelectionPath()|Returns the first path 
|javax.swing.tree.TreeSelectionModel.getSelectionPaths()|Returns the paths in t
|javax.swing.tree.TreeSelectionModel.getSelectionRows()|Returns all of the curr
|javax.swing.tree.TreeSelectionModel.isPathSelected(TreePath)|Returns true if t
|javax.swing.tree.TreeSelectionModel.isRowSelected(int)|Returns true if the row
|javax.swing.tree.TreeSelectionModel.isSelectionEmpty()|Returns true if the sel
|javax.swing.tree.TreeSelectionModel.removePropertyChangeListener(PropertyChangeListener)|
|javax.swing.tree.TreeSelectionModel.removeSelectionPath(TreePath)|Removes path
|javax.swing.tree.TreeSelectionModel.removeSelectionPaths(TreePath[])|Removes p
|javax.swing.tree.TreeSelectionModel.removeTreeSelectionListener(TreeSelectionListener)|
|javax.swing.tree.TreeSelectionModel.resetRowSelection()|Updates this object's 
|javax.swing.tree.TreeSelectionModel.setRowMapper(RowMapper)|Sets the RowMapper
|javax.swing.tree.TreeSelectionModel.setSelectionMode(int)|Sets the selection m
|javax.swing.tree.TreeSelectionModel.setSelectionPath(TreePath)|Sets the select
|javax.swing.tree.TreeSelectionModel.setSelectionPaths(TreePath[])|Sets the sel

*javax.swing.tree.TreeSelectionModel_Description*

This interface represents the current state of the selection for the tree 
component. For information and examples of using tree selection models, see How 
to Use Trees in The Java Tutorial. 

The state of the tree selection is characterized by a set of TreePaths, and 
optionally a set of integers. The mapping from TreePath to integer is done by 
way of an instance of RowMapper. It is not necessary for a TreeSelectionModel 
to have a RowMapper to correctly operate, but without a RowMapper 
getSelectionRows will return null. 



A TreeSelectionModel can be configured to allow only one path 
(SINGLE_TREE_SELECTION) a number of continguous paths 
(CONTIGUOUS_TREE_SELECTION) or a number of discontiguous paths 
(DISCONTIGUOUS_TREE_SELECTION). A RowMapper is used to determine if TreePaths 
are contiguous. In the absence of a RowMapper CONTIGUOUS_TREE_SELECTION and 
DISCONTIGUOUS_TREE_SELECTION behave the same, that is they allow any number of 
paths to be contained in the TreeSelectionModel. 



For a selection model of CONTIGUOUS_TREE_SELECTION any time the paths are 
changed (setSelectionPath, addSelectionPath ...) the TreePaths are again 
checked to make they are contiguous. A check of the TreePaths can also be 
forced by invoking resetRowSelection. How a set of discontiguous TreePaths is 
mapped to a contiguous set is left to implementors of this interface to enforce 
a particular policy. 



Implementations should combine duplicate TreePaths that are added to the 
selection. For example, the following code 

TreePath[] paths = new TreePath[] { treePath, treePath }; 
treeSelectionModel.setSelectionPaths(paths); 

should result in only one path being selected: treePath, and not two copies of 
treePath. 



The lead TreePath is the last path that was added (or set). The lead row is 
then the row that corresponds to the TreePath as determined from the RowMapper. 


*int_javax.swing.tree.TreeSelectionModel.CONTIGUOUS_TREE_SELECTION*

This interface represents the current state of the selection for the tree 
component. For information and examples of using tree selection models, see How 
to Use Trees in The Java Tutorial. 

The state of the tree selection is characterized by a set of TreePaths, and 
optionally a set of integers. The mapping from TreePath to integer is done by 
way of an instance of RowMapper. It is not necessary for a TreeSelectionModel 
to have a RowMapper to correctly operate, but without a RowMapper 
getSelectionRows will return null. 



A TreeSelectionModel can be configured to allow only one path 
(SINGLE_TREE_SELECTION) a number of continguous paths 
(CONTIGUOUS_TREE_SELECTION) or a number of discontiguous paths 
(DISCONTIGUOUS_TREE_SELECTION). A RowMapper is used to determine if TreePaths 
are contiguous. In the absence of a RowMapper CONTIGUOUS_TREE_SELECTION and 
DISCONTIGUOUS_TREE_SELECTION behave the same, that is they allow any number of 
paths to be contained in the TreeSelectionModel. 



For a selection model of CONTIGUOUS_TREE_SELECTION any time the paths are 
changed (setSelectionPath, addSelectionPath ...) the TreePaths are again 
checked to make they are contiguous. A check of the TreePaths can also be 
forced by invoking resetRowSelection. How a set of discontiguous TreePaths is 
mapped to a contiguous set is left to implementors of this interface to enforce 
a particular policy. 



Implementations should combine duplicate TreePaths that are added to the 
selection. For example, the following code 

TreePath[] paths = new TreePath[] { treePath, treePath }; 
treeSelectionModel.setSelectionPaths(paths); 

should result in only one path being selected: treePath, and not two copies of 
treePath. 



The lead TreePath is the last path that was added (or set). The lead row is 
then the row that corresponds to the TreePath as determined from the RowMapper. 


*int_javax.swing.tree.TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION*

This interface represents the current state of the selection for the tree 
component. For information and examples of using tree selection models, see How 
to Use Trees in The Java Tutorial. 

The state of the tree selection is characterized by a set of TreePaths, and 
optionally a set of integers. The mapping from TreePath to integer is done by 
way of an instance of RowMapper. It is not necessary for a TreeSelectionModel 
to have a RowMapper to correctly operate, but without a RowMapper 
getSelectionRows will return null. 



A TreeSelectionModel can be configured to allow only one path 
(SINGLE_TREE_SELECTION) a number of continguous paths 
(CONTIGUOUS_TREE_SELECTION) or a number of discontiguous paths 
(DISCONTIGUOUS_TREE_SELECTION). A RowMapper is used to determine if TreePaths 
are contiguous. In the absence of a RowMapper CONTIGUOUS_TREE_SELECTION and 
DISCONTIGUOUS_TREE_SELECTION behave the same, that is they allow any number of 
paths to be contained in the TreeSelectionModel. 



For a selection model of CONTIGUOUS_TREE_SELECTION any time the paths are 
changed (setSelectionPath, addSelectionPath ...) the TreePaths are again 
checked to make they are contiguous. A check of the TreePaths can also be 
forced by invoking resetRowSelection. How a set of discontiguous TreePaths is 
mapped to a contiguous set is left to implementors of this interface to enforce 
a particular policy. 



Implementations should combine duplicate TreePaths that are added to the 
selection. For example, the following code 

TreePath[] paths = new TreePath[] { treePath, treePath }; 
treeSelectionModel.setSelectionPaths(paths); 

should result in only one path being selected: treePath, and not two copies of 
treePath. 



The lead TreePath is the last path that was added (or set). The lead row is 
then the row that corresponds to the TreePath as determined from the RowMapper. 


*int_javax.swing.tree.TreeSelectionModel.SINGLE_TREE_SELECTION*

This interface represents the current state of the selection for the tree 
component. For information and examples of using tree selection models, see How 
to Use Trees in The Java Tutorial. 

The state of the tree selection is characterized by a set of TreePaths, and 
optionally a set of integers. The mapping from TreePath to integer is done by 
way of an instance of RowMapper. It is not necessary for a TreeSelectionModel 
to have a RowMapper to correctly operate, but without a RowMapper 
getSelectionRows will return null. 



A TreeSelectionModel can be configured to allow only one path 
(SINGLE_TREE_SELECTION) a number of continguous paths 
(CONTIGUOUS_TREE_SELECTION) or a number of discontiguous paths 
(DISCONTIGUOUS_TREE_SELECTION). A RowMapper is used to determine if TreePaths 
are contiguous. In the absence of a RowMapper CONTIGUOUS_TREE_SELECTION and 
DISCONTIGUOUS_TREE_SELECTION behave the same, that is they allow any number of 
paths to be contained in the TreeSelectionModel. 



For a selection model of CONTIGUOUS_TREE_SELECTION any time the paths are 
changed (setSelectionPath, addSelectionPath ...) the TreePaths are again 
checked to make they are contiguous. A check of the TreePaths can also be 
forced by invoking resetRowSelection. How a set of discontiguous TreePaths is 
mapped to a contiguous set is left to implementors of this interface to enforce 
a particular policy. 



Implementations should combine duplicate TreePaths that are added to the 
selection. For example, the following code 

TreePath[] paths = new TreePath[] { treePath, treePath }; 
treeSelectionModel.setSelectionPaths(paths); 

should result in only one path being selected: treePath, and not two copies of 
treePath. 



The lead TreePath is the last path that was added (or set). The lead row is 
then the row that corresponds to the TreePath as determined from the RowMapper. 



*javax.swing.tree.TreeSelectionModel.addPropertyChangeListener(PropertyChangeListener)*

public void addPropertyChangeListener(java.beans.PropertyChangeListener listener)

Adds a PropertyChangeListener to the listener list. The listener is registered 
for all properties. 

A PropertyChangeEvent will get fired when the selection mode changes. 

    listener - the PropertyChangeListener to be added 

*javax.swing.tree.TreeSelectionModel.addSelectionPath(TreePath)*

public void addSelectionPath(javax.swing.tree.TreePath path)

Adds path to the current selection. If path is not currently in the selection 
the TreeSelectionListeners are notified. This has no effect if path is null. 

    path - the new path to add to the current selection 

*javax.swing.tree.TreeSelectionModel.addSelectionPaths(TreePath[])*

public void addSelectionPaths(javax.swing.tree.TreePath[] paths)

Adds paths to the current selection. If any of the paths in paths are not 
currently in the selection the TreeSelectionListeners are notified. This has no 
effect if paths is null. 

    paths - the new paths to add to the current selection 

*javax.swing.tree.TreeSelectionModel.addTreeSelectionListener(TreeSelectionListener)*

public void addTreeSelectionListener(javax.swing.event.TreeSelectionListener x)

Adds x to the list of listeners that are notified each time the set of selected 
TreePaths changes. 

    x - the new listener to be added 

*javax.swing.tree.TreeSelectionModel.clearSelection()*

public void clearSelection()

Empties the current selection. If this represents a change in the current 
selection, the selection listeners are notified. 


*javax.swing.tree.TreeSelectionModel.getLeadSelectionPath()*

public |javax.swing.tree.TreePath| getLeadSelectionPath()

Returns the last path that was added. This may differ from the 
leadSelectionPath property maintained by the JTree. 


*javax.swing.tree.TreeSelectionModel.getLeadSelectionRow()*

public int getLeadSelectionRow()

Returns the lead selection index. That is the last index that was added. 


*javax.swing.tree.TreeSelectionModel.getMaxSelectionRow()*

public int getMaxSelectionRow()

Returns the largest value obtained from the RowMapper for the current set of 
selected TreePaths. If nothing is selected, or there is no RowMapper, this will 
return -1. 


*javax.swing.tree.TreeSelectionModel.getMinSelectionRow()*

public int getMinSelectionRow()

Returns the smallest value obtained from the RowMapper for the current set of 
selected TreePaths. If nothing is selected, or there is no RowMapper, this will 
return -1. 


*javax.swing.tree.TreeSelectionModel.getRowMapper()*

public |javax.swing.tree.RowMapper| getRowMapper()

Returns the RowMapper instance that is able to map a TreePath to a row. 


*javax.swing.tree.TreeSelectionModel.getSelectionCount()*

public int getSelectionCount()

Returns the number of paths that are selected. 


*javax.swing.tree.TreeSelectionModel.getSelectionMode()*

public int getSelectionMode()

Returns the current selection mode, one of SINGLE_TREE_SELECTION, 
CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION. 


*javax.swing.tree.TreeSelectionModel.getSelectionPath()*

public |javax.swing.tree.TreePath| getSelectionPath()

Returns the first path in the selection. How first is defined is up to 
implementors, and may not necessarily be the TreePath with the smallest integer 
value as determined from the RowMapper. 


*javax.swing.tree.TreeSelectionModel.getSelectionPaths()*

public |javax.swing.tree.TreePath| getSelectionPaths()

Returns the paths in the selection. This will return null (or an empty array) 
if nothing is currently selected. 


*javax.swing.tree.TreeSelectionModel.getSelectionRows()*

public int getSelectionRows()

Returns all of the currently selected rows. This will return null (or an empty 
array) if there are no selected TreePaths or a RowMapper has not been set. 


*javax.swing.tree.TreeSelectionModel.isPathSelected(TreePath)*

public boolean isPathSelected(javax.swing.tree.TreePath path)

Returns true if the path, path, is in the current selection. 


*javax.swing.tree.TreeSelectionModel.isRowSelected(int)*

public boolean isRowSelected(int row)

Returns true if the row identified by row is selected. 


*javax.swing.tree.TreeSelectionModel.isSelectionEmpty()*

public boolean isSelectionEmpty()

Returns true if the selection is currently empty. 


*javax.swing.tree.TreeSelectionModel.removePropertyChangeListener(PropertyChangeListener)*

public void removePropertyChangeListener(java.beans.PropertyChangeListener listener)

Removes a PropertyChangeListener from the listener list. This removes a 
PropertyChangeListener that was registered for all properties. 

    listener - the PropertyChangeListener to be removed 

*javax.swing.tree.TreeSelectionModel.removeSelectionPath(TreePath)*

public void removeSelectionPath(javax.swing.tree.TreePath path)

Removes path from the selection. If path is in the selection The 
TreeSelectionListeners are notified. This has no effect if path is null. 

    path - the path to remove from the selection 

*javax.swing.tree.TreeSelectionModel.removeSelectionPaths(TreePath[])*

public void removeSelectionPaths(javax.swing.tree.TreePath[] paths)

Removes paths from the selection. If any of the paths in paths are in the 
selection, the TreeSelectionListeners are notified. This method has no effect 
if paths is null. 

    paths - the path to remove from the selection 

*javax.swing.tree.TreeSelectionModel.removeTreeSelectionListener(TreeSelectionListener)*

public void removeTreeSelectionListener(javax.swing.event.TreeSelectionListener x)

Removes x from the list of listeners that are notified each time the set of 
selected TreePaths changes. 

    x - the listener to remove 

*javax.swing.tree.TreeSelectionModel.resetRowSelection()*

public void resetRowSelection()

Updates this object's mapping from TreePaths to rows. This should be invoked 
when the mapping from TreePaths to integers has changed (for example, a node 
has been expanded). 

You do not normally have to call this; JTree and its associated listeners will 
invoke this for you. If you are implementing your own view class, then you will 
have to invoke this. 


*javax.swing.tree.TreeSelectionModel.setRowMapper(RowMapper)*

public void setRowMapper(javax.swing.tree.RowMapper newMapper)

Sets the RowMapper instance. This instance is used to determine the row for a 
particular TreePath. 


*javax.swing.tree.TreeSelectionModel.setSelectionMode(int)*

public void setSelectionMode(int mode)

Sets the selection model, which must be one of SINGLE_TREE_SELECTION, 
CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION. 

This may change the selection if the current selection is not valid for the new 
mode. For example, if three TreePaths are selected when the mode is changed to 
SINGLE_TREE_SELECTION, only one TreePath will remain selected. It is up to the 
particular implementation to decide what TreePath remains selected. 


*javax.swing.tree.TreeSelectionModel.setSelectionPath(TreePath)*

public void setSelectionPath(javax.swing.tree.TreePath path)

Sets the selection to path. If this represents a change, then the 
TreeSelectionListeners are notified. If path is null, this has the same effect 
as invoking clearSelection. 

    path - new path to select 

*javax.swing.tree.TreeSelectionModel.setSelectionPaths(TreePath[])*

public void setSelectionPaths(javax.swing.tree.TreePath[] paths)

Sets the selection to path. If this represents a change, then the 
TreeSelectionListeners are notified. If paths is null, this has the same effect 
as invoking clearSelection. 

    paths - new selection 



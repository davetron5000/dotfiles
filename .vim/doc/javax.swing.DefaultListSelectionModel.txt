*javax.swing.DefaultListSelectionModel* *DefaultListSelectionModel* Default data

public class DefaultListSelectionModel
  extends    |java.lang.Object|
  implements |javax.swing.ListSelectionModel|
             |java.lang.Cloneable|
             |java.io.Serializable|

|javax.swing.DefaultListSelectionModel_Description|
|javax.swing.DefaultListSelectionModel_Fields|
|javax.swing.DefaultListSelectionModel_Constructors|
|javax.swing.DefaultListSelectionModel_Methods|

================================================================================

*javax.swing.DefaultListSelectionModel_Fields*
|boolean_javax.swing.DefaultListSelectionModel.leadAnchorNotificationEnabled|
|javax.swing.event.EventListenerList_javax.swing.DefaultListSelectionModel.listenerList|

*javax.swing.DefaultListSelectionModel_Constructors*
|javax.swing.DefaultListSelectionModel()|

*javax.swing.DefaultListSelectionModel_Methods*
|javax.swing.DefaultListSelectionModel.addListSelectionListener(ListSelectionListener)|
|javax.swing.DefaultListSelectionModel.addSelectionInterval(int,int)|
|javax.swing.DefaultListSelectionModel.clearSelection()|
|javax.swing.DefaultListSelectionModel.clone()|Returns a clone of this selectio
|javax.swing.DefaultListSelectionModel.fireValueChanged(boolean)|Notifies liste
|javax.swing.DefaultListSelectionModel.fireValueChanged(int,int)|Notifies ListS
|javax.swing.DefaultListSelectionModel.fireValueChanged(int,int,boolean)|
|javax.swing.DefaultListSelectionModel.getAnchorSelectionIndex()|
|javax.swing.DefaultListSelectionModel.getLeadSelectionIndex()|
|javax.swing.DefaultListSelectionModel.getListeners(Class)|Returns an array of 
|javax.swing.DefaultListSelectionModel.getListSelectionListeners()|Returns an a
|javax.swing.DefaultListSelectionModel.getMaxSelectionIndex()|
|javax.swing.DefaultListSelectionModel.getMinSelectionIndex()|
|javax.swing.DefaultListSelectionModel.getSelectionMode()|Returns the selection
|javax.swing.DefaultListSelectionModel.getValueIsAdjusting()|
|javax.swing.DefaultListSelectionModel.insertIndexInterval(int,int,boolean)|Ins
|javax.swing.DefaultListSelectionModel.isLeadAnchorNotificationEnabled()|Return
|javax.swing.DefaultListSelectionModel.isSelectedIndex(int)|
|javax.swing.DefaultListSelectionModel.isSelectionEmpty()|
|javax.swing.DefaultListSelectionModel.moveLeadSelectionIndex(int)|Set the lead
|javax.swing.DefaultListSelectionModel.removeIndexInterval(int,int)|Remove the 
|javax.swing.DefaultListSelectionModel.removeListSelectionListener(ListSelectionListener)|
|javax.swing.DefaultListSelectionModel.removeSelectionInterval(int,int)|
|javax.swing.DefaultListSelectionModel.setAnchorSelectionIndex(int)|Set the anc
|javax.swing.DefaultListSelectionModel.setLeadAnchorNotificationEnabled(boolean)|
|javax.swing.DefaultListSelectionModel.setLeadSelectionIndex(int)|Sets the lead
|javax.swing.DefaultListSelectionModel.setSelectionInterval(int,int)|
|javax.swing.DefaultListSelectionModel.setSelectionMode(int)|Sets the selection
|javax.swing.DefaultListSelectionModel.setValueIsAdjusting(boolean)|
|javax.swing.DefaultListSelectionModel.toString()|Returns a string that display

*javax.swing.DefaultListSelectionModel_Description*

Default data model for list selections. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.DefaultListSelectionModel.leadAnchorNotificationEnabled*

Default data model for list selections. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.event.EventListenerList_javax.swing.DefaultListSelectionModel.listenerList*

Default data model for list selections. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.DefaultListSelectionModel()*

public DefaultListSelectionModel()




*javax.swing.DefaultListSelectionModel.addListSelectionListener(ListSelectionListener)*

public void addListSelectionListener(javax.swing.event.ListSelectionListener l)




*javax.swing.DefaultListSelectionModel.addSelectionInterval(int,int)*

public void addSelectionInterval(
  int index0,
  int index1)




*javax.swing.DefaultListSelectionModel.clearSelection()*

public void clearSelection()




*javax.swing.DefaultListSelectionModel.clone()*

public |java.lang.Object| clone()
  throws |java.lang.CloneNotSupportedException|
         
Returns a clone of this selection model with the same selection. listenerLists 
are not duplicated. 


*javax.swing.DefaultListSelectionModel.fireValueChanged(boolean)*

protected void fireValueChanged(boolean isAdjusting)

Notifies listeners that we have ended a series of adjustments. 


*javax.swing.DefaultListSelectionModel.fireValueChanged(int,int)*

protected void fireValueChanged(
  int firstIndex,
  int lastIndex)

Notifies ListSelectionListeners that the value of the selection, in the closed 
interval firstIndex, lastIndex, has changed. 


*javax.swing.DefaultListSelectionModel.fireValueChanged(int,int,boolean)*

protected void fireValueChanged(
  int firstIndex,
  int lastIndex,
  boolean isAdjusting)



    firstIndex - the first index in the interval 
    lastIndex - the last index in the interval 
    isAdjusting - true if this is the final change in a series of adjustments 

*javax.swing.DefaultListSelectionModel.getAnchorSelectionIndex()*

public int getAnchorSelectionIndex()




*javax.swing.DefaultListSelectionModel.getLeadSelectionIndex()*

public int getLeadSelectionIndex()




*javax.swing.DefaultListSelectionModel.getListeners(Class)*

public |java.util.EventListener| getListeners(java.lang.Class listenerType)

Returns an array of all the objects currently registered as FooListeners upon 
this model. FooListeners are registered using the addFooListener method. 

You can specify the listenerType argument with a class literal, such as 
FooListener.class. For example, you can query a DefaultListSelectionModel 
instance m for its list selection listeners with the following code: 

ListSelectionListener[] lsls = 
(ListSelectionListener[])(m.getListeners(ListSelectionListener.class)); 

If no such listeners exist, this method returns an empty array. 

    listenerType - the type of listeners requested; this parameter should specify an interface 
       that descends from java.util.EventListener 

    Returns: an array of all objects registered as FooListeners on this model, or an empty 
             array if no such listeners have been added 
*javax.swing.DefaultListSelectionModel.getListSelectionListeners()*

public |javax.swing.event.ListSelectionListener| getListSelectionListeners()

Returns an array of all the list selection listeners registered on this 
DefaultListSelectionModel. 


    Returns: all of this model's ListSelectionListeners or an empty array if no list 
             selection listeners are currently registered 
*javax.swing.DefaultListSelectionModel.getMaxSelectionIndex()*

public int getMaxSelectionIndex()




*javax.swing.DefaultListSelectionModel.getMinSelectionIndex()*

public int getMinSelectionIndex()




*javax.swing.DefaultListSelectionModel.getSelectionMode()*

public int getSelectionMode()

Returns the selection mode. 


    Returns: one of the these values: 

SINGLE_SELECTION SINGLE_INTERVAL_SELECTION MULTIPLE_INTERVAL_SELECTION 
*javax.swing.DefaultListSelectionModel.getValueIsAdjusting()*

public boolean getValueIsAdjusting()




*javax.swing.DefaultListSelectionModel.insertIndexInterval(int,int,boolean)*

public void insertIndexInterval(
  int index,
  int length,
  boolean before)

Insert length indices beginning before/after index. If the value at index is 
itself selected and the selection mode is not SINGLE_SELECTION, set all of the 
newly inserted items as selected. Otherwise leave them unselected. This method 
is typically called to sync the selection model with a corresponding change in 
the data model. 


*javax.swing.DefaultListSelectionModel.isLeadAnchorNotificationEnabled()*

public boolean isLeadAnchorNotificationEnabled()

Returns the value of the leadAnchorNotificationEnabled flag. When 
leadAnchorNotificationEnabled is true the model generates notification events 
with bounds that cover all the changes to the selection plus the changes to the 
lead and anchor indices. Setting the flag to false causes a narrowing of the 
event's bounds to include only the elements that have been selected or 
deselected since the last change. Either way, the model continues to maintain 
the lead and anchor variables internally. The default is true. 

Note: It is possible for the lead or anchor to be changed without a change to 
the selection. Notification of these changes is often important, such as when 
the new lead or anchor needs to be updated in the view. Therefore, caution is 
urged when changing the default value. 


    Returns: the value of the leadAnchorNotificationEnabled flag 
*javax.swing.DefaultListSelectionModel.isSelectedIndex(int)*

public boolean isSelectedIndex(int index)




*javax.swing.DefaultListSelectionModel.isSelectionEmpty()*

public boolean isSelectionEmpty()




*javax.swing.DefaultListSelectionModel.moveLeadSelectionIndex(int)*

public void moveLeadSelectionIndex(int leadIndex)

Set the lead selection index, leaving all selection values unchanged. If 
leadAnchorNotificationEnabled is true, send a notification covering the old and 
new lead cells. 

    leadIndex - the new lead selection index 

*javax.swing.DefaultListSelectionModel.removeIndexInterval(int,int)*

public void removeIndexInterval(
  int index0,
  int index1)

Remove the indices in the interval index0,index1 (inclusive) from the selection 
model. This is typically called to sync the selection model width a 
corresponding change in the data model. Note that (as always) index0 need not 
be <= index1. 


*javax.swing.DefaultListSelectionModel.removeListSelectionListener(ListSelectionListener)*

public void removeListSelectionListener(javax.swing.event.ListSelectionListener l)




*javax.swing.DefaultListSelectionModel.removeSelectionInterval(int,int)*

public void removeSelectionInterval(
  int index0,
  int index1)




*javax.swing.DefaultListSelectionModel.setAnchorSelectionIndex(int)*

public void setAnchorSelectionIndex(int anchorIndex)

Set the anchor selection index, leaving all selection values unchanged. If 
leadAnchorNotificationEnabled is true, send a notification covering the old and 
new anchor cells. 


*javax.swing.DefaultListSelectionModel.setLeadAnchorNotificationEnabled(boolean)*

public void setLeadAnchorNotificationEnabled(boolean flag)

Sets the value of the leadAnchorNotificationEnabled flag. 


*javax.swing.DefaultListSelectionModel.setLeadSelectionIndex(int)*

public void setLeadSelectionIndex(int leadIndex)

Sets the lead selection index, ensuring that values between the anchor and the 
new lead are either all selected or all deselected. If the value at the anchor 
index is selected, first clear all the values in the range [anchor, 
oldLeadIndex], then select all the values values in the range [anchor, 
newLeadIndex], where oldLeadIndex is the old leadIndex and newLeadIndex is the 
new one. 

If the value at the anchor index is not selected, do the same thing in reverse 
selecting values in the old range and deslecting values in the new one. 

Generate a single event for this change and notify all listeners. For the 
purposes of generating minimal bounds in this event, do the operation in a 
single pass; that way the first and last index inside the ListSelectionEvent 
that is broadcast will refer to cells that actually changed value because of 
this method. If, instead, this operation were done in two steps the effect on 
the selection state would be the same but two events would be generated and the 
bounds around the changed values would be wider, including cells that had been 
first cleared only to later be set. 

This method can be used in the mouseDragged method of a UI class to extend a 
selection. 


*javax.swing.DefaultListSelectionModel.setSelectionInterval(int,int)*

public void setSelectionInterval(
  int index0,
  int index1)




*javax.swing.DefaultListSelectionModel.setSelectionMode(int)*

public void setSelectionMode(int selectionMode)

Sets the selection mode. The default is MULTIPLE_INTERVAL_SELECTION. 

    selectionMode - one of three values: 

SINGLE_SELECTION SINGLE_INTERVAL_SELECTION MULTIPLE_INTERVAL_SELECTION 

*javax.swing.DefaultListSelectionModel.setValueIsAdjusting(boolean)*

public void setValueIsAdjusting(boolean isAdjusting)




*javax.swing.DefaultListSelectionModel.toString()*

public |java.lang.String| toString()

Returns a string that displays and identifies this object's properties. 


    Returns: a String representation of this object 


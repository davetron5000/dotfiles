*java.awt.dnd.DragSourceContext* *DragSourceContext* The DragSourceContext class

public class DragSourceContext
  extends    |java.lang.Object|
  implements |java.awt.dnd.DragSourceListener|
             |java.awt.dnd.DragSourceMotionListener|
             |java.io.Serializable|

|java.awt.dnd.DragSourceContext_Description|
|java.awt.dnd.DragSourceContext_Fields|
|java.awt.dnd.DragSourceContext_Constructors|
|java.awt.dnd.DragSourceContext_Methods|

================================================================================

*java.awt.dnd.DragSourceContext_Fields*
|int_java.awt.dnd.DragSourceContext.CHANGED|
|int_java.awt.dnd.DragSourceContext.DEFAULT|
|int_java.awt.dnd.DragSourceContext.ENTER|
|int_java.awt.dnd.DragSourceContext.OVER|

*java.awt.dnd.DragSourceContext_Constructors*
|java.awt.dnd.DragSourceContext(DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener)|

*java.awt.dnd.DragSourceContext_Methods*
|java.awt.dnd.DragSourceContext.addDragSourceListener(DragSourceListener)|Add a
|java.awt.dnd.DragSourceContext.dragDropEnd(DragSourceDropEvent)|Calls dragDrop
|java.awt.dnd.DragSourceContext.dragEnter(DragSourceDragEvent)|Calls dragEnter 
|java.awt.dnd.DragSourceContext.dragExit(DragSourceEvent)|Calls dragExit on the
|java.awt.dnd.DragSourceContext.dragMouseMoved(DragSourceDragEvent)|Calls dragM
|java.awt.dnd.DragSourceContext.dragOver(DragSourceDragEvent)|Calls dragOver on
|java.awt.dnd.DragSourceContext.dropActionChanged(DragSourceDragEvent)|Calls dr
|java.awt.dnd.DragSourceContext.getComponent()|Returns the Component associated
|java.awt.dnd.DragSourceContext.getCursor()|Returns the current drag Cursor.
|java.awt.dnd.DragSourceContext.getDragSource()|Returns the DragSource   that i
|java.awt.dnd.DragSourceContext.getSourceActions()|Returns a bitwise mask of Dn
|java.awt.dnd.DragSourceContext.getTransferable()|Returns the Transferable asso
|java.awt.dnd.DragSourceContext.getTrigger()|Returns the DragGestureEvent  that
|java.awt.dnd.DragSourceContext.removeDragSourceListener(DragSourceListener)|Re
|java.awt.dnd.DragSourceContext.setCursor(Cursor)|Sets the cursor for this drag
|java.awt.dnd.DragSourceContext.transferablesFlavorsChanged()|Notifies the peer
|java.awt.dnd.DragSourceContext.updateCurrentCursor(int,int,int)|If the default

*java.awt.dnd.DragSourceContext_Description*

The DragSourceContext class is responsible for managing the initiator side of 
the Drag and Drop protocol. In particular, it is responsible for managing drag 
event notifications to the DragSourceListeners and DragSourceMotionListeners, 
and providing the Transferable representing the source data for the drag 
operation. 

Note that the DragSourceContext itself implements the DragSourceListener and 
DragSourceMotionListener interfaces. This is to allow the platform peer (the 
DragSourceContextPeer instance) created by the DragSource to notify the 
DragSourceContext of state changes in the ongoing operation. This allows the 
DragSourceContext to interpose itself between the platform and the listeners 
provided by the initiator of the drag operation. 


*int_java.awt.dnd.DragSourceContext.CHANGED*

The DragSourceContext class is responsible for managing the initiator side of 
the Drag and Drop protocol. In particular, it is responsible for managing drag 
event notifications to the DragSourceListeners and DragSourceMotionListeners, 
and providing the Transferable representing the source data for the drag 
operation. 

Note that the DragSourceContext itself implements the DragSourceListener and 
DragSourceMotionListener interfaces. This is to allow the platform peer (the 
DragSourceContextPeer instance) created by the DragSource to notify the 
DragSourceContext of state changes in the ongoing operation. This allows the 
DragSourceContext to interpose itself between the platform and the listeners 
provided by the initiator of the drag operation. 


*int_java.awt.dnd.DragSourceContext.DEFAULT*

The DragSourceContext class is responsible for managing the initiator side of 
the Drag and Drop protocol. In particular, it is responsible for managing drag 
event notifications to the DragSourceListeners and DragSourceMotionListeners, 
and providing the Transferable representing the source data for the drag 
operation. 

Note that the DragSourceContext itself implements the DragSourceListener and 
DragSourceMotionListener interfaces. This is to allow the platform peer (the 
DragSourceContextPeer instance) created by the DragSource to notify the 
DragSourceContext of state changes in the ongoing operation. This allows the 
DragSourceContext to interpose itself between the platform and the listeners 
provided by the initiator of the drag operation. 


*int_java.awt.dnd.DragSourceContext.ENTER*

The DragSourceContext class is responsible for managing the initiator side of 
the Drag and Drop protocol. In particular, it is responsible for managing drag 
event notifications to the DragSourceListeners and DragSourceMotionListeners, 
and providing the Transferable representing the source data for the drag 
operation. 

Note that the DragSourceContext itself implements the DragSourceListener and 
DragSourceMotionListener interfaces. This is to allow the platform peer (the 
DragSourceContextPeer instance) created by the DragSource to notify the 
DragSourceContext of state changes in the ongoing operation. This allows the 
DragSourceContext to interpose itself between the platform and the listeners 
provided by the initiator of the drag operation. 


*int_java.awt.dnd.DragSourceContext.OVER*

The DragSourceContext class is responsible for managing the initiator side of 
the Drag and Drop protocol. In particular, it is responsible for managing drag 
event notifications to the DragSourceListeners and DragSourceMotionListeners, 
and providing the Transferable representing the source data for the drag 
operation. 

Note that the DragSourceContext itself implements the DragSourceListener and 
DragSourceMotionListener interfaces. This is to allow the platform peer (the 
DragSourceContextPeer instance) created by the DragSource to notify the 
DragSourceContext of state changes in the ongoing operation. This allows the 
DragSourceContext to interpose itself between the platform and the listeners 
provided by the initiator of the drag operation. 



*java.awt.dnd.DragSourceContext(DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener)*

public DragSourceContext(
  java.awt.dnd.peer.DragSourceContextPeer dscp,
  java.awt.dnd.DragGestureEvent trigger,
  java.awt.Cursor dragCursor,
  java.awt.Image dragImage,
  java.awt.Point offset,
  java.awt.datatransfer.Transferable t,
  java.awt.dnd.DragSourceListener dsl)

Called from DragSource, this constructor creates a new DragSourceContext given 
the DragSourceContextPeer for this Drag, the DragGestureEvent that triggered 
the Drag, the initial Cursor to use for the Drag, an (optional) Image to 
display while the Drag is taking place, the offset of the Image origin from the 
hotspot at the instant of the triggering event, the Transferable subject data, 
and the DragSourceListener to use during the Drag and Drop operation. 

If DragSourceContextPeer is null NullPointerException is thrown. 

If DragGestureEvent is null NullPointerException is thrown. 

If Cursor is null no exception is thrown and the default drag cursor behavior 
is activated for this drag operation. 

If Image is null no exception is thrown. 

If Image is not null and the offset is null NullPointerException is thrown. 

If Transferable is null NullPointerException is thrown. 

If DragSourceListener is null no exception is thrown. 

    dscp - the DragSourceContextPeer for this drag 
    trigger - the triggering event 
    dragCursor - the initial Cursor 
    dragImage - the Image to drag (or null) 
    offset - the offset of the image origin from the hotspot at the instant of the 
       triggering event 
    t - the Transferable 
    dsl - the DragSourceListener 

*java.awt.dnd.DragSourceContext.addDragSourceListener(DragSourceListener)*

public synchronized void addDragSourceListener(java.awt.dnd.DragSourceListener dsl)
  throws |java.util.TooManyListenersException|
         
Add a DragSourceListener to this DragSourceContext if one has not already been 
added. If a DragSourceListener already exists, this method throws a 
TooManyListenersException. 

    dsl - the DragSourceListener to add. Note that while null is not prohibited, it is 
       not acceptable as a parameter. 

*java.awt.dnd.DragSourceContext.dragDropEnd(DragSourceDropEvent)*

public void dragDropEnd(java.awt.dnd.DragSourceDropEvent dsde)

Calls dragDropEnd on the DragSourceListeners registered with this 
DragSourceContext and with the associated DragSource, and passes them the 
specified DragSourceDropEvent. 

    dsde - the DragSourceDropEvent 

*java.awt.dnd.DragSourceContext.dragEnter(DragSourceDragEvent)*

public void dragEnter(java.awt.dnd.DragSourceDragEvent dsde)

Calls dragEnter on the DragSourceListeners registered with this 
DragSourceContext and with the associated DragSource, and passes them the 
specified DragSourceDragEvent. 

    dsde - the DragSourceDragEvent 

*java.awt.dnd.DragSourceContext.dragExit(DragSourceEvent)*

public void dragExit(java.awt.dnd.DragSourceEvent dse)

Calls dragExit on the DragSourceListeners registered with this 
DragSourceContext and with the associated DragSource, and passes them the 
specified DragSourceEvent. 

    dse - the DragSourceEvent 

*java.awt.dnd.DragSourceContext.dragMouseMoved(DragSourceDragEvent)*

public void dragMouseMoved(java.awt.dnd.DragSourceDragEvent dsde)

Calls dragMouseMoved on the DragSourceMotionListeners registered with the 
DragSource associated with this DragSourceContext, and them passes the 
specified DragSourceDragEvent. 

    dsde - the DragSourceDragEvent 

*java.awt.dnd.DragSourceContext.dragOver(DragSourceDragEvent)*

public void dragOver(java.awt.dnd.DragSourceDragEvent dsde)

Calls dragOver on the DragSourceListeners registered with this 
DragSourceContext and with the associated DragSource, and passes them the 
specified DragSourceDragEvent. 

    dsde - the DragSourceDragEvent 

*java.awt.dnd.DragSourceContext.dropActionChanged(DragSourceDragEvent)*

public void dropActionChanged(java.awt.dnd.DragSourceDragEvent dsde)

Calls dropActionChanged on the DragSourceListeners registered with this 
DragSourceContext and with the associated DragSource, and passes them the 
specified DragSourceDragEvent. 

    dsde - the DragSourceDragEvent 

*java.awt.dnd.DragSourceContext.getComponent()*

public |java.awt.Component| getComponent()

Returns the Component associated with this DragSourceContext. 


    Returns: the Component that started the drag 
*java.awt.dnd.DragSourceContext.getCursor()*

public |java.awt.Cursor| getCursor()

Returns the current drag Cursor. 


    Returns: the current drag Cursor 
*java.awt.dnd.DragSourceContext.getDragSource()*

public |java.awt.dnd.DragSource| getDragSource()

Returns the DragSource that instantiated this DragSourceContext. 


    Returns: the DragSource that instantiated this DragSourceContext 
*java.awt.dnd.DragSourceContext.getSourceActions()*

public int getSourceActions()

Returns a bitwise mask of DnDConstants that represent the set of drop actions 
supported by the drag source for the drag operation associated with this 
DragSourceContext. 


    Returns: the drop actions supported by the drag source 
*java.awt.dnd.DragSourceContext.getTransferable()*

public |java.awt.datatransfer.Transferable| getTransferable()

Returns the Transferable associated with this DragSourceContext. 


    Returns: the Transferable 
*java.awt.dnd.DragSourceContext.getTrigger()*

public |java.awt.dnd.DragGestureEvent| getTrigger()

Returns the DragGestureEvent that initially triggered the drag. 


    Returns: the Event that triggered the drag 
*java.awt.dnd.DragSourceContext.removeDragSourceListener(DragSourceListener)*

public synchronized void removeDragSourceListener(java.awt.dnd.DragSourceListener dsl)

Removes the specified DragSourceListener from this DragSourceContext. 

    dsl - the DragSourceListener to remove; note that while null is not prohibited, it is 
       not acceptable as a parameter 

*java.awt.dnd.DragSourceContext.setCursor(Cursor)*

public synchronized void setCursor(java.awt.Cursor c)

Sets the cursor for this drag operation to the specified Cursor. If the 
specified Cursor is null, the default drag cursor behavior is activated for 
this drag operation, otherwise it is deactivated. 

    c - the Cursor to display, or null to activate the default drag cursor behavior 

*java.awt.dnd.DragSourceContext.transferablesFlavorsChanged()*

public void transferablesFlavorsChanged()

Notifies the peer that the Transferable's DataFlavors have changed. 


*java.awt.dnd.DragSourceContext.updateCurrentCursor(int,int,int)*

protected synchronized void updateCurrentCursor(
  int dropOp,
  int targetAct,
  int status)

If the default drag cursor behavior is active, this method sets the default 
drag cursor for the specified selected operation, supported actions and status, 
otherwise this method does nothing. 

    dropOp - the user's currently selected operation 
    targetAct - the current target's supported actions 
    status - the constant 



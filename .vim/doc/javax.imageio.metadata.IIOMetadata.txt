*javax.imageio.metadata.IIOMetadata* *IIOMetadata* An abstract class to be exten

public abstract class IIOMetadata
  extends    |java.lang.Object|

|javax.imageio.metadata.IIOMetadata_Description|
|javax.imageio.metadata.IIOMetadata_Fields|
|javax.imageio.metadata.IIOMetadata_Constructors|
|javax.imageio.metadata.IIOMetadata_Methods|

================================================================================

*javax.imageio.metadata.IIOMetadata_Fields*
|javax.imageio.metadata.IIOMetadataController_javax.imageio.metadata.IIOMetadata.controller|
|javax.imageio.metadata.IIOMetadataController_javax.imageio.metadata.IIOMetadata.defaultController|
|java.lang.String[]_javax.imageio.metadata.IIOMetadata.extraMetadataFormatClassNames|
|java.lang.String[]_javax.imageio.metadata.IIOMetadata.extraMetadataFormatNames|
|java.lang.String_javax.imageio.metadata.IIOMetadata.nativeMetadataFormatClassName|
|java.lang.String_javax.imageio.metadata.IIOMetadata.nativeMetadataFormatName|
|boolean_javax.imageio.metadata.IIOMetadata.standardFormatSupported|

*javax.imageio.metadata.IIOMetadata_Constructors*
|javax.imageio.metadata.IIOMetadata()|Constructs an empty IIOMetadata object.
|javax.imageio.metadata.IIOMetadata(boolean,String,String,String[],String[])|Co

*javax.imageio.metadata.IIOMetadata_Methods*
|javax.imageio.metadata.IIOMetadata.activateController()|Activates the installe
|javax.imageio.metadata.IIOMetadata.getAsTree(String)|Returns an XML DOM Node o
|javax.imageio.metadata.IIOMetadata.getController()|Returns whatever IIOMetadat
|javax.imageio.metadata.IIOMetadata.getDefaultController()|Returns the default 
|javax.imageio.metadata.IIOMetadata.getExtraMetadataFormatNames()|Returns an ar
|javax.imageio.metadata.IIOMetadata.getMetadataFormat(String)|Returns an IIOMet
|javax.imageio.metadata.IIOMetadata.getMetadataFormatNames()|Returns an array o
|javax.imageio.metadata.IIOMetadata.getNativeMetadataFormatName()|Returns the n
|javax.imageio.metadata.IIOMetadata.getStandardChromaNode()|Returns an IIOMetad
|javax.imageio.metadata.IIOMetadata.getStandardCompressionNode()|Returns an IIO
|javax.imageio.metadata.IIOMetadata.getStandardDataNode()|Returns an IIOMetadat
|javax.imageio.metadata.IIOMetadata.getStandardDimensionNode()|Returns an IIOMe
|javax.imageio.metadata.IIOMetadata.getStandardDocumentNode()|Returns an IIOMet
|javax.imageio.metadata.IIOMetadata.getStandardTextNode()|Returns an IIOMetadat
|javax.imageio.metadata.IIOMetadata.getStandardTileNode()|Returns an IIOMetadat
|javax.imageio.metadata.IIOMetadata.getStandardTransparencyNode()|Returns an II
|javax.imageio.metadata.IIOMetadata.getStandardTree()|A utility method to retur
|javax.imageio.metadata.IIOMetadata.hasController()|Returns true if there is a 
|javax.imageio.metadata.IIOMetadata.isReadOnly()|Returns true if this object do
|javax.imageio.metadata.IIOMetadata.isStandardMetadataFormatSupported()|Returns
|javax.imageio.metadata.IIOMetadata.mergeTree(String,Node)|Alters the internal 
|javax.imageio.metadata.IIOMetadata.reset()|Resets all the data stored in this 
|javax.imageio.metadata.IIOMetadata.setController(IIOMetadataController)|Sets t
|javax.imageio.metadata.IIOMetadata.setFromTree(String,Node)|Sets the internal 

*javax.imageio.metadata.IIOMetadata_Description*

An abstract class to be extended by objects that represent metadata (non-image 
data) associated with images and streams. Plug-ins represent metadata using 
opaque, plug-in specific objects. These objects, however, provide the ability 
to access their internal information as a tree of IIOMetadataNode objects that 
support the XML DOM interfaces as well as additional interfaces for storing 
non-textual data and retrieving information about legal data values. The format 
of such trees is plug-in dependent, but plug-ins may choose to support a 
plug-in neutral format described below. A single plug-in may support multiple 
metadata formats, whose names maybe determined by calling 
getMetadataFormatNames. The plug-in may also support a single special format, 
referred to as the "native" format, which is designed to encode its metadata 
losslessly. This format will typically be designed specifically to work with a 
specific file format, so that images may be loaded and saved in the same format 
with no loss of metadata, but may be less useful for transfering metadata 
between an ImageReader and an ImageWriter for different image formats. To 
convert between two native formats as losslessly as the image file formats will 
allow, an ImageTranscoder object must be used. 


*javax.imageio.metadata.IIOMetadataController_javax.imageio.metadata.IIOMetadata.controller*

An abstract class to be extended by objects that represent metadata (non-image 
data) associated with images and streams. Plug-ins represent metadata using 
opaque, plug-in specific objects. These objects, however, provide the ability 
to access their internal information as a tree of IIOMetadataNode objects that 
support the XML DOM interfaces as well as additional interfaces for storing 
non-textual data and retrieving information about legal data values. The format 
of such trees is plug-in dependent, but plug-ins may choose to support a 
plug-in neutral format described below. A single plug-in may support multiple 
metadata formats, whose names maybe determined by calling 
getMetadataFormatNames. The plug-in may also support a single special format, 
referred to as the "native" format, which is designed to encode its metadata 
losslessly. This format will typically be designed specifically to work with a 
specific file format, so that images may be loaded and saved in the same format 
with no loss of metadata, but may be less useful for transfering metadata 
between an ImageReader and an ImageWriter for different image formats. To 
convert between two native formats as losslessly as the image file formats will 
allow, an ImageTranscoder object must be used. 


*javax.imageio.metadata.IIOMetadataController_javax.imageio.metadata.IIOMetadata.defaultController*

An abstract class to be extended by objects that represent metadata (non-image 
data) associated with images and streams. Plug-ins represent metadata using 
opaque, plug-in specific objects. These objects, however, provide the ability 
to access their internal information as a tree of IIOMetadataNode objects that 
support the XML DOM interfaces as well as additional interfaces for storing 
non-textual data and retrieving information about legal data values. The format 
of such trees is plug-in dependent, but plug-ins may choose to support a 
plug-in neutral format described below. A single plug-in may support multiple 
metadata formats, whose names maybe determined by calling 
getMetadataFormatNames. The plug-in may also support a single special format, 
referred to as the "native" format, which is designed to encode its metadata 
losslessly. This format will typically be designed specifically to work with a 
specific file format, so that images may be loaded and saved in the same format 
with no loss of metadata, but may be less useful for transfering metadata 
between an ImageReader and an ImageWriter for different image formats. To 
convert between two native formats as losslessly as the image file formats will 
allow, an ImageTranscoder object must be used. 


*java.lang.String[]_javax.imageio.metadata.IIOMetadata.extraMetadataFormatClassNames*

An abstract class to be extended by objects that represent metadata (non-image 
data) associated with images and streams. Plug-ins represent metadata using 
opaque, plug-in specific objects. These objects, however, provide the ability 
to access their internal information as a tree of IIOMetadataNode objects that 
support the XML DOM interfaces as well as additional interfaces for storing 
non-textual data and retrieving information about legal data values. The format 
of such trees is plug-in dependent, but plug-ins may choose to support a 
plug-in neutral format described below. A single plug-in may support multiple 
metadata formats, whose names maybe determined by calling 
getMetadataFormatNames. The plug-in may also support a single special format, 
referred to as the "native" format, which is designed to encode its metadata 
losslessly. This format will typically be designed specifically to work with a 
specific file format, so that images may be loaded and saved in the same format 
with no loss of metadata, but may be less useful for transfering metadata 
between an ImageReader and an ImageWriter for different image formats. To 
convert between two native formats as losslessly as the image file formats will 
allow, an ImageTranscoder object must be used. 


*java.lang.String[]_javax.imageio.metadata.IIOMetadata.extraMetadataFormatNames*

An abstract class to be extended by objects that represent metadata (non-image 
data) associated with images and streams. Plug-ins represent metadata using 
opaque, plug-in specific objects. These objects, however, provide the ability 
to access their internal information as a tree of IIOMetadataNode objects that 
support the XML DOM interfaces as well as additional interfaces for storing 
non-textual data and retrieving information about legal data values. The format 
of such trees is plug-in dependent, but plug-ins may choose to support a 
plug-in neutral format described below. A single plug-in may support multiple 
metadata formats, whose names maybe determined by calling 
getMetadataFormatNames. The plug-in may also support a single special format, 
referred to as the "native" format, which is designed to encode its metadata 
losslessly. This format will typically be designed specifically to work with a 
specific file format, so that images may be loaded and saved in the same format 
with no loss of metadata, but may be less useful for transfering metadata 
between an ImageReader and an ImageWriter for different image formats. To 
convert between two native formats as losslessly as the image file formats will 
allow, an ImageTranscoder object must be used. 


*java.lang.String_javax.imageio.metadata.IIOMetadata.nativeMetadataFormatClassName*

An abstract class to be extended by objects that represent metadata (non-image 
data) associated with images and streams. Plug-ins represent metadata using 
opaque, plug-in specific objects. These objects, however, provide the ability 
to access their internal information as a tree of IIOMetadataNode objects that 
support the XML DOM interfaces as well as additional interfaces for storing 
non-textual data and retrieving information about legal data values. The format 
of such trees is plug-in dependent, but plug-ins may choose to support a 
plug-in neutral format described below. A single plug-in may support multiple 
metadata formats, whose names maybe determined by calling 
getMetadataFormatNames. The plug-in may also support a single special format, 
referred to as the "native" format, which is designed to encode its metadata 
losslessly. This format will typically be designed specifically to work with a 
specific file format, so that images may be loaded and saved in the same format 
with no loss of metadata, but may be less useful for transfering metadata 
between an ImageReader and an ImageWriter for different image formats. To 
convert between two native formats as losslessly as the image file formats will 
allow, an ImageTranscoder object must be used. 


*java.lang.String_javax.imageio.metadata.IIOMetadata.nativeMetadataFormatName*

An abstract class to be extended by objects that represent metadata (non-image 
data) associated with images and streams. Plug-ins represent metadata using 
opaque, plug-in specific objects. These objects, however, provide the ability 
to access their internal information as a tree of IIOMetadataNode objects that 
support the XML DOM interfaces as well as additional interfaces for storing 
non-textual data and retrieving information about legal data values. The format 
of such trees is plug-in dependent, but plug-ins may choose to support a 
plug-in neutral format described below. A single plug-in may support multiple 
metadata formats, whose names maybe determined by calling 
getMetadataFormatNames. The plug-in may also support a single special format, 
referred to as the "native" format, which is designed to encode its metadata 
losslessly. This format will typically be designed specifically to work with a 
specific file format, so that images may be loaded and saved in the same format 
with no loss of metadata, but may be less useful for transfering metadata 
between an ImageReader and an ImageWriter for different image formats. To 
convert between two native formats as losslessly as the image file formats will 
allow, an ImageTranscoder object must be used. 


*boolean_javax.imageio.metadata.IIOMetadata.standardFormatSupported*

An abstract class to be extended by objects that represent metadata (non-image 
data) associated with images and streams. Plug-ins represent metadata using 
opaque, plug-in specific objects. These objects, however, provide the ability 
to access their internal information as a tree of IIOMetadataNode objects that 
support the XML DOM interfaces as well as additional interfaces for storing 
non-textual data and retrieving information about legal data values. The format 
of such trees is plug-in dependent, but plug-ins may choose to support a 
plug-in neutral format described below. A single plug-in may support multiple 
metadata formats, whose names maybe determined by calling 
getMetadataFormatNames. The plug-in may also support a single special format, 
referred to as the "native" format, which is designed to encode its metadata 
losslessly. This format will typically be designed specifically to work with a 
specific file format, so that images may be loaded and saved in the same format 
with no loss of metadata, but may be less useful for transfering metadata 
between an ImageReader and an ImageWriter for different image formats. To 
convert between two native formats as losslessly as the image file formats will 
allow, an ImageTranscoder object must be used. 



*javax.imageio.metadata.IIOMetadata()*

protected IIOMetadata()

Constructs an empty IIOMetadata object. The subclass is responsible for 
suppying values for all protected instance variables that will allow any 
non-overridden default implemtations of methods to satisfy their contracts. For 
example, extraMetadataFormatNames should not have length 0. 


*javax.imageio.metadata.IIOMetadata(boolean,String,String,String[],String[])*

protected IIOMetadata(
  boolean standardMetadataFormatSupported,
  java.lang.String nativeMetadataFormatName,
  java.lang.String nativeMetadataFormatClassName,
  java.lang.String[] extraMetadataFormatNames,
  java.lang.String[] extraMetadataFormatClassNames)

Constructs an IIOMetadata object with the given format names and format class 
names, as well as a boolean indicating whether the standard format is 
supported. 

This constructor does not attempt to check the class names for validity. 
Invalid class names may cause exceptions in subsequent calls to 
getMetadataFormat. 

    standardMetadataFormatSupported - true if this object can return or accept a DOM tree using the standard metadata 
       format. 
    nativeMetadataFormatName - the name of the native metadata format, as a String, or null if there is no 
       native format. 
    nativeMetadataFormatClassName - the name of the class of the native metadata format, or null if there is no 
       native format. 
    extraMetadataFormatNames - an array of Strings indicating additional formats supported by this object, or 
       null if there are none. 
    extraMetadataFormatClassNames - an array of Strings indicating the class names of any additional formats 
       supported by this object, or null if there are none. 

*javax.imageio.metadata.IIOMetadata.activateController()*

public boolean activateController()

Activates the installed IIOMetadataController for this IIOMetadata object and 
returns the resulting value. When this method returns true, all values for this 
IIOMetadata object will be ready for the next write operation. If false is 
returned, no settings in this object will have been disturbed (i.e., the user 
canceled the operation). 

Ordinarily, the controller will be a GUI providing a user interface for a 
subclass of IIOMetadata for a particular plug-in. Controllers need not be GUIs, 
however. 

The default implementation calls getController and the calls activate on the 
returned object if hasController returns true. 


    Returns: true if the controller completed normally. 
*javax.imageio.metadata.IIOMetadata.getAsTree(String)*

public abstract |org.w3c.dom.Node| getAsTree(java.lang.String formatName)

Returns an XML DOM Node object that represents the root of a tree of metadata 
contained within this object according to the conventions defined by a given 
metadata format. 

The names of the available metadata formats may be queried using the 
getMetadataFormatNames method. 

    formatName - the desired metadata format. 

    Returns: an XML DOM Node object forming the root of a tree. 
*javax.imageio.metadata.IIOMetadata.getController()*

public |javax.imageio.metadata.IIOMetadataController| getController()

Returns whatever IIOMetadataController is currently installed. This could be 
the default if there is one, null, or the argument of the most recent call to 
setController. 

The default implementation returns the value of the controller instance 
variable. 


    Returns: the currently installed IIOMetadataController, or null. 
*javax.imageio.metadata.IIOMetadata.getDefaultController()*

public |javax.imageio.metadata.IIOMetadataController| getDefaultController()

Returns the default IIOMetadataController, if there is one, regardless of the 
currently installed controller. If there is no default controller, returns 
null. 

The default implementation returns the value of the defaultController instance 
variable. 


    Returns: the default IIOMetadataController, or null. 
*javax.imageio.metadata.IIOMetadata.getExtraMetadataFormatNames()*

public |java.lang.String| getExtraMetadataFormatNames()

Returns an array of Strings containing the names of additional metadata 
formats, other than the native and standard formats, recognized by this 
plug-in's getAsTree, setFromTree, and mergeTree methods. If there are no such 
additional formats, null is returned. 

The default implementation returns a clone of the extraMetadataFormatNames 
instance variable. 


    Returns: an array of Strings with length at least 1, or null. 
*javax.imageio.metadata.IIOMetadata.getMetadataFormat(String)*

public |javax.imageio.metadata.IIOMetadataFormat| getMetadataFormat(java.lang.String formatName)

Returns an IIOMetadataFormat object describing the given metadata format, or 
null if no description is available. The supplied name must be one of those 
returned by getMetadataFormatNames (i.e., either the native format name, the 
standard format name, or one of those returned by getExtraMetadataFormatNames). 

The default implementation checks the name against the global standard metadata 
format name, and returns that format if it is supported. Otherwise, it checks 
against the native format names followed by any additional format names. If a 
match is found, it retrieves the name of the IIOMetadataFormat class from 
nativeMetadataFormatClassName or extraMetadataFormatClassNames as appropriate, 
and constructs an instance of that class using its getInstance method. 

    formatName - the desired metadata format. 

    Returns: an IIOMetadataFormat object. 
*javax.imageio.metadata.IIOMetadata.getMetadataFormatNames()*

public |java.lang.String| getMetadataFormatNames()

Returns an array of Strings containing the names of all metadata formats, 
including the native and standard formats, recognized by this plug-in's 
getAsTree, setFromTree, and mergeTree methods. If there are no such formats, 
null is returned. 

The default implementation calls getNativeMetadataFormatName, 
isStandardMetadataFormatSupported, and getExtraMetadataFormatNames and returns 
the combined results. 


    Returns: an array of Strings. 
*javax.imageio.metadata.IIOMetadata.getNativeMetadataFormatName()*

public |java.lang.String| getNativeMetadataFormatName()

Returns the name of the "native" metadata format for this plug-in, which 
typically allows for lossless encoding and transmission of the metadata stored 
in the format handled by this plug-in. If no such format is supported, nullwill 
be returned. 

The structure and contents of the "native" metadata format are defined by the 
plug-in that created this IIOMetadata object. Plug-ins for simple formats will 
usually create a dummy node for the root, and then a series of child nodes 
representing individual tags, chunks, or keyword/value pairs. A plug-in may 
choose whether or not to document its native format. 

The default implementation returns the value of the nativeMetadataFormatName 
instance variable. 


    Returns: the name of the native format, or null. 
*javax.imageio.metadata.IIOMetadata.getStandardChromaNode()*

protected |javax.imageio.metadata.IIOMetadataNode| getStandardChromaNode()

Returns an IIOMetadataNode representing the chroma information of the standard 
javax_imageio_1.0 metadata format, or null if no such information is available. 
This method is intended to be called by the utility routine getStandardTree. 

The default implementation returns null. 

Subclasses should override this method to produce an appropriate subtree if 
they wish to support the standard metadata format. 


    Returns: an IIOMetadataNode, or null. 
*javax.imageio.metadata.IIOMetadata.getStandardCompressionNode()*

protected |javax.imageio.metadata.IIOMetadataNode| getStandardCompressionNode()

Returns an IIOMetadataNode representing the compression information of the 
standard javax_imageio_1.0 metadata format, or null if no such information is 
available. This method is intended to be called by the utility routine 
getStandardTree. 

The default implementation returns null. 

Subclasses should override this method to produce an appropriate subtree if 
they wish to support the standard metadata format. 


    Returns: an IIOMetadataNode, or null. 
*javax.imageio.metadata.IIOMetadata.getStandardDataNode()*

protected |javax.imageio.metadata.IIOMetadataNode| getStandardDataNode()

Returns an IIOMetadataNode representing the data format information of the 
standard javax_imageio_1.0 metadata format, or null if no such information is 
available. This method is intended to be called by the utility routine 
getStandardTree. 

The default implementation returns null. 

Subclasses should override this method to produce an appropriate subtree if 
they wish to support the standard metadata format. 


    Returns: an IIOMetadataNode, or null. 
*javax.imageio.metadata.IIOMetadata.getStandardDimensionNode()*

protected |javax.imageio.metadata.IIOMetadataNode| getStandardDimensionNode()

Returns an IIOMetadataNode representing the dimension information of the 
standard javax_imageio_1.0 metadata format, or null if no such information is 
available. This method is intended to be called by the utility routine 
getStandardTree. 

The default implementation returns null. 

Subclasses should override this method to produce an appropriate subtree if 
they wish to support the standard metadata format. 


    Returns: an IIOMetadataNode, or null. 
*javax.imageio.metadata.IIOMetadata.getStandardDocumentNode()*

protected |javax.imageio.metadata.IIOMetadataNode| getStandardDocumentNode()

Returns an IIOMetadataNode representing the document information of the 
standard javax_imageio_1.0 metadata format, or null if no such information is 
available. This method is intended to be called by the utility routine 
getStandardTree. 

The default implementation returns null. 

Subclasses should override this method to produce an appropriate subtree if 
they wish to support the standard metadata format. 


    Returns: an IIOMetadataNode, or null. 
*javax.imageio.metadata.IIOMetadata.getStandardTextNode()*

protected |javax.imageio.metadata.IIOMetadataNode| getStandardTextNode()

Returns an IIOMetadataNode representing the textual information of the standard 
javax_imageio_1.0 metadata format, or null if no such information is available. 
This method is intended to be called by the utility routine getStandardTree. 

The default implementation returns null. 

Subclasses should override this method to produce an appropriate subtree if 
they wish to support the standard metadata format. 


    Returns: an IIOMetadataNode, or null. 
*javax.imageio.metadata.IIOMetadata.getStandardTileNode()*

protected |javax.imageio.metadata.IIOMetadataNode| getStandardTileNode()

Returns an IIOMetadataNode representing the tiling information of the standard 
javax_imageio_1.0 metadata format, or null if no such information is available. 
This method is intended to be called by the utility routine getStandardTree. 

The default implementation returns null. 

Subclasses should override this method to produce an appropriate subtree if 
they wish to support the standard metadata format. 


    Returns: an IIOMetadataNode, or null. 
*javax.imageio.metadata.IIOMetadata.getStandardTransparencyNode()*

protected |javax.imageio.metadata.IIOMetadataNode| getStandardTransparencyNode()

Returns an IIOMetadataNode representing the transparency information of the 
standard javax_imageio_1.0 metadata format, or null if no such information is 
available. This method is intended to be called by the utility routine 
getStandardTree. 

The default implementation returns null. 

Subclasses should override this method to produce an appropriate subtree if 
they wish to support the standard metadata format. 


    Returns: an IIOMetadataNode, or null. 
*javax.imageio.metadata.IIOMetadata.getStandardTree()*

protected final |javax.imageio.metadata.IIOMetadataNode| getStandardTree()

A utility method to return a tree of IIOMetadataNodes representing the metadata 
contained within this object according to the conventions of the standard 
javax_imageio_1.0 metadata format. 

This method calls the various getStandard*Node methods to supply each of the 
subtrees rooted at the children of the root node. If any of those methods 
returns null, the corresponding subtree will be omitted. If all of them return 
null, a tree consisting of a single root node will be returned. 


    Returns: an IIOMetadataNode representing the root of a metadata tree in the 
             javax_imageio_1.0 format. 
*javax.imageio.metadata.IIOMetadata.hasController()*

public boolean hasController()

Returns true if there is a controller installed for this IIOMetadata object. 

The default implementation returns true if the getController method returns a 
non-null value. 


    Returns: true if a controller is installed. 
*javax.imageio.metadata.IIOMetadata.isReadOnly()*

public abstract boolean isReadOnly()

Returns true if this object does not support the mergeTree, setFromTree, and 
reset methods. 


    Returns: true if this IIOMetadata object cannot be modified. 
*javax.imageio.metadata.IIOMetadata.isStandardMetadataFormatSupported()*

public boolean isStandardMetadataFormatSupported()

Returns true if the standard metadata format is supported by getMetadataFormat, 
getAsTree, setFromTree, and mergeTree. 

The default implementation returns the value of the standardFormatSupported 
instance variable. 


    Returns: true if the standard metadata format is supported. 
*javax.imageio.metadata.IIOMetadata.mergeTree(String,Node)*

public abstract void mergeTree(
  java.lang.String formatName,
  org.w3c.dom.Node root)
  throws |javax.imageio.metadata.IIOInvalidTreeException|
         
Alters the internal state of this IIOMetadata object from a tree of XML DOM 
Nodes whose syntax is defined by the given metadata format. The previous state 
is altered only as necessary to accomodate the nodes that are present in the 
given tree. If the tree structure or contents are invalid, an 
IIOInvalidTreeException will be thrown. 

As the semantics of how a tree or subtree may be merged with another tree are 
completely format-specific, plug-in authors may implement this method in 
whatever manner is most appropriate for the format, including simply replacing 
all existing state with the contents of the given tree. 

    formatName - the desired metadata format. 
    root - an XML DOM Node object forming the root of a tree. 

*javax.imageio.metadata.IIOMetadata.reset()*

public abstract void reset()

Resets all the data stored in this object to default values, usually to the 
state this object was in immediately after construction, though the precise 
semantics are plug-in specific. Note that there are many possible default 
values, depending on how the object was created. 


*javax.imageio.metadata.IIOMetadata.setController(IIOMetadataController)*

public void setController(javax.imageio.metadata.IIOMetadataController controller)

Sets the IIOMetadataController to be used to provide settings for this 
IIOMetadata object when the activateController method is called, overriding any 
default controller. If the argument is null, no controller will be used, 
including any default. To restore the default, use 
setController(getDefaultController()). 

The default implementation sets the controller instance variable to the 
supplied value. 

    controller - An appropriate IIOMetadataController, or null. 

*javax.imageio.metadata.IIOMetadata.setFromTree(String,Node)*

public void setFromTree(
  java.lang.String formatName,
  org.w3c.dom.Node root)
  throws |javax.imageio.metadata.IIOInvalidTreeException|
         
Sets the internal state of this IIOMetadata object from a tree of XML DOM Nodes 
whose syntax is defined by the given metadata format. The previous state is 
discarded. If the tree's structure or contents are invalid, an 
IIOInvalidTreeException will be thrown. 

The default implementation calls reset followed by mergeTree(formatName, root). 

    formatName - the desired metadata format. 
    root - an XML DOM Node object forming the root of a tree. 



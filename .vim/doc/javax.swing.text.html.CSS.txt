*javax.swing.text.html.CSS* *CSS* Defines a set of
 CSS attributes
 as a typesafe enumeration.

public class CSS
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|javax.swing.text.html.CSS_Description|
|javax.swing.text.html.CSS_Fields|
|javax.swing.text.html.CSS_Constructors|
|javax.swing.text.html.CSS_Methods|

====================================================================================================================================================================================

*javax.swing.text.html.CSS_Constructors*
|javax.swing.text.html.CSS()|

*javax.swing.text.html.CSS_Methods*
|javax.swing.text.html.CSS.getAllAttributeKeys()|Return the set of all possible CSS attribute keys.
|javax.swing.text.html.CSS.getAttribute(String)|Translates a string to a CSS.Attribute object.

*javax.swing.text.html.CSS_Description*

Defines a set of CSS attributes as a typesafe enumeration. The HTML View implementations use CSS attributes to determine how they will render. This also defines methods to map 
between CSS/HTML/StyleConstants. Any shorthand properties, such as font, are mapped to the intrinsic properties. The following describes the CSS properties that are suppored by 
the rendering engine: font-family font-style font-size (supports relative units) font-weight font color background-color (with the exception of transparent) background-image 
background-repeat background-position background background-repeat text-decoration (with the exception of blink and overline) vertical-align (only sup and super) text-align 
(justify is treated as center) margin-top margin-right margin-bottom margin-left margin padding-top padding-right padding-bottom padding-left border-style (only supports inset, 
outset and none) list-style-type list-style-position 

The following are modeled, but currently not rendered. font-variant background-attachment (background always treated as scroll) word-spacing letter-spacing text-indent 
text-transform line-height border-top-width (this is used to indicate if a border should be used) border-right-width border-bottom-width border-left-width border-width border-top 
border-right border-bottom border-left border width height float clear display white-space list-style 

Note: for the time being we do not fully support relative units, unless noted, so that p { margin-top: 10% } will be treated as if no margin-top was specified. 



*javax.swing.text.html.CSS()*

public CSS()




*javax.swing.text.html.CSS.getAllAttributeKeys()*

public static |javax.swing.text.html.CSS.Attribute|[] getAllAttributeKeys()

Return the set of all possible CSS attribute keys. 



*javax.swing.text.html.CSS.getAttribute(String)*

public static final |javax.swing.text.html.CSS.Attribute| getAttribute(java.lang.String name)

Translates a string to a CSS.Attribute object. This will return null if there is no attribute by the given name. 


    name - the name of the CSS attribute to fetch the typesafe enumeration for 

    Returns: the CSS.Attribute object, or null if the string doesn't represent a valid attribute key 



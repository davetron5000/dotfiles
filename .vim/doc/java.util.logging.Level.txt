*java.util.logging.Level* *Level* The Level class defines a set of standard logg

public class Level
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.util.logging.Level_Description|
|java.util.logging.Level_Fields|
|java.util.logging.Level_Constructors|
|java.util.logging.Level_Methods|

================================================================================

*java.util.logging.Level_Fields*
|java.util.logging.Level_java.util.logging.Level.ALL|
|java.util.logging.Level_java.util.logging.Level.CONFIG|
|java.util.logging.Level_java.util.logging.Level.FINE|
|java.util.logging.Level_java.util.logging.Level.FINER|
|java.util.logging.Level_java.util.logging.Level.FINEST|
|java.util.logging.Level_java.util.logging.Level.INFO|
|java.util.logging.Level_java.util.logging.Level.OFF|
|java.util.logging.Level_java.util.logging.Level.SEVERE|
|java.util.logging.Level_java.util.logging.Level.WARNING|

*java.util.logging.Level_Constructors*
|java.util.logging.Level(String,int)|Create a named Level with a given integer 
|java.util.logging.Level(String,int,String)|Create a named Level with a given i

*java.util.logging.Level_Methods*
|java.util.logging.Level.equals(Object)|Compare two objects for value equality.
|java.util.logging.Level.getLocalizedName()|Return the localized string name of
|java.util.logging.Level.getName()|Return the non-localized string name of the 
|java.util.logging.Level.getResourceBundleName()|Return the level's localizatio
|java.util.logging.Level.hashCode()|Generate a hashcode.
|java.util.logging.Level.intValue()|Get the integer value for this level.
|java.util.logging.Level.parse(String)|Parse a level name string into a Level.
|java.util.logging.Level.toString()|

*java.util.logging.Level_Description*

The Level class defines a set of standard logging levels that can be used to 
control logging output. The logging Level objects are ordered and are specified 
by ordered integers. Enabling logging at a given level also enables logging at 
all higher levels. 

Clients should normally use the predefined Level constants such as 
Level.SEVERE. 

The levels in descending order are: 

SEVERE (highest value) WARNING INFO CONFIG FINE FINER FINEST (lowest value) 

In addition there is a level OFF that can be used to turn off logging, and a 
level ALL that can be used to enable logging of all messages. 

It is possible for third parties to define additional logging levels by 
subclassing Level. In such cases subclasses should take care to chose unique 
integer level values and to ensure that they maintain the Object uniqueness 
property across serialization by defining a suitable readResolve method. 


*java.util.logging.Level_java.util.logging.Level.ALL*

The Level class defines a set of standard logging levels that can be used to 
control logging output. The logging Level objects are ordered and are specified 
by ordered integers. Enabling logging at a given level also enables logging at 
all higher levels. 

Clients should normally use the predefined Level constants such as 
Level.SEVERE. 

The levels in descending order are: 

SEVERE (highest value) WARNING INFO CONFIG FINE FINER FINEST (lowest value) 

In addition there is a level OFF that can be used to turn off logging, and a 
level ALL that can be used to enable logging of all messages. 

It is possible for third parties to define additional logging levels by 
subclassing Level. In such cases subclasses should take care to chose unique 
integer level values and to ensure that they maintain the Object uniqueness 
property across serialization by defining a suitable readResolve method. 


*java.util.logging.Level_java.util.logging.Level.CONFIG*

The Level class defines a set of standard logging levels that can be used to 
control logging output. The logging Level objects are ordered and are specified 
by ordered integers. Enabling logging at a given level also enables logging at 
all higher levels. 

Clients should normally use the predefined Level constants such as 
Level.SEVERE. 

The levels in descending order are: 

SEVERE (highest value) WARNING INFO CONFIG FINE FINER FINEST (lowest value) 

In addition there is a level OFF that can be used to turn off logging, and a 
level ALL that can be used to enable logging of all messages. 

It is possible for third parties to define additional logging levels by 
subclassing Level. In such cases subclasses should take care to chose unique 
integer level values and to ensure that they maintain the Object uniqueness 
property across serialization by defining a suitable readResolve method. 


*java.util.logging.Level_java.util.logging.Level.FINE*

The Level class defines a set of standard logging levels that can be used to 
control logging output. The logging Level objects are ordered and are specified 
by ordered integers. Enabling logging at a given level also enables logging at 
all higher levels. 

Clients should normally use the predefined Level constants such as 
Level.SEVERE. 

The levels in descending order are: 

SEVERE (highest value) WARNING INFO CONFIG FINE FINER FINEST (lowest value) 

In addition there is a level OFF that can be used to turn off logging, and a 
level ALL that can be used to enable logging of all messages. 

It is possible for third parties to define additional logging levels by 
subclassing Level. In such cases subclasses should take care to chose unique 
integer level values and to ensure that they maintain the Object uniqueness 
property across serialization by defining a suitable readResolve method. 


*java.util.logging.Level_java.util.logging.Level.FINER*

The Level class defines a set of standard logging levels that can be used to 
control logging output. The logging Level objects are ordered and are specified 
by ordered integers. Enabling logging at a given level also enables logging at 
all higher levels. 

Clients should normally use the predefined Level constants such as 
Level.SEVERE. 

The levels in descending order are: 

SEVERE (highest value) WARNING INFO CONFIG FINE FINER FINEST (lowest value) 

In addition there is a level OFF that can be used to turn off logging, and a 
level ALL that can be used to enable logging of all messages. 

It is possible for third parties to define additional logging levels by 
subclassing Level. In such cases subclasses should take care to chose unique 
integer level values and to ensure that they maintain the Object uniqueness 
property across serialization by defining a suitable readResolve method. 


*java.util.logging.Level_java.util.logging.Level.FINEST*

The Level class defines a set of standard logging levels that can be used to 
control logging output. The logging Level objects are ordered and are specified 
by ordered integers. Enabling logging at a given level also enables logging at 
all higher levels. 

Clients should normally use the predefined Level constants such as 
Level.SEVERE. 

The levels in descending order are: 

SEVERE (highest value) WARNING INFO CONFIG FINE FINER FINEST (lowest value) 

In addition there is a level OFF that can be used to turn off logging, and a 
level ALL that can be used to enable logging of all messages. 

It is possible for third parties to define additional logging levels by 
subclassing Level. In such cases subclasses should take care to chose unique 
integer level values and to ensure that they maintain the Object uniqueness 
property across serialization by defining a suitable readResolve method. 


*java.util.logging.Level_java.util.logging.Level.INFO*

The Level class defines a set of standard logging levels that can be used to 
control logging output. The logging Level objects are ordered and are specified 
by ordered integers. Enabling logging at a given level also enables logging at 
all higher levels. 

Clients should normally use the predefined Level constants such as 
Level.SEVERE. 

The levels in descending order are: 

SEVERE (highest value) WARNING INFO CONFIG FINE FINER FINEST (lowest value) 

In addition there is a level OFF that can be used to turn off logging, and a 
level ALL that can be used to enable logging of all messages. 

It is possible for third parties to define additional logging levels by 
subclassing Level. In such cases subclasses should take care to chose unique 
integer level values and to ensure that they maintain the Object uniqueness 
property across serialization by defining a suitable readResolve method. 


*java.util.logging.Level_java.util.logging.Level.OFF*

The Level class defines a set of standard logging levels that can be used to 
control logging output. The logging Level objects are ordered and are specified 
by ordered integers. Enabling logging at a given level also enables logging at 
all higher levels. 

Clients should normally use the predefined Level constants such as 
Level.SEVERE. 

The levels in descending order are: 

SEVERE (highest value) WARNING INFO CONFIG FINE FINER FINEST (lowest value) 

In addition there is a level OFF that can be used to turn off logging, and a 
level ALL that can be used to enable logging of all messages. 

It is possible for third parties to define additional logging levels by 
subclassing Level. In such cases subclasses should take care to chose unique 
integer level values and to ensure that they maintain the Object uniqueness 
property across serialization by defining a suitable readResolve method. 


*java.util.logging.Level_java.util.logging.Level.SEVERE*

The Level class defines a set of standard logging levels that can be used to 
control logging output. The logging Level objects are ordered and are specified 
by ordered integers. Enabling logging at a given level also enables logging at 
all higher levels. 

Clients should normally use the predefined Level constants such as 
Level.SEVERE. 

The levels in descending order are: 

SEVERE (highest value) WARNING INFO CONFIG FINE FINER FINEST (lowest value) 

In addition there is a level OFF that can be used to turn off logging, and a 
level ALL that can be used to enable logging of all messages. 

It is possible for third parties to define additional logging levels by 
subclassing Level. In such cases subclasses should take care to chose unique 
integer level values and to ensure that they maintain the Object uniqueness 
property across serialization by defining a suitable readResolve method. 


*java.util.logging.Level_java.util.logging.Level.WARNING*

The Level class defines a set of standard logging levels that can be used to 
control logging output. The logging Level objects are ordered and are specified 
by ordered integers. Enabling logging at a given level also enables logging at 
all higher levels. 

Clients should normally use the predefined Level constants such as 
Level.SEVERE. 

The levels in descending order are: 

SEVERE (highest value) WARNING INFO CONFIG FINE FINER FINEST (lowest value) 

In addition there is a level OFF that can be used to turn off logging, and a 
level ALL that can be used to enable logging of all messages. 

It is possible for third parties to define additional logging levels by 
subclassing Level. In such cases subclasses should take care to chose unique 
integer level values and to ensure that they maintain the Object uniqueness 
property across serialization by defining a suitable readResolve method. 



*java.util.logging.Level(String,int)*

protected Level(
  java.lang.String name,
  int value)

Create a named Level with a given integer value. 

Note that this constructor is "protected" to allow subclassing. In general 
clients of logging should use one of the constant Level objects such as SEVERE 
or FINEST. However, if clients need to add new logging levels, they may 
subclass Level and define new constants. 

    name - the name of the Level, for example "SEVERE". 
    value - an integer value for the level. 

*java.util.logging.Level(String,int,String)*

protected Level(
  java.lang.String name,
  int value,
  java.lang.String resourceBundleName)

Create a named Level with a given integer value and a given localization 
resource name. 

    name - the name of the Level, for example "SEVERE". 
    value - an integer value for the level. 
    resourceBundleName - name of a resource bundle to use in localizing the given name. If the 
       resourceBundleName is null or an empty string, it is ignored. 

*java.util.logging.Level.equals(Object)*

public boolean equals(java.lang.Object ox)

Compare two objects for value equality. 


    Returns: true if and only if the two objects have the same level value. 
*java.util.logging.Level.getLocalizedName()*

public |java.lang.String| getLocalizedName()

Return the localized string name of the Level, for the current default locale. 

If no localization information is available, the non-localized name is 
returned. 


    Returns: localized name 
*java.util.logging.Level.getName()*

public |java.lang.String| getName()

Return the non-localized string name of the Level. 


    Returns: non-localized name 
*java.util.logging.Level.getResourceBundleName()*

public |java.lang.String| getResourceBundleName()

Return the level's localization resource bundle name, or null if no 
localization bundle is defined. 


    Returns: localization resource bundle name 
*java.util.logging.Level.hashCode()*

public int hashCode()

Generate a hashcode. 


    Returns: a hashcode based on the level value 
*java.util.logging.Level.intValue()*

public final int intValue()

Get the integer value for this level. This integer value can be used for 
efficient ordering comparisons between Level objects. 


    Returns: the integer value for this level. 
*java.util.logging.Level.parse(String)*

public static synchronized |java.util.logging.Level| parse(java.lang.String name)
  throws |java.lang.IllegalArgumentException|
         
Parse a level name string into a Level. 

The argument string may consist of either a level name or an integer value. 

For example: 

"SEVERE" "1000" 

    name - string to be parsed 

    Returns: The parsed value. Passing an integer that corresponds to a known name (eg 700) 
             will return the associated name (eg CONFIG). Passing an integer 
             that does not (eg 1) will return a new level name initialized to 
             that value. 
*java.util.logging.Level.toString()*

public final |java.lang.String| toString()




    Returns: the non-localized name of the Level, for example "INFO". 


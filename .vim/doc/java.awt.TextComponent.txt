*java.awt.TextComponent* *TextComponent* The TextComponent class is the supercla

public class TextComponent
  extends    |java.awt.Component|
  implements |javax.accessibility.Accessible|

|java.awt.TextComponent_Description|
|java.awt.TextComponent_Fields|
|java.awt.TextComponent_Constructors|
|java.awt.TextComponent_Methods|

================================================================================

*java.awt.TextComponent_Fields*
|java.awt.event.TextListener_java.awt.TextComponent.textListener|

*java.awt.TextComponent_Methods*
|java.awt.TextComponent.addNotify()|Makes this Component displayable by connect
|java.awt.TextComponent.addTextListener(TextListener)|Adds the specified text e
|java.awt.TextComponent.enableInputMethods(boolean)|
|java.awt.TextComponent.getAccessibleContext()|Gets the AccessibleContext assoc
|java.awt.TextComponent.getBackground()|Gets the background color of this text 
|java.awt.TextComponent.getCaretPosition()|Returns the position of the text ins
|java.awt.TextComponent.getInputMethodRequests()|
|java.awt.TextComponent.getListeners(Class)|Returns an array of all the objects
|java.awt.TextComponent.getSelectedText()|Returns the selected text from the te
|java.awt.TextComponent.getSelectionEnd()|Gets the end position of the selected
|java.awt.TextComponent.getSelectionStart()|Gets the start position of the sele
|java.awt.TextComponent.getText()|Returns the text that is presented by this te
|java.awt.TextComponent.getTextListeners()|Returns an array of all the text lis
|java.awt.TextComponent.isEditable()|Indicates whether or not this text compone
|java.awt.TextComponent.paramString()|Returns a string representing the state o
|java.awt.TextComponent.processEvent(AWTEvent)|Processes events on this text co
|java.awt.TextComponent.processTextEvent(TextEvent)|Processes text events occur
|java.awt.TextComponent.removeNotify()|Removes the TextComponent's peer.
|java.awt.TextComponent.removeTextListener(TextListener)|Removes the specified 
|java.awt.TextComponent.select(int,int)|Selects the text between the specified 
|java.awt.TextComponent.selectAll()|Selects all the text in this text component
|java.awt.TextComponent.setBackground(Color)|Sets the background color of this 
|java.awt.TextComponent.setCaretPosition(int)|Sets the position of the text ins
|java.awt.TextComponent.setEditable(boolean)|Sets the flag that determines whet
|java.awt.TextComponent.setSelectionEnd(int)|Sets the selection end for this te
|java.awt.TextComponent.setSelectionStart(int)|Sets the selection start for thi
|java.awt.TextComponent.setText(String)|Sets the text that is presented by this

*java.awt.TextComponent_Description*

The TextComponent class is the superclass of any component that allows the 
editing of some text. 

A text component embodies a string of text. The TextComponent class defines a 
set of methods that determine whether or not this text is editable. If the 
component is editable, it defines another set of methods that supports a text 
insertion caret. 

In addition, the class defines methods that are used to maintain a current 
selection from the text. The text selection, a substring of the component's 
text, is the target of editing operations. It is also referred to as the 
selected text. 


*java.awt.event.TextListener_java.awt.TextComponent.textListener*

The TextComponent class is the superclass of any component that allows the 
editing of some text. 

A text component embodies a string of text. The TextComponent class defines a 
set of methods that determine whether or not this text is editable. If the 
component is editable, it defines another set of methods that supports a text 
insertion caret. 

In addition, the class defines methods that are used to maintain a current 
selection from the text. The text selection, a substring of the component's 
text, is the target of editing operations. It is also referred to as the 
selected text. 



*java.awt.TextComponent.addNotify()*

public void addNotify()

Makes this Component displayable by connecting it to a native screen resource. 
This method is called internally by the toolkit and should not be called 
directly by programs. 


*java.awt.TextComponent.addTextListener(TextListener)*

public synchronized void addTextListener(java.awt.event.TextListener l)

Adds the specified text event listener to receive text events from this text 
component. If l is null, no exception is thrown and no action is performed. 

    l - the text event listener 

*java.awt.TextComponent.enableInputMethods(boolean)*

public void enableInputMethods(boolean enable)




*java.awt.TextComponent.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this TextComponent. For text 
components, the AccessibleContext takes the form of an 
AccessibleAWTTextComponent. A new AccessibleAWTTextComponent instance is 
created if necessary. 


    Returns: an AccessibleAWTTextComponent that serves as the AccessibleContext of this 
             TextComponent 
*java.awt.TextComponent.getBackground()*

public |java.awt.Color| getBackground()

Gets the background color of this text component. 

By default, non-editable text components have a background color of 
SystemColor.control. This default can be overridden by calling setBackground. 


    Returns: This text component's background color. If this text component does not have a 
             background color, the background color of its parent is returned. 
*java.awt.TextComponent.getCaretPosition()*

public synchronized int getCaretPosition()

Returns the position of the text insertion caret. The caret position is 
constrained to be between 0 and the last character of the text, inclusive. If 
the text or caret have not been set, the default caret position is 0. 


    Returns: the position of the text insertion caret 
*java.awt.TextComponent.getInputMethodRequests()*

public |java.awt.im.InputMethodRequests| getInputMethodRequests()




*java.awt.TextComponent.getListeners(Class)*

public |java.util.EventListener| getListeners(java.lang.Class listenerType)

Returns an array of all the objects currently registered as FooListeners upon 
this TextComponent. FooListeners are registered using the addFooListener 
method. 

You can specify the listenerType argument with a class literal, such as 
FooListener.class. For example, you can query a TextComponent t for its text 
listeners with the following code: 

TextListener[] tls = (TextListener[])(t.getListeners(TextListener.class)); 

If no such listeners exist, this method returns an empty array. 

    listenerType - the type of listeners requested; this parameter should specify an interface 
       that descends from java.util.EventListener 

    Returns: an array of all objects registered as FooListeners on this text component, or 
             an empty array if no such listeners have been added 
*java.awt.TextComponent.getSelectedText()*

public synchronized |java.lang.String| getSelectedText()

Returns the selected text from the text that is presented by this text 
component. 


    Returns: the selected text of this text component 
*java.awt.TextComponent.getSelectionEnd()*

public synchronized int getSelectionEnd()

Gets the end position of the selected text in this text component. 


    Returns: the end position of the selected text 
*java.awt.TextComponent.getSelectionStart()*

public synchronized int getSelectionStart()

Gets the start position of the selected text in this text component. 


    Returns: the start position of the selected text 
*java.awt.TextComponent.getText()*

public synchronized |java.lang.String| getText()

Returns the text that is presented by this text component. By default, this is 
an empty string. 


    Returns: the value of this TextComponent 
*java.awt.TextComponent.getTextListeners()*

public synchronized |java.awt.event.TextListener| getTextListeners()

Returns an array of all the text listeners registered on this text component. 


    Returns: all of this text component's TextListeners or an empty array if no text 
             listeners are currently registered 
*java.awt.TextComponent.isEditable()*

public boolean isEditable()

Indicates whether or not this text component is editable. 


    Returns: true if this text component is editable; false otherwise. 
*java.awt.TextComponent.paramString()*

protected |java.lang.String| paramString()

Returns a string representing the state of this TextComponent. This method is 
intended to be used only for debugging purposes, and the content and format of 
the returned string may vary between implementations. The returned string may 
be empty but may not be null. 


    Returns: the parameter string of this text component 
*java.awt.TextComponent.processEvent(AWTEvent)*

protected void processEvent(java.awt.AWTEvent e)

Processes events on this text component. If the event is a TextEvent, it 
invokes the processTextEvent method else it invokes its superclass's 
processEvent. Note that if the event parameter is null the behavior is 
unspecified and may result in an exception. 

    e - the event 

*java.awt.TextComponent.processTextEvent(TextEvent)*

protected void processTextEvent(java.awt.event.TextEvent e)

Processes text events occurring on this text component by dispatching them to 
any registered TextListener objects. 

NOTE: This method will not be called unless text events are enabled for this 
component. This happens when one of the following occurs: 

A TextListener object is registered via addTextListener Text events are enabled 
via enableEvents 

Note that if the event parameter is null the behavior is unspecified and may 
result in an exception. 

    e - the text event 

*java.awt.TextComponent.removeNotify()*

public void removeNotify()

Removes the TextComponent's peer. The peer allows us to modify the appearance 
of the TextComponent without changing its functionality. 


*java.awt.TextComponent.removeTextListener(TextListener)*

public synchronized void removeTextListener(java.awt.event.TextListener l)

Removes the specified text event listener so that it no longer receives text 
events from this text component If l is null, no exception is thrown and no 
action is performed. 

    l - the text listener 

*java.awt.TextComponent.select(int,int)*

public synchronized void select(
  int selectionStart,
  int selectionEnd)

Selects the text between the specified start and end positions. 

This method sets the start and end positions of the selected text, enforcing 
the restriction that the start position must be greater than or equal to zero. 
The end position must be greater than or equal to the start position, and less 
than or equal to the length of the text component's text. The character 
positions are indexed starting with zero. The length of the selection is 
endPosition - startPosition, so the character at endPosition is not selected. 
If the start and end positions of the selected text are equal, all text is 
deselected. 

If the caller supplies values that are inconsistent or out of bounds, the 
method enforces these constraints silently, and without failure. Specifically, 
if the start position or end position is greater than the length of the text, 
it is reset to equal the text length. If the start position is less than zero, 
it is reset to zero, and if the end position is less than the start position, 
it is reset to the start position. 

    selectionStart - the zero-based index of the first character (char value) to be selected 
    selectionEnd - the zero-based end position of the text to be selected; the character (char 
       value) at selectionEnd is not selected 

*java.awt.TextComponent.selectAll()*

public synchronized void selectAll()

Selects all the text in this text component. 


*java.awt.TextComponent.setBackground(Color)*

public void setBackground(java.awt.Color c)

Sets the background color of this text component. 

    c - The color to become this text component's color. If this parameter is null then 
       this text component will inherit the background color of its parent. 

*java.awt.TextComponent.setCaretPosition(int)*

public synchronized void setCaretPosition(int position)

Sets the position of the text insertion caret. The caret position is 
constrained to be between 0 and the last character of the text, inclusive. If 
the passed-in value is greater than this range, the value is set to the last 
character (or 0 if the TextComponent contains no text) and no error is 
returned. If the passed-in value is less than 0, an IllegalArgumentException is 
thrown. 

    position - the position of the text insertion caret 

*java.awt.TextComponent.setEditable(boolean)*

public synchronized void setEditable(boolean b)

Sets the flag that determines whether or not this text component is editable. 

If the flag is set to true, this text component becomes user editable. If the 
flag is set to false, the user cannot change the text of this text component. 
By default, non-editable text components have a background color of 
SystemColor.control. This default can be overridden by calling setBackground. 

    b - a flag indicating whether this text component is user editable. 

*java.awt.TextComponent.setSelectionEnd(int)*

public synchronized void setSelectionEnd(int selectionEnd)

Sets the selection end for this text component to the specified position. The 
new end point is constrained to be at or after the current selection start. It 
also cannot be set beyond the end of the component's text. If the caller 
supplies a value for selectionEnd that is out of bounds, the method enforces 
these constraints silently, and without failure. 

    selectionEnd - the end position of the selected text 

*java.awt.TextComponent.setSelectionStart(int)*

public synchronized void setSelectionStart(int selectionStart)

Sets the selection start for this text component to the specified position. The 
new start point is constrained to be at or before the current selection end. It 
also cannot be set to less than zero, the beginning of the component's text. If 
the caller supplies a value for selectionStart that is out of bounds, the 
method enforces these constraints silently, and without failure. 

    selectionStart - the start position of the selected text 

*java.awt.TextComponent.setText(String)*

public synchronized void setText(java.lang.String t)

Sets the text that is presented by this text component to be the specified 
text. 

    t - the new text; if this parameter is null then the text is set to the empty 
       string "" 



*java.net.InetSocketAddress* *InetSocketAddress* This class implements an IP Socket Address (IP address + port number)
 It can also be a pair (hostname + port number), in which cas

public class InetSocketAddress
  extends    |java.net.SocketAddress|

|java.net.InetSocketAddress_Description|
|java.net.InetSocketAddress_Fields|
|java.net.InetSocketAddress_Constructors|
|java.net.InetSocketAddress_Methods|

====================================================================================================================================================================================

*java.net.InetSocketAddress_Constructors*
|java.net.InetSocketAddress(InetAddress,int)|Creates a socket address from an IP address and a port number.
|java.net.InetSocketAddress(int)|Creates a socket address where the IP address is the wildcard address  and the port number a specified value.
|java.net.InetSocketAddress(String,int)|Creates a socket address from a hostname and a port number.

*java.net.InetSocketAddress_Methods*
|java.net.InetSocketAddress.createUnresolved(String,int)|Creates an unresolved socket address from a hostname and a port number.
|java.net.InetSocketAddress.equals(Object)|Compares this object against the specified object.
|java.net.InetSocketAddress.getAddress()|Gets the InetAddress.
|java.net.InetSocketAddress.getHostName()|Gets the hostname.
|java.net.InetSocketAddress.getPort()|Gets the port number.
|java.net.InetSocketAddress.hashCode()|Returns a hashcode for this socket address.
|java.net.InetSocketAddress.isUnresolved()|Checks whether the address has been resolved or not.
|java.net.InetSocketAddress.toString()|Constructs a string representation of this InetSocketAddress.

*java.net.InetSocketAddress_Description*

This class implements an IP Socket Address (IP address + port number) It can also be a pair (hostname + port number), in which case an attempt will be made to resolve the 
hostname. If resolution fails then the address is said to be unresolved but can still be used on some circumstances like connecting through a proxy. 

It provides an immutable object used by sockets for binding, connecting, or as returned values. 

The wildcard is a special local IP address. It usually means "any" and can only be used for bind operations. 



*java.net.InetSocketAddress(InetAddress,int)*

public InetSocketAddress(
  java.net.InetAddress addr,
  int port)

Creates a socket address from an IP address and a port number. 

A valid port value is between 0 and 65535. A port number of zero will let the system pick up an ephemeral port in a bind operation. 

A null address will assign the wildcard address. 

    addr - The IP address 
    port - The port number 

*java.net.InetSocketAddress(int)*

public InetSocketAddress(int port)

Creates a socket address where the IP address is the wildcard address and the port number a specified value. 

A valid port value is between 0 and 65535. A port number of zero will let the system pick up an ephemeral port in a bind operation. 

    port - The port number 

*java.net.InetSocketAddress(String,int)*

public InetSocketAddress(
  java.lang.String hostname,
  int port)

Creates a socket address from a hostname and a port number. 

An attempt will be made to resolve the hostname into an InetAddress. If that attempt fails, the address will be flagged as unresolved. 

If there is a security manager, its checkConnect method is called with the host name as its argument to check the permissiom to resolve it. This could result in a 
SecurityException. 

A valid port value is between 0 and 65535. A port number of zero will let the system pick up an ephemeral port in a bind operation. 

    hostname - the Host name 
    port - The port number 

*java.net.InetSocketAddress.createUnresolved(String,int)*

public static |java.net.InetSocketAddress| createUnresolved(
  java.lang.String host,
  int port)

Creates an unresolved socket address from a hostname and a port number. 

No attempt will be made to resolve the hostname into an InetAddress. The address will be flagged as unresolved. 

A valid port value is between 0 and 65535. A port number of zero will let the system pick up an ephemeral port in a bind operation. 


    host - the Host name 
    port - The port number 

    Returns: a InetSocketAddress representing the unresolved socket address 

*java.net.InetSocketAddress.equals(Object)*

public final boolean equals(java.lang.Object obj)

Compares this object against the specified object. The result is true if and only if the argument is not null and it represents the same address as this object. 

Two instances of InetSocketAddress represent the same address if both the InetAddresses (or hostnames if it is unresolved) and port numbers are equal. If both addresses are 
unresolved, then the hostname & the port number are compared. 


    obj - the object to compare against. 

    Returns: true if the objects are the same; false otherwise. 

*java.net.InetSocketAddress.getAddress()*

public final |java.net.InetAddress| getAddress()

Gets the InetAddress. 



    Returns: the InetAdress or null if it is unresolved. 

*java.net.InetSocketAddress.getHostName()*

public final |java.lang.String| getHostName()

Gets the hostname. 



    Returns: the hostname part of the address. 

*java.net.InetSocketAddress.getPort()*

public final int getPort()

Gets the port number. 



    Returns: the port number. 

*java.net.InetSocketAddress.hashCode()*

public final int hashCode()

Returns a hashcode for this socket address. 



    Returns: a hash code value for this socket address. 

*java.net.InetSocketAddress.isUnresolved()*

public final boolean isUnresolved()

Checks whether the address has been resolved or not. 



    Returns: true if the hostname couldn't be resolved into an InetAddress. 

*java.net.InetSocketAddress.toString()*

public |java.lang.String| toString()

Constructs a string representation of this InetSocketAddress. This String is constructed by calling toString() on the InetAddress and concatenating the port number (with a colon). 
If the address is unresolved then the part before the colon will only contain the hostname. 



    Returns: a string representation of this object. 



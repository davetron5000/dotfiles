*java.nio.charset.Charset* *Charset* A named mapping between sequences of sixteen-bit Unicode code units and sequences of
 bytes.

public abstract class Charset
  extends    |java.lang.Object|
  implements |java.lang.Comparable|

|java.nio.charset.Charset_Description|
|java.nio.charset.Charset_Fields|
|java.nio.charset.Charset_Constructors|
|java.nio.charset.Charset_Methods|

====================================================================================================================================================================================

*java.nio.charset.Charset_Constructors*
|java.nio.charset.Charset(String,String[])|Initializes a new charset with the given canonical name and alias  set.

*java.nio.charset.Charset_Methods*
|java.nio.charset.Charset.aliases()|Returns a set containing this charset's aliases.
|java.nio.charset.Charset.availableCharsets()|Constructs a sorted map from canonical charset names to charset objects.
|java.nio.charset.Charset.canEncode()|Tells whether or not this charset supports encoding.
|java.nio.charset.Charset.compareTo(Charset)|Compares this charset to another.
|java.nio.charset.Charset.contains(Charset)|Tells whether or not this charset contains the given charset.
|java.nio.charset.Charset.decode(ByteBuffer)|Convenience method that decodes bytes in this charset into Unicode  characters.
|java.nio.charset.Charset.defaultCharset()|Returns the default charset of this Java virtual machine.
|java.nio.charset.Charset.displayName()|Returns this charset's human-readable name for the default locale.
|java.nio.charset.Charset.displayName(Locale)|Returns this charset's human-readable name for the given locale.
|java.nio.charset.Charset.encode(CharBuffer)|Convenience method that encodes Unicode characters into bytes in this  charset.
|java.nio.charset.Charset.encode(String)|Convenience method that encodes a string into bytes in this charset.
|java.nio.charset.Charset.equals(Object)|Tells whether or not this object is equal to another.
|java.nio.charset.Charset.forName(String)|Returns a charset object for the named charset.
|java.nio.charset.Charset.hashCode()|Computes a hashcode for this charset.
|java.nio.charset.Charset.isRegistered()|Tells whether or not this charset is registered in the IANA Charset  Registry.
|java.nio.charset.Charset.isSupported(String)|Tells whether the named charset is supported.
|java.nio.charset.Charset.name()|Returns this charset's canonical name.
|java.nio.charset.Charset.newDecoder()|Constructs a new decoder for this charset.
|java.nio.charset.Charset.newEncoder()|Constructs a new encoder for this charset.
|java.nio.charset.Charset.toString()|Returns a string describing this charset.

*java.nio.charset.Charset_Description*

A named mapping between sequences of sixteen-bit Unicode code units and sequences of bytes. This class defines methods for creating decoders and encoders and for retrieving the 
various names associated with a charset. Instances of this class are immutable. 

This class also defines static methods for testing whether a particular charset is supported, for locating charset instances by name, and for constructing a map that contains 
every charset for which support is available in the current Java virtual machine. Support for new charsets can be added via the service-provider interface defined in the 
(|java.nio.charset.spi.CharsetProvider|) class. 

All of the methods defined in this class are safe for use by multiple concurrent threads. 

Charset names 

Charsets are named by strings composed of the following characters: 



The uppercase letters 'A' through 'Z' ('u0041'through'u005a'), 

The lowercase letters 'a' through 'z' ('u0061'through'u007a'), 

The digits '0' through '9' ('u0030'through'u0039'), 

The dash character '-' ('u002d',HYPHEN-MINUS), 

The period character '.' ('u002e',FULL STOP), 

The colon character ':' ('u003a',COLON), and 

The underscore character '_' ('u005f',LOWLINE). 



A charset name must begin with either a letter or a digit. The empty string is not a legal charset name. Charset names are not case-sensitive; that is, case is always ignored when 
comparing charset names. Charset names generally follow the conventions documented in RFC2278:IANA Charset Registration Procedures. 

Every charset has a canonical name and may also have one or more aliases. The canonical name is returned by the name(|java.nio.charset.Charset|) method of this class. Canonical 
names are, by convention, usually in upper case. The aliases of a charset are returned by the aliases(|java.nio.charset.Charset|) method. 



Some charsets have an historical name that is defined for compatibility with previous versions of the Java platform. A charset's historical name is either its canonical name or 
one of its aliases. The historical name is returned by the getEncoding() methods of the InputStreamReader(|java.io.InputStreamReader|) and 
OutputStreamWriter(|java.io.OutputStreamWriter|) classes. 



If a charset listed in the IANA Charset Registry is supported by an implementation of the Java platform then its canonical name must be the name listed in the registry. Many 
charsets are given more than one name in the registry, in which case the registry identifies one of the names as MIME-preferred. If a charset has more than one registry name then 
its canonical name must be the MIME-preferred name and the other names in the registry must be valid aliases. If a supported charset is not listed in the IANA registry then its 
canonical name must begin with one of the strings "X-" or "x-". 

The IANA charset registry does change over time, and so the canonical name and the aliases of a particular charset may also change over time. To ensure compatibility it is 
recommended that no alias ever be removed from a charset, and that if the canonical name of a charset is changed then its previous canonical name be made into an alias. 

Standard charsets 

Every implementation of the Java platform is required to support the following standard charsets. Consult the release documentation for your implementation to see if any other 
charsets are supported. The behavior of such optional charsets may differ between implementations. 

CharsetDescription US-ASCII Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the Unicode character set ISO-8859-1 ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1 
UTF-8 Eight-bit UCS Transformation Format UTF-16BE Sixteen-bit UCS Transformation Format, big-endian byteorder UTF-16LE Sixteen-bit UCS Transformation Format, little-endian 
byteorder UTF-16 Sixteen-bit UCS Transformation Format, byteorder identified by an optional byte-order mark 

The UTF-8 charset is specified by RFC2279; the transformation format upon which it is based is specified in Amendment2 of ISO10646-1 and is also described in the Unicode Standard. 

The UTF-16 charsets are specified by RFC2781; the transformation formats upon which they are based are specified in Amendment1 of ISO10646-1 and are also described in the Unicode 
Standard. 

The UTF-16 charsets use sixteen-bit quantities and are therefore sensitive to byte order. In these encodings the byte order of a stream may be indicated by an initial byte-order 
mark represented by the Unicode character 'uFEFF'. Byte-order marks are handled as follows: 



When decoding, the UTF-16BE and UTF-16LE charsets ignore byte-order marks; when encoding, they do not write byte-order marks. 

When decoding, the UTF-16 charset interprets a byte-order mark to indicate the byte order of the stream but defaults to big-endian if there is no byte-order mark; when encoding, 
it uses big-endian byte order and writes a big-endian byte-order mark. 



In any case, when a byte-order mark is read at the beginning of a decoding operation it is omitted from the resulting sequence of characters. Byte order marks occuring after the 
first element of an input sequence are not omitted since the same code is used to represent ZERO-WIDTH NON-BREAKING SPACE. 

Every instance of the Java virtual machine has a default charset, which may or may not be one of the standard charsets. The default charset is determined during virtual-machine 
startup and typically depends upon the locale and charset being used by the underlying operating system. 

Terminology 

The name of this class is taken from the terms used in RFC2278. In that document a charset is defined as the combination of a coded character set and a character-encoding scheme. 

A coded character set is a mapping between a set of abstract characters and a set of integers. US-ASCII, ISO8859-1, JISX0201, and full Unicode, which is the same as ISO10646-1, 
are examples of coded character sets. 

A character-encoding scheme is a mapping between a coded character set and a set of octet (eight-bit byte) sequences. UTF-8, UCS-2, UTF-16, ISO2022, and EUC are examples of 
character-encoding schemes. Encoding schemes are often associated with a particular coded character set; UTF-8, for example, is used only to encode Unicode. Some schemes, however, 
are associated with multiple character sets; EUC, for example, can be used to encode characters in a variety of Asian character sets. 

When a coded character set is used exclusively with a single character-encoding scheme then the corresponding charset is usually named for the character set; otherwise a charset 
is usually named for the encoding scheme and, possibly, the locale of the character sets that it supports. Hence US-ASCII is the name of the charset for US-ASCII while EUC-JP is 
the name of the charset that encodes the JISX0201, JISX0208, and JISX0212 character sets. 

The native character encoding of the Java programming language is UTF-16. A charset in the Java platform therefore defines a mapping between sequences of sixteen-bit UTF-16 code 
units and sequences of bytes. 



*java.nio.charset.Charset(String,String[])*

protected Charset(
  java.lang.String canonicalName,
  java.lang.String[] aliases)

Initializes a new charset with the given canonical name and alias set. 

    canonicalName - The canonical name of this charset 
    aliases - An array of this charset's aliases, or null if it has no aliases 

*java.nio.charset.Charset.aliases()*

public final |java.util.Set|<String> aliases()

Returns a set containing this charset's aliases. 



    Returns: An immutable set of this charset's aliases 

*java.nio.charset.Charset.availableCharsets()*

public static |java.util.SortedMap|<String,Charset> availableCharsets()

Constructs a sorted map from canonical charset names to charset objects. 

The map returned by this method will have one entry for each charset for which support is available in the current Java virtual machine. If two or more supported charsets have the 
same canonical name then the resulting map will contain just one of them; which one it will contain is not specified. 

The invocation of this method, and the subsequent use of the resulting map, may cause time-consuming disk or network I/O operations to occur. This method is provided for 
applications that need to enumerate all of the available charsets, for example to allow user charset selection. This method is not used by the forName(|java.nio.charset.Charset|) 
method, which instead employs an efficient incremental lookup algorithm. 

This method may return different results at different times if new charset providers are dynamically made available to the current Java virtual machine. In the absence of such 
changes, the charsets returned by this method are exactly those that can be retrieved via the forName(|java.nio.charset.Charset|) method. 



    Returns: An immutable, case-insensitive map from canonical charset names to charset objects 

*java.nio.charset.Charset.canEncode()*

public boolean canEncode()

Tells whether or not this charset supports encoding. 

Nearly all charsets support encoding. The primary exceptions are special-purpose auto-detect charsets whose decoders can determine which of several possible encoding schemes is in 
use by examining the input byte sequence. Such charsets do not support encoding because there is no way to determine which encoding should be used on output. Implementations of 
such charsets should override this method to return false. 



    Returns: true if, and only if, this charset supports encoding 

*java.nio.charset.Charset.compareTo(Charset)*

public final int compareTo(java.nio.charset.Charset that)

Compares this charset to another. 

Charsets are ordered by their canonical names, without regard to case. 


    that - The charset to which this charset is to be compared 

    Returns: A negative integer, zero, or a positive integer as this charset is less than, equal to, or greater than the specified charset 

*java.nio.charset.Charset.contains(Charset)*

public abstract boolean contains(java.nio.charset.Charset cs)

Tells whether or not this charset contains the given charset. 

A charset C is said to contain a charset D if, and only if, every character representable in D is also representable in C. If this relationship holds then it is guaranteed that 
every string that can be encoded in D can also be encoded in C without performing any replacements. 

That C contains D does not imply that each character representable in C by a particular byte sequence is represented in D by the same byte sequence, although sometimes this is the 
case. 

Every charset contains itself. 

This method computes an approximation of the containment relation: If it returns true then the given charset is known to be contained by this charset; if it returns false, 
however, then it is not necessarily the case that the given charset is not contained in this charset. 



    Returns: true if, and only if, the given charset is contained in this charset 

*java.nio.charset.Charset.decode(ByteBuffer)*

public final |java.nio.CharBuffer| decode(java.nio.ByteBuffer bb)

Convenience method that decodes bytes in this charset into Unicode characters. 

An invocation of this method upon a charset cs returns the same result as the expression 



cs.newDecoder() .onMalformedInput(CodingErrorAction.REPLACE) .onUnmappableCharacter(CodingErrorAction.REPLACE) .decode(bb); 

except that it is potentially more efficient because it can cache decoders between successive invocations. 

This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement byte array. In order to detect such sequences, use the 
(|java.nio.charset.CharsetDecoder|) method directly. 


    bb - The byte buffer to be decoded 

    Returns: A char buffer containing the decoded characters 

*java.nio.charset.Charset.defaultCharset()*

public static |java.nio.charset.Charset| defaultCharset()

Returns the default charset of this Java virtual machine. 

The default charset is determined during virtual-machine startup and typically depends upon the locale and charset of the underlying operating system. 



    Returns: A charset object for the default charset 

*java.nio.charset.Charset.displayName()*

public |java.lang.String| displayName()

Returns this charset's human-readable name for the default locale. 

The default implementation of this method simply returns this charset's canonical name. Concrete subclasses of this class may override this method in order to provide a localized 
display name. 



    Returns: The display name of this charset in the default locale 

*java.nio.charset.Charset.displayName(Locale)*

public |java.lang.String| displayName(java.util.Locale locale)

Returns this charset's human-readable name for the given locale. 

The default implementation of this method simply returns this charset's canonical name. Concrete subclasses of this class may override this method in order to provide a localized 
display name. 


    locale - The locale for which the display name is to be retrieved 

    Returns: The display name of this charset in the given locale 

*java.nio.charset.Charset.encode(CharBuffer)*

public final |java.nio.ByteBuffer| encode(java.nio.CharBuffer cb)

Convenience method that encodes Unicode characters into bytes in this charset. 

An invocation of this method upon a charset cs returns the same result as the expression 



cs.newEncoder() .onMalformedInput(CodingErrorAction.REPLACE) .onUnmappableCharacter(CodingErrorAction.REPLACE) .encode(bb); 

except that it is potentially more efficient because it can cache encoders between successive invocations. 

This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement string. In order to detect such sequences, use the 
(|java.nio.charset.CharsetEncoder|) method directly. 


    cb - The char buffer to be encoded 

    Returns: A byte buffer containing the encoded characters 

*java.nio.charset.Charset.encode(String)*

public final |java.nio.ByteBuffer| encode(java.lang.String str)

Convenience method that encodes a string into bytes in this charset. 

An invocation of this method upon a charset cs returns the same result as the expression 



cs.encode(CharBuffer.wrap(s)); 


    str - The string to be encoded 

    Returns: A byte buffer containing the encoded characters 

*java.nio.charset.Charset.equals(Object)*

public final boolean equals(java.lang.Object ob)

Tells whether or not this object is equal to another. 

Two charsets are equal if, and only if, they have the same canonical names. A charset is never equal to any other type of object. 



    Returns: true if, and only if, this charset is equal to the given object 

*java.nio.charset.Charset.forName(String)*

public static |java.nio.charset.Charset| forName(java.lang.String charsetName)

Returns a charset object for the named charset. 


    charsetName - The name of the requested charset; may be either a canonical name or an alias 

    Returns: A charset object for the named charset 

*java.nio.charset.Charset.hashCode()*

public final int hashCode()

Computes a hashcode for this charset. 



    Returns: An integer hashcode 

*java.nio.charset.Charset.isRegistered()*

public final boolean isRegistered()

Tells whether or not this charset is registered in the IANA Charset Registry. 



    Returns: true if, and only if, this charset is known by its implementor to be registered with the IANA 

*java.nio.charset.Charset.isSupported(String)*

public static boolean isSupported(java.lang.String charsetName)

Tells whether the named charset is supported. 


    charsetName - The name of the requested charset; may be either a canonical name or an alias 

    Returns: true if, and only if, support for the named charset is available in the current Java virtual machine 

*java.nio.charset.Charset.name()*

public final |java.lang.String| name()

Returns this charset's canonical name. 



    Returns: The canonical name of this charset 

*java.nio.charset.Charset.newDecoder()*

public abstract |java.nio.charset.CharsetDecoder| newDecoder()

Constructs a new decoder for this charset. 



    Returns: A new decoder for this charset 

*java.nio.charset.Charset.newEncoder()*

public abstract |java.nio.charset.CharsetEncoder| newEncoder()

Constructs a new encoder for this charset. 



    Returns: A new encoder for this charset 

*java.nio.charset.Charset.toString()*

public final |java.lang.String| toString()

Returns a string describing this charset. 



    Returns: A string describing this charset 



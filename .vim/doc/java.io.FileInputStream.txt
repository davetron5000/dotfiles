*java.io.FileInputStream* *FileInputStream* A FileInputStream obtains input bytes
 from a file in a file system.

public class FileInputStream
  extends    |java.io.InputStream|

|java.io.FileInputStream_Description|
|java.io.FileInputStream_Fields|
|java.io.FileInputStream_Constructors|
|java.io.FileInputStream_Methods|

====================================================================================================================================================================================

*java.io.FileInputStream_Constructors*
|java.io.FileInputStream(File)|Creates a FileInputStream by  opening a connection to an actual file,  the file named by the File  object file in the file system.
|java.io.FileInputStream(FileDescriptor)|Creates a FileInputStream by using the file descriptor  fdObj, which represents an existing connection to an  actual file in the file syst
|java.io.FileInputStream(String)|Creates a FileInputStream by  opening a connection to an actual file,  the file named by the path name name  in the file system.

*java.io.FileInputStream_Methods*
|java.io.FileInputStream.available()|Returns the number of bytes that can be read from this file input  stream without blocking.
|java.io.FileInputStream.close()|Closes this file input stream and releases any system resources  associated with the stream.
|java.io.FileInputStream.finalize()|Ensures that the close method of this file input stream is  called when there are no more references to it.
|java.io.FileInputStream.getChannel()|Returns the uniquejava.nio.channels.FileChannel FileChannelobject associated with this file input stream.
|java.io.FileInputStream.getFD()|Returns the FileDescriptor  object  that represents the connection to  the actual file in the file system being  used by this FileInputStream.
|java.io.FileInputStream.read()|Reads a byte of data from this input stream.
|java.io.FileInputStream.read(byte[])|Reads up to b.length bytes of data from this input  stream into an array of bytes.
|java.io.FileInputStream.read(byte[],int,int)|Reads up to len bytes of data from this input stream  into an array of bytes.
|java.io.FileInputStream.skip(long)|Skips over and discards n bytes of data from the  input stream.

*java.io.FileInputStream_Description*

A FileInputStream obtains input bytes from a file in a file system. What files are available depends on the host environment. 

FileInputStream is meant for reading streams of raw bytes such as image data. For reading streams of characters, consider using FileReader. 



*java.io.FileInputStream(File)*

public FileInputStream(java.io.File file)
  throws |java.io.FileNotFoundException|
         
Creates a FileInputStream by opening a connection to an actual file, the file named by the File object file in the file system. A new FileDescriptor object is created to represent 
this file connection. 

First, if there is a security manager, its checkRead method is called with the path represented by the file argument as its argument. 

If the named file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading then a FileNotFoundException is thrown. 

    file - the file to be opened for reading. 

*java.io.FileInputStream(FileDescriptor)*

public FileInputStream(java.io.FileDescriptor fdObj)

Creates a FileInputStream by using the file descriptor fdObj, which represents an existing connection to an actual file in the file system. 

If there is a security manager, its checkRead method is called with the file descriptor fdObj as its argument to see if it's ok to read the file descriptor. If read access is 
denied to the file descriptor a SecurityException is thrown. 

If fdObj is null then a NullPointerException is thrown. 

    fdObj - the file descriptor to be opened for reading. 

*java.io.FileInputStream(String)*

public FileInputStream(java.lang.String name)
  throws |java.io.FileNotFoundException|
         
Creates a FileInputStream by opening a connection to an actual file, the file named by the path name name in the file system. A new FileDescriptor object is created to represent 
this file connection. 

First, if there is a security manager, its checkRead method is called with the name argument as its argument. 

If the named file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading then a FileNotFoundException is thrown. 

    name - the system-dependent file name. 

*java.io.FileInputStream.available()*

public native int available()
  throws |java.io.IOException|
         
Returns the number of bytes that can be read from this file input stream without blocking. 



    Returns: the number of bytes that can be read from this file input stream without blocking. 

*java.io.FileInputStream.close()*

public void close()
  throws |java.io.IOException|
         
Closes this file input stream and releases any system resources associated with the stream. 

If this stream has an associated channel then the channel is closed as well. 



*java.io.FileInputStream.finalize()*

protected void finalize()
  throws |java.io.IOException|
         
Ensures that the close method of this file input stream is called when there are no more references to it. 



*java.io.FileInputStream.getChannel()*

public |java.nio.channels.FileChannel| getChannel()

Returns the unique FileChannel(|java.nio.channels.FileChannel|) object associated with this file input stream. 

The initial </code>position<code>(|java.nio.channels.FileChannel|) of the returned channel will be equal to the number of bytes read from the file so far. Reading bytes from this 
stream will increment the channel's position. Changing the channel's position, either explicitly or by reading, will change this stream's file position. 



    Returns: the file channel associated with this file input stream 

*java.io.FileInputStream.getFD()*

public final |java.io.FileDescriptor| getFD()
  throws |java.io.IOException|
         
Returns the FileDescriptor object that represents the connection to the actual file in the file system being used by this FileInputStream. 



    Returns: the file descriptor object associated with this stream. 

*java.io.FileInputStream.read()*

public native int read()
  throws |java.io.IOException|
         
Reads a byte of data from this input stream. This method blocks if no input is yet available. 



    Returns: the next byte of data, or -1 if the end of the file is reached. 

*java.io.FileInputStream.read(byte[])*

public int read(byte[] b)
  throws |java.io.IOException|
         
Reads up to b.length bytes of data from this input stream into an array of bytes. This method blocks until some input is available. 


    b - the buffer into which the data is read. 

    Returns: the total number of bytes read into the buffer, or -1 if there is no more data because the end of the file has been reached. 

*java.io.FileInputStream.read(byte[],int,int)*

public int read(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Reads up to len bytes of data from this input stream into an array of bytes. This method blocks until some input is available. 


    b - the buffer into which the data is read. 
    off - the start offset of the data. 
    len - the maximum number of bytes read. 

    Returns: the total number of bytes read into the buffer, or -1 if there is no more data because the end of the file has been reached. 

*java.io.FileInputStream.skip(long)*

public native long skip(long n)
  throws |java.io.IOException|
         
Skips over and discards n bytes of data from the input stream. 

The skip method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly 0. If n is negative, an IOException is thrown, even though the skip 
method of the (|java.io.InputStream|) superclass does nothing in this case. The actual number of bytes skipped is returned. 

This method may skip more bytes than are remaining in the backing file. This produces no exception and the number of bytes skipped may include some number of bytes that were 
beyond the EOF of the backing file. Attempting to read from the stream after skipping past the end will result in -1 indicating the end of the file. 


    n - the number of bytes to be skipped. 

    Returns: the actual number of bytes skipped. 



*java.net.Inet6Address* *Inet6Address* This class represents an Internet Protocol version 6 (IPv6) address.

public final class Inet6Address
  extends    |java.net.InetAddress|

|java.net.Inet6Address_Description|
|java.net.Inet6Address_Fields|
|java.net.Inet6Address_Constructors|
|java.net.Inet6Address_Methods|

====================================================================================================================================================================================

*java.net.Inet6Address_Methods*
|java.net.Inet6Address.equals(Object)|Compares this object against the specified object.
|java.net.Inet6Address.getAddress()|Returns the raw IP address of this InetAddress  object.
|java.net.Inet6Address.getByAddress(String,byte[],int)|Create an Inet6Address in the exact manner ofInetAddress#getByAddress(String,byte[])except that the IPv6 scope_id is set to 
|java.net.Inet6Address.getByAddress(String,byte[],NetworkInterface)|Create an Inet6Address in the exact manner ofInetAddress#getByAddress(String,byte[])except that the IPv6 scope_
|java.net.Inet6Address.getHostAddress()|Returns the IP address string in textual presentation.
|java.net.Inet6Address.getScopedInterface()|Returns the scoped interface, if this instance was created with  with a scoped interface.
|java.net.Inet6Address.getScopeId()|Returns the numeric scopeId, if this instance is associated with  an interface.
|java.net.Inet6Address.hashCode()|Returns a hashcode for this IP address.
|java.net.Inet6Address.isAnyLocalAddress()|Utility routine to check if the InetAddress in a wildcard address.
|java.net.Inet6Address.isIPv4CompatibleAddress()|Utility routine to check if the InetAddress is an  IPv4 compatible IPv6 address.
|java.net.Inet6Address.isLinkLocalAddress()|Utility routine to check if the InetAddress is an link local address.
|java.net.Inet6Address.isLoopbackAddress()|Utility routine to check if the InetAddress is a loopback address.
|java.net.Inet6Address.isMCGlobal()|Utility routine to check if the multicast address has global scope.
|java.net.Inet6Address.isMCLinkLocal()|Utility routine to check if the multicast address has link scope.
|java.net.Inet6Address.isMCNodeLocal()|Utility routine to check if the multicast address has node scope.
|java.net.Inet6Address.isMCOrgLocal()|Utility routine to check if the multicast address has organization scope.
|java.net.Inet6Address.isMCSiteLocal()|Utility routine to check if the multicast address has site scope.
|java.net.Inet6Address.isMulticastAddress()|Utility routine to check if the InetAddress is an IP multicast  address.
|java.net.Inet6Address.isSiteLocalAddress()|Utility routine to check if the InetAddress is a site local address.

*java.net.Inet6Address_Description*

This class represents an Internet Protocol version 6 (IPv6) address. Defined by RFC2373: IP Version 6 Addressing Architecture. 

Textual representation of IP addresses 

Textual representation of IPv6 address used as input to methods takes one of the following forms: 

The preferred form is x:x:x:x:x:x:x:x, where the 'x's are the hexadecimal values of the eight 16-bit pieces of the address. This is the full form. For example, 

1080:0:0:0:8:800:200C:417A 

Note that it is not necessary to write the leading zeros in an individual field. However, there must be at least one numeral in every field, except as described below. 

Due to some methods of allocating certain styles of IPv6 addresses, it will be common for addresses to contain long strings of zero bits. In order to make writing addresses 
containing zero bits easier, a special syntax is available to compress the zeros. The use of "::" indicates multiple groups of 16-bits of zeros. The "::" can only appear once in 
an address. The "::" can also be used to compress the leading and/or trailing zeros in an address. For example, 

1080::8:800:200C:417A 

An alternative form that is sometimes more convenient when dealing with a mixed environment of IPv4 and IPv6 nodes is x:x:x:x:x:x:d.d.d.d, where the 'x's are the hexadecimal 
values of the six high-order 16-bit pieces of the address, and the 'd's are the decimal values of the four low-order 8-bit pieces of the standard IPv4 representation address, for 
example, 

::FFFF:129.144.52.38 ::129.144.52.38 

where "::FFFF:d.d.d.d" and "::d.d.d.d" are, respectively, the general forms of an IPv4-mapped IPv6 address and an IPv4-compatible IPv6 address. Note that the IPv4 portion must be 
in the "d.d.d.d" form. The following forms are invalid: 

::FFFF:d.d.d ::FFFF:d.d ::d.d.d ::d.d 

The following form: 

::FFFF:d 

is valid, however it is an unconventional representation of the IPv4-compatible IPv6 address, 

::255.255.0.d 

while "::d" corresponds to the general IPv6 address "0:0:0:0:0:0:0:d". 

For methods that return a textual representation as output value, the full form is used. Inet6Address will return the full form because it is unambiguous when used in combination 
with other textual data. 

Special IPv6 address 

IPv4-mapped address Of the form::ffff:w.x.y.z, this IPv6 address is used to represent an IPv4 address. It allows the native program to use the same address data structure and also 
the same socket when communicating with both IPv4 and IPv6 nodes. 

In InetAddress and Inet6Address, it is used for internal representation; it has no functional role. Java will never return an IPv4-mapped address. These classes can take an 
IPv4-mapped address as input, both in byte array and text representation. However, it will be converted into an IPv4 address. 

Textual representation of IPv6 scoped addresses 

The textual representation of IPv6 addresses as described above can be extended to specify IPv6 scoped addresses. This extension to the basic addressing architecture is described 
in [draft-ietf-ipngwg-scoping-arch-04.txt]. 

Because link-local and site-local addresses are non-global, it is possible that different hosts may have the same destination address and may be reachable through different 
interfaces on the same originating system. In this case, the originating system is said to be connected to multiple zones of the same scope. In order to disambiguate which is the 
intended destination zone, it is possible to append a zone identifier (or scope_id) to an IPv6 address. 

The general format for specifying the scope_id is the following: IPv6-address%scope_id The IPv6-address is a literal IPv6 address as described above. The scope_id refers to an 
interface on the local system, and it can be specified in two ways. As a numeric identifier. This must be a positive integer that identifies the particular interface and scope as 
understood by the system. Usually, the numeric values can be determined through administration tools on the system. Each interface may have multiple values, one for each scope. If 
the scope is unspecified, then the default value used is zero. As a string. This must be the exact string that is returned by (|java.net.NetworkInterface|) for the particular 
interface in question. When an Inet6Address is created in this way, the numeric scope-id is determined at the time the object is created by querying the relevant NetworkInterface. 

Note also, that the numeric scope_id can be retrieved from Inet6Address instances returned from the NetworkInterface class. This can be used to find out the current scope ids 
configured on the system. 



*java.net.Inet6Address.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this object against the specified object. The result is true if and only if the argument is not null and it represents the same IP address as this object. 

Two instances of InetAddress represent the same IP address if the length of the byte arrays returned by getAddress is the same for both, and each of the array components is the 
same for the byte arrays. 


    obj - the object to compare against. 

    Returns: true if the objects are the same; false otherwise. 

*java.net.Inet6Address.getAddress()*

public byte[] getAddress()

Returns the raw IP address of this InetAddress object. The result is in network byte order: the highest order byte of the address is in getAddress()[0]. 



    Returns: the raw IP address of this object. 

*java.net.Inet6Address.getByAddress(String,byte[],int)*

public static |java.net.Inet6Address| getByAddress(
  java.lang.String host,
  byte[] addr,
  int scope_id)
  throws |java.net.UnknownHostException|
         
Create an Inet6Address in the exact manner of (|java.net.InetAddress|) except that the IPv6 scope_id is set to the given numeric value. The scope_id is not checked to determine if 
it corresponds to any interface on the system. See here for a description of IPv6 scoped addresses. 


    host - the specified host 
    addr - the raw IP address in network byte order 
    scope_id - the numeric scope_id for the address. 

    Returns: an Inet6Address object created from the raw IP address. 

*java.net.Inet6Address.getByAddress(String,byte[],NetworkInterface)*

public static |java.net.Inet6Address| getByAddress(
  java.lang.String host,
  byte[] addr,
  java.net.NetworkInterface nif)
  throws |java.net.UnknownHostException|
         
Create an Inet6Address in the exact manner of (|java.net.InetAddress|) except that the IPv6 scope_id is set to the value corresponding to the given interface for the address type 
specified in addr. The call will fail with an UnknownHostException if the given interface does not have a numeric scope_id assigned for the given address type (eg. link-local or 
site-local). See here for a description of IPv6 scoped addresses. 


    host - the specified host 
    addr - the raw IP address in network byte order 
    nif - an interface this address must be associated with. 

    Returns: an Inet6Address object created from the raw IP address. 

*java.net.Inet6Address.getHostAddress()*

public |java.lang.String| getHostAddress()

Returns the IP address string in textual presentation. If the instance was created specifying a scope identifier then the scope id is appended to the IP address preceded by a "%" 
(per-cent) character. This can be either a numeric value or a string, depending on which was used to createthe instance. 



    Returns: the raw IP address in a string format. 

*java.net.Inet6Address.getScopedInterface()*

public |java.net.NetworkInterface| getScopedInterface()

Returns the scoped interface, if this instance was created with with a scoped interface. 



    Returns: the scoped interface, or null if not set. 

*java.net.Inet6Address.getScopeId()*

public int getScopeId()

Returns the numeric scopeId, if this instance is associated with an interface. If no scoped_id is set, the returned value is zero. 



    Returns: the scopeId, or zero if not set. 

*java.net.Inet6Address.hashCode()*

public int hashCode()

Returns a hashcode for this IP address. 



    Returns: a hash code value for this IP address. 

*java.net.Inet6Address.isAnyLocalAddress()*

public boolean isAnyLocalAddress()

Utility routine to check if the InetAddress in a wildcard address. 



    Returns: a boolean indicating if the Inetaddress is a wildcard address. 

*java.net.Inet6Address.isIPv4CompatibleAddress()*

public boolean isIPv4CompatibleAddress()

Utility routine to check if the InetAddress is an IPv4 compatible IPv6 address. 



    Returns: a boolean indicating if the InetAddress is an IPv4 compatible IPv6 address; or false if address is IPv4 address. 

*java.net.Inet6Address.isLinkLocalAddress()*

public boolean isLinkLocalAddress()

Utility routine to check if the InetAddress is an link local address. 



    Returns: a boolean indicating if the InetAddress is a link local address; or false if address is not a link local unicast address. 

*java.net.Inet6Address.isLoopbackAddress()*

public boolean isLoopbackAddress()

Utility routine to check if the InetAddress is a loopback address. 



    Returns: a boolean indicating if the InetAddress is a loopback address; or false otherwise. 

*java.net.Inet6Address.isMCGlobal()*

public boolean isMCGlobal()

Utility routine to check if the multicast address has global scope. 



    Returns: a boolean indicating if the address has is a multicast address of global scope, false if it is not of global scope or it is not a multicast address 

*java.net.Inet6Address.isMCLinkLocal()*

public boolean isMCLinkLocal()

Utility routine to check if the multicast address has link scope. 



    Returns: a boolean indicating if the address has is a multicast address of link-local scope, false if it is not of link-local scope or it is not a multicast address 

*java.net.Inet6Address.isMCNodeLocal()*

public boolean isMCNodeLocal()

Utility routine to check if the multicast address has node scope. 



    Returns: a boolean indicating if the address has is a multicast address of node-local scope, false if it is not of node-local scope or it is not a multicast address 

*java.net.Inet6Address.isMCOrgLocal()*

public boolean isMCOrgLocal()

Utility routine to check if the multicast address has organization scope. 



    Returns: a boolean indicating if the address has is a multicast address of organization-local scope, false if it is not of organization-local scope or it is not a multicast address 

*java.net.Inet6Address.isMCSiteLocal()*

public boolean isMCSiteLocal()

Utility routine to check if the multicast address has site scope. 



    Returns: a boolean indicating if the address has is a multicast address of site-local scope, false if it is not of site-local scope or it is not a multicast address 

*java.net.Inet6Address.isMulticastAddress()*

public boolean isMulticastAddress()

Utility routine to check if the InetAddress is an IP multicast address. 11111111 at the start of the address identifies the address as being a multicast address. 



    Returns: a boolean indicating if the InetAddress is an IP multicast address 

*java.net.Inet6Address.isSiteLocalAddress()*

public boolean isSiteLocalAddress()

Utility routine to check if the InetAddress is a site local address. 



    Returns: a boolean indicating if the InetAddress is a site local address; or false if address is not a site local unicast address. 



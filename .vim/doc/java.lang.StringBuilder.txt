*java.lang.StringBuilder* *StringBuilder* A mutable sequence of characters.

public final class StringBuilder
  extends    |java.lang.AbstractStringBuilder|
  implements |java.io.Serializable|
             |java.lang.CharSequence|

|java.lang.StringBuilder_Description|
|java.lang.StringBuilder_Fields|
|java.lang.StringBuilder_Constructors|
|java.lang.StringBuilder_Methods|

================================================================================

*java.lang.StringBuilder_Constructors*
|java.lang.StringBuilder()|Constructs a string builder with no characters in it
|java.lang.StringBuilder(CharSequence)|Constructs a string builder that contain
|java.lang.StringBuilder(int)|Constructs a string builder with no characters in
|java.lang.StringBuilder(String)|Constructs a string builder initialized to the

*java.lang.StringBuilder_Methods*
|java.lang.StringBuilder.append(boolean)|
|java.lang.StringBuilder.append(char)|
|java.lang.StringBuilder.append(char[])|
|java.lang.StringBuilder.append(char[],int,int)|
|java.lang.StringBuilder.append(CharSequence)|
|java.lang.StringBuilder.append(CharSequence,int,int)|
|java.lang.StringBuilder.append(double)|
|java.lang.StringBuilder.append(float)|
|java.lang.StringBuilder.append(int)|
|java.lang.StringBuilder.append(long)|
|java.lang.StringBuilder.append(Object)|
|java.lang.StringBuilder.append(String)|
|java.lang.StringBuilder.append(StringBuffer)|Appends the specified StringBuffe
|java.lang.StringBuilder.appendCodePoint(int)|
|java.lang.StringBuilder.delete(int,int)|
|java.lang.StringBuilder.deleteCharAt(int)|
|java.lang.StringBuilder.indexOf(String)|
|java.lang.StringBuilder.indexOf(String,int)|
|java.lang.StringBuilder.insert(int,boolean)|
|java.lang.StringBuilder.insert(int,char)|
|java.lang.StringBuilder.insert(int,char[])|
|java.lang.StringBuilder.insert(int,char[],int,int)|
|java.lang.StringBuilder.insert(int,CharSequence)|
|java.lang.StringBuilder.insert(int,CharSequence,int,int)|
|java.lang.StringBuilder.insert(int,double)|
|java.lang.StringBuilder.insert(int,float)|
|java.lang.StringBuilder.insert(int,int)|
|java.lang.StringBuilder.insert(int,long)|
|java.lang.StringBuilder.insert(int,Object)|
|java.lang.StringBuilder.insert(int,String)|
|java.lang.StringBuilder.lastIndexOf(String)|
|java.lang.StringBuilder.lastIndexOf(String,int)|
|java.lang.StringBuilder.replace(int,int,String)|
|java.lang.StringBuilder.reverse()|
|java.lang.StringBuilder.toString()|

*java.lang.StringBuilder_Description*

A mutable sequence of characters. This class provides an API compatible with 
StringBuffer, but with no guarantee of synchronization. This class is designed 
for use as a drop-in replacement for StringBuffer in places where the string 
buffer was being used by a single thread (as is generally the case). Where 
possible, it is recommended that this class be used in preference to 
StringBuffer as it will be faster under most implementations. 

The principal operations on a StringBuilder are the append and insert methods, 
which are overloaded so as to accept data of any type. Each effectively 
converts a given datum to a string and then appends or inserts the characters 
of that string to the string builder. The append method always adds these 
characters at the end of the builder; the insert method adds the characters at 
a specified point. 

For example, if z refers to a string builder object whose current contents are 
"start", then the method call z.append("le") would cause the string builder to 
contain "startle", whereas z.insert(4, "le") would alter the string builder to 
contain "starlet". 

In general, if sb refers to an instance of a StringBuilder, then sb.append(x) 
has the same effect as sb.insert(sb.length(),x). 

Every string builder has a capacity. As long as the length of the character 
sequence contained in the string builder does not exceed the capacity, it is 
not necessary to allocate a new internal buffer. If the internal buffer 
overflows, it is automatically made larger. 

Instances of StringBuilder are not safe for use by multiple threads. If such 
synchronization is required then it is recommended that 
(|java.lang.StringBuffer|) be used. 


*java.lang.StringBuilder()*

public StringBuilder()

Constructs a string builder with no characters in it and an initial capacity of 
16 characters. 


*java.lang.StringBuilder(CharSequence)*

public StringBuilder(java.lang.CharSequence seq)

Constructs a string builder that contains the same characters as the specified 
CharSequence. The initial capacity of the string builder is 16 plus the length 
of the CharSequence argument. 

    seq - the sequence to copy. 

*java.lang.StringBuilder(int)*

public StringBuilder(int capacity)

Constructs a string builder with no characters in it and an initial capacity 
specified by the capacity argument. 

    capacity - the initial capacity. 

*java.lang.StringBuilder(String)*

public StringBuilder(java.lang.String str)

Constructs a string builder initialized to the contents of the specified 
string. The initial capacity of the string builder is 16 plus the length of the 
string argument. 

    str - the initial contents of the buffer. 

*java.lang.StringBuilder.append(boolean)*

public |java.lang.StringBuilder| append(boolean b)




*java.lang.StringBuilder.append(char)*

public |java.lang.StringBuilder| append(char c)




*java.lang.StringBuilder.append(char[])*

public |java.lang.StringBuilder| append(char[] str)




*java.lang.StringBuilder.append(char[],int,int)*

public |java.lang.StringBuilder| append(
  char[] str,
  int offset,
  int len)




*java.lang.StringBuilder.append(CharSequence)*

public |java.lang.StringBuilder| append(java.lang.CharSequence s)




*java.lang.StringBuilder.append(CharSequence,int,int)*

public |java.lang.StringBuilder| append(
  java.lang.CharSequence s,
  int start,
  int end)




*java.lang.StringBuilder.append(double)*

public |java.lang.StringBuilder| append(double d)




*java.lang.StringBuilder.append(float)*

public |java.lang.StringBuilder| append(float f)




*java.lang.StringBuilder.append(int)*

public |java.lang.StringBuilder| append(int i)




*java.lang.StringBuilder.append(long)*

public |java.lang.StringBuilder| append(long lng)




*java.lang.StringBuilder.append(Object)*

public |java.lang.StringBuilder| append(java.lang.Object obj)




*java.lang.StringBuilder.append(String)*

public |java.lang.StringBuilder| append(java.lang.String str)




*java.lang.StringBuilder.append(StringBuffer)*

public |java.lang.StringBuilder| append(java.lang.StringBuffer sb)

Appends the specified StringBuffer to this sequence. 

The characters of the StringBuffer argument are appended, in order, to this 
sequence, increasing the length of this sequence by the length of the argument. 
If sb is null, then the four characters "null" are appended to this sequence. 

Let n be the length of this character sequence just prior to execution of the 
append method. Then the character at index k in the new character sequence is 
equal to the character at index k in the old character sequence, if k is less 
than n; otherwise, it is equal to the character at index k-n in the argument 
sb. 

    sb - the StringBuffer to append. 

    Returns: a reference to this object. 
*java.lang.StringBuilder.appendCodePoint(int)*

public |java.lang.StringBuilder| appendCodePoint(int codePoint)




*java.lang.StringBuilder.delete(int,int)*

public |java.lang.StringBuilder| delete(
  int start,
  int end)




*java.lang.StringBuilder.deleteCharAt(int)*

public |java.lang.StringBuilder| deleteCharAt(int index)




*java.lang.StringBuilder.indexOf(String)*

public int indexOf(java.lang.String str)




*java.lang.StringBuilder.indexOf(String,int)*

public int indexOf(
  java.lang.String str,
  int fromIndex)




*java.lang.StringBuilder.insert(int,boolean)*

public |java.lang.StringBuilder| insert(
  int offset,
  boolean b)




*java.lang.StringBuilder.insert(int,char)*

public |java.lang.StringBuilder| insert(
  int offset,
  char c)




*java.lang.StringBuilder.insert(int,char[])*

public |java.lang.StringBuilder| insert(
  int offset,
  char[] str)




*java.lang.StringBuilder.insert(int,char[],int,int)*

public |java.lang.StringBuilder| insert(
  int index,
  char[] str,
  int offset,
  int len)




*java.lang.StringBuilder.insert(int,CharSequence)*

public |java.lang.StringBuilder| insert(
  int dstOffset,
  java.lang.CharSequence s)




*java.lang.StringBuilder.insert(int,CharSequence,int,int)*

public |java.lang.StringBuilder| insert(
  int dstOffset,
  java.lang.CharSequence s,
  int start,
  int end)




*java.lang.StringBuilder.insert(int,double)*

public |java.lang.StringBuilder| insert(
  int offset,
  double d)




*java.lang.StringBuilder.insert(int,float)*

public |java.lang.StringBuilder| insert(
  int offset,
  float f)




*java.lang.StringBuilder.insert(int,int)*

public |java.lang.StringBuilder| insert(
  int offset,
  int i)




*java.lang.StringBuilder.insert(int,long)*

public |java.lang.StringBuilder| insert(
  int offset,
  long l)




*java.lang.StringBuilder.insert(int,Object)*

public |java.lang.StringBuilder| insert(
  int offset,
  java.lang.Object obj)




*java.lang.StringBuilder.insert(int,String)*

public |java.lang.StringBuilder| insert(
  int offset,
  java.lang.String str)




*java.lang.StringBuilder.lastIndexOf(String)*

public int lastIndexOf(java.lang.String str)




*java.lang.StringBuilder.lastIndexOf(String,int)*

public int lastIndexOf(
  java.lang.String str,
  int fromIndex)




*java.lang.StringBuilder.replace(int,int,String)*

public |java.lang.StringBuilder| replace(
  int start,
  int end,
  java.lang.String str)




*java.lang.StringBuilder.reverse()*

public |java.lang.StringBuilder| reverse()




*java.lang.StringBuilder.toString()*

public |java.lang.String| toString()






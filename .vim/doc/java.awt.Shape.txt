*java.awt.Shape* *Shape* The Shape interface provides definitions for objects 
 

public interface interface Shape


|java.awt.Shape_Description|
|java.awt.Shape_Fields|
|java.awt.Shape_Constructors|
|java.awt.Shape_Methods|

================================================================================

*java.awt.Shape_Methods*
|java.awt.Shape.contains(double,double)|Tests if the specified coordinates are 
|java.awt.Shape.contains(double,double,double,double)|Tests if the interior of 
|java.awt.Shape.contains(Point2D)|Tests if a specifiedPoint2Dis inside the boun
|java.awt.Shape.contains(Rectangle2D)|Tests if the interior of the Shape entire
|java.awt.Shape.getBounds()|Returns an integerRectanglethat completely encloses
|java.awt.Shape.getBounds2D()|Returns a high precision and more accurate boundi
|java.awt.Shape.getPathIterator(AffineTransform)|Returns an iterator object tha
|java.awt.Shape.getPathIterator(AffineTransform,double)|Returns an iterator obj
|java.awt.Shape.intersects(double,double,double,double)|Tests if the interior o
|java.awt.Shape.intersects(Rectangle2D)|Tests if the interior of the Shape inte

*java.awt.Shape_Description*

The Shape interface provides definitions for objects that represent some form 
of geometric shape. The Shape is described by a (|java.awt.geom.PathIterator|) 
object, which can express the outline of the Shape as well as a rule for 
determining how the outline divides the 2D plane into interior and exterior 
points. Each Shape object provides callbacks to get the bounding box of the 
geometry, determine whether points or rectangles lie partly or entirely within 
the interior of the Shape, and retrieve a PathIterator object that describes 
the trajectory path of the Shape outline. 

Definition of insideness: A point is considered to lie inside a Shape if and 
only if: 

it lies completely inside theShape boundary or 

it lies exactly on the Shape boundary and the space immediately adjacent to the 
point in the increasing X direction is entirely inside the boundary or 

it lies exactly on a horizontal boundary segment and the space immediately 
adjacent to the point in the increasing Y direction is inside the boundary. 

The contains and intersects methods consider the interior of a Shape to be the 
area it encloses as if it were filled. This means that these methods consider 
unclosed shapes to be implicitly closed for the purpose of determining if a 
shape contains or intersects a rectangle or if a shape contains a point. 


*java.awt.Shape.contains(double,double)*

public boolean contains(
  double x,
  double y)

Tests if the specified coordinates are inside the boundary of the Shape. 

    x - the specified x coordinate 
    y - the specified y coordinate 

    Returns: true if the specified coordinates are inside the Shape boundary; false 
             otherwise. 
*java.awt.Shape.contains(double,double,double,double)*

public boolean contains(
  double x,
  double y,
  double w,
  double h)

Tests if the interior of the Shape entirely contains the specified rectangular 
area. All coordinates that lie inside the rectangular area must lie within the 
Shape for the entire rectanglar area to be considered contained within the 
Shape. 

This method might conservatively return false when: 

the intersect method returns true and 

the calculations to determine whether or not the Shape entirely contains the 
rectangular area are prohibitively expensive. 

This means that this method might return false even though the Shape contains 
the rectangular area. The Area class can be used to perform more accurate 
computations of geometric intersection for any Shape object if a more precise 
answer is required. 

    x - the x coordinate of the specified rectangular area 
    y - the y coordinate of the specified rectangular area 
    w - the width of the specified rectangular area 
    h - the height of the specified rectangular area 

    Returns: true if the interior of the Shape entirely contains the specified rectangular 
             area; false otherwise or, if the Shape contains the rectangular 
             area and the intersects method returns true and the containment 
             calculations would be too expensive to perform. 
*java.awt.Shape.contains(Point2D)*

public boolean contains(java.awt.geom.Point2D p)

Tests if a specified (|java.awt.geom.Point2D|) is inside the boundary of the 
Shape. 

    p - a specified Point2D 

    Returns: true if the specified Point2D is inside the boundary of the Shape; false 
             otherwise. 
*java.awt.Shape.contains(Rectangle2D)*

public boolean contains(java.awt.geom.Rectangle2D r)

Tests if the interior of the Shape entirely contains the specified Rectangle2D. 
This method might conservatively return false when: 

the intersect method returns true and 

the calculations to determine whether or not the Shape entirely contains the 
Rectangle2D are prohibitively expensive. 

This means that this method might return false even though the Shape contains 
the Rectangle2D. The Area class can be used to perform more accurate 
computations of geometric intersection for any Shape object if a more precise 
answer is required. 

    r - The specified Rectangle2D 

    Returns: true if the interior of the Shape entirely contains the Rectangle2D; false 
             otherwise or, if the Shape contains the Rectangle2D and the 
             intersects method returns true and the containment calculations 
             would be too expensive to perform. 
*java.awt.Shape.getBounds()*

public |java.awt.Rectangle| getBounds()

Returns an integer (|java.awt.Rectangle|) that completely encloses the Shape. 
Note that there is no guarantee that the returned Rectangle is the smallest 
bounding box that encloses the Shape, only that the Shape lies entirely within 
the indicated Rectangle. The returned Rectangle might also fail to completely 
enclose the Shape if the Shape overflows the limited range of the integer data 
type. The getBounds2D method generally returns a tighter bounding box due to 
its greater flexibility in representation. 


    Returns: an integer Rectangle that completely encloses the Shape. 
*java.awt.Shape.getBounds2D()*

public |java.awt.geom.Rectangle2D| getBounds2D()

Returns a high precision and more accurate bounding box of the Shape than the 
getBounds method. Note that there is no guarantee that the returned 
(|java.awt.geom.Rectangle2D|) is the smallest bounding box that encloses the 
Shape, only that the Shape lies entirely within the indicated Rectangle2D. The 
bounding box returned by this method is usually tighter than that returned by 
the getBounds method and never fails due to overflow problems since the return 
value can be an instance of the Rectangle2D that uses double precision values 
to store the dimensions. 


    Returns: an instance of Rectangle2D that is a high-precision bounding box of the Shape. 
*java.awt.Shape.getPathIterator(AffineTransform)*

public |java.awt.geom.PathIterator| getPathIterator(java.awt.geom.AffineTransform at)

Returns an iterator object that iterates along the Shape boundary and provides 
access to the geometry of the Shape outline. If an optional 
(|java.awt.geom.AffineTransform|) is specified, the coordinates returned in the 
iteration are transformed accordingly. 

Each call to this method returns a fresh PathIterator object that traverses the 
geometry of the Shape object independently from any other PathIterator objects 
in use at the same time. 

It is recommended, but not guaranteed, that objects implementing the Shape 
interface isolate iterations that are in process from any changes that might 
occur to the original object's geometry during such iterations. 

Before using a particular implementation of the Shape interface in more than 
one thread simultaneously, refer to its documentation to verify that it 
guarantees that iterations are isolated from modifications. 

    at - an optional AffineTransform to be applied to the coordinates as they are 
       returned in the iteration, or null if untransformed coordinates are 
       desired 

    Returns: a new PathIterator object, which independently traverses the geometry of the 
             Shape. 
*java.awt.Shape.getPathIterator(AffineTransform,double)*

public |java.awt.geom.PathIterator| getPathIterator(
  java.awt.geom.AffineTransform at,
  double flatness)

Returns an iterator object that iterates along the Shape boundary and provides 
access to a flattened view of the Shape outline geometry. 

Only SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point types are returned by the 
iterator. 

If an optional AffineTransform is specified, the coordinates returned in the 
iteration are transformed accordingly. 

The amount of subdivision of the curved segments is controlled by the flatness 
parameter, which specifies the maximum distance that any point on the 
unflattened transformed curve can deviate from the returned flattened path 
segments. Note that a limit on the accuracy of the flattened path might be 
silently imposed, causing very small flattening parameters to be treated as 
larger values. This limit, if there is one, is defined by the particular 
implementation that is used. 

Each call to this method returns a fresh PathIterator object that traverses the 
Shape object geometry independently from any other PathIterator objects in use 
at the same time. 

It is recommended, but not guaranteed, that objects implementing the Shape 
interface isolate iterations that are in process from any changes that might 
occur to the original object's geometry during such iterations. 

Before using a particular implementation of this interface in more than one 
thread simultaneously, refer to its documentation to verify that it guarantees 
that iterations are isolated from modifications. 

    at - an optional AffineTransform to be applied to the coordinates as they are 
       returned in the iteration, or null if untransformed coordinates are 
       desired 
    flatness - the maximum distance that the line segments used to approximate the curved 
       segments are allowed to deviate from any point on the original curve 

    Returns: a new PathIterator that independently traverses the Shape geometry. 
*java.awt.Shape.intersects(double,double,double,double)*

public boolean intersects(
  double x,
  double y,
  double w,
  double h)

Tests if the interior of the Shape intersects the interior of a specified 
rectangular area. The rectangular area is considered to intersect the Shape if 
any point is contained in both the interior of the Shape and the specified 
rectangular area. 

This method might conservatively return true when: 

there is a high probability that the rectangular area and the Shape intersect, 
but 

the calculations to accurately determine this intersection are prohibitively 
expensive. 

This means that this method might return true even though the rectangular area 
does not intersect the Shape. The Area(|java.awt.geom.Area|) class can be used 
to perform more accurate computations of geometric intersection for any Shape 
object if a more precise answer is required. 

    x - the x coordinate of the specified rectangular area 
    y - the y coordinate of the specified rectangular area 
    w - the width of the specified rectangular area 
    h - the height of the specified rectangular area 

    Returns: true if the interior of the Shape and the interior of the rectangular area 
             intersect, or are both highly likely to intersect and intersection 
             calculations would be too expensive to perform; false otherwise. 
*java.awt.Shape.intersects(Rectangle2D)*

public boolean intersects(java.awt.geom.Rectangle2D r)

Tests if the interior of the Shape intersects the interior of a specified 
Rectangle2D. This method might conservatively return true when: 

there is a high probability that the Rectangle2D and the Shape intersect, but 

the calculations to accurately determine this intersection are prohibitively 
expensive. 

This means that this method might return true even though the Rectangle2D does 
not intersect the Shape. 

    r - the specified Rectangle2D 

    Returns: true if the interior of the Shape and the interior of the specified Rectangle2D 
             intersect, or are both highly likely to intersect and intersection 
             calculations would be too expensive to perform; false otherwise. 


*java.awt.image.RescaleOp* *RescaleOp* This class performs a pixel-by-pixel rescaling of the data in the
 source image by multiplying the sample values for each pixel by a scale
 f

public class RescaleOp
  extends    |java.lang.Object|
  implements |java.awt.image.BufferedImageOp|
             |java.awt.image.RasterOp|

|java.awt.image.RescaleOp_Description|
|java.awt.image.RescaleOp_Fields|
|java.awt.image.RescaleOp_Constructors|
|java.awt.image.RescaleOp_Methods|

====================================================================================================================================================================================

*java.awt.image.RescaleOp_Constructors*
|java.awt.image.RescaleOp(float[],float[],RenderingHints)|Constructs a new RescaleOp with the desired scale factors  and offsets.
|java.awt.image.RescaleOp(float,float,RenderingHints)|Constructs a new RescaleOp with the desired scale factor  and offset.

*java.awt.image.RescaleOp_Methods*
|java.awt.image.RescaleOp.createCompatibleDestImage(BufferedImage,ColorModel)|Creates a zeroed destination image with the correct size and number of  bands.
|java.awt.image.RescaleOp.createCompatibleDestRaster(Raster)|Creates a zeroed-destination Raster with the correct   size and number of bands, given this source.
|java.awt.image.RescaleOp.filter(BufferedImage,BufferedImage)|Rescales the source BufferedImage.
|java.awt.image.RescaleOp.filter(Raster,WritableRaster)|Rescales the pixel data in the source Raster.
|java.awt.image.RescaleOp.getBounds2D(BufferedImage)|Returns the bounding box of the rescaled destination image.
|java.awt.image.RescaleOp.getBounds2D(Raster)|Returns the bounding box of the rescaled destination Raster.
|java.awt.image.RescaleOp.getNumFactors()|Returns the number of scaling factors and offsets used in this  RescaleOp.
|java.awt.image.RescaleOp.getOffsets(float[])|Returns the offsets in the given array.
|java.awt.image.RescaleOp.getPoint2D(Point2D,Point2D)|Returns the location of the destination point given a  point in the source.
|java.awt.image.RescaleOp.getRenderingHints()|Returns the rendering hints for this op.
|java.awt.image.RescaleOp.getScaleFactors(float[])|Returns the scale factors in the given array.

*java.awt.image.RescaleOp_Description*

This class performs a pixel-by-pixel rescaling of the data in the source image by multiplying the sample values for each pixel by a scale factor and then adding an offset. The 
scaled sample values are clipped to the minimum/maximum representable in the destination image. 

The pseudo code for the rescaling operation is as follows: 

for each pixel from Source object { for each band/component of the pixel { dstElement = (srcElement*scaleFactor) + offset } } 

For Rasters, rescaling operates on bands. The number of sets of scaling constants may be one, in which case the same constants are applied to all bands, or it must equal the 
number of Source Raster bands. 

For BufferedImages, rescaling operates on color and alpha components. The number of sets of scaling constants may be one, in which case the same constants are applied to all color 
(but not alpha) components. Otherwise, the number of sets of scaling constants may equal the number of Source color components, in which case no rescaling of the alpha component 
(if present) is performed. If neither of these cases apply, the number of sets of scaling constants must equal the number of Source color components plus alpha components, in 
which case all color and alpha components are rescaled. 

BufferedImage sources with premultiplied alpha data are treated in the same manner as non-premultiplied images for purposes of rescaling. That is, the rescaling is done per band 
on the raw data of the BufferedImage source without regard to whether the data is premultiplied. If a color conversion is required to the destination ColorModel, the premultiplied 
state of both source and destination will be taken into account for this step. 

Images with an IndexColorModel cannot be rescaled. 

If a RenderingHints object is specified in the constructor, the color rendering hint and the dithering hint may be used when color conversion is required. 

Note that in-place operation is allowed (i.e. the source and destination can be the same object). 



*java.awt.image.RescaleOp(float[],float[],RenderingHints)*

public RescaleOp(
  float[] scaleFactors,
  float[] offsets,
  java.awt.RenderingHints hints)

Constructs a new RescaleOp with the desired scale factors and offsets. The length of the scaleFactor and offset arrays must meet the restrictions stated in the class comments 
above. The RenderingHints argument may be null. 

    scaleFactors - the specified scale factors 
    offsets - the specified offsets 
    hints - the specified RenderingHints, or null 

*java.awt.image.RescaleOp(float,float,RenderingHints)*

public RescaleOp(
  float scaleFactor,
  float offset,
  java.awt.RenderingHints hints)

Constructs a new RescaleOp with the desired scale factor and offset. The scaleFactor and offset will be applied to all bands in a source Raster and to all color (but not alpha) 
components in a BufferedImage. The RenderingHints argument may be null. 

    scaleFactor - the specified scale factor 
    offset - the specified offset 
    hints - the specified RenderingHints, or null 

*java.awt.image.RescaleOp.createCompatibleDestImage(BufferedImage,ColorModel)*

public |java.awt.image.BufferedImage| createCompatibleDestImage(
  java.awt.image.BufferedImage src,
  java.awt.image.ColorModel destCM)

Creates a zeroed destination image with the correct size and number of bands. 


    src - Source image for the filter operation. 
    destCM - ColorModel of the destination. If null, the ColorModel of the source will be used. 

    Returns: the zeroed-destination image. 

*java.awt.image.RescaleOp.createCompatibleDestRaster(Raster)*

public |java.awt.image.WritableRaster| createCompatibleDestRaster(java.awt.image.Raster src)

Creates a zeroed-destination Raster with the correct size and number of bands, given this source. 


    src - the source Raster 

    Returns: the zeroed-destination Raster. 

*java.awt.image.RescaleOp.filter(BufferedImage,BufferedImage)*

public final |java.awt.image.BufferedImage| filter(
  java.awt.image.BufferedImage src,
  java.awt.image.BufferedImage dst)

Rescales the source BufferedImage. If the color model in the source image is not the same as that in the destination image, the pixels will be converted in the destination. If the 
destination image is null, a BufferedImage will be created with the source ColorModel. An IllegalArgumentException may be thrown if the number of scaling factors/offsets in this 
object does not meet the restrictions stated in the class comments above, or if the source image has an IndexColorModel. 


    src - the BufferedImage to be filtered 
    dst - the destination for the filtering operation or null 

    Returns: the filtered BufferedImage. 

*java.awt.image.RescaleOp.filter(Raster,WritableRaster)*

public final |java.awt.image.WritableRaster| filter(
  java.awt.image.Raster src,
  java.awt.image.WritableRaster dst)

Rescales the pixel data in the source Raster. If the destination Raster is null, a new Raster will be created. The source and destination must have the same number of bands. 
Otherwise, an IllegalArgumentException is thrown. Note that the number of scaling factors/offsets in this object must meet the restrictions stated in the class comments above. 
Otherwise, an IllegalArgumentException is thrown. 


    src - the Raster to be filtered 
    dst - the destination for the filtering operation or null 

    Returns: the filtered WritableRaster. 

*java.awt.image.RescaleOp.getBounds2D(BufferedImage)*

public final |java.awt.geom.Rectangle2D| getBounds2D(java.awt.image.BufferedImage src)

Returns the bounding box of the rescaled destination image. Since this is not a geometric operation, the bounding box does not change. 



*java.awt.image.RescaleOp.getBounds2D(Raster)*

public final |java.awt.geom.Rectangle2D| getBounds2D(java.awt.image.Raster src)

Returns the bounding box of the rescaled destination Raster. Since this is not a geometric operation, the bounding box does not change. 


    src - the rescaled destination Raster 

    Returns: the bounds of the specified Raster. 

*java.awt.image.RescaleOp.getNumFactors()*

public final int getNumFactors()

Returns the number of scaling factors and offsets used in this RescaleOp. 



    Returns: the number of scaling factors and offsets of this RescaleOp. 

*java.awt.image.RescaleOp.getOffsets(float[])*

public final float[] getOffsets(float[] offsets)

Returns the offsets in the given array. The array is also returned for convenience. If offsets is null, a new array will be allocated. 


    offsets - the array to contain the offsets of this RescaleOp 

    Returns: the offsets of this RescaleOp. 

*java.awt.image.RescaleOp.getPoint2D(Point2D,Point2D)*

public final |java.awt.geom.Point2D| getPoint2D(
  java.awt.geom.Point2D srcPt,
  java.awt.geom.Point2D dstPt)

Returns the location of the destination point given a point in the source. If dstPt is non-null, it will be used to hold the return value. Since this is not a geometric operation, 
the srcPt will equal the dstPt. 


    srcPt - a point in the source image 
    dstPt - the destination point or null 

    Returns: the location of the destination point. 

*java.awt.image.RescaleOp.getRenderingHints()*

public final |java.awt.RenderingHints| getRenderingHints()

Returns the rendering hints for this op. 



    Returns: the rendering hints of this RescaleOp. 

*java.awt.image.RescaleOp.getScaleFactors(float[])*

public final float[] getScaleFactors(float[] scaleFactors)

Returns the scale factors in the given array. The array is also returned for convenience. If scaleFactors is null, a new array will be allocated. 


    scaleFactors - the array to contain the scale factors of this RescaleOp 

    Returns: the scale factors of this RescaleOp. 



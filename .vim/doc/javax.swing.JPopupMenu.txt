*javax.swing.JPopupMenu* *JPopupMenu* An implementation of a popup menu -- a sma

public class JPopupMenu
  extends    |javax.swing.JComponent|
  implements |javax.accessibility.Accessible|
             |javax.swing.MenuElement|

|javax.swing.JPopupMenu_Description|
|javax.swing.JPopupMenu_Fields|
|javax.swing.JPopupMenu_Constructors|
|javax.swing.JPopupMenu_Methods|

================================================================================

*javax.swing.JPopupMenu_Constructors*
|javax.swing.JPopupMenu()|Constructs a JPopupMenu without an "invoker".
|javax.swing.JPopupMenu(String)|Constructs a JPopupMenu with the specified titl

*javax.swing.JPopupMenu_Methods*
|javax.swing.JPopupMenu.add(Action)|Appends a new menu item to the end of the m
|javax.swing.JPopupMenu.add(JMenuItem)|Appends the specified menu item to the e
|javax.swing.JPopupMenu.add(String)|Creates a new menu item with the specified 
|javax.swing.JPopupMenu.addMenuKeyListener(MenuKeyListener)|Adds a MenuKeyListe
|javax.swing.JPopupMenu.addPopupMenuListener(PopupMenuListener)|Adds a PopupMen
|javax.swing.JPopupMenu.addSeparator()|Appends a new separator at the end of th
|javax.swing.JPopupMenu.createActionChangeListener(JMenuItem)|Returns a properl
|javax.swing.JPopupMenu.createActionComponent(Action)|Factory method which crea
|javax.swing.JPopupMenu.firePopupMenuCanceled()|Notifies PopupMenuListeners tha
|javax.swing.JPopupMenu.firePopupMenuWillBecomeInvisible()|Notifies PopupMenuLi
|javax.swing.JPopupMenu.firePopupMenuWillBecomeVisible()|Notifies PopupMenuList
|javax.swing.JPopupMenu.getAccessibleContext()|Gets the AccessibleContext assoc
|javax.swing.JPopupMenu.getComponent()|Returns this JPopupMenu component.
|javax.swing.JPopupMenu.getComponentAtIndex(int)|Returns the component at the s
|javax.swing.JPopupMenu.getComponentIndex(Component)|Returns the index of the s
|javax.swing.JPopupMenu.getDefaultLightWeightPopupEnabled()|Gets the defaultLig
|javax.swing.JPopupMenu.getInvoker()|Returns the component which is the 'invoke
|javax.swing.JPopupMenu.getLabel()|Returns the popup menu's label
|javax.swing.JPopupMenu.getMargin()|Returns the margin, in pixels, between the 
|javax.swing.JPopupMenu.getMenuKeyListeners()|Returns an array of all the MenuK
|javax.swing.JPopupMenu.getPopupMenuListeners()|Returns an array of all the Pop
|javax.swing.JPopupMenu.getSelectionModel()|Returns the model object that handl
|javax.swing.JPopupMenu.getSubElements()|Returns an array of MenuElements conta
|javax.swing.JPopupMenu.getUI()|Returns the look and feel (Lobject that renders
|javax.swing.JPopupMenu.getUIClassID()|Returns the name of the Lclass that rend
|javax.swing.JPopupMenu.insert(Action,int)|Inserts a menu item for the specifie
|javax.swing.JPopupMenu.insert(Component,int)|Inserts the specified component i
|javax.swing.JPopupMenu.isBorderPainted()|Checks whether the border should be p
|javax.swing.JPopupMenu.isLightWeightPopupEnabled()|Gets the lightWeightPopupEn
|javax.swing.JPopupMenu.isPopupTrigger(MouseEvent)|Returns true if the MouseEve
|javax.swing.JPopupMenu.isVisible()|Returns true if the popup menu is visible (
|javax.swing.JPopupMenu.menuSelectionChanged(boolean)|Messaged when the menubar
|javax.swing.JPopupMenu.pack()|Lays out the container so that it uses the minim
|javax.swing.JPopupMenu.paintBorder(Graphics)|Paints the popup menu's border if
|javax.swing.JPopupMenu.paramString()|Returns a string representation of this J
|javax.swing.JPopupMenu.processFocusEvent(FocusEvent)|
|javax.swing.JPopupMenu.processKeyEvent(KeyEvent)|Processes key stroke events s
|javax.swing.JPopupMenu.processKeyEvent(KeyEvent,MenuElement[],MenuSelectionManager)|
|javax.swing.JPopupMenu.processMouseEvent(MouseEvent,MenuElement[],MenuSelectionManager)|
|javax.swing.JPopupMenu.remove(int)|Removes the component at the specified inde
|javax.swing.JPopupMenu.removeMenuKeyListener(MenuKeyListener)|Removes a MenuKe
|javax.swing.JPopupMenu.removePopupMenuListener(PopupMenuListener)|Removes a Po
|javax.swing.JPopupMenu.setBorderPainted(boolean)|Sets whether the border shoul
|javax.swing.JPopupMenu.setDefaultLightWeightPopupEnabled(boolean)|Sets the def
|javax.swing.JPopupMenu.setInvoker(Component)|Sets the invoker of this popup me
|javax.swing.JPopupMenu.setLabel(String)|Sets the popup menu's label.
|javax.swing.JPopupMenu.setLightWeightPopupEnabled(boolean)|Sets the value of t
|javax.swing.JPopupMenu.setLocation(int,int)|Sets the location of the upper lef
|javax.swing.JPopupMenu.setPopupSize(Dimension)|Sets the size of the Popup wind
|javax.swing.JPopupMenu.setPopupSize(int,int)|Sets the size of the Popup window
|javax.swing.JPopupMenu.setSelected(Component)|Sets the currently selected comp
|javax.swing.JPopupMenu.setSelectionModel(SingleSelectionModel)|Sets the model 
|javax.swing.JPopupMenu.setUI(PopupMenuUI)|Sets the Lobject that renders this c
|javax.swing.JPopupMenu.setVisible(boolean)|Sets the visibility of the popup me
|javax.swing.JPopupMenu.show(Component,int,int)|Displays the popup menu at the 
|javax.swing.JPopupMenu.updateUI()|Resets the UI property to a value from the c

*javax.swing.JPopupMenu_Description*

An implementation of a popup menu -- a small window that pops up and displays a 
series of choices. A JPopupMenu is used for the menu that appears when the user 
selects an item on the menu bar. It is also used for "pull-right" menu that 
appears when the selects a menu item that activates it. Finally, a JPopupMenu 
can also be used anywhere else you want a menu to appear. For example, when the 
user right-clicks in a specified area. 

For information and examples of using popup menus, see How to Use Menus in The 
Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JPopupMenu()*

public JPopupMenu()

Constructs a JPopupMenu without an "invoker". 


*javax.swing.JPopupMenu(String)*

public JPopupMenu(java.lang.String label)

Constructs a JPopupMenu with the specified title. 

    label - the string that a UI may use to display as a title for the popup menu. 

*javax.swing.JPopupMenu.add(Action)*

public |javax.swing.JMenuItem| add(javax.swing.Action a)

Appends a new menu item to the end of the menu which dispatches the specified 
Action object. 

As of JDK 1.3, this is no longer the preferred method for adding Actions to a 
container. Instead it is recommended to configure a control with an action 
using setAction, and then add that control directly to the Container. 

    a - the Action to add to the menu 

    Returns: the new menu item 
*javax.swing.JPopupMenu.add(JMenuItem)*

public |javax.swing.JMenuItem| add(javax.swing.JMenuItem menuItem)

Appends the specified menu item to the end of this menu. 

    menuItem - the JMenuItem to add 

    Returns: the JMenuItem added 
*javax.swing.JPopupMenu.add(String)*

public |javax.swing.JMenuItem| add(java.lang.String s)

Creates a new menu item with the specified text and appends it to the end of 
this menu. 

    s - the string for the menu item to be added 

*javax.swing.JPopupMenu.addMenuKeyListener(MenuKeyListener)*

public void addMenuKeyListener(javax.swing.event.MenuKeyListener l)

Adds a MenuKeyListener to the popup menu. 

    l - the MenuKeyListener to be added 

*javax.swing.JPopupMenu.addPopupMenuListener(PopupMenuListener)*

public void addPopupMenuListener(javax.swing.event.PopupMenuListener l)

Adds a PopupMenu listener. 

    l - the PopupMenuListener to add 

*javax.swing.JPopupMenu.addSeparator()*

public void addSeparator()

Appends a new separator at the end of the menu. 


*javax.swing.JPopupMenu.createActionChangeListener(JMenuItem)*

protected |java.beans.PropertyChangeListener| createActionChangeListener(javax.swing.JMenuItem b)

Returns a properly configured PropertyChangeListener which updates the control 
as changes to the Action occur. As of JDK 1.3, this is no longer the preferred 
method for adding Actions to a container. Instead it is recommended to 
configure a control with an action using setAction, and then add that control 
directly to the Container. 


*javax.swing.JPopupMenu.createActionComponent(Action)*

protected |javax.swing.JMenuItem| createActionComponent(javax.swing.Action a)

Factory method which creates the JMenuItem for Actions added to the JPopupMenu. 
As of JDK 1.3, this is no longer the preferred method, instead it is 
recommended to configure a control with an action using setAction, and then 
adding that control directly to the Container. 

    a - the Action for the menu item to be added 

    Returns: the new menu item 
*javax.swing.JPopupMenu.firePopupMenuCanceled()*

protected void firePopupMenuCanceled()

Notifies PopupMenuListeners that this popup menu is cancelled. 


*javax.swing.JPopupMenu.firePopupMenuWillBecomeInvisible()*

protected void firePopupMenuWillBecomeInvisible()

Notifies PopupMenuListeners that this popup menu will become invisible. 


*javax.swing.JPopupMenu.firePopupMenuWillBecomeVisible()*

protected void firePopupMenuWillBecomeVisible()

Notifies PopupMenuListeners that this popup menu will become visible. 


*javax.swing.JPopupMenu.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JPopupMenu. For JPopupMenus, 
the AccessibleContext takes the form of an AccessibleJPopupMenu. A new 
AccessibleJPopupMenu instance is created if necessary. 


    Returns: an AccessibleJPopupMenu that serves as the AccessibleContext of this JPopupMenu 
*javax.swing.JPopupMenu.getComponent()*

public |java.awt.Component| getComponent()

Returns this JPopupMenu component. 


    Returns: this JPopupMenu object 
*javax.swing.JPopupMenu.getComponentAtIndex(int)*

public |java.awt.Component| getComponentAtIndex(int i)

Returns the component at the specified index. 

    i - the index of the component, where 0 is the first 

    Returns: the Component at that index 
*javax.swing.JPopupMenu.getComponentIndex(Component)*

public int getComponentIndex(java.awt.Component c)

Returns the index of the specified component. 

    c - the Component to find 

    Returns: the index of the component, where 0 is the first; or -1 if the component is not 
             found 
*javax.swing.JPopupMenu.getDefaultLightWeightPopupEnabled()*

public static boolean getDefaultLightWeightPopupEnabled()

Gets the defaultLightWeightPopupEnabled property, which by default is true. 


    Returns: the value of the defaultLightWeightPopupEnabled property 
*javax.swing.JPopupMenu.getInvoker()*

public |java.awt.Component| getInvoker()

Returns the component which is the 'invoker' of this popup menu. 


    Returns: the Component in which the popup menu is displayed 
*javax.swing.JPopupMenu.getLabel()*

public |java.lang.String| getLabel()

Returns the popup menu's label 


    Returns: a string containing the popup menu's label 
*javax.swing.JPopupMenu.getMargin()*

public |java.awt.Insets| getMargin()

Returns the margin, in pixels, between the popup menu's border and its 
containees. 


    Returns: an Insets object containing the margin values. 
*javax.swing.JPopupMenu.getMenuKeyListeners()*

public |javax.swing.event.MenuKeyListener| getMenuKeyListeners()

Returns an array of all the MenuKeyListeners added to this JPopupMenu with 
addMenuKeyListener(). 


    Returns: all of the MenuKeyListeners added or an empty array if no listeners have been 
             added 
*javax.swing.JPopupMenu.getPopupMenuListeners()*

public |javax.swing.event.PopupMenuListener| getPopupMenuListeners()

Returns an array of all the PopupMenuListeners added to this JMenuItem with 
addPopupMenuListener(). 


    Returns: all of the PopupMenuListeners added or an empty array if no listeners have been 
             added 
*javax.swing.JPopupMenu.getSelectionModel()*

public |javax.swing.SingleSelectionModel| getSelectionModel()

Returns the model object that handles single selections. 


    Returns: the selectionModel property 
*javax.swing.JPopupMenu.getSubElements()*

public |javax.swing.MenuElement| getSubElements()

Returns an array of MenuElements containing the submenu for this menu 
component. It will only return items conforming to the JMenuElement interface. 
If popup menu is null returns an empty array. This method is required to 
conform to the MenuElement interface. 


    Returns: an array of MenuElement objects 
*javax.swing.JPopupMenu.getUI()*

public |javax.swing.plaf.PopupMenuUI| getUI()

Returns the look and feel (Lobject that renders this component. 


    Returns: the PopupMenuUI object that renders this component 
*javax.swing.JPopupMenu.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the name of the Lclass that renders this component. 


    Returns: the string "PopupMenuUI" 
*javax.swing.JPopupMenu.insert(Action,int)*

public void insert(
  javax.swing.Action a,
  int index)

Inserts a menu item for the specified Action object at a given position. 

    a - the Action object to insert 
    index - specifies the position at which to insert the Action, where 0 is the first 

*javax.swing.JPopupMenu.insert(Component,int)*

public void insert(
  java.awt.Component component,
  int index)

Inserts the specified component into the menu at a given position. 

    component - the Component to insert 
    index - specifies the position at which to insert the component, where 0 is the first 

*javax.swing.JPopupMenu.isBorderPainted()*

public boolean isBorderPainted()

Checks whether the border should be painted. 


    Returns: true if the border is painted, false otherwise 
*javax.swing.JPopupMenu.isLightWeightPopupEnabled()*

public boolean isLightWeightPopupEnabled()

Gets the lightWeightPopupEnabled property. 


    Returns: the value of the lightWeightPopupEnabled property 
*javax.swing.JPopupMenu.isPopupTrigger(MouseEvent)*

public boolean isPopupTrigger(java.awt.event.MouseEvent e)

Returns true if the MouseEvent is considered a popup trigger by the 
JPopupMenu's currently installed UI. 


    Returns: true if the mouse event is a popup trigger 
*javax.swing.JPopupMenu.isVisible()*

public boolean isVisible()

Returns true if the popup menu is visible (currently being displayed). 


*javax.swing.JPopupMenu.menuSelectionChanged(boolean)*

public void menuSelectionChanged(boolean isIncluded)

Messaged when the menubar selection changes to activate or deactivate this 
menu. This implements the javax.swing.MenuElement interface. Overrides 
MenuElement.menuSelectionChanged. 

    isIncluded - true if this menu is active, false if it is not 

*javax.swing.JPopupMenu.pack()*

public void pack()

Lays out the container so that it uses the minimum space needed to display its 
contents. 


*javax.swing.JPopupMenu.paintBorder(Graphics)*

protected void paintBorder(java.awt.Graphics g)

Paints the popup menu's border if the borderPainted property is true. 

    g - the Graphics object 

*javax.swing.JPopupMenu.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JPopupMenu. This method is intended to 
be used only for debugging purposes, and the content and format of the returned 
string may vary between implementations. The returned string may be empty but 
may not be null. 


    Returns: a string representation of this JPopupMenu. 
*javax.swing.JPopupMenu.processFocusEvent(FocusEvent)*

protected void processFocusEvent(java.awt.event.FocusEvent evt)




*javax.swing.JPopupMenu.processKeyEvent(KeyEvent)*

protected void processKeyEvent(java.awt.event.KeyEvent evt)

Processes key stroke events such as mnemonics and accelerators. 

    evt - the key event to be processed 

*javax.swing.JPopupMenu.processKeyEvent(KeyEvent,MenuElement[],MenuSelectionManager)*

public void processKeyEvent(
  java.awt.event.KeyEvent e,
  javax.swing.MenuElement[] path,
  javax.swing.MenuSelectionManager manager)

Processes a key event forwarded from the MenuSelectionManager and changes the 
menu selection, if necessary, by using MenuSelectionManager's API. 

Note: you do not have to forward the event to sub-components. This is done 
automatically by the MenuSelectionManager. 

    e - a KeyEvent 
    path - the MenuElement path array 
    manager - the MenuSelectionManager 

*javax.swing.JPopupMenu.processMouseEvent(MouseEvent,MenuElement[],MenuSelectionManager)*

public void processMouseEvent(
  java.awt.event.MouseEvent event,
  javax.swing.MenuElement[] path,
  javax.swing.MenuSelectionManager manager)

This method is required to conform to the MenuElement interface, but it not 
implemented. 


*javax.swing.JPopupMenu.remove(int)*

public void remove(int pos)

Removes the component at the specified index from this popup menu. 

    pos - the position of the item to be removed 

*javax.swing.JPopupMenu.removeMenuKeyListener(MenuKeyListener)*

public void removeMenuKeyListener(javax.swing.event.MenuKeyListener l)

Removes a MenuKeyListener from the popup menu. 

    l - the MenuKeyListener to be removed 

*javax.swing.JPopupMenu.removePopupMenuListener(PopupMenuListener)*

public void removePopupMenuListener(javax.swing.event.PopupMenuListener l)

Removes a PopupMenu listener. 

    l - the PopupMenuListener to remove 

*javax.swing.JPopupMenu.setBorderPainted(boolean)*

public void setBorderPainted(boolean b)

Sets whether the border should be painted. 

    b - if true, the border is painted. 

*javax.swing.JPopupMenu.setDefaultLightWeightPopupEnabled(boolean)*

public static void setDefaultLightWeightPopupEnabled(boolean aFlag)

Sets the default value of the lightWeightPopupEnabled property. 

    aFlag - true if popups can be lightweight, otherwise false 

*javax.swing.JPopupMenu.setInvoker(Component)*

public void setInvoker(java.awt.Component invoker)

Sets the invoker of this popup menu -- the component in which the popup menu 
menu is to be displayed. 

    invoker - the Component in which the popup menu is displayed 

*javax.swing.JPopupMenu.setLabel(String)*

public void setLabel(java.lang.String label)

Sets the popup menu's label. Different look and feels may choose to display or 
not display this. 

    label - a string specifying the label for the popup menu 

*javax.swing.JPopupMenu.setLightWeightPopupEnabled(boolean)*

public void setLightWeightPopupEnabled(boolean aFlag)

Sets the value of the lightWeightPopupEnabled property, which by default is 
true. By default, when a look and feel displays a popup, it can choose to use a 
lightweight (all-Java) popup. Lightweight popup windows are more efficient than 
heavyweight (native peer) windows, but lightweight and heavyweight components 
do not mix well in a GUI. If your application mixes lightweight and heavyweight 
components, you should disable lightweight popups. Some look and feels might 
always use heavyweight popups, no matter what the value of this property. 

    aFlag - false to disable lightweight popups 

*javax.swing.JPopupMenu.setLocation(int,int)*

public void setLocation(
  int x,
  int y)

Sets the location of the upper left corner of the popup menu using x, y 
coordinates. 

    x - the x coordinate of the popup's new position in the screen's coordinate space 
    y - the y coordinate of the popup's new position in the screen's coordinate space 

*javax.swing.JPopupMenu.setPopupSize(Dimension)*

public void setPopupSize(java.awt.Dimension d)

Sets the size of the Popup window using a Dimension object. This is equivalent 
to setPreferredSize(d). 

    d - the Dimension specifying the new size of this component. 

*javax.swing.JPopupMenu.setPopupSize(int,int)*

public void setPopupSize(
  int width,
  int height)

Sets the size of the Popup window to the specified width and height. This is 
equivalent to setPreferredSize(new Dimension(width, height)). 

    width - the new width of the Popup in pixels 
    height - the new height of the Popup in pixels 

*javax.swing.JPopupMenu.setSelected(Component)*

public void setSelected(java.awt.Component sel)

Sets the currently selected component, This will result in a change to the 
selection model. 

    sel - the Component to select 

*javax.swing.JPopupMenu.setSelectionModel(SingleSelectionModel)*

public void setSelectionModel(javax.swing.SingleSelectionModel model)

Sets the model object to handle single selections. 

    model - the new SingleSelectionModel 

*javax.swing.JPopupMenu.setUI(PopupMenuUI)*

public void setUI(javax.swing.plaf.PopupMenuUI ui)

Sets the Lobject that renders this component. 

    ui - the new PopupMenuUI Lobject 

*javax.swing.JPopupMenu.setVisible(boolean)*

public void setVisible(boolean b)

Sets the visibility of the popup menu. 

    b - true to make the popup visible, or false to hide it 

*javax.swing.JPopupMenu.show(Component,int,int)*

public void show(
  java.awt.Component invoker,
  int x,
  int y)

Displays the popup menu at the position x,y in the coordinate space of the 
component invoker. 

    invoker - the component in whose space the popup menu is to appear 
    x - the x coordinate in invoker's coordinate space at which the popup menu is to be 
       displayed 
    y - the y coordinate in invoker's coordinate space at which the popup menu is to be 
       displayed 

*javax.swing.JPopupMenu.updateUI()*

public void updateUI()

Resets the UI property to a value from the current look and feel. 




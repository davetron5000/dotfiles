*java.security.KeyStoreSpi* *KeyStoreSpi* This class defines the Service Provide

public abstract class KeyStoreSpi
  extends    |java.lang.Object|

|java.security.KeyStoreSpi_Description|
|java.security.KeyStoreSpi_Fields|
|java.security.KeyStoreSpi_Constructors|
|java.security.KeyStoreSpi_Methods|

================================================================================

*java.security.KeyStoreSpi_Constructors*
|java.security.KeyStoreSpi()|

*java.security.KeyStoreSpi_Methods*
|java.security.KeyStoreSpi.engineAliases()|Lists all the alias names of this ke
|java.security.KeyStoreSpi.engineContainsAlias(String)|Checks if the given alia
|java.security.KeyStoreSpi.engineDeleteEntry(String)|Deletes the entry identifi
|java.security.KeyStoreSpi.engineEntryInstanceOf(String,Class)|Determines if th
|java.security.KeyStoreSpi.engineGetCertificate(String)|Returns the certificate
|java.security.KeyStoreSpi.engineGetCertificateAlias(Certificate)|Returns the (
|java.security.KeyStoreSpi.engineGetCertificateChain(String)|Returns the certif
|java.security.KeyStoreSpi.engineGetCreationDate(String)|Returns the creation d
|java.security.KeyStoreSpi.engineGetEntry(String,KeyStore.ProtectionParameter)|
|java.security.KeyStoreSpi.engineGetKey(String,char[])|Returns the key associat
|java.security.KeyStoreSpi.engineIsCertificateEntry(String)|Returns true if the
|java.security.KeyStoreSpi.engineIsKeyEntry(String)|Returns true if the entry i
|java.security.KeyStoreSpi.engineLoad(InputStream,char[])|Loads the keystore fr
|java.security.KeyStoreSpi.engineLoad(KeyStore.LoadStoreParameter)|Loads the ke
|java.security.KeyStoreSpi.engineSetCertificateEntry(String,Certificate)|Assign
|java.security.KeyStoreSpi.engineSetEntry(String,KeyStore.Entry,KeyStore.ProtectionParameter)|
|java.security.KeyStoreSpi.engineSetKeyEntry(String,byte[],Certificate[])|Assig
|java.security.KeyStoreSpi.engineSetKeyEntry(String,Key,char[],Certificate[])|A
|java.security.KeyStoreSpi.engineSize()|Retrieves the number of entries in this
|java.security.KeyStoreSpi.engineStore(KeyStore.LoadStoreParameter)|Stores this
|java.security.KeyStoreSpi.engineStore(OutputStream,char[])|Stores this keystor

*java.security.KeyStoreSpi_Description*

This class defines the Service Provider Interface (SPI) for the KeyStore class. 
All the abstract methods in this class must be implemented by each 
cryptographic service provider who wishes to supply the implementation of a 
keystore for a particular keystore type. 


*java.security.KeyStoreSpi()*

public KeyStoreSpi()




*java.security.KeyStoreSpi.engineAliases()*

public abstract |java.util.Enumeration| engineAliases()

Lists all the alias names of this keystore. 


    Returns: enumeration of the alias names 
*java.security.KeyStoreSpi.engineContainsAlias(String)*

public abstract boolean engineContainsAlias(java.lang.String alias)

Checks if the given alias exists in this keystore. 

    alias - the alias name 

    Returns: true if the alias exists, false otherwise 
*java.security.KeyStoreSpi.engineDeleteEntry(String)*

public abstract void engineDeleteEntry(java.lang.String alias)
  throws |java.security.KeyStoreException|
         
Deletes the entry identified by the given alias from this keystore. 

    alias - the alias name 

*java.security.KeyStoreSpi.engineEntryInstanceOf(String,Class)*

public boolean engineEntryInstanceOf(
  java.lang.String alias,
  java.lang.Class entryClass)

Determines if the keystore Entry for the specified alias is an instance or 
subclass of the specified entryClass. 

    alias - the alias name 
    entryClass - the entry class 

    Returns: true if the keystore Entry for the specified alias is an instance or subclass 
             of the specified entryClass, false otherwise 
*java.security.KeyStoreSpi.engineGetCertificate(String)*

public abstract |java.security.cert.Certificate| engineGetCertificate(java.lang.String alias)

Returns the certificate associated with the given alias. 

If the given alias name identifies an entry created by a call to 
setCertificateEntry, or created by a call to setEntry with a 
TrustedCertificateEntry, then the trusted certificate contained in that entry 
is returned. 

If the given alias name identifies an entry created by a call to setKeyEntry, 
or created by a call to setEntry with a PrivateKeyEntry, then the first element 
of the certificate chain in that entry (if a chain exists) is returned. 

    alias - the alias name 

    Returns: the certificate, or null if the given alias does not exist or does not contain 
             a certificate. 
*java.security.KeyStoreSpi.engineGetCertificateAlias(Certificate)*

public abstract |java.lang.String| engineGetCertificateAlias(java.security.cert.Certificate cert)

Returns the (alias) name of the first keystore entry whose certificate matches 
the given certificate. 

This method attempts to match the given certificate with each keystore entry. 
If the entry being considered was created by a call to setCertificateEntry, or 
created by a call to setEntry with a TrustedCertificateEntry, then the given 
certificate is compared to that entry's certificate. 

If the entry being considered was created by a call to setKeyEntry, or created 
by a call to setEntry with a PrivateKeyEntry, then the given certificate is 
compared to the first element of that entry's certificate chain. 

    cert - the certificate to match with. 

    Returns: the alias name of the first entry with matching certificate, or null if no such 
             entry exists in this keystore. 
*java.security.KeyStoreSpi.engineGetCertificateChain(String)*

public abstract |java.security.cert.Certificate| engineGetCertificateChain(java.lang.String alias)

Returns the certificate chain associated with the given alias. The certificate 
chain must have been associated with the alias by a call to setKeyEntry, or by 
a call to setEntry with a PrivateKeyEntry. 

    alias - the alias name 

    Returns: the certificate chain (ordered with the user's certificate first and the root 
             certificate authority last), or null if the given alias does not 
             exist or does not contain a certificate chain 
*java.security.KeyStoreSpi.engineGetCreationDate(String)*

public abstract |java.util.Date| engineGetCreationDate(java.lang.String alias)

Returns the creation date of the entry identified by the given alias. 

    alias - the alias name 

    Returns: the creation date of this entry, or null if the given alias does not exist 
*java.security.KeyStoreSpi.engineGetEntry(String,KeyStore.ProtectionParameter)*

public |java.security.KeyStore.Entry| engineGetEntry(
  java.lang.String alias,
  java.security.KeyStore.ProtectionParameter protParam)
  throws |java.security.KeyStoreException|
         |java.security.NoSuchAlgorithmException|
         |java.security.UnrecoverableEntryException|
         
Gets a KeyStore.Entry for the specified alias with the specified protection 
parameter. 

    alias - get the KeyStore.Entry for this alias 
    protParam - the ProtectionParameter used to protect the Entry, which may be null 

    Returns: the KeyStore.Entry for the specified alias, or null if there is no such entry 
*java.security.KeyStoreSpi.engineGetKey(String,char[])*

public abstract |java.security.Key| engineGetKey(
  java.lang.String alias,
  char[] password)
  throws |java.security.NoSuchAlgorithmException|
         |java.security.UnrecoverableKeyException|
         
Returns the key associated with the given alias, using the given password to 
recover it. The key must have been associated with the alias by a call to 
setKeyEntry, or by a call to setEntry with a PrivateKeyEntry or SecretKeyEntry. 

    alias - the alias name 
    password - the password for recovering the key 

    Returns: the requested key, or null if the given alias does not exist or does not 
             identify a key-related entry. 
*java.security.KeyStoreSpi.engineIsCertificateEntry(String)*

public abstract boolean engineIsCertificateEntry(java.lang.String alias)

Returns true if the entry identified by the given alias was created by a call 
to setCertificateEntry, or created by a call to setEntry with a 
TrustedCertificateEntry. 

    alias - the alias for the keystore entry to be checked 

    Returns: true if the entry identified by the given alias contains a trusted certificate, 
             false otherwise. 
*java.security.KeyStoreSpi.engineIsKeyEntry(String)*

public abstract boolean engineIsKeyEntry(java.lang.String alias)

Returns true if the entry identified by the given alias was created by a call 
to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a 
SecretKeyEntry. 

    alias - the alias for the keystore entry to be checked 

    Returns: true if the entry identified by the given alias is a key-related, false 
             otherwise. 
*java.security.KeyStoreSpi.engineLoad(InputStream,char[])*

public abstract void engineLoad(
  java.io.InputStream stream,
  char[] password)
  throws |java.security.cert.CertificateException|
         |java.io.IOException|
         |java.security.NoSuchAlgorithmException|
         
Loads the keystore from the given input stream. 

A password may be given to unlock the keystore (e.g. the keystore resides on a 
hardware token device), or to check the integrity of the keystore data. If a 
password is not given for integrity checking, then integrity checking is not 
performed. 

    stream - the input stream from which the keystore is loaded, or null 
    password - the password used to check the integrity of the keystore, the password used to 
       unlock the keystore, or null 

*java.security.KeyStoreSpi.engineLoad(KeyStore.LoadStoreParameter)*

public void engineLoad(java.security.KeyStore.LoadStoreParameter param)
  throws |java.security.cert.CertificateException|
         |java.io.IOException|
         |java.security.NoSuchAlgorithmException|
         
Loads the keystore using the given KeyStore.LoadStoreParameter. 

Note that if this KeyStore has already been loaded, it is reinitialized and 
loaded again from the given parameter. 

    param - the KeyStore.LoadStoreParameter that specifies how to load the keystore, which 
       may be null 

*java.security.KeyStoreSpi.engineSetCertificateEntry(String,Certificate)*

public abstract void engineSetCertificateEntry(
  java.lang.String alias,
  java.security.cert.Certificate cert)
  throws |java.security.KeyStoreException|
         
Assigns the given certificate to the given alias. 

If the given alias identifies an existing entry created by a call to 
setCertificateEntry, or created by a call to setEntry with a 
TrustedCertificateEntry, the trusted certificate in the existing entry is 
overridden by the given certificate. 

    alias - the alias name 
    cert - the certificate 

*java.security.KeyStoreSpi.engineSetEntry(String,KeyStore.Entry,KeyStore.ProtectionParameter)*

public void engineSetEntry(
  java.lang.String alias,
  java.security.KeyStore.Entry entry,
  java.security.KeyStore.ProtectionParameter protParam)
  throws |java.security.KeyStoreException|
         
Saves a KeyStore.Entry under the specified alias. The specified protection 
parameter is used to protect the Entry. 

If an entry already exists for the specified alias, it is overridden. 

    alias - save the KeyStore.Entry under this alias 
    entry - the Entry to save 
    protParam - the ProtectionParameter used to protect the Entry, which may be null 

*java.security.KeyStoreSpi.engineSetKeyEntry(String,byte[],Certificate[])*

public abstract void engineSetKeyEntry(
  java.lang.String alias,
  byte[] key,
  java.security.cert.Certificate[] chain)
  throws |java.security.KeyStoreException|
         
Assigns the given key (that has already been protected) to the given alias. 

If the protected key is of type java.security.PrivateKey, it must be 
accompanied by a certificate chain certifying the corresponding public key. 

If the given alias already exists, the keystore information associated with it 
is overridden by the given key (and possibly certificate chain). 

    alias - the alias name 
    key - the key (in protected format) to be associated with the alias 
    chain - the certificate chain for the corresponding public key (only useful if the 
       protected key is of type java.security.PrivateKey). 

*java.security.KeyStoreSpi.engineSetKeyEntry(String,Key,char[],Certificate[])*

public abstract void engineSetKeyEntry(
  java.lang.String alias,
  java.security.Key key,
  char[] password,
  java.security.cert.Certificate[] chain)
  throws |java.security.KeyStoreException|
         
Assigns the given key to the given alias, protecting it with the given 
password. 

If the given key is of type java.security.PrivateKey, it must be accompanied by 
a certificate chain certifying the corresponding public key. 

If the given alias already exists, the keystore information associated with it 
is overridden by the given key (and possibly certificate chain). 

    alias - the alias name 
    key - the key to be associated with the alias 
    password - the password to protect the key 
    chain - the certificate chain for the corresponding public key (only required if the 
       given key is of type java.security.PrivateKey). 

*java.security.KeyStoreSpi.engineSize()*

public abstract int engineSize()

Retrieves the number of entries in this keystore. 


    Returns: the number of entries in this keystore 
*java.security.KeyStoreSpi.engineStore(KeyStore.LoadStoreParameter)*

public void engineStore(java.security.KeyStore.LoadStoreParameter param)
  throws |java.security.cert.CertificateException|
         |java.io.IOException|
         |java.security.NoSuchAlgorithmException|
         
Stores this keystore using the given KeyStore.LoadStoreParmeter. 

    param - the KeyStore.LoadStoreParmeter that specifies how to store the keystore, which 
       may be null 

*java.security.KeyStoreSpi.engineStore(OutputStream,char[])*

public abstract void engineStore(
  java.io.OutputStream stream,
  char[] password)
  throws |java.security.cert.CertificateException|
         |java.io.IOException|
         |java.security.NoSuchAlgorithmException|
         
Stores this keystore to the given output stream, and protects its integrity 
with the given password. 

    stream - the output stream to which this keystore is written. 
    password - the password to generate the keystore integrity check 



*javax.swing.text.StyledDocument* *StyledDocument* Interface for a generic style

public interface interface StyledDocument

  implements |javax.swing.text.Document|

|javax.swing.text.StyledDocument_Description|
|javax.swing.text.StyledDocument_Fields|
|javax.swing.text.StyledDocument_Constructors|
|javax.swing.text.StyledDocument_Methods|

================================================================================

*javax.swing.text.StyledDocument_Methods*
|javax.swing.text.StyledDocument.addStyle(String,Style)|Adds a new style into t
|javax.swing.text.StyledDocument.getBackground(AttributeSet)|Takes a set of att
|javax.swing.text.StyledDocument.getCharacterElement(int)|Gets the element that
|javax.swing.text.StyledDocument.getFont(AttributeSet)|Takes a set of attribute
|javax.swing.text.StyledDocument.getForeground(AttributeSet)|Takes a set of att
|javax.swing.text.StyledDocument.getLogicalStyle(int)|Gets a logical style for 
|javax.swing.text.StyledDocument.getParagraphElement(int)|Gets the element that
|javax.swing.text.StyledDocument.getStyle(String)|Fetches a named style previou
|javax.swing.text.StyledDocument.removeStyle(String)|Removes a named style prev
|javax.swing.text.StyledDocument.setCharacterAttributes(int,int,AttributeSet,boolean)|
|javax.swing.text.StyledDocument.setLogicalStyle(int,Style)|Sets the logical st
|javax.swing.text.StyledDocument.setParagraphAttributes(int,int,AttributeSet,boolean)|

*javax.swing.text.StyledDocument_Description*

Interface for a generic styled document. 


*javax.swing.text.StyledDocument.addStyle(String,Style)*

public |javax.swing.text.Style| addStyle(
  java.lang.String nm,
  javax.swing.text.Style parent)

Adds a new style into the logical style hierarchy. Style attributes resolve 
from bottom up so an attribute specified in a child will override an attribute 
specified in the parent. 

    nm - the name of the style (must be unique within the collection of named styles). 
       The name may be null if the style is unnamed, but the caller is 
       responsible for managing the reference returned as an unnamed style 
       can't be fetched by name. An unnamed style may be useful for things like 
       character attribute overrides such as found in a style run. 
    parent - the parent style. This may be null if unspecified attributes need not be 
       resolved in some other style. 

    Returns: 
*javax.swing.text.StyledDocument.getBackground(AttributeSet)*

public |java.awt.Color| getBackground(javax.swing.text.AttributeSet attr)

Takes a set of attributes and turn it into a background color specification. 
This might be used to specify things like brighter, more hue, etc. 

    attr - the set of attributes 

    Returns: 
*javax.swing.text.StyledDocument.getCharacterElement(int)*

public |javax.swing.text.Element| getCharacterElement(int pos)

Gets the element that represents the character that is at the given offset 
within the document. 

    pos - the offset >= 0 

    Returns: 
*javax.swing.text.StyledDocument.getFont(AttributeSet)*

public |java.awt.Font| getFont(javax.swing.text.AttributeSet attr)

Takes a set of attributes and turn it into a font specification. This can be 
used to turn things like family, style, size, etc into a font that is available 
on the system the document is currently being used on. 

    attr - the set of attributes 

    Returns: 
*javax.swing.text.StyledDocument.getForeground(AttributeSet)*

public |java.awt.Color| getForeground(javax.swing.text.AttributeSet attr)

Takes a set of attributes and turn it into a foreground color specification. 
This might be used to specify things like brighter, more hue, etc. 

    attr - the set of attributes 

    Returns: 
*javax.swing.text.StyledDocument.getLogicalStyle(int)*

public |javax.swing.text.Style| getLogicalStyle(int p)

Gets a logical style for a given position in a paragraph. 

    p - the position >= 0 

    Returns: 
*javax.swing.text.StyledDocument.getParagraphElement(int)*

public |javax.swing.text.Element| getParagraphElement(int pos)

Gets the element that represents the paragraph that encloses the given offset 
within the document. 

    pos - the offset >= 0 

    Returns: 
*javax.swing.text.StyledDocument.getStyle(String)*

public |javax.swing.text.Style| getStyle(java.lang.String nm)

Fetches a named style previously added. 

    nm - the name of the style 

    Returns: 
*javax.swing.text.StyledDocument.removeStyle(String)*

public void removeStyle(java.lang.String nm)

Removes a named style previously added to the document. 

    nm - the name of the style to remove 

*javax.swing.text.StyledDocument.setCharacterAttributes(int,int,AttributeSet,boolean)*

public void setCharacterAttributes(
  int offset,
  int length,
  javax.swing.text.AttributeSet s,
  boolean replace)

Changes the content element attributes used for the given range of existing 
content in the document. All of the attributes defined in the given Attributes 
argument are applied to the given range. This method can be used to completely 
remove all content level attributes for the given range by giving an Attributes 
argument that has no attributes defined and setting replace to true. 

    offset - the start of the change >= 0 
    length - the length of the change >= 0 
    s - the non-null attributes to change to. Any attributes defined will be applied to 
       the text for the given range. 
    replace - indicates whether or not the previous attributes should be cleared before the 
       new attributes as set. If true, the operation will replace the previous 
       attributes entirely. If false, the new attributes will be merged with 
       the previous attributes. 

*javax.swing.text.StyledDocument.setLogicalStyle(int,Style)*

public void setLogicalStyle(
  int pos,
  javax.swing.text.Style s)

Sets the logical style to use for the paragraph at the given position. If 
attributes aren't explicitly set for character and paragraph attributes they 
will resolve through the logical style assigned to the paragraph, which in turn 
may resolve through some hierarchy completely independent of the element 
hierarchy in the document. 

    pos - the starting position >= 0 
    s - the style to set 

*javax.swing.text.StyledDocument.setParagraphAttributes(int,int,AttributeSet,boolean)*

public void setParagraphAttributes(
  int offset,
  int length,
  javax.swing.text.AttributeSet s,
  boolean replace)

Sets paragraph attributes. 

    offset - the start of the change >= 0 
    length - the length of the change >= 0 
    s - the non-null attributes to change to. Any attributes defined will be applied to 
       the text for the given range. 
    replace - indicates whether or not the previous attributes should be cleared before the 
       new attributes are set. If true, the operation will replace the previous 
       attributes entirely. If false, the new attributes will be merged with 
       the previous attributes. 



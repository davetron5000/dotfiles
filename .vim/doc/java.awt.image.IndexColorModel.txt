*java.awt.image.IndexColorModel* *IndexColorModel* The IndexColorModel class is a ColorModel
 class that works with pixel values consisting of a
 single sample that is an index int

public class IndexColorModel
  extends    |java.awt.image.ColorModel|

|java.awt.image.IndexColorModel_Description|
|java.awt.image.IndexColorModel_Fields|
|java.awt.image.IndexColorModel_Constructors|
|java.awt.image.IndexColorModel_Methods|

====================================================================================================================================================================================

*java.awt.image.IndexColorModel_Constructors*
|java.awt.image.IndexColorModel(int,int,byte[],byte[],byte[])|Constructs an IndexColorModel from the specified   arrays of red, green, and blue components.
|java.awt.image.IndexColorModel(int,int,byte[],byte[],byte[],byte[])|Constructs an IndexColorModel from the given   arrays of red, green, blue and alpha components.
|java.awt.image.IndexColorModel(int,int,byte[],byte[],byte[],int)|Constructs an IndexColorModel from the given arrays   of red, green, and blue components.
|java.awt.image.IndexColorModel(int,int,byte[],int,boolean)|Constructs an IndexColorModel from a single   array of interleaved red, green, blue and optional alpha   components.
|java.awt.image.IndexColorModel(int,int,byte[],int,boolean,int)|Constructs an IndexColorModel from a single array of   interleaved red, green, blue and optional alpha components.
|java.awt.image.IndexColorModel(int,int,int[],int,boolean,int,int)|Constructs an IndexColorModel from an array of   ints where each int is comprised of red, green, blue, and   opt
|java.awt.image.IndexColorModel(int,int,int[],int,int,BigInteger)|Constructs an IndexColorModel from an   int array where each int is   comprised of red, green, blue, and alpha   

*java.awt.image.IndexColorModel_Methods*
|java.awt.image.IndexColorModel.convertToIntDiscrete(Raster,boolean)|Returns a new BufferedImage of TYPE_INT_ARGB or   TYPE_INT_RGB that has a Raster with pixel data   computed by
|java.awt.image.IndexColorModel.createCompatibleSampleModel(int,int)|Creates a SampleModel with the specified   width and height that has a data layout compatible with   this Colo
|java.awt.image.IndexColorModel.createCompatibleWritableRaster(int,int)|Creates a WritableRaster with the specified width   and height that has a data layout (SampleModel)   compa
|java.awt.image.IndexColorModel.finalize()|Disposes of system resources associated with this  ColorModel once this ColorModel is no  longer referenced.
|java.awt.image.IndexColorModel.getAlpha(int)|Returns the alpha component for the specified pixel, scaled  from 0 to 255.
|java.awt.image.IndexColorModel.getAlphas(byte[])|Copies the array of alpha transparency components into the   specified array.
|java.awt.image.IndexColorModel.getBlue(int)|Returns the blue color component for the specified pixel, scaled  from 0 to 255 in the default RGB ColorSpace, sRGB.
|java.awt.image.IndexColorModel.getBlues(byte[])|Copies the array of blue color components into the specified array.
|java.awt.image.IndexColorModel.getComponents(int,int[],int)|Returns an array of unnormalized color/alpha components for a   specified pixel in this ColorModel.
|java.awt.image.IndexColorModel.getComponents(Object,int[],int)|Returns an array of unnormalized color/alpha components for  a specified pixel in this ColorModel.
|java.awt.image.IndexColorModel.getComponentSize()|Returns an array of the number of bits for each color/alpha component.
|java.awt.image.IndexColorModel.getDataElement(int[],int)|Returns a pixel value represented as an int in this   ColorModel given an array of unnormalized   color/alpha components.
|java.awt.image.IndexColorModel.getDataElements(int[],int,Object)|Returns a data element array representation of a pixel in this  ColorModel given an array of unnormalized color/a
|java.awt.image.IndexColorModel.getDataElements(int,Object)|Returns a data element array representation of a pixel in this  ColorModel, given an integer pixel representation in th
|java.awt.image.IndexColorModel.getGreen(int)|Returns the green color component for the specified pixel, scaled  from 0 to 255 in the default RGB ColorSpace, sRGB.
|java.awt.image.IndexColorModel.getGreens(byte[])|Copies the array of green color components into the specified array.
|java.awt.image.IndexColorModel.getMapSize()|Returns the size of the color/alpha component arrays in this  IndexColorModel.
|java.awt.image.IndexColorModel.getRed(int)|Returns the red color component for the specified pixel, scaled  from 0 to 255 in the default RGB ColorSpace, sRGB.
|java.awt.image.IndexColorModel.getReds(byte[])|Copies the array of red color components into the specified array.
|java.awt.image.IndexColorModel.getRGB(int)|Returns the color/alpha components of the pixel in the default  RGB color model format.
|java.awt.image.IndexColorModel.getRGBs(int[])|Converts data for each index from the color and alpha component  arrays to an int in the default RGB ColorModel format and copies  t
|java.awt.image.IndexColorModel.getTransparency()|Returns the transparency.
|java.awt.image.IndexColorModel.getTransparentPixel()|Returns the index of a transparent pixel in this  IndexColorModel or -1 if there is no pixel  with an alpha value of 0.
|java.awt.image.IndexColorModel.getValidPixels()|Returns a BigInteger that indicates the valid/invalid  pixels in the colormap.
|java.awt.image.IndexColorModel.isCompatibleRaster(Raster)|Returns true if raster is compatible   with this ColorModel or false if it   is not compatible with this ColorModel.
|java.awt.image.IndexColorModel.isCompatibleSampleModel(SampleModel)|Checks if the specified SampleModel is compatible   with this ColorModel.
|java.awt.image.IndexColorModel.isValid()|Returns whether or not all of the pixels are valid.
|java.awt.image.IndexColorModel.isValid(int)|Returns whether or not the pixel is valid.
|java.awt.image.IndexColorModel.toString()|Returns the String representation of the contents of  this ColorModelobject.

*java.awt.image.IndexColorModel_Description*

The IndexColorModel class is a ColorModel class that works with pixel values consisting of a single sample that is an index into a fixed colormap in the default sRGB color space. 
The colormap specifies red, green, blue, and optional alpha components corresponding to each index. All components are represented in the colormap as 8-bit unsigned integral 
values. Some constructors allow the caller to specify "holes" in the colormap by indicating which colormap entries are valid and which represent unusable colors via the bits set 
in a BigInteger object. This color model is similar to an X11 PseudoColor visual. 

Some constructors provide a means to specify an alpha component for each pixel in the colormap, while others either provide no such means or, in some cases, a flag to indicate 
whether the colormap data contains alpha values. If no alpha is supplied to the constructor, an opaque alpha component (alpha = 1.0) is assumed for each entry. An optional 
transparent pixel value can be supplied that indicates a pixel to be made completely transparent, regardless of any alpha component supplied or assumed for that pixel value. Note 
that the color components in the colormap of an IndexColorModel objects are never pre-multiplied with the alpha components. 

The transparency of an IndexColorModel object is determined by examining the alpha components of the colors in the colormap and choosing the most specific value after considering 
the optional alpha values and any transparent index specified. The transparency value is Transparency.OPAQUE only if all valid colors in the colormap are opaque and there is no 
valid transparent pixel. If all valid colors in the colormap are either completely opaque (alpha = 1.0) or completely transparent (alpha = 0.0), which typically occurs when a 
valid transparent pixel is specified, the value is Transparency.BITMASK. Otherwise, the value is Transparency.TRANSLUCENT, indicating that some valid color has an alpha component 
that is neither completely transparent nor completely opaque (0.0 

If an IndexColorModel object has a transparency value of Transparency.OPAQUE, then the hasAlpha and getNumComponents methods (both inherited from ColorModel) return false and 3, 
respectively. For any other transparency value, hasAlpha returns true and getNumComponents returns 4. 

The index represented by a pixel value is stored in the least significant n bits of the pixel representations passed to the methods of this class, where n is the pixel size 
specified to the constructor for a particular IndexColorModel object; n must be between 1 and 16, inclusive. Higher order bits in pixel representations are assumed to be zero. For 
those methods that use a primitive array pixel representation of type transferType, the array length is always one. The transfer types supported are DataBuffer.TYPE_BYTE and 
DataBuffer.TYPE_USHORT. A single int pixel representation is valid for all objects of this class, since it is always possible to represent pixel values used with this class in a 
single int. Therefore, methods that use this representation do not throw an IllegalArgumentException due to an invalid pixel value. 

Many of the methods in this class are final. The reason for this is that the underlying native graphics code makes assumptions about the layout and operation of this class and 
those assumptions are reflected in the implementations of the methods here that are marked final. You can subclass this class for other reasons, but you cannot override or modify 
the behaviour of those methods. 



*java.awt.image.IndexColorModel(int,int,byte[],byte[],byte[])*

public IndexColorModel(
  int bits,
  int size,
  byte[] r,
  byte[] g,
  byte[] b)

Constructs an IndexColorModel from the specified arrays of red, green, and blue components. Pixels described by this color model all have alpha components of 255 unnormalized 
(1.0normalized), which means they are fully opaque. All of the arrays specifying the color components must have at least the specified number of entries. The ColorSpace is the 
default sRGB space. Since there is no alpha information in any of the arguments to this constructor, the transparency value is always Transparency.OPAQUE. The transfer type is the 
smallest of DataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT that can hold a single pixel. 

    bits - the number of bits each pixel occupies 
    size - the size of the color component arrays 
    r - the array of red color components 
    g - the array of green color components 
    b - the array of blue color components 

*java.awt.image.IndexColorModel(int,int,byte[],byte[],byte[],byte[])*

public IndexColorModel(
  int bits,
  int size,
  byte[] r,
  byte[] g,
  byte[] b,
  byte[] a)

Constructs an IndexColorModel from the given arrays of red, green, blue and alpha components. All of the arrays specifying the components must have at least the specified number 
of entries. The ColorSpace is the default sRGB space. The transparency value may be any of Transparency.OPAQUE, Transparency.BITMASK, or Transparency.TRANSLUCENT depending on the 
arguments, as specified in the class description above. The transfer type is the smallest of DataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT that can hold a single pixel. 

    bits - the number of bits each pixel occupies 
    size - the size of the color component arrays 
    r - the array of red color components 
    g - the array of green color components 
    b - the array of blue color components 
    a - the array of alpha value components 

*java.awt.image.IndexColorModel(int,int,byte[],byte[],byte[],int)*

public IndexColorModel(
  int bits,
  int size,
  byte[] r,
  byte[] g,
  byte[] b,
  int trans)

Constructs an IndexColorModel from the given arrays of red, green, and blue components. Pixels described by this color model all have alpha components of 255 unnormalized 
(1.0normalized), which means they are fully opaque, except for the indicated pixel to be made transparent. All of the arrays specifying the color components must have at least the 
specified number of entries. The ColorSpace is the default sRGB space. The transparency value may be Transparency.OPAQUE or Transparency.BITMASK depending on the arguments, as 
specified in the class description above. The transfer type is the smallest of DataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT that can hold a single pixel. 

    bits - the number of bits each pixel occupies 
    size - the size of the color component arrays 
    r - the array of red color components 
    g - the array of green color components 
    b - the array of blue color components 
    trans - the index of the transparent pixel 

*java.awt.image.IndexColorModel(int,int,byte[],int,boolean)*

public IndexColorModel(
  int bits,
  int size,
  byte[] cmap,
  int start,
  boolean hasalpha)

Constructs an IndexColorModel from a single array of interleaved red, green, blue and optional alpha components. The array must have enough values in it to fill all of the needed 
component arrays of the specified size. The ColorSpace is the default sRGB space. The transparency value may be any of Transparency.OPAQUE, Transparency.BITMASK, or 
Transparency.TRANSLUCENT depending on the arguments, as specified in the class description above. The transfer type is the smallest of DataBuffer.TYPE_BYTE or 
DataBuffer.TYPE_USHORT that can hold a single pixel. 

    bits - the number of bits each pixel occupies 
    size - the size of the color component arrays 
    cmap - the array of color components 
    start - the starting offset of the first color component 
    hasalpha - indicates whether alpha values are contained in the cmap array 

*java.awt.image.IndexColorModel(int,int,byte[],int,boolean,int)*

public IndexColorModel(
  int bits,
  int size,
  byte[] cmap,
  int start,
  boolean hasalpha,
  int trans)

Constructs an IndexColorModel from a single array of interleaved red, green, blue and optional alpha components. The specified transparent index represents a pixel that is made 
entirely transparent regardless of any alpha value specified for it. The array must have enough values in it to fill all of the needed component arrays of the specified size. The 
ColorSpace is the default sRGB space. The transparency value may be any of Transparency.OPAQUE, Transparency.BITMASK, or Transparency.TRANSLUCENT depending on the arguments, as 
specified in the class description above. The transfer type is the smallest of DataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT that can hold a single pixel. 

    bits - the number of bits each pixel occupies 
    size - the size of the color component arrays 
    cmap - the array of color components 
    start - the starting offset of the first color component 
    hasalpha - indicates whether alpha values are contained in the cmap array 
    trans - the index of the fully transparent pixel 

*java.awt.image.IndexColorModel(int,int,int[],int,boolean,int,int)*

public IndexColorModel(
  int bits,
  int size,
  int[] cmap,
  int start,
  boolean hasalpha,
  int trans,
  int transferType)

Constructs an IndexColorModel from an array of ints where each int is comprised of red, green, blue, and optional alpha components in the default RGB color model format. The 
specified transparent index represents a pixel that is made entirely transparent regardless of any alpha value specified for it. The array must have enough values in it to fill 
all of the needed component arrays of the specified size. The ColorSpace is the default sRGB space. The transparency value may be any of Transparency.OPAQUE, Transparency.BITMASK, 
or Transparency.TRANSLUCENT depending on the arguments, as specified in the class description above. 

    bits - the number of bits each pixel occupies 
    size - the size of the color component arrays 
    cmap - the array of color components 
    start - the starting offset of the first color component 
    hasalpha - indicates whether alpha values are contained in the cmap array 
    trans - the index of the fully transparent pixel 
    transferType - the data type of the array used to represent pixel values. The data type must be either DataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT. 

*java.awt.image.IndexColorModel(int,int,int[],int,int,BigInteger)*

public IndexColorModel(
  int bits,
  int size,
  int[] cmap,
  int start,
  int transferType,
  java.math.BigInteger validBits)

Constructs an IndexColorModel from an int array where each int is comprised of red, green, blue, and alpha components in the default RGB color model format. The array must have 
enough values in it to fill all of the needed component arrays of the specified size. The ColorSpace is the default sRGB space. The transparency value may be any of 
Transparency.OPAQUE, Transparency.BITMASK, or Transparency.TRANSLUCENT depending on the arguments, as specified in the class description above. The transfer type must be one of 
DataBuffer.TYPE_BYTE DataBuffer.TYPE_USHORT. The BigInteger object specifies the valid/invalid pixels in the cmap array. A pixel is valid if the BigInteger value at that index is 
set, and is invalid if the BigInteger bit at that index is not set. 

    bits - the number of bits each pixel occupies 
    size - the size of the color component array 
    cmap - the array of color components 
    start - the starting offset of the first color component 
    transferType - the specified data type 
    validBits - a BigInteger object. If a bit is set in the BigInteger, the pixel at that index is valid. If a bit is not set, the pixel at that index is considered invalid. If null, all pixels 
       are valid. Only bits from 0 to the map size are considered. 

*java.awt.image.IndexColorModel.convertToIntDiscrete(Raster,boolean)*

public |java.awt.image.BufferedImage| convertToIntDiscrete(
  java.awt.image.Raster raster,
  boolean forceARGB)

Returns a new BufferedImage of TYPE_INT_ARGB or TYPE_INT_RGB that has a Raster with pixel data computed by expanding the indices in the source Raster using the color/alpha 
component arrays of this ColorModel. If forceARGB is true, a TYPE_INT_ARGB image is returned regardless of whether or not this ColorModel has an alpha component array or a 
transparent pixel. 


    raster - the specified Raster 
    forceARGB - if true, the returned BufferedImage is TYPE_INT_ARGB; otherwise it is TYPE_INT_RGB 

    Returns: a BufferedImage created with the specified Raster 

*java.awt.image.IndexColorModel.createCompatibleSampleModel(int,int)*

public |java.awt.image.SampleModel| createCompatibleSampleModel(
  int w,
  int h)

Creates a SampleModel with the specified width and height that has a data layout compatible with this ColorModel. 


    w - the width to apply to the new SampleModel 
    h - the height to apply to the new SampleModel 

    Returns: a SampleModel object with the specified width and height. 

*java.awt.image.IndexColorModel.createCompatibleWritableRaster(int,int)*

public |java.awt.image.WritableRaster| createCompatibleWritableRaster(
  int w,
  int h)

Creates a WritableRaster with the specified width and height that has a data layout (SampleModel) compatible with this ColorModel. This method only works for color models with 16 
or fewer bits per pixel. 

Since IndexColorModel can be subclassed, any subclass that supports greater than 16 bits per pixel must override this method. 


    w - the width to apply to the new WritableRaster 
    h - the height to apply to the new WritableRaster 

    Returns: a WritableRaster object with the specified width and height. 

*java.awt.image.IndexColorModel.finalize()*

public void finalize()

Disposes of system resources associated with this ColorModel once this ColorModel is no longer referenced. 



*java.awt.image.IndexColorModel.getAlpha(int)*

public final int getAlpha(int pixel)

Returns the alpha component for the specified pixel, scaled from 0 to 255. The pixel value is specified as an int. 


    pixel - the specified pixel 

    Returns: the value of the alpha component for the specified pixel 

*java.awt.image.IndexColorModel.getAlphas(byte[])*

public final void getAlphas(byte[] a)

Copies the array of alpha transparency components into the specified array. Only the initial entries of the array as specified by getMapSize are written. 


    a - the specified array into which the elements of the array of alpha components are copied 

*java.awt.image.IndexColorModel.getBlue(int)*

public final int getBlue(int pixel)

Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB. The pixel value is specified as an int. The returned value is a 
non pre-multiplied value. 


    pixel - the specified pixel 

    Returns: the value of the blue color component for the specified pixel 

*java.awt.image.IndexColorModel.getBlues(byte[])*

public final void getBlues(byte[] b)

Copies the array of blue color components into the specified array. Only the initial entries of the array as specified by getMapSize are written. 


    b - the specified array into which the elements of the array of blue color components are copied 

*java.awt.image.IndexColorModel.getComponents(int,int[],int)*

public int[] getComponents(
  int pixel,
  int[] components,
  int offset)

Returns an array of unnormalized color/alpha components for a specified pixel in this ColorModel. The pixel value is specified as an int. If the components array is null, a new 
array is allocated that contains offset + getNumComponents() elements. The components array is returned, with the alpha component included only if hasAlpha returns true. 
Color/alpha components are stored in the components array starting at offset even if the array is allocated by this method. An ArrayIndexOutOfBoundsException is thrown if the 
components array is not null and is not large enough to hold all the color and alpha components starting at offset. 


    pixel - the specified pixel 
    components - the array to receive the color and alpha components of the specified pixel 
    offset - the offset into the components array at which to start storing the color and alpha components 

    Returns: an array containing the color and alpha components of the specified pixel starting at the specified offset. 

*java.awt.image.IndexColorModel.getComponents(Object,int[],int)*

public int[] getComponents(
  java.lang.Object pixel,
  int[] components,
  int offset)

Returns an array of unnormalized color/alpha components for a specified pixel in this ColorModel. The pixel value is specified by an array of data elements of type transferType 
passed in as an object reference. If pixel is not a primitive array of type transferType, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if pixel is 
not large enough to hold a pixel value for this ColorModel. If the components array is null, a new array is allocated that contains offset + getNumComponents() elements. The 
components array is returned, with the alpha component included only if hasAlpha returns true. Color/alpha components are stored in the components array starting at offset even if 
the array is allocated by this method. An ArrayIndexOutOfBoundsException is also thrown if the components array is not null and is not large enough to hold all the color and alpha 
components starting at offset. 

Since IndexColorModel can be subclassed, subclasses inherit the implementation of this method and if they don't override it then they throw an exception if they use an unsupported 
transferType. 


    pixel - the specified pixel 
    components - an array that receives the color and alpha components of the specified pixel 
    offset - the index into the components array at which to begin storing the color and alpha components of the specified pixel 

    Returns: an array containing the color and alpha components of the specified pixel starting at the specified offset. 

*java.awt.image.IndexColorModel.getComponentSize()*

public int[] getComponentSize()

Returns an array of the number of bits for each color/alpha component. The array contains the color components in the order red, green, blue, followed by the alpha component, if 
present. 



    Returns: an array containing the number of bits of each color and alpha component of this IndexColorModel 

*java.awt.image.IndexColorModel.getDataElement(int[],int)*

public int getDataElement(
  int[] components,
  int offset)

Returns a pixel value represented as an int in this ColorModel given an array of unnormalized color/alpha components. An ArrayIndexOutOfBoundsException is thrown if the components 
array is not large enough to hold all of the color and alpha components starting at offset. Since ColorModel can be subclassed, subclasses inherit the implementation of this 
method and if they don't override it then they throw an exception if they use an unsupported transferType. 


    components - an array of unnormalized color and alpha components 
    offset - the index into components at which to begin retrieving the color and alpha components 

    Returns: an int pixel value in this ColorModel corresponding to the specified components. 

*java.awt.image.IndexColorModel.getDataElements(int[],int,Object)*

public |java.lang.Object| getDataElements(
  int[] components,
  int offset,
  java.lang.Object pixel)

Returns a data element array representation of a pixel in this ColorModel given an array of unnormalized color/alpha components. This array can then be passed to the 
setDataElements method of a WritableRaster object. An ArrayIndexOutOfBoundsException is thrown if the components array is not large enough to hold all of the color and alpha 
components starting at offset. If the pixel variable is null, a new array is allocated. If pixel is not null, it must be a primitive array of type transferType; otherwise, a 
ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if pixel is not large enough to hold a pixel value for this ColorModel. 

Since IndexColorModel can be subclassed, subclasses inherit the implementation of this method and if they don't override it then they throw an exception if they use an unsupported 
transferType 


    components - an array of unnormalized color and alpha components 
    offset - the index into components at which to begin retrieving color and alpha components 
    pixel - the Object representing an array of color and alpha components 

    Returns: an Object representing an array of color and alpha components. 

*java.awt.image.IndexColorModel.getDataElements(int,Object)*

public synchronized |java.lang.Object| getDataElements(
  int rgb,
  java.lang.Object pixel)

Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model. This array can then be passed to 
the setDataElements(|java.awt.image.WritableRaster|) method of a (|java.awt.image.WritableRaster|) object. If the pixel variable is null, a new array is allocated. If pixel is not 
null, it must be a primitive array of type transferType; otherwise, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException is thrown if pixel is not large enough to 
hold a pixel value for this ColorModel. The pixel array is returned. 

Since IndexColorModel can be subclassed, subclasses inherit the implementation of this method and if they don't override it then they throw an exception if they use an unsupported 
transferType. 


    rgb - the integer pixel representation in the default RGB color model 
    pixel - the specified pixel 

    Returns: an array representation of the specified pixel in this IndexColorModel. 

*java.awt.image.IndexColorModel.getGreen(int)*

public final int getGreen(int pixel)

Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB. The pixel value is specified as an int. The returned value is 
a non pre-multiplied value. 


    pixel - the specified pixel 

    Returns: the value of the green color component for the specified pixel 

*java.awt.image.IndexColorModel.getGreens(byte[])*

public final void getGreens(byte[] g)

Copies the array of green color components into the specified array. Only the initial entries of the array as specified by getMapSize are written. 


    g - the specified array into which the elements of the array of green color components are copied 

*java.awt.image.IndexColorModel.getMapSize()*

public final int getMapSize()

Returns the size of the color/alpha component arrays in this IndexColorModel. 



    Returns: the size of the color and alpha component arrays. 

*java.awt.image.IndexColorModel.getRed(int)*

public final int getRed(int pixel)

Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB. The pixel value is specified as an int. The returned value is a 
non pre-multiplied value. 


    pixel - the specified pixel 

    Returns: the value of the red color component for the specified pixel 

*java.awt.image.IndexColorModel.getReds(byte[])*

public final void getReds(byte[] r)

Copies the array of red color components into the specified array. Only the initial entries of the array as specified by getMapSize(|java.awt.image.IndexColorModel|) are written. 


    r - the specified array into which the elements of the array of red color components are copied 

*java.awt.image.IndexColorModel.getRGB(int)*

public final int getRGB(int pixel)

Returns the color/alpha components of the pixel in the default RGB color model format. The pixel value is specified as an int. The returned value is in a non pre-multiplied 
format. 


    pixel - the specified pixel 

    Returns: the color and alpha components of the specified pixel 

*java.awt.image.IndexColorModel.getRGBs(int[])*

public final void getRGBs(int[] rgb)

Converts data for each index from the color and alpha component arrays to an int in the default RGB ColorModel format and copies the resulting 32-bit ARGB values into the 
specified array. Only the initial entries of the array as specified by getMapSize are written. 


    rgb - the specified array into which the converted ARGB values from this array of color and alpha components are copied. 

*java.awt.image.IndexColorModel.getTransparency()*

public int getTransparency()

Returns the transparency. Returns either OPAQUE, BITMASK, or TRANSLUCENT 



    Returns: the transparency of this IndexColorModel 

*java.awt.image.IndexColorModel.getTransparentPixel()*

public final int getTransparentPixel()

Returns the index of a transparent pixel in this IndexColorModel or -1 if there is no pixel with an alpha value of 0. If a transparent pixel was explicitly specified in one of the 
constructors by its index, then that index will be preferred, otherwise, the index of any pixel which happens to be fully transparent may be returned. 



    Returns: the index of a transparent pixel in this IndexColorModel object, or -1 if there is no such pixel 

*java.awt.image.IndexColorModel.getValidPixels()*

public |java.math.BigInteger| getValidPixels()

Returns a BigInteger that indicates the valid/invalid pixels in the colormap. A bit is valid if the BigInteger value at that index is set, and is invalid if the BigInteger value 
at that index is not set. The only valid ranges to query in the BigInteger are between 0 and the map size. 



    Returns: a BigInteger indicating the valid/invalid pixels. 

*java.awt.image.IndexColorModel.isCompatibleRaster(Raster)*

public boolean isCompatibleRaster(java.awt.image.Raster raster)

Returns true if raster is compatible with this ColorModel or false if it is not compatible with this ColorModel. 


    raster - the {@link Raster} object to test for compatibility 

    Returns: true if raster is compatible with this ColorModel; false otherwise. 

*java.awt.image.IndexColorModel.isCompatibleSampleModel(SampleModel)*

public boolean isCompatibleSampleModel(java.awt.image.SampleModel sm)

Checks if the specified SampleModel is compatible with this ColorModel. If sm is null, this method returns false. 


    sm - the specified SampleModel, or null 

    Returns: true if the specified SampleModel is compatible with this ColorModel; false otherwise. 

*java.awt.image.IndexColorModel.isValid()*

public boolean isValid()

Returns whether or not all of the pixels are valid. 



    Returns: true if all pixels are valid; false otherwise. 

*java.awt.image.IndexColorModel.isValid(int)*

public boolean isValid(int pixel)

Returns whether or not the pixel is valid. 


    pixel - the specified pixel value 

    Returns: true if pixel is valid; false otherwise. 

*java.awt.image.IndexColorModel.toString()*

public |java.lang.String| toString()

Returns the String representation of the contents of this ColorModelobject. 



    Returns: a String representing the contents of this ColorModel object. 



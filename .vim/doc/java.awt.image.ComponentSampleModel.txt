*java.awt.image.ComponentSampleModel* *ComponentSampleModel* This class represents image data which is stored such that each sample
  of a pixel occupies one data element of the Da

public class ComponentSampleModel
  extends    |java.awt.image.SampleModel|

|java.awt.image.ComponentSampleModel_Description|
|java.awt.image.ComponentSampleModel_Fields|
|java.awt.image.ComponentSampleModel_Constructors|
|java.awt.image.ComponentSampleModel_Methods|

====================================================================================================================================================================================

*java.awt.image.ComponentSampleModel_Fields*
|int[]_java.awt.image.ComponentSampleModel.bandOffsets|
|int[]_java.awt.image.ComponentSampleModel.bankIndices|
|int_java.awt.image.ComponentSampleModel.numBands|
|int_java.awt.image.ComponentSampleModel.numBanks|
|int_java.awt.image.ComponentSampleModel.pixelStride|
|int_java.awt.image.ComponentSampleModel.scanlineStride|

*java.awt.image.ComponentSampleModel_Constructors*
|java.awt.image.ComponentSampleModel(int,int,int,int,int,int[])|Constructs a ComponentSampleModel with the specified parameters.
|java.awt.image.ComponentSampleModel(int,int,int,int,int,int[],int[])|Constructs a ComponentSampleModel with the specified parameters.

*java.awt.image.ComponentSampleModel_Methods*
|java.awt.image.ComponentSampleModel.createCompatibleSampleModel(int,int)|Creates a new ComponentSampleModel with the specified  width and height.
|java.awt.image.ComponentSampleModel.createDataBuffer()|Creates a DataBuffer that corresponds to this   ComponentSampleModel.
|java.awt.image.ComponentSampleModel.createSubsetSampleModel(int[])|Creates a new ComponentSampleModel with a subset of the bands  of this ComponentSampleModel.
|java.awt.image.ComponentSampleModel.equals(Object)|
|java.awt.image.ComponentSampleModel.getBandOffsets()|Returns the band offset for all bands.
|java.awt.image.ComponentSampleModel.getBankIndices()|Returns the bank indices for all bands.
|java.awt.image.ComponentSampleModel.getDataElements(int,int,Object,DataBuffer)|Returns data for a single pixel in a primitive array of type  TransferType.
|java.awt.image.ComponentSampleModel.getNumDataElements()|Returns the number of data elements needed to transfer a pixel  with the#getDataElements(int, int, Object, DataBuffer)and
|java.awt.image.ComponentSampleModel.getOffset(int,int)|Gets the offset for the first band of pixel (x,y).
|java.awt.image.ComponentSampleModel.getOffset(int,int,int)|Gets the offset for band b of pixel (x,y).
|java.awt.image.ComponentSampleModel.getPixel(int,int,int[],DataBuffer)|Returns all samples for the specified pixel in an int array,  one sample per array element.
|java.awt.image.ComponentSampleModel.getPixels(int,int,int,int,int[],DataBuffer)|Returns all samples for the specified rectangle of pixels in  an int array, one sample per array e
|java.awt.image.ComponentSampleModel.getPixelStride()|Returns the pixel stride of this ComponentSampleModel.
|java.awt.image.ComponentSampleModel.getSample(int,int,int,DataBuffer)|Returns as int the sample in a specified band for the pixel  located at (x,y).
|java.awt.image.ComponentSampleModel.getSampleDouble(int,int,int,DataBuffer)|Returns the sample in a specified band  for a pixel located at (x,y) as a double.
|java.awt.image.ComponentSampleModel.getSampleFloat(int,int,int,DataBuffer)|Returns the sample in a specified band  for the pixel located at (x,y) as a float.
|java.awt.image.ComponentSampleModel.getSamples(int,int,int,int,int,int[],DataBuffer)|Returns the samples in a specified band for the specified rectangle  of pixels in an int arra
|java.awt.image.ComponentSampleModel.getSampleSize()|Returns the number of bits per sample for all bands.
|java.awt.image.ComponentSampleModel.getSampleSize(int)|Returns the number of bits per sample for the specified band.
|java.awt.image.ComponentSampleModel.getScanlineStride()|Returns the scanline stride of this ComponentSampleModel.
|java.awt.image.ComponentSampleModel.hashCode()|
|java.awt.image.ComponentSampleModel.setDataElements(int,int,Object,DataBuffer)|Sets the data for a single pixel in the specified   DataBuffer from a primitive array of type   Tra
|java.awt.image.ComponentSampleModel.setPixel(int,int,int[],DataBuffer)|Sets a pixel in the DataBuffer using an int array of   samples for input.
|java.awt.image.ComponentSampleModel.setPixels(int,int,int,int,int[],DataBuffer)|Sets all samples for a rectangle of pixels from an int array containing  one sample per array elem
|java.awt.image.ComponentSampleModel.setSample(int,int,int,double,DataBuffer)|Sets a sample in the specified band for the pixel located at (x,y)  in the DataBuffer using a double 
|java.awt.image.ComponentSampleModel.setSample(int,int,int,float,DataBuffer)|Sets a sample in the specified band for the pixel located at (x,y)  in the DataBuffer using a float fo
|java.awt.image.ComponentSampleModel.setSample(int,int,int,int,DataBuffer)|Sets a sample in the specified band for the pixel located at (x,y)  in the DataBuffer using an int for i
|java.awt.image.ComponentSampleModel.setSamples(int,int,int,int,int,int[],DataBuffer)|Sets the samples in the specified band for the specified rectangle  of pixels from an int arr

*java.awt.image.ComponentSampleModel_Description*

This class represents image data which is stored such that each sample of a pixel occupies one data element of the DataBuffer. It stores the N samples which make up a pixel in N 
separate data array elements. Different bands may be in different banks of the DataBuffer. Accessor methods are provided so that image data can be manipulated directly. This class 
can support different kinds of interleaving, e.g. band interleaving, scanline interleaving, and pixel interleaving. Pixel stride is the number of data array elements between two 
samples for the same band on the same scanline. Scanline stride is the number of data array elements between a given sample and the corresponding sample in the same column of the 
next scanline. Band offsets denote the number of data array elements from the first data array element of the bank of the DataBuffer holding each band to the first sample of the 
band. The bands are numbered from 0 to N-1. This class can represent image data for which each sample is an unsigned integral number which can be stored in 8, 16, or 32 bits 
(using DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT, respectively), data for which each sample is a signed integral number which can be stored in 16 bits 
(using DataBuffer.TYPE_SHORT), or data for which each sample is a signed float or double quantity (using DataBuffer.TYPE_FLOAT or DataBuffer.TYPE_DOUBLE, respectively). All 
samples of a given ComponentSampleModel are stored with the same precision. All strides and offsets must be non-negative. This class supports 
TYPE_BYTE(|java.awt.image.DataBuffer|) , TYPE_USHORT(|java.awt.image.DataBuffer|) , TYPE_SHORT(|java.awt.image.DataBuffer|) , TYPE_INT(|java.awt.image.DataBuffer|) , 
TYPE_FLOAT(|java.awt.image.DataBuffer|) , TYPE_DOUBLE(|java.awt.image.DataBuffer|) , 



*int[]_java.awt.image.ComponentSampleModel.bandOffsets*

Offsets for all bands in data array elements. 


*int[]_java.awt.image.ComponentSampleModel.bankIndices*

Index for each bank storing a band of image data. 


*int_java.awt.image.ComponentSampleModel.numBands*

The number of bands in this ComponentSampleModel. 


*int_java.awt.image.ComponentSampleModel.numBanks*

The number of banks in this ComponentSampleModel. 


*int_java.awt.image.ComponentSampleModel.pixelStride*

Pixel stride (in data array elements) of the region of image data described by this ComponentSampleModel. 


*int_java.awt.image.ComponentSampleModel.scanlineStride*

Line stride (in data array elements) of the region of image data described by this ComponentSampleModel. 



*java.awt.image.ComponentSampleModel(int,int,int,int,int,int[])*

public ComponentSampleModel(
  int dataType,
  int w,
  int h,
  int pixelStride,
  int scanlineStride,
  int[] bandOffsets)

Constructs a ComponentSampleModel with the specified parameters. The number of bands will be given by the length of the bandOffsets array. All bands will be stored in the first 
bank of the DataBuffer. 

    dataType - the data type for storing samples 
    w - the width (in pixels) of the region of image data described 
    h - the height (in pixels) of the region of image data described 
    pixelStride - the pixel stride of the region of image data described 
    scanlineStride - the line stride of the region of image data described 
    bandOffsets - the offsets of all bands 

*java.awt.image.ComponentSampleModel(int,int,int,int,int,int[],int[])*

public ComponentSampleModel(
  int dataType,
  int w,
  int h,
  int pixelStride,
  int scanlineStride,
  int[] bankIndices,
  int[] bandOffsets)

Constructs a ComponentSampleModel with the specified parameters. The number of bands will be given by the length of the bandOffsets array. Different bands may be stored in 
different banks of the DataBuffer. 

    dataType - the data type for storing samples 
    w - the width (in pixels) of the region of image data described 
    h - the height (in pixels) of the region of image data described 
    pixelStride - the pixel stride of the region of image data described 
    scanlineStride - The line stride of the region of image data described 
    bankIndices - the bank indices of all bands 
    bandOffsets - the band offsets of all bands 

*java.awt.image.ComponentSampleModel.createCompatibleSampleModel(int,int)*

public |java.awt.image.SampleModel| createCompatibleSampleModel(
  int w,
  int h)

Creates a new ComponentSampleModel with the specified width and height. The new SampleModel will have the same number of bands, storage data type, interleaving scheme, and pixel 
stride as this SampleModel. 


    w - the width of the resulting SampleModel 
    h - the height of the resulting SampleModel 

    Returns: a new ComponentSampleModel with the specified size 

*java.awt.image.ComponentSampleModel.createDataBuffer()*

public |java.awt.image.DataBuffer| createDataBuffer()

Creates a DataBuffer that corresponds to this ComponentSampleModel. The DataBuffer object's data type, number of banks, and size are be consistent with this ComponentSampleModel. 



    Returns: a DataBuffer whose data type, number of banks and size are consistent with this ComponentSampleModel. 

*java.awt.image.ComponentSampleModel.createSubsetSampleModel(int[])*

public |java.awt.image.SampleModel| createSubsetSampleModel(int[] bands)

Creates a new ComponentSampleModel with a subset of the bands of this ComponentSampleModel. The new ComponentSampleModel can be used with any DataBuffer that the existing 
ComponentSampleModel can be used with. The new ComponentSampleModel/DataBuffer combination will represent an image with a subset of the bands of the original 
ComponentSampleModel/DataBuffer combination. 


    bands - a subset of bands from this ComponentSampleModel 

    Returns: a ComponentSampleModel created with a subset of bands from this ComponentSampleModel. 

*java.awt.image.ComponentSampleModel.equals(Object)*

public boolean equals(java.lang.Object o)





*java.awt.image.ComponentSampleModel.getBandOffsets()*

public final int[] getBandOffsets()

Returns the band offset for all bands. 



    Returns: the band offsets for all bands. 

*java.awt.image.ComponentSampleModel.getBankIndices()*

public final int[] getBankIndices()

Returns the bank indices for all bands. 



    Returns: the bank indices for all bands. 

*java.awt.image.ComponentSampleModel.getDataElements(int,int,Object,DataBuffer)*

public |java.lang.Object| getDataElements(
  int x,
  int y,
  java.lang.Object obj,
  java.awt.image.DataBuffer data)

Returns data for a single pixel in a primitive array of type TransferType. For a ComponentSampleModel, this is the same as the data type, and samples are returned one per array 
element. Generally, obj should be passed in as null, so that the Object is created automatically and is the right primitive data type. 

The following code illustrates transferring data for one pixel from DataBuffer db1, whose storage layout is described by ComponentSampleModel csm1, to DataBuffer db2, whose 
storage layout is described by ComponentSampleModel csm2. The transfer is usually more efficient than using getPixel and setPixel. 

ComponentSampleModel csm1, csm2; DataBufferInt db1, db2; csm2.setDataElements(x, y, csm1.getDataElements(x, y, null, db1), db2); 

Using getDataElements and setDataElements to transfer between two DataBuffer/SampleModel pairs is legitimate if the SampleModel objects have the same number of bands, 
corresponding bands have the same number of bits per sample, and the TransferTypes are the same. 

If obj is not null, it should be a primitive array of type TransferType. Otherwise, a ClassCastException is thrown. An ArrayIndexOutOfBoundsException might be thrown if the 
coordinates are not in bounds, or if obj is not null and is not large enough to hold the pixel data. 


    x,&nbsp;y - the coordinates of the pixel location 
    obj - if non-null, a primitive array in which to return the pixel data 
    data - the DataBuffer containing the image data 

    Returns: the data of the specified pixel 

*java.awt.image.ComponentSampleModel.getNumDataElements()*

public final int getNumDataElements()

Returns the number of data elements needed to transfer a pixel with the (|java.awt.image.ComponentSampleModel|) and (|java.awt.image.ComponentSampleModel|) methods. For a 
ComponentSampleModel, this is identical to the number of bands. 



    Returns: the number of data elements needed to transfer a pixel with the getDataElements and setDataElements methods. 

*java.awt.image.ComponentSampleModel.getOffset(int,int)*

public int getOffset(
  int x,
  int y)

Gets the offset for the first band of pixel (x,y). A sample of the first band can be retrieved from a DataBuffer data with a ComponentSampleModel csm as 

data.getElem(csm.getOffset(x, y)); 


    x,&nbsp;y - the location of the pixel 

    Returns: the offset for the first band of the specified pixel. 

*java.awt.image.ComponentSampleModel.getOffset(int,int,int)*

public int getOffset(
  int x,
  int y,
  int b)

Gets the offset for band b of pixel (x,y). A sample of band b can be retrieved from a DataBuffer data with a ComponentSampleModel csm as 

data.getElem(csm.getOffset(x, y, b)); 


    x,&nbsp;y - the location of the specified pixel 
    b - the specified band 

    Returns: the offset for the specified band of the specified pixel. 

*java.awt.image.ComponentSampleModel.getPixel(int,int,int[],DataBuffer)*

public int[] getPixel(
  int x,
  int y,
  int[] iArray,
  java.awt.image.DataBuffer data)

Returns all samples for the specified pixel in an int array, one sample per array element. An ArrayIndexOutOfBoundsException might be thrown if the coordinates are not in bounds. 


    x,&nbsp;y - The coordinates of the pixel location 
    iArray - If non-null, returns the samples in this array 
    data - The DataBuffer containing the image data 

    Returns: the samples of the specified pixel. 

*java.awt.image.ComponentSampleModel.getPixels(int,int,int,int,int[],DataBuffer)*

public int[] getPixels(
  int x,
  int y,
  int w,
  int h,
  int[] iArray,
  java.awt.image.DataBuffer data)

Returns all samples for the specified rectangle of pixels in an int array, one sample per array element. An ArrayIndexOutOfBoundsException might be thrown if the coordinates are 
not in bounds. 


    x,&nbsp;y - the coordinates of the upper left pixel location 
    w - The width of the pixel rectangle 
    h - The height of the pixel rectangle 
    iArray - If non-null, returns the samples in this array 
    data - The DataBuffer containing the image data 

    Returns: the samples of the pixels within the specified region. 

*java.awt.image.ComponentSampleModel.getPixelStride()*

public final int getPixelStride()

Returns the pixel stride of this ComponentSampleModel. 



    Returns: the pixel stride of this ComponentSampleModel. 

*java.awt.image.ComponentSampleModel.getSample(int,int,int,DataBuffer)*

public int getSample(
  int x,
  int y,
  int b,
  java.awt.image.DataBuffer data)

Returns as int the sample in a specified band for the pixel located at (x,y). An ArrayIndexOutOfBoundsException might be thrown if the coordinates are not in bounds. 


    x,&nbsp;y - the coordinates of the pixel location 
    b - the band to return 
    data - the DataBuffer containing the image data 

    Returns: the sample in a specified band for the specified pixel 

*java.awt.image.ComponentSampleModel.getSampleDouble(int,int,int,DataBuffer)*

public double getSampleDouble(
  int x,
  int y,
  int b,
  java.awt.image.DataBuffer data)

Returns the sample in a specified band for a pixel located at (x,y) as a double. An ArrayIndexOutOfBoundsException might be thrown if the coordinates are not in bounds. 


    x,&nbsp;y - The coordinates of the pixel location 
    b - The band to return 
    data - The DataBuffer containing the image data 

    Returns: a double value representing the sample in the specified band for the specified pixel. 

*java.awt.image.ComponentSampleModel.getSampleFloat(int,int,int,DataBuffer)*

public float getSampleFloat(
  int x,
  int y,
  int b,
  java.awt.image.DataBuffer data)

Returns the sample in a specified band for the pixel located at (x,y) as a float. An ArrayIndexOutOfBoundsException might be thrown if the coordinates are not in bounds. 


    x,&nbsp;y - The coordinates of the pixel location 
    b - The band to return 
    data - The DataBuffer containing the image data 

    Returns: a float value representing the sample in the specified band for the specified pixel. 

*java.awt.image.ComponentSampleModel.getSamples(int,int,int,int,int,int[],DataBuffer)*

public int[] getSamples(
  int x,
  int y,
  int w,
  int h,
  int b,
  int[] iArray,
  java.awt.image.DataBuffer data)

Returns the samples in a specified band for the specified rectangle of pixels in an int array, one sample per data array element. An ArrayIndexOutOfBoundsException might be thrown 
if the coordinates are not in bounds. 


    x,&nbsp;y - the coordinates of the upper left pixel location 
    w - the width of the pixel rectangle 
    h - the height of the pixel rectangle 
    b - the band to return 
    iArray - if non-null, returns the samples in this array 
    data - the DataBuffer containing the image data 

    Returns: the samples in the specified band of the specified pixel 

*java.awt.image.ComponentSampleModel.getSampleSize()*

public final int[] getSampleSize()

Returns the number of bits per sample for all bands. 



    Returns: an array containing the number of bits per sample for all bands, where each element in the array represents a band. 

*java.awt.image.ComponentSampleModel.getSampleSize(int)*

public final int getSampleSize(int band)

Returns the number of bits per sample for the specified band. 


    band - the specified band 

    Returns: the number of bits per sample for the specified band. 

*java.awt.image.ComponentSampleModel.getScanlineStride()*

public final int getScanlineStride()

Returns the scanline stride of this ComponentSampleModel. 



    Returns: the scanline stride of this ComponentSampleModel. 

*java.awt.image.ComponentSampleModel.hashCode()*

public int hashCode()





*java.awt.image.ComponentSampleModel.setDataElements(int,int,Object,DataBuffer)*

public void setDataElements(
  int x,
  int y,
  java.lang.Object obj,
  java.awt.image.DataBuffer data)

Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType. For a ComponentSampleModel, this is the same as the data type, and 
samples are transferred one per array element. 

The following code illustrates transferring data for one pixel from DataBuffer db1, whose storage layout is described by ComponentSampleModel csm1, to DataBuffer db2, whose 
storage layout is described by ComponentSampleModel csm2. The transfer is usually more efficient than using getPixel and setPixel. 

ComponentSampleModel csm1, csm2; DataBufferInt db1, db2; csm2.setDataElements(x, y, csm1.getDataElements(x, y, null, db1), db2); 

Using getDataElements and setDataElements to transfer between two DataBuffer/SampleModel pairs is legitimate if the SampleModel objects have the same number of bands, 
corresponding bands have the same number of bits per sample, and the TransferTypes are the same. 

A ClassCastException is thrown if obj is not a primitive array of type TransferType. An ArrayIndexOutOfBoundsException might be thrown if the coordinates are not in bounds, or if 
obj is not large enough to hold the pixel data. 


    x,&nbsp;y - the coordinates of the pixel location 
    obj - a primitive array containing pixel data 
    data - the DataBuffer containing the image data 

*java.awt.image.ComponentSampleModel.setPixel(int,int,int[],DataBuffer)*

public void setPixel(
  int x,
  int y,
  int[] iArray,
  java.awt.image.DataBuffer data)

Sets a pixel in the DataBuffer using an int array of samples for input. An ArrayIndexOutOfBoundsException might be thrown if the coordinates are not in bounds. 


    x,&nbsp;y - The coordinates of the pixel location 
    iArray - The input samples in an int array 
    data - The DataBuffer containing the image data 

*java.awt.image.ComponentSampleModel.setPixels(int,int,int,int,int[],DataBuffer)*

public void setPixels(
  int x,
  int y,
  int w,
  int h,
  int[] iArray,
  java.awt.image.DataBuffer data)

Sets all samples for a rectangle of pixels from an int array containing one sample per array element. An ArrayIndexOutOfBoundsException might be thrown if the coordinates are not 
in bounds. 


    x,&nbsp;y - The coordinates of the upper left pixel location 
    w - The width of the pixel rectangle 
    h - The height of the pixel rectangle 
    iArray - The input samples in an int array 
    data - The DataBuffer containing the image data 

*java.awt.image.ComponentSampleModel.setSample(int,int,int,double,DataBuffer)*

public void setSample(
  int x,
  int y,
  int b,
  double s,
  java.awt.image.DataBuffer data)

Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input. An ArrayIndexOutOfBoundsException might be thrown if the coordinates 
are not in bounds. 


    x,&nbsp;y - The coordinates of the pixel location 
    b - The band to set 
    s - The input sample as a double 
    data - The DataBuffer containing the image data 

*java.awt.image.ComponentSampleModel.setSample(int,int,int,float,DataBuffer)*

public void setSample(
  int x,
  int y,
  int b,
  float s,
  java.awt.image.DataBuffer data)

Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input. An ArrayIndexOutOfBoundsException might be thrown if the coordinates 
are not in bounds. 


    x,&nbsp;y - The coordinates of the pixel location 
    b - The band to set 
    s - The input sample as a float 
    data - The DataBuffer containing the image data 

*java.awt.image.ComponentSampleModel.setSample(int,int,int,int,DataBuffer)*

public void setSample(
  int x,
  int y,
  int b,
  int s,
  java.awt.image.DataBuffer data)

Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input. An ArrayIndexOutOfBoundsException might be thrown if the coordinates 
are not in bounds. 


    x,&nbsp;y - the coordinates of the pixel location 
    b - the band to set 
    s - the input sample as an int 
    data - the DataBuffer containing the image data 

*java.awt.image.ComponentSampleModel.setSamples(int,int,int,int,int,int[],DataBuffer)*

public void setSamples(
  int x,
  int y,
  int w,
  int h,
  int b,
  int[] iArray,
  java.awt.image.DataBuffer data)

Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per data array element. An ArrayIndexOutOfBoundsException 
might be thrown if the coordinates are not in bounds. 


    x,&nbsp;y - The coordinates of the upper left pixel location 
    w - The width of the pixel rectangle 
    h - The height of the pixel rectangle 
    b - The band to set 
    iArray - The input samples in an int array 
    data - The DataBuffer containing the image data 



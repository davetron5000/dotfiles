*javax.management.modelmbean.ModelMBean* *ModelMBean* This interface must be imp

public interface interface ModelMBean

  implements |javax.management.DynamicMBean|
             |javax.management.PersistentMBean|
             |javax.management.modelmbean.ModelMBeanNotificationBroadcaster|

|javax.management.modelmbean.ModelMBean_Description|
|javax.management.modelmbean.ModelMBean_Fields|
|javax.management.modelmbean.ModelMBean_Constructors|
|javax.management.modelmbean.ModelMBean_Methods|

================================================================================

*javax.management.modelmbean.ModelMBean_Methods*
|javax.management.modelmbean.ModelMBean.setManagedResource(Object,String)|Sets 
|javax.management.modelmbean.ModelMBean.setModelMBeanInfo(ModelMBeanInfo)|Initi

*javax.management.modelmbean.ModelMBean_Description*

This interface must be implemented by the ModelMBeans. An implementation of 
this interface must be shipped with every JMX Agent. 

Java resources wishing to be manageable instantiate the ModelMBean using the 
MBeanServer's createMBean method. The resource then sets the ModelMBeanInfo 
(with Descriptors) for the ModelMBean instance. The attributes and operations 
exposed via the ModelMBeanInfo for the ModelMBean are accessible from MBeans, 
connectors/adaptors like other MBeans. Through the ModelMBeanInfo Descriptors, 
values and methods in the managed application can be defined and mapped to 
attributes and operations of the ModelMBean. This mapping can be defined during 
development in an XML formatted file or dynamically and programmatically at 
runtime. 

Every ModelMBean which is instantiated in the MBeanServer becomes manageable: 
its attributes and operations become remotely accessible through the 
connectors/adaptors connected to that MBeanServer. A Java object cannot be 
registered in the MBeanServer unless it is a JMX compliant MBean. By 
instantiating a ModelMBean, resources are guaranteed that the MBean is valid. 

MBeanException and RuntimeOperationsException must be thrown on every public 
method. This allows for wrapping exceptions from distributed communications 
(RMI, EJB, etc.). These exceptions do not have to be thrown by the 
implementation except in the scenarios described in the specification and 
javadoc. 


*javax.management.modelmbean.ModelMBean.setManagedResource(Object,String)*

public void setManagedResource(
  java.lang.Object mr,
  java.lang.String mr_type)
  throws |javax.management.InstanceNotFoundException|
         |javax.management.modelmbean.InvalidTargetObjectTypeException|
         |javax.management.MBeanException|
         |javax.management.RuntimeOperationsException|
         
Sets the instance handle of the object against which to execute all methods in 
this ModelMBean management interface (MBeanInfo and Descriptors). 

    mr - Object that is the managed resource 
    mr_type - The type of reference for the managed resource. Can be: ObjectReference, 
       Handle, IOR, EJBHandle, RMIReference. If the MBeanServer cannot process 
       the mr_type passed in, an InvalidTargetTypeException will be thrown. 

*javax.management.modelmbean.ModelMBean.setModelMBeanInfo(ModelMBeanInfo)*

public void setModelMBeanInfo(javax.management.modelmbean.ModelMBeanInfo inModelMBeanInfo)
  throws |javax.management.MBeanException|
         |javax.management.RuntimeOperationsException|
         
Initializes a ModelMBean object using ModelMBeanInfo passed in. This method 
makes it possible to set a customized ModelMBeanInfo on the ModelMBean as long 
as it is not registered with the MBeanServer. 

Once the ModelMBean's ModelMBeanInfo (with Descriptors) are customized and set 
on the ModelMBean, the ModelMBean can be registered with the MBeanServer. 

If the ModelMBean is currently registered, this method throws a 
(|javax.management.RuntimeOperationsException|) wrapping an 
(|java.lang.IllegalStateException|) 

    inModelMBeanInfo - The ModelMBeanInfo object to be used by the ModelMBean. 



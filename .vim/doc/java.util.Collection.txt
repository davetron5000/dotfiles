*java.util.Collection* *Collection* The root interface in the collection hierarc

public interface interface Collection

  implements |java.lang.Iterable|

|java.util.Collection_Description|
|java.util.Collection_Fields|
|java.util.Collection_Constructors|
|java.util.Collection_Methods|

================================================================================

*java.util.Collection_Methods*
|java.util.Collection.add(E)|Ensures that this collection contains the specifie
|java.util.Collection.addAll(Collection)|Adds all of the elements in the specif
|java.util.Collection.clear()|Removes all of the elements from this collection 
|java.util.Collection.contains(Object)|Returns true if this collection contains
|java.util.Collection.containsAll(Collection)|Returns true if this collection c
|java.util.Collection.equals(Object)|Compares the specified object with this co
|java.util.Collection.hashCode()|Returns the hash code value for this collectio
|java.util.Collection.isEmpty()|Returns true if this collection contains no ele
|java.util.Collection.iterator()|Returns an iterator over the elements in this 
|java.util.Collection.remove(Object)|Removes a single instance of the specified
|java.util.Collection.removeAll(Collection)|Removes all this collection's eleme
|java.util.Collection.retainAll(Collection)|Retains only the elements in this c
|java.util.Collection.size()|Returns the number of elements in this collection.
|java.util.Collection.toArray()|Returns an array containing all of the elements
|java.util.Collection.toArray(T[])|Returns an array containing all of the eleme

*java.util.Collection_Description*

The root interface in the collection hierarchy. A collection represents a group 
of objects, known as its elements. Some collections allow duplicate elements 
and others do not. Some are ordered and others unordered. The JDK does not 
provide any direct implementations of this interface: it provides 
implementations of more specific subinterfaces like Set and List. This 
interface is typically used to pass collections around and manipulate them 
where maximum generality is desired. 

Bags or multisets (unordered collections that may contain duplicate elements) 
should implement this interface directly. 

All general-purpose Collection implementation classes (which typically 
implement Collection indirectly through one of its subinterfaces) should 
provide two "standard" constructors: a void (no arguments) constructor, which 
creates an empty collection, and a constructor with a single argument of type 
Collection, which creates a new collection with the same elements as its 
argument. In effect, the latter constructor allows the user to copy any 
collection, producing an equivalent collection of the desired implementation 
type. There is no way to enforce this convention (as interfaces cannot contain 
constructors) but all of the general-purpose Collection implementations in the 
Java platform libraries comply. 

The "destructive" methods contained in this interface, that is, the methods 
that modify the collection on which they operate, are specified to throw 
UnsupportedOperationException if this collection does not support the 
operation. If this is the case, these methods may, but are not required to, 
throw an UnsupportedOperationException if the invocation would have no effect 
on the collection. For example, invoking the (|java.util.Collection|) method on 
an unmodifiable collection may, but is not required to, throw the exception if 
the collection to be added is empty. 

Some collection implementations have restrictions on the elements that they may 
contain. For example, some implementations prohibit null elements, and some 
have restrictions on the types of their elements. Attempting to add an 
ineligible element throws an unchecked exception, typically 
NullPointerException or ClassCastException. Attempting to query the presence of 
an ineligible element may throw an exception, or it may simply return false; 
some implementations will exhibit the former behavior and some will exhibit the 
latter. More generally, attempting an operation on an ineligible element whose 
completion would not result in the insertion of an ineligible element into the 
collection may throw an exception or it may succeed, at the option of the 
implementation. Such exceptions are marked as "optional" in the specification 
for this interface. 

This interface is a member of the <a href="/../guide/collections/index.html"> 
Java Collections Framework. 

Many methods in Collections Framework interfaces are defined in terms of the 
equals(|java.lang.Object|) method. For example, the specification for the 
contains(Object o)(|java.util.Collection|) method says: "returns true if and 
only if this collection contains at least one element e such that (o==null ? 
e==null : o.equals(e))." This specification should not be construed to imply 
that invoking Collection.contains with a non-null argument o will cause 
o.equals(e) to be invoked for any element e. Implementations are free to 
implement optimizations whereby the equals invocation is avoided, for example, 
by first comparing the hash codes of the two elements. (The 
(|java.lang.Object|) specification guarantees that two objects with unequal 
hash codes cannot be equal.) More generally, implementations of the various 
Collections Framework interfaces are free to take advantage of the specified 
behavior of underlying (|java.lang.Object|) methods wherever the implementor 
deems it appropriate. 


*java.util.Collection.add(E)*

public boolean add(java.lang.Object o)

Ensures that this collection contains the specified element (optional 
operation). Returns true if this collection changed as a result of the call. 
(Returns false if this collection does not permit duplicates and already 
contains the specified element.) 

Collections that support this operation may place limitations on what elements 
may be added to this collection. In particular, some collections will refuse to 
add null elements, and others will impose restrictions on the type of elements 
that may be added. Collection classes should clearly specify in their 
documentation any restrictions on what elements may be added. 

If a collection refuses to add a particular element for any reason other than 
that it already contains the element, it must throw an exception (rather than 
returning false). This preserves the invariant that a collection always 
contains the specified element after this call returns. 

    o - element whose presence in this collection is to be ensured. 

    Returns: true if this collection changed as a result of the call 
*java.util.Collection.addAll(Collection)*

public boolean addAll(java.util.Collection c)

Adds all of the elements in the specified collection to this collection 
(optional operation). The behavior of this operation is undefined if the 
specified collection is modified while the operation is in progress. (This 
implies that the behavior of this call is undefined if the specified collection 
is this collection, and this collection is nonempty.) 

    c - elements to be inserted into this collection. 

    Returns: true if this collection changed as a result of the call 
*java.util.Collection.clear()*

public void clear()

Removes all of the elements from this collection (optional operation). This 
collection will be empty after this method returns unless it throws an 
exception. 


*java.util.Collection.contains(Object)*

public boolean contains(java.lang.Object o)

Returns true if this collection contains the specified element. More formally, 
returns true if and only if this collection contains at least one element e 
such that (o==null ? e==null : o.equals(e)). 

    o - element whose presence in this collection is to be tested. 

    Returns: true if this collection contains the specified element 
*java.util.Collection.containsAll(Collection)*

public boolean containsAll(java.util.Collection c)

Returns true if this collection contains all of the elements in the specified 
collection. 

    c - collection to be checked for containment in this collection. 

    Returns: true if this collection contains all of the elements in the specified 
             collection 
*java.util.Collection.equals(Object)*

public boolean equals(java.lang.Object o)

Compares the specified object with this collection for equality. 

While the Collection interface adds no stipulations to the general contract for 
the Object.equals, programmers who implement the Collection interface 
"directly" (in other words, create a class that is a Collection but is not a 
Set or a List) must exercise care if they choose to override the Object.equals. 
It is not necessary to do so, and the simplest course of action is to rely on 
Object's implementation, but the implementer may wish to implement a "value 
comparison" in place of the default "reference comparison." (The List and Set 
interfaces mandate such value comparisons.) 

The general contract for the Object.equals method states that equals must be 
symmetric (in other words, a.equals(b) if and only if b.equals(a)). The 
contracts for List.equals and Set.equals state that lists are only equal to 
other lists, and sets to other sets. Thus, a custom equals method for a 
collection class that implements neither the List nor Set interface must return 
false when this collection is compared to any list or set. (By the same logic, 
it is not possible to write a class that correctly implements both the Set and 
List interfaces.) 

    o - Object to be compared for equality with this collection. 

    Returns: true if the specified object is equal to this collection 
*java.util.Collection.hashCode()*

public int hashCode()

Returns the hash code value for this collection. While the Collection interface 
adds no stipulations to the general contract for the Object.hashCode method, 
programmers should take note that any class that overrides the Object.equals 
method must also override the Object.hashCode method in order to satisfy the 
general contract for the Object.hashCodemethod. In particular, c1.equals(c2) 
implies that c1.hashCode()==c2.hashCode(). 


    Returns: the hash code value for this collection 
*java.util.Collection.isEmpty()*

public boolean isEmpty()

Returns true if this collection contains no elements. 


    Returns: true if this collection contains no elements 
*java.util.Collection.iterator()*

public |java.util.Iterator| iterator()

Returns an iterator over the elements in this collection. There are no 
guarantees concerning the order in which the elements are returned (unless this 
collection is an instance of some class that provides a guarantee). 


    Returns: an Iterator over the elements in this collection 
*java.util.Collection.remove(Object)*

public boolean remove(java.lang.Object o)

Removes a single instance of the specified element from this collection, if it 
is present (optional operation). More formally, removes an element e such that 
(o==null ? e==null : o.equals(e)), if this collection contains one or more such 
elements. Returns true if this collection contained the specified element (or 
equivalently, if this collection changed as a result of the call). 

    o - element to be removed from this collection, if present. 

    Returns: true if this collection changed as a result of the call 
*java.util.Collection.removeAll(Collection)*

public boolean removeAll(java.util.Collection c)

Removes all this collection's elements that are also contained in the specified 
collection (optional operation). After this call returns, this collection will 
contain no elements in common with the specified collection. 

    c - elements to be removed from this collection. 

    Returns: true if this collection changed as a result of the call 
*java.util.Collection.retainAll(Collection)*

public boolean retainAll(java.util.Collection c)

Retains only the elements in this collection that are contained in the 
specified collection (optional operation). In other words, removes from this 
collection all of its elements that are not contained in the specified 
collection. 

    c - elements to be retained in this collection. 

    Returns: true if this collection changed as a result of the call 
*java.util.Collection.size()*

public int size()

Returns the number of elements in this collection. If this collection contains 
more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE. 


    Returns: the number of elements in this collection 
*java.util.Collection.toArray()*

public |java.lang.Object| toArray()

Returns an array containing all of the elements in this collection. If the 
collection makes any guarantees as to what order its elements are returned by 
its iterator, this method must return the elements in the same order. 

The returned array will be "safe" in that no references to it are maintained by 
this collection. (In other words, this method must allocate a new array even if 
this collection is backed by an array). The caller is thus free to modify the 
returned array. 

This method acts as bridge between array-based and collection-based APIs. 


    Returns: an array containing all of the elements in this collection 
*java.util.Collection.toArray(T[])*

public |java.lang.Object| toArray(java.lang.Object[] a)

Returns an array containing all of the elements in this collection; the runtime 
type of the returned array is that of the specified array. If the collection 
fits in the specified array, it is returned therein. Otherwise, a new array is 
allocated with the runtime type of the specified array and the size of this 
collection. 

If this collection fits in the specified array with room to spare (i.e., the 
array has more elements than this collection), the element in the array 
immediately following the end of the collection is set to null. This is useful 
in determining the length of this collection only if the caller knows that this 
collection does not contain any null elements.) 

If this collection makes any guarantees as to what order its elements are 
returned by its iterator, this method must return the elements in the same 
order. 

Like the toArray method, this method acts as bridge between array-based and 
collection-based APIs. Further, this method allows precise control over the 
runtime type of the output array, and may, under certain circumstances, be used 
to save allocation costs 

Suppose l is a List known to contain only strings. The following code can be 
used to dump the list into a newly allocated array of String: 



String[] x = (String[]) v.toArray(new String[0]); 

Note that toArray(new Object[0]) is identical in function to toArray(). 

    a - the array into which the elements of this collection are to be stored, if it is 
       big enough; otherwise, a new array of the same runtime type is allocated 
       for this purpose. 

    Returns: an array containing the elements of this collection 


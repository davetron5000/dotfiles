*java.io.Reader* *Reader* Abstract class for reading character streams.

public abstract class Reader
  extends    |java.lang.Object|
  implements |java.lang.Readable|
             |java.io.Closeable|

|java.io.Reader_Description|
|java.io.Reader_Fields|
|java.io.Reader_Constructors|
|java.io.Reader_Methods|

====================================================================================================================================================================================

*java.io.Reader_Fields*
|java.lang.Object_java.io.Reader.lock|

*java.io.Reader_Constructors*
|java.io.Reader()|Create a new character-stream reader whose critical sections will  synchronize on the reader itself.
|java.io.Reader(Object)|Create a new character-stream reader whose critical sections will  synchronize on the given object.

*java.io.Reader_Methods*
|java.io.Reader.close()|Close the stream.
|java.io.Reader.mark(int)|Mark the present position in the stream.
|java.io.Reader.markSupported()|Tell whether this stream supports the mark() operation.
|java.io.Reader.read()|Read a single character.
|java.io.Reader.read(char[])|Read characters into an array.
|java.io.Reader.read(char[],int,int)|Read characters into a portion of an array.
|java.io.Reader.read(CharBuffer)|Attempts to read characters into the specified character buffer.
|java.io.Reader.ready()|Tell whether this stream is ready to be read.
|java.io.Reader.reset()|Reset the stream.
|java.io.Reader.skip(long)|Skip characters.

*java.io.Reader_Description*

Abstract class for reading character streams. The only methods that a subclass must implement are read(char[], int, int) and close(). Most subclasses, however, will override some 
of the methods defined here in order to provide higher efficiency, additional functionality, or both. 



*java.lang.Object_java.io.Reader.lock*

The object used to synchronize operations on this stream. For efficiency, a character-stream object may use an object other than itself to protect critical sections. A subclass 
should therefore use the object in this field rather than this or a synchronized method. 



*java.io.Reader()*

protected Reader()

Create a new character-stream reader whose critical sections will synchronize on the reader itself. 


*java.io.Reader(Object)*

protected Reader(java.lang.Object lock)

Create a new character-stream reader whose critical sections will synchronize on the given object. 

    lock - The Object to synchronize on. 

*java.io.Reader.close()*

public abstract void close()
  throws |java.io.IOException|
         
Close the stream. Once a stream has been closed, further read(), ready(), mark(), or reset() invocations will throw an IOException. Closing a previously-closed stream, however, 
has no effect. 



*java.io.Reader.mark(int)*

public void mark(int readAheadLimit)
  throws |java.io.IOException|
         
Mark the present position in the stream. Subsequent calls to reset() will attempt to reposition the stream to this point. Not all character-input streams support the mark() 
operation. 


    readAheadLimit - Limit on the number of characters that may be read while still preserving the mark. After reading this many characters, attempting to reset the stream may fail. 

*java.io.Reader.markSupported()*

public boolean markSupported()

Tell whether this stream supports the mark() operation. The default implementation always returns false. Subclasses should override this method. 



    Returns: true if and only if this stream supports the mark operation. 

*java.io.Reader.read()*

public int read()
  throws |java.io.IOException|
         
Read a single character. This method will block until a character is available, an I/O error occurs, or the end of the stream is reached. 

Subclasses that intend to support efficient single-character input should override this method. 



    Returns: The character read, as an integer in the range 0 to 65535 (0x00-0xffff), or -1 if the end of the stream has been reached 

*java.io.Reader.read(char[])*

public int read(char[] cbuf)
  throws |java.io.IOException|
         
Read characters into an array. This method will block until some input is available, an I/O error occurs, or the end of the stream is reached. 


    cbuf - Destination buffer 

    Returns: The number of characters read, or -1 if the end of the stream has been reached 

*java.io.Reader.read(char[],int,int)*

public abstract int read(
  char[] cbuf,
  int off,
  int len)
  throws |java.io.IOException|
         
Read characters into a portion of an array. This method will block until some input is available, an I/O error occurs, or the end of the stream is reached. 


    cbuf - Destination buffer 
    off - Offset at which to start storing characters 
    len - Maximum number of characters to read 

    Returns: The number of characters read, or -1 if the end of the stream has been reached 

*java.io.Reader.read(CharBuffer)*

public int read(java.nio.CharBuffer target)
  throws |java.io.IOException|
         
Attempts to read characters into the specified character buffer. The buffer is used as a repository of characters as-is: the only changes made are the results of a put operation. 
No flipping or rewinding of the buffer is performed. 


    target - the buffer to read characters into 

    Returns: The number of characters added to the buffer, or -1 if this source of characters is at its end 

*java.io.Reader.ready()*

public boolean ready()
  throws |java.io.IOException|
         
Tell whether this stream is ready to be read. 



    Returns: True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block. 

*java.io.Reader.reset()*

public void reset()
  throws |java.io.IOException|
         
Reset the stream. If the stream has been marked, then attempt to reposition it at the mark. If the stream has not been marked, then attempt to reset it in some way appropriate to 
the particular stream, for example by repositioning it to its starting point. Not all character-input streams support the reset() operation, and some support reset() without 
supporting mark(). 



*java.io.Reader.skip(long)*

public long skip(long n)
  throws |java.io.IOException|
         
Skip characters. This method will block until some characters are available, an I/O error occurs, or the end of the stream is reached. 


    n - The number of characters to skip 

    Returns: The number of characters actually skipped 



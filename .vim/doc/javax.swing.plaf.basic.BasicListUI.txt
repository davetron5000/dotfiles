*javax.swing.plaf.basic.BasicListUI* *BasicListUI* A Windows Limplementation of 

public class BasicListUI
  extends    |javax.swing.plaf.ListUI|

|javax.swing.plaf.basic.BasicListUI_Description|
|javax.swing.plaf.basic.BasicListUI_Fields|
|javax.swing.plaf.basic.BasicListUI_Constructors|
|javax.swing.plaf.basic.BasicListUI_Methods|

================================================================================

*javax.swing.plaf.basic.BasicListUI_Fields*
|int_javax.swing.plaf.basic.BasicListUI.cellHeight|
|int[]_javax.swing.plaf.basic.BasicListUI.cellHeights|
|int_javax.swing.plaf.basic.BasicListUI.cellRendererChanged|
|int_javax.swing.plaf.basic.BasicListUI.cellWidth|
|int_javax.swing.plaf.basic.BasicListUI.fixedCellHeightChanged|
|int_javax.swing.plaf.basic.BasicListUI.fixedCellWidthChanged|
|java.awt.event.FocusListener_javax.swing.plaf.basic.BasicListUI.focusListener|
|int_javax.swing.plaf.basic.BasicListUI.fontChanged|
|javax.swing.JList_javax.swing.plaf.basic.BasicListUI.list|
|javax.swing.event.ListDataListener_javax.swing.plaf.basic.BasicListUI.listDataListener|
|javax.swing.event.ListSelectionListener_javax.swing.plaf.basic.BasicListUI.listSelectionListener|
|int_javax.swing.plaf.basic.BasicListUI.modelChanged|
|javax.swing.event.MouseInputListener_javax.swing.plaf.basic.BasicListUI.mouseInputListener|
|java.beans.PropertyChangeListener_javax.swing.plaf.basic.BasicListUI.propertyChangeListener|
|int_javax.swing.plaf.basic.BasicListUI.prototypeCellValueChanged|
|javax.swing.CellRendererPane_javax.swing.plaf.basic.BasicListUI.rendererPane|
|int_javax.swing.plaf.basic.BasicListUI.selectionModelChanged|
|int_javax.swing.plaf.basic.BasicListUI.updateLayoutStateNeeded|

*javax.swing.plaf.basic.BasicListUI_Constructors*
|javax.swing.plaf.basic.BasicListUI()|

*javax.swing.plaf.basic.BasicListUI_Methods*
|javax.swing.plaf.basic.BasicListUI.convertRowToY(int)|Return the JList relativ
|javax.swing.plaf.basic.BasicListUI.convertYToRow(int)|Convert the JList relati
|javax.swing.plaf.basic.BasicListUI.createFocusListener()|
|javax.swing.plaf.basic.BasicListUI.createListDataListener()|Creates an instanc
|javax.swing.plaf.basic.BasicListUI.createListSelectionListener()|Creates an in
|javax.swing.plaf.basic.BasicListUI.createMouseInputListener()|Creates a delega
|javax.swing.plaf.basic.BasicListUI.createPropertyChangeListener()|Creates an i
|javax.swing.plaf.basic.BasicListUI.createUI(JComponent)|Returns a new instance
|javax.swing.plaf.basic.BasicListUI.getCellBounds(JList,int,int)|
|javax.swing.plaf.basic.BasicListUI.getPreferredSize(JComponent)|The preferredS
|javax.swing.plaf.basic.BasicListUI.getRowHeight(int)|Returns the height of the
|javax.swing.plaf.basic.BasicListUI.indexToLocation(JList,int)|
|javax.swing.plaf.basic.BasicListUI.installDefaults()|Initialize JList properti
|javax.swing.plaf.basic.BasicListUI.installKeyboardActions()|Registers the keyb
|javax.swing.plaf.basic.BasicListUI.installListeners()|Create and install the l
|javax.swing.plaf.basic.BasicListUI.installUI(JComponent)|Initializes this.list
|javax.swing.plaf.basic.BasicListUI.locationToIndex(JList,Point)|Convert a poin
|javax.swing.plaf.basic.BasicListUI.maybeUpdateLayoutState()|If updateLayoutSta
|javax.swing.plaf.basic.BasicListUI.paint(Graphics,JComponent)|Paint the rows t
|javax.swing.plaf.basic.BasicListUI.paintCell(Graphics,int,Rectangle,ListCellRenderer,ListModel,ListSelectionModel,int)|
|javax.swing.plaf.basic.BasicListUI.selectNextIndex()|Selected the previous row
|javax.swing.plaf.basic.BasicListUI.selectPreviousIndex()|Selected the previous
|javax.swing.plaf.basic.BasicListUI.uninstallDefaults()|Set the JList propertie
|javax.swing.plaf.basic.BasicListUI.uninstallKeyboardActions()|Unregisters keyb
|javax.swing.plaf.basic.BasicListUI.uninstallListeners()|Remove the listeners f
|javax.swing.plaf.basic.BasicListUI.uninstallUI(JComponent)|Uninitializes this.
|javax.swing.plaf.basic.BasicListUI.updateLayoutState()|Recompute the value of 

*javax.swing.plaf.basic.BasicListUI_Description*

A Windows Limplementation of ListUI. 


*int_javax.swing.plaf.basic.BasicListUI.cellHeight*

A Windows Limplementation of ListUI. 


*int[]_javax.swing.plaf.basic.BasicListUI.cellHeights*

A Windows Limplementation of ListUI. 


*int_javax.swing.plaf.basic.BasicListUI.cellRendererChanged*

A Windows Limplementation of ListUI. 


*int_javax.swing.plaf.basic.BasicListUI.cellWidth*

A Windows Limplementation of ListUI. 


*int_javax.swing.plaf.basic.BasicListUI.fixedCellHeightChanged*

A Windows Limplementation of ListUI. 


*int_javax.swing.plaf.basic.BasicListUI.fixedCellWidthChanged*

A Windows Limplementation of ListUI. 


*java.awt.event.FocusListener_javax.swing.plaf.basic.BasicListUI.focusListener*

A Windows Limplementation of ListUI. 


*int_javax.swing.plaf.basic.BasicListUI.fontChanged*

A Windows Limplementation of ListUI. 


*javax.swing.JList_javax.swing.plaf.basic.BasicListUI.list*

A Windows Limplementation of ListUI. 


*javax.swing.event.ListDataListener_javax.swing.plaf.basic.BasicListUI.listDataListener*

A Windows Limplementation of ListUI. 


*javax.swing.event.ListSelectionListener_javax.swing.plaf.basic.BasicListUI.listSelectionListener*

A Windows Limplementation of ListUI. 


*int_javax.swing.plaf.basic.BasicListUI.modelChanged*

A Windows Limplementation of ListUI. 


*javax.swing.event.MouseInputListener_javax.swing.plaf.basic.BasicListUI.mouseInputListener*

A Windows Limplementation of ListUI. 


*java.beans.PropertyChangeListener_javax.swing.plaf.basic.BasicListUI.propertyChangeListener*

A Windows Limplementation of ListUI. 


*int_javax.swing.plaf.basic.BasicListUI.prototypeCellValueChanged*

A Windows Limplementation of ListUI. 


*javax.swing.CellRendererPane_javax.swing.plaf.basic.BasicListUI.rendererPane*

A Windows Limplementation of ListUI. 


*int_javax.swing.plaf.basic.BasicListUI.selectionModelChanged*

A Windows Limplementation of ListUI. 


*int_javax.swing.plaf.basic.BasicListUI.updateLayoutStateNeeded*

A Windows Limplementation of ListUI. 



*javax.swing.plaf.basic.BasicListUI()*

public BasicListUI()




*javax.swing.plaf.basic.BasicListUI.convertRowToY(int)*

protected int convertRowToY(int row)

Return the JList relative Y coordinate of the origin of the specified row or -1 
if row isn't valid. 


    Returns: The Y coordinate of the origin of row, or -1. 
*javax.swing.plaf.basic.BasicListUI.convertYToRow(int)*

protected int convertYToRow(int y0)

Convert the JList relative coordinate to the row that contains it, based on the 
current layout. If y0 doesn't fall within any row, return -1. 


    Returns: The row that contains y0, or -1. 
*javax.swing.plaf.basic.BasicListUI.createFocusListener()*

protected |java.awt.event.FocusListener| createFocusListener()




*javax.swing.plaf.basic.BasicListUI.createListDataListener()*

protected |javax.swing.event.ListDataListener| createListDataListener()

Creates an instance of ListDataListener that's added to the JLists by model as 
needed. Subclasses can override this method to return a custom 
ListDataListener, e.g. 

class MyListUI extends BasicListUI { protected ListDataListener 
createListDataListener() { return new MyListDataListener(); } public class 
MyListDataListener extends ListDataHandler { public void 
contentsChanged(ListDataEvent e) { // do some extra work when the models 
contents change super.contentsChange(e); } } } 


*javax.swing.plaf.basic.BasicListUI.createListSelectionListener()*

protected |javax.swing.event.ListSelectionListener| createListSelectionListener()

Creates an instance of ListSelectionHandler that's added to the JLists by 
selectionModel as needed. Subclasses can override this method to return a 
custom ListSelectionListener, e.g. 

class MyListUI extends BasicListUI { protected ListSelectionListener 
createListSelectionListener() { return new MySelectionListener(); } public 
class MySelectionListener extends ListSelectionHandler { public void 
valueChanged(ListSelectionEvent e) { // do some extra work when the selection 
changes super.valueChange(e); } } } 


*javax.swing.plaf.basic.BasicListUI.createMouseInputListener()*

protected |javax.swing.event.MouseInputListener| createMouseInputListener()

Creates a delegate that implements MouseInputListener. The delegate is added to 
the corresponding java.awt.Component listener lists at installUI() time. 
Subclasses can override this method to return a custom MouseInputListener, e.g. 

class MyListUI extends BasicListUI { protected MouseInputListener 
createMouseInputListener() { return new MyMouseInputHandler(); } public class 
MyMouseInputHandler extends MouseInputHandler { public void 
mouseMoved(MouseEvent e) { // do some extra work when the mouse moves 
super.mouseMoved(e); } } } 


*javax.swing.plaf.basic.BasicListUI.createPropertyChangeListener()*

protected |java.beans.PropertyChangeListener| createPropertyChangeListener()

Creates an instance of PropertyChangeHandler that's added to the JList by 
installUI(). Subclasses can override this method to return a custom 
PropertyChangeListener, e.g. 

class MyListUI extends BasicListUI { protected PropertyChangeListener 
createPropertyChangeListener() { return new MyPropertyChangeListener(); } 
public class MyPropertyChangeListener extends PropertyChangeHandler { public 
void propertyChange(PropertyChangeEvent e) { if 
(e.getPropertyName().equals("model")) { // do some extra work when the model 
changes } super.propertyChange(e); } } } 


*javax.swing.plaf.basic.BasicListUI.createUI(JComponent)*

public static |javax.swing.plaf.ComponentUI| createUI(javax.swing.JComponent list)

Returns a new instance of BasicListUI. BasicListUI delegates are allocated one 
per JList. 


    Returns: A new ListUI implementation for the Windows look and feel. 
*javax.swing.plaf.basic.BasicListUI.getCellBounds(JList,int,int)*

public |java.awt.Rectangle| getCellBounds(
  javax.swing.JList list,
  int index1,
  int index2)




    Returns: The bounds of the index'th cell. 
*javax.swing.plaf.basic.BasicListUI.getPreferredSize(JComponent)*

public |java.awt.Dimension| getPreferredSize(javax.swing.JComponent c)

The preferredSize of the list depends upon the layout orientation. 

Layout OrientationPreferred Size 

JList.VERTICAL The preferredSize of the list is total height of the rows and 
the maximum width of the cells. If JList.fixedCellHeight is specified then the 
total height of the rows is just (cellVerticalMargins + fixedCellHeight) * 
model.getSize() where rowVerticalMargins is the space we allocate for drawing 
the yellow focus outline. Similarly if fixedCellWidth is specified then we just 
use that. 

JList.VERTICAL_WRAP If the visible row count is greater than zero, the 
preferredHeight is the maximum cell height * visibleRowCount. If the visible 
row count is JList.HORIZONTAL_WRAP If the visible row count is greater than 
zero, the preferredHeight is the maximum cell height * adjustedRowCount. Where 
visibleRowCount is used to determine the number of columns. Because this lays 
out horizontally the number of rows is then determined from the column count. 
For example, lets say you have a model with 10 items and the visible row count 
is 8. The number of columns needed to display this is 2, but you no longer need 
8 rows to display this, you only need 5, thus the adjustedRowCount is 5. If the 
visible row count is JList (width / max cell width), with at least one column. 
The preferred height then becomes the model size / number of columns * maximum 
cell height. Max cell height is either the fixed cell height, or is determined 
by iterating through all the cells to find the maximum height from the 
ListCellRenderer. 

The above specifies the raw preferred width and height. The resulting preferred 
width is the above width + insets.left + insets.right and the resulting 
preferred height is the above height + insets.top + insets.bottom. Where the 
Insets are determined from list.getInsets(). 

    c - The JList component. 

    Returns: The total size of the list. 
*javax.swing.plaf.basic.BasicListUI.getRowHeight(int)*

protected int getRowHeight(int row)

Returns the height of the specified row based on the current layout. 


    Returns: The specified row height or -1 if row isn't valid. 
*javax.swing.plaf.basic.BasicListUI.indexToLocation(JList,int)*

public |java.awt.Point| indexToLocation(
  javax.swing.JList list,
  int index)




    Returns: The origin of the index'th cell, null if index is invalid. 
*javax.swing.plaf.basic.BasicListUI.installDefaults()*

protected void installDefaults()

Initialize JList properties, e.g. font, foreground, and background, and add the 
CellRendererPane. The font, foreground, and background properties are only set 
if their current value is either null or a UIResource, other properties are set 
if the current value is null. 


*javax.swing.plaf.basic.BasicListUI.installKeyboardActions()*

protected void installKeyboardActions()

Registers the keyboard bindings on the JList that the BasicListUI is associated 
with. This method is called at installUI() time. 


*javax.swing.plaf.basic.BasicListUI.installListeners()*

protected void installListeners()

Create and install the listeners for the JList, its model, and its 
selectionModel. This method is called at installUI() time. 


*javax.swing.plaf.basic.BasicListUI.installUI(JComponent)*

public void installUI(javax.swing.JComponent c)

Initializes this.list by calling installDefaults(), installListeners(), and 
installKeyboardActions() in order. 


*javax.swing.plaf.basic.BasicListUI.locationToIndex(JList,Point)*

public int locationToIndex(
  javax.swing.JList list,
  java.awt.Point location)

Convert a point in JList coordinates to the closest index of the cell at that 
location. To determine if the cell actually contains the specified location use 
a combination of this method and getCellBounds. Returns -1 if the model is 
empty. 


    Returns: The index of the cell at location, or -1. 
*javax.swing.plaf.basic.BasicListUI.maybeUpdateLayoutState()*

protected void maybeUpdateLayoutState()

If updateLayoutStateNeeded is non zero, call updateLayoutState() and reset 
updateLayoutStateNeeded. This method should be called by methods before doing 
any computation based on the geometry of the list. For example it's the first 
call in paint() and getPreferredSize(). 


*javax.swing.plaf.basic.BasicListUI.paint(Graphics,JComponent)*

public void paint(
  java.awt.Graphics g,
  javax.swing.JComponent c)

Paint the rows that intersect the Graphics objects clipRect. This method calls 
paintCell as necessary. Subclasses may want to override these methods. 


*javax.swing.plaf.basic.BasicListUI.paintCell(Graphics,int,Rectangle,ListCellRenderer,ListModel,ListSelectionModel,int)*

protected void paintCell(
  java.awt.Graphics g,
  int row,
  java.awt.Rectangle rowBounds,
  javax.swing.ListCellRenderer cellRenderer,
  javax.swing.ListModel dataModel,
  javax.swing.ListSelectionModel selModel,
  int leadIndex)

Paint one List cell: compute the relevant state, get the "rubber stamp" cell 
renderer component, and then use the CellRendererPane to paint it. Subclasses 
may want to override this method rather than paint(). 


*javax.swing.plaf.basic.BasicListUI.selectNextIndex()*

protected void selectNextIndex()

Selected the previous row and force it to be visible. 


*javax.swing.plaf.basic.BasicListUI.selectPreviousIndex()*

protected void selectPreviousIndex()

Selected the previous row and force it to be visible. 


*javax.swing.plaf.basic.BasicListUI.uninstallDefaults()*

protected void uninstallDefaults()

Set the JList properties that haven't been explicitly overridden to null. A 
property is considered overridden if its current value is not a UIResource. 


*javax.swing.plaf.basic.BasicListUI.uninstallKeyboardActions()*

protected void uninstallKeyboardActions()

Unregisters keyboard actions installed from installKeyboardActions. This method 
is called at uninstallUI() time - subclassess should ensure that all of the 
keyboard actions registered at installUI time are removed here. 


*javax.swing.plaf.basic.BasicListUI.uninstallListeners()*

protected void uninstallListeners()

Remove the listeners for the JList, its model, and its selectionModel. All of 
the listener fields, are reset to null here. This method is called at 
uninstallUI() time, it should be kept in sync with installListeners. 


*javax.swing.plaf.basic.BasicListUI.uninstallUI(JComponent)*

public void uninstallUI(javax.swing.JComponent c)

Uninitializes this.list by calling uninstallListeners(), 
uninstallKeyboardActions(), and uninstallDefaults() in order. Sets this.list to 
null. 


*javax.swing.plaf.basic.BasicListUI.updateLayoutState()*

protected void updateLayoutState()

Recompute the value of cellHeight or cellHeights based and cellWidth, based on 
the current font and the current values of fixedCellWidth, fixedCellHeight, and 
prototypeCellValue. 




*java.lang.management.MemoryUsage* *MemoryUsage* A MemoryUsage object represents

public class MemoryUsage
  extends    |java.lang.Object|

|java.lang.management.MemoryUsage_Description|
|java.lang.management.MemoryUsage_Fields|
|java.lang.management.MemoryUsage_Constructors|
|java.lang.management.MemoryUsage_Methods|

================================================================================

*java.lang.management.MemoryUsage_Constructors*
|java.lang.management.MemoryUsage(long,long,long,long)|Constructs a MemoryUsage

*java.lang.management.MemoryUsage_Methods*
|java.lang.management.MemoryUsage.from(CompositeData)|Returns a MemoryUsage obj
|java.lang.management.MemoryUsage.getCommitted()|Returns the amount of memory i
|java.lang.management.MemoryUsage.getInit()|Returns the amount of memory in byt
|java.lang.management.MemoryUsage.getMax()|Returns the maximum amount of memory
|java.lang.management.MemoryUsage.getUsed()|Returns the amount of used memory i
|java.lang.management.MemoryUsage.toString()|Returns a descriptive representati

*java.lang.management.MemoryUsage_Description*

A MemoryUsage object represents a snapshot of memory usage. Instances of the 
MemoryUsage class are usually constructed by methods that are used to obtain 
memory usage information about individual memory pool of the Java virtual 
machine or the heap or non-heap memory of the Java virtual machine as a whole. 

A MemoryUsage object contains four values: 



init represents the initial amount of memory (in bytes) that the Java virtual 
machine requests from the operating system for memory management during 
startup. The Java virtual machine may request additional memory from the 
operating system and may also release memory to the system over time. The value 
of init may be undefined. 



used represents the amount of memory currently used (in bytes). 



committed represents the amount of memory (in bytes) that is guaranteed to be 
available for use by the Java virtual machine. The amount of committed memory 
may change over time (increase or decrease). The Java virtual machine may 
release memory to the system and committed could be less than init. committed 
will always be greater than or equal to used. 



max represents the maximum amount of memory (in bytes) that can be used for 
memory management. Its value may be undefined. The maximum amount of memory may 
change over time if defined. The amount of used and committed memory will 
always be less than or equal to max if max is defined. A memory allocation may 
fail if it attempts to increase the used memory such that used committed even 
if used max would still be true (for example, when the system is low on virtual 
memory). 





Below is a picture showing an example of a memory pool: 



+----------------------------------------------+ +//////////////// | + 
+//////////////// | + +----------------------------------------------+ 

|--------| init |---------------| used |---------------------------| committed 
|----------------------------------------------| max 

MXBean Mapping MemoryUsage is mapped to a 
CompositeData(|javax.management.openmbean.CompositeData|) with attributes as 
specified in the from(|java.lang.management.MemoryUsage|) method. 


*java.lang.management.MemoryUsage(long,long,long,long)*

public MemoryUsage(
  long init,
  long used,
  long committed,
  long max)

Constructs a MemoryUsage object. 

    init - the initial amount of memory in bytes that the Java virtual machine allocates; 
       or -1 if undefined. 
    used - the amount of used memory in bytes. 
    committed - the amount of committed memory in bytes. 
    max - the maximum amount of memory in bytes that can be used; or -1 if undefined. 

*java.lang.management.MemoryUsage.from(CompositeData)*

public static |java.lang.management.MemoryUsage| from(javax.management.openmbean.CompositeData cd)

Returns a MemoryUsage object represented by the given CompositeData. The given 
CompositeData must contain the following attributes: 



Attribute Name Type 

init java.lang.Long 

used java.lang.Long 

committed java.lang.Long 

max java.lang.Long 



    cd - CompositeData representing a MemoryUsage 

    Returns: a MemoryUsage object represented by cd if cd is not null; null otherwise. 
*java.lang.management.MemoryUsage.getCommitted()*

public long getCommitted()

Returns the amount of memory in bytes that is committed for the Java virtual 
machine to use. This amount of memory is guaranteed for the Java virtual 
machine to use. 


    Returns: the amount of committed memory in bytes. 
*java.lang.management.MemoryUsage.getInit()*

public long getInit()

Returns the amount of memory in bytes that the Java virtual machine initially 
requests from the operating system for memory management. This method returns 
-1 if the initial memory size is undefined. 


    Returns: the initial size of memory in bytes; -1 if undefined. 
*java.lang.management.MemoryUsage.getMax()*

public long getMax()

Returns the maximum amount of memory in bytes that can be used for memory 
management. This method returns -1 if the maximum memory size is undefined. 

This amount of memory is not guaranteed to be available for memory management 
if it is greater than the amount of committed memory. The Java virtual machine 
may fail to allocate memory even if the amount of used memory does not exceed 
this maximum size. 


    Returns: the maximum amount of memory in bytes; -1 if undefined. 
*java.lang.management.MemoryUsage.getUsed()*

public long getUsed()

Returns the amount of used memory in bytes. 


    Returns: the amount of used memory in bytes. 
*java.lang.management.MemoryUsage.toString()*

public |java.lang.String| toString()

Returns a descriptive representation of this memory usage. 




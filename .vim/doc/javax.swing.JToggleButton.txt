*javax.swing.JToggleButton* *JToggleButton* An implementation of a two-state button.

public class JToggleButton
  extends    |javax.swing.AbstractButton|
  implements |javax.accessibility.Accessible|

|javax.swing.JToggleButton_Description|
|javax.swing.JToggleButton_Fields|
|javax.swing.JToggleButton_Constructors|
|javax.swing.JToggleButton_Methods|

====================================================================================================================================================================================

*javax.swing.JToggleButton_Constructors*
|javax.swing.JToggleButton()|Creates an initially unselected toggle button  without setting the text or image.
|javax.swing.JToggleButton(Action)|Creates a toggle button where properties are taken from the   Action supplied.
|javax.swing.JToggleButton(Icon)|Creates an initially unselected toggle button  with the specified image but no text.
|javax.swing.JToggleButton(Icon,boolean)|Creates a toggle button with the specified image   and selection state, but no text.
|javax.swing.JToggleButton(String)|Creates an unselected toggle button with the specified text.
|javax.swing.JToggleButton(String,boolean)|Creates a toggle button with the specified text  and selection state.
|javax.swing.JToggleButton(String,Icon)|Creates a toggle button that has the specified text and image,  and that is initially unselected.
|javax.swing.JToggleButton(String,Icon,boolean)|Creates a toggle button with the specified text, image, and  selection state.

*javax.swing.JToggleButton_Methods*
|javax.swing.JToggleButton.getAccessibleContext()|Gets the AccessibleContext associated with this JToggleButton.
|javax.swing.JToggleButton.getUIClassID()|Returns a string that specifies the name of the lclass  that renders this component.
|javax.swing.JToggleButton.paramString()|Returns a string representation of this JToggleButton.
|javax.swing.JToggleButton.updateUI()|Resets the UI property to a value from the current look and feel.

*javax.swing.JToggleButton_Description*

An implementation of a two-state button. The JRadioButton and JCheckBox classes are subclasses of this class. For information on using them see How to Use Buttons, Check Boxes, 
and Radio Buttons, a section in The Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.JToggleButton()*

public JToggleButton()

Creates an initially unselected toggle button without setting the text or image. 


*javax.swing.JToggleButton(Action)*

public JToggleButton(javax.swing.Action a)

Creates a toggle button where properties are taken from the Action supplied. 


*javax.swing.JToggleButton(Icon)*

public JToggleButton(javax.swing.Icon icon)

Creates an initially unselected toggle button with the specified image but no text. 

    icon - the image that the button should display 

*javax.swing.JToggleButton(Icon,boolean)*

public JToggleButton(
  javax.swing.Icon icon,
  boolean selected)

Creates a toggle button with the specified image and selection state, but no text. 

    icon - the image that the button should display 
    selected - if true, the button is initially selected; otherwise, the button is initially unselected 

*javax.swing.JToggleButton(String)*

public JToggleButton(java.lang.String text)

Creates an unselected toggle button with the specified text. 

    text - the string displayed on the toggle button 

*javax.swing.JToggleButton(String,boolean)*

public JToggleButton(
  java.lang.String text,
  boolean selected)

Creates a toggle button with the specified text and selection state. 

    text - the string displayed on the toggle button 
    selected - if true, the button is initially selected; otherwise, the button is initially unselected 

*javax.swing.JToggleButton(String,Icon)*

public JToggleButton(
  java.lang.String text,
  javax.swing.Icon icon)

Creates a toggle button that has the specified text and image, and that is initially unselected. 

    text - the string displayed on the button 
    icon - the image that the button should display 

*javax.swing.JToggleButton(String,Icon,boolean)*

public JToggleButton(
  java.lang.String text,
  javax.swing.Icon icon,
  boolean selected)

Creates a toggle button with the specified text, image, and selection state. 

    text - the text of the toggle button 
    icon - the image that the button should display 
    selected - if true, the button is initially selected; otherwise, the button is initially unselected 

*javax.swing.JToggleButton.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JToggleButton. For toggle buttons, the AccessibleContext takes the form of an AccessibleJToggleButton. A new 
AccessibleJToggleButton instance is created if necessary. 



    Returns: an AccessibleJToggleButton that serves as the AccessibleContext of this JToggleButton 

*javax.swing.JToggleButton.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns a string that specifies the name of the lclass that renders this component. 



    Returns: String "ToggleButtonUI" 

*javax.swing.JToggleButton.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JToggleButton. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary 
between implementations. The returned string may be empty but may not be null. 



    Returns: a string representation of this JToggleButton. 

*javax.swing.JToggleButton.updateUI()*

public void updateUI()

Resets the UI property to a value from the current look and feel. 





*java.awt.Toolkit* *Toolkit* This class is the abstract superclass of all actual

public abstract class Toolkit
  extends    |java.lang.Object|

|java.awt.Toolkit_Description|
|java.awt.Toolkit_Fields|
|java.awt.Toolkit_Constructors|
|java.awt.Toolkit_Methods|

================================================================================

*java.awt.Toolkit_Fields*
|java.util.Map_java.awt.Toolkit.desktopProperties|
|java.beans.PropertyChangeSupport_java.awt.Toolkit.desktopPropsSupport|

*java.awt.Toolkit_Constructors*
|java.awt.Toolkit()|

*java.awt.Toolkit_Methods*
|java.awt.Toolkit.addAWTEventListener(AWTEventListener,long)|Adds an AWTEventLi
|java.awt.Toolkit.addPropertyChangeListener(String,PropertyChangeListener)|Adds
|java.awt.Toolkit.beep()|Emits an audio beep.
|java.awt.Toolkit.checkImage(Image,int,int,ImageObserver)|Indicates the constru
|java.awt.Toolkit.createButton(Button)|Creates this toolkit's implementation of
|java.awt.Toolkit.createCanvas(Canvas)|Creates this toolkit's implementation of
|java.awt.Toolkit.createCheckbox(Checkbox)|Creates this toolkit's implementatio
|java.awt.Toolkit.createCheckboxMenuItem(CheckboxMenuItem)|Creates this toolkit
|java.awt.Toolkit.createChoice(Choice)|Creates this toolkit's implementation of
|java.awt.Toolkit.createComponent(Component)|Creates a peer for a component or 
|java.awt.Toolkit.createCustomCursor(Image,Point,String)|Creates a new custom c
|java.awt.Toolkit.createDialog(Dialog)|Creates this toolkit's implementation of
|java.awt.Toolkit.createDragGestureRecognizer(Class,DragSource,Component,int,DragGestureListener)|
|java.awt.Toolkit.createDragSourceContextPeer(DragGestureEvent)|Creates the pee
|java.awt.Toolkit.createFileDialog(FileDialog)|Creates this toolkit's implement
|java.awt.Toolkit.createFrame(Frame)|Creates this toolkit's implementation of F
|java.awt.Toolkit.createImage(byte[])|Creates an image which decodes the image 
|java.awt.Toolkit.createImage(byte[],int,int)|Creates an image which decodes th
|java.awt.Toolkit.createImage(ImageProducer)|Creates an image with the specifie
|java.awt.Toolkit.createImage(String)|Returns an image which gets pixel data fr
|java.awt.Toolkit.createImage(URL)|Returns an image which gets pixel data from 
|java.awt.Toolkit.createLabel(Label)|Creates this toolkit's implementation of L
|java.awt.Toolkit.createList(List)|Creates this toolkit's implementation of Lis
|java.awt.Toolkit.createMenu(Menu)|Creates this toolkit's implementation of Men
|java.awt.Toolkit.createMenuBar(MenuBar)|Creates this toolkit's implementation 
|java.awt.Toolkit.createMenuItem(MenuItem)|Creates this toolkit's implementatio
|java.awt.Toolkit.createPanel(Panel)|Creates this toolkit's implementation of P
|java.awt.Toolkit.createPopupMenu(PopupMenu)|Creates this toolkit's implementat
|java.awt.Toolkit.createScrollbar(Scrollbar)|Creates this toolkit's implementat
|java.awt.Toolkit.createScrollPane(ScrollPane)|Creates this toolkit's implement
|java.awt.Toolkit.createTextArea(TextArea)|Creates this toolkit's implementatio
|java.awt.Toolkit.createTextField(TextField)|Creates this toolkit's implementat
|java.awt.Toolkit.createWindow(Window)|Creates this toolkit's implementation of
|java.awt.Toolkit.getAWTEventListeners()|Returns an array of all the AWTEventLi
|java.awt.Toolkit.getAWTEventListeners(long)|Returns an array of all the AWTEve
|java.awt.Toolkit.getBestCursorSize(int,int)|Returns the supported cursor dimen
|java.awt.Toolkit.getColorModel()|Determines the color model of this toolkit's 
|java.awt.Toolkit.getDefaultToolkit()|Gets the default toolkit.
|java.awt.Toolkit.getDesktopProperty(String)|Obtains a value for the specified 
|java.awt.Toolkit.getFontList()|Returns the names of the available fonts in thi
|java.awt.Toolkit.getFontMetrics(Font)|Gets the screen device metrics for rende
|java.awt.Toolkit.getFontPeer(String,int)|Creates this toolkit's implementation
|java.awt.Toolkit.getImage(String)|Returns an image which gets pixel data from 
|java.awt.Toolkit.getImage(URL)|Returns an image which gets pixel data from the
|java.awt.Toolkit.getLockingKeyState(int)|Returns whether the given locking key
|java.awt.Toolkit.getMaximumCursorColors()|Returns the maximum number of colors
|java.awt.Toolkit.getMenuShortcutKeyMask()|Determines which modifier key is the
|java.awt.Toolkit.getMouseInfoPeer()|Obtains this toolkit's implementation of h
|java.awt.Toolkit.getNativeContainer(Component)|Give native peers the ability t
|java.awt.Toolkit.getPrintJob(Frame,String,JobAttributes,PageAttributes)|Gets a
|java.awt.Toolkit.getPrintJob(Frame,String,Properties)|Gets a PrintJob object w
|java.awt.Toolkit.getProperty(String,String)|Gets a property with the specified
|java.awt.Toolkit.getPropertyChangeListeners()|Returns an array of all the prop
|java.awt.Toolkit.getPropertyChangeListeners(String)|Returns an array of all th
|java.awt.Toolkit.getScreenInsets(GraphicsConfiguration)|Gets the insets of the
|java.awt.Toolkit.getScreenResolution()|Returns the screen resolution in dots-p
|java.awt.Toolkit.getScreenSize()|Gets the size of the screen.
|java.awt.Toolkit.getSystemClipboard()|Gets the singleton instance of the syste
|java.awt.Toolkit.getSystemEventQueue()|Get the application's or applet's Event
|java.awt.Toolkit.getSystemEventQueueImpl()|Gets the application's or applet's 
|java.awt.Toolkit.getSystemSelection()|Gets the singleton instance of the syste
|java.awt.Toolkit.initializeDesktopProperties()|initializeDesktopProperties
|java.awt.Toolkit.isDynamicLayoutActive()|Returns whether dynamic layout of Con
|java.awt.Toolkit.isDynamicLayoutSet()|Returns whether the layout of Containers
|java.awt.Toolkit.isFrameStateSupported(int)|Returns whether Toolkit supports t
|java.awt.Toolkit.lazilyLoadDesktopProperty(String)|an opportunity to lazily ev
|java.awt.Toolkit.loadSystemColors(int[])|Fills in the integer array that is su
|java.awt.Toolkit.mapInputMethodHighlight(InputMethodHighlight)|Returns a map o
|java.awt.Toolkit.prepareImage(Image,int,int,ImageObserver)|Prepares an image f
|java.awt.Toolkit.removeAWTEventListener(AWTEventListener)|Removes an AWTEventL
|java.awt.Toolkit.removePropertyChangeListener(String,PropertyChangeListener)|R
|java.awt.Toolkit.setDesktopProperty(String,Object)|Sets the named desktop prop
|java.awt.Toolkit.setDynamicLayout(boolean)|Controls whether the layout of Cont
|java.awt.Toolkit.setLockingKeyState(int,boolean)|Sets the state of the given l
|java.awt.Toolkit.sync()|Synchronizes this toolkit's graphics state.

*java.awt.Toolkit_Description*

This class is the abstract superclass of all actual implementations of the 
Abstract Window Toolkit. Subclasses of Toolkit are used to bind the various 
components to particular native toolkit implementations. 

Many GUI operations may be performed asynchronously. This means that if you set 
the state of a component, and then immediately query the state, the returned 
value may not yet reflect the requested change. This includes, but is not 
limited to: 

Scrolling to a specified position. For example, calling 
ScrollPane.setScrollPosition and then getScrollPosition may return an incorrect 
value if the original request has not yet been processed. 

Moving the focus from one component to another. For more information, see 
Timing Focus Transfers, a section in The Swing Tutorial. 

Making a top-level container visible. Calling setVisible(true) on a Window, 
Frame or Dialog may occur asynchronously. 

Setting the size or location of a top-level container. Calls to setSize, 
setBounds or setLocation on a Window, Frame or Dialog are forwarded to the 
underlying window management system and may be ignored or modified. See 
(|java.awt.Window|) for more information. 

Most applications should not call any of the methods in this class directly. 
The methods defined by Toolkit are the "glue" that joins the 
platform-independent classes in the java.awt package with their counterparts in 
java.awt.peer. Some methods defined by Toolkit query the native operating 
system directly. 


*java.util.Map_java.awt.Toolkit.desktopProperties*

This class is the abstract superclass of all actual implementations of the 
Abstract Window Toolkit. Subclasses of Toolkit are used to bind the various 
components to particular native toolkit implementations. 

Many GUI operations may be performed asynchronously. This means that if you set 
the state of a component, and then immediately query the state, the returned 
value may not yet reflect the requested change. This includes, but is not 
limited to: 

Scrolling to a specified position. For example, calling 
ScrollPane.setScrollPosition and then getScrollPosition may return an incorrect 
value if the original request has not yet been processed. 

Moving the focus from one component to another. For more information, see 
Timing Focus Transfers, a section in The Swing Tutorial. 

Making a top-level container visible. Calling setVisible(true) on a Window, 
Frame or Dialog may occur asynchronously. 

Setting the size or location of a top-level container. Calls to setSize, 
setBounds or setLocation on a Window, Frame or Dialog are forwarded to the 
underlying window management system and may be ignored or modified. See 
(|java.awt.Window|) for more information. 

Most applications should not call any of the methods in this class directly. 
The methods defined by Toolkit are the "glue" that joins the 
platform-independent classes in the java.awt package with their counterparts in 
java.awt.peer. Some methods defined by Toolkit query the native operating 
system directly. 


*java.beans.PropertyChangeSupport_java.awt.Toolkit.desktopPropsSupport*

This class is the abstract superclass of all actual implementations of the 
Abstract Window Toolkit. Subclasses of Toolkit are used to bind the various 
components to particular native toolkit implementations. 

Many GUI operations may be performed asynchronously. This means that if you set 
the state of a component, and then immediately query the state, the returned 
value may not yet reflect the requested change. This includes, but is not 
limited to: 

Scrolling to a specified position. For example, calling 
ScrollPane.setScrollPosition and then getScrollPosition may return an incorrect 
value if the original request has not yet been processed. 

Moving the focus from one component to another. For more information, see 
Timing Focus Transfers, a section in The Swing Tutorial. 

Making a top-level container visible. Calling setVisible(true) on a Window, 
Frame or Dialog may occur asynchronously. 

Setting the size or location of a top-level container. Calls to setSize, 
setBounds or setLocation on a Window, Frame or Dialog are forwarded to the 
underlying window management system and may be ignored or modified. See 
(|java.awt.Window|) for more information. 

Most applications should not call any of the methods in this class directly. 
The methods defined by Toolkit are the "glue" that joins the 
platform-independent classes in the java.awt package with their counterparts in 
java.awt.peer. Some methods defined by Toolkit query the native operating 
system directly. 



*java.awt.Toolkit()*

public Toolkit()




*java.awt.Toolkit.addAWTEventListener(AWTEventListener,long)*

public void addAWTEventListener(
  java.awt.event.AWTEventListener listener,
  long eventMask)

Adds an AWTEventListener to receive all AWTEvents dispatched system-wide that 
conform to the given eventMask. 

First, if there is a security manager, its checkPermission method is called 
with an AWTPermission("listenToAllAWTEvents") permission. This may result in a 
SecurityException. 

eventMask is a bitmask of event types to receive. It is constructed by bitwise 
OR-ing together the event masks defined in AWTEvent. 

Note: event listener use is not recommended for normal application use, but are 
intended solely to support special purpose facilities including support for 
accessibility, event record/playback, and diagnostic tracing. 

If listener is null, no exception is thrown and no action is performed. 

    listener - the event listener. 
    eventMask - the bitmask of event types to receive 

*java.awt.Toolkit.addPropertyChangeListener(String,PropertyChangeListener)*

public synchronized void addPropertyChangeListener(
  java.lang.String name,
  java.beans.PropertyChangeListener pcl)

Adds the specified property change listener for the named desktop property. If 
pcl is null, no exception is thrown and no action is performed. 

    name - The name of the property to listen for 
    pcl - The property change listener 

*java.awt.Toolkit.beep()*

public abstract void beep()

Emits an audio beep. 


*java.awt.Toolkit.checkImage(Image,int,int,ImageObserver)*

public abstract int checkImage(
  java.awt.Image image,
  int width,
  int height,
  java.awt.image.ImageObserver observer)

Indicates the construction status of a specified image that is being prepared 
for display. 

If the values of the width and height arguments are both -1, this method 
returns the construction status of a screen representation of the specified 
image in this toolkit. Otherwise, this method returns the construction status 
of a scaled representation of the image at the specified width and height. 

This method does not cause the image to begin loading. An application must call 
prepareImage to force the loading of an image. 

This method is called by the component's checkImage methods. 

Information on the flags returned by this method can be found with the 
definition of the ImageObserver interface. 

    image - the image whose status is being checked. 
    width - the width of the scaled version whose status is being checked, or -1. 
    height - the height of the scaled version whose status is being checked, or -1. 
    observer - the ImageObserver object to be notified as the image is being prepared. 

    Returns: the bitwise inclusive OR of the ImageObserver flags for the image data that is 
             currently available. 
*java.awt.Toolkit.createButton(Button)*

protected abstract |java.awt.peer.ButtonPeer| createButton(java.awt.Button target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of Button using the specified peer 
interface. 

    target - the button to be implemented. 

    Returns: this toolkit's implementation of Button. 
*java.awt.Toolkit.createCanvas(Canvas)*

protected abstract |java.awt.peer.CanvasPeer| createCanvas(java.awt.Canvas target)

Creates this toolkit's implementation of Canvas using the specified peer 
interface. 

    target - the canvas to be implemented. 

    Returns: this toolkit's implementation of Canvas. 
*java.awt.Toolkit.createCheckbox(Checkbox)*

protected abstract |java.awt.peer.CheckboxPeer| createCheckbox(java.awt.Checkbox target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of Checkbox using the specified peer 
interface. 

    target - the check box to be implemented. 

    Returns: this toolkit's implementation of Checkbox. 
*java.awt.Toolkit.createCheckboxMenuItem(CheckboxMenuItem)*

protected abstract |java.awt.peer.CheckboxMenuItemPeer| createCheckboxMenuItem(java.awt.CheckboxMenuItem target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of CheckboxMenuItem using the specified 
peer interface. 

    target - the checkbox menu item to be implemented. 

    Returns: this toolkit's implementation of CheckboxMenuItem. 
*java.awt.Toolkit.createChoice(Choice)*

protected abstract |java.awt.peer.ChoicePeer| createChoice(java.awt.Choice target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of Choice using the specified peer 
interface. 

    target - the choice to be implemented. 

    Returns: this toolkit's implementation of Choice. 
*java.awt.Toolkit.createComponent(Component)*

protected |java.awt.peer.LightweightPeer| createComponent(java.awt.Component target)

Creates a peer for a component or container. This peer is windowless and allows 
the Component and Container classes to be extended directly to create 
windowless components that are defined entirely in java. 

    target - The Component to be created. 

*java.awt.Toolkit.createCustomCursor(Image,Point,String)*

public |java.awt.Cursor| createCustomCursor(
  java.awt.Image cursor,
  java.awt.Point hotSpot,
  java.lang.String name)
  throws |java.awt.HeadlessException|
         |java.lang.IndexOutOfBoundsException|
         
Creates a new custom cursor object. If the image to display is invalid, the 
cursor will be hidden (made completely transparent), and the hotspot will be 
set to (0, 0). 

Note that multi-frame images are invalid and may cause this method to hang. 

    cursor - the image to display when the cursor is actived 
    hotSpot - the X and Y of the large cursor's hot spot; the hotSpot values must be less 
       than the Dimension returned by getBestCursorSize 
    name - a localized description of the cursor, for Java Accessibility use 

*java.awt.Toolkit.createDialog(Dialog)*

protected abstract |java.awt.peer.DialogPeer| createDialog(java.awt.Dialog target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of Dialog using the specified peer 
interface. 

    target - the dialog to be implemented. 

    Returns: this toolkit's implementation of Dialog. 
*java.awt.Toolkit.createDragGestureRecognizer(Class,DragSource,Component,int,DragGestureListener)*

public |java.awt.dnd.DragGestureRecognizer| createDragGestureRecognizer(
  java.lang.Class abstractRecognizerClass,
  java.awt.dnd.DragSource ds,
  java.awt.Component c,
  int srcActions,
  java.awt.dnd.DragGestureListener dgl)

Creates a concrete, platform dependent, subclass of the abstract 
DragGestureRecognizer class requested, and associates it with the DragSource, 
Component and DragGestureListener specified. 

subclasses should override this to provide their own implementation 

    abstractRecognizerClass - The abstract class of the required recognizer 
    ds - The DragSource 
    c - The Component target for the DragGestureRecognizer 
    srcActions - The actions permitted for the gesture 
    dgl - The DragGestureListener 

    Returns: the new object or null. Always returns null if GraphicsEnvironment.isHeadless() 
             returns true. 
*java.awt.Toolkit.createDragSourceContextPeer(DragGestureEvent)*

public abstract |java.awt.dnd.peer.DragSourceContextPeer| createDragSourceContextPeer(java.awt.dnd.DragGestureEvent dge)
  throws |java.awt.dnd.InvalidDnDOperationException|
         
Creates the peer for a DragSourceContext. Always throws 
InvalidDndOperationException if GraphicsEnvironment.isHeadless() returns true. 


*java.awt.Toolkit.createFileDialog(FileDialog)*

protected abstract |java.awt.peer.FileDialogPeer| createFileDialog(java.awt.FileDialog target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of FileDialog using the specified peer 
interface. 

    target - the file dialog to be implemented. 

    Returns: this toolkit's implementation of FileDialog. 
*java.awt.Toolkit.createFrame(Frame)*

protected abstract |java.awt.peer.FramePeer| createFrame(java.awt.Frame target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of Frame using the specified peer 
interface. 

    target - the frame to be implemented. 

    Returns: this toolkit's implementation of Frame. 
*java.awt.Toolkit.createImage(byte[])*

public |java.awt.Image| createImage(byte[] imagedata)

Creates an image which decodes the image stored in the specified byte array. 

The data must be in some image format, such as GIF or JPEG, that is supported 
by this toolkit. 

    imagedata - an array of bytes, representing image data in a supported image format. 

    Returns: 
*java.awt.Toolkit.createImage(byte[],int,int)*

public abstract |java.awt.Image| createImage(
  byte[] imagedata,
  int imageoffset,
  int imagelength)

Creates an image which decodes the image stored in the specified byte array, 
and at the specified offset and length. The data must be in some image format, 
such as GIF or JPEG, that is supported by this toolkit. 

    imagedata - an array of bytes, representing image data in a supported image format. 
    imageoffset - the offset of the beginning of the data in the array. 
    imagelength - the length of the data in the array. 

    Returns: 
*java.awt.Toolkit.createImage(ImageProducer)*

public abstract |java.awt.Image| createImage(java.awt.image.ImageProducer producer)

Creates an image with the specified image producer. 

    producer - the image producer to be used. 

    Returns: an image with the specified image producer. 
*java.awt.Toolkit.createImage(String)*

public abstract |java.awt.Image| createImage(java.lang.String filename)

Returns an image which gets pixel data from the specified file. The returned 
Image is a new object which will not be shared with any other caller of this 
method or its getImage variant. 

    filename - the name of a file containing pixel data in a recognized file format. 

    Returns: an image which gets its pixel data from the specified file. 
*java.awt.Toolkit.createImage(URL)*

public abstract |java.awt.Image| createImage(java.net.URL url)

Returns an image which gets pixel data from the specified URL. The returned 
Image is a new object which will not be shared with any other caller of this 
method or its getImage variant. 

    url - the URL to use in fetching the pixel data. 

    Returns: an image which gets its pixel data from the specified URL. 
*java.awt.Toolkit.createLabel(Label)*

protected abstract |java.awt.peer.LabelPeer| createLabel(java.awt.Label target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of Label using the specified peer 
interface. 

    target - the label to be implemented. 

    Returns: this toolkit's implementation of Label. 
*java.awt.Toolkit.createList(List)*

protected abstract |java.awt.peer.ListPeer| createList(java.awt.List target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of List using the specified peer 
interface. 

    target - the list to be implemented. 

    Returns: this toolkit's implementation of List. 
*java.awt.Toolkit.createMenu(Menu)*

protected abstract |java.awt.peer.MenuPeer| createMenu(java.awt.Menu target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of Menu using the specified peer 
interface. 

    target - the menu to be implemented. 

    Returns: this toolkit's implementation of Menu. 
*java.awt.Toolkit.createMenuBar(MenuBar)*

protected abstract |java.awt.peer.MenuBarPeer| createMenuBar(java.awt.MenuBar target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of MenuBar using the specified peer 
interface. 

    target - the menu bar to be implemented. 

    Returns: this toolkit's implementation of MenuBar. 
*java.awt.Toolkit.createMenuItem(MenuItem)*

protected abstract |java.awt.peer.MenuItemPeer| createMenuItem(java.awt.MenuItem target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of MenuItem using the specified peer 
interface. 

    target - the menu item to be implemented. 

    Returns: this toolkit's implementation of MenuItem. 
*java.awt.Toolkit.createPanel(Panel)*

protected abstract |java.awt.peer.PanelPeer| createPanel(java.awt.Panel target)

Creates this toolkit's implementation of Panel using the specified peer 
interface. 

    target - the panel to be implemented. 

    Returns: this toolkit's implementation of Panel. 
*java.awt.Toolkit.createPopupMenu(PopupMenu)*

protected abstract |java.awt.peer.PopupMenuPeer| createPopupMenu(java.awt.PopupMenu target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of PopupMenu using the specified peer 
interface. 

    target - the popup menu to be implemented. 

    Returns: this toolkit's implementation of PopupMenu. 
*java.awt.Toolkit.createScrollbar(Scrollbar)*

protected abstract |java.awt.peer.ScrollbarPeer| createScrollbar(java.awt.Scrollbar target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of Scrollbar using the specified peer 
interface. 

    target - the scroll bar to be implemented. 

    Returns: this toolkit's implementation of Scrollbar. 
*java.awt.Toolkit.createScrollPane(ScrollPane)*

protected abstract |java.awt.peer.ScrollPanePeer| createScrollPane(java.awt.ScrollPane target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of ScrollPane using the specified peer 
interface. 

    target - the scroll pane to be implemented. 

    Returns: this toolkit's implementation of ScrollPane. 
*java.awt.Toolkit.createTextArea(TextArea)*

protected abstract |java.awt.peer.TextAreaPeer| createTextArea(java.awt.TextArea target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of TextArea using the specified peer 
interface. 

    target - the text area to be implemented. 

    Returns: this toolkit's implementation of TextArea. 
*java.awt.Toolkit.createTextField(TextField)*

protected abstract |java.awt.peer.TextFieldPeer| createTextField(java.awt.TextField target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of TextField using the specified peer 
interface. 

    target - the text field to be implemented. 

    Returns: this toolkit's implementation of TextField. 
*java.awt.Toolkit.createWindow(Window)*

protected abstract |java.awt.peer.WindowPeer| createWindow(java.awt.Window target)
  throws |java.awt.HeadlessException|
         
Creates this toolkit's implementation of Window using the specified peer 
interface. 

    target - the window to be implemented. 

    Returns: this toolkit's implementation of Window. 
*java.awt.Toolkit.getAWTEventListeners()*

public |java.awt.event.AWTEventListener| getAWTEventListeners()

Returns an array of all the AWTEventListeners registered on this toolkit. 
Listeners can be returned within AWTEventListenerProxy objects, which also 
contain the event mask for the given listener. Note that listener objects added 
multiple times appear only once in the returned array. 


    Returns: all of the AWTEventListeners or an empty array if no listeners are currently 
             registered 
*java.awt.Toolkit.getAWTEventListeners(long)*

public |java.awt.event.AWTEventListener| getAWTEventListeners(long eventMask)

Returns an array of all the AWTEventListeners registered on this toolkit which 
listen to all of the event types indicates in the eventMask argument. Listeners 
can be returned within AWTEventListenerProxy objects, which also contain the 
event mask for the given listener. Note that listener objects added multiple 
times appear only once in the returned array. 

    eventMask - the bitmask of event types to listen for 

    Returns: all of the AWTEventListeners registered on this toolkit for the specified event 
             types, or an empty array if no such listeners are currently 
             registered 
*java.awt.Toolkit.getBestCursorSize(int,int)*

public |java.awt.Dimension| getBestCursorSize(
  int preferredWidth,
  int preferredHeight)
  throws |java.awt.HeadlessException|
         
Returns the supported cursor dimension which is closest to the desired sizes. 
Systems which only support a single cursor size will return that size 
regardless of the desired sizes. Systems which don't support custom cursors 
will return a dimension of 0, 0. Note: if an image is used whose dimensions 
don't match a supported size (as returned by this method), the Toolkit 
implementation will attempt to resize the image to a supported size. Since 
converting low-resolution images is difficult, no guarantees are made as to the 
quality of a cursor image which isn't a supported size. It is therefore 
recommended that this method be called and an appropriate image used so no 
image conversion is made. 

    preferredWidth - the preferred cursor width the component would like to use. 
    preferredHeight - the preferred cursor height the component would like to use. 

    Returns: the closest matching supported cursor size, or a dimension of 0,0 if the 
             Toolkit implementation doesn't support custom cursors. 
*java.awt.Toolkit.getColorModel()*

public abstract |java.awt.image.ColorModel| getColorModel()
  throws |java.awt.HeadlessException|
         
Determines the color model of this toolkit's screen. 

ColorModel is an abstract class that encapsulates the ability to translate 
between the pixel values of an image and its red, green, blue, and alpha 
components. 

This toolkit method is called by the getColorModel method of the Component 
class. 


    Returns: the color model of this toolkit's screen. 
*java.awt.Toolkit.getDefaultToolkit()*

public static synchronized |java.awt.Toolkit| getDefaultToolkit()

Gets the default toolkit. 

If there is a system property named "awt.toolkit", that property is treated as 
the name of a class that is a subclass of Toolkit. 

If the system property does not exist, then the default toolkit used is the 
class named "sun.awt.motif.MToolkit", which is a motif implementation of the 
Abstract Window Toolkit. 

Also loads additional classes into the VM, using the property 
'assistive_technologies' specified in the Sun reference implementation by a 
line in the 'accessibility.properties' file. The form is 
"assistive_technologies=..." where the "..." is a comma-separated list of 
assistive technology classes to load. Each class is loaded in the order given 
and a single instance of each is created using 
Class.forName(class).newInstance(). This is done just after the AWT toolkit is 
created. All errors are handled via an AWTError exception. 


    Returns: the default toolkit. 
*java.awt.Toolkit.getDesktopProperty(String)*

public final synchronized |java.lang.Object| getDesktopProperty(java.lang.String propertyName)

Obtains a value for the specified desktop property. 

A desktop property is a uniquely named value for a resource that is Toolkit 
global in nature. Usually it also is an abstract representation for an 
underlying platform dependent desktop setting. 


*java.awt.Toolkit.getFontList()*

public abstract |java.lang.String| getFontList()

Returns the names of the available fonts in this toolkit. For 1.1, the 
following font names are deprecated (the replacement name follows): 

TimesRoman (use Serif) Helvetica (use SansSerif) Courier (use Monospaced) 

The ZapfDingbats fontname is also deprecated in 1.1 but the characters are 
defined in Unicode starting at 0x2700, and as of 1.1 Java supports those 
characters. 


    Returns: the names of the available fonts in this toolkit. 
*java.awt.Toolkit.getFontMetrics(Font)*

public abstract |java.awt.FontMetrics| getFontMetrics(java.awt.Font font)

Gets the screen device metrics for rendering of the font. 

    font - 

    Returns: the screen metrics of the specified font in this toolkit 
*java.awt.Toolkit.getFontPeer(String,int)*

protected abstract |java.awt.peer.FontPeer| getFontPeer(
  java.lang.String name,
  int style)

Creates this toolkit's implementation of Font using the specified peer 
interface. 

    name - the font to be implemented 
    style - the style of the font, such as PLAIN, BOLD, ITALIC, or a combination 

    Returns: this toolkit's implementation of Font 
*java.awt.Toolkit.getImage(String)*

public abstract |java.awt.Image| getImage(java.lang.String filename)

Returns an image which gets pixel data from the specified file, whose format 
can be either GIF, JPEG or PNG. The underlying toolkit attempts to resolve 
multiple requests with the same filename to the same returned Image. Since the 
mechanism required to facilitate this sharing of Image objects may continue to 
hold onto images that are no longer of use for an indefinite period of time, 
developers are encouraged to implement their own caching of images by using the 
createImage variant wherever available. 

    filename - the name of a file containing pixel data in a recognized file format. 

    Returns: an image which gets its pixel data from the specified file. 
*java.awt.Toolkit.getImage(URL)*

public abstract |java.awt.Image| getImage(java.net.URL url)

Returns an image which gets pixel data from the specified URL. The pixel data 
referenced by the specified URL must be in one of the following formats: GIF, 
JPEG or PNG. The underlying toolkit attempts to resolve multiple requests with 
the same URL to the same returned Image. Since the mechanism required to 
facilitate this sharing of Image objects may continue to hold onto images that 
are no longer of use for an indefinite period of time, developers are 
encouraged to implement their own caching of images by using the createImage 
variant wherever available. 

    url - the URL to use in fetching the pixel data. 

    Returns: an image which gets its pixel data from the specified URL. 
*java.awt.Toolkit.getLockingKeyState(int)*

public boolean getLockingKeyState(int keyCode)
  throws |java.lang.UnsupportedOperationException|
         
Returns whether the given locking key on the keyboard is currently in its "on" 
state. Valid key codes are VK_CAPS_LOCK(|java.awt.event.KeyEvent|) , 
VK_NUM_LOCK(|java.awt.event.KeyEvent|) , 
VK_SCROLL_LOCK(|java.awt.event.KeyEvent|) , and 
VK_KANA_LOCK(|java.awt.event.KeyEvent|) . 


*java.awt.Toolkit.getMaximumCursorColors()*

public int getMaximumCursorColors()
  throws |java.awt.HeadlessException|
         
Returns the maximum number of colors the Toolkit supports in a custom cursor 
palette. Note: if an image is used which has more colors in its palette than 
the supported maximum, the Toolkit implementation will attempt to flatten the 
palette to the maximum. Since converting low-resolution images is difficult, no 
guarantees are made as to the quality of a cursor image which has more colors 
than the system supports. It is therefore recommended that this method be 
called and an appropriate image used so no image conversion is made. 


    Returns: the maximum number of colors, or zero if custom cursors are not supported by 
             this Toolkit implementation. 
*java.awt.Toolkit.getMenuShortcutKeyMask()*

public int getMenuShortcutKeyMask()
  throws |java.awt.HeadlessException|
         
Determines which modifier key is the appropriate accelerator key for menu 
shortcuts. 

Menu shortcuts, which are embodied in the MenuShortcut class, are handled by 
the MenuBar class. 

By default, this method returns Event.CTRL_MASK. Toolkit implementations should 
override this method if the Control key isn't the correct key for accelerators. 


    Returns: the modifier mask on the Event class that is used for menu shortcuts on this 
             toolkit. 
*java.awt.Toolkit.getMouseInfoPeer()*

protected |java.awt.peer.MouseInfoPeer| getMouseInfoPeer()

Obtains this toolkit's implementation of helper class for MouseInfo operations. 


    Returns: this toolkit's implementation of helper for MouseInfo 
*java.awt.Toolkit.getNativeContainer(Component)*

protected static |java.awt.Container| getNativeContainer(java.awt.Component c)

Give native peers the ability to query the native container given a native 
component (eg the direct parent may be lightweight). 


*java.awt.Toolkit.getPrintJob(Frame,String,JobAttributes,PageAttributes)*

public |java.awt.PrintJob| getPrintJob(
  java.awt.Frame frame,
  java.lang.String jobtitle,
  java.awt.JobAttributes jobAttributes,
  java.awt.PageAttributes pageAttributes)

Gets a PrintJob object which is the result of initiating a print operation on 
the toolkit's platform. 

Each actual implementation of this method should first check if there is a 
security manager installed. If there is, the method should call the security 
manager's checkPrintJobAccess method to ensure initiation of a print operation 
is allowed. If the default implementation of checkPrintJobAccess is used (that 
is, that method is not overriden), then this results in a call to the security 
manager's checkPermission method with a RuntimePermission("queuePrintJob") 
permission. 

    frame - the parent of the print dialog. May be null if and only if jobAttributes is not 
       null and jobAttributes.getDialog() returns	JobAttributes.DialogType.NONE 
       or JobAttributes.DialogType.COMMON. 
    jobtitle - the title of the PrintJob. A null title is equivalent to "". 
    jobAttributes - a set of job attributes which will control the PrintJob. The attributes will be 
       updated to reflect the user's choices as outlined in the JobAttributes 
       documentation. May be null. 
    pageAttributes - a set of page attributes which will control the PrintJob. The attributes will 
       be applied to every page in the job. The attributes will be updated to 
       reflect the user's choices as outlined in the PageAttributes 
       documentation. May be null. 

    Returns: a PrintJob object, or null if the user cancelled the print job. 
*java.awt.Toolkit.getPrintJob(Frame,String,Properties)*

public abstract |java.awt.PrintJob| getPrintJob(
  java.awt.Frame frame,
  java.lang.String jobtitle,
  java.util.Properties props)

Gets a PrintJob object which is the result of initiating a print operation on 
the toolkit's platform. 

Each actual implementation of this method should first check if there is a 
security manager installed. If there is, the method should call the security 
manager's checkPrintJobAccess method to ensure initiation of a print operation 
is allowed. If the default implementation of checkPrintJobAccess is used (that 
is, that method is not overriden), then this results in a call to the security 
manager's checkPermission method with a RuntimePermission("queuePrintJob") 
permission. 

    frame - the parent of the print dialog. May not be null. 
    jobtitle - the title of the PrintJob. A null title is equivalent to "". 
    props - a Properties object containing zero or more properties. Properties are not 
       standardized and are not consistent across implementations. Because of 
       this, PrintJobs which require job and page control should use the 
       version of this function which takes JobAttributes and PageAttributes 
       objects. This object may be updated to reflect the user's job choices on 
       exit. May be null. 

    Returns: a PrintJob object, or null if the user cancelled the print job. 
*java.awt.Toolkit.getProperty(String,String)*

public static |java.lang.String| getProperty(
  java.lang.String key,
  java.lang.String defaultValue)

Gets a property with the specified key and default. This method returns 
defaultValue if the property is not found. 


*java.awt.Toolkit.getPropertyChangeListeners()*

public |java.beans.PropertyChangeListener| getPropertyChangeListeners()

Returns an array of all the property change listeners registered on this 
toolkit. 


    Returns: all of this toolkit's PropertyChangeListeners or an empty array if no property 
             change listeners are currently registered 
*java.awt.Toolkit.getPropertyChangeListeners(String)*

public synchronized |java.beans.PropertyChangeListener| getPropertyChangeListeners(java.lang.String propertyName)

Returns an array of all the PropertyChangeListeners associated with the named 
property. 

    propertyName - the named property 

    Returns: all of the PropertyChangeListeners associated with the named property or an 
             empty array if no such listeners have been added 
*java.awt.Toolkit.getScreenInsets(GraphicsConfiguration)*

public |java.awt.Insets| getScreenInsets(java.awt.GraphicsConfiguration gc)
  throws |java.awt.HeadlessException|
         
Gets the insets of the screen. 

    gc - a GraphicsConfiguration 

    Returns: the insets of this toolkit's screen, in pixels. 
*java.awt.Toolkit.getScreenResolution()*

public abstract int getScreenResolution()
  throws |java.awt.HeadlessException|
         
Returns the screen resolution in dots-per-inch. 


    Returns: this toolkit's screen resolution, in dots-per-inch. 
*java.awt.Toolkit.getScreenSize()*

public abstract |java.awt.Dimension| getScreenSize()
  throws |java.awt.HeadlessException|
         
Gets the size of the screen. On systems with multiple displays, the primary 
display is used. Multi-screen aware display dimensions are available from 
GraphicsConfiguration and GraphicsDevice. 


    Returns: the size of this toolkit's screen, in pixels. 
*java.awt.Toolkit.getSystemClipboard()*

public abstract |java.awt.datatransfer.Clipboard| getSystemClipboard()
  throws |java.awt.HeadlessException|
         
Gets the singleton instance of the system Clipboard which interfaces with 
clipboard facilities provided by the native platform. This clipboard enables 
data transfer between Java programs and native applications which use native 
clipboard facilities. 

In addition to any and all formats specified in the flavormap.properties file, 
or other file specified by the AWT.DnD.flavorMapFileURL Toolkit property, text 
returned by the system Clipboard's getTransferData() method is available in the 
following flavors: 

DataFlavor.stringFlavor DataFlavor.plainTextFlavor (deprecated) 

As with java.awt.datatransfer.StringSelection, if the requested flavor is 
DataFlavor.plainTextFlavor, or an equivalent flavor, a Reader is returned. 
Note: The behavior of the system Clipboard's getTransferData() method for 
DataFlavor.plainTextFlavor, and equivalent DataFlavors, is inconsistent with 
the definition of DataFlavor.plainTextFlavor . Because of this, support for 
DataFlavor.plainTextFlavor, and equivalent flavors, is deprecated. 

Each actual implementation of this method should first check if there is a 
security manager installed. If there is, the method should call the security 
manager's checkSystemClipboardAccess method to ensure it's ok to to access the 
system clipboard. If the default implementation of checkSystemClipboardAccess 
is used (that is, that method is not overriden), then this results in a call to 
the security manager's checkPermission method with an 
AWTPermission("accessClipboard") permission. 


    Returns: the system Clipboard 
*java.awt.Toolkit.getSystemEventQueue()*

public final |java.awt.EventQueue| getSystemEventQueue()

Get the application's or applet's EventQueue instance. Depending on the Toolkit 
implementation, different EventQueues may be returned for different applets. 
Applets should therefore not assume that the EventQueue instance returned by 
this method will be shared by other applets or the system. 

First, if there is a security manager, its checkAwtEventQueueAccess method is 
called. If the default implementation of checkAwtEventQueueAccess is used (that 
is, that method is not overriden), then this results in a call to the security 
manager's checkPermission method with an AWTPermission("accessEventQueue") 
permission. 


    Returns: the EventQueue object 
*java.awt.Toolkit.getSystemEventQueueImpl()*

protected abstract |java.awt.EventQueue| getSystemEventQueueImpl()

Gets the application's or applet's EventQueue instance, without checking 
access. For security reasons, this can only be called from a Toolkit subclass. 


    Returns: the EventQueue object 
*java.awt.Toolkit.getSystemSelection()*

public |java.awt.datatransfer.Clipboard| getSystemSelection()
  throws |java.awt.HeadlessException|
         
Gets the singleton instance of the system selection as a Clipboard object. This 
allows an application to read and modify the current, system-wide selection. 

An application is responsible for updating the system selection whenever the 
user selects text, using either the mouse or the keyboard. Typically, this is 
implemented by installing a FocusListener on all Components which support text 
selection, and, between FOCUS_GAINED and FOCUS_LOST events delivered to that 
Component, updating the system selection Clipboard when the selection changes 
inside the Component. Properly updating the system selection ensures that a 
Java application will interact correctly with native applications and other 
Java applications running simultaneously on the system. Note that 
java.awt.TextComponent and javax.swing.text.JTextComponent already adhere to 
this policy. When using these classes, and their subclasses, developers need 
not write any additional code. 

Some platforms do not support a system selection Clipboard. On those platforms, 
this method will return null. In such a case, an application is absolved from 
its responsibility to update the system selection Clipboard as described above. 

Each actual implementation of this method should first check if there is a 
SecurityManager installed. If there is, the method should call the 
SecurityManager's checkSystemClipboardAccess method to ensure that client code 
has access the system selection. If the default implementation of 
checkSystemClipboardAccess is used (that is, if the method is not overridden), 
then this results in a call to the SecurityManager's checkPermission method 
with an AWTPermission("accessClipboard") permission. 


    Returns: the system selection as a Clipboard, or null if the native platform does not 
             support a system selection Clipboard 
*java.awt.Toolkit.initializeDesktopProperties()*

protected void initializeDesktopProperties()

initializeDesktopProperties 


*java.awt.Toolkit.isDynamicLayoutActive()*

public boolean isDynamicLayoutActive()
  throws |java.awt.HeadlessException|
         
Returns whether dynamic layout of Containers on resize is currently active 
(both set programmatically, and supported by the underlying operating system 
and/or window manager). The OS/WM support can be queried using 
getDesktopProperty("awt.dynamicLayoutSupported"). 


    Returns: true if dynamic layout of Containers on resize is currently active, false 
             otherwise. 
*java.awt.Toolkit.isDynamicLayoutSet()*

protected boolean isDynamicLayoutSet()
  throws |java.awt.HeadlessException|
         
Returns whether the layout of Containers is validated dynamically during 
resizing, or statically, after resizing is complete. Note: this method returns 
the value that was set programmatically; it does not reflect support at the 
level of the operating system or window manager for dynamic layout on resizing, 
or the current operating system or window manager settings. The OS/WM support 
can be queried using getDesktopProperty("awt.dynamicLayoutSupported"). 


    Returns: true if validation of Containers is done dynamically, false if validation is 
             done after resizing is finished. 
*java.awt.Toolkit.isFrameStateSupported(int)*

public boolean isFrameStateSupported(int state)
  throws |java.awt.HeadlessException|
         
Returns whether Toolkit supports this state for Frames. This method tells 
whether the UI concept of, say, maximization or iconification is supported. It 
will always return false for "compound" states like 
Frame.ICONIFIED|Frame.MAXIMIZED_VERT. In other words, the rule of thumb is that 
only queries with a single frame state constant as an argument are meaningful. 

    state - one of named frame state constants. 

    Returns: true is this frame state is supported by this Toolkit implementation, false 
             otherwise. 
*java.awt.Toolkit.lazilyLoadDesktopProperty(String)*

protected |java.lang.Object| lazilyLoadDesktopProperty(java.lang.String name)

an opportunity to lazily evaluate desktop property values. 


*java.awt.Toolkit.loadSystemColors(int[])*

protected void loadSystemColors(int[] systemColors)
  throws |java.awt.HeadlessException|
         
Fills in the integer array that is supplied as an argument with the current 
system color values. 

    systemColors - an integer array. 

*java.awt.Toolkit.mapInputMethodHighlight(InputMethodHighlight)*

public abstract |java.util.Map| mapInputMethodHighlight(java.awt.im.InputMethodHighlight highlight)
  throws |java.awt.HeadlessException|
         
Returns a map of visual attributes for the abstract level description of the 
given input method highlight, or null if no mapping is found. The style field 
of the input method highlight is ignored. The map returned is unmodifiable. 

    highlight - input method highlight 

    Returns: style attribute map, or null 
*java.awt.Toolkit.prepareImage(Image,int,int,ImageObserver)*

public abstract boolean prepareImage(
  java.awt.Image image,
  int width,
  int height,
  java.awt.image.ImageObserver observer)

Prepares an image for rendering. 

If the values of the width and height arguments are both -1, this method 
prepares the image for rendering on the default screen; otherwise, this method 
prepares an image for rendering on the default screen at the specified width 
and height. 

The image data is downloaded asynchronously in another thread, and an 
appropriately scaled screen representation of the image is generated. 

This method is called by components prepareImage methods. 

Information on the flags returned by this method can be found with the 
definition of the ImageObserver interface. 

    image - the image for which to prepare a screen representation. 
    width - the width of the desired screen representation, or -1. 
    height - the height of the desired screen representation, or -1. 
    observer - the ImageObserver object to be notified as the image is being prepared. 

    Returns: true if the image has already been fully prepared; false otherwise. 
*java.awt.Toolkit.removeAWTEventListener(AWTEventListener)*

public void removeAWTEventListener(java.awt.event.AWTEventListener listener)

Removes an AWTEventListener from receiving dispatched AWTEvents. 

First, if there is a security manager, its checkPermission method is called 
with an AWTPermission("listenToAllAWTEvents") permission. This may result in a 
SecurityException. 

Note: event listener use is not recommended for normal application use, but are 
intended solely to support special purpose facilities including support for 
accessibility, event record/playback, and diagnostic tracing. 

If listener is null, no exception is thrown and no action is performed. 

    listener - the event listener. 

*java.awt.Toolkit.removePropertyChangeListener(String,PropertyChangeListener)*

public synchronized void removePropertyChangeListener(
  java.lang.String name,
  java.beans.PropertyChangeListener pcl)

Removes the specified property change listener for the named desktop property. 
If pcl is null, no exception is thrown and no action is performed. 

    name - The name of the property to remove 
    pcl - The property change listener 

*java.awt.Toolkit.setDesktopProperty(String,Object)*

protected final void setDesktopProperty(
  java.lang.String name,
  java.lang.Object newValue)

Sets the named desktop property to the specified value and fires a property 
change event to notify any listeners that the value has changed. 


*java.awt.Toolkit.setDynamicLayout(boolean)*

public void setDynamicLayout(boolean dynamic)
  throws |java.awt.HeadlessException|
         
Controls whether the layout of Containers is validated dynamically during 
resizing, or statically, after resizing is complete. Note that this feature is 
not supported on all platforms, and conversely, that this feature cannot be 
turned off on some platforms. On platforms where dynamic layout during resize 
is not supported (or is always supported), setting this property has no effect. 
Note that this feature can be set or unset as a property of the operating 
system or window manager on some platforms. On such platforms, the dynamic 
resize property must be set at the operating system or window manager level 
before this method can take effect. This method does not change the underlying 
operating system or window manager support or settings. The OS/WM support can 
be queried using getDesktopProperty("awt.dynamicLayoutSupported"). 

    dynamic - If true, Containers should re-layout their components as the Container is being 
       resized. If false, the layout will be validated after resizing is 
       finished. 

*java.awt.Toolkit.setLockingKeyState(int,boolean)*

public void setLockingKeyState(
  int keyCode,
  boolean on)
  throws |java.lang.UnsupportedOperationException|
         
Sets the state of the given locking key on the keyboard. Valid key codes are 
VK_CAPS_LOCK(|java.awt.event.KeyEvent|) , 
VK_NUM_LOCK(|java.awt.event.KeyEvent|) , 
VK_SCROLL_LOCK(|java.awt.event.KeyEvent|) , and 
VK_KANA_LOCK(|java.awt.event.KeyEvent|) . 

Depending on the platform, setting the state of a locking key may involve event 
processing and therefore may not be immediately observable through 
getLockingKeyState. 


*java.awt.Toolkit.sync()*

public abstract void sync()

Synchronizes this toolkit's graphics state. Some window systems may do 
buffering of graphics events. 

This method ensures that the display is up-to-date. It is useful for animation. 




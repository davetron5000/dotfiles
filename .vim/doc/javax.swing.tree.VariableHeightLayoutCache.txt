*javax.swing.tree.VariableHeightLayoutCache* *VariableHeightLayoutCache* NOTE: T

public class VariableHeightLayoutCache
  extends    |javax.swing.tree.AbstractLayoutCache|

|javax.swing.tree.VariableHeightLayoutCache_Description|
|javax.swing.tree.VariableHeightLayoutCache_Fields|
|javax.swing.tree.VariableHeightLayoutCache_Constructors|
|javax.swing.tree.VariableHeightLayoutCache_Methods|

================================================================================

*javax.swing.tree.VariableHeightLayoutCache_Constructors*
|javax.swing.tree.VariableHeightLayoutCache()|

*javax.swing.tree.VariableHeightLayoutCache_Methods*
|javax.swing.tree.VariableHeightLayoutCache.getBounds(TreePath,Rectangle)|Retur
|javax.swing.tree.VariableHeightLayoutCache.getExpandedState(TreePath)|Returns 
|javax.swing.tree.VariableHeightLayoutCache.getPathClosestTo(int,int)|Returns t
|javax.swing.tree.VariableHeightLayoutCache.getPathForRow(int)|Returns the path
|javax.swing.tree.VariableHeightLayoutCache.getPreferredHeight()|Returns the pr
|javax.swing.tree.VariableHeightLayoutCache.getPreferredWidth(Rectangle)|Return
|javax.swing.tree.VariableHeightLayoutCache.getRowCount()|Returns the number of
|javax.swing.tree.VariableHeightLayoutCache.getRowForPath(TreePath)|Returns the
|javax.swing.tree.VariableHeightLayoutCache.getVisibleChildCount(TreePath)|Retu
|javax.swing.tree.VariableHeightLayoutCache.getVisiblePathsFrom(TreePath)|Retur
|javax.swing.tree.VariableHeightLayoutCache.invalidatePathBounds(TreePath)|Inst
|javax.swing.tree.VariableHeightLayoutCache.invalidateSizes()|Informs the TreeS
|javax.swing.tree.VariableHeightLayoutCache.isExpanded(TreePath)|Returns true i
|javax.swing.tree.VariableHeightLayoutCache.setExpandedState(TreePath,boolean)|
|javax.swing.tree.VariableHeightLayoutCache.setModel(TreeModel)|Sets the TreeMo
|javax.swing.tree.VariableHeightLayoutCache.setNodeDimensions(AbstractLayoutCache.NodeDimensions)|
|javax.swing.tree.VariableHeightLayoutCache.setRootVisible(boolean)|Determines 
|javax.swing.tree.VariableHeightLayoutCache.setRowHeight(int)|Sets the height o
|javax.swing.tree.VariableHeightLayoutCache.treeNodesChanged(TreeModelEvent)|In
|javax.swing.tree.VariableHeightLayoutCache.treeNodesInserted(TreeModelEvent)|I
|javax.swing.tree.VariableHeightLayoutCache.treeNodesRemoved(TreeModelEvent)|In
|javax.swing.tree.VariableHeightLayoutCache.treeStructureChanged(TreeModelEvent)|

*javax.swing.tree.VariableHeightLayoutCache_Description*

NOTE: This will become more open in a future release. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.tree.VariableHeightLayoutCache()*

public VariableHeightLayoutCache()




*javax.swing.tree.VariableHeightLayoutCache.getBounds(TreePath,Rectangle)*

public |java.awt.Rectangle| getBounds(
  javax.swing.tree.TreePath path,
  java.awt.Rectangle placeIn)

Returns the Rectangle enclosing the label portion into which the item 
identified by path will be drawn. 

    path - the path to be drawn 
    placeIn - the bounds of the enclosing rectangle 

    Returns: the bounds of the enclosing rectangle or null if the node could not be 
             ascertained 
*javax.swing.tree.VariableHeightLayoutCache.getExpandedState(TreePath)*

public boolean getExpandedState(javax.swing.tree.TreePath path)

Returns true if the path is expanded, and visible. 


    Returns: true if the path is expanded and visible, otherwise false 
*javax.swing.tree.VariableHeightLayoutCache.getPathClosestTo(int,int)*

public |javax.swing.tree.TreePath| getPathClosestTo(
  int x,
  int y)

Returns the path to the node that is closest to x,y. If there is nothing 
currently visible this will return null, otherwise it will always return a 
valid path. If you need to test if the returned object is exactly at x, y you 
should get the bounds for the returned path and test x, y against that. 

    x - the x-coordinate 
    y - the y-coordinate 

    Returns: the path to the node that is closest to x, y 
*javax.swing.tree.VariableHeightLayoutCache.getPathForRow(int)*

public |javax.swing.tree.TreePath| getPathForRow(int row)

Returns the path for row. If row is not visible, null is returned. 

    row - the location of interest 

    Returns: the path for row, or null if row is not visible 
*javax.swing.tree.VariableHeightLayoutCache.getPreferredHeight()*

public int getPreferredHeight()

Returns the preferred height. 


    Returns: the preferred height 
*javax.swing.tree.VariableHeightLayoutCache.getPreferredWidth(Rectangle)*

public int getPreferredWidth(java.awt.Rectangle bounds)

Returns the preferred width and height for the region in visibleRegion. 

    bounds - the region being queried 

*javax.swing.tree.VariableHeightLayoutCache.getRowCount()*

public int getRowCount()

Returns the number of visible rows. 


    Returns: the number of visible rows 
*javax.swing.tree.VariableHeightLayoutCache.getRowForPath(TreePath)*

public int getRowForPath(javax.swing.tree.TreePath path)

Returns the row where the last item identified in path is visible. Will return 
-1 if any of the elements in path are not currently visible. 

    path - the TreePath of interest 

    Returns: the row where the last item in path is visible 
*javax.swing.tree.VariableHeightLayoutCache.getVisibleChildCount(TreePath)*

public int getVisibleChildCount(javax.swing.tree.TreePath path)

Returns the number of visible children for path. 


    Returns: the number of visible children for path 
*javax.swing.tree.VariableHeightLayoutCache.getVisiblePathsFrom(TreePath)*

public |java.util.Enumeration| getVisiblePathsFrom(javax.swing.tree.TreePath path)

Returns an Enumerator that increments over the visible paths starting at the 
passed in location. The ordering of the enumeration is based on how the paths 
are displayed. 

    path - the location in the TreePath to start 

    Returns: an Enumerator that increments over the visible paths 
*javax.swing.tree.VariableHeightLayoutCache.invalidatePathBounds(TreePath)*

public void invalidatePathBounds(javax.swing.tree.TreePath path)

Instructs the LayoutCache that the bounds for path are invalid, and need to be 
updated. 

    path - the TreePath which is now invalid 

*javax.swing.tree.VariableHeightLayoutCache.invalidateSizes()*

public void invalidateSizes()

Informs the TreeState that it needs to recalculate all the sizes it is 
referencing. 


*javax.swing.tree.VariableHeightLayoutCache.isExpanded(TreePath)*

public boolean isExpanded(javax.swing.tree.TreePath path)

Returns true if the value identified by path is currently expanded. 


    Returns: true if the value identified by path is currently expanded 
*javax.swing.tree.VariableHeightLayoutCache.setExpandedState(TreePath,boolean)*

public void setExpandedState(
  javax.swing.tree.TreePath path,
  boolean isExpanded)

Marks the path path expanded state to isExpanded. 

    path - the TreePath of interest 
    isExpanded - true if the path should be expanded, otherwise false 

*javax.swing.tree.VariableHeightLayoutCache.setModel(TreeModel)*

public void setModel(javax.swing.tree.TreeModel newModel)

Sets the TreeModel that will provide the data. 

    newModel - the TreeModel that is to provide the data 

*javax.swing.tree.VariableHeightLayoutCache.setNodeDimensions(AbstractLayoutCache.NodeDimensions)*

public void setNodeDimensions(javax.swing.tree.AbstractLayoutCache.NodeDimensions nd)

Sets the renderer that is responsible for drawing nodes in the tree. 

    nd - the renderer 

*javax.swing.tree.VariableHeightLayoutCache.setRootVisible(boolean)*

public void setRootVisible(boolean rootVisible)

Determines whether or not the root node from the TreeModel is visible. 

    rootVisible - true if the root node of the tree is to be displayed 

*javax.swing.tree.VariableHeightLayoutCache.setRowHeight(int)*

public void setRowHeight(int rowHeight)

Sets the height of each cell. If the specified value is less than or equal to 
zero the current cell renderer is queried for each row's height. 

    rowHeight - the height of each cell, in pixels 

*javax.swing.tree.VariableHeightLayoutCache.treeNodesChanged(TreeModelEvent)*

public void treeNodesChanged(javax.swing.event.TreeModelEvent e)

Invoked after a node (or a set of siblings) has changed in some way. The 
node(s) have not changed locations in the tree or altered their children 
arrays, but other attributes have changed and may affect presentation. Example: 
the name of a file has changed, but it is in the same location in the file 
system. 

e.path returns the path the parent of the changed node(s). 

e.childIndices returns the index(es) of the changed node(s). 

    e - the TreeModelEvent of interest 

*javax.swing.tree.VariableHeightLayoutCache.treeNodesInserted(TreeModelEvent)*

public void treeNodesInserted(javax.swing.event.TreeModelEvent e)

Invoked after nodes have been inserted into the tree. 

e.path returns the parent of the new nodes. e.childIndices returns the indices 
of the new nodes in ascending order. 

    e - the TreeModelEvent of interest 

*javax.swing.tree.VariableHeightLayoutCache.treeNodesRemoved(TreeModelEvent)*

public void treeNodesRemoved(javax.swing.event.TreeModelEvent e)

Invoked after nodes have been removed from the tree. Note that if a subtree is 
removed from the tree, this method may only be invoked once for the root of the 
removed subtree, not once for each individual set of siblings removed. 

e.path returns the former parent of the deleted nodes. 

e.childIndices returns the indices the nodes had before they were deleted in 
ascending order. 

    e - the TreeModelEvent of interest 

*javax.swing.tree.VariableHeightLayoutCache.treeStructureChanged(TreeModelEvent)*

public void treeStructureChanged(javax.swing.event.TreeModelEvent e)

Invoked after the tree has drastically changed structure from a given node 
down. If the path returned by e.getPath is of length one and the first element 
does not identify the current root node the first element should become the new 
root of the tree. 

e.path holds the path to the node. e.childIndices returns null. 

    e - the TreeModelEvent of interest 



*java.lang.Character* *Character* The Character class wraps a value of the primi

public final class Character
  extends    |java.lang.Object|
  implements |java.io.Serializable|
             |java.lang.Comparable|

|java.lang.Character_Description|
|java.lang.Character_Fields|
|java.lang.Character_Constructors|
|java.lang.Character_Methods|

================================================================================

*java.lang.Character_Fields*
|byte_java.lang.Character.COMBINING_SPACING_MARK|
|byte_java.lang.Character.CONNECTOR_PUNCTUATION|
|byte_java.lang.Character.CONTROL|
|byte_java.lang.Character.CURRENCY_SYMBOL|
|byte_java.lang.Character.DASH_PUNCTUATION|
|byte_java.lang.Character.DECIMAL_DIGIT_NUMBER|
|byte_java.lang.Character.DIRECTIONALITY_ARABIC_NUMBER|
|byte_java.lang.Character.DIRECTIONALITY_BOUNDARY_NEUTRAL|
|byte_java.lang.Character.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR|
|byte_java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER|
|byte_java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR|
|byte_java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR|
|byte_java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT|
|byte_java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING|
|byte_java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE|
|byte_java.lang.Character.DIRECTIONALITY_NONSPACING_MARK|
|byte_java.lang.Character.DIRECTIONALITY_OTHER_NEUTRALS|
|byte_java.lang.Character.DIRECTIONALITY_PARAGRAPH_SEPARATOR|
|byte_java.lang.Character.DIRECTIONALITY_POP_DIRECTIONAL_FORMAT|
|byte_java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT|
|byte_java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC|
|byte_java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING|
|byte_java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE|
|byte_java.lang.Character.DIRECTIONALITY_SEGMENT_SEPARATOR|
|byte_java.lang.Character.DIRECTIONALITY_UNDEFINED|
|byte_java.lang.Character.DIRECTIONALITY_WHITESPACE|
|byte_java.lang.Character.ENCLOSING_MARK|
|byte_java.lang.Character.END_PUNCTUATION|
|byte_java.lang.Character.FINAL_QUOTE_PUNCTUATION|
|byte_java.lang.Character.FORMAT|
|byte_java.lang.Character.INITIAL_QUOTE_PUNCTUATION|
|byte_java.lang.Character.LETTER_NUMBER|
|byte_java.lang.Character.LINE_SEPARATOR|
|byte_java.lang.Character.LOWERCASE_LETTER|
|byte_java.lang.Character.MATH_SYMBOL|
|int_java.lang.Character.MAX_CODE_POINT|
|char_java.lang.Character.MAX_HIGH_SURROGATE|
|char_java.lang.Character.MAX_LOW_SURROGATE|
|int_java.lang.Character.MAX_RADIX|
|char_java.lang.Character.MAX_SURROGATE|
|char_java.lang.Character.MAX_VALUE|
|int_java.lang.Character.MIN_CODE_POINT|
|char_java.lang.Character.MIN_HIGH_SURROGATE|
|char_java.lang.Character.MIN_LOW_SURROGATE|
|int_java.lang.Character.MIN_RADIX|
|int_java.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT|
|char_java.lang.Character.MIN_SURROGATE|
|char_java.lang.Character.MIN_VALUE|
|byte_java.lang.Character.MODIFIER_LETTER|
|byte_java.lang.Character.MODIFIER_SYMBOL|
|byte_java.lang.Character.NON_SPACING_MARK|
|byte_java.lang.Character.OTHER_LETTER|
|byte_java.lang.Character.OTHER_NUMBER|
|byte_java.lang.Character.OTHER_PUNCTUATION|
|byte_java.lang.Character.OTHER_SYMBOL|
|byte_java.lang.Character.PARAGRAPH_SEPARATOR|
|byte_java.lang.Character.PRIVATE_USE|
|int_java.lang.Character.SIZE|
|byte_java.lang.Character.SPACE_SEPARATOR|
|byte_java.lang.Character.START_PUNCTUATION|
|byte_java.lang.Character.SURROGATE|
|byte_java.lang.Character.TITLECASE_LETTER|
|java.lang.Class_java.lang.Character.TYPE|
|byte_java.lang.Character.UNASSIGNED|
|byte_java.lang.Character.UPPERCASE_LETTER|

*java.lang.Character_Constructors*
|java.lang.Character(char)|Constructs a newly allocated Character object that  

*java.lang.Character_Methods*
|java.lang.Character.charCount(int)|Determines the number of char values needed
|java.lang.Character.charValue()|Returns the value of this Character object.
|java.lang.Character.codePointAt(char[],int)|Returns the code point at the give
|java.lang.Character.codePointAt(char[],int,int)|Returns the code point at the 
|java.lang.Character.codePointAt(CharSequence,int)|Returns the code point at th
|java.lang.Character.codePointBefore(char[],int)|Returns the code point precedi
|java.lang.Character.codePointBefore(char[],int,int)|Returns the code point pre
|java.lang.Character.codePointBefore(CharSequence,int)|Returns the code point p
|java.lang.Character.codePointCount(char[],int,int)|Returns the number of Unico
|java.lang.Character.codePointCount(CharSequence,int,int)|Returns the number of
|java.lang.Character.compareTo(Character)|Compares two Character objects numeri
|java.lang.Character.digit(char,int)|Returns the numeric value of the character
|java.lang.Character.digit(int,int)|Returns the numeric value of the specified 
|java.lang.Character.equals(Object)|Compares this object against the specified 
|java.lang.Character.forDigit(int,int)|Determines the character representation 
|java.lang.Character.getDirectionality(char)|Returns the Unicode directionality
|java.lang.Character.getDirectionality(int)|Returns the Unicode directionality 
|java.lang.Character.getNumericValue(char)|Returns the int value that the speci
|java.lang.Character.getNumericValue(int)|Returns the int value that the specif
|java.lang.Character.getType(char)|Returns a value indicating a character's gen
|java.lang.Character.getType(int)|Returns a value indicating a character's gene
|java.lang.Character.hashCode()|Returns a hash code for this Character.
|java.lang.Character.isDefined(char)|Determines if a character is defined in Un
|java.lang.Character.isDefined(int)|Determines if a character (Unicode code poi
|java.lang.Character.isDigit(char)|Determines if the specified character is a d
|java.lang.Character.isDigit(int)|Determines if the specified character (Unicod
|java.lang.Character.isHighSurrogate(char)|Determines if the given char value i
|java.lang.Character.isIdentifierIgnorable(char)|Determines if the specified ch
|java.lang.Character.isIdentifierIgnorable(int)|Determines if the specified cha
|java.lang.Character.isISOControl(char)|Determines if the specified character i
|java.lang.Character.isISOControl(int)|Determines if the referenced character (
|java.lang.Character.isJavaIdentifierPart(char)|Determines if the specified cha
|java.lang.Character.isJavaIdentifierPart(int)|Determines if the character (Uni
|java.lang.Character.isJavaIdentifierStart(char)|Determines if the specified ch
|java.lang.Character.isJavaIdentifierStart(int)|Determines if the character (Un
|java.lang.Character.isJavaLetter(char)|Determines if the specified character i
|java.lang.Character.isJavaLetterOrDigit(char)|Determines if the specified char
|java.lang.Character.isLetter(char)|Determines if the specified character is a 
|java.lang.Character.isLetter(int)|Determines if the specified character (Unico
|java.lang.Character.isLetterOrDigit(char)|Determines if the specified characte
|java.lang.Character.isLetterOrDigit(int)|Determines if the specified character
|java.lang.Character.isLowerCase(char)|Determines if the specified character is
|java.lang.Character.isLowerCase(int)|Determines if the specified character (Un
|java.lang.Character.isLowSurrogate(char)|Determines if the given char value is
|java.lang.Character.isMirrored(char)|Determines whether the character is mirro
|java.lang.Character.isMirrored(int)|Determines whether the specified character
|java.lang.Character.isSpace(char)|Determines if the specified character is ISO
|java.lang.Character.isSpaceChar(char)|Determines if the specified character is
|java.lang.Character.isSpaceChar(int)|Determines if the specified character (Un
|java.lang.Character.isSupplementaryCodePoint(int)|Determines whether the speci
|java.lang.Character.isSurrogatePair(char,char)|Determines whether the specifie
|java.lang.Character.isTitleCase(char)|Determines if the specified character is
|java.lang.Character.isTitleCase(int)|Determines if the specified character (Un
|java.lang.Character.isUnicodeIdentifierPart(char)|Determines if the specified 
|java.lang.Character.isUnicodeIdentifierPart(int)|Determines if the specified c
|java.lang.Character.isUnicodeIdentifierStart(char)|Determines if the specified
|java.lang.Character.isUnicodeIdentifierStart(int)|Determines if the specified 
|java.lang.Character.isUpperCase(char)|Determines if the specified character is
|java.lang.Character.isUpperCase(int)|Determines if the specified character (Un
|java.lang.Character.isValidCodePoint(int)|Determines whether the specified cod
|java.lang.Character.isWhitespace(char)|Determines if the specified character i
|java.lang.Character.isWhitespace(int)|Determines if the specified character (U
|java.lang.Character.offsetByCodePoints(char[],int,int,int,int)|Returns the ind
|java.lang.Character.offsetByCodePoints(CharSequence,int,int)|Returns the index
|java.lang.Character.reverseBytes(char)|Returns the value obtained by reversing
|java.lang.Character.toChars(int)|Converts the specified character (Unicode cod
|java.lang.Character.toChars(int,char[],int)|Converts the specified character (
|java.lang.Character.toCodePoint(char,char)|Converts the specified surrogate pa
|java.lang.Character.toLowerCase(char)|Converts the character argument to lower
|java.lang.Character.toLowerCase(int)|Converts the character (Unicode code poin
|java.lang.Character.toString()|Returns a String object representing this  Char
|java.lang.Character.toString(char)|Returns a String object representing the  s
|java.lang.Character.toTitleCase(char)|Converts the character argument to title
|java.lang.Character.toTitleCase(int)|Converts the character (Unicode code poin
|java.lang.Character.toUpperCase(char)|Converts the character argument to upper
|java.lang.Character.toUpperCase(int)|Converts the character (Unicode code poin
|java.lang.Character.valueOf(char)|Returns a Character instance representing th

*java.lang.Character_Description*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.COMBINING_SPACING_MARK*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.CONNECTOR_PUNCTUATION*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.CONTROL*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.CURRENCY_SYMBOL*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DASH_PUNCTUATION*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DECIMAL_DIGIT_NUMBER*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_ARABIC_NUMBER*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_BOUNDARY_NEUTRAL*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_NONSPACING_MARK*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_OTHER_NEUTRALS*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_PARAGRAPH_SEPARATOR*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_POP_DIRECTIONAL_FORMAT*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_SEGMENT_SEPARATOR*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_UNDEFINED*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.DIRECTIONALITY_WHITESPACE*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.ENCLOSING_MARK*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.END_PUNCTUATION*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.FINAL_QUOTE_PUNCTUATION*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.FORMAT*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.INITIAL_QUOTE_PUNCTUATION*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.LETTER_NUMBER*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.LINE_SEPARATOR*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.LOWERCASE_LETTER*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.MATH_SYMBOL*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*int_java.lang.Character.MAX_CODE_POINT*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*char_java.lang.Character.MAX_HIGH_SURROGATE*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*char_java.lang.Character.MAX_LOW_SURROGATE*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*int_java.lang.Character.MAX_RADIX*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*char_java.lang.Character.MAX_SURROGATE*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*char_java.lang.Character.MAX_VALUE*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*int_java.lang.Character.MIN_CODE_POINT*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*char_java.lang.Character.MIN_HIGH_SURROGATE*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*char_java.lang.Character.MIN_LOW_SURROGATE*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*int_java.lang.Character.MIN_RADIX*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*int_java.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*char_java.lang.Character.MIN_SURROGATE*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*char_java.lang.Character.MIN_VALUE*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.MODIFIER_LETTER*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.MODIFIER_SYMBOL*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.NON_SPACING_MARK*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.OTHER_LETTER*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.OTHER_NUMBER*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.OTHER_PUNCTUATION*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.OTHER_SYMBOL*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.PARAGRAPH_SEPARATOR*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.PRIVATE_USE*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*int_java.lang.Character.SIZE*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.SPACE_SEPARATOR*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.START_PUNCTUATION*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.SURROGATE*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.TITLECASE_LETTER*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*java.lang.Class_java.lang.Character.TYPE*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.UNASSIGNED*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 


*byte_java.lang.Character.UPPERCASE_LETTER*

The Character class wraps a value of the primitive type char in an object. An 
object of type Character contains a single field whose type is char. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 4.0. 

The methods and data of class Character are defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

The char data type (and therefore the value that a Character object 
encapsulates) are based on the original Unicode specification, which defined 
characters as fixed-width 16-bit entities. The Unicode standard has since been 
changed to allow for characters whose representation requires more than 16 
bits. The range of legal code points is now U+0000 to U+10FFFF, known as 
Unicode scalar value. (Refer to the definition of the U+n notation in the 
Unicode standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java 2 platform uses the UTF-16 
representation in char arrays and in the String and StringBuffer classes. In 
this representation, supplementary characters are represented as a pair of char 
values, the first from the high-surrogates range, (uD800-uDBFF), the second 
from the low-surrogates range (uDC00-uDFFF). 

A char value, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. An 
int value represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits of int are used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogate char values is as follows: 

The methods that only accept a char value cannot support supplementary 
characters. They treat char values from the surrogate ranges as undefined 
characters. For example, Character.isLetter('uD840') returns false, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept an int value support all Unicode characters, including 
supplementary characters. For example, Character.isLetter(0x2F81A) returns true 
because the code point value represents a letter (a CJK ideograph). 

In the J2SE API documentation, Unicode code point is used for character values 
in the range between U+0000 and U+10FFFF, and Unicode code unit is used for 
16-bit char values that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 



*java.lang.Character(char)*

public Character(char value)

Constructs a newly allocated Character object that represents the specified 
char value. 

    value - the value to be represented by the Character object. 

*java.lang.Character.charCount(int)*

public static int charCount(int codePoint)

Determines the number of char values needed to represent the specified 
character (Unicode code point). If the specified character is equal to or 
greater than 0x10000, then the method returns 2. Otherwise, the method returns 
1. 

This method doesn't validate the specified character to be a valid Unicode code 
point. The caller must validate the character value using 
isValidCodePoint(|java.lang.Character|) if necessary. 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: 2 if the character is a valid supplementary character; 1 otherwise. 
*java.lang.Character.charValue()*

public char charValue()

Returns the value of this Character object. 


    Returns: the primitive char value represented by this object. 
*java.lang.Character.codePointAt(char[],int)*

public static int codePointAt(
  char[] a,
  int index)

Returns the code point at the given index of the char array. If the char value 
at the given index in the char array is in the high-surrogate range, the 
following index is less than the length of the char array, and the char value 
at the following index is in the low-surrogate range, then the supplementary 
code point corresponding to this surrogate pair is returned. Otherwise, the 
char value at the given index is returned. 

    a - the char array 
    index - the index to the char values (Unicode code units) in the char array to be 
       converted 

    Returns: the Unicode code point at the given index 
*java.lang.Character.codePointAt(char[],int,int)*

public static int codePointAt(
  char[] a,
  int index,
  int limit)

Returns the code point at the given index of the char array, where only array 
elements with index less than limit can be used. If the char value at the given 
index in the char array is in the high-surrogate range, the following index is 
less than the limit, and the char value at the following index is in the 
low-surrogate range, then the supplementary code point corresponding to this 
surrogate pair is returned. Otherwise, the char value at the given index is 
returned. 

    a - the char array 
    index - the index to the char values (Unicode code units) in the char array to be 
       converted 
    limit - the index after the last array element that can be used in the char array 

    Returns: the Unicode code point at the given index 
*java.lang.Character.codePointAt(CharSequence,int)*

public static int codePointAt(
  java.lang.CharSequence seq,
  int index)

Returns the code point at the given index of the CharSequence. If the char 
value at the given index in the CharSequence is in the high-surrogate range, 
the following index is less than the length of the CharSequence, and the char 
value at the following index is in the low-surrogate range, then the 
supplementary code point corresponding to this surrogate pair is returned. 
Otherwise, the char value at the given index is returned. 

    seq - a sequence of char values (Unicode code units) 
    index - the index to the char values (Unicode code units) in seq to be converted 

    Returns: the Unicode code point at the given index 
*java.lang.Character.codePointBefore(char[],int)*

public static int codePointBefore(
  char[] a,
  int index)

Returns the code point preceding the given index of the char array. If the char 
value at (index - 1) in the char array is in the low-surrogate range, (index - 
2) is not negative, and the char value at (index - 2) in the char array is in 
the high-surrogate range, then the supplementary code point corresponding to 
this surrogate pair is returned. Otherwise, the char value at (index - 1) is 
returned. 

    a - the char array 
    index - the index following the code point that should be returned 

    Returns: the Unicode code point value before the given index. 
*java.lang.Character.codePointBefore(char[],int,int)*

public static int codePointBefore(
  char[] a,
  int index,
  int start)

Returns the code point preceding the given index of the char array, where only 
array elements with index greater than or equal to start can be used. If the 
char value at (index - 1) in the char array is in the low-surrogate range, 
(index - 2) is not less than start, and the char value at (index - 2) in the 
char array is in the high-surrogate range, then the supplementary code point 
corresponding to this surrogate pair is returned. Otherwise, the char value at 
(index - 1) is returned. 

    a - the char array 
    index - the index following the code point that should be returned 
    start - the index of the first array element in the char array 

    Returns: the Unicode code point value before the given index. 
*java.lang.Character.codePointBefore(CharSequence,int)*

public static int codePointBefore(
  java.lang.CharSequence seq,
  int index)

Returns the code point preceding the given index of the CharSequence. If the 
char value at (index - 1) in the CharSequence is in the low-surrogate range, 
(index - 2) is not negative, and the char value at (index - 2) in the 
CharSequence is in the high-surrogate range, then the supplementary code point 
corresponding to this surrogate pair is returned. Otherwise, the char value at 
(index - 1) is returned. 

    seq - the CharSequence instance 
    index - the index following the code point that should be returned 

    Returns: the Unicode code point value before the given index. 
*java.lang.Character.codePointCount(char[],int,int)*

public static int codePointCount(
  char[] a,
  int offset,
  int count)

Returns the number of Unicode code points in a subarray of the char array 
argument. The offset argument is the index of the first char of the subarray 
and the count argument specifies the length of the subarray in chars. Unpaired 
surrogates within the subarray count as one code point each. 

    a - the char array 
    offset - the index of the first char in the given char array 
    count - the length of the subarray in chars 

    Returns: the number of Unicode code points in the specified subarray 
*java.lang.Character.codePointCount(CharSequence,int,int)*

public static int codePointCount(
  java.lang.CharSequence seq,
  int beginIndex,
  int endIndex)

Returns the number of Unicode code points in the text range of the specified 
char sequence. The text range begins at the specified beginIndex and extends to 
the char at index endIndex - 1. Thus the length (in chars) of the text range is 
endIndex-beginIndex. Unpaired surrogates within the text range count as one 
code point each. 

    seq - the char sequence 
    beginIndex - the index to the first char of the text range. 
    endIndex - the index after the last char of the text range. 

    Returns: the number of Unicode code points in the specified text range 
*java.lang.Character.compareTo(Character)*

public int compareTo(java.lang.Character anotherCharacter)

Compares two Character objects numerically. 

    anotherCharacter - the Character to be compared. 

    Returns: the value 0 if the argument Character is equal to this Character; a value less 
             than 0 if this Character is numerically less than the Character 
             argument; and a value greater than 0 if this Character is 
             numerically greater than the Character argument (unsigned 
             comparison). Note that this is strictly a numerical comparison; it 
             is not locale-dependent. 
*java.lang.Character.digit(char,int)*

public static int digit(
  char ch,
  int radix)

Returns the numeric value of the character ch in the specified radix. 

If the radix is not in the range MIN_RADIX<= radix<= MAX_RADIX or if the value 
of ch is not a valid digit in the specified radix, -1 is returned. A character 
is a valid digit if at least one of the following is true: 

The method isDigit is true of the character and the Unicode decimal digit value 
of the character (or its single-character decomposition) is less than the 
specified radix. In this case the decimal digit value is returned. The 
character is one of the uppercase Latin letters 'A' through 'Z' and its code is 
less than radix+ 'A'-10. In this case, ch- 'A'+10 is returned. The character is 
one of the lowercase Latin letters 'a' through 'z' and its code is less than 
radix+ 'a'-10. In this case, ch- 'a'+10 is returned. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be converted. 
    radix - the radix. 

    Returns: the numeric value represented by the character in the specified radix. 
*java.lang.Character.digit(int,int)*

public static int digit(
  int codePoint,
  int radix)

Returns the numeric value of the specified character (Unicode code point) in 
the specified radix. 

If the radix is not in the range MIN_RADIX<= radix<= MAX_RADIX or if the 
character is not a valid digit in the specified radix, -1 is returned. A 
character is a valid digit if at least one of the following is true: 

The method isDigit(codePoint)(|java.lang.Character|) is true of the character 
and the Unicode decimal digit value of the character (or its single-character 
decomposition) is less than the specified radix. In this case the decimal digit 
value is returned. The character is one of the uppercase Latin letters 'A' 
through 'Z' and its code is less than radix+ 'A'-10. In this case, ch- 'A'+10 
is returned. The character is one of the lowercase Latin letters 'a' through 
'z' and its code is less than radix+ 'a'-10. In this case, ch- 'a'+10 is 
returned. 

    codePoint - the character (Unicode code point) to be converted. 
    radix - the radix. 

    Returns: the numeric value represented by the character in the specified radix. 
*java.lang.Character.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this object against the specified object. The result is true if and 
only if the argument is not null and is a Character object that represents the 
same char value as this object. 

    obj - the object to compare with. 

    Returns: true if the objects are the same; false otherwise. 
*java.lang.Character.forDigit(int,int)*

public static char forDigit(
  int digit,
  int radix)

Determines the character representation for a specific digit in the specified 
radix. If the value of radix is not a valid radix, or the value of digit is not 
a valid digit in the specified radix, the null character ('u0000') is returned. 

The radix argument is valid if it is greater than or equal to MIN_RADIX and 
less than or equal to MAX_RADIX. The digit argument is valid if 0<=digit<radix. 

If the digit is less than 10, then '0'+ digit is returned. Otherwise, the value 
'a'+ digit-10 is returned. 

    digit - the number to convert to a character. 
    radix - the radix. 

    Returns: the char representation of the specified digit in the specified radix. 
*java.lang.Character.getDirectionality(char)*

public static byte getDirectionality(char ch)

Returns the Unicode directionality property for the given character. Character 
directionality is used to calculate the visual ordering of text. The 
directionality value of undefined char values is DIRECTIONALITY_UNDEFINED. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - char for which the directionality property is requested. 

    Returns: the directionality property of the char value. 
*java.lang.Character.getDirectionality(int)*

public static byte getDirectionality(int codePoint)

Returns the Unicode directionality property for the given character (Unicode 
code point). Character directionality is used to calculate the visual ordering 
of text. The directionality value of undefined character is 
(|java.lang.Character|) . 

    codePoint - the character (Unicode code point) for which the directionality property * is 
       requested. 

    Returns: the directionality property of the character. 
*java.lang.Character.getNumericValue(char)*

public static int getNumericValue(char ch)

Returns the int value that the specified Unicode character represents. For 
example, the character 'u216C' (the roman numeral fifty) will return an int 
with a value of 50. 

The letters A-Z in their uppercase ('u0041' through 'u005A'), lowercase 
('u0061' through 'u007A'), and full width variant ('uFF21' through 'uFF3A' and 
'uFF41' through 'uFF5A') forms have numeric values from 10 through 35. This is 
independent of the Unicode specification, which does not assign numeric values 
to these char values. 

If the character does not have a numeric value, then -1 is returned. If the 
character has a numeric value that cannot be represented as a nonnegative 
integer (for example, a fractional value), then -2 is returned. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be converted. 

    Returns: the numeric value of the character, as a nonnegative int value; -2 if the 
             character has a numeric value that is not a nonnegative integer; 
             -1 if the character has no numeric value. 
*java.lang.Character.getNumericValue(int)*

public static int getNumericValue(int codePoint)

Returns the int value that the specified character (Unicode code point) 
represents. For example, the character 'u216C' (the Roman numeral fifty) will 
return an int with a value of 50. 

The letters A-Z in their uppercase ('u0041' through 'u005A'), lowercase 
('u0061' through 'u007A'), and full width variant ('uFF21' through 'uFF3A' and 
'uFF41' through 'uFF5A') forms have numeric values from 10 through 35. This is 
independent of the Unicode specification, which does not assign numeric values 
to these char values. 

If the character does not have a numeric value, then -1 is returned. If the 
character has a numeric value that cannot be represented as a nonnegative 
integer (for example, a fractional value), then -2 is returned. 

    codePoint - the character (Unicode code point) to be converted. 

    Returns: the numeric value of the character, as a nonnegative int value; -2 if the 
             character has a numeric value that is not a nonnegative integer; 
             -1 if the character has no numeric value. 
*java.lang.Character.getType(char)*

public static int getType(char ch)

Returns a value indicating a character's general category. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be tested. 

    Returns: a value of type int representing the character's general category. 
*java.lang.Character.getType(int)*

public static int getType(int codePoint)

Returns a value indicating a character's general category. 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: a value of type int representing the character's general category. 
*java.lang.Character.hashCode()*

public int hashCode()

Returns a hash code for this Character. 


    Returns: a hash code value for this object. 
*java.lang.Character.isDefined(char)*

public static boolean isDefined(char ch)

Determines if a character is defined in Unicode. 

A character is defined if at least one of the following is true: 

It has an entry in the UnicodeData file. It has a value in a range defined by 
the UnicodeData file. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be tested 

    Returns: true if the character has a defined meaning in Unicode; false otherwise. 
*java.lang.Character.isDefined(int)*

public static boolean isDefined(int codePoint)

Determines if a character (Unicode code point) is defined in Unicode. 

A character is defined if at least one of the following is true: 

It has an entry in the UnicodeData file. It has a value in a range defined by 
the UnicodeData file. 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character has a defined meaning in Unicode; false otherwise. 
*java.lang.Character.isDigit(char)*

public static boolean isDigit(char ch)

Determines if the specified character is a digit. 

A character is a digit if its general category type, provided by 
Character.getType(ch), is DECIMAL_DIGIT_NUMBER. 

Some Unicode character ranges that contain digits: 

'u0030' through 'u0039', ISO-LATIN-1 digits ('0' through '9') 'u0660' through 
'u0669', Arabic-Indic digits 'u06F0' through 'u06F9', Extended Arabic-Indic 
digits 'u0966' through 'u096F', Devanagari digits 'uFF10' through 'uFF19', 
Fullwidth digits 

Many other character ranges contain digits as well. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be tested. 

    Returns: true if the character is a digit; false otherwise. 
*java.lang.Character.isDigit(int)*

public static boolean isDigit(int codePoint)

Determines if the specified character (Unicode code point) is a digit. 

A character is a digit if its general category type, provided by 
getType(codePoint)(|java.lang.Character|) , is DECIMAL_DIGIT_NUMBER. 

Some Unicode character ranges that contain digits: 

'u0030' through 'u0039', ISO-LATIN-1 digits ('0' through '9') 'u0660' through 
'u0669', Arabic-Indic digits 'u06F0' through 'u06F9', Extended Arabic-Indic 
digits 'u0966' through 'u096F', Devanagari digits 'uFF10' through 'uFF19', 
Fullwidth digits 

Many other character ranges contain digits as well. 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character is a digit; false otherwise. 
*java.lang.Character.isHighSurrogate(char)*

public static boolean isHighSurrogate(char ch)

Determines if the given char value is a high-surrogate code unit (also known as 
leading-surrogate code unit). Such values do not represent characters by 
themselves, but are used in the representation of supplementary characters in 
the UTF-16 encoding. 

This method returns true if and only if 

ch >= 'uD800' ch is true. 

    ch - the char value to be tested. 

    Returns: true if the char value is between 'uD800' and 'uDBFF' inclusive; false 
             otherwise. 
*java.lang.Character.isIdentifierIgnorable(char)*

public static boolean isIdentifierIgnorable(char ch)

Determines if the specified character should be regarded as an ignorable 
character in a Java identifier or a Unicode identifier. 

The following Unicode characters are ignorable in a Java identifier or a 
Unicode identifier: 

ISO control characters that are not whitespace 

'u0000' through 'u0008' 'u000E' through 'u001B' 'u007F' through 'u009F' 

all characters that have the FORMAT general category value 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be tested. 

    Returns: true if the character is an ignorable control character that may be part of a 
             Java or Unicode identifier; false otherwise. 
*java.lang.Character.isIdentifierIgnorable(int)*

public static boolean isIdentifierIgnorable(int codePoint)

Determines if the specified character (Unicode code point) should be regarded 
as an ignorable character in a Java identifier or a Unicode identifier. 

The following Unicode characters are ignorable in a Java identifier or a 
Unicode identifier: 

ISO control characters that are not whitespace 

'u0000' through 'u0008' 'u000E' through 'u001B' 'u007F' through 'u009F' 

all characters that have the FORMAT general category value 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character is an ignorable control character that may be part of a 
             Java or Unicode identifier; false otherwise. 
*java.lang.Character.isISOControl(char)*

public static boolean isISOControl(char ch)

Determines if the specified character is an ISO control character. A character 
is considered to be an ISO control character if its code is in the range 
'u0000' through 'u001F' or in the range 'u007F' through 'u009F'. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be tested. 

    Returns: true if the character is an ISO control character; false otherwise. 
*java.lang.Character.isISOControl(int)*

public static boolean isISOControl(int codePoint)

Determines if the referenced character (Unicode code point) is an ISO control 
character. A character is considered to be an ISO control character if its code 
is in the range 'u0000' through 'u001F' or in the range 'u007F' through 
'u009F'. 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character is an ISO control character; false otherwise. 
*java.lang.Character.isJavaIdentifierPart(char)*

public static boolean isJavaIdentifierPart(char ch)

Determines if the specified character may be part of a Java identifier as other 
than the first character. 

A character may be part of a Java identifier if any of the following are true: 

it is a letter it is a currency symbol (such as '$') it is a connecting 
punctuation character (such as '_') it is a digit it is a numeric letter (such 
as a Roman numeral character) it is a combining mark it is a non-spacing mark 
isIdentifierIgnorable returns true for the character 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be tested. 

    Returns: true if the character may be part of a Java identifier; false otherwise. 
*java.lang.Character.isJavaIdentifierPart(int)*

public static boolean isJavaIdentifierPart(int codePoint)

Determines if the character (Unicode code point) may be part of a Java 
identifier as other than the first character. 

A character may be part of a Java identifier if any of the following are true: 

it is a letter it is a currency symbol (such as '$') it is a connecting 
punctuation character (such as '_') it is a digit it is a numeric letter (such 
as a Roman numeral character) it is a combining mark it is a non-spacing mark 
isIdentifierIgnorable(codePoint)(|java.lang.Character|) returns true for the 
character 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character may be part of a Java identifier; false otherwise. 
*java.lang.Character.isJavaIdentifierStart(char)*

public static boolean isJavaIdentifierStart(char ch)

Determines if the specified character is permissible as the first character in 
a Java identifier. 

A character may start a Java identifier if and only if one of the following 
conditions is true: 

isLetter(ch)(|java.lang.Character|) returns true 
getType(ch)(|java.lang.Character|) returns LETTER_NUMBER ch is a currency 
symbol (such as "$") ch is a connecting punctuation character (such as "_"). 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be tested. 

    Returns: true if the character may start a Java identifier; false otherwise. 
*java.lang.Character.isJavaIdentifierStart(int)*

public static boolean isJavaIdentifierStart(int codePoint)

Determines if the character (Unicode code point) is permissible as the first 
character in a Java identifier. 

A character may start a Java identifier if and only if one of the following 
conditions is true: 

isLetter(codePoint)(|java.lang.Character|) returns true 
getType(codePoint)(|java.lang.Character|) returns LETTER_NUMBER the referenced 
character is a currency symbol (such as "$") the referenced character is a 
connecting punctuation character (such as "_"). 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character may start a Java identifier; false otherwise. 
*java.lang.Character.isJavaLetter(char)*

public static boolean isJavaLetter(char ch)

Determines if the specified character is permissible as the first character in 
a Java identifier. 

A character may start a Java identifier if and only if one of the following is 
true: 

isLetter(ch)(|java.lang.Character|) returns true 
getType(ch)(|java.lang.Character|) returns LETTER_NUMBER ch is a currency 
symbol (such as "$") ch is a connecting punctuation character (such as "_"). 

    ch - the character to be tested. 

    Returns: true if the character may start a Java identifier; false otherwise. 
*java.lang.Character.isJavaLetterOrDigit(char)*

public static boolean isJavaLetterOrDigit(char ch)

Determines if the specified character may be part of a Java identifier as other 
than the first character. 

A character may be part of a Java identifier if and only if any of the 
following are true: 

it is a letter it is a currency symbol (such as '$') it is a connecting 
punctuation character (such as '_') it is a digit it is a numeric letter (such 
as a Roman numeral character) it is a combining mark it is a non-spacing mark 
isIdentifierIgnorable returns true for the character. 

    ch - the character to be tested. 

    Returns: true if the character may be part of a Java identifier; false otherwise. 
*java.lang.Character.isLetter(char)*

public static boolean isLetter(char ch)

Determines if the specified character is a letter. 

A character is considered to be a letter if its general category type, provided 
by Character.getType(ch), is any of the following: 

UPPERCASE_LETTER LOWERCASE_LETTER TITLECASE_LETTER MODIFIER_LETTER OTHER_LETTER 

Not all letters have case. Many characters are letters but are neither 
uppercase nor lowercase nor titlecase. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be tested. 

    Returns: true if the character is a letter; false otherwise. 
*java.lang.Character.isLetter(int)*

public static boolean isLetter(int codePoint)

Determines if the specified character (Unicode code point) is a letter. 

A character is considered to be a letter if its general category type, provided 
by getType(codePoint)(|java.lang.Character|) , is any of the following: 

UPPERCASE_LETTER LOWERCASE_LETTER TITLECASE_LETTER MODIFIER_LETTER OTHER_LETTER 

Not all letters have case. Many characters are letters but are neither 
uppercase nor lowercase nor titlecase. 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character is a letter; false otherwise. 
*java.lang.Character.isLetterOrDigit(char)*

public static boolean isLetterOrDigit(char ch)

Determines if the specified character is a letter or digit. 

A character is considered to be a letter or digit if either 
Character.isLetter(char ch) or Character.isDigit(char ch) returns true for the 
character. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be tested. 

    Returns: true if the character is a letter or digit; false otherwise. 
*java.lang.Character.isLetterOrDigit(int)*

public static boolean isLetterOrDigit(int codePoint)

Determines if the specified character (Unicode code point) is a letter or 
digit. 

A character is considered to be a letter or digit if either 
isLetter(codePoint)(|java.lang.Character|) or 
isDigit(codePoint)(|java.lang.Character|) returns true for the character. 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character is a letter or digit; false otherwise. 
*java.lang.Character.isLowerCase(char)*

public static boolean isLowerCase(char ch)

Determines if the specified character is a lowercase character. 

A character is lowercase if its general category type, provided by 
Character.getType(ch), is LOWERCASE_LETTER. 

The following are examples of lowercase characters: 

a b c d e f g h i j k l m n o p q r s t u v w x y z 'u00DF' 'u00E0' 'u00E1' 
'u00E2' 'u00E3' 'u00E4' 'u00E5' 'u00E6' 'u00E7' 'u00E8' 'u00E9' 'u00EA' 'u00EB' 
'u00EC' 'u00ED' 'u00EE' 'u00EF' 'u00F0' 'u00F1' 'u00F2' 'u00F3' 'u00F4' 'u00F5' 
'u00F6' 'u00F8' 'u00F9' 'u00FA' 'u00FB' 'u00FC' 'u00FD' 'u00FE' 'u00FF' 

Many other Unicode characters are lowercase too. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be tested. 

    Returns: true if the character is lowercase; false otherwise. 
*java.lang.Character.isLowerCase(int)*

public static boolean isLowerCase(int codePoint)

Determines if the specified character (Unicode code point) is a lowercase 
character. 

A character is lowercase if its general category type, provided by 
getType(codePoint)(|java.lang.Character|) , is LOWERCASE_LETTER. 

The following are examples of lowercase characters: 

a b c d e f g h i j k l m n o p q r s t u v w x y z 'u00DF' 'u00E0' 'u00E1' 
'u00E2' 'u00E3' 'u00E4' 'u00E5' 'u00E6' 'u00E7' 'u00E8' 'u00E9' 'u00EA' 'u00EB' 
'u00EC' 'u00ED' 'u00EE' 'u00EF' 'u00F0' 'u00F1' 'u00F2' 'u00F3' 'u00F4' 'u00F5' 
'u00F6' 'u00F8' 'u00F9' 'u00FA' 'u00FB' 'u00FC' 'u00FD' 'u00FE' 'u00FF' 

Many other Unicode characters are lowercase too. 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character is lowercase; false otherwise. 
*java.lang.Character.isLowSurrogate(char)*

public static boolean isLowSurrogate(char ch)

Determines if the given char value is a low-surrogate code unit (also known as 
trailing-surrogate code unit). Such values do not represent characters by 
themselves, but are used in the representation of supplementary characters in 
the UTF-16 encoding. 

This method returns true if and only if 

ch >= 'uDC00' ch is true. 

    ch - the char value to be tested. 

    Returns: true if the char value is between 'uDC00' and 'uDFFF' inclusive; false 
             otherwise. 
*java.lang.Character.isMirrored(char)*

public static boolean isMirrored(char ch)

Determines whether the character is mirrored according to the Unicode 
specification. Mirrored characters should have their glyphs horizontally 
mirrored when displayed in text that is right-to-left. For example, 'u0028' 
LEFT PARENTHESIS is semantically defined to be an opening parenthesis. This 
will appear as a "(" in text that is left-to-right but as a ")" in text that is 
right-to-left. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - char for which the mirrored property is requested 

    Returns: true if the char is mirrored, false if the char is not mirrored or is not 
             defined. 
*java.lang.Character.isMirrored(int)*

public static boolean isMirrored(int codePoint)

Determines whether the specified character (Unicode code point) is mirrored 
according to the Unicode specification. Mirrored characters should have their 
glyphs horizontally mirrored when displayed in text that is right-to-left. For 
example, 'u0028' LEFT PARENTHESIS is semantically defined to be an opening 
parenthesis. This will appear as a "(" in text that is left-to-right but as a 
")" in text that is right-to-left. 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character is mirrored, false if the character is not mirrored or is 
             not defined. 
*java.lang.Character.isSpace(char)*

public static boolean isSpace(char ch)

Determines if the specified character is ISO-LATIN-1 white space. This method 
returns true for the following five characters only: 

'\t' 'u0009' HORIZONTAL TABULATION '\n' 'u000A' NEW LINE '\f' 'u000C' FORM FEED 
'\r' 'u000D' CARRIAGE RETURN '' 'u0020' SPACE 

    ch - the character to be tested. 

    Returns: true if the character is ISO-LATIN-1 white space; false otherwise. 
*java.lang.Character.isSpaceChar(char)*

public static boolean isSpaceChar(char ch)

Determines if the specified character is a Unicode space character. A character 
is considered to be a space character if and only if it is specified to be a 
space character by the Unicode standard. This method returns true if the 
character's general category type is any of the following: 

SPACE_SEPARATOR LINE_SEPARATOR PARAGRAPH_SEPARATOR 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be tested. 

    Returns: true if the character is a space character; false otherwise. 
*java.lang.Character.isSpaceChar(int)*

public static boolean isSpaceChar(int codePoint)

Determines if the specified character (Unicode code point) is a Unicode space 
character. A character is considered to be a space character if and only if it 
is specified to be a space character by the Unicode standard. This method 
returns true if the character's general category type is any of the following: 

(|java.lang.Character|) (|java.lang.Character|) (|java.lang.Character|) 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character is a space character; false otherwise. 
*java.lang.Character.isSupplementaryCodePoint(int)*

public static boolean isSupplementaryCodePoint(int codePoint)

Determines whether the specified character (Unicode code point) is in the 
supplementary character range. The method call is equivalent to the expression: 

codePoint >= 0x10000 codePoint 

    codePoint - the character (Unicode code point) to be tested 

    Returns: true if the specified character is in the Unicode supplementary character 
             range; false otherwise. 
*java.lang.Character.isSurrogatePair(char,char)*

public static boolean isSurrogatePair(
  char high,
  char low)

Determines whether the specified pair of char values is a valid surrogate pair. 
This method is equivalent to the expression: 

isHighSurrogate(high) isLowSurrogate(low) 

    high - the high-surrogate code value to be tested 
    low - the low-surrogate code value to be tested 

    Returns: true if the specified high and low-surrogate code values represent a valid 
             surrogate pair; false otherwise. 
*java.lang.Character.isTitleCase(char)*

public static boolean isTitleCase(char ch)

Determines if the specified character is a titlecase character. 

A character is a titlecase character if its general category type, provided by 
Character.getType(ch), is TITLECASE_LETTER. 

Some characters look like pairs of Latin letters. For example, there is an 
uppercase letter that looks like "LJ" and has a corresponding lowercase letter 
that looks like "lj". A third form, which looks like "Lj", is the appropriate 
form to use when rendering a word in lowercase with initial capitals, as for a 
book title. 

These are some of the Unicode characters for which this method returns true: 

LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON LATIN CAPITAL LETTER L 
WITH SMALL LETTER J LATIN CAPITAL LETTER N WITH SMALL LETTER J LATIN CAPITAL 
LETTER D WITH SMALL LETTER Z 

Many other Unicode characters are titlecase too. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be tested. 

    Returns: true if the character is titlecase; false otherwise. 
*java.lang.Character.isTitleCase(int)*

public static boolean isTitleCase(int codePoint)

Determines if the specified character (Unicode code point) is a titlecase 
character. 

A character is a titlecase character if its general category type, provided by 
getType(codePoint)(|java.lang.Character|) , is TITLECASE_LETTER. 

Some characters look like pairs of Latin letters. For example, there is an 
uppercase letter that looks like "LJ" and has a corresponding lowercase letter 
that looks like "lj". A third form, which looks like "Lj", is the appropriate 
form to use when rendering a word in lowercase with initial capitals, as for a 
book title. 

These are some of the Unicode characters for which this method returns true: 

LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON LATIN CAPITAL LETTER L 
WITH SMALL LETTER J LATIN CAPITAL LETTER N WITH SMALL LETTER J LATIN CAPITAL 
LETTER D WITH SMALL LETTER Z 

Many other Unicode characters are titlecase too. 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character is titlecase; false otherwise. 
*java.lang.Character.isUnicodeIdentifierPart(char)*

public static boolean isUnicodeIdentifierPart(char ch)

Determines if the specified character may be part of a Unicode identifier as 
other than the first character. 

A character may be part of a Unicode identifier if and only if one of the 
following statements is true: 

it is a letter it is a connecting punctuation character (such as '_') it is a 
digit it is a numeric letter (such as a Roman numeral character) it is a 
combining mark it is a non-spacing mark isIdentifierIgnorable returns true for 
this character. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be tested. 

    Returns: true if the character may be part of a Unicode identifier; false otherwise. 
*java.lang.Character.isUnicodeIdentifierPart(int)*

public static boolean isUnicodeIdentifierPart(int codePoint)

Determines if the specified character (Unicode code point) may be part of a 
Unicode identifier as other than the first character. 

A character may be part of a Unicode identifier if and only if one of the 
following statements is true: 

it is a letter it is a connecting punctuation character (such as '_') it is a 
digit it is a numeric letter (such as a Roman numeral character) it is a 
combining mark it is a non-spacing mark isIdentifierIgnorable returns true for 
this character. 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character may be part of a Unicode identifier; false otherwise. 
*java.lang.Character.isUnicodeIdentifierStart(char)*

public static boolean isUnicodeIdentifierStart(char ch)

Determines if the specified character is permissible as the first character in 
a Unicode identifier. 

A character may start a Unicode identifier if and only if one of the following 
conditions is true: 

isLetter(ch)(|java.lang.Character|) returns true 
getType(ch)(|java.lang.Character|) returns LETTER_NUMBER. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be tested. 

    Returns: true if the character may start a Unicode identifier; false otherwise. 
*java.lang.Character.isUnicodeIdentifierStart(int)*

public static boolean isUnicodeIdentifierStart(int codePoint)

Determines if the specified character (Unicode code point) is permissible as 
the first character in a Unicode identifier. 

A character may start a Unicode identifier if and only if one of the following 
conditions is true: 

isLetter(codePoint)(|java.lang.Character|) returns true 
getType(codePoint)(|java.lang.Character|) returns LETTER_NUMBER. 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character may start a Unicode identifier; false otherwise. 
*java.lang.Character.isUpperCase(char)*

public static boolean isUpperCase(char ch)

Determines if the specified character is an uppercase character. 

A character is uppercase if its general category type, provided by 
Character.getType(ch), is UPPERCASE_LETTER. 

The following are examples of uppercase characters: 

A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 'u00C0' 'u00C1' 'u00C2' 
'u00C3' 'u00C4' 'u00C5' 'u00C6' 'u00C7' 'u00C8' 'u00C9' 'u00CA' 'u00CB' 'u00CC' 
'u00CD' 'u00CE' 'u00CF' 'u00D0' 'u00D1' 'u00D2' 'u00D3' 'u00D4' 'u00D5' 'u00D6' 
'u00D8' 'u00D9' 'u00DA' 'u00DB' 'u00DC' 'u00DD' 'u00DE' 

Many other Unicode characters are uppercase too. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be tested. 

    Returns: true if the character is uppercase; false otherwise. 
*java.lang.Character.isUpperCase(int)*

public static boolean isUpperCase(int codePoint)

Determines if the specified character (Unicode code point) is an uppercase 
character. 

A character is uppercase if its general category type, provided by 
getType(codePoint)(|java.lang.Character|) , is UPPERCASE_LETTER. 

The following are examples of uppercase characters: 

A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 'u00C0' 'u00C1' 'u00C2' 
'u00C3' 'u00C4' 'u00C5' 'u00C6' 'u00C7' 'u00C8' 'u00C9' 'u00CA' 'u00CB' 'u00CC' 
'u00CD' 'u00CE' 'u00CF' 'u00D0' 'u00D1' 'u00D2' 'u00D3' 'u00D4' 'u00D5' 'u00D6' 
'u00D8' 'u00D9' 'u00DA' 'u00DB' 'u00DC' 'u00DD' 'u00DE' 

Many other Unicode characters are uppercase too. 

    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character is uppercase; false otherwise. 
*java.lang.Character.isValidCodePoint(int)*

public static boolean isValidCodePoint(int codePoint)

Determines whether the specified code point is a valid Unicode code point value 
in the range of 0x0000 to 0x10FFFF inclusive. This method is equivalent to the 
expression: 



codePoint >= 0x0000 codePoint 

    codePoint - the Unicode code point to be tested 

    Returns: true if the specified code point value is a valid code point value; false 
             otherwise. 
*java.lang.Character.isWhitespace(char)*

public static boolean isWhitespace(char ch)

Determines if the specified character is white space according to Java. A 
character is a Java whitespace character if and only if it satisfies one of the 
following criteria: 

It is a Unicode space character (SPACE_SEPARATOR, LINE_SEPARATOR, or 
PARAGRAPH_SEPARATOR) but is not also a non-breaking space ('u00A0', 'u2007', 
'u202F'). It is 'u0009', HORIZONTAL TABULATION. It is 'u000A', LINE FEED. It is 
'u000B', VERTICAL TABULATION. It is 'u000C', FORM FEED. It is 'u000D', CARRIAGE 
RETURN. It is 'u001C', FILE SEPARATOR. It is 'u001D', GROUP SEPARATOR. It is 
'u001E', RECORD SEPARATOR. It is 'u001F', UNIT SEPARATOR. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be tested. 

    Returns: true if the character is a Java whitespace character; false otherwise. 
*java.lang.Character.isWhitespace(int)*

public static boolean isWhitespace(int codePoint)

Determines if the specified character (Unicode code point) is white space 
according to Java. A character is a Java whitespace character if and only if it 
satisfies one of the following criteria: 

It is a Unicode space character ( (|java.lang.Character|) , 
(|java.lang.Character|) , or (|java.lang.Character|) ) but is not also a 
non-breaking space ('u00A0', 'u2007', 'u202F'). It is 'u0009', HORIZONTAL 
TABULATION. It is 'u000A', LINE FEED. It is 'u000B', VERTICAL TABULATION. It is 
'u000C', FORM FEED. It is 'u000D', CARRIAGE RETURN. It is 'u001C', FILE 
SEPARATOR. It is 'u001D', GROUP SEPARATOR. It is 'u001E', RECORD SEPARATOR. It 
is 'u001F', UNIT SEPARATOR. 



    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character is a Java whitespace character; false otherwise. 
*java.lang.Character.offsetByCodePoints(char[],int,int,int,int)*

public static int offsetByCodePoints(
  char[] a,
  int start,
  int count,
  int index,
  int codePointOffset)

Returns the index within the given char subarray that is offset from the given 
index by codePointOffset code points. The start and count arguments specify a 
subarray of the char array. Unpaired surrogates within the text range given by 
index and codePointOffset count as one code point each. 

    a - the char array 
    start - the index of the first char of the subarray 
    count - the length of the subarray in chars 
    index - the index to be offset 
    codePointOffset - the offset in code points 

    Returns: the index within the subarray 
*java.lang.Character.offsetByCodePoints(CharSequence,int,int)*

public static int offsetByCodePoints(
  java.lang.CharSequence seq,
  int index,
  int codePointOffset)

Returns the index within the given char sequence that is offset from the given 
index by codePointOffset code points. Unpaired surrogates within the text range 
given by index and codePointOffset count as one code point each. 

    seq - the char sequence 
    index - the index to be offset 
    codePointOffset - the offset in code points 

    Returns: the index within the char sequence 
*java.lang.Character.reverseBytes(char)*

public static char reverseBytes(char ch)

Returns the value obtained by reversing the order of the bytes in the specified 
char value. 


    Returns: the value obtained by reversing (or, equivalently, swapping) the bytes in the 
             specified char value. 
*java.lang.Character.toChars(int)*

public static char toChars(int codePoint)

Converts the specified character (Unicode code point) to its UTF-16 
representation stored in a char array. If the specified code point is a BMP 
(Basic Multilingual Plane or Plane 0) value, the resulting char array has the 
same value as codePoint. If the specified code point is a supplementary code 
point, the resulting char array has the corresponding surrogate pair. 

    codePoint - a Unicode code point 

    Returns: a char array having codePoint's UTF-16 representation. 
*java.lang.Character.toChars(int,char[],int)*

public static int toChars(
  int codePoint,
  char[] dst,
  int dstIndex)

Converts the specified character (Unicode code point) to its UTF-16 
representation. If the specified code point is a BMP (Basic Multilingual Plane 
or Plane 0) value, the same value is stored in dst[dstIndex], and 1 is 
returned. If the specified code point is a supplementary character, its 
surrogate values are stored in dst[dstIndex] (high-surrogate) and 
dst[dstIndex+1] (low-surrogate), and 2 is returned. 

    codePoint - the character (Unicode code point) to be converted. 
    dst - an array of char in which the codePoint's UTF-16 value is stored. 
    dstIndex - the start index into the dst array where the converted value is stored. 

    Returns: 1 if the code point is a BMP code point, 2 if the code point is a supplementary 
             code point. 
*java.lang.Character.toCodePoint(char,char)*

public static int toCodePoint(
  char high,
  char low)

Converts the specified surrogate pair to its supplementary code point value. 
This method does not validate the specified surrogate pair. The caller must 
validate it using isSurrogatePair(|java.lang.Character|) if necessary. 

    high - the high-surrogate code unit 
    low - the low-surrogate code unit 

    Returns: the supplementary code point composed from the specified surrogate pair. 
*java.lang.Character.toLowerCase(char)*

public static char toLowerCase(char ch)

Converts the character argument to lowercase using case mapping information 
from the UnicodeData file. 

Note that Character.isLowerCase(Character.toLowerCase(ch)) does not always 
return true for some ranges of characters, particularly those that are symbols 
or ideographs. 

In general, (|java.lang.String|) should be used to map characters to lowercase. 
String case mapping methods have several benefits over Character case mapping 
methods. String case mapping methods can perform locale-sensitive mappings, 
context-sensitive mappings, and 1:M character mappings, whereas the Character 
case mapping methods cannot. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be converted. 

    Returns: the lowercase equivalent of the character, if any; otherwise, the character 
             itself. 
*java.lang.Character.toLowerCase(int)*

public static int toLowerCase(int codePoint)

Converts the character (Unicode code point) argument to lowercase using case 
mapping information from the UnicodeData file. 

Note that Character.isLowerCase(Character.toLowerCase(codePoint)) does not 
always return true for some ranges of characters, particularly those that are 
symbols or ideographs. 

In general, (|java.lang.String|) should be used to map characters to lowercase. 
String case mapping methods have several benefits over Character case mapping 
methods. String case mapping methods can perform locale-sensitive mappings, 
context-sensitive mappings, and 1:M character mappings, whereas the Character 
case mapping methods cannot. 

    codePoint - the character (Unicode code point) to be converted. 

    Returns: the lowercase equivalent of the character (Unicode code point), if any; 
             otherwise, the character itself. 
*java.lang.Character.toString()*

public |java.lang.String| toString()

Returns a String object representing this Character's value. The result is a 
string of length 1 whose sole component is the primitive char value represented 
by this Character object. 


    Returns: a string representation of this object. 
*java.lang.Character.toString(char)*

public static |java.lang.String| toString(char c)

Returns a String object representing the specified char. The result is a string 
of length 1 consisting solely of the specified char. 

    c - the char to be converted 

    Returns: the string representation of the specified char 
*java.lang.Character.toTitleCase(char)*

public static char toTitleCase(char ch)

Converts the character argument to titlecase using case mapping information 
from the UnicodeData file. If a character has no explicit titlecase mapping and 
is not itself a titlecase char according to UnicodeData, then the uppercase 
mapping is returned as an equivalent titlecase mapping. If the char argument is 
already a titlecase char, the same char value will be returned. 

Note that Character.isTitleCase(Character.toTitleCase(ch)) does not always 
return true for some ranges of characters. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be converted. 

    Returns: the titlecase equivalent of the character, if any; otherwise, the character 
             itself. 
*java.lang.Character.toTitleCase(int)*

public static int toTitleCase(int codePoint)

Converts the character (Unicode code point) argument to titlecase using case 
mapping information from the UnicodeData file. If a character has no explicit 
titlecase mapping and is not itself a titlecase char according to UnicodeData, 
then the uppercase mapping is returned as an equivalent titlecase mapping. If 
the character argument is already a titlecase character, the same character 
value will be returned. 

Note that Character.isTitleCase(Character.toTitleCase(codePoint)) does not 
always return true for some ranges of characters. 

    codePoint - the character (Unicode code point) to be converted. 

    Returns: the titlecase equivalent of the character, if any; otherwise, the character 
             itself. 
*java.lang.Character.toUpperCase(char)*

public static char toUpperCase(char ch)

Converts the character argument to uppercase using case mapping information 
from the UnicodeData file. 

Note that Character.isUpperCase(Character.toUpperCase(ch)) does not always 
return true for some ranges of characters, particularly those that are symbols 
or ideographs. 

In general, (|java.lang.String|) should be used to map characters to uppercase. 
String case mapping methods have several benefits over Character case mapping 
methods. String case mapping methods can perform locale-sensitive mappings, 
context-sensitive mappings, and 1:M character mappings, whereas the Character 
case mapping methods cannot. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 

    ch - the character to be converted. 

    Returns: the uppercase equivalent of the character, if any; otherwise, the character 
             itself. 
*java.lang.Character.toUpperCase(int)*

public static int toUpperCase(int codePoint)

Converts the character (Unicode code point) argument to uppercase using case 
mapping information from the UnicodeData file. 

Note that Character.isUpperCase(Character.toUpperCase(codePoint)) does not 
always return true for some ranges of characters, particularly those that are 
symbols or ideographs. 

In general, (|java.lang.String|) should be used to map characters to uppercase. 
String case mapping methods have several benefits over Character case mapping 
methods. String case mapping methods can perform locale-sensitive mappings, 
context-sensitive mappings, and 1:M character mappings, whereas the Character 
case mapping methods cannot. 

    codePoint - the character (Unicode code point) to be converted. 

    Returns: the uppercase equivalent of the character, if any; otherwise, the character 
             itself. 
*java.lang.Character.valueOf(char)*

public static |java.lang.Character| valueOf(char c)

Returns a Character instance representing the specified char value. If a new 
Character instance is not required, this method should generally be used in 
preference to the constructor (|java.lang.Character|) , as this method is 
likely to yield significantly better space and time performance by caching 
frequently requested values. 

    c - a char value. 

    Returns: a Character instance representing c. 


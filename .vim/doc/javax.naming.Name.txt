*javax.naming.Name* *Name* The Name interface represents a generic name -- an ordered
 sequence of components.

public interface interface Name

  implements |java.lang.Cloneable|
             |java.io.Serializable|
             |java.lang.Comparable|

|javax.naming.Name_Description|
|javax.naming.Name_Fields|
|javax.naming.Name_Constructors|
|javax.naming.Name_Methods|

====================================================================================================================================================================================

*javax.naming.Name_Fields*
|long_javax.naming.Name.serialVersionUID|

*javax.naming.Name_Methods*
|javax.naming.Name.add(int,String)|Adds a single component at a specified position within this name.
|javax.naming.Name.add(String)|Adds a single component to the end of this name.
|javax.naming.Name.addAll(int,Name)|Adds the components of a name -- in order -- at a specified position  within this name.
|javax.naming.Name.addAll(Name)|Adds the components of a name -- in order -- to the end of this name.
|javax.naming.Name.clone()|Generates a new copy of this name.
|javax.naming.Name.compareTo(Object)|Compares this name with another name for order.
|javax.naming.Name.endsWith(Name)|Determines whether this name ends with a specified suffix.
|javax.naming.Name.get(int)|Retrieves a component of this name.
|javax.naming.Name.getAll()|Retrieves the components of this name as an enumeration  of strings.
|javax.naming.Name.getPrefix(int)|Creates a name whose components consist of a prefix of the  components of this name.
|javax.naming.Name.getSuffix(int)|Creates a name whose components consist of a suffix of the  components in this name.
|javax.naming.Name.isEmpty()|Determines whether this name is empty.
|javax.naming.Name.remove(int)|Removes a component from this name.
|javax.naming.Name.size()|Returns the number of components in this name.
|javax.naming.Name.startsWith(Name)|Determines whether this name starts with a specified prefix.

*javax.naming.Name_Description*

The Name interface represents a generic name -- an ordered sequence of components. It can be a composite name (names that span multiple namespaces), or a compound name (names that 
are used within individual hierarchical naming systems). 

There can be different implementations of Name; for example, composite names, URLs, or namespace-specific compound names. 

The components of a name are numbered. The indexes of a name with N components range from 0 up to, but not including, N. This range may be written as [0,N). The most significant 
component is at index 0. An empty name has no components. 

None of the methods in this interface accept null as a valid value for a parameter that is a name or a name component. Likewise, methods that return a name or name component never 
return null. 

An instance of a Name may not be synchronized against concurrent multithreaded access if that access is not read-only. 



*long_javax.naming.Name.serialVersionUID*

The class fingerprint that is set to indicate serialization compatibility with a previous version of the class. 



*javax.naming.Name.add(int,String)*

public |javax.naming.Name| add(
  int posn,
  java.lang.String comp)
  throws |javax.naming.InvalidNameException|
         
Adds a single component at a specified position within this name. Components of this name at or after the index of the new component are shifted up by one (away from index 0) to 
accommodate the new component. 


    comp - the component to add 
    posn - the index at which to add the new component. Must be in the range [0,size()]. 

    Returns: the updated name (not a new one) 

*javax.naming.Name.add(String)*

public |javax.naming.Name| add(java.lang.String comp)
  throws |javax.naming.InvalidNameException|
         
Adds a single component to the end of this name. 


    comp - the component to add 

    Returns: the updated name (not a new one) 

*javax.naming.Name.addAll(int,Name)*

public |javax.naming.Name| addAll(
  int posn,
  javax.naming.Name n)
  throws |javax.naming.InvalidNameException|
         
Adds the components of a name -- in order -- at a specified position within this name. Components of this name at or after the index of the first new component are shifted up 
(away from 0) to accommodate the new components. 


    n - the components to add 
    posn - the index in this name at which to add the new components. Must be in the range [0,size()]. 

    Returns: the updated name (not a new one) 

*javax.naming.Name.addAll(Name)*

public |javax.naming.Name| addAll(javax.naming.Name suffix)
  throws |javax.naming.InvalidNameException|
         
Adds the components of a name -- in order -- to the end of this name. 


    suffix - the components to add 

    Returns: the updated name (not a new one) 

*javax.naming.Name.clone()*

public |java.lang.Object| clone()

Generates a new copy of this name. Subsequent changes to the components of this name will not affect the new copy, and vice versa. 



    Returns: a copy of this name 

*javax.naming.Name.compareTo(Object)*

public int compareTo(java.lang.Object obj)

Compares this name with another name for order. Returns a negative integer, zero, or a positive integer as this name is less than, equal to, or greater than the given name. 

As with Object.equals(), the notion of ordering for names depends on the class that implements this interface. For example, the ordering may be based on lexicographical ordering 
of the name components. Specific attributes of the name, such as how it treats case, may affect the ordering. In general, two names of different classes may not be compared. 


    obj - the non-null object to compare against. 

    Returns: a negative integer, zero, or a positive integer as this name is less than, equal to, or greater than the given name 

*javax.naming.Name.endsWith(Name)*

public boolean endsWith(javax.naming.Name n)

Determines whether this name ends with a specified suffix. A name n is a suffix if it is equal to getSuffix(size()-n.size()). 


    n - the name to check 

    Returns: true if n is a suffix of this name, false otherwise 

*javax.naming.Name.get(int)*

public |java.lang.String| get(int posn)

Retrieves a component of this name. 


    posn - the 0-based index of the component to retrieve. Must be in the range [0,size()). 

    Returns: the component at index posn 

*javax.naming.Name.getAll()*

public |java.util.Enumeration|<String> getAll()

Retrieves the components of this name as an enumeration of strings. The effect on the enumeration of updates to this name is undefined. If the name has zero components, an empty 
(non-null) enumeration is returned. 



    Returns: an enumeration of the components of this name, each a string 

*javax.naming.Name.getPrefix(int)*

public |javax.naming.Name| getPrefix(int posn)

Creates a name whose components consist of a prefix of the components of this name. Subsequent changes to this name will not affect the name that is returned and vice versa. 


    posn - the 0-based index of the component at which to stop. Must be in the range [0,size()]. 

    Returns: a name consisting of the components at indexes in the range [0,posn). 

*javax.naming.Name.getSuffix(int)*

public |javax.naming.Name| getSuffix(int posn)

Creates a name whose components consist of a suffix of the components in this name. Subsequent changes to this name do not affect the name that is returned and vice versa. 


    posn - the 0-based index of the component at which to start. Must be in the range [0,size()]. 

    Returns: a name consisting of the components at indexes in the range [posn,size()). If posn is equal to size(), an empty name is returned. 

*javax.naming.Name.isEmpty()*

public boolean isEmpty()

Determines whether this name is empty. An empty name is one with zero components. 



    Returns: true if this name is empty, false otherwise 

*javax.naming.Name.remove(int)*

public |java.lang.Object| remove(int posn)
  throws |javax.naming.InvalidNameException|
         
Removes a component from this name. The component of this name at the specified position is removed. Components with indexes greater than this position are shifted down (toward 
index 0) by one. 


    posn - the index of the component to remove. Must be in the range [0,size()). 

    Returns: the component removed (a String) 

*javax.naming.Name.size()*

public int size()

Returns the number of components in this name. 



    Returns: the number of components in this name 

*javax.naming.Name.startsWith(Name)*

public boolean startsWith(javax.naming.Name n)

Determines whether this name starts with a specified prefix. A name n is a prefix if it is equal to getPrefix(n.size()). 


    n - the name to check 

    Returns: true if n is a prefix of this name, false otherwise 



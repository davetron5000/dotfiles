*javax.swing.text.AbstractDocument.AbstractElement* *AbstractDocument.AbstractElement* Implements the abstract part of an element.

public abstract class AbstractDocument.AbstractElement
  extends    |java.lang.Object|
  implements |javax.swing.text.Element|
             |javax.swing.text.MutableAttributeSet|
             |java.io.Serializable|
             |javax.swing.tree.TreeNode|

|javax.swing.text.AbstractDocument.AbstractElement_Description|
|javax.swing.text.AbstractDocument.AbstractElement_Fields|
|javax.swing.text.AbstractDocument.AbstractElement_Constructors|
|javax.swing.text.AbstractDocument.AbstractElement_Methods|

====================================================================================================================================================================================

*javax.swing.text.AbstractDocument.AbstractElement_Constructors*
|javax.swing.text.AbstractDocument.AbstractElement(Element,AttributeSet)|Creates a new AbstractElement.

*javax.swing.text.AbstractDocument.AbstractElement_Methods*
|javax.swing.text.AbstractDocument.AbstractElement.addAttribute(Object,Object)|Adds an attribute to the element.
|javax.swing.text.AbstractDocument.AbstractElement.addAttributes(AttributeSet)|Adds a set of attributes to the element.
|javax.swing.text.AbstractDocument.AbstractElement.children()|Returns the children of the receiver as an  Enumeration.
|javax.swing.text.AbstractDocument.AbstractElement.containsAttribute(Object,Object)|Checks whether a given attribute name/value is defined.
|javax.swing.text.AbstractDocument.AbstractElement.containsAttributes(AttributeSet)|Checks whether the element contains all the attributes.
|javax.swing.text.AbstractDocument.AbstractElement.copyAttributes()|Copies a set of attributes.
|javax.swing.text.AbstractDocument.AbstractElement.dump(PrintStream,int)|Dumps a debugging representation of the element hierarchy.
|javax.swing.text.AbstractDocument.AbstractElement.getAllowsChildren()|Returns true if the receiver allows children.
|javax.swing.text.AbstractDocument.AbstractElement.getAttribute(Object)|Gets the value of an attribute.
|javax.swing.text.AbstractDocument.AbstractElement.getAttributeCount()|Gets the number of attributes that are defined.
|javax.swing.text.AbstractDocument.AbstractElement.getAttributeNames()|Gets the names of all attributes.
|javax.swing.text.AbstractDocument.AbstractElement.getAttributes()|Gets the attributes for the element.
|javax.swing.text.AbstractDocument.AbstractElement.getChildAt(int)|Returns the child TreeNode at index   childIndex.
|javax.swing.text.AbstractDocument.AbstractElement.getChildCount()|Returns the number of children TreeNode's   receiver contains.
|javax.swing.text.AbstractDocument.AbstractElement.getDocument()|Retrieves the underlying model.
|javax.swing.text.AbstractDocument.AbstractElement.getElement(int)|Gets a child element.
|javax.swing.text.AbstractDocument.AbstractElement.getElementCount()|Gets the number of children for the element.
|javax.swing.text.AbstractDocument.AbstractElement.getElementIndex(int)|Gets the child element index closest to the given model offset.
|javax.swing.text.AbstractDocument.AbstractElement.getEndOffset()|Gets the ending offset in the model for the element.
|javax.swing.text.AbstractDocument.AbstractElement.getIndex(TreeNode)|Returns the index of node in the receivers children.
|javax.swing.text.AbstractDocument.AbstractElement.getName()|Gets the name of the element.
|javax.swing.text.AbstractDocument.AbstractElement.getParent()|Returns the parent TreeNode of the receiver.
|javax.swing.text.AbstractDocument.AbstractElement.getParentElement()|Gets the parent of the element.
|javax.swing.text.AbstractDocument.AbstractElement.getResolveParent()|Gets the resolving parent.
|javax.swing.text.AbstractDocument.AbstractElement.getStartOffset()|Gets the starting offset in the model for the element.
|javax.swing.text.AbstractDocument.AbstractElement.isDefined(Object)|Checks whether a given attribute is defined.
|javax.swing.text.AbstractDocument.AbstractElement.isEqual(AttributeSet)|Checks whether two attribute sets are equal.
|javax.swing.text.AbstractDocument.AbstractElement.isLeaf()|Checks whether the element is a leaf.
|javax.swing.text.AbstractDocument.AbstractElement.removeAttribute(Object)|Removes an attribute from the set.
|javax.swing.text.AbstractDocument.AbstractElement.removeAttributes(AttributeSet)|Removes a set of attributes for the element.
|javax.swing.text.AbstractDocument.AbstractElement.removeAttributes(Enumeration<?>)|Removes a set of attributes for the element.
|javax.swing.text.AbstractDocument.AbstractElement.setResolveParent(AttributeSet)|Sets the resolving parent.

*javax.swing.text.AbstractDocument.AbstractElement_Description*

Implements the abstract part of an element. By default elements support attributes by having a field that represents the immutable part of the current attribute set for the 
element. The element itself implements MutableAttributeSet which can be used to modify the set by fetching a new immutable set. The immutable sets are provided by the 
AttributeContext associated with the document. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.text.AbstractDocument.AbstractElement(Element,AttributeSet)*

public AbstractDocument.AbstractElement(
  javax.swing.text.Element parent,
  javax.swing.text.AttributeSet a)

Creates a new AbstractElement. 

    parent - the parent element 
    a - the attributes for the element 

*javax.swing.text.AbstractDocument.AbstractElement.addAttribute(Object,Object)*

public void addAttribute(
  java.lang.Object name,
  java.lang.Object value)

Adds an attribute to the element. 


    name - the non-null attribute name 
    value - the attribute value 

*javax.swing.text.AbstractDocument.AbstractElement.addAttributes(AttributeSet)*

public void addAttributes(javax.swing.text.AttributeSet attr)

Adds a set of attributes to the element. 


    attr - the attributes to add 

*javax.swing.text.AbstractDocument.AbstractElement.children()*

public abstract |java.util.Enumeration| children()

Returns the children of the receiver as an Enumeration. 



    Returns: the children of the receiver as an Enumeration 

*javax.swing.text.AbstractDocument.AbstractElement.containsAttribute(Object,Object)*

public boolean containsAttribute(
  java.lang.Object name,
  java.lang.Object value)

Checks whether a given attribute name/value is defined. 


    name - the non-null attribute name 
    value - the attribute value 

    Returns: true if the name/value is defined 

*javax.swing.text.AbstractDocument.AbstractElement.containsAttributes(AttributeSet)*

public boolean containsAttributes(javax.swing.text.AttributeSet attrs)

Checks whether the element contains all the attributes. 


    attrs - the attributes to check 

    Returns: true if the element contains all the attributes 

*javax.swing.text.AbstractDocument.AbstractElement.copyAttributes()*

public |javax.swing.text.AttributeSet| copyAttributes()

Copies a set of attributes. 



    Returns: 

*javax.swing.text.AbstractDocument.AbstractElement.dump(PrintStream,int)*

public void dump(
  java.io.PrintStream psOut,
  int indentAmount)

Dumps a debugging representation of the element hierarchy. 


    psOut - the output stream 
    indentAmount - the indentation level >= 0 

*javax.swing.text.AbstractDocument.AbstractElement.getAllowsChildren()*

public abstract boolean getAllowsChildren()

Returns true if the receiver allows children. 



    Returns: true if the receiver allows children, otherwise false 

*javax.swing.text.AbstractDocument.AbstractElement.getAttribute(Object)*

public |java.lang.Object| getAttribute(java.lang.Object attrName)

Gets the value of an attribute. 


    attrName - the non-null attribute name 

    Returns: the attribute value 

*javax.swing.text.AbstractDocument.AbstractElement.getAttributeCount()*

public int getAttributeCount()

Gets the number of attributes that are defined. 



    Returns: the number of attributes >= 0 

*javax.swing.text.AbstractDocument.AbstractElement.getAttributeNames()*

public |java.util.Enumeration|<?> getAttributeNames()

Gets the names of all attributes. 



    Returns: the attribute names as an enumeration 

*javax.swing.text.AbstractDocument.AbstractElement.getAttributes()*

public |javax.swing.text.AttributeSet| getAttributes()

Gets the attributes for the element. 



    Returns: the attribute set 

*javax.swing.text.AbstractDocument.AbstractElement.getChildAt(int)*

public |javax.swing.tree.TreeNode| getChildAt(int childIndex)

Returns the child TreeNode at index childIndex. 



*javax.swing.text.AbstractDocument.AbstractElement.getChildCount()*

public int getChildCount()

Returns the number of children TreeNode's receiver contains. 



    Returns: the number of children TreeNodews's receiver contains 

*javax.swing.text.AbstractDocument.AbstractElement.getDocument()*

public |javax.swing.text.Document| getDocument()

Retrieves the underlying model. 



    Returns: 

*javax.swing.text.AbstractDocument.AbstractElement.getElement(int)*

public abstract |javax.swing.text.Element| getElement(int index)

Gets a child element. 


    index - the child index, >= 0 < getElementCount() 

    Returns: the child element 

*javax.swing.text.AbstractDocument.AbstractElement.getElementCount()*

public abstract int getElementCount()

Gets the number of children for the element. 



    Returns: the number of children >= 0 

*javax.swing.text.AbstractDocument.AbstractElement.getElementIndex(int)*

public abstract int getElementIndex(int offset)

Gets the child element index closest to the given model offset. 


    offset - the offset >= 0 

    Returns: the element index >= 0 

*javax.swing.text.AbstractDocument.AbstractElement.getEndOffset()*

public abstract int getEndOffset()

Gets the ending offset in the model for the element. 



    Returns: the offset >= 0 

*javax.swing.text.AbstractDocument.AbstractElement.getIndex(TreeNode)*

public int getIndex(javax.swing.tree.TreeNode node)

Returns the index of node in the receivers children. If the receiver does not contain node, -1 will be returned. 


    node - the location of interest 

    Returns: the index of node in the receiver's children, or -1 if absent 

*javax.swing.text.AbstractDocument.AbstractElement.getName()*

public |java.lang.String| getName()

Gets the name of the element. 



    Returns: the name, null if none 

*javax.swing.text.AbstractDocument.AbstractElement.getParent()*

public |javax.swing.tree.TreeNode| getParent()

Returns the parent TreeNode of the receiver. 



    Returns: the parent TreeNode of the receiver 

*javax.swing.text.AbstractDocument.AbstractElement.getParentElement()*

public |javax.swing.text.Element| getParentElement()

Gets the parent of the element. 



    Returns: 

*javax.swing.text.AbstractDocument.AbstractElement.getResolveParent()*

public |javax.swing.text.AttributeSet| getResolveParent()

Gets the resolving parent. If not overridden, the resolving parent defaults to the parent element. 



    Returns: the attributes from the parent, null if none 

*javax.swing.text.AbstractDocument.AbstractElement.getStartOffset()*

public abstract int getStartOffset()

Gets the starting offset in the model for the element. 



    Returns: the offset >= 0 

*javax.swing.text.AbstractDocument.AbstractElement.isDefined(Object)*

public boolean isDefined(java.lang.Object attrName)

Checks whether a given attribute is defined. 


    attrName - the non-null attribute name 

    Returns: true if the attribute is defined 

*javax.swing.text.AbstractDocument.AbstractElement.isEqual(AttributeSet)*

public boolean isEqual(javax.swing.text.AttributeSet attr)

Checks whether two attribute sets are equal. 


    attr - the attribute set to check against 

    Returns: true if the same 

*javax.swing.text.AbstractDocument.AbstractElement.isLeaf()*

public abstract boolean isLeaf()

Checks whether the element is a leaf. 



    Returns: true if a leaf 

*javax.swing.text.AbstractDocument.AbstractElement.removeAttribute(Object)*

public void removeAttribute(java.lang.Object name)

Removes an attribute from the set. 


    name - the non-null attribute name 

*javax.swing.text.AbstractDocument.AbstractElement.removeAttributes(AttributeSet)*

public void removeAttributes(javax.swing.text.AttributeSet attrs)

Removes a set of attributes for the element. 


    attrs - the attributes 

*javax.swing.text.AbstractDocument.AbstractElement.removeAttributes(Enumeration<?>)*

public void removeAttributes(java.util.Enumeration<?> names)

Removes a set of attributes for the element. 


    names - the attribute names 

*javax.swing.text.AbstractDocument.AbstractElement.setResolveParent(AttributeSet)*

public void setResolveParent(javax.swing.text.AttributeSet parent)

Sets the resolving parent. 


    parent - the parent, null if none 



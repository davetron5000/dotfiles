*java.util.concurrent.AbstractExecutorService* *AbstractExecutorService* Provide

public abstract class AbstractExecutorService
  extends    |java.lang.Object|
  implements |java.util.concurrent.ExecutorService|

|java.util.concurrent.AbstractExecutorService_Description|
|java.util.concurrent.AbstractExecutorService_Fields|
|java.util.concurrent.AbstractExecutorService_Constructors|
|java.util.concurrent.AbstractExecutorService_Methods|

================================================================================

*java.util.concurrent.AbstractExecutorService_Constructors*
|java.util.concurrent.AbstractExecutorService()|

*java.util.concurrent.AbstractExecutorService_Methods*
|java.util.concurrent.AbstractExecutorService.invokeAll(Collection)|
|java.util.concurrent.AbstractExecutorService.invokeAll(Collection,long,TimeUnit)|
|java.util.concurrent.AbstractExecutorService.invokeAny(Collection)|
|java.util.concurrent.AbstractExecutorService.invokeAny(Collection,long,TimeUnit)|
|java.util.concurrent.AbstractExecutorService.submit(Callable)|
|java.util.concurrent.AbstractExecutorService.submit(Runnable)|
|java.util.concurrent.AbstractExecutorService.submit(Runnable,T)|

*java.util.concurrent.AbstractExecutorService_Description*

Provides default implementation of (|java.util.concurrent.ExecutorService|) 
execution methods. This class implements the submit, invokeAny and invokeAll 
methods using the default (|java.util.concurrent.FutureTask|) class provided in 
this package. For example, the implementation of submit(Runnable) creates an 
associated FutureTask that is executed and returned. Subclasses overriding 
these methods to use different (|java.util.concurrent.Future|) implementations 
should do so consistently for each of these methods. 


*java.util.concurrent.AbstractExecutorService()*

public AbstractExecutorService()




*java.util.concurrent.AbstractExecutorService.invokeAll(Collection)*

public |java.util.List| invokeAll(java.util.Collection tasks)
  throws |java.lang.InterruptedException|
         



*java.util.concurrent.AbstractExecutorService.invokeAll(Collection,long,TimeUnit)*

public |java.util.List| invokeAll(
  java.util.Collection tasks,
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         



*java.util.concurrent.AbstractExecutorService.invokeAny(Collection)*

public |java.lang.Object| invokeAny(java.util.Collection tasks)
  throws |java.util.concurrent.ExecutionException|
         |java.lang.InterruptedException|
         



*java.util.concurrent.AbstractExecutorService.invokeAny(Collection,long,TimeUnit)*

public |java.lang.Object| invokeAny(
  java.util.Collection tasks,
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.util.concurrent.ExecutionException|
         |java.lang.InterruptedException|
         |java.util.concurrent.TimeoutException|
         



*java.util.concurrent.AbstractExecutorService.submit(Callable)*

public |java.util.concurrent.Future| submit(java.util.concurrent.Callable task)




*java.util.concurrent.AbstractExecutorService.submit(Runnable)*

public |java.util.concurrent.Future| submit(java.lang.Runnable task)




*java.util.concurrent.AbstractExecutorService.submit(Runnable,T)*

public |java.util.concurrent.Future| submit(
  java.lang.Runnable task,
  java.lang.Object result)






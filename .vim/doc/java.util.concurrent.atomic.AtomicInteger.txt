*java.util.concurrent.atomic.AtomicInteger* *AtomicInteger* An int value that ma

public class AtomicInteger
  extends    |java.lang.Number|
  implements |java.io.Serializable|

|java.util.concurrent.atomic.AtomicInteger_Description|
|java.util.concurrent.atomic.AtomicInteger_Fields|
|java.util.concurrent.atomic.AtomicInteger_Constructors|
|java.util.concurrent.atomic.AtomicInteger_Methods|

================================================================================

*java.util.concurrent.atomic.AtomicInteger_Constructors*
|java.util.concurrent.atomic.AtomicInteger()|Create a new AtomicInteger with in
|java.util.concurrent.atomic.AtomicInteger(int)|Create a new AtomicInteger with

*java.util.concurrent.atomic.AtomicInteger_Methods*
|java.util.concurrent.atomic.AtomicInteger.addAndGet(int)|Atomically add the gi
|java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int)|Atomically se
|java.util.concurrent.atomic.AtomicInteger.decrementAndGet()|Atomically decreme
|java.util.concurrent.atomic.AtomicInteger.doubleValue()|
|java.util.concurrent.atomic.AtomicInteger.floatValue()|
|java.util.concurrent.atomic.AtomicInteger.get()|Get the current value.
|java.util.concurrent.atomic.AtomicInteger.getAndAdd(int)|Atomically add the gi
|java.util.concurrent.atomic.AtomicInteger.getAndDecrement()|Atomically decreme
|java.util.concurrent.atomic.AtomicInteger.getAndIncrement()|Atomically increme
|java.util.concurrent.atomic.AtomicInteger.getAndSet(int)|Set to the give value
|java.util.concurrent.atomic.AtomicInteger.incrementAndGet()|Atomically increme
|java.util.concurrent.atomic.AtomicInteger.intValue()|
|java.util.concurrent.atomic.AtomicInteger.longValue()|
|java.util.concurrent.atomic.AtomicInteger.set(int)|Set to the given value.
|java.util.concurrent.atomic.AtomicInteger.toString()|Returns the String repres
|java.util.concurrent.atomic.AtomicInteger.weakCompareAndSet(int,int)|Atomicall

*java.util.concurrent.atomic.AtomicInteger_Description*

An int value that may be updated atomically. See the 
(|java.util.concurrent.atomic|) package specification for description of the 
properties of atomic variables. An AtomicInteger is used in applications such 
as atomically incremented counters, and cannot be used as a replacement for an 
(|java.lang.Integer|) . However, this class does extend Number to allow uniform 
access by tools and utilities that deal with numerically-based classes. 


*java.util.concurrent.atomic.AtomicInteger()*

public AtomicInteger()

Create a new AtomicInteger with initial value 0. 


*java.util.concurrent.atomic.AtomicInteger(int)*

public AtomicInteger(int initialValue)

Create a new AtomicInteger with the given initial value. 

    initialValue - the initial value 

*java.util.concurrent.atomic.AtomicInteger.addAndGet(int)*

public final int addAndGet(int delta)

Atomically add the given value to current value. 

    delta - the value to add 

    Returns: the updated value 
*java.util.concurrent.atomic.AtomicInteger.compareAndSet(int,int)*

public final boolean compareAndSet(
  int expect,
  int update)

Atomically set the value to the given updated value if the current value == the 
expected value. 

    expect - the expected value 
    update - the new value 

    Returns: true if successful. False return indicates that the actual value was not equal 
             to the expected value. 
*java.util.concurrent.atomic.AtomicInteger.decrementAndGet()*

public final int decrementAndGet()

Atomically decrement by one the current value. 


    Returns: the updated value 
*java.util.concurrent.atomic.AtomicInteger.doubleValue()*

public double doubleValue()




*java.util.concurrent.atomic.AtomicInteger.floatValue()*

public float floatValue()




*java.util.concurrent.atomic.AtomicInteger.get()*

public final int get()

Get the current value. 


    Returns: the current value 
*java.util.concurrent.atomic.AtomicInteger.getAndAdd(int)*

public final int getAndAdd(int delta)

Atomically add the given value to current value. 

    delta - the value to add 

    Returns: the previous value 
*java.util.concurrent.atomic.AtomicInteger.getAndDecrement()*

public final int getAndDecrement()

Atomically decrement by one the current value. 


    Returns: the previous value 
*java.util.concurrent.atomic.AtomicInteger.getAndIncrement()*

public final int getAndIncrement()

Atomically increment by one the current value. 


    Returns: the previous value 
*java.util.concurrent.atomic.AtomicInteger.getAndSet(int)*

public final int getAndSet(int newValue)

Set to the give value and return the old value. 

    newValue - the new value 

    Returns: the previous value 
*java.util.concurrent.atomic.AtomicInteger.incrementAndGet()*

public final int incrementAndGet()

Atomically increment by one the current value. 


    Returns: the updated value 
*java.util.concurrent.atomic.AtomicInteger.intValue()*

public int intValue()




*java.util.concurrent.atomic.AtomicInteger.longValue()*

public long longValue()




*java.util.concurrent.atomic.AtomicInteger.set(int)*

public final void set(int newValue)

Set to the given value. 

    newValue - the new value 

*java.util.concurrent.atomic.AtomicInteger.toString()*

public |java.lang.String| toString()

Returns the String representation of the current value. 


    Returns: the String representation of the current value. 
*java.util.concurrent.atomic.AtomicInteger.weakCompareAndSet(int,int)*

public final boolean weakCompareAndSet(
  int expect,
  int update)

Atomically set the value to the given updated value if the current value == the 
expected value. May fail spuriously. 

    expect - the expected value 
    update - the new value 

    Returns: true if successful. 


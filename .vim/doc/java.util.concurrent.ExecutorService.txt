*java.util.concurrent.ExecutorService* *ExecutorService* AnExecutorthat provides

public interface interface ExecutorService

  implements |java.util.concurrent.Executor|

|java.util.concurrent.ExecutorService_Description|
|java.util.concurrent.ExecutorService_Fields|
|java.util.concurrent.ExecutorService_Constructors|
|java.util.concurrent.ExecutorService_Methods|

================================================================================

*java.util.concurrent.ExecutorService_Methods*
|java.util.concurrent.ExecutorService.awaitTermination(long,TimeUnit)|Blocks un
|java.util.concurrent.ExecutorService.invokeAll(Collection)|Executes the given 
|java.util.concurrent.ExecutorService.invokeAll(Collection,long,TimeUnit)|Execu
|java.util.concurrent.ExecutorService.invokeAny(Collection)|Executes the given 
|java.util.concurrent.ExecutorService.invokeAny(Collection,long,TimeUnit)|Execu
|java.util.concurrent.ExecutorService.isShutdown()|Returns true if this executo
|java.util.concurrent.ExecutorService.isTerminated()|Returns true if all tasks 
|java.util.concurrent.ExecutorService.shutdown()|Initiates an orderly shutdown 
|java.util.concurrent.ExecutorService.shutdownNow()|Attempts to stop all active
|java.util.concurrent.ExecutorService.submit(Callable)|Submits a value-returnin
|java.util.concurrent.ExecutorService.submit(Runnable)|Submits a Runnable task 
|java.util.concurrent.ExecutorService.submit(Runnable,T)|Submits a Runnable tas

*java.util.concurrent.ExecutorService_Description*

An (|java.util.concurrent.Executor|) that provides methods to manage 
termination and methods that can produce a (|java.util.concurrent.Future|) for 
tracking progress of one or more asynchronous tasks. 

An ExecutorService can be shut down, which will cause it to stop accepting new 
tasks. After being shut down, the executor will eventually terminate, at which 
point no tasks are actively executing, no tasks are awaiting execution, and no 
new tasks can be submitted. 

Method submit extends base method (|java.util.concurrent.Executor|) by creating 
and returning a (|java.util.concurrent.Future|) that can be used to cancel 
execution and/or wait for completion. Methods invokeAny and invokeAll perform 
the most commonly useful forms of bulk execution, executing a collection of 
tasks and then waiting for at least one, or all, to complete. (Class 
(|java.util.concurrent.ExecutorCompletionService|) can be used to write 
customized variants of these methods.) 

The (|java.util.concurrent.Executors|) class provides factory methods for the 
executor services provided in this package. 

Usage Example 

Here is a sketch of a network service in which threads in a thread pool service 
incoming requests. It uses the preconfigured (|java.util.concurrent.Executors|) 
factory method: 



class NetworkService { private final ServerSocket serverSocket; private final 
ExecutorService pool; 

public NetworkService(int port, int poolSize) throws IOException { serverSocket 
= new ServerSocket(port); pool = Executors.newFixedThreadPool(poolSize); } 

public void serve() { try { for (;;) { pool.execute(new 
Handler(serverSocket.accept())); } } catch (IOException ex) { pool.shutdown(); 
} } } 

class Handler implements Runnable { private final Socket socket; Handler(Socket 
socket) { this.socket = socket; } public void run() { // read and service 
request } } 


*java.util.concurrent.ExecutorService.awaitTermination(long,TimeUnit)*

public boolean awaitTermination(
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         
Blocks until all tasks have completed execution after a shutdown request, or 
the timeout occurs, or the current thread is interrupted, whichever happens 
first. 

    timeout - the maximum time to wait 
    unit - the time unit of the timeout argument 

    Returns: true if this executor terminated and false if the timeout elapsed before 
             termination 
*java.util.concurrent.ExecutorService.invokeAll(Collection)*

public |java.util.List| invokeAll(java.util.Collection tasks)
  throws |java.lang.InterruptedException|
         
Executes the given tasks, returning a list of Futures holding their status and 
results when all complete. (|java.util.concurrent.Future|) is true for each 
element of the returned list. Note that a completed task could have terminated 
either normally or by throwing an exception. The results of this method are 
undefined if the given collection is modified while this operation is in 
progress. 

    tasks - the collection of tasks 

    Returns: A list of Futures representing the tasks, in the same sequential order as 
             produced by the iterator for the given task list, each of which 
             has completed. 
*java.util.concurrent.ExecutorService.invokeAll(Collection,long,TimeUnit)*

public |java.util.List| invokeAll(
  java.util.Collection tasks,
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         
Executes the given tasks, returning a list of Futures holding their status and 
results when all complete or the timeout expires, whichever happens first. 
(|java.util.concurrent.Future|) is true for each element of the returned list. 
Upon return, tasks that have not completed are cancelled. Note that a completed 
task could have terminated either normally or by throwing an exception. The 
results of this method are undefined if the given collection is modified while 
this operation is in progress. 

    tasks - the collection of tasks 
    timeout - the maximum time to wait 
    unit - the time unit of the timeout argument 

    Returns: A list of Futures representing the tasks, in the same sequential order as 
             produced by the iterator for the given task list. If the operation 
             did not time out, each task will have completed. If it did time 
             out, some of these tasks will not have completed. 
*java.util.concurrent.ExecutorService.invokeAny(Collection)*

public |java.lang.Object| invokeAny(java.util.Collection tasks)
  throws |java.util.concurrent.ExecutionException|
         |java.lang.InterruptedException|
         
Executes the given tasks, returning the result of one that has completed 
successfully (i.e., without throwing an exception), if any do. Upon normal or 
exceptional return, tasks that have not completed are cancelled. The results of 
this method are undefined if the given collection is modified while this 
operation is in progress. 

    tasks - the collection of tasks 

    Returns: The result returned by one of the tasks. 
*java.util.concurrent.ExecutorService.invokeAny(Collection,long,TimeUnit)*

public |java.lang.Object| invokeAny(
  java.util.Collection tasks,
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.util.concurrent.ExecutionException|
         |java.lang.InterruptedException|
         |java.util.concurrent.TimeoutException|
         
Executes the given tasks, returning the result of one that has completed 
successfully (i.e., without throwing an exception), if any do before the given 
timeout elapses. Upon normal or exceptional return, tasks that have not 
completed are cancelled. The results of this method are undefined if the given 
collection is modified while this operation is in progress. 

    tasks - the collection of tasks 
    timeout - the maximum time to wait 
    unit - the time unit of the timeout argument 

    Returns: The result returned by one of the tasks. 
*java.util.concurrent.ExecutorService.isShutdown()*

public boolean isShutdown()

Returns true if this executor has been shut down. 


    Returns: true if this executor has been shut down 
*java.util.concurrent.ExecutorService.isTerminated()*

public boolean isTerminated()

Returns true if all tasks have completed following shut down. Note that 
isTerminated is never true unless either shutdown or shutdownNow was called 
first. 


    Returns: true if all tasks have completed following shut down 
*java.util.concurrent.ExecutorService.shutdown()*

public void shutdown()

Initiates an orderly shutdown in which previously submitted tasks are executed, 
but no new tasks will be accepted. Invocation has no additional effect if 
already shut down. 


*java.util.concurrent.ExecutorService.shutdownNow()*

public |java.util.List| shutdownNow()

Attempts to stop all actively executing tasks, halts the processing of waiting 
tasks, and returns a list of the tasks that were awaiting execution. 

There are no guarantees beyond best-effort attempts to stop processing actively 
executing tasks. For example, typical implementations will cancel via 
(|java.lang.Thread|) , so if any tasks mask or fail to respond to interrupts, 
they may never terminate. 


    Returns: list of tasks that never commenced execution 
*java.util.concurrent.ExecutorService.submit(Callable)*

public |java.util.concurrent.Future| submit(java.util.concurrent.Callable task)

Submits a value-returning task for execution and returns a Future representing 
the pending results of the task. 

If you would like to immediately block waiting for a task, you can use 
constructions of the form result = exec.submit(aCallable).get(); 

Note: The (|java.util.concurrent.Executors|) class includes a set of methods 
that can convert some other common closure-like objects, for example, 
(|java.security.PrivilegedAction|) to (|java.util.concurrent.Callable|) form so 
they can be submitted. 

    task - the task to submit 

    Returns: a Future representing pending completion of the task 
*java.util.concurrent.ExecutorService.submit(Runnable)*

public |java.util.concurrent.Future| submit(java.lang.Runnable task)

Submits a Runnable task for execution and returns a Future representing that 
task. 

    task - the task to submit 

    Returns: a Future representing pending completion of the task, and whose get() method 
             will return null upon completion. 
*java.util.concurrent.ExecutorService.submit(Runnable,T)*

public |java.util.concurrent.Future| submit(
  java.lang.Runnable task,
  java.lang.Object result)

Submits a Runnable task for execution and returns a Future representing that 
task that will upon completion return the given result 

    task - the task to submit 
    result - the result to return 

    Returns: a Future representing pending completion of the task, and whose get() method 
             will return the given result upon completion. 


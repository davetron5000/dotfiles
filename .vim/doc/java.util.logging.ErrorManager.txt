*java.util.logging.ErrorManager* *ErrorManager* ErrorManager objects can be atta

public class ErrorManager
  extends    |java.lang.Object|

|java.util.logging.ErrorManager_Description|
|java.util.logging.ErrorManager_Fields|
|java.util.logging.ErrorManager_Constructors|
|java.util.logging.ErrorManager_Methods|

================================================================================

*java.util.logging.ErrorManager_Fields*
|int_java.util.logging.ErrorManager.CLOSE_FAILURE|
|int_java.util.logging.ErrorManager.FLUSH_FAILURE|
|int_java.util.logging.ErrorManager.FORMAT_FAILURE|
|int_java.util.logging.ErrorManager.GENERIC_FAILURE|
|int_java.util.logging.ErrorManager.OPEN_FAILURE|
|int_java.util.logging.ErrorManager.WRITE_FAILURE|

*java.util.logging.ErrorManager_Constructors*
|java.util.logging.ErrorManager()|

*java.util.logging.ErrorManager_Methods*
|java.util.logging.ErrorManager.error(String,Exception,int)|The error method is

*java.util.logging.ErrorManager_Description*

ErrorManager objects can be attached to Handlers to process any error that 
occur on a Handler during Logging. 

When processing logging output, if a Handler encounters problems then rather 
than throwing an Exception back to the issuer of the logging call (who is 
unlikely to be interested) the Handler should call its associated ErrorManager. 


*int_java.util.logging.ErrorManager.CLOSE_FAILURE*

ErrorManager objects can be attached to Handlers to process any error that 
occur on a Handler during Logging. 

When processing logging output, if a Handler encounters problems then rather 
than throwing an Exception back to the issuer of the logging call (who is 
unlikely to be interested) the Handler should call its associated ErrorManager. 


*int_java.util.logging.ErrorManager.FLUSH_FAILURE*

ErrorManager objects can be attached to Handlers to process any error that 
occur on a Handler during Logging. 

When processing logging output, if a Handler encounters problems then rather 
than throwing an Exception back to the issuer of the logging call (who is 
unlikely to be interested) the Handler should call its associated ErrorManager. 


*int_java.util.logging.ErrorManager.FORMAT_FAILURE*

ErrorManager objects can be attached to Handlers to process any error that 
occur on a Handler during Logging. 

When processing logging output, if a Handler encounters problems then rather 
than throwing an Exception back to the issuer of the logging call (who is 
unlikely to be interested) the Handler should call its associated ErrorManager. 


*int_java.util.logging.ErrorManager.GENERIC_FAILURE*

ErrorManager objects can be attached to Handlers to process any error that 
occur on a Handler during Logging. 

When processing logging output, if a Handler encounters problems then rather 
than throwing an Exception back to the issuer of the logging call (who is 
unlikely to be interested) the Handler should call its associated ErrorManager. 


*int_java.util.logging.ErrorManager.OPEN_FAILURE*

ErrorManager objects can be attached to Handlers to process any error that 
occur on a Handler during Logging. 

When processing logging output, if a Handler encounters problems then rather 
than throwing an Exception back to the issuer of the logging call (who is 
unlikely to be interested) the Handler should call its associated ErrorManager. 


*int_java.util.logging.ErrorManager.WRITE_FAILURE*

ErrorManager objects can be attached to Handlers to process any error that 
occur on a Handler during Logging. 

When processing logging output, if a Handler encounters problems then rather 
than throwing an Exception back to the issuer of the logging call (who is 
unlikely to be interested) the Handler should call its associated ErrorManager. 



*java.util.logging.ErrorManager()*

public ErrorManager()




*java.util.logging.ErrorManager.error(String,Exception,int)*

public synchronized void error(
  java.lang.String msg,
  java.lang.Exception ex,
  int code)

The error method is called when a Handler failure occurs. 

This method may be overriden in subclasses. The default behavior in this base 
class is that the first call is reported to System.err, and subsequent calls 
are ignored. 

    msg - a descriptive string (may be null) 
    ex - an exception (may be null) 
    code - an error code defined in ErrorManager 



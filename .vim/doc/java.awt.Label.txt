*java.awt.Label* *Label* A Label object is a component for placing text in a
 co

public class Label
  extends    |java.awt.Component|
  implements |javax.accessibility.Accessible|

|java.awt.Label_Description|
|java.awt.Label_Fields|
|java.awt.Label_Constructors|
|java.awt.Label_Methods|

================================================================================

*java.awt.Label_Fields*
|int_java.awt.Label.CENTER|
|int_java.awt.Label.LEFT|
|int_java.awt.Label.RIGHT|

*java.awt.Label_Constructors*
|java.awt.Label()|Constructs an empty label.
|java.awt.Label(String)|Constructs a new label with the specified string of tex
|java.awt.Label(String,int)|Constructs a new label that presents the specified 

*java.awt.Label_Methods*
|java.awt.Label.addNotify()|Creates the peer for this label.
|java.awt.Label.getAccessibleContext()|Gets the AccessibleContext associated wi
|java.awt.Label.getAlignment()|Gets the current alignment of this label.
|java.awt.Label.getText()|Gets the text of this label.
|java.awt.Label.paramString()|Returns a string representing the state of this L
|java.awt.Label.setAlignment(int)|Sets the alignment for this label to the spec
|java.awt.Label.setText(String)|Sets the text for this label to the specified t

*java.awt.Label_Description*

A Label object is a component for placing text in a container. A label displays 
a single line of read-only text. The text can be changed by the application, 
but a user cannot edit it directly. 

For example, the code... 



setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10)); add(new Label("Hi 
There!")); add(new Label("Another Label")); 

produces the following labels: 




*int_java.awt.Label.CENTER*

A Label object is a component for placing text in a container. A label displays 
a single line of read-only text. The text can be changed by the application, 
but a user cannot edit it directly. 

For example, the code... 



setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10)); add(new Label("Hi 
There!")); add(new Label("Another Label")); 

produces the following labels: 




*int_java.awt.Label.LEFT*

A Label object is a component for placing text in a container. A label displays 
a single line of read-only text. The text can be changed by the application, 
but a user cannot edit it directly. 

For example, the code... 



setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10)); add(new Label("Hi 
There!")); add(new Label("Another Label")); 

produces the following labels: 




*int_java.awt.Label.RIGHT*

A Label object is a component for placing text in a container. A label displays 
a single line of read-only text. The text can be changed by the application, 
but a user cannot edit it directly. 

For example, the code... 



setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10)); add(new Label("Hi 
There!")); add(new Label("Another Label")); 

produces the following labels: 





*java.awt.Label()*

public Label()
  throws |java.awt.HeadlessException|
         
Constructs an empty label. The text of the label is the empty string "". 


*java.awt.Label(String)*

public Label(java.lang.String text)
  throws |java.awt.HeadlessException|
         
Constructs a new label with the specified string of text, left justified. 

    text - the string that the label presents. A null value will be accepted without 
       causing a NullPointerException to be thrown. 

*java.awt.Label(String,int)*

public Label(
  java.lang.String text,
  int alignment)
  throws |java.awt.HeadlessException|
         
Constructs a new label that presents the specified string of text with the 
specified alignment. Possible values for alignment are Label.LEFT, Label.RIGHT, 
and Label.CENTER. 

    text - the string that the label presents. A null value will be accepted without 
       causing a NullPointerException to be thrown. 
    alignment - the alignment value. 

*java.awt.Label.addNotify()*

public void addNotify()

Creates the peer for this label. The peer allows us to modify the appearance of 
the label without changing its functionality. 


*java.awt.Label.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this Label. For labels, the 
AccessibleContext takes the form of an AccessibleAWTLabel. A new 
AccessibleAWTLabel instance is created if necessary. 


    Returns: an AccessibleAWTLabel that serves as the AccessibleContext of this Label 
*java.awt.Label.getAlignment()*

public int getAlignment()

Gets the current alignment of this label. Possible values are Label.LEFT, 
Label.RIGHT, and Label.CENTER. 


*java.awt.Label.getText()*

public |java.lang.String| getText()

Gets the text of this label. 


    Returns: the text of this label, or null if the text has been set to null. 
*java.awt.Label.paramString()*

protected |java.lang.String| paramString()

Returns a string representing the state of this Label. This method is intended 
to be used only for debugging purposes, and the content and format of the 
returned string may vary between implementations. The returned string may be 
empty but may not be null. 


    Returns: the parameter string of this label 
*java.awt.Label.setAlignment(int)*

public synchronized void setAlignment(int alignment)

Sets the alignment for this label to the specified alignment. Possible values 
are Label.LEFT, Label.RIGHT, and Label.CENTER. 

    alignment - the alignment to be set. 

*java.awt.Label.setText(String)*

public void setText(java.lang.String text)

Sets the text for this label to the specified text. 

    text - the text that this label displays. If text is null, it is treated for display 
       purposes like an empty string "". 



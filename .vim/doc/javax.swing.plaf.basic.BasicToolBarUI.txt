*javax.swing.plaf.basic.BasicToolBarUI* *BasicToolBarUI* A Basic Limplementation of ToolBarUI.

public class BasicToolBarUI
  extends    |javax.swing.plaf.ToolBarUI|
  implements |javax.swing.SwingConstants|

|javax.swing.plaf.basic.BasicToolBarUI_Description|
|javax.swing.plaf.basic.BasicToolBarUI_Fields|
|javax.swing.plaf.basic.BasicToolBarUI_Constructors|
|javax.swing.plaf.basic.BasicToolBarUI_Methods|

====================================================================================================================================================================================

*javax.swing.plaf.basic.BasicToolBarUI_Fields*
|java.lang.String_javax.swing.plaf.basic.BasicToolBarUI.constraintBeforeFloating|
|java.awt.Color_javax.swing.plaf.basic.BasicToolBarUI.dockingBorderColor|
|java.awt.Color_javax.swing.plaf.basic.BasicToolBarUI.dockingColor|
|javax.swing.event.MouseInputListener_javax.swing.plaf.basic.BasicToolBarUI.dockingListener|
|javax.swing.KeyStroke_javax.swing.plaf.basic.BasicToolBarUI.downKey|
|javax.swing.plaf.basic.BasicToolBarUI.DragWindow_javax.swing.plaf.basic.BasicToolBarUI.dragWindow|
|java.awt.Color_javax.swing.plaf.basic.BasicToolBarUI.floatingBorderColor|
|java.awt.Color_javax.swing.plaf.basic.BasicToolBarUI.floatingColor|
|int_javax.swing.plaf.basic.BasicToolBarUI.focusedCompIndex|
|javax.swing.KeyStroke_javax.swing.plaf.basic.BasicToolBarUI.leftKey|
|java.beans.PropertyChangeListener_javax.swing.plaf.basic.BasicToolBarUI.propertyListener|
|javax.swing.KeyStroke_javax.swing.plaf.basic.BasicToolBarUI.rightKey|
|javax.swing.JToolBar_javax.swing.plaf.basic.BasicToolBarUI.toolBar|
|java.awt.event.ContainerListener_javax.swing.plaf.basic.BasicToolBarUI.toolBarContListener|
|java.awt.event.FocusListener_javax.swing.plaf.basic.BasicToolBarUI.toolBarFocusListener|
|javax.swing.KeyStroke_javax.swing.plaf.basic.BasicToolBarUI.upKey|

*javax.swing.plaf.basic.BasicToolBarUI_Constructors*
|javax.swing.plaf.basic.BasicToolBarUI()|

*javax.swing.plaf.basic.BasicToolBarUI_Methods*
|javax.swing.plaf.basic.BasicToolBarUI.canDock(Component,Point)|
|javax.swing.plaf.basic.BasicToolBarUI.createDockingListener()|
|javax.swing.plaf.basic.BasicToolBarUI.createDragWindow(JToolBar)|
|javax.swing.plaf.basic.BasicToolBarUI.createFloatingFrame(JToolBar)|No longer used, use BasicToolBarUI.createFloatingWindow(JToolBar)
|javax.swing.plaf.basic.BasicToolBarUI.createFloatingWindow(JToolBar)|Creates a window which contains the toolbar after it has been  dragged out from its container
|javax.swing.plaf.basic.BasicToolBarUI.createFrameListener()|
|javax.swing.plaf.basic.BasicToolBarUI.createNonRolloverBorder()|Creates the non rollover border for toolbar components.
|javax.swing.plaf.basic.BasicToolBarUI.createPropertyListener()|
|javax.swing.plaf.basic.BasicToolBarUI.createRolloverBorder()|Creates a rollover border for toolbar components.
|javax.swing.plaf.basic.BasicToolBarUI.createToolBarContListener()|
|javax.swing.plaf.basic.BasicToolBarUI.createToolBarFocusListener()|
|javax.swing.plaf.basic.BasicToolBarUI.createUI(JComponent)|
|javax.swing.plaf.basic.BasicToolBarUI.dragTo(Point,Point)|
|javax.swing.plaf.basic.BasicToolBarUI.floatAt(Point,Point)|
|javax.swing.plaf.basic.BasicToolBarUI.getDockingColor()|Gets the color displayed when over a docking area
|javax.swing.plaf.basic.BasicToolBarUI.getFloatingColor()|Gets the color displayed when over a floating area
|javax.swing.plaf.basic.BasicToolBarUI.installComponents()|
|javax.swing.plaf.basic.BasicToolBarUI.installDefaults()|
|javax.swing.plaf.basic.BasicToolBarUI.installKeyboardActions()|
|javax.swing.plaf.basic.BasicToolBarUI.installListeners()|
|javax.swing.plaf.basic.BasicToolBarUI.installNonRolloverBorders(JComponent)|Installs non-rollover borders on all the child components of the JComponent.
|javax.swing.plaf.basic.BasicToolBarUI.installNormalBorders(JComponent)|Installs normal borders on all the child components of the JComponent.
|javax.swing.plaf.basic.BasicToolBarUI.installRolloverBorders(JComponent)|Installs rollover borders on all the child components of the JComponent.
|javax.swing.plaf.basic.BasicToolBarUI.installUI(JComponent)|
|javax.swing.plaf.basic.BasicToolBarUI.isFloating()|
|javax.swing.plaf.basic.BasicToolBarUI.isRolloverBorders()|Returns a flag to determine whether rollover button borders   are enabled.
|javax.swing.plaf.basic.BasicToolBarUI.navigateFocusedComp(int)|
|javax.swing.plaf.basic.BasicToolBarUI.paintDragWindow(Graphics)|Paints the contents of the window used for dragging.
|javax.swing.plaf.basic.BasicToolBarUI.setBorderToNonRollover(Component)|Sets the border of the component to have a non-rollover border which  was created by createNonRolloverBord
|javax.swing.plaf.basic.BasicToolBarUI.setBorderToNormal(Component)|Sets the border of the component to have a normal border.
|javax.swing.plaf.basic.BasicToolBarUI.setBorderToRollover(Component)|Sets the border of the component to have a rollover border which  was created by createRolloverBorder.
|javax.swing.plaf.basic.BasicToolBarUI.setDockingColor(Color)|Sets the color displayed when over a docking area
|javax.swing.plaf.basic.BasicToolBarUI.setFloating(boolean,Point)|
|javax.swing.plaf.basic.BasicToolBarUI.setFloatingColor(Color)|Sets the color displayed when over a floating area
|javax.swing.plaf.basic.BasicToolBarUI.setFloatingLocation(int,int)|
|javax.swing.plaf.basic.BasicToolBarUI.setOrientation(int)|
|javax.swing.plaf.basic.BasicToolBarUI.setRolloverBorders(boolean)|Sets the flag for enabling rollover borders on the toolbar and it will  also install the apropriate border depen
|javax.swing.plaf.basic.BasicToolBarUI.uninstallComponents()|
|javax.swing.plaf.basic.BasicToolBarUI.uninstallDefaults()|
|javax.swing.plaf.basic.BasicToolBarUI.uninstallKeyboardActions()|
|javax.swing.plaf.basic.BasicToolBarUI.uninstallListeners()|
|javax.swing.plaf.basic.BasicToolBarUI.uninstallUI(JComponent)|

*javax.swing.plaf.basic.BasicToolBarUI_Description*

A Basic Limplementation of ToolBarUI. This implementation is a "combined" view/controller. 



*java.lang.String_javax.swing.plaf.basic.BasicToolBarUI.constraintBeforeFloating*




*java.awt.Color_javax.swing.plaf.basic.BasicToolBarUI.dockingBorderColor*




*java.awt.Color_javax.swing.plaf.basic.BasicToolBarUI.dockingColor*




*javax.swing.event.MouseInputListener_javax.swing.plaf.basic.BasicToolBarUI.dockingListener*




*javax.swing.KeyStroke_javax.swing.plaf.basic.BasicToolBarUI.downKey*

As of Java 2 platform v1.3 this previously undocumented field is no longer used. Key bindings are now defined by the LookAndFeel, please refer to the key bindings specification 
for further details. 


*javax.swing.plaf.basic.BasicToolBarUI.DragWindow_javax.swing.plaf.basic.BasicToolBarUI.dragWindow*




*java.awt.Color_javax.swing.plaf.basic.BasicToolBarUI.floatingBorderColor*




*java.awt.Color_javax.swing.plaf.basic.BasicToolBarUI.floatingColor*




*int_javax.swing.plaf.basic.BasicToolBarUI.focusedCompIndex*




*javax.swing.KeyStroke_javax.swing.plaf.basic.BasicToolBarUI.leftKey*

As of Java 2 platform v1.3 this previously undocumented field is no longer used. Key bindings are now defined by the LookAndFeel, please refer to the key bindings specification 
for further details. 


*java.beans.PropertyChangeListener_javax.swing.plaf.basic.BasicToolBarUI.propertyListener*




*javax.swing.KeyStroke_javax.swing.plaf.basic.BasicToolBarUI.rightKey*

As of Java 2 platform v1.3 this previously undocumented field is no longer used. Key bindings are now defined by the LookAndFeel, please refer to the key bindings specification 
for further details. 


*javax.swing.JToolBar_javax.swing.plaf.basic.BasicToolBarUI.toolBar*




*java.awt.event.ContainerListener_javax.swing.plaf.basic.BasicToolBarUI.toolBarContListener*




*java.awt.event.FocusListener_javax.swing.plaf.basic.BasicToolBarUI.toolBarFocusListener*




*javax.swing.KeyStroke_javax.swing.plaf.basic.BasicToolBarUI.upKey*

As of Java 2 platform v1.3 this previously undocumented field is no longer used. Key bindings are now defined by the LookAndFeel, please refer to the key bindings specification 
for further details. 



*javax.swing.plaf.basic.BasicToolBarUI()*

public BasicToolBarUI()




*javax.swing.plaf.basic.BasicToolBarUI.canDock(Component,Point)*

public boolean canDock(
  java.awt.Component c,
  java.awt.Point p)





*javax.swing.plaf.basic.BasicToolBarUI.createDockingListener()*

protected |javax.swing.event.MouseInputListener| createDockingListener()





*javax.swing.plaf.basic.BasicToolBarUI.createDragWindow(JToolBar)*

protected |javax.swing.plaf.basic.BasicToolBarUI.DragWindow| createDragWindow(javax.swing.JToolBar toolbar)





*javax.swing.plaf.basic.BasicToolBarUI.createFloatingFrame(JToolBar)*

protected |javax.swing.JFrame| createFloatingFrame(javax.swing.JToolBar toolbar)

No longer used, use BasicToolBarUI.createFloatingWindow(JToolBar) 



*javax.swing.plaf.basic.BasicToolBarUI.createFloatingWindow(JToolBar)*

protected |javax.swing.RootPaneContainer| createFloatingWindow(javax.swing.JToolBar toolbar)

Creates a window which contains the toolbar after it has been dragged out from its container 



    Returns: a RootPaneContainer object, containing the toolbar. 

*javax.swing.plaf.basic.BasicToolBarUI.createFrameListener()*

protected |java.awt.event.WindowListener| createFrameListener()





*javax.swing.plaf.basic.BasicToolBarUI.createNonRolloverBorder()*

protected |javax.swing.border.Border| createNonRolloverBorder()

Creates the non rollover border for toolbar components. This border will be installed as the border for components added to the toolbar if rollover borders are not enabled. 

Override this method to provide an alternate rollover border. 



*javax.swing.plaf.basic.BasicToolBarUI.createPropertyListener()*

protected |java.beans.PropertyChangeListener| createPropertyListener()





*javax.swing.plaf.basic.BasicToolBarUI.createRolloverBorder()*

protected |javax.swing.border.Border| createRolloverBorder()

Creates a rollover border for toolbar components. The rollover border will be installed if rollover borders are enabled. 

Override this method to provide an alternate rollover border. 



*javax.swing.plaf.basic.BasicToolBarUI.createToolBarContListener()*

protected |java.awt.event.ContainerListener| createToolBarContListener()





*javax.swing.plaf.basic.BasicToolBarUI.createToolBarFocusListener()*

protected |java.awt.event.FocusListener| createToolBarFocusListener()





*javax.swing.plaf.basic.BasicToolBarUI.createUI(JComponent)*

public static |javax.swing.plaf.ComponentUI| createUI(javax.swing.JComponent c)





*javax.swing.plaf.basic.BasicToolBarUI.dragTo(Point,Point)*

protected void dragTo(
  java.awt.Point position,
  java.awt.Point origin)





*javax.swing.plaf.basic.BasicToolBarUI.floatAt(Point,Point)*

protected void floatAt(
  java.awt.Point position,
  java.awt.Point origin)





*javax.swing.plaf.basic.BasicToolBarUI.getDockingColor()*

public |java.awt.Color| getDockingColor()

Gets the color displayed when over a docking area 



*javax.swing.plaf.basic.BasicToolBarUI.getFloatingColor()*

public |java.awt.Color| getFloatingColor()

Gets the color displayed when over a floating area 



*javax.swing.plaf.basic.BasicToolBarUI.installComponents()*

protected void installComponents()





*javax.swing.plaf.basic.BasicToolBarUI.installDefaults()*

protected void installDefaults()





*javax.swing.plaf.basic.BasicToolBarUI.installKeyboardActions()*

protected void installKeyboardActions()





*javax.swing.plaf.basic.BasicToolBarUI.installListeners()*

protected void installListeners()





*javax.swing.plaf.basic.BasicToolBarUI.installNonRolloverBorders(JComponent)*

protected void installNonRolloverBorders(javax.swing.JComponent c)

Installs non-rollover borders on all the child components of the JComponent. A non-rollover border is the border that is installed on the child component while it is in the 
toolbar. 

This is a convenience method to call setBorderToNonRollover for each child component. 


    c - container which holds the child components (usally a JToolBar) 

*javax.swing.plaf.basic.BasicToolBarUI.installNormalBorders(JComponent)*

protected void installNormalBorders(javax.swing.JComponent c)

Installs normal borders on all the child components of the JComponent. A normal border is the original border that was installed on the child component before it was added to the 
toolbar. 

This is a convenience method to call setBorderNormal for each child component. 


    c - container which holds the child components (usally a JToolBar) 

*javax.swing.plaf.basic.BasicToolBarUI.installRolloverBorders(JComponent)*

protected void installRolloverBorders(javax.swing.JComponent c)

Installs rollover borders on all the child components of the JComponent. 

This is a convenience method to call setBorderToRollover for each child component. 


    c - container which holds the child components (usally a JToolBar) 

*javax.swing.plaf.basic.BasicToolBarUI.installUI(JComponent)*

public void installUI(javax.swing.JComponent c)





*javax.swing.plaf.basic.BasicToolBarUI.isFloating()*

public boolean isFloating()





*javax.swing.plaf.basic.BasicToolBarUI.isRolloverBorders()*

public boolean isRolloverBorders()

Returns a flag to determine whether rollover button borders are enabled. 



    Returns: true if rollover borders are enabled; false otherwise 

*javax.swing.plaf.basic.BasicToolBarUI.navigateFocusedComp(int)*

protected void navigateFocusedComp(int direction)





*javax.swing.plaf.basic.BasicToolBarUI.paintDragWindow(Graphics)*

protected void paintDragWindow(java.awt.Graphics g)

Paints the contents of the window used for dragging. 


    g - Graphics to paint to. 

*javax.swing.plaf.basic.BasicToolBarUI.setBorderToNonRollover(Component)*

protected void setBorderToNonRollover(java.awt.Component c)

Sets the border of the component to have a non-rollover border which was created by createNonRolloverBorder. 


    c - component which will have a non-rollover border installed 

*javax.swing.plaf.basic.BasicToolBarUI.setBorderToNormal(Component)*

protected void setBorderToNormal(java.awt.Component c)

Sets the border of the component to have a normal border. A normal border is the original border that was installed on the child component before it was added to the toolbar. 


    c - component which will have a normal border re-installed 

*javax.swing.plaf.basic.BasicToolBarUI.setBorderToRollover(Component)*

protected void setBorderToRollover(java.awt.Component c)

Sets the border of the component to have a rollover border which was created by createRolloverBorder. 


    c - component which will have a rollover border installed 

*javax.swing.plaf.basic.BasicToolBarUI.setDockingColor(Color)*

public void setDockingColor(java.awt.Color c)

Sets the color displayed when over a docking area 



*javax.swing.plaf.basic.BasicToolBarUI.setFloating(boolean,Point)*

public void setFloating(
  boolean b,
  java.awt.Point p)





*javax.swing.plaf.basic.BasicToolBarUI.setFloatingColor(Color)*

public void setFloatingColor(java.awt.Color c)

Sets the color displayed when over a floating area 



*javax.swing.plaf.basic.BasicToolBarUI.setFloatingLocation(int,int)*

public void setFloatingLocation(
  int x,
  int y)





*javax.swing.plaf.basic.BasicToolBarUI.setOrientation(int)*

public void setOrientation(int orientation)





*javax.swing.plaf.basic.BasicToolBarUI.setRolloverBorders(boolean)*

public void setRolloverBorders(boolean rollover)

Sets the flag for enabling rollover borders on the toolbar and it will also install the apropriate border depending on the state of the flag. 


    rollover - if true, rollover borders are installed. Otherwise non-rollover borders are installed 

*javax.swing.plaf.basic.BasicToolBarUI.uninstallComponents()*

protected void uninstallComponents()





*javax.swing.plaf.basic.BasicToolBarUI.uninstallDefaults()*

protected void uninstallDefaults()





*javax.swing.plaf.basic.BasicToolBarUI.uninstallKeyboardActions()*

protected void uninstallKeyboardActions()





*javax.swing.plaf.basic.BasicToolBarUI.uninstallListeners()*

protected void uninstallListeners()





*javax.swing.plaf.basic.BasicToolBarUI.uninstallUI(JComponent)*

public void uninstallUI(javax.swing.JComponent c)







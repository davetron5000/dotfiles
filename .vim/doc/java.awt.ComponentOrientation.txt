*java.awt.ComponentOrientation* *ComponentOrientation* The ComponentOrientation class encapsulates the language-sensitive
 orientation that is to be used to order the elements of a

public final class ComponentOrientation
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.awt.ComponentOrientation_Description|
|java.awt.ComponentOrientation_Fields|
|java.awt.ComponentOrientation_Constructors|
|java.awt.ComponentOrientation_Methods|

====================================================================================================================================================================================

*java.awt.ComponentOrientation_Fields*
|java.awt.ComponentOrientation_java.awt.ComponentOrientation.LEFT_TO_RIGHT|
|java.awt.ComponentOrientation_java.awt.ComponentOrientation.RIGHT_TO_LEFT|
|java.awt.ComponentOrientation_java.awt.ComponentOrientation.UNKNOWN|

*java.awt.ComponentOrientation_Methods*
|java.awt.ComponentOrientation.getOrientation(Locale)|Returns the orientation that is appropriate for the given locale.
|java.awt.ComponentOrientation.getOrientation(ResourceBundle)|Returns the orientation appropriate for the given ResourceBundle's  localization.
|java.awt.ComponentOrientation.isHorizontal()|Are lines horizontal?  This will return true for horizontal, left-to-right writing  systems such as Roman.
|java.awt.ComponentOrientation.isLeftToRight()|HorizontalLines: Do items run left-to-right?  Vertical Lines:  Do lines run left-to-right?  This will return true for horizontal, le

*java.awt.ComponentOrientation_Description*

The ComponentOrientation class encapsulates the language-sensitive orientation that is to be used to order the elements of a component or of text. It is used to reflect the 
differences in this ordering between Western alphabets, Middle Eastern (such as Hebrew), and Far Eastern (such as Japanese). 

Fundamentally, this governs items (such as characters) which are laid out in lines, with the lines then laid out in a block. This also applies to items in a widget: for example, 
in a check box where the box is positioned relative to the text. 

There are four different orientations used in modern languages as in the following table. 

LT RT TL TR A B C C B A A D G G D A D E F F E D B E H H E B G H I I H G C F I I F C 

(In the header, the two-letter abbreviation represents the item direction in the first letter, and the line direction in the second. For example, LT means "items left-to-right, 
lines top-to-bottom", BL means "items bottom-to-top, lines bottom-to-top", and so on.) 

The orientations are: 

LT - Western Europe (optional for Japanese, Chinese, Korean) RT - Middle East (Arabic, Hebrew) TR - Japanese, Chinese, Korean TL - Mongolian 

Components whose view and controller code depends on orientation should use the isLeftToRight() and isHorizontal() methods to determine their behavior. They should not include 
switch-like code that keys off of the constants, such as: 

if (orientation == LEFT_TO_RIGHT) { ... } else if (orientation == RIGHT_TO_LEFT) { ... } else { // Oops } 

This is unsafe, since more constants may be added in the future and since it is not guaranteed that orientation objects will be unique. 



*java.awt.ComponentOrientation_java.awt.ComponentOrientation.LEFT_TO_RIGHT*

Items run left to right and lines flow top to bottom Examples: English, French. 


*java.awt.ComponentOrientation_java.awt.ComponentOrientation.RIGHT_TO_LEFT*

Items run right to left and lines flow top to bottom Examples: Arabic, Hebrew. 


*java.awt.ComponentOrientation_java.awt.ComponentOrientation.UNKNOWN*

Indicates that a component's orientation has not been set. To preserve the behavior of existing applications, isLeftToRight will return true for this value. 



*java.awt.ComponentOrientation.getOrientation(Locale)*

public static |java.awt.ComponentOrientation| getOrientation(java.util.Locale locale)

Returns the orientation that is appropriate for the given locale. 


    locale - the specified locale 

*java.awt.ComponentOrientation.getOrientation(ResourceBundle)*

public static |java.awt.ComponentOrientation| getOrientation(java.util.ResourceBundle bdl)

Returns the orientation appropriate for the given ResourceBundle's localization. Three approaches are tried, in the following order: 

Retrieve a ComponentOrientation object from the ResourceBundle using the string "Orientation" as the key. Use the ResourceBundle.getLocale to determine the bundle's locale, then 
return the orientation for that locale. Return the default locale's orientation. 

    Deprecated: As of J2SE 1.4, use {@link #getOrientation(java.util.Locale)}.


*java.awt.ComponentOrientation.isHorizontal()*

public boolean isHorizontal()

Are lines horizontal? This will return true for horizontal, left-to-right writing systems such as Roman. 



*java.awt.ComponentOrientation.isLeftToRight()*

public boolean isLeftToRight()

HorizontalLines: Do items run left-to-right? Vertical Lines: Do lines run left-to-right? This will return true for horizontal, left-to-right writing systems such as Roman. 





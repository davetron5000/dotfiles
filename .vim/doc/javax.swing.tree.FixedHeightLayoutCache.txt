*javax.swing.tree.FixedHeightLayoutCache* *FixedHeightLayoutCache* NOTE: This will become more open in a future release.

public class FixedHeightLayoutCache
  extends    |javax.swing.tree.AbstractLayoutCache|

|javax.swing.tree.FixedHeightLayoutCache_Description|
|javax.swing.tree.FixedHeightLayoutCache_Fields|
|javax.swing.tree.FixedHeightLayoutCache_Constructors|
|javax.swing.tree.FixedHeightLayoutCache_Methods|

====================================================================================================================================================================================

*javax.swing.tree.FixedHeightLayoutCache_Constructors*
|javax.swing.tree.FixedHeightLayoutCache()|

*javax.swing.tree.FixedHeightLayoutCache_Methods*
|javax.swing.tree.FixedHeightLayoutCache.getBounds(TreePath,Rectangle)|Returns a rectangle giving the bounds needed to draw path.
|javax.swing.tree.FixedHeightLayoutCache.getExpandedState(TreePath)|Returns true if the path is expanded, and visible.
|javax.swing.tree.FixedHeightLayoutCache.getPathClosestTo(int,int)|Returns the path to the node that is closest to x,y.
|javax.swing.tree.FixedHeightLayoutCache.getPathForRow(int)|Returns the path for passed in row.
|javax.swing.tree.FixedHeightLayoutCache.getRowCount()|Returns the number of visible rows.
|javax.swing.tree.FixedHeightLayoutCache.getRowForPath(TreePath)|Returns the row that the last item identified in path is visible  at.
|javax.swing.tree.FixedHeightLayoutCache.getVisibleChildCount(TreePath)|Returns the number of visible children for row.
|javax.swing.tree.FixedHeightLayoutCache.getVisiblePathsFrom(TreePath)|Returns an Enumerator that increments over the visible paths  starting at the passed in location.
|javax.swing.tree.FixedHeightLayoutCache.invalidatePathBounds(TreePath)|Does nothing, FixedHeightLayoutCache doesn't cache width, and that  is all that could change.
|javax.swing.tree.FixedHeightLayoutCache.invalidateSizes()|Informs the TreeState that it needs to recalculate all the sizes  it is referencing.
|javax.swing.tree.FixedHeightLayoutCache.isExpanded(TreePath)|Returns true if the value identified by row is currently expanded.
|javax.swing.tree.FixedHeightLayoutCache.setExpandedState(TreePath,boolean)|Marks the path path expanded state to  isExpanded.
|javax.swing.tree.FixedHeightLayoutCache.setModel(TreeModel)|Sets the TreeModel that will provide the data.
|javax.swing.tree.FixedHeightLayoutCache.setRootVisible(boolean)|Determines whether or not the root node from  the TreeModel is visible.
|javax.swing.tree.FixedHeightLayoutCache.setRowHeight(int)|Sets the height of each cell.
|javax.swing.tree.FixedHeightLayoutCache.treeNodesChanged(TreeModelEvent)|Invoked after a node (or a set of siblings) has changed in some  way.
|javax.swing.tree.FixedHeightLayoutCache.treeNodesInserted(TreeModelEvent)|Invoked after nodes have been inserted into the tree.
|javax.swing.tree.FixedHeightLayoutCache.treeNodesRemoved(TreeModelEvent)|Invoked after nodes have been removed from the tree.
|javax.swing.tree.FixedHeightLayoutCache.treeStructureChanged(TreeModelEvent)|Invoked after the tree has drastically changed structure from a  given node down.

*javax.swing.tree.FixedHeightLayoutCache_Description*

NOTE: This will become more open in a future release. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.tree.FixedHeightLayoutCache()*

public FixedHeightLayoutCache()




*javax.swing.tree.FixedHeightLayoutCache.getBounds(TreePath,Rectangle)*

public |java.awt.Rectangle| getBounds(
  javax.swing.tree.TreePath path,
  java.awt.Rectangle placeIn)

Returns a rectangle giving the bounds needed to draw path. 


    path - a TreePath specifying a node 
    placeIn - a Rectangle object giving the available space 

    Returns: a Rectangle object specifying the space to be used 

*javax.swing.tree.FixedHeightLayoutCache.getExpandedState(TreePath)*

public boolean getExpandedState(javax.swing.tree.TreePath path)

Returns true if the path is expanded, and visible. 



*javax.swing.tree.FixedHeightLayoutCache.getPathClosestTo(int,int)*

public |javax.swing.tree.TreePath| getPathClosestTo(
  int x,
  int y)

Returns the path to the node that is closest to x,y. If there is nothing currently visible this will return null, otherwise it'll always return a valid path. If you need to test 
if the returned object is exactly at x, y you should get the bounds for the returned path and test x, y against that. 



*javax.swing.tree.FixedHeightLayoutCache.getPathForRow(int)*

public |javax.swing.tree.TreePath| getPathForRow(int row)

Returns the path for passed in row. If row is not visible null is returned. 



*javax.swing.tree.FixedHeightLayoutCache.getRowCount()*

public int getRowCount()

Returns the number of visible rows. 



*javax.swing.tree.FixedHeightLayoutCache.getRowForPath(TreePath)*

public int getRowForPath(javax.swing.tree.TreePath path)

Returns the row that the last item identified in path is visible at. Will return -1 if any of the elements in path are not currently visible. 



*javax.swing.tree.FixedHeightLayoutCache.getVisibleChildCount(TreePath)*

public int getVisibleChildCount(javax.swing.tree.TreePath path)

Returns the number of visible children for row. 



*javax.swing.tree.FixedHeightLayoutCache.getVisiblePathsFrom(TreePath)*

public |java.util.Enumeration|<TreePath> getVisiblePathsFrom(javax.swing.tree.TreePath path)

Returns an Enumerator that increments over the visible paths starting at the passed in location. The ordering of the enumeration is based on how the paths are displayed. 



*javax.swing.tree.FixedHeightLayoutCache.invalidatePathBounds(TreePath)*

public void invalidatePathBounds(javax.swing.tree.TreePath path)

Does nothing, FixedHeightLayoutCache doesn't cache width, and that is all that could change. 



*javax.swing.tree.FixedHeightLayoutCache.invalidateSizes()*

public void invalidateSizes()

Informs the TreeState that it needs to recalculate all the sizes it is referencing. 



*javax.swing.tree.FixedHeightLayoutCache.isExpanded(TreePath)*

public boolean isExpanded(javax.swing.tree.TreePath path)

Returns true if the value identified by row is currently expanded. 



*javax.swing.tree.FixedHeightLayoutCache.setExpandedState(TreePath,boolean)*

public void setExpandedState(
  javax.swing.tree.TreePath path,
  boolean isExpanded)

Marks the path path expanded state to isExpanded. 



*javax.swing.tree.FixedHeightLayoutCache.setModel(TreeModel)*

public void setModel(javax.swing.tree.TreeModel newModel)

Sets the TreeModel that will provide the data. 


    newModel - the TreeModel that is to provide the data 

*javax.swing.tree.FixedHeightLayoutCache.setRootVisible(boolean)*

public void setRootVisible(boolean rootVisible)

Determines whether or not the root node from the TreeModel is visible. 


    rootVisible - true if the root node of the tree is to be displayed 

*javax.swing.tree.FixedHeightLayoutCache.setRowHeight(int)*

public void setRowHeight(int rowHeight)

Sets the height of each cell. If rowHeight is less than or equal to 0 this will throw an IllegalArgumentException. 


    rowHeight - the height of each cell, in pixels 

*javax.swing.tree.FixedHeightLayoutCache.treeNodesChanged(TreeModelEvent)*

public void treeNodesChanged(javax.swing.event.TreeModelEvent e)

Invoked after a node (or a set of siblings) has changed in some way. The node(s) have not changed locations in the tree or altered their children arrays, but other attributes have 
changed and may affect presentation. Example: the name of a file has changed, but it is in the same location in the file system. 

e.path() returns the path the parent of the changed node(s). 

e.childIndices() returns the index(es) of the changed node(s). 



*javax.swing.tree.FixedHeightLayoutCache.treeNodesInserted(TreeModelEvent)*

public void treeNodesInserted(javax.swing.event.TreeModelEvent e)

Invoked after nodes have been inserted into the tree. 

e.path() returns the parent of the new nodes e.childIndices() returns the indices of the new nodes in ascending order. 



*javax.swing.tree.FixedHeightLayoutCache.treeNodesRemoved(TreeModelEvent)*

public void treeNodesRemoved(javax.swing.event.TreeModelEvent e)

Invoked after nodes have been removed from the tree. Note that if a subtree is removed from the tree, this method may only be invoked once for the root of the removed subtree, not 
once for each individual set of siblings removed. 

e.path() returns the former parent of the deleted nodes. 

e.childIndices() returns the indices the nodes had before they were deleted in ascending order. 



*javax.swing.tree.FixedHeightLayoutCache.treeStructureChanged(TreeModelEvent)*

public void treeStructureChanged(javax.swing.event.TreeModelEvent e)

Invoked after the tree has drastically changed structure from a given node down. If the path returned by e.getPath() is of length one and the first element does not identify the 
current root node the first element should become the new root of the tree. 

e.path() holds the path to the node. e.childIndices() returns null. 





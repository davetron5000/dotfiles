*javax.naming.CannotProceedException* *CannotProceedException* This exception is

public class CannotProceedException
  extends    |javax.naming.NamingException|

|javax.naming.CannotProceedException_Description|
|javax.naming.CannotProceedException_Fields|
|javax.naming.CannotProceedException_Constructors|
|javax.naming.CannotProceedException_Methods|

================================================================================

*javax.naming.CannotProceedException_Fields*
|javax.naming.Name_javax.naming.CannotProceedException.altName|
|javax.naming.Context_javax.naming.CannotProceedException.altNameCtx|
|java.util.Hashtable_javax.naming.CannotProceedException.environment|
|javax.naming.Name_javax.naming.CannotProceedException.remainingNewName|

*javax.naming.CannotProceedException_Constructors*
|javax.naming.CannotProceedException()|Constructs a new instance of CannotProce
|javax.naming.CannotProceedException(String)|Constructs a new instance of Canno

*javax.naming.CannotProceedException_Methods*
|javax.naming.CannotProceedException.getAltName()|Retrieves the altName field o
|javax.naming.CannotProceedException.getAltNameCtx()|Retrieves the altNameCtx f
|javax.naming.CannotProceedException.getEnvironment()|Retrieves the environment
|javax.naming.CannotProceedException.getRemainingNewName()|Retrieves the "remai
|javax.naming.CannotProceedException.setAltName(Name)|Sets the altName field of
|javax.naming.CannotProceedException.setAltNameCtx(Context)|Sets the altNameCtx
|javax.naming.CannotProceedException.setEnvironment(Hashtable)|Sets the environ
|javax.naming.CannotProceedException.setRemainingNewName(Name)|Sets the "remain

*javax.naming.CannotProceedException_Description*

This exception is thrown to indicate that the operation reached a point in the 
name where the operation cannot proceed any further. When performing an 
operation on a composite name, a naming service provider may reach a part of 
the name that does not belong to its namespace. At that point, it can construct 
a CannotProceedException and then invoke methods provided by 
javax.naming.spi.NamingManager (such as getContinuationContext()) to locate 
another provider to continue the operation. If this is not possible, this 
exception is raised to the caller of the context operation. 

If the program wants to handle this exception in particular, it should catch 
CannotProceedException explicitly before attempting to catch NamingException. 

A CannotProceedException instance is not synchronized against concurrent 
multithreaded access. Multiple threads trying to access and modify 
CannotProceedException should lock the object. 


*javax.naming.Name_javax.naming.CannotProceedException.altName*

This exception is thrown to indicate that the operation reached a point in the 
name where the operation cannot proceed any further. When performing an 
operation on a composite name, a naming service provider may reach a part of 
the name that does not belong to its namespace. At that point, it can construct 
a CannotProceedException and then invoke methods provided by 
javax.naming.spi.NamingManager (such as getContinuationContext()) to locate 
another provider to continue the operation. If this is not possible, this 
exception is raised to the caller of the context operation. 

If the program wants to handle this exception in particular, it should catch 
CannotProceedException explicitly before attempting to catch NamingException. 

A CannotProceedException instance is not synchronized against concurrent 
multithreaded access. Multiple threads trying to access and modify 
CannotProceedException should lock the object. 


*javax.naming.Context_javax.naming.CannotProceedException.altNameCtx*

This exception is thrown to indicate that the operation reached a point in the 
name where the operation cannot proceed any further. When performing an 
operation on a composite name, a naming service provider may reach a part of 
the name that does not belong to its namespace. At that point, it can construct 
a CannotProceedException and then invoke methods provided by 
javax.naming.spi.NamingManager (such as getContinuationContext()) to locate 
another provider to continue the operation. If this is not possible, this 
exception is raised to the caller of the context operation. 

If the program wants to handle this exception in particular, it should catch 
CannotProceedException explicitly before attempting to catch NamingException. 

A CannotProceedException instance is not synchronized against concurrent 
multithreaded access. Multiple threads trying to access and modify 
CannotProceedException should lock the object. 


*java.util.Hashtable_javax.naming.CannotProceedException.environment*

This exception is thrown to indicate that the operation reached a point in the 
name where the operation cannot proceed any further. When performing an 
operation on a composite name, a naming service provider may reach a part of 
the name that does not belong to its namespace. At that point, it can construct 
a CannotProceedException and then invoke methods provided by 
javax.naming.spi.NamingManager (such as getContinuationContext()) to locate 
another provider to continue the operation. If this is not possible, this 
exception is raised to the caller of the context operation. 

If the program wants to handle this exception in particular, it should catch 
CannotProceedException explicitly before attempting to catch NamingException. 

A CannotProceedException instance is not synchronized against concurrent 
multithreaded access. Multiple threads trying to access and modify 
CannotProceedException should lock the object. 


*javax.naming.Name_javax.naming.CannotProceedException.remainingNewName*

This exception is thrown to indicate that the operation reached a point in the 
name where the operation cannot proceed any further. When performing an 
operation on a composite name, a naming service provider may reach a part of 
the name that does not belong to its namespace. At that point, it can construct 
a CannotProceedException and then invoke methods provided by 
javax.naming.spi.NamingManager (such as getContinuationContext()) to locate 
another provider to continue the operation. If this is not possible, this 
exception is raised to the caller of the context operation. 

If the program wants to handle this exception in particular, it should catch 
CannotProceedException explicitly before attempting to catch NamingException. 

A CannotProceedException instance is not synchronized against concurrent 
multithreaded access. Multiple threads trying to access and modify 
CannotProceedException should lock the object. 



*javax.naming.CannotProceedException()*

public CannotProceedException()

Constructs a new instance of CannotProceedException. All fields default to 
null. 


*javax.naming.CannotProceedException(String)*

public CannotProceedException(java.lang.String explanation)

Constructs a new instance of CannotProceedException using an explanation. All 
unspecified fields default to null. 

    explanation - A possibly null string containing additional detail about this exception. If 
       null, this exception has no detail message. 

*javax.naming.CannotProceedException.getAltName()*

public |javax.naming.Name| getAltName()

Retrieves the altName field of this exception. This is the name of the resolved 
object, relative to the context altNameCtx. It will be used during a subsequent 
call to the javax.naming.spi.ObjectFactory.getObjectInstance method. 


    Returns: The name of the resolved object, relative to altNameCtx. It is a composite 
             name. If null, then no name is specified. 
*javax.naming.CannotProceedException.getAltNameCtx()*

public |javax.naming.Context| getAltNameCtx()

Retrieves the altNameCtx field of this exception. This is the context relative 
to which altName is named. It will be used during a subsequent call to the 
javax.naming.spi.ObjectFactory.getObjectInstance method. 


    Returns: The context relative to which altName is named. If null, then the default 
             initial context is implied. 
*javax.naming.CannotProceedException.getEnvironment()*

public |java.util.Hashtable| getEnvironment()

Retrieves the environment that was in effect when this exception was created. 


    Returns: Possibly null environment property set. null means no environment was recorded 
             for this exception. 
*javax.naming.CannotProceedException.getRemainingNewName()*

public |javax.naming.Name| getRemainingNewName()

Retrieves the "remaining new name" field of this exception, which is used when 
this exception is thrown during a rename() operation. 


    Returns: The possibly null part of the new name that has not been resolved. It is a 
             composite name. It can be null, which means the remaining new name 
             field has not been set. 
*javax.naming.CannotProceedException.setAltName(Name)*

public void setAltName(javax.naming.Name altName)

Sets the altName field of this exception. 

    altName - The name of the resolved object, relative to altNameCtx. It is a composite 
       name. If null, then no name is specified. 

*javax.naming.CannotProceedException.setAltNameCtx(Context)*

public void setAltNameCtx(javax.naming.Context altNameCtx)

Sets the altNameCtx field of this exception. 

    altNameCtx - The context relative to which altName is named. If null, then the default 
       initial context is implied. 

*javax.naming.CannotProceedException.setEnvironment(Hashtable)*

public void setEnvironment(java.util.Hashtable environment)

Sets the environment that will be returned when getEnvironment() is called. 

    environment - A possibly null environment property set. null means no environment is being 
       recorded for this exception. 

*javax.naming.CannotProceedException.setRemainingNewName(Name)*

public void setRemainingNewName(javax.naming.Name newName)

Sets the "remaining new name" field of this exception. This is the value 
returned by getRemainingNewName(). 

newName is a composite name. If the intent is to set this field using a 
compound name or string, you must "stringify" the compound name, and create a 
composite name with a single component using the string. You can then invoke 
this method using the resulting composite name. 

A copy of newName is made and stored. Subsequent changes to name does not 
affect the copy in this NamingException and vice versa. 

    newName - The possibly null name to set the "remaining new name" to. If null, it sets the 
       remaining name field to null. 



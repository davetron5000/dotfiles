*java.awt.geom.Arc2D.Double* *Arc2D.Double* This class defines an arc specified 

public static class Arc2D.Double
  extends    |java.awt.geom.Arc2D|

|java.awt.geom.Arc2D.Double_Description|
|java.awt.geom.Arc2D.Double_Fields|
|java.awt.geom.Arc2D.Double_Constructors|
|java.awt.geom.Arc2D.Double_Methods|

================================================================================

*java.awt.geom.Arc2D.Double_Fields*
|double_java.awt.geom.Arc2D.Double.extent|
|double_java.awt.geom.Arc2D.Double.height|
|double_java.awt.geom.Arc2D.Double.start|
|double_java.awt.geom.Arc2D.Double.width|
|double_java.awt.geom.Arc2D.Double.x|
|double_java.awt.geom.Arc2D.Double.y|

*java.awt.geom.Arc2D.Double_Constructors*
|java.awt.geom.Arc2D.Double()|Constructs a new OPEN arc, initialized to locatio
|java.awt.geom.Arc2D.Double(double,double,double,double,double,double,int)|Cons
|java.awt.geom.Arc2D.Double(int)|Constructs a new arc, initialized to location 
|java.awt.geom.Arc2D.Double(Rectangle2D,double,double,int)|Constructs a new arc

*java.awt.geom.Arc2D.Double_Methods*
|java.awt.geom.Arc2D.Double.getAngleExtent()|Returns the angular extent of the 
|java.awt.geom.Arc2D.Double.getAngleStart()|Returns the starting angle of the a
|java.awt.geom.Arc2D.Double.getHeight()|Returns the height of the ellipse of wh
|java.awt.geom.Arc2D.Double.getWidth()|Returns the width of the ellipse of whic
|java.awt.geom.Arc2D.Double.getX()|Returns the x coordinate of the upper left c
|java.awt.geom.Arc2D.Double.getY()|Returns the y coordinate of the upper left c
|java.awt.geom.Arc2D.Double.isEmpty()|Determines whether the arc is empty.
|java.awt.geom.Arc2D.Double.makeBounds(double,double,double,double)|Returns the
|java.awt.geom.Arc2D.Double.setAngleExtent(double)|Sets the angular extent of t
|java.awt.geom.Arc2D.Double.setAngleStart(double)|Sets the starting angle of th
|java.awt.geom.Arc2D.Double.setArc(double,double,double,double,double,double,int)|

*java.awt.geom.Arc2D.Double_Description*

This class defines an arc specified in double precision. 


*double_java.awt.geom.Arc2D.Double.extent*

This class defines an arc specified in double precision. 


*double_java.awt.geom.Arc2D.Double.height*

This class defines an arc specified in double precision. 


*double_java.awt.geom.Arc2D.Double.start*

This class defines an arc specified in double precision. 


*double_java.awt.geom.Arc2D.Double.width*

This class defines an arc specified in double precision. 


*double_java.awt.geom.Arc2D.Double.x*

This class defines an arc specified in double precision. 


*double_java.awt.geom.Arc2D.Double.y*

This class defines an arc specified in double precision. 



*java.awt.geom.Arc2D.Double()*

public Arc2D.Double()

Constructs a new OPEN arc, initialized to location (0, 0), size (0, 0), angular 
extents (start = 0, extent = 0). 


*java.awt.geom.Arc2D.Double(double,double,double,double,double,double,int)*

public Arc2D.Double(
  double x,
  double y,
  double w,
  double h,
  double start,
  double extent,
  int type)

Constructs a new arc, initialized to the specified location, size, angular 
extents, and closure type. 

    x,&nbsp;y - The coordinates of the upper left corner of the arc. (Specified in double 
       precision.) 
    w - The overall width of the full ellipse of which this arc is a partial section. 
       (Specified in double precision.) 
    h - The overall height of the full ellipse of which this arc is a partial section. 
       (Specified in double precision.) 
    start - The starting angle of the arc in degrees. (Specified in double precision.) 
    extent - The angular extent of the arc in degrees. (Specified in double precision.) 
    type - The closure type for the arc: {@link #OPEN OPEN}, {@link #CHORD CHORD}, or 
       {@link #PIE PIE}. 

*java.awt.geom.Arc2D.Double(int)*

public Arc2D.Double(int type)

Constructs a new arc, initialized to location (0, 0), size (0, 0), angular 
extents (start = 0, extent = 0), and the specified closure type. 

    type - The closure type for the arc: {@link #OPEN OPEN}, {@link #CHORD CHORD}, or 
       {@link #PIE PIE}. 

*java.awt.geom.Arc2D.Double(Rectangle2D,double,double,int)*

public Arc2D.Double(
  java.awt.geom.Rectangle2D ellipseBounds,
  double start,
  double extent,
  int type)

Constructs a new arc, initialized to the specified location, size, angular 
extents, and closure type. 

    ellipseBounds - The bounding rectangle that defines the outer boundary of the full ellipse of 
       which this arc is a partial section. 
    start - The starting angle of the arc in degrees. (Specified in double precision.) 
    extent - The angular extent of the arc in degrees. (Specified in double precision.) 
    type - The closure type for the arc: {@link #OPEN OPEN}, {@link #CHORD CHORD}, or 
       {@link #PIE PIE}. 

*java.awt.geom.Arc2D.Double.getAngleExtent()*

public double getAngleExtent()

Returns the angular extent of the arc. 


    Returns: A double value that represents the angular extent of the arc in degrees. 
*java.awt.geom.Arc2D.Double.getAngleStart()*

public double getAngleStart()

Returns the starting angle of the arc. 


    Returns: a double value that represents the starting angle of the arc in degrees. 
*java.awt.geom.Arc2D.Double.getHeight()*

public double getHeight()

Returns the height of the ellipse of which this arc is a partial section. 


    Returns: A double value that represents the height of the full ellipse of which this arc 
             is a partial section. 
*java.awt.geom.Arc2D.Double.getWidth()*

public double getWidth()

Returns the width of the ellipse of which this arc is a partial section. 


    Returns: A double value that represents the width of the full ellipse of which this arc 
             is a partial section. 
*java.awt.geom.Arc2D.Double.getX()*

public double getX()

Returns the x coordinate of the upper left corner of the arc. 


    Returns: The x coordinate of arc's upper left coordinate in double precision. 
*java.awt.geom.Arc2D.Double.getY()*

public double getY()

Returns the y coordinate of the upper left corner of the arc. 


    Returns: The y coordinate of arc's upper left coordinate in double precision. 
*java.awt.geom.Arc2D.Double.isEmpty()*

public boolean isEmpty()

Determines whether the arc is empty. 


    Returns: true if the arc is empty, false if it not. 
*java.awt.geom.Arc2D.Double.makeBounds(double,double,double,double)*

protected |java.awt.geom.Rectangle2D| makeBounds(
  double x,
  double y,
  double w,
  double h)

Returns the high-precision bounding box of the arc. 

    x,&nbsp;y - The coordinates of the upper left corner of the arc. 
    w - The overall width of the full ellipse of which this arc is a partial section. 
    h - The overall height of the full ellipse of which this arc is a partial section. 

    Returns: The bounding box as a Rectangle2D object. 
*java.awt.geom.Arc2D.Double.setAngleExtent(double)*

public void setAngleExtent(double angExt)

Sets the angular extent of this arc to the specified double value. 

    angExt - The angular extent of the arc in degrees. 

*java.awt.geom.Arc2D.Double.setAngleStart(double)*

public void setAngleStart(double angSt)

Sets the starting angle of this arc to the specified double value. 

    angSt - The starting angle of the arc in degrees. 

*java.awt.geom.Arc2D.Double.setArc(double,double,double,double,double,double,int)*

public void setArc(
  double x,
  double y,
  double w,
  double h,
  double angSt,
  double angExt,
  int closure)

Sets the location, size, angular extents, and closure type of this arc to the 
specified double values. 

    x,&nbsp;y - The coordinates of the upper left corner of the arc. 
    w - The overall width of the full ellipse of which this arc is a partial section. 
    h - The overall height of the full ellipse of which this arc is a partial section. 
    angSt - The starting angle of the arc in degrees. 
    angExt - The angular extent of the arc in degrees. 
    closure - The closure type for the arc: {@link #OPEN OPEN}, {@link #CHORD CHORD}, or 
       {@link #PIE PIE}. 



*java.awt.Frame* *Frame* A Frame is a top-level window with a title and a border

public class Frame
  extends    |java.awt.Window|
  implements |java.awt.MenuContainer|

|java.awt.Frame_Description|
|java.awt.Frame_Fields|
|java.awt.Frame_Constructors|
|java.awt.Frame_Methods|

================================================================================

*java.awt.Frame_Fields*
|int_java.awt.Frame.CROSSHAIR_CURSOR|
|int_java.awt.Frame.DEFAULT_CURSOR|
|int_java.awt.Frame.E_RESIZE_CURSOR|
|int_java.awt.Frame.HAND_CURSOR|
|int_java.awt.Frame.ICONIFIED|
|int_java.awt.Frame.MAXIMIZED_BOTH|
|int_java.awt.Frame.MAXIMIZED_HORIZ|
|int_java.awt.Frame.MAXIMIZED_VERT|
|int_java.awt.Frame.MOVE_CURSOR|
|int_java.awt.Frame.N_RESIZE_CURSOR|
|int_java.awt.Frame.NE_RESIZE_CURSOR|
|int_java.awt.Frame.NORMAL|
|int_java.awt.Frame.NW_RESIZE_CURSOR|
|int_java.awt.Frame.S_RESIZE_CURSOR|
|int_java.awt.Frame.SE_RESIZE_CURSOR|
|int_java.awt.Frame.SW_RESIZE_CURSOR|
|int_java.awt.Frame.TEXT_CURSOR|
|int_java.awt.Frame.W_RESIZE_CURSOR|
|int_java.awt.Frame.WAIT_CURSOR|

*java.awt.Frame_Constructors*
|java.awt.Frame()|Constructs a new instance of Frame that is   initially invisi
|java.awt.Frame(GraphicsConfiguration)|Create a Frame with the specified   Grap
|java.awt.Frame(String)|Constructs a new, initially invisible Frame object   wi
|java.awt.Frame(String,GraphicsConfiguration)|Constructs a new, initially invis

*java.awt.Frame_Methods*
|java.awt.Frame.addNotify()|Makes this Frame displayable by connecting it to  a
|java.awt.Frame.finalize()|Disposes of the input methods and context, and remov
|java.awt.Frame.getAccessibleContext()|Gets the AccessibleContext associated wi
|java.awt.Frame.getCursorType()|
|java.awt.Frame.getExtendedState()|Gets the state of this frame.
|java.awt.Frame.getFrames()|Returns an array containing all Frames created by t
|java.awt.Frame.getIconImage()|Gets the image to be displayed in the minimized 
|java.awt.Frame.getMaximizedBounds()|Gets maximized bounds for this frame.
|java.awt.Frame.getMenuBar()|Gets the menu bar for this frame.
|java.awt.Frame.getState()|Gets the state of this frame (obsolete).
|java.awt.Frame.getTitle()|Gets the title of the frame.
|java.awt.Frame.isResizable()|Indicates whether this frame is resizable by the 
|java.awt.Frame.isUndecorated()|Indicates whether this frame is undecorated.
|java.awt.Frame.paramString()|Returns a string representing the state of this F
|java.awt.Frame.remove(MenuComponent)|Removes the specified menu bar from this 
|java.awt.Frame.removeNotify()|Makes this Frame undisplayable by removing its c
|java.awt.Frame.setCursor(int)|
|java.awt.Frame.setExtendedState(int)|Sets the state of this frame.
|java.awt.Frame.setIconImage(Image)|Sets the image to be displayed in the minim
|java.awt.Frame.setMaximizedBounds(Rectangle)|Sets the maximized bounds for thi
|java.awt.Frame.setMenuBar(MenuBar)|Sets the menu bar for this frame to the spe
|java.awt.Frame.setResizable(boolean)|Sets whether this frame is resizable by t
|java.awt.Frame.setState(int)|Sets the state of this frame (obsolete).
|java.awt.Frame.setTitle(String)|Sets the title for this frame to the specified
|java.awt.Frame.setUndecorated(boolean)|Disables or enables decorations for thi

*java.awt.Frame_Description*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.CROSSHAIR_CURSOR*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.DEFAULT_CURSOR*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.E_RESIZE_CURSOR*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.HAND_CURSOR*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.ICONIFIED*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.MAXIMIZED_BOTH*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.MAXIMIZED_HORIZ*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.MAXIMIZED_VERT*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.MOVE_CURSOR*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.N_RESIZE_CURSOR*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.NE_RESIZE_CURSOR*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.NORMAL*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.NW_RESIZE_CURSOR*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.S_RESIZE_CURSOR*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.SE_RESIZE_CURSOR*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.SW_RESIZE_CURSOR*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.TEXT_CURSOR*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.W_RESIZE_CURSOR*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 


*int_java.awt.Frame.WAIT_CURSOR*

A Frame is a top-level window with a title and a border. 

The size of the frame includes any area designated for the border. The 
dimensions of the border area may be obtained using the getInsets method, 
however, since these dimensions are platform-dependent, a valid insets value 
cannot be obtained until the frame is made displayable by either calling pack 
or show. Since the border area is included in the overall size of the frame, 
the border effectively obscures a portion of the frame, constraining the area 
available for rendering and/or displaying subcomponents to the rectangle which 
has an upper-left corner location of (insets.left, insets.top), and has a size 
of width - (insets.left + insets.right) by height - (insets.top + 
insets.bottom). 

The default layout for a frame is BorderLayout. 

A frame may have its native decorations (i.e. Frame and Titlebar) turned off 
with setUndecorated. This can only be done while the frame is not 
displayable(|java.awt.Component|) . 

In a multi-screen environment, you can create a Frame on a different screen 
device by constructing the Frame with (|java.awt.Frame|) or (|java.awt.Frame|) 
. The GraphicsConfiguration object is one of the GraphicsConfiguration objects 
of the target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual-coordinate system. The origin of the virtual-coordinate 
system is at the upper left-hand corner of the primary physical screen. 
Depending on the location of the primary screen in the virtual device, negative 
coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Frame 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of the Frame at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Frame 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Frame f = new Frame(GraphicsConfiguration gc); Rectangle bounds = 
gc.getBounds(); f.setLocation(10 + bounds.x, 10 + bounds.y); 

Frames are capable of generating the following types of WindowEvents: 

WINDOW_OPENED WINDOW_CLOSING: If the program doesn't explicitly hide or dispose 
the window while processing this event, the window close operation is canceled. 
WINDOW_CLOSED WINDOW_ICONIFIED WINDOW_DEICONIFIED WINDOW_ACTIVATED 
WINDOW_DEACTIVATED WINDOW_GAINED_FOCUS WINDOW_LOST_FOCUS WINDOW_STATE_CHANGED 



*java.awt.Frame()*

public Frame()
  throws |java.awt.HeadlessException|
         
Constructs a new instance of Frame that is initially invisible. The title of 
the Frame is empty. 


*java.awt.Frame(GraphicsConfiguration)*

public Frame(java.awt.GraphicsConfiguration gc)

Create a Frame with the specified GraphicsConfiguration of a screen device. 

    gc - the GraphicsConfiguration of the target screen device. If gc is null, the 
       system default GraphicsConfiguration is assumed. 

*java.awt.Frame(String)*

public Frame(java.lang.String title)
  throws |java.awt.HeadlessException|
         
Constructs a new, initially invisible Frame object with the specified title. 

    title - the title to be displayed in the frame's border. A null value is treated as an 
       empty string, "". 

*java.awt.Frame(String,GraphicsConfiguration)*

public Frame(
  java.lang.String title,
  java.awt.GraphicsConfiguration gc)

Constructs a new, initially invisible Frame object with the specified title and 
a GraphicsConfiguration. 

    title - the title to be displayed in the frame's border. A null value is treated as an 
       empty string, "". 
    gc - the GraphicsConfiguration of the target screen device. If gc is null, the 
       system default GraphicsConfiguration is assumed. 

*java.awt.Frame.addNotify()*

public void addNotify()

Makes this Frame displayable by connecting it to a native screen resource. 
Making a frame displayable will cause any of its children to be made 
displayable. This method is called internally by the toolkit and should not be 
called directly by programs. 


*java.awt.Frame.finalize()*

protected void finalize()
  throws |java.lang.Throwable|
         
Disposes of the input methods and context, and removes this Frame from the 
AppContext. Subclasses that override this method should call super.finalize(). 


*java.awt.Frame.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this Frame. For frames, the 
AccessibleContext takes the form of an AccessibleAWTFrame. A new 
AccessibleAWTFrame instance is created if necessary. 


    Returns: an AccessibleAWTFrame that serves as the AccessibleContext of this Frame 
*java.awt.Frame.getCursorType()*

public int getCursorType()




*java.awt.Frame.getExtendedState()*

public synchronized int getExtendedState()

Gets the state of this frame. The state is represented as a bitwise mask. 

NORMAL Indicates that no state bits are set. ICONIFIED MAXIMIZED_HORIZ 
MAXIMIZED_VERT MAXIMIZED_BOTH Concatenates MAXIMIZED_HORIZ and MAXIMIZED_VERT. 


    Returns: a bitwise mask of frame state constants 
*java.awt.Frame.getFrames()*

public static |java.awt.Frame| getFrames()

Returns an array containing all Frames created by the application. If called 
from an applet, the array will only include the Frames accessible by that 
applet. 


*java.awt.Frame.getIconImage()*

public |java.awt.Image| getIconImage()

Gets the image to be displayed in the minimized icon for this frame. 


    Returns: the icon image for this frame, or null if this frame doesn't have an icon 
             image. 
*java.awt.Frame.getMaximizedBounds()*

public |java.awt.Rectangle| getMaximizedBounds()

Gets maximized bounds for this frame. Some fields may contain Integer.MAX_VALUE 
to indicate that system supplied values for this field must be used. 


    Returns: maximized bounds for this frame; may be null 
*java.awt.Frame.getMenuBar()*

public |java.awt.MenuBar| getMenuBar()

Gets the menu bar for this frame. 


    Returns: the menu bar for this frame, or null if this frame doesn't have a menu bar. 
*java.awt.Frame.getState()*

public synchronized int getState()

Gets the state of this frame (obsolete). 

In older versions of JDK a frame state could only be NORMAL or ICONIFIED. Since 
JDK 1.4 set of supported frame states is expanded and frame state is 
represented as a bitwise mask. 

For compatibility with old programs this method still returns Frame.NORMAL and 
Frame.ICONIFIED but it only reports the iconic state of the frame, other 
aspects of frame state are not reported by this method. 


    Returns: Frame.NORMAL or Frame.ICONIFIED. 
*java.awt.Frame.getTitle()*

public |java.lang.String| getTitle()

Gets the title of the frame. The title is displayed in the frame's border. 


    Returns: the title of this frame, or an empty string ("") if this frame doesn't have a 
             title. 
*java.awt.Frame.isResizable()*

public boolean isResizable()

Indicates whether this frame is resizable by the user. By default, all frames 
are initially resizable. 


    Returns: true if the user can resize this frame; false otherwise. 
*java.awt.Frame.isUndecorated()*

public boolean isUndecorated()

Indicates whether this frame is undecorated. By default, all frames are 
initially decorated. 


    Returns: true if frame is undecorated; false otherwise. 
*java.awt.Frame.paramString()*

protected |java.lang.String| paramString()

Returns a string representing the state of this Frame. This method is intended 
to be used only for debugging purposes, and the content and format of the 
returned string may vary between implementations. The returned string may be 
empty but may not be null. 


    Returns: the parameter string of this frame 
*java.awt.Frame.remove(MenuComponent)*

public void remove(java.awt.MenuComponent m)

Removes the specified menu bar from this frame. 

    m - the menu component to remove. If m is null, then no action is taken 

*java.awt.Frame.removeNotify()*

public void removeNotify()

Makes this Frame undisplayable by removing its connection to its native screen 
resource. Making a Frame undisplayable will cause any of its children to be 
made undisplayable. This method is called by the toolkit internally and should 
not be called directly by programs. 


*java.awt.Frame.setCursor(int)*

public void setCursor(int cursorType)




*java.awt.Frame.setExtendedState(int)*

public synchronized void setExtendedState(int state)

Sets the state of this frame. The state is represented as a bitwise mask. 

NORMAL Indicates that no state bits are set. ICONIFIED MAXIMIZED_HORIZ 
MAXIMIZED_VERT MAXIMIZED_BOTH Concatenates MAXIMIZED_HORIZ and MAXIMIZED_VERT. 

Note that if the state is not supported on a given platform, nothing will 
happen. The application may determine if a specific state is available via the 
java.awt.Toolkit#isFrameStateSupported(int state) method. 

    state - a bitwise mask of frame state constants 

*java.awt.Frame.setIconImage(Image)*

public synchronized void setIconImage(java.awt.Image image)

Sets the image to be displayed in the minimized icon for this frame. Not all 
platforms support the concept of minimizing a window. 

    image - the icon image to be displayed. If this parameter is null then the icon image 
       is set to the default image, which may vary with platform. 

*java.awt.Frame.setMaximizedBounds(Rectangle)*

public synchronized void setMaximizedBounds(java.awt.Rectangle bounds)

Sets the maximized bounds for this frame. 

When a frame is in maximized state the system supplies some defaults bounds. 
This method allows some or all of those system supplied values to be 
overridden. 

If bounds is null, accept bounds supplied by the system. If non-null you can 
override some of the system supplied values while accepting others by setting 
those fields you want to accept from system to Integer.MAX_VALUE. 

On some systems only the size portion of the bounds is taken into account. 

    bounds - bounds for the maximized state 

*java.awt.Frame.setMenuBar(MenuBar)*

public void setMenuBar(java.awt.MenuBar mb)

Sets the menu bar for this frame to the specified menu bar. 

    mb - the menu bar being set. If this parameter is null then any existing menu bar on 
       this frame is removed. 

*java.awt.Frame.setResizable(boolean)*

public void setResizable(boolean resizable)

Sets whether this frame is resizable by the user. 

    resizable - true if this frame is resizable; false otherwise. 

*java.awt.Frame.setState(int)*

public synchronized void setState(int state)

Sets the state of this frame (obsolete). 

In older versions of JDK a frame state could only be NORMAL or ICONIFIED. Since 
JDK 1.4 set of supported frame states is expanded and frame state is 
represented as a bitwise mask. 

For compatibility with old programs this method still accepts Frame.NORMAL and 
Frame.ICONIFIED but it only changes the iconic state of the frame, other 
aspects of frame state are not affected by this method. 

    state - either Frame.NORMAL or Frame.ICONIFIED. 

*java.awt.Frame.setTitle(String)*

public void setTitle(java.lang.String title)

Sets the title for this frame to the specified string. 

    title - the title to be displayed in the frame's border. A null value is treated as an 
       empty string, "". 

*java.awt.Frame.setUndecorated(boolean)*

public void setUndecorated(boolean undecorated)

Disables or enables decorations for this frame. This method can only be called 
while the frame is not displayable. 

    undecorated - true if no frame decorations are to be enabled; false if frame decorations are 
       to be enabled. 



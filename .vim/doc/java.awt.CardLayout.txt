*java.awt.CardLayout* *CardLayout* A CardLayout object is a layout manager for a
 container.

public class CardLayout
  extends    |java.lang.Object|
  implements |java.awt.LayoutManager2|
             |java.io.Serializable|

|java.awt.CardLayout_Description|
|java.awt.CardLayout_Fields|
|java.awt.CardLayout_Constructors|
|java.awt.CardLayout_Methods|

====================================================================================================================================================================================

*java.awt.CardLayout_Constructors*
|java.awt.CardLayout()|Creates a new card layout with gaps of size zero.
|java.awt.CardLayout(int,int)|Creates a new card layout with the specified horizontal and  vertical gaps.

*java.awt.CardLayout_Methods*
|java.awt.CardLayout.addLayoutComponent(Component,Object)|Adds the specified component to this card layout's internal  table of names.
|java.awt.CardLayout.addLayoutComponent(String,Component)|
|java.awt.CardLayout.first(Container)|Flips to the first card of the container.
|java.awt.CardLayout.getHgap()|Gets the horizontal gap between components.
|java.awt.CardLayout.getLayoutAlignmentX(Container)|Returns the alignment along the x axis.
|java.awt.CardLayout.getLayoutAlignmentY(Container)|Returns the alignment along the y axis.
|java.awt.CardLayout.getVgap()|Gets the vertical gap between components.
|java.awt.CardLayout.invalidateLayout(Container)|Invalidates the layout, indicating that if the layout manager  has cached information it should be discarded.
|java.awt.CardLayout.last(Container)|Flips to the last card of the container.
|java.awt.CardLayout.layoutContainer(Container)|Lays out the specified container using this card layout.
|java.awt.CardLayout.maximumLayoutSize(Container)|Returns the maximum dimensions for this layout given the components  in the specified target container.
|java.awt.CardLayout.minimumLayoutSize(Container)|Calculates the minimum size for the specified panel.
|java.awt.CardLayout.next(Container)|Flips to the next card of the specified container.
|java.awt.CardLayout.preferredLayoutSize(Container)|Determines the preferred size of the container argument using  this card layout.
|java.awt.CardLayout.previous(Container)|Flips to the previous card of the specified container.
|java.awt.CardLayout.removeLayoutComponent(Component)|Removes the specified component from the layout.
|java.awt.CardLayout.setHgap(int)|Sets the horizontal gap between components.
|java.awt.CardLayout.setVgap(int)|Sets the vertical gap between components.
|java.awt.CardLayout.show(Container,String)|Flips to the component that was added to this layout with the  specified name, using addLayoutComponent.
|java.awt.CardLayout.toString()|Returns a string representation of the state of this card layout.

*java.awt.CardLayout_Description*

A CardLayout object is a layout manager for a container. It treats each component in the container as a card. Only one card is visible at a time, and the container acts as a stack 
of cards. The first component added to a CardLayout object is the visible component when the container is first displayed. 

The ordering of cards is determined by the container's own internal ordering of its component objects. CardLayout defines a set of methods that allow an application to flip 
through these cards sequentially, or to show a specified card. The (|java.awt.CardLayout|) method can be used to associate a string identifier with a given card for fast random 
access. 



*java.awt.CardLayout()*

public CardLayout()

Creates a new card layout with gaps of size zero. 


*java.awt.CardLayout(int,int)*

public CardLayout(
  int hgap,
  int vgap)

Creates a new card layout with the specified horizontal and vertical gaps. The horizontal gaps are placed at the left and right edges. The vertical gaps are placed at the top and 
bottom edges. 

    hgap - the horizontal gap. 
    vgap - the vertical gap. 

*java.awt.CardLayout.addLayoutComponent(Component,Object)*

public void addLayoutComponent(
  java.awt.Component comp,
  java.lang.Object constraints)

Adds the specified component to this card layout's internal table of names. The object specified by constraints must be a string. The card layout stores this string as a key-value 
pair that can be used for random access to a particular card. By calling the show method, an application can display the component with the specified name. 


    comp - the component to be added. 
    constraints - a tag that identifies a particular card in the layout. 

*java.awt.CardLayout.addLayoutComponent(String,Component)*

public void addLayoutComponent(
  java.lang.String name,
  java.awt.Component comp)



    Deprecated: replaced by
      <code>addLayoutComponent(Component, Object)</code>.


*java.awt.CardLayout.first(Container)*

public void first(java.awt.Container parent)

Flips to the first card of the container. 


    parent - the parent container in which to do the layout 

*java.awt.CardLayout.getHgap()*

public int getHgap()

Gets the horizontal gap between components. 



    Returns: the horizontal gap between components. 

*java.awt.CardLayout.getLayoutAlignmentX(Container)*

public float getLayoutAlignmentX(java.awt.Container parent)

Returns the alignment along the x axis. This specifies how the component would like to be aligned relative to other components. The value should be a number between 0 and 1 where 
0 represents alignment along the origin, 1 is aligned the furthest away from the origin, 0.5 is centered, etc. 



*java.awt.CardLayout.getLayoutAlignmentY(Container)*

public float getLayoutAlignmentY(java.awt.Container parent)

Returns the alignment along the y axis. This specifies how the component would like to be aligned relative to other components. The value should be a number between 0 and 1 where 
0 represents alignment along the origin, 1 is aligned the furthest away from the origin, 0.5 is centered, etc. 



*java.awt.CardLayout.getVgap()*

public int getVgap()

Gets the vertical gap between components. 



    Returns: the vertical gap between components. 

*java.awt.CardLayout.invalidateLayout(Container)*

public void invalidateLayout(java.awt.Container target)

Invalidates the layout, indicating that if the layout manager has cached information it should be discarded. 



*java.awt.CardLayout.last(Container)*

public void last(java.awt.Container parent)

Flips to the last card of the container. 


    parent - the parent container in which to do the layout 

*java.awt.CardLayout.layoutContainer(Container)*

public void layoutContainer(java.awt.Container parent)

Lays out the specified container using this card layout. 

Each component in the parent container is reshaped to be the size of the container, minus space for surrounding insets, horizontal gaps, and vertical gaps. 


    parent - the parent container in which to do the layout 

*java.awt.CardLayout.maximumLayoutSize(Container)*

public |java.awt.Dimension| maximumLayoutSize(java.awt.Container target)

Returns the maximum dimensions for this layout given the components in the specified target container. 


    target - the component which needs to be laid out 

*java.awt.CardLayout.minimumLayoutSize(Container)*

public |java.awt.Dimension| minimumLayoutSize(java.awt.Container parent)

Calculates the minimum size for the specified panel. 


    parent - the parent container in which to do the layout 

    Returns: the minimum dimensions required to lay out the subcomponents of the specified container 

*java.awt.CardLayout.next(Container)*

public void next(java.awt.Container parent)

Flips to the next card of the specified container. If the currently visible card is the last one, this method flips to the first card in the layout. 


    parent - the parent container in which to do the layout 

*java.awt.CardLayout.preferredLayoutSize(Container)*

public |java.awt.Dimension| preferredLayoutSize(java.awt.Container parent)

Determines the preferred size of the container argument using this card layout. 


    parent - the parent container in which to do the layout 

    Returns: the preferred dimensions to lay out the subcomponents of the specified container 

*java.awt.CardLayout.previous(Container)*

public void previous(java.awt.Container parent)

Flips to the previous card of the specified container. If the currently visible card is the first one, this method flips to the last card in the layout. 


    parent - the parent container in which to do the layout 

*java.awt.CardLayout.removeLayoutComponent(Component)*

public void removeLayoutComponent(java.awt.Component comp)

Removes the specified component from the layout. 


    comp - the component to be removed. 

*java.awt.CardLayout.setHgap(int)*

public void setHgap(int hgap)

Sets the horizontal gap between components. 


    hgap - the horizontal gap between components. 

*java.awt.CardLayout.setVgap(int)*

public void setVgap(int vgap)

Sets the vertical gap between components. 


    vgap - the vertical gap between components. 

*java.awt.CardLayout.show(Container,String)*

public void show(
  java.awt.Container parent,
  java.lang.String name)

Flips to the component that was added to this layout with the specified name, using addLayoutComponent. If no such component exists, then nothing happens. 


    parent - the parent container in which to do the layout 
    name - the component name 

*java.awt.CardLayout.toString()*

public |java.lang.String| toString()

Returns a string representation of the state of this card layout. 



    Returns: a string representation of this card layout. 



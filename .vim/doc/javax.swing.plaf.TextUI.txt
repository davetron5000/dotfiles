*javax.swing.plaf.TextUI* *TextUI* Text editor user interface

public abstract class TextUI
  extends    |javax.swing.plaf.ComponentUI|

|javax.swing.plaf.TextUI_Description|
|javax.swing.plaf.TextUI_Fields|
|javax.swing.plaf.TextUI_Constructors|
|javax.swing.plaf.TextUI_Methods|

================================================================================

*javax.swing.plaf.TextUI_Constructors*
|javax.swing.plaf.TextUI()|

*javax.swing.plaf.TextUI_Methods*
|javax.swing.plaf.TextUI.damageRange(JTextComponent,int,int)|Causes the portion
|javax.swing.plaf.TextUI.damageRange(JTextComponent,int,int,Position.Bias,Position.Bias)|
|javax.swing.plaf.TextUI.getEditorKit(JTextComponent)|Fetches the binding of se
|javax.swing.plaf.TextUI.getNextVisualPositionFrom(JTextComponent,int,Position.Bias,int,Position.Bias[])|
|javax.swing.plaf.TextUI.getRootView(JTextComponent)|Fetches a View with the al
|javax.swing.plaf.TextUI.getToolTipText(JTextComponent,Point)|Returns the strin
|javax.swing.plaf.TextUI.modelToView(JTextComponent,int)|Converts the given loc
|javax.swing.plaf.TextUI.modelToView(JTextComponent,int,Position.Bias)|Converts
|javax.swing.plaf.TextUI.viewToModel(JTextComponent,Point)|Converts the given p
|javax.swing.plaf.TextUI.viewToModel(JTextComponent,Point,Position.Bias[])|Prov

*javax.swing.plaf.TextUI_Description*

Text editor user interface 


*javax.swing.plaf.TextUI()*

public TextUI()




*javax.swing.plaf.TextUI.damageRange(JTextComponent,int,int)*

public abstract void damageRange(
  javax.swing.text.JTextComponent t,
  int p0,
  int p1)

Causes the portion of the view responsible for the given part of the model to 
be repainted. 

    p0 - the beginning of the range >= 0 
    p1 - the end of the range >= p0 

*javax.swing.plaf.TextUI.damageRange(JTextComponent,int,int,Position.Bias,Position.Bias)*

public abstract void damageRange(
  javax.swing.text.JTextComponent t,
  int p0,
  int p1,
  javax.swing.text.Position.Bias firstBias,
  javax.swing.text.Position.Bias secondBias)

Causes the portion of the view responsible for the given part of the model to 
be repainted. 

    p0 - the beginning of the range >= 0 
    p1 - the end of the range >= p0 

*javax.swing.plaf.TextUI.getEditorKit(JTextComponent)*

public abstract |javax.swing.text.EditorKit| getEditorKit(javax.swing.text.JTextComponent t)

Fetches the binding of services that set a policy for the type of document 
being edited. This contains things like the commands available, stream readers 
and writers, etc. 


    Returns: the editor kit binding 
*javax.swing.plaf.TextUI.getNextVisualPositionFrom(JTextComponent,int,Position.Bias,int,Position.Bias[])*

public abstract int getNextVisualPositionFrom(
  javax.swing.text.JTextComponent t,
  int pos,
  javax.swing.text.Position.Bias b,
  int direction,
  javax.swing.text.Position.Bias[] biasRet)
  throws |javax.swing.text.BadLocationException|
         
Provides a way to determine the next visually represented model location that 
one might place a caret. Some views may not be visible, they might not be in 
the same order found in the model, or they just might not allow access to some 
of the locations in the model. 

    pos - the position to convert >= 0 
    a - the allocated region to render into 
    direction - the direction from the current position that can be thought of as the arrow 
       keys typically found on a keyboard. This may be SwingConstants.WEST, 
       SwingConstants.EAST, SwingConstants.NORTH, or SwingConstants.SOUTH. 

    Returns: the location within the model that best represents the next location visual 
             position. 
*javax.swing.plaf.TextUI.getRootView(JTextComponent)*

public abstract |javax.swing.text.View| getRootView(javax.swing.text.JTextComponent t)

Fetches a View with the allocation of the associated text component (i.e. the 
root of the hierarchy) that can be traversed to determine how the model is 
being represented spatially. 


    Returns: 
*javax.swing.plaf.TextUI.getToolTipText(JTextComponent,Point)*

public |java.lang.String| getToolTipText(
  javax.swing.text.JTextComponent t,
  java.awt.Point pt)

Returns the string to be used as the tooltip at the passed in location. 


*javax.swing.plaf.TextUI.modelToView(JTextComponent,int)*

public abstract |java.awt.Rectangle| modelToView(
  javax.swing.text.JTextComponent t,
  int pos)
  throws |javax.swing.text.BadLocationException|
         
Converts the given location in the model to a place in the view coordinate 
system. 

    pos - the local location in the model to translate >= 0 

    Returns: the coordinates as a rectangle 
*javax.swing.plaf.TextUI.modelToView(JTextComponent,int,Position.Bias)*

public abstract |java.awt.Rectangle| modelToView(
  javax.swing.text.JTextComponent t,
  int pos,
  javax.swing.text.Position.Bias bias)
  throws |javax.swing.text.BadLocationException|
         
Converts the given location in the model to a place in the view coordinate 
system. 

    pos - the local location in the model to translate >= 0 

    Returns: the coordinates as a rectangle 
*javax.swing.plaf.TextUI.viewToModel(JTextComponent,Point)*

public abstract int viewToModel(
  javax.swing.text.JTextComponent t,
  java.awt.Point pt)

Converts the given place in the view coordinate system to the nearest 
representative location in the model. 

    pt - the location in the view to translate. This should be in the same coordinate 
       system as the mouse events. 

    Returns: the offset from the start of the document >= 0 
*javax.swing.plaf.TextUI.viewToModel(JTextComponent,Point,Position.Bias[])*

public abstract int viewToModel(
  javax.swing.text.JTextComponent t,
  java.awt.Point pt,
  javax.swing.text.Position.Bias[] biasReturn)

Provides a mapping from the view coordinate space to the logical coordinate 
space of the model. 

    pt - the location in the view to translate. This should be in the same coordinate 
       system as the mouse events. 
    biasReturn - filled in by this method to indicate whether the point given is closer to the 
       previous or the next character in the model 

    Returns: the location within the model that best represents the given point in the view 
             >= 0 


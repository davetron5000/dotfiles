*javax.naming.ldap.PagedResultsControl* *PagedResultsControl* Requests that the results of a search operation be returned by the LDAP
 server in batches of a specified size.

public final class PagedResultsControl
  extends    |javax.naming.ldap.BasicControl|

|javax.naming.ldap.PagedResultsControl_Description|
|javax.naming.ldap.PagedResultsControl_Fields|
|javax.naming.ldap.PagedResultsControl_Constructors|
|javax.naming.ldap.PagedResultsControl_Methods|

====================================================================================================================================================================================

*javax.naming.ldap.PagedResultsControl_Fields*
|java.lang.String_javax.naming.ldap.PagedResultsControl.OID|

*javax.naming.ldap.PagedResultsControl_Constructors*
|javax.naming.ldap.PagedResultsControl(int,boolean)|Constructs a control to set the number of entries to be returned per  page of results.
|javax.naming.ldap.PagedResultsControl(int,byte[],boolean)|Constructs a control to set the number of entries to be returned per  page of results.

*javax.naming.ldap.PagedResultsControl_Description*

Requests that the results of a search operation be returned by the LDAP server in batches of a specified size. The requestor controls the rate at which batches are returned by the 
rate at which it invokes search operations. 

The following code sample shows how the class may be used: 

// Open an LDAP association LdapContext ctx = new InitialLdapContext(); 

// Activate paged results int pageSize = 20; // 20 entries per page byte[] cookie = null; int total; ctx.setRequestControls(new Control[]{ new PagedResultsControl(pageSize, 
Control.CRITICAL) }); 

do { // Perform the search NamingEnumeration results = ctx.search("", "(objectclass=*)", new SearchControls()); 

// Iterate over a batch of search results while (results != null results.hasMore()) { // Display an entry SearchResult entry = (SearchResult)results.next(); 
System.out.println(entry.getName()); System.out.println(entry.getAttributes()); 

// Handle the entry's response controls (if any) if (entry instanceof HasControls) { // ((HasControls)entry).getControls(); } } // Examine the paged results control response 
Control[] controls = ctx.getResponseControls(); if (controls != null) { for (int i = 0; i This class implements the LDAPv3 Control for paged-results as defined in RFC 2696. 

The control's value has the following ASN.1 definition: 

realSearchControlValue ::= SEQUENCE { size INTEGER (0..maxInt), -- requested page size from client -- result set size estimate from server cookie OCTET STRING } 





*java.lang.String_javax.naming.ldap.PagedResultsControl.OID*

The paged-results control's assigned object identifier is 1.2.840.113556.1.4.319. 



*javax.naming.ldap.PagedResultsControl(int,boolean)*

public PagedResultsControl(
  int pageSize,
  boolean criticality)
  throws |java.io.IOException|
         
Constructs a control to set the number of entries to be returned per page of results. 

    pageSize - The number of entries to return in a page. 
    criticality - If true then the server must honor the control and return search results as indicated by pageSize or refuse to perform the search. If false, then the server need not honor the 
       control. 

*javax.naming.ldap.PagedResultsControl(int,byte[],boolean)*

public PagedResultsControl(
  int pageSize,
  byte[] cookie,
  boolean criticality)
  throws |java.io.IOException|
         
Constructs a control to set the number of entries to be returned per page of results. The cookie is provided by the server and may be obtained from the paged-results response 
control. 

A sequence of paged-results can be abandoned by setting the pageSize to zero and setting the cookie to the last cookie received from the server. 

    pageSize - The number of entries to return in a page. 
    cookie - A possibly null server-generated cookie. 
    criticality - If true then the server must honor the control and return search results as indicated by pageSize or refuse to perform the search. If false, then the server need not honor the 
       control. 


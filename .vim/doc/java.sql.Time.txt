*java.sql.Time* *Time* A thin wrapper around the java.util.Date class that allow

public class Time
  extends    |java.util.Date|

|java.sql.Time_Description|
|java.sql.Time_Fields|
|java.sql.Time_Constructors|
|java.sql.Time_Methods|

================================================================================

*java.sql.Time_Constructors*
|java.sql.Time(int,int,int)|Constructs a Time object initialized with the   giv
|java.sql.Time(long)|Constructs a Time object using a milliseconds time value.

*java.sql.Time_Methods*
|java.sql.Time.getDate()|This method is deprecated and should not be used becau
|java.sql.Time.getDay()|This method is deprecated and should not be used becaus
|java.sql.Time.getMonth()|This method is deprecated and should not be used beca
|java.sql.Time.getYear()|This method is deprecated and should not be used becau
|java.sql.Time.setDate(int)|This method is deprecated and should not be used be
|java.sql.Time.setMonth(int)|This method is deprecated and should not be used b
|java.sql.Time.setTime(long)|Sets a Time object using a milliseconds time value
|java.sql.Time.setYear(int)|This method is deprecated and should not be used be
|java.sql.Time.toString()|Formats a time in JDBC time escape format.
|java.sql.Time.valueOf(String)|Converts a string in JDBC time escape format to 

*java.sql.Time_Description*

A thin wrapper around the java.util.Date class that allows the JDBC API to 
identify this as an SQL TIME value. The Time class adds formatting and parsing 
operations to support the JDBC escape syntax for time values. The date 
components should be set to the "zero epoch" value of January 1, 1970 and 
should not be accessed. 


*java.sql.Time(int,int,int)*

public Time(
  int hour,
  int minute,
  int second)

Constructs a Time object initialized with the given values for the hour, 
minute, and second. The driver sets the date components to January 1, 1970. Any 
method that attempts to access the date components of a Time object will throw 
a java.lang.IllegalArgumentException. 

The result is undefined if a given argument is out of bounds. 

    hour - 0 to 23 
    minute - 0 to 59 
    second - 0 to 59 

*java.sql.Time(long)*

public Time(long time)

Constructs a Time object using a milliseconds time value. 

    time - milliseconds since January 1, 1970, 00:00:00 GMT; a negative number is 
       milliseconds before January 1, 1970, 00:00:00 GMT 

*java.sql.Time.getDate()*

public int getDate()

This method is deprecated and should not be used because SQL TIME values do not 
have a date component. 


*java.sql.Time.getDay()*

public int getDay()

This method is deprecated and should not be used because SQL TIME values do not 
have a day component. 


*java.sql.Time.getMonth()*

public int getMonth()

This method is deprecated and should not be used because SQL TIME values do not 
have a month component. 


*java.sql.Time.getYear()*

public int getYear()

This method is deprecated and should not be used because SQL TIME values do not 
have a year component. 


*java.sql.Time.setDate(int)*

public void setDate(int i)

This method is deprecated and should not be used because SQL TIME values do not 
have a date component. 


*java.sql.Time.setMonth(int)*

public void setMonth(int i)

This method is deprecated and should not be used because SQL TIME values do not 
have a month component. 


*java.sql.Time.setTime(long)*

public void setTime(long time)

Sets a Time object using a milliseconds time value. 

    time - milliseconds since January 1, 1970, 00:00:00 GMT; a negative number is 
       milliseconds before January 1, 1970, 00:00:00 GMT 

*java.sql.Time.setYear(int)*

public void setYear(int i)

This method is deprecated and should not be used because SQL TIME values do not 
have a year component. 


*java.sql.Time.toString()*

public |java.lang.String| toString()

Formats a time in JDBC time escape format. 


    Returns: a String in hh:mm:ss format 
*java.sql.Time.valueOf(String)*

public static |java.sql.Time| valueOf(java.lang.String s)

Converts a string in JDBC time escape format to a Time value. 

    s - time in format "hh:mm:ss" 

    Returns: a corresponding Time object 


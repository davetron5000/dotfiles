*javax.swing.text.html.HTMLEditorKit.ParserCallback* *HTMLEditorKit.ParserCallback* The result of parsing drives these callback methods.

public static class HTMLEditorKit.ParserCallback
  extends    |java.lang.Object|

|javax.swing.text.html.HTMLEditorKit.ParserCallback_Description|
|javax.swing.text.html.HTMLEditorKit.ParserCallback_Fields|
|javax.swing.text.html.HTMLEditorKit.ParserCallback_Constructors|
|javax.swing.text.html.HTMLEditorKit.ParserCallback_Methods|

====================================================================================================================================================================================

*javax.swing.text.html.HTMLEditorKit.ParserCallback_Fields*
|java.lang.Object_javax.swing.text.html.HTMLEditorKit.ParserCallback.IMPLIED|

*javax.swing.text.html.HTMLEditorKit.ParserCallback_Constructors*
|javax.swing.text.html.HTMLEditorKit.ParserCallback()|

*javax.swing.text.html.HTMLEditorKit.ParserCallback_Methods*
|javax.swing.text.html.HTMLEditorKit.ParserCallback.flush()|
|javax.swing.text.html.HTMLEditorKit.ParserCallback.handleComment(char[],int)|
|javax.swing.text.html.HTMLEditorKit.ParserCallback.handleEndOfLineString(String)|This is invoked after the stream has been parsed, but before  flush.
|javax.swing.text.html.HTMLEditorKit.ParserCallback.handleEndTag(HTML.Tag,int)|
|javax.swing.text.html.HTMLEditorKit.ParserCallback.handleError(String,int)|
|javax.swing.text.html.HTMLEditorKit.ParserCallback.handleSimpleTag(HTML.Tag,MutableAttributeSet,int)|
|javax.swing.text.html.HTMLEditorKit.ParserCallback.handleStartTag(HTML.Tag,MutableAttributeSet,int)|
|javax.swing.text.html.HTMLEditorKit.ParserCallback.handleText(char[],int)|

*javax.swing.text.html.HTMLEditorKit.ParserCallback_Description*

The result of parsing drives these callback methods. The open and close actions should be balanced. The flush method will be the last method called, to give the receiver a chance 
to flush any pending data into the document. Refer to DocumentParser, the default parser used, for further information on the contents of the AttributeSets, the positions, and 
other info. 



*java.lang.Object_javax.swing.text.html.HTMLEditorKit.ParserCallback.IMPLIED*

This is passed as an attribute in the attributeset to indicate the element is implied eg, the string '<>foo<\t>' contains an implied html element and an implied body element. 



*javax.swing.text.html.HTMLEditorKit.ParserCallback()*

public HTMLEditorKit.ParserCallback()




*javax.swing.text.html.HTMLEditorKit.ParserCallback.flush()*

public void flush()
  throws |javax.swing.text.BadLocationException|
         




*javax.swing.text.html.HTMLEditorKit.ParserCallback.handleComment(char[],int)*

public void handleComment(
  char[] data,
  int pos)





*javax.swing.text.html.HTMLEditorKit.ParserCallback.handleEndOfLineString(String)*

public void handleEndOfLineString(java.lang.String eol)

This is invoked after the stream has been parsed, but before flush. eol will be one of \n, \r or \r\n, which ever is encountered the most in parsing the stream. 



*javax.swing.text.html.HTMLEditorKit.ParserCallback.handleEndTag(HTML.Tag,int)*

public void handleEndTag(
  javax.swing.text.html.HTML.Tag t,
  int pos)





*javax.swing.text.html.HTMLEditorKit.ParserCallback.handleError(String,int)*

public void handleError(
  java.lang.String errorMsg,
  int pos)





*javax.swing.text.html.HTMLEditorKit.ParserCallback.handleSimpleTag(HTML.Tag,MutableAttributeSet,int)*

public void handleSimpleTag(
  javax.swing.text.html.HTML.Tag t,
  javax.swing.text.MutableAttributeSet a,
  int pos)





*javax.swing.text.html.HTMLEditorKit.ParserCallback.handleStartTag(HTML.Tag,MutableAttributeSet,int)*

public void handleStartTag(
  javax.swing.text.html.HTML.Tag t,
  javax.swing.text.MutableAttributeSet a,
  int pos)





*javax.swing.text.html.HTMLEditorKit.ParserCallback.handleText(char[],int)*

public void handleText(
  char[] data,
  int pos)







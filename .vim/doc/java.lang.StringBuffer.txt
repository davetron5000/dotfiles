*java.lang.StringBuffer* *StringBuffer* A thread-safe, mutable sequence of chara

public final class StringBuffer
  extends    |java.lang.AbstractStringBuilder|
  implements |java.io.Serializable|
             |java.lang.CharSequence|

|java.lang.StringBuffer_Description|
|java.lang.StringBuffer_Fields|
|java.lang.StringBuffer_Constructors|
|java.lang.StringBuffer_Methods|

================================================================================

*java.lang.StringBuffer_Constructors*
|java.lang.StringBuffer()|Constructs a string buffer with no characters in it a
|java.lang.StringBuffer(CharSequence)|Constructs a string buffer that contains 
|java.lang.StringBuffer(int)|Constructs a string buffer with no characters in i
|java.lang.StringBuffer(String)|Constructs a string buffer initialized to the c

*java.lang.StringBuffer_Methods*
|java.lang.StringBuffer.append(boolean)|
|java.lang.StringBuffer.append(char)|
|java.lang.StringBuffer.append(char[])|
|java.lang.StringBuffer.append(char[],int,int)|
|java.lang.StringBuffer.append(CharSequence)|Appends the specified CharSequence
|java.lang.StringBuffer.append(CharSequence,int,int)|
|java.lang.StringBuffer.append(double)|
|java.lang.StringBuffer.append(float)|
|java.lang.StringBuffer.append(int)|
|java.lang.StringBuffer.append(long)|
|java.lang.StringBuffer.append(Object)|
|java.lang.StringBuffer.append(String)|
|java.lang.StringBuffer.append(StringBuffer)|Appends the specified StringBuffer
|java.lang.StringBuffer.appendCodePoint(int)|
|java.lang.StringBuffer.capacity()|
|java.lang.StringBuffer.charAt(int)|
|java.lang.StringBuffer.codePointAt(int)|
|java.lang.StringBuffer.codePointBefore(int)|
|java.lang.StringBuffer.codePointCount(int,int)|
|java.lang.StringBuffer.delete(int,int)|
|java.lang.StringBuffer.deleteCharAt(int)|
|java.lang.StringBuffer.ensureCapacity(int)|
|java.lang.StringBuffer.getChars(int,int,char[],int)|
|java.lang.StringBuffer.indexOf(String)|
|java.lang.StringBuffer.indexOf(String,int)|
|java.lang.StringBuffer.insert(int,boolean)|
|java.lang.StringBuffer.insert(int,char)|
|java.lang.StringBuffer.insert(int,char[])|
|java.lang.StringBuffer.insert(int,char[],int,int)|
|java.lang.StringBuffer.insert(int,CharSequence)|
|java.lang.StringBuffer.insert(int,CharSequence,int,int)|
|java.lang.StringBuffer.insert(int,double)|
|java.lang.StringBuffer.insert(int,float)|
|java.lang.StringBuffer.insert(int,int)|
|java.lang.StringBuffer.insert(int,long)|
|java.lang.StringBuffer.insert(int,Object)|
|java.lang.StringBuffer.insert(int,String)|
|java.lang.StringBuffer.lastIndexOf(String)|
|java.lang.StringBuffer.lastIndexOf(String,int)|
|java.lang.StringBuffer.length()|
|java.lang.StringBuffer.offsetByCodePoints(int,int)|
|java.lang.StringBuffer.replace(int,int,String)|
|java.lang.StringBuffer.reverse()|
|java.lang.StringBuffer.setCharAt(int,char)|
|java.lang.StringBuffer.setLength(int)|
|java.lang.StringBuffer.subSequence(int,int)|
|java.lang.StringBuffer.substring(int)|
|java.lang.StringBuffer.substring(int,int)|
|java.lang.StringBuffer.toString()|
|java.lang.StringBuffer.trimToSize()|

*java.lang.StringBuffer_Description*

A thread-safe, mutable sequence of characters. A string buffer is like a 
(|java.lang.String|) , but can be modified. At any point in time it contains 
some particular sequence of characters, but the length and content of the 
sequence can be changed through certain method calls. 

String buffers are safe for use by multiple threads. The methods are 
synchronized where necessary so that all the operations on any particular 
instance behave as if they occur in some serial order that is consistent with 
the order of the method calls made by each of the individual threads involved. 

The principal operations on a StringBuffer are the append and insert methods, 
which are overloaded so as to accept data of any type. Each effectively 
converts a given datum to a string and then appends or inserts the characters 
of that string to the string buffer. The append method always adds these 
characters at the end of the buffer; the insert method adds the characters at a 
specified point. 

For example, if z refers to a string buffer object whose current contents are 
"start", then the method call z.append("le") would cause the string buffer to 
contain "startle", whereas z.insert(4, "le") would alter the string buffer to 
contain "starlet". 

In general, if sb refers to an instance of a StringBuffer, then sb.append(x) 
has the same effect as sb.insert(sb.length(),x). 

Whenever an operation occurs involving a source sequence (such as appending or 
inserting from a source sequence) this class synchronizes only on the string 
buffer performing the operation, not on the source. 

Every string buffer has a capacity. As long as the length of the character 
sequence contained in the string buffer does not exceed the capacity, it is not 
necessary to allocate a new internal buffer array. If the internal buffer 
overflows, it is automatically made larger. 

As of release JDK 5, this class has been supplemented with an equivalent class 
designed for use by a single thread, (|java.lang.StringBuilder|) . The 
StringBuilder class should generally be used in preference to this one, as it 
supports all of the same operations but it is faster, as it performs no 
synchronization. 


*java.lang.StringBuffer()*

public StringBuffer()

Constructs a string buffer with no characters in it and an initial capacity of 
16 characters. 


*java.lang.StringBuffer(CharSequence)*

public StringBuffer(java.lang.CharSequence seq)

Constructs a string buffer that contains the same characters as the specified 
CharSequence. The initial capacity of the string buffer is 16 plus the length 
of the CharSequence argument. 

If the length of the specified CharSequence is less than or equal to zero, then 
an empty buffer of capacity 16 is returned. 

    seq - the sequence to copy. 

*java.lang.StringBuffer(int)*

public StringBuffer(int capacity)

Constructs a string buffer with no characters in it and the specified initial 
capacity. 

    capacity - the initial capacity. 

*java.lang.StringBuffer(String)*

public StringBuffer(java.lang.String str)

Constructs a string buffer initialized to the contents of the specified string. 
The initial capacity of the string buffer is 16 plus the length of the string 
argument. 

    str - the initial contents of the buffer. 

*java.lang.StringBuffer.append(boolean)*

public synchronized |java.lang.StringBuffer| append(boolean b)




*java.lang.StringBuffer.append(char)*

public synchronized |java.lang.StringBuffer| append(char c)




*java.lang.StringBuffer.append(char[])*

public synchronized |java.lang.StringBuffer| append(char[] str)




*java.lang.StringBuffer.append(char[],int,int)*

public synchronized |java.lang.StringBuffer| append(
  char[] str,
  int offset,
  int len)




*java.lang.StringBuffer.append(CharSequence)*

public |java.lang.StringBuffer| append(java.lang.CharSequence s)

Appends the specified CharSequence to this sequence. 

The characters of the CharSequence argument are appended, in order, increasing 
the length of this sequence by the length of the argument. 

The result of this method is exactly the same as if it were an invocation of 
this.append(s, 0, s.length()); 

This method synchronizes on this (the destination) object but does not 
synchronize on the source (s). 

If s is null, then the four characters "null" are appended. 

    s - the CharSequence to append. 

    Returns: a reference to this object. 
*java.lang.StringBuffer.append(CharSequence,int,int)*

public synchronized |java.lang.StringBuffer| append(
  java.lang.CharSequence s,
  int start,
  int end)




*java.lang.StringBuffer.append(double)*

public synchronized |java.lang.StringBuffer| append(double d)




*java.lang.StringBuffer.append(float)*

public synchronized |java.lang.StringBuffer| append(float f)




*java.lang.StringBuffer.append(int)*

public synchronized |java.lang.StringBuffer| append(int i)




*java.lang.StringBuffer.append(long)*

public synchronized |java.lang.StringBuffer| append(long lng)




*java.lang.StringBuffer.append(Object)*

public synchronized |java.lang.StringBuffer| append(java.lang.Object obj)




*java.lang.StringBuffer.append(String)*

public synchronized |java.lang.StringBuffer| append(java.lang.String str)




*java.lang.StringBuffer.append(StringBuffer)*

public synchronized |java.lang.StringBuffer| append(java.lang.StringBuffer sb)

Appends the specified StringBuffer to this sequence. 

The characters of the StringBuffer argument are appended, in order, to the 
contents of this StringBuffer, increasing the length of this StringBuffer by 
the length of the argument. If sb is null, then the four characters "null" are 
appended to this StringBuffer. 

Let n be the length of the old character sequence, the one contained in the 
StringBuffer just prior to execution of the append method. Then the character 
at index k in the new character sequence is equal to the character at index k 
in the old character sequence, if k is less than n; otherwise, it is equal to 
the character at index k-n in the argument sb. 

This method synchronizes on this (the destination) object but does not 
synchronize on the source (sb). 

    sb - the StringBuffer to append. 

    Returns: a reference to this object. 
*java.lang.StringBuffer.appendCodePoint(int)*

public synchronized |java.lang.StringBuffer| appendCodePoint(int codePoint)




*java.lang.StringBuffer.capacity()*

public synchronized int capacity()




*java.lang.StringBuffer.charAt(int)*

public synchronized char charAt(int index)




*java.lang.StringBuffer.codePointAt(int)*

public synchronized int codePointAt(int index)




*java.lang.StringBuffer.codePointBefore(int)*

public synchronized int codePointBefore(int index)




*java.lang.StringBuffer.codePointCount(int,int)*

public synchronized int codePointCount(
  int beginIndex,
  int endIndex)




*java.lang.StringBuffer.delete(int,int)*

public synchronized |java.lang.StringBuffer| delete(
  int start,
  int end)




*java.lang.StringBuffer.deleteCharAt(int)*

public synchronized |java.lang.StringBuffer| deleteCharAt(int index)




*java.lang.StringBuffer.ensureCapacity(int)*

public synchronized void ensureCapacity(int minimumCapacity)




*java.lang.StringBuffer.getChars(int,int,char[],int)*

public synchronized void getChars(
  int srcBegin,
  int srcEnd,
  char[] dst,
  int dstBegin)




*java.lang.StringBuffer.indexOf(String)*

public int indexOf(java.lang.String str)




*java.lang.StringBuffer.indexOf(String,int)*

public synchronized int indexOf(
  java.lang.String str,
  int fromIndex)




*java.lang.StringBuffer.insert(int,boolean)*

public |java.lang.StringBuffer| insert(
  int offset,
  boolean b)




*java.lang.StringBuffer.insert(int,char)*

public synchronized |java.lang.StringBuffer| insert(
  int offset,
  char c)




*java.lang.StringBuffer.insert(int,char[])*

public synchronized |java.lang.StringBuffer| insert(
  int offset,
  char[] str)




*java.lang.StringBuffer.insert(int,char[],int,int)*

public synchronized |java.lang.StringBuffer| insert(
  int index,
  char[] str,
  int offset,
  int len)




*java.lang.StringBuffer.insert(int,CharSequence)*

public |java.lang.StringBuffer| insert(
  int dstOffset,
  java.lang.CharSequence s)




*java.lang.StringBuffer.insert(int,CharSequence,int,int)*

public synchronized |java.lang.StringBuffer| insert(
  int dstOffset,
  java.lang.CharSequence s,
  int start,
  int end)




*java.lang.StringBuffer.insert(int,double)*

public |java.lang.StringBuffer| insert(
  int offset,
  double d)




*java.lang.StringBuffer.insert(int,float)*

public |java.lang.StringBuffer| insert(
  int offset,
  float f)




*java.lang.StringBuffer.insert(int,int)*

public |java.lang.StringBuffer| insert(
  int offset,
  int i)




*java.lang.StringBuffer.insert(int,long)*

public |java.lang.StringBuffer| insert(
  int offset,
  long l)




*java.lang.StringBuffer.insert(int,Object)*

public synchronized |java.lang.StringBuffer| insert(
  int offset,
  java.lang.Object obj)




*java.lang.StringBuffer.insert(int,String)*

public synchronized |java.lang.StringBuffer| insert(
  int offset,
  java.lang.String str)




*java.lang.StringBuffer.lastIndexOf(String)*

public int lastIndexOf(java.lang.String str)




*java.lang.StringBuffer.lastIndexOf(String,int)*

public synchronized int lastIndexOf(
  java.lang.String str,
  int fromIndex)




*java.lang.StringBuffer.length()*

public synchronized int length()




*java.lang.StringBuffer.offsetByCodePoints(int,int)*

public synchronized int offsetByCodePoints(
  int index,
  int codePointOffset)




*java.lang.StringBuffer.replace(int,int,String)*

public synchronized |java.lang.StringBuffer| replace(
  int start,
  int end,
  java.lang.String str)




*java.lang.StringBuffer.reverse()*

public synchronized |java.lang.StringBuffer| reverse()




*java.lang.StringBuffer.setCharAt(int,char)*

public synchronized void setCharAt(
  int index,
  char ch)




*java.lang.StringBuffer.setLength(int)*

public synchronized void setLength(int newLength)




*java.lang.StringBuffer.subSequence(int,int)*

public synchronized |java.lang.CharSequence| subSequence(
  int start,
  int end)




*java.lang.StringBuffer.substring(int)*

public synchronized |java.lang.String| substring(int start)




*java.lang.StringBuffer.substring(int,int)*

public synchronized |java.lang.String| substring(
  int start,
  int end)




*java.lang.StringBuffer.toString()*

public synchronized |java.lang.String| toString()




*java.lang.StringBuffer.trimToSize()*

public synchronized void trimToSize()






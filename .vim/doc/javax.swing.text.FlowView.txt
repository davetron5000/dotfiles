*javax.swing.text.FlowView* *FlowView* A View that tries to flow it's children i

public abstract class FlowView
  extends    |javax.swing.text.BoxView|

|javax.swing.text.FlowView_Description|
|javax.swing.text.FlowView_Fields|
|javax.swing.text.FlowView_Constructors|
|javax.swing.text.FlowView_Methods|

================================================================================

*javax.swing.text.FlowView_Fields*
|javax.swing.text.View_javax.swing.text.FlowView.layoutPool|
|int_javax.swing.text.FlowView.layoutSpan|
|javax.swing.text.FlowView.FlowStrategy_javax.swing.text.FlowView.strategy|

*javax.swing.text.FlowView_Constructors*
|javax.swing.text.FlowView(Element,int)|Constructs a FlowView for the given ele

*javax.swing.text.FlowView_Methods*
|javax.swing.text.FlowView.calculateMinorAxisRequirements(int,SizeRequirements)|
|javax.swing.text.FlowView.changedUpdate(DocumentEvent,Shape,ViewFactory)|Gives
|javax.swing.text.FlowView.createRow()|Create a View that should be used to hol
|javax.swing.text.FlowView.getFlowAxis()|Fetches the axis along which views sho
|javax.swing.text.FlowView.getFlowSpan(int)|Fetch the constraining span to flow
|javax.swing.text.FlowView.getFlowStart(int)|Fetch the location along the flow 
|javax.swing.text.FlowView.getViewIndexAtPosition(int)|Fetches the child view i
|javax.swing.text.FlowView.insertUpdate(DocumentEvent,Shape,ViewFactory)|Gives 
|javax.swing.text.FlowView.layout(int,int)|Lays out the children.
|javax.swing.text.FlowView.loadChildren(ViewFactory)|Loads all of the children 
|javax.swing.text.FlowView.removeUpdate(DocumentEvent,Shape,ViewFactory)|Gives 
|javax.swing.text.FlowView.setParent(View)|

*javax.swing.text.FlowView_Description*

A View that tries to flow it's children into some partially constrained space. 
This can be used to build things like paragraphs, pages, etc. The flow is made 
up of the following pieces of functionality. 

A logical set of child views, which as used as a layout pool from which a 
physical view is formed. A strategy for translating the logical view to a 
physical (flowed) view. Constraints for the strategy to work against. A 
physical structure, that represents the flow. The children of this view are 
where the pieces of of the logical views are placed to create the flow. 


*javax.swing.text.View_javax.swing.text.FlowView.layoutPool*

A View that tries to flow it's children into some partially constrained space. 
This can be used to build things like paragraphs, pages, etc. The flow is made 
up of the following pieces of functionality. 

A logical set of child views, which as used as a layout pool from which a 
physical view is formed. A strategy for translating the logical view to a 
physical (flowed) view. Constraints for the strategy to work against. A 
physical structure, that represents the flow. The children of this view are 
where the pieces of of the logical views are placed to create the flow. 


*int_javax.swing.text.FlowView.layoutSpan*

A View that tries to flow it's children into some partially constrained space. 
This can be used to build things like paragraphs, pages, etc. The flow is made 
up of the following pieces of functionality. 

A logical set of child views, which as used as a layout pool from which a 
physical view is formed. A strategy for translating the logical view to a 
physical (flowed) view. Constraints for the strategy to work against. A 
physical structure, that represents the flow. The children of this view are 
where the pieces of of the logical views are placed to create the flow. 


*javax.swing.text.FlowView.FlowStrategy_javax.swing.text.FlowView.strategy*

A View that tries to flow it's children into some partially constrained space. 
This can be used to build things like paragraphs, pages, etc. The flow is made 
up of the following pieces of functionality. 

A logical set of child views, which as used as a layout pool from which a 
physical view is formed. A strategy for translating the logical view to a 
physical (flowed) view. Constraints for the strategy to work against. A 
physical structure, that represents the flow. The children of this view are 
where the pieces of of the logical views are placed to create the flow. 



*javax.swing.text.FlowView(Element,int)*

public FlowView(
  javax.swing.text.Element elem,
  int axis)

Constructs a FlowView for the given element. 

    elem - the element that this view is responsible for 
    axis - may be either View.X_AXIS or View.Y_AXIS 

*javax.swing.text.FlowView.calculateMinorAxisRequirements(int,SizeRequirements)*

protected |javax.swing.SizeRequirements| calculateMinorAxisRequirements(
  int axis,
  javax.swing.SizeRequirements r)

Calculate equirements along the minor axis. This is implemented to forward the 
request to the logical view by calling getMinimumSpan, getPreferredSpan, and 
getMaximumSpan on it. 


*javax.swing.text.FlowView.changedUpdate(DocumentEvent,Shape,ViewFactory)*

public void changedUpdate(
  javax.swing.event.DocumentEvent changes,
  java.awt.Shape a,
  javax.swing.text.ViewFactory f)

Gives notification from the document that attributes were changed in a location 
that this view is responsible for. 

    changes - the change information from the associated document 
    a - the current allocation of the view 
    f - the factory to use to rebuild if the view has children 

*javax.swing.text.FlowView.createRow()*

protected abstract |javax.swing.text.View| createRow()

Create a View that should be used to hold a a rows worth of children in a flow. 
This is called by the FlowStrategy when new children are added or removed (i.e. 
rows are added or removed) in the process of updating the flow. 


*javax.swing.text.FlowView.getFlowAxis()*

public int getFlowAxis()

Fetches the axis along which views should be flowed. By default, this will be 
the axis orthogonal to the axis along which the flow rows are tiled (the axis 
of the default flow rows themselves). This is typically used by the 
FlowStrategy. 


*javax.swing.text.FlowView.getFlowSpan(int)*

public int getFlowSpan(int index)

Fetch the constraining span to flow against for the given child index. This is 
called by the FlowStrategy while it is updating the flow. A flow can be shaped 
by providing different values for the row constraints. By default, the entire 
span inside of the insets along the flow axis is returned. 

    index - the index of the row being updated. This should be a value >= 0 and < 
       getViewCount(). 

*javax.swing.text.FlowView.getFlowStart(int)*

public int getFlowStart(int index)

Fetch the location along the flow axis that the flow span will start at. This 
is called by the FlowStrategy while it is updating the flow. A flow can be 
shaped by providing different values for the row constraints. 

    index - the index of the row being updated. This should be a value >= 0 and < 
       getViewCount(). 

*javax.swing.text.FlowView.getViewIndexAtPosition(int)*

protected int getViewIndexAtPosition(int pos)

Fetches the child view index representing the given position in the model. 

    pos - the position >= 0 

    Returns: index of the view representing the given position, or -1 if no view represents 
             that position 
*javax.swing.text.FlowView.insertUpdate(DocumentEvent,Shape,ViewFactory)*

public void insertUpdate(
  javax.swing.event.DocumentEvent changes,
  java.awt.Shape a,
  javax.swing.text.ViewFactory f)

Gives notification that something was inserted into the document in a location 
that this view is responsible for. 

    changes - the change information from the associated document 
    a - the current allocation of the view 
    f - the factory to use to rebuild if the view has children 

*javax.swing.text.FlowView.layout(int,int)*

protected void layout(
  int width,
  int height)

Lays out the children. If the span along the flow axis has changed, layout is 
marked as invalid which which will cause the superclass behavior to recalculate 
the layout along the box axis. The FlowStrategy.layout method will be called to 
rebuild the flow rows as appropriate. If the height of this view changes 
(determined by the perferred size along the box axis), a preferenceChanged is 
called. Following all of that, the normal box layout of the superclass is 
performed. 

    width - the width to lay out against >= 0. This is the width inside of the inset area. 
    height - the height to lay out against >= 0 This is the height inside of the inset area. 

*javax.swing.text.FlowView.loadChildren(ViewFactory)*

protected void loadChildren(javax.swing.text.ViewFactory f)

Loads all of the children to initialize the view. This is called by the 
setParent method. This is reimplemented to not load any children directly (as 
they are created in the process of formatting). If the layoutPool variable is 
null, an instance of LogicalView is created to represent the logical view that 
is used in the process of formatting. 

    f - the view factory 

*javax.swing.text.FlowView.removeUpdate(DocumentEvent,Shape,ViewFactory)*

public void removeUpdate(
  javax.swing.event.DocumentEvent changes,
  java.awt.Shape a,
  javax.swing.text.ViewFactory f)

Gives notification that something was removed from the document in a location 
that this view is responsible for. 

    changes - the change information from the associated document 
    a - the current allocation of the view 
    f - the factory to use to rebuild if the view has children 

*javax.swing.text.FlowView.setParent(View)*

public void setParent(javax.swing.text.View parent)






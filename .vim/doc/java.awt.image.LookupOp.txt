*java.awt.image.LookupOp* *LookupOp* This class implements a lookup operation fr

public class LookupOp
  extends    |java.lang.Object|
  implements |java.awt.image.BufferedImageOp|
             |java.awt.image.RasterOp|

|java.awt.image.LookupOp_Description|
|java.awt.image.LookupOp_Fields|
|java.awt.image.LookupOp_Constructors|
|java.awt.image.LookupOp_Methods|

================================================================================

*java.awt.image.LookupOp_Constructors*
|java.awt.image.LookupOp(LookupTable,RenderingHints)|Constructs a LookupOp obje

*java.awt.image.LookupOp_Methods*
|java.awt.image.LookupOp.createCompatibleDestImage(BufferedImage,ColorModel)|Cr
|java.awt.image.LookupOp.createCompatibleDestRaster(Raster)|Creates a zeroed-de
|java.awt.image.LookupOp.filter(BufferedImage,BufferedImage)|Performs a lookup 
|java.awt.image.LookupOp.filter(Raster,WritableRaster)|Performs a lookup operat
|java.awt.image.LookupOp.getBounds2D(BufferedImage)|Returns the bounding box of
|java.awt.image.LookupOp.getBounds2D(Raster)|Returns the bounding box of the fi
|java.awt.image.LookupOp.getPoint2D(Point2D,Point2D)|Returns the location of th
|java.awt.image.LookupOp.getRenderingHints()|Returns the rendering hints for th
|java.awt.image.LookupOp.getTable()|Returns the LookupTable.

*java.awt.image.LookupOp_Description*

This class implements a lookup operation from the source to the destination. 
The LookupTable object may contain a single array or multiple arrays, subject 
to the restrictions below. 

For Rasters, the lookup operates on bands. The number of lookup arrays may be 
one, in which case the same array is applied to all bands, or it must equal the 
number of Source Raster bands. 

For BufferedImages, the lookup operates on color and alpha components. The 
number of lookup arrays may be one, in which case the same array is applied to 
all color (but not alpha) components. Otherwise, the number of lookup arrays 
may equal the number of Source color components, in which case no lookup of the 
alpha component (if present) is performed. If neither of these cases apply, the 
number of lookup arrays must equal the number of Source color components plus 
alpha components, in which case lookup is performed for all color and alpha 
components. This allows non-uniform rescaling of multi-band BufferedImages. 

BufferedImage sources with premultiplied alpha data are treated in the same 
manner as non-premultiplied images for purposes of the lookup. That is, the 
lookup is done per band on the raw data of the BufferedImage source without 
regard to whether the data is premultiplied. If a color conversion is required 
to the destination ColorModel, the premultiplied state of both source and 
destination will be taken into account for this step. 

Images with an IndexColorModel cannot be used. 

If a RenderingHints object is specified in the constructor, the color rendering 
hint and the dithering hint may be used when color conversion is required. 

This class allows the Source to be the same as the Destination. 


*java.awt.image.LookupOp(LookupTable,RenderingHints)*

public LookupOp(
  java.awt.image.LookupTable lookup,
  java.awt.RenderingHints hints)

Constructs a LookupOp object given the lookup table and a RenderingHints 
object, which might be null. 

    lookup - the specified LookupTable 
    hints - the specified RenderingHints, or null 

*java.awt.image.LookupOp.createCompatibleDestImage(BufferedImage,ColorModel)*

public |java.awt.image.BufferedImage| createCompatibleDestImage(
  java.awt.image.BufferedImage src,
  java.awt.image.ColorModel destCM)

Creates a zeroed destination image with the correct size and number of bands. 
If destCM is null, an appropriate ColorModel will be used. 

    src - Source image for the filter operation. 
    destCM - the destination's ColorModel, which can be null. 

    Returns: a filtered destination BufferedImage. 
*java.awt.image.LookupOp.createCompatibleDestRaster(Raster)*

public |java.awt.image.WritableRaster| createCompatibleDestRaster(java.awt.image.Raster src)

Creates a zeroed-destination Raster with the correct size and number of bands, 
given this source. 

    src - the Raster to be transformed 

    Returns: the zeroed-destination Raster. 
*java.awt.image.LookupOp.filter(BufferedImage,BufferedImage)*

public final |java.awt.image.BufferedImage| filter(
  java.awt.image.BufferedImage src,
  java.awt.image.BufferedImage dst)

Performs a lookup operation on a BufferedImage. If the color model in the 
source image is not the same as that in the destination image, the pixels will 
be converted in the destination. If the destination image is null, a 
BufferedImage will be created with an appropriate ColorModel. An 
IllegalArgumentException might be thrown if the number of arrays in the 
LookupTable does not meet the restrictions stated in the class comment above, 
or if the source image has an IndexColorModel. 

    src - the BufferedImage to be filtered 
    dst - the BufferedImage in which to store the results of the filter operation 

    Returns: the filtered BufferedImage. 
*java.awt.image.LookupOp.filter(Raster,WritableRaster)*

public final |java.awt.image.WritableRaster| filter(
  java.awt.image.Raster src,
  java.awt.image.WritableRaster dst)

Performs a lookup operation on a Raster. If the destination Raster is null, a 
new Raster will be created. The IllegalArgumentException might be thrown if the 
source Raster and the destination Raster do not have the same number of bands 
or if the number of arrays in the LookupTable does not meet the restrictions 
stated in the class comment above. 

    src - the source Raster to filter 
    dst - the destination WritableRaster for the filtered src 

    Returns: the filtered WritableRaster. 
*java.awt.image.LookupOp.getBounds2D(BufferedImage)*

public final |java.awt.geom.Rectangle2D| getBounds2D(java.awt.image.BufferedImage src)

Returns the bounding box of the filtered destination image. Since this is not a 
geometric operation, the bounding box does not change. 

    src - the BufferedImage to be filtered 

    Returns: the bounds of the filtered definition image. 
*java.awt.image.LookupOp.getBounds2D(Raster)*

public final |java.awt.geom.Rectangle2D| getBounds2D(java.awt.image.Raster src)

Returns the bounding box of the filtered destination Raster. Since this is not 
a geometric operation, the bounding box does not change. 

    src - the Raster to be filtered 

    Returns: the bounds of the filtered definition Raster. 
*java.awt.image.LookupOp.getPoint2D(Point2D,Point2D)*

public final |java.awt.geom.Point2D| getPoint2D(
  java.awt.geom.Point2D srcPt,
  java.awt.geom.Point2D dstPt)

Returns the location of the destination point given a point in the source. If 
dstPt is not null, it will be used to hold the return value. Since this is not 
a geometric operation, the srcPt will equal the dstPt. 

    srcPt - a Point2D that represents a point in the source image 
    dstPt - a Point2Dthat represents the location in the destination 

    Returns: the Point2D in the destination that corresponds to the specified point in the 
             source. 
*java.awt.image.LookupOp.getRenderingHints()*

public final |java.awt.RenderingHints| getRenderingHints()

Returns the rendering hints for this op. 


    Returns: the RenderingHints object associated with this op. 
*java.awt.image.LookupOp.getTable()*

public final |java.awt.image.LookupTable| getTable()

Returns the LookupTable. 


    Returns: the LookupTable of this LookupOp. 


*java.util.TimeZone* *TimeZone* TimeZone represents a time zone offset, and also

public abstract class TimeZone
  extends    |java.lang.Object|
  implements |java.io.Serializable|
             |java.lang.Cloneable|

|java.util.TimeZone_Description|
|java.util.TimeZone_Fields|
|java.util.TimeZone_Constructors|
|java.util.TimeZone_Methods|

================================================================================

*java.util.TimeZone_Fields*
|int_java.util.TimeZone.LONG|
|int_java.util.TimeZone.SHORT|

*java.util.TimeZone_Constructors*
|java.util.TimeZone()|Sole constructor.

*java.util.TimeZone_Methods*
|java.util.TimeZone.clone()|Creates a copy of this TimeZone.
|java.util.TimeZone.getAvailableIDs()|Gets all the available IDs supported.
|java.util.TimeZone.getAvailableIDs(int)|Gets the available IDs according to th
|java.util.TimeZone.getDefault()|Gets the default TimeZone for this host.
|java.util.TimeZone.getDisplayName()|Returns a name of this time zone suitable 
|java.util.TimeZone.getDisplayName(boolean,int)|Returns a name of this time zon
|java.util.TimeZone.getDisplayName(boolean,int,Locale)|Returns a name of this t
|java.util.TimeZone.getDisplayName(Locale)|Returns a name of this time zone sui
|java.util.TimeZone.getDSTSavings()|Returns the amount of time to be added to l
|java.util.TimeZone.getID()|Gets the ID of this time zone.
|java.util.TimeZone.getOffset(int,int,int,int,int,int)|Gets the time zone offse
|java.util.TimeZone.getOffset(long)|Returns the offset of this time zone from U
|java.util.TimeZone.getRawOffset()|Returns the amount of time in milliseconds t
|java.util.TimeZone.getTimeZone(String)|Gets the TimeZone for the given ID.
|java.util.TimeZone.hasSameRules(TimeZone)|Returns true if this zone has the sa
|java.util.TimeZone.inDaylightTime(Date)|Queries if the given date is in daylig
|java.util.TimeZone.setDefault(TimeZone)|Sets the TimeZone that is  returned by
|java.util.TimeZone.setID(String)|Sets the time zone ID.
|java.util.TimeZone.setRawOffset(int)|Sets the base time zone offset to GMT.
|java.util.TimeZone.useDaylightTime()|Queries if this time zone uses daylight s

*java.util.TimeZone_Description*

TimeZone represents a time zone offset, and also figures out daylight savings. 

Typically, you get a TimeZone using getDefault which creates a TimeZone based 
on the time zone where the program is running. For example, for a program 
running in Japan, getDefault creates a TimeZone object based on Japanese 
Standard Time. 

You can also get a TimeZone using getTimeZone along with a time zone ID. For 
instance, the time zone ID for the U.S. Pacific Time zone is 
"America/Los_Angeles". So, you can get a U.S. Pacific Time TimeZone object 
with: 

TimeZone tz = TimeZone.getTimeZone("America/Los_Angeles"); 

You can use the getAvailableIDs method to iterate through all the supported 
time zone IDs. You can then choose a supported ID to get a TimeZone. If the 
time zone you want is not represented by one of the supported IDs, then a 
custom time zone ID can be specified to produce a TimeZone. The syntax of a 
custom time zone ID is: 



CustomID: GMT Sign Hours : Minutes GMT Sign Hours Minutes GMT Sign Hours Sign: 
one of + - Hours: Digit Digit Digit Minutes: Digit Digit Digit: one of 0 1 2 3 
4 5 6 7 8 9 

Hours must be between 0 to 23 and Minutes must be between 00 to 59. For 
example, "GMT+10" and "GMT+0010" mean ten hours and ten minutes ahead of GMT, 
respectively. 

The format is locale independent and digits must be taken from the Basic Latin 
block of the Unicode standard. No daylight saving time transition schedule can 
be specified with a custom time zone ID. If the specified string doesn't match 
the syntax, "GMT" is used. 

When creating a TimeZone, the specified custom time zone ID is normalized in 
the following syntax: 

NormalizedCustomID: GMT Sign TwoDigitHours : Minutes Sign: one of + - 
TwoDigitHours: Digit Digit Minutes: Digit Digit Digit: one of 0 1 2 3 4 5 6 7 8 
9 

For example, TimeZone.getTimeZone("GMT-8").getID() returns "GMT-08:00". 

Three-letter time zone IDs 

For compatibility with JDK 1.1.x, some other three-letter time zone IDs (such 
as "PST", "CTT", "AST") are also supported. However, their use is deprecated 
because the same abbreviation is often used for multiple time zones (for 
example, "CST" could be U.S. "Central Standard Time" and "China Standard 
Time"), and the Java platform can then only recognize one of them. 


*int_java.util.TimeZone.LONG*

TimeZone represents a time zone offset, and also figures out daylight savings. 

Typically, you get a TimeZone using getDefault which creates a TimeZone based 
on the time zone where the program is running. For example, for a program 
running in Japan, getDefault creates a TimeZone object based on Japanese 
Standard Time. 

You can also get a TimeZone using getTimeZone along with a time zone ID. For 
instance, the time zone ID for the U.S. Pacific Time zone is 
"America/Los_Angeles". So, you can get a U.S. Pacific Time TimeZone object 
with: 

TimeZone tz = TimeZone.getTimeZone("America/Los_Angeles"); 

You can use the getAvailableIDs method to iterate through all the supported 
time zone IDs. You can then choose a supported ID to get a TimeZone. If the 
time zone you want is not represented by one of the supported IDs, then a 
custom time zone ID can be specified to produce a TimeZone. The syntax of a 
custom time zone ID is: 



CustomID: GMT Sign Hours : Minutes GMT Sign Hours Minutes GMT Sign Hours Sign: 
one of + - Hours: Digit Digit Digit Minutes: Digit Digit Digit: one of 0 1 2 3 
4 5 6 7 8 9 

Hours must be between 0 to 23 and Minutes must be between 00 to 59. For 
example, "GMT+10" and "GMT+0010" mean ten hours and ten minutes ahead of GMT, 
respectively. 

The format is locale independent and digits must be taken from the Basic Latin 
block of the Unicode standard. No daylight saving time transition schedule can 
be specified with a custom time zone ID. If the specified string doesn't match 
the syntax, "GMT" is used. 

When creating a TimeZone, the specified custom time zone ID is normalized in 
the following syntax: 

NormalizedCustomID: GMT Sign TwoDigitHours : Minutes Sign: one of + - 
TwoDigitHours: Digit Digit Minutes: Digit Digit Digit: one of 0 1 2 3 4 5 6 7 8 
9 

For example, TimeZone.getTimeZone("GMT-8").getID() returns "GMT-08:00". 

Three-letter time zone IDs 

For compatibility with JDK 1.1.x, some other three-letter time zone IDs (such 
as "PST", "CTT", "AST") are also supported. However, their use is deprecated 
because the same abbreviation is often used for multiple time zones (for 
example, "CST" could be U.S. "Central Standard Time" and "China Standard 
Time"), and the Java platform can then only recognize one of them. 


*int_java.util.TimeZone.SHORT*

TimeZone represents a time zone offset, and also figures out daylight savings. 

Typically, you get a TimeZone using getDefault which creates a TimeZone based 
on the time zone where the program is running. For example, for a program 
running in Japan, getDefault creates a TimeZone object based on Japanese 
Standard Time. 

You can also get a TimeZone using getTimeZone along with a time zone ID. For 
instance, the time zone ID for the U.S. Pacific Time zone is 
"America/Los_Angeles". So, you can get a U.S. Pacific Time TimeZone object 
with: 

TimeZone tz = TimeZone.getTimeZone("America/Los_Angeles"); 

You can use the getAvailableIDs method to iterate through all the supported 
time zone IDs. You can then choose a supported ID to get a TimeZone. If the 
time zone you want is not represented by one of the supported IDs, then a 
custom time zone ID can be specified to produce a TimeZone. The syntax of a 
custom time zone ID is: 



CustomID: GMT Sign Hours : Minutes GMT Sign Hours Minutes GMT Sign Hours Sign: 
one of + - Hours: Digit Digit Digit Minutes: Digit Digit Digit: one of 0 1 2 3 
4 5 6 7 8 9 

Hours must be between 0 to 23 and Minutes must be between 00 to 59. For 
example, "GMT+10" and "GMT+0010" mean ten hours and ten minutes ahead of GMT, 
respectively. 

The format is locale independent and digits must be taken from the Basic Latin 
block of the Unicode standard. No daylight saving time transition schedule can 
be specified with a custom time zone ID. If the specified string doesn't match 
the syntax, "GMT" is used. 

When creating a TimeZone, the specified custom time zone ID is normalized in 
the following syntax: 

NormalizedCustomID: GMT Sign TwoDigitHours : Minutes Sign: one of + - 
TwoDigitHours: Digit Digit Minutes: Digit Digit Digit: one of 0 1 2 3 4 5 6 7 8 
9 

For example, TimeZone.getTimeZone("GMT-8").getID() returns "GMT-08:00". 

Three-letter time zone IDs 

For compatibility with JDK 1.1.x, some other three-letter time zone IDs (such 
as "PST", "CTT", "AST") are also supported. However, their use is deprecated 
because the same abbreviation is often used for multiple time zones (for 
example, "CST" could be U.S. "Central Standard Time" and "China Standard 
Time"), and the Java platform can then only recognize one of them. 



*java.util.TimeZone()*

public TimeZone()

Sole constructor. (For invocation by subclass constructors, typically 
implicit.) 


*java.util.TimeZone.clone()*

public |java.lang.Object| clone()

Creates a copy of this TimeZone. 


    Returns: a clone of this TimeZone 
*java.util.TimeZone.getAvailableIDs()*

public static synchronized |java.lang.String| getAvailableIDs()

Gets all the available IDs supported. 


    Returns: an array of IDs. 
*java.util.TimeZone.getAvailableIDs(int)*

public static synchronized |java.lang.String| getAvailableIDs(int rawOffset)

Gets the available IDs according to the given time zone offset. 

    rawOffset - the given time zone GMT offset. 

    Returns: an array of IDs, where the time zone for that ID has the specified GMT offset. 
             For example, "America/Phoenix" and "America/Denver" both have 
             GMT-07:00, but differ in daylight savings behavior. 
*java.util.TimeZone.getDefault()*

public static synchronized |java.util.TimeZone| getDefault()

Gets the default TimeZone for this host. The source of the default TimeZone may 
vary with implementation. 


    Returns: a default TimeZone. 
*java.util.TimeZone.getDisplayName()*

public final |java.lang.String| getDisplayName()

Returns a name of this time zone suitable for presentation to the user in the 
default locale. This method returns the long name, not including daylight 
savings. If the display name is not available for the locale, then this method 
returns a string in the normalized custom ID format. 


    Returns: the human-readable name of this time zone in the default locale. 
*java.util.TimeZone.getDisplayName(boolean,int)*

public final |java.lang.String| getDisplayName(
  boolean daylight,
  int style)

Returns a name of this time zone suitable for presentation to the user in the 
default locale. If the display name is not available for the locale, then this 
method returns a string in the normalized custom ID format. 

    daylight - if true, return the daylight savings name. 
    style - either LONG or SHORT 

    Returns: the human-readable name of this time zone in the default locale. 
*java.util.TimeZone.getDisplayName(boolean,int,Locale)*

public |java.lang.String| getDisplayName(
  boolean daylight,
  int style,
  java.util.Locale locale)

Returns a name of this time zone suitable for presentation to the user in the 
specified locale. If the display name is not available for the locale, then 
this method returns a string in the normalized custom ID format. 

    daylight - if true, return the daylight savings name. 
    style - either LONG or SHORT 
    locale - the locale in which to supply the display name. 

    Returns: the human-readable name of this time zone in the given locale or in the default 
             locale if the given locale is not recognized. 
*java.util.TimeZone.getDisplayName(Locale)*

public final |java.lang.String| getDisplayName(java.util.Locale locale)

Returns a name of this time zone suitable for presentation to the user in the 
specified locale. This method returns the long name, not including daylight 
savings. If the display name is not available for the locale, then this method 
returns a string in the normalized custom ID format. 

    locale - the locale in which to supply the display name. 

    Returns: the human-readable name of this time zone in the given locale or in the default 
             locale if the given locale is not recognized. 
*java.util.TimeZone.getDSTSavings()*

public int getDSTSavings()

Returns the amount of time to be added to local standard time to get local wall 
clock time. 

The default implementation always returns 3600000 milliseconds (i.e., one hour) 
if this time zone observes Daylight Saving Time. Otherwise, 0 (zero) is 
returned. 

If an underlying TimeZone implementation subclass supports historical Daylight 
Saving Time changes, this method returns the known latest daylight saving 
value. 


    Returns: the amount of saving time in milliseconds 
*java.util.TimeZone.getID()*

public |java.lang.String| getID()

Gets the ID of this time zone. 


    Returns: the ID of this time zone. 
*java.util.TimeZone.getOffset(int,int,int,int,int,int)*

public abstract int getOffset(
  int era,
  int year,
  int month,
  int day,
  int dayOfWeek,
  int milliseconds)

Gets the time zone offset, for current date, modified in case of daylight 
savings. This is the offset to add to UTC to get local time. 

This method returns a historically correct offset if an underlying TimeZone 
implementation subclass supports historical Daylight Saving Time schedule and 
GMT offset changes. 

    era - the era of the given date. 
    year - the year in the given date. 
    month - the month in the given date. Month is 0-based. e.g., 0 for January. 
    day - the day-in-month of the given date. 
    dayOfWeek - the day-of-week of the given date. 
    milliseconds - the milliseconds in day in standard local time. 

    Returns: the offset in milliseconds to add to GMT to get local time. 
*java.util.TimeZone.getOffset(long)*

public int getOffset(long date)

Returns the offset of this time zone from UTC at the specified date. If 
Daylight Saving Time is in effect at the specified date, the offset value is 
adjusted with the amount of daylight saving. 

This method returns a historically correct offset value if an underlying 
TimeZone implementation subclass supports historical Daylight Saving Time 
schedule and GMT offset changes. 

    date - the date represented in milliseconds since January 1, 1970 00:00:00 GMT 

    Returns: the amount of time in milliseconds to add to UTC to get local time. 
*java.util.TimeZone.getRawOffset()*

public abstract int getRawOffset()

Returns the amount of time in milliseconds to add to UTC to get standard time 
in this time zone. Because this value is not affected by daylight saving time, 
it is called raw offset. 

If an underlying TimeZone implementation subclass supports historical GMT 
offset changes, the method returns the raw offset value of the current date. In 
Honolulu, for example, its raw offset changed from GMT-10:30 to GMT-10:00 in 
1947, and this method always returns -36000000 milliseconds (i.e., -10 hours). 


    Returns: the amount of raw offset time in milliseconds to add to UTC. 
*java.util.TimeZone.getTimeZone(String)*

public static synchronized |java.util.TimeZone| getTimeZone(java.lang.String ID)

Gets the TimeZone for the given ID. 

    ID - the ID for a TimeZone, either an abbreviation such as "PST", a full name such 
       as "America/Los_Angeles", or a custom ID such as "GMT-8:00". Note that 
       the support of abbreviations is for JDK 1.1.x compatibility only and 
       full names should be used. 

    Returns: the specified TimeZone, or the GMT zone if the given ID cannot be understood. 
*java.util.TimeZone.hasSameRules(TimeZone)*

public boolean hasSameRules(java.util.TimeZone other)

Returns true if this zone has the same rule and offset as another zone. That 
is, if this zone differs only in ID, if at all. Returns false if the other zone 
is null. 

    other - the TimeZone object to be compared with 

    Returns: true if the other zone is not null and is the same as this one, with the 
             possible exception of the ID 
*java.util.TimeZone.inDaylightTime(Date)*

public abstract boolean inDaylightTime(java.util.Date date)

Queries if the given date is in daylight savings time in this time zone. 

    date - the given Date. 

    Returns: true if the given date is in daylight savings time, false, otherwise. 
*java.util.TimeZone.setDefault(TimeZone)*

public static synchronized void setDefault(java.util.TimeZone zone)

Sets the TimeZone that is returned by the getDefault method. If zone is null, 
reset the default to the value it had originally when the VM first started. 

    zone - the new default time zone 

*java.util.TimeZone.setID(String)*

public void setID(java.lang.String ID)

Sets the time zone ID. This does not change any other data in the time zone 
object. 

    ID - the new time zone ID. 

*java.util.TimeZone.setRawOffset(int)*

public abstract void setRawOffset(int offsetMillis)

Sets the base time zone offset to GMT. This is the offset to add to UTC to get 
local time. 

If an underlying TimeZone implementation subclass supports historical GMT 
offset changes, the specified GMT offset is set as the latest GMT offset and 
the difference from the known latest GMT offset value is used to adjust all 
historical GMT offset values. 

    offsetMillis - the given base time zone offset to GMT. 

*java.util.TimeZone.useDaylightTime()*

public abstract boolean useDaylightTime()

Queries if this time zone uses daylight savings time. 

If an underlying TimeZone implementation subclass supports historical Daylight 
Saving Time schedule changes, the method refers to the latest Daylight Saving 
Time schedule information. 


    Returns: true if this time zone uses daylight savings time, false, otherwise. 


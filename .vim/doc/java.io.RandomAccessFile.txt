*java.io.RandomAccessFile* *RandomAccessFile* Instances of this class support bo

public class RandomAccessFile
  extends    |java.lang.Object|
  implements |java.io.DataOutput|
             |java.io.DataInput|
             |java.io.Closeable|

|java.io.RandomAccessFile_Description|
|java.io.RandomAccessFile_Fields|
|java.io.RandomAccessFile_Constructors|
|java.io.RandomAccessFile_Methods|

================================================================================

*java.io.RandomAccessFile_Constructors*
|java.io.RandomAccessFile(File,String)|Creates a random access file stream to r
|java.io.RandomAccessFile(String,String)|Creates a random access file stream to

*java.io.RandomAccessFile_Methods*
|java.io.RandomAccessFile.close()|Closes this random access file stream and rel
|java.io.RandomAccessFile.getChannel()|Returns the uniquejava.nio.channels.File
|java.io.RandomAccessFile.getFD()|Returns the opaque file descriptor object ass
|java.io.RandomAccessFile.getFilePointer()|Returns the current offset in this f
|java.io.RandomAccessFile.length()|Returns the length of this file.
|java.io.RandomAccessFile.read()|Reads a byte of data from this file.
|java.io.RandomAccessFile.read(byte[])|Reads up to b.length bytes of data from 
|java.io.RandomAccessFile.read(byte[],int,int)|Reads up to len bytes of data fr
|java.io.RandomAccessFile.readBoolean()|Reads a boolean from this file.
|java.io.RandomAccessFile.readByte()|Reads a signed eight-bit value from this f
|java.io.RandomAccessFile.readChar()|Reads a Unicode character from this file.
|java.io.RandomAccessFile.readDouble()|Reads a double from this file.
|java.io.RandomAccessFile.readFloat()|Reads a float from this file.
|java.io.RandomAccessFile.readFully(byte[])|Reads b.length bytes from this file
|java.io.RandomAccessFile.readFully(byte[],int,int)|Reads exactly len bytes fro
|java.io.RandomAccessFile.readInt()|Reads a signed 32-bit integer from this fil
|java.io.RandomAccessFile.readLine()|Reads the next line of text from this file
|java.io.RandomAccessFile.readLong()|Reads a signed 64-bit integer from this fi
|java.io.RandomAccessFile.readShort()|Reads a signed 16-bit number from this fi
|java.io.RandomAccessFile.readUnsignedByte()|Reads an unsigned eight-bit number
|java.io.RandomAccessFile.readUnsignedShort()|Reads an unsigned 16-bit number f
|java.io.RandomAccessFile.readUTF()|Reads in a string from this file.
|java.io.RandomAccessFile.seek(long)|Sets the file-pointer offset, measured fro
|java.io.RandomAccessFile.setLength(long)|Sets the length of this file.
|java.io.RandomAccessFile.skipBytes(int)|Attempts to skip over n bytes of input
|java.io.RandomAccessFile.write(byte[])|Writes b.length bytes from the specifie
|java.io.RandomAccessFile.write(byte[],int,int)|Writes len bytes from the speci
|java.io.RandomAccessFile.write(int)|Writes the specified byte to this file.
|java.io.RandomAccessFile.writeBoolean(boolean)|Writes a boolean to the file as
|java.io.RandomAccessFile.writeByte(int)|Writes a byte to the file as a one-byt
|java.io.RandomAccessFile.writeBytes(String)|Writes the string to the file as a
|java.io.RandomAccessFile.writeChar(int)|Writes a char to the file as a two-byt
|java.io.RandomAccessFile.writeChars(String)|Writes a string to the file as a s
|java.io.RandomAccessFile.writeDouble(double)|Converts the double argument to a
|java.io.RandomAccessFile.writeFloat(float)|Converts the float argument to an i
|java.io.RandomAccessFile.writeInt(int)|Writes an int to the file as four bytes
|java.io.RandomAccessFile.writeLong(long)|Writes a long to the file as eight by
|java.io.RandomAccessFile.writeShort(int)|Writes a short to the file as two byt
|java.io.RandomAccessFile.writeUTF(String)|Writes a string to the file using  m

*java.io.RandomAccessFile_Description*

Instances of this class support both reading and writing to a random access 
file. A random access file behaves like a large array of bytes stored in the 
file system. There is a kind of cursor, or index into the implied array, called 
the file pointer; input operations read bytes starting at the file pointer and 
advance the file pointer past the bytes read. If the random access file is 
created in read/write mode, then output operations are also available; output 
operations write bytes starting at the file pointer and advance the file 
pointer past the bytes written. Output operations that write past the current 
end of the implied array cause the array to be extended. The file pointer can 
be read by the getFilePointer method and set by the seek method. 

It is generally true of all the reading routines in this class that if 
end-of-file is reached before the desired number of bytes has been read, an 
EOFException (which is a kind of IOException) is thrown. If any byte cannot be 
read for any reason other than end-of-file, an IOException other than 
EOFException is thrown. In particular, an IOException may be thrown if the 
stream has been closed. 


*java.io.RandomAccessFile(File,String)*

public RandomAccessFile(
  java.io.File file,
  java.lang.String mode)
  throws |java.io.FileNotFoundException|
         
Creates a random access file stream to read from, and optionally to write to, 
the file specified by the (|java.io.File|) argument. A new (|FileDescriptor|) 
object is created to represent this file connection. 

The mode argument specifies the access mode in which the file is to be opened. 
The permitted values and their meanings are: 

ValueMeaning "r" Open for reading only. Invoking any of the write methods of 
the resulting object will cause an (|java.io.IOException|) to be thrown. "rw" 
Open for reading and writing. If the file does not already exist then an 
attempt will be made to create it. "rws" Open for reading and writing, as with 
"rw", and also require that every update to the file's content or metadata be 
written synchronously to the underlying storage device. "rwd" Open for reading 
and writing, as with "rw", and also require that every update to the file's 
content be written synchronously to the underlying storage device. 

The "rws" and "rwd" modes work much like the 
force(boolean)(|java.nio.channels.FileChannel|) method of the 
(|java.nio.channels.FileChannel|) class, passing arguments of true and false, 
respectively, except that they always apply to every I/O operation and are 
therefore often more efficient. If the file resides on a local storage device 
then when an invocation of a method of this class returns it is guaranteed that 
all changes made to the file by that invocation will have been written to that 
device. This is useful for ensuring that critical information is not lost in 
the event of a system crash. If the file does not reside on a local device then 
no such guarantee is made. 

The "rwd" mode can be used to reduce the number of I/O operations performed. 
Using "rwd" only requires updates to the file's content to be written to 
storage; using "rws" requires updates to both the file's content and its 
metadata to be written, which generally requires at least one more low-level 
I/O operation. 

If there is a security manager, its checkRead method is called with the 
pathname of the file argument as its argument to see if read access to the file 
is allowed. If the mode allows writing, the security manager's checkWrite 
method is also called with the path argument to see if write access to the file 
is allowed. 

    file - the file object 
    mode - the access mode, as described above 

*java.io.RandomAccessFile(String,String)*

public RandomAccessFile(
  java.lang.String name,
  java.lang.String mode)
  throws |java.io.FileNotFoundException|
         
Creates a random access file stream to read from, and optionally to write to, a 
file with the specified name. A new (|FileDescriptor|) object is created to 
represent the connection to the file. 

The mode argument specifies the access mode with which the file is to be 
opened. The permitted values and their meanings are as specified for the 
RandomAccessFile(File,String) constructor. 

If there is a security manager, its checkRead method is called with the name 
argument as its argument to see if read access to the file is allowed. If the 
mode allows writing, the security manager's checkWrite method is also called 
with the name argument as its argument to see if write access to the file is 
allowed. 

    name - the system-dependent filename 
    mode - the access mode 

*java.io.RandomAccessFile.close()*

public void close()
  throws |java.io.IOException|
         
Closes this random access file stream and releases any system resources 
associated with the stream. A closed random access file cannot perform input or 
output operations and cannot be reopened. 

If this file has an associated channel then the channel is closed as well. 


*java.io.RandomAccessFile.getChannel()*

public final |java.nio.channels.FileChannel| getChannel()

Returns the unique FileChannel(|java.nio.channels.FileChannel|) object 
associated with this file. 

The </code>position<code>(|java.nio.channels.FileChannel|) of the returned 
channel will always be equal to this object's file-pointer offset as returned 
by the getFilePointer(|java.io.RandomAccessFile|) method. Changing this 
object's file-pointer offset, whether explicitly or by reading or writing 
bytes, will change the position of the channel, and vice versa. Changing the 
file's length via this object will change the length seen via the file channel, 
and vice versa. 


    Returns: the file channel associated with this file 
*java.io.RandomAccessFile.getFD()*

public final |java.io.FileDescriptor| getFD()
  throws |java.io.IOException|
         
Returns the opaque file descriptor object associated with this stream. 


    Returns: the file descriptor object associated with this stream. 
*java.io.RandomAccessFile.getFilePointer()*

public native long getFilePointer()
  throws |java.io.IOException|
         
Returns the current offset in this file. 


    Returns: the offset from the beginning of the file, in bytes, at which the next read or 
             write occurs. 
*java.io.RandomAccessFile.length()*

public native long length()
  throws |java.io.IOException|
         
Returns the length of this file. 


    Returns: the length of this file, measured in bytes. 
*java.io.RandomAccessFile.read()*

public native int read()
  throws |java.io.IOException|
         
Reads a byte of data from this file. The byte is returned as an integer in the 
range 0 to 255 (0x00-0x0ff). This method blocks if no input is yet available. 

Although RandomAccessFile is not a subclass of InputStream, this method behaves 
in exactly the same way as the (|java.io.InputStream|) method of InputStream. 


    Returns: the next byte of data, or -1 if the end of the file has been reached. 
*java.io.RandomAccessFile.read(byte[])*

public int read(byte[] b)
  throws |java.io.IOException|
         
Reads up to b.length bytes of data from this file into an array of bytes. This 
method blocks until at least one byte of input is available. 

Although RandomAccessFile is not a subclass of InputStream, this method behaves 
in exactly the same way as the (|java.io.InputStream|) method of InputStream. 

    b - the buffer into which the data is read. 

    Returns: the total number of bytes read into the buffer, or -1 if there is no more data 
             because the end of this file has been reached. 
*java.io.RandomAccessFile.read(byte[],int,int)*

public int read(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Reads up to len bytes of data from this file into an array of bytes. This 
method blocks until at least one byte of input is available. 

Although RandomAccessFile is not a subclass of InputStream, this method behaves 
in exactly the same way as the (|java.io.InputStream|) method of InputStream. 

    b - the buffer into which the data is read. 
    off - the start offset of the data. 
    len - the maximum number of bytes read. 

    Returns: the total number of bytes read into the buffer, or -1 if there is no more data 
             because the end of the file has been reached. 
*java.io.RandomAccessFile.readBoolean()*

public final boolean readBoolean()
  throws |java.io.IOException|
         
Reads a boolean from this file. This method reads a single byte from the file, 
starting at the current file pointer. A value of 0 represents false. Any other 
value represents true. This method blocks until the byte is read, the end of 
the stream is detected, or an exception is thrown. 


    Returns: the boolean value read. 
*java.io.RandomAccessFile.readByte()*

public final byte readByte()
  throws |java.io.IOException|
         
Reads a signed eight-bit value from this file. This method reads a byte from 
the file, starting from the current file pointer. If the byte read is b, where 
0<=b<=255, then the result is: 

(byte)(b) 

This method blocks until the byte is read, the end of the stream is detected, 
or an exception is thrown. 


    Returns: the next byte of this file as a signed eight-bit byte. 
*java.io.RandomAccessFile.readChar()*

public final char readChar()
  throws |java.io.IOException|
         
Reads a Unicode character from this file. This method reads two bytes from the 
file, starting at the current file pointer. If the bytes read, in order, are b1 
and b2, where 0<=b1,b2<=255, then the result is equal to: 

(char)((b1 << 8) | b2) 

This method blocks until the two bytes are read, the end of the stream is 
detected, or an exception is thrown. 


    Returns: the next two bytes of this file as a Unicode character. 
*java.io.RandomAccessFile.readDouble()*

public final double readDouble()
  throws |java.io.IOException|
         
Reads a double from this file. This method reads a long value, starting at the 
current file pointer, as if by the readLong method and then converts that long 
to a double using the longBitsToDouble method in class Double. 

This method blocks until the eight bytes are read, the end of the stream is 
detected, or an exception is thrown. 


    Returns: the next eight bytes of this file, interpreted as a double. 
*java.io.RandomAccessFile.readFloat()*

public final float readFloat()
  throws |java.io.IOException|
         
Reads a float from this file. This method reads an int value, starting at the 
current file pointer, as if by the readInt method and then converts that int to 
a float using the intBitsToFloat method in class Float. 

This method blocks until the four bytes are read, the end of the stream is 
detected, or an exception is thrown. 


    Returns: the next four bytes of this file, interpreted as a float. 
*java.io.RandomAccessFile.readFully(byte[])*

public final void readFully(byte[] b)
  throws |java.io.IOException|
         
Reads b.length bytes from this file into the byte array, starting at the 
current file pointer. This method reads repeatedly from the file until the 
requested number of bytes are read. This method blocks until the requested 
number of bytes are read, the end of the stream is detected, or an exception is 
thrown. 

    b - the buffer into which the data is read. 

*java.io.RandomAccessFile.readFully(byte[],int,int)*

public final void readFully(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Reads exactly len bytes from this file into the byte array, starting at the 
current file pointer. This method reads repeatedly from the file until the 
requested number of bytes are read. This method blocks until the requested 
number of bytes are read, the end of the stream is detected, or an exception is 
thrown. 

    b - the buffer into which the data is read. 
    off - the start offset of the data. 
    len - the number of bytes to read. 

*java.io.RandomAccessFile.readInt()*

public final int readInt()
  throws |java.io.IOException|
         
Reads a signed 32-bit integer from this file. This method reads 4 bytes from 
the file, starting at the current file pointer. If the bytes read, in order, 
are b1, b2, b3, and b4, where 0<=b1, b2, b3, b4<=255, then the result is equal 
to: 

(b1 << 24) | (b2 << 16) + (b3 << 8) + b4 

This method blocks until the four bytes are read, the end of the stream is 
detected, or an exception is thrown. 


    Returns: the next four bytes of this file, interpreted as an int. 
*java.io.RandomAccessFile.readLine()*

public final |java.lang.String| readLine()
  throws |java.io.IOException|
         
Reads the next line of text from this file. This method successively reads 
bytes from the file, starting at the current file pointer, until it reaches a 
line terminator or the end of the file. Each byte is converted into a character 
by taking the byte's value for the lower eight bits of the character and 
setting the high eight bits of the character to zero. This method does not, 
therefore, support the full Unicode character set. 

A line of text is terminated by a carriage-return character ('r'), a newline 
character ('n'), a carriage-return character immediately followed by a newline 
character, or the end of the file. Line-terminating characters are discarded 
and are not included as part of the string returned. 

This method blocks until a newline character is read, a carriage return and the 
byte following it are read (to see if it is a newline), the end of the file is 
reached, or an exception is thrown. 


    Returns: the next line of text from this file, or null if end of file is encountered 
             before even one byte is read. 
*java.io.RandomAccessFile.readLong()*

public final long readLong()
  throws |java.io.IOException|
         
Reads a signed 64-bit integer from this file. This method reads eight bytes 
from the file, starting at the current file pointer. If the bytes read, in 
order, are b1, b2, b3, b4, b5, b6, b7, and b8, where: 

0 <= b1, b2, b3, b4, b5, b6, b7, b8 <=255, 

then the result is equal to: 

((long)b1 << 56) + ((long)b2 << 48) + ((long)b3 << 40) + ((long)b4 << 32) + 
((long)b5 << 24) + ((long)b6 << 16) + ((long)b7 << 8) + b8 

This method blocks until the eight bytes are read, the end of the stream is 
detected, or an exception is thrown. 


    Returns: the next eight bytes of this file, interpreted as a long. 
*java.io.RandomAccessFile.readShort()*

public final short readShort()
  throws |java.io.IOException|
         
Reads a signed 16-bit number from this file. The method reads two bytes from 
this file, starting at the current file pointer. If the two bytes read, in 
order, are b1 and b2, where each of the two values is between 0 and 255, 
inclusive, then the result is equal to: 

(short)((b1 << 8) | b2) 

This method blocks until the two bytes are read, the end of the stream is 
detected, or an exception is thrown. 


    Returns: the next two bytes of this file, interpreted as a signed 16-bit number. 
*java.io.RandomAccessFile.readUnsignedByte()*

public final int readUnsignedByte()
  throws |java.io.IOException|
         
Reads an unsigned eight-bit number from this file. This method reads a byte 
from this file, starting at the current file pointer, and returns that byte. 

This method blocks until the byte is read, the end of the stream is detected, 
or an exception is thrown. 


    Returns: the next byte of this file, interpreted as an unsigned eight-bit number. 
*java.io.RandomAccessFile.readUnsignedShort()*

public final int readUnsignedShort()
  throws |java.io.IOException|
         
Reads an unsigned 16-bit number from this file. This method reads two bytes 
from the file, starting at the current file pointer. If the bytes read, in 
order, are b1 and b2, where 0<=b1, b2<=255, then the result is equal to: 

(b1 << 8) | b2 

This method blocks until the two bytes are read, the end of the stream is 
detected, or an exception is thrown. 


    Returns: the next two bytes of this file, interpreted as an unsigned 16-bit integer. 
*java.io.RandomAccessFile.readUTF()*

public final |java.lang.String| readUTF()
  throws |java.io.IOException|
         
Reads in a string from this file. The string has been encoded using a modified 
UTF-8 format. 

The first two bytes are read, starting from the current file pointer, as if by 
readUnsignedShort. This value gives the number of following bytes that are in 
the encoded string, not the length of the resulting string. The following bytes 
are then interpreted as bytes encoding characters in the modified UTF-8 format 
and are converted into characters. 

This method blocks until all the bytes are read, the end of the stream is 
detected, or an exception is thrown. 


    Returns: a Unicode string. 
*java.io.RandomAccessFile.seek(long)*

public native void seek(long pos)
  throws |java.io.IOException|
         
Sets the file-pointer offset, measured from the beginning of this file, at 
which the next read or write occurs. The offset may be set beyond the end of 
the file. Setting the offset beyond the end of the file does not change the 
file length. The file length will change only by writing after the offset has 
been set beyond the end of the file. 

    pos - the offset position, measured in bytes from the beginning of the file, at which 
       to set the file pointer. 

*java.io.RandomAccessFile.setLength(long)*

public native void setLength(long newLength)
  throws |java.io.IOException|
         
Sets the length of this file. 

If the present length of the file as returned by the length method is greater 
than the newLength argument then the file will be truncated. In this case, if 
the file offset as returned by the getFilePointer method is greater than 
newLength then after this method returns the offset will be equal to newLength. 

If the present length of the file as returned by the length method is smaller 
than the newLength argument then the file will be extended. In this case, the 
contents of the extended portion of the file are not defined. 

    newLength - The desired length of the file 

*java.io.RandomAccessFile.skipBytes(int)*

public int skipBytes(int n)
  throws |java.io.IOException|
         
Attempts to skip over n bytes of input discarding the skipped bytes. 

This method may skip over some smaller number of bytes, possibly zero. This may 
result from any of a number of conditions; reaching end of file before n bytes 
have been skipped is only one possibility. This method never throws an 
EOFException. The actual number of bytes skipped is returned. If n is negative, 
no bytes are skipped. 

    n - the number of bytes to be skipped. 

    Returns: the actual number of bytes skipped. 
*java.io.RandomAccessFile.write(byte[])*

public void write(byte[] b)
  throws |java.io.IOException|
         
Writes b.length bytes from the specified byte array to this file, starting at 
the current file pointer. 

    b - the data. 

*java.io.RandomAccessFile.write(byte[],int,int)*

public void write(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Writes len bytes from the specified byte array starting at offset off to this 
file. 

    b - the data. 
    off - the start offset in the data. 
    len - the number of bytes to write. 

*java.io.RandomAccessFile.write(int)*

public native void write(int b)
  throws |java.io.IOException|
         
Writes the specified byte to this file. The write starts at the current file 
pointer. 

    b - the byte to be written. 

*java.io.RandomAccessFile.writeBoolean(boolean)*

public final void writeBoolean(boolean v)
  throws |java.io.IOException|
         
Writes a boolean to the file as a one-byte value. The value true is written out 
as the value (byte)1; the value false is written out as the value (byte)0. The 
write starts at the current position of the file pointer. 

    v - a boolean value to be written. 

*java.io.RandomAccessFile.writeByte(int)*

public final void writeByte(int v)
  throws |java.io.IOException|
         
Writes a byte to the file as a one-byte value. The write starts at the current 
position of the file pointer. 

    v - a byte value to be written. 

*java.io.RandomAccessFile.writeBytes(String)*

public final void writeBytes(java.lang.String s)
  throws |java.io.IOException|
         
Writes the string to the file as a sequence of bytes. Each character in the 
string is written out, in sequence, by discarding its high eight bits. The 
write starts at the current position of the file pointer. 

    s - a string of bytes to be written. 

*java.io.RandomAccessFile.writeChar(int)*

public final void writeChar(int v)
  throws |java.io.IOException|
         
Writes a char to the file as a two-byte value, high byte first. The write 
starts at the current position of the file pointer. 

    v - a char value to be written. 

*java.io.RandomAccessFile.writeChars(String)*

public final void writeChars(java.lang.String s)
  throws |java.io.IOException|
         
Writes a string to the file as a sequence of characters. Each character is 
written to the data output stream as if by the writeChar method. The write 
starts at the current position of the file pointer. 

    s - a String value to be written. 

*java.io.RandomAccessFile.writeDouble(double)*

public final void writeDouble(double v)
  throws |java.io.IOException|
         
Converts the double argument to a long using the doubleToLongBits method in 
class Double, and then writes that long value to the file as an eight-byte 
quantity, high byte first. The write starts at the current position of the file 
pointer. 

    v - a double value to be written. 

*java.io.RandomAccessFile.writeFloat(float)*

public final void writeFloat(float v)
  throws |java.io.IOException|
         
Converts the float argument to an int using the floatToIntBits method in class 
Float, and then writes that int value to the file as a four-byte quantity, high 
byte first. The write starts at the current position of the file pointer. 

    v - a float value to be written. 

*java.io.RandomAccessFile.writeInt(int)*

public final void writeInt(int v)
  throws |java.io.IOException|
         
Writes an int to the file as four bytes, high byte first. The write starts at 
the current position of the file pointer. 

    v - an int to be written. 

*java.io.RandomAccessFile.writeLong(long)*

public final void writeLong(long v)
  throws |java.io.IOException|
         
Writes a long to the file as eight bytes, high byte first. The write starts at 
the current position of the file pointer. 

    v - a long to be written. 

*java.io.RandomAccessFile.writeShort(int)*

public final void writeShort(int v)
  throws |java.io.IOException|
         
Writes a short to the file as two bytes, high byte first. The write starts at 
the current position of the file pointer. 

    v - a short to be written. 

*java.io.RandomAccessFile.writeUTF(String)*

public final void writeUTF(java.lang.String str)
  throws |java.io.IOException|
         
Writes a string to the file using modified UTF-8 encoding in a 
machine-independent manner. 

First, two bytes are written to the file, starting at the current file pointer, 
as if by the writeShort method giving the number of bytes to follow. This value 
is the number of bytes actually written out, not the length of the string. 
Following the length, each character of the string is output, in sequence, 
using the modified UTF-8 encoding for each character. 

    str - a string to be written. 



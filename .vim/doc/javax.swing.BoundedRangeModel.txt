*javax.swing.BoundedRangeModel* *BoundedRangeModel* Defines the data model used 

public interface interface BoundedRangeModel


|javax.swing.BoundedRangeModel_Description|
|javax.swing.BoundedRangeModel_Fields|
|javax.swing.BoundedRangeModel_Constructors|
|javax.swing.BoundedRangeModel_Methods|

================================================================================

*javax.swing.BoundedRangeModel_Methods*
|javax.swing.BoundedRangeModel.addChangeListener(ChangeListener)|Adds a ChangeL
|javax.swing.BoundedRangeModel.getExtent()|Returns the model's extent, the leng
|javax.swing.BoundedRangeModel.getMaximum()|Returns the model's maximum.
|javax.swing.BoundedRangeModel.getMinimum()|Returns the minimum acceptable valu
|javax.swing.BoundedRangeModel.getValue()|Returns the model's current value.
|javax.swing.BoundedRangeModel.getValueIsAdjusting()|Returns true if the curren
|javax.swing.BoundedRangeModel.removeChangeListener(ChangeListener)|Removes a C
|javax.swing.BoundedRangeModel.setExtent(int)|Sets the model's extent.
|javax.swing.BoundedRangeModel.setMaximum(int)|Sets the model's maximum to newM
|javax.swing.BoundedRangeModel.setMinimum(int)|Sets the model's minimum to newM
|javax.swing.BoundedRangeModel.setRangeProperties(int,int,int,int,boolean)|This
|javax.swing.BoundedRangeModel.setValue(int)|Sets the model's current value to 
|javax.swing.BoundedRangeModel.setValueIsAdjusting(boolean)|This attribute indi

*javax.swing.BoundedRangeModel_Description*

Defines the data model used by components like Sliders and ProgressBars. 
Defines four interrelated integer properties: minimum, maximum, extent and 
value. These four integers define two nested ranges like this: 

minimum minimum,maximum and the inner range is value,value+extent. The inner 
range must lie within the outer one, i.e. value must be less than or equal to 
maximum and value+extent must greater than or equal to minimum, and maximum 
must be greater than or equal to minimum. There are a few features of this 
model that one might find a little surprising. These quirks exist for the 
convenience of the Swing BoundedRangeModel clients, such as Slider and 
ScrollBar. 

The minimum and maximum set methods "correct" the other three properties to 
accommodate their new value argument. For example setting the model's minimum 
may change its maximum, value, and extent properties (in that order), to 
maintain the constraints specified above. 

The value and extent set methods "correct" their argument to fit within the 
limits defined by the other three properties. For example if value == maximum, 
setExtent(10) would change the extent (back) to zero. 

The four BoundedRangeModel values are defined as Java Beans properties however 
Swing ChangeEvents are used to notify clients of changes rather than 
PropertyChangeEvents. This was done to keep the overhead of monitoring a 
BoundedRangeModel low. Changes are often reported at MouseDragged rates. 



For an example of specifying custom bounded range models used by sliders, see 
The Anatomy of a Swing-Based Program in The Java Tutorial. 


*javax.swing.BoundedRangeModel.addChangeListener(ChangeListener)*

public void addChangeListener(javax.swing.event.ChangeListener x)

Adds a ChangeListener to the model's listener list. 

    x - the ChangeListener to add 

*javax.swing.BoundedRangeModel.getExtent()*

public int getExtent()

Returns the model's extent, the length of the inner range that begins at the 
model's value. 


    Returns: the value of the model's extent property 
*javax.swing.BoundedRangeModel.getMaximum()*

public int getMaximum()

Returns the model's maximum. Note that the upper limit on the model's value is 
(maximum - extent). 


    Returns: the value of the maximum property. 
*javax.swing.BoundedRangeModel.getMinimum()*

public int getMinimum()

Returns the minimum acceptable value. 


    Returns: the value of the minimum property 
*javax.swing.BoundedRangeModel.getValue()*

public int getValue()

Returns the model's current value. Note that the upper limit on the model's 
value is maximum - extent and the lower limit is minimum. 


    Returns: the model's value 
*javax.swing.BoundedRangeModel.getValueIsAdjusting()*

public boolean getValueIsAdjusting()

Returns true if the current changes to the value property are part of a series 
of changes. 


    Returns: the valueIsAdjustingProperty. 
*javax.swing.BoundedRangeModel.removeChangeListener(ChangeListener)*

public void removeChangeListener(javax.swing.event.ChangeListener x)

Removes a ChangeListener from the model's listener list. 

    x - the ChangeListener to remove 

*javax.swing.BoundedRangeModel.setExtent(int)*

public void setExtent(int newExtent)

Sets the model's extent. The newExtent is forced to be greater than or equal to 
zero and less than or equal to maximum - value. 

When a BoundedRange model is used with a scrollbar the extent defines the 
length of the scrollbar knob (aka the "thumb" or "elevator"). The extent 
usually represents how much of the object being scrolled is visible. When used 
with a slider, the extent determines how much the value can "jump", for example 
when the user presses PgUp or PgDn. 

Notifies any listeners if the model changes. 

    newExtent - the model's new extent 

*javax.swing.BoundedRangeModel.setMaximum(int)*

public void setMaximum(int newMaximum)

Sets the model's maximum to newMaximum. The other three properties may be 
changed as well, to ensure that 

minimum Notifies any listeners if the model changes. 

    newMaximum - the model's new maximum 

*javax.swing.BoundedRangeModel.setMinimum(int)*

public void setMinimum(int newMinimum)

Sets the model's minimum to newMinimum. The other three properties may be 
changed as well, to ensure that: 

minimum Notifies any listeners if the model changes. 

    newMinimum - the model's new minimum 

*javax.swing.BoundedRangeModel.setRangeProperties(int,int,int,int,boolean)*

public void setRangeProperties(
  int value,
  int extent,
  int min,
  int max,
  boolean adjusting)

This method sets all of the model's data with a single method call. The method 
results in a single change event being generated. This is convenient when you 
need to adjust all the model data simultaneously and do not want individual 
change events to occur. 

    value - an int giving the current value 
    extent - an int giving the amount by which the value can "jump" 
    min - an int giving the minimum value 
    max - an int giving the maximum value 
    adjusting - a boolean, true if a series of changes are in progress 

*javax.swing.BoundedRangeModel.setValue(int)*

public void setValue(int newValue)

Sets the model's current value to newValue if newValue satisfies the model's 
constraints. Those constraints are: 

minimum newValue is less than minimum it's set to minimum, if its greater than 
maximum then it's set to maximum, and if it's greater than value+extent then 
it's set to value+extent. 

When a BoundedRange model is used with a scrollbar the value specifies the 
origin of the scrollbar knob (aka the "thumb" or "elevator"). The value usually 
represents the origin of the visible part of the object being scrolled. 

Notifies any listeners if the model changes. 

    newValue - the model's new value 

*javax.swing.BoundedRangeModel.setValueIsAdjusting(boolean)*

public void setValueIsAdjusting(boolean b)

This attribute indicates that any upcoming changes to the value of the model 
should be considered a single event. This attribute will be set to true at the 
start of a series of changes to the value, and will be set to false when the 
value has finished changing. Normally this allows a listener to only take 
action when the final value change in committed, instead of having to do 
updates for all intermediate values. 

Sliders and scrollbars use this property when a drag is underway. 

    b - true if the upcoming changes to the value property are part of a series 



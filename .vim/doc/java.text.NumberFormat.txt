*java.text.NumberFormat* *NumberFormat* NumberFormat is the abstract base class for all number
 formats.

public abstract class NumberFormat
  extends    |java.text.Format|

|java.text.NumberFormat_Description|
|java.text.NumberFormat_Fields|
|java.text.NumberFormat_Constructors|
|java.text.NumberFormat_Methods|

====================================================================================================================================================================================

*java.text.NumberFormat_Fields*
|int_java.text.NumberFormat.FRACTION_FIELD|
|int_java.text.NumberFormat.INTEGER_FIELD|

*java.text.NumberFormat_Constructors*
|java.text.NumberFormat()|

*java.text.NumberFormat_Methods*
|java.text.NumberFormat.clone()|Overrides Cloneable
|java.text.NumberFormat.equals(Object)|Overrides equals
|java.text.NumberFormat.format(double)|Specialization of format.
|java.text.NumberFormat.format(double,StringBuffer,FieldPosition)|Specialization of format.
|java.text.NumberFormat.format(long)|Specialization of format.
|java.text.NumberFormat.format(long,StringBuffer,FieldPosition)|Specialization of format.
|java.text.NumberFormat.format(Object,StringBuffer,FieldPosition)|Formats a number and appends the resulting text to the given string  buffer.
|java.text.NumberFormat.getAvailableLocales()|Returns an array of all locales for which the  get*Instance methods of this class can return  localized instances.
|java.text.NumberFormat.getCurrency()|Gets the currency used by this number format when formatting  currency values.
|java.text.NumberFormat.getCurrencyInstance()|Returns a currency format for the current default locale.
|java.text.NumberFormat.getCurrencyInstance(Locale)|Returns a currency format for the specified locale.
|java.text.NumberFormat.getInstance()|Returns a general-purpose number format for the current default locale.
|java.text.NumberFormat.getInstance(Locale)|Returns a general-purpose number format for the specified locale.
|java.text.NumberFormat.getIntegerInstance()|Returns an integer number format for the current default locale.
|java.text.NumberFormat.getIntegerInstance(Locale)|Returns an integer number format for the specified locale.
|java.text.NumberFormat.getMaximumFractionDigits()|Returns the maximum number of digits allowed in the fraction portion of a  number.
|java.text.NumberFormat.getMaximumIntegerDigits()|Returns the maximum number of digits allowed in the integer portion of a  number.
|java.text.NumberFormat.getMinimumFractionDigits()|Returns the minimum number of digits allowed in the fraction portion of a  number.
|java.text.NumberFormat.getMinimumIntegerDigits()|Returns the minimum number of digits allowed in the integer portion of a  number.
|java.text.NumberFormat.getNumberInstance()|Returns a general-purpose number format for the current default locale.
|java.text.NumberFormat.getNumberInstance(Locale)|Returns a general-purpose number format for the specified locale.
|java.text.NumberFormat.getPercentInstance()|Returns a percentage format for the current default locale.
|java.text.NumberFormat.getPercentInstance(Locale)|Returns a percentage format for the specified locale.
|java.text.NumberFormat.hashCode()|Overrides hashCode
|java.text.NumberFormat.isGroupingUsed()|Returns true if grouping is used in this format.
|java.text.NumberFormat.isParseIntegerOnly()|Returns true if this format will parse numbers as integers only.
|java.text.NumberFormat.parse(String)|Parses text from the beginning of the given string to produce a number.
|java.text.NumberFormat.parse(String,ParsePosition)|Returns a Long if possible (e.g., within the range [Long.MIN_VALUE,  Long.MAX_VALUE] and with no decimals), otherwise a Double.
|java.text.NumberFormat.parseObject(String,ParsePosition)|Parses text from a string to produce a Number.
|java.text.NumberFormat.setCurrency(Currency)|Sets the currency used by this number format when formatting  currency values.
|java.text.NumberFormat.setGroupingUsed(boolean)|Set whether or not grouping will be used in this format.
|java.text.NumberFormat.setMaximumFractionDigits(int)|Sets the maximum number of digits allowed in the fraction portion of a  number.
|java.text.NumberFormat.setMaximumIntegerDigits(int)|Sets the maximum number of digits allowed in the integer portion of a  number.
|java.text.NumberFormat.setMinimumFractionDigits(int)|Sets the minimum number of digits allowed in the fraction portion of a  number.
|java.text.NumberFormat.setMinimumIntegerDigits(int)|Sets the minimum number of digits allowed in the integer portion of a  number.
|java.text.NumberFormat.setParseIntegerOnly(boolean)|Sets whether or not numbers should be parsed as integers only.

*java.text.NumberFormat_Description*

NumberFormat is the abstract base class for all number formats. This class provides the interface for formatting and parsing numbers. NumberFormat also provides methods for 
determining which locales have number formats, and what their names are. 

NumberFormat helps you to format and parse numbers for any locale. Your code can be completely independent of the locale conventions for decimal points, thousands-separators, or 
even the particular decimal digits used, or whether the number format is even decimal. 

To format a number for the current Locale, use one of the factory class methods: 



myString = NumberFormat.getInstance().format(myNumber); 

If you are formatting multiple numbers, it is more efficient to get the format and use it multiple times so that the system doesn't have to fetch the information about the local 
language and country conventions multiple times. 



NumberFormat nf = NumberFormat.getInstance(); for (int i = 0; i To format a number for a different Locale, specify it in the call to getInstance. 



NumberFormat nf = NumberFormat.getInstance(Locale.FRENCH); 

You can also use a NumberFormat to parse numbers: 



myNumber = nf.parse(myString); 

Use getInstance or getNumberInstance to get the normal number format. Use getIntegerInstance to get an integer number format. Use getCurrencyInstance to get the currency number 
format. And use getPercentInstance to get a format for displaying percentages. With this format, a fraction like 0.53 is displayed as 53%. 

You can also control the display of numbers with such methods as setMinimumFractionDigits. If you want even more control over the format or parsing, or want to give your users 
more control, you can try casting the NumberFormat you get from the factory methods to a DecimalFormat. This will work for the vast majority of locales; just remember to put it in 
a try block in case you encounter an unusual one. 

NumberFormat and DecimalFormat are designed such that some controls work for formatting and others work for parsing. The following is the detailed description for each these 
control methods, 

setParseIntegerOnly : only affects parsing, e.g. if true, "3456.78" -> 3456 (and leaves the parse position just after index 6) if false, "3456.78" -> 3456.78 (and leaves the parse 
position just after index 8) This is independent of formatting. If you want to not show a decimal point where there might be no digits after the decimal point, use 
setDecimalSeparatorAlwaysShown. 

setDecimalSeparatorAlwaysShown : only affects formatting, and only where there might be no digits after the decimal point, such as with a pattern like "#,##0.##", e.g., if true, 
3456.00 -> "3,456." if false, 3456.00 -> "3456" This is independent of parsing. If you want parsing to stop at the decimal point, use setParseIntegerOnly. 

You can also use forms of the parse and format methods with ParsePosition and FieldPosition to allow you to: 

progressively parse through pieces of a string align the decimal point and other areas 

For example, you can align numbers in two ways: 

If you are using a monospaced font with spacing for alignment, you can pass the FieldPosition in your format call, with field = INTEGER_FIELD. On output, getEndIndex will be set 
to the offset between the last character of the integer and the decimal. Add (desiredSpaceCount - getEndIndex) spaces at the front of the string. 

If you are using proportional fonts, instead of padding with spaces, measure the width of the string in pixels from the start to getEndIndex. Then move the pen by 
(desiredPixelWidth - widthToAlignmentPoint) before drawing the text. It also works where there is no decimal, but possibly additional characters at the end, e.g., with parentheses 
in negative numbers: "(12)" for -12. 

Synchronization 

Number formats are generally not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be 
synchronized externally. 



*int_java.text.NumberFormat.FRACTION_FIELD*

Field constant used to construct a FieldPosition object. Signifies that the position of the fraction part of a formatted number should be returned. 


*int_java.text.NumberFormat.INTEGER_FIELD*

Field constant used to construct a FieldPosition object. Signifies that the position of the integer part of a formatted number should be returned. 



*java.text.NumberFormat()*

public NumberFormat()




*java.text.NumberFormat.clone()*

public |java.lang.Object| clone()

Overrides Cloneable 



*java.text.NumberFormat.equals(Object)*

public boolean equals(java.lang.Object obj)

Overrides equals 



*java.text.NumberFormat.format(double)*

public final |java.lang.String| format(double number)

Specialization of format. 



*java.text.NumberFormat.format(double,StringBuffer,FieldPosition)*

public abstract |java.lang.StringBuffer| format(
  double number,
  java.lang.StringBuffer toAppendTo,
  java.text.FieldPosition pos)

Specialization of format. 



*java.text.NumberFormat.format(long)*

public final |java.lang.String| format(long number)

Specialization of format. 



*java.text.NumberFormat.format(long,StringBuffer,FieldPosition)*

public abstract |java.lang.StringBuffer| format(
  long number,
  java.lang.StringBuffer toAppendTo,
  java.text.FieldPosition pos)

Specialization of format. 



*java.text.NumberFormat.format(Object,StringBuffer,FieldPosition)*

public |java.lang.StringBuffer| format(
  java.lang.Object number,
  java.lang.StringBuffer toAppendTo,
  java.text.FieldPosition pos)

Formats a number and appends the resulting text to the given string buffer. The number can be of any subclass of (|java.lang.Number|) . 

This implementation extracts the number's value using (|java.lang.Number|) for all integral type values that can be converted to long without loss of information, including 
BigInteger values with a bit length(|java.math.BigInteger|) of less than 64, and (|java.lang.Number|) for all other types. It then calls (|java.text.NumberFormat|) or 
(|java.text.NumberFormat|) . This may result in loss of magnitude information and precision for BigInteger and BigDecimal values. 


    number - the number to format 
    toAppendTo - the StringBuffer to which the formatted text is to be appended 
    pos - On input: an alignment field, if desired. On output: the offsets of the alignment field. 

    Returns: the value passed in as toAppendTo 

*java.text.NumberFormat.getAvailableLocales()*

public static |java.util.Locale|[] getAvailableLocales()

Returns an array of all locales for which the get*Instance methods of this class can return localized instances. The array returned must contain at least a Locale instance equal 
to Locale.US(|java.util.Locale|) . 



    Returns: An array of locales for which localized NumberFormat instances are available. 

*java.text.NumberFormat.getCurrency()*

public |java.util.Currency| getCurrency()

Gets the currency used by this number format when formatting currency values. The initial value is derived in a locale dependent way. The returned value may be null if no valid 
currency could be determined and no currency has been set using setCurrency(|java.text.NumberFormat|) . 

The default implementation throws UnsupportedOperationException. 



    Returns: the currency used by this number format, or null 

*java.text.NumberFormat.getCurrencyInstance()*

public static final |java.text.NumberFormat| getCurrencyInstance()

Returns a currency format for the current default locale. 



*java.text.NumberFormat.getCurrencyInstance(Locale)*

public static |java.text.NumberFormat| getCurrencyInstance(java.util.Locale inLocale)

Returns a currency format for the specified locale. 



*java.text.NumberFormat.getInstance()*

public static final |java.text.NumberFormat| getInstance()

Returns a general-purpose number format for the current default locale. This is the same as calling getNumberInstance()(|java.text.NumberFormat|) . 



*java.text.NumberFormat.getInstance(Locale)*

public static |java.text.NumberFormat| getInstance(java.util.Locale inLocale)

Returns a general-purpose number format for the specified locale. This is the same as calling getNumberInstance(inLocale)(|java.text.NumberFormat|) . 



*java.text.NumberFormat.getIntegerInstance()*

public static final |java.text.NumberFormat| getIntegerInstance()

Returns an integer number format for the current default locale. The returned number format is configured to round floating point numbers to the nearest integer using IEEE 
half-even rounding (see ROUND_HALF_EVEN(|java.math.BigDecimal|) ) for formatting, and to parse only the integer part of an input string (see 
isParseIntegerOnly(|java.text.NumberFormat|) ). 



    Returns: a number format for integer values 

*java.text.NumberFormat.getIntegerInstance(Locale)*

public static |java.text.NumberFormat| getIntegerInstance(java.util.Locale inLocale)

Returns an integer number format for the specified locale. The returned number format is configured to round floating point numbers to the nearest integer using IEEE half-even 
rounding (see ROUND_HALF_EVEN(|java.math.BigDecimal|) ) for formatting, and to parse only the integer part of an input string (see isParseIntegerOnly(|java.text.NumberFormat|) ). 


    inLocale - the locale for which a number format is needed 

    Returns: a number format for integer values 

*java.text.NumberFormat.getMaximumFractionDigits()*

public int getMaximumFractionDigits()

Returns the maximum number of digits allowed in the fraction portion of a number. 



*java.text.NumberFormat.getMaximumIntegerDigits()*

public int getMaximumIntegerDigits()

Returns the maximum number of digits allowed in the integer portion of a number. 



*java.text.NumberFormat.getMinimumFractionDigits()*

public int getMinimumFractionDigits()

Returns the minimum number of digits allowed in the fraction portion of a number. 



*java.text.NumberFormat.getMinimumIntegerDigits()*

public int getMinimumIntegerDigits()

Returns the minimum number of digits allowed in the integer portion of a number. 



*java.text.NumberFormat.getNumberInstance()*

public static final |java.text.NumberFormat| getNumberInstance()

Returns a general-purpose number format for the current default locale. 



*java.text.NumberFormat.getNumberInstance(Locale)*

public static |java.text.NumberFormat| getNumberInstance(java.util.Locale inLocale)

Returns a general-purpose number format for the specified locale. 



*java.text.NumberFormat.getPercentInstance()*

public static final |java.text.NumberFormat| getPercentInstance()

Returns a percentage format for the current default locale. 



*java.text.NumberFormat.getPercentInstance(Locale)*

public static |java.text.NumberFormat| getPercentInstance(java.util.Locale inLocale)

Returns a percentage format for the specified locale. 



*java.text.NumberFormat.hashCode()*

public int hashCode()

Overrides hashCode 



*java.text.NumberFormat.isGroupingUsed()*

public boolean isGroupingUsed()

Returns true if grouping is used in this format. For example, in the English locale, with grouping on, the number 1234567 might be formatted as "1,234,567". The grouping separator 
as well as the size of each group is locale dependant and is determined by sub-classes of NumberFormat. 



*java.text.NumberFormat.isParseIntegerOnly()*

public boolean isParseIntegerOnly()

Returns true if this format will parse numbers as integers only. For example in the English locale, with ParseIntegerOnly true, the string "1234." would be parsed as the integer 
value 1234 and parsing would stop at the "." character. Of course, the exact format accepted by the parse operation is locale dependant and determined by sub-classes of 
NumberFormat. 



*java.text.NumberFormat.parse(String)*

public |java.lang.Number| parse(java.lang.String source)
  throws |java.text.ParseException|
         
Parses text from the beginning of the given string to produce a number. The method may not use the entire text of the given string. 

See the (|java.text.NumberFormat|) method for more information on number parsing. 


    source - A String whose beginning should be parsed. 

    Returns: A Number parsed from the string. 

*java.text.NumberFormat.parse(String,ParsePosition)*

public abstract |java.lang.Number| parse(
  java.lang.String source,
  java.text.ParsePosition parsePosition)

Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals), otherwise a Double. If IntegerOnly is set, will stop at a decimal point 
(or equivalent; e.g., for rational numbers "1 2/3", will stop after the 1). Does not throw an exception; if no object can be parsed, index is unchanged! 



*java.text.NumberFormat.parseObject(String,ParsePosition)*

public final |java.lang.Object| parseObject(
  java.lang.String source,
  java.text.ParsePosition pos)

Parses text from a string to produce a Number. 

The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing 
does not necessarily use all characters up to the end of the string), and the parsed number is returned. The updated pos can be used to indicate the starting point for the next 
call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is 
returned. 

See the (|java.text.NumberFormat|) method for more information on number parsing. 


    source - A String, part of which should be parsed. 
    pos - A ParsePosition object with index and error index information as described above. 

    Returns: A Number parsed from the string. In case of error, returns null. 

*java.text.NumberFormat.setCurrency(Currency)*

public void setCurrency(java.util.Currency currency)

Sets the currency used by this number format when formatting currency values. This does not update the minimum or maximum number of fraction digits used by the number format. 

The default implementation throws UnsupportedOperationException. 


    currency - the new currency to be used by this number format 

*java.text.NumberFormat.setGroupingUsed(boolean)*

public void setGroupingUsed(boolean newValue)

Set whether or not grouping will be used in this format. 



*java.text.NumberFormat.setMaximumFractionDigits(int)*

public void setMaximumFractionDigits(int newValue)

Sets the maximum number of digits allowed in the fraction portion of a number. maximumFractionDigits must be >= minimumFractionDigits. If the new value for maximumFractionDigits 
is less than the current value of minimumFractionDigits, then minimumFractionDigits will also be set to the new value. 


    newValue - the maximum number of fraction digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric 
       type being formatted. 

*java.text.NumberFormat.setMaximumIntegerDigits(int)*

public void setMaximumIntegerDigits(int newValue)

Sets the maximum number of digits allowed in the integer portion of a number. maximumIntegerDigits must be >= minimumIntegerDigits. If the new value for maximumIntegerDigits is 
less than the current value of minimumIntegerDigits, then minimumIntegerDigits will also be set to the new value. 


    newValue - the maximum number of integer digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric 
       type being formatted. 

*java.text.NumberFormat.setMinimumFractionDigits(int)*

public void setMinimumFractionDigits(int newValue)

Sets the minimum number of digits allowed in the fraction portion of a number. minimumFractionDigits must be <= maximumFractionDigits. If the new value for minimumFractionDigits 
exceeds the current value of maximumFractionDigits, then maximumIntegerDigits will also be set to the new value 


    newValue - the minimum number of fraction digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric 
       type being formatted. 

*java.text.NumberFormat.setMinimumIntegerDigits(int)*

public void setMinimumIntegerDigits(int newValue)

Sets the minimum number of digits allowed in the integer portion of a number. minimumIntegerDigits must be <= maximumIntegerDigits. If the new value for minimumIntegerDigits 
exceeds the current value of maximumIntegerDigits, then maximumIntegerDigits will also be set to the new value 


    newValue - the minimum number of integer digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric 
       type being formatted. 

*java.text.NumberFormat.setParseIntegerOnly(boolean)*

public void setParseIntegerOnly(boolean value)

Sets whether or not numbers should be parsed as integers only. 





*org.w3c.dom.events.EventTarget* *EventTarget* The EventTarget interface is impl

public interface interface EventTarget


|org.w3c.dom.events.EventTarget_Description|
|org.w3c.dom.events.EventTarget_Fields|
|org.w3c.dom.events.EventTarget_Constructors|
|org.w3c.dom.events.EventTarget_Methods|

================================================================================

*org.w3c.dom.events.EventTarget_Methods*
|org.w3c.dom.events.EventTarget.addEventListener(String,EventListener,boolean)|
|org.w3c.dom.events.EventTarget.dispatchEvent(Event)|This method allows the dis
|org.w3c.dom.events.EventTarget.removeEventListener(String,EventListener,boolean)|

*org.w3c.dom.events.EventTarget_Description*

The EventTarget interface is implemented by all Nodes in an implementation 
which supports the DOM Event Model. Therefore, this interface can be obtained 
by using binding-specific casting methods on an instance of the Node interface. 
The interface allows registration and removal of EventListeners on an 
EventTarget and dispatch of events to that EventTarget. See also the Document 
Object Model (DOM) Level 2 Events Specification. 


*org.w3c.dom.events.EventTarget.addEventListener(String,EventListener,boolean)*

public void addEventListener(
  java.lang.String type,
  org.w3c.dom.events.EventListener listener,
  boolean useCapture)

This method allows the registration of event listeners on the event target. If 
an EventListener is added to an EventTarget while it is processing an event, it 
will not be triggered by the current actions but may be triggered during a 
later stage of event flow, such as the bubbling phase. If multiple identical 
EventListeners are registered on the same EventTarget with the same parameters 
the duplicate instances are discarded. They do not cause the EventListener to 
be called twice and since they are discarded they do not need to be removed 
with the removeEventListener method. 

    typeThe - event type for which the user is registering 
    listenerThe - listener parameter takes an interface implemented by the user which contains 
       the methods to be called when the event occurs. 
    useCaptureIf - true, useCapture indicates that the user wishes to initiate capture. After 
       initiating capture, all events of the specified type will be dispatched 
       to the registered EventListener before being dispatched to any 
       EventTargets beneath them in the tree. Events which are bubbling upward 
       through the tree will not trigger an EventListener designated to use 
       capture. 

*org.w3c.dom.events.EventTarget.dispatchEvent(Event)*

public boolean dispatchEvent(org.w3c.dom.events.Event evt)
  throws |org.w3c.dom.events.EventException|
         
This method allows the dispatch of events into the implementations event model. 
Events dispatched in this manner will have the same capturing and bubbling 
behavior as events dispatched directly by the implementation. The target of the 
event is the EventTarget on which dispatchEvent is called. 

    evtSpecifies - the event type, behavior, and contextual information to be used in processing 
       the event. 

    Returns: The return value of dispatchEvent indicates whether any of the listeners which 
             handled the event called preventDefault. If preventDefault was 
             called the value is false, else the value is true. 
*org.w3c.dom.events.EventTarget.removeEventListener(String,EventListener,boolean)*

public void removeEventListener(
  java.lang.String type,
  org.w3c.dom.events.EventListener listener,
  boolean useCapture)

This method allows the removal of event listeners from the event target. If an 
EventListener is removed from an EventTarget while it is processing an event, 
it will not be triggered by the current actions. EventListeners can never be 
invoked after being removed. Calling removeEventListener with arguments which 
do not identify any currently registered EventListener on the EventTarget has 
no effect. 

    typeSpecifies - the event type of the EventListener being removed. 
    listenerThe - EventListener parameter indicates the EventListener to be removed. 
    useCaptureSpecifies - whether the EventListener being removed was registered as a capturing listener 
       or not. If a listener was registered twice, one with capture and one 
       without, each must be removed separately. Removal of a capturing 
       listener does not affect a non-capturing version of the same listener, 
       and vice versa. 



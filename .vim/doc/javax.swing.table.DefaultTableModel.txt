*javax.swing.table.DefaultTableModel* *DefaultTableModel* This is an implementation of TableModel that
 uses a Vector of Vectors to store the
 cell value objects.

public class DefaultTableModel
  extends    |javax.swing.table.AbstractTableModel|
  implements |java.io.Serializable|

|javax.swing.table.DefaultTableModel_Description|
|javax.swing.table.DefaultTableModel_Fields|
|javax.swing.table.DefaultTableModel_Constructors|
|javax.swing.table.DefaultTableModel_Methods|

====================================================================================================================================================================================

*javax.swing.table.DefaultTableModel_Fields*
|java.util.Vector_javax.swing.table.DefaultTableModel.columnIdentifiers|
|java.util.Vector_javax.swing.table.DefaultTableModel.dataVector|

*javax.swing.table.DefaultTableModel_Constructors*
|javax.swing.table.DefaultTableModel()|Constructs a default DefaultTableModel    which is a table of zero columns and zero rows.
|javax.swing.table.DefaultTableModel(int,int)|Constructs a DefaultTableModel with   rowCount and columnCount of   null object values.
|javax.swing.table.DefaultTableModel(Object[][],Object[])|Constructs a DefaultTableModel and initializes the table   by passing data and columnNames   to the setDataVector   metho
|javax.swing.table.DefaultTableModel(Object[],int)|Constructs a DefaultTableModel with as many   columns as there are elements in columnNames   and rowCount of null   object value
|javax.swing.table.DefaultTableModel(Vector,int)|Constructs a DefaultTableModel with as many columns   as there are elements in columnNames   and rowCount of null   object values.
|javax.swing.table.DefaultTableModel(Vector,Vector)|Constructs a DefaultTableModel and initializes the table   by passing data and columnNames   to the setDataVector method.

*javax.swing.table.DefaultTableModel_Methods*
|javax.swing.table.DefaultTableModel.addColumn(Object)|Adds a column to the model.
|javax.swing.table.DefaultTableModel.addColumn(Object,Object[])|Adds a column to the model.
|javax.swing.table.DefaultTableModel.addColumn(Object,Vector)|Adds a column to the model.
|javax.swing.table.DefaultTableModel.addRow(Object[])|Adds a row to the end of the model.
|javax.swing.table.DefaultTableModel.addRow(Vector)|Adds a row to the end of the model.
|javax.swing.table.DefaultTableModel.convertToVector(Object[])|Returns a vector that contains the same objects as the array.
|javax.swing.table.DefaultTableModel.convertToVector(Object[][])|Returns a vector of vectors that contains the same objects as the array.
|javax.swing.table.DefaultTableModel.getColumnCount()|Returns the number of columns in this data table.
|javax.swing.table.DefaultTableModel.getColumnName(int)|Returns the column name.
|javax.swing.table.DefaultTableModel.getDataVector()|Returns the Vector of Vectors   that contains the table's   data values.
|javax.swing.table.DefaultTableModel.getRowCount()|Returns the number of rows in this data table.
|javax.swing.table.DefaultTableModel.getValueAt(int,int)|Returns an attribute value for the cell at row  and column.
|javax.swing.table.DefaultTableModel.insertRow(int,Object[])|Inserts a row at row in the model.
|javax.swing.table.DefaultTableModel.insertRow(int,Vector)|Inserts a row at row in the model.
|javax.swing.table.DefaultTableModel.isCellEditable(int,int)|Returns true regardless of parameter values.
|javax.swing.table.DefaultTableModel.moveRow(int,int,int)|Moves one or more rows from the inclusive range start to    end to the to position in the model.
|javax.swing.table.DefaultTableModel.newDataAvailable(TableModelEvent)|Equivalent to fireTableChanged.
|javax.swing.table.DefaultTableModel.newRowsAdded(TableModelEvent)|Ensures that the new rows have the correct number of columns.
|javax.swing.table.DefaultTableModel.removeRow(int)|Removes the row at row from the model.
|javax.swing.table.DefaultTableModel.rowsRemoved(TableModelEvent)|Equivalent to fireTableChanged.
|javax.swing.table.DefaultTableModel.setColumnCount(int)|Sets the number of columns in the model.
|javax.swing.table.DefaultTableModel.setColumnIdentifiers(Object[])|Replaces the column identifiers in the model.
|javax.swing.table.DefaultTableModel.setColumnIdentifiers(Vector)|Replaces the column identifiers in the model.
|javax.swing.table.DefaultTableModel.setDataVector(Object[][],Object[])|Replaces the value in the dataVector instance    variable with the values in the array dataVector.
|javax.swing.table.DefaultTableModel.setDataVector(Vector,Vector)|Replaces the current dataVector instance variable    with the new Vector of rows, dataVector.
|javax.swing.table.DefaultTableModel.setNumRows(int)|Obsolete as of Java 2 platform v1.3.
|javax.swing.table.DefaultTableModel.setRowCount(int)|Sets the number of rows in the model.
|javax.swing.table.DefaultTableModel.setValueAt(Object,int,int)|Sets the object value for the cell at column and  row.

*javax.swing.table.DefaultTableModel_Description*

This is an implementation of TableModel that uses a Vector of Vectors to store the cell value objects. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*java.util.Vector_javax.swing.table.DefaultTableModel.columnIdentifiers*

The Vector of column identifiers. 


*java.util.Vector_javax.swing.table.DefaultTableModel.dataVector*

The Vector of Vectors of Object values. 



*javax.swing.table.DefaultTableModel()*

public DefaultTableModel()

Constructs a default DefaultTableModel which is a table of zero columns and zero rows. 


*javax.swing.table.DefaultTableModel(int,int)*

public DefaultTableModel(
  int rowCount,
  int columnCount)

Constructs a DefaultTableModel with rowCount and columnCount of null object values. 

    rowCount - the number of rows the table holds 
    columnCount - the number of columns the table holds 

*javax.swing.table.DefaultTableModel(Object[][],Object[])*

public DefaultTableModel(
  java.lang.Object[][] data,
  java.lang.Object[] columnNames)

Constructs a DefaultTableModel and initializes the table by passing data and columnNames to the setDataVector method. The first index in the Object[][] array is the row index and 
the second is the column index. 

    data - the data of the table 
    columnNames - the names of the columns 

*javax.swing.table.DefaultTableModel(Object[],int)*

public DefaultTableModel(
  java.lang.Object[] columnNames,
  int rowCount)

Constructs a DefaultTableModel with as many columns as there are elements in columnNames and rowCount of null object values. Each column's name will be taken from the columnNames 
array. 

    columnNames - array containing the names of the new columns; if this is null then the model has no columns 
    rowCount - the number of rows the table holds 

*javax.swing.table.DefaultTableModel(Vector,int)*

public DefaultTableModel(
  java.util.Vector columnNames,
  int rowCount)

Constructs a DefaultTableModel with as many columns as there are elements in columnNames and rowCount of null object values. Each column's name will be taken from the columnNames 
vector. 

    columnNames - vector containing the names of the new columns; if this is null then the model has no columns 
    rowCount - the number of rows the table holds 

*javax.swing.table.DefaultTableModel(Vector,Vector)*

public DefaultTableModel(
  java.util.Vector data,
  java.util.Vector columnNames)

Constructs a DefaultTableModel and initializes the table by passing data and columnNames to the setDataVector method. 

    data - the data of the table, a Vector of Vectors of Object values 
    columnNames - vector containing the names of the new columns 

*javax.swing.table.DefaultTableModel.addColumn(Object)*

public void addColumn(java.lang.Object columnName)

Adds a column to the model. The new column will have the identifier columnName, which may be null. This method will send a tableChanged notification message to all the listeners. 
This method is a cover for addColumn(Object, Vector) which uses null as the data vector. 


    columnName - the identifier of the column being added 

*javax.swing.table.DefaultTableModel.addColumn(Object,Object[])*

public void addColumn(
  java.lang.Object columnName,
  java.lang.Object[] columnData)

Adds a column to the model. The new column will have the identifier columnName. columnData is the optional array of data for the column. If it is null the column is filled with 
null values. Otherwise, the new data will be added to model starting with the first element going to row 0, etc. This method will send a tableChanged notification message to all 
the listeners. 



*javax.swing.table.DefaultTableModel.addColumn(Object,Vector)*

public void addColumn(
  java.lang.Object columnName,
  java.util.Vector columnData)

Adds a column to the model. The new column will have the identifier columnName, which may be null. columnData is the optional vector of data for the column. If it is null the 
column is filled with null values. Otherwise, the new data will be added to model starting with the first element going to row 0, etc. This method will send a tableChanged 
notification message to all the listeners. 


    columnName - the identifier of the column being added 
    columnData - optional data of the column being added 

*javax.swing.table.DefaultTableModel.addRow(Object[])*

public void addRow(java.lang.Object[] rowData)

Adds a row to the end of the model. The new row will contain null values unless rowData is specified. Notification of the row being added will be generated. 


    rowData - optional data of the row being added 

*javax.swing.table.DefaultTableModel.addRow(Vector)*

public void addRow(java.util.Vector rowData)

Adds a row to the end of the model. The new row will contain null values unless rowData is specified. Notification of the row being added will be generated. 


    rowData - optional data of the row being added 

*javax.swing.table.DefaultTableModel.convertToVector(Object[])*

protected static |java.util.Vector| convertToVector(java.lang.Object[] anArray)

Returns a vector that contains the same objects as the array. 


    anArray - the array to be converted 

    Returns: the new vector; if anArray is null, returns null 

*javax.swing.table.DefaultTableModel.convertToVector(Object[][])*

protected static |java.util.Vector| convertToVector(java.lang.Object[][] anArray)

Returns a vector of vectors that contains the same objects as the array. 


    anArray - the double array to be converted 

    Returns: the new vector of vectors; if anArray is null, returns null 

*javax.swing.table.DefaultTableModel.getColumnCount()*

public int getColumnCount()

Returns the number of columns in this data table. 



    Returns: the number of columns in the model 

*javax.swing.table.DefaultTableModel.getColumnName(int)*

public |java.lang.String| getColumnName(int column)

Returns the column name. 



    Returns: a name for this column using the string value of the appropriate member in columnIdentifiers. If columnIdentifiers does not have an entry for this index, returns the default name 
             provided by the superclass 

*javax.swing.table.DefaultTableModel.getDataVector()*

public |java.util.Vector| getDataVector()

Returns the Vector of Vectors that contains the table's data values. The vectors contained in the outer vector are each a single row of values. In other words, to get to the cell 
at row 1, column 5: 

((Vector)getDataVector().elementAt(1)).elementAt(5); 



    Returns: the vector of vectors containing the tables data values 

*javax.swing.table.DefaultTableModel.getRowCount()*

public int getRowCount()

Returns the number of rows in this data table. 



    Returns: the number of rows in the model 

*javax.swing.table.DefaultTableModel.getValueAt(int,int)*

public |java.lang.Object| getValueAt(
  int row,
  int column)

Returns an attribute value for the cell at row and column. 


    row - the row whose value is to be queried 
    column - the column whose value is to be queried 

    Returns: the value Object at the specified cell 

*javax.swing.table.DefaultTableModel.insertRow(int,Object[])*

public void insertRow(
  int row,
  java.lang.Object[] rowData)

Inserts a row at row in the model. The new row will contain null values unless rowData is specified. Notification of the row being added will be generated. 


    row - the row index of the row to be inserted 
    rowData - optional data of the row being added 

*javax.swing.table.DefaultTableModel.insertRow(int,Vector)*

public void insertRow(
  int row,
  java.util.Vector rowData)

Inserts a row at row in the model. The new row will contain null values unless rowData is specified. Notification of the row being added will be generated. 


    row - the row index of the row to be inserted 
    rowData - optional data of the row being added 

*javax.swing.table.DefaultTableModel.isCellEditable(int,int)*

public boolean isCellEditable(
  int row,
  int column)

Returns true regardless of parameter values. 


    row - the row whose value is to be queried 
    column - the column whose value is to be queried 

    Returns: 

*javax.swing.table.DefaultTableModel.moveRow(int,int,int)*

public void moveRow(
  int start,
  int end,
  int to)

Moves one or more rows from the inclusive range start to end to the to position in the model. After the move, the row that was at index start will be at index to. This method will 
send a tableChanged notification message to all the listeners. 



Examples of moves: 

1. moveRow(1,3,5); a|B|C|D|e|f|g|h|i|j|k - before a|e|f|g|h|B|C|D|i|j|k - after 

2. moveRow(6,7,1); a|b|c|d|e|f|G|H|i|j|k - before a|G|H|b|c|d|e|f|i|j|k - after 




    start - the starting row index to be moved 
    end - the ending row index to be moved 
    to - the destination of the rows to be moved 

*javax.swing.table.DefaultTableModel.newDataAvailable(TableModelEvent)*

public void newDataAvailable(javax.swing.event.TableModelEvent event)

Equivalent to fireTableChanged. 


    event - the change event 

*javax.swing.table.DefaultTableModel.newRowsAdded(TableModelEvent)*

public void newRowsAdded(javax.swing.event.TableModelEvent e)

Ensures that the new rows have the correct number of columns. This is accomplished by using the setSize method in Vector which truncates vectors which are too long, and appends 
nulls if they are too short. This method also sends out a tableChanged notification message to all the listeners. 


    e - this TableModelEvent describes where the rows were added. If null it assumes all the rows were newly added 

*javax.swing.table.DefaultTableModel.removeRow(int)*

public void removeRow(int row)

Removes the row at row from the model. Notification of the row being removed will be sent to all the listeners. 


    row - the row index of the row to be removed 

*javax.swing.table.DefaultTableModel.rowsRemoved(TableModelEvent)*

public void rowsRemoved(javax.swing.event.TableModelEvent event)

Equivalent to fireTableChanged. 


    event - the change event 

*javax.swing.table.DefaultTableModel.setColumnCount(int)*

public void setColumnCount(int columnCount)

Sets the number of columns in the model. If the new size is greater than the current size, new columns are added to the end of the model with null cell values. If the new size is 
less than the current size, all columns at index columnCount and greater are discarded. 


    columnCount - the new number of columns in the model 

*javax.swing.table.DefaultTableModel.setColumnIdentifiers(Object[])*

public void setColumnIdentifiers(java.lang.Object[] newIdentifiers)

Replaces the column identifiers in the model. If the number of newIdentifiers is greater than the current number of columns, new columns are added to the end of each row in the 
model. If the number of newIdentifiers is less than the current number of columns, all the extra columns at the end of a row are discarded. 


    newIdentifiers - array of column identifiers. If null, set the model to zero columns 

*javax.swing.table.DefaultTableModel.setColumnIdentifiers(Vector)*

public void setColumnIdentifiers(java.util.Vector columnIdentifiers)

Replaces the column identifiers in the model. If the number of newIdentifiers is greater than the current number of columns, new columns are added to the end of each row in the 
model. If the number of newIdentifiers is less than the current number of columns, all the extra columns at the end of a row are discarded. 


    columnIdentifiers - vector of column identifiers. If null, set the model to zero columns 

*javax.swing.table.DefaultTableModel.setDataVector(Object[][],Object[])*

public void setDataVector(
  java.lang.Object[][] dataVector,
  java.lang.Object[] columnIdentifiers)

Replaces the value in the dataVector instance variable with the values in the array dataVector. The first index in the Object[][] array is the row index and the second is the 
column index. columnIdentifiers are the names of the new columns. 


    dataVector - the new data vector 
    columnIdentifiers - the names of the columns 

*javax.swing.table.DefaultTableModel.setDataVector(Vector,Vector)*

public void setDataVector(
  java.util.Vector dataVector,
  java.util.Vector columnIdentifiers)

Replaces the current dataVector instance variable with the new Vector of rows, dataVector. Each row is represented in dataVector as a Vector of Object values. columnIdentifiers 
are the names of the new columns. The first name in columnIdentifiers is mapped to column 0 in dataVector. Each row in dataVector is adjusted to match the number of columns in 
columnIdentifiers either by truncating the Vector if it is too long, or adding null values if it is too short. Note that passing in a null value for dataVector results in 
unspecified behavior, an possibly an exception. 


    dataVector - the new data vector 
    columnIdentifiers - the names of the columns 

*javax.swing.table.DefaultTableModel.setNumRows(int)*

public void setNumRows(int rowCount)

Obsolete as of Java 2 platform v1.3. Please use setRowCount instead. 



*javax.swing.table.DefaultTableModel.setRowCount(int)*

public void setRowCount(int rowCount)

Sets the number of rows in the model. If the new size is greater than the current size, new rows are added to the end of the model If the new size is less than the current size, 
all rows at index rowCount and greater are discarded. 



*javax.swing.table.DefaultTableModel.setValueAt(Object,int,int)*

public void setValueAt(
  java.lang.Object aValue,
  int row,
  int column)

Sets the object value for the cell at column and row. aValue is the new value. This method will generate a tableChanged notification. 


    aValue - the new value; this can be null 
    row - the row whose value is to be changed 
    column - the column whose value is to be changed 



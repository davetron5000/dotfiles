*java.awt.image.renderable.ParameterBlock* *ParameterBlock* A ParameterBlock enc

public class ParameterBlock
  extends    |java.lang.Object|
  implements |java.lang.Cloneable|
             |java.io.Serializable|

|java.awt.image.renderable.ParameterBlock_Description|
|java.awt.image.renderable.ParameterBlock_Fields|
|java.awt.image.renderable.ParameterBlock_Constructors|
|java.awt.image.renderable.ParameterBlock_Methods|

================================================================================

*java.awt.image.renderable.ParameterBlock_Fields*
|java.util.Vector_java.awt.image.renderable.ParameterBlock.parameters|
|java.util.Vector_java.awt.image.renderable.ParameterBlock.sources|

*java.awt.image.renderable.ParameterBlock_Constructors*
|java.awt.image.renderable.ParameterBlock()|A dummy constructor.
|java.awt.image.renderable.ParameterBlock(Vector)|Constructs a ParameterBlock w
|java.awt.image.renderable.ParameterBlock(Vector,Vector)|Constructs a Parameter

*java.awt.image.renderable.ParameterBlock_Methods*
|java.awt.image.renderable.ParameterBlock.add(byte)|Adds a Byte to the list of 
|java.awt.image.renderable.ParameterBlock.add(char)|Adds a Character to the lis
|java.awt.image.renderable.ParameterBlock.add(double)|Adds a Double to the list
|java.awt.image.renderable.ParameterBlock.add(float)|Adds a Float to the list o
|java.awt.image.renderable.ParameterBlock.add(int)|Adds a Integer to the list o
|java.awt.image.renderable.ParameterBlock.add(long)|Adds a Long to the list of 
|java.awt.image.renderable.ParameterBlock.add(Object)|Adds an object to the lis
|java.awt.image.renderable.ParameterBlock.add(short)|Adds a Short to the list o
|java.awt.image.renderable.ParameterBlock.addSource(Object)|Adds an image to en
|java.awt.image.renderable.ParameterBlock.clone()|Creates a copy of a Parameter
|java.awt.image.renderable.ParameterBlock.getByteParameter(int)|A convenience m
|java.awt.image.renderable.ParameterBlock.getCharParameter(int)|A convenience m
|java.awt.image.renderable.ParameterBlock.getDoubleParameter(int)|A convenience
|java.awt.image.renderable.ParameterBlock.getFloatParameter(int)|A convenience 
|java.awt.image.renderable.ParameterBlock.getIntParameter(int)|A convenience me
|java.awt.image.renderable.ParameterBlock.getLongParameter(int)|A convenience m
|java.awt.image.renderable.ParameterBlock.getNumParameters()|Returns the number
|java.awt.image.renderable.ParameterBlock.getNumSources()|Returns the number of
|java.awt.image.renderable.ParameterBlock.getObjectParameter(int)|Gets a parame
|java.awt.image.renderable.ParameterBlock.getParamClasses()|Returns an array of
|java.awt.image.renderable.ParameterBlock.getParameters()|Returns the entire Ve
|java.awt.image.renderable.ParameterBlock.getRenderableSource(int)|Returns a so
|java.awt.image.renderable.ParameterBlock.getRenderedSource(int)|Returns a sour
|java.awt.image.renderable.ParameterBlock.getShortParameter(int)|A convenience 
|java.awt.image.renderable.ParameterBlock.getSource(int)|Returns a source as a 
|java.awt.image.renderable.ParameterBlock.getSources()|Returns the entire Vecto
|java.awt.image.renderable.ParameterBlock.removeParameters()|Clears the list of
|java.awt.image.renderable.ParameterBlock.removeSources()|Clears the list of so
|java.awt.image.renderable.ParameterBlock.set(byte,int)|Replaces an Object in t
|java.awt.image.renderable.ParameterBlock.set(char,int)|Replaces an Object in t
|java.awt.image.renderable.ParameterBlock.set(double,int)|Replaces an Object in
|java.awt.image.renderable.ParameterBlock.set(float,int)|Replaces an Object in 
|java.awt.image.renderable.ParameterBlock.set(int,int)|Replaces an Object in th
|java.awt.image.renderable.ParameterBlock.set(long,int)|Replaces an Object in t
|java.awt.image.renderable.ParameterBlock.set(Object,int)|Replaces an Object in
|java.awt.image.renderable.ParameterBlock.set(short,int)|Replaces an Object in 
|java.awt.image.renderable.ParameterBlock.setParameters(Vector)|Sets the entire
|java.awt.image.renderable.ParameterBlock.setSource(Object,int)|Replaces an ent
|java.awt.image.renderable.ParameterBlock.setSources(Vector)|Sets the entire Ve
|java.awt.image.renderable.ParameterBlock.shallowClone()|Creates a shallow copy

*java.awt.image.renderable.ParameterBlock_Description*

A ParameterBlock encapsulates all the information about sources and parameters 
(Objects) required by a RenderableImageOp, or other classes that process 
images. 

Although it is possible to place arbitrary objects in the source Vector, users 
of this class may impose semantic constraints such as requiring all sources to 
be RenderedImages or RenderableImage. ParameterBlock itself is merely a 
container and performs no checking on source or parameter types. 

All parameters in a ParameterBlock are objects; convenience add and set methods 
are available that take arguments of base type and construct the appropriate 
subclass of Number (such as Integer or Float). Corresponding get methods 
perform a downward cast and have return values of base type; an exception will 
be thrown if the stored values do not have the correct type. There is no way to 
distinguish between the results of "short s; add(s)" and "add(new Short(s))". 

Note that the get and set methods operate on references. Therefore, one must be 
careful not to share references between ParameterBlocks when this is 
inappropriate. For example, to create a new ParameterBlock that is equal to an 
old one except for an added source, one might be tempted to write: 



ParameterBlock addSource(ParameterBlock pb, RenderableImage im) { 
ParameterBlock pb1 = new ParameterBlock(pb.getSources()); pb1.addSource(im); 
return pb1; } 

This code will have the side effect of altering the original ParameterBlock, 
since the getSources operation returned a reference to its source Vector. Both 
pb and pb1 share their source Vector, and a change in either is visible to 
both. 

A correct way to write the addSource function is to clone the source Vector: 



ParameterBlock addSource (ParameterBlock pb, RenderableImage im) { 
ParameterBlock pb1 = new ParameterBlock(pb.getSources().clone()); 
pb1.addSource(im); return pb1; } 

The clone method of ParameterBlock has been defined to perform a clone of both 
the source and parameter Vectors for this reason. A standard, shallow clone is 
available as shallowClone. 

The addSource, setSource, add, and set methods are defined to return 'this' 
after adding their argument. This allows use of syntax like: 



ParameterBlock pb = new ParameterBlock(); op = new 
RenderableImageOp("operation", pb.add(arg1).add(arg2)); 


*java.util.Vector_java.awt.image.renderable.ParameterBlock.parameters*

A ParameterBlock encapsulates all the information about sources and parameters 
(Objects) required by a RenderableImageOp, or other classes that process 
images. 

Although it is possible to place arbitrary objects in the source Vector, users 
of this class may impose semantic constraints such as requiring all sources to 
be RenderedImages or RenderableImage. ParameterBlock itself is merely a 
container and performs no checking on source or parameter types. 

All parameters in a ParameterBlock are objects; convenience add and set methods 
are available that take arguments of base type and construct the appropriate 
subclass of Number (such as Integer or Float). Corresponding get methods 
perform a downward cast and have return values of base type; an exception will 
be thrown if the stored values do not have the correct type. There is no way to 
distinguish between the results of "short s; add(s)" and "add(new Short(s))". 

Note that the get and set methods operate on references. Therefore, one must be 
careful not to share references between ParameterBlocks when this is 
inappropriate. For example, to create a new ParameterBlock that is equal to an 
old one except for an added source, one might be tempted to write: 



ParameterBlock addSource(ParameterBlock pb, RenderableImage im) { 
ParameterBlock pb1 = new ParameterBlock(pb.getSources()); pb1.addSource(im); 
return pb1; } 

This code will have the side effect of altering the original ParameterBlock, 
since the getSources operation returned a reference to its source Vector. Both 
pb and pb1 share their source Vector, and a change in either is visible to 
both. 

A correct way to write the addSource function is to clone the source Vector: 



ParameterBlock addSource (ParameterBlock pb, RenderableImage im) { 
ParameterBlock pb1 = new ParameterBlock(pb.getSources().clone()); 
pb1.addSource(im); return pb1; } 

The clone method of ParameterBlock has been defined to perform a clone of both 
the source and parameter Vectors for this reason. A standard, shallow clone is 
available as shallowClone. 

The addSource, setSource, add, and set methods are defined to return 'this' 
after adding their argument. This allows use of syntax like: 



ParameterBlock pb = new ParameterBlock(); op = new 
RenderableImageOp("operation", pb.add(arg1).add(arg2)); 


*java.util.Vector_java.awt.image.renderable.ParameterBlock.sources*

A ParameterBlock encapsulates all the information about sources and parameters 
(Objects) required by a RenderableImageOp, or other classes that process 
images. 

Although it is possible to place arbitrary objects in the source Vector, users 
of this class may impose semantic constraints such as requiring all sources to 
be RenderedImages or RenderableImage. ParameterBlock itself is merely a 
container and performs no checking on source or parameter types. 

All parameters in a ParameterBlock are objects; convenience add and set methods 
are available that take arguments of base type and construct the appropriate 
subclass of Number (such as Integer or Float). Corresponding get methods 
perform a downward cast and have return values of base type; an exception will 
be thrown if the stored values do not have the correct type. There is no way to 
distinguish between the results of "short s; add(s)" and "add(new Short(s))". 

Note that the get and set methods operate on references. Therefore, one must be 
careful not to share references between ParameterBlocks when this is 
inappropriate. For example, to create a new ParameterBlock that is equal to an 
old one except for an added source, one might be tempted to write: 



ParameterBlock addSource(ParameterBlock pb, RenderableImage im) { 
ParameterBlock pb1 = new ParameterBlock(pb.getSources()); pb1.addSource(im); 
return pb1; } 

This code will have the side effect of altering the original ParameterBlock, 
since the getSources operation returned a reference to its source Vector. Both 
pb and pb1 share their source Vector, and a change in either is visible to 
both. 

A correct way to write the addSource function is to clone the source Vector: 



ParameterBlock addSource (ParameterBlock pb, RenderableImage im) { 
ParameterBlock pb1 = new ParameterBlock(pb.getSources().clone()); 
pb1.addSource(im); return pb1; } 

The clone method of ParameterBlock has been defined to perform a clone of both 
the source and parameter Vectors for this reason. A standard, shallow clone is 
available as shallowClone. 

The addSource, setSource, add, and set methods are defined to return 'this' 
after adding their argument. This allows use of syntax like: 



ParameterBlock pb = new ParameterBlock(); op = new 
RenderableImageOp("operation", pb.add(arg1).add(arg2)); 



*java.awt.image.renderable.ParameterBlock()*

public ParameterBlock()

A dummy constructor. 


*java.awt.image.renderable.ParameterBlock(Vector)*

public ParameterBlock(java.util.Vector sources)

Constructs a ParameterBlock with a given Vector of sources. 

    sources - a Vector of source images 

*java.awt.image.renderable.ParameterBlock(Vector,Vector)*

public ParameterBlock(
  java.util.Vector sources,
  java.util.Vector parameters)

Constructs a ParameterBlock with a given Vector of sources and Vector of 
parameters. 

    sources - a Vector of source images 
    parameters - a Vector of parameters to be used in the rendering operation 

*java.awt.image.renderable.ParameterBlock.add(byte)*

public |java.awt.image.renderable.ParameterBlock| add(byte b)

Adds a Byte to the list of parameters. 

    b - the byte to add to the parameters Vector 

    Returns: a new ParameterBlock containing the specified parameter. 
*java.awt.image.renderable.ParameterBlock.add(char)*

public |java.awt.image.renderable.ParameterBlock| add(char c)

Adds a Character to the list of parameters. 

    c - the char to add to the parameters Vector 

    Returns: a new ParameterBlock containing the specified parameter. 
*java.awt.image.renderable.ParameterBlock.add(double)*

public |java.awt.image.renderable.ParameterBlock| add(double d)

Adds a Double to the list of parameters. 

    d - the double to add to the parameters Vector 

    Returns: a new ParameterBlock containing the specified parameter. 
*java.awt.image.renderable.ParameterBlock.add(float)*

public |java.awt.image.renderable.ParameterBlock| add(float f)

Adds a Float to the list of parameters. 

    f - the float to add to the parameters Vector 

    Returns: a new ParameterBlock containing the specified parameter. 
*java.awt.image.renderable.ParameterBlock.add(int)*

public |java.awt.image.renderable.ParameterBlock| add(int i)

Adds a Integer to the list of parameters. 

    i - the int to add to the parameters Vector 

    Returns: a new ParameterBlock containing the specified parameter. 
*java.awt.image.renderable.ParameterBlock.add(long)*

public |java.awt.image.renderable.ParameterBlock| add(long l)

Adds a Long to the list of parameters. 

    l - the long to add to the parameters Vector 

    Returns: a new ParameterBlock containing the specified parameter. 
*java.awt.image.renderable.ParameterBlock.add(Object)*

public |java.awt.image.renderable.ParameterBlock| add(java.lang.Object obj)

Adds an object to the list of parameters. 

    obj - the Object to add to the parameters Vector 

    Returns: a new ParameterBlock containing the specified parameter. 
*java.awt.image.renderable.ParameterBlock.add(short)*

public |java.awt.image.renderable.ParameterBlock| add(short s)

Adds a Short to the list of parameters. 

    s - the short to add to the parameters Vector 

    Returns: a new ParameterBlock containing the specified parameter. 
*java.awt.image.renderable.ParameterBlock.addSource(Object)*

public |java.awt.image.renderable.ParameterBlock| addSource(java.lang.Object source)

Adds an image to end of the list of sources. The image is stored as an object 
in order to allow new node types in the future. 

    source - an image object to be stored in the source list. 

    Returns: a new ParameterBlock containing the specified source. 
*java.awt.image.renderable.ParameterBlock.clone()*

public |java.lang.Object| clone()

Creates a copy of a ParameterBlock. The source and parameter Vectors are 
cloned, but the actual sources and parameters are copied by reference. This 
allows modifications to the order and number of sources and parameters in the 
clone to be invisible to the original ParameterBlock. Changes to the shared 
sources or parameters themselves will still be visible. 


    Returns: an Object clone of the ParameterBlock. 
*java.awt.image.renderable.ParameterBlock.getByteParameter(int)*

public byte getByteParameter(int index)

A convenience method to return a parameter as a byte. An exception is thrown if 
the parameter is null or not a Byte. 

    index - the index of the parameter to be returned. 

    Returns: the parameter at the specified index as a byte value. 
*java.awt.image.renderable.ParameterBlock.getCharParameter(int)*

public char getCharParameter(int index)

A convenience method to return a parameter as a char. An exception is thrown if 
the parameter is null or not a Character. 

    index - the index of the parameter to be returned. 

    Returns: the parameter at the specified index as a char value. 
*java.awt.image.renderable.ParameterBlock.getDoubleParameter(int)*

public double getDoubleParameter(int index)

A convenience method to return a parameter as a double. An exception is thrown 
if the parameter is null or not a Double. 

    index - the index of the parameter to be returned. 

    Returns: the parameter at the specified index as a double value. 
*java.awt.image.renderable.ParameterBlock.getFloatParameter(int)*

public float getFloatParameter(int index)

A convenience method to return a parameter as a float. An exception is thrown 
if the parameter is null or not a Float. 

    index - the index of the parameter to be returned. 

    Returns: the parameter at the specified index as a float value. 
*java.awt.image.renderable.ParameterBlock.getIntParameter(int)*

public int getIntParameter(int index)

A convenience method to return a parameter as an int. An exception is thrown if 
the parameter is null or not an Integer. 

    index - the index of the parameter to be returned. 

    Returns: the parameter at the specified index as a int value. 
*java.awt.image.renderable.ParameterBlock.getLongParameter(int)*

public long getLongParameter(int index)

A convenience method to return a parameter as a long. An exception is thrown if 
the parameter is null or not a Long. 

    index - the index of the parameter to be returned. 

    Returns: the parameter at the specified index as a long value. 
*java.awt.image.renderable.ParameterBlock.getNumParameters()*

public int getNumParameters()

Returns the number of parameters (not including source images). 


    Returns: the number of parameters in the parameters Vector. 
*java.awt.image.renderable.ParameterBlock.getNumSources()*

public int getNumSources()

Returns the number of source images. 


    Returns: the number of source images in the sources Vector. 
*java.awt.image.renderable.ParameterBlock.getObjectParameter(int)*

public |java.lang.Object| getObjectParameter(int index)

Gets a parameter as an object. 

    index - the index of the parameter to get 

    Returns: an Object representing the the parameter at the specified index into the 
             parameters Vector. 
*java.awt.image.renderable.ParameterBlock.getParamClasses()*

public |java.lang.Class| getParamClasses()

Returns an array of Class objects describing the types of the parameters. 


    Returns: an array of Class objects. 
*java.awt.image.renderable.ParameterBlock.getParameters()*

public |java.util.Vector| getParameters()

Returns the entire Vector of parameters. 


    Returns: the parameters Vector. 
*java.awt.image.renderable.ParameterBlock.getRenderableSource(int)*

public |java.awt.image.renderable.RenderableImage| getRenderableSource(int index)

Returns a source as a RenderableImage. This method is a convenience method. An 
exception will be thrown if the sources is not a RenderableImage. 

    index - the index of the source to be returned 

    Returns: a RenderableImage that represents the source image that is at the specified 
             index in the sources Vector. 
*java.awt.image.renderable.ParameterBlock.getRenderedSource(int)*

public |java.awt.image.RenderedImage| getRenderedSource(int index)

Returns a source as a RenderedImage. This method is a convenience method. An 
exception will be thrown if the source is not a RenderedImage. 

    index - the index of the source to be returned 

    Returns: a RenderedImage that represents the source image that is at the specified index 
             in the sources Vector. 
*java.awt.image.renderable.ParameterBlock.getShortParameter(int)*

public short getShortParameter(int index)

A convenience method to return a parameter as a short. An exception is thrown 
if the parameter is null or not a Short. 

    index - the index of the parameter to be returned. 

    Returns: the parameter at the specified index as a short value. 
*java.awt.image.renderable.ParameterBlock.getSource(int)*

public |java.lang.Object| getSource(int index)

Returns a source as a general Object. The caller must cast it into an 
appropriate type. 

    index - the index of the source to be returned. 

    Returns: an Object that represents the source located at the specified index in the 
             sources Vector. 
*java.awt.image.renderable.ParameterBlock.getSources()*

public |java.util.Vector| getSources()

Returns the entire Vector of sources. 


    Returns: the sources Vector. 
*java.awt.image.renderable.ParameterBlock.removeParameters()*

public void removeParameters()

Clears the list of parameters. 


*java.awt.image.renderable.ParameterBlock.removeSources()*

public void removeSources()

Clears the list of source images. 


*java.awt.image.renderable.ParameterBlock.set(byte,int)*

public |java.awt.image.renderable.ParameterBlock| set(
  byte b,
  int index)

Replaces an Object in the list of parameters with a Byte. If the index lies 
beyond the current source list, the list is extended with nulls as needed. 

    b - the parameter that replaces the parameter at the specified index in the 
       parameters Vector 
    index - the index of the parameter to be replaced with the specified parameter 

    Returns: a new ParameterBlock containing the specified parameter. 
*java.awt.image.renderable.ParameterBlock.set(char,int)*

public |java.awt.image.renderable.ParameterBlock| set(
  char c,
  int index)

Replaces an Object in the list of parameters with a Character. If the index 
lies beyond the current source list, the list is extended with nulls as needed. 

    c - the parameter that replaces the parameter at the specified index in the 
       parameters Vector 
    index - the index of the parameter to be replaced with the specified parameter 

    Returns: a new ParameterBlock containing the specified parameter. 
*java.awt.image.renderable.ParameterBlock.set(double,int)*

public |java.awt.image.renderable.ParameterBlock| set(
  double d,
  int index)

Replaces an Object in the list of parameters with a Double. If the index lies 
beyond the current source list, the list is extended with nulls as needed. 

    d - the parameter that replaces the parameter at the specified index in the 
       parameters Vector 
    index - the index of the parameter to be replaced with the specified parameter 

    Returns: a new ParameterBlock containing the specified parameter. 
*java.awt.image.renderable.ParameterBlock.set(float,int)*

public |java.awt.image.renderable.ParameterBlock| set(
  float f,
  int index)

Replaces an Object in the list of parameters with a Float. If the index lies 
beyond the current source list, the list is extended with nulls as needed. 

    f - the parameter that replaces the parameter at the specified index in the 
       parameters Vector 
    index - the index of the parameter to be replaced with the specified parameter 

    Returns: a new ParameterBlock containing the specified parameter. 
*java.awt.image.renderable.ParameterBlock.set(int,int)*

public |java.awt.image.renderable.ParameterBlock| set(
  int i,
  int index)

Replaces an Object in the list of parameters with an Integer. If the index lies 
beyond the current source list, the list is extended with nulls as needed. 

    i - the parameter that replaces the parameter at the specified index in the 
       parameters Vector 
    index - the index of the parameter to be replaced with the specified parameter 

    Returns: a new ParameterBlock containing the specified parameter. 
*java.awt.image.renderable.ParameterBlock.set(long,int)*

public |java.awt.image.renderable.ParameterBlock| set(
  long l,
  int index)

Replaces an Object in the list of parameters with a Long. If the index lies 
beyond the current source list, the list is extended with nulls as needed. 

    l - the parameter that replaces the parameter at the specified index in the 
       parameters Vector 
    index - the index of the parameter to be replaced with the specified parameter 

    Returns: a new ParameterBlock containing the specified parameter. 
*java.awt.image.renderable.ParameterBlock.set(Object,int)*

public |java.awt.image.renderable.ParameterBlock| set(
  java.lang.Object obj,
  int index)

Replaces an Object in the list of parameters. If the index lies beyond the 
current source list, the list is extended with nulls as needed. 

    obj - the parameter that replaces the parameter at the specified index in the 
       parameters Vector 
    index - the index of the parameter to be replaced with the specified parameter 

    Returns: a new ParameterBlock containing the specified parameter. 
*java.awt.image.renderable.ParameterBlock.set(short,int)*

public |java.awt.image.renderable.ParameterBlock| set(
  short s,
  int index)

Replaces an Object in the list of parameters with a Short. If the index lies 
beyond the current source list, the list is extended with nulls as needed. 

    s - the parameter that replaces the parameter at the specified index in the 
       parameters Vector 
    index - the index of the parameter to be replaced with the specified parameter 

    Returns: a new ParameterBlock containing the specified parameter. 
*java.awt.image.renderable.ParameterBlock.setParameters(Vector)*

public void setParameters(java.util.Vector parameters)

Sets the entire Vector of parameters to a given Vector. 

    parameters - the specified Vector of parameters 

*java.awt.image.renderable.ParameterBlock.setSource(Object,int)*

public |java.awt.image.renderable.ParameterBlock| setSource(
  java.lang.Object source,
  int index)

Replaces an entry in the list of source with a new source. If the index lies 
beyond the current source list, the list is extended with nulls as needed. 

    source - the specified source image 
    index - the index into the sources Vector at which to insert the specified source 

    Returns: a new ParameterBlock that contains the specified source at the specified index. 
*java.awt.image.renderable.ParameterBlock.setSources(Vector)*

public void setSources(java.util.Vector sources)

Sets the entire Vector of sources to a given Vector. 

    sources - the Vector of source images 

*java.awt.image.renderable.ParameterBlock.shallowClone()*

public |java.lang.Object| shallowClone()

Creates a shallow copy of a ParameterBlock. The source and parameter Vectors 
are copied by reference -- additions or changes will be visible to both 
versions. 


    Returns: an Object clone of the ParameterBlock. 


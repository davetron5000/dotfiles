*javax.security.sasl.Sasl* *Sasl* A static class for creating SASL clients and s

public class Sasl
  extends    |java.lang.Object|

|javax.security.sasl.Sasl_Description|
|javax.security.sasl.Sasl_Fields|
|javax.security.sasl.Sasl_Constructors|
|javax.security.sasl.Sasl_Methods|

================================================================================

*javax.security.sasl.Sasl_Fields*
|java.lang.String_javax.security.sasl.Sasl.MAX_BUFFER|
|java.lang.String_javax.security.sasl.Sasl.POLICY_FORWARD_SECRECY|
|java.lang.String_javax.security.sasl.Sasl.POLICY_NOACTIVE|
|java.lang.String_javax.security.sasl.Sasl.POLICY_NOANONYMOUS|
|java.lang.String_javax.security.sasl.Sasl.POLICY_NODICTIONARY|
|java.lang.String_javax.security.sasl.Sasl.POLICY_NOPLAINTEXT|
|java.lang.String_javax.security.sasl.Sasl.POLICY_PASS_CREDENTIALS|
|java.lang.String_javax.security.sasl.Sasl.QOP|
|java.lang.String_javax.security.sasl.Sasl.RAW_SEND_SIZE|
|java.lang.String_javax.security.sasl.Sasl.REUSE|
|java.lang.String_javax.security.sasl.Sasl.SERVER_AUTH|
|java.lang.String_javax.security.sasl.Sasl.STRENGTH|

*javax.security.sasl.Sasl_Methods*
|javax.security.sasl.Sasl.createSaslClient(String[],String,String,String,Map,CallbackHandler)|
|javax.security.sasl.Sasl.createSaslServer(String,String,String,Map,CallbackHandler)|
|javax.security.sasl.Sasl.getSaslClientFactories()|Gets an enumeration of known
|javax.security.sasl.Sasl.getSaslServerFactories()|Gets an enumeration of known

*javax.security.sasl.Sasl_Description*

A static class for creating SASL clients and servers. 

This class defines the policy of how to locate, load, and instantiate SASL 
clients and servers. 

For example, an application or library gets a SASL client by doing something 
like: 

SaslClient sc = Sasl.createSaslClient(mechanisms, authorizationId, protocol, 
serverName, props, callbackHandler); 

It can then proceed to use the instance to create an authentication connection. 

Similarly, a server gets a SASL server by using code that looks as follows: 

SaslServer ss = Sasl.createSaslServer(mechanism, protocol, serverName, props, 
callbackHandler); 


*java.lang.String_javax.security.sasl.Sasl.MAX_BUFFER*

A static class for creating SASL clients and servers. 

This class defines the policy of how to locate, load, and instantiate SASL 
clients and servers. 

For example, an application or library gets a SASL client by doing something 
like: 

SaslClient sc = Sasl.createSaslClient(mechanisms, authorizationId, protocol, 
serverName, props, callbackHandler); 

It can then proceed to use the instance to create an authentication connection. 

Similarly, a server gets a SASL server by using code that looks as follows: 

SaslServer ss = Sasl.createSaslServer(mechanism, protocol, serverName, props, 
callbackHandler); 


*java.lang.String_javax.security.sasl.Sasl.POLICY_FORWARD_SECRECY*

A static class for creating SASL clients and servers. 

This class defines the policy of how to locate, load, and instantiate SASL 
clients and servers. 

For example, an application or library gets a SASL client by doing something 
like: 

SaslClient sc = Sasl.createSaslClient(mechanisms, authorizationId, protocol, 
serverName, props, callbackHandler); 

It can then proceed to use the instance to create an authentication connection. 

Similarly, a server gets a SASL server by using code that looks as follows: 

SaslServer ss = Sasl.createSaslServer(mechanism, protocol, serverName, props, 
callbackHandler); 


*java.lang.String_javax.security.sasl.Sasl.POLICY_NOACTIVE*

A static class for creating SASL clients and servers. 

This class defines the policy of how to locate, load, and instantiate SASL 
clients and servers. 

For example, an application or library gets a SASL client by doing something 
like: 

SaslClient sc = Sasl.createSaslClient(mechanisms, authorizationId, protocol, 
serverName, props, callbackHandler); 

It can then proceed to use the instance to create an authentication connection. 

Similarly, a server gets a SASL server by using code that looks as follows: 

SaslServer ss = Sasl.createSaslServer(mechanism, protocol, serverName, props, 
callbackHandler); 


*java.lang.String_javax.security.sasl.Sasl.POLICY_NOANONYMOUS*

A static class for creating SASL clients and servers. 

This class defines the policy of how to locate, load, and instantiate SASL 
clients and servers. 

For example, an application or library gets a SASL client by doing something 
like: 

SaslClient sc = Sasl.createSaslClient(mechanisms, authorizationId, protocol, 
serverName, props, callbackHandler); 

It can then proceed to use the instance to create an authentication connection. 

Similarly, a server gets a SASL server by using code that looks as follows: 

SaslServer ss = Sasl.createSaslServer(mechanism, protocol, serverName, props, 
callbackHandler); 


*java.lang.String_javax.security.sasl.Sasl.POLICY_NODICTIONARY*

A static class for creating SASL clients and servers. 

This class defines the policy of how to locate, load, and instantiate SASL 
clients and servers. 

For example, an application or library gets a SASL client by doing something 
like: 

SaslClient sc = Sasl.createSaslClient(mechanisms, authorizationId, protocol, 
serverName, props, callbackHandler); 

It can then proceed to use the instance to create an authentication connection. 

Similarly, a server gets a SASL server by using code that looks as follows: 

SaslServer ss = Sasl.createSaslServer(mechanism, protocol, serverName, props, 
callbackHandler); 


*java.lang.String_javax.security.sasl.Sasl.POLICY_NOPLAINTEXT*

A static class for creating SASL clients and servers. 

This class defines the policy of how to locate, load, and instantiate SASL 
clients and servers. 

For example, an application or library gets a SASL client by doing something 
like: 

SaslClient sc = Sasl.createSaslClient(mechanisms, authorizationId, protocol, 
serverName, props, callbackHandler); 

It can then proceed to use the instance to create an authentication connection. 

Similarly, a server gets a SASL server by using code that looks as follows: 

SaslServer ss = Sasl.createSaslServer(mechanism, protocol, serverName, props, 
callbackHandler); 


*java.lang.String_javax.security.sasl.Sasl.POLICY_PASS_CREDENTIALS*

A static class for creating SASL clients and servers. 

This class defines the policy of how to locate, load, and instantiate SASL 
clients and servers. 

For example, an application or library gets a SASL client by doing something 
like: 

SaslClient sc = Sasl.createSaslClient(mechanisms, authorizationId, protocol, 
serverName, props, callbackHandler); 

It can then proceed to use the instance to create an authentication connection. 

Similarly, a server gets a SASL server by using code that looks as follows: 

SaslServer ss = Sasl.createSaslServer(mechanism, protocol, serverName, props, 
callbackHandler); 


*java.lang.String_javax.security.sasl.Sasl.QOP*

A static class for creating SASL clients and servers. 

This class defines the policy of how to locate, load, and instantiate SASL 
clients and servers. 

For example, an application or library gets a SASL client by doing something 
like: 

SaslClient sc = Sasl.createSaslClient(mechanisms, authorizationId, protocol, 
serverName, props, callbackHandler); 

It can then proceed to use the instance to create an authentication connection. 

Similarly, a server gets a SASL server by using code that looks as follows: 

SaslServer ss = Sasl.createSaslServer(mechanism, protocol, serverName, props, 
callbackHandler); 


*java.lang.String_javax.security.sasl.Sasl.RAW_SEND_SIZE*

A static class for creating SASL clients and servers. 

This class defines the policy of how to locate, load, and instantiate SASL 
clients and servers. 

For example, an application or library gets a SASL client by doing something 
like: 

SaslClient sc = Sasl.createSaslClient(mechanisms, authorizationId, protocol, 
serverName, props, callbackHandler); 

It can then proceed to use the instance to create an authentication connection. 

Similarly, a server gets a SASL server by using code that looks as follows: 

SaslServer ss = Sasl.createSaslServer(mechanism, protocol, serverName, props, 
callbackHandler); 


*java.lang.String_javax.security.sasl.Sasl.REUSE*

A static class for creating SASL clients and servers. 

This class defines the policy of how to locate, load, and instantiate SASL 
clients and servers. 

For example, an application or library gets a SASL client by doing something 
like: 

SaslClient sc = Sasl.createSaslClient(mechanisms, authorizationId, protocol, 
serverName, props, callbackHandler); 

It can then proceed to use the instance to create an authentication connection. 

Similarly, a server gets a SASL server by using code that looks as follows: 

SaslServer ss = Sasl.createSaslServer(mechanism, protocol, serverName, props, 
callbackHandler); 


*java.lang.String_javax.security.sasl.Sasl.SERVER_AUTH*

A static class for creating SASL clients and servers. 

This class defines the policy of how to locate, load, and instantiate SASL 
clients and servers. 

For example, an application or library gets a SASL client by doing something 
like: 

SaslClient sc = Sasl.createSaslClient(mechanisms, authorizationId, protocol, 
serverName, props, callbackHandler); 

It can then proceed to use the instance to create an authentication connection. 

Similarly, a server gets a SASL server by using code that looks as follows: 

SaslServer ss = Sasl.createSaslServer(mechanism, protocol, serverName, props, 
callbackHandler); 


*java.lang.String_javax.security.sasl.Sasl.STRENGTH*

A static class for creating SASL clients and servers. 

This class defines the policy of how to locate, load, and instantiate SASL 
clients and servers. 

For example, an application or library gets a SASL client by doing something 
like: 

SaslClient sc = Sasl.createSaslClient(mechanisms, authorizationId, protocol, 
serverName, props, callbackHandler); 

It can then proceed to use the instance to create an authentication connection. 

Similarly, a server gets a SASL server by using code that looks as follows: 

SaslServer ss = Sasl.createSaslServer(mechanism, protocol, serverName, props, 
callbackHandler); 



*javax.security.sasl.Sasl.createSaslClient(String[],String,String,String,Map,CallbackHandler)*

public static |javax.security.sasl.SaslClient| createSaslClient(
  java.lang.String[] mechanisms,
  java.lang.String authorizationId,
  java.lang.String protocol,
  java.lang.String serverName,
  java.util.Map props,
  javax.security.auth.callback.CallbackHandler cbh)
  throws |javax.security.sasl.SaslException|
         
Creates a SaslClient using the parameters supplied. 

This method uses the JCA Security Provider Framework, described in the "Java 
Cryptography Architecture API Specification & Reference", for locating and 
selecting a SaslClient implementation. 

First, it obtains an ordered list of SaslClientFactory instances from the 
registered security providers for the "SaslClientFactory" service and the 
specified SASL mechanism(s). It then invokes createSaslClient() on each factory 
instance on the list until one produces a non-null SaslClient instance. It 
returns the non-null SaslClient instance, or null if the search fails to 
produce a non-null SaslClient instance. 

A security provider for SaslClientFactory registers with the JCA Security 
Provider Framework keys of the form SaslClientFactory.mechanism_name 

and values that are class names of implementations of 
javax.security.sasl.SaslClientFactory. 

For example, a provider that contains a factory class, 
com.wiz.sasl.digest.ClientFactory, that supports the "DIGEST-MD5" mechanism 
would register the following entry with the JCA: SaslClientFactory.DIGEST-MD5 
com.wiz.sasl.digest.ClientFactory 

See the "Java Cryptography Architecture API Specification & Reference" for 
information about how to install and configure security service providers. 

    mechanisms - The non-null list of mechanism names to try. Each is the IANA-registered name 
       of a SASL mechanism. (e.g. "GSSAPI", "CRAM-MD5"). 
    authorizationId - The possibly null protocol-dependent identification to be used for 
       authorization. If null or empty, the server derives an authorization ID 
       from the client's authentication credentials. When the SASL 
       authentication completes successfully, the specified entity is granted 
       access. 
    protocol - The non-null string name of the protocol for which the authentication is being 
       performed (e.g., "ldap"). 
    serverName - The non-null fully-qualified host name of the server to authenticate to. 
    props - The possibly null set of properties used to select the SASL mechanism and to 
       configure the authentication exchange of the selected mechanism. For 
       example, if props contains the Sasl.POLICY_NOPLAINTEXT property with the 
       value "true", then the selected SASL mechanism must not be susceptible 
       to simple plain passive attacks. In addition to the standard properties 
       declared in this class, other, possibly mechanism-specific, properties 
       can be included. Properties not relevant to the selected mechanism are 
       ignored. 
    cbh - The possibly null callback handler to used by the SASL mechanisms to get 
       further information from the application/library to complete the 
       authentication. For example, a SASL mechanism might require the 
       authentication ID, password and realm from the caller. The 
       authentication ID is requested by using a NameCallback. The password is 
       requested by using a PasswordCallback. The realm is requested by using a 
       RealmChoiceCallback if there is a list of realms to choose from, and by 
       using a RealmCallback if the realm must be entered. 

    Returns: A possibly null SaslClient created using the parameters supplied. If null, 
             cannot find a SaslClientFactory that will produce one. 
*javax.security.sasl.Sasl.createSaslServer(String,String,String,Map,CallbackHandler)*

public static |javax.security.sasl.SaslServer| createSaslServer(
  java.lang.String mechanism,
  java.lang.String protocol,
  java.lang.String serverName,
  java.util.Map props,
  javax.security.auth.callback.CallbackHandler cbh)
  throws |javax.security.sasl.SaslException|
         
Creates a SaslServer for the specified mechanism. 

This method uses the JCA Security Provider Framework, described in the "Java 
Cryptography Architecture API Specification & Reference", for locating and 
selecting a SaslServer implementation. 

First, it obtains an ordered list of SaslServerFactory instances from the 
registered security providers for the "SaslServerFactory" service and the 
specified mechanism. It then invokes createSaslServer() on each factory 
instance on the list until one produces a non-null SaslServer instance. It 
returns the non-null SaslServer instance, or null if the search fails to 
produce a non-null SaslServer instance. 

A security provider for SaslServerFactory registers with the JCA Security 
Provider Framework keys of the form SaslServerFactory.mechanism_name 

and values that are class names of implementations of 
javax.security.sasl.SaslServerFactory. 

For example, a provider that contains a factory class, 
com.wiz.sasl.digest.ServerFactory, that supports the "DIGEST-MD5" mechanism 
would register the following entry with the JCA: SaslServerFactory.DIGEST-MD5 
com.wiz.sasl.digest.ServerFactory 

See the "Java Cryptography Architecture API Specification & Reference" for 
information about how to install and configure security service providers. 

    mechanism - The non-null mechanism name. It must be an IANA-registered name of a SASL 
       mechanism. (e.g. "GSSAPI", "CRAM-MD5"). 
    protocol - The non-null string name of the protocol for which the authentication is being 
       performed (e.g., "ldap"). 
    serverName - The non-null fully qualified host name of the server. 
    props - The possibly null set of properties used to select the SASL mechanism and to 
       configure the authentication exchange of the selected mechanism. For 
       example, if props contains the Sasl.POLICY_NOPLAINTEXT property with the 
       value "true", then the selected SASL mechanism must not be susceptible 
       to simple plain passive attacks. In addition to the standard properties 
       declared in this class, other, possibly mechanism-specific, properties 
       can be included. Properties not relevant to the selected mechanism are 
       ignored. 
    cbh - The possibly null callback handler to used by the SASL mechanisms to get 
       further information from the application/library to complete the 
       authentication. For example, a SASL mechanism might require the 
       authentication ID, password and realm from the caller. The 
       authentication ID is requested by using a NameCallback. The password is 
       requested by using a PasswordCallback. The realm is requested by using a 
       RealmChoiceCallback if there is a list of realms to choose from, and by 
       using a RealmCallback if the realm must be entered. 

    Returns: A possibly null SaslServer created using the parameters supplied. If null, 
             cannot find a SaslServerFactory that will produce one. 
*javax.security.sasl.Sasl.getSaslClientFactories()*

public static |java.util.Enumeration| getSaslClientFactories()

Gets an enumeration of known factories for producing SaslClient. This method 
uses the same algorithm for locating factories as createSaslClient(). 


    Returns: A non-null enumeration of known factories for producing SaslClient. 
*javax.security.sasl.Sasl.getSaslServerFactories()*

public static |java.util.Enumeration| getSaslServerFactories()

Gets an enumeration of known factories for producing SaslServer. This method 
uses the same algorithm for locating factories as createSaslServer(). 


    Returns: A non-null enumeration of known factories for producing SaslServer. 


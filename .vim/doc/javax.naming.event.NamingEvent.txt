*javax.naming.event.NamingEvent* *NamingEvent* This class represents an event fi

public class NamingEvent
  extends    |java.util.EventObject|

|javax.naming.event.NamingEvent_Description|
|javax.naming.event.NamingEvent_Fields|
|javax.naming.event.NamingEvent_Constructors|
|javax.naming.event.NamingEvent_Methods|

================================================================================

*javax.naming.event.NamingEvent_Fields*
|java.lang.Object_javax.naming.event.NamingEvent.changeInfo|
|javax.naming.Binding_javax.naming.event.NamingEvent.newBinding|
|int_javax.naming.event.NamingEvent.OBJECT_ADDED|
|int_javax.naming.event.NamingEvent.OBJECT_CHANGED|
|int_javax.naming.event.NamingEvent.OBJECT_REMOVED|
|int_javax.naming.event.NamingEvent.OBJECT_RENAMED|
|javax.naming.Binding_javax.naming.event.NamingEvent.oldBinding|
|int_javax.naming.event.NamingEvent.type|

*javax.naming.event.NamingEvent_Constructors*
|javax.naming.event.NamingEvent(EventContext,int,Binding,Binding,Object)|Constr

*javax.naming.event.NamingEvent_Methods*
|javax.naming.event.NamingEvent.dispatch(NamingListener)|Invokes the appropriat
|javax.naming.event.NamingEvent.getChangeInfo()|Retrieves the change informatio
|javax.naming.event.NamingEvent.getEventContext()|Retrieves the event source th
|javax.naming.event.NamingEvent.getNewBinding()|Retrieves the binding of the ob
|javax.naming.event.NamingEvent.getOldBinding()|Retrieves the binding of the ob
|javax.naming.event.NamingEvent.getType()|Returns the type of this event.

*javax.naming.event.NamingEvent_Description*

This class represents an event fired by a naming/directory service. 

The NamingEvent's state consists of 

The event source: the EventContext which fired this event. The event type. The 
new binding: information about the object after the change. The old binding: 
information about the object before the change. Change information: information 
about the change that triggered this event; usually service provider-specific 
or server-specific information. 

Note that the event source is always the same EventContext instance that the 
listener has registered with. Furthermore, the names of the bindings in the 
NamingEvent are always relative to that instance. For example, suppose a 
listener makes the following registration: 

NamespaceChangeListener listener = ...; src.addNamingListener("x", 
SUBTREE_SCOPE, listener); 

When an object named "x/y" is subsequently deleted, the corresponding 
NamingEvent (evt) must contain: 

evt.getEventContext() == src evt.getOldBinding().getName().equals("x/y") 

Care must be taken when multiple threads are accessing the same EventContext 
concurrently. See the package description for more information on threading 
issues. 


*java.lang.Object_javax.naming.event.NamingEvent.changeInfo*

This class represents an event fired by a naming/directory service. 

The NamingEvent's state consists of 

The event source: the EventContext which fired this event. The event type. The 
new binding: information about the object after the change. The old binding: 
information about the object before the change. Change information: information 
about the change that triggered this event; usually service provider-specific 
or server-specific information. 

Note that the event source is always the same EventContext instance that the 
listener has registered with. Furthermore, the names of the bindings in the 
NamingEvent are always relative to that instance. For example, suppose a 
listener makes the following registration: 

NamespaceChangeListener listener = ...; src.addNamingListener("x", 
SUBTREE_SCOPE, listener); 

When an object named "x/y" is subsequently deleted, the corresponding 
NamingEvent (evt) must contain: 

evt.getEventContext() == src evt.getOldBinding().getName().equals("x/y") 

Care must be taken when multiple threads are accessing the same EventContext 
concurrently. See the package description for more information on threading 
issues. 


*javax.naming.Binding_javax.naming.event.NamingEvent.newBinding*

This class represents an event fired by a naming/directory service. 

The NamingEvent's state consists of 

The event source: the EventContext which fired this event. The event type. The 
new binding: information about the object after the change. The old binding: 
information about the object before the change. Change information: information 
about the change that triggered this event; usually service provider-specific 
or server-specific information. 

Note that the event source is always the same EventContext instance that the 
listener has registered with. Furthermore, the names of the bindings in the 
NamingEvent are always relative to that instance. For example, suppose a 
listener makes the following registration: 

NamespaceChangeListener listener = ...; src.addNamingListener("x", 
SUBTREE_SCOPE, listener); 

When an object named "x/y" is subsequently deleted, the corresponding 
NamingEvent (evt) must contain: 

evt.getEventContext() == src evt.getOldBinding().getName().equals("x/y") 

Care must be taken when multiple threads are accessing the same EventContext 
concurrently. See the package description for more information on threading 
issues. 


*int_javax.naming.event.NamingEvent.OBJECT_ADDED*

This class represents an event fired by a naming/directory service. 

The NamingEvent's state consists of 

The event source: the EventContext which fired this event. The event type. The 
new binding: information about the object after the change. The old binding: 
information about the object before the change. Change information: information 
about the change that triggered this event; usually service provider-specific 
or server-specific information. 

Note that the event source is always the same EventContext instance that the 
listener has registered with. Furthermore, the names of the bindings in the 
NamingEvent are always relative to that instance. For example, suppose a 
listener makes the following registration: 

NamespaceChangeListener listener = ...; src.addNamingListener("x", 
SUBTREE_SCOPE, listener); 

When an object named "x/y" is subsequently deleted, the corresponding 
NamingEvent (evt) must contain: 

evt.getEventContext() == src evt.getOldBinding().getName().equals("x/y") 

Care must be taken when multiple threads are accessing the same EventContext 
concurrently. See the package description for more information on threading 
issues. 


*int_javax.naming.event.NamingEvent.OBJECT_CHANGED*

This class represents an event fired by a naming/directory service. 

The NamingEvent's state consists of 

The event source: the EventContext which fired this event. The event type. The 
new binding: information about the object after the change. The old binding: 
information about the object before the change. Change information: information 
about the change that triggered this event; usually service provider-specific 
or server-specific information. 

Note that the event source is always the same EventContext instance that the 
listener has registered with. Furthermore, the names of the bindings in the 
NamingEvent are always relative to that instance. For example, suppose a 
listener makes the following registration: 

NamespaceChangeListener listener = ...; src.addNamingListener("x", 
SUBTREE_SCOPE, listener); 

When an object named "x/y" is subsequently deleted, the corresponding 
NamingEvent (evt) must contain: 

evt.getEventContext() == src evt.getOldBinding().getName().equals("x/y") 

Care must be taken when multiple threads are accessing the same EventContext 
concurrently. See the package description for more information on threading 
issues. 


*int_javax.naming.event.NamingEvent.OBJECT_REMOVED*

This class represents an event fired by a naming/directory service. 

The NamingEvent's state consists of 

The event source: the EventContext which fired this event. The event type. The 
new binding: information about the object after the change. The old binding: 
information about the object before the change. Change information: information 
about the change that triggered this event; usually service provider-specific 
or server-specific information. 

Note that the event source is always the same EventContext instance that the 
listener has registered with. Furthermore, the names of the bindings in the 
NamingEvent are always relative to that instance. For example, suppose a 
listener makes the following registration: 

NamespaceChangeListener listener = ...; src.addNamingListener("x", 
SUBTREE_SCOPE, listener); 

When an object named "x/y" is subsequently deleted, the corresponding 
NamingEvent (evt) must contain: 

evt.getEventContext() == src evt.getOldBinding().getName().equals("x/y") 

Care must be taken when multiple threads are accessing the same EventContext 
concurrently. See the package description for more information on threading 
issues. 


*int_javax.naming.event.NamingEvent.OBJECT_RENAMED*

This class represents an event fired by a naming/directory service. 

The NamingEvent's state consists of 

The event source: the EventContext which fired this event. The event type. The 
new binding: information about the object after the change. The old binding: 
information about the object before the change. Change information: information 
about the change that triggered this event; usually service provider-specific 
or server-specific information. 

Note that the event source is always the same EventContext instance that the 
listener has registered with. Furthermore, the names of the bindings in the 
NamingEvent are always relative to that instance. For example, suppose a 
listener makes the following registration: 

NamespaceChangeListener listener = ...; src.addNamingListener("x", 
SUBTREE_SCOPE, listener); 

When an object named "x/y" is subsequently deleted, the corresponding 
NamingEvent (evt) must contain: 

evt.getEventContext() == src evt.getOldBinding().getName().equals("x/y") 

Care must be taken when multiple threads are accessing the same EventContext 
concurrently. See the package description for more information on threading 
issues. 


*javax.naming.Binding_javax.naming.event.NamingEvent.oldBinding*

This class represents an event fired by a naming/directory service. 

The NamingEvent's state consists of 

The event source: the EventContext which fired this event. The event type. The 
new binding: information about the object after the change. The old binding: 
information about the object before the change. Change information: information 
about the change that triggered this event; usually service provider-specific 
or server-specific information. 

Note that the event source is always the same EventContext instance that the 
listener has registered with. Furthermore, the names of the bindings in the 
NamingEvent are always relative to that instance. For example, suppose a 
listener makes the following registration: 

NamespaceChangeListener listener = ...; src.addNamingListener("x", 
SUBTREE_SCOPE, listener); 

When an object named "x/y" is subsequently deleted, the corresponding 
NamingEvent (evt) must contain: 

evt.getEventContext() == src evt.getOldBinding().getName().equals("x/y") 

Care must be taken when multiple threads are accessing the same EventContext 
concurrently. See the package description for more information on threading 
issues. 


*int_javax.naming.event.NamingEvent.type*

This class represents an event fired by a naming/directory service. 

The NamingEvent's state consists of 

The event source: the EventContext which fired this event. The event type. The 
new binding: information about the object after the change. The old binding: 
information about the object before the change. Change information: information 
about the change that triggered this event; usually service provider-specific 
or server-specific information. 

Note that the event source is always the same EventContext instance that the 
listener has registered with. Furthermore, the names of the bindings in the 
NamingEvent are always relative to that instance. For example, suppose a 
listener makes the following registration: 

NamespaceChangeListener listener = ...; src.addNamingListener("x", 
SUBTREE_SCOPE, listener); 

When an object named "x/y" is subsequently deleted, the corresponding 
NamingEvent (evt) must contain: 

evt.getEventContext() == src evt.getOldBinding().getName().equals("x/y") 

Care must be taken when multiple threads are accessing the same EventContext 
concurrently. See the package description for more information on threading 
issues. 



*javax.naming.event.NamingEvent(EventContext,int,Binding,Binding,Object)*

public NamingEvent(
  javax.naming.event.EventContext source,
  int type,
  javax.naming.Binding newBd,
  javax.naming.Binding oldBd,
  java.lang.Object changeInfo)

Constructs an instance of NamingEvent. 

The names in newBd and oldBd are to be resolved relative to the event source 
source. 

For an OBJECT_ADDED event type, newBd must not be null. For an OBJECT_REMOVED 
event type, oldBd must not be null. For an OBJECT_CHANGED event type, newBd and 
oldBd must not be null. For an OBJECT_RENAMED event type, one of newBd or oldBd 
may be null if the new or old binding is outside of the scope for which the 
listener has registered. 

    source - The non-null context that fired this event. 
    type - The type of the event. 
    newBd - A possibly null binding before the change. See method description. 
    oldBd - A possibly null binding after the change. See method description. 
    changeInfo - A possibly null object containing information about the change. 

*javax.naming.event.NamingEvent.dispatch(NamingListener)*

public void dispatch(javax.naming.event.NamingListener listener)

Invokes the appropriate listener method on this event. The default 
implementation of this method handles the following event types: OBJECT_ADDED, 
OBJECT_REMOVED, OBJECT_RENAMED, OBJECT_CHANGED. 

The listener method is executed in the same thread as this method. See the 
package description for more information on threading issues. 

    listener - The nonnull listener. 

*javax.naming.event.NamingEvent.getChangeInfo()*

public |java.lang.Object| getChangeInfo()

Retrieves the change information for this event. The value of the change 
information is service-specific. For example, it could be an ID that identifies 
the change in a change log on the server. 


    Returns: The possibly null change information of this event. 
*javax.naming.event.NamingEvent.getEventContext()*

public |javax.naming.event.EventContext| getEventContext()

Retrieves the event source that fired this event. This returns the same object 
as EventObject.getSource(). 

If the result of this method is used to access the event source, for example, 
to look up the object or get its attributes, then it needs to be locked because 
implementations of Context are not guaranteed to be thread-safe (and 
EventContext is a subinterface of Context). See the package description for 
more information on threading issues. 


    Returns: The non-null context that fired this event. 
*javax.naming.event.NamingEvent.getNewBinding()*

public |javax.naming.Binding| getNewBinding()

Retrieves the binding of the object after the change. 

The binding must be nonnull if the object existed after the change relative to 
the source context (getEventContext()). That is, it must be nonnull for 
OBJECT_ADDED and OBJECT_CHANGED. For OBJECT_RENAMED, it is null if the object 
after the rename is outside the scope for which the listener registered 
interest; it is nonnull if the object is inside the scope after the rename. 

The name in the binding is to be resolved relative to the event source 
getEventContext(). The object returned by Binding.getObject() may be null if 
such information is unavailable. 


    Returns: The possibly null binding of the object after the change. 
*javax.naming.event.NamingEvent.getOldBinding()*

public |javax.naming.Binding| getOldBinding()

Retrieves the binding of the object before the change. 

The binding must be nonnull if the object existed before the change relative to 
the source context (getEventContext()). That is, it must be nonnull for 
OBJECT_REMOVED and OBJECT_CHANGED. For OBJECT_RENAMED, it is null if the object 
before the rename is outside of the scope for which the listener has registered 
interest; it is nonnull if the object is inside the scope before the rename. 

The name in the binding is to be resolved relative to the event source 
getEventContext(). The object returned by Binding.getObject() may be null if 
such information is unavailable. 


    Returns: The possibly null binding of the object before the change. 
*javax.naming.event.NamingEvent.getType()*

public int getType()

Returns the type of this event. 


    Returns: The type of this event. 


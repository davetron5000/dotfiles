*java.awt.FontMetrics* *FontMetrics* The FontMetrics class defines a font metric

public abstract class FontMetrics
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.awt.FontMetrics_Description|
|java.awt.FontMetrics_Fields|
|java.awt.FontMetrics_Constructors|
|java.awt.FontMetrics_Methods|

================================================================================

*java.awt.FontMetrics_Fields*
|java.awt.Font_java.awt.FontMetrics.font|

*java.awt.FontMetrics_Constructors*
|java.awt.FontMetrics(Font)|Creates a new FontMetrics object for finding out  h

*java.awt.FontMetrics_Methods*
|java.awt.FontMetrics.bytesWidth(byte[],int,int)|Returns the total advance widt
|java.awt.FontMetrics.charsWidth(char[],int,int)|Returns the total advance widt
|java.awt.FontMetrics.charWidth(char)|Returns the advance width of the specifie
|java.awt.FontMetrics.charWidth(int)|Returns the advance width of the specified
|java.awt.FontMetrics.getAscent()|Determines the font ascent of the Font   desc
|java.awt.FontMetrics.getDescent()|Determines the font descent of the Font   de
|java.awt.FontMetrics.getFont()|Gets the Font described by this  FontMetrics ob
|java.awt.FontMetrics.getHeight()|Gets the standard height of a line of text in
|java.awt.FontMetrics.getLeading()|Determines the standard leading of the   Fon
|java.awt.FontMetrics.getLineMetrics(char[],int,int,Graphics)|Returns theLineMe
|java.awt.FontMetrics.getLineMetrics(CharacterIterator,int,int,Graphics)|Return
|java.awt.FontMetrics.getLineMetrics(String,Graphics)|Returns theLineMetricsobj
|java.awt.FontMetrics.getLineMetrics(String,int,int,Graphics)|Returns theLineMe
|java.awt.FontMetrics.getMaxAdvance()|Gets the maximum advance width of any cha
|java.awt.FontMetrics.getMaxAscent()|Determines the maximum ascent of the Font 
|java.awt.FontMetrics.getMaxCharBounds(Graphics)|Returns the bounds for the cha
|java.awt.FontMetrics.getMaxDecent()|For backward compatibility only.
|java.awt.FontMetrics.getMaxDescent()|Determines the maximum descent of the Fon
|java.awt.FontMetrics.getStringBounds(char[],int,int,Graphics)|Returns the boun
|java.awt.FontMetrics.getStringBounds(CharacterIterator,int,int,Graphics)|Retur
|java.awt.FontMetrics.getStringBounds(String,Graphics)|Returns the bounds of th
|java.awt.FontMetrics.getStringBounds(String,int,int,Graphics)|Returns the boun
|java.awt.FontMetrics.getWidths()|Gets the advance widths of the first 256 char
|java.awt.FontMetrics.hasUniformLineMetrics()|Checks to see if the Font has uni
|java.awt.FontMetrics.stringWidth(String)|Returns the total advance width for s
|java.awt.FontMetrics.toString()|Returns a representation of this FontMetrics  

*java.awt.FontMetrics_Description*

The FontMetrics class defines a font metrics object, which encapsulates 
information about the rendering of a particular font on a particular screen. 

Note to subclassers: Since many of these methods form closed, mutually 
recursive loops, you must take care that you implement at least one of the 
methods in each such loop to prevent infinite recursion when your subclass is 
used. In particular, the following is the minimal suggested set of methods to 
override in order to ensure correctness and prevent infinite recursion (though 
other subsets are equally feasible): 

(|java.awt.FontMetrics|) (|java.awt.FontMetrics|) (|java.awt.FontMetrics|) 
(|java.awt.FontMetrics|) (|java.awt.FontMetrics|) 

Note that the implementations of these methods are inefficient, so they are 
usually overridden with more efficient toolkit-specific implementations. 

When an application asks AWT to place a character at the position (x,y), the 
character is placed so that its reference point (shown as the dot in the 
accompanying image) is put at that position. The reference point specifies a 
horizontal line called the baseline of the character. In normal printing, the 
baselines of characters should align. 

In addition, every character in a font has an ascent, a descent, and an advance 
width. The ascent is the amount by which the character ascends above the 
baseline. The descent is the amount by which the character descends below the 
baseline. The advance width indicates the position at which AWT should place 
the next character. 

An array of characters or a string can also have an ascent, a descent, and an 
advance width. The ascent of the array is the maximum ascent of any character 
in the array. The descent is the maximum descent of any character in the array. 
The advance width is the sum of the advance widths of each of the characters in 
the character array. The advance of a String is the distance along the baseline 
of the String. This distance is the width that should be used for centering or 
right-aligning the String. Note that the advance of a String is not necessarily 
the sum of the advances of its characters measured in isolation because the 
width of a character can vary depending on its context. For example, in Arabic 
text, the shape of a character can change in order to connect to other 
characters. Also, in some scripts, certain character sequences can be 
represented by a single shape, called a ligature. Measuring characters 
individually does not account for these transformations. 


*java.awt.Font_java.awt.FontMetrics.font*

The FontMetrics class defines a font metrics object, which encapsulates 
information about the rendering of a particular font on a particular screen. 

Note to subclassers: Since many of these methods form closed, mutually 
recursive loops, you must take care that you implement at least one of the 
methods in each such loop to prevent infinite recursion when your subclass is 
used. In particular, the following is the minimal suggested set of methods to 
override in order to ensure correctness and prevent infinite recursion (though 
other subsets are equally feasible): 

(|java.awt.FontMetrics|) (|java.awt.FontMetrics|) (|java.awt.FontMetrics|) 
(|java.awt.FontMetrics|) (|java.awt.FontMetrics|) 

Note that the implementations of these methods are inefficient, so they are 
usually overridden with more efficient toolkit-specific implementations. 

When an application asks AWT to place a character at the position (x,y), the 
character is placed so that its reference point (shown as the dot in the 
accompanying image) is put at that position. The reference point specifies a 
horizontal line called the baseline of the character. In normal printing, the 
baselines of characters should align. 

In addition, every character in a font has an ascent, a descent, and an advance 
width. The ascent is the amount by which the character ascends above the 
baseline. The descent is the amount by which the character descends below the 
baseline. The advance width indicates the position at which AWT should place 
the next character. 

An array of characters or a string can also have an ascent, a descent, and an 
advance width. The ascent of the array is the maximum ascent of any character 
in the array. The descent is the maximum descent of any character in the array. 
The advance width is the sum of the advance widths of each of the characters in 
the character array. The advance of a String is the distance along the baseline 
of the String. This distance is the width that should be used for centering or 
right-aligning the String. Note that the advance of a String is not necessarily 
the sum of the advances of its characters measured in isolation because the 
width of a character can vary depending on its context. For example, in Arabic 
text, the shape of a character can change in order to connect to other 
characters. Also, in some scripts, certain character sequences can be 
represented by a single shape, called a ligature. Measuring characters 
individually does not account for these transformations. 



*java.awt.FontMetrics(Font)*

protected FontMetrics(java.awt.Font font)

Creates a new FontMetrics object for finding out height and width information 
about the specified Font and specific character glyphs in that Font. 

    font - the Font 

*java.awt.FontMetrics.bytesWidth(byte[],int,int)*

public int bytesWidth(
  byte[] data,
  int off,
  int len)

Returns the total advance width for showing the specified array of bytes in 
this Font. The advance is the distance from the leftmost point to the rightmost 
point on the string's baseline. The advance of a String is not necessarily the 
sum of the advances of its characters. This is equivalent to measuring a String 
of the characters in the specified range. 

    data - the array of bytes to be measured 
    off - the start offset of the bytes in the array 
    len - the number of bytes to be measured from the array 

    Returns: the advance width of the subarray of the specified byte array in the Font 
             described by this FontMetrics object. 
*java.awt.FontMetrics.charsWidth(char[],int,int)*

public int charsWidth(
  char[] data,
  int off,
  int len)

Returns the total advance width for showing the specified array of characters 
in this Font. The advance is the distance from the leftmost point to the 
rightmost point on the string's baseline. The advance of a String is not 
necessarily the sum of the advances of its characters. This is equivalent to 
measuring a String of the characters in the specified range. 

    data - the array of characters to be measured 
    off - the start offset of the characters in the array 
    len - the number of characters to be measured from the array 

    Returns: the advance width of the subarray of the specified char array in the font 
             described by this FontMetrics object. 
*java.awt.FontMetrics.charWidth(char)*

public int charWidth(char ch)

Returns the advance width of the specified character in this Font. The advance 
is the distance from the leftmost point to the rightmost point on the 
character's baseline. Note that the advance of a String is not necessarily the 
sum of the advances of its characters. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.awt.FontMetrics|) method. 

    ch - the character to be measured 

    Returns: the advance width of the specified character in the Font described by this 
             FontMetrics object. 
*java.awt.FontMetrics.charWidth(int)*

public int charWidth(int codePoint)

Returns the advance width of the specified character in this Font. The advance 
is the distance from the leftmost point to the rightmost point on the 
character's baseline. Note that the advance of a String is not necessarily the 
sum of the advances of its characters. 

This method doesn't validate the specified character to be a valid Unicode code 
point. The caller must validate the character value using 
Character.isValidCodePoint(|java.lang.Character|) if necessary. 

    codePoint - the character (Unicode code point) to be measured 

    Returns: the advance width of the specified character in the Font described by this 
             FontMetrics object. 
*java.awt.FontMetrics.getAscent()*

public int getAscent()

Determines the font ascent of the Font described by this FontMetrics object. 
The font ascent is the distance from the font's baseline to the top of most 
alphanumeric characters. Some characters in the Font might extend above the 
font ascent line. 


    Returns: the font ascent of the Font. 
*java.awt.FontMetrics.getDescent()*

public int getDescent()

Determines the font descent of the Font described by this FontMetrics object. 
The font descent is the distance from the font's baseline to the bottom of most 
alphanumeric characters with descenders. Some characters in the Font might 
extend below the font descent line. 


    Returns: the font descent of the Font. 
*java.awt.FontMetrics.getFont()*

public |java.awt.Font| getFont()

Gets the Font described by this FontMetrics object. 


    Returns: the Font described by this FontMetrics object. 
*java.awt.FontMetrics.getHeight()*

public int getHeight()

Gets the standard height of a line of text in this font. This is the distance 
between the baseline of adjacent lines of text. It is the sum of the leading + 
ascent + descent. Due to rounding this may not be the same as getAscent() + 
getDescent() + getLeading(). There is no guarantee that lines of text spaced at 
this distance are disjoint; such lines may overlap if some characters overshoot 
either the standard ascent or the standard descent metric. 


    Returns: the standard height of the font. 
*java.awt.FontMetrics.getLeading()*

public int getLeading()

Determines the standard leading of the Font described by this FontMetrics 
object. The standard leading, or interline spacing, is the logical amount of 
space to be reserved between the descent of one line of text and the ascent of 
the next line. The height metric is calculated to include this extra space. 


    Returns: the standard leading of the Font. 
*java.awt.FontMetrics.getLineMetrics(char[],int,int,Graphics)*

public |java.awt.font.LineMetrics| getLineMetrics(
  char[] chars,
  int beginIndex,
  int limit,
  java.awt.Graphics context)

Returns the (|java.awt.font.LineMetrics|) object for the specified character 
array in the specified (|java.awt.Graphics|) context. 

    chars - the specified character array 
    beginIndex - the initial offset of chars 
    limit - the length of chars 
    context - the specified Graphics context 

    Returns: a LineMetrics object created with the specified character array and Graphics 
             context. 
*java.awt.FontMetrics.getLineMetrics(CharacterIterator,int,int,Graphics)*

public |java.awt.font.LineMetrics| getLineMetrics(
  java.text.CharacterIterator ci,
  int beginIndex,
  int limit,
  java.awt.Graphics context)

Returns the (|java.awt.font.LineMetrics|) object for the specified 
(|java.text.CharacterIterator|) in the specified (|java.awt.Graphics|) context. 

    ci - the specified CharacterIterator 
    beginIndex - the initial offset in ci 
    limit - the end index of ci 
    context - the specified Graphics context 

    Returns: a LineMetrics object created with the specified arguments. 
*java.awt.FontMetrics.getLineMetrics(String,Graphics)*

public |java.awt.font.LineMetrics| getLineMetrics(
  java.lang.String str,
  java.awt.Graphics context)

Returns the (|java.awt.font.LineMetrics|) object for the specified String in 
the specified (|java.awt.Graphics|) context. 

    str - the specified String 
    context - the specified Graphics context 

    Returns: a LineMetrics object created with the specified String and Graphics context. 
*java.awt.FontMetrics.getLineMetrics(String,int,int,Graphics)*

public |java.awt.font.LineMetrics| getLineMetrics(
  java.lang.String str,
  int beginIndex,
  int limit,
  java.awt.Graphics context)

Returns the (|java.awt.font.LineMetrics|) object for the specified String in 
the specified (|java.awt.Graphics|) context. 

    str - the specified String 
    beginIndex - the initial offset of str 
    limit - the length of str 
    context - the specified Graphics context 

    Returns: a LineMetrics object created with the specified String and Graphics context. 
*java.awt.FontMetrics.getMaxAdvance()*

public int getMaxAdvance()

Gets the maximum advance width of any character in this Font. The advance is 
the distance from the leftmost point to the rightmost point on the string's 
baseline. The advance of a String is not necessarily the sum of the advances of 
its characters. 


    Returns: the maximum advance width of any character in the Font, or -1 if the maximum 
             advance width is not known. 
*java.awt.FontMetrics.getMaxAscent()*

public int getMaxAscent()

Determines the maximum ascent of the Font described by this FontMetrics object. 
No character extends further above the font's baseline than this height. 


    Returns: the maximum ascent of any character in the Font. 
*java.awt.FontMetrics.getMaxCharBounds(Graphics)*

public |java.awt.geom.Rectangle2D| getMaxCharBounds(java.awt.Graphics context)

Returns the bounds for the character with the maximum bounds in the specified 
Graphics context. 

    context - the specified Graphics context 

    Returns: a Rectangle2D that is the bounding box for the character with the maximum 
             bounds. 
*java.awt.FontMetrics.getMaxDecent()*

public int getMaxDecent()

For backward compatibility only. 


    Returns: the maximum descent of any character in the Font. 
*java.awt.FontMetrics.getMaxDescent()*

public int getMaxDescent()

Determines the maximum descent of the Font described by this FontMetrics 
object. No character extends further below the font's baseline than this 
height. 


    Returns: the maximum descent of any character in the Font. 
*java.awt.FontMetrics.getStringBounds(char[],int,int,Graphics)*

public |java.awt.geom.Rectangle2D| getStringBounds(
  char[] chars,
  int beginIndex,
  int limit,
  java.awt.Graphics context)

Returns the bounds of the specified array of characters in the specified 
Graphics context. The bounds is used to layout the String created with the 
specified array of characters, beginIndex and limit. 

    chars - an array of characters 
    beginIndex - the initial offset of the array of characters 
    limit - the length of the array of characters 
    context - the specified Graphics context 

    Returns: a Rectangle2D that is the bounding box of the specified character array in the 
             specified Graphics context. 
*java.awt.FontMetrics.getStringBounds(CharacterIterator,int,int,Graphics)*

public |java.awt.geom.Rectangle2D| getStringBounds(
  java.text.CharacterIterator ci,
  int beginIndex,
  int limit,
  java.awt.Graphics context)

Returns the bounds of the characters indexed in the specified CharacterIterator 
in the specified Graphics context. 

    ci - the specified CharacterIterator 
    beginIndex - the initial offset in ci 
    limit - the end index of ci 
    context - the specified Graphics context 

    Returns: a Rectangle2D that is the bounding box of the characters indexed in the 
             specified CharacterIterator in the specified Graphics context. 
*java.awt.FontMetrics.getStringBounds(String,Graphics)*

public |java.awt.geom.Rectangle2D| getStringBounds(
  java.lang.String str,
  java.awt.Graphics context)

Returns the bounds of the specified String in the specified Graphics context. 
The bounds is used to layout the String. 

    str - the specified String 
    context - the specified Graphics context 

    Returns: a {@link Rectangle2D} that is the bounding box of the specified String in the 
             specified Graphics context. 
*java.awt.FontMetrics.getStringBounds(String,int,int,Graphics)*

public |java.awt.geom.Rectangle2D| getStringBounds(
  java.lang.String str,
  int beginIndex,
  int limit,
  java.awt.Graphics context)

Returns the bounds of the specified String in the specified Graphics context. 
The bounds is used to layout the String. 

    str - the specified String 
    beginIndex - the offset of the beginning of str 
    limit - the length of str 
    context - the specified Graphics context 

    Returns: a Rectangle2D that is the bounding box of the specified String in the specified 
             Graphics context. 
*java.awt.FontMetrics.getWidths()*

public int getWidths()

Gets the advance widths of the first 256 characters in the Font. The advance is 
the distance from the leftmost point to the rightmost point on the character's 
baseline. Note that the advance of a String is not necessarily the sum of the 
advances of its characters. 


    Returns: an array storing the advance widths of the characters in the Font described by 
             this FontMetrics object. 
*java.awt.FontMetrics.hasUniformLineMetrics()*

public boolean hasUniformLineMetrics()

Checks to see if the Font has uniform line metrics. A composite font may 
consist of several different fonts to cover various character sets. In such 
cases, the FontLineMetrics objects are not uniform. Different fonts may have a 
different ascent, descent, metrics and so on. This information is sometimes 
necessary for line measuring and line breaking. 


    Returns: true if the font has uniform line metrics; false otherwise. 
*java.awt.FontMetrics.stringWidth(String)*

public int stringWidth(java.lang.String str)

Returns the total advance width for showing the specified String in this Font. 
The advance is the distance from the leftmost point to the rightmost point on 
the string's baseline. 

Note that the total advance width returned from this method does not take into 
account the rendering context. Therefore, the anti-aliasing and fractional 
metrics hints can affect the value of the advance. When enabling the 
anti-aliasing and fractional metrics hints, use getStringBounds(String, 
Graphics) instead of this method. The advance of a String is not necessarily 
the sum of the advances of its characters. 

    str - the String to be measured 

    Returns: the advance width of the specified String in the Font described by this 
             FontMetrics. 
*java.awt.FontMetrics.toString()*

public |java.lang.String| toString()

Returns a representation of this FontMetrics object's values as a String. 


    Returns: a String representation of this FontMetrics object. 


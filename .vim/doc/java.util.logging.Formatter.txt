*java.util.logging.Formatter* *Formatter* A Formatter provides support for forma

public abstract class Formatter
  extends    |java.lang.Object|

|java.util.logging.Formatter_Description|
|java.util.logging.Formatter_Fields|
|java.util.logging.Formatter_Constructors|
|java.util.logging.Formatter_Methods|

================================================================================

*java.util.logging.Formatter_Constructors*
|java.util.logging.Formatter()|Construct a new formatter.

*java.util.logging.Formatter_Methods*
|java.util.logging.Formatter.format(LogRecord)|Format the given log record and 
|java.util.logging.Formatter.formatMessage(LogRecord)|Localize and format the m
|java.util.logging.Formatter.getHead(Handler)|Return the header string for a se
|java.util.logging.Formatter.getTail(Handler)|Return the tail string for a set 

*java.util.logging.Formatter_Description*

A Formatter provides support for formatting LogRecords. 

Typically each logging Handler will have a Formatter associated with it. The 
Formatter takes a LogRecord and converts it to a string. 

Some formatters (such as the XMLFormatter) need to wrap head and tail strings 
around a set of formatted records. The getHeader and getTail methods can be 
used to obtain these strings. 


*java.util.logging.Formatter()*

protected Formatter()

Construct a new formatter. 


*java.util.logging.Formatter.format(LogRecord)*

public abstract |java.lang.String| format(java.util.logging.LogRecord record)

Format the given log record and return the formatted string. 

The resulting formatted String will normally include a localized and formated 
version of the LogRecord's message field. The Formatter.formatMessage 
convenience method can (optionally) be used to localize and format the message 
field. 

    record - the log record to be formatted. 

    Returns: the formatted log record 
*java.util.logging.Formatter.formatMessage(LogRecord)*

public synchronized |java.lang.String| formatMessage(java.util.logging.LogRecord record)

Localize and format the message string from a log record. This method is 
provided as a convenience for Formatter subclasses to use when they are 
performing formatting. 

The message string is first localized to a format string using the record's 
ResourceBundle. (If there is no ResourceBundle, or if the message key is not 
found, then the key is used as the format string.) The format String uses 
java.text style formatting. 

If there are no parameters, no formatter is used. Otherwise, if the string 
contains "{0" then java.text.MessageFormat is used to format the string. 
Otherwise no formatting is performed. 



    record - the log record containing the raw message 

    Returns: a localized and formatted message 
*java.util.logging.Formatter.getHead(Handler)*

public |java.lang.String| getHead(java.util.logging.Handler h)

Return the header string for a set of formatted records. 

This base class returns an empty string, but this may be overriden by 
subclasses. 

    h - The target handler (can be null) 

    Returns: header string 
*java.util.logging.Formatter.getTail(Handler)*

public |java.lang.String| getTail(java.util.logging.Handler h)

Return the tail string for a set of formatted records. 

This base class returns an empty string, but this may be overriden by 
subclasses. 

    h - The target handler (can be null) 

    Returns: 


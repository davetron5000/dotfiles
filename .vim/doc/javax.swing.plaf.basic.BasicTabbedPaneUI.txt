*javax.swing.plaf.basic.BasicTabbedPaneUI* *BasicTabbedPaneUI* A Basic Limplemen

public class BasicTabbedPaneUI
  extends    |javax.swing.plaf.TabbedPaneUI|
  implements |javax.swing.SwingConstants|

|javax.swing.plaf.basic.BasicTabbedPaneUI_Description|
|javax.swing.plaf.basic.BasicTabbedPaneUI_Fields|
|javax.swing.plaf.basic.BasicTabbedPaneUI_Constructors|
|javax.swing.plaf.basic.BasicTabbedPaneUI_Methods|

================================================================================

*javax.swing.plaf.basic.BasicTabbedPaneUI_Fields*
|java.awt.Rectangle_javax.swing.plaf.basic.BasicTabbedPaneUI.calcRect|
|java.awt.Insets_javax.swing.plaf.basic.BasicTabbedPaneUI.contentBorderInsets|
|java.awt.Color_javax.swing.plaf.basic.BasicTabbedPaneUI.darkShadow|
|javax.swing.KeyStroke_javax.swing.plaf.basic.BasicTabbedPaneUI.downKey|
|java.awt.Color_javax.swing.plaf.basic.BasicTabbedPaneUI.focus|
|java.awt.event.FocusListener_javax.swing.plaf.basic.BasicTabbedPaneUI.focusListener|
|java.awt.Color_javax.swing.plaf.basic.BasicTabbedPaneUI.highlight|
|javax.swing.KeyStroke_javax.swing.plaf.basic.BasicTabbedPaneUI.leftKey|
|java.awt.Color_javax.swing.plaf.basic.BasicTabbedPaneUI.lightHighlight|
|int_javax.swing.plaf.basic.BasicTabbedPaneUI.maxTabHeight|
|int_javax.swing.plaf.basic.BasicTabbedPaneUI.maxTabWidth|
|java.awt.event.MouseListener_javax.swing.plaf.basic.BasicTabbedPaneUI.mouseListener|
|java.beans.PropertyChangeListener_javax.swing.plaf.basic.BasicTabbedPaneUI.propertyChangeListener|
|java.awt.Rectangle[]_javax.swing.plaf.basic.BasicTabbedPaneUI.rects|
|javax.swing.KeyStroke_javax.swing.plaf.basic.BasicTabbedPaneUI.rightKey|
|int_javax.swing.plaf.basic.BasicTabbedPaneUI.runCount|
|int_javax.swing.plaf.basic.BasicTabbedPaneUI.selectedRun|
|java.awt.Insets_javax.swing.plaf.basic.BasicTabbedPaneUI.selectedTabPadInsets|
|java.awt.Color_javax.swing.plaf.basic.BasicTabbedPaneUI.shadow|
|java.awt.Insets_javax.swing.plaf.basic.BasicTabbedPaneUI.tabAreaInsets|
|javax.swing.event.ChangeListener_javax.swing.plaf.basic.BasicTabbedPaneUI.tabChangeListener|
|java.awt.Insets_javax.swing.plaf.basic.BasicTabbedPaneUI.tabInsets|
|javax.swing.JTabbedPane_javax.swing.plaf.basic.BasicTabbedPaneUI.tabPane|
|int_javax.swing.plaf.basic.BasicTabbedPaneUI.tabRunOverlay|
|int[]_javax.swing.plaf.basic.BasicTabbedPaneUI.tabRuns|
|int_javax.swing.plaf.basic.BasicTabbedPaneUI.textIconGap|
|javax.swing.KeyStroke_javax.swing.plaf.basic.BasicTabbedPaneUI.upKey|

*javax.swing.plaf.basic.BasicTabbedPaneUI_Constructors*
|javax.swing.plaf.basic.BasicTabbedPaneUI()|

*javax.swing.plaf.basic.BasicTabbedPaneUI_Methods*
|javax.swing.plaf.basic.BasicTabbedPaneUI.assureRectsCreated(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.calculateMaxTabHeight(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.calculateMaxTabWidth(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.calculateTabAreaHeight(int,int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.calculateTabAreaWidth(int,int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.calculateTabHeight(int,int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.calculateTabWidth(int,int,FontMetrics)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.createChangeListener()|
|javax.swing.plaf.basic.BasicTabbedPaneUI.createFocusListener()|
|javax.swing.plaf.basic.BasicTabbedPaneUI.createLayoutManager()|Invoked by inst
|javax.swing.plaf.basic.BasicTabbedPaneUI.createMouseListener()|
|javax.swing.plaf.basic.BasicTabbedPaneUI.createPropertyChangeListener()|
|javax.swing.plaf.basic.BasicTabbedPaneUI.createScrollButton(int)|Creates and r
|javax.swing.plaf.basic.BasicTabbedPaneUI.createUI(JComponent)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.expandTabRunsArray()|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getContentBorderInsets(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getFocusIndex()|Returns the index of 
|javax.swing.plaf.basic.BasicTabbedPaneUI.getFontMetrics()|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getIconForTab(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getMaximumSize(JComponent)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getMinimumSize(JComponent)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getNextTabIndex(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getNextTabIndexInRun(int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getNextTabRun(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getPreviousTabIndex(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getPreviousTabIndexInRun(int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getPreviousTabRun(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getRolloverTab()|Returns the tab the 
|javax.swing.plaf.basic.BasicTabbedPaneUI.getRunForTab(int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getSelectedTabPadInsets(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getTabAreaInsets(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getTabBounds(int,Rectangle)|Returns t
|javax.swing.plaf.basic.BasicTabbedPaneUI.getTabBounds(JTabbedPane,int)|Returns
|javax.swing.plaf.basic.BasicTabbedPaneUI.getTabInsets(int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getTabLabelShiftX(int,int,boolean)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getTabLabelShiftY(int,int,boolean)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getTabRunCount(JTabbedPane)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getTabRunIndent(int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getTabRunOffset(int,int,int,boolean)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getTabRunOverlay(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.getTextViewForTab(int)|Returns the te
|javax.swing.plaf.basic.BasicTabbedPaneUI.getVisibleComponent()|
|javax.swing.plaf.basic.BasicTabbedPaneUI.installComponents()|Creates and insta
|javax.swing.plaf.basic.BasicTabbedPaneUI.installDefaults()|
|javax.swing.plaf.basic.BasicTabbedPaneUI.installKeyboardActions()|
|javax.swing.plaf.basic.BasicTabbedPaneUI.installListeners()|
|javax.swing.plaf.basic.BasicTabbedPaneUI.installUI(JComponent)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.lastTabInRun(int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.layoutLabel(int,FontMetrics,int,String,Icon,Rectangle,Rectangle,Rectangle,boolean)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.navigateSelectedTab(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.paint(Graphics,JComponent)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.paintContentBorder(Graphics,int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.paintContentBorderBottomEdge(Graphics,int,int,int,int,int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.paintContentBorderLeftEdge(Graphics,int,int,int,int,int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.paintContentBorderRightEdge(Graphics,int,int,int,int,int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.paintContentBorderTopEdge(Graphics,int,int,int,int,int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.paintFocusIndicator(Graphics,int,Rectangle[],int,Rectangle,Rectangle,boolean)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.paintIcon(Graphics,int,int,Icon,Rectangle,boolean)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.paintTab(Graphics,int,Rectangle[],int,Rectangle,Rectangle)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabArea(Graphics,int,int)|Paints
|javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabBackground(Graphics,int,int,int,int,int,int,boolean)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabBorder(Graphics,int,int,int,int,int,int,boolean)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.paintText(Graphics,int,Font,FontMetrics,int,String,Rectangle,boolean)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.rotateInsets(Insets,Insets,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.selectAdjacentRunTab(int,int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.selectNextTab(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.selectNextTabInRun(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.selectPreviousTab(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.selectPreviousTabInRun(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.setRolloverTab(int)|Sets the tab the 
|javax.swing.plaf.basic.BasicTabbedPaneUI.setVisibleComponent(Component)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.shouldPadTabRun(int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.shouldRotateTabRuns(int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.tabForCoordinate(JTabbedPane,int,int)|
|javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallComponents()|Removes any ins
|javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallDefaults()|
|javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallKeyboardActions()|
|javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallListeners()|
|javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallUI(JComponent)|

*javax.swing.plaf.basic.BasicTabbedPaneUI_Description*

A Basic Limplementation of TabbedPaneUI. 


*java.awt.Rectangle_javax.swing.plaf.basic.BasicTabbedPaneUI.calcRect*

A Basic Limplementation of TabbedPaneUI. 


*java.awt.Insets_javax.swing.plaf.basic.BasicTabbedPaneUI.contentBorderInsets*

A Basic Limplementation of TabbedPaneUI. 


*java.awt.Color_javax.swing.plaf.basic.BasicTabbedPaneUI.darkShadow*

A Basic Limplementation of TabbedPaneUI. 


*javax.swing.KeyStroke_javax.swing.plaf.basic.BasicTabbedPaneUI.downKey*

A Basic Limplementation of TabbedPaneUI. 


*java.awt.Color_javax.swing.plaf.basic.BasicTabbedPaneUI.focus*

A Basic Limplementation of TabbedPaneUI. 


*java.awt.event.FocusListener_javax.swing.plaf.basic.BasicTabbedPaneUI.focusListener*

A Basic Limplementation of TabbedPaneUI. 


*java.awt.Color_javax.swing.plaf.basic.BasicTabbedPaneUI.highlight*

A Basic Limplementation of TabbedPaneUI. 


*javax.swing.KeyStroke_javax.swing.plaf.basic.BasicTabbedPaneUI.leftKey*

A Basic Limplementation of TabbedPaneUI. 


*java.awt.Color_javax.swing.plaf.basic.BasicTabbedPaneUI.lightHighlight*

A Basic Limplementation of TabbedPaneUI. 


*int_javax.swing.plaf.basic.BasicTabbedPaneUI.maxTabHeight*

A Basic Limplementation of TabbedPaneUI. 


*int_javax.swing.plaf.basic.BasicTabbedPaneUI.maxTabWidth*

A Basic Limplementation of TabbedPaneUI. 


*java.awt.event.MouseListener_javax.swing.plaf.basic.BasicTabbedPaneUI.mouseListener*

A Basic Limplementation of TabbedPaneUI. 


*java.beans.PropertyChangeListener_javax.swing.plaf.basic.BasicTabbedPaneUI.propertyChangeListener*

A Basic Limplementation of TabbedPaneUI. 


*java.awt.Rectangle[]_javax.swing.plaf.basic.BasicTabbedPaneUI.rects*

A Basic Limplementation of TabbedPaneUI. 


*javax.swing.KeyStroke_javax.swing.plaf.basic.BasicTabbedPaneUI.rightKey*

A Basic Limplementation of TabbedPaneUI. 


*int_javax.swing.plaf.basic.BasicTabbedPaneUI.runCount*

A Basic Limplementation of TabbedPaneUI. 


*int_javax.swing.plaf.basic.BasicTabbedPaneUI.selectedRun*

A Basic Limplementation of TabbedPaneUI. 


*java.awt.Insets_javax.swing.plaf.basic.BasicTabbedPaneUI.selectedTabPadInsets*

A Basic Limplementation of TabbedPaneUI. 


*java.awt.Color_javax.swing.plaf.basic.BasicTabbedPaneUI.shadow*

A Basic Limplementation of TabbedPaneUI. 


*java.awt.Insets_javax.swing.plaf.basic.BasicTabbedPaneUI.tabAreaInsets*

A Basic Limplementation of TabbedPaneUI. 


*javax.swing.event.ChangeListener_javax.swing.plaf.basic.BasicTabbedPaneUI.tabChangeListener*

A Basic Limplementation of TabbedPaneUI. 


*java.awt.Insets_javax.swing.plaf.basic.BasicTabbedPaneUI.tabInsets*

A Basic Limplementation of TabbedPaneUI. 


*javax.swing.JTabbedPane_javax.swing.plaf.basic.BasicTabbedPaneUI.tabPane*

A Basic Limplementation of TabbedPaneUI. 


*int_javax.swing.plaf.basic.BasicTabbedPaneUI.tabRunOverlay*

A Basic Limplementation of TabbedPaneUI. 


*int[]_javax.swing.plaf.basic.BasicTabbedPaneUI.tabRuns*

A Basic Limplementation of TabbedPaneUI. 


*int_javax.swing.plaf.basic.BasicTabbedPaneUI.textIconGap*

A Basic Limplementation of TabbedPaneUI. 


*javax.swing.KeyStroke_javax.swing.plaf.basic.BasicTabbedPaneUI.upKey*

A Basic Limplementation of TabbedPaneUI. 



*javax.swing.plaf.basic.BasicTabbedPaneUI()*

public BasicTabbedPaneUI()




*javax.swing.plaf.basic.BasicTabbedPaneUI.assureRectsCreated(int)*

protected void assureRectsCreated(int tabCount)




*javax.swing.plaf.basic.BasicTabbedPaneUI.calculateMaxTabHeight(int)*

protected int calculateMaxTabHeight(int tabPlacement)




*javax.swing.plaf.basic.BasicTabbedPaneUI.calculateMaxTabWidth(int)*

protected int calculateMaxTabWidth(int tabPlacement)




*javax.swing.plaf.basic.BasicTabbedPaneUI.calculateTabAreaHeight(int,int,int)*

protected int calculateTabAreaHeight(
  int tabPlacement,
  int horizRunCount,
  int maxTabHeight)




*javax.swing.plaf.basic.BasicTabbedPaneUI.calculateTabAreaWidth(int,int,int)*

protected int calculateTabAreaWidth(
  int tabPlacement,
  int vertRunCount,
  int maxTabWidth)




*javax.swing.plaf.basic.BasicTabbedPaneUI.calculateTabHeight(int,int,int)*

protected int calculateTabHeight(
  int tabPlacement,
  int tabIndex,
  int fontHeight)




*javax.swing.plaf.basic.BasicTabbedPaneUI.calculateTabWidth(int,int,FontMetrics)*

protected int calculateTabWidth(
  int tabPlacement,
  int tabIndex,
  java.awt.FontMetrics metrics)




*javax.swing.plaf.basic.BasicTabbedPaneUI.createChangeListener()*

protected |javax.swing.event.ChangeListener| createChangeListener()




*javax.swing.plaf.basic.BasicTabbedPaneUI.createFocusListener()*

protected |java.awt.event.FocusListener| createFocusListener()




*javax.swing.plaf.basic.BasicTabbedPaneUI.createLayoutManager()*

protected |java.awt.LayoutManager| createLayoutManager()

Invoked by installUI to create a layout manager object to manage the 
JTabbedPane. 


    Returns: a layout manager object 
*javax.swing.plaf.basic.BasicTabbedPaneUI.createMouseListener()*

protected |java.awt.event.MouseListener| createMouseListener()




*javax.swing.plaf.basic.BasicTabbedPaneUI.createPropertyChangeListener()*

protected |java.beans.PropertyChangeListener| createPropertyChangeListener()




*javax.swing.plaf.basic.BasicTabbedPaneUI.createScrollButton(int)*

protected |javax.swing.JButton| createScrollButton(int direction)

Creates and returns a JButton that will provide the user with a way to scroll 
the tabs in a particular direction. The returned JButton must be instance of 
UIResource. 

    direction - One of the SwingConstants constants: SOUTH, NORTH, EAST or WEST 

    Returns: Widget for user to 
*javax.swing.plaf.basic.BasicTabbedPaneUI.createUI(JComponent)*

public static |javax.swing.plaf.ComponentUI| createUI(javax.swing.JComponent c)




*javax.swing.plaf.basic.BasicTabbedPaneUI.expandTabRunsArray()*

protected void expandTabRunsArray()




*javax.swing.plaf.basic.BasicTabbedPaneUI.getContentBorderInsets(int)*

protected |java.awt.Insets| getContentBorderInsets(int tabPlacement)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getFocusIndex()*

protected int getFocusIndex()

Returns the index of the tab that has focus. 


    Returns: index of tab that has focus 
*javax.swing.plaf.basic.BasicTabbedPaneUI.getFontMetrics()*

protected |java.awt.FontMetrics| getFontMetrics()




*javax.swing.plaf.basic.BasicTabbedPaneUI.getIconForTab(int)*

protected |javax.swing.Icon| getIconForTab(int tabIndex)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getMaximumSize(JComponent)*

public |java.awt.Dimension| getMaximumSize(javax.swing.JComponent c)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getMinimumSize(JComponent)*

public |java.awt.Dimension| getMinimumSize(javax.swing.JComponent c)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getNextTabIndex(int)*

protected int getNextTabIndex(int base)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getNextTabIndexInRun(int,int)*

protected int getNextTabIndexInRun(
  int tabCount,
  int base)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getNextTabRun(int)*

protected int getNextTabRun(int baseRun)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getPreviousTabIndex(int)*

protected int getPreviousTabIndex(int base)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getPreviousTabIndexInRun(int,int)*

protected int getPreviousTabIndexInRun(
  int tabCount,
  int base)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getPreviousTabRun(int)*

protected int getPreviousTabRun(int baseRun)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getRolloverTab()*

protected int getRolloverTab()

Returns the tab the mouse is currently over, or -1 if the mouse is no longer 
over any tab. 

    index - Index of the tab the mouse is over. 

*javax.swing.plaf.basic.BasicTabbedPaneUI.getRunForTab(int,int)*

protected int getRunForTab(
  int tabCount,
  int tabIndex)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getSelectedTabPadInsets(int)*

protected |java.awt.Insets| getSelectedTabPadInsets(int tabPlacement)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getTabAreaInsets(int)*

protected |java.awt.Insets| getTabAreaInsets(int tabPlacement)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getTabBounds(int,Rectangle)*

protected |java.awt.Rectangle| getTabBounds(
  int tabIndex,
  java.awt.Rectangle dest)

Returns the bounds of the specified tab in the coordinate space of the 
JTabbedPane component. This is required because the tab rects are by default 
defined in the coordinate space of the component where they are rendered, which 
could be the JTabbedPane (for WRAP_TAB_LAYOUT) or a ScrollableTabPanel 
(SCROLL_TAB_LAYOUT). This method should be used whenever the tab rectangle must 
be relative to the JTabbedPane itself and the result should be placed in a 
designated Rectangle object (rather than instantiating and returning a new 
Rectangle each time). The tab index parameter must be a valid tabbed pane tab 
index (0 to tab count - 1, inclusive). The destination rectangle parameter must 
be a valid Rectangle instance. The handling of invalid parameters is 
unspecified. 

    tabIndex - the index of the tab 
    dest - the rectangle where the result should be placed 

    Returns: the resulting rectangle 
*javax.swing.plaf.basic.BasicTabbedPaneUI.getTabBounds(JTabbedPane,int)*

public |java.awt.Rectangle| getTabBounds(
  javax.swing.JTabbedPane pane,
  int i)

Returns the bounds of the specified tab index. The bounds are with respect to 
the JTabbedPane's coordinate space. 


*javax.swing.plaf.basic.BasicTabbedPaneUI.getTabInsets(int,int)*

protected |java.awt.Insets| getTabInsets(
  int tabPlacement,
  int tabIndex)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getTabLabelShiftX(int,int,boolean)*

protected int getTabLabelShiftX(
  int tabPlacement,
  int tabIndex,
  boolean isSelected)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getTabLabelShiftY(int,int,boolean)*

protected int getTabLabelShiftY(
  int tabPlacement,
  int tabIndex,
  boolean isSelected)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getTabRunCount(JTabbedPane)*

public int getTabRunCount(javax.swing.JTabbedPane pane)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getTabRunIndent(int,int)*

protected int getTabRunIndent(
  int tabPlacement,
  int run)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getTabRunOffset(int,int,int,boolean)*

protected int getTabRunOffset(
  int tabPlacement,
  int tabCount,
  int tabIndex,
  boolean forward)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getTabRunOverlay(int)*

protected int getTabRunOverlay(int tabPlacement)




*javax.swing.plaf.basic.BasicTabbedPaneUI.getTextViewForTab(int)*

protected |javax.swing.text.View| getTextViewForTab(int tabIndex)

Returns the text View object required to render stylized text (HTML) for the 
specified tab or null if no specialized text rendering is needed for this tab. 
This is provided to support html rendering inside tabs. 

    tabIndex - the index of the tab 

    Returns: the text view to render the tab's text or null if no specialized rendering is 
             required 
*javax.swing.plaf.basic.BasicTabbedPaneUI.getVisibleComponent()*

protected |java.awt.Component| getVisibleComponent()




*javax.swing.plaf.basic.BasicTabbedPaneUI.installComponents()*

protected void installComponents()

Creates and installs any required subcomponents for the JTabbedPane. Invoked by 
installUI. 


*javax.swing.plaf.basic.BasicTabbedPaneUI.installDefaults()*

protected void installDefaults()




*javax.swing.plaf.basic.BasicTabbedPaneUI.installKeyboardActions()*

protected void installKeyboardActions()




*javax.swing.plaf.basic.BasicTabbedPaneUI.installListeners()*

protected void installListeners()




*javax.swing.plaf.basic.BasicTabbedPaneUI.installUI(JComponent)*

public void installUI(javax.swing.JComponent c)




*javax.swing.plaf.basic.BasicTabbedPaneUI.lastTabInRun(int,int)*

protected int lastTabInRun(
  int tabCount,
  int run)




*javax.swing.plaf.basic.BasicTabbedPaneUI.layoutLabel(int,FontMetrics,int,String,Icon,Rectangle,Rectangle,Rectangle,boolean)*

protected void layoutLabel(
  int tabPlacement,
  java.awt.FontMetrics metrics,
  int tabIndex,
  java.lang.String title,
  javax.swing.Icon icon,
  java.awt.Rectangle tabRect,
  java.awt.Rectangle iconRect,
  java.awt.Rectangle textRect,
  boolean isSelected)




*javax.swing.plaf.basic.BasicTabbedPaneUI.navigateSelectedTab(int)*

protected void navigateSelectedTab(int direction)




*javax.swing.plaf.basic.BasicTabbedPaneUI.paint(Graphics,JComponent)*

public void paint(
  java.awt.Graphics g,
  javax.swing.JComponent c)




*javax.swing.plaf.basic.BasicTabbedPaneUI.paintContentBorder(Graphics,int,int)*

protected void paintContentBorder(
  java.awt.Graphics g,
  int tabPlacement,
  int selectedIndex)




*javax.swing.plaf.basic.BasicTabbedPaneUI.paintContentBorderBottomEdge(Graphics,int,int,int,int,int,int)*

protected void paintContentBorderBottomEdge(
  java.awt.Graphics g,
  int tabPlacement,
  int selectedIndex,
  int x,
  int y,
  int w,
  int h)




*javax.swing.plaf.basic.BasicTabbedPaneUI.paintContentBorderLeftEdge(Graphics,int,int,int,int,int,int)*

protected void paintContentBorderLeftEdge(
  java.awt.Graphics g,
  int tabPlacement,
  int selectedIndex,
  int x,
  int y,
  int w,
  int h)




*javax.swing.plaf.basic.BasicTabbedPaneUI.paintContentBorderRightEdge(Graphics,int,int,int,int,int,int)*

protected void paintContentBorderRightEdge(
  java.awt.Graphics g,
  int tabPlacement,
  int selectedIndex,
  int x,
  int y,
  int w,
  int h)




*javax.swing.plaf.basic.BasicTabbedPaneUI.paintContentBorderTopEdge(Graphics,int,int,int,int,int,int)*

protected void paintContentBorderTopEdge(
  java.awt.Graphics g,
  int tabPlacement,
  int selectedIndex,
  int x,
  int y,
  int w,
  int h)




*javax.swing.plaf.basic.BasicTabbedPaneUI.paintFocusIndicator(Graphics,int,Rectangle[],int,Rectangle,Rectangle,boolean)*

protected void paintFocusIndicator(
  java.awt.Graphics g,
  int tabPlacement,
  java.awt.Rectangle[] rects,
  int tabIndex,
  java.awt.Rectangle iconRect,
  java.awt.Rectangle textRect,
  boolean isSelected)




*javax.swing.plaf.basic.BasicTabbedPaneUI.paintIcon(Graphics,int,int,Icon,Rectangle,boolean)*

protected void paintIcon(
  java.awt.Graphics g,
  int tabPlacement,
  int tabIndex,
  javax.swing.Icon icon,
  java.awt.Rectangle iconRect,
  boolean isSelected)




*javax.swing.plaf.basic.BasicTabbedPaneUI.paintTab(Graphics,int,Rectangle[],int,Rectangle,Rectangle)*

protected void paintTab(
  java.awt.Graphics g,
  int tabPlacement,
  java.awt.Rectangle[] rects,
  int tabIndex,
  java.awt.Rectangle iconRect,
  java.awt.Rectangle textRect)




*javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabArea(Graphics,int,int)*

protected void paintTabArea(
  java.awt.Graphics g,
  int tabPlacement,
  int selectedIndex)

Paints the tabs in the tab area. Invoked by paint(). The graphics parameter 
must be a valid Graphics object. Tab placement may be either: JTabbedPane.TOP, 
JTabbedPane.BOTTOM, JTabbedPane.LEFT, or JTabbedPane.RIGHT. The selected index 
must be a valid tabbed pane tab index (0 to tab count - 1, inclusive) or -1 if 
no tab is currently selected. The handling of invalid parameters is 
unspecified. 

    g - the graphics object to use for rendering 
    tabPlacement - the placement for the tabs within the JTabbedPane 
    selectedIndex - the tab index of the selected component 

*javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabBackground(Graphics,int,int,int,int,int,int,boolean)*

protected void paintTabBackground(
  java.awt.Graphics g,
  int tabPlacement,
  int tabIndex,
  int x,
  int y,
  int w,
  int h,
  boolean isSelected)




*javax.swing.plaf.basic.BasicTabbedPaneUI.paintTabBorder(Graphics,int,int,int,int,int,int,boolean)*

protected void paintTabBorder(
  java.awt.Graphics g,
  int tabPlacement,
  int tabIndex,
  int x,
  int y,
  int w,
  int h,
  boolean isSelected)

this function draws the border around each tab note that this function does now 
draw the background of the tab. that is done elsewhere 


*javax.swing.plaf.basic.BasicTabbedPaneUI.paintText(Graphics,int,Font,FontMetrics,int,String,Rectangle,boolean)*

protected void paintText(
  java.awt.Graphics g,
  int tabPlacement,
  java.awt.Font font,
  java.awt.FontMetrics metrics,
  int tabIndex,
  java.lang.String title,
  java.awt.Rectangle textRect,
  boolean isSelected)




*javax.swing.plaf.basic.BasicTabbedPaneUI.rotateInsets(Insets,Insets,int)*

protected static void rotateInsets(
  java.awt.Insets topInsets,
  java.awt.Insets targetInsets,
  int targetPlacement)




*javax.swing.plaf.basic.BasicTabbedPaneUI.selectAdjacentRunTab(int,int,int)*

protected void selectAdjacentRunTab(
  int tabPlacement,
  int tabIndex,
  int offset)




*javax.swing.plaf.basic.BasicTabbedPaneUI.selectNextTab(int)*

protected void selectNextTab(int current)




*javax.swing.plaf.basic.BasicTabbedPaneUI.selectNextTabInRun(int)*

protected void selectNextTabInRun(int current)




*javax.swing.plaf.basic.BasicTabbedPaneUI.selectPreviousTab(int)*

protected void selectPreviousTab(int current)




*javax.swing.plaf.basic.BasicTabbedPaneUI.selectPreviousTabInRun(int)*

protected void selectPreviousTabInRun(int current)




*javax.swing.plaf.basic.BasicTabbedPaneUI.setRolloverTab(int)*

protected void setRolloverTab(int index)

Sets the tab the mouse is currently over to index. index will be -1 if the 
mouse is no longer over any tab. No checking is done to ensure the passed in 
index identifies a valid tab. 

    index - Index of the tab the mouse is over. 

*javax.swing.plaf.basic.BasicTabbedPaneUI.setVisibleComponent(Component)*

protected void setVisibleComponent(java.awt.Component component)




*javax.swing.plaf.basic.BasicTabbedPaneUI.shouldPadTabRun(int,int)*

protected boolean shouldPadTabRun(
  int tabPlacement,
  int run)




*javax.swing.plaf.basic.BasicTabbedPaneUI.shouldRotateTabRuns(int)*

protected boolean shouldRotateTabRuns(int tabPlacement)




*javax.swing.plaf.basic.BasicTabbedPaneUI.tabForCoordinate(JTabbedPane,int,int)*

public int tabForCoordinate(
  javax.swing.JTabbedPane pane,
  int x,
  int y)

Returns the tab index which intersects the specified point in the JTabbedPane's 
coordinate space. 


*javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallComponents()*

protected void uninstallComponents()

Removes any installed subcomponents from the JTabbedPane. Invoked by 
uninstallUI. 


*javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallDefaults()*

protected void uninstallDefaults()




*javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallKeyboardActions()*

protected void uninstallKeyboardActions()




*javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallListeners()*

protected void uninstallListeners()




*javax.swing.plaf.basic.BasicTabbedPaneUI.uninstallUI(JComponent)*

public void uninstallUI(javax.swing.JComponent c)






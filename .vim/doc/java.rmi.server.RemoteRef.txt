*java.rmi.server.RemoteRef* *RemoteRef* RemoteRef represents the handle for a re

public interface interface RemoteRef

  implements |java.io.Externalizable|

|java.rmi.server.RemoteRef_Description|
|java.rmi.server.RemoteRef_Fields|
|java.rmi.server.RemoteRef_Constructors|
|java.rmi.server.RemoteRef_Methods|

================================================================================

*java.rmi.server.RemoteRef_Fields*
|java.lang.String_java.rmi.server.RemoteRef.packagePrefix|
|long_java.rmi.server.RemoteRef.serialVersionUID|

*java.rmi.server.RemoteRef_Methods*
|java.rmi.server.RemoteRef.done(RemoteCall)|Allows the remote reference to clea
|java.rmi.server.RemoteRef.getRefClass(ObjectOutput)|Returns the class name of 
|java.rmi.server.RemoteRef.invoke(RemoteCall)|Executes the remote call.
|java.rmi.server.RemoteRef.invoke(Remote,Method,Object[],long)|Invoke a method.
|java.rmi.server.RemoteRef.newCall(RemoteObject,Operation[],int,long)|Creates a
|java.rmi.server.RemoteRef.remoteEquals(RemoteRef)|Compares two remote objects 
|java.rmi.server.RemoteRef.remoteHashCode()|Returns a hashcode for a remote obj
|java.rmi.server.RemoteRef.remoteToString()|Returns a String that represents th

*java.rmi.server.RemoteRef_Description*

RemoteRef represents the handle for a remote object. A RemoteStub uses a remote 
reference to carry out a remote method invocation to a remote object. 


*java.lang.String_java.rmi.server.RemoteRef.packagePrefix*

RemoteRef represents the handle for a remote object. A RemoteStub uses a remote 
reference to carry out a remote method invocation to a remote object. 


*long_java.rmi.server.RemoteRef.serialVersionUID*

RemoteRef represents the handle for a remote object. A RemoteStub uses a remote 
reference to carry out a remote method invocation to a remote object. 



*java.rmi.server.RemoteRef.done(RemoteCall)*

public void done(java.rmi.server.RemoteCall call)
  throws |java.rmi.RemoteException|
         
Allows the remote reference to clean up (or reuse) the connection. Done should 
only be called if the invoke returns successfully (non-exceptionally) to the 
stub. 

    call - object representing remote call 

*java.rmi.server.RemoteRef.getRefClass(ObjectOutput)*

public |java.lang.String| getRefClass(java.io.ObjectOutput out)

Returns the class name of the ref type to be serialized onto the stream 'out'. 

    out - the output stream to which the reference will be serialized 

    Returns: the class name (without package qualification) of the reference type 
*java.rmi.server.RemoteRef.invoke(RemoteCall)*

public void invoke(java.rmi.server.RemoteCall call)
  throws |java.lang.Exception|
         
Executes the remote call. 

Invoke will raise any "user" exceptions which should pass through and not be 
caught by the stub. If any exception is raised during the remote invocation, 
invoke should take care of cleaning up the connection before raising the "user" 
or remote exception. 

    call - object representing remote call 

*java.rmi.server.RemoteRef.invoke(Remote,Method,Object[],long)*

public |java.lang.Object| invoke(
  java.rmi.Remote obj,
  java.lang.reflect.Method method,
  java.lang.Object[] params,
  long opnum)
  throws |java.lang.Exception|
         
Invoke a method. This form of delegating method invocation to the reference 
allows the reference to take care of setting up the connection to the remote 
host, marshaling some representation for the method and parameters, then 
communicating the method invocation to the remote host. This method either 
returns the result of a method invocation on the remote object which resides on 
the remote host or throws a RemoteException if the call failed or an 
application-level exception if the remote invocation throws an exception. 

    obj - the object that contains the RemoteRef (e.g., the RemoteStub for the object. 
    method - the method to be invoked 
    params - the parameter list 
    opnum - a hash that may be used to represent the method 

    Returns: result of remote method invocation 
*java.rmi.server.RemoteRef.newCall(RemoteObject,Operation[],int,long)*

public |java.rmi.server.RemoteCall| newCall(
  java.rmi.server.RemoteObject obj,
  java.rmi.server.Operation[] op,
  int opnum,
  long hash)
  throws |java.rmi.RemoteException|
         
Creates an appropriate call object for a new remote method invocation on this 
object. Passing operation array and index, allows the stubs generator to assign 
the operation indexes and interpret them. The remote reference may need the 
operation to encode in the call. 

    obj - remote stub through which to make call 
    op - array of stub operations 
    opnum - operation number 
    hash - stub/skeleton interface hash 

    Returns: call object representing remote call 
*java.rmi.server.RemoteRef.remoteEquals(RemoteRef)*

public boolean remoteEquals(java.rmi.server.RemoteRef obj)

Compares two remote objects for equality. Returns a boolean that indicates 
whether this remote object is equivalent to the specified Object. This method 
is used when a remote object is stored in a hashtable. 

    obj - the Object to compare with 

    Returns: true if these Objects are equal; false otherwise. 
*java.rmi.server.RemoteRef.remoteHashCode()*

public int remoteHashCode()

Returns a hashcode for a remote object. Two remote object stubs that refer to 
the same remote object will have the same hash code (in order to support remote 
objects as keys in hash tables). 


    Returns: remote object hashcode 
*java.rmi.server.RemoteRef.remoteToString()*

public |java.lang.String| remoteToString()

Returns a String that represents the reference of this remote object. 


    Returns: string representing remote object reference 


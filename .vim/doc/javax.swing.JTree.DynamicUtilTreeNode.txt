*javax.swing.JTree.DynamicUtilTreeNode* *JTree.DynamicUtilTreeNode* DynamicUtilT

public static class JTree.DynamicUtilTreeNode
  extends    |javax.swing.tree.DefaultMutableTreeNode|

|javax.swing.JTree.DynamicUtilTreeNode_Description|
|javax.swing.JTree.DynamicUtilTreeNode_Fields|
|javax.swing.JTree.DynamicUtilTreeNode_Constructors|
|javax.swing.JTree.DynamicUtilTreeNode_Methods|

================================================================================

*javax.swing.JTree.DynamicUtilTreeNode_Fields*
|java.lang.Object_javax.swing.JTree.DynamicUtilTreeNode.childValue|
|boolean_javax.swing.JTree.DynamicUtilTreeNode.hasChildren|
|boolean_javax.swing.JTree.DynamicUtilTreeNode.loadedChildren|

*javax.swing.JTree.DynamicUtilTreeNode_Constructors*
|javax.swing.JTree.DynamicUtilTreeNode(Object,Object)|Creates a node with the s

*javax.swing.JTree.DynamicUtilTreeNode_Methods*
|javax.swing.JTree.DynamicUtilTreeNode.children()|Subclassed to load the childr
|javax.swing.JTree.DynamicUtilTreeNode.createChildren(DefaultMutableTreeNode,Object)|
|javax.swing.JTree.DynamicUtilTreeNode.getChildAt(int)|Subclassed to load the c
|javax.swing.JTree.DynamicUtilTreeNode.getChildCount()|Returns the number of ch
|javax.swing.JTree.DynamicUtilTreeNode.isLeaf()|Returns true if this node allow
|javax.swing.JTree.DynamicUtilTreeNode.loadChildren()|Loads the children based 

*javax.swing.JTree.DynamicUtilTreeNode_Description*

DynamicUtilTreeNode can wrap vectors/hashtables/arrays/strings and create the 
appropriate children tree nodes as necessary. It is dynamic in that it will 
only create the children as necessary. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.Object_javax.swing.JTree.DynamicUtilTreeNode.childValue*

DynamicUtilTreeNode can wrap vectors/hashtables/arrays/strings and create the 
appropriate children tree nodes as necessary. It is dynamic in that it will 
only create the children as necessary. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.JTree.DynamicUtilTreeNode.hasChildren*

DynamicUtilTreeNode can wrap vectors/hashtables/arrays/strings and create the 
appropriate children tree nodes as necessary. It is dynamic in that it will 
only create the children as necessary. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.JTree.DynamicUtilTreeNode.loadedChildren*

DynamicUtilTreeNode can wrap vectors/hashtables/arrays/strings and create the 
appropriate children tree nodes as necessary. It is dynamic in that it will 
only create the children as necessary. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.JTree.DynamicUtilTreeNode(Object,Object)*

public JTree.DynamicUtilTreeNode(
  java.lang.Object value,
  java.lang.Object children)

Creates a node with the specified object as its value and with the specified 
children. For the node to allow children, the children-object must be an array 
of objects, a Vector, or a Hashtable -- even if empty. Otherwise, the node is 
not allowed to have children. 

    value - the Object that is the value for the new node 
    children - an array of Objects, a Vector, or a Hashtable used to create the child nodes; 
       if any other object is specified, or if the value is null, then the node 
       is not allowed to have children 

*javax.swing.JTree.DynamicUtilTreeNode.children()*

public |java.util.Enumeration| children()

Subclassed to load the children, if necessary. 


*javax.swing.JTree.DynamicUtilTreeNode.createChildren(DefaultMutableTreeNode,Object)*

public static void createChildren(
  javax.swing.tree.DefaultMutableTreeNode parent,
  java.lang.Object children)

Adds to parent all the children in children. If children is an array or vector 
all of its elements are added is children, otherwise if children is a hashtable 
all the key/value pairs are added in the order Enumeration returns them. 


*javax.swing.JTree.DynamicUtilTreeNode.getChildAt(int)*

public |javax.swing.tree.TreeNode| getChildAt(int index)

Subclassed to load the children, if necessary. 


*javax.swing.JTree.DynamicUtilTreeNode.getChildCount()*

public int getChildCount()

Returns the number of child nodes. 


    Returns: the number of child nodes 
*javax.swing.JTree.DynamicUtilTreeNode.isLeaf()*

public boolean isLeaf()

Returns true if this node allows children. Whether the node allows children 
depends on how it was created. 


    Returns: true if this node allows children, false otherwise 
*javax.swing.JTree.DynamicUtilTreeNode.loadChildren()*

protected void loadChildren()

Loads the children based on childValue. If childValue is a Vector or array each 
element is added as a child, if childValue is a Hashtable each key/value pair 
is added in the order that Enumeration returns the keys. 




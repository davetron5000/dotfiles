*java.security.Certificate* *Certificate* This is an interface of abstract methods for managing a
 variety of identity certificates.

public interface interface Certificate


|java.security.Certificate_Description|
|java.security.Certificate_Fields|
|java.security.Certificate_Constructors|
|java.security.Certificate_Methods|

====================================================================================================================================================================================

*java.security.Certificate_Methods*
|java.security.Certificate.decode(InputStream)|Decodes a certificate from an input stream.
|java.security.Certificate.encode(OutputStream)|Encodes the certificate to an output stream in a format that can  be decoded by the decode method.
|java.security.Certificate.getFormat()|Returns the name of the coding format.
|java.security.Certificate.getGuarantor()|Returns the guarantor of the certificate, that is, the principal  guaranteeing that the public key associated with this certificate  is t
|java.security.Certificate.getPrincipal()|Returns the principal of the principal-key pair being guaranteed by  the guarantor.
|java.security.Certificate.getPublicKey()|Returns the key of the principal-key pair being guaranteed by  the guarantor.
|java.security.Certificate.toString(boolean)|Returns a string that represents the contents of the certificate.

*java.security.Certificate_Description*

This is an interface of abstract methods for managing a variety of identity certificates. An identity certificate is a guarantee by a principal that a public key is that of 
another principal. (A principal represents an entity such as an individual user, a group, or a corporation.) 

In particular, this interface is intended to be a common abstraction for constructs that have different formats but important common uses. For example, different types of 
certificates, such as X.509 certificates and PGP certificates, share general certificate functionality (the need to encode and decode certificates) and some types of information, 
such as a public key, the principal whose key it is, and the guarantor guaranteeing that the public key is that of the specified principal. So an implementation of X.509 
certificates and an implementation of PGP certificates can both utilize the Certificate interface, even though their formats and additional types and amounts of information stored 
are different. 

Important: This interface is useful for cataloging and grouping objects sharing certain common uses. It does not have any semantics of its own. In particular, a Certificate object 
does not make any statement as to the validity of the binding. It is the duty of the application implementing this interface to verify the certificate and satisfy itself of its 
validity. 


  Deprecated: A new certificate handling package is created in the Java 2 platform.
             This Certificate interface is entirely deprecated and
             is here to allow for a smooth transition to the new
             package.

*java.security.Certificate.decode(InputStream)*

public void decode(java.io.InputStream stream)
  throws |java.io.IOException|
         |java.security.KeyException|
         
Decodes a certificate from an input stream. The format should be that returned by getFormat and produced by encode. 


    stream - the input stream from which to fetch the data being decoded. 

*java.security.Certificate.encode(OutputStream)*

public void encode(java.io.OutputStream stream)
  throws |java.io.IOException|
         |java.security.KeyException|
         
Encodes the certificate to an output stream in a format that can be decoded by the decode method. 


    stream - the output stream to which to encode the certificate. 

*java.security.Certificate.getFormat()*

public |java.lang.String| getFormat()

Returns the name of the coding format. This is used as a hint to find an appropriate parser. It could be "X.509", "PGP", etc. This is the format produced and understood by the 
encode and decode methods. 



    Returns: the name of the coding format. 

*java.security.Certificate.getGuarantor()*

public |java.security.Principal| getGuarantor()

Returns the guarantor of the certificate, that is, the principal guaranteeing that the public key associated with this certificate is that of the principal associated with this 
certificate. For X.509 certificates, the guarantor will typically be a Certificate Authority (such as the United States Postal Service or Verisign, Inc.). 



    Returns: the guarantor which guaranteed the principal-key binding. 

*java.security.Certificate.getPrincipal()*

public |java.security.Principal| getPrincipal()

Returns the principal of the principal-key pair being guaranteed by the guarantor. 



    Returns: the principal to which this certificate is bound. 

*java.security.Certificate.getPublicKey()*

public |java.security.PublicKey| getPublicKey()

Returns the key of the principal-key pair being guaranteed by the guarantor. 



    Returns: the public key that this certificate certifies belongs to a particular principal. 

*java.security.Certificate.toString(boolean)*

public |java.lang.String| toString(boolean detailed)

Returns a string that represents the contents of the certificate. 


    detailed - whether or not to give detailed information about the certificate 

    Returns: a string representing the contents of the certificate 



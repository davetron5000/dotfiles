*java.io.FilePermission* *FilePermission* This class represents access to a file

public final class FilePermission
  extends    |java.security.Permission|
  implements |java.io.Serializable|

|java.io.FilePermission_Description|
|java.io.FilePermission_Fields|
|java.io.FilePermission_Constructors|
|java.io.FilePermission_Methods|

================================================================================

*java.io.FilePermission_Constructors*
|java.io.FilePermission(String,String)|Creates a new FilePermission object with

*java.io.FilePermission_Methods*
|java.io.FilePermission.equals(Object)|Checks two FilePermission objects for eq
|java.io.FilePermission.getActions()|Returns the "canonical string representati
|java.io.FilePermission.hashCode()|Returns the hash code value for this object.
|java.io.FilePermission.implies(Permission)|Checks if this FilePermission objec
|java.io.FilePermission.newPermissionCollection()|Returns a new PermissionColle

*java.io.FilePermission_Description*

This class represents access to a file or directory. A FilePermission consists 
of a pathname and a set of actions valid for that pathname. 

Pathname is the pathname of the file or directory granted the specified 
actions. A pathname that ends in "/*" (where "/" is the file separator 
character, File.separatorChar) indicates all the files and directories 
contained in that directory. A pathname that ends with "/-" indicates 
(recursively) all files and subdirectories contained in that directory. A 
pathname consisting of the special token "<<ALL FILES>>" matches any file. 

Note: A pathname consisting of a single "*" indicates all the files in the 
current directory, while a pathname consisting of a single "-" indicates all 
the files in the current directory and (recursively) all files and 
subdirectories contained in the current directory. 

The actions to be granted are passed to the constructor in a string containing 
a list of one or more comma-separated keywords. The possible keywords are 
"read", "write", "execute", and "delete". Their meaning is defined as follows: 

read read permission write write permission execute execute permission. Allows 
Runtime.exec to be called. Corresponds to SecurityManager.checkExec. delete 
delete permission. Allows File.delete to be called. Corresponds to 
SecurityManager.checkDelete. 

The actions string is converted to lowercase before processing. 

Be careful when granting FilePermissions. Think about the implications of 
granting read and especially write access to various files and directories. The 
"<<ALL FILES>>" permission with write action is especially dangerous. This 
grants permission to write to the entire file system. One thing this 
effectively allows is replacement of the system binary, including the JVM 
runtime environment. 

Please note: Code can always read a file from the same directory it's in (or a 
subdirectory of that directory); it does not need explicit permission to do so. 


*java.io.FilePermission(String,String)*

public FilePermission(
  java.lang.String path,
  java.lang.String actions)

Creates a new FilePermission object with the specified actions. path is the 
pathname of a file or directory, and actions contains a comma-separated list of 
the desired actions granted on the file or directory. Possible actions are 
"read", "write", "execute", and "delete". 

A pathname that ends in "/*" (where "/" is the file separator character, 
File.separatorChar) indicates a directory and all the files contained in that 
directory. A pathname that ends with "/-" indicates a directory and 
(recursively) all files and subdirectories contained in that directory. The 
special pathname "<<ALL FILES>>" matches all files. 

A pathname consisting of a single "*" indicates all the files in the current 
directory, while a pathname consisting of a single "-" indicates all the files 
in the current directory and (recursively) all files and subdirectories 
contained in the current directory. 

    path - the pathname of the file/directory. 
    actions - the action string. 

*java.io.FilePermission.equals(Object)*

public boolean equals(java.lang.Object obj)

Checks two FilePermission objects for equality. Checks that obj is a 
FilePermission, and has the same pathname and actions as this object. 

    obj - the object we are testing for equality with this object. 

    Returns: true if obj is a FilePermission, and has the same pathname and actions as this 
             FilePermission object. 
*java.io.FilePermission.getActions()*

public |java.lang.String| getActions()

Returns the "canonical string representation" of the actions. That is, this 
method always returns present actions in the following order: read, write, 
execute, delete. For example, if this FilePermission object allows both write 
and read actions, a call to getActions will return the string "read,write". 


    Returns: the canonical string representation of the actions. 
*java.io.FilePermission.hashCode()*

public int hashCode()

Returns the hash code value for this object. 


    Returns: a hash code value for this object. 
*java.io.FilePermission.implies(Permission)*

public boolean implies(java.security.Permission p)

Checks if this FilePermission object "implies" the specified permission. 

More specifically, this method returns true if: 

p is an instanceof FilePermission, p's actions are a proper subset of this 
object's actions, and p's pathname is implied by this object's pathname. For 
example, "/tmp/*" implies "/tmp/foo", since "/tmp/*" encompasses the "/tmp" 
directory and all files in that directory, including the one named "foo". 

    p - the permission to check against. 

    Returns: true if the specified permission is implied by this object, false if not. 
*java.io.FilePermission.newPermissionCollection()*

public |java.security.PermissionCollection| newPermissionCollection()

Returns a new PermissionCollection object for storing FilePermission objects. 

FilePermission objects must be stored in a manner that allows them to be 
inserted into the collection in any order, but that also enables the 
PermissionCollection implies method to be implemented in an efficient (and 
consistent) manner. 

For example, if you have two FilePermissions: 

"/tmp/-", "read" "/tmp/scratch/foo", "write" 

and you are calling the implies method with the FilePermission: 



"/tmp/scratch/foo", "read,write", 

then the implies function must take into account both the "/tmp/-" and 
"/tmp/scratch/foo" permissions, so the effective permission is "read,write", 
and implies returns true. The "implies" semantics for FilePermissions are 
handled properly by the PermissionCollection object returned by this 
newPermissionCollection method. 


    Returns: a new PermissionCollection object suitable for storing FilePermissions. 


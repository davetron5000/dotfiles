*org.omg.CORBA.ByteHolder* *ByteHolder* The Holder for Byte.

public final class ByteHolder
  extends    |java.lang.Object|
  implements |org.omg.CORBA.portable.Streamable|

|org.omg.CORBA.ByteHolder_Description|
|org.omg.CORBA.ByteHolder_Fields|
|org.omg.CORBA.ByteHolder_Constructors|
|org.omg.CORBA.ByteHolder_Methods|

================================================================================

*org.omg.CORBA.ByteHolder_Fields*
|byte_org.omg.CORBA.ByteHolder.value|

*org.omg.CORBA.ByteHolder_Constructors*
|org.omg.CORBA.ByteHolder()|Constructs a new ByteHolder object with its  value 
|org.omg.CORBA.ByteHolder(byte)|Constructs a new ByteHolder object for the give

*org.omg.CORBA.ByteHolder_Methods*
|org.omg.CORBA.ByteHolder._read(InputStream)|Reads from input and initalizes th
|org.omg.CORBA.ByteHolder._type()|Returns the TypeCode corresponding to the val
|org.omg.CORBA.ByteHolder._write(OutputStream)|Marshals to output the value in 

*org.omg.CORBA.ByteHolder_Description*

The Holder for Byte. For more information on Holder files, see "Generated 
Files: Holder Files". A Holder class for a byte that is used to store "out" and 
"inout" parameters in IDL methods. If an IDL method signature has an IDL octet 
as an "out" or "inout" parameter, the programmer must pass an instance of 
ByteHolder as the corresponding parameter in the method invocation; for "inout" 
parameters, the programmer must also fill the "in" value to be sent to the 
server. Before the method invocation returns, the ORB will fill in the value 
corresponding to the "out" value returned from the server. 

If myByteHolder is an instance of ByteHolder, the value stored in its value 
field can be accessed with myByteHolder.value. 


*byte_org.omg.CORBA.ByteHolder.value*

The Holder for Byte. For more information on Holder files, see "Generated 
Files: Holder Files". A Holder class for a byte that is used to store "out" and 
"inout" parameters in IDL methods. If an IDL method signature has an IDL octet 
as an "out" or "inout" parameter, the programmer must pass an instance of 
ByteHolder as the corresponding parameter in the method invocation; for "inout" 
parameters, the programmer must also fill the "in" value to be sent to the 
server. Before the method invocation returns, the ORB will fill in the value 
corresponding to the "out" value returned from the server. 

If myByteHolder is an instance of ByteHolder, the value stored in its value 
field can be accessed with myByteHolder.value. 



*org.omg.CORBA.ByteHolder()*

public ByteHolder()

Constructs a new ByteHolder object with its value field initialized to 0. 


*org.omg.CORBA.ByteHolder(byte)*

public ByteHolder(byte initial)

Constructs a new ByteHolder object for the given byte. 

    initial - the byte with which to initialize the value field of the new ByteHolder object 

*org.omg.CORBA.ByteHolder._read(InputStream)*

public void _read(org.omg.CORBA.portable.InputStream input)

Reads from input and initalizes the value in this ByteHolder object with the 
unmarshalled data. 

    input - the InputStream containing CDR formatted data from the wire. 

*org.omg.CORBA.ByteHolder._type()*

public |org.omg.CORBA.TypeCode| _type()

Returns the TypeCode corresponding to the value held in this ByteHolder object. 


    Returns: the TypeCode of the value held in this ByteHolder object 
*org.omg.CORBA.ByteHolder._write(OutputStream)*

public void _write(org.omg.CORBA.portable.OutputStream output)

Marshals to output the value in this ByteHolder object. 

    output - the OutputStream which will contain the CDR formatted data. 



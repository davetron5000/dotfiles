*java.util.ListIterator* *ListIterator* An iterator for lists that allows the pr

public interface interface ListIterator

  implements |java.util.Iterator|

|java.util.ListIterator_Description|
|java.util.ListIterator_Fields|
|java.util.ListIterator_Constructors|
|java.util.ListIterator_Methods|

================================================================================

*java.util.ListIterator_Methods*
|java.util.ListIterator.add(E)|Inserts the specified element into the list (opt
|java.util.ListIterator.hasNext()|Returns true if this list iterator has more e
|java.util.ListIterator.hasPrevious()|Returns true if this list iterator has mo
|java.util.ListIterator.next()|Returns the next element in the list.
|java.util.ListIterator.nextIndex()|Returns the index of the element that would
|java.util.ListIterator.previous()|Returns the previous element in the list.
|java.util.ListIterator.previousIndex()|Returns the index of the element that w
|java.util.ListIterator.remove()|Removes from the list the last element that wa
|java.util.ListIterator.set(E)|Replaces the last element returned by next or  p

*java.util.ListIterator_Description*

An iterator for lists that allows the programmer to traverse the list in either 
direction, modify the list during iteration, and obtain the iterator's current 
position in the list. A ListIterator has no current element; its cursor 
position always lies between the element that would be returned by a call to 
previous() and the element that would be returned by a call to next(). In a 
list of length n, there are n+1 valid index values, from 0 to n, inclusive. 

Element(0) Element(1) Element(2) ... Element(n) ^ ^ ^ ^ ^ Index: 0 1 2 3 n+1 



Note that the (|java.util.ListIterator|) and (|java.util.ListIterator|) methods 
are not defined in terms of the cursor position; they are defined to operate on 
the last element returned by a call to (|java.util.ListIterator|) or 
(|java.util.ListIterator|) . 

This interface is a member of the <a href="/../guide/collections/index.html"> 
Java Collections Framework. 


*java.util.ListIterator.add(E)*

public void add(java.lang.Object o)

Inserts the specified element into the list (optional operation). The element 
is inserted immediately before the next element that would be returned by next, 
if any, and after the next element that would be returned by previous, if any. 
(If the list contains no elements, the new element becomes the sole element on 
the list.) The new element is inserted before the implicit cursor: a subsequent 
call to next would be unaffected, and a subsequent call to previous would 
return the new element. (This call increases by one the value that would be 
returned by a call to nextIndex or previousIndex.) 

    o - the element to insert. 

*java.util.ListIterator.hasNext()*

public boolean hasNext()

Returns true if this list iterator has more elements when traversing the list 
in the forward direction. (In other words, returns true if next would return an 
element rather than throwing an exception.) 


    Returns: true if the list iterator has more elements when traversing the list in the 
             forward direction. 
*java.util.ListIterator.hasPrevious()*

public boolean hasPrevious()

Returns true if this list iterator has more elements when traversing the list 
in the reverse direction. (In other words, returns true if previous would 
return an element rather than throwing an exception.) 


    Returns: true if the list iterator has more elements when traversing the list in the 
             reverse direction. 
*java.util.ListIterator.next()*

public |java.lang.Object| next()

Returns the next element in the list. This method may be called repeatedly to 
iterate through the list, or intermixed with calls to previous to go back and 
forth. (Note that alternating calls to next and previous will return the same 
element repeatedly.) 


    Returns: the next element in the list. 
*java.util.ListIterator.nextIndex()*

public int nextIndex()

Returns the index of the element that would be returned by a subsequent call to 
next. (Returns list size if the list iterator is at the end of the list.) 


    Returns: the index of the element that would be returned by a subsequent call to next, 
             or list size if list iterator is at end of list. 
*java.util.ListIterator.previous()*

public |java.lang.Object| previous()

Returns the previous element in the list. This method may be called repeatedly 
to iterate through the list backwards, or intermixed with calls to next to go 
back and forth. (Note that alternating calls to next and previous will return 
the same element repeatedly.) 


    Returns: the previous element in the list. 
*java.util.ListIterator.previousIndex()*

public int previousIndex()

Returns the index of the element that would be returned by a subsequent call to 
previous. (Returns -1 if the list iterator is at the beginning of the list.) 


    Returns: the index of the element that would be returned by a subsequent call to 
             previous, or -1 if list iterator is at beginning of list. 
*java.util.ListIterator.remove()*

public void remove()

Removes from the list the last element that was returned by next or previous 
(optional operation). This call can only be made once per call to next or 
previous. It can be made only if ListIterator.add has not been called after the 
last call to next or previous. 


*java.util.ListIterator.set(E)*

public void set(java.lang.Object o)

Replaces the last element returned by next or previous with the specified 
element (optional operation). This call can be made only if neither 
ListIterator.remove nor ListIterator.add have been called after the last call 
to next or previous. 

    o - the element with which to replace the last element returned by next or 
       previous. 



*java.util.concurrent.CyclicBarrier* *CyclicBarrier* A synchronization aid that 

public class CyclicBarrier
  extends    |java.lang.Object|

|java.util.concurrent.CyclicBarrier_Description|
|java.util.concurrent.CyclicBarrier_Fields|
|java.util.concurrent.CyclicBarrier_Constructors|
|java.util.concurrent.CyclicBarrier_Methods|

================================================================================

*java.util.concurrent.CyclicBarrier_Constructors*
|java.util.concurrent.CyclicBarrier(int)|Creates a new CyclicBarrier that will 
|java.util.concurrent.CyclicBarrier(int,Runnable)|Creates a new CyclicBarrier t

*java.util.concurrent.CyclicBarrier_Methods*
|java.util.concurrent.CyclicBarrier.await()|Waits until all#getParties partiesh
|java.util.concurrent.CyclicBarrier.await(long,TimeUnit)|Waits until all#getPar
|java.util.concurrent.CyclicBarrier.getNumberWaiting()|Returns the number of pa
|java.util.concurrent.CyclicBarrier.getParties()|Returns the number of parties 
|java.util.concurrent.CyclicBarrier.isBroken()|Queries if this barrier is in a 
|java.util.concurrent.CyclicBarrier.reset()|Resets the barrier to its initial s

*java.util.concurrent.CyclicBarrier_Description*

A synchronization aid that allows a set of threads to all wait for each other 
to reach a common barrier point. CyclicBarriers are useful in programs 
involving a fixed sized party of threads that must occasionally wait for each 
other. The barrier is called cyclic because it can be re-used after the waiting 
threads are released. 

A CyclicBarrier supports an optional (|java.lang.Runnable|) command that is run 
once per barrier point, after the last thread in the party arrives, but before 
any threads are released. This barrier action is useful for updating 
shared-state before any of the parties continue. 

Sample usage: Here is an example of using a barrier in a parallel decomposition 
design: 

class Solver { final int N; final float[][] data; final CyclicBarrier barrier; 

class Worker implements Runnable { int myRow; Worker(int row) { myRow = row; } 
public void run() { while (!done()) { processRow(myRow); 

try { barrier.await(); } catch (InterruptedException ex) { return; } catch 
(BrokenBarrierException ex) { return; } } } } 

public Solver(float[][] matrix) { data = matrix; N = matrix.length; barrier = 
new CyclicBarrier(N, new Runnable() { public void run() { mergeRows(...); } }); 
for (int i = 0; i < N; ++i) new Thread(new Worker(i)).start(); 

waitUntilDone(); } } 

Here, each worker thread processes a row of the matrix then waits at the 
barrier until all rows have been processed. When all rows are processed the 
supplied (|java.lang.Runnable|) barrier action is executed and merges the rows. 
If the merger determines that a solution has been found then done() will return 
true and each worker will terminate. 

If the barrier action does not rely on the parties being suspended when it is 
executed, then any of the threads in the party could execute that action when 
it is released. To facilitate this, each invocation of 
(|java.util.concurrent.CyclicBarrier|) returns the arrival index of that thread 
at the barrier. You can then choose which thread should execute the barrier 
action, for example: 

if (barrier.await() == 0) { // log the completion of this iteration } 

The CyclicBarrier uses a fast-fail all-or-none breakage model for failed 
synchronization attempts: If a thread leaves a barrier point prematurely 
because of interruption, failure, or timeout, all other threads, even those 
that have not yet resumed from a previous 
(|java.util.concurrent.CyclicBarrier|) , will also leave abnormally via 
(|java.util.concurrent.BrokenBarrierException|) (or InterruptedException if 
they too were interrupted at about the same time). 


*java.util.concurrent.CyclicBarrier(int)*

public CyclicBarrier(int parties)

Creates a new CyclicBarrier that will trip when the given number of parties 
(threads) are waiting upon it, and does not perform a predefined action upon 
each barrier. 

    parties - the number of threads that must invoke {@link #await} before the barrier is 
       tripped. 

*java.util.concurrent.CyclicBarrier(int,Runnable)*

public CyclicBarrier(
  int parties,
  java.lang.Runnable barrierAction)

Creates a new CyclicBarrier that will trip when the given number of parties 
(threads) are waiting upon it, and which will execute the given barrier action 
when the barrier is tripped, performed by the last thread entering the barrier. 

    parties - the number of threads that must invoke {@link #await} before the barrier is 
       tripped. 
    barrierAction - the command to execute when the barrier is tripped, or null if there is no 
       action. 

*java.util.concurrent.CyclicBarrier.await()*

public int await()
  throws |java.util.concurrent.BrokenBarrierException|
         |java.lang.InterruptedException|
         
Waits until all parties(|java.util.concurrent.CyclicBarrier|) have invoked 
await on this barrier. 

If the current thread is not the last to arrive then it is disabled for thread 
scheduling purposes and lies dormant until one of following things happens: 

The last thread arrives; or Some other thread interrupts(|java.lang.Thread|) 
the current thread; or Some other thread interrupts(|java.lang.Thread|) one of 
the other waiting threads; or Some other thread times out while waiting for 
barrier; or Some other thread invokes (|java.util.concurrent.CyclicBarrier|) on 
this barrier. 

If the current thread: 

has its interrupted status set on entry to this method; or is 
interrupted(|java.lang.Thread|) while waiting 

then (|java.lang.InterruptedException|) is thrown and the current thread's 
interrupted status is cleared. 

If the barrier is (|java.util.concurrent.CyclicBarrier|) while any thread is 
waiting, or if the barrier is broken(|java.util.concurrent.CyclicBarrier|) when 
await is invoked, or while any thread is waiting, then 
(|java.util.concurrent.BrokenBarrierException|) is thrown. 

If any thread is interrupted(|java.lang.Thread|) while waiting, then all other 
waiting threads will throw (|java.util.concurrent.BrokenBarrierException|) and 
the barrier is placed in the broken state. 

If the current thread is the last thread to arrive, and a non-null barrier 
action was supplied in the constructor, then the current thread runs the action 
before allowing the other threads to continue. If an exception occurs during 
the barrier action then that exception will be propagated in the current thread 
and the barrier is placed in the broken state. 


    Returns: the arrival index of the current thread, where index {@link #getParties()} - 1 
             indicates the first to arrive and zero indicates the last to 
             arrive. 
*java.util.concurrent.CyclicBarrier.await(long,TimeUnit)*

public int await(
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.util.concurrent.BrokenBarrierException|
         |java.lang.InterruptedException|
         |java.util.concurrent.TimeoutException|
         
Waits until all parties(|java.util.concurrent.CyclicBarrier|) have invoked 
await on this barrier. 

If the current thread is not the last to arrive then it is disabled for thread 
scheduling purposes and lies dormant until one of the following things happens: 

The last thread arrives; or The specified timeout elapses; or Some other thread 
interrupts(|java.lang.Thread|) the current thread; or Some other thread 
interrupts(|java.lang.Thread|) one of the other waiting threads; or Some other 
thread times out while waiting for barrier; or Some other thread invokes 
(|java.util.concurrent.CyclicBarrier|) on this barrier. 

If the current thread: 

has its interrupted status set on entry to this method; or is 
interrupted(|java.lang.Thread|) while waiting 

then (|java.lang.InterruptedException|) is thrown and the current thread's 
interrupted status is cleared. 

If the specified waiting time elapses then 
(|java.util.concurrent.TimeoutException|) is thrown. If the time is less than 
or equal to zero, the method will not wait at all. 

If the barrier is (|java.util.concurrent.CyclicBarrier|) while any thread is 
waiting, or if the barrier is broken(|java.util.concurrent.CyclicBarrier|) when 
await is invoked, or while any thread is waiting, then 
(|java.util.concurrent.BrokenBarrierException|) is thrown. 

If any thread is interrupted(|java.lang.Thread|) while waiting, then all other 
waiting threads will throw (|java.util.concurrent.BrokenBarrierException|) and 
the barrier is placed in the broken state. 

If the current thread is the last thread to arrive, and a non-null barrier 
action was supplied in the constructor, then the current thread runs the action 
before allowing the other threads to continue. If an exception occurs during 
the barrier action then that exception will be propagated in the current thread 
and the barrier is placed in the broken state. 

    timeout - the time to wait for the barrier 
    unit - the time unit of the timeout parameter 

    Returns: the arrival index of the current thread, where index {@link #getParties()} - 1 
             indicates the first to arrive and zero indicates the last to 
             arrive. 
*java.util.concurrent.CyclicBarrier.getNumberWaiting()*

public int getNumberWaiting()

Returns the number of parties currently waiting at the barrier. This method is 
primarily useful for debugging and assertions. 


    Returns: the number of parties currently blocked in {@link #await} 
*java.util.concurrent.CyclicBarrier.getParties()*

public int getParties()

Returns the number of parties required to trip this barrier. 


    Returns: the number of parties required to trip this barrier. 
*java.util.concurrent.CyclicBarrier.isBroken()*

public boolean isBroken()

Queries if this barrier is in a broken state. 


    Returns: true if one or more parties broke out of this barrier due to interruption or 
             timeout since construction or the last reset, or a barrier action 
             failed due to an exception; and false otherwise. 
*java.util.concurrent.CyclicBarrier.reset()*

public void reset()

Resets the barrier to its initial state. If any parties are currently waiting 
at the barrier, they will return with a 
(|java.util.concurrent.BrokenBarrierException|) . Note that resets after a 
breakage has occurred for other reasons can be complicated to carry out; 
threads need to re-synchronize in some other way, and choose one to perform the 
reset. It may be preferable to instead create a new barrier for subsequent use. 




*java.awt.font.LineMetrics* *LineMetrics* The LineMetrics class allows access to

public abstract class LineMetrics
  extends    |java.lang.Object|

|java.awt.font.LineMetrics_Description|
|java.awt.font.LineMetrics_Fields|
|java.awt.font.LineMetrics_Constructors|
|java.awt.font.LineMetrics_Methods|

================================================================================

*java.awt.font.LineMetrics_Constructors*
|java.awt.font.LineMetrics()|

*java.awt.font.LineMetrics_Methods*
|java.awt.font.LineMetrics.getAscent()|Returns the ascent of the text.
|java.awt.font.LineMetrics.getBaselineIndex()|Returns the baseline index of the
|java.awt.font.LineMetrics.getBaselineOffsets()|Returns the baseline offsets of
|java.awt.font.LineMetrics.getDescent()|Returns the descent of the text.
|java.awt.font.LineMetrics.getHeight()|Returns the height of the text.
|java.awt.font.LineMetrics.getLeading()|Returns the leading of the text.
|java.awt.font.LineMetrics.getNumChars()|Returns the number of characters (char
|java.awt.font.LineMetrics.getStrikethroughOffset()|Returns the position of the
|java.awt.font.LineMetrics.getStrikethroughThickness()|Returns the thickness of
|java.awt.font.LineMetrics.getUnderlineOffset()|Returns the position of the und
|java.awt.font.LineMetrics.getUnderlineThickness()|Returns the thickness of the

*java.awt.font.LineMetrics_Description*

The LineMetrics class allows access to the metrics needed to layout characters 
along a line and to layout of a set of lines. A LineMetrics object encapsulates 
the measurement information associated with a run of text. 

Fonts can have different metrics for different ranges of characters. The 
getLineMetrics methods of Font(|java.awt.Font|) take some text as an argument 
and return a LineMetrics object describing the metrics of the initial number of 
characters in that text, as returned by (|java.awt.font.LineMetrics|) . 


*java.awt.font.LineMetrics()*

public LineMetrics()




*java.awt.font.LineMetrics.getAscent()*

public abstract float getAscent()

Returns the ascent of the text. The ascent is the distance from the baseline to 
the ascender line. The ascent usually represents the the height of the capital 
letters of the text. Some characters can extend above the ascender line. 


    Returns: the ascent of the text. 
*java.awt.font.LineMetrics.getBaselineIndex()*

public abstract int getBaselineIndex()

Returns the baseline index of the text. The index is one of 
ROMAN_BASELINE(|java.awt.Font|) , CENTER_BASELINE(|java.awt.Font|) , 
HANGING_BASELINE(|java.awt.Font|) . 


    Returns: the baseline of the text. 
*java.awt.font.LineMetrics.getBaselineOffsets()*

public abstract float getBaselineOffsets()

Returns the baseline offsets of the text, relative to the baseline of the text. 
The offsets are indexed by baseline index. For example, if the baseline index 
is CENTER_BASELINE then offsets[HANGING_BASELINE] is usually negative, 
offsets[CENTER_BASELINE] is zero, and offsets[ROMAN_BASELINE] is usually 
positive. 


    Returns: the baseline offsets of the text. 
*java.awt.font.LineMetrics.getDescent()*

public abstract float getDescent()

Returns the descent of the text. The descent is the distance from the baseline 
to the descender line. The descent usually represents the distance to the 
bottom of lower case letters like 'p'. Some characters can extend below the 
descender line. 


    Returns: the descent of the text. 
*java.awt.font.LineMetrics.getHeight()*

public abstract float getHeight()

Returns the height of the text. The height is equal to the sum of the ascent, 
the descent and the leading. 


    Returns: the height of the text. 
*java.awt.font.LineMetrics.getLeading()*

public abstract float getLeading()

Returns the leading of the text. The leading is the recommended distance from 
the bottom of the descender line to the top of the next line. 


    Returns: the leading of the text. 
*java.awt.font.LineMetrics.getNumChars()*

public abstract int getNumChars()

Returns the number of characters (char values) in the text whose metrics are 
encapsulated by this LineMetrics object. 


    Returns: the number of characters (char values) in the text with which this LineMetrics 
             was created. 
*java.awt.font.LineMetrics.getStrikethroughOffset()*

public abstract float getStrikethroughOffset()

Returns the position of the strike-through line relative to the baseline. 


    Returns: the position of the strike-through line. 
*java.awt.font.LineMetrics.getStrikethroughThickness()*

public abstract float getStrikethroughThickness()

Returns the thickness of the strike-through line. 


    Returns: the thickness of the strike-through line. 
*java.awt.font.LineMetrics.getUnderlineOffset()*

public abstract float getUnderlineOffset()

Returns the position of the underline relative to the baseline. 


    Returns: the position of the underline. 
*java.awt.font.LineMetrics.getUnderlineThickness()*

public abstract float getUnderlineThickness()

Returns the thickness of the underline. 


    Returns: the thickness of the underline. 


*javax.swing.SpinnerNumberModel* *SpinnerNumberModel* A SpinnerModel for sequences of numbers.

public class SpinnerNumberModel
  extends    |javax.swing.AbstractSpinnerModel|
  implements |java.io.Serializable|

|javax.swing.SpinnerNumberModel_Description|
|javax.swing.SpinnerNumberModel_Fields|
|javax.swing.SpinnerNumberModel_Constructors|
|javax.swing.SpinnerNumberModel_Methods|

====================================================================================================================================================================================

*javax.swing.SpinnerNumberModel_Constructors*
|javax.swing.SpinnerNumberModel()|Constructs a SpinnerNumberModel with no  minimum or maximum value,   stepSize equal to one, and an initial value of zero.
|javax.swing.SpinnerNumberModel(double,double,double,double)|Constructs a SpinnerNumberModel with the specified  value, minimum/maximum bounds,   and stepSize.
|javax.swing.SpinnerNumberModel(int,int,int,int)|Constructs a SpinnerNumberModel with the specified  value, minimum/maximum bounds,  and stepSize.
|javax.swing.SpinnerNumberModel(Number,Comparable,Comparable,Number)|Constructs a SpinnerModel that represents  a closed sequence of   numbers from minimum to maximum.

*javax.swing.SpinnerNumberModel_Methods*
|javax.swing.SpinnerNumberModel.getMaximum()|Returns the last number in the sequence.
|javax.swing.SpinnerNumberModel.getMinimum()|Returns the first number in this sequence.
|javax.swing.SpinnerNumberModel.getNextValue()|Returns the next number in the sequence.
|javax.swing.SpinnerNumberModel.getNumber()|Returns the value of the current element of the sequence.
|javax.swing.SpinnerNumberModel.getPreviousValue()|Returns the previous number in the sequence.
|javax.swing.SpinnerNumberModel.getStepSize()|Returns the size of the value change computed by the  getNextValue   and getPreviousValue methods.
|javax.swing.SpinnerNumberModel.getValue()|Returns the value of the current element of the sequence.
|javax.swing.SpinnerNumberModel.setMaximum(Comparable)|Changes the upper bound for numbers in this sequence.
|javax.swing.SpinnerNumberModel.setMinimum(Comparable)|Changes the lower bound for numbers in this sequence.
|javax.swing.SpinnerNumberModel.setStepSize(Number)|Changes the size of the value change computed by the  getNextValue and getPreviousValue  methods.
|javax.swing.SpinnerNumberModel.setValue(Object)|Sets the current value for this sequence.

*javax.swing.SpinnerNumberModel_Description*

A SpinnerModel for sequences of numbers. The upper and lower bounds of the sequence are defined by properties called minimum and maximum. The size of the increase or decrease 
computed by the nextValue and previousValue methods is defined by a property called stepSize. The minimum and maximum properties can be null to indicate that the sequence has no 
lower or upper limit. All of the properties in this class are defined in terms of two generic types: Number and Comparable, so that all Java numeric types may be accommodated. 
Internally, there's only support for values whose type is one of the primitive Number types: Double, Float, Long, Integer, Short, or Byte. 

To create a SpinnerNumberModel for the integer range zero to one hundred, with fifty as the initial value, one could write: 

Integer value = new Integer(50); Integer min = new Integer(0); Integer max = new Integer(100); Integer step = new Integer(1); SpinnerNumberModel model = new 
SpinnerNumberModel(value, min, max, step); int fifty = model.getNumber().intValue(); 



Spinners for integers and doubles are common, so special constructors for these cases are provided. For example to create the model in the previous example, one could also write: 

SpinnerNumberModel model = new SpinnerNumberModel(50, 0, 100, 1); 

This model inherits a ChangeListener. The ChangeListeners are notified whenever the model's value, stepSize, minimum, or maximum properties changes. 



*javax.swing.SpinnerNumberModel()*

public SpinnerNumberModel()

Constructs a SpinnerNumberModel with no minimum or maximum value, stepSize equal to one, and an initial value of zero. 


*javax.swing.SpinnerNumberModel(double,double,double,double)*

public SpinnerNumberModel(
  double value,
  double minimum,
  double maximum,
  double stepSize)

Constructs a SpinnerNumberModel with the specified value, minimum/maximum bounds, and stepSize. 

    value - the current value of the model 
    minimum - the first number in the sequence 
    maximum - the last number in the sequence 
    stepSize - the difference between elements of the sequence 

*javax.swing.SpinnerNumberModel(int,int,int,int)*

public SpinnerNumberModel(
  int value,
  int minimum,
  int maximum,
  int stepSize)

Constructs a SpinnerNumberModel with the specified value, minimum/maximum bounds, and stepSize. 

    value - the current value of the model 
    minimum - the first number in the sequence 
    maximum - the last number in the sequence 
    stepSize - the difference between elements of the sequence 

*javax.swing.SpinnerNumberModel(Number,Comparable,Comparable,Number)*

public SpinnerNumberModel(
  java.lang.Number value,
  java.lang.Comparable minimum,
  java.lang.Comparable maximum,
  java.lang.Number stepSize)

Constructs a SpinnerModel that represents a closed sequence of numbers from minimum to maximum. The nextValue and previousValue methods compute elements of the sequence by adding 
or subtracting stepSize respectively. All of the parameters must be mutually Comparable, value and stepSize must be instances of Integer Long, Float, or Double. 

The minimum and maximum parameters can be null to indicate that the range doesn't have an upper or lower bound. If value or stepSize is null, or if both minimum and maximum are 
specified and mininum > maximum then an IllegalArgumentException is thrown. Similarly if (minimum <= value <= maximum) is false, an IllegalArgumentException is thrown. 

    value - the current (non null) value of the model 
    minimum - the first number in the sequence or null 
    maximum - the last number in the sequence or null 
    stepSize - the difference between elements of the sequence 

*javax.swing.SpinnerNumberModel.getMaximum()*

public |java.lang.Comparable| getMaximum()

Returns the last number in the sequence. 



    Returns: the value of the maximum property 

*javax.swing.SpinnerNumberModel.getMinimum()*

public |java.lang.Comparable| getMinimum()

Returns the first number in this sequence. 



    Returns: the value of the minimum property 

*javax.swing.SpinnerNumberModel.getNextValue()*

public |java.lang.Object| getNextValue()

Returns the next number in the sequence. 



    Returns: value + stepSize or null if the sum exceeds maximum. 

*javax.swing.SpinnerNumberModel.getNumber()*

public |java.lang.Number| getNumber()

Returns the value of the current element of the sequence. 



    Returns: the value property 

*javax.swing.SpinnerNumberModel.getPreviousValue()*

public |java.lang.Object| getPreviousValue()

Returns the previous number in the sequence. 



    Returns: value - stepSize, or null if the sum is less than minimum. 

*javax.swing.SpinnerNumberModel.getStepSize()*

public |java.lang.Number| getStepSize()

Returns the size of the value change computed by the getNextValue and getPreviousValue methods. 



    Returns: the value of the stepSize property 

*javax.swing.SpinnerNumberModel.getValue()*

public |java.lang.Object| getValue()

Returns the value of the current element of the sequence. 



    Returns: the value property 

*javax.swing.SpinnerNumberModel.setMaximum(Comparable)*

public void setMaximum(java.lang.Comparable maximum)

Changes the upper bound for numbers in this sequence. If maximum is null, then there is no upper bound. No bounds checking is done here; the new maximum value may invalidate the 
(minimum invariant enforced by the constructors. This is to simplify updating the model, naturally one should ensure that the invariant is true before calling the next, previous, 
or setValue methods. 

Typically this property is a Number of the same type as the value however it's possible to use any Comparable with a compareTo method for a Number with the same type as the value. 
See setMinimum for an example. 

This method fires a ChangeEvent if the maximum has changed. 


    maximum - a Comparable that has a compareTo method for Numbers with the same type as value 

*javax.swing.SpinnerNumberModel.setMinimum(Comparable)*

public void setMinimum(java.lang.Comparable minimum)

Changes the lower bound for numbers in this sequence. If minimum is null, then there is no lower bound. No bounds checking is done here; the new minimum value may invalidate the 
(minimum <= value maximum) invariant enforced by the constructors. This is to simplify updating the model, naturally one should ensure that the invariant is true before calling 
the getNextValue, getPreviousValue, or setValue methods. 

Typically this property is a Number of the same type as the value however it's possible to use any Comparable with a compareTo method for a Number with the same type as the value. 
For example if value was a Long, minimum might be a Date subclass defined like this: 

MyDate extends Date { // Date already implements Comparable public int compareTo(Long o) { long t = getTime(); return (t This method fires a ChangeEvent if the minimum has 
changed. 


    minimum - a Comparable that has a compareTo method for Numbers with the same type as value 

*javax.swing.SpinnerNumberModel.setStepSize(Number)*

public void setStepSize(java.lang.Number stepSize)

Changes the size of the value change computed by the getNextValue and getPreviousValue methods. An IllegalArgumentException is thrown if stepSize is null. 

This method fires a ChangeEvent if the stepSize has changed. 


    stepSize - the size of the value change computed by the getNextValue and getPreviousValue methods 

*javax.swing.SpinnerNumberModel.setValue(Object)*

public void setValue(java.lang.Object value)

Sets the current value for this sequence. If value is null, or not a Number, an IllegalArgumentException is thrown. No bounds checking is done here; the new value may invalidate 
the (minimum <= value <= maximum) invariant enforced by the constructors. It's also possible to set the value to be something that wouldn't naturally occur in the sequence, i.e. a 
value that's not modulo the stepSize. This is to simplify updating the model, and to accommodate spinners that don't want to restrict values that have been directly entered by the 
user. Naturally, one should ensure that the (minimum <= value <= maximum) invariant is true before calling the next, previous, or setValue methods. 

This method fires a ChangeEvent if the value has changed. 


    value - the current (non null) Number for this sequence 



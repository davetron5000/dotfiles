*javax.swing.JTabbedPane* *JTabbedPane* A component that lets the user switch be

public class JTabbedPane
  extends    |javax.swing.JComponent|
  implements |java.io.Serializable|
             |javax.accessibility.Accessible|
             |javax.swing.SwingConstants|

|javax.swing.JTabbedPane_Description|
|javax.swing.JTabbedPane_Fields|
|javax.swing.JTabbedPane_Constructors|
|javax.swing.JTabbedPane_Methods|

================================================================================

*javax.swing.JTabbedPane_Fields*
|javax.swing.event.ChangeEvent_javax.swing.JTabbedPane.changeEvent|
|javax.swing.event.ChangeListener_javax.swing.JTabbedPane.changeListener|
|javax.swing.SingleSelectionModel_javax.swing.JTabbedPane.model|
|int_javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT|
|int_javax.swing.JTabbedPane.tabPlacement|
|int_javax.swing.JTabbedPane.WRAP_TAB_LAYOUT|

*javax.swing.JTabbedPane_Constructors*
|javax.swing.JTabbedPane()|Creates an empty TabbedPane with a default  tab plac
|javax.swing.JTabbedPane(int)|Creates an empty TabbedPane with the specified ta
|javax.swing.JTabbedPane(int,int)|Creates an empty TabbedPane with the specifie

*javax.swing.JTabbedPane_Methods*
|javax.swing.JTabbedPane.add(Component)|Adds a component with a tab title defau
|javax.swing.JTabbedPane.add(Component,int)|Adds a component at the specified t
|javax.swing.JTabbedPane.add(Component,Object)|Adds a component to the tabbed p
|javax.swing.JTabbedPane.add(Component,Object,int)|Adds a component at the spec
|javax.swing.JTabbedPane.add(String,Component)|Adds a component with the specif
|javax.swing.JTabbedPane.addChangeListener(ChangeListener)|Adds a ChangeListene
|javax.swing.JTabbedPane.addTab(String,Component)|Adds a component represented 
|javax.swing.JTabbedPane.addTab(String,Icon,Component)|Adds a component represe
|javax.swing.JTabbedPane.addTab(String,Icon,Component,String)|Adds a component 
|javax.swing.JTabbedPane.createChangeListener()|Subclasses that want to handle 
|javax.swing.JTabbedPane.fireStateChanged()|Sends a ChangeEvent, whose source i
|javax.swing.JTabbedPane.getAccessibleContext()|Gets the AccessibleContext asso
|javax.swing.JTabbedPane.getBackgroundAt(int)|Returns the tab background color 
|javax.swing.JTabbedPane.getBoundsAt(int)|Returns the tab bounds at index.
|javax.swing.JTabbedPane.getChangeListeners()|Returns an array of all the Chang
|javax.swing.JTabbedPane.getComponentAt(int)|Returns the component at index.
|javax.swing.JTabbedPane.getDisabledIconAt(int)|Returns the tab disabled icon a
|javax.swing.JTabbedPane.getDisplayedMnemonicIndexAt(int)|Returns the character
|javax.swing.JTabbedPane.getForegroundAt(int)|Returns the tab foreground color 
|javax.swing.JTabbedPane.getIconAt(int)|Returns the tab icon at index.
|javax.swing.JTabbedPane.getMnemonicAt(int)|Returns the keyboard mnemonic for a
|javax.swing.JTabbedPane.getModel()|Returns the model associated with this tabb
|javax.swing.JTabbedPane.getSelectedComponent()|Returns the currently selected 
|javax.swing.JTabbedPane.getSelectedIndex()|Returns the currently selected inde
|javax.swing.JTabbedPane.getTabCount()|Returns the number of tabs in this tabbe
|javax.swing.JTabbedPane.getTabLayoutPolicy()|Returns the policy used by the ta
|javax.swing.JTabbedPane.getTabPlacement()|Returns the placement of the tabs fo
|javax.swing.JTabbedPane.getTabRunCount()|Returns the number of tab runs curren
|javax.swing.JTabbedPane.getTitleAt(int)|Returns the tab title at index.
|javax.swing.JTabbedPane.getToolTipText(MouseEvent)|Returns the tooltip text fo
|javax.swing.JTabbedPane.getToolTipTextAt(int)|Returns the tab tooltip text at 
|javax.swing.JTabbedPane.getUI()|Returns the UI object which implements the Lfo
|javax.swing.JTabbedPane.getUIClassID()|Returns the name of the UI class that i
|javax.swing.JTabbedPane.indexAtLocation(int,int)|Returns the tab index corresp
|javax.swing.JTabbedPane.indexOfComponent(Component)|Returns the index of the t
|javax.swing.JTabbedPane.indexOfTab(Icon)|Returns the first tab index with a gi
|javax.swing.JTabbedPane.indexOfTab(String)|Returns the first tab index with a 
|javax.swing.JTabbedPane.insertTab(String,Icon,Component,String,int)|Inserts a 
|javax.swing.JTabbedPane.isEnabledAt(int)|Returns whether or not the tab at ind
|javax.swing.JTabbedPane.paramString()|Returns a string representation of this 
|javax.swing.JTabbedPane.remove(Component)|Removes the specified Component from
|javax.swing.JTabbedPane.remove(int)|Removes the tab and component which corres
|javax.swing.JTabbedPane.removeAll()|Removes all the tabs and their correspondi
|javax.swing.JTabbedPane.removeChangeListener(ChangeListener)|Removes a ChangeL
|javax.swing.JTabbedPane.removeTabAt(int)|Removes the tab at index.
|javax.swing.JTabbedPane.setBackgroundAt(int,Color)|Sets the background color a
|javax.swing.JTabbedPane.setComponentAt(int,Component)|Sets the component at in
|javax.swing.JTabbedPane.setDisabledIconAt(int,Icon)|Sets the disabled icon at 
|javax.swing.JTabbedPane.setDisplayedMnemonicIndexAt(int,int)|Provides a hint t
|javax.swing.JTabbedPane.setEnabledAt(int,boolean)|Sets whether or not the tab 
|javax.swing.JTabbedPane.setForegroundAt(int,Color)|Sets the foreground color a
|javax.swing.JTabbedPane.setIconAt(int,Icon)|Sets the icon at index to icon whi
|javax.swing.JTabbedPane.setMnemonicAt(int,int)|Sets the keyboard mnemonic for 
|javax.swing.JTabbedPane.setModel(SingleSelectionModel)|Sets the model to be us
|javax.swing.JTabbedPane.setSelectedComponent(Component)|Sets the selected comp
|javax.swing.JTabbedPane.setSelectedIndex(int)|Sets the selected index for this
|javax.swing.JTabbedPane.setTabLayoutPolicy(int)|Sets the policy which the tabb
|javax.swing.JTabbedPane.setTabPlacement(int)|Sets the tab placement for this t
|javax.swing.JTabbedPane.setTitleAt(int,String)|Sets the title at index to titl
|javax.swing.JTabbedPane.setToolTipTextAt(int,String)|Sets the tooltip text at 
|javax.swing.JTabbedPane.setUI(TabbedPaneUI)|Sets the UI object which implement
|javax.swing.JTabbedPane.updateUI()|Resets the UI property to a value from the 

*javax.swing.JTabbedPane_Description*

A component that lets the user switch between a group of components by clicking 
on a tab with a given title and/or icon. For examples and information on using 
tabbed panes see How to Use Tabbed Panes, a section in The Java Tutorial. 

Tabs/components are added to a TabbedPane object by using the addTab and 
insertTab methods. A tab is represented by an index corresponding to the 
position it was added in, where the first tab has an index equal to 0 and the 
last tab has an index equal to the tab count minus 1. 

The TabbedPane uses a SingleSelectionModel to represent the set of tab indices 
and the currently selected index. If the tab count is greater than 0, then 
there will always be a selected index, which by default will be initialized to 
the first tab. If the tab count is 0, then the selected index will be -1. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.event.ChangeEvent_javax.swing.JTabbedPane.changeEvent*

A component that lets the user switch between a group of components by clicking 
on a tab with a given title and/or icon. For examples and information on using 
tabbed panes see How to Use Tabbed Panes, a section in The Java Tutorial. 

Tabs/components are added to a TabbedPane object by using the addTab and 
insertTab methods. A tab is represented by an index corresponding to the 
position it was added in, where the first tab has an index equal to 0 and the 
last tab has an index equal to the tab count minus 1. 

The TabbedPane uses a SingleSelectionModel to represent the set of tab indices 
and the currently selected index. If the tab count is greater than 0, then 
there will always be a selected index, which by default will be initialized to 
the first tab. If the tab count is 0, then the selected index will be -1. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.event.ChangeListener_javax.swing.JTabbedPane.changeListener*

A component that lets the user switch between a group of components by clicking 
on a tab with a given title and/or icon. For examples and information on using 
tabbed panes see How to Use Tabbed Panes, a section in The Java Tutorial. 

Tabs/components are added to a TabbedPane object by using the addTab and 
insertTab methods. A tab is represented by an index corresponding to the 
position it was added in, where the first tab has an index equal to 0 and the 
last tab has an index equal to the tab count minus 1. 

The TabbedPane uses a SingleSelectionModel to represent the set of tab indices 
and the currently selected index. If the tab count is greater than 0, then 
there will always be a selected index, which by default will be initialized to 
the first tab. If the tab count is 0, then the selected index will be -1. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.SingleSelectionModel_javax.swing.JTabbedPane.model*

A component that lets the user switch between a group of components by clicking 
on a tab with a given title and/or icon. For examples and information on using 
tabbed panes see How to Use Tabbed Panes, a section in The Java Tutorial. 

Tabs/components are added to a TabbedPane object by using the addTab and 
insertTab methods. A tab is represented by an index corresponding to the 
position it was added in, where the first tab has an index equal to 0 and the 
last tab has an index equal to the tab count minus 1. 

The TabbedPane uses a SingleSelectionModel to represent the set of tab indices 
and the currently selected index. If the tab count is greater than 0, then 
there will always be a selected index, which by default will be initialized to 
the first tab. If the tab count is 0, then the selected index will be -1. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT*

A component that lets the user switch between a group of components by clicking 
on a tab with a given title and/or icon. For examples and information on using 
tabbed panes see How to Use Tabbed Panes, a section in The Java Tutorial. 

Tabs/components are added to a TabbedPane object by using the addTab and 
insertTab methods. A tab is represented by an index corresponding to the 
position it was added in, where the first tab has an index equal to 0 and the 
last tab has an index equal to the tab count minus 1. 

The TabbedPane uses a SingleSelectionModel to represent the set of tab indices 
and the currently selected index. If the tab count is greater than 0, then 
there will always be a selected index, which by default will be initialized to 
the first tab. If the tab count is 0, then the selected index will be -1. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JTabbedPane.tabPlacement*

A component that lets the user switch between a group of components by clicking 
on a tab with a given title and/or icon. For examples and information on using 
tabbed panes see How to Use Tabbed Panes, a section in The Java Tutorial. 

Tabs/components are added to a TabbedPane object by using the addTab and 
insertTab methods. A tab is represented by an index corresponding to the 
position it was added in, where the first tab has an index equal to 0 and the 
last tab has an index equal to the tab count minus 1. 

The TabbedPane uses a SingleSelectionModel to represent the set of tab indices 
and the currently selected index. If the tab count is greater than 0, then 
there will always be a selected index, which by default will be initialized to 
the first tab. If the tab count is 0, then the selected index will be -1. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JTabbedPane.WRAP_TAB_LAYOUT*

A component that lets the user switch between a group of components by clicking 
on a tab with a given title and/or icon. For examples and information on using 
tabbed panes see How to Use Tabbed Panes, a section in The Java Tutorial. 

Tabs/components are added to a TabbedPane object by using the addTab and 
insertTab methods. A tab is represented by an index corresponding to the 
position it was added in, where the first tab has an index equal to 0 and the 
last tab has an index equal to the tab count minus 1. 

The TabbedPane uses a SingleSelectionModel to represent the set of tab indices 
and the currently selected index. If the tab count is greater than 0, then 
there will always be a selected index, which by default will be initialized to 
the first tab. If the tab count is 0, then the selected index will be -1. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.JTabbedPane()*

public JTabbedPane()

Creates an empty TabbedPane with a default tab placement of JTabbedPane.TOP. 


*javax.swing.JTabbedPane(int)*

public JTabbedPane(int tabPlacement)

Creates an empty TabbedPane with the specified tab placement of either: 
JTabbedPane.TOP, JTabbedPane.BOTTOM, JTabbedPane.LEFT, or JTabbedPane.RIGHT. 

    tabPlacement - the placement for the tabs relative to the content 

*javax.swing.JTabbedPane(int,int)*

public JTabbedPane(
  int tabPlacement,
  int tabLayoutPolicy)

Creates an empty TabbedPane with the specified tab placement and tab layout 
policy. Tab placement may be either: JTabbedPane.TOP, JTabbedPane.BOTTOM, 
JTabbedPane.LEFT, or JTabbedPane.RIGHT. Tab layout policy may be either: 
JTabbedPane.WRAP_TAB_LAYOUT or JTabbedPane.SCROLL_TAB_LAYOUT. 

    tabPlacement - the placement for the tabs relative to the content 
    tabLayoutPolicy - the policy for laying out tabs when all tabs will not fit on one run 

*javax.swing.JTabbedPane.add(Component)*

public |java.awt.Component| add(java.awt.Component component)

Adds a component with a tab title defaulting to the name of the component which 
is the result of calling component.getName. Cover method for insertTab. 

    component - the component to be displayed when this tab is clicked 

    Returns: the component 
*javax.swing.JTabbedPane.add(Component,int)*

public |java.awt.Component| add(
  java.awt.Component component,
  int index)

Adds a component at the specified tab index with a tab title defaulting to the 
name of the component. Cover method for insertTab. 

    component - the component to be displayed when this tab is clicked 
    index - the position to insert this new tab 

    Returns: the component 
*javax.swing.JTabbedPane.add(Component,Object)*

public void add(
  java.awt.Component component,
  java.lang.Object constraints)

Adds a component to the tabbed pane. If constraints is a String or an Icon, it 
will be used for the tab title, otherwise the component's name will be used as 
the tab title. Cover method for insertTab. 

    component - the component to be displayed when this tab is clicked 
    constraints - the object to be displayed in the tab 

*javax.swing.JTabbedPane.add(Component,Object,int)*

public void add(
  java.awt.Component component,
  java.lang.Object constraints,
  int index)

Adds a component at the specified tab index. If constraints is a String or an 
Icon, it will be used for the tab title, otherwise the component's name will be 
used as the tab title. Cover method for insertTab. 

    component - the component to be displayed when this tab is clicked 
    constraints - the object to be displayed in the tab 
    index - the position to insert this new tab 

*javax.swing.JTabbedPane.add(String,Component)*

public |java.awt.Component| add(
  java.lang.String title,
  java.awt.Component component)

Adds a component with the specified tab title. Cover method for insertTab. 

    title - the title to be displayed in this tab 
    component - the component to be displayed when this tab is clicked 

    Returns: the component 
*javax.swing.JTabbedPane.addChangeListener(ChangeListener)*

public void addChangeListener(javax.swing.event.ChangeListener l)

Adds a ChangeListener to this tabbedpane. 

    l - the ChangeListener to add 

*javax.swing.JTabbedPane.addTab(String,Component)*

public void addTab(
  java.lang.String title,
  java.awt.Component component)

Adds a component represented by a title and no icon. Cover method for 
insertTab. 

    title - the title to be displayed in this tab 
    component - the component to be displayed when this tab is clicked 

*javax.swing.JTabbedPane.addTab(String,Icon,Component)*

public void addTab(
  java.lang.String title,
  javax.swing.Icon icon,
  java.awt.Component component)

Adds a component represented by a title and/or icon, either of which can be 
null. Cover method for insertTab. 

    title - the title to be displayed in this tab 
    icon - the icon to be displayed in this tab 
    component - the component to be displayed when this tab is clicked 

*javax.swing.JTabbedPane.addTab(String,Icon,Component,String)*

public void addTab(
  java.lang.String title,
  javax.swing.Icon icon,
  java.awt.Component component,
  java.lang.String tip)

Adds a component and tip represented by a title and/or icon, either of which 
can be null. Cover method for insertTab. 

    title - the title to be displayed in this tab 
    icon - the icon to be displayed in this tab 
    component - the component to be displayed when this tab is clicked 
    tip - the tooltip to be displayed for this tab 

*javax.swing.JTabbedPane.createChangeListener()*

protected |javax.swing.event.ChangeListener| createChangeListener()

Subclasses that want to handle ChangeEvents differently can override this to 
return a subclass of ModelListener or another ChangeListener implementation. 


*javax.swing.JTabbedPane.fireStateChanged()*

protected void fireStateChanged()

Sends a ChangeEvent, whose source is this tabbedpane, to each listener. This 
method method is called each time a ChangeEvent is received from the model. 


*javax.swing.JTabbedPane.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JTabbedPane. For tabbed panes, 
the AccessibleContext takes the form of an AccessibleJTabbedPane. A new 
AccessibleJTabbedPane instance is created if necessary. 


    Returns: an AccessibleJTabbedPane that serves as the AccessibleContext of this 
             JTabbedPane 
*javax.swing.JTabbedPane.getBackgroundAt(int)*

public |java.awt.Color| getBackgroundAt(int index)

Returns the tab background color at index. 

    index - the index of the item being queried 

    Returns: the Color of the tab background at index 
*javax.swing.JTabbedPane.getBoundsAt(int)*

public |java.awt.Rectangle| getBoundsAt(int index)

Returns the tab bounds at index. If the tab at this index is not currently 
visible in the UI, then returns null. If there is no UI set on this tabbedpane, 
then returns null. 

    index - the index to be queried 

    Returns: a Rectangle containing the tab bounds at index, or null if tab at index is not 
             currently visible in the UI, or if there is no UI set on this 
             tabbedpane 
*javax.swing.JTabbedPane.getChangeListeners()*

public |javax.swing.event.ChangeListener| getChangeListeners()

Returns an array of all the ChangeListeners added to this JTabbedPane with 
addChangeListener. 


    Returns: all of the ChangeListeners added or an empty array if no listeners have been 
             added 
*javax.swing.JTabbedPane.getComponentAt(int)*

public |java.awt.Component| getComponentAt(int index)

Returns the component at index. 

    index - the index of the item being queried 

    Returns: the Component at index 
*javax.swing.JTabbedPane.getDisabledIconAt(int)*

public |javax.swing.Icon| getDisabledIconAt(int index)

Returns the tab disabled icon at index. If the tab disabled icon doesn't exist 
at index this will forward the call to the look and feel to construct an 
appropriate disabled Icon from the corresponding enabled Icon. Some look and 
feels might not render the disabled Icon, in which case it won't be created. 

    index - the index of the item being queried 

    Returns: the icon at index 
*javax.swing.JTabbedPane.getDisplayedMnemonicIndexAt(int)*

public int getDisplayedMnemonicIndexAt(int tabIndex)

Returns the character, as an index, that the look and feel should provide 
decoration for as representing the mnemonic character. 

    tabIndex - the index of the tab that the mnemonic refers to 

    Returns: index representing mnemonic character if one exists; otherwise returns -1 
*javax.swing.JTabbedPane.getForegroundAt(int)*

public |java.awt.Color| getForegroundAt(int index)

Returns the tab foreground color at index. 

    index - the index of the item being queried 

    Returns: the Color of the tab foreground at index 
*javax.swing.JTabbedPane.getIconAt(int)*

public |javax.swing.Icon| getIconAt(int index)

Returns the tab icon at index. 

    index - the index of the item being queried 

    Returns: the icon at index 
*javax.swing.JTabbedPane.getMnemonicAt(int)*

public int getMnemonicAt(int tabIndex)

Returns the keyboard mnemonic for accessing the specified tab. The mnemonic is 
the key which when combined with the look and feel's mouseless modifier 
(usually Alt) will activate the specified tab. 

    tabIndex - the index of the tab that the mnemonic refers to 

    Returns: the key code which represents the mnemonic; -1 if a mnemonic is not specified 
             for the tab 
*javax.swing.JTabbedPane.getModel()*

public |javax.swing.SingleSelectionModel| getModel()

Returns the model associated with this tabbedpane. 


*javax.swing.JTabbedPane.getSelectedComponent()*

public |java.awt.Component| getSelectedComponent()

Returns the currently selected component for this tabbedpane. Returns null if 
there is no currently selected tab. 


    Returns: the component corresponding to the selected tab 
*javax.swing.JTabbedPane.getSelectedIndex()*

public int getSelectedIndex()

Returns the currently selected index for this tabbedpane. Returns -1 if there 
is no currently selected tab. 


    Returns: the index of the selected tab 
*javax.swing.JTabbedPane.getTabCount()*

public int getTabCount()

Returns the number of tabs in this tabbedpane. 


    Returns: an integer specifying the number of tabbed pages 
*javax.swing.JTabbedPane.getTabLayoutPolicy()*

public int getTabLayoutPolicy()

Returns the policy used by the tabbedpane to layout the tabs when all the tabs 
will not fit within a single run. 


*javax.swing.JTabbedPane.getTabPlacement()*

public int getTabPlacement()

Returns the placement of the tabs for this tabbedpane. 


*javax.swing.JTabbedPane.getTabRunCount()*

public int getTabRunCount()

Returns the number of tab runs currently used to display the tabs. 


    Returns: an integer giving the number of rows if the tabPlacement is TOP or BOTTOM and 
             the number of columns if tabPlacement is LEFT or RIGHT, or 0 if 
             there is no UI set on this tabbedpane 
*javax.swing.JTabbedPane.getTitleAt(int)*

public |java.lang.String| getTitleAt(int index)

Returns the tab title at index. 

    index - the index of the item being queried 

    Returns: the title at index 
*javax.swing.JTabbedPane.getToolTipText(MouseEvent)*

public |java.lang.String| getToolTipText(java.awt.event.MouseEvent event)

Returns the tooltip text for the component determined by the mouse event 
location. 

    event - the MouseEvent that tells where the cursor is lingering 

    Returns: the String containing the tooltip text 
*javax.swing.JTabbedPane.getToolTipTextAt(int)*

public |java.lang.String| getToolTipTextAt(int index)

Returns the tab tooltip text at index. 

    index - the index of the item being queried 

    Returns: a string containing the tool tip text at index 
*javax.swing.JTabbedPane.getUI()*

public |javax.swing.plaf.TabbedPaneUI| getUI()

Returns the UI object which implements the Lfor this component. 


    Returns: a TabbedPaneUI object 
*javax.swing.JTabbedPane.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the name of the UI class that implements the Lfor this component. 


    Returns: the string "TabbedPaneUI" 
*javax.swing.JTabbedPane.indexAtLocation(int,int)*

public int indexAtLocation(
  int x,
  int y)

Returns the tab index corresponding to the tab whose bounds intersect the 
specified location. Returns -1 if no tab intersects the location. 

    x - the x location relative to this tabbedpane 
    y - the y location relative to this tabbedpane 

    Returns: the tab index which intersects the location, or -1 if no tab intersects the 
             location 
*javax.swing.JTabbedPane.indexOfComponent(Component)*

public int indexOfComponent(java.awt.Component component)

Returns the index of the tab for the specified component. Returns -1 if there 
is no tab for this component. 

    component - the component for the tab 

    Returns: the first tab which matches this component, or -1 if there is no tab for this 
             component 
*javax.swing.JTabbedPane.indexOfTab(Icon)*

public int indexOfTab(javax.swing.Icon icon)

Returns the first tab index with a given icon, or -1 if no tab has this icon. 

    icon - the icon for the tab 

    Returns: the first tab index which matches icon, or -1 if no tab has this icon 
*javax.swing.JTabbedPane.indexOfTab(String)*

public int indexOfTab(java.lang.String title)

Returns the first tab index with a given title, or -1 if no tab has this title. 

    title - the title for the tab 

    Returns: the first tab index which matches title, or -1 if no tab has this title 
*javax.swing.JTabbedPane.insertTab(String,Icon,Component,String,int)*

public void insertTab(
  java.lang.String title,
  javax.swing.Icon icon,
  java.awt.Component component,
  java.lang.String tip,
  int index)

Inserts a component, at index, represented by a title and/or icon, either of 
which may be null. Uses java.util.Vector internally, see insertElementAt for 
details of insertion conventions. 

    title - the title to be displayed in this tab 
    icon - the icon to be displayed in this tab 
    component - The component to be displayed when this tab is clicked. 
    tip - the tooltip to be displayed for this tab 
    index - the position to insert this new tab 

*javax.swing.JTabbedPane.isEnabledAt(int)*

public boolean isEnabledAt(int index)

Returns whether or not the tab at index is currently enabled. 

    index - the index of the item being queried 

    Returns: true if the tab at index is enabled; false otherwise 
*javax.swing.JTabbedPane.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JTabbedPane. This method is intended to 
be used only for debugging purposes, and the content and format of the returned 
string may vary between implementations. The returned string may be empty but 
may not be null. 


    Returns: a string representation of this JTabbedPane. 
*javax.swing.JTabbedPane.remove(Component)*

public void remove(java.awt.Component component)

Removes the specified Component from the JTabbedPane. The method does nothing 
if the component is null. 

    component - the component to remove from the tabbedpane 

*javax.swing.JTabbedPane.remove(int)*

public void remove(int index)

Removes the tab and component which corresponds to the specified index. 

    index - the index of the component to remove from the tabbedpane 

*javax.swing.JTabbedPane.removeAll()*

public void removeAll()

Removes all the tabs and their corresponding components from the tabbedpane. 


*javax.swing.JTabbedPane.removeChangeListener(ChangeListener)*

public void removeChangeListener(javax.swing.event.ChangeListener l)

Removes a ChangeListener from this tabbedpane. 

    l - the ChangeListener to remove 

*javax.swing.JTabbedPane.removeTabAt(int)*

public void removeTabAt(int index)

Removes the tab at index. After the component associated with index is removed, 
its visibility is reset to true to ensure it will be visible if added to other 
containers. 

    index - the index of the tab to be removed 

*javax.swing.JTabbedPane.setBackgroundAt(int,Color)*

public void setBackgroundAt(
  int index,
  java.awt.Color background)

Sets the background color at index to background which can be null, in which 
case the tab's background color will default to the background color of the 
tabbedpane. An internal exception is raised if there is no tab at that index. 

    index - the tab index where the background should be set 
    background - the color to be displayed in the tab's background 

*javax.swing.JTabbedPane.setComponentAt(int,Component)*

public void setComponentAt(
  int index,
  java.awt.Component component)

Sets the component at index to component. An internal exception is raised if 
there is no tab at that index. 

    index - the tab index where this component is being placed 
    component - the component for the tab 

*javax.swing.JTabbedPane.setDisabledIconAt(int,Icon)*

public void setDisabledIconAt(
  int index,
  javax.swing.Icon disabledIcon)

Sets the disabled icon at index to icon which can be null. An internal 
exception is raised if there is no tab at that index. 

    index - the tab index where the disabled icon should be set 
    disabledIcon - the icon to be displayed in the tab when disabled 

*javax.swing.JTabbedPane.setDisplayedMnemonicIndexAt(int,int)*

public void setDisplayedMnemonicIndexAt(
  int tabIndex,
  int mnemonicIndex)

Provides a hint to the look and feel as to which character in the text should 
be decorated to represent the mnemonic. Not all look and feels may support 
this. A value of -1 indicates either there is no mnemonic for this tab, or you 
do not wish the mnemonic to be displayed for this tab. 

The value of this is updated as the properties relating to the mnemonic change 
(such as the mnemonic itself, the text...). You should only ever have to call 
this if you do not wish the default character to be underlined. For example, if 
the text at tab index 3 was 'Apple Price', with a mnemonic of 'p', and you 
wanted the 'P' to be decorated, as 'Apple Price', you would have to invoke 
setDisplayedMnemonicIndex(3, 6) after invoking setMnemonicAt(3, KeyEvent.VK_P). 
Note that it is the programmer's responsibility to ensure that each tab has a 
unique mnemonic or unpredictable results may occur. 

    tabIndex - the index of the tab that the mnemonic refers to 
    mnemonicIndex - index into the String to underline 

*javax.swing.JTabbedPane.setEnabledAt(int,boolean)*

public void setEnabledAt(
  int index,
  boolean enabled)

Sets whether or not the tab at index is enabled. An internal exception is 
raised if there is no tab at that index. 

    index - the tab index which should be enabled/disabled 
    enabled - whether or not the tab should be enabled 

*javax.swing.JTabbedPane.setForegroundAt(int,Color)*

public void setForegroundAt(
  int index,
  java.awt.Color foreground)

Sets the foreground color at index to foreground which can be null, in which 
case the tab's foreground color will default to the foreground color of this 
tabbedpane. An internal exception is raised if there is no tab at that index. 

    index - the tab index where the foreground should be set 
    foreground - the color to be displayed as the tab's foreground 

*javax.swing.JTabbedPane.setIconAt(int,Icon)*

public void setIconAt(
  int index,
  javax.swing.Icon icon)

Sets the icon at index to icon which can be null. This does not set disabled 
icon at icon. If the new Icon is different than the current Icon and disabled 
icon is not explicitly set, the LookAndFeel will be asked to generate a 
disabled Icon. To explicitly set disabled icon, use setDisableIconAt(). An 
internal exception is raised if there is no tab at that index. 

    index - the tab index where the icon should be set 
    icon - the icon to be displayed in the tab 

*javax.swing.JTabbedPane.setMnemonicAt(int,int)*

public void setMnemonicAt(
  int tabIndex,
  int mnemonic)

Sets the keyboard mnemonic for accessing the specified tab. The mnemonic is the 
key which when combined with the look and feel's mouseless modifier (usually 
Alt) will activate the specified tab. 

A mnemonic must correspond to a single key on the keyboard and should be 
specified using one of the VK_XXX keycodes defined in java.awt.event.KeyEvent. 
Mnemonics are case-insensitive, therefore a key event with the corresponding 
keycode would cause the button to be activated whether or not the Shift 
modifier was pressed. 

This will update the displayed mnemonic property for the specified tab. 

    tabIndex - the index of the tab that the mnemonic refers to 
    mnemonic - the key code which represents the mnemonic 

*javax.swing.JTabbedPane.setModel(SingleSelectionModel)*

public void setModel(javax.swing.SingleSelectionModel model)

Sets the model to be used with this tabbedpane. 

    model - the model to be used 

*javax.swing.JTabbedPane.setSelectedComponent(Component)*

public void setSelectedComponent(java.awt.Component c)

Sets the selected component for this tabbedpane. This will automatically set 
the selectedIndex to the index corresponding to the specified component. 


*javax.swing.JTabbedPane.setSelectedIndex(int)*

public void setSelectedIndex(int index)

Sets the selected index for this tabbedpane. The index must be a valid tab 
index or -1, which indicates that no tab should be selected (can also be used 
when there are no tabs in the tabbedpane). If a -1 value is specified when the 
tabbedpane contains one or more tabs, then the results will be implementation 
defined. 

    index - the index to be selected 

*javax.swing.JTabbedPane.setTabLayoutPolicy(int)*

public void setTabLayoutPolicy(int tabLayoutPolicy)

Sets the policy which the tabbedpane will use in laying out the tabs when all 
the tabs will not fit within a single run. Possible values are: 

JTabbedPane.WRAP_TAB_LAYOUT JTabbedPane.SCROLL_TAB_LAYOUT 

The default value, if not set by the UI, is JTabbedPane.WRAP_TAB_LAYOUT. 

Some look and feels might only support a subset of the possible layout 
policies, in which case the value of this property may be ignored. 

    tabLayoutPolicy - the policy used to layout the tabs 

*javax.swing.JTabbedPane.setTabPlacement(int)*

public void setTabPlacement(int tabPlacement)

Sets the tab placement for this tabbedpane. Possible values are: 
JTabbedPane.TOP JTabbedPane.BOTTOM JTabbedPane.LEFT JTabbedPane.RIGHT 

The default value, if not set, is SwingConstants.TOP. 

    tabPlacement - the placement for the tabs relative to the content 

*javax.swing.JTabbedPane.setTitleAt(int,String)*

public void setTitleAt(
  int index,
  java.lang.String title)

Sets the title at index to title which can be null. An internal exception is 
raised if there is no tab at that index. 

    index - the tab index where the title should be set 
    title - the title to be displayed in the tab 

*javax.swing.JTabbedPane.setToolTipTextAt(int,String)*

public void setToolTipTextAt(
  int index,
  java.lang.String toolTipText)

Sets the tooltip text at index to toolTipText which can be null. An internal 
exception is raised if there is no tab at that index. 

    index - the tab index where the tooltip text should be set 
    toolTipText - the tooltip text to be displayed for the tab 

*javax.swing.JTabbedPane.setUI(TabbedPaneUI)*

public void setUI(javax.swing.plaf.TabbedPaneUI ui)

Sets the UI object which implements the Lfor this component. 

    ui - the new UI object 

*javax.swing.JTabbedPane.updateUI()*

public void updateUI()

Resets the UI property to a value from the current look and feel. 




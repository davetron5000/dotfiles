*java.lang.management.ManagementPermission* *ManagementPermission* The permissio

public final class ManagementPermission
  extends    |java.security.BasicPermission|

|java.lang.management.ManagementPermission_Description|
|java.lang.management.ManagementPermission_Fields|
|java.lang.management.ManagementPermission_Constructors|
|java.lang.management.ManagementPermission_Methods|

================================================================================

*java.lang.management.ManagementPermission_Constructors*
|java.lang.management.ManagementPermission(String)|Constructs a ManagementPermi
|java.lang.management.ManagementPermission(String,String)|Constructs a new Mana

*java.lang.management.ManagementPermission_Description*

The permission which the SecurityManager will check when code that is running 
with a SecurityManager calls methods defined in the management interface for 
the Java platform. 

The following table provides a summary description of what the permission 
allows, and discusses the risks of granting code the permission. 



Permission Target Name What the Permission Allows Risks of Allowing this 
Permission 

control Ability to control the runtime characteristics of the Java virtual 
machine, for example, setting the -verbose:gc and -verbose:class flag, setting 
the threshold of a memory pool, and enabling and disabling the thread 
contention monitoring support. 

This allows an attacker to control the runtime characteristics of the Java 
virtual machine and cause the system to misbehave. 



monitor Ability to retrieve runtime information about the Java virtual machine 
such as thread stack trace, a list of all loaded class names, and input 
arguments to the Java virtual machine. This allows malicious code to monitor 
runtime information and uncover vulnerabilities. 



Programmers do not normally create ManagementPermission objects directly. 
Instead they are created by the security policy code based on reading the 
security policy file. 


*java.lang.management.ManagementPermission(String)*

public ManagementPermission(java.lang.String name)

Constructs a ManagementPermission with the specified name. 

    name - Permission name. Must be either "monitor" or "control". 

*java.lang.management.ManagementPermission(String,String)*

public ManagementPermission(
  java.lang.String name,
  java.lang.String actions)
  throws |java.lang.IllegalArgumentException|
         
Constructs a new ManagementPermission object. 

    name - Permission name. Must be either "monitor" or "control". 
    actions - Must be either null or the empty string. 


*javax.swing.plaf.synth.ColorType* *ColorType* A typesafe enumeration of colors 

public class ColorType
  extends    |java.lang.Object|

|javax.swing.plaf.synth.ColorType_Description|
|javax.swing.plaf.synth.ColorType_Fields|
|javax.swing.plaf.synth.ColorType_Constructors|
|javax.swing.plaf.synth.ColorType_Methods|

================================================================================

*javax.swing.plaf.synth.ColorType_Fields*
|javax.swing.plaf.synth.ColorType_javax.swing.plaf.synth.ColorType.BACKGROUND|
|javax.swing.plaf.synth.ColorType_javax.swing.plaf.synth.ColorType.FOCUS|
|javax.swing.plaf.synth.ColorType_javax.swing.plaf.synth.ColorType.FOREGROUND|
|int_javax.swing.plaf.synth.ColorType.MAX_COUNT|
|javax.swing.plaf.synth.ColorType_javax.swing.plaf.synth.ColorType.TEXT_BACKGROUND|
|javax.swing.plaf.synth.ColorType_javax.swing.plaf.synth.ColorType.TEXT_FOREGROUND|

*javax.swing.plaf.synth.ColorType_Constructors*
|javax.swing.plaf.synth.ColorType(String)|Creates a new ColorType with the spec

*javax.swing.plaf.synth.ColorType_Methods*
|javax.swing.plaf.synth.ColorType.getID()|Returns a unique id, as an integer, f
|javax.swing.plaf.synth.ColorType.toString()|Returns the textual description of

*javax.swing.plaf.synth.ColorType_Description*

A typesafe enumeration of colors that can be fetched from a style. 

Each SynthStyle has a set of ColorTypes that are accessed by way of the 
(|javax.swing.plaf.synth.SynthStyle|) method. SynthStyle's installDefaults will 
install the FOREGROUND color as the foreground of the Component, and the 
BACKGROUND color to the background of the component (assuming that you have not 
explicitly specified a foreground and background color). Some components 
support more color based properties, for example JList has the property 
selectionForeground which will be mapped to FOREGROUND with a component state 
of SynthConstants.SELECTED. 

The following example shows a custom SynthStyle that returns a red Color for 
the DISABLED state, otherwise a black color. 

class MyStyle extends SynthStyle { private Color disabledColor = new 
ColorUIResource(Color.RED); private Color color = new 
ColorUIResource(Color.BLACK); protected Color getColorForState(SynthContext 
context, ColorType type){ if (context.getComponentState() == 
SynthConstants.DISABLED) { return disabledColor; } return color; } } 


*javax.swing.plaf.synth.ColorType_javax.swing.plaf.synth.ColorType.BACKGROUND*

A typesafe enumeration of colors that can be fetched from a style. 

Each SynthStyle has a set of ColorTypes that are accessed by way of the 
(|javax.swing.plaf.synth.SynthStyle|) method. SynthStyle's installDefaults will 
install the FOREGROUND color as the foreground of the Component, and the 
BACKGROUND color to the background of the component (assuming that you have not 
explicitly specified a foreground and background color). Some components 
support more color based properties, for example JList has the property 
selectionForeground which will be mapped to FOREGROUND with a component state 
of SynthConstants.SELECTED. 

The following example shows a custom SynthStyle that returns a red Color for 
the DISABLED state, otherwise a black color. 

class MyStyle extends SynthStyle { private Color disabledColor = new 
ColorUIResource(Color.RED); private Color color = new 
ColorUIResource(Color.BLACK); protected Color getColorForState(SynthContext 
context, ColorType type){ if (context.getComponentState() == 
SynthConstants.DISABLED) { return disabledColor; } return color; } } 


*javax.swing.plaf.synth.ColorType_javax.swing.plaf.synth.ColorType.FOCUS*

A typesafe enumeration of colors that can be fetched from a style. 

Each SynthStyle has a set of ColorTypes that are accessed by way of the 
(|javax.swing.plaf.synth.SynthStyle|) method. SynthStyle's installDefaults will 
install the FOREGROUND color as the foreground of the Component, and the 
BACKGROUND color to the background of the component (assuming that you have not 
explicitly specified a foreground and background color). Some components 
support more color based properties, for example JList has the property 
selectionForeground which will be mapped to FOREGROUND with a component state 
of SynthConstants.SELECTED. 

The following example shows a custom SynthStyle that returns a red Color for 
the DISABLED state, otherwise a black color. 

class MyStyle extends SynthStyle { private Color disabledColor = new 
ColorUIResource(Color.RED); private Color color = new 
ColorUIResource(Color.BLACK); protected Color getColorForState(SynthContext 
context, ColorType type){ if (context.getComponentState() == 
SynthConstants.DISABLED) { return disabledColor; } return color; } } 


*javax.swing.plaf.synth.ColorType_javax.swing.plaf.synth.ColorType.FOREGROUND*

A typesafe enumeration of colors that can be fetched from a style. 

Each SynthStyle has a set of ColorTypes that are accessed by way of the 
(|javax.swing.plaf.synth.SynthStyle|) method. SynthStyle's installDefaults will 
install the FOREGROUND color as the foreground of the Component, and the 
BACKGROUND color to the background of the component (assuming that you have not 
explicitly specified a foreground and background color). Some components 
support more color based properties, for example JList has the property 
selectionForeground which will be mapped to FOREGROUND with a component state 
of SynthConstants.SELECTED. 

The following example shows a custom SynthStyle that returns a red Color for 
the DISABLED state, otherwise a black color. 

class MyStyle extends SynthStyle { private Color disabledColor = new 
ColorUIResource(Color.RED); private Color color = new 
ColorUIResource(Color.BLACK); protected Color getColorForState(SynthContext 
context, ColorType type){ if (context.getComponentState() == 
SynthConstants.DISABLED) { return disabledColor; } return color; } } 


*int_javax.swing.plaf.synth.ColorType.MAX_COUNT*

A typesafe enumeration of colors that can be fetched from a style. 

Each SynthStyle has a set of ColorTypes that are accessed by way of the 
(|javax.swing.plaf.synth.SynthStyle|) method. SynthStyle's installDefaults will 
install the FOREGROUND color as the foreground of the Component, and the 
BACKGROUND color to the background of the component (assuming that you have not 
explicitly specified a foreground and background color). Some components 
support more color based properties, for example JList has the property 
selectionForeground which will be mapped to FOREGROUND with a component state 
of SynthConstants.SELECTED. 

The following example shows a custom SynthStyle that returns a red Color for 
the DISABLED state, otherwise a black color. 

class MyStyle extends SynthStyle { private Color disabledColor = new 
ColorUIResource(Color.RED); private Color color = new 
ColorUIResource(Color.BLACK); protected Color getColorForState(SynthContext 
context, ColorType type){ if (context.getComponentState() == 
SynthConstants.DISABLED) { return disabledColor; } return color; } } 


*javax.swing.plaf.synth.ColorType_javax.swing.plaf.synth.ColorType.TEXT_BACKGROUND*

A typesafe enumeration of colors that can be fetched from a style. 

Each SynthStyle has a set of ColorTypes that are accessed by way of the 
(|javax.swing.plaf.synth.SynthStyle|) method. SynthStyle's installDefaults will 
install the FOREGROUND color as the foreground of the Component, and the 
BACKGROUND color to the background of the component (assuming that you have not 
explicitly specified a foreground and background color). Some components 
support more color based properties, for example JList has the property 
selectionForeground which will be mapped to FOREGROUND with a component state 
of SynthConstants.SELECTED. 

The following example shows a custom SynthStyle that returns a red Color for 
the DISABLED state, otherwise a black color. 

class MyStyle extends SynthStyle { private Color disabledColor = new 
ColorUIResource(Color.RED); private Color color = new 
ColorUIResource(Color.BLACK); protected Color getColorForState(SynthContext 
context, ColorType type){ if (context.getComponentState() == 
SynthConstants.DISABLED) { return disabledColor; } return color; } } 


*javax.swing.plaf.synth.ColorType_javax.swing.plaf.synth.ColorType.TEXT_FOREGROUND*

A typesafe enumeration of colors that can be fetched from a style. 

Each SynthStyle has a set of ColorTypes that are accessed by way of the 
(|javax.swing.plaf.synth.SynthStyle|) method. SynthStyle's installDefaults will 
install the FOREGROUND color as the foreground of the Component, and the 
BACKGROUND color to the background of the component (assuming that you have not 
explicitly specified a foreground and background color). Some components 
support more color based properties, for example JList has the property 
selectionForeground which will be mapped to FOREGROUND with a component state 
of SynthConstants.SELECTED. 

The following example shows a custom SynthStyle that returns a red Color for 
the DISABLED state, otherwise a black color. 

class MyStyle extends SynthStyle { private Color disabledColor = new 
ColorUIResource(Color.RED); private Color color = new 
ColorUIResource(Color.BLACK); protected Color getColorForState(SynthContext 
context, ColorType type){ if (context.getComponentState() == 
SynthConstants.DISABLED) { return disabledColor; } return color; } } 



*javax.swing.plaf.synth.ColorType(String)*

protected ColorType(java.lang.String description)

Creates a new ColorType with the specified description. 

    description - String description of the ColorType. 

*javax.swing.plaf.synth.ColorType.getID()*

public final int getID()

Returns a unique id, as an integer, for this ColorType. 


    Returns: a unique id, as an integer, for this ColorType. 
*javax.swing.plaf.synth.ColorType.toString()*

public |java.lang.String| toString()

Returns the textual description of this ColorType. 


    Returns: description of the string. 


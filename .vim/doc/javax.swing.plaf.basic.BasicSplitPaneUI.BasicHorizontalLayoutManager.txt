*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager* *BasicSplitPaneUI.BasicHorizontalLayoutManager* LayoutManager for JSplitPanes that have an orientation of
 HO

public class BasicSplitPaneUI.BasicHorizontalLayoutManager
  extends    |java.lang.Object|
  implements |java.awt.LayoutManager2|

|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager_Description|
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager_Fields|
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager_Constructors|
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager_Methods|

====================================================================================================================================================================================

*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager_Fields*
|java.awt.Component[]_javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.components|
|int[]_javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.sizes|

*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager_Methods*
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.addLayoutComponent(Component,Object)|Adds the specified component to the layout, using the specified  constra
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.addLayoutComponent(String,Component)|Adds the component at place.
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getAvailableSize(Dimension,Insets)|Returns the available width based on the container size and  Insets.
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getInitialLocation(Insets)|Returns the left inset, unless the Insets are null in which case  0 is returned.
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getLayoutAlignmentX(Container)|Returns the alignment along the x axis.
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getLayoutAlignmentY(Container)|Returns the alignment along the y axis.
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getPreferredSizeOfComponent(Component)|Returns the width of the passed in Components preferred size.
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getSizeOfComponent(Component)|Returns the width of the passed in component.
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getSizes()|Returns the sizes of the components.
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.invalidateLayout(Container)|Does nothing.
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.layoutContainer(Container)|Does the actual layout.
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.maximumLayoutSize(Container)|Returns the maximum layout size, which is Integer.MAX_VALUE  in both directions.
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.minimumLayoutSize(Container)|Returns the minimum size needed to contain the children.
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.preferredLayoutSize(Container)|Returns the preferred size needed to contain the children.
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.removeLayoutComponent(Component)|Removes the specified component from our knowledge.
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.resetSizeAt(int)|Resets the size of the Component at the passed in location.
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.resetToPreferredSizes()|Marks the receiver so that the next time this instance is  laid out it'll ask for the
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.setComponentToSize(Component,int,int,Insets,Dimension)|Sets the width of the component c to be size, placing 
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.setSizes(int[])|Sets the sizes to newSizes.
|javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.updateComponents()|Determines the components.

*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager_Description*

LayoutManager for JSplitPanes that have an orientation of HORIZONTAL_SPLIT. 



*java.awt.Component[]_javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.components*




*int[]_javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.sizes*





*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.addLayoutComponent(Component,Object)*

public void addLayoutComponent(
  java.awt.Component comp,
  java.lang.Object constraints)

Adds the specified component to the layout, using the specified constraint object. 


    comp - the component to be added 
    constraints - where/how the component is added to the layout. 

*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.addLayoutComponent(String,Component)*

public void addLayoutComponent(
  java.lang.String place,
  java.awt.Component component)

Adds the component at place. Place must be one of JSplitPane.LEFT, RIGHT, TOP, BOTTOM, or null (for the divider). 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getAvailableSize(Dimension,Insets)*

protected int getAvailableSize(
  java.awt.Dimension containerSize,
  java.awt.Insets insets)

Returns the available width based on the container size and Insets. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getInitialLocation(Insets)*

protected int getInitialLocation(java.awt.Insets insets)

Returns the left inset, unless the Insets are null in which case 0 is returned. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getLayoutAlignmentX(Container)*

public float getLayoutAlignmentX(java.awt.Container target)

Returns the alignment along the x axis. This specifies how the component would like to be aligned relative to other components. The value should be a number between 0 and 1 where 
0 represents alignment along the origin, 1 is aligned the furthest away from the origin, 0.5 is centered, etc. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getLayoutAlignmentY(Container)*

public float getLayoutAlignmentY(java.awt.Container target)

Returns the alignment along the y axis. This specifies how the component would like to be aligned relative to other components. The value should be a number between 0 and 1 where 
0 represents alignment along the origin, 1 is aligned the furthest away from the origin, 0.5 is centered, etc. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getPreferredSizeOfComponent(Component)*

protected int getPreferredSizeOfComponent(java.awt.Component c)

Returns the width of the passed in Components preferred size. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getSizeOfComponent(Component)*

protected int getSizeOfComponent(java.awt.Component c)

Returns the width of the passed in component. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.getSizes()*

protected int[] getSizes()

Returns the sizes of the components. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.invalidateLayout(Container)*

public void invalidateLayout(java.awt.Container c)

Does nothing. If the developer really wants to change the size of one of the views JSplitPane.resetToPreferredSizes should be messaged. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.layoutContainer(Container)*

public void layoutContainer(java.awt.Container container)

Does the actual layout. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.maximumLayoutSize(Container)*

public |java.awt.Dimension| maximumLayoutSize(java.awt.Container target)

Returns the maximum layout size, which is Integer.MAX_VALUE in both directions. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.minimumLayoutSize(Container)*

public |java.awt.Dimension| minimumLayoutSize(java.awt.Container container)

Returns the minimum size needed to contain the children. The width is the sum of all the childrens min widths and the height is the largest of the childrens minimum heights. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.preferredLayoutSize(Container)*

public |java.awt.Dimension| preferredLayoutSize(java.awt.Container container)

Returns the preferred size needed to contain the children. The width is the sum of all the childrens preferred widths and the height is the largest of the childrens preferred 
heights. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.removeLayoutComponent(Component)*

public void removeLayoutComponent(java.awt.Component component)

Removes the specified component from our knowledge. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.resetSizeAt(int)*

protected void resetSizeAt(int index)

Resets the size of the Component at the passed in location. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.resetToPreferredSizes()*

public void resetToPreferredSizes()

Marks the receiver so that the next time this instance is laid out it'll ask for the preferred sizes. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.setComponentToSize(Component,int,int,Insets,Dimension)*

protected void setComponentToSize(
  java.awt.Component c,
  int size,
  int location,
  java.awt.Insets insets,
  java.awt.Dimension containerSize)

Sets the width of the component c to be size, placing its x location at location, y to the insets.top and height to the containersize.height less the top and bottom insets. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.setSizes(int[])*

protected void setSizes(int[] newSizes)

Sets the sizes to newSizes. 



*javax.swing.plaf.basic.BasicSplitPaneUI.BasicHorizontalLayoutManager.updateComponents()*

protected void updateComponents()

Determines the components. This should be called whenever a new instance of this is installed into an existing SplitPane. 





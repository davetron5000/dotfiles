*javax.swing.table.TableModel* *TableModel* The TableModel interface specifies the methods the
  JTable will use to interrogate a tabular data model.

public interface interface TableModel


|javax.swing.table.TableModel_Description|
|javax.swing.table.TableModel_Fields|
|javax.swing.table.TableModel_Constructors|
|javax.swing.table.TableModel_Methods|

====================================================================================================================================================================================

*javax.swing.table.TableModel_Methods*
|javax.swing.table.TableModel.addTableModelListener(TableModelListener)|Adds a listener to the list that is notified each time a change  to the data model occurs.
|javax.swing.table.TableModel.getColumnClass(int)|Returns the most specific superclass for all the cell values   in the column.
|javax.swing.table.TableModel.getColumnCount()|Returns the number of columns in the model.
|javax.swing.table.TableModel.getColumnName(int)|Returns the name of the column at columnIndex.
|javax.swing.table.TableModel.getRowCount()|Returns the number of rows in the model.
|javax.swing.table.TableModel.getValueAt(int,int)|Returns the value for the cell at columnIndex and  rowIndex.
|javax.swing.table.TableModel.isCellEditable(int,int)|Returns true if the cell at rowIndex and  columnIndex  is editable.
|javax.swing.table.TableModel.removeTableModelListener(TableModelListener)|Removes a listener from the list that is notified each time a  change to the data model occurs.
|javax.swing.table.TableModel.setValueAt(Object,int,int)|Sets the value in the cell at columnIndex and  rowIndex to aValue.

*javax.swing.table.TableModel_Description*

The TableModel interface specifies the methods the JTable will use to interrogate a tabular data model. 

The JTable can be set up to display any data model which implements the TableModel interface with a couple of lines of code: 

TableModel myData = new MyTableModel(); JTable table = new JTable(myData); 

For further documentation, see Creating a Table Model in The Java Tutorial. 



*javax.swing.table.TableModel.addTableModelListener(TableModelListener)*

public void addTableModelListener(javax.swing.event.TableModelListener l)

Adds a listener to the list that is notified each time a change to the data model occurs. 


    l - the TableModelListener 

*javax.swing.table.TableModel.getColumnClass(int)*

public |java.lang.Class|<?> getColumnClass(int columnIndex)

Returns the most specific superclass for all the cell values in the column. This is used by the JTable to set up a default renderer and editor for the column. 


    columnIndex - the index of the column 

    Returns: the common ancestor class of the object values in the model. 

*javax.swing.table.TableModel.getColumnCount()*

public int getColumnCount()

Returns the number of columns in the model. A JTable uses this method to determine how many columns it should create and display by default. 



    Returns: the number of columns in the model 

*javax.swing.table.TableModel.getColumnName(int)*

public |java.lang.String| getColumnName(int columnIndex)

Returns the name of the column at columnIndex. This is used to initialize the table's column header name. Note: this name does not need to be unique; two columns in a table can 
have the same name. 


    columnIndex - the index of the column 

    Returns: the name of the column 

*javax.swing.table.TableModel.getRowCount()*

public int getRowCount()

Returns the number of rows in the model. A JTable uses this method to determine how many rows it should display. This method should be quick, as it is called frequently during 
rendering. 



    Returns: the number of rows in the model 

*javax.swing.table.TableModel.getValueAt(int,int)*

public |java.lang.Object| getValueAt(
  int rowIndex,
  int columnIndex)

Returns the value for the cell at columnIndex and rowIndex. 


    rowIndex - the row whose value is to be queried 
    columnIndex - the column whose value is to be queried 

    Returns: the value Object at the specified cell 

*javax.swing.table.TableModel.isCellEditable(int,int)*

public boolean isCellEditable(
  int rowIndex,
  int columnIndex)

Returns true if the cell at rowIndex and columnIndex is editable. Otherwise, setValueAt on the cell will not change the value of that cell. 


    rowIndex - the row whose value to be queried 
    columnIndex - the column whose value to be queried 

    Returns: true if the cell is editable 

*javax.swing.table.TableModel.removeTableModelListener(TableModelListener)*

public void removeTableModelListener(javax.swing.event.TableModelListener l)

Removes a listener from the list that is notified each time a change to the data model occurs. 


    l - the TableModelListener 

*javax.swing.table.TableModel.setValueAt(Object,int,int)*

public void setValueAt(
  java.lang.Object aValue,
  int rowIndex,
  int columnIndex)

Sets the value in the cell at columnIndex and rowIndex to aValue. 


    aValue - the new value 
    rowIndex - the row whose value is to be changed 
    columnIndex - the column whose value is to be changed 



*javax.naming.ldap.StartTlsResponse* *StartTlsResponse* This class implements th

public abstract class StartTlsResponse
  extends    |java.lang.Object|
  implements |javax.naming.ldap.ExtendedResponse|

|javax.naming.ldap.StartTlsResponse_Description|
|javax.naming.ldap.StartTlsResponse_Fields|
|javax.naming.ldap.StartTlsResponse_Constructors|
|javax.naming.ldap.StartTlsResponse_Methods|

================================================================================

*javax.naming.ldap.StartTlsResponse_Fields*
|java.lang.String_javax.naming.ldap.StartTlsResponse.OID|

*javax.naming.ldap.StartTlsResponse_Constructors*
|javax.naming.ldap.StartTlsResponse()|Constructs a StartTLS extended response.

*javax.naming.ldap.StartTlsResponse_Methods*
|javax.naming.ldap.StartTlsResponse.close()|Closes the TLS connection gracefull
|javax.naming.ldap.StartTlsResponse.getEncodedValue()|Retrieves the StartTLS re
|javax.naming.ldap.StartTlsResponse.getID()|Retrieves the StartTLS response's o
|javax.naming.ldap.StartTlsResponse.negotiate()|Negotiates a TLS session using 
|javax.naming.ldap.StartTlsResponse.negotiate(SSLSocketFactory)|Negotiates a TL
|javax.naming.ldap.StartTlsResponse.setEnabledCipherSuites(String[])|Overrides 
|javax.naming.ldap.StartTlsResponse.setHostnameVerifier(HostnameVerifier)|Sets 

*javax.naming.ldap.StartTlsResponse_Description*

This class implements the LDAPv3 Extended Response for StartTLS as defined in 
Lightweight Directory Access Protocol (v3): Extension for Transport Layer 
Security 

The object identifier for StartTLS is 1.3.6.1.4.1.1466.20037 and no extended 
response value is defined. 

The Start TLS extended request and response are used to establish a TLS 
connection over the existing LDAP connection associated with the JNDI context 
on which extendedOperation() is invoked. Typically, a JNDI program uses the 
StartTLS extended request and response classes as follows. 

import javax.naming.ldap.*; 

// Open an LDAP association LdapContext ctx = new InitialLdapContext(); 

// Perform a StartTLS extended operation StartTlsResponse tls = 
(StartTlsResponse) ctx.extendedOperation(new StartTlsRequest()); 

// Open a TLS connection (over the existing LDAP association) and get details 
// of the negotiated TLS session: cipher suite, peer certificate, ... 
SSLSession session = tls.negotiate(); 

// ... use ctx to perform protected LDAP operations 

// Close the TLS connection (revert back to the underlying LDAP association) 
tls.close(); 

// ... use ctx to perform unprotected LDAP operations 

// Close the LDAP association ctx.close; 


*java.lang.String_javax.naming.ldap.StartTlsResponse.OID*

This class implements the LDAPv3 Extended Response for StartTLS as defined in 
Lightweight Directory Access Protocol (v3): Extension for Transport Layer 
Security 

The object identifier for StartTLS is 1.3.6.1.4.1.1466.20037 and no extended 
response value is defined. 

The Start TLS extended request and response are used to establish a TLS 
connection over the existing LDAP connection associated with the JNDI context 
on which extendedOperation() is invoked. Typically, a JNDI program uses the 
StartTLS extended request and response classes as follows. 

import javax.naming.ldap.*; 

// Open an LDAP association LdapContext ctx = new InitialLdapContext(); 

// Perform a StartTLS extended operation StartTlsResponse tls = 
(StartTlsResponse) ctx.extendedOperation(new StartTlsRequest()); 

// Open a TLS connection (over the existing LDAP association) and get details 
// of the negotiated TLS session: cipher suite, peer certificate, ... 
SSLSession session = tls.negotiate(); 

// ... use ctx to perform protected LDAP operations 

// Close the TLS connection (revert back to the underlying LDAP association) 
tls.close(); 

// ... use ctx to perform unprotected LDAP operations 

// Close the LDAP association ctx.close; 



*javax.naming.ldap.StartTlsResponse()*

protected StartTlsResponse()

Constructs a StartTLS extended response. A concrete subclass must have a public 
no-arg constructor. 


*javax.naming.ldap.StartTlsResponse.close()*

public abstract void close()
  throws |java.io.IOException|
         
Closes the TLS connection gracefully and reverts back to the underlying 
connection. 


*javax.naming.ldap.StartTlsResponse.getEncodedValue()*

public byte getEncodedValue()

Retrieves the StartTLS response's ASN.1 BER encoded value. Since the response 
has no defined value, null is always returned. 


    Returns: The null value. 
*javax.naming.ldap.StartTlsResponse.getID()*

public |java.lang.String| getID()

Retrieves the StartTLS response's object identifier string. 


    Returns: The object identifier string, "1.3.6.1.4.1.1466.20037". 
*javax.naming.ldap.StartTlsResponse.negotiate()*

public abstract |javax.net.ssl.SSLSession| negotiate()
  throws |java.io.IOException|
         
Negotiates a TLS session using the default SSL socket factory. 

This method is equivalent to negotiate(null). 


    Returns: The negotiated SSL session 
*javax.naming.ldap.StartTlsResponse.negotiate(SSLSocketFactory)*

public abstract |javax.net.ssl.SSLSession| negotiate(javax.net.ssl.SSLSocketFactory factory)
  throws |java.io.IOException|
         
Negotiates a TLS session using an SSL socket factory. 

Creates an SSL socket using the supplied SSL socket factory and attaches it to 
the existing connection. Performs the TLS handshake and returns the negotiated 
session information. 

If cipher suites have been set via setEnabledCipherSuites then they are enabled 
before the TLS handshake begins. 

Hostname verification is performed after the TLS handshake completes. The 
default hostname verification performs a match of the server's hostname against 
the hostname information found in the server's certificate. If this 
verification fails and no callback has been set via setHostnameVerifier then 
the negotiation fails. If this verification fails and a callback has been set 
via setHostnameVerifier, then the callback is used to determine whether the 
negotiation succeeds. 

If an error occurs then the SSL socket is closed and an IOException is thrown. 
The underlying connection remains intact. 

    factory - The possibly null SSL socket factory to use. If null, the default SSL socket 
       factory is used. 

    Returns: The negotiated SSL session 
*javax.naming.ldap.StartTlsResponse.setEnabledCipherSuites(String[])*

public abstract void setEnabledCipherSuites(java.lang.String[] suites)

Overrides the default list of cipher suites enabled for use on the TLS 
connection. The cipher suites must have already been listed by 
SSLSocketFactory.getSupportedCipherSuites() as being supported. Even if a suite 
has been enabled, it still might not be used because the peer does not support 
it, or because the requisite certificates (and private keys) are not available. 

    suites - The non-null list of names of all the cipher suites to enable. 

*javax.naming.ldap.StartTlsResponse.setHostnameVerifier(HostnameVerifier)*

public abstract void setHostnameVerifier(javax.net.ssl.HostnameVerifier verifier)

Sets the hostname verifier used by negotiate() after the TLS handshake has 
completed and the default hostname verification has failed. 
setHostnameVerifier() must be called before negotiate() is invoked for it to 
have effect. If called after negotiate(), this method does not do anything. 

    verifier - The non-null hostname verifier callback. 



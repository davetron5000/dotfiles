*javax.swing.tree.DefaultTreeCellRenderer* *DefaultTreeCellRenderer* Displays an

public class DefaultTreeCellRenderer
  extends    |javax.swing.JLabel|
  implements |javax.swing.tree.TreeCellRenderer|

|javax.swing.tree.DefaultTreeCellRenderer_Description|
|javax.swing.tree.DefaultTreeCellRenderer_Fields|
|javax.swing.tree.DefaultTreeCellRenderer_Constructors|
|javax.swing.tree.DefaultTreeCellRenderer_Methods|

================================================================================

*javax.swing.tree.DefaultTreeCellRenderer_Fields*
|java.awt.Color_javax.swing.tree.DefaultTreeCellRenderer.backgroundNonSelectionColor|
|java.awt.Color_javax.swing.tree.DefaultTreeCellRenderer.backgroundSelectionColor|
|java.awt.Color_javax.swing.tree.DefaultTreeCellRenderer.borderSelectionColor|
|javax.swing.Icon_javax.swing.tree.DefaultTreeCellRenderer.closedIcon|
|boolean_javax.swing.tree.DefaultTreeCellRenderer.hasFocus|
|javax.swing.Icon_javax.swing.tree.DefaultTreeCellRenderer.leafIcon|
|javax.swing.Icon_javax.swing.tree.DefaultTreeCellRenderer.openIcon|
|boolean_javax.swing.tree.DefaultTreeCellRenderer.selected|
|java.awt.Color_javax.swing.tree.DefaultTreeCellRenderer.textNonSelectionColor|
|java.awt.Color_javax.swing.tree.DefaultTreeCellRenderer.textSelectionColor|

*javax.swing.tree.DefaultTreeCellRenderer_Constructors*
|javax.swing.tree.DefaultTreeCellRenderer()|Returns a new instance of DefaultTr

*javax.swing.tree.DefaultTreeCellRenderer_Methods*
|javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,boolean,boolean)|
|javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,byte,byte)|
|javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,char,char)|
|javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,double,double)|
|javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,float,float)|
|javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,int,int)|Ov
|javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,long,long)|
|javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,Object,Object)|
|javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,short,short)|
|javax.swing.tree.DefaultTreeCellRenderer.getBackgroundNonSelectionColor()|Retu
|javax.swing.tree.DefaultTreeCellRenderer.getBackgroundSelectionColor()|Returns
|javax.swing.tree.DefaultTreeCellRenderer.getBorderSelectionColor()|Returns the
|javax.swing.tree.DefaultTreeCellRenderer.getClosedIcon()|Returns the icon used
|javax.swing.tree.DefaultTreeCellRenderer.getDefaultClosedIcon()|Returns the de
|javax.swing.tree.DefaultTreeCellRenderer.getDefaultLeafIcon()|Returns the defa
|javax.swing.tree.DefaultTreeCellRenderer.getDefaultOpenIcon()|Returns the defa
|javax.swing.tree.DefaultTreeCellRenderer.getFont()|Gets the font of this compo
|javax.swing.tree.DefaultTreeCellRenderer.getLeafIcon()|Returns the icon used t
|javax.swing.tree.DefaultTreeCellRenderer.getOpenIcon()|Returns the icon used t
|javax.swing.tree.DefaultTreeCellRenderer.getPreferredSize()|Overrides JCompone
|javax.swing.tree.DefaultTreeCellRenderer.getTextNonSelectionColor()|Returns th
|javax.swing.tree.DefaultTreeCellRenderer.getTextSelectionColor()|Returns the c
|javax.swing.tree.DefaultTreeCellRenderer.getTreeCellRendererComponent(JTree,Object,boolean,boolean,boolean,int,boolean)|
|javax.swing.tree.DefaultTreeCellRenderer.invalidate()|Overridden for performan
|javax.swing.tree.DefaultTreeCellRenderer.paint(Graphics)|Paints the value.
|javax.swing.tree.DefaultTreeCellRenderer.repaint()|Overridden for performance 
|javax.swing.tree.DefaultTreeCellRenderer.repaint(long,int,int,int,int)|Overrid
|javax.swing.tree.DefaultTreeCellRenderer.repaint(Rectangle)|Overridden for per
|javax.swing.tree.DefaultTreeCellRenderer.revalidate()|Overridden for performan
|javax.swing.tree.DefaultTreeCellRenderer.setBackground(Color)|Subclassed to ma
|javax.swing.tree.DefaultTreeCellRenderer.setBackgroundNonSelectionColor(Color)|
|javax.swing.tree.DefaultTreeCellRenderer.setBackgroundSelectionColor(Color)|Se
|javax.swing.tree.DefaultTreeCellRenderer.setBorderSelectionColor(Color)|Sets t
|javax.swing.tree.DefaultTreeCellRenderer.setClosedIcon(Icon)|Sets the icon use
|javax.swing.tree.DefaultTreeCellRenderer.setFont(Font)|Subclassed to map FontU
|javax.swing.tree.DefaultTreeCellRenderer.setLeafIcon(Icon)|Sets the icon used 
|javax.swing.tree.DefaultTreeCellRenderer.setOpenIcon(Icon)|Sets the icon used 
|javax.swing.tree.DefaultTreeCellRenderer.setTextNonSelectionColor(Color)|Sets 
|javax.swing.tree.DefaultTreeCellRenderer.setTextSelectionColor(Color)|Sets the
|javax.swing.tree.DefaultTreeCellRenderer.validate()|Overridden for performance

*javax.swing.tree.DefaultTreeCellRenderer_Description*

Displays an entry in a tree. DefaultTreeCellRenderer is not opaque and unless 
you subclass paint you should not change this. See How to Use Trees in The Java 
Tutorial for examples of customizing node display using this class. 

Implementation Note: This class overrides invalidate, validate, revalidate, 
repaint, and firePropertyChange solely to improve performance. If not 
overridden, these frequently called methods would execute code paths that are 
unnecessary for the default tree cell renderer. If you write your own renderer, 
take care to weigh the benefits and drawbacks of overriding these methods. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Color_javax.swing.tree.DefaultTreeCellRenderer.backgroundNonSelectionColor*

Displays an entry in a tree. DefaultTreeCellRenderer is not opaque and unless 
you subclass paint you should not change this. See How to Use Trees in The Java 
Tutorial for examples of customizing node display using this class. 

Implementation Note: This class overrides invalidate, validate, revalidate, 
repaint, and firePropertyChange solely to improve performance. If not 
overridden, these frequently called methods would execute code paths that are 
unnecessary for the default tree cell renderer. If you write your own renderer, 
take care to weigh the benefits and drawbacks of overriding these methods. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Color_javax.swing.tree.DefaultTreeCellRenderer.backgroundSelectionColor*

Displays an entry in a tree. DefaultTreeCellRenderer is not opaque and unless 
you subclass paint you should not change this. See How to Use Trees in The Java 
Tutorial for examples of customizing node display using this class. 

Implementation Note: This class overrides invalidate, validate, revalidate, 
repaint, and firePropertyChange solely to improve performance. If not 
overridden, these frequently called methods would execute code paths that are 
unnecessary for the default tree cell renderer. If you write your own renderer, 
take care to weigh the benefits and drawbacks of overriding these methods. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Color_javax.swing.tree.DefaultTreeCellRenderer.borderSelectionColor*

Displays an entry in a tree. DefaultTreeCellRenderer is not opaque and unless 
you subclass paint you should not change this. See How to Use Trees in The Java 
Tutorial for examples of customizing node display using this class. 

Implementation Note: This class overrides invalidate, validate, revalidate, 
repaint, and firePropertyChange solely to improve performance. If not 
overridden, these frequently called methods would execute code paths that are 
unnecessary for the default tree cell renderer. If you write your own renderer, 
take care to weigh the benefits and drawbacks of overriding these methods. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.Icon_javax.swing.tree.DefaultTreeCellRenderer.closedIcon*

Displays an entry in a tree. DefaultTreeCellRenderer is not opaque and unless 
you subclass paint you should not change this. See How to Use Trees in The Java 
Tutorial for examples of customizing node display using this class. 

Implementation Note: This class overrides invalidate, validate, revalidate, 
repaint, and firePropertyChange solely to improve performance. If not 
overridden, these frequently called methods would execute code paths that are 
unnecessary for the default tree cell renderer. If you write your own renderer, 
take care to weigh the benefits and drawbacks of overriding these methods. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.tree.DefaultTreeCellRenderer.hasFocus*

Displays an entry in a tree. DefaultTreeCellRenderer is not opaque and unless 
you subclass paint you should not change this. See How to Use Trees in The Java 
Tutorial for examples of customizing node display using this class. 

Implementation Note: This class overrides invalidate, validate, revalidate, 
repaint, and firePropertyChange solely to improve performance. If not 
overridden, these frequently called methods would execute code paths that are 
unnecessary for the default tree cell renderer. If you write your own renderer, 
take care to weigh the benefits and drawbacks of overriding these methods. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.Icon_javax.swing.tree.DefaultTreeCellRenderer.leafIcon*

Displays an entry in a tree. DefaultTreeCellRenderer is not opaque and unless 
you subclass paint you should not change this. See How to Use Trees in The Java 
Tutorial for examples of customizing node display using this class. 

Implementation Note: This class overrides invalidate, validate, revalidate, 
repaint, and firePropertyChange solely to improve performance. If not 
overridden, these frequently called methods would execute code paths that are 
unnecessary for the default tree cell renderer. If you write your own renderer, 
take care to weigh the benefits and drawbacks of overriding these methods. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.Icon_javax.swing.tree.DefaultTreeCellRenderer.openIcon*

Displays an entry in a tree. DefaultTreeCellRenderer is not opaque and unless 
you subclass paint you should not change this. See How to Use Trees in The Java 
Tutorial for examples of customizing node display using this class. 

Implementation Note: This class overrides invalidate, validate, revalidate, 
repaint, and firePropertyChange solely to improve performance. If not 
overridden, these frequently called methods would execute code paths that are 
unnecessary for the default tree cell renderer. If you write your own renderer, 
take care to weigh the benefits and drawbacks of overriding these methods. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.tree.DefaultTreeCellRenderer.selected*

Displays an entry in a tree. DefaultTreeCellRenderer is not opaque and unless 
you subclass paint you should not change this. See How to Use Trees in The Java 
Tutorial for examples of customizing node display using this class. 

Implementation Note: This class overrides invalidate, validate, revalidate, 
repaint, and firePropertyChange solely to improve performance. If not 
overridden, these frequently called methods would execute code paths that are 
unnecessary for the default tree cell renderer. If you write your own renderer, 
take care to weigh the benefits and drawbacks of overriding these methods. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Color_javax.swing.tree.DefaultTreeCellRenderer.textNonSelectionColor*

Displays an entry in a tree. DefaultTreeCellRenderer is not opaque and unless 
you subclass paint you should not change this. See How to Use Trees in The Java 
Tutorial for examples of customizing node display using this class. 

Implementation Note: This class overrides invalidate, validate, revalidate, 
repaint, and firePropertyChange solely to improve performance. If not 
overridden, these frequently called methods would execute code paths that are 
unnecessary for the default tree cell renderer. If you write your own renderer, 
take care to weigh the benefits and drawbacks of overriding these methods. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Color_javax.swing.tree.DefaultTreeCellRenderer.textSelectionColor*

Displays an entry in a tree. DefaultTreeCellRenderer is not opaque and unless 
you subclass paint you should not change this. See How to Use Trees in The Java 
Tutorial for examples of customizing node display using this class. 

Implementation Note: This class overrides invalidate, validate, revalidate, 
repaint, and firePropertyChange solely to improve performance. If not 
overridden, these frequently called methods would execute code paths that are 
unnecessary for the default tree cell renderer. If you write your own renderer, 
take care to weigh the benefits and drawbacks of overriding these methods. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.tree.DefaultTreeCellRenderer()*

public DefaultTreeCellRenderer()

Returns a new instance of DefaultTreeCellRenderer. Alignment is set to left 
aligned. Icons and text color are determined from the UIManager. 


*javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,boolean,boolean)*

public void firePropertyChange(
  java.lang.String propertyName,
  boolean oldValue,
  boolean newValue)

Overridden for performance reasons. See the Implementation Note for more 
information. 


*javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,byte,byte)*

public void firePropertyChange(
  java.lang.String propertyName,
  byte oldValue,
  byte newValue)

Overridden for performance reasons. See the Implementation Note for more 
information. 


*javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,char,char)*

public void firePropertyChange(
  java.lang.String propertyName,
  char oldValue,
  char newValue)

Overridden for performance reasons. See the Implementation Note for more 
information. 


*javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,double,double)*

public void firePropertyChange(
  java.lang.String propertyName,
  double oldValue,
  double newValue)

Overridden for performance reasons. See the Implementation Note for more 
information. 


*javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,float,float)*

public void firePropertyChange(
  java.lang.String propertyName,
  float oldValue,
  float newValue)

Overridden for performance reasons. See the Implementation Note for more 
information. 


*javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,int,int)*

public void firePropertyChange(
  java.lang.String propertyName,
  int oldValue,
  int newValue)

Overridden for performance reasons. See the Implementation Note for more 
information. 


*javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,long,long)*

public void firePropertyChange(
  java.lang.String propertyName,
  long oldValue,
  long newValue)

Overridden for performance reasons. See the Implementation Note for more 
information. 


*javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,Object,Object)*

protected void firePropertyChange(
  java.lang.String propertyName,
  java.lang.Object oldValue,
  java.lang.Object newValue)

Overridden for performance reasons. See the Implementation Note for more 
information. 


*javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(String,short,short)*

public void firePropertyChange(
  java.lang.String propertyName,
  short oldValue,
  short newValue)

Overridden for performance reasons. See the Implementation Note for more 
information. 


*javax.swing.tree.DefaultTreeCellRenderer.getBackgroundNonSelectionColor()*

public |java.awt.Color| getBackgroundNonSelectionColor()

Returns the background color to be used for non selected nodes. 


*javax.swing.tree.DefaultTreeCellRenderer.getBackgroundSelectionColor()*

public |java.awt.Color| getBackgroundSelectionColor()

Returns the color to use for the background if node is selected. 


*javax.swing.tree.DefaultTreeCellRenderer.getBorderSelectionColor()*

public |java.awt.Color| getBorderSelectionColor()

Returns the color the border is drawn. 


*javax.swing.tree.DefaultTreeCellRenderer.getClosedIcon()*

public |javax.swing.Icon| getClosedIcon()

Returns the icon used to represent non-leaf nodes that are not expanded. 


*javax.swing.tree.DefaultTreeCellRenderer.getDefaultClosedIcon()*

public |javax.swing.Icon| getDefaultClosedIcon()

Returns the default icon, for the current laf, that is used to represent 
non-leaf nodes that are not expanded. 


*javax.swing.tree.DefaultTreeCellRenderer.getDefaultLeafIcon()*

public |javax.swing.Icon| getDefaultLeafIcon()

Returns the default icon, for the current laf, that is used to represent leaf 
nodes. 


*javax.swing.tree.DefaultTreeCellRenderer.getDefaultOpenIcon()*

public |javax.swing.Icon| getDefaultOpenIcon()

Returns the default icon, for the current laf, that is used to represent 
non-leaf nodes that are expanded. 


*javax.swing.tree.DefaultTreeCellRenderer.getFont()*

public |java.awt.Font| getFont()

Gets the font of this component. 


    Returns: this component's font; if a font has not been set for this component, the font 
             of its parent is returned 
*javax.swing.tree.DefaultTreeCellRenderer.getLeafIcon()*

public |javax.swing.Icon| getLeafIcon()

Returns the icon used to represent leaf nodes. 


*javax.swing.tree.DefaultTreeCellRenderer.getOpenIcon()*

public |javax.swing.Icon| getOpenIcon()

Returns the icon used to represent non-leaf nodes that are expanded. 


*javax.swing.tree.DefaultTreeCellRenderer.getPreferredSize()*

public |java.awt.Dimension| getPreferredSize()

Overrides JComponent.getPreferredSize to return slightly wider preferred size 
value. 


*javax.swing.tree.DefaultTreeCellRenderer.getTextNonSelectionColor()*

public |java.awt.Color| getTextNonSelectionColor()

Returns the color the text is drawn with when the node isn't selected. 


*javax.swing.tree.DefaultTreeCellRenderer.getTextSelectionColor()*

public |java.awt.Color| getTextSelectionColor()

Returns the color the text is drawn with when the node is selected. 


*javax.swing.tree.DefaultTreeCellRenderer.getTreeCellRendererComponent(JTree,Object,boolean,boolean,boolean,int,boolean)*

public |java.awt.Component| getTreeCellRendererComponent(
  javax.swing.JTree tree,
  java.lang.Object value,
  boolean sel,
  boolean expanded,
  boolean leaf,
  int row,
  boolean hasFocus)

Configures the renderer based on the passed in components. The value is set 
from messaging the tree with convertValueToText, which ultimately invokes 
toString on value. The foreground color is set based on the selection and the 
icon is set based on on leaf and expanded. 


*javax.swing.tree.DefaultTreeCellRenderer.invalidate()*

public void invalidate()

Overridden for performance reasons. See the Implementation Note for more 
information. 


*javax.swing.tree.DefaultTreeCellRenderer.paint(Graphics)*

public void paint(java.awt.Graphics g)

Paints the value. The background is filled based on selected. 


*javax.swing.tree.DefaultTreeCellRenderer.repaint()*

public void repaint()

Overridden for performance reasons. See the Implementation Note for more 
information. 


*javax.swing.tree.DefaultTreeCellRenderer.repaint(long,int,int,int,int)*

public void repaint(
  long tm,
  int x,
  int y,
  int width,
  int height)

Overridden for performance reasons. See the Implementation Note for more 
information. 


*javax.swing.tree.DefaultTreeCellRenderer.repaint(Rectangle)*

public void repaint(java.awt.Rectangle r)

Overridden for performance reasons. See the Implementation Note for more 
information. 


*javax.swing.tree.DefaultTreeCellRenderer.revalidate()*

public void revalidate()

Overridden for performance reasons. See the Implementation Note for more 
information. 


*javax.swing.tree.DefaultTreeCellRenderer.setBackground(Color)*

public void setBackground(java.awt.Color color)

Subclassed to map ColorUIResources to null. If color is null, or a 
ColorUIResource, this has the effect of letting the background color of the 
JTree show through. On the other hand, if color is non-null, and not a 
ColorUIResource, the background becomes color. 


*javax.swing.tree.DefaultTreeCellRenderer.setBackgroundNonSelectionColor(Color)*

public void setBackgroundNonSelectionColor(java.awt.Color newColor)

Sets the background color to be used for non selected nodes. 


*javax.swing.tree.DefaultTreeCellRenderer.setBackgroundSelectionColor(Color)*

public void setBackgroundSelectionColor(java.awt.Color newColor)

Sets the color to use for the background if node is selected. 


*javax.swing.tree.DefaultTreeCellRenderer.setBorderSelectionColor(Color)*

public void setBorderSelectionColor(java.awt.Color newColor)

Sets the color to use for the border. 


*javax.swing.tree.DefaultTreeCellRenderer.setClosedIcon(Icon)*

public void setClosedIcon(javax.swing.Icon newIcon)

Sets the icon used to represent non-leaf nodes that are not expanded. 


*javax.swing.tree.DefaultTreeCellRenderer.setFont(Font)*

public void setFont(java.awt.Font font)

Subclassed to map FontUIResources to null. If font is null, or a 
FontUIResource, this has the effect of letting the font of the JTree show 
through. On the other hand, if font is non-null, and not a FontUIResource, the 
font becomes font. 


*javax.swing.tree.DefaultTreeCellRenderer.setLeafIcon(Icon)*

public void setLeafIcon(javax.swing.Icon newIcon)

Sets the icon used to represent leaf nodes. 


*javax.swing.tree.DefaultTreeCellRenderer.setOpenIcon(Icon)*

public void setOpenIcon(javax.swing.Icon newIcon)

Sets the icon used to represent non-leaf nodes that are expanded. 


*javax.swing.tree.DefaultTreeCellRenderer.setTextNonSelectionColor(Color)*

public void setTextNonSelectionColor(java.awt.Color newColor)

Sets the color the text is drawn with when the node isn't selected. 


*javax.swing.tree.DefaultTreeCellRenderer.setTextSelectionColor(Color)*

public void setTextSelectionColor(java.awt.Color newColor)

Sets the color the text is drawn with when the node is selected. 


*javax.swing.tree.DefaultTreeCellRenderer.validate()*

public void validate()

Overridden for performance reasons. See the Implementation Note for more 
information. 




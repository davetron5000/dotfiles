*javax.swing.border.BevelBorder* *BevelBorder* A class which implements a simple

public class BevelBorder
  extends    |javax.swing.border.AbstractBorder|

|javax.swing.border.BevelBorder_Description|
|javax.swing.border.BevelBorder_Fields|
|javax.swing.border.BevelBorder_Constructors|
|javax.swing.border.BevelBorder_Methods|

================================================================================

*javax.swing.border.BevelBorder_Fields*
|int_javax.swing.border.BevelBorder.bevelType|
|java.awt.Color_javax.swing.border.BevelBorder.highlightInner|
|java.awt.Color_javax.swing.border.BevelBorder.highlightOuter|
|int_javax.swing.border.BevelBorder.LOWERED|
|int_javax.swing.border.BevelBorder.RAISED|
|java.awt.Color_javax.swing.border.BevelBorder.shadowInner|
|java.awt.Color_javax.swing.border.BevelBorder.shadowOuter|

*javax.swing.border.BevelBorder_Constructors*
|javax.swing.border.BevelBorder(int)|Creates a bevel border with the specified 
|javax.swing.border.BevelBorder(int,Color,Color)|Creates a bevel border with th
|javax.swing.border.BevelBorder(int,Color,Color,Color,Color)|Creates a bevel bo

*javax.swing.border.BevelBorder_Methods*
|javax.swing.border.BevelBorder.getBevelType()|Returns the type of the bevel bo
|javax.swing.border.BevelBorder.getBorderInsets(Component)|Returns the insets o
|javax.swing.border.BevelBorder.getBorderInsets(Component,Insets)|Reinitialize 
|javax.swing.border.BevelBorder.getHighlightInnerColor()|Returns the inner high
|javax.swing.border.BevelBorder.getHighlightInnerColor(Component)|Returns the i
|javax.swing.border.BevelBorder.getHighlightOuterColor()|Returns the outer high
|javax.swing.border.BevelBorder.getHighlightOuterColor(Component)|Returns the o
|javax.swing.border.BevelBorder.getShadowInnerColor()|Returns the inner shadow 
|javax.swing.border.BevelBorder.getShadowInnerColor(Component)|Returns the inne
|javax.swing.border.BevelBorder.getShadowOuterColor()|Returns the outer shadow 
|javax.swing.border.BevelBorder.getShadowOuterColor(Component)|Returns the oute
|javax.swing.border.BevelBorder.isBorderOpaque()|Returns whether or not the bor
|javax.swing.border.BevelBorder.paintBorder(Component,Graphics,int,int,int,int)|
|javax.swing.border.BevelBorder.paintLoweredBevel(Component,Graphics,int,int,int,int)|
|javax.swing.border.BevelBorder.paintRaisedBevel(Component,Graphics,int,int,int,int)|

*javax.swing.border.BevelBorder_Description*

A class which implements a simple two-line bevel border. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.border.BevelBorder.bevelType*

A class which implements a simple two-line bevel border. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Color_javax.swing.border.BevelBorder.highlightInner*

A class which implements a simple two-line bevel border. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Color_javax.swing.border.BevelBorder.highlightOuter*

A class which implements a simple two-line bevel border. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.border.BevelBorder.LOWERED*

A class which implements a simple two-line bevel border. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.border.BevelBorder.RAISED*

A class which implements a simple two-line bevel border. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Color_javax.swing.border.BevelBorder.shadowInner*

A class which implements a simple two-line bevel border. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Color_javax.swing.border.BevelBorder.shadowOuter*

A class which implements a simple two-line bevel border. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.border.BevelBorder(int)*

public BevelBorder(int bevelType)

Creates a bevel border with the specified type and whose colors will be derived 
from the background color of the component passed into the paintBorder method. 

    bevelType - the type of bevel for the border 

*javax.swing.border.BevelBorder(int,Color,Color)*

public BevelBorder(
  int bevelType,
  java.awt.Color highlight,
  java.awt.Color shadow)

Creates a bevel border with the specified type, highlight and shadow colors. 

    bevelType - the type of bevel for the border 
    highlight - the color to use for the bevel highlight 
    shadow - the color to use for the bevel shadow 

*javax.swing.border.BevelBorder(int,Color,Color,Color,Color)*

public BevelBorder(
  int bevelType,
  java.awt.Color highlightOuterColor,
  java.awt.Color highlightInnerColor,
  java.awt.Color shadowOuterColor,
  java.awt.Color shadowInnerColor)

Creates a bevel border with the specified type, highlight and shadow colors. 

Note: The shadow inner and outer colors are switched for a lowered bevel 
border. 

    bevelType - the type of bevel for the border 
    highlightOuterColor - the color to use for the bevel outer highlight 
    highlightInnerColor - the color to use for the bevel inner highlight 
    shadowOuterColor - the color to use for the bevel outer shadow 
    shadowInnerColor - the color to use for the bevel inner shadow 

*javax.swing.border.BevelBorder.getBevelType()*

public int getBevelType()

Returns the type of the bevel border. 


*javax.swing.border.BevelBorder.getBorderInsets(Component)*

public |java.awt.Insets| getBorderInsets(java.awt.Component c)

Returns the insets of the border. 

    c - the component for which this border insets value applies 

*javax.swing.border.BevelBorder.getBorderInsets(Component,Insets)*

public |java.awt.Insets| getBorderInsets(
  java.awt.Component c,
  java.awt.Insets insets)

Reinitialize the insets parameter with this Border's current Insets. 

    c - the component for which this border insets value applies 
    insets - the object to be reinitialized 

*javax.swing.border.BevelBorder.getHighlightInnerColor()*

public |java.awt.Color| getHighlightInnerColor()

Returns the inner highlight color of the bevel border. Will return null if no 
highlight color was specified at instantiation. 


*javax.swing.border.BevelBorder.getHighlightInnerColor(Component)*

public |java.awt.Color| getHighlightInnerColor(java.awt.Component c)

Returns the inner highlight color of the bevel border when rendered on the 
specified component. If no highlight color was specified at instantiation, the 
highlight color is derived from the specified component's background color. 

    c - the component for which the highlight may be derived 

*javax.swing.border.BevelBorder.getHighlightOuterColor()*

public |java.awt.Color| getHighlightOuterColor()

Returns the outer highlight color of the bevel border. Will return null if no 
highlight color was specified at instantiation. 


*javax.swing.border.BevelBorder.getHighlightOuterColor(Component)*

public |java.awt.Color| getHighlightOuterColor(java.awt.Component c)

Returns the outer highlight color of the bevel border when rendered on the 
specified component. If no highlight color was specified at instantiation, the 
highlight color is derived from the specified component's background color. 

    c - the component for which the highlight may be derived 

*javax.swing.border.BevelBorder.getShadowInnerColor()*

public |java.awt.Color| getShadowInnerColor()

Returns the inner shadow color of the bevel border. Will return null if no 
shadow color was specified at instantiation. 


*javax.swing.border.BevelBorder.getShadowInnerColor(Component)*

public |java.awt.Color| getShadowInnerColor(java.awt.Component c)

Returns the inner shadow color of the bevel border when rendered on the 
specified component. If no shadow color was specified at instantiation, the 
shadow color is derived from the specified component's background color. 

    c - the component for which the shadow may be derived 

*javax.swing.border.BevelBorder.getShadowOuterColor()*

public |java.awt.Color| getShadowOuterColor()

Returns the outer shadow color of the bevel border. Will return null if no 
shadow color was specified at instantiation. 


*javax.swing.border.BevelBorder.getShadowOuterColor(Component)*

public |java.awt.Color| getShadowOuterColor(java.awt.Component c)

Returns the outer shadow color of the bevel border when rendered on the 
specified component. If no shadow color was specified at instantiation, the 
shadow color is derived from the specified component's background color. 

    c - the component for which the shadow may be derived 

*javax.swing.border.BevelBorder.isBorderOpaque()*

public boolean isBorderOpaque()

Returns whether or not the border is opaque. 


*javax.swing.border.BevelBorder.paintBorder(Component,Graphics,int,int,int,int)*

public void paintBorder(
  java.awt.Component c,
  java.awt.Graphics g,
  int x,
  int y,
  int width,
  int height)

Paints the border for the specified component with the specified position and 
size. 

    c - the component for which this border is being painted 
    g - the paint graphics 
    x - the x position of the painted border 
    y - the y position of the painted border 
    width - the width of the painted border 
    height - the height of the painted border 

*javax.swing.border.BevelBorder.paintLoweredBevel(Component,Graphics,int,int,int,int)*

protected void paintLoweredBevel(
  java.awt.Component c,
  java.awt.Graphics g,
  int x,
  int y,
  int width,
  int height)




*javax.swing.border.BevelBorder.paintRaisedBevel(Component,Graphics,int,int,int,int)*

protected void paintRaisedBevel(
  java.awt.Component c,
  java.awt.Graphics g,
  int x,
  int y,
  int width,
  int height)






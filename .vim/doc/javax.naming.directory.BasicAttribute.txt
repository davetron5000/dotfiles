*javax.naming.directory.BasicAttribute* *BasicAttribute* This class provides a b

public class BasicAttribute
  extends    |java.lang.Object|
  implements |javax.naming.directory.Attribute|

|javax.naming.directory.BasicAttribute_Description|
|javax.naming.directory.BasicAttribute_Fields|
|javax.naming.directory.BasicAttribute_Constructors|
|javax.naming.directory.BasicAttribute_Methods|

================================================================================

*javax.naming.directory.BasicAttribute_Fields*
|java.lang.String_javax.naming.directory.BasicAttribute.attrID|
|boolean_javax.naming.directory.BasicAttribute.ordered|
|java.util.Vector_javax.naming.directory.BasicAttribute.values|

*javax.naming.directory.BasicAttribute_Constructors*
|javax.naming.directory.BasicAttribute(String)|Constructs a new instance of an 
|javax.naming.directory.BasicAttribute(String,boolean)|Constructs a new instanc
|javax.naming.directory.BasicAttribute(String,Object)|Constructs a new instance
|javax.naming.directory.BasicAttribute(String,Object,boolean)|Constructs a new 

*javax.naming.directory.BasicAttribute_Methods*
|javax.naming.directory.BasicAttribute.add(int,Object)|
|javax.naming.directory.BasicAttribute.add(Object)|Adds a new value to this att
|javax.naming.directory.BasicAttribute.clear()|
|javax.naming.directory.BasicAttribute.clone()|
|javax.naming.directory.BasicAttribute.contains(Object)|Determines whether a va
|javax.naming.directory.BasicAttribute.equals(Object)|Determines whether obj is
|javax.naming.directory.BasicAttribute.get()|Retrieves one of this attribute's 
|javax.naming.directory.BasicAttribute.get(int)|
|javax.naming.directory.BasicAttribute.getAll()|Retrieves an enumeration of thi
|javax.naming.directory.BasicAttribute.getAttributeDefinition()|Retrieves this 
|javax.naming.directory.BasicAttribute.getAttributeSyntaxDefinition()|Retrieves
|javax.naming.directory.BasicAttribute.getID()|
|javax.naming.directory.BasicAttribute.hashCode()|Calculates the hash code of t
|javax.naming.directory.BasicAttribute.isOrdered()|
|javax.naming.directory.BasicAttribute.remove(int)|
|javax.naming.directory.BasicAttribute.remove(Object)|Removes a specified value
|javax.naming.directory.BasicAttribute.set(int,Object)|
|javax.naming.directory.BasicAttribute.size()|
|javax.naming.directory.BasicAttribute.toString()|Generates the string represen

*javax.naming.directory.BasicAttribute_Description*

This class provides a basic implementation of the Attribute interface. 

This implementation does not support the schema methods 
getAttributeDefinition() and getAttributeSyntaxDefinition(). They simply throw 
OperationNotSupportedException. Subclasses of BasicAttribute should override 
these methods if they support them. 

The BasicAttribute class by default uses Object.equals() to determine equality 
of attribute values when testing for equality or when searching for values, 
except when the value is an array. For an array, each element of the array is 
checked using Object.equals(). Subclasses of BasicAttribute can make use of 
schema information when doing similar equality checks by overriding methods in 
which such use of schema is meaningful. Similarly, the BasicAttribute class by 
default returns the values passed to its constructor and/or manipulated using 
the add/remove methods. Subclasses of BasicAttribute can override get() and 
getAll() to get the values dynamically from the directory (or implement the 
Attribute interface directly instead of subclassing BasicAttribute). 

Note that updates to BasicAttribute (such as adding or removing a value) does 
not affect the corresponding representation of the attribute in the directory. 
Updates to the directory can only be effected using operations in the 
DirContext interface. 

A BasicAttribute instance is not synchronized against concurrent multithreaded 
access. Multiple threads trying to access and modify a BasicAttribute should 
lock the object. 


*java.lang.String_javax.naming.directory.BasicAttribute.attrID*

This class provides a basic implementation of the Attribute interface. 

This implementation does not support the schema methods 
getAttributeDefinition() and getAttributeSyntaxDefinition(). They simply throw 
OperationNotSupportedException. Subclasses of BasicAttribute should override 
these methods if they support them. 

The BasicAttribute class by default uses Object.equals() to determine equality 
of attribute values when testing for equality or when searching for values, 
except when the value is an array. For an array, each element of the array is 
checked using Object.equals(). Subclasses of BasicAttribute can make use of 
schema information when doing similar equality checks by overriding methods in 
which such use of schema is meaningful. Similarly, the BasicAttribute class by 
default returns the values passed to its constructor and/or manipulated using 
the add/remove methods. Subclasses of BasicAttribute can override get() and 
getAll() to get the values dynamically from the directory (or implement the 
Attribute interface directly instead of subclassing BasicAttribute). 

Note that updates to BasicAttribute (such as adding or removing a value) does 
not affect the corresponding representation of the attribute in the directory. 
Updates to the directory can only be effected using operations in the 
DirContext interface. 

A BasicAttribute instance is not synchronized against concurrent multithreaded 
access. Multiple threads trying to access and modify a BasicAttribute should 
lock the object. 


*boolean_javax.naming.directory.BasicAttribute.ordered*

This class provides a basic implementation of the Attribute interface. 

This implementation does not support the schema methods 
getAttributeDefinition() and getAttributeSyntaxDefinition(). They simply throw 
OperationNotSupportedException. Subclasses of BasicAttribute should override 
these methods if they support them. 

The BasicAttribute class by default uses Object.equals() to determine equality 
of attribute values when testing for equality or when searching for values, 
except when the value is an array. For an array, each element of the array is 
checked using Object.equals(). Subclasses of BasicAttribute can make use of 
schema information when doing similar equality checks by overriding methods in 
which such use of schema is meaningful. Similarly, the BasicAttribute class by 
default returns the values passed to its constructor and/or manipulated using 
the add/remove methods. Subclasses of BasicAttribute can override get() and 
getAll() to get the values dynamically from the directory (or implement the 
Attribute interface directly instead of subclassing BasicAttribute). 

Note that updates to BasicAttribute (such as adding or removing a value) does 
not affect the corresponding representation of the attribute in the directory. 
Updates to the directory can only be effected using operations in the 
DirContext interface. 

A BasicAttribute instance is not synchronized against concurrent multithreaded 
access. Multiple threads trying to access and modify a BasicAttribute should 
lock the object. 


*java.util.Vector_javax.naming.directory.BasicAttribute.values*

This class provides a basic implementation of the Attribute interface. 

This implementation does not support the schema methods 
getAttributeDefinition() and getAttributeSyntaxDefinition(). They simply throw 
OperationNotSupportedException. Subclasses of BasicAttribute should override 
these methods if they support them. 

The BasicAttribute class by default uses Object.equals() to determine equality 
of attribute values when testing for equality or when searching for values, 
except when the value is an array. For an array, each element of the array is 
checked using Object.equals(). Subclasses of BasicAttribute can make use of 
schema information when doing similar equality checks by overriding methods in 
which such use of schema is meaningful. Similarly, the BasicAttribute class by 
default returns the values passed to its constructor and/or manipulated using 
the add/remove methods. Subclasses of BasicAttribute can override get() and 
getAll() to get the values dynamically from the directory (or implement the 
Attribute interface directly instead of subclassing BasicAttribute). 

Note that updates to BasicAttribute (such as adding or removing a value) does 
not affect the corresponding representation of the attribute in the directory. 
Updates to the directory can only be effected using operations in the 
DirContext interface. 

A BasicAttribute instance is not synchronized against concurrent multithreaded 
access. Multiple threads trying to access and modify a BasicAttribute should 
lock the object. 



*javax.naming.directory.BasicAttribute(String)*

public BasicAttribute(java.lang.String id)

Constructs a new instance of an unordered attribute with no value. 

    id - The attribute's id. It cannot be null. 

*javax.naming.directory.BasicAttribute(String,boolean)*

public BasicAttribute(
  java.lang.String id,
  boolean ordered)

Constructs a new instance of a possibly ordered attribute with no value. 

    id - The attribute's id. It cannot be null. 
    ordered - true means the attribute's values will be ordered; false otherwise. 

*javax.naming.directory.BasicAttribute(String,Object)*

public BasicAttribute(
  java.lang.String id,
  java.lang.Object value)

Constructs a new instance of an unordered attribute with a single value. 

    id - The attribute's id. It cannot be null. 
    value - The attribute's value. If null, a null value is added to the attribute. 

*javax.naming.directory.BasicAttribute(String,Object,boolean)*

public BasicAttribute(
  java.lang.String id,
  java.lang.Object value,
  boolean ordered)

Constructs a new instance of a possibly ordered attribute with a single value. 

    id - The attribute's id. It cannot be null. 
    value - The attribute's value. If null, a null value is added to the attribute. 
    ordered - true means the attribute's values will be ordered; false otherwise. 

*javax.naming.directory.BasicAttribute.add(int,Object)*

public void add(
  int ix,
  java.lang.Object attrVal)




*javax.naming.directory.BasicAttribute.add(Object)*

public boolean add(java.lang.Object attrVal)

Adds a new value to this attribute. 

By default, Object.equals() is used when comparing attrVal with this 
attribute's values except when attrVal is an array. For an array, each element 
of the array is checked using Object.equals(). A subclass may use schema 
information to determine equality. 


*javax.naming.directory.BasicAttribute.clear()*

public void clear()




*javax.naming.directory.BasicAttribute.clone()*

public |java.lang.Object| clone()




*javax.naming.directory.BasicAttribute.contains(Object)*

public boolean contains(java.lang.Object attrVal)

Determines whether a value is in this attribute. 

By default, Object.equals() is used when comparing attrVal with this 
attribute's values except when attrVal is an array. For an array, each element 
of the array is checked using Object.equals(). A subclass may use schema 
information to determine equality. 


*javax.naming.directory.BasicAttribute.equals(Object)*

public boolean equals(java.lang.Object obj)

Determines whether obj is equal to this attribute. Two attributes are equal if 
their attribute-ids, syntaxes and values are equal. If the attribute values are 
unordered, the order that the values were added are irrelevant. If the 
attribute values are ordered, then the order the values must match. If obj is 
null or not an Attribute, false is returned. 

By default Object.equals() is used when comparing the attribute id and its 
values except when a value is an array. For an array, each element of the array 
is checked using Object.equals(). A subclass may override this to make use of 
schema syntax information and matching rules, which define what it means for 
two attributes to be equal. How and whether a subclass makes use of the schema 
information is determined by the subclass. If a subclass overrides equals(), it 
should also override hashCode() such that two attributes that are equal have 
the same hash code. 

    obj - The possibly null object to check. 

    Returns: true if obj is equal to this attribute; false otherwise. 
*javax.naming.directory.BasicAttribute.get()*

public |java.lang.Object| get()
  throws |javax.naming.NamingException|
         
Retrieves one of this attribute's values. 

By default, the value returned is one of those passed to the constructor and/or 
manipulated using the add/replace/remove methods. A subclass may override this 
to retrieve the value dynamically from the directory. 


*javax.naming.directory.BasicAttribute.get(int)*

public |java.lang.Object| get(int ix)
  throws |javax.naming.NamingException|
         



*javax.naming.directory.BasicAttribute.getAll()*

public |javax.naming.NamingEnumeration| getAll()
  throws |javax.naming.NamingException|
         
Retrieves an enumeration of this attribute's values. 

By default, the values returned are those passed to the constructor and/or 
manipulated using the add/replace/remove methods. A subclass may override this 
to retrieve the values dynamically from the directory. 


*javax.naming.directory.BasicAttribute.getAttributeDefinition()*

public |javax.naming.directory.DirContext| getAttributeDefinition()
  throws |javax.naming.NamingException|
         
Retrieves this attribute's schema definition. 

This method by default throws OperationNotSupportedException. A subclass should 
override this method if it supports schema. 


*javax.naming.directory.BasicAttribute.getAttributeSyntaxDefinition()*

public |javax.naming.directory.DirContext| getAttributeSyntaxDefinition()
  throws |javax.naming.NamingException|
         
Retrieves the syntax definition associated with this attribute. 

This method by default throws OperationNotSupportedException. A subclass should 
override this method if it supports schema. 


*javax.naming.directory.BasicAttribute.getID()*

public |java.lang.String| getID()




*javax.naming.directory.BasicAttribute.hashCode()*

public int hashCode()

Calculates the hash code of this attribute. 

The hash code is computed by adding the hash code of the attribute's id and 
that of all of its values except for values that are arrays. For an array, the 
hash code of each element of the array is summed. If a subclass overrides 
hashCode(), it should override equals() as well so that two attributes that are 
equal have the same hash code. 


    Returns: an int representing the hash code of this attribute. 
*javax.naming.directory.BasicAttribute.isOrdered()*

public boolean isOrdered()




*javax.naming.directory.BasicAttribute.remove(int)*

public |java.lang.Object| remove(int ix)




*javax.naming.directory.BasicAttribute.remove(Object)*

public boolean remove(java.lang.Object attrval)

Removes a specified value from this attribute. 

By default, Object.equals() is used when comparing attrVal with this 
attribute's values except when attrVal is an array. For an array, each element 
of the array is checked using Object.equals(). A subclass may use schema 
information to determine equality. 


*javax.naming.directory.BasicAttribute.set(int,Object)*

public |java.lang.Object| set(
  int ix,
  java.lang.Object attrVal)




*javax.naming.directory.BasicAttribute.size()*

public int size()




*javax.naming.directory.BasicAttribute.toString()*

public |java.lang.String| toString()

Generates the string representation of this attribute. The string consists of 
the attribute's id and its values. This string is meant for debugging and not 
meant to be interpreted programmatically. 


    Returns: The non-null string representation of this attribute. 


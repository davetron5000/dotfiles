*javax.swing.AbstractButton.AccessibleAbstractButton* *AbstractButton.AccessibleAbstractButton* 

protected abstract class AbstractButton.AccessibleAbstractButton
  extends    |javax.swing.JComponent.AccessibleJComponent|
  implements |javax.accessibility.AccessibleAction|
             |javax.accessibility.AccessibleValue|
             |javax.accessibility.AccessibleText|
             |javax.accessibility.AccessibleExtendedComponent|

|javax.swing.AbstractButton.AccessibleAbstractButton_Description|
|javax.swing.AbstractButton.AccessibleAbstractButton_Fields|
|javax.swing.AbstractButton.AccessibleAbstractButton_Constructors|
|javax.swing.AbstractButton.AccessibleAbstractButton_Methods|

================================================================================

*javax.swing.AbstractButton.AccessibleAbstractButton_Constructors*
|javax.swing.AbstractButton.AccessibleAbstractButton()|

*javax.swing.AbstractButton.AccessibleAbstractButton_Methods*
|javax.swing.AbstractButton.AccessibleAbstractButton.doAccessibleAction(int)|Pe
|javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleAction()|Get 
|javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleActionCount()|
|javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleActionDescription(int)|
|javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleIcon()|Get th
|javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleKeyBinding()|
|javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleName()|Return
|javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleRelationSet()|
|javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleStateSet()|Ge
|javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleText()|
|javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleValue()|Get t
|javax.swing.AbstractButton.AccessibleAbstractButton.getAfterIndex(int,int)|Ret
|javax.swing.AbstractButton.AccessibleAbstractButton.getAtIndex(int,int)|Return
|javax.swing.AbstractButton.AccessibleAbstractButton.getBeforeIndex(int,int)|Re
|javax.swing.AbstractButton.AccessibleAbstractButton.getCaretPosition()|Return 
|javax.swing.AbstractButton.AccessibleAbstractButton.getCharacterAttribute(int)|
|javax.swing.AbstractButton.AccessibleAbstractButton.getCharacterBounds(int)|De
|javax.swing.AbstractButton.AccessibleAbstractButton.getCharCount()|Return the 
|javax.swing.AbstractButton.AccessibleAbstractButton.getCurrentAccessibleValue()|
|javax.swing.AbstractButton.AccessibleAbstractButton.getIndexAtPoint(Point)|Giv
|javax.swing.AbstractButton.AccessibleAbstractButton.getMaximumAccessibleValue()|
|javax.swing.AbstractButton.AccessibleAbstractButton.getMinimumAccessibleValue()|
|javax.swing.AbstractButton.AccessibleAbstractButton.getSelectedText()|Returns 
|javax.swing.AbstractButton.AccessibleAbstractButton.getSelectionEnd()|Returns 
|javax.swing.AbstractButton.AccessibleAbstractButton.getSelectionStart()|Return
|javax.swing.AbstractButton.AccessibleAbstractButton.getTitledBorderText()|Retu
|javax.swing.AbstractButton.AccessibleAbstractButton.getToolTipText()|Returns t
|javax.swing.AbstractButton.AccessibleAbstractButton.setCurrentAccessibleValue(Number)|

*javax.swing.AbstractButton.AccessibleAbstractButton_Description*

This class implements accessibility support for the AbstractButton class. It 
provides an implementation of the Java Accessibility API appropriate to button 
and menu item user-interface elements. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.AbstractButton.AccessibleAbstractButton()*

protected AbstractButton.AccessibleAbstractButton()




*javax.swing.AbstractButton.AccessibleAbstractButton.doAccessibleAction(int)*

public boolean doAccessibleAction(int i)

Perform the specified Action on the object 

    i - zero-based index of actions 

    Returns: true if the the action was performed; else false. 
*javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleAction()*

public |javax.accessibility.AccessibleAction| getAccessibleAction()

Get the AccessibleAction associated with this object. In the implementation of 
the Java Accessibility API for this class, return this object, which is 
responsible for implementing the AccessibleAction interface on behalf of 
itself. 


    Returns: 
*javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleActionCount()*

public int getAccessibleActionCount()

Returns the number of Actions available in this object. The default behavior of 
a button is to have one action - toggle the button. 


    Returns: 1, the number of Actions in this object 
*javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleActionDescription(int)*

public |java.lang.String| getAccessibleActionDescription(int i)

Return a description of the specified action of the object. 

    i - zero-based index of the actions 

*javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleIcon()*

public |javax.accessibility.AccessibleIcon| getAccessibleIcon()

Get the AccessibleIcons associated with this object if one or more exist. 
Otherwise return null. 


*javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleKeyBinding()*

public |javax.accessibility.AccessibleKeyBinding| getAccessibleKeyBinding()

Returns key bindings associated with this object 


    Returns: the key bindings, if supported, of the object; otherwise, null 
*javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleName()*

public |java.lang.String| getAccessibleName()

Returns the accessible name of this object. 


    Returns: the localized name of the object -- can be null if this object does not have a 
             name 
*javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleRelationSet()*

public |javax.accessibility.AccessibleRelationSet| getAccessibleRelationSet()

Get the AccessibleRelationSet associated with this object if one exists. 
Otherwise return null. 


*javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleStateSet()*

public |javax.accessibility.AccessibleStateSet| getAccessibleStateSet()

Get the state set of this object. 


    Returns: an instance of AccessibleState containing the current state of the object 
*javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleText()*

public |javax.accessibility.AccessibleText| getAccessibleText()




*javax.swing.AbstractButton.AccessibleAbstractButton.getAccessibleValue()*

public |javax.accessibility.AccessibleValue| getAccessibleValue()

Get the AccessibleValue associated with this object. In the implementation of 
the Java Accessibility API for this class, return this object, which is 
responsible for implementing the AccessibleValue interface on behalf of itself. 


    Returns: 
*javax.swing.AbstractButton.AccessibleAbstractButton.getAfterIndex(int,int)*

public |java.lang.String| getAfterIndex(
  int part,
  int index)

Returns the String after a given index. 

    part - the AccessibleText.CHARACTER, AccessibleText.WORD, or AccessibleText.SENTENCE 
       to retrieve 
    index - an index within the text >= 0 

    Returns: the letter, word, or sentence, null for an invalid index or part 
*javax.swing.AbstractButton.AccessibleAbstractButton.getAtIndex(int,int)*

public |java.lang.String| getAtIndex(
  int part,
  int index)

Returns the String at a given index. 

    part - the AccessibleText.CHARACTER, AccessibleText.WORD, or AccessibleText.SENTENCE 
       to retrieve 
    index - an index within the text >= 0 

    Returns: the letter, word, or sentence, null for an invalid index or part 
*javax.swing.AbstractButton.AccessibleAbstractButton.getBeforeIndex(int,int)*

public |java.lang.String| getBeforeIndex(
  int part,
  int index)

Returns the String before a given index. 

    part - the AccessibleText.CHARACTER, AccessibleText.WORD, or AccessibleText.SENTENCE 
       to retrieve 
    index - an index within the text >= 0 

    Returns: the letter, word, or sentence, null for an invalid index or part 
*javax.swing.AbstractButton.AccessibleAbstractButton.getCaretPosition()*

public int getCaretPosition()

Return the zero-based offset of the caret. 

Note: That to the right of the caret will have the same index value as the 
offset (the caret is between two characters). 


    Returns: the zero-based offset of the caret. 
*javax.swing.AbstractButton.AccessibleAbstractButton.getCharacterAttribute(int)*

public |javax.swing.text.AttributeSet| getCharacterAttribute(int i)

Return the AttributeSet for a given character at a given index 

    i - the zero-based index into the text 

    Returns: the AttributeSet of the character 
*javax.swing.AbstractButton.AccessibleAbstractButton.getCharacterBounds(int)*

public |java.awt.Rectangle| getCharacterBounds(int i)

Determine the bounding box of the character at the given index into the string. 
The bounds are returned in local coordinates. If the index is invalid an empty 
rectangle is returned. 

Note: the AbstractButton must have a valid size (e.g. have been added to a 
parent container whose ancestor container is a valid top-level window) for this 
method to be able to return a meaningful value. 

    i - the index into the String 

    Returns: the screen coordinates of the character's the bounding box, if index is invalid 
             returns an empty rectangle. 
*javax.swing.AbstractButton.AccessibleAbstractButton.getCharCount()*

public int getCharCount()

Return the number of characters (valid indicies) 


    Returns: the number of characters 
*javax.swing.AbstractButton.AccessibleAbstractButton.getCurrentAccessibleValue()*

public |java.lang.Number| getCurrentAccessibleValue()

Get the value of this object as a Number. 


    Returns: An Integer of 0 if this isn't selected or an Integer of 1 if this is selected. 
*javax.swing.AbstractButton.AccessibleAbstractButton.getIndexAtPoint(Point)*

public int getIndexAtPoint(java.awt.Point p)

Given a point in local coordinates, return the zero-based index of the 
character under that Point. If the point is invalid, this method returns -1. 

Note: the AbstractButton must have a valid size (e.g. have been added to a 
parent container whose ancestor container is a valid top-level window) for this 
method to be able to return a meaningful value. 

    p - the Point in local coordinates 

    Returns: the zero-based index of the character under Point p; if Point is invalid 
             returns -1. 
*javax.swing.AbstractButton.AccessibleAbstractButton.getMaximumAccessibleValue()*

public |java.lang.Number| getMaximumAccessibleValue()

Get the maximum value of this object as a Number. 


    Returns: An Integer of 1. 
*javax.swing.AbstractButton.AccessibleAbstractButton.getMinimumAccessibleValue()*

public |java.lang.Number| getMinimumAccessibleValue()

Get the minimum value of this object as a Number. 


    Returns: an Integer of 0. 
*javax.swing.AbstractButton.AccessibleAbstractButton.getSelectedText()*

public |java.lang.String| getSelectedText()

Returns the portion of the text that is selected. 


    Returns: the String portion of the text that is selected 
*javax.swing.AbstractButton.AccessibleAbstractButton.getSelectionEnd()*

public int getSelectionEnd()

Returns the end offset within the selected text. If there is no selection, but 
there is a caret, the start and end offsets will be the same. 


    Returns: the index into teh text of the end of the selection 
*javax.swing.AbstractButton.AccessibleAbstractButton.getSelectionStart()*

public int getSelectionStart()

Returns the start offset within the selected text. If there is no selection, 
but there is a caret, the start and end offsets will be the same. 


    Returns: the index into the text of the start of the selection 
*javax.swing.AbstractButton.AccessibleAbstractButton.getTitledBorderText()*

public |java.lang.String| getTitledBorderText()

Returns the titled border text 


    Returns: the titled border text, if supported, of the object; otherwise, null 
*javax.swing.AbstractButton.AccessibleAbstractButton.getToolTipText()*

public |java.lang.String| getToolTipText()

Returns the tool tip text 


    Returns: the tool tip text, if supported, of the object; otherwise, null 
*javax.swing.AbstractButton.AccessibleAbstractButton.setCurrentAccessibleValue(Number)*

public boolean setCurrentAccessibleValue(java.lang.Number n)

Set the value of this object as a Number. 


    Returns: True if the value was set. 


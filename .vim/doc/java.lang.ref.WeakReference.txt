*java.lang.ref.WeakReference* *WeakReference* Weak reference objects, which do n

public class WeakReference
  extends    |java.lang.ref.Reference|

|java.lang.ref.WeakReference_Description|
|java.lang.ref.WeakReference_Fields|
|java.lang.ref.WeakReference_Constructors|
|java.lang.ref.WeakReference_Methods|

================================================================================

*java.lang.ref.WeakReference_Constructors*
|java.lang.ref.WeakReference(T)|Creates a new weak reference that refers to the
|java.lang.ref.WeakReference(T,ReferenceQueue)|Creates a new weak reference tha

*java.lang.ref.WeakReference_Description*

Weak reference objects, which do not prevent their referents from being made 
finalizable, finalized, and then reclaimed. Weak references are most often used 
to implement canonicalizing mappings. 

Suppose that the garbage collector determines at a certain point in time that 
an object is weakly reachable. At that time it will atomically clear all weak 
references to that object and all weak references to any other weakly-reachable 
objects from which that object is reachable through a chain of strong and soft 
references. At the same time it will declare all of the formerly 
weakly-reachable objects to be finalizable. At the same time or at some later 
time it will enqueue those newly-cleared weak references that are registered 
with reference queues. 


*java.lang.ref.WeakReference(T)*

public WeakReference(java.lang.Object referent)

Creates a new weak reference that refers to the given object. The new reference 
is not registered with any queue. 

    referent - object the new weak reference will refer to 

*java.lang.ref.WeakReference(T,ReferenceQueue)*

public WeakReference(
  java.lang.Object referent,
  java.lang.ref.ReferenceQueue q)

Creates a new weak reference that refers to the given object and is registered 
with the given queue. 

    referent - object the new weak reference will refer to 
    q - the queue with which the reference is to be registered, or null if registration 
       is not required 


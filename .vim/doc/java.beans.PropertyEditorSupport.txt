*java.beans.PropertyEditorSupport* *PropertyEditorSupport* This is a support cla

public class PropertyEditorSupport
  extends    |java.lang.Object|
  implements |java.beans.PropertyEditor|

|java.beans.PropertyEditorSupport_Description|
|java.beans.PropertyEditorSupport_Fields|
|java.beans.PropertyEditorSupport_Constructors|
|java.beans.PropertyEditorSupport_Methods|

================================================================================

*java.beans.PropertyEditorSupport_Constructors*
|java.beans.PropertyEditorSupport()|Constructs a PropertyEditorSupport object.
|java.beans.PropertyEditorSupport(Object)|Constructs a PropertyEditorSupport ob

*java.beans.PropertyEditorSupport_Methods*
|java.beans.PropertyEditorSupport.addPropertyChangeListener(PropertyChangeListener)|
|java.beans.PropertyEditorSupport.firePropertyChange()|Report that we have been
|java.beans.PropertyEditorSupport.getAsText()|Gets the property value as a stri
|java.beans.PropertyEditorSupport.getCustomEditor()|A PropertyEditor may chose 
|java.beans.PropertyEditorSupport.getJavaInitializationString()|This method is 
|java.beans.PropertyEditorSupport.getSource()|Returns the bean that is used as 
|java.beans.PropertyEditorSupport.getTags()|If the property value must be one o
|java.beans.PropertyEditorSupport.getValue()|Gets the value of the property.
|java.beans.PropertyEditorSupport.isPaintable()|Determines whether the class wi
|java.beans.PropertyEditorSupport.paintValue(Graphics,Rectangle)|Paint a repres
|java.beans.PropertyEditorSupport.removePropertyChangeListener(PropertyChangeListener)|
|java.beans.PropertyEditorSupport.setAsText(String)|Sets the property value by 
|java.beans.PropertyEditorSupport.setSource(Object)|Sets the source bean.
|java.beans.PropertyEditorSupport.setValue(Object)|Set (or change) the object t
|java.beans.PropertyEditorSupport.supportsCustomEditor()|Determines whether the

*java.beans.PropertyEditorSupport_Description*

This is a support class to help build property editors. 

It can be used either as a base class or as a delagatee. 


*java.beans.PropertyEditorSupport()*

public PropertyEditorSupport()

Constructs a PropertyEditorSupport object. 


*java.beans.PropertyEditorSupport(Object)*

public PropertyEditorSupport(java.lang.Object source)

Constructs a PropertyEditorSupport object. 

    source - the source used for event firing 

*java.beans.PropertyEditorSupport.addPropertyChangeListener(PropertyChangeListener)*

public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener listener)

Register a listener for the PropertyChange event. The class will fire a 
PropertyChange value whenever the value is updated. 

    listener - An object to be invoked when a PropertyChange event is fired. 

*java.beans.PropertyEditorSupport.firePropertyChange()*

public void firePropertyChange()

Report that we have been modified to any interested listeners. 


*java.beans.PropertyEditorSupport.getAsText()*

public |java.lang.String| getAsText()

Gets the property value as a string suitable for presentation to a human to 
edit. 


    Returns: The property value as a string suitable for presentation to a human to edit. 
             Returns "null" is the value can't be expressed as a string. If a 
             non-null value is returned, then the PropertyEditor should be 
             prepared to parse that string back in setAsText(). 
*java.beans.PropertyEditorSupport.getCustomEditor()*

public |java.awt.Component| getCustomEditor()

A PropertyEditor may chose to make available a full custom Component that edits 
its property value. It is the responsibility of the PropertyEditor to hook 
itself up to its editor Component itself and to report property value changes 
by firing a PropertyChange event. 

The higher-level code that calls getCustomEditor may either embed the Component 
in some larger property sheet, or it may put it in its own individual dialog, 
or ... 


    Returns: A java.awt.Component that will allow a human to directly edit the current 
             property value. May be null if this is not supported. 
*java.beans.PropertyEditorSupport.getJavaInitializationString()*

public |java.lang.String| getJavaInitializationString()

This method is intended for use when generating Java code to set the value of 
the property. It should return a fragment of Java code that can be used to 
initialize a variable with the current property value. 

Example results are "2", "new Color(127,127,34)", "Color.orange", etc. 


    Returns: A fragment of Java code representing an initializer for the current value. 
*java.beans.PropertyEditorSupport.getSource()*

public |java.lang.Object| getSource()

Returns the bean that is used as the source of events. If the source has not 
been explicitly set then this instance of PropertyEditorSupport is returned. 


    Returns: the source object or this instance 
*java.beans.PropertyEditorSupport.getTags()*

public |java.lang.String| getTags()

If the property value must be one of a set of known tagged values, then this 
method should return an array of the tag values. This can be used to represent 
(for example) enum values. If a PropertyEditor supports tags, then it should 
support the use of setAsText with a tag value as a way of setting the value. 


    Returns: The tag values for this property. May be null if this property cannot be 
             represented as a tagged value. 
*java.beans.PropertyEditorSupport.getValue()*

public |java.lang.Object| getValue()

Gets the value of the property. 


    Returns: The value of the property. 
*java.beans.PropertyEditorSupport.isPaintable()*

public boolean isPaintable()

Determines whether the class will honor the painValue method. 


    Returns: True if the class will honor the paintValue method. 
*java.beans.PropertyEditorSupport.paintValue(Graphics,Rectangle)*

public void paintValue(
  java.awt.Graphics gfx,
  java.awt.Rectangle box)

Paint a representation of the value into a given area of screen real estate. 
Note that the propertyEditor is responsible for doing its own clipping so that 
it fits into the given rectangle. 

If the PropertyEditor doesn't honor paint requests (see isPaintable) this 
method should be a silent noop. 

    gfx - Graphics object to paint into. 
    box - Rectangle within graphics object into which we should paint. 

*java.beans.PropertyEditorSupport.removePropertyChangeListener(PropertyChangeListener)*

public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener listener)

Remove a listener for the PropertyChange event. 

    listener - The PropertyChange listener to be removed. 

*java.beans.PropertyEditorSupport.setAsText(String)*

public void setAsText(java.lang.String text)
  throws |java.lang.IllegalArgumentException|
         
Sets the property value by parsing a given String. May raise 
java.lang.IllegalArgumentException if either the String is badly formatted or 
if this kind of property can't be expressed as text. 

    text - The string to be parsed. 

*java.beans.PropertyEditorSupport.setSource(Object)*

public void setSource(java.lang.Object source)

Sets the source bean. 

The source bean is used as the source of events for the property changes. This 
source should be used for information purposes only and should not be modified 
by the PropertyEditor. 

    source - source object to be used for events 

*java.beans.PropertyEditorSupport.setValue(Object)*

public void setValue(java.lang.Object value)

Set (or change) the object that is to be edited. 

    value - The new target object to be edited. Note that this object should not be 
       modified by the PropertyEditor, rather the PropertyEditor should create 
       a new object to hold any modified value. 

*java.beans.PropertyEditorSupport.supportsCustomEditor()*

public boolean supportsCustomEditor()

Determines whether the propertyEditor can provide a custom editor. 


    Returns: True if the propertyEditor can provide a custom editor. 


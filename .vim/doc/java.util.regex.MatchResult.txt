*java.util.regex.MatchResult* *MatchResult* The result of a match operation.

public interface interface MatchResult


|java.util.regex.MatchResult_Description|
|java.util.regex.MatchResult_Fields|
|java.util.regex.MatchResult_Constructors|
|java.util.regex.MatchResult_Methods|

================================================================================

*java.util.regex.MatchResult_Methods*
|java.util.regex.MatchResult.end()|Returns the offset after the last character 
|java.util.regex.MatchResult.end(int)|Returns the offset after the last charact
|java.util.regex.MatchResult.group()|Returns the input subsequence matched by t
|java.util.regex.MatchResult.group(int)|Returns the input subsequence captured 
|java.util.regex.MatchResult.groupCount()|Returns the number of capturing group
|java.util.regex.MatchResult.start()|Returns the start index of the match.
|java.util.regex.MatchResult.start(int)|Returns the start index of the subseque

*java.util.regex.MatchResult_Description*

The result of a match operation. 

This interface contains query methods used to determine the results of a match 
against a regular expression. The match boundaries, groups and group boundaries 
can be seen but not modified through a MatchResult. 


*java.util.regex.MatchResult.end()*

public int end()

Returns the offset after the last character matched. 


    Returns: @return The offset after the last character matched 
*java.util.regex.MatchResult.end(int)*

public int end(int group)

Returns the offset after the last character of the subsequence captured by the 
given group during this match. 

Capturing groups are indexed from left to right, starting at one. Group zero 
denotes the entire pattern, so the expression m.end(0) is equivalent to 
m.end(). 

    group - The index of a capturing group in this matcher's pattern 

    Returns: The offset after the last character captured by the group, or -1 if the match 
             was successful but the group itself did not match anything 
*java.util.regex.MatchResult.group()*

public |java.lang.String| group()

Returns the input subsequence matched by the previous match. 

For a matcher m with input sequence s, the expressions m.group() and 
s.substring(m.start(),m.end()) are equivalent. 

Note that some patterns, for example a*, match the empty string. This method 
will return the empty string when the pattern successfully matches the empty 
string in the input. 


    Returns: The (possibly empty) subsequence matched by the previous match, in string form 
*java.util.regex.MatchResult.group(int)*

public |java.lang.String| group(int group)

Returns the input subsequence captured by the given group during the previous 
match operation. 

For a matcher m, input sequence s, and group index g, the expressions 
m.group(g) and s.substring(m.start(g),m.end(g)) are equivalent. 

Capturing groups are indexed from left to right, starting at one. Group zero 
denotes the entire pattern, so the expression m.group(0) is equivalent to 
m.group(). 

If the match was successful but the group specified failed to match any part of 
the input sequence, then null is returned. Note that some groups, for example 
(a*), match the empty string. This method will return the empty string when 
such a group successfully matches the empty string in the input. 

    group - The index of a capturing group in this matcher's pattern 

    Returns: The (possibly empty) subsequence captured by the group during the previous 
             match, or null if the group failed to match part of the input 
*java.util.regex.MatchResult.groupCount()*

public int groupCount()

Returns the number of capturing groups in this match result's pattern. 

Group zero denotes the entire pattern by convention. It is not included in this 
count. 

Any non-negative integer smaller than or equal to the value returned by this 
method is guaranteed to be a valid group index for this matcher. 


    Returns: The number of capturing groups in this matcher's pattern 
*java.util.regex.MatchResult.start()*

public int start()

Returns the start index of the match. 


    Returns: The index of the first character matched 
*java.util.regex.MatchResult.start(int)*

public int start(int group)

Returns the start index of the subsequence captured by the given group during 
this match. 

Capturing groups are indexed from left to right, starting at one. Group zero 
denotes the entire pattern, so the expression m.start(0) is equivalent to 
m.start(). 

    group - The index of a capturing group in this matcher's pattern 

    Returns: The index of the first character captured by the group, or -1 if the match was 
             successful but the group itself did not match anything 


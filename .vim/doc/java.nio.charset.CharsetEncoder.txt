*java.nio.charset.CharsetEncoder* *CharsetEncoder* An engine that can transform a sequence of sixteen-bit Unicode characters into a sequence of
 bytes in a specific charset.

public abstract class CharsetEncoder
  extends    |java.lang.Object|

|java.nio.charset.CharsetEncoder_Description|
|java.nio.charset.CharsetEncoder_Fields|
|java.nio.charset.CharsetEncoder_Constructors|
|java.nio.charset.CharsetEncoder_Methods|

====================================================================================================================================================================================

*java.nio.charset.CharsetEncoder_Constructors*
|java.nio.charset.CharsetEncoder(Charset,float,float)|Initializes a new encoder.
|java.nio.charset.CharsetEncoder(Charset,float,float,byte[])|Initializes a new encoder.

*java.nio.charset.CharsetEncoder_Methods*
|java.nio.charset.CharsetEncoder.averageBytesPerChar()|Returns the average number of bytes that will be produced for each  character of input.
|java.nio.charset.CharsetEncoder.canEncode(char)|Tells whether or not this encoder can encode the given character.
|java.nio.charset.CharsetEncoder.canEncode(CharSequence)|Tells whether or not this encoder can encode the given character  sequence.
|java.nio.charset.CharsetEncoder.charset()|Returns the charset that created this encoder.
|java.nio.charset.CharsetEncoder.encode(CharBuffer)|Convenience method that encodes the remaining content of a single input  character buffer into a newly-allocated byte buffer.
|java.nio.charset.CharsetEncoder.encode(CharBuffer,ByteBuffer,boolean)|Encodes as many characters as possible from the given input buffer,  writing the results to the given output
|java.nio.charset.CharsetEncoder.encodeLoop(CharBuffer,ByteBuffer)|Encodes one or more characters into one or more bytes.
|java.nio.charset.CharsetEncoder.flush(ByteBuffer)|Flushes this encoder.
|java.nio.charset.CharsetEncoder.implFlush(ByteBuffer)|Flushes this encoder.
|java.nio.charset.CharsetEncoder.implOnMalformedInput(CodingErrorAction)|Reports a change to this encoder's malformed-input action.
|java.nio.charset.CharsetEncoder.implOnUnmappableCharacter(CodingErrorAction)|Reports a change to this encoder's unmappable-character action.
|java.nio.charset.CharsetEncoder.implReplaceWith(byte[])|Reports a change to this encoder's replacement value.
|java.nio.charset.CharsetEncoder.implReset()|Resets this encoder, clearing any charset-specific internal state.
|java.nio.charset.CharsetEncoder.isLegalReplacement(byte[])|Tells whether or not the given byte array is a legal replacement value  for this encoder.
|java.nio.charset.CharsetEncoder.malformedInputAction()|Returns this encoder's current action for malformed-input errors.
|java.nio.charset.CharsetEncoder.maxBytesPerChar()|Returns the maximum number of bytes that will be produced for each  character of input.
|java.nio.charset.CharsetEncoder.onMalformedInput(CodingErrorAction)|Changes this encoder's action for malformed-input errors.
|java.nio.charset.CharsetEncoder.onUnmappableCharacter(CodingErrorAction)|Changes this encoder's action for unmappable-character errors.
|java.nio.charset.CharsetEncoder.replacement()|Returns this encoder's replacement value.
|java.nio.charset.CharsetEncoder.replaceWith(byte[])|Changes this encoder's replacement value.
|java.nio.charset.CharsetEncoder.reset()|Resets this encoder, clearing any internal state.
|java.nio.charset.CharsetEncoder.unmappableCharacterAction()|Returns this encoder's current action for unmappable-character errors.

*java.nio.charset.CharsetEncoder_Description*

An engine that can transform a sequence of sixteen-bit Unicode characters into a sequence of bytes in a specific charset. 



The input character sequence is provided in a character buffer or a series of such buffers. The output byte sequence is written to a byte buffer or a series of such buffers. An 
encoder should always be used by making the following sequence of method invocations, hereinafter referred to as an encoding operation: 



Reset the encoder via the reset(|java.nio.charset.CharsetEncoder|) method, unless it has not been used before; 

Invoke the encode(|java.nio.charset.CharsetEncoder|) method zero or more times, as long as additional input may be available, passing false for the endOfInput argument and filling 
the input buffer and flushing the output buffer between invocations; 

Invoke the encode(|java.nio.charset.CharsetEncoder|) method one final time, passing true for the endOfInput argument; and then 

Invoke the flush(|java.nio.charset.CharsetEncoder|) method so that the encoder can flush any internal state to the output buffer. 



Each invocation of the encode(|java.nio.charset.CharsetEncoder|) method will encode as many characters as possible from the input buffer, writing the resulting bytes to the output 
buffer. The encode(|java.nio.charset.CharsetEncoder|) method returns when more input is required, when there is not enough room in the output buffer, or when an encoding error has 
occurred. In each case a (|java.nio.charset.CoderResult|) object is returned to describe the reason for termination. An invoker can examine this object and fill the input buffer, 
flush the output buffer, or attempt to recover from an encoding error, as appropriate, and try again. 



There are two general types of encoding errors. If the input character sequence is not a legal sixteen-bit Unicode sequence then the input is considered malformed. If the input 
character sequence is legal but cannot be mapped to a valid byte sequence in the given charset then an unmappable character has been encountered. 



How an encoding error is handled depends upon the action requested for that type of error, which is described by an instance of the (|java.nio.charset.CodingErrorAction|) class. 
The possible error actions are to </code>ignore<code>(|java.nio.charset.CodingErrorAction|) the erroneous input, </code>report<code>(|java.nio.charset.CodingErrorAction|) the 
error to the invoker via the returned (|java.nio.charset.CoderResult|) object, or </code>replace<code>(|java.nio.charset.CodingErrorAction|) the erroneous input with the current 
value of the replacement byte array. The replacement 

is initially set to the encoder's default replacement, which often (but not always) has the initial value{(byte)'?'}; 

its value may be changed via the replaceWith(|java.nio.charset.CharsetEncoder|) method. 

The default action for malformed-input and unmappable-character errors is to </code>report<code>(|java.nio.charset.CodingErrorAction|) them. The malformed-input error action may 
be changed via the onMalformedInput(|java.nio.charset.CharsetEncoder|) method; the unmappable-character action may be changed via the 
onUnmappableCharacter(|java.nio.charset.CharsetEncoder|) method. 

This class is designed to handle many of the details of the encoding process, including the implementation of error actions. An encoder for a specific charset, which is a concrete 
subclass of this class, need only implement the abstract encodeLoop(|java.nio.charset.CharsetEncoder|) method, which encapsulates the basic encoding loop. A subclass that 
maintains internal state should, additionally, override the flush(|java.nio.charset.CharsetEncoder|) and reset(|java.nio.charset.CharsetEncoder|) methods. 

Instances of this class are not safe for use by multiple concurrent threads. 



*java.nio.charset.CharsetEncoder(Charset,float,float)*

protected CharsetEncoder(
  java.nio.charset.Charset cs,
  float averageBytesPerChar,
  float maxBytesPerChar)

Initializes a new encoder. The new encoder will have the given bytes-per-char values and its replacement will be the byte array {(byte)'?'}. 

    averageBytesPerChar - A positive float value indicating the expected number of bytes that will be produced for each input character 
    maxBytesPerChar - A positive float value indicating the maximum number of bytes that will be produced for each input character 

*java.nio.charset.CharsetEncoder(Charset,float,float,byte[])*

protected CharsetEncoder(
  java.nio.charset.Charset cs,
  float averageBytesPerChar,
  float maxBytesPerChar,
  byte[] replacement)

Initializes a new encoder. The new encoder will have the given bytes-per-char and replacement values. 

    averageBytesPerChar - A positive float value indicating the expected number of bytes that will be produced for each input character 
    maxBytesPerChar - A positive float value indicating the maximum number of bytes that will be produced for each input character 
    replacement - The initial replacement; must not be null, must have non-zero length, must not be longer than maxBytesPerChar, and must be {@link #isLegalReplacement legal} 

*java.nio.charset.CharsetEncoder.averageBytesPerChar()*

public final float averageBytesPerChar()

Returns the average number of bytes that will be produced for each character of input. This heuristic value may be used to estimate the size of the output buffer required for a 
given input sequence. 



    Returns: The average number of bytes produced per character of input 

*java.nio.charset.CharsetEncoder.canEncode(char)*

public boolean canEncode(char c)

Tells whether or not this encoder can encode the given character. 

This method returns false if the given character is a surrogate character; such characters can be interpreted only when they are members of a pair consisting of a high surrogate 
followed by a low surrogate. The canEncode(CharSequence)(|java.nio.charset.CharsetEncoder|) method may be used to test whether or not a character sequence can be encoded. 

This method may modify this encoder's state; it should therefore not be invoked if an encoding operation is already in progress. 

The default implementation of this method is not very efficient; it should generally be overridden to improve performance. 



    Returns: true if, and only if, this encoder can encode the given character 

*java.nio.charset.CharsetEncoder.canEncode(CharSequence)*

public boolean canEncode(java.lang.CharSequence cs)

Tells whether or not this encoder can encode the given character sequence. 

If this method returns false for a particular character sequence then more information about why the sequence cannot be encoded may be obtained by performing a full encoding 
operation. 

This method may modify this encoder's state; it should therefore not be invoked if an encoding operation is already in progress. 

The default implementation of this method is not very efficient; it should generally be overridden to improve performance. 



    Returns: true if, and only if, this encoder can encode the given character without throwing any exceptions and without performing any replacements 

*java.nio.charset.CharsetEncoder.charset()*

public final |java.nio.charset.Charset| charset()

Returns the charset that created this encoder. 



    Returns: This encoder's charset 

*java.nio.charset.CharsetEncoder.encode(CharBuffer)*

public final |java.nio.ByteBuffer| encode(java.nio.CharBuffer in)
  throws |java.nio.charset.CharacterCodingException|
         
Convenience method that encodes the remaining content of a single input character buffer into a newly-allocated byte buffer. 

This method implements an entire encoding operation; that is, it resets this encoder, then it encodes the characters in the given character buffer, and finally it flushes this 
encoder. This method should therefore not be invoked if an encoding operation is already in progress. 


    in - The input character buffer 

    Returns: A newly-allocated byte buffer containing the result of the encoding operation. The buffer's position will be zero and its limit will follow the last byte written. 

*java.nio.charset.CharsetEncoder.encode(CharBuffer,ByteBuffer,boolean)*

public final |java.nio.charset.CoderResult| encode(
  java.nio.CharBuffer in,
  java.nio.ByteBuffer out,
  boolean endOfInput)

Encodes as many characters as possible from the given input buffer, writing the results to the given output buffer. 

The buffers are read from, and written to, starting at their current positions. At most in.remaining()(|java.nio.Buffer|) characters will be read and at most 
out.remaining()(|java.nio.Buffer|) bytes will be written. The buffers' positions will be advanced to reflect the characters read and the bytes written, but their marks and limits 
will not be modified. 

In addition to reading characters from the input buffer and writing bytes to the output buffer, this method returns a (|java.nio.charset.CoderResult|) object to describe its 
reason for termination: 



(|java.nio.charset.CoderResult|) indicates that as much of the input buffer as possible has been encoded. If there are no characters remaining and the invoker has no further input 
then the encoding operation is complete. Otherwise there is insufficient input for the operation to proceed, so this method should be invoked again with further input. 

(|java.nio.charset.CoderResult|) indicates that the output buffer is full. This method should be invoked again with a non-full output buffer. 

A </code>malformed-input<code>(|java.nio.charset.CoderResult|) result indicates that a malformed-input error has been detected. The malformed characters begin at the input 
buffer's (possibly incremented) position; the number of malformed characters may be determined by invoking the result object's length(|java.nio.charset.CoderResult|) method. This 
case applies only if the </code>malformed action<code>(|java.nio.charset.CharsetEncoder|) of this encoder is (|java.nio.charset.CodingErrorAction|) ; otherwise the malformed input 
will be ignored or replaced, as requested. 

An </code>unmappable-character<code>(|java.nio.charset.CoderResult|) result indicates that an unmappable-character error has been detected. The characters that encode the 
unmappable character begin at the input buffer's (possibly incremented) position; the number of such characters may be determined by invoking the result object's 
length(|java.nio.charset.CoderResult|) method. This case applies only if the </code>unmappable action<code>(|java.nio.charset.CharsetEncoder|) of this encoder is 
(|java.nio.charset.CodingErrorAction|) ; otherwise the unmappable character will be ignored or replaced, as requested. 



In any case, if this method is to be reinvoked in the same encoding operation then care should be taken to preserve any characters remaining in the input buffer so that they are 
available to the next invocation. 

The endOfInput parameter advises this method as to whether the invoker can provide further input beyond that contained in the given input buffer. If there is a possibility of 
providing additional input then the invoker should pass false for this parameter; if there is no possibility of providing further input then the invoker should pass true. It is 
not erroneous, and in fact it is quite common, to pass false in one invocation and later discover that no further input was actually available. It is critical, however, that the 
final invocation of this method in a sequence of invocations always pass true so that any remaining unencoded input will be treated as being malformed. 

This method works by invoking the encodeLoop(|java.nio.charset.CharsetEncoder|) method, interpreting its results, handling error conditions, and reinvoking it as necessary. 


    in - The input character buffer 
    out - The output byte buffer 
    endOfInput - true if, and only if, the invoker can provide no additional input characters beyond those in the given buffer 

    Returns: A coder-result object describing the reason for termination 

*java.nio.charset.CharsetEncoder.encodeLoop(CharBuffer,ByteBuffer)*

protected abstract |java.nio.charset.CoderResult| encodeLoop(
  java.nio.CharBuffer in,
  java.nio.ByteBuffer out)

Encodes one or more characters into one or more bytes. 

This method encapsulates the basic encoding loop, encoding as many characters as possible until it either runs out of input, runs out of room in the output buffer, or encounters 
an encoding error. This method is invoked by the encode(|java.nio.charset.CharsetEncoder|) method, which handles result interpretation and error recovery. 

The buffers are read from, and written to, starting at their current positions. At most in.remaining()(|java.nio.Buffer|) characters will be read, and at most 
out.remaining()(|java.nio.Buffer|) bytes will be written. The buffers' positions will be advanced to reflect the characters read and the bytes written, but their marks and limits 
will not be modified. 

This method returns a (|java.nio.charset.CoderResult|) object to describe its reason for termination, in the same manner as the encode(|java.nio.charset.CharsetEncoder|) method. 
Most implementations of this method will handle encoding errors by returning an appropriate result object for interpretation by the encode(|java.nio.charset.CharsetEncoder|) 
method. An optimized implementation may instead examine the relevant error action and implement that action itself. 

An implementation of this method may perform arbitrary lookahead by returning (|java.nio.charset.CoderResult|) until it receives sufficient input. 


    in - The input character buffer 
    out - The output byte buffer 

    Returns: A coder-result object describing the reason for termination 

*java.nio.charset.CharsetEncoder.flush(ByteBuffer)*

public final |java.nio.charset.CoderResult| flush(java.nio.ByteBuffer out)

Flushes this encoder. 

Some encoders maintain internal state and may need to write some final bytes to the output buffer once the overall input sequence has been read. 

Any additional output is written to the output buffer beginning at its current position. At most out.remaining()(|java.nio.Buffer|) bytes will be written. The buffer's position 
will be advanced appropriately, but its mark and limit will not be modified. 

If this method completes successfully then it returns (|java.nio.charset.CoderResult|) . If there is insufficient room in the output buffer then it returns 
(|java.nio.charset.CoderResult|) . If this happens then this method must be invoked again, with an output buffer that has more room, in order to complete the current encoding 
operation. 

This method invokes the implFlush(|java.nio.charset.CharsetEncoder|) method to perform the actual flushing operation. 


    out - The output byte buffer 

    Returns: A coder-result object, either {@link CoderResult#UNDERFLOW} or {@link CoderResult#OVERFLOW} 

*java.nio.charset.CharsetEncoder.implFlush(ByteBuffer)*

protected |java.nio.charset.CoderResult| implFlush(java.nio.ByteBuffer out)

Flushes this encoder. 

The default implementation of this method does nothing, and always returns (|java.nio.charset.CoderResult|) . This method should be overridden by encoders that may need to write 
final bytes to the output buffer once the entire input sequence has been read. 


    out - The output byte buffer 

    Returns: A coder-result object, either {@link CoderResult#UNDERFLOW} or {@link CoderResult#OVERFLOW} 

*java.nio.charset.CharsetEncoder.implOnMalformedInput(CodingErrorAction)*

protected void implOnMalformedInput(java.nio.charset.CodingErrorAction newAction)

Reports a change to this encoder's malformed-input action. 

The default implementation of this method does nothing. This method should be overridden by encoders that require notification of changes to the malformed-input action. 



*java.nio.charset.CharsetEncoder.implOnUnmappableCharacter(CodingErrorAction)*

protected void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction newAction)

Reports a change to this encoder's unmappable-character action. 

The default implementation of this method does nothing. This method should be overridden by encoders that require notification of changes to the unmappable-character action. 



*java.nio.charset.CharsetEncoder.implReplaceWith(byte[])*

protected void implReplaceWith(byte[] newReplacement)

Reports a change to this encoder's replacement value. 

The default implementation of this method does nothing. This method should be overridden by encoders that require notification of changes to the replacement. 


    newReplacement - 

*java.nio.charset.CharsetEncoder.implReset()*

protected void implReset()

Resets this encoder, clearing any charset-specific internal state. 

The default implementation of this method does nothing. This method should be overridden by encoders that maintain internal state. 



*java.nio.charset.CharsetEncoder.isLegalReplacement(byte[])*

public boolean isLegalReplacement(byte[] repl)

Tells whether or not the given byte array is a legal replacement value for this encoder. 

A replacement is legal if, and only if, it is a legal sequence of bytes in this encoder's charset; that is, it must be possible to decode the replacement into one or more 
sixteen-bit Unicode characters. 

The default implementation of this method is not very efficient; it should generally be overridden to improve performance. 


    repl - The byte array to be tested 

    Returns: true if, and only if, the given byte array is a legal replacement value for this encoder 

*java.nio.charset.CharsetEncoder.malformedInputAction()*

public |java.nio.charset.CodingErrorAction| malformedInputAction()

Returns this encoder's current action for malformed-input errors. 



    Returns: The current malformed-input action, which is never null 

*java.nio.charset.CharsetEncoder.maxBytesPerChar()*

public final float maxBytesPerChar()

Returns the maximum number of bytes that will be produced for each character of input. This value may be used to compute the worst-case size of the output buffer required for a 
given input sequence. 



    Returns: The maximum number of bytes that will be produced per character of input 

*java.nio.charset.CharsetEncoder.onMalformedInput(CodingErrorAction)*

public final |java.nio.charset.CharsetEncoder| onMalformedInput(java.nio.charset.CodingErrorAction newAction)

Changes this encoder's action for malformed-input errors. 

This method invokes the implOnMalformedInput(|java.nio.charset.CharsetEncoder|) method, passing the new action. 


    newAction - The new action; must not be null 

    Returns: 

*java.nio.charset.CharsetEncoder.onUnmappableCharacter(CodingErrorAction)*

public final |java.nio.charset.CharsetEncoder| onUnmappableCharacter(java.nio.charset.CodingErrorAction newAction)

Changes this encoder's action for unmappable-character errors. 

This method invokes the implOnUnmappableCharacter(|java.nio.charset.CharsetEncoder|) method, passing the new action. 


    newAction - The new action; must not be null 

    Returns: 

*java.nio.charset.CharsetEncoder.replacement()*

public final byte[] replacement()

Returns this encoder's replacement value. 



    Returns: This encoder's current replacement, which is never null and is never empty 

*java.nio.charset.CharsetEncoder.replaceWith(byte[])*

public final |java.nio.charset.CharsetEncoder| replaceWith(byte[] newReplacement)

Changes this encoder's replacement value. 

This method invokes the implReplaceWith(|java.nio.charset.CharsetEncoder|) method, passing the new replacement, after checking that the new replacement is acceptable. 


    newReplacement - The new replacement; must not be null, must have non-zero length, must not be longer than the value returned by the {@link #maxBytesPerChar maxBytesPerChar} method, and must be 
       {@link #isLegalReplacement legal} 

    Returns: 

*java.nio.charset.CharsetEncoder.reset()*

public final |java.nio.charset.CharsetEncoder| reset()

Resets this encoder, clearing any internal state. 

This method resets charset-independent state and also invokes the implReset(|java.nio.charset.CharsetEncoder|) method in order to perform any charset-specific reset actions. 



    Returns: 

*java.nio.charset.CharsetEncoder.unmappableCharacterAction()*

public |java.nio.charset.CodingErrorAction| unmappableCharacterAction()

Returns this encoder's current action for unmappable-character errors. 



    Returns: The current unmappable-character action, which is never null 



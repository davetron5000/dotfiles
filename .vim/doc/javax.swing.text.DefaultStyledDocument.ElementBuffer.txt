*javax.swing.text.DefaultStyledDocument.ElementBuffer* *DefaultStyledDocument.ElementBuffer* 

public class DefaultStyledDocument.ElementBuffer
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|javax.swing.text.DefaultStyledDocument.ElementBuffer_Description|
|javax.swing.text.DefaultStyledDocument.ElementBuffer_Fields|
|javax.swing.text.DefaultStyledDocument.ElementBuffer_Constructors|
|javax.swing.text.DefaultStyledDocument.ElementBuffer_Methods|

================================================================================

*javax.swing.text.DefaultStyledDocument.ElementBuffer_Constructors*
|javax.swing.text.DefaultStyledDocument.ElementBuffer(Element)|Creates a new El

*javax.swing.text.DefaultStyledDocument.ElementBuffer_Methods*
|javax.swing.text.DefaultStyledDocument.ElementBuffer.change(int,int,AbstractDocument.DefaultDocumentEvent)|
|javax.swing.text.DefaultStyledDocument.ElementBuffer.changeUpdate()|Updates th
|javax.swing.text.DefaultStyledDocument.ElementBuffer.clone(Element,Element)|Cr
|javax.swing.text.DefaultStyledDocument.ElementBuffer.getRootElement()|Gets the
|javax.swing.text.DefaultStyledDocument.ElementBuffer.insert(int,int,DefaultStyledDocument.ElementSpec[],AbstractDocument.DefaultDocumentEvent)|
|javax.swing.text.DefaultStyledDocument.ElementBuffer.insertUpdate(DefaultStyledDocument.ElementSpec[])|
|javax.swing.text.DefaultStyledDocument.ElementBuffer.remove(int,int,AbstractDocument.DefaultDocumentEvent)|
|javax.swing.text.DefaultStyledDocument.ElementBuffer.removeUpdate()|Updates th

*javax.swing.text.DefaultStyledDocument.ElementBuffer_Description*

Class to manage changes to the element hierarchy. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.text.DefaultStyledDocument.ElementBuffer(Element)*

public DefaultStyledDocument.ElementBuffer(javax.swing.text.Element root)

Creates a new ElementBuffer. 

    root - the root element 

*javax.swing.text.DefaultStyledDocument.ElementBuffer.change(int,int,AbstractDocument.DefaultDocumentEvent)*

public void change(
  int offset,
  int length,
  javax.swing.text.AbstractDocument.DefaultDocumentEvent de)

Changes content. 

    offset - the starting offset >= 0 
    length - the length >= 0 
    de - the event capturing this edit 

*javax.swing.text.DefaultStyledDocument.ElementBuffer.changeUpdate()*

protected void changeUpdate()

Updates the element structure in response to a change in the document. 


*javax.swing.text.DefaultStyledDocument.ElementBuffer.clone(Element,Element)*

public |javax.swing.text.Element| clone(
  javax.swing.text.Element parent,
  javax.swing.text.Element clonee)

Creates a copy of this element, with a different parent. 

    parent - the parent element 
    clonee - the element to be cloned 

    Returns: 
*javax.swing.text.DefaultStyledDocument.ElementBuffer.getRootElement()*

public |javax.swing.text.Element| getRootElement()

Gets the root element. 


    Returns: the root element 
*javax.swing.text.DefaultStyledDocument.ElementBuffer.insert(int,int,DefaultStyledDocument.ElementSpec[],AbstractDocument.DefaultDocumentEvent)*

public void insert(
  int offset,
  int length,
  javax.swing.text.DefaultStyledDocument.ElementSpec[] data,
  javax.swing.text.AbstractDocument.DefaultDocumentEvent de)

Inserts new content. 

    offset - the starting offset >= 0 
    length - the length >= 0 
    data - the data to insert 
    de - the event capturing this edit 

*javax.swing.text.DefaultStyledDocument.ElementBuffer.insertUpdate(DefaultStyledDocument.ElementSpec[])*

protected void insertUpdate(javax.swing.text.DefaultStyledDocument.ElementSpec[] data)

Inserts an update into the document. 

    data - the elements to insert 

*javax.swing.text.DefaultStyledDocument.ElementBuffer.remove(int,int,AbstractDocument.DefaultDocumentEvent)*

public void remove(
  int offset,
  int length,
  javax.swing.text.AbstractDocument.DefaultDocumentEvent de)

Removes content. 

    offset - the starting offset >= 0 
    length - the length >= 0 
    de - the event capturing this edit 

*javax.swing.text.DefaultStyledDocument.ElementBuffer.removeUpdate()*

protected void removeUpdate()

Updates the element structure in response to a removal from the associated 
sequence in the document. Any elements consumed by the span of the removal are 
removed. 




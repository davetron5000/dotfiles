*javax.servlet.http.HttpSession* *HttpSession* Provides a way to identify a user

public interface interface HttpSession


|javax.servlet.http.HttpSession_Description|
|javax.servlet.http.HttpSession_Fields|
|javax.servlet.http.HttpSession_Constructors|
|javax.servlet.http.HttpSession_Methods|

================================================================================

*javax.servlet.http.HttpSession_Methods*
|javax.servlet.http.HttpSession.getAttribute(String)|Returns the object bound w
|javax.servlet.http.HttpSession.getAttributeNames()|Returns an Enumeration of S
|javax.servlet.http.HttpSession.getCreationTime()|Returns the time when this se
|javax.servlet.http.HttpSession.getId()|Returns a string containing the unique 
|javax.servlet.http.HttpSession.getLastAccessedTime()|Returns the last time the
|javax.servlet.http.HttpSession.getMaxInactiveInterval()|Returns the maximum ti
|javax.servlet.http.HttpSession.getServletContext()|Returns the ServletContext 
|javax.servlet.http.HttpSession.getSessionContext()|
|javax.servlet.http.HttpSession.getValue(String)|
|javax.servlet.http.HttpSession.getValueNames()|
|javax.servlet.http.HttpSession.invalidate()|Invalidates this session then unbi
|javax.servlet.http.HttpSession.isNew()|Returns true if the client does not yet
|javax.servlet.http.HttpSession.putValue(String,Object)|
|javax.servlet.http.HttpSession.removeAttribute(String)|Removes the object boun
|javax.servlet.http.HttpSession.removeValue(String)|
|javax.servlet.http.HttpSession.setAttribute(String,Object)|Binds an object to 
|javax.servlet.http.HttpSession.setMaxInactiveInterval(int)|Specifies the time,

*javax.servlet.http.HttpSession_Description*

Provides a way to identify a user across more than one page request or visit to 
a Web site and to store information about that user. 

The servlet container uses this interface to create a session between an HTTP 
client and an HTTP server. The session persists for a specified time period, 
across more than one connection or page request from the user. A session 
usually corresponds to one user, who may visit a site many times. The server 
can maintain a session in many ways such as using cookies or rewriting URLs. 

This interface allows servlets to 

View and manipulate information about a session, such as the session 
identifier, creation time, and last accessed time Bind objects to sessions, 
allowing user information to persist across multiple user connections 

When an application stores an object in or removes an object from a session, 
the session checks whether the object implements 
(|javax.servlet.http.HttpSessionBindingListener|) . If it does, the servlet 
notifies the object that it has been bound to or unbound from the session. 
Notifications are sent after the binding methods complete. For session that are 
invalidated or expire, notifications are sent after the session has been 
invalidated or expired. 

When container migrates a session between VMs in a distributed container 
setting, all session attributes implementing the 
(|javax.servlet.http.HttpSessionActivationListener|) interface are notified. 

A servlet should be able to handle cases in which the client does not choose to 
join a session, such as when cookies are intentionally turned off. Until the 
client joins the session, isNew returns true. If the client chooses not to join 
the session, getSession will return a different session on each request, and 
isNew will always return true. 

Session information is scoped only to the current web application 
(ServletContext), so information stored in one context will not be directly 
visible in another. 



*javax.servlet.http.HttpSession.getAttribute(String)*

public |java.lang.Object| getAttribute(java.lang.String name)

Returns the object bound with the specified name in this session, or null if no 
object is bound under the name. 


    name - a string specifying the name of the object 

    Returns: the object with the specified name 

*javax.servlet.http.HttpSession.getAttributeNames()*

public |java.util.Enumeration| getAttributeNames()

Returns an Enumeration of String objects containing the names of all the 
objects bound to this session. 



    Returns: an Enumeration of String objects specifying the names of all the objects bound 
             to this session 

*javax.servlet.http.HttpSession.getCreationTime()*

public long getCreationTime()

Returns the time when this session was created, measured in milliseconds since 
midnight January 1, 1970 GMT. 



    Returns: a long specifying when this session was created, expressed in milliseconds 
             since 1/1/1970 GMT 

*javax.servlet.http.HttpSession.getId()*

public |java.lang.String| getId()

Returns a string containing the unique identifier assigned to this session. The 
identifier is assigned by the servlet container and is implementation 
dependent. 



    Returns: a string specifying the identifier assigned to this session 

*javax.servlet.http.HttpSession.getLastAccessedTime()*

public long getLastAccessedTime()

Returns the last time the client sent a request associated with this session, 
as the number of milliseconds since midnight January 1, 1970 GMT, and marked by 
the time the container received the request. 

Actions that your application takes, such as getting or setting a value 
associated with the session, do not affect the access time. 



    Returns: a long representing the last time the client sent a request associated with 
             this session, expressed in milliseconds since 1/1/1970 GMT 

*javax.servlet.http.HttpSession.getMaxInactiveInterval()*

public int getMaxInactiveInterval()

Returns the maximum time interval, in seconds, that the servlet container will 
keep this session open between client accesses. After this interval, the 
servlet container will invalidate the session. The maximum time interval can be 
set with the setMaxInactiveInterval method. A negative time indicates the 
session should never timeout. 



    Returns: an integer specifying the number of seconds this session remains open between 
             client requests 

*javax.servlet.http.HttpSession.getServletContext()*

public |javax.servlet.ServletContext| getServletContext()

Returns the ServletContext to which this session belongs. 



    Returns: The ServletContext object for the web application 

*javax.servlet.http.HttpSession.getSessionContext()*

public |javax.servlet.http.HttpSessionContext| getSessionContext()



    Deprecated: As of Version 2.1, this method is
			deprecated and has no replacement.
			It will be removed in a future
			version of the Java Servlet API.


*javax.servlet.http.HttpSession.getValue(String)*

public |java.lang.Object| getValue(java.lang.String name)



    Deprecated: As of Version 2.2, this method is
 			replaced by {@link #getAttribute}.

    name - a string specifying the name of the object 

    Returns: the object with the specified name 

*javax.servlet.http.HttpSession.getValueNames()*

public |java.lang.String|[] getValueNames()



    Deprecated: As of Version 2.2, this method is
 			replaced by {@link #getAttributeNames}


    Returns: an array of String objects specifying the names of all the objects bound to 
             this session 

*javax.servlet.http.HttpSession.invalidate()*

public void invalidate()

Invalidates this session then unbinds any objects bound to it. 



*javax.servlet.http.HttpSession.isNew()*

public boolean isNew()

Returns true if the client does not yet know about the session or if the client 
chooses not to join the session. For example, if the server used only 
cookie-based sessions, and the client had disabled the use of cookies, then a 
session would be new on each request. 



    Returns: true if the server has created a session, but the client has not yet joined 

*javax.servlet.http.HttpSession.putValue(String,Object)*

public void putValue(
  java.lang.String name,
  java.lang.Object value)



    Deprecated: As of Version 2.2, this method is
 			replaced by {@link #setAttribute}

    name - the name to which the object is bound; cannot be null 
    value - the object to be bound; cannot be null 

*javax.servlet.http.HttpSession.removeAttribute(String)*

public void removeAttribute(java.lang.String name)

Removes the object bound with the specified name from this session. If the 
session does not have an object bound with the specified name, this method does 
nothing. 

After this method executes, and if the object implements 
HttpSessionBindingListener, the container calls 
HttpSessionBindingListener.valueUnbound. The container then notifies any 
HttpSessionAttributeListeners in the web application. 


    name - the name of the object to remove from this session 

*javax.servlet.http.HttpSession.removeValue(String)*

public void removeValue(java.lang.String name)



    Deprecated: As of Version 2.2, this method is
 			replaced by {@link #removeAttribute}

    name - the name of the object to remove from this session 

*javax.servlet.http.HttpSession.setAttribute(String,Object)*

public void setAttribute(
  java.lang.String name,
  java.lang.Object value)

Binds an object to this session, using the name specified. If an object of the 
same name is already bound to the session, the object is replaced. 

After this method executes, and if the new object implements 
HttpSessionBindingListener, the container calls 
HttpSessionBindingListener.valueBound. The container then notifies any 
HttpSessionAttributeListeners in the web application. 

If an object was already bound to this session of this name that implements 
HttpSessionBindingListener, its HttpSessionBindingListener.valueUnbound method 
is called. 

If the value passed in is null, this has the same effect as calling 
removeAttribute(). 


    name - the name to which the object is bound; cannot be null 
    value - the object to be bound 

*javax.servlet.http.HttpSession.setMaxInactiveInterval(int)*

public void setMaxInactiveInterval(int interval)

Specifies the time, in seconds, between client requests before the servlet 
container will invalidate this session. A negative time indicates the session 
should never timeout. 


    interval - An integer specifying the number of seconds 



*java.security.Security* *Security* This class centralizes all security properties and common security
 methods.

public final class Security
  extends    |java.lang.Object|

|java.security.Security_Description|
|java.security.Security_Fields|
|java.security.Security_Constructors|
|java.security.Security_Methods|

====================================================================================================================================================================================

*java.security.Security_Methods*
|java.security.Security.addProvider(Provider)|Adds a provider to the next position available.
|java.security.Security.getAlgorithmProperty(String,String)|Gets a specified property for an algorithm.
|java.security.Security.getAlgorithms(String)|Returns a Set of Strings containing the names of all available  algorithms or types for the specified Java cryptographic service  (e.
|java.security.Security.getProperty(String)|Gets a security property value.
|java.security.Security.getProvider(String)|Returns the provider installed with the specified name, if  any.
|java.security.Security.getProviders()|Returns an array containing all the installed providers.
|java.security.Security.getProviders(Map<String,String>)|Returns an array containing all installed providers that satisfy the   specified* selection criteria, or null if no such p
|java.security.Security.getProviders(String)|Returns an array containing all installed providers that satisfy the  specified selection criterion, or null if no such providers have
|java.security.Security.insertProviderAt(Provider,int)|Adds a new provider, at a specified position.
|java.security.Security.removeProvider(String)|Removes the provider with the specified name.
|java.security.Security.setProperty(String,String)|Sets a security property value.

*java.security.Security_Description*

This class centralizes all security properties and common security methods. One of its primary uses is to manage providers. 



*java.security.Security.addProvider(Provider)*

public static int addProvider(java.security.Provider provider)

Adds a provider to the next position available. 

First, if there is a security manager, its checkSecurityAccess method is called with the string "insertProvider."+provider.getName() to see if it's ok to add a new provider. If 
the default implementation of checkSecurityAccess is used (i.e., that method is not overriden), then this will result in a call to the security manager's checkPermission method 
with a SecurityPermission("insertProvider."+provider.getName()) permission. 


    provider - the provider to be added. 

    Returns: the preference position in which the provider was added, or -1 if the provider was not added because it is already installed. 

*java.security.Security.getAlgorithmProperty(String,String)*

public static |java.lang.String| getAlgorithmProperty(
  java.lang.String algName,
  java.lang.String propName)

Gets a specified property for an algorithm. The algorithm name should be a standard name. See Appendix A in the Java Cryptography Architecture API Specification and Reference for 
information about standard algorithm names. One possible use is by specialized algorithm parsers, which may map classes to algorithms which they understand (much like Key parsers 
do). 

    Deprecated: This method used to return the value of a proprietary
 property in the master file of the "SUN" Cryptographic Service
 Provider in order to determine how to parse algorithm-specific
 parameters. Use the new provider-based and algorithm-independent
 <code>AlgorithmParameters</code> and <code>KeyFactory</code> engine
 classes (introduced in the Java 2 platform) instead.

    algName - the algorithm name. 
    propName - the name of the property to get. 

    Returns: the value of the specified property. 

*java.security.Security.getAlgorithms(String)*

public static |java.util.Set|<String> getAlgorithms(java.lang.String serviceName)

Returns a Set of Strings containing the names of all available algorithms or types for the specified Java cryptographic service (e.g., Signature, MessageDigest, Cipher, Mac, 
KeyStore). Returns an empty Set if there is no provider that supports the specified service or if serviceName is null. For a complete list of Java cryptographic services, please 
see the Java Cryptography Architecture API Specification and Reference. Note: the returned set is immutable. 


    serviceName - the name of the Java cryptographic service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore). Note: this parameter is case-insensitive. 

    Returns: a Set of Strings containing the names of all available algorithms or types for the specified Java cryptographic service or an empty set if no provider supports the specified 
             service. 

*java.security.Security.getProperty(String)*

public static |java.lang.String| getProperty(java.lang.String key)

Gets a security property value. 

First, if there is a security manager, its checkPermission method is called with a java.security.SecurityPermission("getProperty."+key) permission to see if it's ok to retrieve 
the specified security property value.. 


    key - the key of the property being retrieved. 

    Returns: the value of the security property corresponding to key. 

*java.security.Security.getProvider(String)*

public static |java.security.Provider| getProvider(java.lang.String name)

Returns the provider installed with the specified name, if any. Returns null if no provider with the specified name is installed or if name is null. 


    name - the name of the provider to get. 

    Returns: the provider of the specified name. 

*java.security.Security.getProviders()*

public static |java.security.Provider|[] getProviders()

Returns an array containing all the installed providers. The order of the providers in the array is their preference order. 



    Returns: an array of all the installed providers. 

*java.security.Security.getProviders(Map<String,String>)*

public static |java.security.Provider|[] getProviders(java.util.Map<java.lang.String, java.lang.String> filter)

Returns an array containing all installed providers that satisfy the specified* selection criteria, or null if no such providers have been installed. The returned providers are 
ordered according to their preference order. 

The selection criteria are represented by a map. Each map entry represents a selection criterion. A provider is selected iff it satisfies all selection criteria. The key for any 
entry in such a map must be in one of the following two formats: 

<crypto_service>.<algorithm_or_type> The cryptographic service name must not contain any dots. The value associated with the key must be an empty string. A provider satisfies this 
selection criterion iff the provider implements the specified algorithm or type for the specified cryptographic service. <crypto_service>.<algorithm_or_type> <attribute_name> The 
cryptographic service name must not contain any dots. There must be one or more space charaters between the <algorithm_or_type> and the <attribute_name>. The value associated with 
the key must be a non-empty string. A provider satisfies this selection criterion iff the provider implements the specified algorithm or type for the specified cryptographic 
service and its implementation meets the constraint expressed by the specified attribute name/value pair. 

See Appendix A in the Java Cryptogaphy Architecture API Specification and Reference for information about standard cryptographic service names, standard algorithm names and 
standard attribute names. 


    filter - the criteria for selecting providers. The filter is case-insensitive. 

    Returns: all the installed providers that satisfy the selection criteria, or null if no such providers have been installed. 

*java.security.Security.getProviders(String)*

public static |java.security.Provider|[] getProviders(java.lang.String filter)

Returns an array containing all installed providers that satisfy the specified selection criterion, or null if no such providers have been installed. The returned providers are 
ordered according to their preference order. 

A cryptographic service is always associated with a particular algorithm or type. For example, a digital signature service is always associated with a particular algorithm (e.g., 
DSA), and a CertificateFactory service is always associated with a particular certificate type (e.g., X.509). 

The selection criterion must be specified in one of the following two formats: 

<crypto_service>.<algorithm_or_type> The cryptographic service name must not contain any dots. A provider satisfies the specified selection criterion iff the provider implements 
the specified algorithm or type for the specified cryptographic service. For example, "CertificateFactory.X.509" would be satisfied by any provider that supplied a 
CertificateFactory implementation for X.509 certificates. <crypto_service>.<algorithm_or_type> <attribute_name>:attribute_value> The cryptographic service name must not contain 
any dots. There must be one or more space charaters between the the <algorithm_or_type> and the <attribute_name>. A provider satisfies this selection criterion iff the provider 
implements the specified algorithm or type for the specified cryptographic service and its implementation meets the constraint expressed by the specified attribute name/value 
pair. For example, "Signature.SHA1withDSA KeySize:1024" would be satisfied by any provider that implemented the SHA1withDSA signature algorithm with a keysize of 1024 (or larger). 



See Appendix A in the Java Cryptogaphy Architecture API Specification and Reference for information about standard cryptographic service names, standard algorithm names and 
standard attribute names. 


    filter - the criterion for selecting providers. The filter is case-insensitive. 

    Returns: all the installed providers that satisfy the selection criterion, or null if no such providers have been installed. 

*java.security.Security.insertProviderAt(Provider,int)*

public static synchronized int insertProviderAt(
  java.security.Provider provider,
  int position)

Adds a new provider, at a specified position. The position is the preference order in which providers are searched for requested algorithms. Note that it is not guaranteed that 
this preference will be respected. The position is 1-based, that is, 1 is most preferred, followed by 2, and so on. 

If the given provider is installed at the requested position, the provider that used to be at that position, and all providers with a position greater than position, are shifted 
up one position (towards the end of the list of installed providers). 

A provider cannot be added if it is already installed. 

First, if there is a security manager, its checkSecurityAccess method is called with the string "insertProvider."+provider.getName() to see if it's ok to add a new provider. If 
the default implementation of checkSecurityAccess is used (i.e., that method is not overriden), then this will result in a call to the security manager's checkPermission method 
with a SecurityPermission("insertProvider."+provider.getName()) permission. 


    provider - the provider to be added. 
    position - the preference position that the caller would like for this provider. 

    Returns: the actual preference position in which the provider was added, or -1 if the provider was not added because it is already installed. 

*java.security.Security.removeProvider(String)*

public static synchronized void removeProvider(java.lang.String name)

Removes the provider with the specified name. 

When the specified provider is removed, all providers located at a position greater than where the specified provider was are shifted down one position (towards the head of the 
list of installed providers). 

This method returns silently if the provider is not installed or if name is null. 

First, if there is a security manager, its checkSecurityAccess method is called with the string "removeProvider."+name to see if it's ok to remove the provider. If the default 
implementation of checkSecurityAccess is used (i.e., that method is not overriden), then this will result in a call to the security manager's checkPermission method with a 
SecurityPermission("removeProvider."+name) permission. 


    name - the name of the provider to remove. 

*java.security.Security.setProperty(String,String)*

public static void setProperty(
  java.lang.String key,
  java.lang.String datum)

Sets a security property value. 

First, if there is a security manager, its checkPermission method is called with a java.security.SecurityPermission("setProperty."+key) permission to see if it's ok to set the 
specified security property value. 


    key - the name of the property to be set. 
    datum - the value of the property to be set. 



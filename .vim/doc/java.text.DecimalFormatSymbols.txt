*java.text.DecimalFormatSymbols* *DecimalFormatSymbols* This class represents the set of symbols (such as the decimal separator,
 the grouping separator, and so on) needed by Decim

public final class DecimalFormatSymbols
  extends    |java.lang.Object|
  implements |java.lang.Cloneable|
             |java.io.Serializable|

|java.text.DecimalFormatSymbols_Description|
|java.text.DecimalFormatSymbols_Fields|
|java.text.DecimalFormatSymbols_Constructors|
|java.text.DecimalFormatSymbols_Methods|

====================================================================================================================================================================================

*java.text.DecimalFormatSymbols_Constructors*
|java.text.DecimalFormatSymbols()|Create a DecimalFormatSymbols object for the default locale.
|java.text.DecimalFormatSymbols(Locale)|Create a DecimalFormatSymbols object for the given locale.

*java.text.DecimalFormatSymbols_Methods*
|java.text.DecimalFormatSymbols.clone()|Standard override.
|java.text.DecimalFormatSymbols.equals(Object)|Override equals.
|java.text.DecimalFormatSymbols.getCurrency()|Gets the currency of these DecimalFormatSymbols.
|java.text.DecimalFormatSymbols.getCurrencySymbol()|Returns the currency symbol for the currency of these  DecimalFormatSymbols in their locale.
|java.text.DecimalFormatSymbols.getDecimalSeparator()|Gets the character used for decimal sign.
|java.text.DecimalFormatSymbols.getDigit()|Gets the character used for a digit in a pattern.
|java.text.DecimalFormatSymbols.getGroupingSeparator()|Gets the character used for thousands separator.
|java.text.DecimalFormatSymbols.getInfinity()|Gets the string used to represent infinity.
|java.text.DecimalFormatSymbols.getInternationalCurrencySymbol()|Returns the ISO 4217 currency code of the currency of these  DecimalFormatSymbols.
|java.text.DecimalFormatSymbols.getMinusSign()|Gets the character used to represent minus sign.
|java.text.DecimalFormatSymbols.getMonetaryDecimalSeparator()|Returns the monetary decimal separator.
|java.text.DecimalFormatSymbols.getNaN()|Gets the string used to represent "not a number".
|java.text.DecimalFormatSymbols.getPatternSeparator()|Gets the character used to separate positive and negative subpatterns  in a pattern.
|java.text.DecimalFormatSymbols.getPercent()|Gets the character used for percent sign.
|java.text.DecimalFormatSymbols.getPerMill()|Gets the character used for per mille sign.
|java.text.DecimalFormatSymbols.getZeroDigit()|Gets the character used for zero.
|java.text.DecimalFormatSymbols.hashCode()|Override hashCode.
|java.text.DecimalFormatSymbols.setCurrency(Currency)|Sets the currency of these DecimalFormatSymbols.
|java.text.DecimalFormatSymbols.setCurrencySymbol(String)|Sets the currency symbol for the currency of these  DecimalFormatSymbols in their locale.
|java.text.DecimalFormatSymbols.setDecimalSeparator(char)|Sets the character used for decimal sign.
|java.text.DecimalFormatSymbols.setDigit(char)|Sets the character used for a digit in a pattern.
|java.text.DecimalFormatSymbols.setGroupingSeparator(char)|Sets the character used for thousands separator.
|java.text.DecimalFormatSymbols.setInfinity(String)|Sets the string used to represent infinity.
|java.text.DecimalFormatSymbols.setInternationalCurrencySymbol(String)|Sets the ISO 4217 currency code of the currency of these  DecimalFormatSymbols.
|java.text.DecimalFormatSymbols.setMinusSign(char)|Sets the character used to represent minus sign.
|java.text.DecimalFormatSymbols.setMonetaryDecimalSeparator(char)|Sets the monetary decimal separator.
|java.text.DecimalFormatSymbols.setNaN(String)|Sets the string used to represent "not a number".
|java.text.DecimalFormatSymbols.setPatternSeparator(char)|Sets the character used to separate positive and negative subpatterns  in a pattern.
|java.text.DecimalFormatSymbols.setPercent(char)|Sets the character used for percent sign.
|java.text.DecimalFormatSymbols.setPerMill(char)|Sets the character used for per mille sign.
|java.text.DecimalFormatSymbols.setZeroDigit(char)|Sets the character used for zero.

*java.text.DecimalFormatSymbols_Description*

This class represents the set of symbols (such as the decimal separator, the grouping separator, and so on) needed by DecimalFormat to format numbers. DecimalFormat creates for 
itself an instance of DecimalFormatSymbols from its locale data. If you need to change any of these symbols, you can get the DecimalFormatSymbols object from your DecimalFormat 
and modify it. 



*java.text.DecimalFormatSymbols()*

public DecimalFormatSymbols()

Create a DecimalFormatSymbols object for the default locale. 


*java.text.DecimalFormatSymbols(Locale)*

public DecimalFormatSymbols(java.util.Locale locale)

Create a DecimalFormatSymbols object for the given locale. 


*java.text.DecimalFormatSymbols.clone()*

public |java.lang.Object| clone()

Standard override. 



*java.text.DecimalFormatSymbols.equals(Object)*

public boolean equals(java.lang.Object obj)

Override equals. 



*java.text.DecimalFormatSymbols.getCurrency()*

public |java.util.Currency| getCurrency()

Gets the currency of these DecimalFormatSymbols. May be null if the currency symbol attribute was previously set to a value that's not a valid ISO 4217 currency code. 



    Returns: the currency used, or null 

*java.text.DecimalFormatSymbols.getCurrencySymbol()*

public |java.lang.String| getCurrencySymbol()

Returns the currency symbol for the currency of these DecimalFormatSymbols in their locale. 



*java.text.DecimalFormatSymbols.getDecimalSeparator()*

public char getDecimalSeparator()

Gets the character used for decimal sign. Different for French, etc. 



*java.text.DecimalFormatSymbols.getDigit()*

public char getDigit()

Gets the character used for a digit in a pattern. 



*java.text.DecimalFormatSymbols.getGroupingSeparator()*

public char getGroupingSeparator()

Gets the character used for thousands separator. Different for French, etc. 



*java.text.DecimalFormatSymbols.getInfinity()*

public |java.lang.String| getInfinity()

Gets the string used to represent infinity. Almost always left unchanged. 



*java.text.DecimalFormatSymbols.getInternationalCurrencySymbol()*

public |java.lang.String| getInternationalCurrencySymbol()

Returns the ISO 4217 currency code of the currency of these DecimalFormatSymbols. 



*java.text.DecimalFormatSymbols.getMinusSign()*

public char getMinusSign()

Gets the character used to represent minus sign. If no explicit negative format is specified, one is formed by prefixing minusSign to the positive format. 



*java.text.DecimalFormatSymbols.getMonetaryDecimalSeparator()*

public char getMonetaryDecimalSeparator()

Returns the monetary decimal separator. 



*java.text.DecimalFormatSymbols.getNaN()*

public |java.lang.String| getNaN()

Gets the string used to represent "not a number". Almost always left unchanged. 



*java.text.DecimalFormatSymbols.getPatternSeparator()*

public char getPatternSeparator()

Gets the character used to separate positive and negative subpatterns in a pattern. 



*java.text.DecimalFormatSymbols.getPercent()*

public char getPercent()

Gets the character used for percent sign. Different for Arabic, etc. 



*java.text.DecimalFormatSymbols.getPerMill()*

public char getPerMill()

Gets the character used for per mille sign. Different for Arabic, etc. 



*java.text.DecimalFormatSymbols.getZeroDigit()*

public char getZeroDigit()

Gets the character used for zero. Different for Arabic, etc. 



*java.text.DecimalFormatSymbols.hashCode()*

public int hashCode()

Override hashCode. 



*java.text.DecimalFormatSymbols.setCurrency(Currency)*

public void setCurrency(java.util.Currency currency)

Sets the currency of these DecimalFormatSymbols. This also sets the currency symbol attribute to the currency's symbol in the DecimalFormatSymbols' locale, and the international 
currency symbol attribute to the currency's ISO 4217 currency code. 


    currency - the new currency to be used 

*java.text.DecimalFormatSymbols.setCurrencySymbol(String)*

public void setCurrencySymbol(java.lang.String currency)

Sets the currency symbol for the currency of these DecimalFormatSymbols in their locale. 



*java.text.DecimalFormatSymbols.setDecimalSeparator(char)*

public void setDecimalSeparator(char decimalSeparator)

Sets the character used for decimal sign. Different for French, etc. 



*java.text.DecimalFormatSymbols.setDigit(char)*

public void setDigit(char digit)

Sets the character used for a digit in a pattern. 



*java.text.DecimalFormatSymbols.setGroupingSeparator(char)*

public void setGroupingSeparator(char groupingSeparator)

Sets the character used for thousands separator. Different for French, etc. 



*java.text.DecimalFormatSymbols.setInfinity(String)*

public void setInfinity(java.lang.String infinity)

Sets the string used to represent infinity. Almost always left unchanged. 



*java.text.DecimalFormatSymbols.setInternationalCurrencySymbol(String)*

public void setInternationalCurrencySymbol(java.lang.String currencyCode)

Sets the ISO 4217 currency code of the currency of these DecimalFormatSymbols. If the currency code is valid (as defined by Currency.getInstance(|java.util.Currency|) ), this also 
sets the currency attribute to the corresponding Currency instance and the currency symbol attribute to the currency's symbol in the DecimalFormatSymbols' locale. If the currency 
code is not valid, then the currency attribute is set to null and the currency symbol attribute is not modified. 



*java.text.DecimalFormatSymbols.setMinusSign(char)*

public void setMinusSign(char minusSign)

Sets the character used to represent minus sign. If no explicit negative format is specified, one is formed by prefixing minusSign to the positive format. 



*java.text.DecimalFormatSymbols.setMonetaryDecimalSeparator(char)*

public void setMonetaryDecimalSeparator(char sep)

Sets the monetary decimal separator. 



*java.text.DecimalFormatSymbols.setNaN(String)*

public void setNaN(java.lang.String NaN)

Sets the string used to represent "not a number". Almost always left unchanged. 



*java.text.DecimalFormatSymbols.setPatternSeparator(char)*

public void setPatternSeparator(char patternSeparator)

Sets the character used to separate positive and negative subpatterns in a pattern. 



*java.text.DecimalFormatSymbols.setPercent(char)*

public void setPercent(char percent)

Sets the character used for percent sign. Different for Arabic, etc. 



*java.text.DecimalFormatSymbols.setPerMill(char)*

public void setPerMill(char perMill)

Sets the character used for per mille sign. Different for Arabic, etc. 



*java.text.DecimalFormatSymbols.setZeroDigit(char)*

public void setZeroDigit(char zeroDigit)

Sets the character used for zero. Different for Arabic, etc. 





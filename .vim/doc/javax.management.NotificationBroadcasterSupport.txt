*javax.management.NotificationBroadcasterSupport* *NotificationBroadcasterSupport* 

public class NotificationBroadcasterSupport
  extends    |java.lang.Object|
  implements |javax.management.NotificationEmitter|

|javax.management.NotificationBroadcasterSupport_Description|
|javax.management.NotificationBroadcasterSupport_Fields|
|javax.management.NotificationBroadcasterSupport_Constructors|
|javax.management.NotificationBroadcasterSupport_Methods|

================================================================================

*javax.management.NotificationBroadcasterSupport_Constructors*
|javax.management.NotificationBroadcasterSupport()|

*javax.management.NotificationBroadcasterSupport_Methods*
|javax.management.NotificationBroadcasterSupport.addNotificationListener(NotificationListener,NotificationFilter,Object)|
|javax.management.NotificationBroadcasterSupport.getNotificationInfo()|
|javax.management.NotificationBroadcasterSupport.handleNotification(NotificationListener,Notification,Object)|
|javax.management.NotificationBroadcasterSupport.removeNotificationListener(NotificationListener)|
|javax.management.NotificationBroadcasterSupport.removeNotificationListener(NotificationListener,NotificationFilter,Object)|
|javax.management.NotificationBroadcasterSupport.sendNotification(Notification)|

*javax.management.NotificationBroadcasterSupport_Description*

Provides an implementation of 
NotificationEmitter(|javax.management.NotificationEmitter|) interface. This can 
be used as the super class of an MBean that sends notifications. 

It is not specified whether the notification dispatch model is synchronous or 
asynchronous. That is, when a thread calls 
sendNotification(|javax.management.NotificationBroadcasterSupport|) , the 
NotificationListener.handleNotification(|javax.management.NotificationListener|)
method of each listener may be called within that thread (a synchronous model) 
or within some other thread (an asynchronous model). 

Applications should not depend on notification dispatch being synchronous or 
being asynchronous. Thus: 



Applications should not assume a synchronous model. When the 
sendNotification(|javax.management.NotificationBroadcasterSupport|) method 
returns, it is not guaranteed that every listener's 
handleNotification(|javax.management.NotificationListener|) method has been 
called. It is not guaranteed either that a listener will see notifications in 
the same order as they were generated. Listeners that depend on order should 
use the sequence number of notifications to determine their order (see 
(|javax.management.Notification|) ). 

Applications should not assume an asynchronous model. If the actions performed 
by a listener are potentially slow, the listener should arrange for them to be 
performed in another thread, to avoid holding up other listeners and the caller 
of sendNotification(|javax.management.NotificationBroadcasterSupport|) . 




*javax.management.NotificationBroadcasterSupport()*

public NotificationBroadcasterSupport()




*javax.management.NotificationBroadcasterSupport.addNotificationListener(NotificationListener,NotificationFilter,Object)*

public void addNotificationListener(
  javax.management.NotificationListener listener,
  javax.management.NotificationFilter filter,
  java.lang.Object handback)

Adds a listener. 

    listener - The listener to receive notifications. 
    filter - The filter object. If filter is null, no filtering will be performed before 
       handling notifications. 
    handback - An opaque object to be sent back to the listener when a notification is 
       emitted. This object cannot be used by the Notification broadcaster 
       object. It should be resent unchanged with the notification to the 
       listener. 

*javax.management.NotificationBroadcasterSupport.getNotificationInfo()*

public |javax.management.MBeanNotificationInfo| getNotificationInfo()




*javax.management.NotificationBroadcasterSupport.handleNotification(NotificationListener,Notification,Object)*

protected void handleNotification(
  javax.management.NotificationListener listener,
  javax.management.Notification notif,
  java.lang.Object handback)

This method is called by 
sendNotification(|javax.management.NotificationBroadcasterSupport|) for each 
listener in order to send the notification to that listener. It can be 
overridden in subclasses to change the behavior of notification delivery, for 
instance to deliver the notification in a separate thread. 

It is not guaranteed that this method is called by the same thread as the one 
that called sendNotification(|javax.management.NotificationBroadcasterSupport|) 
. 

The default implementation of this method is equivalent to 

listener.handleNotification(notif, handback); 

    listener - the listener to which the notification is being delivered. 
    notif - the notification being delivered to the listener. 
    handback - the handback object that was supplied when the listener was added. 

*javax.management.NotificationBroadcasterSupport.removeNotificationListener(NotificationListener)*

public void removeNotificationListener(javax.management.NotificationListener listener)
  throws |javax.management.ListenerNotFoundException|
         



*javax.management.NotificationBroadcasterSupport.removeNotificationListener(NotificationListener,NotificationFilter,Object)*

public void removeNotificationListener(
  javax.management.NotificationListener listener,
  javax.management.NotificationFilter filter,
  java.lang.Object handback)
  throws |javax.management.ListenerNotFoundException|
         



*javax.management.NotificationBroadcasterSupport.sendNotification(Notification)*

public void sendNotification(javax.management.Notification notification)

Sends a notification. 

    notification - The notification to send. 



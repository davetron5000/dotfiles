*org.xml.sax.ext.LexicalHandler* *LexicalHandler* SAX2 extension handler for lex

public interface interface LexicalHandler


|org.xml.sax.ext.LexicalHandler_Description|
|org.xml.sax.ext.LexicalHandler_Fields|
|org.xml.sax.ext.LexicalHandler_Constructors|
|org.xml.sax.ext.LexicalHandler_Methods|

================================================================================

*org.xml.sax.ext.LexicalHandler_Methods*
|org.xml.sax.ext.LexicalHandler.comment(char[],int,int)|Report an XML comment a
|org.xml.sax.ext.LexicalHandler.endCDATA()|Report the end of a CDATA section.
|org.xml.sax.ext.LexicalHandler.endDTD()|Report the end of DTD declarations.
|org.xml.sax.ext.LexicalHandler.endEntity(String)|Report the end of an entity.
|org.xml.sax.ext.LexicalHandler.startCDATA()|Report the start of a CDATA sectio
|org.xml.sax.ext.LexicalHandler.startDTD(String,String,String)|Report the start
|org.xml.sax.ext.LexicalHandler.startEntity(String)|Report the beginning of som

*org.xml.sax.ext.LexicalHandler_Description*

SAX2 extension handler for lexical events. 

This module, both source code and documentation, is in the Public Domain, and 
comes with NO WARRANTY. See http://www.saxproject.org for further information. 

This is an optional extension handler for SAX2 to provide lexical information 
about an XML document, such as comments and CDATA section boundaries. XML 
readers are not required to recognize this handler, and it is not part of 
core-only SAX2 distributions. 

The events in the lexical handler apply to the entire document, not just to the 
document element, and all lexical handler events must appear between the 
content handler's startDocument and endDocument events. 

To set the LexicalHandler for an XML reader, use the 
setProperty(|org.xml.sax.XMLReader|) method with the property name 
http://xml.org/sax/properties/lexical-handler and an object implementing this 
interface (or null) as the value. If the reader does not report lexical events, 
it will throw a 
SAXNotRecognizedException(|org.xml.sax.SAXNotRecognizedException|) when you 
attempt to register the handler. 


*org.xml.sax.ext.LexicalHandler.comment(char[],int,int)*

public void comment(
  char[] ch,
  int start,
  int length)
  throws |org.xml.sax.SAXException|
         
Report an XML comment anywhere in the document. 

This callback will be used for comments inside or outside the document element, 
including comments in the external DTD subset (if read). Comments in the DTD 
must be properly nested inside start/endDTD and start/endEntity events (if 
used). 

    ch - An array holding the characters in the comment. 
    start - The starting position in the array. 
    length - The number of characters to use from the array. 

*org.xml.sax.ext.LexicalHandler.endCDATA()*

public void endCDATA()
  throws |org.xml.sax.SAXException|
         
Report the end of a CDATA section. 


*org.xml.sax.ext.LexicalHandler.endDTD()*

public void endDTD()
  throws |org.xml.sax.SAXException|
         
Report the end of DTD declarations. 

This method is intended to report the end of the DOCTYPE declaration; if the 
document has no DOCTYPE declaration, this method will not be invoked. 


*org.xml.sax.ext.LexicalHandler.endEntity(String)*

public void endEntity(java.lang.String name)
  throws |org.xml.sax.SAXException|
         
Report the end of an entity. 

    name - The name of the entity that is ending. 

*org.xml.sax.ext.LexicalHandler.startCDATA()*

public void startCDATA()
  throws |org.xml.sax.SAXException|
         
Report the start of a CDATA section. 

The contents of the CDATA section will be reported through the regular 
characters(|org.xml.sax.ContentHandler|) event; this event is intended only to 
report the boundary. 


*org.xml.sax.ext.LexicalHandler.startDTD(String,String,String)*

public void startDTD(
  java.lang.String name,
  java.lang.String publicId,
  java.lang.String systemId)
  throws |org.xml.sax.SAXException|
         
Report the start of DTD declarations, if any. 

This method is intended to report the beginning of the DOCTYPE declaration; if 
the document has no DOCTYPE declaration, this method will not be invoked. 

All declarations reported through DTDHandler(|org.xml.sax.DTDHandler|) or 
DeclHandler(|org.xml.sax.ext.DeclHandler|) events must appear between the 
startDTD and endDTD(|org.xml.sax.ext.LexicalHandler|) events. Declarations are 
assumed to belong to the internal DTD subset unless they appear between 
startEntity(|org.xml.sax.ext.LexicalHandler|) and 
endEntity(|org.xml.sax.ext.LexicalHandler|) events. Comments and processing 
instructions from the DTD should also be reported between the startDTD and 
endDTD events, in their original order of (logical) occurrence; they are not 
required to appear in their correct locations relative to DTDHandler or 
DeclHandler events, however. 

Note that the start/endDTD events will appear within the start/endDocument 
events from ContentHandler and before the first 
startElement(|org.xml.sax.ContentHandler|) event. 

    name - The document type name. 
    publicId - The declared public identifier for the external DTD subset, or null if none was 
       declared. 
    systemId - The declared system identifier for the external DTD subset, or null if none was 
       declared. (Note that this is not resolved against the document base 
       URI.) 

*org.xml.sax.ext.LexicalHandler.startEntity(String)*

public void startEntity(java.lang.String name)
  throws |org.xml.sax.SAXException|
         
Report the beginning of some internal and external XML entities. 

The reporting of parameter entities (including the external DTD subset) is 
optional, and SAX2 drivers that report LexicalHandler events may not implement 
it; you can use the 
http://xml.org/sax/features/lexical-handler/parameter-entities feature to query 
or control the reporting of parameter entities. 

General entities are reported with their regular names, parameter entities have 
'%' prepended to their names, and the external DTD subset has the pseudo-entity 
name "[dtd]". 

When a SAX2 driver is providing these events, all other events must be properly 
nested within start/end entity events. There is no additional requirement that 
events from DeclHandler(|org.xml.sax.ext.DeclHandler|) or 
DTDHandler(|org.xml.sax.DTDHandler|) be properly ordered. 

Note that skipped entities will be reported through the 
skippedEntity(|org.xml.sax.ContentHandler|) event, which is part of the 
ContentHandler interface. 

Because of the streaming event model that SAX uses, some entity boundaries 
cannot be reported under any circumstances: 

general entities within attribute values parameter entities within declarations 

These will be silently expanded, with no indication of where the original 
entity boundaries were. 

Note also that the boundaries of character references (which are not really 
entities anyway) are not reported. 

All start/endEntity events must be properly nested. 

    name - The name of the entity. If it is a parameter entity, the name will begin with 
       '%', and if it is the external DTD subset, it will be "[dtd]". 



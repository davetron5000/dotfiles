*javax.swing.JSlider* *JSlider* A component that lets the user graphically selec

public class JSlider
  extends    |javax.swing.JComponent|
  implements |javax.swing.SwingConstants|
             |javax.accessibility.Accessible|

|javax.swing.JSlider_Description|
|javax.swing.JSlider_Fields|
|javax.swing.JSlider_Constructors|
|javax.swing.JSlider_Methods|

================================================================================

*javax.swing.JSlider_Fields*
|javax.swing.event.ChangeEvent_javax.swing.JSlider.changeEvent|
|javax.swing.event.ChangeListener_javax.swing.JSlider.changeListener|
|int_javax.swing.JSlider.majorTickSpacing|
|int_javax.swing.JSlider.minorTickSpacing|
|int_javax.swing.JSlider.orientation|
|javax.swing.BoundedRangeModel_javax.swing.JSlider.sliderModel|
|boolean_javax.swing.JSlider.snapToTicks|

*javax.swing.JSlider_Constructors*
|javax.swing.JSlider()|Creates a horizontal slider with the range 0 to 100 and 
|javax.swing.JSlider(BoundedRangeModel)|Creates a horizontal slider using the s
|javax.swing.JSlider(int)|Creates a slider using the specified orientation with
|javax.swing.JSlider(int,int)|Creates a horizontal slider using the specified m
|javax.swing.JSlider(int,int,int)|Creates a horizontal slider using the specifi
|javax.swing.JSlider(int,int,int,int)|Creates a slider with the specified orien

*javax.swing.JSlider_Methods*
|javax.swing.JSlider.addChangeListener(ChangeListener)|Adds a ChangeListener to
|javax.swing.JSlider.createChangeListener()|Subclasses that want to handle mode
|javax.swing.JSlider.createStandardLabels(int)|Creates a hashtable that will dr
|javax.swing.JSlider.createStandardLabels(int,int)|Creates a hashtable that wil
|javax.swing.JSlider.fireStateChanged()|Send a ChangeEvent, whose source is thi
|javax.swing.JSlider.getAccessibleContext()|Gets the AccessibleContext associat
|javax.swing.JSlider.getChangeListeners()|Returns an array of all the ChangeLis
|javax.swing.JSlider.getExtent()|Returns the "extent" -- the range of values "c
|javax.swing.JSlider.getInverted()|Returns true if the value-range shown for th
|javax.swing.JSlider.getLabelTable()|Returns the dictionary of what labels to d
|javax.swing.JSlider.getMajorTickSpacing()|This method returns the major tick s
|javax.swing.JSlider.getMaximum()|Returns the maximum value supported by the sl
|javax.swing.JSlider.getMinimum()|Returns the minimum value supported by the sl
|javax.swing.JSlider.getMinorTickSpacing()|This method returns the minor tick s
|javax.swing.JSlider.getModel()|Returns data model that handles the sliders thr
|javax.swing.JSlider.getOrientation()|Return this slider's vertical or horizont
|javax.swing.JSlider.getPaintLabels()|Tells if labels are to be painted.
|javax.swing.JSlider.getPaintTicks()|Tells if tick marks are to be painted.
|javax.swing.JSlider.getPaintTrack()|Tells if the track (area the slider slides
|javax.swing.JSlider.getSnapToTicks()|Returns true if the knob (and the data va
|javax.swing.JSlider.getUI()|Gets the UI object which implements the Lfor this 
|javax.swing.JSlider.getUIClassID()|Returns the name of the Lclass that renders
|javax.swing.JSlider.getValue()|Returns the sliders value.
|javax.swing.JSlider.getValueIsAdjusting()|True if the slider knob is being dra
|javax.swing.JSlider.paramString()|Returns a string representation of this JSli
|javax.swing.JSlider.removeChangeListener(ChangeListener)|Removes a ChangeListe
|javax.swing.JSlider.setExtent(int)|Sets the size of the range "covered" by the
|javax.swing.JSlider.setInverted(boolean)|Specify true to reverse the value-ran
|javax.swing.JSlider.setLabelTable(Dictionary)|Used to specify what label will 
|javax.swing.JSlider.setMajorTickSpacing(int)|This method sets the major tick s
|javax.swing.JSlider.setMaximum(int)|Sets the models maximum property.
|javax.swing.JSlider.setMinimum(int)|Sets the models minimum property.
|javax.swing.JSlider.setMinorTickSpacing(int)|This method sets the minor tick s
|javax.swing.JSlider.setModel(BoundedRangeModel)|Sets the model that handles th
|javax.swing.JSlider.setOrientation(int)|Set the scrollbars orientation to eith
|javax.swing.JSlider.setPaintLabels(boolean)|Determines whether labels are pain
|javax.swing.JSlider.setPaintTicks(boolean)|Determines whether tick marks are p
|javax.swing.JSlider.setPaintTrack(boolean)|Determines whether the track is pai
|javax.swing.JSlider.setSnapToTicks(boolean)|Specifying true makes the knob (an
|javax.swing.JSlider.setUI(SliderUI)|Sets the UI object which implements the Lf
|javax.swing.JSlider.setValue(int)|Sets the sliders current value.
|javax.swing.JSlider.setValueIsAdjusting(boolean)|Sets the models valueIsAdjust
|javax.swing.JSlider.updateLabelUIs()|Resets the UI property to a value from th
|javax.swing.JSlider.updateUI()|Resets the UI property to a value from the curr

*javax.swing.JSlider_Description*

A component that lets the user graphically select a value by sliding a knob 
within a bounded interval. The slider can show both major tick marks and minor 
tick marks between them. The number of values between the tick marks is 
controlled with setMajorTickSpacing and setMinorTickSpacing. 

For further information and examples see How to Use Sliders, a section in The 
Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.event.ChangeEvent_javax.swing.JSlider.changeEvent*

A component that lets the user graphically select a value by sliding a knob 
within a bounded interval. The slider can show both major tick marks and minor 
tick marks between them. The number of values between the tick marks is 
controlled with setMajorTickSpacing and setMinorTickSpacing. 

For further information and examples see How to Use Sliders, a section in The 
Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.event.ChangeListener_javax.swing.JSlider.changeListener*

A component that lets the user graphically select a value by sliding a knob 
within a bounded interval. The slider can show both major tick marks and minor 
tick marks between them. The number of values between the tick marks is 
controlled with setMajorTickSpacing and setMinorTickSpacing. 

For further information and examples see How to Use Sliders, a section in The 
Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JSlider.majorTickSpacing*

A component that lets the user graphically select a value by sliding a knob 
within a bounded interval. The slider can show both major tick marks and minor 
tick marks between them. The number of values between the tick marks is 
controlled with setMajorTickSpacing and setMinorTickSpacing. 

For further information and examples see How to Use Sliders, a section in The 
Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JSlider.minorTickSpacing*

A component that lets the user graphically select a value by sliding a knob 
within a bounded interval. The slider can show both major tick marks and minor 
tick marks between them. The number of values between the tick marks is 
controlled with setMajorTickSpacing and setMinorTickSpacing. 

For further information and examples see How to Use Sliders, a section in The 
Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JSlider.orientation*

A component that lets the user graphically select a value by sliding a knob 
within a bounded interval. The slider can show both major tick marks and minor 
tick marks between them. The number of values between the tick marks is 
controlled with setMajorTickSpacing and setMinorTickSpacing. 

For further information and examples see How to Use Sliders, a section in The 
Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.BoundedRangeModel_javax.swing.JSlider.sliderModel*

A component that lets the user graphically select a value by sliding a knob 
within a bounded interval. The slider can show both major tick marks and minor 
tick marks between them. The number of values between the tick marks is 
controlled with setMajorTickSpacing and setMinorTickSpacing. 

For further information and examples see How to Use Sliders, a section in The 
Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.JSlider.snapToTicks*

A component that lets the user graphically select a value by sliding a knob 
within a bounded interval. The slider can show both major tick marks and minor 
tick marks between them. The number of values between the tick marks is 
controlled with setMajorTickSpacing and setMinorTickSpacing. 

For further information and examples see How to Use Sliders, a section in The 
Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.JSlider()*

public JSlider()

Creates a horizontal slider with the range 0 to 100 and an initial value of 50. 


*javax.swing.JSlider(BoundedRangeModel)*

public JSlider(javax.swing.BoundedRangeModel brm)

Creates a horizontal slider using the specified BoundedRangeModel. 


*javax.swing.JSlider(int)*

public JSlider(int orientation)

Creates a slider using the specified orientation with the range 0 to 100 and an 
initial value of 50. 


*javax.swing.JSlider(int,int)*

public JSlider(
  int min,
  int max)

Creates a horizontal slider using the specified min and max with an initial 
value equal to the average of the min plus max. 


*javax.swing.JSlider(int,int,int)*

public JSlider(
  int min,
  int max,
  int value)

Creates a horizontal slider using the specified min, max and value. 


*javax.swing.JSlider(int,int,int,int)*

public JSlider(
  int orientation,
  int min,
  int max,
  int value)

Creates a slider with the specified orientation and the specified minimum, 
maximum, and initial values. 


*javax.swing.JSlider.addChangeListener(ChangeListener)*

public void addChangeListener(javax.swing.event.ChangeListener l)

Adds a ChangeListener to the slider. 

    l - the ChangeListener to add 

*javax.swing.JSlider.createChangeListener()*

protected |javax.swing.event.ChangeListener| createChangeListener()

Subclasses that want to handle model ChangeEvents differently can override this 
method to return their own ChangeListener implementation. The default 
ChangeListener just forwards ChangeEvents to the ChangeListeners added directly 
to the slider. 


*javax.swing.JSlider.createStandardLabels(int)*

public |java.util.Hashtable| createStandardLabels(int increment)

Creates a hashtable that will draw text labels starting at the slider minimum 
using the increment specified. If you call createStandardLabels( 10 ) and the 
slider minimum is zero, then it will make labels for the values 0, 10, 20, 30, 
and so on. 


*javax.swing.JSlider.createStandardLabels(int,int)*

public |java.util.Hashtable| createStandardLabels(
  int increment,
  int start)

Creates a hashtable that will draw text labels starting at the start point 
specified using the increment specified. If you call createStandardLabels( 10, 
2 ), then it will make labels for the values 2, 12, 22, 32, and so on. 


*javax.swing.JSlider.fireStateChanged()*

protected void fireStateChanged()

Send a ChangeEvent, whose source is this Slider, to each listener. This method 
method is called each time a ChangeEvent is received from the model. 


*javax.swing.JSlider.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JSlider. For sliders, the 
AccessibleContext takes the form of an AccessibleJSlider. A new 
AccessibleJSlider instance is created if necessary. 


    Returns: an AccessibleJSlider that serves as the AccessibleContext of this JSlider 
*javax.swing.JSlider.getChangeListeners()*

public |javax.swing.event.ChangeListener| getChangeListeners()

Returns an array of all the ChangeListeners added to this JSlider with 
addChangeListener(). 


    Returns: all of the ChangeListeners added or an empty array if no listeners have been 
             added 
*javax.swing.JSlider.getExtent()*

public int getExtent()

Returns the "extent" -- the range of values "covered" by the knob. 


    Returns: an int representing the extent 
*javax.swing.JSlider.getInverted()*

public boolean getInverted()

Returns true if the value-range shown for the slider is reversed, 


    Returns: true if the slider values are reversed from their normal order 
*javax.swing.JSlider.getLabelTable()*

public |java.util.Dictionary| getLabelTable()

Returns the dictionary of what labels to draw at which values. 


    Returns: the Dictionary containing labels and where to draw them 
*javax.swing.JSlider.getMajorTickSpacing()*

public int getMajorTickSpacing()

This method returns the major tick spacing. The number that is returned 
represents the distance, measured in values, between each major tick mark. If 
you have a slider with a range from 0 to 50 and the major tick spacing is set 
to 10, you will get major ticks next to the following values: 0, 10, 20, 30, 
40, 50. 


    Returns: the number of values between major ticks 
*javax.swing.JSlider.getMaximum()*

public int getMaximum()

Returns the maximum value supported by the slider. 


    Returns: the value of the models maximum property 
*javax.swing.JSlider.getMinimum()*

public int getMinimum()

Returns the minimum value supported by the slider. 


    Returns: the value of the models minimum property 
*javax.swing.JSlider.getMinorTickSpacing()*

public int getMinorTickSpacing()

This method returns the minor tick spacing. The number that is returned 
represents the distance, measured in values, between each minor tick mark. If 
you have a slider with a range from 0 to 50 and the minor tick spacing is set 
to 10, you will get minor ticks next to the following values: 0, 10, 20, 30, 
40, 50. 


    Returns: the number of values between minor ticks 
*javax.swing.JSlider.getModel()*

public |javax.swing.BoundedRangeModel| getModel()

Returns data model that handles the sliders three fundamental properties: 
minimum, maximum, value. 


*javax.swing.JSlider.getOrientation()*

public int getOrientation()

Return this slider's vertical or horizontal orientation. 


    Returns: VERTICAL or HORIZONTAL 
*javax.swing.JSlider.getPaintLabels()*

public boolean getPaintLabels()

Tells if labels are to be painted. 


    Returns: true if labels are painted, else false 
*javax.swing.JSlider.getPaintTicks()*

public boolean getPaintTicks()

Tells if tick marks are to be painted. 


    Returns: true if tick marks are painted, else false 
*javax.swing.JSlider.getPaintTrack()*

public boolean getPaintTrack()

Tells if the track (area the slider slides in) is to be painted. 


    Returns: true if track is painted, else false 
*javax.swing.JSlider.getSnapToTicks()*

public boolean getSnapToTicks()

Returns true if the knob (and the data value it represents) resolve to the 
closest tick mark next to where the user positioned the knob. 


    Returns: true if the value snaps to the nearest tick mark, else false 
*javax.swing.JSlider.getUI()*

public |javax.swing.plaf.SliderUI| getUI()

Gets the UI object which implements the Lfor this component. 


    Returns: the SliderUI object that implements the Slider L&F 
*javax.swing.JSlider.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the name of the Lclass that renders this component. 


    Returns: 
*javax.swing.JSlider.getValue()*

public int getValue()

Returns the sliders value. 


    Returns: the models value property 
*javax.swing.JSlider.getValueIsAdjusting()*

public boolean getValueIsAdjusting()

True if the slider knob is being dragged. 


    Returns: the value of the models valueIsAdjusting property 
*javax.swing.JSlider.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JSlider. This method is intended to be 
used only for debugging purposes, and the content and format of the returned 
string may vary between implementations. The returned string may be empty but 
may not be null. 


    Returns: a string representation of this JSlider. 
*javax.swing.JSlider.removeChangeListener(ChangeListener)*

public void removeChangeListener(javax.swing.event.ChangeListener l)

Removes a ChangeListener from the slider. 

    l - the ChangeListener to remove 

*javax.swing.JSlider.setExtent(int)*

public void setExtent(int extent)

Sets the size of the range "covered" by the knob. Most look and feel 
implementations will change the value by this amount if the user clicks on 
either side of the knob. 


*javax.swing.JSlider.setInverted(boolean)*

public void setInverted(boolean b)

Specify true to reverse the value-range shown for the slider and false to put 
the value range in the normal order. The order depends on the slider's 
ComponentOrientation property. Normal (non-inverted) horizontal sliders with a 
ComponentOrientation value of LEFT_TO_RIGHT have their maximum on the right. 
Normal horizontal sliders with a ComponentOrientation value of RIGHT_TO_LEFT 
have their maximum on the left. Normal vertical sliders have their maximum on 
the top. These labels are reversed when the slider is inverted. 

    b - true to reverse the slider values from their normal order 

*javax.swing.JSlider.setLabelTable(Dictionary)*

public void setLabelTable(java.util.Dictionary labels)

Used to specify what label will be drawn at any given value. The key-value 
pairs are of this format: { Integer value, java.swing.JComponent label }. 


*javax.swing.JSlider.setMajorTickSpacing(int)*

public void setMajorTickSpacing(int n)

This method sets the major tick spacing. The number that is passed-in 
represents the distance, measured in values, between each major tick mark. If 
you have a slider with a range from 0 to 50 and the major tick spacing is set 
to 10, you will get major ticks next to the following values: 0, 10, 20, 30, 
40, 50. 


*javax.swing.JSlider.setMaximum(int)*

public void setMaximum(int maximum)

Sets the models maximum property. 


*javax.swing.JSlider.setMinimum(int)*

public void setMinimum(int minimum)

Sets the models minimum property. 


*javax.swing.JSlider.setMinorTickSpacing(int)*

public void setMinorTickSpacing(int n)

This method sets the minor tick spacing. The number that is passed-in 
represents the distance, measured in values, between each minor tick mark. If 
you have a slider with a range from 0 to 50 and the minor tick spacing is set 
to 10, you will get minor ticks next to the following values: 0, 10, 20, 30, 
40, 50. 


*javax.swing.JSlider.setModel(BoundedRangeModel)*

public void setModel(javax.swing.BoundedRangeModel newModel)

Sets the model that handles the sliders three fundamental properties: minimum, 
maximum, value. 


*javax.swing.JSlider.setOrientation(int)*

public void setOrientation(int orientation)

Set the scrollbars orientation to either VERTICAL or HORIZONTAL. 


*javax.swing.JSlider.setPaintLabels(boolean)*

public void setPaintLabels(boolean b)

Determines whether labels are painted on the slider. 


*javax.swing.JSlider.setPaintTicks(boolean)*

public void setPaintTicks(boolean b)

Determines whether tick marks are painted on the slider. 


*javax.swing.JSlider.setPaintTrack(boolean)*

public void setPaintTrack(boolean b)

Determines whether the track is painted on the slider. 


*javax.swing.JSlider.setSnapToTicks(boolean)*

public void setSnapToTicks(boolean b)

Specifying true makes the knob (and the data value it represents) resolve to 
the closest tick mark next to where the user positioned the knob. 

    b - true to snap the knob to the nearest tick mark 

*javax.swing.JSlider.setUI(SliderUI)*

public void setUI(javax.swing.plaf.SliderUI ui)

Sets the UI object which implements the Lfor this component. 

    ui - the SliderUI Lobject 

*javax.swing.JSlider.setValue(int)*

public void setValue(int n)

Sets the sliders current value. This method just forwards the value to the 
model. 


*javax.swing.JSlider.setValueIsAdjusting(boolean)*

public void setValueIsAdjusting(boolean b)

Sets the models valueIsAdjusting property. Slider look and feel implementations 
should set this property to true when a knob drag begins, and to false when the 
drag ends. The slider model will not generate ChangeEvents while 
valueIsAdjusting is true. 


*javax.swing.JSlider.updateLabelUIs()*

protected void updateLabelUIs()

Resets the UI property to a value from the current look and feel. 


*javax.swing.JSlider.updateUI()*

public void updateUI()

Resets the UI property to a value from the current look and feel. 




*java.io.FilterOutputStream* *FilterOutputStream* This class is the superclass o

public class FilterOutputStream
  extends    |java.io.OutputStream|

|java.io.FilterOutputStream_Description|
|java.io.FilterOutputStream_Fields|
|java.io.FilterOutputStream_Constructors|
|java.io.FilterOutputStream_Methods|

================================================================================

*java.io.FilterOutputStream_Fields*
|java.io.OutputStream_java.io.FilterOutputStream.out|

*java.io.FilterOutputStream_Constructors*
|java.io.FilterOutputStream(OutputStream)|Creates an output stream filter built

*java.io.FilterOutputStream_Methods*
|java.io.FilterOutputStream.close()|Closes this output stream and releases any 
|java.io.FilterOutputStream.flush()|Flushes this output stream and forces any b
|java.io.FilterOutputStream.write(byte[])|Writes b.length bytes to this output 
|java.io.FilterOutputStream.write(byte[],int,int)|Writes len bytes from the spe
|java.io.FilterOutputStream.write(int)|Writes the specified byte to this output

*java.io.FilterOutputStream_Description*

This class is the superclass of all classes that filter output streams. These 
streams sit on top of an already existing output stream (the underlying output 
stream) which it uses as its basic sink of data, but possibly transforming the 
data along the way or providing additional functionality. 

The class FilterOutputStream itself simply overrides all methods of 
OutputStream with versions that pass all requests to the underlying output 
stream. Subclasses of FilterOutputStream may further override some of these 
methods as well as provide additional methods and fields. 


*java.io.OutputStream_java.io.FilterOutputStream.out*

This class is the superclass of all classes that filter output streams. These 
streams sit on top of an already existing output stream (the underlying output 
stream) which it uses as its basic sink of data, but possibly transforming the 
data along the way or providing additional functionality. 

The class FilterOutputStream itself simply overrides all methods of 
OutputStream with versions that pass all requests to the underlying output 
stream. Subclasses of FilterOutputStream may further override some of these 
methods as well as provide additional methods and fields. 



*java.io.FilterOutputStream(OutputStream)*

public FilterOutputStream(java.io.OutputStream out)

Creates an output stream filter built on top of the specified underlying output 
stream. 

    out - the underlying output stream to be assigned to the field this.out for later 
       use, or null if this instance is to be created without an underlying 
       stream. 

*java.io.FilterOutputStream.close()*

public void close()
  throws |java.io.IOException|
         
Closes this output stream and releases any system resources associated with the 
stream. 

The close method of FilterOutputStream calls its flush method, and then calls 
the close method of its underlying output stream. 


*java.io.FilterOutputStream.flush()*

public void flush()
  throws |java.io.IOException|
         
Flushes this output stream and forces any buffered output bytes to be written 
out to the stream. 

The flush method of FilterOutputStream calls the flush method of its underlying 
output stream. 


*java.io.FilterOutputStream.write(byte[])*

public void write(byte[] b)
  throws |java.io.IOException|
         
Writes b.length bytes to this output stream. 

The write method of FilterOutputStream calls its write method of three 
arguments with the arguments b, 0, and b.length. 

Note that this method does not call the one-argument write method of its 
underlying stream with the single argument b. 

    b - the data to be written. 

*java.io.FilterOutputStream.write(byte[],int,int)*

public void write(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Writes len bytes from the specified byte array starting at offset off to this 
output stream. 

The write method of FilterOutputStream calls the write method of one argument 
on each byte to output. 

Note that this method does not call the write method of its underlying input 
stream with the same arguments. Subclasses of FilterOutputStream should provide 
a more efficient implementation of this method. 

    b - the data. 
    off - the start offset in the data. 
    len - the number of bytes to write. 

*java.io.FilterOutputStream.write(int)*

public void write(int b)
  throws |java.io.IOException|
         
Writes the specified byte to this output stream. 

The write method of FilterOutputStream calls the write method of its underlying 
output stream, that is, it performs out.write(b). 

Implements the abstract write method of OutputStream. 

    b - the byte. 



*java.awt.image.renderable.RenderableImage* *RenderableImage* A RenderableImage 

public interface interface RenderableImage


|java.awt.image.renderable.RenderableImage_Description|
|java.awt.image.renderable.RenderableImage_Fields|
|java.awt.image.renderable.RenderableImage_Constructors|
|java.awt.image.renderable.RenderableImage_Methods|

================================================================================

*java.awt.image.renderable.RenderableImage_Fields*
|java.lang.String_java.awt.image.renderable.RenderableImage.HINTS_OBSERVED|

*java.awt.image.renderable.RenderableImage_Methods*
|java.awt.image.renderable.RenderableImage.createDefaultRendering()|Returnd a R
|java.awt.image.renderable.RenderableImage.createRendering(RenderContext)|Creat
|java.awt.image.renderable.RenderableImage.createScaledRendering(int,int,RenderingHints)|
|java.awt.image.renderable.RenderableImage.getHeight()|Gets the height in user 
|java.awt.image.renderable.RenderableImage.getMinX()|Gets the minimum X coordin
|java.awt.image.renderable.RenderableImage.getMinY()|Gets the minimum Y coordin
|java.awt.image.renderable.RenderableImage.getProperty(String)|Gets a property 
|java.awt.image.renderable.RenderableImage.getPropertyNames()|Returns a list of
|java.awt.image.renderable.RenderableImage.getSources()|Returns a vector of Ren
|java.awt.image.renderable.RenderableImage.getWidth()|Gets the width in user co
|java.awt.image.renderable.RenderableImage.isDynamic()|Returns true if successi

*java.awt.image.renderable.RenderableImage_Description*

A RenderableImage is a common interface for rendering-independent images (a 
notion which subsumes resolution independence). That is, images which are 
described and have operations applied to them independent of any specific 
rendering of the image. For example, a RenderableImage can be rotated and 
cropped in resolution-independent terms. Then, it can be rendered for various 
specific contexts, such as a draft preview, a high-quality screen display, or a 
printer, each in an optimal fashion. 

A RenderedImage is returned from a RenderableImage via the createRendering() 
method, which takes a RenderContext. The RenderContext specifies how the 
RenderedImage should be constructed. Note that it is not possible to extract 
pixels directly from a RenderableImage. 

The createDefaultRendering() and createScaledRendering() methods are 
convenience methods that construct an appropriate RenderContext internally. All 
of the rendering methods may return a reference to a previously produced 
rendering. 


*java.lang.String_java.awt.image.renderable.RenderableImage.HINTS_OBSERVED*

A RenderableImage is a common interface for rendering-independent images (a 
notion which subsumes resolution independence). That is, images which are 
described and have operations applied to them independent of any specific 
rendering of the image. For example, a RenderableImage can be rotated and 
cropped in resolution-independent terms. Then, it can be rendered for various 
specific contexts, such as a draft preview, a high-quality screen display, or a 
printer, each in an optimal fashion. 

A RenderedImage is returned from a RenderableImage via the createRendering() 
method, which takes a RenderContext. The RenderContext specifies how the 
RenderedImage should be constructed. Note that it is not possible to extract 
pixels directly from a RenderableImage. 

The createDefaultRendering() and createScaledRendering() methods are 
convenience methods that construct an appropriate RenderContext internally. All 
of the rendering methods may return a reference to a previously produced 
rendering. 



*java.awt.image.renderable.RenderableImage.createDefaultRendering()*

public |java.awt.image.RenderedImage| createDefaultRendering()

Returnd a RenderedImage instance of this image with a default width and height 
in pixels. The RenderContext is built automatically with an appropriate usr2dev 
transform and an area of interest of the full image. The rendering hints are 
empty. createDefaultRendering may make use of a stored rendering for speed. 


    Returns: a RenderedImage containing the rendered data. 
*java.awt.image.renderable.RenderableImage.createRendering(RenderContext)*

public |java.awt.image.RenderedImage| createRendering(java.awt.image.renderable.RenderContext renderContext)

Creates a RenderedImage that represented a rendering of this image using a 
given RenderContext. This is the most general way to obtain a rendering of a 
RenderableImage. 

The created RenderedImage may have a property identified by the String 
HINTS_OBSERVED to indicate which RenderingHints (from the RenderContext) were 
used to create the image. In addition any RenderedImages that are obtained via 
the getSources() method on the created RenderedImage may have such a property. 

    renderContext - the RenderContext to use to produce the rendering. 

    Returns: a RenderedImage containing the rendered data. 
*java.awt.image.renderable.RenderableImage.createScaledRendering(int,int,RenderingHints)*

public |java.awt.image.RenderedImage| createScaledRendering(
  int w,
  int h,
  java.awt.RenderingHints hints)

Creates a RenderedImage instance of this image with width w, and height h in 
pixels. The RenderContext is built automatically with an appropriate usr2dev 
transform and an area of interest of the full image. All the rendering hints 
come from hints passed in. 

If w == 0, it will be taken to equal Math.round(h*(getWidth()/getHeight())). 
Similarly, if h == 0, it will be taken to equal 
Math.round(w*(getHeight()/getWidth())). One of w or h must be non-zero or else 
an IllegalArgumentException will be thrown. 

The created RenderedImage may have a property identified by the String 
HINTS_OBSERVED to indicate which RenderingHints were used to create the image. 
In addition any RenderedImages that are obtained via the getSources() method on 
the created RenderedImage may have such a property. 

    w - the width of rendered image in pixels, or 0. 
    h - the height of rendered image in pixels, or 0. 
    hints - a RenderingHints object containg hints. 

    Returns: a RenderedImage containing the rendered data. 
*java.awt.image.renderable.RenderableImage.getHeight()*

public float getHeight()

Gets the height in user coordinate space. By convention, the usual height of a 
RenderedImage is equal to 1.0F. 


    Returns: the height of the image in user coordinates. 
*java.awt.image.renderable.RenderableImage.getMinX()*

public float getMinX()

Gets the minimum X coordinate of the rendering-independent image data. 


    Returns: the minimum X coordinate of the rendering-independent image data. 
*java.awt.image.renderable.RenderableImage.getMinY()*

public float getMinY()

Gets the minimum Y coordinate of the rendering-independent image data. 


    Returns: the minimum Y coordinate of the rendering-independent image data. 
*java.awt.image.renderable.RenderableImage.getProperty(String)*

public |java.lang.Object| getProperty(java.lang.String name)

Gets a property from the property set of this image. If the property name is 
not recognized, java.awt.Image.UndefinedProperty will be returned. 

    name - the name of the property to get, as a String. 

    Returns: a reference to the property Object, or the value 
             java.awt.Image.UndefinedProperty. 
*java.awt.image.renderable.RenderableImage.getPropertyNames()*

public |java.lang.String| getPropertyNames()

Returns a list of names recognized by getProperty. 


    Returns: a list of property names. 
*java.awt.image.renderable.RenderableImage.getSources()*

public |java.util.Vector| getSources()

Returns a vector of RenderableImages that are the sources of image data for 
this RenderableImage. Note that this method may return an empty vector, to 
indicate that the image has no sources, or null, to indicate that no 
information is available. 


    Returns: a (possibly empty) Vector of RenderableImages, or null. 
*java.awt.image.renderable.RenderableImage.getWidth()*

public float getWidth()

Gets the width in user coordinate space. By convention, the usual width of a 
RenderableImage is equal to the image's aspect ratio (width divided by height). 


    Returns: the width of the image in user coordinates. 
*java.awt.image.renderable.RenderableImage.isDynamic()*

public boolean isDynamic()

Returns true if successive renderings (that is, calls to createRendering() or 
createScaledRendering()) with the same arguments may produce different results. 
This method may be used to determine whether an existing rendering may be 
cached and reused. It is always safe to return true. 


    Returns: true if successive renderings with the same arguments might produce different 
             results; false otherwise. 


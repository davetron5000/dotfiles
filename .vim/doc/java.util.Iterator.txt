*java.util.Iterator* *Iterator* An iterator over a collection.

public interface interface Iterator


|java.util.Iterator_Description|
|java.util.Iterator_Fields|
|java.util.Iterator_Constructors|
|java.util.Iterator_Methods|

================================================================================

*java.util.Iterator_Methods*
|java.util.Iterator.hasNext()|Returns true if the iteration has more elements.
|java.util.Iterator.next()|Returns the next element in the iteration.
|java.util.Iterator.remove()|Removes from the underlying collection the last el

*java.util.Iterator_Description*

An iterator over a collection. Iterator takes the place of Enumeration in the 
Java collections framework. Iterators differ from enumerations in two ways: 
Iterators allow the caller to remove elements from the underlying collection 
during the iteration with well-defined semantics. Method names have been 
improved. 

This interface is a member of the <a href="/../guide/collections/index.html"> 
Java Collections Framework. 


*java.util.Iterator.hasNext()*

public boolean hasNext()

Returns true if the iteration has more elements. (In other words, returns true 
if next would return an element rather than throwing an exception.) 


    Returns: true if the iterator has more elements. 
*java.util.Iterator.next()*

public |java.lang.Object| next()

Returns the next element in the iteration. Calling this method repeatedly until 
the (|java.util.Iterator|) method returns false will return each element in the 
underlying collection exactly once. 


    Returns: the next element in the iteration. 
*java.util.Iterator.remove()*

public void remove()

Removes from the underlying collection the last element returned by the 
iterator (optional operation). This method can be called only once per call to 
next. The behavior of an iterator is unspecified if the underlying collection 
is modified while the iteration is in progress in any way other than by calling 
this method. 




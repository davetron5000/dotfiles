*javax.swing.text.html.parser.DTD* *DTD* The representation of an SGML DTD.

public class DTD
  extends    |java.lang.Object|
  implements |javax.swing.text.html.parser.DTDConstants|

|javax.swing.text.html.parser.DTD_Description|
|javax.swing.text.html.parser.DTD_Fields|
|javax.swing.text.html.parser.DTD_Constructors|
|javax.swing.text.html.parser.DTD_Methods|

================================================================================

*javax.swing.text.html.parser.DTD_Fields*
|javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.applet|
|javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.base|
|javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.body|
|java.util.Hashtable_javax.swing.text.html.parser.DTD.elementHash|
|java.util.Vector_javax.swing.text.html.parser.DTD.elements|
|java.util.Hashtable_javax.swing.text.html.parser.DTD.entityHash|
|int_javax.swing.text.html.parser.DTD.FILE_VERSION|
|javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.head|
|javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.html|
|javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.isindex|
|javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.meta|
|java.lang.String_javax.swing.text.html.parser.DTD.name|
|javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.p|
|javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.param|
|javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.pcdata|
|javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.title|

*javax.swing.text.html.parser.DTD_Constructors*
|javax.swing.text.html.parser.DTD(String)|Creates a new DTD with the specified 

*javax.swing.text.html.parser.DTD_Methods*
|javax.swing.text.html.parser.DTD.defAttributeList(String,int,int,String,String,AttributeList)|
|javax.swing.text.html.parser.DTD.defContentModel(int,Object,ContentModel)|Crea
|javax.swing.text.html.parser.DTD.defElement(String,int,boolean,boolean,ContentModel,String[],String[],AttributeList)|
|javax.swing.text.html.parser.DTD.defEntity(String,int,int)|Creates and returns
|javax.swing.text.html.parser.DTD.defEntity(String,int,String)|Creates and retu
|javax.swing.text.html.parser.DTD.defineAttributes(String,AttributeList)|Return
|javax.swing.text.html.parser.DTD.defineElement(String,int,boolean,boolean,ContentModel,BitSet,BitSet,AttributeList)|
|javax.swing.text.html.parser.DTD.defineEntity(String,int,char[])|Defines an en
|javax.swing.text.html.parser.DTD.getDTD(String)|Returns a DTD with the specifi
|javax.swing.text.html.parser.DTD.getElement(int)|Gets an element by index.
|javax.swing.text.html.parser.DTD.getElement(String)|Gets an element by name.
|javax.swing.text.html.parser.DTD.getEntity(int)|Gets a character entity.
|javax.swing.text.html.parser.DTD.getEntity(String)|Gets an entity by name.
|javax.swing.text.html.parser.DTD.getName()|Gets the name of the DTD.
|javax.swing.text.html.parser.DTD.putDTDHash(String,DTD)|
|javax.swing.text.html.parser.DTD.read(DataInputStream)|Recreates a DTD from an
|javax.swing.text.html.parser.DTD.toString()|Returns a string representation of

*javax.swing.text.html.parser.DTD_Description*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 


*javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.applet*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 


*javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.base*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 


*javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.body*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 


*java.util.Hashtable_javax.swing.text.html.parser.DTD.elementHash*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 


*java.util.Vector_javax.swing.text.html.parser.DTD.elements*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 


*java.util.Hashtable_javax.swing.text.html.parser.DTD.entityHash*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 


*int_javax.swing.text.html.parser.DTD.FILE_VERSION*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 


*javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.head*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 


*javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.html*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 


*javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.isindex*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 


*javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.meta*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 


*java.lang.String_javax.swing.text.html.parser.DTD.name*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 


*javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.p*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 


*javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.param*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 


*javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.pcdata*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 


*javax.swing.text.html.parser.Element_javax.swing.text.html.parser.DTD.title*

The representation of an SGML DTD. DTD describes a document syntax and is used 
in parsing of HTML documents. It contains a list of elements and their 
attributes as well as a list of entities defined in the DTD. 



*javax.swing.text.html.parser.DTD(String)*

protected DTD(java.lang.String name)

Creates a new DTD with the specified name. 

    name - the name, as a String of the new DTD 

*javax.swing.text.html.parser.DTD.defAttributeList(String,int,int,String,String,AttributeList)*

protected |javax.swing.text.html.parser.AttributeList| defAttributeList(
  java.lang.String name,
  int type,
  int modifier,
  java.lang.String value,
  java.lang.String values,
  javax.swing.text.html.parser.AttributeList atts)

Creates and returns an AttributeList. 

    name - the attribute list's name 

    Returns: the new AttributeList 
*javax.swing.text.html.parser.DTD.defContentModel(int,Object,ContentModel)*

protected |javax.swing.text.html.parser.ContentModel| defContentModel(
  int type,
  java.lang.Object obj,
  javax.swing.text.html.parser.ContentModel next)

Creates and returns a new content model. 

    type - the type of the new content model 

    Returns: the new ContentModel 
*javax.swing.text.html.parser.DTD.defElement(String,int,boolean,boolean,ContentModel,String[],String[],AttributeList)*

protected |javax.swing.text.html.parser.Element| defElement(
  java.lang.String name,
  int type,
  boolean omitStart,
  boolean omitEnd,
  javax.swing.text.html.parser.ContentModel content,
  java.lang.String[] exclusions,
  java.lang.String[] inclusions,
  javax.swing.text.html.parser.AttributeList atts)

Creates and returns an Element. 

    name - the element's name 

    Returns: the new Element 
*javax.swing.text.html.parser.DTD.defEntity(String,int,int)*

public |javax.swing.text.html.parser.Entity| defEntity(
  java.lang.String name,
  int type,
  int ch)

Creates and returns a character Entity. 

    name - the entity's name 

    Returns: the new character Entity 
*javax.swing.text.html.parser.DTD.defEntity(String,int,String)*

protected |javax.swing.text.html.parser.Entity| defEntity(
  java.lang.String name,
  int type,
  java.lang.String str)

Creates and returns an Entity. 

    name - the entity's name 

    Returns: the new Entity 
*javax.swing.text.html.parser.DTD.defineAttributes(String,AttributeList)*

public void defineAttributes(
  java.lang.String name,
  javax.swing.text.html.parser.AttributeList atts)

Returns the Element which matches the specified AttributeList. If one doesn't 
exist, a new one is created and returned. 

    name - the name of the Element 
    atts - the AttributeList specifying the Element 

    Returns: the Element specified 
*javax.swing.text.html.parser.DTD.defineElement(String,int,boolean,boolean,ContentModel,BitSet,BitSet,AttributeList)*

public |javax.swing.text.html.parser.Element| defineElement(
  java.lang.String name,
  int type,
  boolean omitStart,
  boolean omitEnd,
  javax.swing.text.html.parser.ContentModel content,
  java.util.BitSet exclusions,
  java.util.BitSet inclusions,
  javax.swing.text.html.parser.AttributeList atts)

Returns the Element which matches the specified parameters. If one doesn't 
exist, a new one is created and returned. 

    name - the name of the Element 
    type - the type of the Element 
    omitStart - true</code if start should be omitted 
    omitEnd - true if end should be omitted 
    content - the ContentModel 
    atts - the AttributeList specifying the Element 

    Returns: the Element specified 
*javax.swing.text.html.parser.DTD.defineEntity(String,int,char[])*

public |javax.swing.text.html.parser.Entity| defineEntity(
  java.lang.String name,
  int type,
  char[] data)

Defines an entity. If the Entity specified by name, type, and data exists, it 
is returned; otherwise a new Entity is created and is returned. 

    name - the name of the Entity as a String 
    type - the type of the Entity 
    data - the Entity's data 

    Returns: the Entity requested or a new Entity if not found 
*javax.swing.text.html.parser.DTD.getDTD(String)*

public static |javax.swing.text.html.parser.DTD| getDTD(java.lang.String name)
  throws |java.io.IOException|
         
Returns a DTD with the specified name. If a DTD with that name doesn't exist, 
one is created and returned. Any uppercase characters in the name are converted 
to lowercase. 

    name - the name of the DTD 

    Returns: the DTD which corresponds to name 
*javax.swing.text.html.parser.DTD.getElement(int)*

public |javax.swing.text.html.parser.Element| getElement(int index)

Gets an element by index. 

    index - the requested index 

    Returns: the Element corresponding to index 
*javax.swing.text.html.parser.DTD.getElement(String)*

public |javax.swing.text.html.parser.Element| getElement(java.lang.String name)

Gets an element by name. A new element is created if the element doesn't exist. 

    name - the requested String 

    Returns: the Element corresponding to name, which may be newly created 
*javax.swing.text.html.parser.DTD.getEntity(int)*

public |javax.swing.text.html.parser.Entity| getEntity(int ch)

Gets a character entity. 


    Returns: the Entity corresponding to the ch character 
*javax.swing.text.html.parser.DTD.getEntity(String)*

public |javax.swing.text.html.parser.Entity| getEntity(java.lang.String name)

Gets an entity by name. 


    Returns: the Entity corresponding to the name String 
*javax.swing.text.html.parser.DTD.getName()*

public |java.lang.String| getName()

Gets the name of the DTD. 


    Returns: the name of the DTD 
*javax.swing.text.html.parser.DTD.putDTDHash(String,DTD)*

public static void putDTDHash(
  java.lang.String name,
  javax.swing.text.html.parser.DTD dtd)




*javax.swing.text.html.parser.DTD.read(DataInputStream)*

public void read(java.io.DataInputStream in)
  throws |java.io.IOException|
         
Recreates a DTD from an archived format. 

    in - the DataInputStream to read from 

*javax.swing.text.html.parser.DTD.toString()*

public |java.lang.String| toString()

Returns a string representation of this DTD. 


    Returns: the string representation of this DTD 


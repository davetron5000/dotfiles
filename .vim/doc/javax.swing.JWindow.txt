*javax.swing.JWindow* *JWindow* A JWindow is a container that can be displayed a

public class JWindow
  extends    |java.awt.Window|
  implements |javax.accessibility.Accessible|
             |javax.swing.RootPaneContainer|

|javax.swing.JWindow_Description|
|javax.swing.JWindow_Fields|
|javax.swing.JWindow_Constructors|
|javax.swing.JWindow_Methods|

================================================================================

*javax.swing.JWindow_Fields*
|javax.accessibility.AccessibleContext_javax.swing.JWindow.accessibleContext|
|javax.swing.JRootPane_javax.swing.JWindow.rootPane|
|boolean_javax.swing.JWindow.rootPaneCheckingEnabled|

*javax.swing.JWindow_Constructors*
|javax.swing.JWindow()|Creates a window with no specified owner.
|javax.swing.JWindow(Frame)|Creates a window with the specified owner frame.
|javax.swing.JWindow(GraphicsConfiguration)|Creates a window with the specified
|javax.swing.JWindow(Window)|Creates a window with the specified owner window.
|javax.swing.JWindow(Window,GraphicsConfiguration)|Creates a window with the sp

*javax.swing.JWindow_Methods*
|javax.swing.JWindow.addImpl(Component,Object,int)|Adds the specified child Com
|javax.swing.JWindow.createRootPane()|Called by the constructor methods to crea
|javax.swing.JWindow.getAccessibleContext()|Gets the AccessibleContext associat
|javax.swing.JWindow.getContentPane()|Returns the Container which is the conten
|javax.swing.JWindow.getGlassPane()|Returns the glassPane Component for this wi
|javax.swing.JWindow.getLayeredPane()|Returns the layeredPane object for this w
|javax.swing.JWindow.getRootPane()|Returns the rootPane object for this window.
|javax.swing.JWindow.isRootPaneCheckingEnabled()|Returns whether calls to add a
|javax.swing.JWindow.paramString()|Returns a string representation of this JWin
|javax.swing.JWindow.remove(Component)|Removes the specified component from the
|javax.swing.JWindow.setContentPane(Container)|Sets the contentPane property fo
|javax.swing.JWindow.setGlassPane(Component)|Sets the glassPane property.
|javax.swing.JWindow.setLayeredPane(JLayeredPane)|Sets the layeredPane property
|javax.swing.JWindow.setLayout(LayoutManager)|Sets the LayoutManager.
|javax.swing.JWindow.setRootPane(JRootPane)|Sets the new rootPane object for th
|javax.swing.JWindow.setRootPaneCheckingEnabled(boolean)|Sets whether calls to 
|javax.swing.JWindow.update(Graphics)|Calls paint(g).
|javax.swing.JWindow.windowInit()|Called by the constructors to init the JWindo

*javax.swing.JWindow_Description*

A JWindow is a container that can be displayed anywhere on the user's desktop. 
It does not have the title bar, window-management buttons, or other trimmings 
associated with a JFrame, but it is still a "first-class citizen" of the user's 
desktop, and can exist anywhere on it. 

The JWindow component contains a JRootPane as its only child. The contentPane 
should be the parent of any children of the JWindow. As a conveniance add and 
its variants, remove and setLayout have been overridden to forward to the 
contentPane as necessary. This means you can write: 

window.add(child); 

And the child will be added to the contentPane. The contentPane will always be 
non-null. Attempting to set it to null will cause the JWindow to throw an 
exception. The default contentPane will have a BorderLayout manager set on it. 
Refer to (|javax.swing.RootPaneContainer|) for details on adding, removing and 
setting the LayoutManager of a JWindow. 

Please see the (|javax.swing.JRootPane|) documentation for a complete 
description of the contentPane, glassPane, and layeredPane components. 

In a multi-screen environment, you can create a JWindow on a different screen 
device. See (|java.awt.Window|) for more information. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.accessibility.AccessibleContext_javax.swing.JWindow.accessibleContext*

A JWindow is a container that can be displayed anywhere on the user's desktop. 
It does not have the title bar, window-management buttons, or other trimmings 
associated with a JFrame, but it is still a "first-class citizen" of the user's 
desktop, and can exist anywhere on it. 

The JWindow component contains a JRootPane as its only child. The contentPane 
should be the parent of any children of the JWindow. As a conveniance add and 
its variants, remove and setLayout have been overridden to forward to the 
contentPane as necessary. This means you can write: 

window.add(child); 

And the child will be added to the contentPane. The contentPane will always be 
non-null. Attempting to set it to null will cause the JWindow to throw an 
exception. The default contentPane will have a BorderLayout manager set on it. 
Refer to (|javax.swing.RootPaneContainer|) for details on adding, removing and 
setting the LayoutManager of a JWindow. 

Please see the (|javax.swing.JRootPane|) documentation for a complete 
description of the contentPane, glassPane, and layeredPane components. 

In a multi-screen environment, you can create a JWindow on a different screen 
device. See (|java.awt.Window|) for more information. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JRootPane_javax.swing.JWindow.rootPane*

A JWindow is a container that can be displayed anywhere on the user's desktop. 
It does not have the title bar, window-management buttons, or other trimmings 
associated with a JFrame, but it is still a "first-class citizen" of the user's 
desktop, and can exist anywhere on it. 

The JWindow component contains a JRootPane as its only child. The contentPane 
should be the parent of any children of the JWindow. As a conveniance add and 
its variants, remove and setLayout have been overridden to forward to the 
contentPane as necessary. This means you can write: 

window.add(child); 

And the child will be added to the contentPane. The contentPane will always be 
non-null. Attempting to set it to null will cause the JWindow to throw an 
exception. The default contentPane will have a BorderLayout manager set on it. 
Refer to (|javax.swing.RootPaneContainer|) for details on adding, removing and 
setting the LayoutManager of a JWindow. 

Please see the (|javax.swing.JRootPane|) documentation for a complete 
description of the contentPane, glassPane, and layeredPane components. 

In a multi-screen environment, you can create a JWindow on a different screen 
device. See (|java.awt.Window|) for more information. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.JWindow.rootPaneCheckingEnabled*

A JWindow is a container that can be displayed anywhere on the user's desktop. 
It does not have the title bar, window-management buttons, or other trimmings 
associated with a JFrame, but it is still a "first-class citizen" of the user's 
desktop, and can exist anywhere on it. 

The JWindow component contains a JRootPane as its only child. The contentPane 
should be the parent of any children of the JWindow. As a conveniance add and 
its variants, remove and setLayout have been overridden to forward to the 
contentPane as necessary. This means you can write: 

window.add(child); 

And the child will be added to the contentPane. The contentPane will always be 
non-null. Attempting to set it to null will cause the JWindow to throw an 
exception. The default contentPane will have a BorderLayout manager set on it. 
Refer to (|javax.swing.RootPaneContainer|) for details on adding, removing and 
setting the LayoutManager of a JWindow. 

Please see the (|javax.swing.JRootPane|) documentation for a complete 
description of the contentPane, glassPane, and layeredPane components. 

In a multi-screen environment, you can create a JWindow on a different screen 
device. See (|java.awt.Window|) for more information. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.JWindow()*

public JWindow()

Creates a window with no specified owner. This window will not be focusable. 

This constructor sets the component's locale property to the value returned by 
JComponent.getDefaultLocale. 


*javax.swing.JWindow(Frame)*

public JWindow(java.awt.Frame owner)

Creates a window with the specified owner frame. If owner is null, the shared 
owner will be used and this window will not be focusable. Also, this window 
will not be focusable unless its owner is showing on the screen. 

This constructor sets the component's locale property to the value returned by 
JComponent.getDefaultLocale. 

    owner - the frame from which the window is displayed 

*javax.swing.JWindow(GraphicsConfiguration)*

public JWindow(java.awt.GraphicsConfiguration gc)

Creates a window with the specified GraphicsConfiguration of a screen device. 
This window will not be focusable. 

This constructor sets the component's locale property to the value returned by 
JComponent.getDefaultLocale. 

    gc - the GraphicsConfiguration that is used to construct the new window with; if gc 
       is null, the system default GraphicsConfiguration is assumed 

*javax.swing.JWindow(Window)*

public JWindow(java.awt.Window owner)

Creates a window with the specified owner window. This window will not be 
focusable unless its owner is showing on the screen. If owner is null, the 
shared owner will be used and this window will not be focusable. 

This constructor sets the component's locale property to the value returned by 
JComponent.getDefaultLocale. 

    owner - the window from which the window is displayed 

*javax.swing.JWindow(Window,GraphicsConfiguration)*

public JWindow(
  java.awt.Window owner,
  java.awt.GraphicsConfiguration gc)

Creates a window with the specified owner window and GraphicsConfiguration of a 
screen device. If owner is null, the shared owner will be used and this window 
will not be focusable. 

This constructor sets the component's locale property to the value returned by 
JComponent.getDefaultLocale. 

    owner - the window from which the window is displayed 
    gc - the GraphicsConfiguration that is used to construct the new window with; if gc 
       is null, the system default GraphicsConfiguration is assumed, unless 
       owner is also null, in which case the GraphicsConfiguration from the 
       shared owner frame will be used. 

*javax.swing.JWindow.addImpl(Component,Object,int)*

protected void addImpl(
  java.awt.Component comp,
  java.lang.Object constraints,
  int index)

Adds the specified child Component. This method is overridden to conditionally 
forwad calls to the contentPane. By default, children are added to the 
contentPane instead of the frame, refer to (|javax.swing.RootPaneContainer|) 
for details. 

    comp - the component to be enhanced 
    constraints - the constraints to be respected 
    index - the index 

*javax.swing.JWindow.createRootPane()*

protected |javax.swing.JRootPane| createRootPane()

Called by the constructor methods to create the default rootPane. 


*javax.swing.JWindow.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JWindow. For JWindows, the 
AccessibleContext takes the form of an AccessibleJWindow. A new 
AccessibleJWindow instance is created if necessary. 


    Returns: an AccessibleJWindow that serves as the AccessibleContext of this JWindow 
*javax.swing.JWindow.getContentPane()*

public |java.awt.Container| getContentPane()

Returns the Container which is the contentPane for this window. 


    Returns: the contentPane property 
*javax.swing.JWindow.getGlassPane()*

public |java.awt.Component| getGlassPane()

Returns the glassPane Component for this window. 


    Returns: the glassPane property 
*javax.swing.JWindow.getLayeredPane()*

public |javax.swing.JLayeredPane| getLayeredPane()

Returns the layeredPane object for this window. 


    Returns: the layeredPane property 
*javax.swing.JWindow.getRootPane()*

public |javax.swing.JRootPane| getRootPane()

Returns the rootPane object for this window. 


    Returns: the rootPane property for this window 
*javax.swing.JWindow.isRootPaneCheckingEnabled()*

protected boolean isRootPaneCheckingEnabled()

Returns whether calls to add and setLayout are forwarded to the contentPane. 


    Returns: true if add and setLayout are fowarded; false otherwise 
*javax.swing.JWindow.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JWindow. This method is intended to be 
used only for debugging purposes, and the content and format of the returned 
string may vary between implementations. The returned string may be empty but 
may not be null. 


    Returns: a string representation of this JWindow 
*javax.swing.JWindow.remove(Component)*

public void remove(java.awt.Component comp)

Removes the specified component from the container. If comp is not the 
rootPane, this will forward the call to the contentPane. This will do nothing 
if comp is not a child of the JWindow or contentPane. 

    comp - the component to be removed 

*javax.swing.JWindow.setContentPane(Container)*

public void setContentPane(java.awt.Container contentPane)

Sets the contentPane property for this window. This method is called by the 
constructor. 

    contentPane - the new contentPane 

*javax.swing.JWindow.setGlassPane(Component)*

public void setGlassPane(java.awt.Component glassPane)

Sets the glassPane property. This method is called by the constructor. 

    glassPane - the glassPane object for this window 

*javax.swing.JWindow.setLayeredPane(JLayeredPane)*

public void setLayeredPane(javax.swing.JLayeredPane layeredPane)

Sets the layeredPane property. This method is called by the constructor. 

    layeredPane - the new layeredPane object 

*javax.swing.JWindow.setLayout(LayoutManager)*

public void setLayout(java.awt.LayoutManager manager)

Sets the LayoutManager. Overridden to conditionally forward the call to the 
contentPane. Refer to (|javax.swing.RootPaneContainer|) for more information. 

    manager - the LayoutManager 

*javax.swing.JWindow.setRootPane(JRootPane)*

protected void setRootPane(javax.swing.JRootPane root)

Sets the new rootPane object for this window. This method is called by the 
constructor. 

    root - the new rootPane property 

*javax.swing.JWindow.setRootPaneCheckingEnabled(boolean)*

protected void setRootPaneCheckingEnabled(boolean enabled)

Sets whether calls to add and setLayout are forwarded to the contentPane. 

    enabled - true if add and setLayout are forwarded, false if they should operate directly 
       on the JWindow. 

*javax.swing.JWindow.update(Graphics)*

public void update(java.awt.Graphics g)

Calls paint(g). This method was overridden to prevent an unnecessary call to 
clear the background. 

    g - the Graphics context in which to paint 

*javax.swing.JWindow.windowInit()*

protected void windowInit()

Called by the constructors to init the JWindow properly. 




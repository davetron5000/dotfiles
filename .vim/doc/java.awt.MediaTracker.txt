*java.awt.MediaTracker* *MediaTracker* The MediaTracker class is a utility class to track 
 the status of a number of media objects.

public class MediaTracker
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.awt.MediaTracker_Description|
|java.awt.MediaTracker_Fields|
|java.awt.MediaTracker_Constructors|
|java.awt.MediaTracker_Methods|

====================================================================================================================================================================================

*java.awt.MediaTracker_Fields*
|int_java.awt.MediaTracker.ABORTED|
|int_java.awt.MediaTracker.COMPLETE|
|int_java.awt.MediaTracker.ERRORED|
|int_java.awt.MediaTracker.LOADING|

*java.awt.MediaTracker_Constructors*
|java.awt.MediaTracker(Component)|Creates a media tracker to track images for a given component.

*java.awt.MediaTracker_Methods*
|java.awt.MediaTracker.addImage(Image,int)|Adds an image to the list of images being tracked by this media   tracker.
|java.awt.MediaTracker.addImage(Image,int,int,int)|Adds a scaled image to the list of images being tracked    by this media tracker.
|java.awt.MediaTracker.checkAll()|Checks to see if all images being tracked by this media tracker   have finished loading.
|java.awt.MediaTracker.checkAll(boolean)|Checks to see if all images being tracked by this media tracker   have finished loading.
|java.awt.MediaTracker.checkID(int)|Checks to see if all images tracked by this media tracker that   are tagged with the specified identifier have finished loading.
|java.awt.MediaTracker.checkID(int,boolean)|Checks to see if all images tracked by this media tracker that   are tagged with the specified identifier have finished loading.
|java.awt.MediaTracker.getErrorsAny()|Returns a list of all media that have encountered an error.
|java.awt.MediaTracker.getErrorsID(int)|Returns a list of media with the specified ID that   have encountered an error.
|java.awt.MediaTracker.isErrorAny()|Checks the error status of all of the images.
|java.awt.MediaTracker.isErrorID(int)|Checks the error status of all of the images tracked by this   media tracker with the specified identifier.
|java.awt.MediaTracker.removeImage(Image)|Removes the specified image from this media tracker.
|java.awt.MediaTracker.removeImage(Image,int)|Removes the specified image from the specified tracking   ID of this media tracker.
|java.awt.MediaTracker.removeImage(Image,int,int,int)|Removes the specified image with the specified   width, height, and ID from this media tracker.
|java.awt.MediaTracker.statusAll(boolean)|Calculates and returns the bitwise inclusive OR of the   status of all media that are tracked by this media tracker.
|java.awt.MediaTracker.statusID(int,boolean)|Calculates and returns the bitwise inclusive OR of the   status of all media with the specified identifier that are   tracked by this 
|java.awt.MediaTracker.waitForAll()|Starts loading all images tracked by this media tracker.
|java.awt.MediaTracker.waitForAll(long)|Starts loading all images tracked by this media tracker.
|java.awt.MediaTracker.waitForID(int)|Starts loading all images tracked by this media tracker with the   specified identifier.
|java.awt.MediaTracker.waitForID(int,long)|Starts loading all images tracked by this media tracker with the   specified identifier.

*java.awt.MediaTracker_Description*

The MediaTracker class is a utility class to track the status of a number of media objects. Media objects could include audio clips as well as images, though currently only images 
are supported. 

To use a media tracker, create an instance of MediaTracker and call its addImage method for each image to be tracked. In addition, each image can be assigned a unique identifier. 
This identifier controls the priority order in which the images are fetched. It can also be used to identify unique subsets of the images that can be waited on independently. 
Images with a lower ID are loaded in preference to those with a higher ID number. 



Tracking an animated image might not always be useful due to the multi-part nature of animated image loading and painting, but it is supported. MediaTracker treats an animated 
image as completely loaded when the first frame is completely loaded. At that point, the MediaTracker signals any waiters that the image is completely loaded. If no ImageObservers 
are observing the image when the first frame has finished loading, the image might flush itself to conserve resources (see (|java.awt.Image|) ). 

Here is an example of using MediaTracker: 



import java.applet.Applet; import java.awt.Color; import java.awt.Image; import java.awt.Graphics; import java.awt.MediaTracker; 

public class ImageBlaster extends Applet implements Runnable { MediaTracker tracker; Image bg; Image anim[] = new Image[5]; int index; Thread animator; 

// Get the images for the background (id == 0) // and the animation frames (id == 1) // and add them to the MediaTracker public void init() { tracker = new MediaTracker(this); bg 
= getImage(getDocumentBase(), "images/background.gif"); tracker.addImage(bg, 0); for (int i = 0; i = anim.length) { index = 0; } } repaint(); } } 

// The background image fills the frame so we // don't need to clear the applet on repaints. // Just call the paint method. public void update(Graphics g) { paint(g); } 

// Paint a large red rectangle if there are any errors // loading the images. Otherwise always paint the // background so that it appears incrementally as it // is loading. 
Finally, only paint the current animation // frame if all of the frames (id == 1) are done loading, // so that we don't get partial animations. public void paint(Graphics g) { if 
((tracker.statusAll(false) & MediaTracker.ERRORED) != 0) { g.setColor(Color.red); g.fillRect(0, 0, size().width, size().height); return; } g.drawImage(bg, 0, 0, this); if 
(tracker.statusID(1, false) == MediaTracker.COMPLETE) { g.drawImage(anim[index], 10, 10, this); } } } 



*int_java.awt.MediaTracker.ABORTED*

Flag indicating that the downloading of media was aborted. 


*int_java.awt.MediaTracker.COMPLETE*

Flag indicating that the downloading of media was completed successfully. 


*int_java.awt.MediaTracker.ERRORED*

Flag indicating that the downloading of media encountered an error. 


*int_java.awt.MediaTracker.LOADING*

Flag indicating that media is currently being loaded. 



*java.awt.MediaTracker(Component)*

public MediaTracker(java.awt.Component comp)

Creates a media tracker to track images for a given component. 

    comp - the component on which the images will eventually be drawn 

*java.awt.MediaTracker.addImage(Image,int)*

public void addImage(
  java.awt.Image image,
  int id)

Adds an image to the list of images being tracked by this media tracker. The image will eventually be rendered at its default (unscaled) size. 


    image - the image to be tracked 
    id - an identifier used to track this image 

*java.awt.MediaTracker.addImage(Image,int,int,int)*

public synchronized void addImage(
  java.awt.Image image,
  int id,
  int w,
  int h)

Adds a scaled image to the list of images being tracked by this media tracker. The image will eventually be rendered at the indicated width and height. 


    image - the image to be tracked 
    id - an identifier that can be used to track this image 
    w - the width at which the image is rendered 
    h - the height at which the image is rendered 

*java.awt.MediaTracker.checkAll()*

public boolean checkAll()

Checks to see if all images being tracked by this media tracker have finished loading. 

This method does not start loading the images if they are not already loading. 

If there is an error while loading or scaling an image, then that image is considered to have finished loading. Use the isErrorAny or isErrorID methods to check for errors. 



    Returns: true if all images have finished loading, have been aborted, or have encountered an error; false otherwise 

*java.awt.MediaTracker.checkAll(boolean)*

public boolean checkAll(boolean load)

Checks to see if all images being tracked by this media tracker have finished loading. 

If the value of the load flag is true, then this method starts loading any images that are not yet being loaded. 

If there is an error while loading or scaling an image, that image is considered to have finished loading. Use the isErrorAny and isErrorID methods to check for errors. 


    load - if true, start loading any images that are not yet being loaded 

    Returns: true if all images have finished loading, have been aborted, or have encountered an error; false otherwise 

*java.awt.MediaTracker.checkID(int)*

public boolean checkID(int id)

Checks to see if all images tracked by this media tracker that are tagged with the specified identifier have finished loading. 

This method does not start loading the images if they are not already loading. 

If there is an error while loading or scaling an image, then that image is considered to have finished loading. Use the isErrorAny or isErrorID methods to check for errors. 


    id - the identifier of the images to check 

    Returns: true if all images have finished loading, have been aborted, or have encountered an error; false otherwise 

*java.awt.MediaTracker.checkID(int,boolean)*

public boolean checkID(
  int id,
  boolean load)

Checks to see if all images tracked by this media tracker that are tagged with the specified identifier have finished loading. 

If the value of the load flag is true, then this method starts loading any images that are not yet being loaded. 

If there is an error while loading or scaling an image, then that image is considered to have finished loading. Use the isErrorAny or isErrorID methods to check for errors. 


    id - the identifier of the images to check 
    load - if true, start loading any images that are not yet being loaded 

    Returns: true if all images have finished loading, have been aborted, or have encountered an error; false otherwise 

*java.awt.MediaTracker.getErrorsAny()*

public synchronized |java.lang.Object|[] getErrorsAny()

Returns a list of all media that have encountered an error. 



    Returns: an array of media objects tracked by this media tracker that have encountered an error, or null if there are none with errors 

*java.awt.MediaTracker.getErrorsID(int)*

public synchronized |java.lang.Object|[] getErrorsID(int id)

Returns a list of media with the specified ID that have encountered an error. 


    id - the identifier of the images to check 

    Returns: an array of media objects tracked by this media tracker with the specified identifier that have encountered an error, or null if there are none with errors 

*java.awt.MediaTracker.isErrorAny()*

public synchronized boolean isErrorAny()

Checks the error status of all of the images. 



    Returns: true if any of the images tracked by this media tracker had an error during loading; false otherwise 

*java.awt.MediaTracker.isErrorID(int)*

public synchronized boolean isErrorID(int id)

Checks the error status of all of the images tracked by this media tracker with the specified identifier. 


    id - the identifier of the images to check 

    Returns: true if any of the images with the specified identifier had an error during loading; false otherwise 

*java.awt.MediaTracker.removeImage(Image)*

public synchronized void removeImage(java.awt.Image image)

Removes the specified image from this media tracker. All instances of the specified image are removed, regardless of scale or ID. 


    image - the image to be removed 

*java.awt.MediaTracker.removeImage(Image,int)*

public synchronized void removeImage(
  java.awt.Image image,
  int id)

Removes the specified image from the specified tracking ID of this media tracker. All instances of Image being tracked under the specified ID are removed regardless of scale. 


    image - the image to be removed 
    id - the tracking ID frrom which to remove the image 

*java.awt.MediaTracker.removeImage(Image,int,int,int)*

public synchronized void removeImage(
  java.awt.Image image,
  int id,
  int width,
  int height)

Removes the specified image with the specified width, height, and ID from this media tracker. Only the specified instance (with any duplicates) is removed. 


    image - the image to be removed 
    id - the tracking ID from which to remove the image 
    width - the width to remove (-1 for unscaled) 
    height - the height to remove (-1 for unscaled) 

*java.awt.MediaTracker.statusAll(boolean)*

public int statusAll(boolean load)

Calculates and returns the bitwise inclusive OR of the status of all media that are tracked by this media tracker. 

Possible flags defined by the MediaTracker class are LOADING, ABORTED, ERRORED, and COMPLETE. An image that hasn't started loading has zero as its status. 

If the value of load is true, then this method starts loading any images that are not yet being loaded. 


    load - if true, start loading any images that are not yet being loaded 

    Returns: the bitwise inclusive OR of the status of all of the media being tracked 

*java.awt.MediaTracker.statusID(int,boolean)*

public int statusID(
  int id,
  boolean load)

Calculates and returns the bitwise inclusive OR of the status of all media with the specified identifier that are tracked by this media tracker. 

Possible flags defined by the MediaTracker class are LOADING, ABORTED, ERRORED, and COMPLETE. An image that hasn't started loading has zero as its status. 

If the value of load is true, then this method starts loading any images that are not yet being loaded. 


    id - the identifier of the images to check 
    load - if true, start loading any images that are not yet being loaded 

    Returns: the bitwise inclusive OR of the status of all of the media with the specified identifier that are being tracked 

*java.awt.MediaTracker.waitForAll()*

public void waitForAll()
  throws |java.lang.InterruptedException|
         
Starts loading all images tracked by this media tracker. This method waits until all the images being tracked have finished loading. 

If there is an error while loading or scaling an image, then that image is considered to have finished loading. Use the isErrorAny or isErrorID methods to check for errors. 



*java.awt.MediaTracker.waitForAll(long)*

public synchronized boolean waitForAll(long ms)
  throws |java.lang.InterruptedException|
         
Starts loading all images tracked by this media tracker. This method waits until all the images being tracked have finished loading, or until the length of time specified in 
milliseconds by the ms argument has passed. 

If there is an error while loading or scaling an image, then that image is considered to have finished loading. Use the isErrorAny or isErrorID methods to check for errors. 


    ms - the number of milliseconds to wait for the loading to complete 

    Returns: true if all images were successfully loaded; false otherwise 

*java.awt.MediaTracker.waitForID(int)*

public void waitForID(int id)
  throws |java.lang.InterruptedException|
         
Starts loading all images tracked by this media tracker with the specified identifier. This method waits until all the images with the specified identifier have finished loading. 

If there is an error while loading or scaling an image, then that image is considered to have finished loading. Use the isErrorAny and isErrorID methods to check for errors. 


    id - the identifier of the images to check 

*java.awt.MediaTracker.waitForID(int,long)*

public synchronized boolean waitForID(
  int id,
  long ms)
  throws |java.lang.InterruptedException|
         
Starts loading all images tracked by this media tracker with the specified identifier. This method waits until all the images with the specified identifier have finished loading, 
or until the length of time specified in milliseconds by the ms argument has passed. 

If there is an error while loading or scaling an image, then that image is considered to have finished loading. Use the statusID, isErrorID, and isErrorAny methods to check for 
errors. 


    id - the identifier of the images to check 
    ms - the length of time, in milliseconds, to wait for the loading to complete 



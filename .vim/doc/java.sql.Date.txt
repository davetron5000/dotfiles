*java.sql.Date* *Date* A thin wrapper around a millisecond value that allows
 JD

public class Date
  extends    |java.util.Date|

|java.sql.Date_Description|
|java.sql.Date_Fields|
|java.sql.Date_Constructors|
|java.sql.Date_Methods|

================================================================================

*java.sql.Date_Constructors*
|java.sql.Date(int,int,int)|Constructs a Date object initialized with the given
|java.sql.Date(long)|Constructs a Date object using the given milliseconds   ti

*java.sql.Date_Methods*
|java.sql.Date.getHours()|This method is deprecated and should not be used beca
|java.sql.Date.getMinutes()|This method is deprecated and should not be used be
|java.sql.Date.getSeconds()|This method is deprecated and should not be used be
|java.sql.Date.setHours(int)|This method is deprecated and should not be used b
|java.sql.Date.setMinutes(int)|This method is deprecated and should not be used
|java.sql.Date.setSeconds(int)|This method is deprecated and should not be used
|java.sql.Date.setTime(long)|Sets an existing Date object   using the given mil
|java.sql.Date.toString()|Formats a date in the date escape format yyyy-mm-dd.
|java.sql.Date.valueOf(String)|Converts a string in JDBC date escape format to 

*java.sql.Date_Description*

A thin wrapper around a millisecond value that allows JDBC to identify this as 
an SQL DATE value. A milliseconds value represents the number of milliseconds 
that have passed since January 1, 1970 00:00:00.000 GMT. 

To conform with the definition of SQL DATE, the millisecond values wrapped by a 
java.sql.Date instance must be 'normalized' by setting the hours, minutes, 
seconds, and milliseconds to zero in the particular time zone with which the 
instance is associated. 


*java.sql.Date(int,int,int)*

public Date(
  int year,
  int month,
  int day)

Constructs a Date object initialized with the given year, month, and day. 

The result is undefined if a given argument is out of bounds. 

    year - the year minus 1900; must be 0 to 8099. (Note that 8099 is 9999 minus 1900.) 
    month - 0 to 11 
    day - 1 to 31 

*java.sql.Date(long)*

public Date(long date)

Constructs a Date object using the given milliseconds time value. If the given 
milliseconds value contains time information, the driver will set the time 
components to the time in the default time zone (the time zone of the Java 
virtual machine running the application) that corresponds to zero GMT. 

    date - milliseconds since January 1, 1970, 00:00:00 GMT not to exceed the milliseconds 
       representation for the year 8099. A negative number indicates the number 
       of milliseconds before January 1, 1970, 00:00:00 GMT. 

*java.sql.Date.getHours()*

public int getHours()

This method is deprecated and should not be used because SQL Date values do not 
have a time component. 


*java.sql.Date.getMinutes()*

public int getMinutes()

This method is deprecated and should not be used because SQL Date values do not 
have a time component. 


*java.sql.Date.getSeconds()*

public int getSeconds()

This method is deprecated and should not be used because SQL Date values do not 
have a time component. 


*java.sql.Date.setHours(int)*

public void setHours(int i)

This method is deprecated and should not be used because SQL Date values do not 
have a time component. 


*java.sql.Date.setMinutes(int)*

public void setMinutes(int i)

This method is deprecated and should not be used because SQL Date values do not 
have a time component. 


*java.sql.Date.setSeconds(int)*

public void setSeconds(int i)

This method is deprecated and should not be used because SQL Date values do not 
have a time component. 


*java.sql.Date.setTime(long)*

public void setTime(long date)

Sets an existing Date object using the given milliseconds time value. If the 
given milliseconds value contains time information, the driver will set the 
time components to the time in the default time zone (the time zone of the Java 
virtual machine running the application) that corresponds to zero GMT. 

    date - milliseconds since January 1, 1970, 00:00:00 GMT not to exceed the milliseconds 
       representation for the year 8099. A negative number indicates the number 
       of milliseconds before January 1, 1970, 00:00:00 GMT. 

*java.sql.Date.toString()*

public |java.lang.String| toString()

Formats a date in the date escape format yyyy-mm-dd. 

NOTE: To specify a date format for the class SimpleDateFormat, use "yyyy.MM.dd" 
rather than "yyyy-mm-dd". In the context of SimpleDateFormat, "mm" indicates 
minutes rather than the month. For example: 

Format Pattern Result -------------- ------- "yyyy.MM.dd G 'at' hh:mm:ss z" ->> 
1996.07.10 AD at 15:08:56 PDT 


    Returns: a String in yyyy-mm-dd format 
*java.sql.Date.valueOf(String)*

public static |java.sql.Date| valueOf(java.lang.String s)

Converts a string in JDBC date escape format to a Date value. 

    s - a String object representing a date in in the format "yyyy-mm-dd" 

    Returns: a java.sql.Date object representing the given date 


*javax.swing.JTable.AccessibleJTable* *JTable.AccessibleJTable* This class imple

protected class JTable.AccessibleJTable
  extends    |javax.swing.JComponent.AccessibleJComponent|
  implements |javax.accessibility.AccessibleSelection|
             |javax.swing.event.ListSelectionListener|
             |javax.swing.event.TableModelListener|
             |javax.swing.event.TableColumnModelListener|
             |javax.swing.event.CellEditorListener|
             |java.beans.PropertyChangeListener|
             |javax.accessibility.AccessibleExtendedTable|

|javax.swing.JTable.AccessibleJTable_Description|
|javax.swing.JTable.AccessibleJTable_Fields|
|javax.swing.JTable.AccessibleJTable_Constructors|
|javax.swing.JTable.AccessibleJTable_Methods|

================================================================================

*javax.swing.JTable.AccessibleJTable_Constructors*
|javax.swing.JTable.AccessibleJTable()|AccessibleJTable constructor

*javax.swing.JTable.AccessibleJTable_Methods*
|javax.swing.JTable.AccessibleJTable.addAccessibleSelection(int)|Adds the speci
|javax.swing.JTable.AccessibleJTable.clearAccessibleSelection()|Clears the sele
|javax.swing.JTable.AccessibleJTable.columnAdded(TableColumnModelEvent)|Track c
|javax.swing.JTable.AccessibleJTable.columnMarginChanged(ChangeEvent)|Track cha
|javax.swing.JTable.AccessibleJTable.columnMoved(TableColumnModelEvent)|Track c
|javax.swing.JTable.AccessibleJTable.columnRemoved(TableColumnModelEvent)|Track
|javax.swing.JTable.AccessibleJTable.columnSelectionChanged(ListSelectionEvent)|
|javax.swing.JTable.AccessibleJTable.editingCanceled(ChangeEvent)|Invoked when 
|javax.swing.JTable.AccessibleJTable.editingStopped(ChangeEvent)|Track changes 
|javax.swing.JTable.AccessibleJTable.getAccessibleAt(int,int)|
|javax.swing.JTable.AccessibleJTable.getAccessibleAt(Point)|Returns the Accessi
|javax.swing.JTable.AccessibleJTable.getAccessibleCaption()|Returns the caption
|javax.swing.JTable.AccessibleJTable.getAccessibleChild(int)|Returns the nth Ac
|javax.swing.JTable.AccessibleJTable.getAccessibleChildrenCount()|Returns the n
|javax.swing.JTable.AccessibleJTable.getAccessibleColumn(int)|Returns the colum
|javax.swing.JTable.AccessibleJTable.getAccessibleColumnAtIndex(int)|Returns th
|javax.swing.JTable.AccessibleJTable.getAccessibleColumnCount()|
|javax.swing.JTable.AccessibleJTable.getAccessibleColumnDescription(int)|Return
|javax.swing.JTable.AccessibleJTable.getAccessibleColumnExtentAt(int,int)|Retur
|javax.swing.JTable.AccessibleJTable.getAccessibleColumnHeader()|Returns the co
|javax.swing.JTable.AccessibleJTable.getAccessibleIndex(int,int)|Returns the in
|javax.swing.JTable.AccessibleJTable.getAccessibleIndexAt(int,int)|Returns the 
|javax.swing.JTable.AccessibleJTable.getAccessibleRole()|Gets the role of this 
|javax.swing.JTable.AccessibleJTable.getAccessibleRow(int)|Returns the row numb
|javax.swing.JTable.AccessibleJTable.getAccessibleRowAtIndex(int)|Returns the r
|javax.swing.JTable.AccessibleJTable.getAccessibleRowCount()|
|javax.swing.JTable.AccessibleJTable.getAccessibleRowDescription(int)|Returns t
|javax.swing.JTable.AccessibleJTable.getAccessibleRowExtentAt(int,int)|Returns 
|javax.swing.JTable.AccessibleJTable.getAccessibleRowHeader()|Returns the row h
|javax.swing.JTable.AccessibleJTable.getAccessibleSelection()|Get the Accessibl
|javax.swing.JTable.AccessibleJTable.getAccessibleSelection(int)|Returns an Acc
|javax.swing.JTable.AccessibleJTable.getAccessibleSelectionCount()|Returns the 
|javax.swing.JTable.AccessibleJTable.getAccessibleSummary()|Returns the summary
|javax.swing.JTable.AccessibleJTable.getAccessibleTable()|Gets the AccessibleTa
|javax.swing.JTable.AccessibleJTable.getSelectedAccessibleColumns()|Returns the
|javax.swing.JTable.AccessibleJTable.getSelectedAccessibleRows()|Returns the se
|javax.swing.JTable.AccessibleJTable.isAccessibleChildSelected(int)|Determines 
|javax.swing.JTable.AccessibleJTable.isAccessibleColumnSelected(int)|Returns a 
|javax.swing.JTable.AccessibleJTable.isAccessibleRowSelected(int)|Returns a boo
|javax.swing.JTable.AccessibleJTable.isAccessibleSelected(int,int)|Returns a bo
|javax.swing.JTable.AccessibleJTable.propertyChange(PropertyChangeEvent)|Track 
|javax.swing.JTable.AccessibleJTable.removeAccessibleSelection(int)|Removes the
|javax.swing.JTable.AccessibleJTable.selectAllAccessibleSelection()|Causes ever
|javax.swing.JTable.AccessibleJTable.setAccessibleCaption(Accessible)|Sets the 
|javax.swing.JTable.AccessibleJTable.setAccessibleColumnDescription(int,Accessible)|
|javax.swing.JTable.AccessibleJTable.setAccessibleColumnHeader(AccessibleTable)|
|javax.swing.JTable.AccessibleJTable.setAccessibleRowDescription(int,Accessible)|
|javax.swing.JTable.AccessibleJTable.setAccessibleRowHeader(AccessibleTable)|Re
|javax.swing.JTable.AccessibleJTable.setAccessibleSummary(Accessible)|Sets the 
|javax.swing.JTable.AccessibleJTable.tableChanged(TableModelEvent)|Track change
|javax.swing.JTable.AccessibleJTable.tableRowsDeleted(TableModelEvent)|Track ch
|javax.swing.JTable.AccessibleJTable.tableRowsInserted(TableModelEvent)|Track c
|javax.swing.JTable.AccessibleJTable.valueChanged(ListSelectionEvent)|Track cha

*javax.swing.JTable.AccessibleJTable_Description*

This class implements accessibility support for the JTable class. It provides 
an implementation of the Java Accessibility API appropriate to table 
user-interface elements. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JTable.AccessibleJTable()*

protected JTable.AccessibleJTable()

AccessibleJTable constructor 


*javax.swing.JTable.AccessibleJTable.addAccessibleSelection(int)*

public void addAccessibleSelection(int i)

Adds the specified Accessible child of the object to the object's selection. If 
the object supports multiple selections, the specified child is added to any 
existing selection, otherwise it replaces any existing selection in the object. 
If the specified child is already selected, this method has no effect. 

This method only works on JTables which have individual cell selection enabled. 

    i - the zero-based index of the child 

*javax.swing.JTable.AccessibleJTable.clearAccessibleSelection()*

public void clearAccessibleSelection()

Clears the selection in the object, so that no children in the object are 
selected. 


*javax.swing.JTable.AccessibleJTable.columnAdded(TableColumnModelEvent)*

public void columnAdded(javax.swing.event.TableColumnModelEvent e)

Track changes to the table contents (column insertions) 


*javax.swing.JTable.AccessibleJTable.columnMarginChanged(ChangeEvent)*

public void columnMarginChanged(javax.swing.event.ChangeEvent e)

Track changes of a column moving due to margin changes. 


*javax.swing.JTable.AccessibleJTable.columnMoved(TableColumnModelEvent)*

public void columnMoved(javax.swing.event.TableColumnModelEvent e)

Track changes of a column repositioning. 


*javax.swing.JTable.AccessibleJTable.columnRemoved(TableColumnModelEvent)*

public void columnRemoved(javax.swing.event.TableColumnModelEvent e)

Track changes to the table contents (column deletions) 


*javax.swing.JTable.AccessibleJTable.columnSelectionChanged(ListSelectionEvent)*

public void columnSelectionChanged(javax.swing.event.ListSelectionEvent e)

Track that the selection model of the TableColumnModel changed. 


*javax.swing.JTable.AccessibleJTable.editingCanceled(ChangeEvent)*

public void editingCanceled(javax.swing.event.ChangeEvent e)

Invoked when editing is canceled. The editor object is discarded and the cell 
is rendered once again. 


*javax.swing.JTable.AccessibleJTable.editingStopped(ChangeEvent)*

public void editingStopped(javax.swing.event.ChangeEvent e)

Track changes to a cell's contents. 

Invoked when editing is finished. The changes are saved, the editor object is 
discarded, and the cell is rendered once again. 


*javax.swing.JTable.AccessibleJTable.getAccessibleAt(int,int)*

public |javax.accessibility.Accessible| getAccessibleAt(
  int r,
  int c)




*javax.swing.JTable.AccessibleJTable.getAccessibleAt(Point)*

public |javax.accessibility.Accessible| getAccessibleAt(java.awt.Point p)

Returns the Accessible child, if one exists, contained at the local coordinate 
Point. 

    p - the point defining the top-left corner of the Accessible, given in the 
       coordinate space of the object's parent 

    Returns: the Accessible, if it exists, at the specified location; else null 
*javax.swing.JTable.AccessibleJTable.getAccessibleCaption()*

public |javax.accessibility.Accessible| getAccessibleCaption()

Returns the caption for the table. 


    Returns: the caption for the table 
*javax.swing.JTable.AccessibleJTable.getAccessibleChild(int)*

public |javax.accessibility.Accessible| getAccessibleChild(int i)

Returns the nth Accessible child of the object. 

    i - zero-based index of child 

    Returns: the nth Accessible child of the object 
*javax.swing.JTable.AccessibleJTable.getAccessibleChildrenCount()*

public int getAccessibleChildrenCount()

Returns the number of accessible children in the object. If all of the children 
of this object implement Accessible, then this method should return the number 
of children of this object. 


    Returns: the number of accessible children in the object 
*javax.swing.JTable.AccessibleJTable.getAccessibleColumn(int)*

public int getAccessibleColumn(int index)

Returns the column number of an index in the table. 

    index - the zero-based index in the table 

    Returns: the zero-based column of the table if one exists; otherwise -1. 
*javax.swing.JTable.AccessibleJTable.getAccessibleColumnAtIndex(int)*

public int getAccessibleColumnAtIndex(int i)

Returns the column at a given index into the table. 

    i - zero-based index into the table 

    Returns: the column at a given index 
*javax.swing.JTable.AccessibleJTable.getAccessibleColumnCount()*

public int getAccessibleColumnCount()




*javax.swing.JTable.AccessibleJTable.getAccessibleColumnDescription(int)*

public |javax.accessibility.Accessible| getAccessibleColumnDescription(int c)

Returns the description of the specified column in the table. 

    c - zero-based column of the table 

    Returns: the description of the column 
*javax.swing.JTable.AccessibleJTable.getAccessibleColumnExtentAt(int,int)*

public int getAccessibleColumnExtentAt(
  int r,
  int c)

Returns the number of columns occupied by the Accessible at a given (row, 
column). 


    Returns: the number of columns occupied by the Accessible at a specified row and column 
             in the table 
*javax.swing.JTable.AccessibleJTable.getAccessibleColumnHeader()*

public |javax.accessibility.AccessibleTable| getAccessibleColumnHeader()

Returns the column headers as an AccessibleTable. 


    Returns: an AccessibleTable representing the column headers, or null if the table header 
             is null 
*javax.swing.JTable.AccessibleJTable.getAccessibleIndex(int,int)*

public int getAccessibleIndex(
  int r,
  int c)

Returns the index at a row and column in the table. 

    r - zero-based row of the table 
    c - zero-based column of the table 

    Returns: the zero-based index in the table if one exists; otherwise -1. 
*javax.swing.JTable.AccessibleJTable.getAccessibleIndexAt(int,int)*

public int getAccessibleIndexAt(
  int r,
  int c)

Returns the index at a given (row, column) in the table. 

    r - zero-based row of the table 
    c - zero-based column of the table 

    Returns: the index into the table 
*javax.swing.JTable.AccessibleJTable.getAccessibleRole()*

public |javax.accessibility.AccessibleRole| getAccessibleRole()

Gets the role of this object. 


    Returns: an instance of AccessibleRole describing the role of the object 
*javax.swing.JTable.AccessibleJTable.getAccessibleRow(int)*

public int getAccessibleRow(int index)

Returns the row number of an index in the table. 

    index - the zero-based index in the table 

    Returns: the zero-based row of the table if one exists; otherwise -1. 
*javax.swing.JTable.AccessibleJTable.getAccessibleRowAtIndex(int)*

public int getAccessibleRowAtIndex(int i)

Returns the row at a given index into the table. 

    i - zero-based index into the table 

    Returns: the row at a given index 
*javax.swing.JTable.AccessibleJTable.getAccessibleRowCount()*

public int getAccessibleRowCount()




*javax.swing.JTable.AccessibleJTable.getAccessibleRowDescription(int)*

public |javax.accessibility.Accessible| getAccessibleRowDescription(int r)

Returns the description of the specified row in the table. 

    r - zero-based row of the table 

    Returns: the description of the row 
*javax.swing.JTable.AccessibleJTable.getAccessibleRowExtentAt(int,int)*

public int getAccessibleRowExtentAt(
  int r,
  int c)

Returns the number of rows occupied by the Accessible at a specified row and 
column in the table. 


    Returns: the number of rows occupied by the Accessible at a specified row and column in 
             the table 
*javax.swing.JTable.AccessibleJTable.getAccessibleRowHeader()*

public |javax.accessibility.AccessibleTable| getAccessibleRowHeader()

Returns the row headers as an AccessibleTable. 


    Returns: an AccessibleTable representing the row headers 
*javax.swing.JTable.AccessibleJTable.getAccessibleSelection()*

public |javax.accessibility.AccessibleSelection| getAccessibleSelection()

Get the AccessibleSelection associated with this object. In the implementation 
of the Java Accessibility API for this class, return this object, which is 
responsible for implementing the AccessibleSelection interface on behalf of 
itself. 


    Returns: 
*javax.swing.JTable.AccessibleJTable.getAccessibleSelection(int)*

public |javax.accessibility.Accessible| getAccessibleSelection(int i)

Returns an Accessible representing the specified selected child in the object. 
If there isn't a selection, or there are fewer children selected than the 
integer passed in, the return value will be null. Note that the index 
represents the i-th selected child, which is different from the i-th child. 

    i - the zero-based index of selected children 

    Returns: the i-th selected child 
*javax.swing.JTable.AccessibleJTable.getAccessibleSelectionCount()*

public int getAccessibleSelectionCount()

Returns the number of Accessible children currently selected. If no children 
are selected, the return value will be 0. 


    Returns: the number of items currently selected 
*javax.swing.JTable.AccessibleJTable.getAccessibleSummary()*

public |javax.accessibility.Accessible| getAccessibleSummary()

Returns the summary description of the table. 


    Returns: the summary description of the table 
*javax.swing.JTable.AccessibleJTable.getAccessibleTable()*

public |javax.accessibility.AccessibleTable| getAccessibleTable()

Gets the AccessibleTable associated with this object. In the implementation of 
the Java Accessibility API for this class, return this object, which is 
responsible for implementing the AccessibleTables interface on behalf of 
itself. 


    Returns: 
*javax.swing.JTable.AccessibleJTable.getSelectedAccessibleColumns()*

public int getSelectedAccessibleColumns()

Returns the selected columns in a table. 


    Returns: an array of selected columns where each element is a zero-based column of the 
             table 
*javax.swing.JTable.AccessibleJTable.getSelectedAccessibleRows()*

public int getSelectedAccessibleRows()

Returns the selected rows in a table. 


    Returns: an array of selected rows where each element is a zero-based row of the table 
*javax.swing.JTable.AccessibleJTable.isAccessibleChildSelected(int)*

public boolean isAccessibleChildSelected(int i)

Determines if the current child of this object is selected. 

    i - the zero-based index of the child in this Accessible object 

    Returns: true if the current child of this object is selected 
*javax.swing.JTable.AccessibleJTable.isAccessibleColumnSelected(int)*

public boolean isAccessibleColumnSelected(int c)

Returns a boolean value indicating whether the specified column is selected. 

    c - zero-based column of the table 

    Returns: the boolean value true if the specified column is selected; otherwise, false 
*javax.swing.JTable.AccessibleJTable.isAccessibleRowSelected(int)*

public boolean isAccessibleRowSelected(int r)

Returns a boolean value indicating whether the specified row is selected. 

    r - zero-based row of the table 

    Returns: the boolean value true if the specified row is selected; otherwise, false 
*javax.swing.JTable.AccessibleJTable.isAccessibleSelected(int,int)*

public boolean isAccessibleSelected(
  int r,
  int c)

Returns a boolean value indicating whether the accessible at a given (row, 
column) is selected. 

    r - zero-based row of the table 
    c - zero-based column of the table 

    Returns: the boolean value true if the accessible at (row, column) is selected; 
             otherwise, the boolean value false 
*javax.swing.JTable.AccessibleJTable.propertyChange(PropertyChangeEvent)*

public void propertyChange(java.beans.PropertyChangeEvent e)

Track changes to selection model, column model, etc. so as to be able to 
re-place listeners on those in order to pass on information to the 
Accessibility PropertyChange mechanism 


*javax.swing.JTable.AccessibleJTable.removeAccessibleSelection(int)*

public void removeAccessibleSelection(int i)

Removes the specified child of the object from the object's selection. If the 
specified item isn't currently selected, this method has no effect. 

This method only works on JTables which have individual cell selection enabled. 

    i - the zero-based index of the child 

*javax.swing.JTable.AccessibleJTable.selectAllAccessibleSelection()*

public void selectAllAccessibleSelection()

Causes every child of the object to be selected, but only if the JTable 
supports multiple selections, and if individual cell selection is enabled. 


*javax.swing.JTable.AccessibleJTable.setAccessibleCaption(Accessible)*

public void setAccessibleCaption(javax.accessibility.Accessible a)

Sets the caption for the table. 

    a - the caption for the table 

*javax.swing.JTable.AccessibleJTable.setAccessibleColumnDescription(int,Accessible)*

public void setAccessibleColumnDescription(
  int c,
  javax.accessibility.Accessible a)

Sets the description text of the specified column of the table. 

    c - zero-based column of the table 
    a - the description of the column 

*javax.swing.JTable.AccessibleJTable.setAccessibleColumnHeader(AccessibleTable)*

public void setAccessibleColumnHeader(javax.accessibility.AccessibleTable a)

Returns the column headers as an AccessibleTable. 


    Returns: an AccessibleTable representing the column headers 
*javax.swing.JTable.AccessibleJTable.setAccessibleRowDescription(int,Accessible)*

public void setAccessibleRowDescription(
  int r,
  javax.accessibility.Accessible a)

Sets the description text of the specified row of the table. 

    r - zero-based row of the table 
    a - the description of the row 

*javax.swing.JTable.AccessibleJTable.setAccessibleRowHeader(AccessibleTable)*

public void setAccessibleRowHeader(javax.accessibility.AccessibleTable a)

Returns the row headers as an AccessibleTable. 


    Returns: an AccessibleTable representing the row headers 
*javax.swing.JTable.AccessibleJTable.setAccessibleSummary(Accessible)*

public void setAccessibleSummary(javax.accessibility.Accessible a)

Sets the summary description of the table. 

    a - the summary description of the table 

*javax.swing.JTable.AccessibleJTable.tableChanged(TableModelEvent)*

public void tableChanged(javax.swing.event.TableModelEvent e)

Track changes to the table contents 


*javax.swing.JTable.AccessibleJTable.tableRowsDeleted(TableModelEvent)*

public void tableRowsDeleted(javax.swing.event.TableModelEvent e)

Track changes to the table contents (row deletions) 


*javax.swing.JTable.AccessibleJTable.tableRowsInserted(TableModelEvent)*

public void tableRowsInserted(javax.swing.event.TableModelEvent e)

Track changes to the table contents (row insertions) 


*javax.swing.JTable.AccessibleJTable.valueChanged(ListSelectionEvent)*

public void valueChanged(javax.swing.event.ListSelectionEvent e)

Track changes to table cell selections 




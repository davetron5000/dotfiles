*java.util.zip.Adler32* *Adler32* A class that can be used to compute the Adler-

public class Adler32
  extends    |java.lang.Object|
  implements |java.util.zip.Checksum|

|java.util.zip.Adler32_Description|
|java.util.zip.Adler32_Fields|
|java.util.zip.Adler32_Constructors|
|java.util.zip.Adler32_Methods|

================================================================================

*java.util.zip.Adler32_Constructors*
|java.util.zip.Adler32()|Creates a new Adler32 object.

*java.util.zip.Adler32_Methods*
|java.util.zip.Adler32.getValue()|Returns checksum value.
|java.util.zip.Adler32.reset()|Resets checksum to initial value.
|java.util.zip.Adler32.update(byte[])|Updates checksum with specified array of 
|java.util.zip.Adler32.update(byte[],int,int)|Updates checksum with specified a
|java.util.zip.Adler32.update(int)|Updates checksum with specified byte.

*java.util.zip.Adler32_Description*

A class that can be used to compute the Adler-32 checksum of a data stream. An 
Adler-32 checksum is almost as reliable as a CRC-32 but can be computed much 
faster. 


*java.util.zip.Adler32()*

public Adler32()

Creates a new Adler32 object. 


*java.util.zip.Adler32.getValue()*

public long getValue()

Returns checksum value. 


*java.util.zip.Adler32.reset()*

public void reset()

Resets checksum to initial value. 


*java.util.zip.Adler32.update(byte[])*

public void update(byte[] b)

Updates checksum with specified array of bytes. 


*java.util.zip.Adler32.update(byte[],int,int)*

public void update(
  byte[] b,
  int off,
  int len)

Updates checksum with specified array of bytes. 


*java.util.zip.Adler32.update(int)*

public void update(int b)

Updates checksum with specified byte. 

    b - an array of bytes 



*javax.accessibility.AccessibleContext* *AccessibleContext* AccessibleContext represents the minimum information all accessible objects
 return.

public abstract class AccessibleContext
  extends    |java.lang.Object|

|javax.accessibility.AccessibleContext_Description|
|javax.accessibility.AccessibleContext_Fields|
|javax.accessibility.AccessibleContext_Constructors|
|javax.accessibility.AccessibleContext_Methods|

====================================================================================================================================================================================

*javax.accessibility.AccessibleContext_Fields*
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_ACTION_PROPERTY|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_CARET_PROPERTY|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_CHILD_PROPERTY|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_COMPONENT_BOUNDS_CHANGED|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_DESCRIPTION_PROPERTY|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_HYPERTEXT_OFFSET|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_INVALIDATE_CHILDREN|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_NAME_PROPERTY|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_STATE_PROPERTY|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_CAPTION_CHANGED|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_COLUMN_HEADER_CHANGED|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_MODEL_CHANGED|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_ROW_HEADER_CHANGED|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_SUMMARY_CHANGED|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TEXT_ATTRIBUTES_CHANGED|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TEXT_PROPERTY|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_VALUE_PROPERTY|
|java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY|
|java.lang.String_javax.accessibility.AccessibleContext.accessibleDescription|
|java.lang.String_javax.accessibility.AccessibleContext.accessibleName|
|javax.accessibility.Accessible_javax.accessibility.AccessibleContext.accessibleParent|

*javax.accessibility.AccessibleContext_Constructors*
|javax.accessibility.AccessibleContext()|

*javax.accessibility.AccessibleContext_Methods*
|javax.accessibility.AccessibleContext.addPropertyChangeListener(PropertyChangeListener)|Adds a PropertyChangeListener to the listener list.
|javax.accessibility.AccessibleContext.firePropertyChange(String,Object,Object)|Support for reporting bound property changes.
|javax.accessibility.AccessibleContext.getAccessibleAction()|Gets the AccessibleAction associated with this object that supports  one or more actions.
|javax.accessibility.AccessibleContext.getAccessibleChild(int)|Returns the specified Accessible child of the object.
|javax.accessibility.AccessibleContext.getAccessibleChildrenCount()|Returns the number of accessible children of the object.
|javax.accessibility.AccessibleContext.getAccessibleComponent()|Gets the AccessibleComponent associated with this object that has a   graphical representation.
|javax.accessibility.AccessibleContext.getAccessibleDescription()|Gets the accessibleDescription property of this object.
|javax.accessibility.AccessibleContext.getAccessibleEditableText()|Gets the AccessibleEditableText associated with this object   presenting editable text on the display.
|javax.accessibility.AccessibleContext.getAccessibleIcon()|Gets the AccessibleIcons associated with an object that has  one or more associated icons
|javax.accessibility.AccessibleContext.getAccessibleIndexInParent()|Gets the 0-based index of this object in its accessible parent.
|javax.accessibility.AccessibleContext.getAccessibleName()|Gets the accessibleName property of this object.
|javax.accessibility.AccessibleContext.getAccessibleParent()|Gets the Accessible parent of this object.
|javax.accessibility.AccessibleContext.getAccessibleRelationSet()|Gets the AccessibleRelationSet associated with an object
|javax.accessibility.AccessibleContext.getAccessibleRole()|Gets the role of this object.
|javax.accessibility.AccessibleContext.getAccessibleSelection()|Gets the AccessibleSelection associated with this object which allows its  Accessible children to be selected.
|javax.accessibility.AccessibleContext.getAccessibleStateSet()|Gets the state set of this object.
|javax.accessibility.AccessibleContext.getAccessibleTable()|Gets the AccessibleTable associated with an object
|javax.accessibility.AccessibleContext.getAccessibleText()|Gets the AccessibleText associated with this object presenting   text on the display.
|javax.accessibility.AccessibleContext.getAccessibleValue()|Gets the AccessibleValue associated with this object that supports a   Numerical value.
|javax.accessibility.AccessibleContext.getLocale()|Gets the locale of the component.
|javax.accessibility.AccessibleContext.removePropertyChangeListener(PropertyChangeListener)|Removes a PropertyChangeListener from the listener list.
|javax.accessibility.AccessibleContext.setAccessibleDescription(String)|Sets the accessible description of this object.
|javax.accessibility.AccessibleContext.setAccessibleName(String)|Sets the localized accessible name of this object.
|javax.accessibility.AccessibleContext.setAccessibleParent(Accessible)|Sets the Accessible parent of this object.

*javax.accessibility.AccessibleContext_Description*

AccessibleContext represents the minimum information all accessible objects return. This information includes the accessible name, description, role, and state of the object, as 
well as information about its parent and children. AccessibleContext also contains methods for obtaining more specific accessibility information about a component. If the 
component supports them, these methods will return an object that implements one or more of the following interfaces: 

(|javax.accessibility.AccessibleAction|) - the object can perform one or more actions. This interface provides the standard mechanism for an assistive technology to determine what 
those actions are and tell the object to perform them. Any object that can be manipulated should support this interface. (|javax.accessibility.AccessibleComponent|) - the object 
has a graphical representation. This interface provides the standard mechanism for an assistive technology to determine and set the graphical representation of the object. Any 
object that is rendered on the screen should support this interface. (|javax.accessibility.AccessibleSelection|) - the object allows its children to be selected. This interface 
provides the standard mechanism for an assistive technology to determine the currently selected children of the object as well as modify its selection set. Any object that has 
children that can be selected should support this interface. (|javax.accessibility.AccessibleText|) - the object presents editable textual information on the display. This 
interface provides the standard mechanism for an assistive technology to access that text via its content, attributes, and spatial location. Any object that contains editable text 
should support this interface. (|javax.accessibility.AccessibleValue|) - the object supports a numerical value. This interface provides the standard mechanism for an assistive 
technology to determine and set the current value of the object, as well as obtain its minimum and maximum values. Any object that supports a numerical value should support this 
interface. 



*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_ACTION_PROPERTY*

Constant used to indicate that the supported set of actions has changed. The old value in the PropertyChangeEvent will be an Integer representing the old number of actions 
supported and the new value will be an Integer representing the new number of actions supported. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY*

Constant used to determine when the active descendant of a component has changed. The active descendant is used for objects such as list, tree, and table, which may have transient 
children. When the active descendant has changed, the old value of the property change event will be the Accessible representing the previous active child, and the new value will 
be the Accessible representing the current active child. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_CARET_PROPERTY*

Constant used to determine when the accessibleText caret has changed. The old value in the PropertyChangeEvent will be an integer representing the old caret position, and the new 
value will be an integer representing the new/current caret position. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_CHILD_PROPERTY*

Constant used to determine when Accessible children are added/removed from the object. If an Accessible child is being added, the old value will be null and the new value will be 
the Accessible child. If an Accessible child is being removed, the old value will be the Accessible child, and the new value will be null. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_COMPONENT_BOUNDS_CHANGED*

PropertyChangeEvent which indicates that a change has occurred in a component's bounds. The oldValue is the old component bounds and the newValue is the new component bounds. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_DESCRIPTION_PROPERTY*

Constant used to determine when the accessibleDescription property has changed. The old value in the PropertyChangeEvent will be the old accessibleDescription and the new value 
will be the new accessibleDescription. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_HYPERTEXT_OFFSET*

Constant used to indicate that a hypertext element has received focus. The old value in the PropertyChangeEvent will be an Integer representing the start index in the document of 
the previous element that had focus and the new value will be an Integer representing the start index in the document of the current element that has focus. A value of -1 
indicates that an element does not or did not have focus. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_INVALIDATE_CHILDREN*

PropertyChangeEvent which indicates that a significant change has occurred to the children of a component like a tree or text. This change notifies the event listener that it 
needs to reacquire the state of the subcomponents. The oldValue is null and the newValue is the component whose children have become invalid. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_NAME_PROPERTY*

Constant used to determine when the accessibleName property has changed. The old value in the PropertyChangeEvent will be the old accessibleName and the new value will be the new 
accessibleName. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY*

Constant used to determine when the accessibleSelection has changed. The old and new values in the PropertyChangeEvent are currently reserved for future use. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_STATE_PROPERTY*

Constant used to determine when the accessibleStateSet property has changed. The old value will be the old AccessibleState and the new value will be the new AccessibleState in the 
accessibleStateSet. For example, if a component that supports the vertical and horizontal states changes its orientation from vertical to horizontal, the old value will be 
AccessibleState.VERTICAL and the new value will be AccessibleState.HORIZONTAL. Please note that either value can also be null. For example, when a component changes from being 
enabled to disabled, the old value will be AccessibleState.ENABLED and the new value will be null. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_CAPTION_CHANGED*

Constant used to indicate that the table caption has changed The old value in the PropertyChangeEvent will be an Accessible representing the previous table caption and the new 
value will be an Accessible representing the new table caption. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED*

Constant used to indicate that the column description has changed The old value in the PropertyChangeEvent will be null and the new value will be an Integer representing the 
column index. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_COLUMN_HEADER_CHANGED*

Constant used to indicate that the column header has changed The old value in the PropertyChangeEvent will be null and the new value will be an AccessibleTableModelChange 
representing the header change. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_MODEL_CHANGED*

Constant used to indicate that table data has changed. The old value in the PropertyChangeEvent will be null and the new value will be an AccessibleTableModelChange representing 
the table change. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED*

Constant used to indicate that the row description has changed The old value in the PropertyChangeEvent will be null and the new value will be an Integer representing the row 
index. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_ROW_HEADER_CHANGED*

Constant used to indicate that the row header has changed The old value in the PropertyChangeEvent will be null and the new value will be an AccessibleTableModelChange 
representing the header change. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_SUMMARY_CHANGED*

Constant used to indicate that the table summary has changed The old value in the PropertyChangeEvent will be an Accessible representing the previous table summary and the new 
value will be an Accessible representing the new table summary. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TEXT_ATTRIBUTES_CHANGED*

PropertyChangeEvent which indicates that text attributes have changed. 

For attribute insertion, the oldValue is null and the newValue is an AccessibleAttributeSequence specifying the attributes that were inserted. 

For attribute deletion, the oldValue is an AccessibleAttributeSequence specifying the attributes that were deleted and the newValue is null. 

For attribute replacement, the oldValue is an AccessibleAttributeSequence specifying the old attributes and the newValue is an AccessibleAttributeSequence specifying the new 
attributes. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_TEXT_PROPERTY*

PropertyChangeEvent which indicates that text has changed. 

For text insertion, the oldValue is null and the newValue is an AccessibleTextSequence specifying the text that was inserted. 

For text deletion, the oldValue is an AccessibleTextSequence specifying the text that was deleted and the newValue is null. 

For text replacement, the oldValue is an AccessibleTextSequence specifying the old text and the newValue is an AccessibleTextSequence specifying the new text. 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_VALUE_PROPERTY*

Constant used to determine when the accessibleValue property has changed. The old value in the PropertyChangeEvent will be a Number representing the old value and the new value 
will be a Number representing the new value 


*java.lang.String_javax.accessibility.AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY*

Constant used to determine when the visual appearance of the object has changed. The old and new values in the PropertyChangeEvent are currently reserved for future use. 


*java.lang.String_javax.accessibility.AccessibleContext.accessibleDescription*

A localized String containing the description of the object. 


*java.lang.String_javax.accessibility.AccessibleContext.accessibleName*

A localized String containing the name of the object. 


*javax.accessibility.Accessible_javax.accessibility.AccessibleContext.accessibleParent*

The accessible parent of this object. 



*javax.accessibility.AccessibleContext()*

public AccessibleContext()




*javax.accessibility.AccessibleContext.addPropertyChangeListener(PropertyChangeListener)*

public void addPropertyChangeListener(java.beans.PropertyChangeListener listener)

Adds a PropertyChangeListener to the listener list. The listener is registered for all Accessible properties and will be called when those properties change. 


    listener - The PropertyChangeListener to be added 

*javax.accessibility.AccessibleContext.firePropertyChange(String,Object,Object)*

public void firePropertyChange(
  java.lang.String propertyName,
  java.lang.Object oldValue,
  java.lang.Object newValue)

Support for reporting bound property changes. If oldValue and newValue are not equal and the PropertyChangeEvent listener list is not empty, then fire a PropertyChange event to 
each listener. In general, this is for use by the Accessible objects themselves and should not be called by an application program. 


    propertyName - The programmatic name of the property that was changed. 
    oldValue - The old value of the property. 
    newValue - The new value of the property. 

*javax.accessibility.AccessibleContext.getAccessibleAction()*

public |javax.accessibility.AccessibleAction| getAccessibleAction()

Gets the AccessibleAction associated with this object that supports one or more actions. 



    Returns: AccessibleAction if supported by object; else return null 

*javax.accessibility.AccessibleContext.getAccessibleChild(int)*

public abstract |javax.accessibility.Accessible| getAccessibleChild(int i)

Returns the specified Accessible child of the object. The Accessible children of an Accessible object are zero-based, so the first child of an Accessible child is at index 0, the 
second child is at index 1, and so on. 


    i - zero-based index of child 

    Returns: the Accessible child of the object 

*javax.accessibility.AccessibleContext.getAccessibleChildrenCount()*

public abstract int getAccessibleChildrenCount()

Returns the number of accessible children of the object. 



    Returns: the number of accessible children of the object. 

*javax.accessibility.AccessibleContext.getAccessibleComponent()*

public |javax.accessibility.AccessibleComponent| getAccessibleComponent()

Gets the AccessibleComponent associated with this object that has a graphical representation. 



    Returns: AccessibleComponent if supported by object; else return null 

*javax.accessibility.AccessibleContext.getAccessibleDescription()*

public |java.lang.String| getAccessibleDescription()

Gets the accessibleDescription property of this object. The accessibleDescription property of this object is a short localized phrase describing the purpose of the object. For 
example, in the case of a 'Cancel' button, the accessibleDescription could be 'Ignore changes and close dialog box.' 



    Returns: the localized description of the object; null if this object does not have a description 

*javax.accessibility.AccessibleContext.getAccessibleEditableText()*

public |javax.accessibility.AccessibleEditableText| getAccessibleEditableText()

Gets the AccessibleEditableText associated with this object presenting editable text on the display. 



    Returns: AccessibleEditableText if supported by object; else return null 

*javax.accessibility.AccessibleContext.getAccessibleIcon()*

public |javax.accessibility.AccessibleIcon|[] getAccessibleIcon()

Gets the AccessibleIcons associated with an object that has one or more associated icons 



    Returns: an array of AccessibleIcon if supported by object; otherwise return null 

*javax.accessibility.AccessibleContext.getAccessibleIndexInParent()*

public abstract int getAccessibleIndexInParent()

Gets the 0-based index of this object in its accessible parent. 



    Returns: the 0-based index of this object in its parent; -1 if this object does not have an accessible parent. 

*javax.accessibility.AccessibleContext.getAccessibleName()*

public |java.lang.String| getAccessibleName()

Gets the accessibleName property of this object. The accessibleName property of an object is a localized String that designates the purpose of the object. For example, the 
accessibleName property of a label or button might be the text of the label or button itself. In the case of an object that doesn't display its name, the accessibleName should 
still be set. For example, in the case of a text field used to enter the name of a city, the accessibleName for the en_US locale could be 'city.' 



    Returns: the localized name of the object; null if this object does not have a name 

*javax.accessibility.AccessibleContext.getAccessibleParent()*

public |javax.accessibility.Accessible| getAccessibleParent()

Gets the Accessible parent of this object. 



    Returns: the Accessible parent of this object; null if this object does not have an Accessible parent 

*javax.accessibility.AccessibleContext.getAccessibleRelationSet()*

public |javax.accessibility.AccessibleRelationSet| getAccessibleRelationSet()

Gets the AccessibleRelationSet associated with an object 



    Returns: an AccessibleRelationSet if supported by object; otherwise return null 

*javax.accessibility.AccessibleContext.getAccessibleRole()*

public abstract |javax.accessibility.AccessibleRole| getAccessibleRole()

Gets the role of this object. The role of the object is the generic purpose or use of the class of this object. For example, the role of a push button is 
AccessibleRole.PUSH_BUTTON. The roles in AccessibleRole are provided so component developers can pick from a set of predefined roles. This enables assistive technologies to 
provide a consistent interface to various tweaked subclasses of components (e.g., use AccessibleRole.PUSH_BUTTON for all components that act like a push button) as well as 
distinguish between sublasses that behave differently (e.g., AccessibleRole.CHECK_BOX for check boxes and AccessibleRole.RADIO_BUTTON for radio buttons). Note that the 
AccessibleRole class is also extensible, so custom component developers can define their own AccessibleRole's if the set of predefined roles is inadequate. 



    Returns: an instance of AccessibleRole describing the role of the object 

*javax.accessibility.AccessibleContext.getAccessibleSelection()*

public |javax.accessibility.AccessibleSelection| getAccessibleSelection()

Gets the AccessibleSelection associated with this object which allows its Accessible children to be selected. 



    Returns: AccessibleSelection if supported by object; else return null 

*javax.accessibility.AccessibleContext.getAccessibleStateSet()*

public abstract |javax.accessibility.AccessibleStateSet| getAccessibleStateSet()

Gets the state set of this object. The AccessibleStateSet of an object is composed of a set of unique AccessibleStates. A change in the AccessibleStateSet of an object will cause 
a PropertyChangeEvent to be fired for the ACCESSIBLE_STATE_PROPERTY property. 



    Returns: an instance of AccessibleStateSet containing the current state set of the object 

*javax.accessibility.AccessibleContext.getAccessibleTable()*

public |javax.accessibility.AccessibleTable| getAccessibleTable()

Gets the AccessibleTable associated with an object 



    Returns: an AccessibleTable if supported by object; otherwise return null 

*javax.accessibility.AccessibleContext.getAccessibleText()*

public |javax.accessibility.AccessibleText| getAccessibleText()

Gets the AccessibleText associated with this object presenting text on the display. 



    Returns: AccessibleText if supported by object; else return null 

*javax.accessibility.AccessibleContext.getAccessibleValue()*

public |javax.accessibility.AccessibleValue| getAccessibleValue()

Gets the AccessibleValue associated with this object that supports a Numerical value. 



    Returns: AccessibleValue if supported by object; else return null 

*javax.accessibility.AccessibleContext.getLocale()*

public abstract |java.util.Locale| getLocale()
  throws |java.awt.IllegalComponentStateException|
         
Gets the locale of the component. If the component does not have a locale, then the locale of its parent is returned. 



    Returns: this component's locale. If this component does not have a locale, the locale of its parent is returned. 

*javax.accessibility.AccessibleContext.removePropertyChangeListener(PropertyChangeListener)*

public void removePropertyChangeListener(java.beans.PropertyChangeListener listener)

Removes a PropertyChangeListener from the listener list. This removes a PropertyChangeListener that was registered for all properties. 


    listener - The PropertyChangeListener to be removed 

*javax.accessibility.AccessibleContext.setAccessibleDescription(String)*

public void setAccessibleDescription(java.lang.String s)

Sets the accessible description of this object. Changing the name will cause a PropertyChangeEvent to be fired for the ACCESSIBLE_DESCRIPTION_PROPERTY property. 


    s - the new localized description of the object 

*javax.accessibility.AccessibleContext.setAccessibleName(String)*

public void setAccessibleName(java.lang.String s)

Sets the localized accessible name of this object. Changing the name will cause a PropertyChangeEvent to be fired for the ACCESSIBLE_NAME_PROPERTY property. 


    s - the new localized name of the object. 

*javax.accessibility.AccessibleContext.setAccessibleParent(Accessible)*

public void setAccessibleParent(javax.accessibility.Accessible a)

Sets the Accessible parent of this object. This is meant to be used only in the situations where the actual component's parent should not be treated as the component's accessible 
parent and is a method that should only be called by the parent of the accessible child. 


    a - - Accessible to be set as the parent 



*java.io.File* *File* An abstract representation of file and directory pathnames.

public class File
  extends    |java.lang.Object|
  implements |java.io.Serializable|
             |java.lang.Comparable|

|java.io.File_Description|
|java.io.File_Fields|
|java.io.File_Constructors|
|java.io.File_Methods|

====================================================================================================================================================================================

*java.io.File_Fields*
|java.lang.String_java.io.File.pathSeparator|
|char_java.io.File.pathSeparatorChar|
|java.lang.String_java.io.File.separator|
|char_java.io.File.separatorChar|

*java.io.File_Constructors*
|java.io.File(File,String)|Creates a new File instance from a parent abstract  pathname and a child pathname string.
|java.io.File(String)|Creates a new File instance by converting the given  pathname string into an abstract pathname.
|java.io.File(String,String)|Creates a new File instance from a parent pathname string  and a child pathname string.
|java.io.File(URI)|Creates a new File instance by converting the given  file: URI into an abstract pathname.

*java.io.File_Methods*
|java.io.File.canRead()|Tests whether the application can read the file denoted by this  abstract pathname.
|java.io.File.canWrite()|Tests whether the application can modify the file denoted by this  abstract pathname.
|java.io.File.compareTo(File)|Compares two abstract pathnames lexicographically.
|java.io.File.createNewFile()|Atomically creates a new, empty file named by this abstract pathname if  and only if a file with this name does not yet exist.
|java.io.File.createTempFile(String,String)|Creates an empty file in the default temporary-file directory, using  the given prefix and suffix to generate its name.
|java.io.File.createTempFile(String,String,File)|Creates a new empty file in the specified directory, using the  given prefix and suffix strings to generate its name.
|java.io.File.delete()|Deletes the file or directory denoted by this abstract pathname.
|java.io.File.deleteOnExit()|Requests that the file or directory denoted by this abstract   pathname be deleted when the virtual machine terminates.
|java.io.File.equals(Object)|Tests this abstract pathname for equality with the given object.
|java.io.File.exists()|Tests whether the file or directory denoted by this abstract pathname  exists.
|java.io.File.getAbsoluteFile()|Returns the absolute form of this abstract pathname.
|java.io.File.getAbsolutePath()|Returns the absolute pathname string of this abstract pathname.
|java.io.File.getCanonicalFile()|Returns the canonical form of this abstract pathname.
|java.io.File.getCanonicalPath()|Returns the canonical pathname string of this abstract pathname.
|java.io.File.getName()|Returns the name of the file or directory denoted by this abstract  pathname.
|java.io.File.getParent()|Returns the pathname string of this abstract pathname's parent, or  null if this pathname does not name a parent directory.
|java.io.File.getParentFile()|Returns the abstract pathname of this abstract pathname's parent,  or null if this pathname does not name a parent  directory.
|java.io.File.getPath()|Converts this abstract pathname into a pathname string.
|java.io.File.hashCode()|Computes a hash code for this abstract pathname.
|java.io.File.isAbsolute()|Tests whether this abstract pathname is absolute.
|java.io.File.isDirectory()|Tests whether the file denoted by this abstract pathname is a  directory.
|java.io.File.isFile()|Tests whether the file denoted by this abstract pathname is a normal  file.
|java.io.File.isHidden()|Tests whether the file named by this abstract pathname is a hidden  file.
|java.io.File.lastModified()|Returns the time that the file denoted by this abstract pathname was  last modified.
|java.io.File.length()|Returns the length of the file denoted by this abstract pathname.
|java.io.File.list()|Returns an array of strings naming the files and directories in the  directory denoted by this abstract pathname.
|java.io.File.list(FilenameFilter)|Returns an array of strings naming the files and directories in the  directory denoted by this abstract pathname that satisfy the specified  fil
|java.io.File.listFiles()|Returns an array of abstract pathnames denoting the files in the  directory denoted by this abstract pathname.
|java.io.File.listFiles(FileFilter)|Returns an array of abstract pathnames denoting the files and  directories in the directory denoted by this abstract pathname that  satisfy the
|java.io.File.listFiles(FilenameFilter)|Returns an array of abstract pathnames denoting the files and  directories in the directory denoted by this abstract pathname that  satisfy
|java.io.File.listRoots()|List the available filesystem roots.
|java.io.File.mkdir()|Creates the directory named by this abstract pathname.
|java.io.File.mkdirs()|Creates the directory named by this abstract pathname, including any  necessary but nonexistent parent directories.
|java.io.File.renameTo(File)|Renames the file denoted by this abstract pathname.
|java.io.File.setLastModified(long)|Sets the last-modified time of the file or directory named by this  abstract pathname.
|java.io.File.setReadOnly()|Marks the file or directory named by this abstract pathname so that  only read operations are allowed.
|java.io.File.toString()|Returns the pathname string of this abstract pathname.
|java.io.File.toURI()|Constructs a file: URI that represents this abstract pathname.
|java.io.File.toURL()|Converts this abstract pathname into a file: URL.

*java.io.File_Description*

An abstract representation of file and directory pathnames. 

User interfaces and operating systems use system-dependent pathname strings to name files and directories. This class presents an abstract, system-independent view of hierarchical 
pathnames. An abstract pathname has two components: 

An optional system-dependent prefix string, such as a disk-drive specifier, "/"for the UNIX root directory, or "\\\\"for a Microsoft Windows UNC pathname, and A sequence of zero 
or more string names. 

Each name in an abstract pathname except for the last denotes a directory; the last name may denote either a directory or a file. The empty abstract pathname has no prefix and an 
empty name sequence. 

The conversion of a pathname string to or from an abstract pathname is inherently system-dependent. When an abstract pathname is converted into a pathname string, each name is 
separated from the next by a single copy of the default separator character. The default name-separator character is defined by the system property file.separator, and is made 
available in the public static fields (|java.io.File|) and (|java.io.File|) of this class. When a pathname string is converted into an abstract pathname, the names within it may 
be separated by the default name-separator character or by any other name-separator character that is supported by the underlying system. 

A pathname, whether abstract or in string form, may be either absolute or relative. An absolute pathname is complete in that no other information is required in order to locate 
the file that it denotes. A relative pathname, in contrast, must be interpreted in terms of information taken from some other pathname. By default the classes in the java.io 
package always resolve relative pathnames against the current user directory. This directory is named by the system property user.dir, and is typically the directory in which the 
Java virtual machine was invoked. 

The prefix concept is used to handle root directories on UNIX platforms, and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms, as follows: 



For UNIX platforms, the prefix of an absolute pathname is always "/". Relative pathnames have no prefix. The abstract pathname denoting the root directory has the prefix "/" and 
an empty name sequence. 

For Microsoft Windows platforms, the prefix of a pathname that contains a drive specifier consists of the drive letter followed by ":" and possibly followed by "\\" if the 
pathname is absolute. The prefix of a UNC pathname is "\\\\"; the hostname and the share name are the first two names in the name sequence. A relative pathname that does not 
specify a drive has no prefix. 



Instances of the File class are immutable; that is, once created, the abstract pathname represented by a File object will never change. 



*java.lang.String_java.io.File.pathSeparator*

The system-dependent path-separator character, represented as a string for convenience. This string contains a single character, namely (|java.io.File|) . 


*char_java.io.File.pathSeparatorChar*

The system-dependent path-separator character. This field is initialized to contain the first character of the value of the system property path.separator. This character is used 
to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is ':'; on Microsoft Windows systems it is ';'. 


*java.lang.String_java.io.File.separator*

The system-dependent default name-separator character, represented as a string for convenience. This string contains a single character, namely (|java.io.File|) . 


*char_java.io.File.separatorChar*

The system-dependent default name-separator character. This field is initialized to contain the first character of the value of the system property file.separator. On UNIX systems 
the value of this field is '/'; on Microsoft Windows systems it is '\\'. 



*java.io.File(File,String)*

public File(
  java.io.File parent,
  java.lang.String child)

Creates a new File instance from a parent abstract pathname and a child pathname string. 

If parent is null then the new File instance is created as if by invoking the single-argument File constructor on the given child pathname string. 

Otherwise the parent abstract pathname is taken to denote a directory, and the child pathname string is taken to denote either a directory or a file. If the child pathname string 
is absolute then it is converted into a relative pathname in a system-dependent way. If parent is the empty abstract pathname then the new File instance is created by converting 
child into an abstract pathname and resolving the result against a system-dependent default directory. Otherwise each pathname string is converted into an abstract pathname and 
the child abstract pathname is resolved against the parent. 

    parent - The parent abstract pathname 
    child - The child pathname string 

*java.io.File(String)*

public File(java.lang.String pathname)

Creates a new File instance by converting the given pathname string into an abstract pathname. If the given string is the empty string, then the result is the empty abstract 
pathname. 

    pathname - A pathname string 

*java.io.File(String,String)*

public File(
  java.lang.String parent,
  java.lang.String child)

Creates a new File instance from a parent pathname string and a child pathname string. 

If parent is null then the new File instance is created as if by invoking the single-argument File constructor on the given child pathname string. 

Otherwise the parent pathname string is taken to denote a directory, and the child pathname string is taken to denote either a directory or a file. If the child pathname string is 
absolute then it is converted into a relative pathname in a system-dependent way. If parent is the empty string then the new File instance is created by converting child into an 
abstract pathname and resolving the result against a system-dependent default directory. Otherwise each pathname string is converted into an abstract pathname and the child 
abstract pathname is resolved against the parent. 

    parent - The parent pathname string 
    child - The child pathname string 

*java.io.File(URI)*

public File(java.net.URI uri)

Creates a new File instance by converting the given file: URI into an abstract pathname. 

The exact form of a file: URI is system-dependent, hence the transformation performed by this constructor is also system-dependent. 

For a given abstract pathname f it is guaranteed that 

new File(f. toURI(|java.io.File|) ()).equals(f. getAbsoluteFile(|java.io.File|) ()) 

so long as the original abstract pathname, the URI, and the new abstract pathname are all created in (possibly different invocations of) the same Java virtual machine. This 
relationship typically does not hold, however, when a file: URI that is created in a virtual machine on one operating system is converted into an abstract pathname in a virtual 
machine on a different operating system. 

    uri - An absolute, hierarchical URI with a scheme equal to "file", a non-empty path component, and undefined authority, query, and fragment components 

*java.io.File.canRead()*

public boolean canRead()

Tests whether the application can read the file denoted by this abstract pathname. 



    Returns: true if and only if the file specified by this abstract pathname exists and can be read by the application; false otherwise 

*java.io.File.canWrite()*

public boolean canWrite()

Tests whether the application can modify the file denoted by this abstract pathname. 



    Returns: true if and only if the file system actually contains a file denoted by this abstract pathname and the application is allowed to write to the file; false otherwise. 

*java.io.File.compareTo(File)*

public int compareTo(java.io.File pathname)

Compares two abstract pathnames lexicographically. The ordering defined by this method depends upon the underlying system. On UNIX systems, alphabetic case is significant in 
comparing pathnames; on Microsoft Windows systems it is not. 


    pathname - The abstract pathname to be compared to this abstract pathname 

    Returns: Zero if the argument is equal to this abstract pathname, a value less than zero if this abstract pathname is lexicographically less than the argument, or a value greater than zero 
             if this abstract pathname is lexicographically greater than the argument 

*java.io.File.createNewFile()*

public boolean createNewFile()
  throws |java.io.IOException|
         
Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist. The check for the existence of the file and the 
creation of the file if it does not exist are a single operation that is atomic with respect to all other filesystem activities that might affect the file. 

Note: this method should not be used for file-locking, as the resulting protocol cannot be made to work reliably. The FileLock(|java.nio.channels.FileLock|) facility should be 
used instead. 



    Returns: true if the named file does not exist and was successfully created; false if the named file already exists 

*java.io.File.createTempFile(String,String)*

public static |java.io.File| createTempFile(
  java.lang.String prefix,
  java.lang.String suffix)
  throws |java.io.IOException|
         
Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name. Invoking this method is equivalent to invoking 
createTempFile(prefix,&nbsp;suffix,&nbsp;null)(|java.io.File|) . 


    prefix - The prefix string to be used in generating the file's name; must be at least three characters long 
    suffix - The suffix string to be used in generating the file's name; may be null, in which case the suffix ".tmp" will be used 

    Returns: An abstract pathname denoting a newly-created empty file 

*java.io.File.createTempFile(String,String,File)*

public static |java.io.File| createTempFile(
  java.lang.String prefix,
  java.lang.String suffix,
  java.io.File directory)
  throws |java.io.IOException|
         
Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name. If this method returns successfully then it is guaranteed 
that: 

The file denoted by the returned abstract pathname did not exist before this method was invoked, and Neither this method nor any of its variants will return the same abstract 
pathname again in the current invocation of the virtual machine. 

This method provides only part of a temporary-file facility. To arrange for a file created by this method to be deleted automatically, use the (|java.io.File|) method. 

The prefix argument must be at least three characters long. It is recommended that the prefix be a short, meaningful string such as "hjb" or "mail". The suffix argument may be 
null, in which case the suffix ".tmp" will be used. 

To create the new file, the prefix and the suffix may first be adjusted to fit the limitations of the underlying platform. If the prefix is too long then it will be truncated, but 
its first three characters will always be preserved. If the suffix is too long then it too will be truncated, but if it begins with a period character ('.') then the period and 
the first three characters following it will always be preserved. Once these adjustments have been made the name of the new file will be generated by concatenating the prefix, 
five or more internally-generated characters, and the suffix. 

If the directory argument is null then the system-dependent default temporary-file directory will be used. The default temporary-file directory is specified by the system property 
java.io.tmpdir. On UNIX systems the default value of this property is typically "/tmp" or "/var/tmp"; on Microsoft Windows systems it is typically "C:\\WINNT\\TEMP". A different 
value may be given to this system property when the Java virtual machine is invoked, but programmatic changes to this property are not guaranteed to have any effect upon the 
temporary directory used by this method. 


    prefix - The prefix string to be used in generating the file's name; must be at least three characters long 
    suffix - The suffix string to be used in generating the file's name; may be null, in which case the suffix ".tmp" will be used 
    directory - The directory in which the file is to be created, or null if the default temporary-file directory is to be used 

    Returns: An abstract pathname denoting a newly-created empty file 

*java.io.File.delete()*

public boolean delete()

Deletes the file or directory denoted by this abstract pathname. If this pathname denotes a directory, then the directory must be empty in order to be deleted. 



    Returns: true if and only if the file or directory is successfully deleted; false otherwise 

*java.io.File.deleteOnExit()*

public void deleteOnExit()

Requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates. Deletion will be attempted only for normal termination of the 
virtual machine, as defined by the Java Language Specification. 

Once deletion has been requested, it is not possible to cancel the request. This method should therefore be used with care. 

Note: this method should not be used for file-locking, as the resulting protocol cannot be made to work reliably. The FileLock(|java.nio.channels.FileLock|) facility should be 
used instead. 



*java.io.File.equals(Object)*

public boolean equals(java.lang.Object obj)

Tests this abstract pathname for equality with the given object. Returns true if and only if the argument is not null and is an abstract pathname that denotes the same file or 
directory as this abstract pathname. Whether or not two abstract pathnames are equal depends upon the underlying system. On UNIX systems, alphabetic case is significant in 
comparing pathnames; on Microsoft Windows systems it is not. 


    obj - The object to be compared with this abstract pathname 

    Returns: true if and only if the objects are the same; false otherwise 

*java.io.File.exists()*

public boolean exists()

Tests whether the file or directory denoted by this abstract pathname exists. 



    Returns: true if and only if the file or directory denoted by this abstract pathname exists; false otherwise 

*java.io.File.getAbsoluteFile()*

public |java.io.File| getAbsoluteFile()

Returns the absolute form of this abstract pathname. Equivalent to newFile(this. (|java.io.File|) ()). 



    Returns: The absolute abstract pathname denoting the same file or directory as this abstract pathname 

*java.io.File.getAbsolutePath()*

public |java.lang.String| getAbsolutePath()

Returns the absolute pathname string of this abstract pathname. 

If this abstract pathname is already absolute, then the pathname string is simply returned as if by the (|java.io.File|) method. If this abstract pathname is the empty abstract 
pathname then the pathname string of the current user directory, which is named by the system property user.dir, is returned. Otherwise this pathname is resolved in a 
system-dependent way. On UNIX systems, a relative pathname is made absolute by resolving it against the current user directory. On Microsoft Windows systems, a relative pathname 
is made absolute by resolving it against the current directory of the drive named by the pathname, if any; if not, it is resolved against the current user directory. 



    Returns: The absolute pathname string denoting the same file or directory as this abstract pathname 

*java.io.File.getCanonicalFile()*

public |java.io.File| getCanonicalFile()
  throws |java.io.IOException|
         
Returns the canonical form of this abstract pathname. Equivalent to newFile(this. (|java.io.File|) ()). 



    Returns: The canonical pathname string denoting the same file or directory as this abstract pathname 

*java.io.File.getCanonicalPath()*

public |java.lang.String| getCanonicalPath()
  throws |java.io.IOException|
         
Returns the canonical pathname string of this abstract pathname. 

A canonical pathname is both absolute and unique. The precise definition of canonical form is system-dependent. This method first converts this pathname to absolute form if 
necessary, as if by invoking the (|java.io.File|) method, and then maps it to its unique form in a system-dependent way. This typically involves removing redundant names such as 
"." and ".." from the pathname, resolving symbolic links (on UNIX platforms), and converting drive letters to a standard case (on Microsoft Windows platforms). 

Every pathname that denotes an existing file or directory has a unique canonical form. Every pathname that denotes a nonexistent file or directory also has a unique canonical 
form. The canonical form of the pathname of a nonexistent file or directory may be different from the canonical form of the same pathname after the file or directory is created. 
Similarly, the canonical form of the pathname of an existing file or directory may be different from the canonical form of the same pathname after the file or directory is 
deleted. 



    Returns: The canonical pathname string denoting the same file or directory as this abstract pathname 

*java.io.File.getName()*

public |java.lang.String| getName()

Returns the name of the file or directory denoted by this abstract pathname. This is just the last name in the pathname's name sequence. If the pathname's name sequence is empty, 
then the empty string is returned. 



    Returns: The name of the file or directory denoted by this abstract pathname, or the empty string if this pathname's name sequence is empty 

*java.io.File.getParent()*

public |java.lang.String| getParent()

Returns the pathname string of this abstract pathname's parent, or null if this pathname does not name a parent directory. 

The parent of an abstract pathname consists of the pathname's prefix, if any, and each name in the pathname's name sequence except for the last. If the name sequence is empty then 
the pathname does not name a parent directory. 



    Returns: The pathname string of the parent directory named by this abstract pathname, or null if this pathname does not name a parent 

*java.io.File.getParentFile()*

public |java.io.File| getParentFile()

Returns the abstract pathname of this abstract pathname's parent, or null if this pathname does not name a parent directory. 

The parent of an abstract pathname consists of the pathname's prefix, if any, and each name in the pathname's name sequence except for the last. If the name sequence is empty then 
the pathname does not name a parent directory. 



    Returns: The abstract pathname of the parent directory named by this abstract pathname, or null if this pathname does not name a parent 

*java.io.File.getPath()*

public |java.lang.String| getPath()

Converts this abstract pathname into a pathname string. The resulting string uses the default name-separator character(|java.io.File|) to separate the names in the name sequence. 



    Returns: The string form of this abstract pathname 

*java.io.File.hashCode()*

public int hashCode()

Computes a hash code for this abstract pathname. Because equality of abstract pathnames is inherently system-dependent, so is the computation of their hash codes. On UNIX systems, 
the hash code of an abstract pathname is equal to the exclusive or of the hash code of its pathname string and the decimal value 1234321. On Microsoft Windows systems, the hash 
code is equal to the exclusive or of the hash code of its pathname string converted to lower case and the decimal value 1234321. 



    Returns: A hash code for this abstract pathname 

*java.io.File.isAbsolute()*

public boolean isAbsolute()

Tests whether this abstract pathname is absolute. The definition of absolute pathname is system dependent. On UNIX systems, a pathname is absolute if its prefix is "/". On 
Microsoft Windows systems, a pathname is absolute if its prefix is a drive specifier followed by "\\", or if its prefix is "\\\\". 



    Returns: true if this abstract pathname is absolute, false otherwise 

*java.io.File.isDirectory()*

public boolean isDirectory()

Tests whether the file denoted by this abstract pathname is a directory. 



    Returns: true if and only if the file denoted by this abstract pathname exists and is a directory; false otherwise 

*java.io.File.isFile()*

public boolean isFile()

Tests whether the file denoted by this abstract pathname is a normal file. A file is normal if it is not a directory and, in addition, satisfies other system-dependent criteria. 
Any non-directory file created by a Java application is guaranteed to be a normal file. 



    Returns: true if and only if the file denoted by this abstract pathname exists and is a normal file; false otherwise 

*java.io.File.isHidden()*

public boolean isHidden()

Tests whether the file named by this abstract pathname is a hidden file. The exact definition of hidden is system-dependent. On UNIX systems, a file is considered to be hidden if 
its name begins with a period character ('.'). On Microsoft Windows systems, a file is considered to be hidden if it has been marked as such in the filesystem. 



    Returns: true if and only if the file denoted by this abstract pathname is hidden according to the conventions of the underlying platform 

*java.io.File.lastModified()*

public long lastModified()

Returns the time that the file denoted by this abstract pathname was last modified. 



    Returns: A long value representing the time the file was last modified, measured in milliseconds since the epoch (00:00:00 GMT, January 1, 1970), or 0L if the file does not exist or if an 
             I/O error occurs 

*java.io.File.length()*

public long length()

Returns the length of the file denoted by this abstract pathname. The return value is unspecified if this pathname denotes a directory. 



    Returns: The length, in bytes, of the file denoted by this abstract pathname, or 0L if the file does not exist 

*java.io.File.list()*

public |java.lang.String|[] list()

Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname. 

If this abstract pathname does not denote a directory, then this method returns null. Otherwise an array of strings is returned, one for each file or directory in the directory. 
Names denoting the directory itself and the directory's parent directory are not included in the result. Each string is a file name rather than a complete path. 

There is no guarantee that the name strings in the resulting array will appear in any specific order; they are not, in particular, guaranteed to appear in alphabetical order. 



    Returns: An array of strings naming the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns null if this 
             abstract pathname does not denote a directory, or if an I/O error occurs. 

*java.io.File.list(FilenameFilter)*

public |java.lang.String|[] list(java.io.FilenameFilter filter)

Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. The behavior of this method is 
the same as that of the (|java.io.File|) method, except that the strings in the returned array must satisfy the filter. If the given filter is null then all names are accepted. 
Otherwise, a name satisfies the filter if and only if the value true results when the (|java.io.FilenameFilter|) method of the filter is invoked on this abstract pathname and the 
name of a file or directory in the directory that it denotes. 


    filter - A filename filter 

    Returns: An array of strings naming the files and directories in the directory denoted by this abstract pathname that were accepted by the given filter. The array will be empty if the 
             directory is empty or if no names were accepted by the filter. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs. 

*java.io.File.listFiles()*

public |java.io.File|[] listFiles()

Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname. 

If this abstract pathname does not denote a directory, then this method returns null. Otherwise an array of File objects is returned, one for each file or directory in the 
directory. Pathnames denoting the directory itself and the directory's parent directory are not included in the result. Each resulting abstract pathname is constructed from this 
abstract pathname using the File(File,&nbsp;String)(|java.io.File|) constructor. Therefore if this pathname is absolute then each resulting pathname is absolute; if this pathname 
is relative then each resulting pathname will be relative to the same directory. 

There is no guarantee that the name strings in the resulting array will appear in any specific order; they are not, in particular, guaranteed to appear in alphabetical order. 



    Returns: An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns 
             null if this abstract pathname does not denote a directory, or if an I/O error occurs. 

*java.io.File.listFiles(FileFilter)*

public |java.io.File|[] listFiles(java.io.FileFilter filter)

Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. The behavior of 
this method is the same as that of the (|java.io.File|) method, except that the pathnames in the returned array must satisfy the filter. If the given filter is null then all 
pathnames are accepted. Otherwise, a pathname satisfies the filter if and only if the value true results when the (|java.io.FileFilter|) method of the filter is invoked on the 
pathname. 


    filter - A file filter 

    Returns: An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns 
             null if this abstract pathname does not denote a directory, or if an I/O error occurs. 

*java.io.File.listFiles(FilenameFilter)*

public |java.io.File|[] listFiles(java.io.FilenameFilter filter)

Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. The behavior of 
this method is the same as that of the (|java.io.File|) method, except that the pathnames in the returned array must satisfy the filter. If the given filter is null then all 
pathnames are accepted. Otherwise, a pathname satisfies the filter if and only if the value true results when the (|java.io.FilenameFilter|) method of the filter is invoked on 
this abstract pathname and the name of a file or directory in the directory that it denotes. 


    filter - A filename filter 

    Returns: An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns 
             null if this abstract pathname does not denote a directory, or if an I/O error occurs. 

*java.io.File.listRoots()*

public static |java.io.File|[] listRoots()

List the available filesystem roots. 

A particular Java platform may support zero or more hierarchically-organized file systems. Each file system has a root directory from which all other files in that file system can 
be reached. Windows platforms, for example, have a root directory for each active drive; UNIX platforms have a single root directory, namely "/". The set of available filesystem 
roots is affected by various system-level operations such as the insertion or ejection of removable media and the disconnecting or unmounting of physical or virtual disk drives. 

This method returns an array of File objects that denote the root directories of the available filesystem roots. It is guaranteed that the canonical pathname of any file 
physically present on the local machine will begin with one of the roots returned by this method. 

The canonical pathname of a file that resides on some other machine and is accessed via a remote-filesystem protocol such as SMB or NFS may or may not begin with one of the roots 
returned by this method. If the pathname of a remote file is syntactically indistinguishable from the pathname of a local file then it will begin with one of the roots returned by 
this method. Thus, for example, File objects denoting the root directories of the mapped network drives of a Windows platform will be returned by this method, while File objects 
containing UNC pathnames will not be returned by this method. 

Unlike most methods in this class, this method does not throw security exceptions. If a security manager exists and its (|java.lang.SecurityManager|) method denies read access to 
a particular root directory, then that directory will not appear in the result. 



    Returns: An array of File objects denoting the available filesystem roots, or null if the set of roots could not be determined. The array will be empty if there are no filesystem roots. 

*java.io.File.mkdir()*

public boolean mkdir()

Creates the directory named by this abstract pathname. 



    Returns: true if and only if the directory was created; false otherwise 

*java.io.File.mkdirs()*

public boolean mkdirs()

Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories. Note that if this operation fails it may have succeeded in 
creating some of the necessary parent directories. 



    Returns: true if and only if the directory was created, along with all necessary parent directories; false otherwise 

*java.io.File.renameTo(File)*

public boolean renameTo(java.io.File dest)

Renames the file denoted by this abstract pathname. 

Many aspects of the behavior of this method are inherently platform-dependent: The rename operation might not be able to move a file from one filesystem to another, it might not 
be atomic, and it might not succeed if a file with the destination abstract pathname already exists. The return value should always be checked to make sure that the rename 
operation was successful. 


    dest - The new abstract pathname for the named file 

    Returns: true if and only if the renaming succeeded; false otherwise 

*java.io.File.setLastModified(long)*

public boolean setLastModified(long time)

Sets the last-modified time of the file or directory named by this abstract pathname. 

All platforms support file-modification times to the nearest second, but some provide more precision. The argument will be truncated to fit the supported precision. If the 
operation succeeds and no intervening operations on the file take place, then the next invocation of the (|java.io.File|) method will return the (possibly truncated) time argument 
that was passed to this method. 


    time - The new last-modified time, measured in milliseconds since the epoch (00:00:00 GMT, January 1, 1970) 

    Returns: true if and only if the operation succeeded; false otherwise 

*java.io.File.setReadOnly()*

public boolean setReadOnly()

Marks the file or directory named by this abstract pathname so that only read operations are allowed. After invoking this method the file or directory is guaranteed not to change 
until it is either deleted or marked to allow write access. Whether or not a read-only file or directory may be deleted depends upon the underlying system. 



    Returns: true if and only if the operation succeeded; false otherwise 

*java.io.File.toString()*

public |java.lang.String| toString()

Returns the pathname string of this abstract pathname. This is just the string returned by the (|java.io.File|) method. 



    Returns: The string form of this abstract pathname 

*java.io.File.toURI()*

public |java.net.URI| toURI()

Constructs a file: URI that represents this abstract pathname. 

The exact form of the URI is system-dependent. If it can be determined that the file denoted by this abstract pathname is a directory, then the resulting URI will end with a 
slash. 

For a given abstract pathname f, it is guaranteed that 

new File(|java.io.File|) (f.toURI()).equals(f. getAbsoluteFile(|java.io.File|) ()) 

so long as the original abstract pathname, the URI, and the new abstract pathname are all created in (possibly different invocations of) the same Java virtual machine. Due to the 
system-dependent nature of abstract pathnames, however, this relationship typically does not hold when a file: URI that is created in a virtual machine on one operating system is 
converted into an abstract pathname in a virtual machine on a different operating system. 



    Returns: An absolute, hierarchical URI with a scheme equal to "file", a path representing this abstract pathname, and undefined authority, query, and fragment components 

*java.io.File.toURL()*

public |java.net.URL| toURL()
  throws |java.net.MalformedURLException|
         
Converts this abstract pathname into a file: URL. The exact form of the URL is system-dependent. If it can be determined that the file denoted by this abstract pathname is a 
directory, then the resulting URL will end with a slash. 

Usage note: This method does not automatically escape characters that are illegal in URLs. It is recommended that new code convert an abstract pathname into a URL by first 
converting it into a URI, via the toURI(|java.io.File|) method, and then converting the URI into a URL via the URI.toURL(|java.net.URI|) method. 



    Returns: A URL object representing the equivalent file URL 



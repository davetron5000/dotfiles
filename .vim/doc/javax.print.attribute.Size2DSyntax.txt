*javax.print.attribute.Size2DSyntax* *Size2DSyntax* Class Size2DSyntax is an abs

public abstract class Size2DSyntax
  extends    |java.lang.Object|
  implements |java.io.Serializable|
             |java.lang.Cloneable|

|javax.print.attribute.Size2DSyntax_Description|
|javax.print.attribute.Size2DSyntax_Fields|
|javax.print.attribute.Size2DSyntax_Constructors|
|javax.print.attribute.Size2DSyntax_Methods|

================================================================================

*javax.print.attribute.Size2DSyntax_Fields*
|int_javax.print.attribute.Size2DSyntax.INCH|
|int_javax.print.attribute.Size2DSyntax.MM|

*javax.print.attribute.Size2DSyntax_Constructors*
|javax.print.attribute.Size2DSyntax(float,float,int)|Construct a new two-dimens
|javax.print.attribute.Size2DSyntax(int,int,int)|Construct a new two-dimensiona

*javax.print.attribute.Size2DSyntax_Methods*
|javax.print.attribute.Size2DSyntax.equals(Object)|Returns whether this two-dim
|javax.print.attribute.Size2DSyntax.getSize(int)|Get this two-dimensional size 
|javax.print.attribute.Size2DSyntax.getX(int)|Returns this two-dimensional size
|javax.print.attribute.Size2DSyntax.getXMicrometers()|Returns this two-dimensio
|javax.print.attribute.Size2DSyntax.getY(int)|Returns this two-dimensional size
|javax.print.attribute.Size2DSyntax.getYMicrometers()|Returns this two-dimensio
|javax.print.attribute.Size2DSyntax.hashCode()|Returns a hash code value for th
|javax.print.attribute.Size2DSyntax.toString()|Returns a string version of this
|javax.print.attribute.Size2DSyntax.toString(int,String)|Returns a string versi

*javax.print.attribute.Size2DSyntax_Description*

Class Size2DSyntax is an abstract base class providing the common 
implementation of all attributes denoting a size in two dimensions. 

A two-dimensional size attribute's value consists of two items, the X dimension 
and the Y dimension. A two-dimensional size attribute may be constructed by 
supplying the two values and indicating the units in which the values are 
measured. Methods are provided to return a two-dimensional size attribute's 
values, indicating the units in which the values are to be returned. The two 
most common size units are inches (in) and millimeters (mm), and exported 
constants <CODE>INCH</CODE>(|javax.print.attribute.Size2DSyntax|) and 
<CODE>MM</CODE>(|javax.print.attribute.Size2DSyntax|) are provided for 
indicating those units. 

Once constructed, a two-dimensional size attribute's value is immutable. 

Design 

A two-dimensional size attribute's X and Y dimension values are stored 
internally as integers in units of micrometers (m), where 1 micrometer = 10-6 
meter = 1/1000 millimeter = 1/25400 inch. This permits dimensions to be 
represented exactly to a precision of 1/1000 mm (= 1 m) or 1/100 inch (= 254 
m). If fractional inches are expressed in negative powers of two, this permits 
dimensions to be represented exactly to a precision of 1/8 inch (= 3175 m) but 
not 1/16 inch (because 1/16 inch does not equal an integral number of m). 

Storing the dimensions internally in common units of m lets two size attributes 
be compared without regard to the units in which they were created; for 
example, 8.5 in will compare equal to 215.9 mm, as they both are stored as 
215900 m. For example, a lookup service can match resolution attributes based 
on equality of their serialized representations regardless of the units in 
which they were created. Using integers for internal storage allows precise 
equality comparisons to be done, which would not be guaranteed if an internal 
floating point representation were used. Note that if you're looking for U.S. 
letter sized media in metric units, you have to search for a media size of 
215.9 x 279.4 mm; rounding off to an integral 216 x 279 mm will not match. 

The exported constant <CODE>INCH</CODE>(|javax.print.attribute.Size2DSyntax|) 
is actually the conversion factor by which to multiply a value in inches to get 
the value in m. Likewise, the exported constant 
<CODE>MM</CODE>(|javax.print.attribute.Size2DSyntax|) is the conversion factor 
by which to multiply a value in mm to get the value in m. A client can specify 
a resolution value in units other than inches or mm by supplying its own 
conversion factor. However, since the internal units of m was chosen with 
supporting only the external units of inch and mm in mind, there is no 
guarantee that the conversion factor for the client's units will be an exact 
integer. If the conversion factor isn't an exact integer, resolution values in 
the client's units won't be stored precisely. 


*int_javax.print.attribute.Size2DSyntax.INCH*

Class Size2DSyntax is an abstract base class providing the common 
implementation of all attributes denoting a size in two dimensions. 

A two-dimensional size attribute's value consists of two items, the X dimension 
and the Y dimension. A two-dimensional size attribute may be constructed by 
supplying the two values and indicating the units in which the values are 
measured. Methods are provided to return a two-dimensional size attribute's 
values, indicating the units in which the values are to be returned. The two 
most common size units are inches (in) and millimeters (mm), and exported 
constants <CODE>INCH</CODE>(|javax.print.attribute.Size2DSyntax|) and 
<CODE>MM</CODE>(|javax.print.attribute.Size2DSyntax|) are provided for 
indicating those units. 

Once constructed, a two-dimensional size attribute's value is immutable. 

Design 

A two-dimensional size attribute's X and Y dimension values are stored 
internally as integers in units of micrometers (m), where 1 micrometer = 10-6 
meter = 1/1000 millimeter = 1/25400 inch. This permits dimensions to be 
represented exactly to a precision of 1/1000 mm (= 1 m) or 1/100 inch (= 254 
m). If fractional inches are expressed in negative powers of two, this permits 
dimensions to be represented exactly to a precision of 1/8 inch (= 3175 m) but 
not 1/16 inch (because 1/16 inch does not equal an integral number of m). 

Storing the dimensions internally in common units of m lets two size attributes 
be compared without regard to the units in which they were created; for 
example, 8.5 in will compare equal to 215.9 mm, as they both are stored as 
215900 m. For example, a lookup service can match resolution attributes based 
on equality of their serialized representations regardless of the units in 
which they were created. Using integers for internal storage allows precise 
equality comparisons to be done, which would not be guaranteed if an internal 
floating point representation were used. Note that if you're looking for U.S. 
letter sized media in metric units, you have to search for a media size of 
215.9 x 279.4 mm; rounding off to an integral 216 x 279 mm will not match. 

The exported constant <CODE>INCH</CODE>(|javax.print.attribute.Size2DSyntax|) 
is actually the conversion factor by which to multiply a value in inches to get 
the value in m. Likewise, the exported constant 
<CODE>MM</CODE>(|javax.print.attribute.Size2DSyntax|) is the conversion factor 
by which to multiply a value in mm to get the value in m. A client can specify 
a resolution value in units other than inches or mm by supplying its own 
conversion factor. However, since the internal units of m was chosen with 
supporting only the external units of inch and mm in mind, there is no 
guarantee that the conversion factor for the client's units will be an exact 
integer. If the conversion factor isn't an exact integer, resolution values in 
the client's units won't be stored precisely. 


*int_javax.print.attribute.Size2DSyntax.MM*

Class Size2DSyntax is an abstract base class providing the common 
implementation of all attributes denoting a size in two dimensions. 

A two-dimensional size attribute's value consists of two items, the X dimension 
and the Y dimension. A two-dimensional size attribute may be constructed by 
supplying the two values and indicating the units in which the values are 
measured. Methods are provided to return a two-dimensional size attribute's 
values, indicating the units in which the values are to be returned. The two 
most common size units are inches (in) and millimeters (mm), and exported 
constants <CODE>INCH</CODE>(|javax.print.attribute.Size2DSyntax|) and 
<CODE>MM</CODE>(|javax.print.attribute.Size2DSyntax|) are provided for 
indicating those units. 

Once constructed, a two-dimensional size attribute's value is immutable. 

Design 

A two-dimensional size attribute's X and Y dimension values are stored 
internally as integers in units of micrometers (m), where 1 micrometer = 10-6 
meter = 1/1000 millimeter = 1/25400 inch. This permits dimensions to be 
represented exactly to a precision of 1/1000 mm (= 1 m) or 1/100 inch (= 254 
m). If fractional inches are expressed in negative powers of two, this permits 
dimensions to be represented exactly to a precision of 1/8 inch (= 3175 m) but 
not 1/16 inch (because 1/16 inch does not equal an integral number of m). 

Storing the dimensions internally in common units of m lets two size attributes 
be compared without regard to the units in which they were created; for 
example, 8.5 in will compare equal to 215.9 mm, as they both are stored as 
215900 m. For example, a lookup service can match resolution attributes based 
on equality of their serialized representations regardless of the units in 
which they were created. Using integers for internal storage allows precise 
equality comparisons to be done, which would not be guaranteed if an internal 
floating point representation were used. Note that if you're looking for U.S. 
letter sized media in metric units, you have to search for a media size of 
215.9 x 279.4 mm; rounding off to an integral 216 x 279 mm will not match. 

The exported constant <CODE>INCH</CODE>(|javax.print.attribute.Size2DSyntax|) 
is actually the conversion factor by which to multiply a value in inches to get 
the value in m. Likewise, the exported constant 
<CODE>MM</CODE>(|javax.print.attribute.Size2DSyntax|) is the conversion factor 
by which to multiply a value in mm to get the value in m. A client can specify 
a resolution value in units other than inches or mm by supplying its own 
conversion factor. However, since the internal units of m was chosen with 
supporting only the external units of inch and mm in mind, there is no 
guarantee that the conversion factor for the client's units will be an exact 
integer. If the conversion factor isn't an exact integer, resolution values in 
the client's units won't be stored precisely. 



*javax.print.attribute.Size2DSyntax(float,float,int)*

protected Size2DSyntax(
  float x,
  float y,
  int units)

Construct a new two-dimensional size attribute from the given floating-point 
values. 

    x - X dimension. 
    y - Y dimension. 
    units - Unit conversion factor, e.g. {@link #INCH INCH} or {@link #MM MM}. 

*javax.print.attribute.Size2DSyntax(int,int,int)*

protected Size2DSyntax(
  int x,
  int y,
  int units)

Construct a new two-dimensional size attribute from the given integer values. 

    x - X dimension. 
    y - Y dimension. 
    units - Unit conversion factor, e.g. {@link #INCH INCH} or {@link #MM MM}. 

*javax.print.attribute.Size2DSyntax.equals(Object)*

public boolean equals(java.lang.Object object)

Returns whether this two-dimensional size attribute is equivalent to the passed 
in object. To be equivalent, all of the following conditions must be true: 

object is not null. 

object is an instance of class Size2DSyntax. 

This attribute's X dimension is equal to object's X dimension. 

This attribute's Y dimension is equal to object's Y dimension. 

    object - Object to compare to. 

    Returns: True if object is equivalent to this two-dimensional size attribute, false 
             otherwise. 
*javax.print.attribute.Size2DSyntax.getSize(int)*

public float getSize(int units)

Get this two-dimensional size attribute's dimensions in the given units as 
floating-point values. 

    units - Unit conversion factor, e.g. {@link #INCH INCH} or {@link #MM MM}. 

    Returns: A two-element array with the X dimension at index 0 and the Y dimension at 
             index 1. 
*javax.print.attribute.Size2DSyntax.getX(int)*

public float getX(int units)

Returns this two-dimensional size attribute's X dimension in the given units as 
a floating-point value. 

    units - Unit conversion factor, e.g. {@link #INCH INCH} or {@link #MM MM}. 

    Returns: 
*javax.print.attribute.Size2DSyntax.getXMicrometers()*

protected int getXMicrometers()

Returns this two-dimensional size attribute's X dimension in units of 
micrometers (m). (For use in a subclass.) 


    Returns: X dimension (m). 
*javax.print.attribute.Size2DSyntax.getY(int)*

public float getY(int units)

Returns this two-dimensional size attribute's Y dimension in the given units as 
a floating-point value. 

    units - Unit conversion factor, e.g. {@link #INCH INCH} or {@link #MM MM}. 

    Returns: 
*javax.print.attribute.Size2DSyntax.getYMicrometers()*

protected int getYMicrometers()

Returns this two-dimensional size attribute's Y dimension in units of 
micrometers (m). (For use in a subclass.) 


    Returns: Y dimension (m). 
*javax.print.attribute.Size2DSyntax.hashCode()*

public int hashCode()

Returns a hash code value for this two-dimensional size attribute. 


*javax.print.attribute.Size2DSyntax.toString()*

public |java.lang.String| toString()

Returns a string version of this two-dimensional size attribute. The string 
takes the form "XxY um", where X is the X dimension and Y is the Y dimension. 
The values are reported in the internal units of micrometers. 


*javax.print.attribute.Size2DSyntax.toString(int,String)*

public |java.lang.String| toString(
  int units,
  java.lang.String unitsName)

Returns a string version of this two-dimensional size attribute in the given 
units. The string takes the form "XxY U", where X is the X dimension, Y is the 
Y dimension, and U is the units name. The values are displayed in floating 
point. 

    units - Unit conversion factor, e.g. {@link #INCH INCH} or {@link #MM MM}. 
    unitsName - Units name string, e.g. "in" or "mm". If null, no units name is appended to the 
       result. 

    Returns: String version of this two-dimensional size attribute. 


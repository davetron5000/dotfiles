*java.math.BigInteger* *BigInteger* Immutable arbitrary-precision integers.

public class BigInteger
  extends    |java.lang.Number|
  implements |java.lang.Comparable|

|java.math.BigInteger_Description|
|java.math.BigInteger_Fields|
|java.math.BigInteger_Constructors|
|java.math.BigInteger_Methods|

====================================================================================================================================================================================

*java.math.BigInteger_Fields*
|java.math.BigInteger_java.math.BigInteger.ONE|
|java.math.BigInteger_java.math.BigInteger.TEN|
|java.math.BigInteger_java.math.BigInteger.ZERO|

*java.math.BigInteger_Constructors*
|java.math.BigInteger(byte[])|Translates a byte array containing the two's-complement binary  representation of a BigInteger into a BigInteger.
|java.math.BigInteger(int,byte[])|Translates the sign-magnitude representation of a BigInteger into a  BigInteger.
|java.math.BigInteger(int,int,Random)|Constructs a randomly generated positive BigInteger that is probably  prime, with the specified bitLength.
|java.math.BigInteger(int,Random)|Constructs a randomly generated BigInteger, uniformly distributed over  the range 0 to (2numBits - 1), inclusive.
|java.math.BigInteger(String)|Translates the decimal String representation of a BigInteger into a  BigInteger.
|java.math.BigInteger(String,int)|Translates the String representation of a BigInteger in the specified  radix into a BigInteger.

*java.math.BigInteger_Methods*
|java.math.BigInteger.abs()|Returns a BigInteger whose value is the absolute value of this  BigInteger.
|java.math.BigInteger.add(BigInteger)|Returns a BigInteger whose value is (this + val).
|java.math.BigInteger.and(BigInteger)|Returns a BigInteger whose value is (this  and  val).
|java.math.BigInteger.andNot(BigInteger)|Returns a BigInteger whose value is (this  and  ~val).
|java.math.BigInteger.bitCount()|Returns the number of bits in the two's complement representation  of this BigInteger that differ from its sign bit.
|java.math.BigInteger.bitLength()|Returns the number of bits in the minimal two's-complement  representation of this BigInteger, excluding a sign bit.
|java.math.BigInteger.clearBit(int)|Returns a BigInteger whose value is equivalent to this BigInteger  with the designated bit cleared.
|java.math.BigInteger.compareTo(BigInteger)|Compares this BigInteger with the specified BigInteger.
|java.math.BigInteger.divide(BigInteger)|Returns a BigInteger whose value is (this / val).
|java.math.BigInteger.divideAndRemainder(BigInteger)|Returns an array of two BigIntegers containing (this / val)  followed by (this % val).
|java.math.BigInteger.doubleValue()|Converts this BigInteger to a double.
|java.math.BigInteger.equals(Object)|Compares this BigInteger with the specified Object for equality.
|java.math.BigInteger.flipBit(int)|Returns a BigInteger whose value is equivalent to this BigInteger  with the designated bit flipped.
|java.math.BigInteger.floatValue()|Converts this BigInteger to a float.
|java.math.BigInteger.gcd(BigInteger)|Returns a BigInteger whose value is the greatest common divisor of  abs(this) and abs(val).
|java.math.BigInteger.getLowestSetBit()|Returns the index of the rightmost (lowest-order) one bit in this  BigInteger (the number of zero bits to the right of the rightmost  one b
|java.math.BigInteger.hashCode()|Returns the hash code for this BigInteger.
|java.math.BigInteger.intValue()|Converts this BigInteger to an int.
|java.math.BigInteger.isProbablePrime(int)|Returns true if this BigInteger is probably prime,  false if it's definitely composite.
|java.math.BigInteger.longValue()|Converts this BigInteger to a long.
|java.math.BigInteger.max(BigInteger)|Returns the maximum of this BigInteger and val.
|java.math.BigInteger.min(BigInteger)|Returns the minimum of this BigInteger and val.
|java.math.BigInteger.mod(BigInteger)|Returns a BigInteger whose value is (this mod m).
|java.math.BigInteger.modInverse(BigInteger)|Returns a BigInteger whose value is (this-1 mod m).
|java.math.BigInteger.modPow(BigInteger,BigInteger)|Returns a BigInteger whose value is  (thisexponent mod m).
|java.math.BigInteger.multiply(BigInteger)|Returns a BigInteger whose value is (this * val).
|java.math.BigInteger.negate()|Returns a BigInteger whose value is (-this).
|java.math.BigInteger.nextProbablePrime()|Returns the first integer greater than this BigInteger that  is probably prime.
|java.math.BigInteger.not()|Returns a BigInteger whose value is (~this).
|java.math.BigInteger.or(BigInteger)|Returns a BigInteger whose value is (this | val).
|java.math.BigInteger.pow(int)|Returns a BigInteger whose value is (thisexponent).
|java.math.BigInteger.probablePrime(int,Random)|Returns a positive BigInteger that is probably prime, with the  specified bitLength.
|java.math.BigInteger.remainder(BigInteger)|Returns a BigInteger whose value is (this % val).
|java.math.BigInteger.setBit(int)|Returns a BigInteger whose value is equivalent to this BigInteger  with the designated bit set.
|java.math.BigInteger.shiftLeft(int)|Returns a BigInteger whose value is (this << n).
|java.math.BigInteger.shiftRight(int)|Returns a BigInteger whose value is (this >> n).
|java.math.BigInteger.signum()|Returns the signum function of this BigInteger.
|java.math.BigInteger.subtract(BigInteger)|Returns a BigInteger whose value is (this - val).
|java.math.BigInteger.testBit(int)|Returns true if and only if the designated bit is set.
|java.math.BigInteger.toByteArray()|Returns a byte array containing the two's-complement  representation of this BigInteger.
|java.math.BigInteger.toString()|Returns the decimal String representation of this BigInteger.
|java.math.BigInteger.toString(int)|Returns the String representation of this BigInteger in the  given radix.
|java.math.BigInteger.valueOf(long)|Returns a BigInteger whose value is equal to that of the  specified long.
|java.math.BigInteger.xor(BigInteger)|Returns a BigInteger whose value is (this ^ val).

*java.math.BigInteger_Description*

Immutable arbitrary-precision integers. All operations behave as if BigIntegers were represented in two's-complement notation (like Java's primitive integer types). BigInteger 
provides analogues to all of Java's primitive integer operators, and all relevant methods from java.lang.Math. Additionally, BigInteger provides operations for modular arithmetic, 
GCD calculation, primality testing, prime generation, bit manipulation, and a few other miscellaneous operations. 

Semantics of arithmetic operations exactly mimic those of Java's integer arithmetic operators, as defined in The Java Language Specification. For example, division by zero throws 
an ArithmeticException, and division of a negative by a positive yields a negative (or zero) remainder. All of the details in the Spec concerning overflow are ignored, as 
BigIntegers are made as large as necessary to accommodate the results of an operation. 

Semantics of shift operations extend those of Java's shift operators to allow for negative shift distances. A right-shift with a negative shift distance results in a left shift, 
and vice-versa. The unsigned right shift operator (>>>) is omitted, as this operation makes little sense in combination with the "infinite word size" abstraction provided by this 
class. 

Semantics of bitwise logical operations exactly mimic those of Java's bitwise integer operators. The binary operators (and, or, xor) implicitly perform sign extension on the 
shorter of the two operands prior to performing the operation. 

Comparison operations perform signed integer comparisons, analogous to those performed by Java's relational and equality operators. 

Modular arithmetic operations are provided to compute residues, perform exponentiation, and compute multiplicative inverses. These methods always return a non-negative result, 
between 0 and (modulus - 1), inclusive. 

Bit operations operate on a single bit of the two's-complement representation of their operand. If necessary, the operand is sign- extended so that it contains the designated bit. 
None of the single-bit operations can produce a BigInteger with a different sign from the BigInteger being operated on, as they affect only a single bit, and the "infinite word 
size" abstraction provided by this class ensures that there are infinitely many "virtual sign bits" preceding each BigInteger. 

For the sake of brevity and clarity, pseudo-code is used throughout the descriptions of BigInteger methods. The pseudo-code expression (i + j) is shorthand for "a BigInteger whose 
value is that of the BigInteger i plus that of the BigInteger j." The pseudo-code expression (i == j) is shorthand for "true if and only if the BigInteger i represents the same 
value as the BigInteger j." Other pseudo-code expressions are interpreted similarly. 

All methods and constructors in this class throw NullPointerException when passed a null object reference for any input parameter. 



*java.math.BigInteger_java.math.BigInteger.ONE*

The BigInteger constant one. 


*java.math.BigInteger_java.math.BigInteger.TEN*

The BigInteger constant ten. 


*java.math.BigInteger_java.math.BigInteger.ZERO*

The BigInteger constant zero. 



*java.math.BigInteger(byte[])*

public BigInteger(byte[] val)

Translates a byte array containing the two's-complement binary representation of a BigInteger into a BigInteger. The input array is assumed to be in big-endian byte-order: the 
most significant byte is in the zeroth element. 

    val - big-endian two's-complement binary representation of BigInteger. 

*java.math.BigInteger(int,byte[])*

public BigInteger(
  int signum,
  byte[] magnitude)

Translates the sign-magnitude representation of a BigInteger into a BigInteger. The sign is represented as an integer signum value: -1 for negative, 0 for zero, or 1 for positive. 
The magnitude is a byte array in big-endian byte-order: the most significant byte is in the zeroth element. A zero-length magnitude array is permissible, and will result inin a 
BigInteger value of 0, whether signum is -1, 0 or 1. 

    signum - signum of the number (-1 for negative, 0 for zero, 1 for positive). 
    magnitude - big-endian binary representation of the magnitude of the number. 

*java.math.BigInteger(int,int,Random)*

public BigInteger(
  int bitLength,
  int certainty,
  java.util.Random rnd)

Constructs a randomly generated positive BigInteger that is probably prime, with the specified bitLength. 

It is recommended that the probablePrime(|java.math.BigInteger|) method be used in preference to this constructor unless there is a compelling need to specify a certainty. 

    bitLength - bitLength of the returned BigInteger. 
    certainty - a measure of the uncertainty that the caller is willing to tolerate. The probability that the new BigInteger represents a prime number will exceed (1 - 1/2certainty). The 
       execution time of this constructor is proportional to the value of this parameter. 
    rnd - source of random bits used to select candidates to be tested for primality. 

*java.math.BigInteger(int,Random)*

public BigInteger(
  int numBits,
  java.util.Random rnd)

Constructs a randomly generated BigInteger, uniformly distributed over the range 0 to (2numBits - 1), inclusive. The uniformity of the distribution assumes that a fair source of 
random bits is provided in rnd. Note that this constructor always constructs a non-negative BigInteger. 

    numBits - maximum bitLength of the new BigInteger. 
    rnd - source of randomness to be used in computing the new BigInteger. 

*java.math.BigInteger(String)*

public BigInteger(java.lang.String val)

Translates the decimal String representation of a BigInteger into a BigInteger. The String representation consists of an optional minus sign followed by a sequence of one or more 
decimal digits. The character-to-digit mapping is provided by Character.digit. The String may not contain any extraneous characters (whitespace, for example). 

    val - decimal String representation of BigInteger. 

*java.math.BigInteger(String,int)*

public BigInteger(
  java.lang.String val,
  int radix)

Translates the String representation of a BigInteger in the specified radix into a BigInteger. The String representation consists of an optional minus sign followed by a sequence 
of one or more digits in the specified radix. The character-to-digit mapping is provided by Character.digit. The String may not contain any extraneous characters (whitespace, for 
example). 

    val - String representation of BigInteger. 
    radix - radix to be used in interpreting val. 

*java.math.BigInteger.abs()*

public |java.math.BigInteger| abs()

Returns a BigInteger whose value is the absolute value of this BigInteger. 



    Returns: 

*java.math.BigInteger.add(BigInteger)*

public |java.math.BigInteger| add(java.math.BigInteger val)

Returns a BigInteger whose value is (this + val). 


    val - value to be added to this BigInteger. 

    Returns: 

*java.math.BigInteger.and(BigInteger)*

public |java.math.BigInteger| and(java.math.BigInteger val)

Returns a BigInteger whose value is (this and val). (This method returns a negative BigInteger if and only if this and val are both negative.) 


    val - value to be AND'ed with this BigInteger. 

    Returns: 

*java.math.BigInteger.andNot(BigInteger)*

public |java.math.BigInteger| andNot(java.math.BigInteger val)

Returns a BigInteger whose value is (this and ~val). This method, which is equivalent to and(val.not()), is provided as a convenience for masking operations. (This method returns 
a negative BigInteger if and only if this is negative and val is positive.) 


    val - value to be complemented and AND'ed with this BigInteger. 

    Returns: this and ~val 

*java.math.BigInteger.bitCount()*

public int bitCount()

Returns the number of bits in the two's complement representation of this BigInteger that differ from its sign bit. This method is useful when implementing bit-vector style sets 
atop BigIntegers. 



    Returns: number of bits in the two's complement representation of this BigInteger that differ from its sign bit. 

*java.math.BigInteger.bitLength()*

public int bitLength()

Returns the number of bits in the minimal two's-complement representation of this BigInteger, excluding a sign bit. For positive BigIntegers, this is equivalent to the number of 
bits in the ordinary binary representation. (Computes (ceil(log2(this < 0 ? -this : this+1))).) 



    Returns: number of bits in the minimal two's-complement representation of this BigInteger, excluding a sign bit. 

*java.math.BigInteger.clearBit(int)*

public |java.math.BigInteger| clearBit(int n)

Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit cleared. (Computes (this and ~(1<<n)).) 


    n - index of bit to clear. 

    Returns: this & ~(1<<n) 

*java.math.BigInteger.compareTo(BigInteger)*

public int compareTo(java.math.BigInteger val)

Compares this BigInteger with the specified BigInteger. This method is provided in preference to individual methods for each of the six boolean comparison operators (<, ==, >, >=, 
!=, <=). The suggested idiom for performing these comparisons is: (x.compareTo(y) <op> 0), where <op> is one of the six comparison operators. 


    val - BigInteger to which this BigInteger is to be compared. 

    Returns: -1, 0 or 1 as this BigInteger is numerically less than, equal to, or greater than val. 

*java.math.BigInteger.divide(BigInteger)*

public |java.math.BigInteger| divide(java.math.BigInteger val)

Returns a BigInteger whose value is (this / val). 


    val - value by which this BigInteger is to be divided. 

    Returns: 

*java.math.BigInteger.divideAndRemainder(BigInteger)*

public |java.math.BigInteger|[] divideAndRemainder(java.math.BigInteger val)

Returns an array of two BigIntegers containing (this / val) followed by (this % val). 


    val - value by which this BigInteger is to be divided, and the remainder computed. 

    Returns: an array of two BigIntegers: the quotient (this / val) is the initial element, and the remainder (this % val) is the final element. 

*java.math.BigInteger.doubleValue()*

public double doubleValue()

Converts this BigInteger to a double. This conversion is similar to the narrowing primitive conversion from double to float defined in the Java Language Specification: if this 
BigInteger has too great a magnitude to represent as a double, it will be converted to (|java.lang.Double|) or (|java.lang.Double|) as appropriate. Note that even when the return 
value is finite, this conversion can lose information about the precision of the BigInteger value. 



    Returns: this BigInteger converted to a double. 

*java.math.BigInteger.equals(Object)*

public boolean equals(java.lang.Object x)

Compares this BigInteger with the specified Object for equality. 


    x - Object to which this BigInteger is to be compared. 

    Returns: true if and only if the specified Object is a BigInteger whose value is numerically equal to this BigInteger. 

*java.math.BigInteger.flipBit(int)*

public |java.math.BigInteger| flipBit(int n)

Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit flipped. (Computes (this ^ (1<<n)).) 


    n - index of bit to flip. 

    Returns: this ^ (1<<n) 

*java.math.BigInteger.floatValue()*

public float floatValue()

Converts this BigInteger to a float. This conversion is similar to the narrowing primitive conversion from double to float defined in the Java Language Specification: if this 
BigInteger has too great a magnitude to represent as a float, it will be converted to (|java.lang.Float|) or (|java.lang.Float|) as appropriate. Note that even when the return 
value is finite, this conversion can lose information about the precision of the BigInteger value. 



    Returns: this BigInteger converted to a float. 

*java.math.BigInteger.gcd(BigInteger)*

public |java.math.BigInteger| gcd(java.math.BigInteger val)

Returns a BigInteger whose value is the greatest common divisor of abs(this) and abs(val). Returns 0 if this==0 and and val==0. 


    val - value with which the GCD is to be computed. 

    Returns: GCD(abs(this), abs(val)) 

*java.math.BigInteger.getLowestSetBit()*

public int getLowestSetBit()

Returns the index of the rightmost (lowest-order) one bit in this BigInteger (the number of zero bits to the right of the rightmost one bit). Returns -1 if this BigInteger 
contains no one bits. (Computes (this==0? -1 : log2(this and -this)).) 



    Returns: index of the rightmost one bit in this BigInteger. 

*java.math.BigInteger.hashCode()*

public int hashCode()

Returns the hash code for this BigInteger. 



    Returns: hash code for this BigInteger. 

*java.math.BigInteger.intValue()*

public int intValue()

Converts this BigInteger to an int. This conversion is analogous to a narrowing primitive conversion from long to int as defined in the Java Language Specification: if this 
BigInteger is too big to fit in an int, only the low-order 32 bits are returned. Note that this conversion can lose information about the overall magnitude of the BigInteger value 
as well as return a result with the opposite sign. 



    Returns: this BigInteger converted to an int. 

*java.math.BigInteger.isProbablePrime(int)*

public boolean isProbablePrime(int certainty)

Returns true if this BigInteger is probably prime, false if it's definitely composite. If certainty is <= 0, true is returned. 


    certainty - a measure of the uncertainty that the caller is willing to tolerate: if the call returns true the probability that this BigInteger is prime exceeds (1 - 1/2certainty). The 
       execution time of this method is proportional to the value of this parameter. 

    Returns: true if this BigInteger is probably prime, false if it's definitely composite. 

*java.math.BigInteger.longValue()*

public long longValue()

Converts this BigInteger to a long. This conversion is analogous to a narrowing primitive conversion from long to int as defined in the Java Language Specification: if this 
BigInteger is too big to fit in a long, only the low-order 64 bits are returned. Note that this conversion can lose information about the overall magnitude of the BigInteger value 
as well as return a result with the opposite sign. 



    Returns: this BigInteger converted to a long. 

*java.math.BigInteger.max(BigInteger)*

public |java.math.BigInteger| max(java.math.BigInteger val)

Returns the maximum of this BigInteger and val. 


    val - value with which the maximum is to be computed. 

    Returns: the BigInteger whose value is the greater of this and val. If they are equal, either may be returned. 

*java.math.BigInteger.min(BigInteger)*

public |java.math.BigInteger| min(java.math.BigInteger val)

Returns the minimum of this BigInteger and val. 


    val - value with which the minimum is to be computed. 

    Returns: the BigInteger whose value is the lesser of this BigInteger and val. If they are equal, either may be returned. 

*java.math.BigInteger.mod(BigInteger)*

public |java.math.BigInteger| mod(java.math.BigInteger m)

Returns a BigInteger whose value is (this mod m). This method differs from remainder in that it always returns a non-negative BigInteger. 


    m - the modulus. 

    Returns: 

*java.math.BigInteger.modInverse(BigInteger)*

public |java.math.BigInteger| modInverse(java.math.BigInteger m)

Returns a BigInteger whose value is (this-1 mod m). 


    m - the modulus. 

    Returns: this-1 mod m. 

*java.math.BigInteger.modPow(BigInteger,BigInteger)*

public |java.math.BigInteger| modPow(
  java.math.BigInteger exponent,
  java.math.BigInteger m)

Returns a BigInteger whose value is (thisexponent mod m). (Unlike pow, this method permits negative exponents.) 


    exponent - the exponent. 
    m - the modulus. 

    Returns: thisexponent mod m 

*java.math.BigInteger.multiply(BigInteger)*

public |java.math.BigInteger| multiply(java.math.BigInteger val)

Returns a BigInteger whose value is (this * val). 


    val - value to be multiplied by this BigInteger. 

    Returns: 

*java.math.BigInteger.negate()*

public |java.math.BigInteger| negate()

Returns a BigInteger whose value is (-this). 



    Returns: 

*java.math.BigInteger.nextProbablePrime()*

public |java.math.BigInteger| nextProbablePrime()

Returns the first integer greater than this BigInteger that is probably prime. The probability that the number returned by this method is composite does not exceed 2-100. This 
method will never skip over a prime when searching: if it returns p, there is no prime q such that this < q < p. 



    Returns: the first integer greater than this BigInteger that is probably prime. 

*java.math.BigInteger.not()*

public |java.math.BigInteger| not()

Returns a BigInteger whose value is (~this). (This method returns a negative value if and only if this BigInteger is non-negative.) 



    Returns: 

*java.math.BigInteger.or(BigInteger)*

public |java.math.BigInteger| or(java.math.BigInteger val)

Returns a BigInteger whose value is (this | val). (This method returns a negative BigInteger if and only if either this or val is negative.) 


    val - value to be OR'ed with this BigInteger. 

    Returns: 

*java.math.BigInteger.pow(int)*

public |java.math.BigInteger| pow(int exponent)

Returns a BigInteger whose value is (thisexponent). Note that exponent is an integer rather than a BigInteger. 


    exponent - exponent to which this BigInteger is to be raised. 

    Returns: 

*java.math.BigInteger.probablePrime(int,Random)*

public static |java.math.BigInteger| probablePrime(
  int bitLength,
  java.util.Random rnd)

Returns a positive BigInteger that is probably prime, with the specified bitLength. The probability that a BigInteger returned by this method is composite does not exceed 2-100. 


    bitLength - bitLength of the returned BigInteger. 
    rnd - source of random bits used to select candidates to be tested for primality. 

    Returns: a BigInteger of bitLength bits that is probably prime 

*java.math.BigInteger.remainder(BigInteger)*

public |java.math.BigInteger| remainder(java.math.BigInteger val)

Returns a BigInteger whose value is (this % val). 


    val - value by which this BigInteger is to be divided, and the remainder computed. 

    Returns: 

*java.math.BigInteger.setBit(int)*

public |java.math.BigInteger| setBit(int n)

Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit set. (Computes (this | (1<<n)).) 


    n - index of bit to set. 

    Returns: this | (1<<n) 

*java.math.BigInteger.shiftLeft(int)*

public |java.math.BigInteger| shiftLeft(int n)

Returns a BigInteger whose value is (this << n). The shift distance, n, may be negative, in which case this method performs a right shift. (Computes floor(this * 2n).) 


    n - shift distance, in bits. 

    Returns: 

*java.math.BigInteger.shiftRight(int)*

public |java.math.BigInteger| shiftRight(int n)

Returns a BigInteger whose value is (this >> n). Sign extension is performed. The shift distance, n, may be negative, in which case this method performs a left shift. (Computes 
floor(this / 2n).) 


    n - shift distance, in bits. 

    Returns: 

*java.math.BigInteger.signum()*

public int signum()

Returns the signum function of this BigInteger. 



    Returns: -1, 0 or 1 as the value of this BigInteger is negative, zero or positive. 

*java.math.BigInteger.subtract(BigInteger)*

public |java.math.BigInteger| subtract(java.math.BigInteger val)

Returns a BigInteger whose value is (this - val). 


    val - value to be subtracted from this BigInteger. 

    Returns: 

*java.math.BigInteger.testBit(int)*

public boolean testBit(int n)

Returns true if and only if the designated bit is set. (Computes ((this and (1<<n)) != 0).) 


    n - index of bit to test. 

    Returns: true if and only if the designated bit is set. 

*java.math.BigInteger.toByteArray()*

public byte[] toByteArray()

Returns a byte array containing the two's-complement representation of this BigInteger. The byte array will be in big-endian byte-order: the most significant byte is in the zeroth 
element. The array will contain the minimum number of bytes required to represent this BigInteger, including at least one sign bit, which is (ceil((this.bitLength() + 1)/8)). 
(This representation is compatible with the (byte[])(|java.math.BigInteger|) constructor.) 



    Returns: a byte array containing the two's-complement representation of this BigInteger. 

*java.math.BigInteger.toString()*

public |java.lang.String| toString()

Returns the decimal String representation of this BigInteger. The digit-to-character mapping provided by Character.forDigit is used, and a minus sign is prepended if appropriate. 
(This representation is compatible with the (String)(|java.math.BigInteger|) constructor, and allows for String concatenation with Java's + operator.) 



    Returns: decimal String representation of this BigInteger. 

*java.math.BigInteger.toString(int)*

public |java.lang.String| toString(int radix)

Returns the String representation of this BigInteger in the given radix. If the radix is outside the range from (|java.lang.Character|) to (|java.lang.Character|) inclusive, it 
will default to 10 (as is the case for Integer.toString). The digit-to-character mapping provided by Character.forDigit is used, and a minus sign is prepended if appropriate. 
(This representation is compatible with the (String, <code>int</code>)(|java.math.BigInteger|) constructor.) 


    radix - radix of the String representation. 

    Returns: String representation of this BigInteger in the given radix. 

*java.math.BigInteger.valueOf(long)*

public static |java.math.BigInteger| valueOf(long val)

Returns a BigInteger whose value is equal to that of the specified long. This "static factory method" is provided in preference to a (long) constructor because it allows for reuse 
of frequently used BigIntegers. 


    val - value of the BigInteger to return. 

    Returns: a BigInteger with the specified value. 

*java.math.BigInteger.xor(BigInteger)*

public |java.math.BigInteger| xor(java.math.BigInteger val)

Returns a BigInteger whose value is (this ^ val). (This method returns a negative BigInteger if and only if exactly one of this and val are negative.) 


    val - value to be XOR'ed with this BigInteger. 

    Returns: 



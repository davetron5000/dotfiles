*javax.swing.text.WrappedPlainView* *WrappedPlainView* View of plain text (text 

public class WrappedPlainView
  extends    |javax.swing.text.BoxView|
  implements |javax.swing.text.TabExpander|

|javax.swing.text.WrappedPlainView_Description|
|javax.swing.text.WrappedPlainView_Fields|
|javax.swing.text.WrappedPlainView_Constructors|
|javax.swing.text.WrappedPlainView_Methods|

================================================================================

*javax.swing.text.WrappedPlainView_Constructors*
|javax.swing.text.WrappedPlainView(Element)|Creates a new WrappedPlainView.
|javax.swing.text.WrappedPlainView(Element,boolean)|Creates a new WrappedPlainV

*javax.swing.text.WrappedPlainView_Methods*
|javax.swing.text.WrappedPlainView.calculateBreakPosition(int,int)|This is call
|javax.swing.text.WrappedPlainView.changedUpdate(DocumentEvent,Shape,ViewFactory)|
|javax.swing.text.WrappedPlainView.drawLine(int,int,Graphics,int,int)|Renders a
|javax.swing.text.WrappedPlainView.drawSelectedText(Graphics,int,int,int,int)|R
|javax.swing.text.WrappedPlainView.drawUnselectedText(Graphics,int,int,int,int)|
|javax.swing.text.WrappedPlainView.getLineBuffer()|Gives access to a buffer tha
|javax.swing.text.WrappedPlainView.getMaximumSpan(int)|Determines the maximum s
|javax.swing.text.WrappedPlainView.getMinimumSpan(int)|Determines the minimum s
|javax.swing.text.WrappedPlainView.getPreferredSpan(int)|Determines the preferr
|javax.swing.text.WrappedPlainView.getTabSize()|Returns the tab size set for th
|javax.swing.text.WrappedPlainView.insertUpdate(DocumentEvent,Shape,ViewFactory)|
|javax.swing.text.WrappedPlainView.loadChildren(ViewFactory)|Loads all of the c
|javax.swing.text.WrappedPlainView.nextTabStop(float,int)|Returns the next tab 
|javax.swing.text.WrappedPlainView.paint(Graphics,Shape)|Renders using the give
|javax.swing.text.WrappedPlainView.removeUpdate(DocumentEvent,Shape,ViewFactory)|
|javax.swing.text.WrappedPlainView.setSize(float,float)|Sets the size of the vi

*javax.swing.text.WrappedPlainView_Description*

View of plain text (text with only one font and color) that does line-wrapping. 
This view expects that its associated element has child elements that represent 
the lines it should be wrapping. It is implemented as a vertical box that 
contains logical line views. The logical line views are nested classes that 
render the logical line as multiple physical line if the logical line is too 
wide to fit within the allocation. The line views draw upon the outer class for 
its state to reduce their memory requirements. 

The line views do all of their rendering through the drawLine method which in 
turn does all of its rendering through the drawSelectedText and 
drawUnselectedText methods. This enables subclasses to easily specialize the 
rendering without concern for the layout aspects. 


*javax.swing.text.WrappedPlainView(Element)*

public WrappedPlainView(javax.swing.text.Element elem)

Creates a new WrappedPlainView. Lines will be wrapped on character boundaries. 

    elem - the element underlying the view 

*javax.swing.text.WrappedPlainView(Element,boolean)*

public WrappedPlainView(
  javax.swing.text.Element elem,
  boolean wordWrap)

Creates a new WrappedPlainView. Lines can be wrapped on either character or 
word boundaries depending upon the setting of the wordWrap parameter. 

    elem - the element underlying the view 
    wordWrap - should lines be wrapped on word boundaries? 

*javax.swing.text.WrappedPlainView.calculateBreakPosition(int,int)*

protected int calculateBreakPosition(
  int p0,
  int p1)

This is called by the nested wrapped line views to determine the break 
location. This can be reimplemented to alter the breaking behavior. It will 
either break at word or character boundaries depending upon the break argument 
given at construction. 


*javax.swing.text.WrappedPlainView.changedUpdate(DocumentEvent,Shape,ViewFactory)*

public void changedUpdate(
  javax.swing.event.DocumentEvent e,
  java.awt.Shape a,
  javax.swing.text.ViewFactory f)

Gives notification from the document that attributes were changed in a location 
that this view is responsible for. 

    e - the change information from the associated document 
    a - the current allocation of the view 
    f - the factory to use to rebuild if the view has children 

*javax.swing.text.WrappedPlainView.drawLine(int,int,Graphics,int,int)*

protected void drawLine(
  int p0,
  int p1,
  java.awt.Graphics g,
  int x,
  int y)

Renders a line of text, suppressing whitespace at the end and expanding any 
tabs. This is implemented to make calls to the methods drawUnselectedText and 
drawSelectedText so that the way selected and unselected text are rendered can 
be customized. 

    p0 - the starting document location to use >= 0 
    p1 - the ending document location to use >= p1 
    g - the graphics context 
    x - the starting X position >= 0 
    y - the starting Y position >= 0 

*javax.swing.text.WrappedPlainView.drawSelectedText(Graphics,int,int,int,int)*

protected int drawSelectedText(
  java.awt.Graphics g,
  int x,
  int y,
  int p0,
  int p1)
  throws |javax.swing.text.BadLocationException|
         
Renders the given range in the model as selected text. This is implemented to 
render the text in the color specified in the hosting component. It assumes the 
highlighter will render the selected background. 

    g - the graphics context 
    x - the starting X coordinate >= 0 
    y - the starting Y coordinate >= 0 
    p0 - the beginning position in the model >= 0 
    p1 - the ending position in the model >= p0 

    Returns: the location of the end of the range. 
*javax.swing.text.WrappedPlainView.drawUnselectedText(Graphics,int,int,int,int)*

protected int drawUnselectedText(
  java.awt.Graphics g,
  int x,
  int y,
  int p0,
  int p1)
  throws |javax.swing.text.BadLocationException|
         
Renders the given range in the model as normal unselected text. 

    g - the graphics context 
    x - the starting X coordinate >= 0 
    y - the starting Y coordinate >= 0 
    p0 - the beginning position in the model >= 0 
    p1 - the ending position in the model >= p0 

    Returns: the X location of the end of the range >= 0 
*javax.swing.text.WrappedPlainView.getLineBuffer()*

protected final |javax.swing.text.Segment| getLineBuffer()

Gives access to a buffer that can be used to fetch text from the associated 
document. 


    Returns: 
*javax.swing.text.WrappedPlainView.getMaximumSpan(int)*

public float getMaximumSpan(int axis)

Determines the maximum span for this view along an axis. This is implemented to 
provide the superclass behavior after first making sure that the current font 
metrics are cached (for the nested lines which use the metrics to determine the 
height of the potentially wrapped lines). 

    axis - may be either View.X_AXIS or View.Y_AXIS 

    Returns: the span the view would like to be rendered into. Typically the view is told to 
             render into the span that is returned, although there is no 
             guarantee. The parent may choose to resize or break the view. 
*javax.swing.text.WrappedPlainView.getMinimumSpan(int)*

public float getMinimumSpan(int axis)

Determines the minimum span for this view along an axis. This is implemented to 
provide the superclass behavior after first making sure that the current font 
metrics are cached (for the nested lines which use the metrics to determine the 
height of the potentially wrapped lines). 

    axis - may be either View.X_AXIS or View.Y_AXIS 

    Returns: the span the view would like to be rendered into. Typically the view is told to 
             render into the span that is returned, although there is no 
             guarantee. The parent may choose to resize or break the view. 
*javax.swing.text.WrappedPlainView.getPreferredSpan(int)*

public float getPreferredSpan(int axis)

Determines the preferred span for this view along an axis. This is implemented 
to provide the superclass behavior after first making sure that the current 
font metrics are cached (for the nested lines which use the metrics to 
determine the height of the potentially wrapped lines). 

    axis - may be either View.X_AXIS or View.Y_AXIS 

    Returns: the span the view would like to be rendered into. Typically the view is told to 
             render into the span that is returned, although there is no 
             guarantee. The parent may choose to resize or break the view. 
*javax.swing.text.WrappedPlainView.getTabSize()*

protected int getTabSize()

Returns the tab size set for the document, defaulting to 8. 


    Returns: 
*javax.swing.text.WrappedPlainView.insertUpdate(DocumentEvent,Shape,ViewFactory)*

public void insertUpdate(
  javax.swing.event.DocumentEvent e,
  java.awt.Shape a,
  javax.swing.text.ViewFactory f)

Gives notification that something was inserted into the document in a location 
that this view is responsible for. This is implemented to simply update the 
children. 

    e - the change information from the associated document 
    a - the current allocation of the view 
    f - the factory to use to rebuild if the view has children 

*javax.swing.text.WrappedPlainView.loadChildren(ViewFactory)*

protected void loadChildren(javax.swing.text.ViewFactory f)

Loads all of the children to initialize the view. This is called by the 
setParent method. Subclasses can reimplement this to initialize their child 
views in a different manner. The default implementation creates a child view 
for each child element. 

    f - the view factory 

*javax.swing.text.WrappedPlainView.nextTabStop(float,int)*

public float nextTabStop(
  float x,
  int tabOffset)

Returns the next tab stop position after a given reference position. This 
implementation does not support things like centering so it ignores the 
tabOffset argument. 

    x - the current position >= 0 
    tabOffset - the position within the text stream that the tab occurred at >= 0. 

    Returns: the tab stop, measured in points >= 0 
*javax.swing.text.WrappedPlainView.paint(Graphics,Shape)*

public void paint(
  java.awt.Graphics g,
  java.awt.Shape a)

Renders using the given rendering surface and area on that surface. This is 
implemented to stash the selection positions, selection colors, and font 
metrics for the nested lines to use. 

    g - the rendering surface to use 
    a - the allocated region to render into 

*javax.swing.text.WrappedPlainView.removeUpdate(DocumentEvent,Shape,ViewFactory)*

public void removeUpdate(
  javax.swing.event.DocumentEvent e,
  java.awt.Shape a,
  javax.swing.text.ViewFactory f)

Gives notification that something was removed from the document in a location 
that this view is responsible for. This is implemented to simply update the 
children. 

    e - the change information from the associated document 
    a - the current allocation of the view 
    f - the factory to use to rebuild if the view has children 

*javax.swing.text.WrappedPlainView.setSize(float,float)*

public void setSize(
  float width,
  float height)

Sets the size of the view. This should cause layout of the view along the given 
axis, if it has any layout duties. 

    width - the width >= 0 
    height - the height >= 0 



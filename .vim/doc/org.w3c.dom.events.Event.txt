*org.w3c.dom.events.Event* *Event* The Event interface is used to provide contex

public interface interface Event


|org.w3c.dom.events.Event_Description|
|org.w3c.dom.events.Event_Fields|
|org.w3c.dom.events.Event_Constructors|
|org.w3c.dom.events.Event_Methods|

================================================================================

*org.w3c.dom.events.Event_Fields*
|short_org.w3c.dom.events.Event.AT_TARGET|
|short_org.w3c.dom.events.Event.BUBBLING_PHASE|
|short_org.w3c.dom.events.Event.CAPTURING_PHASE|

*org.w3c.dom.events.Event_Methods*
|org.w3c.dom.events.Event.getBubbles()|Used to indicate whether or not an event
|org.w3c.dom.events.Event.getCancelable()|Used to indicate whether or not an ev
|org.w3c.dom.events.Event.getCurrentTarget()|Used to indicate the EventTarget w
|org.w3c.dom.events.Event.getEventPhase()|Used to indicate which phase of event
|org.w3c.dom.events.Event.getTarget()|Used to indicate the EventTarget to which
|org.w3c.dom.events.Event.getTimeStamp()|Used to specify the time (in milliseco
|org.w3c.dom.events.Event.getType()|The name of the event (case-insensitive).
|org.w3c.dom.events.Event.initEvent(String,boolean,boolean)|The initEvent metho
|org.w3c.dom.events.Event.preventDefault()|If an event is cancelable, the preve
|org.w3c.dom.events.Event.stopPropagation()|The stopPropagation method is used 

*org.w3c.dom.events.Event_Description*

The Event interface is used to provide contextual information about an event to 
the handler processing the event. An object which implements the Event 
interface is generally passed as the first parameter to an event handler. More 
specific context information is passed to event handlers by deriving additional 
interfaces from Event which contain information directly relating to the type 
of event they accompany. These derived interfaces are also implemented by the 
object passed to the event listener. See also the Document Object Model (DOM) 
Level 2 Events Specification. 


*short_org.w3c.dom.events.Event.AT_TARGET*

The Event interface is used to provide contextual information about an event to 
the handler processing the event. An object which implements the Event 
interface is generally passed as the first parameter to an event handler. More 
specific context information is passed to event handlers by deriving additional 
interfaces from Event which contain information directly relating to the type 
of event they accompany. These derived interfaces are also implemented by the 
object passed to the event listener. See also the Document Object Model (DOM) 
Level 2 Events Specification. 


*short_org.w3c.dom.events.Event.BUBBLING_PHASE*

The Event interface is used to provide contextual information about an event to 
the handler processing the event. An object which implements the Event 
interface is generally passed as the first parameter to an event handler. More 
specific context information is passed to event handlers by deriving additional 
interfaces from Event which contain information directly relating to the type 
of event they accompany. These derived interfaces are also implemented by the 
object passed to the event listener. See also the Document Object Model (DOM) 
Level 2 Events Specification. 


*short_org.w3c.dom.events.Event.CAPTURING_PHASE*

The Event interface is used to provide contextual information about an event to 
the handler processing the event. An object which implements the Event 
interface is generally passed as the first parameter to an event handler. More 
specific context information is passed to event handlers by deriving additional 
interfaces from Event which contain information directly relating to the type 
of event they accompany. These derived interfaces are also implemented by the 
object passed to the event listener. See also the Document Object Model (DOM) 
Level 2 Events Specification. 



*org.w3c.dom.events.Event.getBubbles()*

public boolean getBubbles()

Used to indicate whether or not an event is a bubbling event. If the event can 
bubble the value is true, else the value is false. 


*org.w3c.dom.events.Event.getCancelable()*

public boolean getCancelable()

Used to indicate whether or not an event can have its default action prevented. 
If the default action can be prevented the value is true, else the value is 
false. 


*org.w3c.dom.events.Event.getCurrentTarget()*

public |org.w3c.dom.events.EventTarget| getCurrentTarget()

Used to indicate the EventTarget whose EventListeners are currently being 
processed. This is particularly useful during capturing and bubbling. 


*org.w3c.dom.events.Event.getEventPhase()*

public short getEventPhase()

Used to indicate which phase of event flow is currently being evaluated. 


*org.w3c.dom.events.Event.getTarget()*

public |org.w3c.dom.events.EventTarget| getTarget()

Used to indicate the EventTarget to which the event was originally dispatched. 


*org.w3c.dom.events.Event.getTimeStamp()*

public long getTimeStamp()

Used to specify the time (in milliseconds relative to the epoch) at which the 
event was created. Due to the fact that some systems may not provide this 
information the value of timeStamp may be not available for all events. When 
not available, a value of 0 will be returned. Examples of epoch time are the 
time of the system start or 0:0:0 UTC 1st January 1970. 


*org.w3c.dom.events.Event.getType()*

public |java.lang.String| getType()

The name of the event (case-insensitive). The name must be an XML name. 


*org.w3c.dom.events.Event.initEvent(String,boolean,boolean)*

public void initEvent(
  java.lang.String eventTypeArg,
  boolean canBubbleArg,
  boolean cancelableArg)

The initEvent method is used to initialize the value of an Event created 
through the DocumentEvent interface. This method may only be called before the 
Event has been dispatched via the dispatchEvent method, though it may be called 
multiple times during that phase if necessary. If called multiple times the 
final invocation takes precedence. If called from a subclass of Event interface 
only the values specified in the initEvent method are modified, all other 
attributes are left unchanged. 

    eventTypeArgSpecifies - the event type. This type may be any event type currently defined in this 
       specification or a new event type.. The string must be an XML name. Any 
       new event type must not begin with any upper, lower, or mixed case 
       version of the string "DOM". This prefix is reserved for future DOM 
       event sets. It is also strongly recommended that third parties adding 
       their own events use their own prefix to avoid confusion and lessen the 
       probability of conflicts with other new events. 
    canBubbleArgSpecifies - whether or not the event can bubble. 
    cancelableArgSpecifies - whether or not the event's default action can be prevented. 

*org.w3c.dom.events.Event.preventDefault()*

public void preventDefault()

If an event is cancelable, the preventDefault method is used to signify that 
the event is to be canceled, meaning any default action normally taken by the 
implementation as a result of the event will not occur. If, during any stage of 
event flow, the preventDefault method is called the event is canceled. Any 
default action associated with the event will not occur. Calling this method 
for a non-cancelable event has no effect. Once preventDefault has been called 
it will remain in effect throughout the remainder of the event's propagation. 
This method may be used during any stage of event flow. 


*org.w3c.dom.events.Event.stopPropagation()*

public void stopPropagation()

The stopPropagation method is used prevent further propagation of an event 
during event flow. If this method is called by any EventListener the event will 
cease propagating through the tree. The event will complete dispatch to all 
listeners on the current EventTarget before event flow stops. This method may 
be used during any stage of event flow. 




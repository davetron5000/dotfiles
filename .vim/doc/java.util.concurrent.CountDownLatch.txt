*java.util.concurrent.CountDownLatch* *CountDownLatch* A synchronization aid tha

public class CountDownLatch
  extends    |java.lang.Object|

|java.util.concurrent.CountDownLatch_Description|
|java.util.concurrent.CountDownLatch_Fields|
|java.util.concurrent.CountDownLatch_Constructors|
|java.util.concurrent.CountDownLatch_Methods|

================================================================================

*java.util.concurrent.CountDownLatch_Constructors*
|java.util.concurrent.CountDownLatch(int)|Constructs a CountDownLatch initializ

*java.util.concurrent.CountDownLatch_Methods*
|java.util.concurrent.CountDownLatch.await()|Causes the current thread to wait 
|java.util.concurrent.CountDownLatch.await(long,TimeUnit)|Causes the current th
|java.util.concurrent.CountDownLatch.countDown()|Decrements the count of the la
|java.util.concurrent.CountDownLatch.getCount()|Returns the current count.
|java.util.concurrent.CountDownLatch.toString()|Returns a string identifying th

*java.util.concurrent.CountDownLatch_Description*

A synchronization aid that allows one or more threads to wait until a set of 
operations being performed in other threads completes. 

A CountDownLatch is initialized with a given count. The 
await(|java.util.concurrent.CountDownLatch|) methods block until the current 
count(|java.util.concurrent.CountDownLatch|) reaches zero due to invocations of 
the (|java.util.concurrent.CountDownLatch|) method, after which all waiting 
threads are released and any subsequent invocations of 
await(|java.util.concurrent.CountDownLatch|) return immediately. This is a 
one-shot phenomenon -- the count cannot be reset. If you need a version that 
resets the count, consider using a (|java.util.concurrent.CyclicBarrier|) . 

A CountDownLatch is a versatile synchronization tool and can be used for a 
number of purposes. A CountDownLatch initialized with a count of one serves as 
a simple on/off latch, or gate: all threads invoking 
await(|java.util.concurrent.CountDownLatch|) wait at the gate until it is 
opened by a thread invoking (|java.util.concurrent.CountDownLatch|) . A 
CountDownLatch initialized to N can be used to make one thread wait until N 
threads have completed some action, or some action has been completed N times. 
A useful property of a CountDownLatch is that it doesn't require that threads 
calling countDown wait for the count to reach zero before proceeding, it simply 
prevents any thread from proceeding past an 
await(|java.util.concurrent.CountDownLatch|) until all threads could pass. 

Sample usage: Here is a pair of classes in which a group of worker threads use 
two countdown latches: 

The first is a start signal that prevents any worker from proceeding until the 
driver is ready for them to proceed; The second is a completion signal that 
allows the driver to wait until all workers have completed. 



class Driver { // ... void main() throws InterruptedException { CountDownLatch 
startSignal = new CountDownLatch(1); CountDownLatch doneSignal = new 
CountDownLatch(N); 

for (int i = 0; i Another typical usage would be to divide a problem into N 
parts, describe each part with a Runnable that executes that portion and counts 
down on the latch, and queue all the Runnables to an Executor. When all 
sub-parts are complete, the coordinating thread will be able to pass through 
await. (When threads must repeatedly count down in this way, instead use a 
(|java.util.concurrent.CyclicBarrier|) .) 



class Driver2 { // ... void main() throws InterruptedException { CountDownLatch 
doneSignal = new CountDownLatch(N); Executor e = ... 

for (int i = 0; i < N; ++i) // create and start threads e.execute(new 
WorkerRunnable(doneSignal, i)); 

doneSignal.await(); // wait for all to finish } } 

class WorkerRunnable implements Runnable { private final CountDownLatch 
doneSignal; private final int i; WorkerRunnable(CountDownLatch doneSignal, int 
i) { this.doneSignal = doneSignal; this.i = i; } public void run() { try { 
doWork(i); doneSignal.countDown(); } catch (InterruptedException ex) {} // 
return; } 

void doWork() { ... } } 




*java.util.concurrent.CountDownLatch(int)*

public CountDownLatch(int count)

Constructs a CountDownLatch initialized with the given count. 

    count - the number of times {@link #countDown} must be invoked before threads can pass 
       through {@link #await}. 

*java.util.concurrent.CountDownLatch.await()*

public void await()
  throws |java.lang.InterruptedException|
         
Causes the current thread to wait until the latch has counted down to zero, 
unless the thread is interrupted(|java.lang.Thread|) . 

If the current count(|java.util.concurrent.CountDownLatch|) is zero then this 
method returns immediately. If the current 
count(|java.util.concurrent.CountDownLatch|) is greater than zero then the 
current thread becomes disabled for thread scheduling purposes and lies dormant 
until one of two things happen: 

The count reaches zero due to invocations of the 
(|java.util.concurrent.CountDownLatch|) method; or Some other thread 
interrupts(|java.lang.Thread|) the current thread. 

If the current thread: 

has its interrupted status set on entry to this method; or is 
interrupted(|java.lang.Thread|) while waiting, 

then (|java.lang.InterruptedException|) is thrown and the current thread's 
interrupted status is cleared. 


*java.util.concurrent.CountDownLatch.await(long,TimeUnit)*

public boolean await(
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         
Causes the current thread to wait until the latch has counted down to zero, 
unless the thread is interrupted(|java.lang.Thread|) , or the specified waiting 
time elapses. 

If the current count(|java.util.concurrent.CountDownLatch|) is zero then this 
method returns immediately with the value true. 

If the current count(|java.util.concurrent.CountDownLatch|) is greater than 
zero then the current thread becomes disabled for thread scheduling purposes 
and lies dormant until one of three things happen: 

The count reaches zero due to invocations of the 
(|java.util.concurrent.CountDownLatch|) method; or Some other thread 
interrupts(|java.lang.Thread|) the current thread; or The specified waiting 
time elapses. 

If the count reaches zero then the method returns with the value true. If the 
current thread: 

has its interrupted status set on entry to this method; or is 
interrupted(|java.lang.Thread|) while waiting, 

then (|java.lang.InterruptedException|) is thrown and the current thread's 
interrupted status is cleared. 

If the specified waiting time elapses then the value false is returned. If the 
time is less than or equal to zero, the method will not wait at all. 

    timeout - the maximum time to wait 
    unit - the time unit of the timeout argument. 

    Returns: true if the count reached zero and false if the waiting time elapsed before the 
             count reached zero. 
*java.util.concurrent.CountDownLatch.countDown()*

public void countDown()

Decrements the count of the latch, releasing all waiting threads if the count 
reaches zero. If the current count(|java.util.concurrent.CountDownLatch|) is 
greater than zero then it is decremented. If the new count is zero then all 
waiting threads are re-enabled for thread scheduling purposes. If the current 
count(|java.util.concurrent.CountDownLatch|) equals zero then nothing happens. 


*java.util.concurrent.CountDownLatch.getCount()*

public long getCount()

Returns the current count. This method is typically used for debugging and 
testing purposes. 


    Returns: the current count. 
*java.util.concurrent.CountDownLatch.toString()*

public |java.lang.String| toString()

Returns a string identifying this latch, as well as its state. The state, in 
brackets, includes the String Count = followed by the current count. 


    Returns: a string identifying this latch, as well as its state 


*javax.naming.BinaryRefAddr* *BinaryRefAddr* This class represents the binary form of the address of 
 a communications end-point.

public class BinaryRefAddr
  extends    |javax.naming.RefAddr|

|javax.naming.BinaryRefAddr_Description|
|javax.naming.BinaryRefAddr_Fields|
|javax.naming.BinaryRefAddr_Constructors|
|javax.naming.BinaryRefAddr_Methods|

====================================================================================================================================================================================

*javax.naming.BinaryRefAddr_Constructors*
|javax.naming.BinaryRefAddr(String,byte[])|Constructs a new instance of BinaryRefAddr using its address type and a byte  array for contents.
|javax.naming.BinaryRefAddr(String,byte[],int,int)|Constructs a new instance of BinaryRefAddr using its address type and  a region of a byte array for contents.

*javax.naming.BinaryRefAddr_Methods*
|javax.naming.BinaryRefAddr.equals(Object)|Determines whether obj is equal to this address.
|javax.naming.BinaryRefAddr.getContent()|Retrieves the contents of this address as an Object.
|javax.naming.BinaryRefAddr.hashCode()|Computes the hash code of this address using its address type and contents.
|javax.naming.BinaryRefAddr.toString()|Generates the string representation of this address.

*javax.naming.BinaryRefAddr_Description*

This class represents the binary form of the address of a communications end-point. 

A BinaryRefAddr consists of a type that describes the communication mechanism and an opaque buffer containing the address description specific to that communication mechanism. The 
format and interpretation of the address type and the contents of the opaque buffer are based on the agreement of three parties: the client that uses the address, the 
object/server that can be reached using the address, and the administrator or program that creates the address. 

An example of a binary reference address is an BER X.500 presentation address. Another example of a binary reference address is a serialized form of a service's object handle. 

A binary reference address is immutable in the sense that its fields once created, cannot be replaced. However, it is possible to access the byte array used to hold the opaque 
buffer. Programs are strongly recommended against changing this byte array. Changes to this byte array need to be explicitly synchronized. 



*javax.naming.BinaryRefAddr(String,byte[])*

public BinaryRefAddr(
  java.lang.String addrType,
  byte[] src)

Constructs a new instance of BinaryRefAddr using its address type and a byte array for contents. 

    addrType - A non-null string describing the type of the address. 
    src - The non-null contents of the address as a byte array. The contents of src is copied into the new BinaryRefAddr. 

*javax.naming.BinaryRefAddr(String,byte[],int,int)*

public BinaryRefAddr(
  java.lang.String addrType,
  byte[] src,
  int offset,
  int count)

Constructs a new instance of BinaryRefAddr using its address type and a region of a byte array for contents. 

    addrType - A non-null string describing the type of the address. 
    src - The non-null contents of the address as a byte array. The contents of src is copied into the new BinaryRefAddr. 
    offset - The starting index in src to get the bytes. 0 <= offset <= src.length. 
    count - The number of bytes to extract from src. 0 <= count <= src.length-offset. 

*javax.naming.BinaryRefAddr.equals(Object)*

public boolean equals(java.lang.Object obj)

Determines whether obj is equal to this address. It is equal if it contains the same address type and their contents are byte-wise equivalent. 


    obj - The possibly null object to check. 

    Returns: true if the object is equal; false otherwise. 

*javax.naming.BinaryRefAddr.getContent()*

public |java.lang.Object| getContent()

Retrieves the contents of this address as an Object. The result is a byte array. Changes to this array will affect this BinaryRefAddr's contents. Programs are recommended against 
changing this array's contents and to lock the buffer if they need to change it. 



    Returns: The non-null buffer containing this address's contents. 

*javax.naming.BinaryRefAddr.hashCode()*

public int hashCode()

Computes the hash code of this address using its address type and contents. Two BinaryRefAddrs have the same hash code if they have the same address type and the same contents. It 
is also possible for different BinaryRefAddrs to have the same hash code. 



    Returns: The hash code of this address as an int. 

*javax.naming.BinaryRefAddr.toString()*

public |java.lang.String| toString()

Generates the string representation of this address. The string consists of the address's type and contents with labels. The first 32 bytes of contents are displayed (in 
hexadecimal). If there are more than 32 bytes, "..." is used to indicate more. This string is meant to used for debugging purposes and not meant to be interpreted 
programmatically. 



    Returns: The non-null string representation of this address. 



*java.awt.dnd.DragSource* *DragSource* The DragSource is the entity responsible 

public class DragSource
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.awt.dnd.DragSource_Description|
|java.awt.dnd.DragSource_Fields|
|java.awt.dnd.DragSource_Constructors|
|java.awt.dnd.DragSource_Methods|

================================================================================

*java.awt.dnd.DragSource_Fields*
|java.awt.Cursor_java.awt.dnd.DragSource.DefaultCopyDrop|
|java.awt.Cursor_java.awt.dnd.DragSource.DefaultCopyNoDrop|
|java.awt.Cursor_java.awt.dnd.DragSource.DefaultLinkDrop|
|java.awt.Cursor_java.awt.dnd.DragSource.DefaultLinkNoDrop|
|java.awt.Cursor_java.awt.dnd.DragSource.DefaultMoveDrop|
|java.awt.Cursor_java.awt.dnd.DragSource.DefaultMoveNoDrop|

*java.awt.dnd.DragSource_Constructors*
|java.awt.dnd.DragSource()|Creates a new DragSource.

*java.awt.dnd.DragSource_Methods*
|java.awt.dnd.DragSource.addDragSourceListener(DragSourceListener)|Adds the spe
|java.awt.dnd.DragSource.addDragSourceMotionListener(DragSourceMotionListener)|
|java.awt.dnd.DragSource.createDefaultDragGestureRecognizer(Component,int,DragGestureListener)|
|java.awt.dnd.DragSource.createDragGestureRecognizer(Class,Component,int,DragGestureListener)|
|java.awt.dnd.DragSource.createDragSourceContext(DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener)|
|java.awt.dnd.DragSource.getDefaultDragSource()|Gets the DragSource object asso
|java.awt.dnd.DragSource.getDragSourceListeners()|Gets all the DragSourceListen
|java.awt.dnd.DragSource.getDragSourceMotionListeners()|Gets all of the  DragSo
|java.awt.dnd.DragSource.getDragThreshold()|Returns the drag gesture motion thr
|java.awt.dnd.DragSource.getFlavorMap()|This method returns the   FlavorMap for
|java.awt.dnd.DragSource.getListeners(Class)|Gets all the objects currently reg
|java.awt.dnd.DragSource.isDragImageSupported()|Reports    whether or not drag 
|java.awt.dnd.DragSource.removeDragSourceListener(DragSourceListener)|Removes t
|java.awt.dnd.DragSource.removeDragSourceMotionListener(DragSourceMotionListener)|
|java.awt.dnd.DragSource.startDrag(DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener)|
|java.awt.dnd.DragSource.startDrag(DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener,FlavorMap)|
|java.awt.dnd.DragSource.startDrag(DragGestureEvent,Cursor,Transferable,DragSourceListener)|
|java.awt.dnd.DragSource.startDrag(DragGestureEvent,Cursor,Transferable,DragSourceListener,FlavorMap)|

*java.awt.dnd.DragSource_Description*

The DragSource is the entity responsible for the initiation of the Drag and 
Drop operation, and may be used in a number of scenarios: 

1 default instance per JVM for the lifetime of that JVM. 1 instance per class 
of potential Drag Initiator object (e.g TextField). [implementation dependent] 
1 per instance of a particular Component, or application specific object 
associated with a Component instance in the GUI. [implementation dependent] 
Some other arbitrary association. [implementation dependent] 

Once the DragSource is obtained, a DragGestureRecognizer should also be 
obtained to associate the DragSource with a particular Component. 

The initial interpretation of the user's gesture, and the subsequent starting 
of the drag operation are the responsibility of the implementing Component, 
which is usually implemented by a DragGestureRecognizer. 

When a drag gesture occurs, the DragSource's startDrag() method shall be 
invoked in order to cause processing of the user's navigational gestures and 
delivery of Drag and Drop protocol notifications. A DragSource shall only 
permit a single Drag and Drop operation to be current at any one time, and 
shall reject any further startDrag() requests by throwing an 
IllegalDnDOperationException until such time as the extant operation is 
complete. 

The startDrag() method invokes the createDragSourceContext() method to 
instantiate an appropriate DragSourceContext and associate the 
DragSourceContextPeer with that. 

If the Drag and Drop System is unable to initiate a drag operation for some 
reason, the startDrag() method throws a 
java.awt.dnd.InvalidDnDOperationException to signal such a condition. Typically 
this exception is thrown when the underlying platform system is either not in a 
state to initiate a drag, or the parameters specified are invalid. 

Note that during the drag, the set of operations exposed by the source at the 
start of the drag operation may not change until the operation is complete. The 
operation(s) are constant for the duration of the operation with respect to the 
DragSource. 


*java.awt.Cursor_java.awt.dnd.DragSource.DefaultCopyDrop*

The DragSource is the entity responsible for the initiation of the Drag and 
Drop operation, and may be used in a number of scenarios: 

1 default instance per JVM for the lifetime of that JVM. 1 instance per class 
of potential Drag Initiator object (e.g TextField). [implementation dependent] 
1 per instance of a particular Component, or application specific object 
associated with a Component instance in the GUI. [implementation dependent] 
Some other arbitrary association. [implementation dependent] 

Once the DragSource is obtained, a DragGestureRecognizer should also be 
obtained to associate the DragSource with a particular Component. 

The initial interpretation of the user's gesture, and the subsequent starting 
of the drag operation are the responsibility of the implementing Component, 
which is usually implemented by a DragGestureRecognizer. 

When a drag gesture occurs, the DragSource's startDrag() method shall be 
invoked in order to cause processing of the user's navigational gestures and 
delivery of Drag and Drop protocol notifications. A DragSource shall only 
permit a single Drag and Drop operation to be current at any one time, and 
shall reject any further startDrag() requests by throwing an 
IllegalDnDOperationException until such time as the extant operation is 
complete. 

The startDrag() method invokes the createDragSourceContext() method to 
instantiate an appropriate DragSourceContext and associate the 
DragSourceContextPeer with that. 

If the Drag and Drop System is unable to initiate a drag operation for some 
reason, the startDrag() method throws a 
java.awt.dnd.InvalidDnDOperationException to signal such a condition. Typically 
this exception is thrown when the underlying platform system is either not in a 
state to initiate a drag, or the parameters specified are invalid. 

Note that during the drag, the set of operations exposed by the source at the 
start of the drag operation may not change until the operation is complete. The 
operation(s) are constant for the duration of the operation with respect to the 
DragSource. 


*java.awt.Cursor_java.awt.dnd.DragSource.DefaultCopyNoDrop*

The DragSource is the entity responsible for the initiation of the Drag and 
Drop operation, and may be used in a number of scenarios: 

1 default instance per JVM for the lifetime of that JVM. 1 instance per class 
of potential Drag Initiator object (e.g TextField). [implementation dependent] 
1 per instance of a particular Component, or application specific object 
associated with a Component instance in the GUI. [implementation dependent] 
Some other arbitrary association. [implementation dependent] 

Once the DragSource is obtained, a DragGestureRecognizer should also be 
obtained to associate the DragSource with a particular Component. 

The initial interpretation of the user's gesture, and the subsequent starting 
of the drag operation are the responsibility of the implementing Component, 
which is usually implemented by a DragGestureRecognizer. 

When a drag gesture occurs, the DragSource's startDrag() method shall be 
invoked in order to cause processing of the user's navigational gestures and 
delivery of Drag and Drop protocol notifications. A DragSource shall only 
permit a single Drag and Drop operation to be current at any one time, and 
shall reject any further startDrag() requests by throwing an 
IllegalDnDOperationException until such time as the extant operation is 
complete. 

The startDrag() method invokes the createDragSourceContext() method to 
instantiate an appropriate DragSourceContext and associate the 
DragSourceContextPeer with that. 

If the Drag and Drop System is unable to initiate a drag operation for some 
reason, the startDrag() method throws a 
java.awt.dnd.InvalidDnDOperationException to signal such a condition. Typically 
this exception is thrown when the underlying platform system is either not in a 
state to initiate a drag, or the parameters specified are invalid. 

Note that during the drag, the set of operations exposed by the source at the 
start of the drag operation may not change until the operation is complete. The 
operation(s) are constant for the duration of the operation with respect to the 
DragSource. 


*java.awt.Cursor_java.awt.dnd.DragSource.DefaultLinkDrop*

The DragSource is the entity responsible for the initiation of the Drag and 
Drop operation, and may be used in a number of scenarios: 

1 default instance per JVM for the lifetime of that JVM. 1 instance per class 
of potential Drag Initiator object (e.g TextField). [implementation dependent] 
1 per instance of a particular Component, or application specific object 
associated with a Component instance in the GUI. [implementation dependent] 
Some other arbitrary association. [implementation dependent] 

Once the DragSource is obtained, a DragGestureRecognizer should also be 
obtained to associate the DragSource with a particular Component. 

The initial interpretation of the user's gesture, and the subsequent starting 
of the drag operation are the responsibility of the implementing Component, 
which is usually implemented by a DragGestureRecognizer. 

When a drag gesture occurs, the DragSource's startDrag() method shall be 
invoked in order to cause processing of the user's navigational gestures and 
delivery of Drag and Drop protocol notifications. A DragSource shall only 
permit a single Drag and Drop operation to be current at any one time, and 
shall reject any further startDrag() requests by throwing an 
IllegalDnDOperationException until such time as the extant operation is 
complete. 

The startDrag() method invokes the createDragSourceContext() method to 
instantiate an appropriate DragSourceContext and associate the 
DragSourceContextPeer with that. 

If the Drag and Drop System is unable to initiate a drag operation for some 
reason, the startDrag() method throws a 
java.awt.dnd.InvalidDnDOperationException to signal such a condition. Typically 
this exception is thrown when the underlying platform system is either not in a 
state to initiate a drag, or the parameters specified are invalid. 

Note that during the drag, the set of operations exposed by the source at the 
start of the drag operation may not change until the operation is complete. The 
operation(s) are constant for the duration of the operation with respect to the 
DragSource. 


*java.awt.Cursor_java.awt.dnd.DragSource.DefaultLinkNoDrop*

The DragSource is the entity responsible for the initiation of the Drag and 
Drop operation, and may be used in a number of scenarios: 

1 default instance per JVM for the lifetime of that JVM. 1 instance per class 
of potential Drag Initiator object (e.g TextField). [implementation dependent] 
1 per instance of a particular Component, or application specific object 
associated with a Component instance in the GUI. [implementation dependent] 
Some other arbitrary association. [implementation dependent] 

Once the DragSource is obtained, a DragGestureRecognizer should also be 
obtained to associate the DragSource with a particular Component. 

The initial interpretation of the user's gesture, and the subsequent starting 
of the drag operation are the responsibility of the implementing Component, 
which is usually implemented by a DragGestureRecognizer. 

When a drag gesture occurs, the DragSource's startDrag() method shall be 
invoked in order to cause processing of the user's navigational gestures and 
delivery of Drag and Drop protocol notifications. A DragSource shall only 
permit a single Drag and Drop operation to be current at any one time, and 
shall reject any further startDrag() requests by throwing an 
IllegalDnDOperationException until such time as the extant operation is 
complete. 

The startDrag() method invokes the createDragSourceContext() method to 
instantiate an appropriate DragSourceContext and associate the 
DragSourceContextPeer with that. 

If the Drag and Drop System is unable to initiate a drag operation for some 
reason, the startDrag() method throws a 
java.awt.dnd.InvalidDnDOperationException to signal such a condition. Typically 
this exception is thrown when the underlying platform system is either not in a 
state to initiate a drag, or the parameters specified are invalid. 

Note that during the drag, the set of operations exposed by the source at the 
start of the drag operation may not change until the operation is complete. The 
operation(s) are constant for the duration of the operation with respect to the 
DragSource. 


*java.awt.Cursor_java.awt.dnd.DragSource.DefaultMoveDrop*

The DragSource is the entity responsible for the initiation of the Drag and 
Drop operation, and may be used in a number of scenarios: 

1 default instance per JVM for the lifetime of that JVM. 1 instance per class 
of potential Drag Initiator object (e.g TextField). [implementation dependent] 
1 per instance of a particular Component, or application specific object 
associated with a Component instance in the GUI. [implementation dependent] 
Some other arbitrary association. [implementation dependent] 

Once the DragSource is obtained, a DragGestureRecognizer should also be 
obtained to associate the DragSource with a particular Component. 

The initial interpretation of the user's gesture, and the subsequent starting 
of the drag operation are the responsibility of the implementing Component, 
which is usually implemented by a DragGestureRecognizer. 

When a drag gesture occurs, the DragSource's startDrag() method shall be 
invoked in order to cause processing of the user's navigational gestures and 
delivery of Drag and Drop protocol notifications. A DragSource shall only 
permit a single Drag and Drop operation to be current at any one time, and 
shall reject any further startDrag() requests by throwing an 
IllegalDnDOperationException until such time as the extant operation is 
complete. 

The startDrag() method invokes the createDragSourceContext() method to 
instantiate an appropriate DragSourceContext and associate the 
DragSourceContextPeer with that. 

If the Drag and Drop System is unable to initiate a drag operation for some 
reason, the startDrag() method throws a 
java.awt.dnd.InvalidDnDOperationException to signal such a condition. Typically 
this exception is thrown when the underlying platform system is either not in a 
state to initiate a drag, or the parameters specified are invalid. 

Note that during the drag, the set of operations exposed by the source at the 
start of the drag operation may not change until the operation is complete. The 
operation(s) are constant for the duration of the operation with respect to the 
DragSource. 


*java.awt.Cursor_java.awt.dnd.DragSource.DefaultMoveNoDrop*

The DragSource is the entity responsible for the initiation of the Drag and 
Drop operation, and may be used in a number of scenarios: 

1 default instance per JVM for the lifetime of that JVM. 1 instance per class 
of potential Drag Initiator object (e.g TextField). [implementation dependent] 
1 per instance of a particular Component, or application specific object 
associated with a Component instance in the GUI. [implementation dependent] 
Some other arbitrary association. [implementation dependent] 

Once the DragSource is obtained, a DragGestureRecognizer should also be 
obtained to associate the DragSource with a particular Component. 

The initial interpretation of the user's gesture, and the subsequent starting 
of the drag operation are the responsibility of the implementing Component, 
which is usually implemented by a DragGestureRecognizer. 

When a drag gesture occurs, the DragSource's startDrag() method shall be 
invoked in order to cause processing of the user's navigational gestures and 
delivery of Drag and Drop protocol notifications. A DragSource shall only 
permit a single Drag and Drop operation to be current at any one time, and 
shall reject any further startDrag() requests by throwing an 
IllegalDnDOperationException until such time as the extant operation is 
complete. 

The startDrag() method invokes the createDragSourceContext() method to 
instantiate an appropriate DragSourceContext and associate the 
DragSourceContextPeer with that. 

If the Drag and Drop System is unable to initiate a drag operation for some 
reason, the startDrag() method throws a 
java.awt.dnd.InvalidDnDOperationException to signal such a condition. Typically 
this exception is thrown when the underlying platform system is either not in a 
state to initiate a drag, or the parameters specified are invalid. 

Note that during the drag, the set of operations exposed by the source at the 
start of the drag operation may not change until the operation is complete. The 
operation(s) are constant for the duration of the operation with respect to the 
DragSource. 



*java.awt.dnd.DragSource()*

public DragSource()
  throws |java.awt.HeadlessException|
         
Creates a new DragSource. 


*java.awt.dnd.DragSource.addDragSourceListener(DragSourceListener)*

public void addDragSourceListener(java.awt.dnd.DragSourceListener dsl)

Adds the specified DragSourceListener to this DragSource to receive drag source 
events during drag operations intiated with this DragSource. If a null listener 
is specified, no action is taken and no exception is thrown. 

    dsl - the DragSourceListener to add 

*java.awt.dnd.DragSource.addDragSourceMotionListener(DragSourceMotionListener)*

public void addDragSourceMotionListener(java.awt.dnd.DragSourceMotionListener dsml)

Adds the specified DragSourceMotionListener to this DragSource to receive drag 
motion events during drag operations intiated with this DragSource. If a null 
listener is specified, no action is taken and no exception is thrown. 

    dsml - the DragSourceMotionListener to add 

*java.awt.dnd.DragSource.createDefaultDragGestureRecognizer(Component,int,DragGestureListener)*

public |java.awt.dnd.DragGestureRecognizer| createDefaultDragGestureRecognizer(
  java.awt.Component c,
  int actions,
  java.awt.dnd.DragGestureListener dgl)

Creates a new DragGestureRecognizer that implements the default abstract 
subclass of DragGestureRecognizer for this DragSource, and sets the specified 
Component and DragGestureListener on the newly created object. 

For this DragSource the default is MouseDragGestureRecognizer. 

    c - the Component target for the recognizer 
    actions - the permitted source actions 
    dgl - the DragGestureListener to notify 

    Returns: the new DragGestureRecognizer or null if the 
             Toolkit.createDragGestureRecognizer method has no implementation 
             available for the requested DragGestureRecognizer subclass and 
             returns null 
*java.awt.dnd.DragSource.createDragGestureRecognizer(Class,Component,int,DragGestureListener)*

public |java.awt.dnd.DragGestureRecognizer| createDragGestureRecognizer(
  java.lang.Class recognizerAbstractClass,
  java.awt.Component c,
  int actions,
  java.awt.dnd.DragGestureListener dgl)

Creates a new DragGestureRecognizer that implements the specified abstract 
subclass of DragGestureRecognizer, and sets the specified Component and 
DragGestureListener on the newly created object. 

    recognizerAbstractClass - the requested abstract type 
    actions - the permitted source drag actions 
    c - the Component target 
    dgl - the DragGestureListener to notify 

    Returns: the new DragGestureRecognizer or null if the 
             Toolkit.createDragGestureRecognizer method has no implementation 
             available for the requested DragGestureRecognizer subclass and 
             returns null 
*java.awt.dnd.DragSource.createDragSourceContext(DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener)*

protected |java.awt.dnd.DragSourceContext| createDragSourceContext(
  java.awt.dnd.peer.DragSourceContextPeer dscp,
  java.awt.dnd.DragGestureEvent dgl,
  java.awt.Cursor dragCursor,
  java.awt.Image dragImage,
  java.awt.Point imageOffset,
  java.awt.datatransfer.Transferable t,
  java.awt.dnd.DragSourceListener dsl)

Creates the DragSourceContext to handle this drag. 

To incorporate a new DragSourceContext subclass, subclass DragSource and 
override this method. 

If dragImage is null, no image is used to represent the drag over feedback for 
this drag operation, but NullPointerException is not thrown. 

If dsl is null, no drag source listener is registered with the created 
DragSourceContext, but NullPointerException is not thrown. 

If dragCursor is null, the default drag cursors are used for this drag 
operation. NullPointerException is not thrown. 

    dscp - The DragSourceContextPeer for this drag 
    dgl - The DragGestureEvent that triggered the drag 
    dragCursor - The initial Cursor to display 
    dragImage - The Image to drag or null 
    imageOffset - The offset of the Image origin from the hotspot of the cursor at the instant of 
       the trigger 
    t - The subject data of the drag 
    dsl - The DragSourceListener 

    Returns: the DragSourceContext 
*java.awt.dnd.DragSource.getDefaultDragSource()*

public static |java.awt.dnd.DragSource| getDefaultDragSource()

Gets the DragSource object associated with the underlying platform. 


    Returns: the platform DragSource 
*java.awt.dnd.DragSource.getDragSourceListeners()*

public |java.awt.dnd.DragSourceListener| getDragSourceListeners()

Gets all the DragSourceListeners registered with this DragSource. 


    Returns: all of this DragSource's DragSourceListeners or an empty array if no such 
             listeners are currently registered 
*java.awt.dnd.DragSource.getDragSourceMotionListeners()*

public |java.awt.dnd.DragSourceMotionListener| getDragSourceMotionListeners()

Gets all of the DragSourceMotionListeners registered with this DragSource. 


    Returns: all of this DragSource's DragSourceMotionListeners or an empty array if no such 
             listeners are currently registered 
*java.awt.dnd.DragSource.getDragThreshold()*

public static int getDragThreshold()

Returns the drag gesture motion threshold. The drag gesture motion threshold 
defines the recommended behavior for 
(|java.awt.dnd.MouseDragGestureRecognizer|) s. 

If the system property awt.dnd.drag.threshold is set to a positive integer, 
this method returns the value of the system property; otherwise if a pertinent 
desktop property is available and supported by the implementation of the Java 
platform, this method returns the value of that property; otherwise this method 
returns some default value. The pertinent desktop property can be queried using 
java.awt.Toolkit.getDesktopProperty("DnD.gestureMotionThreshold"). 


    Returns: the drag gesture motion threshold 
*java.awt.dnd.DragSource.getFlavorMap()*

public |java.awt.datatransfer.FlavorMap| getFlavorMap()

This method returns the FlavorMap for this DragSource. 


    Returns: the FlavorMap for this DragSource 
*java.awt.dnd.DragSource.getListeners(Class)*

public |java.util.EventListener| getListeners(java.lang.Class listenerType)

Gets all the objects currently registered as FooListeners upon this DragSource. 
FooListeners are registered using the addFooListener method. 

    listenerType - the type of listeners requested; this parameter should specify an interface 
       that descends from java.util.EventListener 

    Returns: an array of all objects registered as FooListeners on this DragSource, or an 
             empty array if no such listeners have been added 
*java.awt.dnd.DragSource.isDragImageSupported()*

public static boolean isDragImageSupported()

Reports whether or not drag Image support is available on the underlying 
platform. 


    Returns: if the Drag Image support is available on this platform 
*java.awt.dnd.DragSource.removeDragSourceListener(DragSourceListener)*

public void removeDragSourceListener(java.awt.dnd.DragSourceListener dsl)

Removes the specified DragSourceListener from this DragSource. If a null 
listener is specified, no action is taken and no exception is thrown. If the 
listener specified by the argument was not previously added to this DragSource, 
no action is taken and no exception is thrown. 

    dsl - the DragSourceListener to remove 

*java.awt.dnd.DragSource.removeDragSourceMotionListener(DragSourceMotionListener)*

public void removeDragSourceMotionListener(java.awt.dnd.DragSourceMotionListener dsml)

Removes the specified DragSourceMotionListener from this DragSource. If a null 
listener is specified, no action is taken and no exception is thrown. If the 
listener specified by the argument was not previously added to this DragSource, 
no action is taken and no exception is thrown. 

    dsml - the DragSourceMotionListener to remove 

*java.awt.dnd.DragSource.startDrag(DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener)*

public void startDrag(
  java.awt.dnd.DragGestureEvent trigger,
  java.awt.Cursor dragCursor,
  java.awt.Image dragImage,
  java.awt.Point dragOffset,
  java.awt.datatransfer.Transferable transferable,
  java.awt.dnd.DragSourceListener dsl)
  throws |java.awt.dnd.InvalidDnDOperationException|
         
Start a drag, given the DragGestureEvent that initiated the drag, the initial 
Cursor to use, the Image to drag, the offset of the Image origin from the 
hotspot of the Cursor at the instant of the trigger, the subject data of the 
drag, and the DragSourceListener. 

    trigger - the DragGestureEvent that initiated the drag 
    dragCursor - the initial Cursor or null for defaults 
    dragImage - the Image to drag or null 
    dragOffset - the offset of the Image origin from the hotspot of the Cursor at the instant of 
       the trigger 
    transferable - the subject data of the drag 
    dsl - the DragSourceListener 

*java.awt.dnd.DragSource.startDrag(DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener,FlavorMap)*

public void startDrag(
  java.awt.dnd.DragGestureEvent trigger,
  java.awt.Cursor dragCursor,
  java.awt.Image dragImage,
  java.awt.Point imageOffset,
  java.awt.datatransfer.Transferable transferable,
  java.awt.dnd.DragSourceListener dsl,
  java.awt.datatransfer.FlavorMap flavorMap)
  throws |java.awt.dnd.InvalidDnDOperationException|
         
Start a drag, given the DragGestureEvent that initiated the drag, the initial 
Cursor to use, the Image to drag, the offset of the Image origin from the 
hotspot of the Cursor at the instant of the trigger, the Transferable subject 
data of the drag, the DragSourceListener, and the FlavorMap. 

    trigger - the DragGestureEvent that initiated the drag 
    dragCursor - the initial Cursor or null for defaults 
    dragImage - the image to drag or null, 
    imageOffset - the offset of the Image origin from the hotspot of the Cursor at the instant of 
       the trigger 
    transferable - the subject data of the drag 
    dsl - the DragSourceListener 
    flavorMap - the FlavorMap to use, or null 

*java.awt.dnd.DragSource.startDrag(DragGestureEvent,Cursor,Transferable,DragSourceListener)*

public void startDrag(
  java.awt.dnd.DragGestureEvent trigger,
  java.awt.Cursor dragCursor,
  java.awt.datatransfer.Transferable transferable,
  java.awt.dnd.DragSourceListener dsl)
  throws |java.awt.dnd.InvalidDnDOperationException|
         
Start a drag, given the DragGestureEvent that initiated the drag, the initial 
Cursor to use, the Transferable subject data of the drag, and the 
DragSourceListener. 

    trigger - the DragGestureEvent that initiated the drag 
    dragCursor - the initial Cursor or null for defaults 
    transferable - the subject data of the drag 
    dsl - the DragSourceListener 

*java.awt.dnd.DragSource.startDrag(DragGestureEvent,Cursor,Transferable,DragSourceListener,FlavorMap)*

public void startDrag(
  java.awt.dnd.DragGestureEvent trigger,
  java.awt.Cursor dragCursor,
  java.awt.datatransfer.Transferable transferable,
  java.awt.dnd.DragSourceListener dsl,
  java.awt.datatransfer.FlavorMap flavorMap)
  throws |java.awt.dnd.InvalidDnDOperationException|
         
Start a drag, given the DragGestureEvent that initiated the drag, the initial 
Cursor to use, the Transferable subject data of the drag, the 
DragSourceListener, and the FlavorMap. 

    trigger - the DragGestureEvent that initiated the drag 
    dragCursor - the initial Cursor or null for defaults 
    transferable - the subject data of the drag 
    dsl - the DragSourceListener 
    flavorMap - the FlavorMap to use or null 



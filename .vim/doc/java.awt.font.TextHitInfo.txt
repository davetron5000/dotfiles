*java.awt.font.TextHitInfo* *TextHitInfo* The TextHitInfo class represents a cha

public final class TextHitInfo
  extends    |java.lang.Object|

|java.awt.font.TextHitInfo_Description|
|java.awt.font.TextHitInfo_Fields|
|java.awt.font.TextHitInfo_Constructors|
|java.awt.font.TextHitInfo_Methods|

================================================================================

*java.awt.font.TextHitInfo_Methods*
|java.awt.font.TextHitInfo.afterOffset(int)|Creates a TextHitInfo at the specif
|java.awt.font.TextHitInfo.beforeOffset(int)|Creates a TextHitInfo at the speci
|java.awt.font.TextHitInfo.equals(Object)|Returns true if the specified Object 
|java.awt.font.TextHitInfo.equals(TextHitInfo)|Returns true if the specified Te
|java.awt.font.TextHitInfo.getCharIndex()|Returns the index of the character hi
|java.awt.font.TextHitInfo.getInsertionIndex()|Returns the insertion index.
|java.awt.font.TextHitInfo.getOffsetHit(int)|Creates a TextHitInfo whose charac
|java.awt.font.TextHitInfo.getOtherHit()|Creates a TextHitInfo on the other sid
|java.awt.font.TextHitInfo.hashCode()|Returns the hash code.
|java.awt.font.TextHitInfo.isLeadingEdge()|Returns true if the leading edge of 
|java.awt.font.TextHitInfo.leading(int)|Creates a TextHitInfo on the leading ed
|java.awt.font.TextHitInfo.toString()|Returns a String representing the hit for
|java.awt.font.TextHitInfo.trailing(int)|Creates a hit on the trailing edge of 

*java.awt.font.TextHitInfo_Description*

The TextHitInfo class represents a character position in a text model, and a 
bias, or "side," of the character. Biases are either leading (the left edge, 
for a left-to-right character) or trailing (the right edge, for a left-to-right 
character). Instances of TextHitInfo are used to specify caret and insertion 
positions within text. 

For example, consider the text "abc". TextHitInfo.trailing(1) corresponds to 
the right side of the 'b' in the text. 

TextHitInfo is used primarily by (|java.awt.font.TextLayout|) and clients of 
TextLayout. Clients of TextLayout query TextHitInfo instances for an insertion 
offset, where new text is inserted into the text model. The insertion offset is 
equal to the character position in the TextHitInfo if the bias is leading, and 
one character after if the bias is trailing. The insertion offset for 
TextHitInfo.trailing(1) is 2. 

Sometimes it is convenient to construct a TextHitInfo with the same insertion 
offset as an existing one, but on the opposite character. The getOtherHit 
method constructs a new TextHitInfo with the same insertion offset as an 
existing one, with a hit on the character on the other side of the insertion 
offset. Calling getOtherHit on trailing(1) would return leading(2). In general, 
getOtherHit for trailing(n) returns leading(n+1) and getOtherHit for leading(n) 
returns trailing(n-1). 

Example: Converting a graphical point to an insertion point within a text model 

TextLayout layout = ...; Point2D.Float hitPoint = ...; TextHitInfo hitInfo = 
layout.hitTestChar(hitPoint.x, hitPoint.y); int insPoint = 
hitInfo.getInsertionIndex(); // insPoint is relative to layout; may need to 
adjust for use // in a text model 


*java.awt.font.TextHitInfo.afterOffset(int)*

public static |java.awt.font.TextHitInfo| afterOffset(int offset)

Creates a TextHitInfo at the specified offset, associated with the character 
after the offset. 

    offset - an offset associated with the character after the offset 

    Returns: a TextHitInfo at the specified offset. 
*java.awt.font.TextHitInfo.beforeOffset(int)*

public static |java.awt.font.TextHitInfo| beforeOffset(int offset)

Creates a TextHitInfo at the specified offset, associated with the character 
before the offset. 

    offset - an offset associated with the character before the offset 

    Returns: a TextHitInfo at the specified offset. 
*java.awt.font.TextHitInfo.equals(Object)*

public boolean equals(java.lang.Object obj)

Returns true if the specified Object is a TextHitInfo and equals this 
TextHitInfo. 

    obj - the Object to test for equality 

    Returns: true if the specified Object equals this TextHitInfo; false otherwise. 
*java.awt.font.TextHitInfo.equals(TextHitInfo)*

public boolean equals(java.awt.font.TextHitInfo hitInfo)

Returns true if the specified TextHitInfo has the same charIndex and 
isLeadingEdge as this TextHitInfo. This is not the same as having the same 
insertion offset. 

    hitInfo - a specified TextHitInfo 

    Returns: true if the specified TextHitInfo has the same charIndex and isLeadingEdge as 
             this TextHitInfo. 
*java.awt.font.TextHitInfo.getCharIndex()*

public int getCharIndex()

Returns the index of the character hit. 


    Returns: the index of the character hit. 
*java.awt.font.TextHitInfo.getInsertionIndex()*

public int getInsertionIndex()

Returns the insertion index. This is the character index if the leading edge of 
the character was hit, and one greater than the character index if the trailing 
edge was hit. 


    Returns: the insertion index. 
*java.awt.font.TextHitInfo.getOffsetHit(int)*

public |java.awt.font.TextHitInfo| getOffsetHit(int delta)

Creates a TextHitInfo whose character index is offset by delta from the 
charIndex of this TextHitInfo. This TextHitInfo remains unchanged. 

    delta - the value to offset this charIndex 

    Returns: a TextHitInfo whose charIndex is offset by delta from the charIndex of this 
             TextHitInfo. 
*java.awt.font.TextHitInfo.getOtherHit()*

public |java.awt.font.TextHitInfo| getOtherHit()

Creates a TextHitInfo on the other side of the insertion point. This 
TextHitInfo remains unchanged. 


    Returns: a TextHitInfo on the other side of the insertion point. 
*java.awt.font.TextHitInfo.hashCode()*

public int hashCode()

Returns the hash code. 


    Returns: the hash code of this TextHitInfo, which is also the charIndex of this 
             TextHitInfo. 
*java.awt.font.TextHitInfo.isLeadingEdge()*

public boolean isLeadingEdge()

Returns true if the leading edge of the character was hit. 


    Returns: true if the leading edge of the character was hit; false otherwise. 
*java.awt.font.TextHitInfo.leading(int)*

public static |java.awt.font.TextHitInfo| leading(int charIndex)

Creates a TextHitInfo on the leading edge of the character at the specified 
charIndex. 

    charIndex - the index of the character hit 

    Returns: a TextHitInfo on the leading edge of the character at the specified charIndex. 
*java.awt.font.TextHitInfo.toString()*

public |java.lang.String| toString()

Returns a String representing the hit for debugging use only. 


    Returns: a String representing this TextHitInfo. 
*java.awt.font.TextHitInfo.trailing(int)*

public static |java.awt.font.TextHitInfo| trailing(int charIndex)

Creates a hit on the trailing edge of the character at the specified charIndex. 

    charIndex - the index of the character hit 

    Returns: a TextHitInfo on the trailing edge of the character at the specified charIndex. 


*javax.swing.undo.StateEdit* *StateEdit* StateEdit is a general edit for objects that change state.

public class StateEdit
  extends    |javax.swing.undo.AbstractUndoableEdit|

|javax.swing.undo.StateEdit_Description|
|javax.swing.undo.StateEdit_Fields|
|javax.swing.undo.StateEdit_Constructors|
|javax.swing.undo.StateEdit_Methods|

====================================================================================================================================================================================

*javax.swing.undo.StateEdit_Fields*
|javax.swing.undo.StateEditable_javax.swing.undo.StateEdit.object|
|java.util.Hashtable<java.lang.Object, java.lang.Object>_javax.swing.undo.StateEdit.postState|
|java.util.Hashtable<java.lang.Object, java.lang.Object>_javax.swing.undo.StateEdit.preState|
|java.lang.String_javax.swing.undo.StateEdit.RCSID|
|java.lang.String_javax.swing.undo.StateEdit.undoRedoName|

*javax.swing.undo.StateEdit_Constructors*
|javax.swing.undo.StateEdit(StateEditable)|Create and return a new StateEdit.
|javax.swing.undo.StateEdit(StateEditable,String)|Create and return a new StateEdit with a presentation name.

*javax.swing.undo.StateEdit_Methods*
|javax.swing.undo.StateEdit.end()|Gets the post-edit state of the StateEditable object and  ends the edit.
|javax.swing.undo.StateEdit.getPresentationName()|Gets the presentation name for this edit
|javax.swing.undo.StateEdit.init(StateEditable,String)|
|javax.swing.undo.StateEdit.redo()|Tells the edited object to apply the state after the edit
|javax.swing.undo.StateEdit.removeRedundantState()|Remove redundant key/values in state hashtables.
|javax.swing.undo.StateEdit.undo()|Tells the edited object to apply the state prior to the edit

*javax.swing.undo.StateEdit_Description*

StateEdit is a general edit for objects that change state. Objects being edited must conform to the StateEditable interface. 

This edit class works by asking an object to store it's state in Hashtables before and after editing occurs. Upon undo or redo the object is told to restore it's state from these 
Hashtables. 

A state edit is used as follows: 

// Create the edit during the "before" state of the object StateEdit newEdit = new StateEdit(myObject); // Modify the object myObject.someStateModifyingMethod(); // "end" the edit 
when you are done modifying the object newEdit.end(); 

Note that when a StateEdit ends, it removes redundant state from the Hashtables - A state Hashtable is not guaranteed to contain all keys/values placed into it when the state is 
stored! 



*javax.swing.undo.StateEditable_javax.swing.undo.StateEdit.object*

The object being edited 


*java.util.Hashtable<java.lang.Object, java.lang.Object>_javax.swing.undo.StateEdit.postState*

The state information after the edit 


*java.util.Hashtable<java.lang.Object, java.lang.Object>_javax.swing.undo.StateEdit.preState*

The state information prior to the edit 


*java.lang.String_javax.swing.undo.StateEdit.RCSID*




*java.lang.String_javax.swing.undo.StateEdit.undoRedoName*

The undo/redo presentation name 



*javax.swing.undo.StateEdit(StateEditable)*

public StateEdit(javax.swing.undo.StateEditable anObject)

Create and return a new StateEdit. 

    anObject - The object to watch for changing state 

*javax.swing.undo.StateEdit(StateEditable,String)*

public StateEdit(
  javax.swing.undo.StateEditable anObject,
  java.lang.String name)

Create and return a new StateEdit with a presentation name. 

    anObject - The object to watch for changing state 
    name - The presentation name to be used for this edit 

*javax.swing.undo.StateEdit.end()*

public void end()

Gets the post-edit state of the StateEditable object and ends the edit. 



*javax.swing.undo.StateEdit.getPresentationName()*

public |java.lang.String| getPresentationName()

Gets the presentation name for this edit 



*javax.swing.undo.StateEdit.init(StateEditable,String)*

protected void init(
  javax.swing.undo.StateEditable anObject,
  java.lang.String name)





*javax.swing.undo.StateEdit.redo()*

public void redo()

Tells the edited object to apply the state after the edit 



*javax.swing.undo.StateEdit.removeRedundantState()*

protected void removeRedundantState()

Remove redundant key/values in state hashtables. 



*javax.swing.undo.StateEdit.undo()*

public void undo()

Tells the edited object to apply the state prior to the edit 





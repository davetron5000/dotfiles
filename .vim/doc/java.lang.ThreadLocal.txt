*java.lang.ThreadLocal* *ThreadLocal* This class provides thread-local variables

public class ThreadLocal
  extends    |java.lang.Object|

|java.lang.ThreadLocal_Description|
|java.lang.ThreadLocal_Fields|
|java.lang.ThreadLocal_Constructors|
|java.lang.ThreadLocal_Methods|

================================================================================

*java.lang.ThreadLocal_Constructors*
|java.lang.ThreadLocal()|Creates a thread local variable.

*java.lang.ThreadLocal_Methods*
|java.lang.ThreadLocal.get()|Returns the value in the current thread's copy of 
|java.lang.ThreadLocal.initialValue()|Returns the current thread's initial valu
|java.lang.ThreadLocal.remove()|Removes the value for this ThreadLocal.
|java.lang.ThreadLocal.set(T)|Sets the current thread's copy of this thread-loc

*java.lang.ThreadLocal_Description*

This class provides thread-local variables. These variables differ from their 
normal counterparts in that each thread that accesses one (via its get or set 
method) has its own, independently initialized copy of the variable. 
ThreadLocal instances are typically private static fields in classes that wish 
to associate state with a thread (e.g., a user ID or Transaction ID). 

For example, in the class below, the private static ThreadLocal instance 
(serialNum) maintains a "serial number" for each thread that invokes the 
class's static SerialNum.get() method, which returns the current thread's 
serial number. (A thread's serial number is assigned the first time it invokes 
SerialNum.get(), and remains unchanged on subsequent calls.) 

public class SerialNum { // The next serial number to be assigned private 
static int nextSerialNum = 0; 

private static ThreadLocal serialNum = new ThreadLocal() { protected 
synchronized Object initialValue() { return new Integer(nextSerialNum++); } }; 

public static int get() { return ((Integer) (serialNum.get())).intValue(); } } 

Each thread holds an implicit reference to its copy of a thread-local variable 
as long as the thread is alive and the ThreadLocal instance is accessible; 
after a thread goes away, all of its copies of thread-local instances are 
subject to garbage collection (unless other references to these copies exist). 


*java.lang.ThreadLocal()*

public ThreadLocal()

Creates a thread local variable. 


*java.lang.ThreadLocal.get()*

public |java.lang.Object| get()

Returns the value in the current thread's copy of this thread-local variable. 
Creates and initializes the copy if this is the first time the thread has 
called this method. 


    Returns: the current thread's value of this thread-local 
*java.lang.ThreadLocal.initialValue()*

protected |java.lang.Object| initialValue()

Returns the current thread's initial value for this thread-local variable. This 
method will be invoked at most once per accessing thread for each thread-local, 
the first time the thread accesses the variable with the 
(|java.lang.ThreadLocal|) method. The initialValue method will not be invoked 
in a thread if the thread invokes the (|java.lang.ThreadLocal|) method prior to 
the get method. 

This implementation simply returns null; if the programmer desires thread-local 
variables to be initialized to some value other than null, ThreadLocal must be 
subclassed, and this method overridden. Typically, an anonymous inner class 
will be used. Typical implementations of initialValue will invoke an 
appropriate constructor and return the newly constructed object. 


    Returns: the initial value for this thread-local 
*java.lang.ThreadLocal.remove()*

public void remove()

Removes the value for this ThreadLocal. This may help reduce the storage 
requirements of ThreadLocals. If this ThreadLocal is accessed again, it will by 
default have its initialValue. 


*java.lang.ThreadLocal.set(T)*

public void set(java.lang.Object value)

Sets the current thread's copy of this thread-local variable to the specified 
value. Many applications will have no need for this functionality, relying 
solely on the (|java.lang.ThreadLocal|) method to set the values of 
thread-locals. 

    value - the value to be stored in the current threads' copy of this thread-local. 



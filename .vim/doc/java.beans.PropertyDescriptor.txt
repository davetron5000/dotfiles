*java.beans.PropertyDescriptor* *PropertyDescriptor* A PropertyDescriptor descri

public class PropertyDescriptor
  extends    |java.beans.FeatureDescriptor|

|java.beans.PropertyDescriptor_Description|
|java.beans.PropertyDescriptor_Fields|
|java.beans.PropertyDescriptor_Constructors|
|java.beans.PropertyDescriptor_Methods|

================================================================================

*java.beans.PropertyDescriptor_Constructors*
|java.beans.PropertyDescriptor(String,Class)|Constructs a PropertyDescriptor fo
|java.beans.PropertyDescriptor(String,Class,String,String)|This constructor tak
|java.beans.PropertyDescriptor(String,Method,Method)|This constructor takes the

*java.beans.PropertyDescriptor_Methods*
|java.beans.PropertyDescriptor.createPropertyEditor(Object)|Constructs an insta
|java.beans.PropertyDescriptor.equals(Object)|Compares this PropertyDescriptor 
|java.beans.PropertyDescriptor.getPropertyEditorClass()|Gets any explicit Prope
|java.beans.PropertyDescriptor.getPropertyType()|Gets the Class object for the 
|java.beans.PropertyDescriptor.getReadMethod()|Gets the method that should be u
|java.beans.PropertyDescriptor.getWriteMethod()|Gets the method that should be 
|java.beans.PropertyDescriptor.hashCode()|Returns a hash code value for the obj
|java.beans.PropertyDescriptor.isBound()|Updates to "bound" properties will cau
|java.beans.PropertyDescriptor.isConstrained()|Attempted updates to "Constraine
|java.beans.PropertyDescriptor.setBound(boolean)|Updates to "bound" properties 
|java.beans.PropertyDescriptor.setConstrained(boolean)|Attempted updates to "Co
|java.beans.PropertyDescriptor.setPropertyEditorClass(Class)|Normally PropertyE
|java.beans.PropertyDescriptor.setReadMethod(Method)|Sets the method that shoul
|java.beans.PropertyDescriptor.setWriteMethod(Method)|Sets the method that shou

*java.beans.PropertyDescriptor_Description*

A PropertyDescriptor describes one property that a Java Bean exports via a pair 
of accessor methods. 


*java.beans.PropertyDescriptor(String,Class)*

public PropertyDescriptor(
  java.lang.String propertyName,
  java.lang.Class beanClass)
  throws |java.beans.IntrospectionException|
         
Constructs a PropertyDescriptor for a property that follows the standard Java 
convention by having getFoo and setFoo accessor methods. Thus if the argument 
name is "fred", it will assume that the writer method is "setFred" and the 
reader method is "getFred" (or "isFred" for a boolean property). Note that the 
property name should start with a lower case character, which will be 
capitalized in the method names. 

    propertyName - The programmatic name of the property. 
    beanClass - The Class object for the target bean. For example sun.beans.OurButton.class. 

*java.beans.PropertyDescriptor(String,Class,String,String)*

public PropertyDescriptor(
  java.lang.String propertyName,
  java.lang.Class beanClass,
  java.lang.String readMethodName,
  java.lang.String writeMethodName)
  throws |java.beans.IntrospectionException|
         
This constructor takes the name of a simple property, and method names for 
reading and writing the property. 

    propertyName - The programmatic name of the property. 
    beanClass - The Class object for the target bean. For example sun.beans.OurButton.class. 
    readMethodName - The name of the method used for reading the property value. May be null if the 
       property is write-only. 
    writeMethodName - The name of the method used for writing the property value. May be null if the 
       property is read-only. 

*java.beans.PropertyDescriptor(String,Method,Method)*

public PropertyDescriptor(
  java.lang.String propertyName,
  java.lang.reflect.Method readMethod,
  java.lang.reflect.Method writeMethod)
  throws |java.beans.IntrospectionException|
         
This constructor takes the name of a simple property, and Method objects for 
reading and writing the property. 

    propertyName - The programmatic name of the property. 
    readMethod - The method used for reading the property value. May be null if the property is 
       write-only. 
    writeMethod - The method used for writing the property value. May be null if the property is 
       read-only. 

*java.beans.PropertyDescriptor.createPropertyEditor(Object)*

public |java.beans.PropertyEditor| createPropertyEditor(java.lang.Object bean)

Constructs an instance of a property editor using the current property editor 
class. 

If the property editor class has a public constructor that takes an Object 
argument then it will be invoked using the bean parameter as the argument. 
Otherwise, the default constructor will be invoked. 

    bean - the source object 

    Returns: a property editor instance or null if a property editor has not been defined or 
             cannot be created 
*java.beans.PropertyDescriptor.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this PropertyDescriptor against the specified object. Returns true if 
the objects are the same. Two PropertyDescriptors are the same if the read, 
write, property types, property editor and flags are equivalent. 


*java.beans.PropertyDescriptor.getPropertyEditorClass()*

public |java.lang.Class| getPropertyEditorClass()

Gets any explicit PropertyEditor Class that has been registered for this 
property. 


    Returns: Any explicit PropertyEditor Class that has been registered for this property. 
             Normally this will return "null", indicating that no special 
             editor has been registered, so the PropertyEditorManager should be 
             used to locate a suitable PropertyEditor. 
*java.beans.PropertyDescriptor.getPropertyType()*

public synchronized |java.lang.Class| getPropertyType()

Gets the Class object for the property. 


    Returns: The Java type info for the property. Note that the "Class" object may describe 
             a built-in Java type such as "int". The result may be "null" if 
             this is an indexed property that does not support non-indexed 
             access. 

This is the type that will be returned by the ReadMethod. 
*java.beans.PropertyDescriptor.getReadMethod()*

public synchronized |java.lang.reflect.Method| getReadMethod()

Gets the method that should be used to read the property value. 


    Returns: The method that should be used to read the property value. May return null if 
             the property can't be read. 
*java.beans.PropertyDescriptor.getWriteMethod()*

public synchronized |java.lang.reflect.Method| getWriteMethod()

Gets the method that should be used to write the property value. 


    Returns: The method that should be used to write the property value. May return null if 
             the property can't be written. 
*java.beans.PropertyDescriptor.hashCode()*

public int hashCode()

Returns a hash code value for the object. See (|java.lang.Object|) for a 
complete description. 


    Returns: a hash code value for this object. 
*java.beans.PropertyDescriptor.isBound()*

public boolean isBound()

Updates to "bound" properties will cause a "PropertyChange" event to get fired 
when the property is changed. 


    Returns: True if this is a bound property. 
*java.beans.PropertyDescriptor.isConstrained()*

public boolean isConstrained()

Attempted updates to "Constrained" properties will cause a "VetoableChange" 
event to get fired when the property is changed. 


    Returns: True if this is a constrained property. 
*java.beans.PropertyDescriptor.setBound(boolean)*

public void setBound(boolean bound)

Updates to "bound" properties will cause a "PropertyChange" event to get fired 
when the property is changed. 

    bound - True if this is a bound property. 

*java.beans.PropertyDescriptor.setConstrained(boolean)*

public void setConstrained(boolean constrained)

Attempted updates to "Constrained" properties will cause a "VetoableChange" 
event to get fired when the property is changed. 

    constrained - True if this is a constrained property. 

*java.beans.PropertyDescriptor.setPropertyEditorClass(Class)*

public void setPropertyEditorClass(java.lang.Class propertyEditorClass)

Normally PropertyEditors will be found using the PropertyEditorManager. However 
if for some reason you want to associate a particular PropertyEditor with a 
given property, then you can do it with this method. 

    propertyEditorClass - The Class for the desired PropertyEditor. 

*java.beans.PropertyDescriptor.setReadMethod(Method)*

public synchronized void setReadMethod(java.lang.reflect.Method readMethod)
  throws |java.beans.IntrospectionException|
         
Sets the method that should be used to read the property value. 

    readMethod - The new read method. 

*java.beans.PropertyDescriptor.setWriteMethod(Method)*

public synchronized void setWriteMethod(java.lang.reflect.Method writeMethod)
  throws |java.beans.IntrospectionException|
         
Sets the method that should be used to write the property value. 

    writeMethod - The new write method. 



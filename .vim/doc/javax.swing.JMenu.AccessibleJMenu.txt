*javax.swing.JMenu.AccessibleJMenu* *JMenu.AccessibleJMenu* This class implements accessibility support for the 
 JMenu class.

protected class JMenu.AccessibleJMenu
  extends    |javax.swing.JMenuItem.AccessibleJMenuItem|
  implements |javax.accessibility.AccessibleSelection|

|javax.swing.JMenu.AccessibleJMenu_Description|
|javax.swing.JMenu.AccessibleJMenu_Fields|
|javax.swing.JMenu.AccessibleJMenu_Constructors|
|javax.swing.JMenu.AccessibleJMenu_Methods|

====================================================================================================================================================================================

*javax.swing.JMenu.AccessibleJMenu_Constructors*
|javax.swing.JMenu.AccessibleJMenu()|

*javax.swing.JMenu.AccessibleJMenu_Methods*
|javax.swing.JMenu.AccessibleJMenu.addAccessibleSelection(int)|Selects the ith menu in the menu.
|javax.swing.JMenu.AccessibleJMenu.clearAccessibleSelection()|Clears the selection in the object, so that nothing in the  object is selected.
|javax.swing.JMenu.AccessibleJMenu.getAccessibleChild(int)|Returns the nth Accessible child of the object.
|javax.swing.JMenu.AccessibleJMenu.getAccessibleChildrenCount()|Returns the number of accessible children in the object.
|javax.swing.JMenu.AccessibleJMenu.getAccessibleRole()|Get the role of this object.
|javax.swing.JMenu.AccessibleJMenu.getAccessibleSelection()|Get the AccessibleSelection associated with this object.
|javax.swing.JMenu.AccessibleJMenu.getAccessibleSelection(int)|Returns the currently selected sub-menu if one is selected,  otherwise null (there can only be one selection, and it
|javax.swing.JMenu.AccessibleJMenu.getAccessibleSelectionCount()|Returns 1 if a sub-menu is currently selected in this menu.
|javax.swing.JMenu.AccessibleJMenu.isAccessibleChildSelected(int)|Returns true if the current child of this object is selected  (that is, if this child is a popped-up submenu).
|javax.swing.JMenu.AccessibleJMenu.removeAccessibleSelection(int)|Removes the nth item from the selection.
|javax.swing.JMenu.AccessibleJMenu.selectAllAccessibleSelection()|Normally causes every selected item in the object to be selected  if the object supports multiple selections.

*javax.swing.JMenu.AccessibleJMenu_Description*

This class implements accessibility support for the JMenu class. It provides an implementation of the Java Accessibility API appropriate to menu user-interface elements. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.JMenu.AccessibleJMenu()*

protected JMenu.AccessibleJMenu()




*javax.swing.JMenu.AccessibleJMenu.addAccessibleSelection(int)*

public void addAccessibleSelection(int i)

Selects the ith menu in the menu. If that item is a submenu, it will pop up in response. If a different item is already popped up, this will force it to close. If this is a 
sub-menu that is already popped up (selected), this method has no effect. 


    i - the index of the item to be selected 

*javax.swing.JMenu.AccessibleJMenu.clearAccessibleSelection()*

public void clearAccessibleSelection()

Clears the selection in the object, so that nothing in the object is selected. This will close any open sub-menu. 



*javax.swing.JMenu.AccessibleJMenu.getAccessibleChild(int)*

public |javax.accessibility.Accessible| getAccessibleChild(int i)

Returns the nth Accessible child of the object. 


    i - zero-based index of child 

    Returns: the nth Accessible child of the object 

*javax.swing.JMenu.AccessibleJMenu.getAccessibleChildrenCount()*

public int getAccessibleChildrenCount()

Returns the number of accessible children in the object. If all of the children of this object implement Accessible, than this method should return the number of children of this 
object. 



    Returns: the number of accessible children in the object. 

*javax.swing.JMenu.AccessibleJMenu.getAccessibleRole()*

public |javax.accessibility.AccessibleRole| getAccessibleRole()

Get the role of this object. 



    Returns: an instance of AccessibleRole describing the role of the object 

*javax.swing.JMenu.AccessibleJMenu.getAccessibleSelection()*

public |javax.accessibility.AccessibleSelection| getAccessibleSelection()

Get the AccessibleSelection associated with this object. In the implementation of the Java Accessibility API for this class, return this object, which is responsible for 
implementing the AccessibleSelection interface on behalf of itself. 



    Returns: 

*javax.swing.JMenu.AccessibleJMenu.getAccessibleSelection(int)*

public |javax.accessibility.Accessible| getAccessibleSelection(int i)

Returns the currently selected sub-menu if one is selected, otherwise null (there can only be one selection, and it can only be a sub-menu, as otherwise menu items don't remain 
selected). 



*javax.swing.JMenu.AccessibleJMenu.getAccessibleSelectionCount()*

public int getAccessibleSelectionCount()

Returns 1 if a sub-menu is currently selected in this menu. 



    Returns: 1 if a menu is currently selected, else 0 

*javax.swing.JMenu.AccessibleJMenu.isAccessibleChildSelected(int)*

public boolean isAccessibleChildSelected(int i)

Returns true if the current child of this object is selected (that is, if this child is a popped-up submenu). 


    i - the zero-based index of the child in this Accessible object. 

*javax.swing.JMenu.AccessibleJMenu.removeAccessibleSelection(int)*

public void removeAccessibleSelection(int i)

Removes the nth item from the selection. In general, menus can only have one item within them selected at a time (e.g. one sub-menu popped open). 


    i - the zero-based index of the selected item 

*javax.swing.JMenu.AccessibleJMenu.selectAllAccessibleSelection()*

public void selectAllAccessibleSelection()

Normally causes every selected item in the object to be selected if the object supports multiple selections. This method makes no sense in a menu bar, and so does nothing. 





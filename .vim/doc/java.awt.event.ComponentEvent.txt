*java.awt.event.ComponentEvent* *ComponentEvent* A low-level event which indicates that a component moved, changed
 size, or changed visibility (also, the root class for the other 

public class ComponentEvent
  extends    |java.awt.AWTEvent|

|java.awt.event.ComponentEvent_Description|
|java.awt.event.ComponentEvent_Fields|
|java.awt.event.ComponentEvent_Constructors|
|java.awt.event.ComponentEvent_Methods|

====================================================================================================================================================================================

*java.awt.event.ComponentEvent_Fields*
|int_java.awt.event.ComponentEvent.COMPONENT_FIRST|
|int_java.awt.event.ComponentEvent.COMPONENT_HIDDEN|
|int_java.awt.event.ComponentEvent.COMPONENT_LAST|
|int_java.awt.event.ComponentEvent.COMPONENT_MOVED|
|int_java.awt.event.ComponentEvent.COMPONENT_RESIZED|
|int_java.awt.event.ComponentEvent.COMPONENT_SHOWN|

*java.awt.event.ComponentEvent_Constructors*
|java.awt.event.ComponentEvent(Component,int)|Constructs a ComponentEvent object.

*java.awt.event.ComponentEvent_Methods*
|java.awt.event.ComponentEvent.getComponent()|Returns the originator of the event.
|java.awt.event.ComponentEvent.paramString()|Returns a parameter string identifying this event.

*java.awt.event.ComponentEvent_Description*

A low-level event which indicates that a component moved, changed size, or changed visibility (also, the root class for the other component-level events). 

Component events are provided for notification purposes ONLY; The AWT will automatically handle component moves and resizes internally so that GUI layout works properly regardless 
of whether a program is receiving these events or not. 

In addition to serving as the base class for other component-related events (InputEvent, FocusEvent, WindowEvent, ContainerEvent), this class defines the events that indicate 
changes in a component's size, position, or visibility. 

This low-level event is generated by a component object (such as a List) when the component is moved, resized, rendered invisible, or made visible again. The event is passed to 
every ComponentListener or ComponentAdapter object which registered to receive such events using the component's addComponentListener method. (ComponentAdapter objects implement 
the ComponentListener interface.) Each such listener object gets this ComponentEvent when the event occurs. 



*int_java.awt.event.ComponentEvent.COMPONENT_FIRST*

The first number in the range of ids used for component events. 


*int_java.awt.event.ComponentEvent.COMPONENT_HIDDEN*

This event indicates that the component was rendered invisible. 


*int_java.awt.event.ComponentEvent.COMPONENT_LAST*

The last number in the range of ids used for component events. 


*int_java.awt.event.ComponentEvent.COMPONENT_MOVED*

This event indicates that the component's position changed. 


*int_java.awt.event.ComponentEvent.COMPONENT_RESIZED*

This event indicates that the component's size changed. 


*int_java.awt.event.ComponentEvent.COMPONENT_SHOWN*

This event indicates that the component was made visible. 



*java.awt.event.ComponentEvent(Component,int)*

public ComponentEvent(
  java.awt.Component source,
  int id)

Constructs a ComponentEvent object. Note that passing in an invalid id results in unspecified behavior. This method throws an IllegalArgumentException if source is null. 

    source - the Component that originated the event 
    id - an integer indicating the type of event 

*java.awt.event.ComponentEvent.getComponent()*

public |java.awt.Component| getComponent()

Returns the originator of the event. 



    Returns: the Component object that originated the event, or null if the object is not a Component. 

*java.awt.event.ComponentEvent.paramString()*

public |java.lang.String| paramString()

Returns a parameter string identifying this event. This method is useful for event-logging and for debugging. 



    Returns: a string identifying the event and its attributes 



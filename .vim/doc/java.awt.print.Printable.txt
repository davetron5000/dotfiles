*java.awt.print.Printable* *Printable* The Printable interface is implemented 
 

public interface interface Printable


|java.awt.print.Printable_Description|
|java.awt.print.Printable_Fields|
|java.awt.print.Printable_Constructors|
|java.awt.print.Printable_Methods|

================================================================================

*java.awt.print.Printable_Fields*
|int_java.awt.print.Printable.NO_SUCH_PAGE|
|int_java.awt.print.Printable.PAGE_EXISTS|

*java.awt.print.Printable_Methods*
|java.awt.print.Printable.print(Graphics,PageFormat,int)|Prints the page at the

*java.awt.print.Printable_Description*

The Printable interface is implemented by the print methods of the current page 
painter, which is called by the printing system to render a page. When building 
a (|java.awt.print.Pageable|) , pairs of (|java.awt.print.PageFormat|) 
instances and instances that implement this interface are used to describe each 
page. The instance implementing Printable is called to print the page's 
graphics. 

A Printable(..) may be set on a PrinterJob. When the client subsequently 
initiates printing by calling PrinterJob.print(..) control 

is handed to the printing system until all pages have been printed. It does 
this by calling Printable.print(..) until all pages in the document have been 
printed. In using the Printable interface the printing commits to image the 
contents of a page whenever requested by the printing system. 

The parameters to Printable.print(..) include a PageFormat which describes the 
printable area of the page, needed for calculating the contents that will fit 
the page, and the page index, which specifies the zero-based print stream index 
of the requested page. 

For correct printing behaviour, the following points should be observed: 

The printing system may request a page index more than once. On each occasion 
equal PageFormat parameters will be supplied. 

The printing system will call Printable.print(..) with page indexes which 
increase monotonically, although as noted above, the Printable should expect 
multiple calls for a page index and that page indexes may be skipped, when page 
ranges are specified by the client, or by a user through a print dialog. 

If multiple collated copies of a document are requested, and the printer cannot 
natively support this, then the document may be imaged multiple times. Printing 
will start each copy from the lowest print stream page index page. 

With the exception of re-imaging an entire document for multiple collated 
copies, the increasing page index order means that when page N is requested if 
a client needs to calculate page break position, it may safely discard any 
state related to pages When called by the printing system the Printable must 
inspect and honour the supplied PageFormat parameter as well as the page index. 
This is key to correct printing behaviour, and it has the implication that the 
client has the responsibility of tracking what content belongs on the specified 
page. 

When the Printable is obtained from a client-supplied Pageable then the client 
may provide different PageFormats for each page index. Calculations of page 
breaks must account for this. 




*int_java.awt.print.Printable.NO_SUCH_PAGE*

The Printable interface is implemented by the print methods of the current page 
painter, which is called by the printing system to render a page. When building 
a (|java.awt.print.Pageable|) , pairs of (|java.awt.print.PageFormat|) 
instances and instances that implement this interface are used to describe each 
page. The instance implementing Printable is called to print the page's 
graphics. 

A Printable(..) may be set on a PrinterJob. When the client subsequently 
initiates printing by calling PrinterJob.print(..) control 

is handed to the printing system until all pages have been printed. It does 
this by calling Printable.print(..) until all pages in the document have been 
printed. In using the Printable interface the printing commits to image the 
contents of a page whenever requested by the printing system. 

The parameters to Printable.print(..) include a PageFormat which describes the 
printable area of the page, needed for calculating the contents that will fit 
the page, and the page index, which specifies the zero-based print stream index 
of the requested page. 

For correct printing behaviour, the following points should be observed: 

The printing system may request a page index more than once. On each occasion 
equal PageFormat parameters will be supplied. 

The printing system will call Printable.print(..) with page indexes which 
increase monotonically, although as noted above, the Printable should expect 
multiple calls for a page index and that page indexes may be skipped, when page 
ranges are specified by the client, or by a user through a print dialog. 

If multiple collated copies of a document are requested, and the printer cannot 
natively support this, then the document may be imaged multiple times. Printing 
will start each copy from the lowest print stream page index page. 

With the exception of re-imaging an entire document for multiple collated 
copies, the increasing page index order means that when page N is requested if 
a client needs to calculate page break position, it may safely discard any 
state related to pages When called by the printing system the Printable must 
inspect and honour the supplied PageFormat parameter as well as the page index. 
This is key to correct printing behaviour, and it has the implication that the 
client has the responsibility of tracking what content belongs on the specified 
page. 

When the Printable is obtained from a client-supplied Pageable then the client 
may provide different PageFormats for each page index. Calculations of page 
breaks must account for this. 




*int_java.awt.print.Printable.PAGE_EXISTS*

The Printable interface is implemented by the print methods of the current page 
painter, which is called by the printing system to render a page. When building 
a (|java.awt.print.Pageable|) , pairs of (|java.awt.print.PageFormat|) 
instances and instances that implement this interface are used to describe each 
page. The instance implementing Printable is called to print the page's 
graphics. 

A Printable(..) may be set on a PrinterJob. When the client subsequently 
initiates printing by calling PrinterJob.print(..) control 

is handed to the printing system until all pages have been printed. It does 
this by calling Printable.print(..) until all pages in the document have been 
printed. In using the Printable interface the printing commits to image the 
contents of a page whenever requested by the printing system. 

The parameters to Printable.print(..) include a PageFormat which describes the 
printable area of the page, needed for calculating the contents that will fit 
the page, and the page index, which specifies the zero-based print stream index 
of the requested page. 

For correct printing behaviour, the following points should be observed: 

The printing system may request a page index more than once. On each occasion 
equal PageFormat parameters will be supplied. 

The printing system will call Printable.print(..) with page indexes which 
increase monotonically, although as noted above, the Printable should expect 
multiple calls for a page index and that page indexes may be skipped, when page 
ranges are specified by the client, or by a user through a print dialog. 

If multiple collated copies of a document are requested, and the printer cannot 
natively support this, then the document may be imaged multiple times. Printing 
will start each copy from the lowest print stream page index page. 

With the exception of re-imaging an entire document for multiple collated 
copies, the increasing page index order means that when page N is requested if 
a client needs to calculate page break position, it may safely discard any 
state related to pages When called by the printing system the Printable must 
inspect and honour the supplied PageFormat parameter as well as the page index. 
This is key to correct printing behaviour, and it has the implication that the 
client has the responsibility of tracking what content belongs on the specified 
page. 

When the Printable is obtained from a client-supplied Pageable then the client 
may provide different PageFormats for each page index. Calculations of page 
breaks must account for this. 





*java.awt.print.Printable.print(Graphics,PageFormat,int)*

public int print(
  java.awt.Graphics graphics,
  java.awt.print.PageFormat pageFormat,
  int pageIndex)
  throws |java.awt.print.PrinterException|
         
Prints the page at the specified index into the specified (|java.awt.Graphics|) 
context in the specified format. A PrinterJob calls the Printable interface to 
request that a page be rendered into the context specified by graphics. The 
format of the page to be drawn is specified by pageFormat. The zero based index 
of the requested page is specified by pageIndex. If the requested page does not 
exist then this method returns NO_SUCH_PAGE; otherwise PAGE_EXISTS is returned. 
The Graphics class or subclass implements the 
(|java.awt.print.PrinterGraphics|) interface to provide additional information. 
If the Printable object aborts the print job then it throws a 
(|java.awt.print.PrinterException|) . 

    graphics - the context into which the page is drawn 
    pageFormat - the size and orientation of the page being drawn 
    pageIndex - the zero based index of the page to be drawn 

    Returns: PAGE_EXISTS if the page is rendered successfully or NO_SUCH_PAGE if pageIndex 
             specifies a non-existent page. 


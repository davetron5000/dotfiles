*javax.swing.text.ParagraphView* *ParagraphView* View of a simple line-wrapping 

public class ParagraphView
  extends    |javax.swing.text.FlowView|
  implements |javax.swing.text.TabExpander|

|javax.swing.text.ParagraphView_Description|
|javax.swing.text.ParagraphView_Fields|
|javax.swing.text.ParagraphView_Constructors|
|javax.swing.text.ParagraphView_Methods|

================================================================================

*javax.swing.text.ParagraphView_Fields*
|int_javax.swing.text.ParagraphView.firstLineIndent|

*javax.swing.text.ParagraphView_Constructors*
|javax.swing.text.ParagraphView(Element)|Constructs a ParagraphView for the giv

*javax.swing.text.ParagraphView_Methods*
|javax.swing.text.ParagraphView.adjustRow(ParagraphView.Row,int,int)|Adjusts th
|javax.swing.text.ParagraphView.breakView(int,float,Shape)|Breaks this view on 
|javax.swing.text.ParagraphView.changedUpdate(DocumentEvent,Shape,ViewFactory)|
|javax.swing.text.ParagraphView.createRow()|Create a View that should be used t
|javax.swing.text.ParagraphView.findOffsetToCharactersInString(char[],int)|Find
|javax.swing.text.ParagraphView.flipEastAndWestAtEnds(int,Position.Bias)|Determ
|javax.swing.text.ParagraphView.getAlignment(int)|Determines the desired alignm
|javax.swing.text.ParagraphView.getBreakWeight(int,float)|Gets the break weight
|javax.swing.text.ParagraphView.getClosestPositionTo(int,Position.Bias,Shape,int,Position.Bias[],int,int)|
|javax.swing.text.ParagraphView.getFlowSpan(int)|Fetches the constraining span 
|javax.swing.text.ParagraphView.getFlowStart(int)|Fetches the location along th
|javax.swing.text.ParagraphView.getLayoutView(int)|Returns the view at a given 
|javax.swing.text.ParagraphView.getLayoutViewCount()|Returns the number of view
|javax.swing.text.ParagraphView.getNextNorthSouthVisualPositionFrom(int,Position.Bias,Shape,int,Position.Bias[])|
|javax.swing.text.ParagraphView.getPartialSize(int,int)|Returns the size used b
|javax.swing.text.ParagraphView.getTabBase()|Returns where the tabs are calcula
|javax.swing.text.ParagraphView.getTabSet()|Gets the Tabset to be used in calcu
|javax.swing.text.ParagraphView.nextTabStop(float,int)|Returns the next tab sto
|javax.swing.text.ParagraphView.paint(Graphics,Shape)|Renders using the given r
|javax.swing.text.ParagraphView.setFirstLineIndent(float)|Sets the indent on th
|javax.swing.text.ParagraphView.setJustification(int)|Sets the type of justific
|javax.swing.text.ParagraphView.setLineSpacing(float)|Sets the line spacing.
|javax.swing.text.ParagraphView.setPropertiesFromAttributes()|Set the cached pr

*javax.swing.text.ParagraphView_Description*

View of a simple line-wrapping paragraph that supports multiple fonts, colors, 
components, icons, etc. It is basically a vertical box with a margin around it. 
The contents of the box are a bunch of rows which are special horizontal boxes. 
This view creates a collection of views that represent the child elements of 
the paragraph element. Each of these views are placed into a row directly if 
they will fit, otherwise the breakView method is called to try and carve the 
view into pieces that fit. 


*int_javax.swing.text.ParagraphView.firstLineIndent*

View of a simple line-wrapping paragraph that supports multiple fonts, colors, 
components, icons, etc. It is basically a vertical box with a margin around it. 
The contents of the box are a bunch of rows which are special horizontal boxes. 
This view creates a collection of views that represent the child elements of 
the paragraph element. Each of these views are placed into a row directly if 
they will fit, otherwise the breakView method is called to try and carve the 
view into pieces that fit. 



*javax.swing.text.ParagraphView(Element)*

public ParagraphView(javax.swing.text.Element elem)

Constructs a ParagraphView for the given element. 

    elem - the element that this view is responsible for 

*javax.swing.text.ParagraphView.adjustRow(ParagraphView.Row,int,int)*

protected void adjustRow(
  javax.swing.text.ParagraphView.Row r,
  int desiredSpan,
  int x)

Adjusts the given row if possible to fit within the layout span. By default 
this will try to find the highest break weight possible nearest the end of the 
row. If a forced break is encountered, the break will be positioned there. 

This is meant for internal usage, and should not be used directly. 

    r - the row to adjust to the current layout span 
    desiredSpan - the current layout span >= 0 
    x - the location r starts at 

*javax.swing.text.ParagraphView.breakView(int,float,Shape)*

public |javax.swing.text.View| breakView(
  int axis,
  float len,
  java.awt.Shape a)

Breaks this view on the given axis at the given length. 

ParagraphView instances are breakable along the Y_AXIS only, and only if len is 
after the first line. 

    axis - may be either View.X_AXIS or View.Y_AXIS 
    len - specifies where a potential break is desired along the given axis >= 0 
    a - the current allocation of the view 

    Returns: the fragment of the view that represents the given span, if the view can be 
             broken; if the view doesn't support breaking behavior, the view 
             itself is returned 
*javax.swing.text.ParagraphView.changedUpdate(DocumentEvent,Shape,ViewFactory)*

public void changedUpdate(
  javax.swing.event.DocumentEvent changes,
  java.awt.Shape a,
  javax.swing.text.ViewFactory f)

Gives notification from the document that attributes were changed in a location 
that this view is responsible for. 

    changes - the change information from the associated document 
    a - the current allocation of the view 
    f - the factory to use to rebuild if the view has children 

*javax.swing.text.ParagraphView.createRow()*

protected |javax.swing.text.View| createRow()

Create a View that should be used to hold a a row's worth of children in a 
flow. 


    Returns: 
*javax.swing.text.ParagraphView.findOffsetToCharactersInString(char[],int)*

protected int findOffsetToCharactersInString(
  char[] string,
  int start)

Finds the next character in the document with a character in string, starting 
at offset start. If there are no characters found, -1 will be returned. 

    string - the string of characters 
    start - where to start in the model >= 0 

    Returns: the document offset, or -1 if no characters found 
*javax.swing.text.ParagraphView.flipEastAndWestAtEnds(int,Position.Bias)*

protected boolean flipEastAndWestAtEnds(
  int position,
  javax.swing.text.Position.Bias bias)

Determines in which direction the next view lays. Consider the View at index n. 
Typically the Views are layed out from left to right, so that the View to the 
EAST will be at index n + 1, and the View to the WEST will be at index n - 1. 
In certain situations, such as with bidirectional text, it is possible that the 
View to EAST is not at index n + 1, but rather at index n - 1, or that the View 
to the WEST is not at index n - 1, but index n + 1. In this case this method 
would return true, indicating the Views are layed out in descending order. 

This will return true if the text is layed out right to left at position, 
otherwise false. 

    position - position into the model 
    bias - either Position.Bias.Forward or Position.Bias.Backward 

    Returns: true if the text is layed out right to left at position, otherwise false. 
*javax.swing.text.ParagraphView.getAlignment(int)*

public float getAlignment(int axis)

Determines the desired alignment for this view along an axis. This is 
implemented to give the alignment to the center of the first row along the y 
axis, and the default along the x axis. 

    axis - may be either View.X_AXIS or View.Y_AXIS 

    Returns: the desired alignment. This should be a value between 0.0 and 1.0 inclusive, 
             where 0 indicates alignment at the origin and 1.0 indicates 
             alignment to the full span away from the origin. An alignment of 
             0.5 would be the center of the view. 
*javax.swing.text.ParagraphView.getBreakWeight(int,float)*

public int getBreakWeight(
  int axis,
  float len)

Gets the break weight for a given location. 

ParagraphView instances are breakable along the Y_AXIS only, and only if len is 
after the first row. If the length is less than one row, a value of 
BadBreakWeight is returned. 

    axis - may be either View.X_AXIS or View.Y_AXIS 
    len - specifies where a potential break is desired >= 0 

    Returns: a value indicating the attractiveness of breaking here; either GoodBreakWeight 
             or BadBreakWeight 
*javax.swing.text.ParagraphView.getClosestPositionTo(int,Position.Bias,Shape,int,Position.Bias[],int,int)*

protected int getClosestPositionTo(
  int pos,
  javax.swing.text.Position.Bias b,
  java.awt.Shape a,
  int direction,
  javax.swing.text.Position.Bias[] biasRet,
  int rowIndex,
  int x)
  throws |javax.swing.text.BadLocationException|
         
Returns the closest model position to x. rowIndex gives the index of the view 
that corresponds that should be looked in. 

    pos - position into the model 
    a - the allocated region to render into 
    direction - one of the following values: 

SwingConstants.NORTH SwingConstants.SOUTH 
    biasRet - an array containing the bias that were checked in this method 
    rowIndex - the index of the view 
    x - the x coordinate of interest 

    Returns: the closest model position to x 
*javax.swing.text.ParagraphView.getFlowSpan(int)*

public int getFlowSpan(int index)

Fetches the constraining span to flow against for the given child index. 

    index - the index of the view being queried 

    Returns: the constraining span for the given view at index 
*javax.swing.text.ParagraphView.getFlowStart(int)*

public int getFlowStart(int index)

Fetches the location along the flow axis that the flow span will start at. 

    index - the index of the view being queried 

    Returns: the location for the given view at index 
*javax.swing.text.ParagraphView.getLayoutView(int)*

protected |javax.swing.text.View| getLayoutView(int index)

Returns the view at a given index. The child views of the paragraph are rows 
which have been used to arrange pieces of the Views that represent the child 
elements. This methods returns the view responsible for the child element index 
(prior to breaking). These are the Views that were produced from a factory (to 
represent the child elements) and used for layout. 

    index - the index of the desired view 

    Returns: the view at index 
*javax.swing.text.ParagraphView.getLayoutViewCount()*

protected int getLayoutViewCount()

Returns the number of views that this view is responsible for. The child views 
of the paragraph are rows which have been used to arrange pieces of the Views 
that represent the child elements. This is the number of views that have been 
tiled in two dimensions, and should be equivalent to the number of child 
elements to the element this view is responsible for. 


    Returns: the number of views that this ParagraphView is responsible for 
*javax.swing.text.ParagraphView.getNextNorthSouthVisualPositionFrom(int,Position.Bias,Shape,int,Position.Bias[])*

protected int getNextNorthSouthVisualPositionFrom(
  int pos,
  javax.swing.text.Position.Bias b,
  java.awt.Shape a,
  int direction,
  javax.swing.text.Position.Bias[] biasRet)
  throws |javax.swing.text.BadLocationException|
         
Returns the next visual position for the cursor, in either the east or west 
direction. Overridden from CompositeView. 

    pos - position into the model 
    b - either Position.Bias.Forward or Position.Bias.Backward 
    a - the allocated region to render into 
    direction - either SwingConstants.NORTH or SwingConstants.SOUTH 
    biasRet - an array containing the bias that were checked in this method 

    Returns: the location in the model that represents the next location visual position 
*javax.swing.text.ParagraphView.getPartialSize(int,int)*

protected float getPartialSize(
  int startOffset,
  int endOffset)

Returns the size used by the views between startOffset and endOffset. This uses 
getPartialView to calculate the size if the child view implements the 
TabableView interface. If a size is needed and a View does not implement the 
TabableView interface, the preferredSpan will be used. 

    startOffset - the starting document offset >= 0 
    endOffset - the ending document offset >= startOffset 

    Returns: the size >= 0 
*javax.swing.text.ParagraphView.getTabBase()*

protected float getTabBase()

Returns where the tabs are calculated from. 


    Returns: where tabs are calculated from 
*javax.swing.text.ParagraphView.getTabSet()*

protected |javax.swing.text.TabSet| getTabSet()

Gets the Tabset to be used in calculating tabs. 


    Returns: 
*javax.swing.text.ParagraphView.nextTabStop(float,int)*

public float nextTabStop(
  float x,
  int tabOffset)

Returns the next tab stop position given a reference position. This view 
implements the tab coordinate system, and calls getTabbedSpan on the logical 
children in the process of layout to determine the desired span of the 
children. The logical children can delegate their tab expansion upward to the 
paragraph which knows how to expand tabs. LabelView is an example of a view 
that delegates its tab expansion needs upward to the paragraph. 

This is implemented to try and locate a TabSet in the paragraph element's 
attribute set. If one can be found, its settings will be used, otherwise a 
default expansion will be provided. The base location for for tab expansion is 
the left inset from the paragraphs most recent allocation (which is what the 
layout of the children is based upon). 

    x - the X reference position 
    tabOffset - the position within the text stream that the tab occurred at >= 0 

    Returns: the trailing end of the tab expansion >= 0 
*javax.swing.text.ParagraphView.paint(Graphics,Shape)*

public void paint(
  java.awt.Graphics g,
  java.awt.Shape a)

Renders using the given rendering surface and area on that surface. This is 
implemented to delgate to the superclass after stashing the base coordinate for 
tab calculations. 

    g - the rendering surface to use 
    a - the allocated region to render into 

*javax.swing.text.ParagraphView.setFirstLineIndent(float)*

protected void setFirstLineIndent(float fi)

Sets the indent on the first line. 

    fi - the value in points 

*javax.swing.text.ParagraphView.setJustification(int)*

protected void setJustification(int j)

Sets the type of justification. 

    j - one of the following values: 

StyleConstants.ALIGN_LEFT StyleConstants.ALIGN_CENTER 
       StyleConstants.ALIGN_RIGHT 

*javax.swing.text.ParagraphView.setLineSpacing(float)*

protected void setLineSpacing(float ls)

Sets the line spacing. 

    ls - the value is a factor of the line hight 

*javax.swing.text.ParagraphView.setPropertiesFromAttributes()*

protected void setPropertiesFromAttributes()

Set the cached properties from the attributes. 




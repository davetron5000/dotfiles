*java.net.DatagramSocketImpl* *DatagramSocketImpl* Abstract datagram and multica

public abstract class DatagramSocketImpl
  extends    |java.lang.Object|
  implements |java.net.SocketOptions|

|java.net.DatagramSocketImpl_Description|
|java.net.DatagramSocketImpl_Fields|
|java.net.DatagramSocketImpl_Constructors|
|java.net.DatagramSocketImpl_Methods|

================================================================================

*java.net.DatagramSocketImpl_Fields*
|java.io.FileDescriptor_java.net.DatagramSocketImpl.fd|
|int_java.net.DatagramSocketImpl.localPort|

*java.net.DatagramSocketImpl_Constructors*
|java.net.DatagramSocketImpl()|

*java.net.DatagramSocketImpl_Methods*
|java.net.DatagramSocketImpl.bind(int,InetAddress)|Binds a datagram socket to a
|java.net.DatagramSocketImpl.close()|Close the socket.
|java.net.DatagramSocketImpl.connect(InetAddress,int)|Connects a datagram socke
|java.net.DatagramSocketImpl.create()|Creates a datagram socket.
|java.net.DatagramSocketImpl.disconnect()|Disconnects a datagram socket from it
|java.net.DatagramSocketImpl.getFileDescriptor()|Gets the datagram socket file 
|java.net.DatagramSocketImpl.getLocalPort()|Gets the local port.
|java.net.DatagramSocketImpl.getTimeToLive()|Retrieve the TTL (time-to-live) op
|java.net.DatagramSocketImpl.getTTL()|Retrieve the TTL (time-to-live) option.
|java.net.DatagramSocketImpl.join(InetAddress)|Join the multicast group.
|java.net.DatagramSocketImpl.joinGroup(SocketAddress,NetworkInterface)|Join the
|java.net.DatagramSocketImpl.leave(InetAddress)|Leave the multicast group.
|java.net.DatagramSocketImpl.leaveGroup(SocketAddress,NetworkInterface)|Leave t
|java.net.DatagramSocketImpl.peek(InetAddress)|Peek at the packet to see who it
|java.net.DatagramSocketImpl.peekData(DatagramPacket)|Peek at the packet to see
|java.net.DatagramSocketImpl.receive(DatagramPacket)|Receive the datagram packe
|java.net.DatagramSocketImpl.send(DatagramPacket)|Sends a datagram packet.
|java.net.DatagramSocketImpl.setTimeToLive(int)|Set the TTL (time-to-live) opti
|java.net.DatagramSocketImpl.setTTL(byte)|Set the TTL (time-to-live) option.

*java.net.DatagramSocketImpl_Description*

Abstract datagram and multicast socket implementation base class. 


*java.io.FileDescriptor_java.net.DatagramSocketImpl.fd*

Abstract datagram and multicast socket implementation base class. 


*int_java.net.DatagramSocketImpl.localPort*

Abstract datagram and multicast socket implementation base class. 



*java.net.DatagramSocketImpl()*

public DatagramSocketImpl()




*java.net.DatagramSocketImpl.bind(int,InetAddress)*

protected abstract void bind(
  int lport,
  java.net.InetAddress laddr)
  throws |java.net.SocketException|
         
Binds a datagram socket to a local port and address. 

    lport - the local port 
    laddr - the local address 

*java.net.DatagramSocketImpl.close()*

protected abstract void close()

Close the socket. 


*java.net.DatagramSocketImpl.connect(InetAddress,int)*

protected void connect(
  java.net.InetAddress address,
  int port)
  throws |java.net.SocketException|
         
Connects a datagram socket to a remote destination. This associates the remote 
address with the local socket so that datagrams may only be sent to this 
destination and received from this destination. This may be overridden to call 
a native system connect. 

If the remote destination to which the socket is connected does not exist, or 
is otherwise unreachable, and if an ICMP destination unreachable packet has 
been received for that address, then a subsequent call to send or receive may 
throw a PortUnreachableException. Note, there is no guarantee that the 
exception will be thrown. 

    address - the remote InetAddress to connect to 
    port - the remote port number 

*java.net.DatagramSocketImpl.create()*

protected abstract void create()
  throws |java.net.SocketException|
         
Creates a datagram socket. 


*java.net.DatagramSocketImpl.disconnect()*

protected void disconnect()

Disconnects a datagram socket from its remote destination. 


*java.net.DatagramSocketImpl.getFileDescriptor()*

protected |java.io.FileDescriptor| getFileDescriptor()

Gets the datagram socket file descriptor. 


    Returns: a FileDescriptor object representing the datagram socket file descriptor 
*java.net.DatagramSocketImpl.getLocalPort()*

protected int getLocalPort()

Gets the local port. 


    Returns: an int representing the local port value 
*java.net.DatagramSocketImpl.getTimeToLive()*

protected abstract int getTimeToLive()
  throws |java.io.IOException|
         
Retrieve the TTL (time-to-live) option. 


    Returns: an int representing the time-to-live value 
*java.net.DatagramSocketImpl.getTTL()*

protected abstract byte getTTL()
  throws |java.io.IOException|
         
Retrieve the TTL (time-to-live) option. 


    Returns: a byte representing the TTL value 
*java.net.DatagramSocketImpl.join(InetAddress)*

protected abstract void join(java.net.InetAddress inetaddr)
  throws |java.io.IOException|
         
Join the multicast group. 

    inetaddr - multicast address to join. 

*java.net.DatagramSocketImpl.joinGroup(SocketAddress,NetworkInterface)*

protected abstract void joinGroup(
  java.net.SocketAddress mcastaddr,
  java.net.NetworkInterface netIf)
  throws |java.io.IOException|
         
Join the multicast group. 

    mcastaddr - address to join. 
    netIf - specifies the local interface to receive multicast datagram packets 

*java.net.DatagramSocketImpl.leave(InetAddress)*

protected abstract void leave(java.net.InetAddress inetaddr)
  throws |java.io.IOException|
         
Leave the multicast group. 

    inetaddr - multicast address to leave. 

*java.net.DatagramSocketImpl.leaveGroup(SocketAddress,NetworkInterface)*

protected abstract void leaveGroup(
  java.net.SocketAddress mcastaddr,
  java.net.NetworkInterface netIf)
  throws |java.io.IOException|
         
Leave the multicast group. 

    mcastaddr - address to leave. 
    netIf - specified the local interface to leave the group at 

*java.net.DatagramSocketImpl.peek(InetAddress)*

protected abstract int peek(java.net.InetAddress i)
  throws |java.io.IOException|
         
Peek at the packet to see who it is from. 

    i - an InetAddress object 

    Returns: the address which the packet came from. 
*java.net.DatagramSocketImpl.peekData(DatagramPacket)*

protected abstract int peekData(java.net.DatagramPacket p)
  throws |java.io.IOException|
         
Peek at the packet to see who it is from. The data is returned, but not 
consumed, so that a subsequent peekData/receive operation will see the same 
data. 

    p - the Packet Received. 

    Returns: the address which the packet came from. 
*java.net.DatagramSocketImpl.receive(DatagramPacket)*

protected abstract void receive(java.net.DatagramPacket p)
  throws |java.io.IOException|
         
Receive the datagram packet. 

    p - the Packet Received. 

*java.net.DatagramSocketImpl.send(DatagramPacket)*

protected abstract void send(java.net.DatagramPacket p)
  throws |java.io.IOException|
         
Sends a datagram packet. The packet contains the data and the destination 
address to send the packet to. 

    p - the packet to be sent. 

*java.net.DatagramSocketImpl.setTimeToLive(int)*

protected abstract void setTimeToLive(int ttl)
  throws |java.io.IOException|
         
Set the TTL (time-to-live) option. 

    ttl - an int specifying the time-to-live value 

*java.net.DatagramSocketImpl.setTTL(byte)*

protected abstract void setTTL(byte ttl)
  throws |java.io.IOException|
         
Set the TTL (time-to-live) option. 

    ttl - a byte specifying the TTL value 



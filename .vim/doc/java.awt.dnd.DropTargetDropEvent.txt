*java.awt.dnd.DropTargetDropEvent* *DropTargetDropEvent* The DropTargetDropEvent

public class DropTargetDropEvent
  extends    |java.awt.dnd.DropTargetEvent|

|java.awt.dnd.DropTargetDropEvent_Description|
|java.awt.dnd.DropTargetDropEvent_Fields|
|java.awt.dnd.DropTargetDropEvent_Constructors|
|java.awt.dnd.DropTargetDropEvent_Methods|

================================================================================

*java.awt.dnd.DropTargetDropEvent_Constructors*
|java.awt.dnd.DropTargetDropEvent(DropTargetContext,Point,int,int)|Construct a 
|java.awt.dnd.DropTargetDropEvent(DropTargetContext,Point,int,int,boolean)|Cons

*java.awt.dnd.DropTargetDropEvent_Methods*
|java.awt.dnd.DropTargetDropEvent.acceptDrop(int)|accept the drop, using the sp
|java.awt.dnd.DropTargetDropEvent.dropComplete(boolean)|This method notifies th
|java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavors()|This method returns t
|java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavorsAsList()|This method ret
|java.awt.dnd.DropTargetDropEvent.getDropAction()|This method returns the user 
|java.awt.dnd.DropTargetDropEvent.getLocation()|This method returns a Point  in
|java.awt.dnd.DropTargetDropEvent.getSourceActions()|This method returns the so
|java.awt.dnd.DropTargetDropEvent.getTransferable()|This method returns the Tra
|java.awt.dnd.DropTargetDropEvent.isDataFlavorSupported(DataFlavor)|This method
|java.awt.dnd.DropTargetDropEvent.isLocalTransfer()|This method returns an int 
|java.awt.dnd.DropTargetDropEvent.rejectDrop()|reject the Drop.

*java.awt.dnd.DropTargetDropEvent_Description*

The DropTargetDropEvent is delivered via the DropTargetListener drop() method. 

The DropTargetDropEvent reports the source drop actions and the user drop 
action that reflect the current state of the drag-and-drop operation. 

Source drop actions is a bitwise mask of DnDConstants that represents the set 
of drop actions supported by the drag source for this drag-and-drop operation. 

User drop action depends on the drop actions supported by the drag source and 
the drop action selected by the user. The user can select a drop action by 
pressing modifier keys during the drag operation: 

Ctrl + Shift -> ACTION_LINK Ctrl -> ACTION_COPY Shift -> ACTION_MOVE 

If the user selects a drop action, the user drop action is one of DnDConstants 
that represents the selected drop action if this drop action is supported by 
the drag source or DnDConstants.ACTION_NONE if this drop action is not 
supported by the drag source. 

If the user doesn't select a drop action, the set of DnDConstants that 
represents the set of drop actions supported by the drag source is searched for 
DnDConstants.ACTION_MOVE, then for DnDConstants.ACTION_COPY, then for 
DnDConstants.ACTION_LINK and the user drop action is the first constant found. 
If no constant is found the user drop action is DnDConstants.ACTION_NONE. 


*java.awt.dnd.DropTargetDropEvent(DropTargetContext,Point,int,int)*

public DropTargetDropEvent(
  java.awt.dnd.DropTargetContext dtc,
  java.awt.Point cursorLocn,
  int dropAction,
  int srcActions)

Construct a DropTargetDropEvent given the DropTargetContext for this operation, 
the location of the drag Cursor's hotspot in the Component's coordinates, the 
currently selected user drop action, and the current set of actions supported 
by the source. By default, this constructor assumes that the target is not in 
the same virtual machine as the source; that is, 
(|java.awt.dnd.DropTargetDropEvent|) will return false. 

    dtc - The DropTargetContext for this operation 
    cursorLocn - The location of the "Drag" Cursor's hotspot in Component coordinates 
    dropAction - the user drop action. 
    srcActions - the source drop actions. 

*java.awt.dnd.DropTargetDropEvent(DropTargetContext,Point,int,int,boolean)*

public DropTargetDropEvent(
  java.awt.dnd.DropTargetContext dtc,
  java.awt.Point cursorLocn,
  int dropAction,
  int srcActions,
  boolean isLocal)

Construct a DropTargetEvent given the DropTargetContext for this operation, the 
location of the drag Cursor's hotspot in the Component's coordinates, the 
currently selected user drop action, the current set of actions supported by 
the source, and a boolean indicating if the source is in the same JVM as the 
target. 

    dtc - The DropTargetContext for this operation 
    cursorLocn - The location of the "Drag" Cursor's hotspot in Component's coordinates 
    dropAction - the user drop action. 
    srcActions - the source drop actions. 
    isLocal - True if the source is in the same JVM as the target 

*java.awt.dnd.DropTargetDropEvent.acceptDrop(int)*

public void acceptDrop(int dropAction)

accept the drop, using the specified action. 

    dropAction - the specified action 

*java.awt.dnd.DropTargetDropEvent.dropComplete(boolean)*

public void dropComplete(boolean success)

This method notifies the DragSource that the drop transfer(s) are completed. 

    success - a boolean indicating that the drop transfer(s) are completed. 

*java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavors()*

public |java.awt.datatransfer.DataFlavor| getCurrentDataFlavors()

This method returns the current DataFlavors. 


    Returns: current DataFlavors 
*java.awt.dnd.DropTargetDropEvent.getCurrentDataFlavorsAsList()*

public |java.util.List| getCurrentDataFlavorsAsList()

This method returns the currently available DataFlavors as a java.util.List. 


    Returns: the currently available DataFlavors as a java.util.List 
*java.awt.dnd.DropTargetDropEvent.getDropAction()*

public int getDropAction()

This method returns the user drop action. 


    Returns: the user drop actions. 
*java.awt.dnd.DropTargetDropEvent.getLocation()*

public |java.awt.Point| getLocation()

This method returns a Point indicating the Cursor's current location in the 
Component's coordinates. 


    Returns: the current Cursor location in Component's coords. 
*java.awt.dnd.DropTargetDropEvent.getSourceActions()*

public int getSourceActions()

This method returns the source drop actions. 


    Returns: the source drop actions. 
*java.awt.dnd.DropTargetDropEvent.getTransferable()*

public |java.awt.datatransfer.Transferable| getTransferable()

This method returns the Transferable object associated with the drop. 


    Returns: the Transferable associated with the drop 
*java.awt.dnd.DropTargetDropEvent.isDataFlavorSupported(DataFlavor)*

public boolean isDataFlavorSupported(java.awt.datatransfer.DataFlavor df)

This method returns a boolean indicating if the specified DataFlavor is 
available from the source. 

    df - the DataFlavor to test 

    Returns: if the DataFlavor specified is available from the source 
*java.awt.dnd.DropTargetDropEvent.isLocalTransfer()*

public boolean isLocalTransfer()

This method returns an int indicating if the source is in the same JVM as the 
target. 


    Returns: if the Source is in the same JVM 
*java.awt.dnd.DropTargetDropEvent.rejectDrop()*

public void rejectDrop()

reject the Drop. 




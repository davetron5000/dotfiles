*java.awt.Component.AccessibleAWTComponent* *Component.AccessibleAWTComponent* I

protected abstract class Component.AccessibleAWTComponent
  extends    |javax.accessibility.AccessibleContext|
  implements |java.io.Serializable|
             |javax.accessibility.AccessibleComponent|

|java.awt.Component.AccessibleAWTComponent_Description|
|java.awt.Component.AccessibleAWTComponent_Fields|
|java.awt.Component.AccessibleAWTComponent_Constructors|
|java.awt.Component.AccessibleAWTComponent_Methods|

================================================================================

*java.awt.Component.AccessibleAWTComponent_Fields*
|java.awt.event.ComponentListener_java.awt.Component.AccessibleAWTComponent.accessibleAWTComponentHandler|
|java.awt.event.FocusListener_java.awt.Component.AccessibleAWTComponent.accessibleAWTFocusHandler|

*java.awt.Component.AccessibleAWTComponent_Constructors*
|java.awt.Component.AccessibleAWTComponent()|Though the class is abstract, this

*java.awt.Component.AccessibleAWTComponent_Methods*
|java.awt.Component.AccessibleAWTComponent.addFocusListener(FocusListener)|Adds
|java.awt.Component.AccessibleAWTComponent.addPropertyChangeListener(PropertyChangeListener)|
|java.awt.Component.AccessibleAWTComponent.contains(Point)|Checks whether the s
|java.awt.Component.AccessibleAWTComponent.getAccessibleAt(Point)|Returns the A
|java.awt.Component.AccessibleAWTComponent.getAccessibleChild(int)|Returns the 
|java.awt.Component.AccessibleAWTComponent.getAccessibleChildrenCount()|Returns
|java.awt.Component.AccessibleAWTComponent.getAccessibleComponent()|Gets the Ac
|java.awt.Component.AccessibleAWTComponent.getAccessibleDescription()|Gets the 
|java.awt.Component.AccessibleAWTComponent.getAccessibleIndexInParent()|Gets th
|java.awt.Component.AccessibleAWTComponent.getAccessibleName()|Gets the accessi
|java.awt.Component.AccessibleAWTComponent.getAccessibleParent()|Gets the Acces
|java.awt.Component.AccessibleAWTComponent.getAccessibleRole()|Gets the role of
|java.awt.Component.AccessibleAWTComponent.getAccessibleStateSet()|Gets the sta
|java.awt.Component.AccessibleAWTComponent.getBackground()|Gets the background 
|java.awt.Component.AccessibleAWTComponent.getBounds()|Gets the bounds of this 
|java.awt.Component.AccessibleAWTComponent.getCursor()|Gets the Cursor of this 
|java.awt.Component.AccessibleAWTComponent.getFont()|Gets the Font of this obje
|java.awt.Component.AccessibleAWTComponent.getFontMetrics(Font)|Gets the FontMe
|java.awt.Component.AccessibleAWTComponent.getForeground()|Gets the foreground 
|java.awt.Component.AccessibleAWTComponent.getLocale()|Returns the locale of th
|java.awt.Component.AccessibleAWTComponent.getLocation()|Gets the location of t
|java.awt.Component.AccessibleAWTComponent.getLocationOnScreen()|Returns the lo
|java.awt.Component.AccessibleAWTComponent.getSize()|Returns the size of this o
|java.awt.Component.AccessibleAWTComponent.isEnabled()|Determines if the object
|java.awt.Component.AccessibleAWTComponent.isFocusTraversable()|Returns whether
|java.awt.Component.AccessibleAWTComponent.isShowing()|Determines if the object
|java.awt.Component.AccessibleAWTComponent.isVisible()|Determines if the object
|java.awt.Component.AccessibleAWTComponent.removeFocusListener(FocusListener)|R
|java.awt.Component.AccessibleAWTComponent.removePropertyChangeListener(PropertyChangeListener)|
|java.awt.Component.AccessibleAWTComponent.requestFocus()|Requests focus for th
|java.awt.Component.AccessibleAWTComponent.setBackground(Color)|Sets the backgr
|java.awt.Component.AccessibleAWTComponent.setBounds(Rectangle)|Sets the bounds
|java.awt.Component.AccessibleAWTComponent.setCursor(Cursor)|Sets the Cursor of
|java.awt.Component.AccessibleAWTComponent.setEnabled(boolean)|Sets the enabled
|java.awt.Component.AccessibleAWTComponent.setFont(Font)|Sets the Font of this 
|java.awt.Component.AccessibleAWTComponent.setForeground(Color)|Sets the foregr
|java.awt.Component.AccessibleAWTComponent.setLocation(Point)|Sets the location
|java.awt.Component.AccessibleAWTComponent.setSize(Dimension)|Resizes this obje
|java.awt.Component.AccessibleAWTComponent.setVisible(boolean)|Sets the visible

*java.awt.Component.AccessibleAWTComponent_Description*

Inner class of Component used to provide default support for accessibility. 
This class is not meant to be used directly by application developers, but is 
instead meant only to be subclassed by component developers. 

The class used to obtain the accessible role for this object. 


*java.awt.event.ComponentListener_java.awt.Component.AccessibleAWTComponent.accessibleAWTComponentHandler*

Inner class of Component used to provide default support for accessibility. 
This class is not meant to be used directly by application developers, but is 
instead meant only to be subclassed by component developers. 

The class used to obtain the accessible role for this object. 


*java.awt.event.FocusListener_java.awt.Component.AccessibleAWTComponent.accessibleAWTFocusHandler*

Inner class of Component used to provide default support for accessibility. 
This class is not meant to be used directly by application developers, but is 
instead meant only to be subclassed by component developers. 

The class used to obtain the accessible role for this object. 



*java.awt.Component.AccessibleAWTComponent()*

protected Component.AccessibleAWTComponent()

Though the class is abstract, this should be called by all sub-classes. 


*java.awt.Component.AccessibleAWTComponent.addFocusListener(FocusListener)*

public void addFocusListener(java.awt.event.FocusListener l)

Adds the specified focus listener to receive focus events from this component. 

    l - the focus listener 

*java.awt.Component.AccessibleAWTComponent.addPropertyChangeListener(PropertyChangeListener)*

public void addPropertyChangeListener(java.beans.PropertyChangeListener listener)

Adds a PropertyChangeListener to the listener list. 

    listener - the property change listener to be added 

*java.awt.Component.AccessibleAWTComponent.contains(Point)*

public boolean contains(java.awt.Point p)

Checks whether the specified point is within this object's bounds, where the 
point's x and y coordinates are defined to be relative to the coordinate system 
of the object. 

    p - the Point relative to the coordinate system of the object 

    Returns: true if object contains Point; otherwise false 
*java.awt.Component.AccessibleAWTComponent.getAccessibleAt(Point)*

public |javax.accessibility.Accessible| getAccessibleAt(java.awt.Point p)

Returns the Accessible child, if one exists, contained at the local coordinate 
Point. Otherwise returns null. 

    p - the point defining the top-left corner of the Accessible, given in the 
       coordinate space of the object's parent 

    Returns: the Accessible, if it exists, at the specified location; else null 
*java.awt.Component.AccessibleAWTComponent.getAccessibleChild(int)*

public |javax.accessibility.Accessible| getAccessibleChild(int i)

Returns the nth Accessible child of the object. 

    i - zero-based index of child 

    Returns: the nth Accessible child of the object 
*java.awt.Component.AccessibleAWTComponent.getAccessibleChildrenCount()*

public int getAccessibleChildrenCount()

Returns the number of accessible children in the object. If all of the children 
of this object implement Accessible, then this method should return the number 
of children of this object. 


    Returns: the number of accessible children in the object 
*java.awt.Component.AccessibleAWTComponent.getAccessibleComponent()*

public |javax.accessibility.AccessibleComponent| getAccessibleComponent()

Gets the AccessibleComponent associated with this object if one exists. 
Otherwise return null. 


    Returns: the component 
*java.awt.Component.AccessibleAWTComponent.getAccessibleDescription()*

public |java.lang.String| getAccessibleDescription()

Gets the accessible description of this object. This should be a concise, 
localized description of what this object is - what is its meaning to the user. 
If the object has a tooltip, the tooltip text may be an appropriate string to 
return, assuming it contains a concise description of the object (instead of 
just the name of the object - e.g. a "Save" icon on a toolbar that had "save" 
as the tooltip text shouldn't return the tooltip text as the description, but 
something like "Saves the current text document" instead). 


    Returns: the localized description of the object -- can be null if this object does not 
             have a description 
*java.awt.Component.AccessibleAWTComponent.getAccessibleIndexInParent()*

public int getAccessibleIndexInParent()

Gets the index of this object in its accessible parent. 


    Returns: the index of this object in its parent; or -1 if this object does not have an 
             accessible parent 
*java.awt.Component.AccessibleAWTComponent.getAccessibleName()*

public |java.lang.String| getAccessibleName()

Gets the accessible name of this object. This should almost never return 
java.awt.Component.getName(), as that generally isn't a localized name, and 
doesn't have meaning for the user. If the object is fundamentally a text object 
(e.g. a menu item), the accessible name should be the text of the object (e.g. 
"save"). If the object has a tooltip, the tooltip text may also be an 
appropriate String to return. 


    Returns: the localized name of the object -- can be null if this object does not have a 
             name 
*java.awt.Component.AccessibleAWTComponent.getAccessibleParent()*

public |javax.accessibility.Accessible| getAccessibleParent()

Gets the Accessible parent of this object. If the parent of this object 
implements Accessible, this method should simply return getParent. 


    Returns: the Accessible parent of this object -- can be null if this object does not 
             have an Accessible parent 
*java.awt.Component.AccessibleAWTComponent.getAccessibleRole()*

public |javax.accessibility.AccessibleRole| getAccessibleRole()

Gets the role of this object. 


    Returns: an instance of AccessibleRole describing the role of the object 
*java.awt.Component.AccessibleAWTComponent.getAccessibleStateSet()*

public |javax.accessibility.AccessibleStateSet| getAccessibleStateSet()

Gets the state of this object. 


    Returns: an instance of AccessibleStateSet containing the current state set of the 
             object 
*java.awt.Component.AccessibleAWTComponent.getBackground()*

public |java.awt.Color| getBackground()

Gets the background color of this object. 


    Returns: the background color, if supported, of the object; otherwise, null 
*java.awt.Component.AccessibleAWTComponent.getBounds()*

public |java.awt.Rectangle| getBounds()

Gets the bounds of this object in the form of a Rectangle object. The bounds 
specify this object's width, height, and location relative to its parent. 


    Returns: a rectangle indicating this component's bounds; null if this object is not on 
             the screen 
*java.awt.Component.AccessibleAWTComponent.getCursor()*

public |java.awt.Cursor| getCursor()

Gets the Cursor of this object. 


    Returns: the Cursor, if supported, of the object; otherwise, null 
*java.awt.Component.AccessibleAWTComponent.getFont()*

public |java.awt.Font| getFont()

Gets the Font of this object. 


    Returns: the Font, if supported, for the object; otherwise, null 
*java.awt.Component.AccessibleAWTComponent.getFontMetrics(Font)*

public |java.awt.FontMetrics| getFontMetrics(java.awt.Font f)

Gets the FontMetrics of this object. 

    f - the Font 

    Returns: the FontMetrics, if supported, the object; otherwise, null 
*java.awt.Component.AccessibleAWTComponent.getForeground()*

public |java.awt.Color| getForeground()

Gets the foreground color of this object. 


    Returns: the foreground color, if supported, of the object; otherwise, null 
*java.awt.Component.AccessibleAWTComponent.getLocale()*

public |java.util.Locale| getLocale()

Returns the locale of this object. 


    Returns: the locale of this object 
*java.awt.Component.AccessibleAWTComponent.getLocation()*

public |java.awt.Point| getLocation()

Gets the location of the object relative to the parent in the form of a point 
specifying the object's top-left corner in the screen's coordinate space. 


    Returns: an instance of Point representing the top-left corner of the object's bounds in 
             the coordinate space of the screen; null if this object or its 
             parent are not on the screen 
*java.awt.Component.AccessibleAWTComponent.getLocationOnScreen()*

public |java.awt.Point| getLocationOnScreen()

Returns the location of the object on the screen. 


    Returns: location of object on screen -- can be null if this object is not on the screen 
*java.awt.Component.AccessibleAWTComponent.getSize()*

public |java.awt.Dimension| getSize()

Returns the size of this object in the form of a Dimension object. The height 
field of the Dimension object contains this objects's height, and the width 
field of the Dimension object contains this object's width. 


    Returns: a Dimension object that indicates the size of this component; null if this 
             object is not on the screen 
*java.awt.Component.AccessibleAWTComponent.isEnabled()*

public boolean isEnabled()

Determines if the object is enabled. 


    Returns: true if object is enabled; otherwise, false 
*java.awt.Component.AccessibleAWTComponent.isFocusTraversable()*

public boolean isFocusTraversable()

Returns whether this object can accept focus or not. 


    Returns: true if object can accept focus; otherwise false 
*java.awt.Component.AccessibleAWTComponent.isShowing()*

public boolean isShowing()

Determines if the object is showing. This is determined by checking the 
visibility of the object and ancestors of the object. Note: this will return 
true even if the object is obscured by another (for example, it happens to be 
underneath a menu that was pulled down). 


    Returns: true if object is showing; otherwise, false 
*java.awt.Component.AccessibleAWTComponent.isVisible()*

public boolean isVisible()

Determines if the object is visible. Note: this means that the object intends 
to be visible; however, it may not in fact be showing on the screen because one 
of the objects that this object is contained by is not visible. To determine if 
an object is showing on the screen, use isShowing. 


    Returns: true if object is visible; otherwise, false 
*java.awt.Component.AccessibleAWTComponent.removeFocusListener(FocusListener)*

public void removeFocusListener(java.awt.event.FocusListener l)

Removes the specified focus listener so it no longer receives focus events from 
this component. 

    l - the focus listener 

*java.awt.Component.AccessibleAWTComponent.removePropertyChangeListener(PropertyChangeListener)*

public void removePropertyChangeListener(java.beans.PropertyChangeListener listener)

Remove a PropertyChangeListener from the listener list. This removes a 
PropertyChangeListener that was registered for all properties. 

    listener - The PropertyChangeListener to be removed 

*java.awt.Component.AccessibleAWTComponent.requestFocus()*

public void requestFocus()

Requests focus for this object. 


*java.awt.Component.AccessibleAWTComponent.setBackground(Color)*

public void setBackground(java.awt.Color c)

Sets the background color of this object. (For transparency, see isOpaque.) 

    c - the new Color for the background 

*java.awt.Component.AccessibleAWTComponent.setBounds(Rectangle)*

public void setBounds(java.awt.Rectangle r)

Sets the bounds of this object in the form of a Rectangle object. The bounds 
specify this object's width, height, and location relative to its parent. 

    r - a rectangle indicating this component's bounds 

*java.awt.Component.AccessibleAWTComponent.setCursor(Cursor)*

public void setCursor(java.awt.Cursor cursor)

Sets the Cursor of this object. 

    cursor - the new Cursor for the object 

*java.awt.Component.AccessibleAWTComponent.setEnabled(boolean)*

public void setEnabled(boolean b)

Sets the enabled state of the object. 

    b - if true, enables this object; otherwise, disables it 

*java.awt.Component.AccessibleAWTComponent.setFont(Font)*

public void setFont(java.awt.Font f)

Sets the Font of this object. 

    f - the new Font for the object 

*java.awt.Component.AccessibleAWTComponent.setForeground(Color)*

public void setForeground(java.awt.Color c)

Sets the foreground color of this object. 

    c - the new Color for the foreground 

*java.awt.Component.AccessibleAWTComponent.setLocation(Point)*

public void setLocation(java.awt.Point p)

Sets the location of the object relative to the parent. 

    p - the coordinates of the object 

*java.awt.Component.AccessibleAWTComponent.setSize(Dimension)*

public void setSize(java.awt.Dimension d)

Resizes this object so that it has width width and height. 

    d - - the dimension specifying the new size of the object 

*java.awt.Component.AccessibleAWTComponent.setVisible(boolean)*

public void setVisible(boolean b)

Sets the visible state of the object. 

    b - if true, shows this object; otherwise, hides it 



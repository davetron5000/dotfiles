*java.io.FilterInputStream* *FilterInputStream* A FilterInputStream contains
 some other input stream, which it uses as
 its  basic source of data, possibly transforming
 the data 

public class FilterInputStream
  extends    |java.io.InputStream|

|java.io.FilterInputStream_Description|
|java.io.FilterInputStream_Fields|
|java.io.FilterInputStream_Constructors|
|java.io.FilterInputStream_Methods|

====================================================================================================================================================================================

*java.io.FilterInputStream_Fields*
|java.io.InputStream_java.io.FilterInputStream.in|

*java.io.FilterInputStream_Constructors*
|java.io.FilterInputStream(InputStream)|Creates a FilterInputStream  by assigning the  argument in  to the field this.in so as  to remember it for later use.

*java.io.FilterInputStream_Methods*
|java.io.FilterInputStream.available()|Returns the number of bytes that can be read from this input   stream without blocking.
|java.io.FilterInputStream.close()|Closes this input stream and releases any system resources   associated with the stream.
|java.io.FilterInputStream.mark(int)|Marks the current position in this input stream.
|java.io.FilterInputStream.markSupported()|Tests if this input stream supports the mark   and reset methods.
|java.io.FilterInputStream.read()|Reads the next byte of data from this input stream.
|java.io.FilterInputStream.read(byte[])|Reads up to byte.length bytes of data from this   input stream into an array of bytes.
|java.io.FilterInputStream.read(byte[],int,int)|Reads up to len bytes of data from this input stream   into an array of bytes.
|java.io.FilterInputStream.reset()|Repositions this stream to the position at the time the   mark method was last called on this input stream.
|java.io.FilterInputStream.skip(long)|Skips over and discards n bytes of data from the   input stream.

*java.io.FilterInputStream_Description*

A FilterInputStream contains some other input stream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional 
functionality. The class FilterInputStream itself simply overrides all methods of InputStream with versions that pass all requests to the contained input stream. Subclasses of 
FilterInputStream may further override some of these methods and may also provide additional methods and fields. 



*java.io.InputStream_java.io.FilterInputStream.in*

The input stream to be filtered. 



*java.io.FilterInputStream(InputStream)*

protected FilterInputStream(java.io.InputStream in)

Creates a FilterInputStream by assigning the argument in to the field this.in so as to remember it for later use. 

    in - the underlying input stream, or null if this instance is to be created without an underlying stream. 

*java.io.FilterInputStream.available()*

public int available()
  throws |java.io.IOException|
         
Returns the number of bytes that can be read from this input stream without blocking. 

This method simply performs in.available() and returns the result. 



    Returns: the number of bytes that can be read from the input stream without blocking. 

*java.io.FilterInputStream.close()*

public void close()
  throws |java.io.IOException|
         
Closes this input stream and releases any system resources associated with the stream. This method simply performs in.close(). 



*java.io.FilterInputStream.mark(int)*

public synchronized void mark(int readlimit)

Marks the current position in this input stream. A subsequent call to the reset method repositions this stream at the last marked position so that subsequent reads re-read the 
same bytes. 

The readlimit argument tells this input stream to allow that many bytes to be read before the mark position gets invalidated. 

This method simply performs in.mark(readlimit). 


    readlimit - the maximum limit of bytes that can be read before the mark position becomes invalid. 

*java.io.FilterInputStream.markSupported()*

public boolean markSupported()

Tests if this input stream supports the mark and reset methods. This method simply performs in.markSupported(). 



    Returns: true if this stream type supports the mark and reset method; false otherwise. 

*java.io.FilterInputStream.read()*

public int read()
  throws |java.io.IOException|
         
Reads the next byte of data from this input stream. The value byte is returned as an int in the range 0 to 255. If no byte is available because the end of the stream has been 
reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown. 

This method simply performs in.read() and returns the result. 



    Returns: the next byte of data, or -1 if the end of the stream is reached. 

*java.io.FilterInputStream.read(byte[])*

public int read(byte[] b)
  throws |java.io.IOException|
         
Reads up to byte.length bytes of data from this input stream into an array of bytes. This method blocks until some input is available. 

This method simply performs the call read(b, 0, b.length) and returns the result. It is important that it does not do in.read(b) instead; certain subclasses of FilterInputStream 
depend on the implementation strategy actually used. 


    b - the buffer into which the data is read. 

    Returns: the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached. 

*java.io.FilterInputStream.read(byte[],int,int)*

public int read(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Reads up to len bytes of data from this input stream into an array of bytes. This method blocks until some input is available. 

This method simply performs in.read(b, off, len) and returns the result. 


    b - the buffer into which the data is read. 
    off - the start offset of the data. 
    len - the maximum number of bytes read. 

    Returns: the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached. 

*java.io.FilterInputStream.reset()*

public synchronized void reset()
  throws |java.io.IOException|
         
Repositions this stream to the position at the time the mark method was last called on this input stream. 

This method simply performs in.reset(). 

Stream marks are intended to be used in situations where you need to read ahead a little to see what's in the stream. Often this is most easily done by invoking some general 
parser. If the stream is of the type handled by the parse, it just chugs along happily. If the stream is not of that type, the parser should toss an exception when it fails. If 
this happens within readlimit bytes, it allows the outer code to reset the stream and try another parser. 



*java.io.FilterInputStream.skip(long)*

public long skip(long n)
  throws |java.io.IOException|
         
Skips over and discards n bytes of data from the input stream. The skip method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly 0. The 
actual number of bytes skipped is returned. 

This method simply performs in.skip(n). 


    n - the number of bytes to be skipped. 

    Returns: the actual number of bytes skipped. 



*javax.swing.JSpinner.DefaultEditor* *JSpinner.DefaultEditor* A simple base clas

public static class JSpinner.DefaultEditor
  extends    |javax.swing.JPanel|
  implements |javax.swing.event.ChangeListener|
             |java.beans.PropertyChangeListener|
             |java.awt.LayoutManager|

|javax.swing.JSpinner.DefaultEditor_Description|
|javax.swing.JSpinner.DefaultEditor_Fields|
|javax.swing.JSpinner.DefaultEditor_Constructors|
|javax.swing.JSpinner.DefaultEditor_Methods|

================================================================================

*javax.swing.JSpinner.DefaultEditor_Constructors*
|javax.swing.JSpinner.DefaultEditor(JSpinner)|Constructs an editor component fo

*javax.swing.JSpinner.DefaultEditor_Methods*
|javax.swing.JSpinner.DefaultEditor.addLayoutComponent(String,Component)|This L
|javax.swing.JSpinner.DefaultEditor.commitEdit()|Pushes the currently edited va
|javax.swing.JSpinner.DefaultEditor.dismiss(JSpinner)|Disconnect this editor fr
|javax.swing.JSpinner.DefaultEditor.getSpinner()|Returns the JSpinner ancestor 
|javax.swing.JSpinner.DefaultEditor.getTextField()|Returns the JFormattedTextFi
|javax.swing.JSpinner.DefaultEditor.layoutContainer(Container)|Resize the one (
|javax.swing.JSpinner.DefaultEditor.minimumLayoutSize(Container)|Returns the mi
|javax.swing.JSpinner.DefaultEditor.preferredLayoutSize(Container)|Returns the 
|javax.swing.JSpinner.DefaultEditor.propertyChange(PropertyChangeEvent)|Called 
|javax.swing.JSpinner.DefaultEditor.removeLayoutComponent(Component)|This Layou
|javax.swing.JSpinner.DefaultEditor.stateChanged(ChangeEvent)|This method is ca

*javax.swing.JSpinner.DefaultEditor_Description*

A simple base class for more specialized editors that displays a read-only view 
of the model's current value with a JFormattedTextField. Subclasses can 
configure the JFormattedTextField to create an editor that's appropriate for 
the type of model they support and they may want to override the stateChanged 
and propertyChanged methods, which keep the model and the text field in sync. 

This class defines a dismiss method that removes the editors ChangeListener 
from the JSpinner that it's part of. The setEditor method knows about 
DefaultEditor.dismiss, so if the developer replaces an editor that's derived 
from JSpinner.DefaultEditor its ChangeListener connection back to the JSpinner 
will be removed. However after that, it's up to the developer to manage their 
editor listeners. Similarly, if a subclass overrides createEditor, it's up to 
the subclasser to deal with their editor subsequently being replaced (with 
setEditor). We expect that in most cases, and in editor installed with 
setEditor or created by a createEditor override, will not be replaced anyway. 

This class is the LayoutManager for it's single JFormattedTextField child. By 
default the child is just centered with the parents insets. 


*javax.swing.JSpinner.DefaultEditor(JSpinner)*

public JSpinner.DefaultEditor(javax.swing.JSpinner spinner)

Constructs an editor component for the specified JSpinner. This DefaultEditor 
is it's own layout manager and it is added to the spinner's ChangeListener 
list. The constructor creates a single JFormattedTextField child, initializes 
it's value to be the spinner model's current value and adds it to this 
DefaultEditor. 

    spinner - the spinner whose model this editor will monitor 

*javax.swing.JSpinner.DefaultEditor.addLayoutComponent(String,Component)*

public void addLayoutComponent(
  java.lang.String name,
  java.awt.Component child)

This LayoutManager method does nothing. We're only managing a single child and 
there's no support for layout constraints. 

    name - ignored 
    child - ignored 

*javax.swing.JSpinner.DefaultEditor.commitEdit()*

public void commitEdit()
  throws |java.text.ParseException|
         
Pushes the currently edited value to the SpinnerModel. 

The default implementation invokes commitEdit on the JFormattedTextField. 


*javax.swing.JSpinner.DefaultEditor.dismiss(JSpinner)*

public void dismiss(javax.swing.JSpinner spinner)

Disconnect this editor from the specified JSpinner. By default, this method 
removes itself from the spinners ChangeListener list. 

    spinner - the JSpinner to disconnect this editor from; the same spinner as was passed to 
       the constructor. 

*javax.swing.JSpinner.DefaultEditor.getSpinner()*

public |javax.swing.JSpinner| getSpinner()

Returns the JSpinner ancestor of this editor or null. Typically the editor's 
parent is a JSpinner however subclasses of may override the the createEditor 
method and insert one or more containers between the JSpinner and it's editor. 


    Returns: JSpinner ancestor 
*javax.swing.JSpinner.DefaultEditor.getTextField()*

public |javax.swing.JFormattedTextField| getTextField()

Returns the JFormattedTextField child of this editor. By default the text field 
is the first and only child of editor. 


    Returns: the JFormattedTextField that gives the user access to the SpinnerDateModel's 
             value. 
*javax.swing.JSpinner.DefaultEditor.layoutContainer(Container)*

public void layoutContainer(java.awt.Container parent)

Resize the one (and only) child to completely fill the area within the parents 
insets. 


*javax.swing.JSpinner.DefaultEditor.minimumLayoutSize(Container)*

public |java.awt.Dimension| minimumLayoutSize(java.awt.Container parent)

Returns the minimum size of first (and only) child plus the size of the parents 
insets. 

    parent - the Container that's managing the layout 

    Returns: the minimum dimensions needed to lay out the subcomponents of the specified 
             container. 
*javax.swing.JSpinner.DefaultEditor.preferredLayoutSize(Container)*

public |java.awt.Dimension| preferredLayoutSize(java.awt.Container parent)

Returns the preferred size of first (and only) child plus the size of the 
parents insets. 

    parent - the Container that's managing the layout 

    Returns: the preferred dimensions to lay out the subcomponents of the specified 
             container. 
*javax.swing.JSpinner.DefaultEditor.propertyChange(PropertyChangeEvent)*

public void propertyChange(java.beans.PropertyChangeEvent e)

Called by the JFormattedTextField PropertyChangeListener. When the "value" 
property changes, which implies that the user has typed a new number, we set 
the value of the spinners model. 

This class ignores PropertyChangeEvents whose source is not the 
JFormattedTextField, so subclasses may safely make this DefaultEditor a 
PropertyChangeListener on other objects. 

    e - the PropertyChangeEvent whose source is the JFormattedTextField created by this 
       class. 

*javax.swing.JSpinner.DefaultEditor.removeLayoutComponent(Component)*

public void removeLayoutComponent(java.awt.Component child)

This LayoutManager method does nothing. There isn't any per-child state. 

    child - ignored 

*javax.swing.JSpinner.DefaultEditor.stateChanged(ChangeEvent)*

public void stateChanged(javax.swing.event.ChangeEvent e)

This method is called when the spinner's model's state changes. It sets the 
value of the text field to the current value of the spinners model. 

    e - not used 



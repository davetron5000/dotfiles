*java.awt.Color* *Color* The Color class is used to encapsulate colors in the de

public class Color
  extends    |java.lang.Object|
  implements |java.awt.Paint|
             |java.io.Serializable|

|java.awt.Color_Description|
|java.awt.Color_Fields|
|java.awt.Color_Constructors|
|java.awt.Color_Methods|

================================================================================

*java.awt.Color_Fields*
|java.awt.Color_java.awt.Color.black|
|java.awt.Color_java.awt.Color.BLACK|
|java.awt.Color_java.awt.Color.blue|
|java.awt.Color_java.awt.Color.BLUE|
|java.awt.Color_java.awt.Color.cyan|
|java.awt.Color_java.awt.Color.CYAN|
|java.awt.Color_java.awt.Color.DARK_GRAY|
|java.awt.Color_java.awt.Color.darkGray|
|java.awt.Color_java.awt.Color.gray|
|java.awt.Color_java.awt.Color.GRAY|
|java.awt.Color_java.awt.Color.green|
|java.awt.Color_java.awt.Color.GREEN|
|java.awt.Color_java.awt.Color.LIGHT_GRAY|
|java.awt.Color_java.awt.Color.lightGray|
|java.awt.Color_java.awt.Color.magenta|
|java.awt.Color_java.awt.Color.MAGENTA|
|java.awt.Color_java.awt.Color.orange|
|java.awt.Color_java.awt.Color.ORANGE|
|java.awt.Color_java.awt.Color.pink|
|java.awt.Color_java.awt.Color.PINK|
|java.awt.Color_java.awt.Color.red|
|java.awt.Color_java.awt.Color.RED|
|java.awt.Color_java.awt.Color.white|
|java.awt.Color_java.awt.Color.WHITE|
|java.awt.Color_java.awt.Color.yellow|
|java.awt.Color_java.awt.Color.YELLOW|

*java.awt.Color_Constructors*
|java.awt.Color(ColorSpace,float[],float)|Creates a color in the specified Colo
|java.awt.Color(float,float,float)|Creates an opaque sRGB color with the specif
|java.awt.Color(float,float,float,float)|Creates an sRGB color with the specifi
|java.awt.Color(int)|Creates an opaque sRGB color with the specified combined R
|java.awt.Color(int,boolean)|Creates an sRGB color with the specified combined 
|java.awt.Color(int,int,int)|Creates an opaque sRGB color with the specified re
|java.awt.Color(int,int,int,int)|Creates an sRGB color with the specified red, 

*java.awt.Color_Methods*
|java.awt.Color.brighter()|Creates a new Color that is a brighter version of th
|java.awt.Color.createContext(ColorModel,Rectangle,Rectangle2D,AffineTransform,RenderingHints)|
|java.awt.Color.darker()|Creates a new Color that is a darker version of this  
|java.awt.Color.decode(String)|Converts a String to an integer and returns the 
|java.awt.Color.equals(Object)|Determines whether another object is equal to th
|java.awt.Color.getAlpha()|Returns the alpha component in the range 0-255.
|java.awt.Color.getBlue()|Returns the blue component in the range 0-255 in the 
|java.awt.Color.getColor(String)|Finds a color in the system properties.
|java.awt.Color.getColor(String,Color)|Finds a color in the system properties.
|java.awt.Color.getColor(String,int)|Finds a color in the system properties.
|java.awt.Color.getColorComponents(ColorSpace,float[])|Returns a float array co
|java.awt.Color.getColorComponents(float[])|Returns a float array containing on
|java.awt.Color.getColorSpace()|Returns the ColorSpace of this Color.
|java.awt.Color.getComponents(ColorSpace,float[])|Returns a float array contain
|java.awt.Color.getComponents(float[])|Returns a float array containing the col
|java.awt.Color.getGreen()|Returns the green component in the range 0-255 in th
|java.awt.Color.getHSBColor(float,float,float)|Creates a Color object based on 
|java.awt.Color.getRed()|Returns the red component in the range 0-255 in the de
|java.awt.Color.getRGB()|Returns the RGB value representing the color in the de
|java.awt.Color.getRGBColorComponents(float[])|Returns a float array containing
|java.awt.Color.getRGBComponents(float[])|Returns a float array containing the 
|java.awt.Color.getTransparency()|Returns the transparency mode for this Color.
|java.awt.Color.hashCode()|Computes the hash code for this Color.
|java.awt.Color.HSBtoRGB(float,float,float)|Converts the components of a color,
|java.awt.Color.RGBtoHSB(int,int,int,float[])|Converts the components of a colo
|java.awt.Color.toString()|Returns a string representation of this Color.

*java.awt.Color_Description*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.black*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.BLACK*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.blue*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.BLUE*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.cyan*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.CYAN*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.DARK_GRAY*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.darkGray*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.gray*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.GRAY*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.green*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.GREEN*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.LIGHT_GRAY*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.lightGray*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.magenta*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.MAGENTA*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.orange*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.ORANGE*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.pink*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.PINK*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.red*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.RED*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.white*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.WHITE*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.yellow*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 


*java.awt.Color_java.awt.Color.YELLOW*

The Color class is used to encapsulate colors in the default sRGB color space 
or colors in arbitrary color spaces identified by a 
(|java.awt.color.ColorSpace|) . Every color has an implicit alpha value of 1.0 
or an explicit one provided in the constructor. The alpha value defines the 
transparency of a color and can be represented by a float value in the range 
0.0-1.0 or 0-255. An alpha value of 1.0 or 255 means that the color is 
completely opaque and an alpha value of 0 or 0.0 means that the color is 
completely transparent. When constructing a Color with an explicit alpha or 
getting the color/alpha components of a Color, the color components are never 
premultiplied by the alpha component. 

The default color space for the Java 2D(tm) API is sRGB, a proposed standard 
RGB color space. For further information on sRGB, see 
http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html . 



*java.awt.Color(ColorSpace,float[],float)*

public Color(
  java.awt.color.ColorSpace cspace,
  float[] components,
  float alpha)

Creates a color in the specified ColorSpace with the color components specified 
in the float array and the specified alpha. The number of components is 
determined by the type of the ColorSpace. For example, RGB requires 3 
components, but CMYK requires 4 components. 

    cspace - the ColorSpace to be used to interpret the components 
    components - an arbitrary number of color components that is compatible with the 
    alpha - alpha value 

*java.awt.Color(float,float,float)*

public Color(
  float r,
  float g,
  float b)

Creates an opaque sRGB color with the specified red, green, and blue values in 
the range (0.0 - 1.0). Alpha is defaulted to 1.0. The actual color used in 
rendering depends on finding the best match given the color space available for 
a particular output device. 

    r - the red component 
    g - the green component 
    b - the blue component 

*java.awt.Color(float,float,float,float)*

public Color(
  float r,
  float g,
  float b,
  float a)

Creates an sRGB color with the specified red, green, blue, and alpha values in 
the range (0.0 - 1.0). The actual color used in rendering depends on finding 
the best match given the color space available for a particular output device. 

    r - the red component 
    g - the green component 
    b - the blue component 
    a - the alpha component 

*java.awt.Color(int)*

public Color(int rgb)

Creates an opaque sRGB color with the specified combined RGB value consisting 
of the red component in bits 16-23, the green component in bits 8-15, and the 
blue component in bits 0-7. The actual color used in rendering depends on 
finding the best match given the color space available for a particular output 
device. Alpha is defaulted to 255. 

    rgb - the combined RGB components 

*java.awt.Color(int,boolean)*

public Color(
  int rgba,
  boolean hasalpha)

Creates an sRGB color with the specified combined RGBA value consisting of the 
alpha component in bits 24-31, the red component in bits 16-23, the green 
component in bits 8-15, and the blue component in bits 0-7. If the hasalpha 
argument is false, alpha is defaulted to 255. 

    rgba - the combined RGBA components 
    hasalpha - true if the alpha bits are valid; false otherwise 

*java.awt.Color(int,int,int)*

public Color(
  int r,
  int g,
  int b)

Creates an opaque sRGB color with the specified red, green, and blue values in 
the range (0 - 255). The actual color used in rendering depends on finding the 
best match given the color space available for a given output device. Alpha is 
defaulted to 255. 

    r - the red component 
    g - the green component 
    b - the blue component 

*java.awt.Color(int,int,int,int)*

public Color(
  int r,
  int g,
  int b,
  int a)

Creates an sRGB color with the specified red, green, blue, and alpha values in 
the range (0 - 255). 

    r - the red component 
    g - the green component 
    b - the blue component 
    a - the alpha component 

*java.awt.Color.brighter()*

public |java.awt.Color| brighter()

Creates a new Color that is a brighter version of this Color. 

This method applies an arbitrary scale factor to each of the three RGB 
components of this Color to create a brighter version of this Color. Although 
brighter and darker are inverse operations, the results of a series of 
invocations of these two methods might be inconsistent because of rounding 
errors. 


    Returns: a new Color object that is a brighter version of this Color. 
*java.awt.Color.createContext(ColorModel,Rectangle,Rectangle2D,AffineTransform,RenderingHints)*

public synchronized |java.awt.PaintContext| createContext(
  java.awt.image.ColorModel cm,
  java.awt.Rectangle r,
  java.awt.geom.Rectangle2D r2d,
  java.awt.geom.AffineTransform xform,
  java.awt.RenderingHints hints)

Creates and returns a (|java.awt.PaintContext|) used to generate a solid color 
pattern. This enables a Color object to be used as an argument to any method 
requiring an object implementing the (|java.awt.Paint|) interface. The same 
PaintContext is returned, regardless of whether or not r, r2d, xform, or hints 
are null. 

    cm - the specified ColorModel 
    r - the specified {@link Rectangle} 
    r2d - the specified {@link Rectangle2D} 
    xform - the specified {@link AffineTransform} 
    hints - the specified {@link RenderingHints} 

    Returns: a PaintContext that is used to generate a solid color pattern. 
*java.awt.Color.darker()*

public |java.awt.Color| darker()

Creates a new Color that is a darker version of this Color. 

This method applies an arbitrary scale factor to each of the three RGB 
components of this Color to create a darker version of this Color. Although 
brighter and darker are inverse operations, the results of a series of 
invocations of these two methods might be inconsistent because of rounding 
errors. 


    Returns: a new Color object that is a darker version of this Color. 
*java.awt.Color.decode(String)*

public static |java.awt.Color| decode(java.lang.String nm)
  throws |java.lang.NumberFormatException|
         
Converts a String to an integer and returns the specified opaque Color. This 
method handles string formats that are used to represent octal and hexidecimal 
numbers. 

    nm - a String that represents an opaque color as a 24-bit integer 

    Returns: the new Color object. 
*java.awt.Color.equals(Object)*

public boolean equals(java.lang.Object obj)

Determines whether another object is equal to this Color. 

The result is true if and only if the argument is not null and is a Color 
object that has the same red, green, blue, and alpha values as this object. 

    obj - the object to test for equality with this Color 

    Returns: true if the objects are the same; false otherwise. 
*java.awt.Color.getAlpha()*

public int getAlpha()

Returns the alpha component in the range 0-255. 


    Returns: the alpha component. 
*java.awt.Color.getBlue()*

public int getBlue()

Returns the blue component in the range 0-255 in the default sRGB space. 


    Returns: the blue component. 
*java.awt.Color.getColor(String)*

public static |java.awt.Color| getColor(java.lang.String nm)

Finds a color in the system properties. 

The argument is treated as the name of a system property to be obtained. The 
string value of this property is then interpreted as an integer which is then 
converted to a Color object. 

If the specified property is not found or could not be parsed as an integer 
then null is returned. 

    nm - the name of the color property 

    Returns: the Color converted from the system property. 
*java.awt.Color.getColor(String,Color)*

public static |java.awt.Color| getColor(
  java.lang.String nm,
  java.awt.Color v)

Finds a color in the system properties. 

The first argument is treated as the name of a system property to be obtained. 
The string value of this property is then interpreted as an integer which is 
then converted to a Color object. 

If the specified property is not found or cannot be parsed as an integer then 
the Color specified by the second argument is returned instead. 

    nm - the name of the color property 
    v - the default Color 

    Returns: the Color converted from the system property, or the specified Color. 
*java.awt.Color.getColor(String,int)*

public static |java.awt.Color| getColor(
  java.lang.String nm,
  int v)

Finds a color in the system properties. 

The first argument is treated as the name of a system property to be obtained. 
The string value of this property is then interpreted as an integer which is 
then converted to a Color object. 

If the specified property is not found or could not be parsed as an integer 
then the integer value v is used instead, and is converted to a Color object. 

    nm - the name of the color property 
    v - the default color value, as an integer 

    Returns: the Color converted from the system property or the Color converted from the 
             specified integer. 
*java.awt.Color.getColorComponents(ColorSpace,float[])*

public float getColorComponents(
  java.awt.color.ColorSpace cspace,
  float[] compArray)

Returns a float array containing only the color components of the Color in the 
ColorSpace specified by the cspace parameter. If compArray is null, an array 
with length equal to the number of components in cspace is created for the 
return value. Otherwise, compArray must have at least this length, and it is 
filled in with the components and returned. 

    cspace - a specified ColorSpace 
    compArray - an array that this method fills with the color components of this Color in the 
       specified ColorSpace 

    Returns: the color components in a float array. 
*java.awt.Color.getColorComponents(float[])*

public float getColorComponents(float[] compArray)

Returns a float array containing only the color components of the Color, in the 
ColorSpace of the Color. If compArray is null, an array with length equal to 
the number of components in the associated ColorSpace is created for the return 
value. Otherwise, compArray must have at least this length and it is filled in 
with the components and returned. 

    compArray - an array that this method fills with the color components of this Color in its 
       ColorSpace and returns 

    Returns: the color components in a float array. 
*java.awt.Color.getColorSpace()*

public |java.awt.color.ColorSpace| getColorSpace()

Returns the ColorSpace of this Color. 


    Returns: this Color object's ColorSpace. 
*java.awt.Color.getComponents(ColorSpace,float[])*

public float getComponents(
  java.awt.color.ColorSpace cspace,
  float[] compArray)

Returns a float array containing the color and alpha components of the Color, 
in the ColorSpace specified by the cspace parameter. If compArray is null, an 
array with length equal to the number of components in cspace plus one is 
created for the return value. Otherwise, compArray must have at least this 
length, and it is filled in with the components and returned. 

    cspace - a specified ColorSpace 
    compArray - an array that this method fills with the color and alpha components of this 
       Color in the specified ColorSpace and returns 

    Returns: the color and alpha components in a float array. 
*java.awt.Color.getComponents(float[])*

public float getComponents(float[] compArray)

Returns a float array containing the color and alpha components of the Color, 
in the ColorSpace of the Color. If compArray is null, an array with length 
equal to the number of components in the associated ColorSpace plus one is 
created for the return value. Otherwise, compArray must have at least this 
length and it is filled in with the components and returned. 

    compArray - an array that this method fills with the color and alpha components of this 
       Color in its ColorSpace and returns 

    Returns: the color and alpha components in a float array. 
*java.awt.Color.getGreen()*

public int getGreen()

Returns the green component in the range 0-255 in the default sRGB space. 


    Returns: the green component. 
*java.awt.Color.getHSBColor(float,float,float)*

public static |java.awt.Color| getHSBColor(
  float h,
  float s,
  float b)

Creates a Color object based on the specified values for the HSB color model. 

The s and b components should be floating-point values between zero and one 
(numbers in the range 0.0-1.0). The h component can be any floating-point 
number. The floor of this number is subtracted from it to create a fraction 
between 0 and 1. This fractional number is then multiplied by 360 to produce 
the hue angle in the HSB color model. 

    h - the hue component 
    s - the saturation of the color 
    b - the brightness of the color 

    Returns: a Color object with the specified hue, saturation, and brightness. 
*java.awt.Color.getRed()*

public int getRed()

Returns the red component in the range 0-255 in the default sRGB space. 


    Returns: the red component. 
*java.awt.Color.getRGB()*

public int getRGB()

Returns the RGB value representing the color in the default sRGB 
(|java.awt.image.ColorModel|) . (Bits 24-31 are alpha, 16-23 are red, 8-15 are 
green, 0-7 are blue). 


    Returns: the RGB value of the color in the default sRGB ColorModel. 
*java.awt.Color.getRGBColorComponents(float[])*

public float getRGBColorComponents(float[] compArray)

Returns a float array containing only the color components of the Color, in the 
default sRGB color space. If compArray is null, an array of length 3 is created 
for the return value. Otherwise, compArray must have length 3 or greater, and 
it is filled in with the components and returned. 

    compArray - an array that this method fills with color components and returns 

    Returns: the RGB components in a float array. 
*java.awt.Color.getRGBComponents(float[])*

public float getRGBComponents(float[] compArray)

Returns a float array containing the color and alpha components of the Color, 
as represented in the default sRGB color space. If compArray is null, an array 
of length 4 is created for the return value. Otherwise, compArray must have 
length 4 or greater, and it is filled in with the components and returned. 

    compArray - an array that this method fills with color and alpha components and returns 

    Returns: the RGBA components in a float array. 
*java.awt.Color.getTransparency()*

public int getTransparency()

Returns the transparency mode for this Color. This is required to implement the 
Paint interface. 


    Returns: this Color object's transparency mode. 
*java.awt.Color.hashCode()*

public int hashCode()

Computes the hash code for this Color. 


    Returns: a hash code value for this object. 
*java.awt.Color.HSBtoRGB(float,float,float)*

public static int HSBtoRGB(
  float hue,
  float saturation,
  float brightness)

Converts the components of a color, as specified by the HSB model, to an 
equivalent set of values for the default RGB model. 

The saturation and brightness components should be floating-point values 
between zero and one (numbers in the range 0.0-1.0). The hue component can be 
any floating-point number. The floor of this number is subtracted from it to 
create a fraction between 0 and 1. This fractional number is then multiplied by 
360 to produce the hue angle in the HSB color model. 

The integer that is returned by HSBtoRGB encodes the value of a color in bits 
0-23 of an integer value that is the same format used by the method 
<code>getRGB</code>(|java.awt.Color|) . This integer can be supplied as an 
argument to the Color constructor that takes a single integer argument. 

    hue - the hue component of the color 
    saturation - the saturation of the color 
    brightness - the brightness of the color 

    Returns: the RGB value of the color with the indicated hue, saturation, and brightness. 
*java.awt.Color.RGBtoHSB(int,int,int,float[])*

public static float RGBtoHSB(
  int r,
  int g,
  int b,
  float[] hsbvals)

Converts the components of a color, as specified by the default RGB model, to 
an equivalent set of values for hue, saturation, and brightness that are the 
three components of the HSB model. 

If the hsbvals argument is null, then a new array is allocated to return the 
result. Otherwise, the method returns the array hsbvals, with the values put 
into that array. 

    r - the red component of the color 
    g - the green component of the color 
    b - the blue component of the color 
    hsbvals - the array used to return the three HSB values, or null 

    Returns: an array of three elements containing the hue, saturation, and brightness (in 
             that order), of the color with the indicated red, green, and blue 
             components. 
*java.awt.Color.toString()*

public |java.lang.String| toString()

Returns a string representation of this Color. This method is intended to be 
used only for debugging purposes. The content and format of the returned string 
might vary between implementations. The returned string might be empty but 
cannot be null. 


    Returns: a string representation of this Color. 


*javax.swing.JSpinner.AccessibleJSpinner* *JSpinner.AccessibleJSpinner* Accessib

protected class JSpinner.AccessibleJSpinner
  extends    |javax.swing.JComponent.AccessibleJComponent|
  implements |javax.accessibility.AccessibleValue|
             |javax.accessibility.AccessibleAction|
             |javax.accessibility.AccessibleText|
             |javax.accessibility.AccessibleEditableText|
             |javax.swing.event.ChangeListener|

|javax.swing.JSpinner.AccessibleJSpinner_Description|
|javax.swing.JSpinner.AccessibleJSpinner_Fields|
|javax.swing.JSpinner.AccessibleJSpinner_Constructors|
|javax.swing.JSpinner.AccessibleJSpinner_Methods|

================================================================================

*javax.swing.JSpinner.AccessibleJSpinner_Constructors*
|javax.swing.JSpinner.AccessibleJSpinner()|AccessibleJSpinner constructor

*javax.swing.JSpinner.AccessibleJSpinner_Methods*
|javax.swing.JSpinner.AccessibleJSpinner.cut(int,int)|Cuts the text between two
|javax.swing.JSpinner.AccessibleJSpinner.delete(int,int)|Deletes the text betwe
|javax.swing.JSpinner.AccessibleJSpinner.doAccessibleAction(int)|Performs the s
|javax.swing.JSpinner.AccessibleJSpinner.getAccessibleAction()|Gets the Accessi
|javax.swing.JSpinner.AccessibleJSpinner.getAccessibleActionCount()|Returns the
|javax.swing.JSpinner.AccessibleJSpinner.getAccessibleActionDescription(int)|Re
|javax.swing.JSpinner.AccessibleJSpinner.getAccessibleChild(int)|Returns the sp
|javax.swing.JSpinner.AccessibleJSpinner.getAccessibleChildrenCount()|Returns t
|javax.swing.JSpinner.AccessibleJSpinner.getAccessibleRole()|Gets the role of t
|javax.swing.JSpinner.AccessibleJSpinner.getAccessibleText()|Gets the Accessibl
|javax.swing.JSpinner.AccessibleJSpinner.getAccessibleValue()|Gets the Accessib
|javax.swing.JSpinner.AccessibleJSpinner.getAfterIndex(int,int)|Returns the Str
|javax.swing.JSpinner.AccessibleJSpinner.getAtIndex(int,int)|Returns the String
|javax.swing.JSpinner.AccessibleJSpinner.getBeforeIndex(int,int)|Returns the St
|javax.swing.JSpinner.AccessibleJSpinner.getCaretPosition()|Returns the zero-ba
|javax.swing.JSpinner.AccessibleJSpinner.getCharacterAttribute(int)|Returns the
|javax.swing.JSpinner.AccessibleJSpinner.getCharacterBounds(int)|Determines the
|javax.swing.JSpinner.AccessibleJSpinner.getCharCount()|Returns the number of c
|javax.swing.JSpinner.AccessibleJSpinner.getCurrentAccessibleValue()|Get the va
|javax.swing.JSpinner.AccessibleJSpinner.getIndexAtPoint(Point)|Given a point i
|javax.swing.JSpinner.AccessibleJSpinner.getMaximumAccessibleValue()|Get the ma
|javax.swing.JSpinner.AccessibleJSpinner.getMinimumAccessibleValue()|Get the mi
|javax.swing.JSpinner.AccessibleJSpinner.getSelectedText()|Returns the portion 
|javax.swing.JSpinner.AccessibleJSpinner.getSelectionEnd()|Returns the end offs
|javax.swing.JSpinner.AccessibleJSpinner.getSelectionStart()|Returns the start 
|javax.swing.JSpinner.AccessibleJSpinner.getTextRange(int,int)|Returns the text
|javax.swing.JSpinner.AccessibleJSpinner.insertTextAtIndex(int,String)|Inserts 
|javax.swing.JSpinner.AccessibleJSpinner.paste(int)|Pastes the text from the sy
|javax.swing.JSpinner.AccessibleJSpinner.replaceText(int,int,String)|Replaces t
|javax.swing.JSpinner.AccessibleJSpinner.selectText(int,int)|Selects the text b
|javax.swing.JSpinner.AccessibleJSpinner.setAttributes(int,int,AttributeSet)|Se
|javax.swing.JSpinner.AccessibleJSpinner.setCurrentAccessibleValue(Number)|Set 
|javax.swing.JSpinner.AccessibleJSpinner.setTextContents(String)|Sets the text 
|javax.swing.JSpinner.AccessibleJSpinner.stateChanged(ChangeEvent)|Invoked when

*javax.swing.JSpinner.AccessibleJSpinner_Description*

AccessibleJSpinner implements accessibility support for the JSpinner class. 


*javax.swing.JSpinner.AccessibleJSpinner()*

protected JSpinner.AccessibleJSpinner()

AccessibleJSpinner constructor 


*javax.swing.JSpinner.AccessibleJSpinner.cut(int,int)*

public void cut(
  int startIndex,
  int endIndex)

Cuts the text between two indices into the system clipboard. 

    startIndex - the starting index in the text 
    endIndex - the ending index in the text 

*javax.swing.JSpinner.AccessibleJSpinner.delete(int,int)*

public void delete(
  int startIndex,
  int endIndex)

Deletes the text between two indices 

    startIndex - the starting index in the text 
    endIndex - the ending index in the text 

*javax.swing.JSpinner.AccessibleJSpinner.doAccessibleAction(int)*

public boolean doAccessibleAction(int i)

Performs the specified Action on the object 

    i - zero-based index of actions. The first action (index 0) is 
       AccessibleAction.INCREMENT and the second action (index 1) is 
       AccessibleAction.DECREMENT. 

    Returns: true if the action was performed; otherwise false. 
*javax.swing.JSpinner.AccessibleJSpinner.getAccessibleAction()*

public |javax.accessibility.AccessibleAction| getAccessibleAction()

Gets the AccessibleAction associated with this object that supports one or more 
actions. 


    Returns: AccessibleAction if supported by object; else return null 
*javax.swing.JSpinner.AccessibleJSpinner.getAccessibleActionCount()*

public int getAccessibleActionCount()

Returns the number of accessible actions available in this object If there are 
more than one, the first one is considered the "default" action of the object. 

Two actions are supported: AccessibleAction.INCREMENT which increments the 
spinner value and AccessibleAction.DECREMENT which decrements the spinner value 


    Returns: the zero-based number of Actions in this object 
*javax.swing.JSpinner.AccessibleJSpinner.getAccessibleActionDescription(int)*

public |java.lang.String| getAccessibleActionDescription(int i)

Returns a description of the specified action of the object. 

    i - zero-based index of the actions 

    Returns: a String description of the action 
*javax.swing.JSpinner.AccessibleJSpinner.getAccessibleChild(int)*

public |javax.accessibility.Accessible| getAccessibleChild(int i)

Returns the specified Accessible child of the object. The Accessible children 
of an Accessible object are zero-based, so the first child of an Accessible 
child is at index 0, the second child is at index 1, and so on. 

    i - zero-based index of child 

    Returns: the Accessible child of the object 
*javax.swing.JSpinner.AccessibleJSpinner.getAccessibleChildrenCount()*

public int getAccessibleChildrenCount()

Returns the number of accessible children of the object. 


    Returns: the number of accessible children of the object. 
*javax.swing.JSpinner.AccessibleJSpinner.getAccessibleRole()*

public |javax.accessibility.AccessibleRole| getAccessibleRole()

Gets the role of this object. The role of the object is the generic purpose or 
use of the class of this object. For example, the role of a push button is 
AccessibleRole.PUSH_BUTTON. The roles in AccessibleRole are provided so 
component developers can pick from a set of predefined roles. This enables 
assistive technologies to provide a consistent interface to various tweaked 
subclasses of components (e.g., use AccessibleRole.PUSH_BUTTON for all 
components that act like a push button) as well as distinguish between 
sublasses that behave differently (e.g., AccessibleRole.CHECK_BOX for check 
boxes and AccessibleRole.RADIO_BUTTON for radio buttons). Note that the 
AccessibleRole class is also extensible, so custom component developers can 
define their own AccessibleRole's if the set of predefined roles is inadequate. 


    Returns: an instance of AccessibleRole describing the role of the object 
*javax.swing.JSpinner.AccessibleJSpinner.getAccessibleText()*

public |javax.accessibility.AccessibleText| getAccessibleText()

Gets the AccessibleText associated with this object presenting text on the 
display. 


    Returns: AccessibleText if supported by object; else return null 
*javax.swing.JSpinner.AccessibleJSpinner.getAccessibleValue()*

public |javax.accessibility.AccessibleValue| getAccessibleValue()

Gets the AccessibleValue associated with this object. 


    Returns: AccessibleValue if supported by object; else return null 
*javax.swing.JSpinner.AccessibleJSpinner.getAfterIndex(int,int)*

public |java.lang.String| getAfterIndex(
  int part,
  int index)

Returns the String after a given index. 

    part - the CHARACTER, WORD, or SENTENCE to retrieve 
    index - an index within the text 

    Returns: the letter, word, or sentence 
*javax.swing.JSpinner.AccessibleJSpinner.getAtIndex(int,int)*

public |java.lang.String| getAtIndex(
  int part,
  int index)

Returns the String at a given index. 

    part - the CHARACTER, WORD, or SENTENCE to retrieve 
    index - an index within the text 

    Returns: the letter, word, or sentence 
*javax.swing.JSpinner.AccessibleJSpinner.getBeforeIndex(int,int)*

public |java.lang.String| getBeforeIndex(
  int part,
  int index)

Returns the String before a given index. 

    part - the CHARACTER, WORD, or SENTENCE to retrieve 
    index - an index within the text 

    Returns: the letter, word, or sentence 
*javax.swing.JSpinner.AccessibleJSpinner.getCaretPosition()*

public int getCaretPosition()

Returns the zero-based offset of the caret. 

Note: That to the right of the caret will have the same index value as the 
offset (the caret is between two characters). 


    Returns: the zero-based offset of the caret. 
*javax.swing.JSpinner.AccessibleJSpinner.getCharacterAttribute(int)*

public |javax.swing.text.AttributeSet| getCharacterAttribute(int i)

Returns the AttributeSet for a given character at a given index 

    i - the zero-based index into the text 

    Returns: the AttributeSet of the character 
*javax.swing.JSpinner.AccessibleJSpinner.getCharacterBounds(int)*

public |java.awt.Rectangle| getCharacterBounds(int i)

Determines the bounding box of the character at the given index into the 
string. The bounds are returned in local coordinates. If the index is invalid 
an empty rectangle is returned. 

    i - the index into the String 

    Returns: the screen coordinates of the character's bounding box, if index is invalid 
             return an empty rectangle. 
*javax.swing.JSpinner.AccessibleJSpinner.getCharCount()*

public int getCharCount()

Returns the number of characters (valid indicies) 


    Returns: the number of characters 
*javax.swing.JSpinner.AccessibleJSpinner.getCurrentAccessibleValue()*

public |java.lang.Number| getCurrentAccessibleValue()

Get the value of this object as a Number. If the value has not been set, the 
return value will be null. 


    Returns: value of the object 
*javax.swing.JSpinner.AccessibleJSpinner.getIndexAtPoint(Point)*

public int getIndexAtPoint(java.awt.Point p)

Given a point in local coordinates, return the zero-based index of the 
character under that Point. If the point is invalid, this method returns -1. 

    p - the Point in local coordinates 

    Returns: the zero-based index of the character under Point p; if Point is invalid return 
             -1. 
*javax.swing.JSpinner.AccessibleJSpinner.getMaximumAccessibleValue()*

public |java.lang.Number| getMaximumAccessibleValue()

Get the maximum value of this object as a Number. 


    Returns: Maximum value of the object; null if this object does not have a maximum value 
*javax.swing.JSpinner.AccessibleJSpinner.getMinimumAccessibleValue()*

public |java.lang.Number| getMinimumAccessibleValue()

Get the minimum value of this object as a Number. 


    Returns: Minimum value of the object; null if this object does not have a minimum value 
*javax.swing.JSpinner.AccessibleJSpinner.getSelectedText()*

public |java.lang.String| getSelectedText()

Returns the portion of the text that is selected. 


    Returns: the String portion of the text that is selected 
*javax.swing.JSpinner.AccessibleJSpinner.getSelectionEnd()*

public int getSelectionEnd()

Returns the end offset within the selected text. If there is no selection, but 
there is a caret, the start and end offsets will be the same. 


    Returns: the index into teh text of the end of the selection 
*javax.swing.JSpinner.AccessibleJSpinner.getSelectionStart()*

public int getSelectionStart()

Returns the start offset within the selected text. If there is no selection, 
but there is a caret, the start and end offsets will be the same. 


    Returns: the index into the text of the start of the selection 
*javax.swing.JSpinner.AccessibleJSpinner.getTextRange(int,int)*

public |java.lang.String| getTextRange(
  int startIndex,
  int endIndex)

Returns the text string between two indices. 

    startIndex - the starting index in the text 
    endIndex - the ending index in the text 

    Returns: the text string between the indices 
*javax.swing.JSpinner.AccessibleJSpinner.insertTextAtIndex(int,String)*

public void insertTextAtIndex(
  int index,
  java.lang.String s)

Inserts the specified string at the given index/ 

    index - the index in the text where the string will be inserted 
    s - the string to insert in the text 

*javax.swing.JSpinner.AccessibleJSpinner.paste(int)*

public void paste(int startIndex)

Pastes the text from the system clipboard into the text starting at the 
specified index. 

    startIndex - the starting index in the text 

*javax.swing.JSpinner.AccessibleJSpinner.replaceText(int,int,String)*

public void replaceText(
  int startIndex,
  int endIndex,
  java.lang.String s)

Replaces the text between two indices with the specified string. 

    startIndex - the starting index in the text 
    endIndex - the ending index in the text 
    s - the string to replace the text between two indices 

*javax.swing.JSpinner.AccessibleJSpinner.selectText(int,int)*

public void selectText(
  int startIndex,
  int endIndex)

Selects the text between two indices. 

    startIndex - the starting index in the text 
    endIndex - the ending index in the text 

*javax.swing.JSpinner.AccessibleJSpinner.setAttributes(int,int,AttributeSet)*

public void setAttributes(
  int startIndex,
  int endIndex,
  javax.swing.text.AttributeSet as)

Sets attributes for the text between two indices. 

    startIndex - the starting index in the text 
    endIndex - the ending index in the text 
    as - the attribute set 

*javax.swing.JSpinner.AccessibleJSpinner.setCurrentAccessibleValue(Number)*

public boolean setCurrentAccessibleValue(java.lang.Number n)

Set the value of this object as a Number. 

    n - the value to set for this object 

    Returns: true if the value was set; else False 
*javax.swing.JSpinner.AccessibleJSpinner.setTextContents(String)*

public void setTextContents(java.lang.String s)

Sets the text contents to the specified string. 

    s - the string to set the text contents 

*javax.swing.JSpinner.AccessibleJSpinner.stateChanged(ChangeEvent)*

public void stateChanged(javax.swing.event.ChangeEvent e)

Invoked when the target of the listener has changed its state. 

    e - a ChangeEvent object. Must not be null. 



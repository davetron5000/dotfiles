*javax.sound.sampled.EnumControl* *EnumControl* A EnumControl provides control o

public abstract class EnumControl
  extends    |javax.sound.sampled.Control|

|javax.sound.sampled.EnumControl_Description|
|javax.sound.sampled.EnumControl_Fields|
|javax.sound.sampled.EnumControl_Constructors|
|javax.sound.sampled.EnumControl_Methods|

================================================================================

*javax.sound.sampled.EnumControl_Constructors*
|javax.sound.sampled.EnumControl(EnumControl.Type,Object[],Object)|Constructs a

*javax.sound.sampled.EnumControl_Methods*
|javax.sound.sampled.EnumControl.getValue()|Obtains this control's current valu
|javax.sound.sampled.EnumControl.getValues()|Returns the set of possible values
|javax.sound.sampled.EnumControl.setValue(Object)|Sets the current value for th
|javax.sound.sampled.EnumControl.toString()|Provides a string representation of

*javax.sound.sampled.EnumControl_Description*

A EnumControl provides control over a set of discrete possible values, each 
represented by an object. In a graphical user interface, such a control might 
be represented by a set of buttons, each of which chooses one value or setting. 
For example, a reverb control might provide several preset reverberation 
settings, instead of providing continuously adjustable parameters of the sort 
that would be represented by (|javax.sound.sampled.FloatControl|) objects. 

Controls that provide a choice between only two settings can often be 
implemented instead as a (|javax.sound.sampled.BooleanControl|) , and controls 
that provide a set of values along some quantifiable dimension might be 
implemented instead as a FloatControl with a coarse resolution. However, a key 
feature of EnumControl is that the returned values are arbitrary objects, 
rather than numerical or boolean values. This means that each returned object 
can provide further information. As an example, the settings of a 
REVERB(|javax.sound.sampled.EnumControl.Type|) control are instances of 
(|javax.sound.sampled.ReverbType|) that can be queried for the parameter values 
used for each setting. 


*javax.sound.sampled.EnumControl(EnumControl.Type,Object[],Object)*

protected EnumControl(
  javax.sound.sampled.EnumControl.Type type,
  java.lang.Object[] values,
  java.lang.Object value)

Constructs a new enumerated control object with the given parameters. 

    type - the type of control represented this enumerated control object 
    values - the set of possible values for the control 
    value - the initial control value 

*javax.sound.sampled.EnumControl.getValue()*

public |java.lang.Object| getValue()

Obtains this control's current value. 


    Returns: the current value 
*javax.sound.sampled.EnumControl.getValues()*

public |java.lang.Object| getValues()

Returns the set of possible values for this control. 


    Returns: the set of possible values 
*javax.sound.sampled.EnumControl.setValue(Object)*

public void setValue(java.lang.Object value)

Sets the current value for the control. The default implementation simply sets 
the value as indicated. If the value indicated is not supported, an 
IllegalArgumentException is thrown. Some controls require that their line be 
open before they can be affected by setting a value. 

    value - the desired new value 

*javax.sound.sampled.EnumControl.toString()*

public |java.lang.String| toString()

Provides a string representation of the control. 


    Returns: a string description 


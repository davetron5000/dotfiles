*javax.swing.JRootPane* *JRootPane* A lightweight container used behind the scen

public class JRootPane
  extends    |javax.swing.JComponent|
  implements |javax.accessibility.Accessible|

|javax.swing.JRootPane_Description|
|javax.swing.JRootPane_Fields|
|javax.swing.JRootPane_Constructors|
|javax.swing.JRootPane_Methods|

================================================================================

*javax.swing.JRootPane_Fields*
|int_javax.swing.JRootPane.COLOR_CHOOSER_DIALOG|
|java.awt.Container_javax.swing.JRootPane.contentPane|
|javax.swing.JButton_javax.swing.JRootPane.defaultButton|
|javax.swing.JRootPane.DefaultAction_javax.swing.JRootPane.defaultPressAction|
|javax.swing.JRootPane.DefaultAction_javax.swing.JRootPane.defaultReleaseAction|
|int_javax.swing.JRootPane.ERROR_DIALOG|
|int_javax.swing.JRootPane.FILE_CHOOSER_DIALOG|
|int_javax.swing.JRootPane.FRAME|
|java.awt.Component_javax.swing.JRootPane.glassPane|
|int_javax.swing.JRootPane.INFORMATION_DIALOG|
|javax.swing.JLayeredPane_javax.swing.JRootPane.layeredPane|
|javax.swing.JMenuBar_javax.swing.JRootPane.menuBar|
|int_javax.swing.JRootPane.NONE|
|int_javax.swing.JRootPane.PLAIN_DIALOG|
|int_javax.swing.JRootPane.QUESTION_DIALOG|
|int_javax.swing.JRootPane.WARNING_DIALOG|

*javax.swing.JRootPane_Constructors*
|javax.swing.JRootPane()|Creates a JRootPane, setting up its  glassPane, layere

*javax.swing.JRootPane_Methods*
|javax.swing.JRootPane.addImpl(Component,Object,int)|Overridden to enforce the 
|javax.swing.JRootPane.addNotify()|Register ourselves with the SystemEventQueue
|javax.swing.JRootPane.createContentPane()|Called by the constructor methods to
|javax.swing.JRootPane.createGlassPane()|Called by the constructor methods to c
|javax.swing.JRootPane.createLayeredPane()|Called by the constructor methods to
|javax.swing.JRootPane.createRootLayout()|Called by the constructor methods to 
|javax.swing.JRootPane.getAccessibleContext()|Gets the AccessibleContext associ
|javax.swing.JRootPane.getContentPane()|Returns the content pane -- the contain
|javax.swing.JRootPane.getDefaultButton()|Returns the value of the defaultButto
|javax.swing.JRootPane.getGlassPane()|Returns the current glass pane for this J
|javax.swing.JRootPane.getJMenuBar()|Returns the menu bar from the layered pane
|javax.swing.JRootPane.getLayeredPane()|Gets the layered pane used by the root 
|javax.swing.JRootPane.getMenuBar()|Returns the menu bar value.
|javax.swing.JRootPane.getUI()|Returns the Lobject that renders this component.
|javax.swing.JRootPane.getUIClassID()|Returns a string that specifies the name 
|javax.swing.JRootPane.getWindowDecorationStyle()|Returns a constant identifyin
|javax.swing.JRootPane.isOptimizedDrawingEnabled()|The glassPane and contentPan
|javax.swing.JRootPane.isValidateRoot()|If a descendant of this JRootPane calls
|javax.swing.JRootPane.paramString()|Returns a string representation of this JR
|javax.swing.JRootPane.removeNotify()|Unregister ourselves from SystemEventQueu
|javax.swing.JRootPane.setContentPane(Container)|Sets the content pane -- the c
|javax.swing.JRootPane.setDefaultButton(JButton)|Sets the defaultButton propert
|javax.swing.JRootPane.setGlassPane(Component)|Sets a specified Component to be
|javax.swing.JRootPane.setJMenuBar(JMenuBar)|Adds or changes the menu bar used 
|javax.swing.JRootPane.setLayeredPane(JLayeredPane)|Sets the layered pane for t
|javax.swing.JRootPane.setMenuBar(JMenuBar)|Specifies the menu bar value.
|javax.swing.JRootPane.setUI(RootPaneUI)|Sets the Lobject that renders this com
|javax.swing.JRootPane.setWindowDecorationStyle(int)|Sets the type of Window de
|javax.swing.JRootPane.updateUI()|Resets the UI property to a value from the cu

*javax.swing.JRootPane_Description*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JRootPane.COLOR_CHOOSER_DIALOG*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Container_javax.swing.JRootPane.contentPane*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JButton_javax.swing.JRootPane.defaultButton*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JRootPane.DefaultAction_javax.swing.JRootPane.defaultPressAction*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JRootPane.DefaultAction_javax.swing.JRootPane.defaultReleaseAction*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JRootPane.ERROR_DIALOG*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JRootPane.FILE_CHOOSER_DIALOG*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JRootPane.FRAME*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Component_javax.swing.JRootPane.glassPane*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JRootPane.INFORMATION_DIALOG*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JLayeredPane_javax.swing.JRootPane.layeredPane*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JMenuBar_javax.swing.JRootPane.menuBar*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JRootPane.NONE*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JRootPane.PLAIN_DIALOG*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JRootPane.QUESTION_DIALOG*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JRootPane.WARNING_DIALOG*

A lightweight container used behind the scenes by JFrame, JDialog, JWindow, 
JApplet, and JInternalFrame. For task-oriented information on functionality 
provided by root panes see How to Use Root Panes, a section in The Java 
Tutorial. 

The following image shows the relationships between the classes that use root 
panes. 

The heavyweight components (those that delegate to a peer, or native component 
on the host system) are shown with a darker, heavier box. The four heavyweight 
JFC/Swing containers (JFrame, JDialog, JWindow, and JApplet) are shown in 
relation to the AWT classes they extend. These four components are the only 
heavyweight containers in the Swing library. The lightweight container 
JInternalPane is also shown. All five of these JFC/Swing containers implement 
the RootPaneContainer interface, and they all delegate their operations to a 
JRootPane (shown with a little "handle" on top). 

Note: The JComponent method getRootPane can be used to obtain the JRootPane 
that contains a given component. 







The diagram at right shows the structure of a JRootPane. A JRootpane is made up 
of a glassPane, an optional menuBar, and a contentPane. (The JLayeredPane 
manages the menuBar and the contentPane.) The glassPane sits over the top of 
everything, where it is in a position to intercept mouse movements. Since the 
glassPane (like the contentPane) can be an arbitrary component, it is also 
possible to set up the glassPane for drawing. Lines and images on the glassPane 
can then range over the frames underneath without being limited by their 
boundaries. 

Although the menuBar component is optional, the layeredPane, contentPane, and 
glassPane always exist. Attempting to set them to null generates an exception. 

To add components to the JRootPane (other than the optional menu bar), you add 
the object to the contentPane of the JRootPane, like this: 

rootPane.getContentPane().add(child); 

The same principle holds true for setting layout managers, removing components, 
listing children, etc. All these methods are invoked on the contentPane instead 
of on the JRootPane. 

Note: The default layout manager for the contentPane is a BorderLayout manager. 
However, the JRootPane uses a custom LayoutManager. So, when you want to change 
the layout manager for the components you added to a JRootPane, be sure to use 
code like this: 

rootPane.getContentPane().setLayout(new BoxLayout()); 

If a JMenuBar component is set on the JRootPane, it is positioned along the 
upper edge of the frame. The contentPane is adjusted in location and size to 
fill the remaining area. (The JMenuBar and the contentPane are added to the 
layeredPane component at the JLayeredPane.FRAME_CONTENT_LAYER layer.) 

The layeredPane is the parent of all children in the JRootPane -- both as the 
direct parent of the menu and the grandparent of all components added to the 
contentPane. It is an instance of JLayeredPane, which provides the ability to 
add components at several layers. This capability is very useful when working 
with menu popups, dialog boxes, and dragging -- situations in which you need to 
place a component on top of all other components in the pane. 

The glassPane sits on top of all other components in the JRootPane. That 
provides a convenient place to draw above all other components, and makes it 
possible to intercept mouse events, which is useful both for dragging and for 
drawing. Developers can use setVisible on the glassPane to control when the 
glassPane displays over the other children. By default the glassPane is not 
visible. 

The custom LayoutManager used by JRootPane ensures that: 

The glassPane fills the entire viewable area of the JRootPane (bounds - 
insets). The layeredPane fills the entire viewable area of the JRootPane. 
(bounds - insets) The menuBar is positioned at the upper edge of the 
layeredPane. The contentPane fills the entire viewable area, minus the menuBar, 
if present. 

Any other views in the JRootPane view hierarchy are ignored. 

If you replace the LayoutManager of the JRootPane, you are responsible for 
managing all of these views. So ordinarily you will want to be sure that you 
change the layout manager for the contentPane rather than for the JRootPane 
itself! 

The painting architecture of Swing requires an opaque JComponent to exist in 
the containment hieararchy above all other components. This is typically 
provided by way of the content pane. If you replace the content pane, it is 
recommended that you make the content pane opaque by way of setOpaque(true). 
Additionally, if the content pane overrides paintComponent, it will need to 
completely fill in the background in an opaque color in paintComponent. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.JRootPane()*

public JRootPane()

Creates a JRootPane, setting up its glassPane, layeredPane, and contentPane. 


*javax.swing.JRootPane.addImpl(Component,Object,int)*

protected void addImpl(
  java.awt.Component comp,
  java.lang.Object constraints,
  int index)

Overridden to enforce the position of the glass component as the zero child. 

    comp - the component to be enhanced 
    constraints - the constraints to be respected 
    index - the index 

*javax.swing.JRootPane.addNotify()*

public void addNotify()

Register ourselves with the SystemEventQueueUtils as a new root pane. 


*javax.swing.JRootPane.createContentPane()*

protected |java.awt.Container| createContentPane()

Called by the constructor methods to create the default contentPane. By default 
this method creates a new JComponent add sets a BorderLayout as its 
LayoutManager. 


    Returns: the default contentPane 
*javax.swing.JRootPane.createGlassPane()*

protected |java.awt.Component| createGlassPane()

Called by the constructor methods to create the default glassPane. By default 
this method creates a new JComponent with visibility set to false. 


    Returns: the default glassPane 
*javax.swing.JRootPane.createLayeredPane()*

protected |javax.swing.JLayeredPane| createLayeredPane()

Called by the constructor methods to create the default layeredPane. Bt default 
it creates a new JLayeredPane. 


    Returns: the default layeredPane 
*javax.swing.JRootPane.createRootLayout()*

protected |java.awt.LayoutManager| createRootLayout()

Called by the constructor methods to create the default layoutManager. 


    Returns: the default layoutManager. 
*javax.swing.JRootPane.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JRootPane. For root panes, the 
AccessibleContext takes the form of an AccessibleJRootPane. A new 
AccessibleJRootPane instance is created if necessary. 


    Returns: an AccessibleJRootPane that serves as the AccessibleContext of this JRootPane 
*javax.swing.JRootPane.getContentPane()*

public |java.awt.Container| getContentPane()

Returns the content pane -- the container that holds the components parented by 
the root pane. 


    Returns: the Container that holds the component-contents 
*javax.swing.JRootPane.getDefaultButton()*

public |javax.swing.JButton| getDefaultButton()

Returns the value of the defaultButton property. 


    Returns: the JButton which is currently the default button 
*javax.swing.JRootPane.getGlassPane()*

public |java.awt.Component| getGlassPane()

Returns the current glass pane for this JRootPane. 


    Returns: the current glass pane 
*javax.swing.JRootPane.getJMenuBar()*

public |javax.swing.JMenuBar| getJMenuBar()

Returns the menu bar from the layered pane. 


    Returns: the JMenuBar used in the pane 
*javax.swing.JRootPane.getLayeredPane()*

public |javax.swing.JLayeredPane| getLayeredPane()

Gets the layered pane used by the root pane. The layered pane typically holds a 
content pane and an optional JMenuBar. 


    Returns: the JLayeredPane currently in use 
*javax.swing.JRootPane.getMenuBar()*

public |javax.swing.JMenuBar| getMenuBar()

Returns the menu bar value. 


    Returns: the JMenuBar used in the pane 
*javax.swing.JRootPane.getUI()*

public |javax.swing.plaf.RootPaneUI| getUI()

Returns the Lobject that renders this component. 


    Returns: LabelUI object 
*javax.swing.JRootPane.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns a string that specifies the name of the Lclass that renders this 
component. 


    Returns: the string "RootPaneUI" 
*javax.swing.JRootPane.getWindowDecorationStyle()*

public int getWindowDecorationStyle()

Returns a constant identifying the type of Window decorations the JRootPane is 
providing. 


    Returns: One of NONE, FRAME, PLAIN_DIALOG, INFORMATION_DIALOG, ERROR_DIALOG, 
             COLOR_CHOOSER_DIALOG, FILE_CHOOSER_DIALOG, QUESTION_DIALOG or 
             WARNING_DIALOG. 
*javax.swing.JRootPane.isOptimizedDrawingEnabled()*

public boolean isOptimizedDrawingEnabled()

The glassPane and contentPane have the same bounds, which means JRootPane does 
not tiles its children and this should return false. On the other hand, the 
glassPane is normally not visible, and so this can return true if the glassPane 
isn't visible. Therefore, the return value here depends upon the visiblity of 
the glassPane. 


    Returns: true if this component's children don't overlap 
*javax.swing.JRootPane.isValidateRoot()*

public boolean isValidateRoot()

If a descendant of this JRootPane calls revalidate, validate from here on down. 

Deferred requests to layout a component and its descendents again. For example, 
calls to revalidate, are pushed upwards to either a JRootPane or a JScrollPane 
because both classes override isValidateRoot to return true. 


    Returns: 
*javax.swing.JRootPane.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JRootPane. This method is intended to 
be used only for debugging purposes, and the content and format of the returned 
string may vary between implementations. The returned string may be empty but 
may not be null. 


    Returns: a string representation of this JRootPane. 
*javax.swing.JRootPane.removeNotify()*

public void removeNotify()

Unregister ourselves from SystemEventQueueUtils. 


*javax.swing.JRootPane.setContentPane(Container)*

public void setContentPane(java.awt.Container content)

Sets the content pane -- the container that holds the components parented by 
the root pane. 

Swing's painting architecture requires an opaque JComponent in the containment 
hiearchy. This is typically provided by the content pane. If you replace the 
content pane it is recommended you replace it with an opaque JComponent. 

    content - the Container to use for component-contents 

*javax.swing.JRootPane.setDefaultButton(JButton)*

public void setDefaultButton(javax.swing.JButton defaultButton)

Sets the defaultButton property, which determines the current default button 
for this JRootPane. The default button is the button which will be activated 
when a UI-defined activation event (typically the Enter key) occurs in the root 
pane regardless of whether or not the button has keyboard focus (unless there 
is another component within the root pane which consumes the activation event, 
such as a JTextPane). For default activation to work, the button must be an 
enabled descendent of the root pane when activation occurs. To remove a default 
button from this root pane, set this property to null. 

    defaultButton - the JButton which is to be the default button 

*javax.swing.JRootPane.setGlassPane(Component)*

public void setGlassPane(java.awt.Component glass)

Sets a specified Component to be the glass pane for this root pane. The glass 
pane should normally be a lightweight, transparent component, because it will 
be made visible when ever the root pane needs to grab input events. For 
example, only one JInternalFrame is ever active when using a DefaultDesktop, 
and any inactive JInternalFrames' glass panes are made visible so that clicking 
anywhere within an inactive JInternalFrame can activate it. 

    glass - the Component to use as the glass pane for this JRootPane 

*javax.swing.JRootPane.setJMenuBar(JMenuBar)*

public void setJMenuBar(javax.swing.JMenuBar menu)

Adds or changes the menu bar used in the layered pane. 

    menu - the JMenuBar to add 

*javax.swing.JRootPane.setLayeredPane(JLayeredPane)*

public void setLayeredPane(javax.swing.JLayeredPane layered)

Sets the layered pane for the root pane. The layered pane typically holds a 
content pane and an optional JMenuBar. 

    layered - the JLayeredPane to use 

*javax.swing.JRootPane.setMenuBar(JMenuBar)*

public void setMenuBar(javax.swing.JMenuBar menu)

Specifies the menu bar value. 

    menu - the JMenuBar to add. 

*javax.swing.JRootPane.setUI(RootPaneUI)*

public void setUI(javax.swing.plaf.RootPaneUI ui)

Sets the Lobject that renders this component. 

    ui - the LabelUI Lobject 

*javax.swing.JRootPane.setWindowDecorationStyle(int)*

public void setWindowDecorationStyle(int windowDecorationStyle)

Sets the type of Window decorations (such as borders, widgets for closing a 
Window, title ...) the JRootPane should provide. The default is to provide no 
Window decorations (NONE). 

This is only a hint, and some look and feels may not support this. This is a 
bound property. 

    windowDecorationStyle - Constant identifying Window decorations to provide. 

*javax.swing.JRootPane.updateUI()*

public void updateUI()

Resets the UI property to a value from the current look and feel. 




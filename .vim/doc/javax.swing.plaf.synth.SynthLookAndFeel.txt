*javax.swing.plaf.synth.SynthLookAndFeel* *SynthLookAndFeel* SynthLookAndFeel provides the basis for creating a customized look and
 feel.

public class SynthLookAndFeel
  extends    |javax.swing.plaf.basic.BasicLookAndFeel|

|javax.swing.plaf.synth.SynthLookAndFeel_Description|
|javax.swing.plaf.synth.SynthLookAndFeel_Fields|
|javax.swing.plaf.synth.SynthLookAndFeel_Constructors|
|javax.swing.plaf.synth.SynthLookAndFeel_Methods|

====================================================================================================================================================================================

*javax.swing.plaf.synth.SynthLookAndFeel_Constructors*
|javax.swing.plaf.synth.SynthLookAndFeel()|Creates a SynthLookAndFeel.

*javax.swing.plaf.synth.SynthLookAndFeel_Methods*
|javax.swing.plaf.synth.SynthLookAndFeel.createUI(JComponent)|Creates the Synth look and feel ComponentUI for  the passed in JComponent.
|javax.swing.plaf.synth.SynthLookAndFeel.getDefaults()|Returns the defaults for this SynthLookAndFeel.
|javax.swing.plaf.synth.SynthLookAndFeel.getDescription()|Returns a textual description of SynthLookAndFeel.
|javax.swing.plaf.synth.SynthLookAndFeel.getID()|Return a string that identifies this look and feel.
|javax.swing.plaf.synth.SynthLookAndFeel.getName()|Return a short string that identifies this look and feel.
|javax.swing.plaf.synth.SynthLookAndFeel.getRegion(JComponent)|Returns the Region for the JComponent c.
|javax.swing.plaf.synth.SynthLookAndFeel.getStyle(JComponent,Region)|Gets a SynthStyle for the specified region of the specified component.
|javax.swing.plaf.synth.SynthLookAndFeel.getStyleFactory()|Returns the current SynthStyleFactory.
|javax.swing.plaf.synth.SynthLookAndFeel.initialize()|Called by UIManager when this look and feel is installed.
|javax.swing.plaf.synth.SynthLookAndFeel.isNativeLookAndFeel()|Returns false, SynthLookAndFeel is not a native look and feel.
|javax.swing.plaf.synth.SynthLookAndFeel.isSupportedLookAndFeel()|Returns true, SynthLookAndFeel is always supported.
|javax.swing.plaf.synth.SynthLookAndFeel.load(InputStream,Class<?>)|Loads the set of SynthStyles that will be used by  this SynthLookAndFeel.
|javax.swing.plaf.synth.SynthLookAndFeel.setStyleFactory(SynthStyleFactory)|Sets the SynthStyleFactory that the UI classes provided by  synth will use to obtain a SynthStyle.
|javax.swing.plaf.synth.SynthLookAndFeel.shouldUpdateStyleOnAncestorChanged()|Returns whether or not the UIs should update their  SynthStyles from the SynthStyleFactory  when the 
|javax.swing.plaf.synth.SynthLookAndFeel.uninitialize()|Called by UIManager when this look and feel is uninstalled.
|javax.swing.plaf.synth.SynthLookAndFeel.updateStyles(Component)|Updates the style associated with c, and all its children.

*javax.swing.plaf.synth.SynthLookAndFeel_Description*

SynthLookAndFeel provides the basis for creating a customized look and feel. SynthLookAndFeel does not directly provide a look, all painting is delegated. You need to either 
provide a configuration file, by way of the (|javax.swing.plaf.synth.SynthLookAndFeel|) method, or provide your own (|javax.swing.plaf.synth.SynthStyleFactory|) to 
(|javax.swing.plaf.synth.SynthLookAndFeel|) . Refer to the package summary for an example of loading a file, and (|javax.swing.plaf.synth.SynthStyleFactory|) for an example of 
providing your own SynthStyleFactory to setStyleFactory. 

Warning: This class implements (|java.io.Serializable|) as a side effect of it extending (|javax.swing.plaf.basic.BasicLookAndFeel|) . It is not intended to be serialized. An 
attempt to serialize it will result in (|java.io.NotSerializableException|) . 



*javax.swing.plaf.synth.SynthLookAndFeel()*

public SynthLookAndFeel()

Creates a SynthLookAndFeel. 

For the returned SynthLookAndFeel to be useful you need to invoke load to specify the set of SynthStyles, or invoke setStyleFactory. 


*javax.swing.plaf.synth.SynthLookAndFeel.createUI(JComponent)*

public static |javax.swing.plaf.ComponentUI| createUI(javax.swing.JComponent c)

Creates the Synth look and feel ComponentUI for the passed in JComponent. 


    c - JComponent to create the ComponentUI for 

    Returns: ComponentUI to use for c 

*javax.swing.plaf.synth.SynthLookAndFeel.getDefaults()*

public |javax.swing.UIDefaults| getDefaults()

Returns the defaults for this SynthLookAndFeel. 



    Returns: Defaults able. 

*javax.swing.plaf.synth.SynthLookAndFeel.getDescription()*

public |java.lang.String| getDescription()

Returns a textual description of SynthLookAndFeel. 



    Returns: textual description of synth. 

*javax.swing.plaf.synth.SynthLookAndFeel.getID()*

public |java.lang.String| getID()

Return a string that identifies this look and feel. 



    Returns: a short string identifying this look and feel. 

*javax.swing.plaf.synth.SynthLookAndFeel.getName()*

public |java.lang.String| getName()

Return a short string that identifies this look and feel. 



    Returns: a short string identifying this look and feel. 

*javax.swing.plaf.synth.SynthLookAndFeel.getRegion(JComponent)*

public static |javax.swing.plaf.synth.Region| getRegion(javax.swing.JComponent c)

Returns the Region for the JComponent c. 


    c - JComponent to fetch the Region for 

    Returns: Region corresponding to c 

*javax.swing.plaf.synth.SynthLookAndFeel.getStyle(JComponent,Region)*

public static |javax.swing.plaf.synth.SynthStyle| getStyle(
  javax.swing.JComponent c,
  javax.swing.plaf.synth.Region region)

Gets a SynthStyle for the specified region of the specified component. This is not for general consumption, only custom UIs should call this method. 


    c - JComponent to get the SynthStyle for 
    region - Identifies the region of the specified component 

    Returns: SynthStyle to use. 

*javax.swing.plaf.synth.SynthLookAndFeel.getStyleFactory()*

public static |javax.swing.plaf.synth.SynthStyleFactory| getStyleFactory()

Returns the current SynthStyleFactory. 



    Returns: SynthStyleFactory 

*javax.swing.plaf.synth.SynthLookAndFeel.initialize()*

public void initialize()

Called by UIManager when this look and feel is installed. 



*javax.swing.plaf.synth.SynthLookAndFeel.isNativeLookAndFeel()*

public boolean isNativeLookAndFeel()

Returns false, SynthLookAndFeel is not a native look and feel. 



    Returns: 

*javax.swing.plaf.synth.SynthLookAndFeel.isSupportedLookAndFeel()*

public boolean isSupportedLookAndFeel()

Returns true, SynthLookAndFeel is always supported. 



    Returns: 

*javax.swing.plaf.synth.SynthLookAndFeel.load(InputStream,Class<?>)*

public void load(
  java.io.InputStream input,
  java.lang.Class<?> resourceBase)
  throws |java.lang.IllegalArgumentException|
         |java.text.ParseException|
         
Loads the set of SynthStyles that will be used by this SynthLookAndFeel. resourceBase is used to resolve any path based resources, for example an Image would be resolved by 
resourceBase.getResource(path). Refer to Synth File Format for more information. 


    input - InputStream to load from 
    resourceBase - Used to resolve any images or other resources 

*javax.swing.plaf.synth.SynthLookAndFeel.setStyleFactory(SynthStyleFactory)*

public static void setStyleFactory(javax.swing.plaf.synth.SynthStyleFactory cache)

Sets the SynthStyleFactory that the UI classes provided by synth will use to obtain a SynthStyle. 


    cache - SynthStyleFactory the UIs should use. 

*javax.swing.plaf.synth.SynthLookAndFeel.shouldUpdateStyleOnAncestorChanged()*

public boolean shouldUpdateStyleOnAncestorChanged()

Returns whether or not the UIs should update their SynthStyles from the SynthStyleFactory when the ancestor of the JComponent changes. A subclass that provided a SynthStyleFactory 
that based the return value from getStyle off the containment hierarchy would override this method to return true. 



    Returns: whether or not the UIs should update their SynthStyles from the SynthStyleFactory when the ancestor changed. 

*javax.swing.plaf.synth.SynthLookAndFeel.uninitialize()*

public void uninitialize()

Called by UIManager when this look and feel is uninstalled. 



*javax.swing.plaf.synth.SynthLookAndFeel.updateStyles(Component)*

public static void updateStyles(java.awt.Component c)

Updates the style associated with c, and all its children. This is a lighter version of SwingUtilities.updateComponentTreeUI. 


    c - Component to update style for. 



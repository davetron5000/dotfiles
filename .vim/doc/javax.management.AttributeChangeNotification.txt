*javax.management.AttributeChangeNotification* *AttributeChangeNotification* Pro

public class AttributeChangeNotification
  extends    |javax.management.Notification|

|javax.management.AttributeChangeNotification_Description|
|javax.management.AttributeChangeNotification_Fields|
|javax.management.AttributeChangeNotification_Constructors|
|javax.management.AttributeChangeNotification_Methods|

================================================================================

*javax.management.AttributeChangeNotification_Fields*
|java.lang.String_javax.management.AttributeChangeNotification.ATTRIBUTE_CHANGE|

*javax.management.AttributeChangeNotification_Constructors*
|javax.management.AttributeChangeNotification(Object,long,long,String,String,String,Object,Object)|

*javax.management.AttributeChangeNotification_Methods*
|javax.management.AttributeChangeNotification.getAttributeName()|Gets the name 
|javax.management.AttributeChangeNotification.getAttributeType()|Gets the type 
|javax.management.AttributeChangeNotification.getNewValue()|Gets the new value 
|javax.management.AttributeChangeNotification.getOldValue()|Gets the old value 

*javax.management.AttributeChangeNotification_Description*

Provides definitions of the attribute change notifications sent by MBeans. 

It's up to the MBean owning the attribute of interest to create and send 
attribute change notifications when the attribute change occurs. So the 
NotificationBroadcaster interface has to be implemented by any MBean for which 
an attribute change is of interest. 

Example: If an MBean called myMbean needs to notify registered listeners when 
its attribute: 

String myString 

is modified, myMbean creates and emits the following notification: 

new AttributeChangeNotification(myMbean, sequenceNumber, timeStamp, msg, 
"myString", "String", oldValue, newValue); 


*java.lang.String_javax.management.AttributeChangeNotification.ATTRIBUTE_CHANGE*

Provides definitions of the attribute change notifications sent by MBeans. 

It's up to the MBean owning the attribute of interest to create and send 
attribute change notifications when the attribute change occurs. So the 
NotificationBroadcaster interface has to be implemented by any MBean for which 
an attribute change is of interest. 

Example: If an MBean called myMbean needs to notify registered listeners when 
its attribute: 

String myString 

is modified, myMbean creates and emits the following notification: 

new AttributeChangeNotification(myMbean, sequenceNumber, timeStamp, msg, 
"myString", "String", oldValue, newValue); 



*javax.management.AttributeChangeNotification(Object,long,long,String,String,String,Object,Object)*

public AttributeChangeNotification(
  java.lang.Object source,
  long sequenceNumber,
  long timeStamp,
  java.lang.String msg,
  java.lang.String attributeName,
  java.lang.String attributeType,
  java.lang.Object oldValue,
  java.lang.Object newValue)

Constructs an attribute change notification object. In addition to the 
information common to all notification, the caller must supply the name and 
type of the attribute, as well as its old and new values. 

    source - The notification producer, that is, the MBean the attribute belongs to. 
    sequenceNumber - The notification sequence number within the source object. 
    timeStamp - The date at which the notification is being sent. 
    msg - A String containing the message of the notification. 
    attributeName - A String giving the name of the attribute. 
    attributeType - A String containing the type of the attribute. 
    oldValue - An object representing value of the attribute before the change. 
    newValue - An object representing value of the attribute after the change. 

*javax.management.AttributeChangeNotification.getAttributeName()*

public |java.lang.String| getAttributeName()

Gets the name of the attribute which has changed. 


    Returns: A String containing the name of the attribute. 
*javax.management.AttributeChangeNotification.getAttributeType()*

public |java.lang.String| getAttributeType()

Gets the type of the attribute which has changed. 


    Returns: A String containing the type of the attribute. 
*javax.management.AttributeChangeNotification.getNewValue()*

public |java.lang.Object| getNewValue()

Gets the new value of the attribute which has changed. 


    Returns: An Object containing the new value of the attribute. 
*javax.management.AttributeChangeNotification.getOldValue()*

public |java.lang.Object| getOldValue()

Gets the old value of the attribute which has changed. 


    Returns: An Object containing the old value of the attribute. 


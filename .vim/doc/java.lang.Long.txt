*java.lang.Long* *Long* The Long class wraps a value of the primitive type
 long

public final class Long
  extends    |java.lang.Number|
  implements |java.lang.Comparable|

|java.lang.Long_Description|
|java.lang.Long_Fields|
|java.lang.Long_Constructors|
|java.lang.Long_Methods|

================================================================================

*java.lang.Long_Fields*
|long_java.lang.Long.MAX_VALUE|
|long_java.lang.Long.MIN_VALUE|
|int_java.lang.Long.SIZE|
|java.lang.Class_java.lang.Long.TYPE|

*java.lang.Long_Constructors*
|java.lang.Long(long)|Constructs a newly allocated Long object that  represents
|java.lang.Long(String)|Constructs a newly allocated Long object that  represen

*java.lang.Long_Methods*
|java.lang.Long.bitCount(long)|Returns the number of one-bits in the two's comp
|java.lang.Long.byteValue()|Returns the value of this Long as a  byte.
|java.lang.Long.compareTo(Long)|Compares two Long objects numerically.
|java.lang.Long.decode(String)|Decodes a String into a Long.
|java.lang.Long.doubleValue()|Returns the value of this Long as a  double.
|java.lang.Long.equals(Object)|Compares this object to the specified object.
|java.lang.Long.floatValue()|Returns the value of this Long as a  float.
|java.lang.Long.getLong(String)|Determines the long value of the system propert
|java.lang.Long.getLong(String,long)|Determines the long value of the system pr
|java.lang.Long.getLong(String,Long)|Returns the long value of the system prope
|java.lang.Long.hashCode()|Returns a hash code for this Long.
|java.lang.Long.highestOneBit(long)|Returns an long value with at most a single
|java.lang.Long.intValue()|Returns the value of this Long as an  int.
|java.lang.Long.longValue()|Returns the value of this Long as a  long value.
|java.lang.Long.lowestOneBit(long)|Returns an long value with at most a single 
|java.lang.Long.numberOfLeadingZeros(long)|Returns the number of zero bits prec
|java.lang.Long.numberOfTrailingZeros(long)|Returns the number of zero bits fol
|java.lang.Long.parseLong(String)|Parses the string argument as a signed decima
|java.lang.Long.parseLong(String,int)|Parses the string argument as a signed lo
|java.lang.Long.reverse(long)|Returns the value obtained by reversing the order
|java.lang.Long.reverseBytes(long)|Returns the value obtained by reversing the 
|java.lang.Long.rotateLeft(long,int)|Returns the value obtained by rotating the
|java.lang.Long.rotateRight(long,int)|Returns the value obtained by rotating th
|java.lang.Long.shortValue()|Returns the value of this Long as a  short.
|java.lang.Long.signum(long)|Returns the signum function of the specified long 
|java.lang.Long.toBinaryString(long)|Returns a string representation of the lon
|java.lang.Long.toHexString(long)|Returns a string representation of the long  
|java.lang.Long.toOctalString(long)|Returns a string representation of the long
|java.lang.Long.toString()|Returns a String object representing this  Long's va
|java.lang.Long.toString(long)|Returns a String object representing the specifi
|java.lang.Long.toString(long,int)|Returns a string representation of the first
|java.lang.Long.valueOf(long)|Returns a Long instance representing the specifie
|java.lang.Long.valueOf(String)|Returns a Long object holding the value  of the
|java.lang.Long.valueOf(String,int)|Returns a Long object holding the value  ex

*java.lang.Long_Description*

The Long class wraps a value of the primitive type long in an object. An object 
of type Long contains a single field whose type is long. 



In addition, this class provides several methods for converting a long to a 
String and a String to a long, as well as other constants and methods useful 
when dealing with a long. 

Implementation note: The implementations of the "bit twiddling" methods (such 
as highestOneBit(|java.lang.Long|) and numberOfTrailingZeros(|java.lang.Long|) 
) are based on material from Henry S. Warren, Jr.'s Hacker's Delight, (Addison 
Wesley, 2002). 


*long_java.lang.Long.MAX_VALUE*

The Long class wraps a value of the primitive type long in an object. An object 
of type Long contains a single field whose type is long. 



In addition, this class provides several methods for converting a long to a 
String and a String to a long, as well as other constants and methods useful 
when dealing with a long. 

Implementation note: The implementations of the "bit twiddling" methods (such 
as highestOneBit(|java.lang.Long|) and numberOfTrailingZeros(|java.lang.Long|) 
) are based on material from Henry S. Warren, Jr.'s Hacker's Delight, (Addison 
Wesley, 2002). 


*long_java.lang.Long.MIN_VALUE*

The Long class wraps a value of the primitive type long in an object. An object 
of type Long contains a single field whose type is long. 



In addition, this class provides several methods for converting a long to a 
String and a String to a long, as well as other constants and methods useful 
when dealing with a long. 

Implementation note: The implementations of the "bit twiddling" methods (such 
as highestOneBit(|java.lang.Long|) and numberOfTrailingZeros(|java.lang.Long|) 
) are based on material from Henry S. Warren, Jr.'s Hacker's Delight, (Addison 
Wesley, 2002). 


*int_java.lang.Long.SIZE*

The Long class wraps a value of the primitive type long in an object. An object 
of type Long contains a single field whose type is long. 



In addition, this class provides several methods for converting a long to a 
String and a String to a long, as well as other constants and methods useful 
when dealing with a long. 

Implementation note: The implementations of the "bit twiddling" methods (such 
as highestOneBit(|java.lang.Long|) and numberOfTrailingZeros(|java.lang.Long|) 
) are based on material from Henry S. Warren, Jr.'s Hacker's Delight, (Addison 
Wesley, 2002). 


*java.lang.Class_java.lang.Long.TYPE*

The Long class wraps a value of the primitive type long in an object. An object 
of type Long contains a single field whose type is long. 



In addition, this class provides several methods for converting a long to a 
String and a String to a long, as well as other constants and methods useful 
when dealing with a long. 

Implementation note: The implementations of the "bit twiddling" methods (such 
as highestOneBit(|java.lang.Long|) and numberOfTrailingZeros(|java.lang.Long|) 
) are based on material from Henry S. Warren, Jr.'s Hacker's Delight, (Addison 
Wesley, 2002). 



*java.lang.Long(long)*

public Long(long value)

Constructs a newly allocated Long object that represents the specified long 
argument. 

    value - the value to be represented by the Long object. 

*java.lang.Long(String)*

public Long(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Constructs a newly allocated Long object that represents the long value 
indicated by the String parameter. The string is converted to a long value in 
exactly the manner used by the parseLong method for radix 10. 

    s - the String to be converted to a Long. 

*java.lang.Long.bitCount(long)*

public static int bitCount(long i)

Returns the number of one-bits in the two's complement binary representation of 
the specified long value. This function is sometimes referred to as the 
population count. 


    Returns: the number of one-bits in the two's complement binary representation of the 
             specified long value. 
*java.lang.Long.byteValue()*

public byte byteValue()

Returns the value of this Long as a byte. 


*java.lang.Long.compareTo(Long)*

public int compareTo(java.lang.Long anotherLong)

Compares two Long objects numerically. 

    anotherLong - the Long to be compared. 

    Returns: the value 0 if this Long is equal to the argument Long; a value less than 0 if 
             this Long is numerically less than the argument Long; and a value 
             greater than 0 if this Long is numerically greater than the 
             argument Long (signed comparison). 
*java.lang.Long.decode(String)*

public static |java.lang.Long| decode(java.lang.String nm)
  throws |java.lang.NumberFormatException|
         
Decodes a String into a Long. Accepts decimal, hexadecimal, and octal numbers 
given by the following grammar: 



DecodableString: Signopt DecimalNumeral Signopt 0x HexDigits Signopt 0X 
HexDigits Signopt # HexDigits Signopt 0 OctalDigits 

Sign: - 



DecimalNumeral, HexDigits, and OctalDigits are defined in 3.10.1 of the Java 
Language Specification. 

The sequence of characters following an (optional) negative sign and/or radix 
specifier (0x, 0X, #, or leading zero) is parsed as by the Long.parseLong 
method with the indicated radix (10, 16, or 8). This sequence of characters 
must represent a positive value or a (|java.lang.NumberFormatException|) will 
be thrown. The result is negated if first character of the specified String is 
the minus sign. No whitespace characters are permitted in the String. 

    nm - the String to decode. 

    Returns: a Long object holding the long value represented by nm 
*java.lang.Long.doubleValue()*

public double doubleValue()

Returns the value of this Long as a double. 


*java.lang.Long.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this object to the specified object. The result is true if and only if 
the argument is not null and is a Long object that contains the same long value 
as this object. 

    obj - the object to compare with. 

    Returns: true if the objects are the same; false otherwise. 
*java.lang.Long.floatValue()*

public float floatValue()

Returns the value of this Long as a float. 


*java.lang.Long.getLong(String)*

public static |java.lang.Long| getLong(java.lang.String nm)

Determines the long value of the system property with the specified name. 

The first argument is treated as the name of a system property. System 
properties are accessible through the (|java.lang.System|) method. The string 
value of this property is then interpreted as a long value and a Long object 
representing this value is returned. Details of possible numeric formats can be 
found with the definition of getProperty. 

If there is no property with the specified name, if the specified name is empty 
or null, or if the property does not have the correct numeric format, then null 
is returned. 

In other words, this method returns a Long object equal to the value of: 

getLong(nm, null) 

    nm - property name. 

    Returns: the Long value of the property. 
*java.lang.Long.getLong(String,long)*

public static |java.lang.Long| getLong(
  java.lang.String nm,
  long val)

Determines the long value of the system property with the specified name. 

The first argument is treated as the name of a system property. System 
properties are accessible through the (|java.lang.System|) method. The string 
value of this property is then interpreted as a long value and a Long object 
representing this value is returned. Details of possible numeric formats can be 
found with the definition of getProperty. 

The second argument is the default value. A Long object that represents the 
value of the second argument is returned if there is no property of the 
specified name, if the property does not have the correct numeric format, or if 
the specified name is empty or null. 

In other words, this method returns a Long object equal to the value of: 

getLong(nm, new Long(val)) 

but in practice it may be implemented in a manner such as: 

Long result = getLong(nm, null); return (result == null) ? new Long(val) : 
result; 

to avoid the unnecessary allocation of a Long object when the default value is 
not needed. 

    nm - property name. 
    val - default value. 

    Returns: the Long value of the property. 
*java.lang.Long.getLong(String,Long)*

public static |java.lang.Long| getLong(
  java.lang.String nm,
  java.lang.Long val)

Returns the long value of the system property with the specified name. The 
first argument is treated as the name of a system property. System properties 
are accessible through the (|java.lang.System|) method. The string value of 
this property is then interpreted as a long value, as per the Long.decode 
method, and a Long object representing this value is returned. 

If the property value begins with the two ASCII characters 0x or the ASCII 
character #, not followed by a minus sign, then the rest of it is parsed as a 
hexadecimal integer exactly as for the method (|java.lang.Long|) with radix 16. 
If the property value begins with the ASCII character 0 followed by another 
character, it is parsed as an octal integer exactly as by the method 
(|java.lang.Long|) with radix 8. Otherwise the property value is parsed as a 
decimal integer exactly as by the method (|java.lang.Long|) with radix 10. 

Note that, in every case, neither L ('u004C') nor l ('u006C') is permitted to 
appear at the end of the property value as a type indicator, as would be 
permitted in Java programming language source code. 

The second argument is the default value. The default value is returned if 
there is no property of the specified name, if the property does not have the 
correct numeric format, or if the specified name is empty or null. 

    nm - property name. 
    val - default value. 

    Returns: the Long value of the property. 
*java.lang.Long.hashCode()*

public int hashCode()

Returns a hash code for this Long. The result is the exclusive OR of the two 
halves of the primitive long value held by this Long object. That is, the 
hashcode is the value of the expression: 

(int)(this.longValue()^(this.longValue()>>>32)) 


    Returns: a hash code value for this object. 
*java.lang.Long.highestOneBit(long)*

public static long highestOneBit(long i)

Returns an long value with at most a single one-bit, in the position of the 
highest-order ("leftmost") one-bit in the specified long value. Returns zero if 
the specified value has no one-bits in its two's complement binary 
representation, that is, if it is equal to zero. 


    Returns: an long value with a single one-bit, in the position of the highest-order 
             one-bit in the specified value, or zero if the specified value is 
             itself equal to zero. 
*java.lang.Long.intValue()*

public int intValue()

Returns the value of this Long as an int. 


*java.lang.Long.longValue()*

public long longValue()

Returns the value of this Long as a long value. 


*java.lang.Long.lowestOneBit(long)*

public static long lowestOneBit(long i)

Returns an long value with at most a single one-bit, in the position of the 
lowest-order ("rightmost") one-bit in the specified long value. Returns zero if 
the specified value has no one-bits in its two's complement binary 
representation, that is, if it is equal to zero. 


    Returns: an long value with a single one-bit, in the position of the lowest-order 
             one-bit in the specified value, or zero if the specified value is 
             itself equal to zero. 
*java.lang.Long.numberOfLeadingZeros(long)*

public static int numberOfLeadingZeros(long i)

Returns the number of zero bits preceding the highest-order ("leftmost") 
one-bit in the two's complement binary representation of the specified long 
value. Returns 64 if the specified value has no one-bits in its two's 
complement representation, in other words if it is equal to zero. 

Note that this method is closely related to the logarithm base 2. For all 
positive long values x: 

floor(log2(x)) = 63 - numberOfLeadingZeros(x) ceil(log2(x)) = 64 - 
numberOfLeadingZeros(x - 1) 


    Returns: the number of zero bits preceding the highest-order ("leftmost") one-bit in the 
             two's complement binary representation of the specified long 
             value, or 64 if the value is equal to zero. 
*java.lang.Long.numberOfTrailingZeros(long)*

public static int numberOfTrailingZeros(long i)

Returns the number of zero bits following the lowest-order ("rightmost") 
one-bit in the two's complement binary representation of the specified long 
value. Returns 64 if the specified value has no one-bits in its two's 
complement representation, in other words if it is equal to zero. 


    Returns: the number of zero bits following the lowest-order ("rightmost") one-bit in the 
             two's complement binary representation of the specified long 
             value, or 64 if the value is equal to zero. 
*java.lang.Long.parseLong(String)*

public static long parseLong(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Parses the string argument as a signed decimal long. The characters in the 
string must all be decimal digits, except that the first character may be an 
ASCII minus sign '-' (u002D') to indicate a negative value. The resulting long 
value is returned, exactly as if the argument and the radix 10 were given as 
arguments to the (|java.lang.Long|) method. 

Note that neither the character L ('u004C') nor l ('u006C') is permitted to 
appear at the end of the string as a type indicator, as would be permitted in 
Java programming language source code. 

    s - a String containing the long representation to be parsed 

    Returns: the long represented by the argument in decimal. 
*java.lang.Long.parseLong(String,int)*

public static long parseLong(
  java.lang.String s,
  int radix)
  throws |java.lang.NumberFormatException|
         
Parses the string argument as a signed long in the radix specified by the 
second argument. The characters in the string must all be digits of the 
specified radix (as determined by whether (|java.lang.Character|) returns a 
nonnegative value), except that the first character may be an ASCII minus sign 
'-' ('u002D') to indicate a negative value. The resulting long value is 
returned. 

Note that neither the character L ('u004C') nor l ('u006C') is permitted to 
appear at the end of the string as a type indicator, as would be permitted in 
Java programming language source code - except that either L or l may appear as 
a digit for a radix greater than 22. 

An exception of type NumberFormatException is thrown if any of the following 
situations occurs: 

The first argument is null or is a string of length zero. The radix is either 
smaller than (|java.lang.Character|) or larger than (|java.lang.Character|) . 
Any character of the string is not a digit of the specified radix, except that 
the first character may be a minus sign '-' ('u002d') provided that the string 
is longer than length 1. The value represented by the string is not a value of 
type long. 

Examples: 

parseLong("0", 10) returns 0L parseLong("473", 10) returns 473L parseLong("-0", 
10) returns 0L parseLong("-FF", 16) returns -255L parseLong("1100110", 2) 
returns 102L parseLong("99", 8) throws a NumberFormatException 
parseLong("Hazelnut", 10) throws a NumberFormatException parseLong("Hazelnut", 
36) returns 1356099454469L 

    s - the String containing the long representation to be parsed. 
    radix - the radix to be used while parsing s. 

    Returns: the long represented by the string argument in the specified radix. 
*java.lang.Long.reverse(long)*

public static long reverse(long i)

Returns the value obtained by reversing the order of the bits in the two's 
complement binary representation of the specified long value. 


    Returns: the value obtained by reversing order of the bits in the specified long value. 
*java.lang.Long.reverseBytes(long)*

public static long reverseBytes(long i)

Returns the value obtained by reversing the order of the bytes in the two's 
complement representation of the specified long value. 


    Returns: the value obtained by reversing the bytes in the specified long value. 
*java.lang.Long.rotateLeft(long,int)*

public static long rotateLeft(
  long i,
  int distance)

Returns the value obtained by rotating the two's complement binary 
representation of the specified long value left by the specified number of 
bits. (Bits shifted out of the left hand, or high-order, side reenter on the 
right, or low-order.) 

Note that left rotation with a negative distance is equivalent to right 
rotation: rotateLeft(val, -distance) == rotateRight(val, distance). Note also 
that rotation by any multiple of 64 is a no-op, so all but the last six bits of 
the rotation distance can be ignored, even if the distance is negative: 
rotateLeft(val, distance) == rotateLeft(val, distance & 0x3F). 


    Returns: the value obtained by rotating the two's complement binary representation of 
             the specified long value left by the specified number of bits. 
*java.lang.Long.rotateRight(long,int)*

public static long rotateRight(
  long i,
  int distance)

Returns the value obtained by rotating the two's complement binary 
representation of the specified long value right by the specified number of 
bits. (Bits shifted out of the right hand, or low-order, side reenter on the 
left, or high-order.) 

Note that right rotation with a negative distance is equivalent to left 
rotation: rotateRight(val, -distance) == rotateLeft(val, distance). Note also 
that rotation by any multiple of 64 is a no-op, so all but the last six bits of 
the rotation distance can be ignored, even if the distance is negative: 
rotateRight(val, distance) == rotateRight(val, distance & 0x3F). 


    Returns: the value obtained by rotating the two's complement binary representation of 
             the specified long value right by the specified number of bits. 
*java.lang.Long.shortValue()*

public short shortValue()

Returns the value of this Long as a short. 


*java.lang.Long.signum(long)*

public static int signum(long i)

Returns the signum function of the specified long value. (The return value is 
-1 if the specified value is negative; 0 if the specified value is zero; and 1 
if the specified value is positive.) 


    Returns: the signum function of the specified long value. 
*java.lang.Long.toBinaryString(long)*

public static |java.lang.String| toBinaryString(long i)

Returns a string representation of the long argument as an unsigned integer in 
base2. 

The unsigned long value is the argument plus 264 if the argument is negative; 
otherwise, it is equal to the argument. This value is converted to a string of 
ASCII digits in binary (base2) with no extra leading 0s. If the unsigned 
magnitude is zero, it is represented by a single zero character '0' ('u0030'); 
otherwise, the first character of the representation of the unsigned magnitude 
will not be the zero character. The characters '0' ('u0030') and '1' ('u0031') 
are used as binary digits. 

    i - a long to be converted to a string. 

    Returns: the string representation of the unsigned long value represented by the 
             argument in binary (base2). 
*java.lang.Long.toHexString(long)*

public static |java.lang.String| toHexString(long i)

Returns a string representation of the long argument as an unsigned integer in 
base16. 

The unsigned long value is the argument plus 264 if the argument is negative; 
otherwise, it is equal to the argument. This value is converted to a string of 
ASCII digits in hexadecimal (base16) with no extra leading 0s. If the unsigned 
magnitude is zero, it is represented by a single zero character '0' ('u0030'); 
otherwise, the first character of the representation of the unsigned magnitude 
will not be the zero character. The following characters are used as 
hexadecimal digits: 

0123456789abcdef 

These are the characters 'u0030' through 'u0039' and 'u0061' through 'u0066'. 
If uppercase letters are desired, the (|java.lang.String|) method may be called 
on the result: 

Long.toHexString(n).toUpperCase() 

    i - a long to be converted to a string. 

    Returns: the string representation of the unsigned long value represented by the 
             argument in hexadecimal (base16). 
*java.lang.Long.toOctalString(long)*

public static |java.lang.String| toOctalString(long i)

Returns a string representation of the long argument as an unsigned integer in 
base8. 

The unsigned long value is the argument plus 264 if the argument is negative; 
otherwise, it is equal to the argument. This value is converted to a string of 
ASCII digits in octal (base8) with no extra leading 0s. 

If the unsigned magnitude is zero, it is represented by a single zero character 
'0' ('u0030'); otherwise, the first character of the representation of the 
unsigned magnitude will not be the zero character. The following characters are 
used as octal digits: 

01234567 

These are the characters 'u0030' through 'u0037'. 

    i - a long to be converted to a string. 

    Returns: the string representation of the unsigned long value represented by the 
             argument in octal (base8). 
*java.lang.Long.toString()*

public |java.lang.String| toString()

Returns a String object representing this Long's value. The value is converted 
to signed decimal representation and returned as a string, exactly as if the 
long value were given as an argument to the (|java.lang.Long|) method. 


    Returns: a string representation of the value of this object in base10. 
*java.lang.Long.toString(long)*

public static |java.lang.String| toString(long i)

Returns a String object representing the specified long. The argument is 
converted to signed decimal representation and returned as a string, exactly as 
if the argument and the radix 10 were given as arguments to the 
(|java.lang.Long|) method. 

    i - a long to be converted. 

    Returns: a string representation of the argument in base10. 
*java.lang.Long.toString(long,int)*

public static |java.lang.String| toString(
  long i,
  int radix)

Returns a string representation of the first argument in the radix specified by 
the second argument. 

If the radix is smaller than Character.MIN_RADIX or larger than 
Character.MAX_RADIX, then the radix 10 is used instead. 

If the first argument is negative, the first element of the result is the ASCII 
minus sign '-' ('u002d'). If the first argument is not negative, no sign 
character appears in the result. 

The remaining characters of the result represent the magnitude of the first 
argument. If the magnitude is zero, it is represented by a single zero 
character '0' ('u0030'); otherwise, the first character of the representation 
of the magnitude will not be the zero character. The following ASCII characters 
are used as digits: 

0123456789abcdefghijklmnopqrstuvwxyz 

These are 'u0030' through 'u0039' and 'u0061' through 'u007a'. If radix is N, 
then the first N of these characters are used as radix-N digits in the order 
shown. Thus, the digits for hexadecimal (radix 16) are 0123456789abcdef. If 
uppercase letters are desired, the (|java.lang.String|) method may be called on 
the result: 

Long.toString(n, 16).toUpperCase() 

    i - a longto be converted to a string. 
    radix - the radix to use in the string representation. 

    Returns: a string representation of the argument in the specified radix. 
*java.lang.Long.valueOf(long)*

public static |java.lang.Long| valueOf(long l)

Returns a Long instance representing the specified long value. If a new Long 
instance is not required, this method should generally be used in preference to 
the constructor (|java.lang.Long|) , as this method is likely to yield 
significantly better space and time performance by caching frequently requested 
values. 

    l - a long value. 

    Returns: a Long instance representing l. 
*java.lang.Long.valueOf(String)*

public static |java.lang.Long| valueOf(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Returns a Long object holding the value of the specified String. The argument 
is interpreted as representing a signed decimal long, exactly as if the 
argument were given to the (|java.lang.Long|) method. The result is a Long 
object that represents the integer value specified by the string. 

In other words, this method returns a Long object equal to the value of: 



new Long(Long.parseLong(s)) 

    s - the string to be parsed. 

    Returns: a Long object holding the value represented by the string argument. 
*java.lang.Long.valueOf(String,int)*

public static |java.lang.Long| valueOf(
  java.lang.String s,
  int radix)
  throws |java.lang.NumberFormatException|
         
Returns a Long object holding the value extracted from the specified String 
when parsed with the radix given by the second argument. The first argument is 
interpreted as representing a signed long in the radix specified by the second 
argument, exactly as if the arguments were given to the (|java.lang.Long|) 
method. The result is a Long object that represents the long value specified by 
the string. 

In other words, this method returns a Long object equal to the value of: 

new Long(Long.parseLong(s, radix)) 

    s - the string to be parsed 
    radix - the radix to be used in interpreting s 

    Returns: a Long object holding the value represented by the string argument in the 
             specified radix. 


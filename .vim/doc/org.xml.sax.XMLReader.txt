*org.xml.sax.XMLReader* *XMLReader* Interface for reading an XML document using 

public interface interface XMLReader


|org.xml.sax.XMLReader_Description|
|org.xml.sax.XMLReader_Fields|
|org.xml.sax.XMLReader_Constructors|
|org.xml.sax.XMLReader_Methods|

================================================================================

*org.xml.sax.XMLReader_Methods*
|org.xml.sax.XMLReader.getContentHandler()|Return the current content handler.
|org.xml.sax.XMLReader.getDTDHandler()|Return the current DTD handler.
|org.xml.sax.XMLReader.getEntityResolver()|Return the current entity resolver.
|org.xml.sax.XMLReader.getErrorHandler()|Return the current error handler.
|org.xml.sax.XMLReader.getFeature(String)|Look up the value of a feature flag.
|org.xml.sax.XMLReader.getProperty(String)|Look up the value of a property.
|org.xml.sax.XMLReader.parse(InputSource)|Parse an XML document.
|org.xml.sax.XMLReader.parse(String)|Parse an XML document from a system identi
|org.xml.sax.XMLReader.setContentHandler(ContentHandler)|Allow an application t
|org.xml.sax.XMLReader.setDTDHandler(DTDHandler)|Allow an application to regist
|org.xml.sax.XMLReader.setEntityResolver(EntityResolver)|Allow an application t
|org.xml.sax.XMLReader.setErrorHandler(ErrorHandler)|Allow an application to re
|org.xml.sax.XMLReader.setFeature(String,boolean)|Set the value of a feature fl
|org.xml.sax.XMLReader.setProperty(String,Object)|Set the value of a property.

*org.xml.sax.XMLReader_Description*

Interface for reading an XML document using callbacks. 

This module, both source code and documentation, is in the Public Domain, and 
comes with NO WARRANTY. See http://www.saxproject.org for further information. 

Note: despite its name, this interface does not extend the standard Java 
Reader(|java.io.Reader|) interface, because reading XML is a fundamentally 
different activity than reading character data. 

XMLReader is the interface that an XML parser's SAX2 driver must implement. 
This interface allows an application to set and query features and properties 
in the parser, to register event handlers for document processing, and to 
initiate a document parse. 

All SAX interfaces are assumed to be synchronous: the 
parse(|org.xml.sax.XMLReader|) methods must not return until parsing is 
complete, and readers must wait for an event-handler callback to return before 
reporting the next event. 

This interface replaces the (now deprecated) SAX 1.0 
Parser(|org.xml.sax.Parser|) interface. The XMLReader interface contains two 
important enhancements over the old Parser interface (as well as some minor 
ones): 

it adds a standard way to query and set features and properties; and it adds 
Namespace support, which is required for many higher-level XML standards. 

There are adapters available to convert a SAX1 Parser to a SAX2 XMLReader and 
vice-versa. 


*org.xml.sax.XMLReader.getContentHandler()*

public |org.xml.sax.ContentHandler| getContentHandler()

Return the current content handler. 


    Returns: The current content handler, or null if none has been registered. 
*org.xml.sax.XMLReader.getDTDHandler()*

public |org.xml.sax.DTDHandler| getDTDHandler()

Return the current DTD handler. 


    Returns: The current DTD handler, or null if none has been registered. 
*org.xml.sax.XMLReader.getEntityResolver()*

public |org.xml.sax.EntityResolver| getEntityResolver()

Return the current entity resolver. 


    Returns: The current entity resolver, or null if none has been registered. 
*org.xml.sax.XMLReader.getErrorHandler()*

public |org.xml.sax.ErrorHandler| getErrorHandler()

Return the current error handler. 


    Returns: The current error handler, or null if none has been registered. 
*org.xml.sax.XMLReader.getFeature(String)*

public boolean getFeature(java.lang.String name)
  throws |org.xml.sax.SAXNotRecognizedException|
         |org.xml.sax.SAXNotSupportedException|
         
Look up the value of a feature flag. 

The feature name is any fully-qualified URI. It is possible for an XMLReader to 
recognize a feature name but temporarily be unable to return its value. Some 
feature values may be available only in specific contexts, such as before, 
during, or after a parse. Also, some feature values may not be programmatically 
accessible. (In the case of an adapter for SAX1 (|org.xml.sax.Parser|) , there 
is no implementation-independent way to expose whether the underlying parser is 
performing validation, expanding external entities, and so forth.) 

All XMLReaders are required to recognize the 
http://xml.org/sax/features/namespaces and the 
http://xml.org/sax/features/namespace-prefixes feature names. 

Typical usage is something like this: 



XMLReader r = new MySAXDriver(); 

// try to activate validation try { 
r.setFeature("http://xml.org/sax/features/validation", true); } catch 
(SAXException e) { System.err.println("Cannot activate validation."); } 

// register event handlers r.setContentHandler(new MyContentHandler()); 
r.setErrorHandler(new MyErrorHandler()); 

// parse the first document try { r.parse("http://www.foo.com/mydoc.xml"); } 
catch (IOException e) { System.err.println("I/O exception reading XML 
document"); } catch (SAXException e) { System.err.println("XML exception 
reading document."); } 

Implementors are free (and encouraged) to invent their own features, using 
names built on their own URIs. 

    name - The feature name, which is a fully-qualified URI. 

    Returns: The current value of the feature (true or false). 
*org.xml.sax.XMLReader.getProperty(String)*

public |java.lang.Object| getProperty(java.lang.String name)
  throws |org.xml.sax.SAXNotRecognizedException|
         |org.xml.sax.SAXNotSupportedException|
         
Look up the value of a property. 

The property name is any fully-qualified URI. It is possible for an XMLReader 
to recognize a property name but temporarily be unable to return its value. 
Some property values may be available only in specific contexts, such as 
before, during, or after a parse. 

XMLReaders are not required to recognize any specific property names, though an 
initial core set is documented for SAX2. 

Implementors are free (and encouraged) to invent their own properties, using 
names built on their own URIs. 

    name - The property name, which is a fully-qualified URI. 

    Returns: The current value of the property. 
*org.xml.sax.XMLReader.parse(InputSource)*

public void parse(org.xml.sax.InputSource input)
  throws |java.io.IOException|
         |org.xml.sax.SAXException|
         
Parse an XML document. 

The application can use this method to instruct the XML reader to begin parsing 
an XML document from any valid input source (a character stream, a byte stream, 
or a URI). 

Applications may not invoke this method while a parse is in progress (they 
should create a new XMLReader instead for each nested XML document). Once a 
parse is complete, an application may reuse the same XMLReader object, possibly 
with a different input source. Configuration of the XMLReader object (such as 
handler bindings and values established for feature flags and properties) is 
unchanged by completion of a parse, unless the definition of that aspect of the 
configuration explicitly specifies other behavior. (For example, feature flags 
or properties exposing characteristics of the document being parsed.) 

During the parse, the XMLReader will provide information about the XML document 
through the registered event handlers. 

This method is synchronous: it will not return until parsing has ended. If a 
client application wants to terminate parsing early, it should throw an 
exception. 

    input - The input source for the top-level of the XML document. 

*org.xml.sax.XMLReader.parse(String)*

public void parse(java.lang.String systemId)
  throws |java.io.IOException|
         |org.xml.sax.SAXException|
         
Parse an XML document from a system identifier (URI). 

This method is a shortcut for the common case of reading a document from a 
system identifier. It is the exact equivalent of the following: 



parse(new InputSource(systemId)); 

If the system identifier is a URL, it must be fully resolved by the application 
before it is passed to the parser. 

    systemId - The system identifier (URI). 

*org.xml.sax.XMLReader.setContentHandler(ContentHandler)*

public void setContentHandler(org.xml.sax.ContentHandler handler)

Allow an application to register a content event handler. 

If the application does not register a content handler, all content events 
reported by the SAX parser will be silently ignored. 

Applications may register a new or different handler in the middle of a parse, 
and the SAX parser must begin using the new handler immediately. 

    handler - The content handler. 

*org.xml.sax.XMLReader.setDTDHandler(DTDHandler)*

public void setDTDHandler(org.xml.sax.DTDHandler handler)

Allow an application to register a DTD event handler. 

If the application does not register a DTD handler, all DTD events reported by 
the SAX parser will be silently ignored. 

Applications may register a new or different handler in the middle of a parse, 
and the SAX parser must begin using the new handler immediately. 

    handler - The DTD handler. 

*org.xml.sax.XMLReader.setEntityResolver(EntityResolver)*

public void setEntityResolver(org.xml.sax.EntityResolver resolver)

Allow an application to register an entity resolver. 

If the application does not register an entity resolver, the XMLReader will 
perform its own default resolution. 

Applications may register a new or different resolver in the middle of a parse, 
and the SAX parser must begin using the new resolver immediately. 

    resolver - The entity resolver. 

*org.xml.sax.XMLReader.setErrorHandler(ErrorHandler)*

public void setErrorHandler(org.xml.sax.ErrorHandler handler)

Allow an application to register an error event handler. 

If the application does not register an error handler, all error events 
reported by the SAX parser will be silently ignored; however, normal processing 
may not continue. It is highly recommended that all SAX applications implement 
an error handler to avoid unexpected bugs. 

Applications may register a new or different handler in the middle of a parse, 
and the SAX parser must begin using the new handler immediately. 

    handler - The error handler. 

*org.xml.sax.XMLReader.setFeature(String,boolean)*

public void setFeature(
  java.lang.String name,
  boolean value)
  throws |org.xml.sax.SAXNotRecognizedException|
         |org.xml.sax.SAXNotSupportedException|
         
Set the value of a feature flag. 

The feature name is any fully-qualified URI. It is possible for an XMLReader to 
expose a feature value but to be unable to change the current value. Some 
feature values may be immutable or mutable only in specific contexts, such as 
before, during, or after a parse. 

All XMLReaders are required to support setting 
http://xml.org/sax/features/namespaces to true and 
http://xml.org/sax/features/namespace-prefixes to false. 

    name - The feature name, which is a fully-qualified URI. 
    value - The requested value of the feature (true or false). 

*org.xml.sax.XMLReader.setProperty(String,Object)*

public void setProperty(
  java.lang.String name,
  java.lang.Object value)
  throws |org.xml.sax.SAXNotRecognizedException|
         |org.xml.sax.SAXNotSupportedException|
         
Set the value of a property. 

The property name is any fully-qualified URI. It is possible for an XMLReader 
to recognize a property name but to be unable to change the current value. Some 
property values may be immutable or mutable only in specific contexts, such as 
before, during, or after a parse. 

XMLReaders are not required to recognize setting any specific property names, 
though a core set is defined by SAX2. 

This method is also the standard mechanism for setting extended handlers. 

    name - The property name, which is a fully-qualified URI. 
    value - The requested value for the property. 



*javax.swing.JColorChooser* *JColorChooser* JColorChooser provides a pane of con

public class JColorChooser
  extends    |javax.swing.JComponent|
  implements |javax.accessibility.Accessible|

|javax.swing.JColorChooser_Description|
|javax.swing.JColorChooser_Fields|
|javax.swing.JColorChooser_Constructors|
|javax.swing.JColorChooser_Methods|

================================================================================

*javax.swing.JColorChooser_Fields*
|javax.accessibility.AccessibleContext_javax.swing.JColorChooser.accessibleContext|
|java.lang.String_javax.swing.JColorChooser.CHOOSER_PANELS_PROPERTY|
|java.lang.String_javax.swing.JColorChooser.PREVIEW_PANEL_PROPERTY|
|java.lang.String_javax.swing.JColorChooser.SELECTION_MODEL_PROPERTY|

*javax.swing.JColorChooser_Constructors*
|javax.swing.JColorChooser()|Creates a color chooser pane with an initial color
|javax.swing.JColorChooser(Color)|Creates a color chooser pane with the specifi
|javax.swing.JColorChooser(ColorSelectionModel)|Creates a color chooser pane wi

*javax.swing.JColorChooser_Methods*
|javax.swing.JColorChooser.addChooserPanel(AbstractColorChooserPanel)|Adds a co
|javax.swing.JColorChooser.createDialog(Component,String,boolean,JColorChooser,ActionListener,ActionListener)|
|javax.swing.JColorChooser.getAccessibleContext()|Gets the AccessibleContext as
|javax.swing.JColorChooser.getChooserPanels()|Returns the specified color panel
|javax.swing.JColorChooser.getColor()|Gets the current color value from the col
|javax.swing.JColorChooser.getDragEnabled()|Gets the value of the dragEnabled p
|javax.swing.JColorChooser.getPreviewPanel()|Returns the preview panel that sho
|javax.swing.JColorChooser.getSelectionModel()|Returns the data model that hand
|javax.swing.JColorChooser.getUI()|Returns the Lobject that renders this compon
|javax.swing.JColorChooser.getUIClassID()|Returns the name of the Lclass that r
|javax.swing.JColorChooser.paramString()|Returns a string representation of thi
|javax.swing.JColorChooser.removeChooserPanel(AbstractColorChooserPanel)|Remove
|javax.swing.JColorChooser.setChooserPanels(AbstractColorChooserPanel[])|Specif
|javax.swing.JColorChooser.setColor(Color)|Sets the current color of the color 
|javax.swing.JColorChooser.setColor(int)|Sets the current color of the color ch
|javax.swing.JColorChooser.setColor(int,int,int)|Sets the current color of the 
|javax.swing.JColorChooser.setDragEnabled(boolean)|Sets the dragEnabled propert
|javax.swing.JColorChooser.setPreviewPanel(JComponent)|Sets the current preview
|javax.swing.JColorChooser.setSelectionModel(ColorSelectionModel)|Sets the mode
|javax.swing.JColorChooser.setUI(ColorChooserUI)|Sets the Lobject that renders 
|javax.swing.JColorChooser.showDialog(Component,String,Color)|Shows a modal col
|javax.swing.JColorChooser.updateUI()|Notification from the UIManager that the 

*javax.swing.JColorChooser_Description*

JColorChooser provides a pane of controls designed to allow a user to 
manipulate and select a color. For information about using color choosers, see 
How to Use Color Choosers, a section in The Java Tutorial. 



This class provides three levels of API: 

A static convenience method which shows a modal color-chooser dialog and 
returns the color selected by the user. A static convenience method for 
creating a color-chooser dialog where ActionListeners can be specified to be 
invoked when the user presses one of the dialog buttons. The ability to create 
instances of JColorChooser panes directly (within any container). 
PropertyChange listeners can be added to detect when the current "color" 
property changes. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.accessibility.AccessibleContext_javax.swing.JColorChooser.accessibleContext*

JColorChooser provides a pane of controls designed to allow a user to 
manipulate and select a color. For information about using color choosers, see 
How to Use Color Choosers, a section in The Java Tutorial. 



This class provides three levels of API: 

A static convenience method which shows a modal color-chooser dialog and 
returns the color selected by the user. A static convenience method for 
creating a color-chooser dialog where ActionListeners can be specified to be 
invoked when the user presses one of the dialog buttons. The ability to create 
instances of JColorChooser panes directly (within any container). 
PropertyChange listeners can be added to detect when the current "color" 
property changes. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JColorChooser.CHOOSER_PANELS_PROPERTY*

JColorChooser provides a pane of controls designed to allow a user to 
manipulate and select a color. For information about using color choosers, see 
How to Use Color Choosers, a section in The Java Tutorial. 



This class provides three levels of API: 

A static convenience method which shows a modal color-chooser dialog and 
returns the color selected by the user. A static convenience method for 
creating a color-chooser dialog where ActionListeners can be specified to be 
invoked when the user presses one of the dialog buttons. The ability to create 
instances of JColorChooser panes directly (within any container). 
PropertyChange listeners can be added to detect when the current "color" 
property changes. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JColorChooser.PREVIEW_PANEL_PROPERTY*

JColorChooser provides a pane of controls designed to allow a user to 
manipulate and select a color. For information about using color choosers, see 
How to Use Color Choosers, a section in The Java Tutorial. 



This class provides three levels of API: 

A static convenience method which shows a modal color-chooser dialog and 
returns the color selected by the user. A static convenience method for 
creating a color-chooser dialog where ActionListeners can be specified to be 
invoked when the user presses one of the dialog buttons. The ability to create 
instances of JColorChooser panes directly (within any container). 
PropertyChange listeners can be added to detect when the current "color" 
property changes. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JColorChooser.SELECTION_MODEL_PROPERTY*

JColorChooser provides a pane of controls designed to allow a user to 
manipulate and select a color. For information about using color choosers, see 
How to Use Color Choosers, a section in The Java Tutorial. 



This class provides three levels of API: 

A static convenience method which shows a modal color-chooser dialog and 
returns the color selected by the user. A static convenience method for 
creating a color-chooser dialog where ActionListeners can be specified to be 
invoked when the user presses one of the dialog buttons. The ability to create 
instances of JColorChooser panes directly (within any container). 
PropertyChange listeners can be added to detect when the current "color" 
property changes. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.JColorChooser()*

public JColorChooser()

Creates a color chooser pane with an initial color of white. 


*javax.swing.JColorChooser(Color)*

public JColorChooser(java.awt.Color initialColor)

Creates a color chooser pane with the specified initial color. 

    initialColor - the initial color set in the chooser 

*javax.swing.JColorChooser(ColorSelectionModel)*

public JColorChooser(javax.swing.colorchooser.ColorSelectionModel model)

Creates a color chooser pane with the specified ColorSelectionModel. 

    model - the ColorSelectionModel to be used 

*javax.swing.JColorChooser.addChooserPanel(AbstractColorChooserPanel)*

public void addChooserPanel(javax.swing.colorchooser.AbstractColorChooserPanel panel)

Adds a color chooser panel to the color chooser. 

    panel - the AbstractColorChooserPanel to be added 

*javax.swing.JColorChooser.createDialog(Component,String,boolean,JColorChooser,ActionListener,ActionListener)*

public static |javax.swing.JDialog| createDialog(
  java.awt.Component c,
  java.lang.String title,
  boolean modal,
  javax.swing.JColorChooser chooserPane,
  java.awt.event.ActionListener okListener,
  java.awt.event.ActionListener cancelListener)
  throws |java.awt.HeadlessException|
         
Creates and returns a new dialog containing the specified ColorChooser pane 
along with "OK", "Cancel", and "Reset" buttons. If the "OK" or "Cancel" buttons 
are pressed, the dialog is automatically hidden (but not disposed). If the 
"Reset" button is pressed, the color-chooser's color will be reset to the color 
which was set the last time show was invoked on the dialog and the dialog will 
remain showing. 

    c - the parent component for the dialog 
    title - the title for the dialog 
    modal - a boolean. When true, the remainder of the program is inactive until the dialog 
       is closed. 
    chooserPane - the color-chooser to be placed inside the dialog 
    okListener - the ActionListener invoked when "OK" is pressed 
    cancelListener - the ActionListener invoked when "Cancel" is pressed 

    Returns: a new dialog containing the color-chooser pane 
*javax.swing.JColorChooser.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JColorChooser. For color 
choosers, the AccessibleContext takes the form of an AccessibleJColorChooser. A 
new AccessibleJColorChooser instance is created if necessary. 


    Returns: an AccessibleJColorChooser that serves as the AccessibleContext of this 
             JColorChooser 
*javax.swing.JColorChooser.getChooserPanels()*

public |javax.swing.colorchooser.AbstractColorChooserPanel| getChooserPanels()

Returns the specified color panels. 


    Returns: an array of AbstractColorChooserPanel objects 
*javax.swing.JColorChooser.getColor()*

public |java.awt.Color| getColor()

Gets the current color value from the color chooser. By default, this delegates 
to the model. 


    Returns: the current color value of the color chooser 
*javax.swing.JColorChooser.getDragEnabled()*

public boolean getDragEnabled()

Gets the value of the dragEnabled property. 


    Returns: the value of the dragEnabled property 
*javax.swing.JColorChooser.getPreviewPanel()*

public |javax.swing.JComponent| getPreviewPanel()

Returns the preview panel that shows a chosen color. 


    Returns: a JComponent object -- the preview panel 
*javax.swing.JColorChooser.getSelectionModel()*

public |javax.swing.colorchooser.ColorSelectionModel| getSelectionModel()

Returns the data model that handles color selections. 


    Returns: a ColorSelectionModel object 
*javax.swing.JColorChooser.getUI()*

public |javax.swing.plaf.ColorChooserUI| getUI()

Returns the Lobject that renders this component. 


    Returns: the ColorChooserUI object that renders this component 
*javax.swing.JColorChooser.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the name of the Lclass that renders this component. 


    Returns: the string "ColorChooserUI" 
*javax.swing.JColorChooser.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JColorChooser. This method is intended 
to be used only for debugging purposes, and the content and format of the 
returned string may vary between implementations. The returned string may be 
empty but may not be null. 


    Returns: a string representation of this JColorChooser 
*javax.swing.JColorChooser.removeChooserPanel(AbstractColorChooserPanel)*

public |javax.swing.colorchooser.AbstractColorChooserPanel| removeChooserPanel(javax.swing.colorchooser.AbstractColorChooserPanel panel)

Removes the Color Panel specified. 

    panel - a string that specifies the panel to be removed 

    Returns: the color panel 
*javax.swing.JColorChooser.setChooserPanels(AbstractColorChooserPanel[])*

public void setChooserPanels(javax.swing.colorchooser.AbstractColorChooserPanel[] panels)

Specifies the Color Panels used to choose a color value. 

    panels - an array of AbstractColorChooserPanel objects 

*javax.swing.JColorChooser.setColor(Color)*

public void setColor(java.awt.Color color)

Sets the current color of the color chooser to the specified color. The 
ColorSelectionModel will fire a ChangeEvent 

    color - the color to be set in the color chooser 

*javax.swing.JColorChooser.setColor(int)*

public void setColor(int c)

Sets the current color of the color chooser to the specified color. 

    c - an integer value that sets the current color in the chooser where the low-order 
       8 bits specify the Blue value, the next 8 bits specify the Green value, 
       and the 8 bits above that specify the Red value. 

*javax.swing.JColorChooser.setColor(int,int,int)*

public void setColor(
  int r,
  int g,
  int b)

Sets the current color of the color chooser to the specified RGB color. Note 
that the values of red, green, and blue should be between the numbers 0 and 
255, inclusive. 

    r - an int specifying the amount of Red 
    g - an int specifying the amount of Green 
    b - an int specifying the amount of Blue 

*javax.swing.JColorChooser.setDragEnabled(boolean)*

public void setDragEnabled(boolean b)

Sets the dragEnabled property, which must be true to enable automatic drag 
handling (the first part of drag and drop) on this component. The 
transferHandler property needs to be set to a non-null value for the drag to do 
anything. The default value of the dragEnabled property is false. 



When automatic drag handling is enabled, most look and feels begin a 
drag-and-drop operation when the user presses the mouse button over the preview 
panel. Some look and feels might not support automatic drag and drop; they will 
ignore this property. You can work around such look and feels by modifying the 
component to directly call the exportAsDrag method of a TransferHandler. 

    b - the value to set the dragEnabled property to 

*javax.swing.JColorChooser.setPreviewPanel(JComponent)*

public void setPreviewPanel(javax.swing.JComponent preview)

Sets the current preview panel. This will fire a PropertyChangeEvent for the 
property named "previewPanel". 

    preview - the JComponent which displays the current color 

*javax.swing.JColorChooser.setSelectionModel(ColorSelectionModel)*

public void setSelectionModel(javax.swing.colorchooser.ColorSelectionModel newModel)

Sets the model containing the selected color. 

    newModel - the new ColorSelectionModel object 

*javax.swing.JColorChooser.setUI(ColorChooserUI)*

public void setUI(javax.swing.plaf.ColorChooserUI ui)

Sets the Lobject that renders this component. 

    ui - the ColorChooserUI Lobject 

*javax.swing.JColorChooser.showDialog(Component,String,Color)*

public static |java.awt.Color| showDialog(
  java.awt.Component component,
  java.lang.String title,
  java.awt.Color initialColor)
  throws |java.awt.HeadlessException|
         
Shows a modal color-chooser dialog and blocks until the dialog is hidden. If 
the user presses the "OK" button, then this method hides/disposes the dialog 
and returns the selected color. If the user presses the "Cancel" button or 
closes the dialog without pressing "OK", then this method hides/disposes the 
dialog and returns null. 

    component - the parent Component for the dialog 
    title - the String containing the dialog's title 
    initialColor - the initial Color set when the color-chooser is shown 

    Returns: the selected color or null if the user opted out 
*javax.swing.JColorChooser.updateUI()*

public void updateUI()

Notification from the UIManager that the Lhas changed. Replaces the current UI 
object with the latest version from the UIManager. 




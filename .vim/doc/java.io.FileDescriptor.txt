*java.io.FileDescriptor* *FileDescriptor* Instances of the file descriptor class serve as an opaque handle
 to the underlying machine-specific structure representing an open
 file,

public final class FileDescriptor
  extends    |java.lang.Object|

|java.io.FileDescriptor_Description|
|java.io.FileDescriptor_Fields|
|java.io.FileDescriptor_Constructors|
|java.io.FileDescriptor_Methods|

====================================================================================================================================================================================

*java.io.FileDescriptor_Fields*
|java.io.FileDescriptor_java.io.FileDescriptor.err|
|java.io.FileDescriptor_java.io.FileDescriptor.in|
|java.io.FileDescriptor_java.io.FileDescriptor.out|

*java.io.FileDescriptor_Constructors*
|java.io.FileDescriptor()|Constructs an (invalid) FileDescriptor  object.

*java.io.FileDescriptor_Methods*
|java.io.FileDescriptor.sync()|Force all system buffers to synchronize with the underlying  device.
|java.io.FileDescriptor.valid()|Tests if this file descriptor object is valid.

*java.io.FileDescriptor_Description*

Instances of the file descriptor class serve as an opaque handle to the underlying machine-specific structure representing an open file, an open socket, or another source or sink 
of bytes. The main practical use for a file descriptor is to create a FileInputStream or FileOutputStream to contain it. 

Applications should not create their own file descriptors. 



*java.io.FileDescriptor_java.io.FileDescriptor.err*

A handle to the standard error stream. Usually, this file descriptor is not used directly, but rather via the output stream known as System.err. 


*java.io.FileDescriptor_java.io.FileDescriptor.in*

A handle to the standard input stream. Usually, this file descriptor is not used directly, but rather via the input stream known as System.in. 


*java.io.FileDescriptor_java.io.FileDescriptor.out*

A handle to the standard output stream. Usually, this file descriptor is not used directly, but rather via the output stream known as System.out. 



*java.io.FileDescriptor()*

public FileDescriptor()

Constructs an (invalid) FileDescriptor object. 


*java.io.FileDescriptor.sync()*

public native void sync()
  throws |java.io.SyncFailedException|
         
Force all system buffers to synchronize with the underlying device. This method returns after all modified data and attributes of this FileDescriptor have been written to the 
relevant device(s). In particular, if this FileDescriptor refers to a physical storage medium, such as a file in a file system, sync will not return until all in-memory modified 
copies of buffers associated with this FileDesecriptor have been written to the physical medium. 

sync is meant to be used by code that requires physical storage (such as a file) to be in a known state For example, a class that provided a simple transaction facility might use 
sync to ensure that all changes to a file caused by a given transaction were recorded on a storage medium. 

sync only affects buffers downstream of this FileDescriptor. If any in-memory buffering is being done by the application (for example, by a BufferedOutputStream object), those 
buffers must be flushed into the FileDescriptor (for example, by invoking OutputStream.flush) before that data will be affected by sync. 



*java.io.FileDescriptor.valid()*

public boolean valid()

Tests if this file descriptor object is valid. 



    Returns: true if the file descriptor object represents a valid, open file, socket, or other active I/O connection; false otherwise. 



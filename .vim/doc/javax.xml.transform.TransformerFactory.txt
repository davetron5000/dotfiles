*javax.xml.transform.TransformerFactory* *TransformerFactory* A TransformerFactory instance can be used to createjavax.xml.transform.Transformerandjavax.xml.transform.Templatesobje

public abstract class TransformerFactory
  extends    |java.lang.Object|

|javax.xml.transform.TransformerFactory_Description|
|javax.xml.transform.TransformerFactory_Fields|
|javax.xml.transform.TransformerFactory_Constructors|
|javax.xml.transform.TransformerFactory_Methods|

====================================================================================================================================================================================

*javax.xml.transform.TransformerFactory_Constructors*
|javax.xml.transform.TransformerFactory()|Default constructor is protected on purpose.

*javax.xml.transform.TransformerFactory_Methods*
|javax.xml.transform.TransformerFactory.getAssociatedStylesheet(Source,String,String,String)|Get the stylesheet specification(s) associated with the  XML Source document via the  
|javax.xml.transform.TransformerFactory.getAttribute(String)|Allows the user to retrieve specific attributes on the underlying  implementation.
|javax.xml.transform.TransformerFactory.getErrorListener()|Get the error event handler for the TransformerFactory.
|javax.xml.transform.TransformerFactory.getFeature(String)|Look up the value of a feature.
|javax.xml.transform.TransformerFactory.getURIResolver()|Get the object that is used by default during the transformation  to resolve URIs used in document(), xsl:import, or xsl:i
|javax.xml.transform.TransformerFactory.newInstance()|Obtain a new instance of a TransformerFactory.
|javax.xml.transform.TransformerFactory.newTemplates(Source)|Process the Source into a Templates object, which is a  a compiled representation of the source.
|javax.xml.transform.TransformerFactory.newTransformer()|Create a new Transformer that performs a copy  of the Source to the Result.
|javax.xml.transform.TransformerFactory.newTransformer(Source)|Process the Source into a Transformer  Object.
|javax.xml.transform.TransformerFactory.setAttribute(String,Object)|Allows the user to set specific attributes on the underlying  implementation.
|javax.xml.transform.TransformerFactory.setErrorListener(ErrorListener)|Set the error event listener for the TransformerFactory, which  is used for the processing of transformatio
|javax.xml.transform.TransformerFactory.setFeature(String,boolean)|Set a feature for this TransformerFactory and Transformers  or Templates created by this factory.
|javax.xml.transform.TransformerFactory.setURIResolver(URIResolver)|Set an object that is used by default during the transformation  to resolve URIs used in document(), xsl:import

*javax.xml.transform.TransformerFactory_Description*

A TransformerFactory instance can be used to create (|javax.xml.transform.Transformer|) and (|javax.xml.transform.Templates|) objects. 

The system property that determines which Factory implementation to create is named "javax.xml.transform.TransformerFactory". This property names a concrete subclass of the 
TransformerFactory abstract class. If the property is not defined, a platform default is be used. 



*javax.xml.transform.TransformerFactory()*

protected TransformerFactory()

Default constructor is protected on purpose. 


*javax.xml.transform.TransformerFactory.getAssociatedStylesheet(Source,String,String,String)*

public abstract |javax.xml.transform.Source| getAssociatedStylesheet(
  javax.xml.transform.Source source,
  java.lang.String media,
  java.lang.String title,
  java.lang.String charset)
  throws |javax.xml.transform.TransformerConfigurationException|
         
Get the stylesheet specification(s) associated with the XML Source document via the 

xml-stylesheet processing instruction that match the given criteria. Note that it is possible to return several stylesheets, in which case they are applied as if they were a list 
of imports or cascades in a single stylesheet. 


    source - The XML source document. 
    media - The media attribute to be matched. May be null, in which case the prefered templates will be used (i.e. alternate = no). 
    title - The value of the title attribute to match. May be null. 
    charset - The value of the charset attribute to match. May be null. 

    Returns: A Source Object suitable for passing to the TransformerFactory. 

*javax.xml.transform.TransformerFactory.getAttribute(String)*

public abstract |java.lang.Object| getAttribute(java.lang.String name)

Allows the user to retrieve specific attributes on the underlying implementation. An IllegalArgumentException is thrown if the underlying implementation doesn't recognize the 
attribute. 


    name - The name of the attribute. 

    Returns: value The value of the attribute. 

*javax.xml.transform.TransformerFactory.getErrorListener()*

public abstract |javax.xml.transform.ErrorListener| getErrorListener()

Get the error event handler for the TransformerFactory. 



    Returns: The current error handler, which should never be null. 

*javax.xml.transform.TransformerFactory.getFeature(String)*

public abstract boolean getFeature(java.lang.String name)

Look up the value of a feature. 

Feature names are fully qualified (|java.net.URI|) s. Implementations may define their own features. false is returned if this TransformerFactory or the Transformers or Templates 
it creates cannot support the feature. It is possible for an TransformerFactory to expose a feature value but be unable to change its state. 


    name - Feature name. 

    Returns: The current state of the feature, true or false. 

*javax.xml.transform.TransformerFactory.getURIResolver()*

public abstract |javax.xml.transform.URIResolver| getURIResolver()

Get the object that is used by default during the transformation to resolve URIs used in document(), xsl:import, or xsl:include. 



    Returns: The URIResolver that was set with setURIResolver. 

*javax.xml.transform.TransformerFactory.newInstance()*

public static |javax.xml.transform.TransformerFactory| newInstance()
  throws |javax.xml.transform.TransformerFactoryConfigurationError|
         
Obtain a new instance of a TransformerFactory. This static method creates a new factory instance This method uses the following ordered lookup procedure to determine the 
TransformerFactory implementation class to load: 

Use the javax.xml.transform.TransformerFactory system property. 

Use the properties file "lib/jaxp.properties" in the JRE directory. This configuration file is in standard java.util.Properties format and contains the fully qualified name of the 
implementation class with the key being the system property defined above. 

The jaxp.properties file is read only once by the JAXP implementation and it's values are then cached for future use. If the file does not exist when the first attempt is made to 
read from it, no further attempts are made to check for its existence. It is not possible to change the value of any property in jaxp.properties after it has been read for the 
first time. 

Use the Services API (as detailed in the JAR specification), if available, to determine the classname. The Services API will look for a classname in the file 
META-INF/services/javax.xml.transform.TransformerFactory in jars available to the runtime. 

Platform default TransformerFactory instance. 



Once an application has obtained a reference to a TransformerFactory it can use the factory to configure and obtain parser instances. 



    Returns: new TransformerFactory instance, never null. 

*javax.xml.transform.TransformerFactory.newTemplates(Source)*

public abstract |javax.xml.transform.Templates| newTemplates(javax.xml.transform.Source source)
  throws |javax.xml.transform.TransformerConfigurationException|
         
Process the Source into a Templates object, which is a a compiled representation of the source. This Templates object may then be used concurrently across multiple threads. 
Creating a Templates object allows the TransformerFactory to do detailed performance optimization of transformation instructions, without penalizing runtime transformation. 


    source - An object that holds a URL, input stream, etc. 

    Returns: A Templates object capable of being used for transformation purposes, never null. 

*javax.xml.transform.TransformerFactory.newTransformer()*

public abstract |javax.xml.transform.Transformer| newTransformer()
  throws |javax.xml.transform.TransformerConfigurationException|
         
Create a new Transformer that performs a copy of the Source to the Result. i.e. the "identity transform". 



    Returns: A Transformer object that may be used to perform a transformation in a single thread, never null. 

*javax.xml.transform.TransformerFactory.newTransformer(Source)*

public abstract |javax.xml.transform.Transformer| newTransformer(javax.xml.transform.Source source)
  throws |javax.xml.transform.TransformerConfigurationException|
         
Process the Source into a Transformer Object. The Source is an XSLT document that conforms to XSL Transformations (XSLT) Version 1.0. Care must be taken not to use this 
Transformer in multiple Threads running concurrently. Different TransformerFactories can be used concurrently by different Threads. 


    source - Source of XSLT document used to create Transformer. Examples of XML Sources include {@link javax.xml.transform.dom.DOMSource DOMSource}, {@link javax.xml.transform.sax.SAXSource 
       SAXSource}, and {@link javax.xml.transform.stream.StreamSource StreamSource}. 

    Returns: A Transformer object that may be used to perform a transformation in a single Thread, never null. 

*javax.xml.transform.TransformerFactory.setAttribute(String,Object)*

public abstract void setAttribute(
  java.lang.String name,
  java.lang.Object value)

Allows the user to set specific attributes on the underlying implementation. An attribute in this context is defined to be an option that the implementation provides. An 
IllegalArgumentException is thrown if the underlying implementation doesn't recognize the attribute. 


    name - The name of the attribute. 
    value - The value of the attribute. 

*javax.xml.transform.TransformerFactory.setErrorListener(ErrorListener)*

public abstract void setErrorListener(javax.xml.transform.ErrorListener listener)

Set the error event listener for the TransformerFactory, which is used for the processing of transformation instructions, and not for the transformation itself. An 
IllegalArgumentException is thrown if the ErrorListener listener is null. 


    listener - The new error listener. 

*javax.xml.transform.TransformerFactory.setFeature(String,boolean)*

public abstract void setFeature(
  java.lang.String name,
  boolean value)
  throws |javax.xml.transform.TransformerConfigurationException|
         
Set a feature for this TransformerFactory and Transformers or Templates created by this factory. 

Feature names are fully qualified (|java.net.URI|) s. Implementations may define their own features. An (|javax.xml.transform.TransformerConfigurationException|) is thrown if this 
TransformerFactory or the Transformers or Templates it creates cannot support the feature. It is possible for an TransformerFactory to expose a feature value but be unable to 
change its state. 

All implementations are required to support the (|javax.xml.XMLConstants|) feature. When the feature is: 

true: the implementation will limit XML processing to conform to implementation limits and behave in a secure fashion as defined by the implementation. Examples include resolving 
user defined style sheets and functions. If XML processing is limited for security reasons, it will be reported via a call to the registered (|javax.xml.transform.ErrorListener|) 
. See (|javax.xml.transform.TransformerFactory|) . 

false: the implementation will processing XML according to the XML specifications without regard to possible implementation limits. 




    name - Feature name. 
    value - Is feature state true or false. 

*javax.xml.transform.TransformerFactory.setURIResolver(URIResolver)*

public abstract void setURIResolver(javax.xml.transform.URIResolver resolver)

Set an object that is used by default during the transformation to resolve URIs used in document(), xsl:import, or xsl:include. 


    resolver - An object that implements the URIResolver interface, or null. 



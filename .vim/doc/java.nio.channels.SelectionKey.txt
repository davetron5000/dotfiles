*java.nio.channels.SelectionKey* *SelectionKey* A token representing the registr

public abstract class SelectionKey
  extends    |java.lang.Object|

|java.nio.channels.SelectionKey_Description|
|java.nio.channels.SelectionKey_Fields|
|java.nio.channels.SelectionKey_Constructors|
|java.nio.channels.SelectionKey_Methods|

================================================================================

*java.nio.channels.SelectionKey_Fields*
|int_java.nio.channels.SelectionKey.OP_ACCEPT|
|int_java.nio.channels.SelectionKey.OP_CONNECT|
|int_java.nio.channels.SelectionKey.OP_READ|
|int_java.nio.channels.SelectionKey.OP_WRITE|

*java.nio.channels.SelectionKey_Constructors*
|java.nio.channels.SelectionKey()|Constructs an instance of this class.

*java.nio.channels.SelectionKey_Methods*
|java.nio.channels.SelectionKey.attach(Object)|Attaches the given object to thi
|java.nio.channels.SelectionKey.attachment()|Retrieves the current attachment.
|java.nio.channels.SelectionKey.cancel()|Requests that the registration of this
|java.nio.channels.SelectionKey.channel()|Returns the channel for which this ke
|java.nio.channels.SelectionKey.interestOps()|Retrieves this key's interest set
|java.nio.channels.SelectionKey.interestOps(int)|Sets this key's interest set t
|java.nio.channels.SelectionKey.isAcceptable()|Tests whether this key's channel
|java.nio.channels.SelectionKey.isConnectable()|Tests whether this key's channe
|java.nio.channels.SelectionKey.isReadable()|Tests whether this key's channel i
|java.nio.channels.SelectionKey.isValid()|Tells whether or not this key is vali
|java.nio.channels.SelectionKey.isWritable()|Tests whether this key's channel i
|java.nio.channels.SelectionKey.readyOps()|Retrieves this key's ready-operation
|java.nio.channels.SelectionKey.selector()|Returns the selector for which this 

*java.nio.channels.SelectionKey_Description*

A token representing the registration of a 
(|java.nio.channels.SelectableChannel|) with a (|java.nio.channels.Selector|) . 

A selection key is created each time a channel is registered with a selector. A 
key remains valid until it is cancelled by invoking its 
cancel(|java.nio.channels.SelectionKey|) method, by closing its channel, or by 
closing its selector. Cancelling a key does not immediately remove it from its 
selector; it is instead added to the selector's cancelled-key set for removal 
during the next selection operation. The validity of a key may be tested by 
invoking its isValid(|java.nio.channels.SelectionKey|) method. 



A selection key contains two operation sets represented as integer values. Each 
bit of an operation set denotes a category of selectable operations that are 
supported by the key's channel. 



The interest set determines which operation categories will be tested for 
readiness the next time one of the selector's selection methods is invoked. The 
interest set is initialized with the value given when the key is created; it 
may later be changed via the (|java.nio.channels.SelectionKey|) method. 

The ready set identifies the operation categories for which the key's channel 
has been detected to be ready by the key's selector. The ready set is 
initialized to zero when the key is created; it may later be updated by the 
selector during a selection operation, but it cannot be updated directly. 



That a selection key's ready set indicates that its channel is ready for some 
operation category is a hint, but not a guarantee, that an operation in such a 
category may be performed by a thread without causing the thread to block. A 
ready set is most likely to be accurate immediately after the completion of a 
selection operation. It is likely to be made inaccurate by external events and 
by I/O operations that are invoked upon the corresponding channel. 

This class defines all known operation-set bits, but precisely which bits are 
supported by a given channel depends upon the type of the channel. Each 
subclass of (|java.nio.channels.SelectableChannel|) defines an 
validOps()(|java.nio.channels.SelectableChannel|) method which returns a set 
identifying just those operations that are supported by the channel. An attempt 
to set or test an operation-set bit that is not supported by a key's channel 
will result in an appropriate run-time exception. 

It is often necessary to associate some application-specific data with a 
selection key, for example an object that represents the state of a 
higher-level protocol and handles readiness notifications in order to implement 
that protocol. Selection keys therefore support the attachment of a single 
arbitrary object to a key. An object can be attached via the 
attach(|java.nio.channels.SelectionKey|) method and then later retrieved via 
the attachment(|java.nio.channels.SelectionKey|) method. 

Selection keys are safe for use by multiple concurrent threads. The operations 
of reading and writing the interest set will, in general, be synchronized with 
certain operations of the selector. Exactly how this synchronization is 
performed is implementation-dependent: In a naive implementation, reading or 
writing the interest set may block indefinitely if a selection operation is 
already in progress; in a high-performance implementation, reading or writing 
the interest set may block briefly, if at all. In any case, a selection 
operation will always use the interest-set value that was current at the moment 
that the operation began. 


*int_java.nio.channels.SelectionKey.OP_ACCEPT*

A token representing the registration of a 
(|java.nio.channels.SelectableChannel|) with a (|java.nio.channels.Selector|) . 

A selection key is created each time a channel is registered with a selector. A 
key remains valid until it is cancelled by invoking its 
cancel(|java.nio.channels.SelectionKey|) method, by closing its channel, or by 
closing its selector. Cancelling a key does not immediately remove it from its 
selector; it is instead added to the selector's cancelled-key set for removal 
during the next selection operation. The validity of a key may be tested by 
invoking its isValid(|java.nio.channels.SelectionKey|) method. 



A selection key contains two operation sets represented as integer values. Each 
bit of an operation set denotes a category of selectable operations that are 
supported by the key's channel. 



The interest set determines which operation categories will be tested for 
readiness the next time one of the selector's selection methods is invoked. The 
interest set is initialized with the value given when the key is created; it 
may later be changed via the (|java.nio.channels.SelectionKey|) method. 

The ready set identifies the operation categories for which the key's channel 
has been detected to be ready by the key's selector. The ready set is 
initialized to zero when the key is created; it may later be updated by the 
selector during a selection operation, but it cannot be updated directly. 



That a selection key's ready set indicates that its channel is ready for some 
operation category is a hint, but not a guarantee, that an operation in such a 
category may be performed by a thread without causing the thread to block. A 
ready set is most likely to be accurate immediately after the completion of a 
selection operation. It is likely to be made inaccurate by external events and 
by I/O operations that are invoked upon the corresponding channel. 

This class defines all known operation-set bits, but precisely which bits are 
supported by a given channel depends upon the type of the channel. Each 
subclass of (|java.nio.channels.SelectableChannel|) defines an 
validOps()(|java.nio.channels.SelectableChannel|) method which returns a set 
identifying just those operations that are supported by the channel. An attempt 
to set or test an operation-set bit that is not supported by a key's channel 
will result in an appropriate run-time exception. 

It is often necessary to associate some application-specific data with a 
selection key, for example an object that represents the state of a 
higher-level protocol and handles readiness notifications in order to implement 
that protocol. Selection keys therefore support the attachment of a single 
arbitrary object to a key. An object can be attached via the 
attach(|java.nio.channels.SelectionKey|) method and then later retrieved via 
the attachment(|java.nio.channels.SelectionKey|) method. 

Selection keys are safe for use by multiple concurrent threads. The operations 
of reading and writing the interest set will, in general, be synchronized with 
certain operations of the selector. Exactly how this synchronization is 
performed is implementation-dependent: In a naive implementation, reading or 
writing the interest set may block indefinitely if a selection operation is 
already in progress; in a high-performance implementation, reading or writing 
the interest set may block briefly, if at all. In any case, a selection 
operation will always use the interest-set value that was current at the moment 
that the operation began. 


*int_java.nio.channels.SelectionKey.OP_CONNECT*

A token representing the registration of a 
(|java.nio.channels.SelectableChannel|) with a (|java.nio.channels.Selector|) . 

A selection key is created each time a channel is registered with a selector. A 
key remains valid until it is cancelled by invoking its 
cancel(|java.nio.channels.SelectionKey|) method, by closing its channel, or by 
closing its selector. Cancelling a key does not immediately remove it from its 
selector; it is instead added to the selector's cancelled-key set for removal 
during the next selection operation. The validity of a key may be tested by 
invoking its isValid(|java.nio.channels.SelectionKey|) method. 



A selection key contains two operation sets represented as integer values. Each 
bit of an operation set denotes a category of selectable operations that are 
supported by the key's channel. 



The interest set determines which operation categories will be tested for 
readiness the next time one of the selector's selection methods is invoked. The 
interest set is initialized with the value given when the key is created; it 
may later be changed via the (|java.nio.channels.SelectionKey|) method. 

The ready set identifies the operation categories for which the key's channel 
has been detected to be ready by the key's selector. The ready set is 
initialized to zero when the key is created; it may later be updated by the 
selector during a selection operation, but it cannot be updated directly. 



That a selection key's ready set indicates that its channel is ready for some 
operation category is a hint, but not a guarantee, that an operation in such a 
category may be performed by a thread without causing the thread to block. A 
ready set is most likely to be accurate immediately after the completion of a 
selection operation. It is likely to be made inaccurate by external events and 
by I/O operations that are invoked upon the corresponding channel. 

This class defines all known operation-set bits, but precisely which bits are 
supported by a given channel depends upon the type of the channel. Each 
subclass of (|java.nio.channels.SelectableChannel|) defines an 
validOps()(|java.nio.channels.SelectableChannel|) method which returns a set 
identifying just those operations that are supported by the channel. An attempt 
to set or test an operation-set bit that is not supported by a key's channel 
will result in an appropriate run-time exception. 

It is often necessary to associate some application-specific data with a 
selection key, for example an object that represents the state of a 
higher-level protocol and handles readiness notifications in order to implement 
that protocol. Selection keys therefore support the attachment of a single 
arbitrary object to a key. An object can be attached via the 
attach(|java.nio.channels.SelectionKey|) method and then later retrieved via 
the attachment(|java.nio.channels.SelectionKey|) method. 

Selection keys are safe for use by multiple concurrent threads. The operations 
of reading and writing the interest set will, in general, be synchronized with 
certain operations of the selector. Exactly how this synchronization is 
performed is implementation-dependent: In a naive implementation, reading or 
writing the interest set may block indefinitely if a selection operation is 
already in progress; in a high-performance implementation, reading or writing 
the interest set may block briefly, if at all. In any case, a selection 
operation will always use the interest-set value that was current at the moment 
that the operation began. 


*int_java.nio.channels.SelectionKey.OP_READ*

A token representing the registration of a 
(|java.nio.channels.SelectableChannel|) with a (|java.nio.channels.Selector|) . 

A selection key is created each time a channel is registered with a selector. A 
key remains valid until it is cancelled by invoking its 
cancel(|java.nio.channels.SelectionKey|) method, by closing its channel, or by 
closing its selector. Cancelling a key does not immediately remove it from its 
selector; it is instead added to the selector's cancelled-key set for removal 
during the next selection operation. The validity of a key may be tested by 
invoking its isValid(|java.nio.channels.SelectionKey|) method. 



A selection key contains two operation sets represented as integer values. Each 
bit of an operation set denotes a category of selectable operations that are 
supported by the key's channel. 



The interest set determines which operation categories will be tested for 
readiness the next time one of the selector's selection methods is invoked. The 
interest set is initialized with the value given when the key is created; it 
may later be changed via the (|java.nio.channels.SelectionKey|) method. 

The ready set identifies the operation categories for which the key's channel 
has been detected to be ready by the key's selector. The ready set is 
initialized to zero when the key is created; it may later be updated by the 
selector during a selection operation, but it cannot be updated directly. 



That a selection key's ready set indicates that its channel is ready for some 
operation category is a hint, but not a guarantee, that an operation in such a 
category may be performed by a thread without causing the thread to block. A 
ready set is most likely to be accurate immediately after the completion of a 
selection operation. It is likely to be made inaccurate by external events and 
by I/O operations that are invoked upon the corresponding channel. 

This class defines all known operation-set bits, but precisely which bits are 
supported by a given channel depends upon the type of the channel. Each 
subclass of (|java.nio.channels.SelectableChannel|) defines an 
validOps()(|java.nio.channels.SelectableChannel|) method which returns a set 
identifying just those operations that are supported by the channel. An attempt 
to set or test an operation-set bit that is not supported by a key's channel 
will result in an appropriate run-time exception. 

It is often necessary to associate some application-specific data with a 
selection key, for example an object that represents the state of a 
higher-level protocol and handles readiness notifications in order to implement 
that protocol. Selection keys therefore support the attachment of a single 
arbitrary object to a key. An object can be attached via the 
attach(|java.nio.channels.SelectionKey|) method and then later retrieved via 
the attachment(|java.nio.channels.SelectionKey|) method. 

Selection keys are safe for use by multiple concurrent threads. The operations 
of reading and writing the interest set will, in general, be synchronized with 
certain operations of the selector. Exactly how this synchronization is 
performed is implementation-dependent: In a naive implementation, reading or 
writing the interest set may block indefinitely if a selection operation is 
already in progress; in a high-performance implementation, reading or writing 
the interest set may block briefly, if at all. In any case, a selection 
operation will always use the interest-set value that was current at the moment 
that the operation began. 


*int_java.nio.channels.SelectionKey.OP_WRITE*

A token representing the registration of a 
(|java.nio.channels.SelectableChannel|) with a (|java.nio.channels.Selector|) . 

A selection key is created each time a channel is registered with a selector. A 
key remains valid until it is cancelled by invoking its 
cancel(|java.nio.channels.SelectionKey|) method, by closing its channel, or by 
closing its selector. Cancelling a key does not immediately remove it from its 
selector; it is instead added to the selector's cancelled-key set for removal 
during the next selection operation. The validity of a key may be tested by 
invoking its isValid(|java.nio.channels.SelectionKey|) method. 



A selection key contains two operation sets represented as integer values. Each 
bit of an operation set denotes a category of selectable operations that are 
supported by the key's channel. 



The interest set determines which operation categories will be tested for 
readiness the next time one of the selector's selection methods is invoked. The 
interest set is initialized with the value given when the key is created; it 
may later be changed via the (|java.nio.channels.SelectionKey|) method. 

The ready set identifies the operation categories for which the key's channel 
has been detected to be ready by the key's selector. The ready set is 
initialized to zero when the key is created; it may later be updated by the 
selector during a selection operation, but it cannot be updated directly. 



That a selection key's ready set indicates that its channel is ready for some 
operation category is a hint, but not a guarantee, that an operation in such a 
category may be performed by a thread without causing the thread to block. A 
ready set is most likely to be accurate immediately after the completion of a 
selection operation. It is likely to be made inaccurate by external events and 
by I/O operations that are invoked upon the corresponding channel. 

This class defines all known operation-set bits, but precisely which bits are 
supported by a given channel depends upon the type of the channel. Each 
subclass of (|java.nio.channels.SelectableChannel|) defines an 
validOps()(|java.nio.channels.SelectableChannel|) method which returns a set 
identifying just those operations that are supported by the channel. An attempt 
to set or test an operation-set bit that is not supported by a key's channel 
will result in an appropriate run-time exception. 

It is often necessary to associate some application-specific data with a 
selection key, for example an object that represents the state of a 
higher-level protocol and handles readiness notifications in order to implement 
that protocol. Selection keys therefore support the attachment of a single 
arbitrary object to a key. An object can be attached via the 
attach(|java.nio.channels.SelectionKey|) method and then later retrieved via 
the attachment(|java.nio.channels.SelectionKey|) method. 

Selection keys are safe for use by multiple concurrent threads. The operations 
of reading and writing the interest set will, in general, be synchronized with 
certain operations of the selector. Exactly how this synchronization is 
performed is implementation-dependent: In a naive implementation, reading or 
writing the interest set may block indefinitely if a selection operation is 
already in progress; in a high-performance implementation, reading or writing 
the interest set may block briefly, if at all. In any case, a selection 
operation will always use the interest-set value that was current at the moment 
that the operation began. 



*java.nio.channels.SelectionKey()*

protected SelectionKey()

Constructs an instance of this class. 


*java.nio.channels.SelectionKey.attach(Object)*

public final |java.lang.Object| attach(java.lang.Object ob)

Attaches the given object to this key. 

An attached object may later be retrieved via the 
attachment(|java.nio.channels.SelectionKey|) method. Only one object may be 
attached at a time; invoking this method causes any previous attachment to be 
discarded. The current attachment may be discarded by attaching null. 

    ob - The object to be attached; may be null 

    Returns: The previously-attached object, if any, otherwise null 
*java.nio.channels.SelectionKey.attachment()*

public final |java.lang.Object| attachment()

Retrieves the current attachment. 


    Returns: The object currently attached to this key, or null if there is no attachment 
*java.nio.channels.SelectionKey.cancel()*

public abstract void cancel()

Requests that the registration of this key's channel with its selector be 
cancelled. Upon return the key will be invalid and will have been added to its 
selector's cancelled-key set. The key will be removed from all of the 
selector's key sets during the next selection operation. 

If this key has already been cancelled then invoking this method has no effect. 
Once cancelled, a key remains forever invalid. 

This method may be invoked at any time. It synchronizes on the selector's 
cancelled-key set, and therefore may block briefly if invoked concurrently with 
a cancellation or selection operation involving the same selector. 


*java.nio.channels.SelectionKey.channel()*

public abstract |java.nio.channels.SelectableChannel| channel()

Returns the channel for which this key was created. This method will continue 
to return the channel even after the key is cancelled. 


    Returns: This key's channel 
*java.nio.channels.SelectionKey.interestOps()*

public abstract int interestOps()

Retrieves this key's interest set. 

It is guaranteed that the returned set will only contain operation bits that 
are valid for this key's channel. 

This method may be invoked at any time. Whether or not it blocks, and for how 
long, is implementation-dependent. 


    Returns: This key's interest set 
*java.nio.channels.SelectionKey.interestOps(int)*

public abstract |java.nio.channels.SelectionKey| interestOps(int ops)

Sets this key's interest set to the given value. 

This method may be invoked at any time. Whether or not it blocks, and for how 
long, is implementation-dependent. 

    ops - The new interest set 

    Returns: This selection key 
*java.nio.channels.SelectionKey.isAcceptable()*

public final boolean isAcceptable()

Tests whether this key's channel is ready to accept a new socket connection. 

An invocation of this method of the form k.isAcceptable() behaves in exactly 
the same way as the expression 



k.readyOps() and OP_ACCEPT!=0 

If this key's channel does not support socket-accept operations then this 
method always returns false. 


    Returns: true if, and only if, readyOps()OP_ACCEPT is nonzero 
*java.nio.channels.SelectionKey.isConnectable()*

public final boolean isConnectable()

Tests whether this key's channel has either finished, or failed to finish, its 
socket-connection operation. 

An invocation of this method of the form k.isConnectable() behaves in exactly 
the same way as the expression 



k.readyOps() and OP_CONNECT!=0 

If this key's channel does not support socket-connect operations then this 
method always returns false. 


    Returns: true if, and only if, readyOps()OP_CONNECT is nonzero 
*java.nio.channels.SelectionKey.isReadable()*

public final boolean isReadable()

Tests whether this key's channel is ready for reading. 

An invocation of this method of the form k.isReadable() behaves in exactly the 
same way as the expression 



k.readyOps() and OP_READ!=0 

If this key's channel does not support read operations then this method always 
returns false. 


    Returns: true if, and only if, readyOps()OP_READ is nonzero 
*java.nio.channels.SelectionKey.isValid()*

public abstract boolean isValid()

Tells whether or not this key is valid. 

A key is valid upon creation and remains so until it is cancelled, its channel 
is closed, or its selector is closed. 


    Returns: true if, and only if, this key is valid 
*java.nio.channels.SelectionKey.isWritable()*

public final boolean isWritable()

Tests whether this key's channel is ready for writing. 

An invocation of this method of the form k.isWritable() behaves in exactly the 
same way as the expression 



k.readyOps() and OP_WRITE!=0 

If this key's channel does not support write operations then this method always 
returns false. 


    Returns: true if, and only if, readyOps()OP_WRITE is nonzero 
*java.nio.channels.SelectionKey.readyOps()*

public abstract int readyOps()

Retrieves this key's ready-operation set. 

It is guaranteed that the returned set will only contain operation bits that 
are valid for this key's channel. 


    Returns: This key's ready-operation set 
*java.nio.channels.SelectionKey.selector()*

public abstract |java.nio.channels.Selector| selector()

Returns the selector for which this key was created. This method will continue 
to return the selector even after the key is cancelled. 


    Returns: This key's selector 


*java.awt.FlowLayout* *FlowLayout* A flow layout arranges components in a direct

public class FlowLayout
  extends    |java.lang.Object|
  implements |java.awt.LayoutManager|
             |java.io.Serializable|

|java.awt.FlowLayout_Description|
|java.awt.FlowLayout_Fields|
|java.awt.FlowLayout_Constructors|
|java.awt.FlowLayout_Methods|

================================================================================

*java.awt.FlowLayout_Fields*
|int_java.awt.FlowLayout.CENTER|
|int_java.awt.FlowLayout.LEADING|
|int_java.awt.FlowLayout.LEFT|
|int_java.awt.FlowLayout.RIGHT|
|int_java.awt.FlowLayout.TRAILING|

*java.awt.FlowLayout_Constructors*
|java.awt.FlowLayout()|Constructs a new FlowLayout with a centered alignment an
|java.awt.FlowLayout(int)|Constructs a new FlowLayout with the specified  align
|java.awt.FlowLayout(int,int,int)|Creates a new flow layout manager with the in

*java.awt.FlowLayout_Methods*
|java.awt.FlowLayout.addLayoutComponent(String,Component)|Adds the specified co
|java.awt.FlowLayout.getAlignment()|Gets the alignment for this layout.
|java.awt.FlowLayout.getHgap()|Gets the horizontal gap between components  and 
|java.awt.FlowLayout.getVgap()|Gets the vertical gap between components and  be
|java.awt.FlowLayout.layoutContainer(Container)|Lays out the container.
|java.awt.FlowLayout.minimumLayoutSize(Container)|Returns the minimum dimension
|java.awt.FlowLayout.preferredLayoutSize(Container)|Returns the preferred dimen
|java.awt.FlowLayout.removeLayoutComponent(Component)|Removes the specified com
|java.awt.FlowLayout.setAlignment(int)|Sets the alignment for this layout.
|java.awt.FlowLayout.setHgap(int)|Sets the horizontal gap between components an
|java.awt.FlowLayout.setVgap(int)|Sets the vertical gap between components and 
|java.awt.FlowLayout.toString()|Returns a string representation of this FlowLay

*java.awt.FlowLayout_Description*

A flow layout arranges components in a directional flow, much like lines of 
text in a paragraph. The flow direction is determined by the container's 
componentOrientation property and may be one of two values: 

ComponentOrientation.LEFT_TO_RIGHT ComponentOrientation.RIGHT_TO_LEFT 

Flow layouts are typically used to arrange buttons in a panel. It arranges 
buttons horizontally until no more buttons fit on the same line. The line 
alignment is determined by the align property. The possible values are: 

LEFT(|java.awt.FlowLayout|) RIGHT(|java.awt.FlowLayout|) 
CENTER(|java.awt.FlowLayout|) LEADING(|java.awt.FlowLayout|) 
TRAILING(|java.awt.FlowLayout|) 

For example, the following picture shows an applet using the flow layout 
manager (its default layout manager) to position three buttons: 



Here is the code for this applet: 



import java.awt.*; import java.applet.Applet; 

public class myButtons extends Applet { Button button1, button2, button3; 
public void init() { button1 = new Button("Ok"); button2 = new Button("Open"); 
button3 = new Button("Close"); add(button1); add(button2); add(button3); } } 

A flow layout lets each component assume its natural (preferred) size. 


*int_java.awt.FlowLayout.CENTER*

A flow layout arranges components in a directional flow, much like lines of 
text in a paragraph. The flow direction is determined by the container's 
componentOrientation property and may be one of two values: 

ComponentOrientation.LEFT_TO_RIGHT ComponentOrientation.RIGHT_TO_LEFT 

Flow layouts are typically used to arrange buttons in a panel. It arranges 
buttons horizontally until no more buttons fit on the same line. The line 
alignment is determined by the align property. The possible values are: 

LEFT(|java.awt.FlowLayout|) RIGHT(|java.awt.FlowLayout|) 
CENTER(|java.awt.FlowLayout|) LEADING(|java.awt.FlowLayout|) 
TRAILING(|java.awt.FlowLayout|) 

For example, the following picture shows an applet using the flow layout 
manager (its default layout manager) to position three buttons: 



Here is the code for this applet: 



import java.awt.*; import java.applet.Applet; 

public class myButtons extends Applet { Button button1, button2, button3; 
public void init() { button1 = new Button("Ok"); button2 = new Button("Open"); 
button3 = new Button("Close"); add(button1); add(button2); add(button3); } } 

A flow layout lets each component assume its natural (preferred) size. 


*int_java.awt.FlowLayout.LEADING*

A flow layout arranges components in a directional flow, much like lines of 
text in a paragraph. The flow direction is determined by the container's 
componentOrientation property and may be one of two values: 

ComponentOrientation.LEFT_TO_RIGHT ComponentOrientation.RIGHT_TO_LEFT 

Flow layouts are typically used to arrange buttons in a panel. It arranges 
buttons horizontally until no more buttons fit on the same line. The line 
alignment is determined by the align property. The possible values are: 

LEFT(|java.awt.FlowLayout|) RIGHT(|java.awt.FlowLayout|) 
CENTER(|java.awt.FlowLayout|) LEADING(|java.awt.FlowLayout|) 
TRAILING(|java.awt.FlowLayout|) 

For example, the following picture shows an applet using the flow layout 
manager (its default layout manager) to position three buttons: 



Here is the code for this applet: 



import java.awt.*; import java.applet.Applet; 

public class myButtons extends Applet { Button button1, button2, button3; 
public void init() { button1 = new Button("Ok"); button2 = new Button("Open"); 
button3 = new Button("Close"); add(button1); add(button2); add(button3); } } 

A flow layout lets each component assume its natural (preferred) size. 


*int_java.awt.FlowLayout.LEFT*

A flow layout arranges components in a directional flow, much like lines of 
text in a paragraph. The flow direction is determined by the container's 
componentOrientation property and may be one of two values: 

ComponentOrientation.LEFT_TO_RIGHT ComponentOrientation.RIGHT_TO_LEFT 

Flow layouts are typically used to arrange buttons in a panel. It arranges 
buttons horizontally until no more buttons fit on the same line. The line 
alignment is determined by the align property. The possible values are: 

LEFT(|java.awt.FlowLayout|) RIGHT(|java.awt.FlowLayout|) 
CENTER(|java.awt.FlowLayout|) LEADING(|java.awt.FlowLayout|) 
TRAILING(|java.awt.FlowLayout|) 

For example, the following picture shows an applet using the flow layout 
manager (its default layout manager) to position three buttons: 



Here is the code for this applet: 



import java.awt.*; import java.applet.Applet; 

public class myButtons extends Applet { Button button1, button2, button3; 
public void init() { button1 = new Button("Ok"); button2 = new Button("Open"); 
button3 = new Button("Close"); add(button1); add(button2); add(button3); } } 

A flow layout lets each component assume its natural (preferred) size. 


*int_java.awt.FlowLayout.RIGHT*

A flow layout arranges components in a directional flow, much like lines of 
text in a paragraph. The flow direction is determined by the container's 
componentOrientation property and may be one of two values: 

ComponentOrientation.LEFT_TO_RIGHT ComponentOrientation.RIGHT_TO_LEFT 

Flow layouts are typically used to arrange buttons in a panel. It arranges 
buttons horizontally until no more buttons fit on the same line. The line 
alignment is determined by the align property. The possible values are: 

LEFT(|java.awt.FlowLayout|) RIGHT(|java.awt.FlowLayout|) 
CENTER(|java.awt.FlowLayout|) LEADING(|java.awt.FlowLayout|) 
TRAILING(|java.awt.FlowLayout|) 

For example, the following picture shows an applet using the flow layout 
manager (its default layout manager) to position three buttons: 



Here is the code for this applet: 



import java.awt.*; import java.applet.Applet; 

public class myButtons extends Applet { Button button1, button2, button3; 
public void init() { button1 = new Button("Ok"); button2 = new Button("Open"); 
button3 = new Button("Close"); add(button1); add(button2); add(button3); } } 

A flow layout lets each component assume its natural (preferred) size. 


*int_java.awt.FlowLayout.TRAILING*

A flow layout arranges components in a directional flow, much like lines of 
text in a paragraph. The flow direction is determined by the container's 
componentOrientation property and may be one of two values: 

ComponentOrientation.LEFT_TO_RIGHT ComponentOrientation.RIGHT_TO_LEFT 

Flow layouts are typically used to arrange buttons in a panel. It arranges 
buttons horizontally until no more buttons fit on the same line. The line 
alignment is determined by the align property. The possible values are: 

LEFT(|java.awt.FlowLayout|) RIGHT(|java.awt.FlowLayout|) 
CENTER(|java.awt.FlowLayout|) LEADING(|java.awt.FlowLayout|) 
TRAILING(|java.awt.FlowLayout|) 

For example, the following picture shows an applet using the flow layout 
manager (its default layout manager) to position three buttons: 



Here is the code for this applet: 



import java.awt.*; import java.applet.Applet; 

public class myButtons extends Applet { Button button1, button2, button3; 
public void init() { button1 = new Button("Ok"); button2 = new Button("Open"); 
button3 = new Button("Close"); add(button1); add(button2); add(button3); } } 

A flow layout lets each component assume its natural (preferred) size. 



*java.awt.FlowLayout()*

public FlowLayout()

Constructs a new FlowLayout with a centered alignment and a default 5-unit 
horizontal and vertical gap. 


*java.awt.FlowLayout(int)*

public FlowLayout(int align)

Constructs a new FlowLayout with the specified alignment and a default 5-unit 
horizontal and vertical gap. The value of the alignment argument must be one of 
FlowLayout.LEFT, FlowLayout.RIGHT, FlowLayout.CENTER, FlowLayout.LEADING, or 
FlowLayout.TRAILING. 

    align - the alignment value 

*java.awt.FlowLayout(int,int,int)*

public FlowLayout(
  int align,
  int hgap,
  int vgap)

Creates a new flow layout manager with the indicated alignment and the 
indicated horizontal and vertical gaps. 

The value of the alignment argument must be one of FlowLayout.LEFT, 
FlowLayout.RIGHT, FlowLayout.CENTER, FlowLayout.LEADING, or 
FlowLayout.TRAILING. 

    align - the alignment value 
    hgap - the horizontal gap between components and between the components and the 
       borders of the Container 
    vgap - the vertical gap between components and between the components and the borders 
       of the Container 

*java.awt.FlowLayout.addLayoutComponent(String,Component)*

public void addLayoutComponent(
  java.lang.String name,
  java.awt.Component comp)

Adds the specified component to the layout. Not used by this class. 

    name - the name of the component 
    comp - the component to be added 

*java.awt.FlowLayout.getAlignment()*

public int getAlignment()

Gets the alignment for this layout. Possible values are FlowLayout.LEFT, 
FlowLayout.RIGHT, FlowLayout.CENTER, FlowLayout.LEADING, or 
FlowLayout.TRAILING. 


    Returns: the alignment value for this layout 
*java.awt.FlowLayout.getHgap()*

public int getHgap()

Gets the horizontal gap between components and between the components and the 
borders of the Container 


    Returns: the horizontal gap between components and between the components and the 
             borders of the Container 
*java.awt.FlowLayout.getVgap()*

public int getVgap()

Gets the vertical gap between components and between the components and the 
borders of the Container. 


    Returns: the vertical gap between components and between the components and the borders 
             of the Container 
*java.awt.FlowLayout.layoutContainer(Container)*

public void layoutContainer(java.awt.Container target)

Lays out the container. This method lets each visible component take its 
preferred size by reshaping the components in the target container in order to 
satisfy the alignment of this FlowLayout object. 

    target - the specified component being laid out 

*java.awt.FlowLayout.minimumLayoutSize(Container)*

public |java.awt.Dimension| minimumLayoutSize(java.awt.Container target)

Returns the minimum dimensions needed to layout the visible components 
contained in the specified target container. 

    target - the container that needs to be laid out 

    Returns: the minimum dimensions to lay out the subcomponents of the specified container 
*java.awt.FlowLayout.preferredLayoutSize(Container)*

public |java.awt.Dimension| preferredLayoutSize(java.awt.Container target)

Returns the preferred dimensions for this layout given the visible components 
in the specified target container. 

    target - the container that needs to be laid out 

    Returns: the preferred dimensions to lay out the subcomponents of the specified 
             container 
*java.awt.FlowLayout.removeLayoutComponent(Component)*

public void removeLayoutComponent(java.awt.Component comp)

Removes the specified component from the layout. Not used by this class. 

    comp - the component to remove 

*java.awt.FlowLayout.setAlignment(int)*

public void setAlignment(int align)

Sets the alignment for this layout. Possible values are 

FlowLayout.LEFT FlowLayout.RIGHT FlowLayout.CENTER FlowLayout.LEADING 
FlowLayout.TRAILING 

    align - one of the alignment values shown above 

*java.awt.FlowLayout.setHgap(int)*

public void setHgap(int hgap)

Sets the horizontal gap between components and between the components and the 
borders of the Container. 

    hgap - the horizontal gap between components and between the components and the 
       borders of the Container 

*java.awt.FlowLayout.setVgap(int)*

public void setVgap(int vgap)

Sets the vertical gap between components and between the components and the 
borders of the Container. 

    vgap - the vertical gap between components and between the components and the borders 
       of the Container 

*java.awt.FlowLayout.toString()*

public |java.lang.String| toString()

Returns a string representation of this FlowLayout object and its values. 


    Returns: a string representation of this layout 


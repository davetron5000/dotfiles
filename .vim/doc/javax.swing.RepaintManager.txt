*javax.swing.RepaintManager* *RepaintManager* This class manages repaint requests, allowing the number
 of repaints to be minimized, for example by collapsing multiple 
 requests i

public class RepaintManager
  extends    |java.lang.Object|

|javax.swing.RepaintManager_Description|
|javax.swing.RepaintManager_Fields|
|javax.swing.RepaintManager_Constructors|
|javax.swing.RepaintManager_Methods|

====================================================================================================================================================================================

*javax.swing.RepaintManager_Constructors*
|javax.swing.RepaintManager()|Create a new RepaintManager instance.

*javax.swing.RepaintManager_Methods*
|javax.swing.RepaintManager.addDirtyRegion(JComponent,int,int,int,int)|Add a component in the list of components that should be refreshed.
|javax.swing.RepaintManager.addInvalidComponent(JComponent)|Mark the component as in need of layout and queue a runnable  for the event dispatching thread that will validate the c
|javax.swing.RepaintManager.currentManager(Component)|Return the RepaintManager for the calling thread given a Component.
|javax.swing.RepaintManager.currentManager(JComponent)|Return the RepaintManager for the calling thread given a JComponent.
|javax.swing.RepaintManager.getDirtyRegion(JComponent)|Return the current dirty region for a component.
|javax.swing.RepaintManager.getDoubleBufferMaximumSize()|Returns the maximum double buffer size.
|javax.swing.RepaintManager.getOffscreenBuffer(Component,int,int)|Return the offscreen buffer that should be used as a double buffer with   the component c.
|javax.swing.RepaintManager.getVolatileOffscreenBuffer(Component,int,int)|Return a volatile offscreen buffer that should be used as a  double buffer with the specified component c
|javax.swing.RepaintManager.isCompletelyDirty(JComponent)|Convenience method that returns true if aComponent will be completely  painted during the next paintDirtyRegions().
|javax.swing.RepaintManager.isDoubleBufferingEnabled()|Returns true if this RepaintManager is double buffered.
|javax.swing.RepaintManager.markCompletelyClean(JComponent)|Mark a component completely clean.
|javax.swing.RepaintManager.markCompletelyDirty(JComponent)|Mark a component completely dirty.
|javax.swing.RepaintManager.paintDirtyRegions()|Paint all of the components that have been marked dirty.
|javax.swing.RepaintManager.removeInvalidComponent(JComponent)|Remove a component from the list of invalid components.
|javax.swing.RepaintManager.setCurrentManager(RepaintManager)|Set the RepaintManager that should be used for the calling   thread.
|javax.swing.RepaintManager.setDoubleBufferingEnabled(boolean)|Enables or disables double buffering in this RepaintManager.
|javax.swing.RepaintManager.setDoubleBufferMaximumSize(Dimension)|Set the maximum double buffer size.
|javax.swing.RepaintManager.toString()|Returns a string that displays and identifies this  object's properties.
|javax.swing.RepaintManager.validateInvalidComponents()|Validate all of the components that have been marked invalid.

*javax.swing.RepaintManager_Description*

This class manages repaint requests, allowing the number of repaints to be minimized, for example by collapsing multiple requests into a single repaint for members of a component 
tree. 



*javax.swing.RepaintManager()*

public RepaintManager()

Create a new RepaintManager instance. You rarely call this constructor. directly. To get the default RepaintManager, use RepaintManager.currentManager(JComponent) (normally 
"this"). 


*javax.swing.RepaintManager.addDirtyRegion(JComponent,int,int,int,int)*

public void addDirtyRegion(
  javax.swing.JComponent c,
  int x,
  int y,
  int w,
  int h)

Add a component in the list of components that should be refreshed. If c already has a dirty region, the rectangle (x,y,w,h) will be unioned with the region that should be 
redrawn. 



*javax.swing.RepaintManager.addInvalidComponent(JComponent)*

public synchronized void addInvalidComponent(javax.swing.JComponent invalidComponent)

Mark the component as in need of layout and queue a runnable for the event dispatching thread that will validate the components first isValidateRoot() ancestor. 



*javax.swing.RepaintManager.currentManager(Component)*

public static |javax.swing.RepaintManager| currentManager(java.awt.Component c)

Return the RepaintManager for the calling thread given a Component. 


    c - a Component -- unused in the default implementation, but could be used by an overridden version to return a different RepaintManager depending on the Component 

    Returns: the RepaintManager object 

*javax.swing.RepaintManager.currentManager(JComponent)*

public static |javax.swing.RepaintManager| currentManager(javax.swing.JComponent c)

Return the RepaintManager for the calling thread given a JComponent. 

Note: This method exists for backward binary compatibility with earlier versions of the Swing library. It simply returns the result returned by (|javax.swing.RepaintManager|) . 


    c - a JComponent -- unused 

    Returns: the RepaintManager object 

*javax.swing.RepaintManager.getDirtyRegion(JComponent)*

public |java.awt.Rectangle| getDirtyRegion(javax.swing.JComponent aComponent)

Return the current dirty region for a component. Return an empty rectangle if the component is not dirty. 



*javax.swing.RepaintManager.getDoubleBufferMaximumSize()*

public |java.awt.Dimension| getDoubleBufferMaximumSize()

Returns the maximum double buffer size. 



    Returns: a Dimension object representing the maximum size 

*javax.swing.RepaintManager.getOffscreenBuffer(Component,int,int)*

public |java.awt.Image| getOffscreenBuffer(
  java.awt.Component c,
  int proposedWidth,
  int proposedHeight)

Return the offscreen buffer that should be used as a double buffer with the component c. By default there is a double buffer per RepaintManager. The buffer might be smaller than 
(proposedWidth,proposedHeight) This happens when the maximum double buffer size as been set for the receiving repaint manager. 



*javax.swing.RepaintManager.getVolatileOffscreenBuffer(Component,int,int)*

public |java.awt.Image| getVolatileOffscreenBuffer(
  java.awt.Component c,
  int proposedWidth,
  int proposedHeight)

Return a volatile offscreen buffer that should be used as a double buffer with the specified component c. The image returned will be an instance of VolatileImage, or null if a 
VolatileImage object could not be instantiated. This buffer might be smaller than (proposedWidth,proposedHeight). This happens when the maximum double buffer size has been set for 
this repaint manager. 



*javax.swing.RepaintManager.isCompletelyDirty(JComponent)*

public boolean isCompletelyDirty(javax.swing.JComponent aComponent)

Convenience method that returns true if aComponent will be completely painted during the next paintDirtyRegions(). If computing dirty regions is expensive for your component, use 
this method and avoid computing dirty region if it return true. 



*javax.swing.RepaintManager.isDoubleBufferingEnabled()*

public boolean isDoubleBufferingEnabled()

Returns true if this RepaintManager is double buffered. The default value for this property may vary from platform to platform. On platforms where native double buffering is 
supported in the AWT, the default value will be false to avoid unnecessary buffering in Swing. On platforms where native double buffering is not supported, the default value will 
be true. 



    Returns: true if this object is double buffered 

*javax.swing.RepaintManager.markCompletelyClean(JComponent)*

public void markCompletelyClean(javax.swing.JComponent aComponent)

Mark a component completely clean. aComponent will not get painted during the next paintDirtyRegions() call. 



*javax.swing.RepaintManager.markCompletelyDirty(JComponent)*

public void markCompletelyDirty(javax.swing.JComponent aComponent)

Mark a component completely dirty. aComponent will be completely painted during the next paintDirtyRegions() call. 



*javax.swing.RepaintManager.paintDirtyRegions()*

public void paintDirtyRegions()

Paint all of the components that have been marked dirty. 



*javax.swing.RepaintManager.removeInvalidComponent(JComponent)*

public synchronized void removeInvalidComponent(javax.swing.JComponent component)

Remove a component from the list of invalid components. 



*javax.swing.RepaintManager.setCurrentManager(RepaintManager)*

public static void setCurrentManager(javax.swing.RepaintManager aRepaintManager)

Set the RepaintManager that should be used for the calling thread. aRepaintManager will become the current RepaintManager for the calling thread's thread group. 


    aRepaintManager - the RepaintManager object to use 

*javax.swing.RepaintManager.setDoubleBufferingEnabled(boolean)*

public void setDoubleBufferingEnabled(boolean aFlag)

Enables or disables double buffering in this RepaintManager. CAUTION: The default value for this property is set for optimal paint performance on the given platform and it is not 
recommended that programs modify this property directly. 


    aFlag - true to activate double buffering 

*javax.swing.RepaintManager.setDoubleBufferMaximumSize(Dimension)*

public void setDoubleBufferMaximumSize(java.awt.Dimension d)

Set the maximum double buffer size. 



*javax.swing.RepaintManager.toString()*

public synchronized |java.lang.String| toString()

Returns a string that displays and identifies this object's properties. 



    Returns: a String representation of this object 

*javax.swing.RepaintManager.validateInvalidComponents()*

public void validateInvalidComponents()

Validate all of the components that have been marked invalid. 





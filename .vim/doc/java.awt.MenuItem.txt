*java.awt.MenuItem* *MenuItem* All items in a menu must belong to the class
 Men

public class MenuItem
  extends    |java.awt.MenuComponent|
  implements |javax.accessibility.Accessible|

|java.awt.MenuItem_Description|
|java.awt.MenuItem_Fields|
|java.awt.MenuItem_Constructors|
|java.awt.MenuItem_Methods|

================================================================================

*java.awt.MenuItem_Constructors*
|java.awt.MenuItem()|Constructs a new MenuItem with an empty label and no keybo
|java.awt.MenuItem(String)|Constructs a new MenuItem with the specified label  
|java.awt.MenuItem(String,MenuShortcut)|Create a menu item with an associated k

*java.awt.MenuItem_Methods*
|java.awt.MenuItem.addActionListener(ActionListener)|Adds the specified action 
|java.awt.MenuItem.addNotify()|Creates the menu item's peer.
|java.awt.MenuItem.deleteShortcut()|Delete any MenuShortcut object associated  
|java.awt.MenuItem.disable()|
|java.awt.MenuItem.disableEvents(long)|Disables event delivery to this menu ite
|java.awt.MenuItem.enable()|
|java.awt.MenuItem.enable(boolean)|
|java.awt.MenuItem.enableEvents(long)|Enables event delivery to this menu item 
|java.awt.MenuItem.getAccessibleContext()|Gets the AccessibleContext associated
|java.awt.MenuItem.getActionCommand()|Gets the command name of the action event
|java.awt.MenuItem.getActionListeners()|Returns an array of all the action list
|java.awt.MenuItem.getLabel()|Gets the label for this menu item.
|java.awt.MenuItem.getListeners(Class)|Returns an array of all the objects curr
|java.awt.MenuItem.getShortcut()|Get the MenuShortcut object associated with th
|java.awt.MenuItem.isEnabled()|Checks whether this menu item is enabled.
|java.awt.MenuItem.paramString()|Returns a string representing the state of thi
|java.awt.MenuItem.processActionEvent(ActionEvent)|Processes action events occu
|java.awt.MenuItem.processEvent(AWTEvent)|Processes events on this menu item.
|java.awt.MenuItem.removeActionListener(ActionListener)|Removes the specified a
|java.awt.MenuItem.setActionCommand(String)|Sets the command name of the action
|java.awt.MenuItem.setEnabled(boolean)|Sets whether or not this menu item can b
|java.awt.MenuItem.setLabel(String)|Sets the label for this menu item to the sp
|java.awt.MenuItem.setShortcut(MenuShortcut)|Set the MenuShortcut object associ

*java.awt.MenuItem_Description*

All items in a menu must belong to the class MenuItem, or one of its 
subclasses. 

The default MenuItem object embodies a simple labeled menu item. 

This picture of a menu bar shows five menu items: 

The first two items are simple menu items, labeled "Basic" and "Simple". 
Following these two items is a separator, which is itself a menu item, created 
with the label "-". Next is an instance of CheckboxMenuItem labeled "Check". 
The final menu item is a submenu labeled "MoreExamples", and this submenu is an 
instance of Menu. 

When a menu item is selected, AWT sends an action event to the menu item. Since 
the event is an instance of ActionEvent, the processEvent method examines the 
event and passes it along to processActionEvent. The latter method redirects 
the event to any ActionListener objects that have registered an interest in 
action events generated by this menu item. 

Note that the subclass Menu overrides this behavior and does not send any event 
to the frame until one of its subitems is selected. 


*java.awt.MenuItem()*

public MenuItem()
  throws |java.awt.HeadlessException|
         
Constructs a new MenuItem with an empty label and no keyboard shortcut. 


*java.awt.MenuItem(String)*

public MenuItem(java.lang.String label)
  throws |java.awt.HeadlessException|
         
Constructs a new MenuItem with the specified label and no keyboard shortcut. 
Note that use of "-" in a label is reserved to indicate a separator between 
menu items. By default, all menu items except for separators are enabled. 

    label - the label for this menu item. 

*java.awt.MenuItem(String,MenuShortcut)*

public MenuItem(
  java.lang.String label,
  java.awt.MenuShortcut s)
  throws |java.awt.HeadlessException|
         
Create a menu item with an associated keyboard shortcut. Note that use of "-" 
in a label is reserved to indicate a separator between menu items. By default, 
all menu items except for separators are enabled. 

    label - the label for this menu item. 
    s - the instance of MenuShortcut associated with this menu item. 

*java.awt.MenuItem.addActionListener(ActionListener)*

public synchronized void addActionListener(java.awt.event.ActionListener l)

Adds the specified action listener to receive action events from this menu 
item. If l is null, no exception is thrown and no action is performed. 

    l - the action listener. 

*java.awt.MenuItem.addNotify()*

public void addNotify()

Creates the menu item's peer. The peer allows us to modify the appearance of 
the menu item without changing its functionality. 


*java.awt.MenuItem.deleteShortcut()*

public void deleteShortcut()

Delete any MenuShortcut object associated with this menu item. 


*java.awt.MenuItem.disable()*

public synchronized void disable()




*java.awt.MenuItem.disableEvents(long)*

protected final void disableEvents(long eventsToDisable)

Disables event delivery to this menu item for events defined by the specified 
event mask parameter. 

    eventsToDisable - the event mask defining the event types 

*java.awt.MenuItem.enable()*

public synchronized void enable()




*java.awt.MenuItem.enable(boolean)*

public void enable(boolean b)




*java.awt.MenuItem.enableEvents(long)*

protected final void enableEvents(long eventsToEnable)

Enables event delivery to this menu item for events to be defined by the 
specified event mask parameter 

Since event types are automatically enabled when a listener for that type is 
added to the menu item, this method only needs to be invoked by subclasses of 
MenuItem which desire to have the specified event types delivered to 
processEvent regardless of whether a listener is registered. 

    eventsToEnable - the event mask defining the event types 

*java.awt.MenuItem.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this MenuItem. For menu items, the 
AccessibleContext takes the form of an AccessibleAWTMenuItem. A new 
AccessibleAWTMenuItem instance is created if necessary. 


    Returns: an AccessibleAWTMenuItem that serves as the AccessibleContext of this MenuItem 
*java.awt.MenuItem.getActionCommand()*

public |java.lang.String| getActionCommand()

Gets the command name of the action event that is fired by this menu item. 


*java.awt.MenuItem.getActionListeners()*

public synchronized |java.awt.event.ActionListener| getActionListeners()

Returns an array of all the action listeners registered on this menu item. 


    Returns: all of this menu item's ActionListeners or an empty array if no action 
             listeners are currently registered 
*java.awt.MenuItem.getLabel()*

public |java.lang.String| getLabel()

Gets the label for this menu item. 


    Returns: the label of this menu item, or null if this menu item has no label. 
*java.awt.MenuItem.getListeners(Class)*

public |java.util.EventListener| getListeners(java.lang.Class listenerType)

Returns an array of all the objects currently registered as FooListeners upon 
this MenuItem. FooListeners are registered using the addFooListener method. 

You can specify the listenerType argument with a class literal, such as 
FooListener.class. For example, you can query a MenuItem m for its action 
listeners with the following code: 

ActionListener[] als = 
(ActionListener[])(m.getListeners(ActionListener.class)); 

If no such listeners exist, this method returns an empty array. 

    listenerType - the type of listeners requested; this parameter should specify an interface 
       that descends from java.util.EventListener 

    Returns: an array of all objects registered as FooListeners on this menu item, or an 
             empty array if no such listeners have been added 
*java.awt.MenuItem.getShortcut()*

public |java.awt.MenuShortcut| getShortcut()

Get the MenuShortcut object associated with this menu item, 


    Returns: the menu shortcut associated with this menu item, or null if none has been 
             specified. 
*java.awt.MenuItem.isEnabled()*

public boolean isEnabled()

Checks whether this menu item is enabled. 


*java.awt.MenuItem.paramString()*

public |java.lang.String| paramString()

Returns a string representing the state of this MenuItem. This method is 
intended to be used only for debugging purposes, and the content and format of 
the returned string may vary between implementations. The returned string may 
be empty but may not be null. 


    Returns: the parameter string of this menu item 
*java.awt.MenuItem.processActionEvent(ActionEvent)*

protected void processActionEvent(java.awt.event.ActionEvent e)

Processes action events occurring on this menu item, by dispatching them to any 
registered ActionListener objects. This method is not called unless action 
events are enabled for this component. Action events are enabled when one of 
the following occurs: 

An ActionListener object is registered via addActionListener. Action events are 
enabled via enableEvents. 

Note that if the event parameter is null the behavior is unspecified and may 
result in an exception. 

    e - the action event 

*java.awt.MenuItem.processEvent(AWTEvent)*

protected void processEvent(java.awt.AWTEvent e)

Processes events on this menu item. If the event is an instance of ActionEvent, 
it invokes processActionEvent, another method defined by MenuItem. 

Currently, menu items only support action events. Note that if the event 
parameter is null the behavior is unspecified and may result in an exception. 

    e - the event 

*java.awt.MenuItem.removeActionListener(ActionListener)*

public synchronized void removeActionListener(java.awt.event.ActionListener l)

Removes the specified action listener so it no longer receives action events 
from this menu item. If l is null, no exception is thrown and no action is 
performed. 

    l - the action listener. 

*java.awt.MenuItem.setActionCommand(String)*

public void setActionCommand(java.lang.String command)

Sets the command name of the action event that is fired by this menu item. 

By default, the action command is set to the label of the menu item. 

    command - the action command to be set for this menu item. 

*java.awt.MenuItem.setEnabled(boolean)*

public synchronized void setEnabled(boolean b)

Sets whether or not this menu item can be chosen. 

    b - if true, enables this menu item; if false, disables it. 

*java.awt.MenuItem.setLabel(String)*

public synchronized void setLabel(java.lang.String label)

Sets the label for this menu item to the specified label. 

    label - the new label, or null for no label. 

*java.awt.MenuItem.setShortcut(MenuShortcut)*

public void setShortcut(java.awt.MenuShortcut s)

Set the MenuShortcut object associated with this menu item. If a menu shortcut 
is already associated with this menu item, it is replaced. 

    s - the menu shortcut to associate with this menu item. 



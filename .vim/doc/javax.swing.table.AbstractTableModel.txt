*javax.swing.table.AbstractTableModel* *AbstractTableModel* This abstract class 

public abstract class AbstractTableModel
  extends    |java.lang.Object|
  implements |javax.swing.table.TableModel|
             |java.io.Serializable|

|javax.swing.table.AbstractTableModel_Description|
|javax.swing.table.AbstractTableModel_Fields|
|javax.swing.table.AbstractTableModel_Constructors|
|javax.swing.table.AbstractTableModel_Methods|

================================================================================

*javax.swing.table.AbstractTableModel_Fields*
|javax.swing.event.EventListenerList_javax.swing.table.AbstractTableModel.listenerList|

*javax.swing.table.AbstractTableModel_Constructors*
|javax.swing.table.AbstractTableModel()|

*javax.swing.table.AbstractTableModel_Methods*
|javax.swing.table.AbstractTableModel.addTableModelListener(TableModelListener)|
|javax.swing.table.AbstractTableModel.findColumn(String)|Returns a column given
|javax.swing.table.AbstractTableModel.fireTableCellUpdated(int,int)|Notifies al
|javax.swing.table.AbstractTableModel.fireTableChanged(TableModelEvent)|Forward
|javax.swing.table.AbstractTableModel.fireTableDataChanged()|Notifies all liste
|javax.swing.table.AbstractTableModel.fireTableRowsDeleted(int,int)|Notifies al
|javax.swing.table.AbstractTableModel.fireTableRowsInserted(int,int)|Notifies a
|javax.swing.table.AbstractTableModel.fireTableRowsUpdated(int,int)|Notifies al
|javax.swing.table.AbstractTableModel.fireTableStructureChanged()|Notifies all 
|javax.swing.table.AbstractTableModel.getColumnClass(int)|Returns Object.class 
|javax.swing.table.AbstractTableModel.getColumnName(int)|Returns a default name
|javax.swing.table.AbstractTableModel.getListeners(Class)|Returns an array of a
|javax.swing.table.AbstractTableModel.getTableModelListeners()|Returns an array
|javax.swing.table.AbstractTableModel.isCellEditable(int,int)|Returns false.
|javax.swing.table.AbstractTableModel.removeTableModelListener(TableModelListener)|
|javax.swing.table.AbstractTableModel.setValueAt(Object,int,int)|This empty imp

*javax.swing.table.AbstractTableModel_Description*

This abstract class provides default implementations for most of the methods in 
the TableModel interface. It takes care of the management of listeners and 
provides some conveniences for generating TableModelEvents and dispatching them 
to the listeners. To create a concrete TableModel as a subclass of 
AbstractTableModel you need only provide implementations for the following 
three methods: 



public int getRowCount(); public int getColumnCount(); public Object 
getValueAt(int row, int column); 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.event.EventListenerList_javax.swing.table.AbstractTableModel.listenerList*

This abstract class provides default implementations for most of the methods in 
the TableModel interface. It takes care of the management of listeners and 
provides some conveniences for generating TableModelEvents and dispatching them 
to the listeners. To create a concrete TableModel as a subclass of 
AbstractTableModel you need only provide implementations for the following 
three methods: 



public int getRowCount(); public int getColumnCount(); public Object 
getValueAt(int row, int column); 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.table.AbstractTableModel()*

public AbstractTableModel()




*javax.swing.table.AbstractTableModel.addTableModelListener(TableModelListener)*

public void addTableModelListener(javax.swing.event.TableModelListener l)

Adds a listener to the list that's notified each time a change to the data 
model occurs. 

    l - the TableModelListener 

*javax.swing.table.AbstractTableModel.findColumn(String)*

public int findColumn(java.lang.String columnName)

Returns a column given its name. Implementation is naive so this should be 
overridden if this method is to be called often. This method is not in the 
TableModel interface and is not used by the JTable. 

    columnName - string containing name of column to be located 

    Returns: the column with columnName, or -1 if not found 
*javax.swing.table.AbstractTableModel.fireTableCellUpdated(int,int)*

public void fireTableCellUpdated(
  int row,
  int column)

Notifies all listeners that the value of the cell at [row, column] has been 
updated. 

    row - row of cell which has been updated 
    column - column of cell which has been updated 

*javax.swing.table.AbstractTableModel.fireTableChanged(TableModelEvent)*

public void fireTableChanged(javax.swing.event.TableModelEvent e)

Forwards the given notification event to all TableModelListeners that 
registered themselves as listeners for this table model. 

    e - the event to be forwarded 

*javax.swing.table.AbstractTableModel.fireTableDataChanged()*

public void fireTableDataChanged()

Notifies all listeners that all cell values in the table's rows may have 
changed. The number of rows may also have changed and the JTable should redraw 
the table from scratch. The structure of the table (as in the order of the 
columns) is assumed to be the same. 


*javax.swing.table.AbstractTableModel.fireTableRowsDeleted(int,int)*

public void fireTableRowsDeleted(
  int firstRow,
  int lastRow)

Notifies all listeners that rows in the range [firstRow, lastRow], inclusive, 
have been deleted. 

    firstRow - the first row 
    lastRow - the last row 

*javax.swing.table.AbstractTableModel.fireTableRowsInserted(int,int)*

public void fireTableRowsInserted(
  int firstRow,
  int lastRow)

Notifies all listeners that rows in the range [firstRow, lastRow], inclusive, 
have been inserted. 

    firstRow - the first row 
    lastRow - the last row 

*javax.swing.table.AbstractTableModel.fireTableRowsUpdated(int,int)*

public void fireTableRowsUpdated(
  int firstRow,
  int lastRow)

Notifies all listeners that rows in the range [firstRow, lastRow], inclusive, 
have been updated. 

    firstRow - the first row 
    lastRow - the last row 

*javax.swing.table.AbstractTableModel.fireTableStructureChanged()*

public void fireTableStructureChanged()

Notifies all listeners that the table's structure has changed. The number of 
columns in the table, and the names and types of the new columns may be 
different from the previous state. If the JTable receives this event and its 
autoCreateColumnsFromModel flag is set it discards any table columns that it 
had and reallocates default columns in the order they appear in the model. This 
is the same as calling setModel(TableModel) on the JTable. 


*javax.swing.table.AbstractTableModel.getColumnClass(int)*

public |java.lang.Class| getColumnClass(int columnIndex)

Returns Object.class regardless of columnIndex. 

    columnIndex - the column being queried 

    Returns: the Object.class 
*javax.swing.table.AbstractTableModel.getColumnName(int)*

public |java.lang.String| getColumnName(int column)

Returns a default name for the column using spreadsheet conventions: A, B, C, 
... Z, AA, AB, etc. If column cannot be found, returns an empty string. 

    column - the column being queried 

    Returns: a string containing the default name of column 
*javax.swing.table.AbstractTableModel.getListeners(Class)*

public |java.util.EventListener| getListeners(java.lang.Class listenerType)

Returns an array of all the objects currently registered as FooListeners upon 
this AbstractTableModel. FooListeners are registered using the addFooListener 
method. 



You can specify the listenerType argument with a class literal, such as 
FooListener.class. For example, you can query a model m for its table model 
listeners with the following code: 

TableModelListener[] tmls = 
(TableModelListener[])(m.getListeners(TableModelListener.class)); 

If no such listeners exist, this method returns an empty array. 

    listenerType - the type of listeners requested; this parameter should specify an interface 
       that descends from java.util.EventListener 

    Returns: an array of all objects registered as FooListeners on this component, or an 
             empty array if no such listeners have been added 
*javax.swing.table.AbstractTableModel.getTableModelListeners()*

public |javax.swing.event.TableModelListener| getTableModelListeners()

Returns an array of all the table model listeners registered on this model. 


    Returns: all of this model's TableModelListeners or an empty array if no table model 
             listeners are currently registered 
*javax.swing.table.AbstractTableModel.isCellEditable(int,int)*

public boolean isCellEditable(
  int rowIndex,
  int columnIndex)

Returns false. This is the default implementation for all cells. 

    rowIndex - the row being queried 
    columnIndex - the column being queried 

    Returns: 
*javax.swing.table.AbstractTableModel.removeTableModelListener(TableModelListener)*

public void removeTableModelListener(javax.swing.event.TableModelListener l)

Removes a listener from the list that's notified each time a change to the data 
model occurs. 

    l - the TableModelListener 

*javax.swing.table.AbstractTableModel.setValueAt(Object,int,int)*

public void setValueAt(
  java.lang.Object aValue,
  int rowIndex,
  int columnIndex)

This empty implementation is provided so users don't have to implement this 
method if their data model is not editable. 

    aValue - value to assign to cell 
    rowIndex - row of cell 
    columnIndex - column of cell 



*javax.management.openmbean.CompositeDataSupport* *CompositeDataSupport* The Com

public class CompositeDataSupport
  extends    |java.lang.Object|
  implements |javax.management.openmbean.CompositeData|
             |java.io.Serializable|

|javax.management.openmbean.CompositeDataSupport_Description|
|javax.management.openmbean.CompositeDataSupport_Fields|
|javax.management.openmbean.CompositeDataSupport_Constructors|
|javax.management.openmbean.CompositeDataSupport_Methods|

================================================================================

*javax.management.openmbean.CompositeDataSupport_Constructors*
|javax.management.openmbean.CompositeDataSupport(CompositeType,Map)|Constructs 
|javax.management.openmbean.CompositeDataSupport(CompositeType,String[],Object[])|

*javax.management.openmbean.CompositeDataSupport_Methods*
|javax.management.openmbean.CompositeDataSupport.containsKey(String)|Returns tr
|javax.management.openmbean.CompositeDataSupport.containsValue(Object)|Returns 
|javax.management.openmbean.CompositeDataSupport.equals(Object)|Compares the sp
|javax.management.openmbean.CompositeDataSupport.get(String)|Returns the value 
|javax.management.openmbean.CompositeDataSupport.getAll(String[])|Returns an ar
|javax.management.openmbean.CompositeDataSupport.getCompositeType()|Returns the
|javax.management.openmbean.CompositeDataSupport.hashCode()|Returns the hash co
|javax.management.openmbean.CompositeDataSupport.toString()|Returns a string re
|javax.management.openmbean.CompositeDataSupport.values()|Returns an unmodifiab

*javax.management.openmbean.CompositeDataSupport_Description*

The CompositeDataSupport class is the open data class which implements the 
CompositeData interface. 


*javax.management.openmbean.CompositeDataSupport(CompositeType,Map)*

public CompositeDataSupport(
  javax.management.openmbean.CompositeType compositeType,
  java.util.Map items)
  throws |javax.management.openmbean.OpenDataException|
         
Constructs a CompositeDataSupport instance with the specified compositeType, 
whose item names and corresponding values are given by the mappings in the map 
items. This constructor converts the keys to a string array and the values to 
an object array and calls 
CompositeDataSupport(javax.management.openmbean.CompositeType, 
java.lang.String[], java.lang.Object[]). 

    compositeType - the composite type of this composite data instance; must not be null. 
    items - the mappings of all the item names to their values; items must contain all the 
       item names defined in compositeType; must not be null or empty. 

*javax.management.openmbean.CompositeDataSupport(CompositeType,String[],Object[])*

public CompositeDataSupport(
  javax.management.openmbean.CompositeType compositeType,
  java.lang.String[] itemNames,
  java.lang.Object[] itemValues)
  throws |javax.management.openmbean.OpenDataException|
         
Constructs a CompositeDataSupport instance with the specified compositeType, 
whose item values are specified by itemValues[], in the same order as in 
itemNames[]. As a CompositeType does not specify any order on its items, the 
itemNames[] parameter is used to specify the order in which the values are 
given in itemValues[]. The items contained in this CompositeDataSupport 
instance are internally stored in a TreeMap, thus sorted in ascending 
lexicographic order of their names, for faster retrieval of individual item 
values. 

The constructor checks that all the constraints listed below for each parameter 
are satisfied, and throws the appropriate exception if they are not. 

    compositeType - the composite type of this composite data instance; must not be null. 
    itemNames - itemNames must list, in any order, all the item names defined in compositeType; 
       the order in which the names are listed, is used to match values in 
       itemValues[]; must not be null or empty. 
    itemValues - the values of the items, listed in the same order as their respective names in 
       itemNames; each item value can be null, but if it is non-null it must be 
       a valid value for the open type defined in compositeType for the 
       corresponding item; must be of the same size as itemNames; must not be 
       null or empty. 

*javax.management.openmbean.CompositeDataSupport.containsKey(String)*

public boolean containsKey(java.lang.String key)

Returns true if and only if this CompositeData instance contains an item whose 
name is key. If key is a null or empty String, this method simply returns 
false. 


*javax.management.openmbean.CompositeDataSupport.containsValue(Object)*

public boolean containsValue(java.lang.Object value)

Returns true if and only if this CompositeData instance contains an item whose 
value is value. 


*javax.management.openmbean.CompositeDataSupport.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares the specified obj parameter with this CompositeDataSupport instance 
for equality. 

Returns true if and only if all of the following statements are true: 

obj is non null, obj also implements the CompositeData interface, their 
composite types are equal their contents, i.e. (name, value) pairs are equal. 

This ensures that this equals method works properly for obj parameters which 
are different implementations of the CompositeData interface, with the 
restrictions mentioned in the equals(|java.util.Collection|) method of the 
java.util.Collection interface. 

    obj - the object to be compared for equality with this CompositeDataSupport instance; 

    Returns: true if the specified object is equal to this CompositeDataSupport instance. 
*javax.management.openmbean.CompositeDataSupport.get(String)*

public |java.lang.Object| get(java.lang.String key)

Returns the value of the item whose name is key. 


*javax.management.openmbean.CompositeDataSupport.getAll(String[])*

public |java.lang.Object| getAll(java.lang.String[] keys)

Returns an array of the values of the items whose names are specified by keys, 
in the same order as keys. 


*javax.management.openmbean.CompositeDataSupport.getCompositeType()*

public |javax.management.openmbean.CompositeType| getCompositeType()

Returns the composite type of this composite data instance. 


*javax.management.openmbean.CompositeDataSupport.hashCode()*

public int hashCode()

Returns the hash code value for this CompositeDataSupport instance. 

The hash code of a CompositeDataSupport instance is the sum of the hash codes 
of all elements of information used in equals comparisons (ie: its composite 
type and all the item values). 

This ensures that t1.equals(t2) implies that t1.hashCode()==t2.hashCode() for 
any two CompositeDataSupport instances t1 and t2, as required by the general 
contract of the method Object.hashCode()(|java.lang.Object|) . 

However, note that another instance of a class implementing the CompositeData 
interface may be equal to this CompositeDataSupport instance as defined by 
(|javax.management.openmbean.CompositeDataSupport|) , but may have a different 
hash code if it is calculated differently. 


    Returns: the hash code value for this CompositeDataSupport instance 
*javax.management.openmbean.CompositeDataSupport.toString()*

public |java.lang.String| toString()

Returns a string representation of this CompositeDataSupport instance. 

The string representation consists of the name of this class (ie 
javax.management.openmbean.CompositeDataSupport), the string representation of 
the composite type of this instance, and the string representation of the 
contents (ie list the itemName=itemValue mappings). 


    Returns: a string representation of this CompositeDataSupport instance 
*javax.management.openmbean.CompositeDataSupport.values()*

public |java.util.Collection| values()

Returns an unmodifiable Collection view of the item values contained in this 
CompositeData instance. The returned collection's iterator will return the 
values in the ascending lexicographic order of the corresponding item names. 




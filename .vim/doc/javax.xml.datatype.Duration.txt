*javax.xml.datatype.Duration* *Duration* Immutable representation of a time span as defined in
 the W3C XML Schema 1.0 specification.

public abstract class Duration
  extends    |java.lang.Object|

|javax.xml.datatype.Duration_Description|
|javax.xml.datatype.Duration_Fields|
|javax.xml.datatype.Duration_Constructors|
|javax.xml.datatype.Duration_Methods|

====================================================================================================================================================================================

*javax.xml.datatype.Duration_Constructors*
|javax.xml.datatype.Duration()|

*javax.xml.datatype.Duration_Methods*
|javax.xml.datatype.Duration.add(Duration)|Computes a new duration whose value is this+rhs.
|javax.xml.datatype.Duration.addTo(Calendar)|Adds this duration to aCalendarobject.
|javax.xml.datatype.Duration.addTo(Date)|Adds this duration to aDateobject.
|javax.xml.datatype.Duration.compare(Duration)|Partial order relation comparison with this Duration instance.
|javax.xml.datatype.Duration.equals(Object)|Checks if this duration object has the same duration  as another Duration object.
|javax.xml.datatype.Duration.getDays()|Obtains the value of the DAYS field as an integer value,  or 0 if not present.
|javax.xml.datatype.Duration.getField(DatatypeConstants.Field)|Gets the value of a field.
|javax.xml.datatype.Duration.getHours()|Obtains the value of the HOURS field as an integer value,  or 0 if not present.
|javax.xml.datatype.Duration.getMinutes()|Obtains the value of the MINUTES field as an integer value,  or 0 if not present.
|javax.xml.datatype.Duration.getMonths()|Obtains the value of the MONTHS field as an integer value,  or 0 if not present.
|javax.xml.datatype.Duration.getSeconds()|Obtains the value of the SECONDS field as an integer value,  or 0 if not present.
|javax.xml.datatype.Duration.getSign()|Returns the sign of this duration in -1,0, or 1.
|javax.xml.datatype.Duration.getTimeInMillis(Calendar)|Returns the length of the duration in milli-seconds.
|javax.xml.datatype.Duration.getTimeInMillis(Date)|Returns the length of the duration in milli-seconds.
|javax.xml.datatype.Duration.getXMLSchemaType()|Return the name of the XML Schema date/time type that this instance   maps to.
|javax.xml.datatype.Duration.getYears()|Get the years value of this Duration as an int or 0 if not present.
|javax.xml.datatype.Duration.hashCode()|Returns a hash code consistent with the definition of the equals method.
|javax.xml.datatype.Duration.isLongerThan(Duration)|Checks if this duration object is strictly longer than  another Duration object.
|javax.xml.datatype.Duration.isSet(DatatypeConstants.Field)|Checks if a field is set.
|javax.xml.datatype.Duration.isShorterThan(Duration)|Checks if this duration object is strictly shorter than  another Duration object.
|javax.xml.datatype.Duration.multiply(BigDecimal)|Computes a new duration whose value is factor times  longer than the value of this duration.
|javax.xml.datatype.Duration.multiply(int)|Computes a new duration whose value is factor times  longer than the value of this duration.
|javax.xml.datatype.Duration.negate()|Returns a new Duration object whose  value is -this.
|javax.xml.datatype.Duration.normalizeWith(Calendar)|Converts the years and months fields into the days field  by using a specific time instant as the reference point.
|javax.xml.datatype.Duration.subtract(Duration)|Computes a new duration whose value is this-rhs.
|javax.xml.datatype.Duration.toString()|Returns a String representation of this Duration Object.

*javax.xml.datatype.Duration_Description*

Immutable representation of a time span as defined in the W3C XML Schema 1.0 specification. 

A Duration object represents a period of Gregorian time, which consists of six fields (years, months, days, hours, minutes, and seconds) plus a sign (+/-) field. 

The first five fields have non-negative (>=0) integers or null (which represents that the field is not set), and the seconds field has a non-negative decimal or null. A negative 
sign indicates a negative duration. 

This class provides a number of methods that make it easy to use for the duration datatype of XML Schema 1.0 with the errata. 

Order relationship Duration objects only have partial order, where two values A and B maybe either: 

A<B (A is shorter than B) A>B (A is longer than B) A==B (A and B are of the same duration) A<>B (Comparison between A and B is indeterminate) 

* For example, 30 days cannot be meaningfully compared to one month. The (|javax.xml.datatype.Duration|) method implements this relationship. 

See the (|javax.xml.datatype.Duration|) method for details about the order relationship among Duration objects. 

Operations over Duration This class provides a set of basic arithmetic operations, such as addition, subtraction and multiplication. Because durations don't have total order, an 
operation could fail for some combinations of operations. For example, you cannot subtract 15 days from 1 month. See the javadoc of those methods for detailed conditions where 
this could happen. 

Also, division of a duration by a number is not provided because the Duration class can only deal with finite precision decimal numbers. For example, one cannot represent 1 sec 
divided by 3. 

However, you could substitute a division by 3 with multiplying by numbers such as 0.3 or 0.333. 

Range of allowed values 

Because some operations of Duration rely on (|java.util.Calendar|) even though (|javax.xml.datatype.Duration|) can hold very large or very small values, some of the methods may 
not work correctly on such Durations. The impacted methods document their dependency on (|java.util.Calendar|) . 



*javax.xml.datatype.Duration()*

public Duration()




*javax.xml.datatype.Duration.add(Duration)*

public abstract |javax.xml.datatype.Duration| add(javax.xml.datatype.Duration rhs)

Computes a new duration whose value is this+rhs. 

For example, 

"1 day" + "-3 days" = "-2 days" "1 year" + "1 day" = "1 year and 1 day" "-(1 hour,50 minutes)" + "-20 minutes" = "-(1 hours,70 minutes)" "15 hours" + "-3 days" = "-(2 days,9 
hours)" "1 year" + "-1 day" = IllegalStateException 

Since there's no way to meaningfully subtract 1 day from 1 month, there are cases where the operation fails in (|java.lang.IllegalStateException|) . 

Formally, the computation is defined as follows. 

Firstly, we can assume that two Durations to be added are both positive without losing generality (i.e., (-X)+Y=Y-X, X+(-Y)=X-Y, (-X)+(-Y)=-(X+Y)) 

Addition of two positive Durations are simply defined as field by field addition where missing fields are treated as 0. 

A field of the resulting Duration will be unset if and only if respective fields of two input Durations are unset. 

Note that lhs.add(rhs) will be always successful if lhs.signum()*rhs.signum()!=-1 or both of them are normalized. 


    rhs - Duration to add to this Duration 

    Returns: non-null valid Duration object. 

*javax.xml.datatype.Duration.addTo(Calendar)*

public abstract void addTo(java.util.Calendar calendar)

Adds this duration to a (|java.util.Calendar|) object. 

Calls (|java.util.Calendar|) in the order of YEARS, MONTHS, DAYS, HOURS, MINUTES, SECONDS, and MILLISECONDS if those fields are present. Because the (|java.util.Calendar|) class 
uses int to hold values, there are cases where this method won't work correctly (for example if values of fields exceed the range of int.) 



Also, since this duration class is a Gregorian duration, this method will not work correctly if the given (|java.util.Calendar|) object is based on some other calendar systems. 



Any fractional parts of this Duration object beyond milliseconds will be simply ignored. For example, if this duration is "P1.23456S", then 1 is added to SECONDS, 234 is added to 
MILLISECONDS, and the rest will be unused. 



Note that because (|java.util.Calendar|) is using int, Duration with values beyond the range of int in its fields will cause overflow/underflow to the given (|java.util.Calendar|) 
. (|javax.xml.datatype.XMLGregorianCalendar|) provides the same basic operation as this method while avoiding the overflow/underflow issues. 


    calendar - A calendar object whose value will be modified. 

*javax.xml.datatype.Duration.addTo(Date)*

public void addTo(java.util.Date date)

Adds this duration to a (|java.util.Date|) object. 

The given date is first converted into a (|java.util.GregorianCalendar|) , then the duration is added exactly like the (|javax.xml.datatype.Duration|) method. 

The updated time instant is then converted back into a (|java.util.Date|) object and used to update the given (|java.util.Date|) object. 

This somewhat redundant computation is necessary to unambiguously determine the duration of months and years. 


    date - A date object whose value will be modified. 

*javax.xml.datatype.Duration.compare(Duration)*

public abstract int compare(javax.xml.datatype.Duration duration)

Partial order relation comparison with this Duration instance. 

Comparison result must be in accordance with W3C XML Schema 1.0 Part 2, Section 3.2.7.6.2, Order relation on duration. 

Return: 

(|javax.xml.datatype.DatatypeConstants|) if this Duration is shorter than duration parameter (|javax.xml.datatype.DatatypeConstants|) if this Duration is equal to duration 
parameter (|javax.xml.datatype.DatatypeConstants|) if this Duration is longer than duration parameter (|javax.xml.datatype.DatatypeConstants|) if a conclusive partial order 
relation cannot be determined 


    duration - to compare 

    Returns: the relationship between this Durationand duration parameter as {@link DatatypeConstants#LESSER}, {@link DatatypeConstants#EQUAL}, {@link DatatypeConstants#GREATER} or {@link 
             DatatypeConstants#INDETERMINATE}. 

*javax.xml.datatype.Duration.equals(Object)*

public boolean equals(java.lang.Object duration)

Checks if this duration object has the same duration as another Duration object. 

For example, "P1D" (1 day) is equal to "PT24H" (24 hours). 

Duration X is equal to Y if and only if time instant t+X and t+Y are the same for all the test time instants specified in the section 3.2.6.2 of the XML Schema 1.0 specification. 

Note that there are cases where two Durations are "incomparable" to each other, like one month and 30 days. For example, 

!new Duration("P1M").isShorterThan(new Duration("P30D")) !new Duration("P1M").isLongerThan(new Duration("P30D")) !new Duration("P1M").equals(new Duration("P30D")) 


    duration - A non-null valid Duration object. 

    Returns: true if this duration is the same length as duration. false if duration is not a Duration object or its length is different from this duration. 

*javax.xml.datatype.Duration.getDays()*

public int getDays()

Obtains the value of the DAYS field as an integer value, or 0 if not present. 

This method works just like (|javax.xml.datatype.Duration|) except that this method works on the DAYS field. 



    Returns: Days of this Duration. 

*javax.xml.datatype.Duration.getField(DatatypeConstants.Field)*

public abstract |java.lang.Number| getField(javax.xml.datatype.DatatypeConstants.Field field)

Gets the value of a field. 

Fields of a duration object may contain arbitrary large value. Therefore this method is designed to return a (|java.lang.Number|) object. 

In case of YEARS, MONTHS, DAYS, HOURS, and MINUTES, the returned number will be a non-negative integer. In case of seconds, the returned number may be a non-negative decimal 
value. 


    field - one of the six Field constants (YEARS,MONTHS,DAYS,HOURS, MINUTES, or SECONDS.) 

    Returns: If the specified field is present, this method returns a non-null non-negative {@link Number} object that represents its value. If it is not present, return null. For YEARS, 
             MONTHS, DAYS, HOURS, and MINUTES, this method returns a {@link java.math.BigInteger} object. For SECONDS, this method returns a {@link java.math.BigDecimal}. 

*javax.xml.datatype.Duration.getHours()*

public int getHours()

Obtains the value of the HOURS field as an integer value, or 0 if not present. 

This method works just like (|javax.xml.datatype.Duration|) except that this method works on the HOURS field. 



    Returns: Hours of this Duration. 

*javax.xml.datatype.Duration.getMinutes()*

public int getMinutes()

Obtains the value of the MINUTES field as an integer value, or 0 if not present. 

This method works just like (|javax.xml.datatype.Duration|) except that this method works on the MINUTES field. 



    Returns: Minutes of this Duration. 

*javax.xml.datatype.Duration.getMonths()*

public int getMonths()

Obtains the value of the MONTHS field as an integer value, or 0 if not present. 

This method works just like (|javax.xml.datatype.Duration|) except that this method works on the MONTHS field. 



    Returns: Months of this Duration. 

*javax.xml.datatype.Duration.getSeconds()*

public int getSeconds()

Obtains the value of the SECONDS field as an integer value, or 0 if not present. 

This method works just like (|javax.xml.datatype.Duration|) except that this method works on the SECONDS field. 



    Returns: seconds in the integer value. The fraction of seconds will be discarded (for example, if the actual value is 2.5, this method returns 2) 

*javax.xml.datatype.Duration.getSign()*

public abstract int getSign()

Returns the sign of this duration in -1,0, or 1. 



    Returns: -1 if this duration is negative, 0 if the duration is zero, and 1 if the duration is positive. 

*javax.xml.datatype.Duration.getTimeInMillis(Calendar)*

public long getTimeInMillis(java.util.Calendar startInstant)

Returns the length of the duration in milli-seconds. 

If the seconds field carries more digits than milli-second order, those will be simply discarded (or in other words, rounded to zero.) For example, for any Calendar value x, 

new Duration("PT10.00099S").getTimeInMills(x) == 10000. new Duration("-PT10.00099S").getTimeInMills(x) == -10000. 



Note that this method uses the (|javax.xml.datatype.Duration|) method, which may work incorrectly with Duration objects with very large values in its fields. See the 
(|javax.xml.datatype.Duration|) method for details. 


    startInstant - The length of a month/year varies. The startInstant is used to disambiguate this variance. Specifically, this method returns the difference between startInstant and 
       startInstant+duration 

    Returns: milliseconds between startInstant and startInstant plus this Duration 

*javax.xml.datatype.Duration.getTimeInMillis(Date)*

public long getTimeInMillis(java.util.Date startInstant)

Returns the length of the duration in milli-seconds. 

If the seconds field carries more digits than milli-second order, those will be simply discarded (or in other words, rounded to zero.) For example, for any Date value x, 

new Duration("PT10.00099S").getTimeInMills(x) == 10000. new Duration("-PT10.00099S").getTimeInMills(x) == -10000. 



Note that this method uses the (|javax.xml.datatype.Duration|) method, which may work incorrectly with Duration objects with very large values in its fields. See the 
(|javax.xml.datatype.Duration|) method for details. 


    startInstant - The length of a month/year varies. The startInstant is used to disambiguate this variance. Specifically, this method returns the difference between startInstant and 
       startInstant+duration. 

    Returns: milliseconds between startInstant and startInstant plus this Duration 

*javax.xml.datatype.Duration.getXMLSchemaType()*

public |javax.xml.namespace.QName| getXMLSchemaType()

Return the name of the XML Schema date/time type that this instance maps to. Type is computed based on fields that are set, i.e. (|javax.xml.datatype.Duration|) == true. 





Required fields for XML Schema 1.0 Date/Time Datatypes. (timezone is optional for all date/time datatypes) 





Datatype year month day hour minute second 

(|javax.xml.datatype.DatatypeConstants|) X X X X X X 

(|javax.xml.datatype.DatatypeConstants|) 

X X X X 

(|javax.xml.datatype.DatatypeConstants|) X X 









    Returns: one of the following constants: {@link DatatypeConstants#DURATION}, {@link DatatypeConstants#DURATION_DAYTIME} or {@link DatatypeConstants#DURATION_YEARMONTH}. 

*javax.xml.datatype.Duration.getYears()*

public int getYears()

Get the years value of this Duration as an int or 0 if not present. 

getYears() is a convenience method for getField(DatatypeConstants.YEARS)(|javax.xml.datatype.Duration|) . 

As the return value is an int, an incorrect value will be returned for Durations with years that go beyond the range of an int. Use 
getField(DatatypeConstants.YEARS)(|javax.xml.datatype.Duration|) to avoid possible loss of precision. 



    Returns: If the years field is present, return its value as an int, else return 0. 

*javax.xml.datatype.Duration.hashCode()*

public abstract int hashCode()

Returns a hash code consistent with the definition of the equals method. 



*javax.xml.datatype.Duration.isLongerThan(Duration)*

public boolean isLongerThan(javax.xml.datatype.Duration duration)

Checks if this duration object is strictly longer than another Duration object. 

Duration X is "longer" than Y if and only if X>Y as defined in the section 3.2.6.2 of the XML Schema 1.0 specification. 

For example, "P1D" (one day) > "PT12H" (12 hours) and "P2Y" (two years) > "P23M" (23 months). 


    duration - Duration to test this Duration against. 

    Returns: true if the duration represented by this object is longer than the given duration. false otherwise. 

*javax.xml.datatype.Duration.isSet(DatatypeConstants.Field)*

public abstract boolean isSet(javax.xml.datatype.DatatypeConstants.Field field)

Checks if a field is set. 

A field of a duration object may or may not be present. This method can be used to test if a field is present. 


    field - one of the six Field constants (YEARS,MONTHS,DAYS,HOURS, MINUTES, or SECONDS.) 

    Returns: true if the field is present. false if not. 

*javax.xml.datatype.Duration.isShorterThan(Duration)*

public boolean isShorterThan(javax.xml.datatype.Duration duration)

Checks if this duration object is strictly shorter than another Duration object. 


    duration - Duration to test this Duration against. 

    Returns: true if duration parameter is shorter than this Duration, else false. 

*javax.xml.datatype.Duration.multiply(BigDecimal)*

public abstract |javax.xml.datatype.Duration| multiply(java.math.BigDecimal factor)

Computes a new duration whose value is factor times longer than the value of this duration. 

For example, 

"P1M" (1 month) * "12" = "P12M" (12 months) "PT1M" (1 min) * "0.3" = "PT18S" (18 seconds) "P1M" (1 month) * "1.5" = IllegalStateException 



Since the Duration class is immutable, this method doesn't change the value of this object. It simply computes a new Duration object and returns it. 

The operation will be performed field by field with the precision of (|java.math.BigDecimal|) . Since all the fields except seconds are restricted to hold integers, any fraction 
produced by the computation will be carried down toward the next lower unit. For example, if you multiply "P1D" (1 day) with "0.5", then it will be 0.5 day, which will be carried 
down to "PT12H" (12 hours). When fractions of month cannot be meaningfully carried down to days, or year to months, this will cause an (|java.lang.IllegalStateException|) to be 
thrown. For example if you multiple one month by 0.5. 

To avoid (|java.lang.IllegalStateException|) , use the (|javax.xml.datatype.Duration|) method to remove the years and months fields. 


    factor - to multiply by 

    Returns: returns a non-null valid Duration object 

*javax.xml.datatype.Duration.multiply(int)*

public |javax.xml.datatype.Duration| multiply(int factor)

Computes a new duration whose value is factor times longer than the value of this duration. 

This method is provided for the convenience. It is functionally equivalent to the following code: 

multiply(new BigDecimal(String.valueOf(factor))) 


    factor - Factor times longer of new Duration to create. 

    Returns: New Duration that is factortimes longer than this Duration. 

*javax.xml.datatype.Duration.negate()*

public abstract |javax.xml.datatype.Duration| negate()

Returns a new Duration object whose value is -this. 

Since the Duration class is immutable, this method doesn't change the value of this object. It simply computes a new Duration object and returns it. 



    Returns: always return a non-null valid Duration object. 

*javax.xml.datatype.Duration.normalizeWith(Calendar)*

public abstract |javax.xml.datatype.Duration| normalizeWith(java.util.Calendar startTimeInstant)

Converts the years and months fields into the days field by using a specific time instant as the reference point. 

For example, duration of one month normalizes to 31 days given the start time instance "July 8th 2003, 17:40:32". 

Formally, the computation is done as follows: 

the given Calendar object is cloned the years, months and days fields will be added to the (|java.util.Calendar|) object by using the (|java.util.Calendar|) method the difference 
between the two Calendars in computed in milliseconds and converted to days, if a remainder occurs due to Daylight Savings Time, it is discarded the computed days, along with the 
hours, minutes and seconds fields of this duration object is used to construct a new Duration object. 

Note that since the Calendar class uses int to hold the value of year and month, this method may produce an unexpected result if this duration object holds a very large value in 
the years or months fields. 


    startTimeInstant - Calendar reference point. 

    Returns: Duration of years and months of this Duration as days. 

*javax.xml.datatype.Duration.subtract(Duration)*

public |javax.xml.datatype.Duration| subtract(javax.xml.datatype.Duration rhs)

Computes a new duration whose value is this-rhs. 

For example: 

"1 day" - "-3 days" = "4 days" "1 year" - "1 day" = IllegalStateException "-(1 hour,50 minutes)" - "-20 minutes" = "-(1hours,30 minutes)" "15 hours" - "-3 days" = "3 days and 15 
hours" "1 year" - "-1 day" = "1 year and 1 day" 

Since there's no way to meaningfully subtract 1 day from 1 month, there are cases where the operation fails in (|java.lang.IllegalStateException|) . 

Formally the computation is defined as follows. First, we can assume that two Durations are both positive without losing generality. (i.e., (-X)-Y=-(X+Y), X-(-Y)=X+Y, 
(-X)-(-Y)=-(X-Y)) 

Then two durations are subtracted field by field. If the sign of any non-zero field F is different from the sign of the most significant field, 1 (if F is negative) or -1 
(otherwise) will be borrowed from the next bigger unit of F. 

This process is repeated until all the non-zero fields have the same sign. 

If a borrow occurs in the days field (in other words, if the computation needs to borrow 1 or -1 month to compensate days), then the computation fails by throwing an 
(|java.lang.IllegalStateException|) . 


    rhs - Duration to subtract from this Duration. 

    Returns: New Duration created from subtracting rhs from this Duration. 

*javax.xml.datatype.Duration.toString()*

public |java.lang.String| toString()

Returns a String representation of this Duration Object. 

The result is formatted according to the XML Schema 1.0 spec and can be always parsed back later into the equivalent Duration Object by (|javax.xml.datatype.DatatypeFactory|) . 

Formally, the following holds for any Duration Object x: 

new Duration(x.toString()).equals(x) 



    Returns: A non-null valid String representation of this Duration. 



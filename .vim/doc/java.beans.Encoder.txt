*java.beans.Encoder* *Encoder* An Encoder is a class which can be used to create

public class Encoder
  extends    |java.lang.Object|

|java.beans.Encoder_Description|
|java.beans.Encoder_Fields|
|java.beans.Encoder_Constructors|
|java.beans.Encoder_Methods|

================================================================================

*java.beans.Encoder_Constructors*
|java.beans.Encoder()|

*java.beans.Encoder_Methods*
|java.beans.Encoder.get(Object)|Returns a tentative value for oldInstance in   
|java.beans.Encoder.getExceptionListener()|Gets the exception handler for this 
|java.beans.Encoder.getPersistenceDelegate(Class)|Returns the persistence deleg
|java.beans.Encoder.remove(Object)|Removes the entry for this instance, returni
|java.beans.Encoder.setExceptionListener(ExceptionListener)|Sets the exception 
|java.beans.Encoder.setPersistenceDelegate(Class,PersistenceDelegate)|Sets the 
|java.beans.Encoder.writeExpression(Expression)|The implementation first checks
|java.beans.Encoder.writeObject(Object)|Write the specified object to the outpu
|java.beans.Encoder.writeStatement(Statement)|Writes statement oldStm to the st

*java.beans.Encoder_Description*

An Encoder is a class which can be used to create files or streams that encode 
the state of a collection of JavaBeans in terms of their public APIs. The 
Encoder, in conjunction with its persistence delegates, is responsible for 
breaking the object graph down into a series of Statementss and Expressions 
which can be used to create it. A subclass typically provides a syntax for 
these expressions using some human readable form - like Java source code or 
XML. 


*java.beans.Encoder()*

public Encoder()




*java.beans.Encoder.get(Object)*

public |java.lang.Object| get(java.lang.Object oldInstance)

Returns a tentative value for oldInstance in the environment created by this 
stream. A persistence delegate can use its mutatesTo method to determine 
whether this value may be initialized to form the equivalent object at the 
output or whether a new object must be instantiated afresh. If the stream has 
not yet seen this value, null is returned. 

    oldInstance - The instance to be looked up. 

    Returns: The object, null if the object has not been seen before. 
*java.beans.Encoder.getExceptionListener()*

public |java.beans.ExceptionListener| getExceptionListener()

Gets the exception handler for this stream. 


    Returns: The exception handler for this stream; Will return the default exception 
             listener if this has not explicitly been set. 
*java.beans.Encoder.getPersistenceDelegate(Class)*

public |java.beans.PersistenceDelegate| getPersistenceDelegate(java.lang.Class type)

Returns the persistence delegate for the given type. The persistence delegate 
is calculated by applying the following of rules in order: 

If the type is an array, an internal persistence delegate is returned which 
will instantiate an array of the appropriate type and length, initializing each 
of its elements as if they are properties. 

If the type is a proxy, an internal persistence delegate is returned which will 
instantiate a new proxy instance using the static "newProxyInstance" method 
defined in the Proxy class. 

If the BeanInfo for this type has a BeanDescriptor which defined a 
"persistenceDelegate" property, this value is returned. 

In all other cases the default persistence delegate is returned. The default 
persistence delegate assumes the type is a JavaBean, implying that it has a 
nullary constructor and that its state may be characterized by the matching 
pairs of "setter" and "getter" methods returned by the Introspector. 

    type - The type of the object. 

    Returns: The persistence delegate for this type of object. 
*java.beans.Encoder.remove(Object)*

public |java.lang.Object| remove(java.lang.Object oldInstance)

Removes the entry for this instance, returning the old entry. 

    oldInstance - The entry that should be removed. 

    Returns: The entry that was removed. 
*java.beans.Encoder.setExceptionListener(ExceptionListener)*

public void setExceptionListener(java.beans.ExceptionListener exceptionListener)

Sets the exception handler for this stream to exceptionListener. The exception 
handler is notified when this stream catches recoverable exceptions. 

    exceptionListener - The exception handler for this stream; if null the default exception listener 
       will be used. 

*java.beans.Encoder.setPersistenceDelegate(Class,PersistenceDelegate)*

public void setPersistenceDelegate(
  java.lang.Class type,
  java.beans.PersistenceDelegate persistenceDelegate)

Sets the persistence delegate associated with this type to persistenceDelegate. 

    type - The class of objects that persistenceDelegate applies to. 
    persistenceDelegate - The persistence delegate for instances of type. 

*java.beans.Encoder.writeExpression(Expression)*

public void writeExpression(java.beans.Expression oldExp)

The implementation first checks to see if an expression with this value has 
already been written. If not, the expression is cloned, using the same 
procedure as writeStatement, and the value of this expression is reconciled 
with the value of the cloned expression by calling writeObject. 

    oldExp - The expression to be written to the stream. 

*java.beans.Encoder.writeObject(Object)*

protected void writeObject(java.lang.Object o)

Write the specified object to the output stream. The serialized form will 
denote a series of expressions, the combined effect of which will create an 
equivalent object when the input stream is read. By default, the object is 
assumed to be a JavaBean with a nullary constructor, whose state is defined by 
the matching pairs of "setter" and "getter" methods returned by the 
Introspector. 

    o - The object to be written to the stream. 

*java.beans.Encoder.writeStatement(Statement)*

public void writeStatement(java.beans.Statement oldStm)

Writes statement oldStm to the stream. The oldStm should be written entirely in 
terms of the callers environment, i.e. the target and all arguments should be 
part of the object graph being written. These expressions represent a series of 
"what happened" expressions which tell the output stream how to produce an 
object graph like the original. 

The implementation of this method will produce a second expression to represent 
the same expression in an environment that will exist when the stream is read. 
This is achieved simply by calling writeObject on the target and all the 
arguments and building a new expression with the results. 

    oldStm - The expression to be written to the stream. 



*java.awt.image.FilteredImageSource* *FilteredImageSource* This class is an implementation of the ImageProducer interface which
 takes an existing image and a filter object and use

public class FilteredImageSource
  extends    |java.lang.Object|
  implements |java.awt.image.ImageProducer|

|java.awt.image.FilteredImageSource_Description|
|java.awt.image.FilteredImageSource_Fields|
|java.awt.image.FilteredImageSource_Constructors|
|java.awt.image.FilteredImageSource_Methods|

====================================================================================================================================================================================

*java.awt.image.FilteredImageSource_Constructors*
|java.awt.image.FilteredImageSource(ImageProducer,ImageFilter)|Constructs an ImageProducer object from an existing ImageProducer  and a filter object.

*java.awt.image.FilteredImageSource_Methods*
|java.awt.image.FilteredImageSource.addConsumer(ImageConsumer)|Adds the specified ImageConsumer   to the list of consumers interested in data for the filtered image.
|java.awt.image.FilteredImageSource.isConsumer(ImageConsumer)|Determines whether an ImageConsumer is on the list of consumers   currently interested in data for this image.
|java.awt.image.FilteredImageSource.removeConsumer(ImageConsumer)|Removes an ImageConsumer from the list of consumers interested in  data for this image.
|java.awt.image.FilteredImageSource.requestTopDownLeftRightResend(ImageConsumer)|Requests that a given ImageConsumer have the image data delivered  one more time in top-down, left
|java.awt.image.FilteredImageSource.startProduction(ImageConsumer)|Starts production of the filtered image.

*java.awt.image.FilteredImageSource_Description*

This class is an implementation of the ImageProducer interface which takes an existing image and a filter object and uses them to produce image data for a new filtered version of 
the original image. Here is an example which filters an image by swapping the red and blue compents: 

Image src = getImage("doc:///demo/images/duke/T1.gif"); ImageFilter colorfilter = new RedBlueSwapFilter(); Image img = createImage(new FilteredImageSource(src.getSource(), 
colorfilter)); 





*java.awt.image.FilteredImageSource(ImageProducer,ImageFilter)*

public FilteredImageSource(
  java.awt.image.ImageProducer orig,
  java.awt.image.ImageFilter imgf)

Constructs an ImageProducer object from an existing ImageProducer and a filter object. 

    orig - the specified ImageProducer 
    imgf - the specified ImageFilter 

*java.awt.image.FilteredImageSource.addConsumer(ImageConsumer)*

public synchronized void addConsumer(java.awt.image.ImageConsumer ic)

Adds the specified ImageConsumer to the list of consumers interested in data for the filtered image. An instance of the original ImageFilter is created (using the filter's 
getFilterInstance method) to manipulate the image data for the specified ImageConsumer. The newly created filter instance is then passed to the addConsumer method of the original 
ImageProducer. 

This method is public as a side effect of this class implementing the ImageProducer interface. It should not be called from user code, and its behavior if called from user code is 
unspecified. 


    ic - the consumer for the filtered image 

*java.awt.image.FilteredImageSource.isConsumer(ImageConsumer)*

public synchronized boolean isConsumer(java.awt.image.ImageConsumer ic)

Determines whether an ImageConsumer is on the list of consumers currently interested in data for this image. 

This method is public as a side effect of this class implementing the ImageProducer interface. It should not be called from user code, and its behavior if called from user code is 
unspecified. 


    ic - the specified ImageConsumer 

    Returns: true if the ImageConsumer is on the list; false otherwise 

*java.awt.image.FilteredImageSource.removeConsumer(ImageConsumer)*

public synchronized void removeConsumer(java.awt.image.ImageConsumer ic)

Removes an ImageConsumer from the list of consumers interested in data for this image. 

This method is public as a side effect of this class implementing the ImageProducer interface. It should not be called from user code, and its behavior if called from user code is 
unspecified. 



*java.awt.image.FilteredImageSource.requestTopDownLeftRightResend(ImageConsumer)*

public void requestTopDownLeftRightResend(java.awt.image.ImageConsumer ic)

Requests that a given ImageConsumer have the image data delivered one more time in top-down, left-right order. The request is handed to the ImageFilter for further processing, 
since the ability to preserve the pixel ordering depends on the filter. 

This method is public as a side effect of this class implementing the ImageProducer interface. It should not be called from user code, and its behavior if called from user code is 
unspecified. 



*java.awt.image.FilteredImageSource.startProduction(ImageConsumer)*

public void startProduction(java.awt.image.ImageConsumer ic)

Starts production of the filtered image. If the specified ImageConsumer isn't already a consumer of the filtered image, an instance of the original ImageFilter is created (using 
the filter's getFilterInstance method) to manipulate the image data for the ImageConsumer. The filter instance for the ImageConsumer is then passed to the startProduction method 
of the original ImageProducer. 

This method is public as a side effect of this class implementing the ImageProducer interface. It should not be called from user code, and its behavior if called from user code is 
unspecified. 


    ic - the consumer for the filtered image 



*java.util.concurrent.atomic.AtomicLongFieldUpdater* *AtomicLongFieldUpdater* A 

public abstract class AtomicLongFieldUpdater
  extends    |java.lang.Object|

|java.util.concurrent.atomic.AtomicLongFieldUpdater_Description|
|java.util.concurrent.atomic.AtomicLongFieldUpdater_Fields|
|java.util.concurrent.atomic.AtomicLongFieldUpdater_Constructors|
|java.util.concurrent.atomic.AtomicLongFieldUpdater_Methods|

================================================================================

*java.util.concurrent.atomic.AtomicLongFieldUpdater_Constructors*
|java.util.concurrent.atomic.AtomicLongFieldUpdater()|Protected do-nothing cons

*java.util.concurrent.atomic.AtomicLongFieldUpdater_Methods*
|java.util.concurrent.atomic.AtomicLongFieldUpdater.addAndGet(T,long)|Atomicall
|java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(T,long,long)|
|java.util.concurrent.atomic.AtomicLongFieldUpdater.decrementAndGet(T)|Atomical
|java.util.concurrent.atomic.AtomicLongFieldUpdater.get(T)|Get the current valu
|java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAdd(T,long)|Atomicall
|java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndDecrement(T)|Atomical
|java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndIncrement(T)|Atomical
|java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndSet(T,long)|Set to th
|java.util.concurrent.atomic.AtomicLongFieldUpdater.incrementAndGet(T)|Atomical
|java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater(Class,String)|Cr
|java.util.concurrent.atomic.AtomicLongFieldUpdater.set(T,long)|Set the field o
|java.util.concurrent.atomic.AtomicLongFieldUpdater.weakCompareAndSet(T,long,long)|

*java.util.concurrent.atomic.AtomicLongFieldUpdater_Description*

A reflection-based utility that enables atomic updates to designated volatile 
long fields of designated classes. This class is designed for use in atomic 
data structures in which several fields of the same node are independently 
subject to atomic updates. 

Note that the guarantees of the compareAndSet method in this class are weaker 
than in other atomic classes. Because this class cannot ensure that all uses of 
the field are appropriate for purposes of atomic access, it can guarantee 
atomicity and volatile semantics only with respect to other invocations of 
compareAndSet and set. 


*java.util.concurrent.atomic.AtomicLongFieldUpdater()*

protected AtomicLongFieldUpdater()

Protected do-nothing constructor for use by subclasses. 


*java.util.concurrent.atomic.AtomicLongFieldUpdater.addAndGet(T,long)*

public long addAndGet(
  java.lang.Object obj,
  long delta)

Atomically add the given value to current value. 

    obj - An object whose field to get and set 
    delta - the value to add 

    Returns: the updated value; 
*java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(T,long,long)*

public abstract boolean compareAndSet(
  java.lang.Object obj,
  long expect,
  long update)

Atomically set the value of the field of the given object managed by this 
Updater to the given updated value if the current value == the expected value. 
This method is guaranteed to be atomic with respect to other calls to 
compareAndSet and set, but not necessarily with respect to other changes in the 
field. 

    obj - An object whose field to conditionally set 
    expect - the expected value 
    update - the new value 

    Returns: true if successful. 
*java.util.concurrent.atomic.AtomicLongFieldUpdater.decrementAndGet(T)*

public long decrementAndGet(java.lang.Object obj)

Atomically decrement by one the current value. 

    obj - An object whose field to get and set 

    Returns: the updated value; 
*java.util.concurrent.atomic.AtomicLongFieldUpdater.get(T)*

public abstract long get(java.lang.Object obj)

Get the current value held in the field by the given object. 

    obj - An object whose field to get 

    Returns: the current value 
*java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAdd(T,long)*

public long getAndAdd(
  java.lang.Object obj,
  long delta)

Atomically add the given value to current value. 

    obj - An object whose field to get and set 
    delta - the value to add 

    Returns: the previous value; 
*java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndDecrement(T)*

public long getAndDecrement(java.lang.Object obj)

Atomically decrement by one the current value. 

    obj - An object whose field to get and set 

    Returns: the previous value; 
*java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndIncrement(T)*

public long getAndIncrement(java.lang.Object obj)

Atomically increment by one the current value. 

    obj - An object whose field to get and set 

    Returns: the previous value; 
*java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndSet(T,long)*

public long getAndSet(
  java.lang.Object obj,
  long newValue)

Set to the given value and return the old value. 

    obj - An object whose field to get and set 
    newValue - the new value 

    Returns: the previous value 
*java.util.concurrent.atomic.AtomicLongFieldUpdater.incrementAndGet(T)*

public long incrementAndGet(java.lang.Object obj)

Atomically increment by one the current value. 

    obj - An object whose field to get and set 

    Returns: the updated value; 
*java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater(Class,String)*

public static |java.util.concurrent.atomic.AtomicLongFieldUpdater| newUpdater(
  java.lang.Class tclass,
  java.lang.String fieldName)

Creates an updater for objects with the given field. The Class argument is 
needed to check that reflective types and generic types match. 

    tclass - the class of the objects holding the field 
    fieldName - the name of the field to be updated. 

    Returns: 
*java.util.concurrent.atomic.AtomicLongFieldUpdater.set(T,long)*

public abstract void set(
  java.lang.Object obj,
  long newValue)

Set the field of the given object managed by this updater. This operation is 
guaranteed to act as a volatile store with respect to subsequent invocations of 
compareAndSet. 

    obj - An object whose field to set 
    newValue - the new value 

*java.util.concurrent.atomic.AtomicLongFieldUpdater.weakCompareAndSet(T,long,long)*

public abstract boolean weakCompareAndSet(
  java.lang.Object obj,
  long expect,
  long update)

Atomically set the value of the field of the given object managed by this 
Updater to the given updated value if the current value == the expected value. 
This method is guaranteed to be atomic with respect to other calls to 
compareAndSet and set, but not necessarily with respect to other changes in the 
field, and may fail spuriously. 

    obj - An object whose field to conditionally set 
    expect - the expected value 
    update - the new value 

    Returns: true if successful. 


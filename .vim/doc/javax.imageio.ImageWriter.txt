*javax.imageio.ImageWriter* *ImageWriter* An abstract superclass for encoding an

public abstract class ImageWriter
  extends    |java.lang.Object|
  implements |javax.imageio.ImageTranscoder|

|javax.imageio.ImageWriter_Description|
|javax.imageio.ImageWriter_Fields|
|javax.imageio.ImageWriter_Constructors|
|javax.imageio.ImageWriter_Methods|

================================================================================

*javax.imageio.ImageWriter_Fields*
|java.util.Locale[]_javax.imageio.ImageWriter.availableLocales|
|java.util.Locale_javax.imageio.ImageWriter.locale|
|javax.imageio.spi.ImageWriterSpi_javax.imageio.ImageWriter.originatingProvider|
|java.lang.Object_javax.imageio.ImageWriter.output|
|java.util.List_javax.imageio.ImageWriter.progressListeners|
|java.util.List_javax.imageio.ImageWriter.warningListeners|
|java.util.List_javax.imageio.ImageWriter.warningLocales|

*javax.imageio.ImageWriter_Constructors*
|javax.imageio.ImageWriter(ImageWriterSpi)|Constructs an ImageWriter and sets i

*javax.imageio.ImageWriter_Methods*
|javax.imageio.ImageWriter.abort()|Requests that any current write operation be
|javax.imageio.ImageWriter.abortRequested()|Returns true if a request to abort 
|javax.imageio.ImageWriter.addIIOWriteProgressListener(IIOWriteProgressListener)|
|javax.imageio.ImageWriter.addIIOWriteWarningListener(IIOWriteWarningListener)|
|javax.imageio.ImageWriter.canInsertEmpty(int)|Returns true if the writer suppo
|javax.imageio.ImageWriter.canInsertImage(int)|Returns true if the writer suppo
|javax.imageio.ImageWriter.canRemoveImage(int)|Returns true if the writer suppo
|javax.imageio.ImageWriter.canReplaceImageMetadata(int)|Returns true if it is p
|javax.imageio.ImageWriter.canReplacePixels(int)|Returns true if the writer all
|javax.imageio.ImageWriter.canReplaceStreamMetadata()|Returns true if it is pos
|javax.imageio.ImageWriter.canWriteEmpty()|Returns true if the writer supports 
|javax.imageio.ImageWriter.canWriteRasters()|Returns true if the methods that t
|javax.imageio.ImageWriter.canWriteSequence()|Returns true if the writer is abl
|javax.imageio.ImageWriter.clearAbortRequest()|Clears any previous abort reques
|javax.imageio.ImageWriter.convertImageMetadata(IIOMetadata,ImageTypeSpecifier,ImageWriteParam)|
|javax.imageio.ImageWriter.convertStreamMetadata(IIOMetadata,ImageWriteParam)|
|javax.imageio.ImageWriter.dispose()|Allows any resources held by this object t
|javax.imageio.ImageWriter.endInsertEmpty()|Completes the insertion of a new im
|javax.imageio.ImageWriter.endReplacePixels()|Terminates a sequence of calls to
|javax.imageio.ImageWriter.endWriteEmpty()|Completes the writing of a new image
|javax.imageio.ImageWriter.endWriteSequence()|Completes the writing of a sequen
|javax.imageio.ImageWriter.getAvailableLocales()|Returns an array of Locales th
|javax.imageio.ImageWriter.getDefaultImageMetadata(ImageTypeSpecifier,ImageWriteParam)|
|javax.imageio.ImageWriter.getDefaultStreamMetadata(ImageWriteParam)|Returns an
|javax.imageio.ImageWriter.getDefaultWriteParam()|Returns a new ImageWriteParam
|javax.imageio.ImageWriter.getLocale()|Returns the currently set Locale, or  nu
|javax.imageio.ImageWriter.getNumThumbnailsSupported(ImageTypeSpecifier,ImageWriteParam,IIOMetadata,IIOMetadata)|
|javax.imageio.ImageWriter.getOriginatingProvider()|Returns the ImageWriterSpi 
|javax.imageio.ImageWriter.getOutput()|Returns the ImageOutputStream or other  
|javax.imageio.ImageWriter.getPreferredThumbnailSizes(ImageTypeSpecifier,ImageWriteParam,IIOMetadata,IIOMetadata)|
|javax.imageio.ImageWriter.prepareInsertEmpty(int,ImageTypeSpecifier,int,int,IIOMetadata,List,ImageWriteParam)|
|javax.imageio.ImageWriter.prepareReplacePixels(int,Rectangle)|Prepares the wri
|javax.imageio.ImageWriter.prepareWriteEmpty(IIOMetadata,ImageTypeSpecifier,int,int,IIOMetadata,List,ImageWriteParam)|
|javax.imageio.ImageWriter.prepareWriteSequence(IIOMetadata)|Prepares a stream 
|javax.imageio.ImageWriter.processImageComplete()|Broadcasts the completion of 
|javax.imageio.ImageWriter.processImageProgress(float)|Broadcasts the current p
|javax.imageio.ImageWriter.processImageStarted(int)|Broadcasts the start of an 
|javax.imageio.ImageWriter.processThumbnailComplete()|Broadcasts the completion
|javax.imageio.ImageWriter.processThumbnailProgress(float)|Broadcasts the curre
|javax.imageio.ImageWriter.processThumbnailStarted(int,int)|Broadcasts the star
|javax.imageio.ImageWriter.processWarningOccurred(int,String)|Broadcasts a warn
|javax.imageio.ImageWriter.processWarningOccurred(int,String,String)|Broadcasts
|javax.imageio.ImageWriter.processWriteAborted()|Broadcasts that the write has 
|javax.imageio.ImageWriter.removeAllIIOWriteProgressListeners()|Removes all cur
|javax.imageio.ImageWriter.removeAllIIOWriteWarningListeners()|Removes all curr
|javax.imageio.ImageWriter.removeIIOWriteProgressListener(IIOWriteProgressListener)|
|javax.imageio.ImageWriter.removeIIOWriteWarningListener(IIOWriteWarningListener)|
|javax.imageio.ImageWriter.removeImage(int)|Removes an image from the stream.
|javax.imageio.ImageWriter.replaceImageMetadata(int,IIOMetadata)|Replaces the i
|javax.imageio.ImageWriter.replacePixels(Raster,ImageWriteParam)|Replaces a por
|javax.imageio.ImageWriter.replacePixels(RenderedImage,ImageWriteParam)|Replace
|javax.imageio.ImageWriter.replaceStreamMetadata(IIOMetadata)|Replaces the stre
|javax.imageio.ImageWriter.reset()|Restores the ImageWriter to its initial stat
|javax.imageio.ImageWriter.setLocale(Locale)|Sets the current Locale of this  I
|javax.imageio.ImageWriter.setOutput(Object)|Sets the destination to the given 
|javax.imageio.ImageWriter.write(IIOImage)|Appends a complete image stream cont
|javax.imageio.ImageWriter.write(IIOMetadata,IIOImage,ImageWriteParam)|Appends 
|javax.imageio.ImageWriter.write(RenderedImage)|Appends a complete image stream
|javax.imageio.ImageWriter.writeInsert(int,IIOImage,ImageWriteParam)|Inserts a 
|javax.imageio.ImageWriter.writeToSequence(IIOImage,ImageWriteParam)|Appends a 

*javax.imageio.ImageWriter_Description*

An abstract superclass for encoding and writing images. This class must be 
subclassed by classes that write out images in the context of the Java Image 
I/O framework. 

ImageWriter objects are normally instantiated by the service provider class for 
the specific format. Service provider classes are registered with the 
IIORegistry, which uses them for format recognition and presentation of 
available format readers and writers. 




*java.util.Locale[]_javax.imageio.ImageWriter.availableLocales*

An abstract superclass for encoding and writing images. This class must be 
subclassed by classes that write out images in the context of the Java Image 
I/O framework. 

ImageWriter objects are normally instantiated by the service provider class for 
the specific format. Service provider classes are registered with the 
IIORegistry, which uses them for format recognition and presentation of 
available format readers and writers. 




*java.util.Locale_javax.imageio.ImageWriter.locale*

An abstract superclass for encoding and writing images. This class must be 
subclassed by classes that write out images in the context of the Java Image 
I/O framework. 

ImageWriter objects are normally instantiated by the service provider class for 
the specific format. Service provider classes are registered with the 
IIORegistry, which uses them for format recognition and presentation of 
available format readers and writers. 




*javax.imageio.spi.ImageWriterSpi_javax.imageio.ImageWriter.originatingProvider*

An abstract superclass for encoding and writing images. This class must be 
subclassed by classes that write out images in the context of the Java Image 
I/O framework. 

ImageWriter objects are normally instantiated by the service provider class for 
the specific format. Service provider classes are registered with the 
IIORegistry, which uses them for format recognition and presentation of 
available format readers and writers. 




*java.lang.Object_javax.imageio.ImageWriter.output*

An abstract superclass for encoding and writing images. This class must be 
subclassed by classes that write out images in the context of the Java Image 
I/O framework. 

ImageWriter objects are normally instantiated by the service provider class for 
the specific format. Service provider classes are registered with the 
IIORegistry, which uses them for format recognition and presentation of 
available format readers and writers. 




*java.util.List_javax.imageio.ImageWriter.progressListeners*

An abstract superclass for encoding and writing images. This class must be 
subclassed by classes that write out images in the context of the Java Image 
I/O framework. 

ImageWriter objects are normally instantiated by the service provider class for 
the specific format. Service provider classes are registered with the 
IIORegistry, which uses them for format recognition and presentation of 
available format readers and writers. 




*java.util.List_javax.imageio.ImageWriter.warningListeners*

An abstract superclass for encoding and writing images. This class must be 
subclassed by classes that write out images in the context of the Java Image 
I/O framework. 

ImageWriter objects are normally instantiated by the service provider class for 
the specific format. Service provider classes are registered with the 
IIORegistry, which uses them for format recognition and presentation of 
available format readers and writers. 




*java.util.List_javax.imageio.ImageWriter.warningLocales*

An abstract superclass for encoding and writing images. This class must be 
subclassed by classes that write out images in the context of the Java Image 
I/O framework. 

ImageWriter objects are normally instantiated by the service provider class for 
the specific format. Service provider classes are registered with the 
IIORegistry, which uses them for format recognition and presentation of 
available format readers and writers. 





*javax.imageio.ImageWriter(ImageWriterSpi)*

protected ImageWriter(javax.imageio.spi.ImageWriterSpi originatingProvider)

Constructs an ImageWriter and sets its originatingProvider instance variable to 
the supplied value. 

Subclasses that make use of extensions should provide a constructor with 
signature (ImageWriterSpi, Object) in order to retrieve the extension object. 
If the extension object is unsuitable, an IllegalArgumentException should be 
thrown. 

    originatingProvider - the ImageWriterSpi that is constructing this object, or null. 

*javax.imageio.ImageWriter.abort()*

public synchronized void abort()

Requests that any current write operation be aborted. The contents of the 
output following the abort will be undefined. 

Writers should call clearAbortRequest at the beginning of each write operation, 
and poll the value of abortRequested regularly during the write. 


*javax.imageio.ImageWriter.abortRequested()*

protected synchronized boolean abortRequested()

Returns true if a request to abort the current write operation has been made 
since the writer was instantiated or clearAbortRequest was called. 


    Returns: true if the current write operation should be aborted. 
*javax.imageio.ImageWriter.addIIOWriteProgressListener(IIOWriteProgressListener)*

public void addIIOWriteProgressListener(javax.imageio.event.IIOWriteProgressListener listener)

Adds an IIOWriteProgressListener to the list of registered progress listeners. 
If listener is null, no exception will be thrown and no action will be taken. 

    listener - an IIOWriteProgressListener to be registered. 

*javax.imageio.ImageWriter.addIIOWriteWarningListener(IIOWriteWarningListener)*

public void addIIOWriteWarningListener(javax.imageio.event.IIOWriteWarningListener listener)

Adds an IIOWriteWarningListener to the list of registered warning listeners. If 
listener is null, no exception will be thrown and no action will be taken. 
Messages sent to the given listener will be localized, if possible, to match 
the current Locale. If no Locale has been set, warning messages may be 
localized as the writer sees fit. 

    listener - an IIOWriteWarningListener to be registered. 

*javax.imageio.ImageWriter.canInsertEmpty(int)*

public boolean canInsertEmpty(int imageIndex)
  throws |java.io.IOException|
         
Returns true if the writer supports the insertion of a new, empty image at the 
given index. The pixel values of the image are undefined, and may be specified 
in pieces using the replacePixels methods. Existing images with indices greater 
than or equal to the insertion index will have their indices increased by 1. A 
value for imageIndex of -1 may be used to signify an index one larger than the 
current largest index. 

A writer that does not support insertion of empty images may return false 
without performing bounds checking on the index. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise returns false without checking the value of imageIndex. 

    imageIndex - the index at which the image is to be inserted. 

    Returns: true if an empty image may be inserted at the given index. 
*javax.imageio.ImageWriter.canInsertImage(int)*

public boolean canInsertImage(int imageIndex)
  throws |java.io.IOException|
         
Returns true if the writer supports the insertion of a new image at the given 
index. Existing images with indices greater than or equal to the insertion 
index will have their indices increased by 1. A value for imageIndex of -1 may 
be used to signify an index one larger than the current largest index. 

A writer that does not support any image insertion may return false without 
performing bounds checking on the index. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise returns false withour checking the value of imageIndex. 

    imageIndex - the index at which the image is to be inserted. 

    Returns: true if an image may be inserted at the given index. 
*javax.imageio.ImageWriter.canRemoveImage(int)*

public boolean canRemoveImage(int imageIndex)
  throws |java.io.IOException|
         
Returns true if the writer supports the removal of an existing image at the 
given index. Existing images with indices greater than the insertion index will 
have their indices decreased by 1. 

A writer that does not support any image removal may return false without 
performing bounds checking on the index. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise returns false without checking the value of imageIndex. 

    imageIndex - the index of the image to be removed. 

    Returns: true if it is possible to remove the given image. 
*javax.imageio.ImageWriter.canReplaceImageMetadata(int)*

public boolean canReplaceImageMetadata(int imageIndex)
  throws |java.io.IOException|
         
Returns true if it is possible to replace the image metadata associated with an 
existing image with index imageIndex. If this method returns false, a call to 
replaceImageMetadata(imageIndex) will throw an UnsupportedOperationException. 

A writer that does not support any image metadata replacement may return false 
without performing bounds checking on the index. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise returns false without checking the value of imageIndex. 

    imageIndex - the index of the image whose metadata is to be replaced. 

    Returns: true if the image metadata of the given image can be replaced. 
*javax.imageio.ImageWriter.canReplacePixels(int)*

public boolean canReplacePixels(int imageIndex)
  throws |java.io.IOException|
         
Returns true if the writer allows pixels of the given image to be replaced 
using the replacePixels methods. 

A writer that does not support any pixel replacement may return false without 
performing bounds checking on the index. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise returns false without checking the value of imageIndex. 

    imageIndex - the index of the image whose pixels are to be replaced. 

    Returns: true if the pixels of the given image can be replaced. 
*javax.imageio.ImageWriter.canReplaceStreamMetadata()*

public boolean canReplaceStreamMetadata()
  throws |java.io.IOException|
         
Returns true if it is possible to replace the stream metadata already present 
in the output. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise returns false. 


    Returns: true if replacement of stream metadata is allowed. 
*javax.imageio.ImageWriter.canWriteEmpty()*

public boolean canWriteEmpty()
  throws |java.io.IOException|
         
Returns true if the writer supports the writing of a complete image stream 
consisting of a single image with undefined pixel values and associated 
metadata and thumbnails to the output. The pixel values may be defined by 
future calls to the replacePixels methods. If the output is an 
ImageOutputStream, its existing contents prior to the current seek position are 
not affected, and need not be readable or writable. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise returns false. 


    Returns: true if the writing of complete image stream with contents to be defined later 
             is supported. 
*javax.imageio.ImageWriter.canWriteRasters()*

public boolean canWriteRasters()

Returns true if the methods that take an IIOImage parameter are capable of 
dealing with a Raster (as opposed to RenderedImage) source image. If this 
method returns false, then those methods will throw an 
UnsupportedOperationException if supplied with an IIOImage containing a Raster. 

The default implementation returns false. 


    Returns: true if Raster sources are supported. 
*javax.imageio.ImageWriter.canWriteSequence()*

public boolean canWriteSequence()

Returns true if the writer is able to append an image to an image stream that 
already contains header information and possibly prior images. 

If canWriteSequence returns false, writeToSequence and endWriteSequence will 
throw an UnsupportedOperationException. 

The default implementation returns false. 


    Returns: true if images may be appended sequentially. 
*javax.imageio.ImageWriter.clearAbortRequest()*

protected synchronized void clearAbortRequest()

Clears any previous abort request. After this method has been called, 
abortRequested will return false. 


*javax.imageio.ImageWriter.convertImageMetadata(IIOMetadata,ImageTypeSpecifier,ImageWriteParam)*

public abstract |javax.imageio.metadata.IIOMetadata| convertImageMetadata(
  javax.imageio.metadata.IIOMetadata inData,
  javax.imageio.ImageTypeSpecifier imageType,
  javax.imageio.ImageWriteParam param)




*javax.imageio.ImageWriter.convertStreamMetadata(IIOMetadata,ImageWriteParam)*

public abstract |javax.imageio.metadata.IIOMetadata| convertStreamMetadata(
  javax.imageio.metadata.IIOMetadata inData,
  javax.imageio.ImageWriteParam param)




*javax.imageio.ImageWriter.dispose()*

public void dispose()

Allows any resources held by this object to be released. The result of calling 
any other method (other than finalize) subsequent to a call to this method is 
undefined. 

It is important for applications to call this method when they know they will 
no longer be using this ImageWriter. Otherwise, the writer may continue to hold 
on to resources indefinitely. 

The default implementation of this method in the superclass does nothing. 
Subclass implementations should ensure that all resources, especially native 
resources, are released. 


*javax.imageio.ImageWriter.endInsertEmpty()*

public void endInsertEmpty()
  throws |java.io.IOException|
         
Completes the insertion of a new image that was begun with a prior call to 
prepareInsertEmpty. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise throws an UnsupportedOperationException. 


*javax.imageio.ImageWriter.endReplacePixels()*

public void endReplacePixels()
  throws |java.io.IOException|
         
Terminates a sequence of calls to replacePixels. 

If canReplacePixels returns false, and UnsupportedOperationException will be 
thrown. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise throws an UnsupportedOperationException. 


*javax.imageio.ImageWriter.endWriteEmpty()*

public void endWriteEmpty()
  throws |java.io.IOException|
         
Completes the writing of a new image that was begun with a prior call to 
prepareWriteEmpty. 

If canWriteEmpty() returns false, an UnsupportedOperationException will be 
thrown. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise throws an UnsupportedOperationException. 


*javax.imageio.ImageWriter.endWriteSequence()*

public void endWriteSequence()
  throws |java.io.IOException|
         
Completes the writing of a sequence of images begun with prepareWriteSequence. 
Any stream metadata that should come at the end of the sequence of images is 
written out, and any header information at the beginning of the sequence is 
patched up if necessary. If the output is an ImageOutputStream, data through 
the stream metadata at the end of the sequence are flushed and need not be 
readable or writable. 

If canWriteSequence returns false, this method will throw an 
UnsupportedOperationException. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise throws an UnsupportedOperationException. 


*javax.imageio.ImageWriter.getAvailableLocales()*

public |java.util.Locale| getAvailableLocales()

Returns an array of Locales that may be used to localize warning listeners and 
compression settings. A return value of null indicates that localization is not 
supported. 

The default implementation returns a clone of the availableLocales instance 
variable if it is non-null, or else returns null. 


    Returns: an array of Locales that may be used as arguments to setLocale, or null. 
*javax.imageio.ImageWriter.getDefaultImageMetadata(ImageTypeSpecifier,ImageWriteParam)*

public abstract |javax.imageio.metadata.IIOMetadata| getDefaultImageMetadata(
  javax.imageio.ImageTypeSpecifier imageType,
  javax.imageio.ImageWriteParam param)

Returns an IIOMetadata object containing default values for encoding an image 
of the given type. The contents of the object may be manipulated using either 
the XML tree structure returned by the IIOMetadata.getAsTree method, an 
IIOMetadataController object, or via plug-in specific interfaces, and the 
resulting data supplied to one of the write methods that take a stream metadata 
parameter. 

An optional ImageWriteParam may be supplied for cases where it may affect the 
structure of the image metadata. 

If the supplied ImageWriteParam contains optional setting values not supported 
by this writer (e.g. progressive encoding or any format-specific settings), 
they will be ignored. 

    imageType - an ImageTypeSpecifier indicating the format of the image to be written later. 
    param - an ImageWriteParam that will be used to encode the image, or null. 

    Returns: an IIOMetadata object. 
*javax.imageio.ImageWriter.getDefaultStreamMetadata(ImageWriteParam)*

public abstract |javax.imageio.metadata.IIOMetadata| getDefaultStreamMetadata(javax.imageio.ImageWriteParam param)

Returns an IIOMetadata object containing default values for encoding a stream 
of images. The contents of the object may be manipulated using either the XML 
tree structure returned by the IIOMetadata.getAsTree method, an 
IIOMetadataController object, or via plug-in specific interfaces, and the 
resulting data supplied to one of the write methods that take a stream metadata 
parameter. 

An optional ImageWriteParam may be supplied for cases where it may affect the 
structure of the stream metadata. 

If the supplied ImageWriteParam contains optional setting values not supported 
by this writer (e.g. progressive encoding or any format-specific settings), 
they will be ignored. 

Writers that do not make use of stream metadata (e.g., writers for single-image 
formats) should return null. 

    param - an ImageWriteParam that will be used to encode the image, or null. 

    Returns: an IIOMetadata object. 
*javax.imageio.ImageWriter.getDefaultWriteParam()*

public |javax.imageio.ImageWriteParam| getDefaultWriteParam()

Returns a new ImageWriteParam object of the appropriate type for this file 
format containing default values, that is, those values that would be used if 
no ImageWriteParam object were specified. This is useful as a starting point 
for tweaking just a few parameters and otherwise leaving the default settings 
alone. 

The default implementation constructs and returns a new ImageWriteParam object 
that does not allow tiling, progressive encoding, or compression, and that will 
be localized for the current Locale (i.e., what you would get by calling new 
ImageWriteParam(getLocale()). 

Individual plug-ins may return an instance of ImageWriteParam with additional 
optional features enabled, or they may return an instance of a plug-in specific 
subclass of ImageWriteParam. 


    Returns: a new ImageWriteParam object containing default values. 
*javax.imageio.ImageWriter.getLocale()*

public |java.util.Locale| getLocale()

Returns the currently set Locale, or null if none has been set. 

The default implementation returns the value of the locale instance variable. 


    Returns: the current Locale, or null. 
*javax.imageio.ImageWriter.getNumThumbnailsSupported(ImageTypeSpecifier,ImageWriteParam,IIOMetadata,IIOMetadata)*

public int getNumThumbnailsSupported(
  javax.imageio.ImageTypeSpecifier imageType,
  javax.imageio.ImageWriteParam param,
  javax.imageio.metadata.IIOMetadata streamMetadata,
  javax.imageio.metadata.IIOMetadata imageMetadata)

Returns the number of thumbnails suported by the format being written, given 
the image type and any additional write parameters and metadata objects that 
will be used during encoding. A return value of -1 indicates that insufficient 
information is available. 

An ImageWriteParam may optionally be supplied for cases where it may affect 
thumbnail handling. 

If the supplied ImageWriteParam contains optional setting values not supported 
by this writer (e.g. progressive encoding or any format-specific settings), 
they will be ignored. 

The default implementation returns 0. 

    imageType - an ImageTypeSpecifier indicating the type of image to be written, or null. 
    param - the ImageWriteParam that will be used for writing, or null. 
    streamMetadata - an IIOMetadata object that will be used for writing, or null. 
    imageMetadata - an IIOMetadata object that will be used for writing, or null. 

    Returns: the number of thumbnails that may be written given the supplied parameters, or 
             -1 if insufficient information is available. 
*javax.imageio.ImageWriter.getOriginatingProvider()*

public |javax.imageio.spi.ImageWriterSpi| getOriginatingProvider()

Returns the ImageWriterSpi object that created this ImageWriter, or null if 
this object was not created through the IIORegistry. 

The default implementation returns the value of the originatingProvider 
instance variable. 


    Returns: an ImageWriterSpi, or null. 
*javax.imageio.ImageWriter.getOutput()*

public |java.lang.Object| getOutput()

Returns the ImageOutputStream or other Object set by the most recent call to 
the setOutput method. If no destination has been set, null is returned. 

The default implementation returns the value of the output instance variable. 


    Returns: the Object that was specified using setOutput, or null. 
*javax.imageio.ImageWriter.getPreferredThumbnailSizes(ImageTypeSpecifier,ImageWriteParam,IIOMetadata,IIOMetadata)*

public |java.awt.Dimension| getPreferredThumbnailSizes(
  javax.imageio.ImageTypeSpecifier imageType,
  javax.imageio.ImageWriteParam param,
  javax.imageio.metadata.IIOMetadata streamMetadata,
  javax.imageio.metadata.IIOMetadata imageMetadata)

Returns an array of Dimensions indicating the legal size ranges for thumbnail 
images as they will be encoded in the output file or stream. This information 
is merely advisory; the writer will resize any supplied thumbnails as 
necessary. 

The information is returned as a set of pairs; the first element of a pair 
contains an (inclusive) minimum width and height, and the second element 
contains an (inclusive) maximum width and height. Together, each pair defines a 
valid range of sizes. To specify a fixed size, the same width and height will 
appear for both elements. A return value of null indicates that the size is 
arbitrary or unknown. 

An ImageWriteParam may optionally be supplied for cases where it may affect 
thumbnail handling. 

If the supplied ImageWriteParam contains optional setting values not supported 
by this writer (e.g. progressive encoding or any format-specific settings), 
they will be ignored. 

The default implementation returns null. 

    imageType - an ImageTypeSpecifier indicating the type of image to be written, or null. 
    param - the ImageWriteParam that will be used for writing, or null. 
    streamMetadata - an IIOMetadata object that will be used for writing, or null. 
    imageMetadata - an IIOMetadata object that will be used for writing, or null. 

    Returns: an array of Dimensions with an even length of at least two, or null. 
*javax.imageio.ImageWriter.prepareInsertEmpty(int,ImageTypeSpecifier,int,int,IIOMetadata,List,ImageWriteParam)*

public void prepareInsertEmpty(
  int imageIndex,
  javax.imageio.ImageTypeSpecifier imageType,
  int width,
  int height,
  javax.imageio.metadata.IIOMetadata imageMetadata,
  java.util.List thumbnails,
  javax.imageio.ImageWriteParam param)
  throws |java.io.IOException|
         
Begins the insertion of a new image with undefined pixel values into an 
existing image stream. Existing images with an index greater than imageIndex 
are preserved, and their indices are each increased by 1. A value for 
imageIndex of -1 may be used to signify an index one larger than the previous 
largest index; that is, it will cause the image to be logically appended to the 
end of the sequence. If the output is an ImageOutputStream, the entirety of the 
stream must be both readable and writeable. 

The image contents may be supplied later using the replacePixels method. The 
insertion is not complete until a call to endInsertEmpty occurs. Calls to 
prepareReplacePixels, replacePixels, and endReplacePixels may occur between 
calls to prepareInsertEmpty and endInsertEmpty. However, calls to 
prepareInsertEmpty cannot be nested, and calls to prepareWriteEmpty and 
prepareInsertEmpty may not be interspersed. 

If canInsertEmpty(imageIndex) returns false, an UnsupportedOperationException 
will be thrown. 

An ImageWriteParam may optionally be supplied to control the writing process. 
If param is null, a default write param will be used. 

If the supplied ImageWriteParam contains optional setting values not supported 
by this writer (e.g. progressive encoding or any format-specific settings), 
they will be ignored. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise throws an UnsupportedOperationException. 

    imageIndex - the index at which to write the image. 
    imageType - an ImageTypeSpecifier describing the layout of the image. 
    width - the width of the image. 
    height - the height of the image. 
    imageMetadata - an IIOMetadata object representing image metadata, or null. 
    thumbnails - a List of BufferedImage thumbnails for this image, or null. 
    param - an ImageWriteParam, or null to use a default ImageWriteParam. 

*javax.imageio.ImageWriter.prepareReplacePixels(int,Rectangle)*

public void prepareReplacePixels(
  int imageIndex,
  java.awt.Rectangle region)
  throws |java.io.IOException|
         
Prepares the writer to handle a series of calls to the replacePixels methods. 
The affected pixel area will be clipped against the supplied 

If canReplacePixels returns false, and UnsupportedOperationException will be 
thrown. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise throws an UnsupportedOperationException. 

    imageIndex - the index of the image whose pixels are to be replaced. 
    region - a Rectangle that will be used to clip future pixel regions. 

*javax.imageio.ImageWriter.prepareWriteEmpty(IIOMetadata,ImageTypeSpecifier,int,int,IIOMetadata,List,ImageWriteParam)*

public void prepareWriteEmpty(
  javax.imageio.metadata.IIOMetadata streamMetadata,
  javax.imageio.ImageTypeSpecifier imageType,
  int width,
  int height,
  javax.imageio.metadata.IIOMetadata imageMetadata,
  java.util.List thumbnails,
  javax.imageio.ImageWriteParam param)
  throws |java.io.IOException|
         
Begins the writing of a complete image stream, consisting of a single image 
with undefined pixel values and associated metadata and thumbnails, to the 
output. The pixel values will be defined by future calls to the replacePixels 
methods. If the output is an ImageOutputStream, its existing contents prior to 
the current seek position are not affected, and need not be readable or 
writable. 

The writing is not complete until a call to endWriteEmpty occurs. Calls to 
prepareReplacePixels, replacePixels, and endReplacePixels may occur between 
calls to prepareWriteEmpty and endWriteEmpty. However, calls to 
prepareWriteEmpty cannot be nested, and calls to prepareWriteEmpty and 
prepareInsertEmpty may not be interspersed. 

If canWriteEmpty returns false, an UnsupportedOperationException will be 
thrown. 

An ImageWriteParam may optionally be supplied to control the writing process. 
If param is null, a default write param will be used. 

If the supplied ImageWriteParam contains optional setting values not supported 
by this writer (e.g. progressive encoding or any format-specific settings), 
they will be ignored. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise throws an UnsupportedOperationException. 

    streamMetadata - an IIOMetadata object representing stream metadata, or null to use default 
       values. 
    imageType - an ImageTypeSpecifier describing the layout of the image. 
    width - the width of the image. 
    height - the height of the image. 
    imageMetadata - an IIOMetadata object representing image metadata, or null. 
    thumbnails - a List of BufferedImage thumbnails for this image, or null. 
    param - an ImageWriteParam, or null to use a default ImageWriteParam. 

*javax.imageio.ImageWriter.prepareWriteSequence(IIOMetadata)*

public void prepareWriteSequence(javax.imageio.metadata.IIOMetadata streamMetadata)
  throws |java.io.IOException|
         
Prepares a stream to accept a series of subsequent writeToSequence calls, using 
the provided stream metadata object. The metadata will be written to the stream 
if it should precede the image data. If the argument is null, default stream 
metadata is used. 

If the output is an ImageOutputStream, the existing contents of the output 
prior to the current seek position are flushed, and need not be readable or 
writable. If the format requires that endWriteSequence be able to rewind to 
patch up the header information, such as for a sequence of images in a single 
TIFF file, then the metadata written by this method must remain in a writable 
portion of the stream. Other formats may flush the stream after this method and 
after each image. 

If canWriteSequence returns false, this method will throw an 
UnsupportedOperationException. 

The output must have been set beforehand using either the setOutput method. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise throws an UnsupportedOperationException. 

    streamMetadata - A stream metadata object, or null. 

*javax.imageio.ImageWriter.processImageComplete()*

protected void processImageComplete()

Broadcasts the completion of an image write to all registered 
IIOWriteProgressListeners by calling their imageComplete method. Subclasses may 
use this method as a convenience. 


*javax.imageio.ImageWriter.processImageProgress(float)*

protected void processImageProgress(float percentageDone)

Broadcasts the current percentage of image completion to all registered 
IIOWriteProgressListeners by calling their imageProgress method. Subclasses may 
use this method as a convenience. 

    percentageDone - the current percentage of completion, as a float. 

*javax.imageio.ImageWriter.processImageStarted(int)*

protected void processImageStarted(int imageIndex)

Broadcasts the start of an image write to all registered 
IIOWriteProgressListeners by calling their imageStarted method. Subclasses may 
use this method as a convenience. 

    imageIndex - the index of the image about to be written. 

*javax.imageio.ImageWriter.processThumbnailComplete()*

protected void processThumbnailComplete()

Broadcasts the completion of a thumbnail write to all registered 
IIOWriteProgressListeners by calling their thumbnailComplete method. Subclasses 
may use this method as a convenience. 


*javax.imageio.ImageWriter.processThumbnailProgress(float)*

protected void processThumbnailProgress(float percentageDone)

Broadcasts the current percentage of thumbnail completion to all registered 
IIOWriteProgressListeners by calling their thumbnailProgress method. Subclasses 
may use this method as a convenience. 

    percentageDone - the current percentage of completion, as a float. 

*javax.imageio.ImageWriter.processThumbnailStarted(int,int)*

protected void processThumbnailStarted(
  int imageIndex,
  int thumbnailIndex)

Broadcasts the start of a thumbnail write to all registered 
IIOWriteProgressListeners by calling their thumbnailStarted method. Subclasses 
may use this method as a convenience. 

    imageIndex - the index of the image associated with the thumbnail. 
    thumbnailIndex - the index of the thumbnail. 

*javax.imageio.ImageWriter.processWarningOccurred(int,String)*

protected void processWarningOccurred(
  int imageIndex,
  java.lang.String warning)

Broadcasts a warning message to all registered IIOWriteWarningListeners by 
calling their warningOccurred method. Subclasses may use this method as a 
convenience. 

    imageIndex - the index of the image on which the warning occurred. 
    warning - the warning message. 

*javax.imageio.ImageWriter.processWarningOccurred(int,String,String)*

protected void processWarningOccurred(
  int imageIndex,
  java.lang.String baseName,
  java.lang.String keyword)

Broadcasts a localized warning message to all registered 
IIOWriteWarningListeners by calling their warningOccurred method with a string 
taken from a ResourceBundle. Subclasses may use this method as a convenience. 

    imageIndex - the index of the image on which the warning occurred. 
    baseName - the base name of a set of ResourceBundles containing localized warning 
       messages. 
    keyword - the keyword used to index the warning message within the set of 
       ResourceBundles. 

*javax.imageio.ImageWriter.processWriteAborted()*

protected void processWriteAborted()

Broadcasts that the write has been aborted to all registered 
IIOWriteProgressListeners by calling their writeAborted method. Subclasses may 
use this method as a convenience. 


*javax.imageio.ImageWriter.removeAllIIOWriteProgressListeners()*

public void removeAllIIOWriteProgressListeners()

Removes all currently registered IIOWriteProgressListener objects. 

The default implementation sets the progressListeners instance variable to 
null. 


*javax.imageio.ImageWriter.removeAllIIOWriteWarningListeners()*

public void removeAllIIOWriteWarningListeners()

Removes all currently registered IIOWriteWarningListener objects. 

The default implementation sets the warningListeners and warningLocales 
instance variables to null. 


*javax.imageio.ImageWriter.removeIIOWriteProgressListener(IIOWriteProgressListener)*

public void removeIIOWriteProgressListener(javax.imageio.event.IIOWriteProgressListener listener)

Removes an IIOWriteProgressListener from the list of registered progress 
listeners. If the listener was not previously registered, or if listener is 
null, no exception will be thrown and no action will be taken. 

    listener - an IIOWriteProgressListener to be deregistered. 

*javax.imageio.ImageWriter.removeIIOWriteWarningListener(IIOWriteWarningListener)*

public void removeIIOWriteWarningListener(javax.imageio.event.IIOWriteWarningListener listener)

Removes an IIOWriteWarningListener from the list of registered warning 
listeners. If the listener was not previously registered, or if listener is 
null, no exception will be thrown and no action will be taken. 

    listener - an IIOWriteWarningListener to be deregistered. 

*javax.imageio.ImageWriter.removeImage(int)*

public void removeImage(int imageIndex)
  throws |java.io.IOException|
         
Removes an image from the stream. 

If canRemoveImage(imageIndex) returns false, an 
UnsupportedOperationExceptionwill be thrown. 

The removal may or may not cause a reduction in the actual file size. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise throws an UnsupportedOperationException. 

    imageIndex - the index of the image to be removed. 

*javax.imageio.ImageWriter.replaceImageMetadata(int,IIOMetadata)*

public void replaceImageMetadata(
  int imageIndex,
  javax.imageio.metadata.IIOMetadata imageMetadata)
  throws |java.io.IOException|
         
Replaces the image metadata associated with an existing image. 

If canReplaceImageMetadata(imageIndex) returns false, an 
UnsupportedOperationException will be thrown. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise throws an UnsupportedOperationException. 

    imageIndex - the index of the image whose metadata is to be replaced. 
    imageMetadata - an IIOMetadata object representing image metadata, or null. 

*javax.imageio.ImageWriter.replacePixels(Raster,ImageWriteParam)*

public void replacePixels(
  java.awt.image.Raster raster,
  javax.imageio.ImageWriteParam param)
  throws |java.io.IOException|
         
Replaces a portion of an image already present in the output with a portion of 
the given Raster. The image data must match, or be convertible to, the image 
layout of the existing image. 

An ImageWriteParam may optionally be supplied to control the writing process. 
If param is null, a default write param will be used. 

The destination region is specified in the param argument, and will be clipped 
to the image boundaries and the region supplied to prepareReplacePixels. At 
least one pixel of the source must not be clipped, or an exception is thrown. 

If the supplied ImageWriteParam contains optional setting values not supported 
by this writer (e.g. progressive encoding or any format-specific settings), 
they will be ignored. 

This method may only be called after a call to prepareReplacePixels, or else an 
IllegalStateException will be thrown. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise throws an UnsupportedOperationException. 

    raster - a Raster containing source pixels. 
    param - an ImageWriteParam, or null to use a default ImageWriteParam. 

*javax.imageio.ImageWriter.replacePixels(RenderedImage,ImageWriteParam)*

public void replacePixels(
  java.awt.image.RenderedImage image,
  javax.imageio.ImageWriteParam param)
  throws |java.io.IOException|
         
Replaces a portion of an image already present in the output with a portion of 
the given image. The image data must match, or be convertible to, the image 
layout of the existing image. 

The destination region is specified in the param argument, and will be clipped 
to the image boundaries and the region supplied to prepareReplacePixels. At 
least one pixel of the source must not be clipped, or an exception is thrown. 

An ImageWriteParam may optionally be supplied to control the writing process. 
If param is null, a default write param will be used. 

If the supplied ImageWriteParam contains optional setting values not supported 
by this writer (e.g. progressive encoding or any format-specific settings), 
they will be ignored. 

This method may only be called after a call to prepareReplacePixels, or else an 
IllegalStateException will be thrown. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise throws an UnsupportedOperationException. 

    image - a RenderedImage containing source pixels. 
    param - an ImageWriteParam, or null to use a default ImageWriteParam. 

*javax.imageio.ImageWriter.replaceStreamMetadata(IIOMetadata)*

public void replaceStreamMetadata(javax.imageio.metadata.IIOMetadata streamMetadata)
  throws |java.io.IOException|
         
Replaces the stream metadata in the output with new information. If the output 
is an ImageOutputStream, the prior contents of the stream are examined and 
possibly edited to make room for the new data. All of the prior contents of the 
output must be available for reading and writing. 

If canReplaceStreamMetadata returns false, an UnsupportedOperationException 
will be thrown. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise throws an UnsupportedOperationException. 

    streamMetadata - an IIOMetadata object representing stream metadata, or null to use default 
       values. 

*javax.imageio.ImageWriter.reset()*

public void reset()

Restores the ImageWriter to its initial state. 

The default implementation calls setOutput(null), setLocale(null), 
removeAllIIOWriteWarningListeners(), removeAllIIOWriteProgressListeners(), and 
clearAbortRequest. 


*javax.imageio.ImageWriter.setLocale(Locale)*

public void setLocale(java.util.Locale locale)

Sets the current Locale of this ImageWriter to the given value. A value of null 
removes any previous setting, and indicates that the writer should localize as 
it sees fit. 

The default implementation checks locale against the values returned by 
getAvailableLocales, and sets the locale instance variable if it is found. If 
locale is null, the instance variable is set to null without any checking. 

    locale - the desired Locale, or null. 

*javax.imageio.ImageWriter.setOutput(Object)*

public void setOutput(java.lang.Object output)

Sets the destination to the given ImageOutputStream or other Object. The 
destination is assumed to be ready to accept data, and will not be closed at 
the end of each write. This allows distributed imaging applications to transmit 
a series of images over a single network connection. If output is null, any 
currently set output will be removed. 

If output is an ImageOutputStream, calls to the write, writeToSequence, and 
prepareWriteEmpty/endWriteEmpty methods will preserve the existing contents of 
the stream. Other write methods, such as writeInsert, replaceStreamMetadata, 
replaceImageMetadata, replacePixels, prepareInsertEmpty/endInsertEmpty, and 
endWriteSequence, require the full contents of the stream to be readable and 
writable, and may alter any portion of the stream. 

Use of a general Object other than an ImageOutputStream is intended for writers 
that interact directly with an output device or imaging protocol. The set of 
legal classes is advertised by the writer's service provider's getOutputTypes 
method; most writers will return a single-element array containing only 
ImageOutputStream.class to indicate that they accept only an ImageOutputStream. 

The default implementation sets the output instance variable to the value of 
output after checking output against the set of classes advertised by the 
originating provider, if there is one. 

    output - the ImageOutputStream or other Object to use for future writing. 

*javax.imageio.ImageWriter.write(IIOImage)*

public void write(javax.imageio.IIOImage image)
  throws |java.io.IOException|
         
Appends a complete image stream containing a single image with default metadata 
and thumbnails to the output. This method is a shorthand for write(null, image, 
null). 

    image - an IIOImage object containing an image, thumbnails, and metadata to be written. 

*javax.imageio.ImageWriter.write(IIOMetadata,IIOImage,ImageWriteParam)*

public abstract void write(
  javax.imageio.metadata.IIOMetadata streamMetadata,
  javax.imageio.IIOImage image,
  javax.imageio.ImageWriteParam param)
  throws |java.io.IOException|
         
Appends a complete image stream containing a single image and associated stream 
and image metadata and thumbnails to the output. Any necessary header 
information is included. If the output is an ImageOutputStream, its existing 
contents prior to the current seek position are not affected, and need not be 
readable or writable. 

The output must have been set beforehand using the setOutput method. 

Stream metadata may optionally be supplied; if it is null, default stream 
metadata will be used. 

If canWriteRasters returns true, the IIOImage may contain a Raster source. 
Otherwise, it must contain a RenderedImage source. 

The supplied thumbnails will be resized if needed, and any thumbnails in excess 
of the supported number will be ignored. If the format requires additional 
thumbnails that are not provided, the writer should generate them internally. 

An ImageWriteParam may optionally be supplied to control the writing process. 
If param is null, a default write param will be used. 

If the supplied ImageWriteParam contains optional setting values not supported 
by this writer (e.g. progressive encoding or any format-specific settings), 
they will be ignored. 

    streamMetadata - an IIOMetadata object representing stream metadata, or null to use default 
       values. 
    image - an IIOImage object containing an image, thumbnails, and metadata to be written. 
    param - an ImageWriteParam, or null to use a default ImageWriteParam. 

*javax.imageio.ImageWriter.write(RenderedImage)*

public void write(java.awt.image.RenderedImage image)
  throws |java.io.IOException|
         
Appends a complete image stream consisting of a single image with default 
metadata and thumbnails to the output. This method is a shorthand for 
write(null, new IIOImage(image, null, null), null). 

    image - a RenderedImage to be written. 

*javax.imageio.ImageWriter.writeInsert(int,IIOImage,ImageWriteParam)*

public void writeInsert(
  int imageIndex,
  javax.imageio.IIOImage image,
  javax.imageio.ImageWriteParam param)
  throws |java.io.IOException|
         
Inserts a new image into an existing image stream. Existing images with an 
index greater than imageIndex are preserved, and their indices are each 
increased by 1. A value for imageIndex of -1 may be used to signify an index 
one larger than the previous largest index; that is, it will cause the image to 
be logically appended to the end of the sequence. If the output is an 
ImageOutputStream, the entirety of the stream must be both readable and 
writeable. 

If canInsertImage(imageIndex) returns false, an UnsupportedOperationException 
will be thrown. 

An ImageWriteParam may optionally be supplied to control the writing process. 
If param is null, a default write param will be used. 

If the supplied ImageWriteParam contains optional setting values not supported 
by this writer (e.g. progressive encoding or any format-specific settings), 
they will be ignored. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise throws an UnsupportedOperationException. 

    imageIndex - the index at which to write the image. 
    image - an IIOImage object containing an image, thumbnails, and metadata to be written. 
    param - an ImageWriteParam, or null to use a default ImageWriteParam. 

*javax.imageio.ImageWriter.writeToSequence(IIOImage,ImageWriteParam)*

public void writeToSequence(
  javax.imageio.IIOImage image,
  javax.imageio.ImageWriteParam param)
  throws |java.io.IOException|
         
Appends a single image and possibly associated metadata and thumbnails, to the 
output. If the output is an ImageOutputStream, the existing contents of the 
output prior to the current seek position may be flushed, and need not be 
readable or writable, unless the plug-in needs to be able to patch up the 
header information when endWriteSequence is called (e.g. TIFF). 

If canWriteSequence returns false, this method will throw an 
UnsupportedOperationException. 

The output must have been set beforehand using the setOutput method. 

prepareWriteSequence must have been called beforehand, or an 
IllegalStateException is thrown. 

If canWriteRasters returns true, the IIOImage may contain a Raster source. 
Otherwise, it must contain a RenderedImage source. 

The supplied thumbnails will be resized if needed, and any thumbnails in excess 
of the supported number will be ignored. If the format requires additional 
thumbnails that are not provided, the writer will generate them internally. 

An ImageWriteParam may optionally be supplied to control the writing process. 
If param is null, a default write param will be used. 

If the supplied ImageWriteParam contains optional setting values not supported 
by this writer (e.g. progressive encoding or any format-specific settings), 
they will be ignored. 

The default implementation throws an IllegalStateException if the output is 
null, and otherwise throws an UnsupportedOperationException. 

    image - an IIOImage object containing an image, thumbnails, and metadata to be written. 
    param - an ImageWriteParam, or null to use a default ImageWriteParam. 



*javax.swing.text.DefaultCaret* *DefaultCaret* A default implementation of Caret.

public class DefaultCaret
  extends    |java.awt.Rectangle|
  implements |javax.swing.text.Caret|
             |java.awt.event.FocusListener|
             |java.awt.event.MouseListener|
             |java.awt.event.MouseMotionListener|

|javax.swing.text.DefaultCaret_Description|
|javax.swing.text.DefaultCaret_Fields|
|javax.swing.text.DefaultCaret_Constructors|
|javax.swing.text.DefaultCaret_Methods|

====================================================================================================================================================================================

*javax.swing.text.DefaultCaret_Fields*
|int_javax.swing.text.DefaultCaret.ALWAYS_UPDATE|
|javax.swing.event.ChangeEvent_javax.swing.text.DefaultCaret.changeEvent|
|javax.swing.event.EventListenerList_javax.swing.text.DefaultCaret.listenerList|
|int_javax.swing.text.DefaultCaret.NEVER_UPDATE|
|int_javax.swing.text.DefaultCaret.UPDATE_WHEN_ON_EDT|

*javax.swing.text.DefaultCaret_Constructors*
|javax.swing.text.DefaultCaret()|Constructs a default caret.

*javax.swing.text.DefaultCaret_Methods*
|javax.swing.text.DefaultCaret.addChangeListener(ChangeListener)|Adds a listener to track whenever the caret position has  been changed.
|javax.swing.text.DefaultCaret.adjustVisibility(Rectangle)|Scrolls the associated view (if necessary) to make  the caret visible.
|javax.swing.text.DefaultCaret.damage(Rectangle)|Damages the area surrounding the caret to cause  it to be repainted in a new location.
|javax.swing.text.DefaultCaret.deinstall(JTextComponent)|Called when the UI is being removed from the  interface of a JTextComponent.
|javax.swing.text.DefaultCaret.equals(Object)|Compares this object to the specified object.
|javax.swing.text.DefaultCaret.fireStateChanged()|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.text.DefaultCaret.focusGained(FocusEvent)|Called when the component containing the caret gains  focus.
|javax.swing.text.DefaultCaret.focusLost(FocusEvent)|Called when the component containing the caret loses  focus.
|javax.swing.text.DefaultCaret.getBlinkRate()|Gets the caret blink rate.
|javax.swing.text.DefaultCaret.getChangeListeners()|Returns an array of all the change listeners  registered on this caret.
|javax.swing.text.DefaultCaret.getComponent()|Gets the text editor component that this caret is   is bound to.
|javax.swing.text.DefaultCaret.getDot()|Fetches the current position of the caret.
|javax.swing.text.DefaultCaret.getListeners(Class<T>)|Returns an array of all the objects currently registered  as FooListeners  upon this caret.
|javax.swing.text.DefaultCaret.getMagicCaretPosition()|Gets the saved caret position.
|javax.swing.text.DefaultCaret.getMark()|Fetches the current position of the mark.
|javax.swing.text.DefaultCaret.getSelectionPainter()|Gets the painter for the Highlighter.
|javax.swing.text.DefaultCaret.getUpdatePolicy()|Gets the caret movement policy on document updates.
|javax.swing.text.DefaultCaret.install(JTextComponent)|Called when the UI is being installed into the  interface of a JTextComponent.
|javax.swing.text.DefaultCaret.isActive()|Determines if the caret is currently active.
|javax.swing.text.DefaultCaret.isSelectionVisible()|Checks whether the current selection is visible.
|javax.swing.text.DefaultCaret.isVisible()|Indicates whether or not the caret is currently visible.
|javax.swing.text.DefaultCaret.mouseClicked(MouseEvent)|Called when the mouse is clicked.
|javax.swing.text.DefaultCaret.mouseDragged(MouseEvent)|Moves the caret position   according to the mouse pointer's current  location.
|javax.swing.text.DefaultCaret.mouseEntered(MouseEvent)|Called when the mouse enters a region.
|javax.swing.text.DefaultCaret.mouseExited(MouseEvent)|Called when the mouse exits a region.
|javax.swing.text.DefaultCaret.mouseMoved(MouseEvent)|Called when the mouse is moved.
|javax.swing.text.DefaultCaret.mousePressed(MouseEvent)|If button 1 is pressed, this is implemented to  request focus on the associated text component,   and to set the caret posi
|javax.swing.text.DefaultCaret.mouseReleased(MouseEvent)|Called when the mouse is released.
|javax.swing.text.DefaultCaret.moveCaret(MouseEvent)|Tries to move the position of the caret from  the coordinates of a mouse event, using viewToModel().
|javax.swing.text.DefaultCaret.moveDot(int)|Moves the caret position to some other position.
|javax.swing.text.DefaultCaret.paint(Graphics)|Renders the caret as a vertical line.
|javax.swing.text.DefaultCaret.positionCaret(MouseEvent)|Tries to set the position of the caret from  the coordinates of a mouse event, using viewToModel().
|javax.swing.text.DefaultCaret.removeChangeListener(ChangeListener)|Removes a listener that was tracking caret position changes.
|javax.swing.text.DefaultCaret.repaint()|Cause the caret to be painted.
|javax.swing.text.DefaultCaret.setBlinkRate(int)|Sets the caret blink rate.
|javax.swing.text.DefaultCaret.setDot(int)|Sets the caret position and mark to some position.
|javax.swing.text.DefaultCaret.setMagicCaretPosition(Point)|Saves the current caret position.
|javax.swing.text.DefaultCaret.setSelectionVisible(boolean)|Changes the selection visibility.
|javax.swing.text.DefaultCaret.setUpdatePolicy(int)|Sets the caret movement policy on the document updates.
|javax.swing.text.DefaultCaret.setVisible(boolean)|Sets the caret visibility, and repaints the caret.
|javax.swing.text.DefaultCaret.toString()|

*javax.swing.text.DefaultCaret_Description*

A default implementation of Caret. The caret is rendered as a vertical line in the color specified by the CaretColor property of the associated JTextComponent. It can blink at the 
rate specified by the BlinkRate property. 

This implementation expects two sources of asynchronous notification. The timer thread fires asynchronously, and causes the caret to simply repaint the most recent bounding box. 
The caret also tracks change as the document is modified. Typically this will happen on the event dispatch thread as a result of some mouse or keyboard event. The caret behavior 
on both synchronous and asynchronous documents updates is controlled by UpdatePolicy property. The repaint of the new caret location will occur on the event thread in any case, as 
calls to modelToView are only safe on the event thread. 

The caret acts as a mouse and focus listener on the text component it has been installed in, and defines the caret semantics based upon those events. The listener methods can be 
reimplemented to change the semantics. By default, the first mouse button will be used to set focus and caret position. Dragging the mouse pointer with the first mouse button will 
sweep out a selection that is contiguous in the model. If the associated text component is editable, the caret will become visible when focus is gained, and invisible when focus 
is lost. 

The Highlighter bound to the associated text component is used to render the selection by default. Selection appearance can be customized by supplying a painter to use for the 
highlights. By default a painter is used that will render a solid color as specified in the associated text component in the SelectionColor property. This can easily be changed by 
reimplementing the getSelectionHighlighter method. 

A customized caret appearance can be achieved by reimplementing the paint method. If the paint method is changed, the damage method should also be reimplemented to cause a repaint 
for the area needed to render the caret. The caret extends the Rectangle class which is used to hold the bounding box for where the caret was last rendered. This enables the caret 
to repaint in a thread-safe manner when the caret moves without making a call to modelToView which is unstable between model updates and view repair (i.e. the order of delivery to 
DocumentListeners is not guaranteed). 

The magic caret position is set to null when the caret position changes. A timer is used to determine the new location (after the caret change). When the timer fires, if the magic 
caret position is still null it is reset to the current caret position. Any actions that change the caret position and want the magic caret position to remain the same, must 
remember the magic caret position, change the cursor, and then set the magic caret position to its original value. This has the benefit that only actions that want the magic caret 
position to persist (such as open/down) need to know about it. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*int_javax.swing.text.DefaultCaret.ALWAYS_UPDATE*

Indicates that the caret position is to be always updated accordingly to the document changes regardless whether the document updates are performed on the Event Dispatching Thread 
or not. 


*javax.swing.event.ChangeEvent_javax.swing.text.DefaultCaret.changeEvent*

The change event for the model. Only one ChangeEvent is needed per model instance since the event's only (read-only) state is the source property. The source of events generated 
here is always "this". 


*javax.swing.event.EventListenerList_javax.swing.text.DefaultCaret.listenerList*

The event listener list. 


*int_javax.swing.text.DefaultCaret.NEVER_UPDATE*

Indicates that the caret should remain at the same absolute position in the document regardless of any document updates, except when the document length becomes less than the 
current caret position due to removal. In that case the caret position is adjusted to the end of the document. 


*int_javax.swing.text.DefaultCaret.UPDATE_WHEN_ON_EDT*

Indicates that the caret position is to be updated only when document changes are performed on the Event Dispatching Thread. 



*javax.swing.text.DefaultCaret()*

public DefaultCaret()

Constructs a default caret. 


*javax.swing.text.DefaultCaret.addChangeListener(ChangeListener)*

public void addChangeListener(javax.swing.event.ChangeListener l)

Adds a listener to track whenever the caret position has been changed. 


    l - the listener 

*javax.swing.text.DefaultCaret.adjustVisibility(Rectangle)*

protected void adjustVisibility(java.awt.Rectangle nloc)

Scrolls the associated view (if necessary) to make the caret visible. Since how this should be done is somewhat of a policy, this method can be reimplemented to change the 
behavior. By default the scrollRectToVisible method is called on the associated component. 


    nloc - the new position to scroll to 

*javax.swing.text.DefaultCaret.damage(Rectangle)*

protected synchronized void damage(java.awt.Rectangle r)

Damages the area surrounding the caret to cause it to be repainted in a new location. If paint() is reimplemented, this method should also be reimplemented. This method should 
update the caret bounds (x, y, width, and height). 


    r - the current location of the caret 

*javax.swing.text.DefaultCaret.deinstall(JTextComponent)*

public void deinstall(javax.swing.text.JTextComponent c)

Called when the UI is being removed from the interface of a JTextComponent. This is used to unregister any listeners that were attached. 


    c - the component 

*javax.swing.text.DefaultCaret.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this object to the specified object. The superclass behavior of comparing rectangles is not desired, so this is changed to the Object behavior. 


    obj - the object to compare this font with 

    Returns: true if the objects are equal; false otherwise 

*javax.swing.text.DefaultCaret.fireStateChanged()*

protected void fireStateChanged()

Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created using the parameters passed into the fire method. 
The listener list is processed last to first. 



*javax.swing.text.DefaultCaret.focusGained(FocusEvent)*

public void focusGained(java.awt.event.FocusEvent e)

Called when the component containing the caret gains focus. This is implemented to set the caret to visible if the component is editable. 


    e - the focus event 

*javax.swing.text.DefaultCaret.focusLost(FocusEvent)*

public void focusLost(java.awt.event.FocusEvent e)

Called when the component containing the caret loses focus. This is implemented to set the caret to visibility to false. 


    e - the focus event 

*javax.swing.text.DefaultCaret.getBlinkRate()*

public int getBlinkRate()

Gets the caret blink rate. 



    Returns: the delay in milliseconds. If this is zero the caret will not blink. 

*javax.swing.text.DefaultCaret.getChangeListeners()*

public |javax.swing.event.ChangeListener|[] getChangeListeners()

Returns an array of all the change listeners registered on this caret. 



    Returns: all of this caret's ChangeListeners or an empty array if no change listeners are currently registered 

*javax.swing.text.DefaultCaret.getComponent()*

protected final |javax.swing.text.JTextComponent| getComponent()

Gets the text editor component that this caret is is bound to. 



    Returns: the component 

*javax.swing.text.DefaultCaret.getDot()*

public int getDot()

Fetches the current position of the caret. 



    Returns: the position >= 0 

*javax.swing.text.DefaultCaret.getListeners(Class<T>)*

public |T|[] getListeners(java.lang.Class<T> listenerType)

Returns an array of all the objects currently registered as FooListeners upon this caret. FooListeners are registered using the addFooListener method. 



You can specify the listenerType argument with a class literal, such as FooListener.class. For example, you can query a DefaultCaret c for its change listeners with the following 
code: 

ChangeListener[] cls = (ChangeListener[])(c.getListeners(ChangeListener.class)); 

If no such listeners exist, this method returns an empty array. 


    listenerType - the type of listeners requested; this parameter should specify an interface that descends from java.util.EventListener 

    Returns: an array of all objects registered as FooListeners on this component, or an empty array if no such listeners have been added 

*javax.swing.text.DefaultCaret.getMagicCaretPosition()*

public |java.awt.Point| getMagicCaretPosition()

Gets the saved caret position. 



    Returns: the position see #setMagicCaretPosition 

*javax.swing.text.DefaultCaret.getMark()*

public int getMark()

Fetches the current position of the mark. If there is a selection, the dot and mark will not be the same. 



    Returns: the position >= 0 

*javax.swing.text.DefaultCaret.getSelectionPainter()*

protected |javax.swing.text.Highlighter.HighlightPainter| getSelectionPainter()

Gets the painter for the Highlighter. 



    Returns: 

*javax.swing.text.DefaultCaret.getUpdatePolicy()*

public int getUpdatePolicy()

Gets the caret movement policy on document updates. 



    Returns: one of the following values : UPDATE_WHEN_ON_EDT, NEVER_UPDATE, ALWAYS_UPDATE 

*javax.swing.text.DefaultCaret.install(JTextComponent)*

public void install(javax.swing.text.JTextComponent c)

Called when the UI is being installed into the interface of a JTextComponent. This can be used to gain access to the model that is being navigated by the implementation of this 
interface. Sets the dot and mark to 0, and establishes document, property change, focus, mouse, and mouse motion listeners. 


    c - the component 

*javax.swing.text.DefaultCaret.isActive()*

public boolean isActive()

Determines if the caret is currently active. 

This method returns whether or not the Caret is currently in a blinking state. It does not provide information as to whether it is currently blinked on or off. To determine if the 
caret is currently painted use the isVisible method. 



    Returns: true if active else false 

*javax.swing.text.DefaultCaret.isSelectionVisible()*

public boolean isSelectionVisible()

Checks whether the current selection is visible. 



    Returns: true if the selection is visible 

*javax.swing.text.DefaultCaret.isVisible()*

public boolean isVisible()

Indicates whether or not the caret is currently visible. As the caret flashes on and off the return value of this will change between true, when the caret is painted, and false, 
when the caret is not painted. isActive indicates whether or not the caret is in a blinking state, such that it can be visible, and isVisible indicates whether or not the caret is 
actually visible. 

Subclasses that wish to render a different flashing caret should override paint and only paint the caret if this method returns true. 



    Returns: true if visible else false 

*javax.swing.text.DefaultCaret.mouseClicked(MouseEvent)*

public void mouseClicked(java.awt.event.MouseEvent e)

Called when the mouse is clicked. If the click was generated from button1, a double click selects a word, and a triple click the current line. 


    e - the mouse event 

*javax.swing.text.DefaultCaret.mouseDragged(MouseEvent)*

public void mouseDragged(java.awt.event.MouseEvent e)

Moves the caret position according to the mouse pointer's current location. This effectively extends the selection. By default, this is only done for mouse button 1. 


    e - the mouse event 

*javax.swing.text.DefaultCaret.mouseEntered(MouseEvent)*

public void mouseEntered(java.awt.event.MouseEvent e)

Called when the mouse enters a region. 


    e - the mouse event 

*javax.swing.text.DefaultCaret.mouseExited(MouseEvent)*

public void mouseExited(java.awt.event.MouseEvent e)

Called when the mouse exits a region. 


    e - the mouse event 

*javax.swing.text.DefaultCaret.mouseMoved(MouseEvent)*

public void mouseMoved(java.awt.event.MouseEvent e)

Called when the mouse is moved. 


    e - the mouse event 

*javax.swing.text.DefaultCaret.mousePressed(MouseEvent)*

public void mousePressed(java.awt.event.MouseEvent e)

If button 1 is pressed, this is implemented to request focus on the associated text component, and to set the caret position. If the shift key is held down, the caret will be 
moved, potentially resulting in a selection, otherwise the caret position will be set to the new location. If the component is not enabled, there will be no request for focus. 


    e - the mouse event 

*javax.swing.text.DefaultCaret.mouseReleased(MouseEvent)*

public void mouseReleased(java.awt.event.MouseEvent e)

Called when the mouse is released. 


    e - the mouse event 

*javax.swing.text.DefaultCaret.moveCaret(MouseEvent)*

protected void moveCaret(java.awt.event.MouseEvent e)

Tries to move the position of the caret from the coordinates of a mouse event, using viewToModel(). This will cause a selection if the dot and mark are different. 


    e - the mouse event 

*javax.swing.text.DefaultCaret.moveDot(int)*

public void moveDot(int dot)

Moves the caret position to some other position. 


    dot - the position >= 0 

*javax.swing.text.DefaultCaret.paint(Graphics)*

public void paint(java.awt.Graphics g)

Renders the caret as a vertical line. If this is reimplemented the damage method should also be reimplemented as it assumes the shape of the caret is a vertical line. Sets the 
caret color to the value returned by getCaretColor(). 

If there are multiple text directions present in the associated document, a flag indicating the caret bias will be rendered. This will occur only if the associated document is a 
subclass of AbstractDocument and there are multiple bidi levels present in the bidi element structure (i.e. the text has multiple directions associated with it). 


    g - the graphics context 

*javax.swing.text.DefaultCaret.positionCaret(MouseEvent)*

protected void positionCaret(java.awt.event.MouseEvent e)

Tries to set the position of the caret from the coordinates of a mouse event, using viewToModel(). 


    e - the mouse event 

*javax.swing.text.DefaultCaret.removeChangeListener(ChangeListener)*

public void removeChangeListener(javax.swing.event.ChangeListener l)

Removes a listener that was tracking caret position changes. 


    l - the listener 

*javax.swing.text.DefaultCaret.repaint()*

protected final synchronized void repaint()

Cause the caret to be painted. The repaint area is the bounding box of the caret (i.e. the caret rectangle or this). 

This method is thread safe, although most Swing methods are not. Please see 

Threads and Swing for more information. 



*javax.swing.text.DefaultCaret.setBlinkRate(int)*

public void setBlinkRate(int rate)

Sets the caret blink rate. 


    rate - the rate in milliseconds, 0 to stop blinking 

*javax.swing.text.DefaultCaret.setDot(int)*

public void setDot(int dot)

Sets the caret position and mark to some position. This implicitly sets the selection range to zero. 


    dot - the position >= 0 

*javax.swing.text.DefaultCaret.setMagicCaretPosition(Point)*

public void setMagicCaretPosition(java.awt.Point p)

Saves the current caret position. This is used when caret up/down actions occur, moving between lines that have uneven end positions. 


    p - the position 

*javax.swing.text.DefaultCaret.setSelectionVisible(boolean)*

public void setSelectionVisible(boolean vis)

Changes the selection visibility. 


    vis - the new visibility 

*javax.swing.text.DefaultCaret.setUpdatePolicy(int)*

public void setUpdatePolicy(int policy)

Sets the caret movement policy on the document updates. Normally the caret updates its absolute position within the document on insertions occurred before or at the caret position 
and on removals before the caret position. 'Absolute position' means here the position relative to the start of the document. For example if a character is typed within editable 
text component it is inserted at the caret position and the caret moves to the next absolute position within the document due to insertion and if BACKSPACE is typed then caret 
decreases its absolute position due to removal of a character before it. Sometimes it may be useful to turn off the caret position updates so that the caret stays at the same 
absolute position within the document position regardless of any document updates. 

The following update policies are allowed: 

NEVER_UPDATE: the caret stays at the same absolute position in the document regardless of any document updates, except when document length becomes less than the current caret 
position due to removal. In that case caret position is adjusted to the end of the document. The caret doesn't try to keep itself visible by scrolling the associated view when 
using this policy. ALWAYS_UPDATE: the caret always tracks document changes. For regular changes it increases its position if an insertion occurs before or at its current position, 
and decreases position if a removal occurs before its current position. For undo/redo updates it is always moved to the position where update occurred. The caret also tries to 
keep itself visible by calling adjustVisibility method. UPDATE_WHEN_ON_EDT: acts like ALWAYS_UPDATE if the document updates are performed on the Event Dispatching Thread and like 
NEVER_UPDATE if updates are performed on other thread. 

The default property value is UPDATE_WHEN_ON_EDT. 


    policy - one of the following values : UPDATE_WHEN_ON_EDT, NEVER_UPDATE, ALWAYS_UPDATE 

*javax.swing.text.DefaultCaret.setVisible(boolean)*

public void setVisible(boolean e)

Sets the caret visibility, and repaints the caret. It is important to understand the relationship between this method, isVisible and isActive. Calling this method with a value of 
true activates the caret blinking. Setting it to false turns it completely off. To determine whether the blinking is active, you should call isActive. In effect, isActive is an 
appropriate corresponding "getter" method for this one. isVisible can be used to fetch the current visibility status of the caret, meaning whether or not it is currently painted. 
This status will change as the caret blinks on and off. 

Here's a list showing the potential return values of both isActive and isVisible after calling this method: 

setVisible(true): 

isActive(): true isVisible(): true or false depending on whether or not the caret is blinked on or off 

setVisible(false): 

isActive(): false isVisible(): false 


    e - the visibility specifier 

*javax.swing.text.DefaultCaret.toString()*

public |java.lang.String| toString()







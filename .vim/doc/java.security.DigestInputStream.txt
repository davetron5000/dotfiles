*java.security.DigestInputStream* *DigestInputStream* A transparent stream that 

public class DigestInputStream
  extends    |java.io.FilterInputStream|

|java.security.DigestInputStream_Description|
|java.security.DigestInputStream_Fields|
|java.security.DigestInputStream_Constructors|
|java.security.DigestInputStream_Methods|

================================================================================

*java.security.DigestInputStream_Fields*
|java.security.MessageDigest_java.security.DigestInputStream.digest|

*java.security.DigestInputStream_Constructors*
|java.security.DigestInputStream(InputStream,MessageDigest)|Creates a digest in

*java.security.DigestInputStream_Methods*
|java.security.DigestInputStream.getMessageDigest()|Returns the message digest 
|java.security.DigestInputStream.on(boolean)|Turns the digest function on or of
|java.security.DigestInputStream.read()|Reads a byte, and updates the message d
|java.security.DigestInputStream.read(byte[],int,int)|Reads into a byte array, 
|java.security.DigestInputStream.setMessageDigest(MessageDigest)|Associates the
|java.security.DigestInputStream.toString()|Prints a string representation of t

*java.security.DigestInputStream_Description*

A transparent stream that updates the associated message digest using the bits 
going through the stream. 

To complete the message digest computation, call one of the digest methods on 
the associated message digest after your calls to one of this digest input 
stream's read(|java.security.DigestInputStream|) methods. 

It is possible to turn this stream on or off (see 
on(|java.security.DigestInputStream|) ). When it is on, a call to one of the 
read methods results in an update on the message digest. But when it is off, 
the message digest is not updated. The default is for the stream to be on. 

Note that digest objects can compute only one digest (see 
(|java.security.MessageDigest|) ), so that in order to compute intermediate 
digests, a caller should retain a handle onto the digest object, and clone it 
for each digest to be computed, leaving the orginal digest untouched. 


*java.security.MessageDigest_java.security.DigestInputStream.digest*

A transparent stream that updates the associated message digest using the bits 
going through the stream. 

To complete the message digest computation, call one of the digest methods on 
the associated message digest after your calls to one of this digest input 
stream's read(|java.security.DigestInputStream|) methods. 

It is possible to turn this stream on or off (see 
on(|java.security.DigestInputStream|) ). When it is on, a call to one of the 
read methods results in an update on the message digest. But when it is off, 
the message digest is not updated. The default is for the stream to be on. 

Note that digest objects can compute only one digest (see 
(|java.security.MessageDigest|) ), so that in order to compute intermediate 
digests, a caller should retain a handle onto the digest object, and clone it 
for each digest to be computed, leaving the orginal digest untouched. 



*java.security.DigestInputStream(InputStream,MessageDigest)*

public DigestInputStream(
  java.io.InputStream stream,
  java.security.MessageDigest digest)

Creates a digest input stream, using the specified input stream and message 
digest. 

    stream - the input stream. 
    digest - the message digest to associate with this stream. 

*java.security.DigestInputStream.getMessageDigest()*

public |java.security.MessageDigest| getMessageDigest()

Returns the message digest associated with this stream. 


    Returns: the message digest associated with this stream. 
*java.security.DigestInputStream.on(boolean)*

public void on(boolean on)

Turns the digest function on or off. The default is on. When it is on, a call 
to one of the read methods results in an update on the message digest. But when 
it is off, the message digest is not updated. 

    on - true to turn the digest function on, false to turn it off. 

*java.security.DigestInputStream.read()*

public int read()
  throws |java.io.IOException|
         
Reads a byte, and updates the message digest (if the digest function is on). 
That is, this method reads a byte from the input stream, blocking until the 
byte is actually read. If the digest function is on (see 
on(|java.security.DigestInputStream|) ), this method will then call update on 
the message digest associated with this stream, passing it the byte read. 


    Returns: the byte read. 
*java.security.DigestInputStream.read(byte[],int,int)*

public int read(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Reads into a byte array, and updates the message digest (if the digest function 
is on). That is, this method reads up to len bytes from the input stream into 
the array b, starting at offset off. This method blocks until the data is 
actually read. If the digest function is on (see 
on(|java.security.DigestInputStream|) ), this method will then call update on 
the message digest associated with this stream, passing it the data. 

    b - the array into which the data is read. 
    off - the starting offset into b of where the data should be placed. 
    len - the maximum number of bytes to be read from the input stream into b, starting 
       at offset off. 

    Returns: the actual number of bytes read. This is less than len if the end of the stream 
             is reached prior to reading len bytes. -1 is returned if no bytes 
             were read because the end of the stream had already been reached 
             when the call was made. 
*java.security.DigestInputStream.setMessageDigest(MessageDigest)*

public void setMessageDigest(java.security.MessageDigest digest)

Associates the specified message digest with this stream. 

    digest - the message digest to be associated with this stream. 

*java.security.DigestInputStream.toString()*

public |java.lang.String| toString()

Prints a string representation of this digest input stream and its associated 
message digest object. 




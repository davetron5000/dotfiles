*javax.swing.text.Segment* *Segment* A segment of a character array representing

public class Segment
  extends    |java.lang.Object|
  implements |java.lang.Cloneable|
             |java.text.CharacterIterator|

|javax.swing.text.Segment_Description|
|javax.swing.text.Segment_Fields|
|javax.swing.text.Segment_Constructors|
|javax.swing.text.Segment_Methods|

================================================================================

*javax.swing.text.Segment_Fields*
|char[]_javax.swing.text.Segment.array|
|int_javax.swing.text.Segment.count|
|int_javax.swing.text.Segment.offset|

*javax.swing.text.Segment_Constructors*
|javax.swing.text.Segment()|Creates a new segment.
|javax.swing.text.Segment(char[],int,int)|Creates a new segment referring to an

*javax.swing.text.Segment_Methods*
|javax.swing.text.Segment.clone()|Creates a shallow copy.
|javax.swing.text.Segment.current()|Gets the character at the current position 
|javax.swing.text.Segment.first()|Sets the position to getBeginIndex() and retu
|javax.swing.text.Segment.getBeginIndex()|Returns the start index of the text.
|javax.swing.text.Segment.getEndIndex()|Returns the end index of the text.
|javax.swing.text.Segment.getIndex()|Returns the current index.
|javax.swing.text.Segment.isPartialReturn()|Flag to indicate that partial retur
|javax.swing.text.Segment.last()|Sets the position to getEndIndex()-1 (getEndIn
|javax.swing.text.Segment.next()|Increments the iterator's index by one and ret
|javax.swing.text.Segment.previous()|Decrements the iterator's index by one and
|javax.swing.text.Segment.setIndex(int)|Sets the position to the specified posi
|javax.swing.text.Segment.setPartialReturn(boolean)|Flag to indicate that parti
|javax.swing.text.Segment.toString()|Converts a segment into a String.

*javax.swing.text.Segment_Description*

A segment of a character array representing a fragment of text. It should be 
treated as immutable even though the array is directly accessible. This gives 
fast access to fragments of text without the overhead of copying around 
characters. This is effectively an unprotected String. 

The Segment implements the java.text.CharacterIterator interface to support use 
with the i18n support without copying text into a string. 


*char[]_javax.swing.text.Segment.array*

A segment of a character array representing a fragment of text. It should be 
treated as immutable even though the array is directly accessible. This gives 
fast access to fragments of text without the overhead of copying around 
characters. This is effectively an unprotected String. 

The Segment implements the java.text.CharacterIterator interface to support use 
with the i18n support without copying text into a string. 


*int_javax.swing.text.Segment.count*

A segment of a character array representing a fragment of text. It should be 
treated as immutable even though the array is directly accessible. This gives 
fast access to fragments of text without the overhead of copying around 
characters. This is effectively an unprotected String. 

The Segment implements the java.text.CharacterIterator interface to support use 
with the i18n support without copying text into a string. 


*int_javax.swing.text.Segment.offset*

A segment of a character array representing a fragment of text. It should be 
treated as immutable even though the array is directly accessible. This gives 
fast access to fragments of text without the overhead of copying around 
characters. This is effectively an unprotected String. 

The Segment implements the java.text.CharacterIterator interface to support use 
with the i18n support without copying text into a string. 



*javax.swing.text.Segment()*

public Segment()

Creates a new segment. 


*javax.swing.text.Segment(char[],int,int)*

public Segment(
  char[] array,
  int offset,
  int count)

Creates a new segment referring to an existing array. 

    array - the array to refer to 
    offset - the offset into the array 
    count - the number of characters 

*javax.swing.text.Segment.clone()*

public |java.lang.Object| clone()

Creates a shallow copy. 


    Returns: 
*javax.swing.text.Segment.current()*

public char current()

Gets the character at the current position (as returned by getIndex()). 


    Returns: the character at the current position or DONE if the current position is off 
             the end of the text. 
*javax.swing.text.Segment.first()*

public char first()

Sets the position to getBeginIndex() and returns the character at that 
position. 


    Returns: the first character in the text, or DONE if the text is empty 
*javax.swing.text.Segment.getBeginIndex()*

public int getBeginIndex()

Returns the start index of the text. 


    Returns: the index at which the text begins. 
*javax.swing.text.Segment.getEndIndex()*

public int getEndIndex()

Returns the end index of the text. This index is the index of the first 
character following the end of the text. 


    Returns: the index after the last character in the text 
*javax.swing.text.Segment.getIndex()*

public int getIndex()

Returns the current index. 


    Returns: the current index. 
*javax.swing.text.Segment.isPartialReturn()*

public boolean isPartialReturn()

Flag to indicate that partial returns are valid. 


    Returns: whether or not partial returns are valid. 
*javax.swing.text.Segment.last()*

public char last()

Sets the position to getEndIndex()-1 (getEndIndex() if the text is empty) and 
returns the character at that position. 


    Returns: the last character in the text, or DONE if the text is empty 
*javax.swing.text.Segment.next()*

public char next()

Increments the iterator's index by one and returns the character at the new 
index. If the resulting index is greater or equal to getEndIndex(), the current 
index is reset to getEndIndex() and a value of DONE is returned. 


    Returns: the character at the new position or DONE if the new position is off the end of 
             the text range. 
*javax.swing.text.Segment.previous()*

public char previous()

Decrements the iterator's index by one and returns the character at the new 
index. If the current index is getBeginIndex(), the index remains at 
getBeginIndex() and a value of DONE is returned. 


    Returns: the character at the new position or DONE if the current position is equal to 
             getBeginIndex(). 
*javax.swing.text.Segment.setIndex(int)*

public char setIndex(int position)

Sets the position to the specified position in the text and returns that 
character. 

    position - the position within the text. Valid values range from getBeginIndex() to 
       getEndIndex(). An IllegalArgumentException is thrown if an invalid value 
       is supplied. 

    Returns: the character at the specified position or DONE if the specified position is 
             equal to getEndIndex() 
*javax.swing.text.Segment.setPartialReturn(boolean)*

public void setPartialReturn(boolean p)

Flag to indicate that partial returns are valid. If the flag is true, an 
implementation of the interface method 
Document.getText(position,length,Segment) should return as much text as 
possible without making a copy. The default state of the flag is false which 
will cause Document.getText(position,length,Segment) to provide the same return 
behavior it always had, which may or may not make a copy of the text depending 
upon the request. 

    p - whether or not partial returns are valid. 

*javax.swing.text.Segment.toString()*

public |java.lang.String| toString()

Converts a segment into a String. 


    Returns: 


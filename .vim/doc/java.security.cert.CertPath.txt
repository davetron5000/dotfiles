*java.security.cert.CertPath* *CertPath* An immutable sequence of certificates (

public abstract class CertPath
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.security.cert.CertPath_Description|
|java.security.cert.CertPath_Fields|
|java.security.cert.CertPath_Constructors|
|java.security.cert.CertPath_Methods|

================================================================================

*java.security.cert.CertPath_Constructors*
|java.security.cert.CertPath(String)|Creates a CertPath of the specified type.

*java.security.cert.CertPath_Methods*
|java.security.cert.CertPath.equals(Object)|Compares this certification path fo
|java.security.cert.CertPath.getCertificates()|Returns the list of certificates
|java.security.cert.CertPath.getEncoded()|Returns the encoded form of this cert
|java.security.cert.CertPath.getEncoded(String)|Returns the encoded form of thi
|java.security.cert.CertPath.getEncodings()|Returns an iteration of the encodin
|java.security.cert.CertPath.getType()|Returns the type of Certificates in this
|java.security.cert.CertPath.hashCode()|Returns the hashcode for this certifica
|java.security.cert.CertPath.toString()|Returns a string representation of this
|java.security.cert.CertPath.writeReplace()|Replaces the CertPath to be seriali

*java.security.cert.CertPath_Description*

An immutable sequence of certificates (a certification path). 

This is an abstract class that defines the methods common to all CertPaths. 
Subclasses can handle different kinds of certificates (X.509, PGP, etc.). 

All CertPath objects have a type, a list of Certificates, and one or more 
supported encodings. Because the CertPath class is immutable, a CertPath cannot 
change in any externally visible way after being constructed. This stipulation 
applies to all public fields and methods of this class and any added or 
overridden by subclasses. 

The type is a String that identifies the type of Certificates in the 
certification path. For each certificate cert in a certification path certPath, 
cert.getType().equals(certPath.getType()) must be true. 

The list of Certificates is an ordered List of zero or more Certificates. This 
List and all of the Certificates contained in it must be immutable. 

Each CertPath object must support one or more encodings so that the object can 
be translated into a byte array for storage or transmission to other parties. 
Preferably, these encodings should be well-documented standards (such as 
PKCS#7). One of the encodings supported by a CertPath is considered the default 
encoding. This encoding is used if no encoding is explicitly requested (for the 
getEncoded()(|java.security.cert.CertPath|) method, for instance). 

All CertPath objects are also Serializable. CertPath objects are resolved into 
an alternate CertPathRep(|java.security.cert.CertPath.CertPathRep|) object 
during serialization. This allows a CertPath object to be serialized into an 
equivalent representation regardless of its underlying implementation. 

CertPath objects can be created with a CertificateFactory or they can be 
returned by other classes, such as a CertPathBuilder. 

By convention, X.509 CertPaths (consisting of X509Certificates), are ordered 
starting with the target certificate and ending with a certificate issued by 
the trust anchor. That is, the issuer of one certificate is the subject of the 
following one. The certificate representing the 
TrustAnchor(|java.security.cert.TrustAnchor|) should not be included in the 
certification path. Unvalidated X.509 CertPaths may not follow these 
conventions. PKIX CertPathValidators will detect any departure from these 
conventions that cause the certification path to be invalid and throw a 
CertPathValidatorException. 

Concurrent Access 

All CertPath objects must be thread-safe. That is, multiple threads may 
concurrently invoke the methods defined in this class on a single CertPath 
object (or more than one) with no ill effects. This is also true for the List 
returned by CertPath.getCertificates. 

Requiring CertPath objects to be immutable and thread-safe allows them to be 
passed around to various pieces of code without worrying about coordinating 
access. Providing this thread-safety is generally not difficult, since the 
CertPath and List objects in question are immutable. 


*java.security.cert.CertPath(String)*

protected CertPath(java.lang.String type)

Creates a CertPath of the specified type. 

This constructor is protected because most users should use a 
CertificateFactory to create CertPaths. 

    type - the standard name of the type of Certificates in this path 

*java.security.cert.CertPath.equals(Object)*

public boolean equals(java.lang.Object other)

Compares this certification path for equality with the specified object. Two 
CertPaths are equal if and only if their types are equal and their certificate 
Lists (and by implication the Certificates in those Lists) are equal. A 
CertPath is never equal to an object that is not a CertPath. 

This algorithm is implemented by this method. If it is overridden, the behavior 
specified here must be maintained. 

    other - the object to test for equality with this certification path 

    Returns: true if the specified object is equal to this certification path, false 
             otherwise 
*java.security.cert.CertPath.getCertificates()*

public abstract |java.util.List| getCertificates()

Returns the list of certificates in this certification path. The List returned 
must be immutable and thread-safe. 


    Returns: an immutable List of Certificates (may be empty, but not null) 
*java.security.cert.CertPath.getEncoded()*

public abstract byte getEncoded()
  throws |java.security.cert.CertificateEncodingException|
         
Returns the encoded form of this certification path, using the default 
encoding. 


    Returns: the encoded bytes 
*java.security.cert.CertPath.getEncoded(String)*

public abstract byte getEncoded(java.lang.String encoding)
  throws |java.security.cert.CertificateEncodingException|
         
Returns the encoded form of this certification path, using the specified 
encoding. 

    encoding - the name of the encoding to use 

    Returns: the encoded bytes 
*java.security.cert.CertPath.getEncodings()*

public abstract |java.util.Iterator| getEncodings()

Returns an iteration of the encodings supported by this certification path, 
with the default encoding first. Attempts to modify the returned Iterator via 
its remove method result in an UnsupportedOperationException. 


    Returns: an Iterator over the names of the supported encodings (as Strings) 
*java.security.cert.CertPath.getType()*

public |java.lang.String| getType()

Returns the type of Certificates in this certification path. This is the same 
string that would be returned by 
cert.getType()(|java.security.cert.Certificate|) for all Certificates in the 
certification path. 


    Returns: the type of Certificates in this certification path (never null) 
*java.security.cert.CertPath.hashCode()*

public int hashCode()

Returns the hashcode for this certification path. The hash code of a 
certification path is defined to be the result of the following calculation: 

hashCode = path.getType().hashCode(); hashCode = 31*hashCode + 
path.getCertificates().hashCode(); 

This ensures that path1.equals(path2) implies that 
path1.hashCode()==path2.hashCode() for any two certification paths, path1 and 
path2, as required by the general contract of Object.hashCode. 


    Returns: the hashcode value for this certification path 
*java.security.cert.CertPath.toString()*

public |java.lang.String| toString()

Returns a string representation of this certification path. This calls the 
toString method on each of the Certificates in the path. 


    Returns: a string representation of this certification path 
*java.security.cert.CertPath.writeReplace()*

protected |java.lang.Object| writeReplace()
  throws |java.io.ObjectStreamException|
         
Replaces the CertPath to be serialized with a CertPathRep object. 


    Returns: the CertPathRep to be serialized 


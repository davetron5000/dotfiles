*javax.swing.FocusManager* *FocusManager* This class has been obsoleted by the 1

public abstract class FocusManager
  extends    |java.awt.DefaultKeyboardFocusManager|

|javax.swing.FocusManager_Description|
|javax.swing.FocusManager_Fields|
|javax.swing.FocusManager_Constructors|
|javax.swing.FocusManager_Methods|

================================================================================

*javax.swing.FocusManager_Fields*
|java.lang.String_javax.swing.FocusManager.FOCUS_MANAGER_CLASS_PROPERTY|

*javax.swing.FocusManager_Constructors*
|javax.swing.FocusManager()|

*javax.swing.FocusManager_Methods*
|javax.swing.FocusManager.disableSwingFocusManager()|Changes the current Keyboa
|javax.swing.FocusManager.getCurrentManager()|Returns the current KeyboardFocus
|javax.swing.FocusManager.isFocusManagerEnabled()|Returns whether the applicati
|javax.swing.FocusManager.setCurrentManager(FocusManager)|Sets the current Keyb

*javax.swing.FocusManager_Description*

This class has been obsoleted by the 1.4 focus APIs. While client code may 
still use this class, developers are strongly encouraged to use 
java.awt.KeyboardFocusManager and java.awt.DefaultKeyboardFocusManager instead. 

Please see 

How to Use the Focus Subsystem, a section in The Java Tutorial, and the Focus 
Specification for more information. 


*java.lang.String_javax.swing.FocusManager.FOCUS_MANAGER_CLASS_PROPERTY*

This class has been obsoleted by the 1.4 focus APIs. While client code may 
still use this class, developers are strongly encouraged to use 
java.awt.KeyboardFocusManager and java.awt.DefaultKeyboardFocusManager instead. 

Please see 

How to Use the Focus Subsystem, a section in The Java Tutorial, and the Focus 
Specification for more information. 



*javax.swing.FocusManager()*

public FocusManager()




*javax.swing.FocusManager.disableSwingFocusManager()*

public static void disableSwingFocusManager()

Changes the current KeyboardFocusManager's default FocusTraversalPolicy to 
DefaultFocusTraversalPolicy. 


*javax.swing.FocusManager.getCurrentManager()*

public static |javax.swing.FocusManager| getCurrentManager()

Returns the current KeyboardFocusManager instance for the calling thread's 
context. 


    Returns: this thread's context's KeyboardFocusManager 
*javax.swing.FocusManager.isFocusManagerEnabled()*

public static boolean isFocusManagerEnabled()

Returns whether the application has invoked disableSwingFocusManager(). 


*javax.swing.FocusManager.setCurrentManager(FocusManager)*

public static void setCurrentManager(javax.swing.FocusManager aFocusManager)
  throws |java.lang.SecurityException|
         
Sets the current KeyboardFocusManager instance for the calling thread's 
context. If null is specified, then the current KeyboardFocusManager is 
replaced with a new instance of DefaultKeyboardFocusManager. 

If a SecurityManager is installed, the calling thread must be granted the 
AWTPermission "replaceKeyboardFocusManager" in order to replace the the current 
KeyboardFocusManager. If this permission is not granted, this method will throw 
a SecurityException, and the current KeyboardFocusManager will be unchanged. 

    aFocusManager - the new KeyboardFocusManager for this thread's context 



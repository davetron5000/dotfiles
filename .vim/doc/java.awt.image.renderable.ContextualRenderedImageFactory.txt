*java.awt.image.renderable.ContextualRenderedImageFactory* *ContextualRenderedImageFactory* 

public interface interface ContextualRenderedImageFactory

  implements |java.awt.image.renderable.RenderedImageFactory|

|java.awt.image.renderable.ContextualRenderedImageFactory_Description|
|java.awt.image.renderable.ContextualRenderedImageFactory_Fields|
|java.awt.image.renderable.ContextualRenderedImageFactory_Constructors|
|java.awt.image.renderable.ContextualRenderedImageFactory_Methods|

================================================================================

*java.awt.image.renderable.ContextualRenderedImageFactory_Methods*
|java.awt.image.renderable.ContextualRenderedImageFactory.create(RenderContext,ParameterBlock)|
|java.awt.image.renderable.ContextualRenderedImageFactory.getBounds2D(ParameterBlock)|
|java.awt.image.renderable.ContextualRenderedImageFactory.getProperty(ParameterBlock,String)|
|java.awt.image.renderable.ContextualRenderedImageFactory.getPropertyNames()|Re
|java.awt.image.renderable.ContextualRenderedImageFactory.isDynamic()|Returns t
|java.awt.image.renderable.ContextualRenderedImageFactory.mapRenderContext(int,RenderContext,ParameterBlock,RenderableImage)|

*java.awt.image.renderable.ContextualRenderedImageFactory_Description*

ContextualRenderedImageFactory provides an interface for the functionality that 
may differ between instances of RenderableImageOp. Thus different operations on 
RenderableImages may be performed by a single class such as RenderedImageOp 
through the use of multiple instances of ContextualRenderedImageFactory. The 
name ContextualRenderedImageFactory is commonly shortened to "CRIF." 

All operations that are to be used in a rendering-independent chain must 
implement ContextualRenderedImageFactory. 

Classes that implement this interface must provide a constructor with no 
arguments. 


*java.awt.image.renderable.ContextualRenderedImageFactory.create(RenderContext,ParameterBlock)*

public |java.awt.image.RenderedImage| create(
  java.awt.image.renderable.RenderContext renderContext,
  java.awt.image.renderable.ParameterBlock paramBlock)

Creates a rendering, given a RenderContext and a ParameterBlock containing the 
operation's sources and parameters. The output is a RenderedImage that takes 
the RenderContext into account to determine its dimensions and placement on the 
image plane. This method houses the "intelligence" that allows a 
rendering-independent operation to adapt to a specific RenderContext. 

    renderContext - The RenderContext specifying the rendering 
    paramBlock - a ParameterBlock containing the operation's sources and parameters 

    Returns: a RenderedImage from the sources and parameters in the specified ParameterBlock 
             and according to the rendering instructions in the specified 
             RenderContext. 
*java.awt.image.renderable.ContextualRenderedImageFactory.getBounds2D(ParameterBlock)*

public |java.awt.geom.Rectangle2D| getBounds2D(java.awt.image.renderable.ParameterBlock paramBlock)

Returns the bounding box for the output of the operation, performed on a given 
set of sources, in rendering-independent space. The bounds are returned as a 
Rectangle2D, that is, an axis-aligned rectangle with floating-point corner 
coordinates. 

    paramBlock - a ParameterBlock containing the operation's sources and parameters. 

    Returns: a Rectangle2D specifying the rendering-independent bounding box of the output. 
*java.awt.image.renderable.ContextualRenderedImageFactory.getProperty(ParameterBlock,String)*

public |java.lang.Object| getProperty(
  java.awt.image.renderable.ParameterBlock paramBlock,
  java.lang.String name)

Gets the appropriate instance of the property specified by the name parameter. 
This method must determine which instance of a property to return when there 
are multiple sources that each specify the property. 

    paramBlock - a ParameterBlock containing the operation's sources and parameters. 
    name - a String naming the desired property. 

    Returns: an object reference to the value of the property requested. 
*java.awt.image.renderable.ContextualRenderedImageFactory.getPropertyNames()*

public |java.lang.String| getPropertyNames()

Returns a list of names recognized by getProperty. 


    Returns: the list of property names. 
*java.awt.image.renderable.ContextualRenderedImageFactory.isDynamic()*

public boolean isDynamic()

Returns true if successive renderings (that is, calls to create(RenderContext, 
ParameterBlock)) with the same arguments may produce different results. This 
method may be used to determine whether an existing rendering may be cached and 
reused. It is always safe to return true. 


    Returns: true if successive renderings with the same arguments might produce different 
             results; false otherwise. 
*java.awt.image.renderable.ContextualRenderedImageFactory.mapRenderContext(int,RenderContext,ParameterBlock,RenderableImage)*

public |java.awt.image.renderable.RenderContext| mapRenderContext(
  int i,
  java.awt.image.renderable.RenderContext renderContext,
  java.awt.image.renderable.ParameterBlock paramBlock,
  java.awt.image.renderable.RenderableImage image)

Maps the operation's output RenderContext into a RenderContext for each of the 
operation's sources. This is useful for operations that can be expressed in 
whole or in part simply as alterations in the RenderContext, such as an affine 
mapping, or operations that wish to obtain lower quality renderings of their 
sources in order to save processing effort or transmission bandwith. Some 
operations, such as blur, can also use this mechanism to avoid obtaining 
sources of higher quality than necessary. 

    i - the index of the source image. 
    renderContext - the RenderContext being applied to the operation. 
    paramBlock - a ParameterBlock containing the operation's sources and parameters. 
    image - the RenderableImage being rendered. 

    Returns: a RenderContext for the source at the specified index of the parameters Vector 
             contained in the specified ParameterBlock. 


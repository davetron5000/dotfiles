*javax.swing.JSpinner* *JSpinner* A single line input field that lets the user s

public class JSpinner
  extends    |javax.swing.JComponent|
  implements |javax.accessibility.Accessible|

|javax.swing.JSpinner_Description|
|javax.swing.JSpinner_Fields|
|javax.swing.JSpinner_Constructors|
|javax.swing.JSpinner_Methods|

================================================================================

*javax.swing.JSpinner_Constructors*
|javax.swing.JSpinner()|Constructs a spinner with an Integer SpinnerNumberModel
|javax.swing.JSpinner(SpinnerModel)|Constructs a complete spinner with pair of 

*javax.swing.JSpinner_Methods*
|javax.swing.JSpinner.addChangeListener(ChangeListener)|Adds a listener to the 
|javax.swing.JSpinner.commitEdit()|Commits the currently edited value to the Sp
|javax.swing.JSpinner.createEditor(SpinnerModel)|This method is called by the c
|javax.swing.JSpinner.fireStateChanged()|Sends a ChangeEvent, whose source is t
|javax.swing.JSpinner.getAccessibleContext()|Gets the AccessibleContext for the
|javax.swing.JSpinner.getChangeListeners()|Returns an array of all the ChangeLi
|javax.swing.JSpinner.getEditor()|Returns the component that displays and poten
|javax.swing.JSpinner.getModel()|Returns the SpinnerModel that defines  this sp
|javax.swing.JSpinner.getNextValue()|Returns the object in the sequence that co
|javax.swing.JSpinner.getPreviousValue()|Returns the object in the sequence tha
|javax.swing.JSpinner.getUI()|Returns the look and feel (Lobject that renders t
|javax.swing.JSpinner.getUIClassID()|Returns the suffix used to construct the n
|javax.swing.JSpinner.getValue()|Returns the current value of the model, typica
|javax.swing.JSpinner.removeChangeListener(ChangeListener)|Removes a ChangeList
|javax.swing.JSpinner.setEditor(JComponent)|Changes the JComponent that display
|javax.swing.JSpinner.setModel(SpinnerModel)|Changes the model that represents 
|javax.swing.JSpinner.setUI(SpinnerUI)|Sets the look and feel (Lobject that ren
|javax.swing.JSpinner.setValue(Object)|Changes current value of the model, typi
|javax.swing.JSpinner.updateUI()|Resets the UI property with the value from the

*javax.swing.JSpinner_Description*

A single line input field that lets the user select a number or an object value 
from an ordered sequence. Spinners typically provide a pair of tiny arrow 
buttons for stepping through the elements of the sequence. The keyboard up/down 
arrow keys also cycle through the elements. The user may also be allowed to 
type a (legal) value directly into the spinner. Although combo boxes provide 
similar functionality, spinners are sometimes preferred because they don't 
require a drop down list that can obscure important data. 

A JSpinner's sequence value is defined by its SpinnerModel. The model can be 
specified as a constructor argument and changed with the model property. 
SpinnerModel classes for some common types are provided: SpinnerListModel, 
SpinnerNumberModel, and SpinnerDateModel. 

A JSpinner has a single child component that's responsible for displaying and 
potentially changing the current element or value of the model, which is called 
the editor. The editor is created by the JSpinner's constructor and can be 
changed with the editor property. The JSpinner's editor stays in sync with the 
model by listening for ChangeEvents. If the user has changed the value 
displayed by the editor it is possible for the model's value to differ from 
that of the editor. To make sure the model has the same value as the editor use 
the commitEdit method, eg: 

try { spinner.commitEdit(); } catch (ParseException pe) {{ // Edited value is 
invalid, spinner.getValue() will return // the last valid value, you could 
revert the spinner to show that: JComponent editor = spinner.getEditor() if 
(editor instanceof DefaultEditor) { 
((DefaultEditor)editor).getTextField().setValue(spinner.getValue(); } // reset 
the value to some known value: spinner.setValue(fallbackValue); // or treat the 
last valid value as the current, in which // case you don't need to do 
anything. } return spinner.getValue(); 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JSpinner()*

public JSpinner()

Constructs a spinner with an Integer SpinnerNumberModel with initial value 0 
and no minimum or maximum limits. 


*javax.swing.JSpinner(SpinnerModel)*

public JSpinner(javax.swing.SpinnerModel model)

Constructs a complete spinner with pair of next/previous buttons and an editor 
for the SpinnerModel. 


*javax.swing.JSpinner.addChangeListener(ChangeListener)*

public void addChangeListener(javax.swing.event.ChangeListener listener)

Adds a listener to the list that is notified each time a change to the model 
occurs. The source of ChangeEvents delivered to ChangeListeners will be this 
JSpinner. Note also that replacing the model will not affect listeners added 
directly to JSpinner. Applications can add listeners to the model directly. In 
that case is that the source of the event would be the SpinnerModel. 

    listener - the ChangeListener to add 

*javax.swing.JSpinner.commitEdit()*

public void commitEdit()
  throws |java.text.ParseException|
         
Commits the currently edited value to the SpinnerModel. 

If the editor is an instance of DefaultEditor, the call if forwarded to the 
editor, otherwise this does nothing. 


*javax.swing.JSpinner.createEditor(SpinnerModel)*

protected |javax.swing.JComponent| createEditor(javax.swing.SpinnerModel model)

This method is called by the constructors to create the JComponent that 
displays the current value of the sequence. The editor may also allow the user 
to enter an element of the sequence directly. An editor must listen for 
ChangeEvents on the model and keep the value it displays in sync with the value 
of the model. 

Subclasses may override this method to add support for new SpinnerModel 
classes. Alternatively one can just replace the editor created here with the 
setEditor method. The default mapping from model type to editor is: 

SpinnerNumberModel => JSpinner.NumberEditor SpinnerDateModel => 
JSpinner.DateEditor SpinnerListModel => JSpinner.ListEditor all others => 
JSpinner.DefaultEditor 

    model - the value of getModel 

    Returns: a component that displays the current value of the sequence 
*javax.swing.JSpinner.fireStateChanged()*

protected void fireStateChanged()

Sends a ChangeEvent, whose source is this JSpinner, to each ChangeListener. 
When a ChangeListener has been added to the spinner, this method method is 
called each time a ChangeEvent is received from the model. 


*javax.swing.JSpinner.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext for the JSpinner 


    Returns: the AccessibleContext for the JSpinner 
*javax.swing.JSpinner.getChangeListeners()*

public |javax.swing.event.ChangeListener| getChangeListeners()

Returns an array of all the ChangeListeners added to this JSpinner with 
addChangeListener(). 


    Returns: all of the ChangeListeners added or an empty array if no listeners have been 
             added 
*javax.swing.JSpinner.getEditor()*

public |javax.swing.JComponent| getEditor()

Returns the component that displays and potentially changes the model's value. 


    Returns: the component that displays and potentially changes the model's value 
*javax.swing.JSpinner.getModel()*

public |javax.swing.SpinnerModel| getModel()

Returns the SpinnerModel that defines this spinners sequence of values. 


    Returns: the value of the model property 
*javax.swing.JSpinner.getNextValue()*

public |java.lang.Object| getNextValue()

Returns the object in the sequence that comes after the object returned by 
getValue(). If the end of the sequence has been reached then return null. 
Calling this method does not effect value. 

This method simply delegates to the model. It is equivalent to: 

getModel().getNextValue() 


    Returns: the next legal value or null if one doesn't exist 
*javax.swing.JSpinner.getPreviousValue()*

public |java.lang.Object| getPreviousValue()

Returns the object in the sequence that comes before the object returned by 
getValue(). If the end of the sequence has been reached then return null. 
Calling this method does not effect value. 

This method simply delegates to the model. It is equivalent to: 

getModel().getPreviousValue() 


    Returns: the previous legal value or null if one doesn't exist 
*javax.swing.JSpinner.getUI()*

public |javax.swing.plaf.SpinnerUI| getUI()

Returns the look and feel (Lobject that renders this component. 


    Returns: the SpinnerUI object that renders this component 
*javax.swing.JSpinner.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the suffix used to construct the name of the look and feel (Lclass used 
to render this component. 


    Returns: the string "SpinnerUI" 
*javax.swing.JSpinner.getValue()*

public |java.lang.Object| getValue()

Returns the current value of the model, typically this value is displayed by 
the editor. If the user has changed the value displayed by the editor it is 
possible for the model's value to differ from that of the editor, refer to the 
class level javadoc for examples of how to deal with this. 

This method simply delegates to the model. It is equivalent to: 

getModel().getValue() 


*javax.swing.JSpinner.removeChangeListener(ChangeListener)*

public void removeChangeListener(javax.swing.event.ChangeListener listener)

Removes a ChangeListener from this spinner. 

    listener - the ChangeListener to remove 

*javax.swing.JSpinner.setEditor(JComponent)*

public void setEditor(javax.swing.JComponent editor)

Changes the JComponent that displays the current value of the SpinnerModel. It 
is the responsibility of this method to disconnect the old editor from the 
model and to connect the new editor. This may mean removing the old editors 
ChangeListener from the model or the spinner itself and adding one for the new 
editor. 

    editor - the new editor 

*javax.swing.JSpinner.setModel(SpinnerModel)*

public void setModel(javax.swing.SpinnerModel model)

Changes the model that represents the value of this spinner. If the editor 
property has not been explicitly set, the editor property is (implicitly) set 
after the "model" PropertyChangeEvent has been fired. The editor property is 
set to the value returned by createEditor, as in: 

setEditor(createEditor(model)); 

    model - the new SpinnerModel 

*javax.swing.JSpinner.setUI(SpinnerUI)*

public void setUI(javax.swing.plaf.SpinnerUI ui)

Sets the look and feel (Lobject that renders this component. 

    ui - the SpinnerUI Lobject 

*javax.swing.JSpinner.setValue(Object)*

public void setValue(java.lang.Object value)

Changes current value of the model, typically this value is displayed by the 
editor. If the SpinnerModel implementation doesn't support the specified value 
then an IllegalArgumentException is thrown. 

This method simply delegates to the model. It is equivalent to: 

getModel().setValue(value) 


*javax.swing.JSpinner.updateUI()*

public void updateUI()

Resets the UI property with the value from the current look and feel. 




*javax.security.auth.kerberos.ServicePermission* *ServicePermission* This class 

public final class ServicePermission
  extends    |java.security.Permission|
  implements |java.io.Serializable|

|javax.security.auth.kerberos.ServicePermission_Description|
|javax.security.auth.kerberos.ServicePermission_Fields|
|javax.security.auth.kerberos.ServicePermission_Constructors|
|javax.security.auth.kerberos.ServicePermission_Methods|

================================================================================

*javax.security.auth.kerberos.ServicePermission_Constructors*
|javax.security.auth.kerberos.ServicePermission(String,String)|Create a new Ser

*javax.security.auth.kerberos.ServicePermission_Methods*
|javax.security.auth.kerberos.ServicePermission.equals(Object)|Checks two Servi
|javax.security.auth.kerberos.ServicePermission.getActions()|Returns the canoni
|javax.security.auth.kerberos.ServicePermission.hashCode()|Returns the hash cod
|javax.security.auth.kerberos.ServicePermission.implies(Permission)|Checks if t
|javax.security.auth.kerberos.ServicePermission.newPermissionCollection()|Retur

*javax.security.auth.kerberos.ServicePermission_Description*

This class is used to protect Kerberos services and the credentials necessary 
to access those services. There is a one to one mapping of a service principal 
and the credentials necessary to access the service. Therefore granting access 
to a service principal implicitly grants access to the credential necessary to 
establish a security context with the service principal. This applies 
regardless of whether the credentials are in a cache or acquired via an 
exchange with the KDC. The credential can be either a ticket granting ticket, a 
service ticket or a secret key from a key table. 

A ServicePermission contains a service principal name and a list of actions 
which specify the context the credential can be used within. 

The service principal name is the canonical name of the KereberosPrincipal 
supplying the service, that is the KerberosPrincipal represents a Kerberos 
service principal. This name is treated in a case sensitive manner. An asterisk 
may appear by itself, to signify any service principal. 

Granting this permission implies that the caller can use a cached credential 
(TGT, service ticket or secret key) within the context designated by the 
action. In the case of the TGT, granting this permission also implies that the 
TGT can be obtained by an Authentication Service exchange. 

The possible actions are: 



initiate - allow the caller to use the credential to initiate a security 
context with a service principal. 

accept - allow the caller to use the credential to accept security context as a 
particular principal. 

For example, to specify the permission to access to the TGT to initiate a 
security context the permission is constructed as follows: 



ServicePermission("krbtgt/EXAMPLE.COM@EXAMPLE.COM", "initiate"); 

To obtain a service ticket to initiate a context with the "host" service the 
permission is constructed as follows: 

ServicePermission("host/foo.example.com@EXAMPLE.COM", "initiate"); 

For a Kerberized server the action is "accept". For example, the permission 
necessary to access and use the secret key of the Kerberized "host" service 
(telnet and the likes) would be constructed as follows: 



ServicePermission("host/foo.example.com@EXAMPLE.COM", "accept"); 


*javax.security.auth.kerberos.ServicePermission(String,String)*

public ServicePermission(
  java.lang.String servicePrincipal,
  java.lang.String action)

Create a new ServicePermission with the specified servicePrincipal and action. 

    servicePrincipal - the name of the service principal. An asterisk may appear by itself, to signify 
       any service principal. 
    action - the action string 

*javax.security.auth.kerberos.ServicePermission.equals(Object)*

public boolean equals(java.lang.Object obj)

Checks two ServicePermission objects for equality. 

    obj - the object to test for equality with this object. 

    Returns: true if obj is a ServicePermission, and has the same service principal, and 
             actions as this ServicePermission object. 
*javax.security.auth.kerberos.ServicePermission.getActions()*

public |java.lang.String| getActions()

Returns the canonical string representation of the actions. Always returns 
present actions in the following order: initiate, accept. 


*javax.security.auth.kerberos.ServicePermission.hashCode()*

public int hashCode()

Returns the hash code value for this object. 


    Returns: a hash code value for this object. 
*javax.security.auth.kerberos.ServicePermission.implies(Permission)*

public boolean implies(java.security.Permission p)

Checks if this Kerberos service permission object "implies" the specified 
permission. 

If none of the above are true, implies returns false. 

    p - the permission to check against. 

    Returns: true if the specified permission is implied by this object, false if not. 
*javax.security.auth.kerberos.ServicePermission.newPermissionCollection()*

public |java.security.PermissionCollection| newPermissionCollection()

Returns a PermissionCollection object for storing ServicePermission objects. 

ServicePermission objects must be stored in a manner that allows them to be 
inserted into the collection in any order, but that also enables the 
PermissionCollection implies method to be implemented in an efficient (and 
consistent) manner. 


    Returns: a new PermissionCollection object suitable for storing ServicePermissions. 


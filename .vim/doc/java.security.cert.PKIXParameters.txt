*java.security.cert.PKIXParameters* *PKIXParameters* Parameters used as input for the PKIX CertPathValidator
 algorithm.

public class PKIXParameters
  extends    |java.lang.Object|
  implements |java.security.cert.CertPathParameters|

|java.security.cert.PKIXParameters_Description|
|java.security.cert.PKIXParameters_Fields|
|java.security.cert.PKIXParameters_Constructors|
|java.security.cert.PKIXParameters_Methods|

====================================================================================================================================================================================

*java.security.cert.PKIXParameters_Constructors*
|java.security.cert.PKIXParameters(KeyStore)|Creates an instance of PKIXParameters that   populates the set of most-trusted CAs from the trusted   certificate entries contained in
|java.security.cert.PKIXParameters(Set<TrustAnchor>)|Creates an instance of PKIXParameters with the specified  Set of most-trusted CAs.

*java.security.cert.PKIXParameters_Methods*
|java.security.cert.PKIXParameters.addCertPathChecker(PKIXCertPathChecker)|Adds a PKIXCertPathChecker to the list of certification   path checkers.
|java.security.cert.PKIXParameters.addCertStore(CertStore)|Adds a CertStore to the end of the list of   CertStores used in finding certificates and CRLs.
|java.security.cert.PKIXParameters.clone()|Makes a copy of this PKIXParameters object.
|java.security.cert.PKIXParameters.getCertPathCheckers()|Returns the List of certification path checkers.
|java.security.cert.PKIXParameters.getCertStores()|Returns an immutable List of CertStores that  are used to find certificates and CRLs.
|java.security.cert.PKIXParameters.getDate()|Returns the time for which the validity of the certification path  should be determined.
|java.security.cert.PKIXParameters.getInitialPolicies()|Returns an immutable Set of initial  policy identifiers (OID strings), indicating that any one of these  policies would be 
|java.security.cert.PKIXParameters.getPolicyQualifiersRejected()|Gets the PolicyQualifiersRejected flag.
|java.security.cert.PKIXParameters.getSigProvider()|Returns the signature provider's name, or null   if not set.
|java.security.cert.PKIXParameters.getTargetCertConstraints()|Returns the required constraints on the target certificate.
|java.security.cert.PKIXParameters.getTrustAnchors()|Returns an immutable Set of the most-trusted   CAs.
|java.security.cert.PKIXParameters.isAnyPolicyInhibited()|Checks whether the any policy OID should be processed if it  is included in a certificate.
|java.security.cert.PKIXParameters.isExplicitPolicyRequired()|Checks if explicit policy is required.
|java.security.cert.PKIXParameters.isPolicyMappingInhibited()|Checks if policy mapping is inhibited.
|java.security.cert.PKIXParameters.isRevocationEnabled()|Checks the RevocationEnabled flag.
|java.security.cert.PKIXParameters.setAnyPolicyInhibited(boolean)|Sets state to determine if the any policy OID should be processed  if it is included in a certificate.
|java.security.cert.PKIXParameters.setCertPathCheckers(List<PKIXCertPathChecker>)|Sets a List of additional certification path checkers.
|java.security.cert.PKIXParameters.setCertStores(List<CertStore>)|Sets the list of CertStores to be used in finding  certificates and CRLs.
|java.security.cert.PKIXParameters.setDate(Date)|Sets the time for which the validity of the certification path  should be determined.
|java.security.cert.PKIXParameters.setExplicitPolicyRequired(boolean)|Sets the ExplicitPolicyRequired flag.
|java.security.cert.PKIXParameters.setInitialPolicies(Set<String>)|Sets the Set of initial policy identifiers   (OID strings), indicating that any one of these  policies would be 
|java.security.cert.PKIXParameters.setPolicyMappingInhibited(boolean)|Sets the PolicyMappingInhibited flag.
|java.security.cert.PKIXParameters.setPolicyQualifiersRejected(boolean)|Sets the PolicyQualifiersRejected flag.
|java.security.cert.PKIXParameters.setRevocationEnabled(boolean)|Sets the RevocationEnabled flag.
|java.security.cert.PKIXParameters.setSigProvider(String)|Sets the signature provider's name.
|java.security.cert.PKIXParameters.setTargetCertConstraints(CertSelector)|Sets the required constraints on the target certificate.
|java.security.cert.PKIXParameters.setTrustAnchors(Set<TrustAnchor>)|Sets the Set of most-trusted CAs.
|java.security.cert.PKIXParameters.toString()|Returns a formatted string describing the parameters.

*java.security.cert.PKIXParameters_Description*

Parameters used as input for the PKIX CertPathValidator algorithm. 

A PKIX CertPathValidator uses these parameters to validate a CertPath according to the PKIX certification path validation algorithm. 

To instantiate a PKIXParameters object, an application must specify one or more most-trusted CAs as defined by the PKIX certification path validation algorithm. The most-trusted 
CAs can be specified using one of two constructors. An application can call PKIXParameters(Set)(|java.security.cert.PKIXParameters|) , specifying a Set of TrustAnchor objects, 
each of which identify a most-trusted CA. Alternatively, an application can call PKIXParameters(KeyStore)(|java.security.cert.PKIXParameters|) , specifying a KeyStore instance 
containing trusted certificate entries, each of which will be considered as a most-trusted CA. 

Once a PKIXParameters object has been created, other parameters can be specified (by calling setInitialPolicies(|java.security.cert.PKIXParameters|) or 
setDate(|java.security.cert.PKIXParameters|) , for instance) and then the PKIXParameters is passed along with the CertPath to be validated to 
CertPathValidator.validate(|java.security.cert.CertPathValidator|) . 

Any parameter that is not set (or is set to null) will be set to the default value for that parameter. The default value for the date parameter is null, which indicates the 
current time when the path is validated. The default for the remaining parameters is the least constrained. 

Concurrent Access 

Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst 
themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. 



*java.security.cert.PKIXParameters(KeyStore)*

public PKIXParameters(java.security.KeyStore keystore)
  throws |java.security.InvalidAlgorithmParameterException|
         |java.security.KeyStoreException|
         
Creates an instance of PKIXParameters that populates the set of most-trusted CAs from the trusted certificate entries contained in the specified KeyStore. Only keystore entries 
that contain trusted X509Certificates are considered; all other certificate types are ignored. 

    keystore - a KeyStore from which the set of most-trusted CAs will be populated 

*java.security.cert.PKIXParameters(Set<TrustAnchor>)*

public PKIXParameters(java.util.Set<java.security.cert.TrustAnchor> trustAnchors)
  throws |java.security.InvalidAlgorithmParameterException|
         
Creates an instance of PKIXParameters with the specified Set of most-trusted CAs. Each element of the set is a TrustAnchor(|java.security.cert.TrustAnchor|) . 

Note that the Set is copied to protect against subsequent modifications. 

    trustAnchors - a Set of TrustAnchors 

*java.security.cert.PKIXParameters.addCertPathChecker(PKIXCertPathChecker)*

public void addCertPathChecker(java.security.cert.PKIXCertPathChecker checker)

Adds a PKIXCertPathChecker to the list of certification path checkers. See the setCertPathCheckers(|java.security.cert.PKIXParameters|) method for more details. 

Note that the PKIXCertPathChecker is cloned to protect against subsequent modifications. 


    checker - a PKIXCertPathChecker to add to the list of checks. If null, the checker is ignored (not added to list). 

*java.security.cert.PKIXParameters.addCertStore(CertStore)*

public void addCertStore(java.security.cert.CertStore store)

Adds a CertStore to the end of the list of CertStores used in finding certificates and CRLs. 


    store - the CertStore to add. If null, the store is ignored (not added to list). 

*java.security.cert.PKIXParameters.clone()*

public |java.lang.Object| clone()

Makes a copy of this PKIXParameters object. Changes to the copy will not affect the original and vice versa. 



    Returns: a copy of this PKIXParameters object 

*java.security.cert.PKIXParameters.getCertPathCheckers()*

public |java.util.List|<PKIXCertPathChecker> getCertPathCheckers()

Returns the List of certification path checkers. The returned List is immutable, and each PKIXCertPathChecker in the List is cloned to protect against subsequent modifications. 



    Returns: an immutable List of PKIXCertPathCheckers (may be empty, but not null) 

*java.security.cert.PKIXParameters.getCertStores()*

public |java.util.List|<CertStore> getCertStores()

Returns an immutable List of CertStores that are used to find certificates and CRLs. 



    Returns: an immutable List of CertStores (may be empty, but never null) 

*java.security.cert.PKIXParameters.getDate()*

public |java.util.Date| getDate()

Returns the time for which the validity of the certification path should be determined. If null, the current time is used. 

Note that the Date returned is copied to protect against subsequent modifications. 



    Returns: the Date, or null if not set 

*java.security.cert.PKIXParameters.getInitialPolicies()*

public |java.util.Set|<String> getInitialPolicies()

Returns an immutable Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of 
certification path processing. The default return value is an empty Set, which is interpreted as meaning that any policy would be acceptable. 



    Returns: an immutable Set of initial policy OIDs in String format, or an empty Set (implying any policy is acceptable). Never returns null. 

*java.security.cert.PKIXParameters.getPolicyQualifiersRejected()*

public boolean getPolicyQualifiersRejected()

Gets the PolicyQualifiersRejected flag. If this flag is true, certificates that include policy qualifiers in a certificate policies extension that is marked critical are rejected. 
If the flag is false, certificates are not rejected on this basis. 

When a PKIXParameters object is created, this flag is set to true. This setting reflects the most common (and simplest) strategy for processing policy qualifiers. Applications 
that want to use a more sophisticated policy must set this flag to false. 



    Returns: the current value of the PolicyQualifiersRejected flag 

*java.security.cert.PKIXParameters.getSigProvider()*

public |java.lang.String| getSigProvider()

Returns the signature provider's name, or null if not set. 



    Returns: the signature provider's name (or null) 

*java.security.cert.PKIXParameters.getTargetCertConstraints()*

public |java.security.cert.CertSelector| getTargetCertConstraints()

Returns the required constraints on the target certificate. The constraints are returned as an instance of CertSelector. If null, no constraints are defined. 

Note that the CertSelector returned is cloned to protect against subsequent modifications. 



    Returns: a CertSelector specifying the constraints on the target certificate (or null) 

*java.security.cert.PKIXParameters.getTrustAnchors()*

public |java.util.Set|<TrustAnchor> getTrustAnchors()

Returns an immutable Set of the most-trusted CAs. 



    Returns: an immutable Set of TrustAnchors (never null) 

*java.security.cert.PKIXParameters.isAnyPolicyInhibited()*

public boolean isAnyPolicyInhibited()

Checks whether the any policy OID should be processed if it is included in a certificate. 



    Returns: true if the any policy OID is inhibited, false otherwise 

*java.security.cert.PKIXParameters.isExplicitPolicyRequired()*

public boolean isExplicitPolicyRequired()

Checks if explicit policy is required. If this flag is true, an acceptable policy needs to be explicitly identified in every certificate. By default, the ExplicitPolicyRequired 
flag is false. 



    Returns: true if explicit policy is required, false otherwise 

*java.security.cert.PKIXParameters.isPolicyMappingInhibited()*

public boolean isPolicyMappingInhibited()

Checks if policy mapping is inhibited. If this flag is true, policy mapping is inhibited. By default, policy mapping is not inhibited (the flag is false). 



    Returns: true if policy mapping is inhibited, false otherwise 

*java.security.cert.PKIXParameters.isRevocationEnabled()*

public boolean isRevocationEnabled()

Checks the RevocationEnabled flag. If this flag is true, the default revocation checking mechanism of the underlying PKIX service provider will be used. If this flag is false, the 
default revocation checking mechanism will be disabled (not used). See the setRevocationEnabled(|java.security.cert.PKIXParameters|) method for more details on setting the value 
of this flag. 



    Returns: the current value of the RevocationEnabled flag 

*java.security.cert.PKIXParameters.setAnyPolicyInhibited(boolean)*

public void setAnyPolicyInhibited(boolean val)

Sets state to determine if the any policy OID should be processed if it is included in a certificate. By default, the any policy OID is not inhibited ( 
isAnyPolicyInhibited()(|java.security.cert.PKIXParameters|) returns false). 


    val - true if the any policy OID is to be inhibited, false otherwise 

*java.security.cert.PKIXParameters.setCertPathCheckers(List<PKIXCertPathChecker>)*

public void setCertPathCheckers(java.util.List<java.security.cert.PKIXCertPathChecker> checkers)

Sets a List of additional certification path checkers. If the specified List contains an object that is not a PKIXCertPathChecker, it is ignored. 

Each PKIXCertPathChecker specified implements additional checks on a certificate. Typically, these are checks to process and verify private extensions contained in certificates. 
Each PKIXCertPathChecker should be instantiated with any initialization parameters needed to execute the check. 

This method allows sophisticated applications to extend a PKIX CertPathValidator or CertPathBuilder. Each of the specified PKIXCertPathCheckers will be called, in turn, by a PKIX 
CertPathValidator or CertPathBuilder for each certificate processed or validated. 

Regardless of whether these additional PKIXCertPathCheckers are set, a PKIX CertPathValidator or CertPathBuilder must perform all of the required PKIX checks on each certificate. 
The one exception to this rule is if the RevocationEnabled flag is set to false (see the setRevocationEnabled(|java.security.cert.PKIXParameters|) method). 

Note that the List supplied here is copied and each PKIXCertPathChecker in the list is cloned to protect against subsequent modifications. 


    checkers - a List of PKIXCertPathCheckers. May be null, in which case no additional checkers will be used. 

*java.security.cert.PKIXParameters.setCertStores(List<CertStore>)*

public void setCertStores(java.util.List<java.security.cert.CertStore> stores)

Sets the list of CertStores to be used in finding certificates and CRLs. May be null, in which case no CertStores will be used. The first CertStores in the list may be preferred 
to those that appear later. 

Note that the List is copied to protect against subsequent modifications. 


    stores - a List of CertStores (or null) 

*java.security.cert.PKIXParameters.setDate(Date)*

public void setDate(java.util.Date date)

Sets the time for which the validity of the certification path should be determined. If null, the current time is used. 

Note that the Date supplied here is copied to protect against subsequent modifications. 


    date - the Date, or null for the current time 

*java.security.cert.PKIXParameters.setExplicitPolicyRequired(boolean)*

public void setExplicitPolicyRequired(boolean val)

Sets the ExplicitPolicyRequired flag. If this flag is true, an acceptable policy needs to be explicitly identified in every certificate. By default, the ExplicitPolicyRequired 
flag is false. 


    val - true if explicit policy is to be required, false otherwise 

*java.security.cert.PKIXParameters.setInitialPolicies(Set<String>)*

public void setInitialPolicies(java.util.Set<java.lang.String> initialPolicies)

Sets the Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification 
path processing. By default, any policy is acceptable (i.e. all policies), so a user that wants to allow any policy as acceptable does not need to call this method, or can call it 
with an empty Set (or null). 

Note that the Set is copied to protect against subsequent modifications. 


    initialPolicies - a Set of initial policy OIDs in String format (or null) 

*java.security.cert.PKIXParameters.setPolicyMappingInhibited(boolean)*

public void setPolicyMappingInhibited(boolean val)

Sets the PolicyMappingInhibited flag. If this flag is true, policy mapping is inhibited. By default, policy mapping is not inhibited (the flag is false). 


    val - true if policy mapping is to be inhibited, false otherwise 

*java.security.cert.PKIXParameters.setPolicyQualifiersRejected(boolean)*

public void setPolicyQualifiersRejected(boolean qualifiersRejected)

Sets the PolicyQualifiersRejected flag. If this flag is true, certificates that include policy qualifiers in a certificate policies extension that is marked critical are rejected. 
If the flag is false, certificates are not rejected on this basis. 

When a PKIXParameters object is created, this flag is set to true. This setting reflects the most common (and simplest) strategy for processing policy qualifiers. Applications 
that want to use a more sophisticated policy must set this flag to false. 

Note that the PKIX certification path validation algorithm specifies that any policy qualifier in a certificate policies extension that is marked critical must be processed and 
validated. Otherwise the certification path must be rejected. If the policyQualifiersRejected flag is set to false, it is up to the application to validate all policy qualifiers 
in this manner in order to be PKIX compliant. 


    qualifiersRejected - the new value of the PolicyQualifiersRejected flag 

*java.security.cert.PKIXParameters.setRevocationEnabled(boolean)*

public void setRevocationEnabled(boolean val)

Sets the RevocationEnabled flag. If this flag is true, the default revocation checking mechanism of the underlying PKIX service provider will be used. If this flag is false, the 
default revocation checking mechanism will be disabled (not used). 

When a PKIXParameters object is created, this flag is set to true. This setting reflects the most common strategy for checking revocation, since each service provider must support 
revocation checking to be PKIX compliant. Sophisticated applications should set this flag to false when it is not practical to use a PKIX service provider's default revocation 
checking mechanism or when an alternative revocation checking mechanism is to be substituted (by also calling the addCertPathChecker(|java.security.cert.PKIXParameters|) or 
setCertPathCheckers(|java.security.cert.PKIXParameters|) methods). 


    val - the new value of the RevocationEnabled flag 

*java.security.cert.PKIXParameters.setSigProvider(String)*

public void setSigProvider(java.lang.String sigProvider)

Sets the signature provider's name. The specified provider will be preferred when creating Signature(|java.security.Signature|) objects. If null or not set, the first provider 
found supporting the algorithm will be used. 


    sigProvider - the signature provider's name (or null) 

*java.security.cert.PKIXParameters.setTargetCertConstraints(CertSelector)*

public void setTargetCertConstraints(java.security.cert.CertSelector selector)

Sets the required constraints on the target certificate. The constraints are specified as an instance of CertSelector. If null, no constraints are defined. 

Note that the CertSelector specified is cloned to protect against subsequent modifications. 


    selector - a CertSelector specifying the constraints on the target certificate (or null) 

*java.security.cert.PKIXParameters.setTrustAnchors(Set<TrustAnchor>)*

public void setTrustAnchors(java.util.Set<java.security.cert.TrustAnchor> trustAnchors)
  throws |java.security.InvalidAlgorithmParameterException|
         
Sets the Set of most-trusted CAs. 

Note that the Set is copied to protect against subsequent modifications. 


    trustAnchors - a Set of TrustAnchors 

*java.security.cert.PKIXParameters.toString()*

public |java.lang.String| toString()

Returns a formatted string describing the parameters. 



    Returns: a formatted string describing the parameters. 



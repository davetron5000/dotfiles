*java.util.concurrent.atomic.AtomicLong* *AtomicLong* A long value that may be u

public class AtomicLong
  extends    |java.lang.Number|
  implements |java.io.Serializable|

|java.util.concurrent.atomic.AtomicLong_Description|
|java.util.concurrent.atomic.AtomicLong_Fields|
|java.util.concurrent.atomic.AtomicLong_Constructors|
|java.util.concurrent.atomic.AtomicLong_Methods|

================================================================================

*java.util.concurrent.atomic.AtomicLong_Constructors*
|java.util.concurrent.atomic.AtomicLong()|Create a new AtomicLong with initial 
|java.util.concurrent.atomic.AtomicLong(long)|Create a new AtomicLong with the 

*java.util.concurrent.atomic.AtomicLong_Methods*
|java.util.concurrent.atomic.AtomicLong.addAndGet(long)|Atomically add the give
|java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long)|Atomically set
|java.util.concurrent.atomic.AtomicLong.decrementAndGet()|Atomically decrement 
|java.util.concurrent.atomic.AtomicLong.doubleValue()|
|java.util.concurrent.atomic.AtomicLong.floatValue()|
|java.util.concurrent.atomic.AtomicLong.get()|Get the current value.
|java.util.concurrent.atomic.AtomicLong.getAndAdd(long)|Atomically add the give
|java.util.concurrent.atomic.AtomicLong.getAndDecrement()|Atomically decrement 
|java.util.concurrent.atomic.AtomicLong.getAndIncrement()|Atomically increment 
|java.util.concurrent.atomic.AtomicLong.getAndSet(long)|Set to the give value a
|java.util.concurrent.atomic.AtomicLong.incrementAndGet()|Atomically increment 
|java.util.concurrent.atomic.AtomicLong.intValue()|
|java.util.concurrent.atomic.AtomicLong.longValue()|
|java.util.concurrent.atomic.AtomicLong.set(long)|Set to the given value.
|java.util.concurrent.atomic.AtomicLong.toString()|Returns the String represent
|java.util.concurrent.atomic.AtomicLong.weakCompareAndSet(long,long)|Atomically

*java.util.concurrent.atomic.AtomicLong_Description*

A long value that may be updated atomically. See the 
(|java.util.concurrent.atomic|) package specification for description of the 
properties of atomic variables. An AtomicLong is used in applications such as 
atomically incremented sequence numbers, and cannot be used as a replacement 
for a (|java.lang.Long|) . However, this class does extend Number to allow 
uniform access by tools and utilities that deal with numerically-based classes. 


*java.util.concurrent.atomic.AtomicLong()*

public AtomicLong()

Create a new AtomicLong with initial value 0. 


*java.util.concurrent.atomic.AtomicLong(long)*

public AtomicLong(long initialValue)

Create a new AtomicLong with the given initial value. 

    initialValue - the initial value 

*java.util.concurrent.atomic.AtomicLong.addAndGet(long)*

public final long addAndGet(long delta)

Atomically add the given value to current value. 

    delta - the value to add 

    Returns: the updated value 
*java.util.concurrent.atomic.AtomicLong.compareAndSet(long,long)*

public final boolean compareAndSet(
  long expect,
  long update)

Atomically set the value to the given updated value if the current value == the 
expected value. 

    expect - the expected value 
    update - the new value 

    Returns: true if successful. False return indicates that the actual value was not equal 
             to the expected value. 
*java.util.concurrent.atomic.AtomicLong.decrementAndGet()*

public final long decrementAndGet()

Atomically decrement by one the current value. 


    Returns: the updated value 
*java.util.concurrent.atomic.AtomicLong.doubleValue()*

public double doubleValue()




*java.util.concurrent.atomic.AtomicLong.floatValue()*

public float floatValue()




*java.util.concurrent.atomic.AtomicLong.get()*

public final long get()

Get the current value. 


    Returns: the current value 
*java.util.concurrent.atomic.AtomicLong.getAndAdd(long)*

public final long getAndAdd(long delta)

Atomically add the given value to current value. 

    delta - the value to add 

    Returns: the previous value 
*java.util.concurrent.atomic.AtomicLong.getAndDecrement()*

public final long getAndDecrement()

Atomically decrement by one the current value. 


    Returns: the previous value 
*java.util.concurrent.atomic.AtomicLong.getAndIncrement()*

public final long getAndIncrement()

Atomically increment by one the current value. 


    Returns: the previous value 
*java.util.concurrent.atomic.AtomicLong.getAndSet(long)*

public final long getAndSet(long newValue)

Set to the give value and return the old value. 

    newValue - the new value 

    Returns: the previous value 
*java.util.concurrent.atomic.AtomicLong.incrementAndGet()*

public final long incrementAndGet()

Atomically increment by one the current value. 


    Returns: the updated value 
*java.util.concurrent.atomic.AtomicLong.intValue()*

public int intValue()




*java.util.concurrent.atomic.AtomicLong.longValue()*

public long longValue()




*java.util.concurrent.atomic.AtomicLong.set(long)*

public final void set(long newValue)

Set to the given value. 

    newValue - the new value 

*java.util.concurrent.atomic.AtomicLong.toString()*

public |java.lang.String| toString()

Returns the String representation of the current value. 


    Returns: the String representation of the current value. 
*java.util.concurrent.atomic.AtomicLong.weakCompareAndSet(long,long)*

public final boolean weakCompareAndSet(
  long expect,
  long update)

Atomically set the value to the given updated value if the current value == the 
expected value. May fail spuriously. 

    expect - the expected value 
    update - the new value 

    Returns: true if successful. 


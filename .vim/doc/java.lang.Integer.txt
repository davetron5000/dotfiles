*java.lang.Integer* *Integer* The Integer class wraps a value of the primitive t

public final class Integer
  extends    |java.lang.Number|
  implements |java.lang.Comparable|

|java.lang.Integer_Description|
|java.lang.Integer_Fields|
|java.lang.Integer_Constructors|
|java.lang.Integer_Methods|

================================================================================

*java.lang.Integer_Fields*
|int_java.lang.Integer.MAX_VALUE|
|int_java.lang.Integer.MIN_VALUE|
|int_java.lang.Integer.SIZE|
|java.lang.Class_java.lang.Integer.TYPE|

*java.lang.Integer_Constructors*
|java.lang.Integer(int)|Constructs a newly allocated Integer object that  repre
|java.lang.Integer(String)|Constructs a newly allocated Integer object that  re

*java.lang.Integer_Methods*
|java.lang.Integer.bitCount(int)|Returns the number of one-bits in the two's co
|java.lang.Integer.byteValue()|Returns the value of this Integer as a  byte.
|java.lang.Integer.compareTo(Integer)|Compares two Integer objects numerically.
|java.lang.Integer.decode(String)|Decodes a String into an Integer.
|java.lang.Integer.doubleValue()|Returns the value of this Integer as a  double
|java.lang.Integer.equals(Object)|Compares this object to the specified object.
|java.lang.Integer.floatValue()|Returns the value of this Integer as a  float.
|java.lang.Integer.getInteger(String)|Determines the integer value of the syste
|java.lang.Integer.getInteger(String,int)|Determines the integer value of the s
|java.lang.Integer.getInteger(String,Integer)|Returns the integer value of the 
|java.lang.Integer.hashCode()|Returns a hash code for this Integer.
|java.lang.Integer.highestOneBit(int)|Returns an int value with at most a singl
|java.lang.Integer.intValue()|Returns the value of this Integer as an  int.
|java.lang.Integer.longValue()|Returns the value of this Integer as a  long.
|java.lang.Integer.lowestOneBit(int)|Returns an int value with at most a single
|java.lang.Integer.numberOfLeadingZeros(int)|Returns the number of zero bits pr
|java.lang.Integer.numberOfTrailingZeros(int)|Returns the number of zero bits f
|java.lang.Integer.parseInt(String)|Parses the string argument as a signed deci
|java.lang.Integer.parseInt(String,int)|Parses the string argument as a signed 
|java.lang.Integer.reverse(int)|Returns the value obtained by reversing the ord
|java.lang.Integer.reverseBytes(int)|Returns the value obtained by reversing th
|java.lang.Integer.rotateLeft(int,int)|Returns the value obtained by rotating t
|java.lang.Integer.rotateRight(int,int)|Returns the value obtained by rotating 
|java.lang.Integer.shortValue()|Returns the value of this Integer as a  short.
|java.lang.Integer.signum(int)|Returns the signum function of the specified int
|java.lang.Integer.toBinaryString(int)|Returns a string representation of the i
|java.lang.Integer.toHexString(int)|Returns a string representation of the inte
|java.lang.Integer.toOctalString(int)|Returns a string representation of the in
|java.lang.Integer.toString()|Returns a String object representing this  Intege
|java.lang.Integer.toString(int)|Returns a String object representing the  spec
|java.lang.Integer.toString(int,int)|Returns a string representation of the fir
|java.lang.Integer.valueOf(int)|Returns a Integer instance representing the spe
|java.lang.Integer.valueOf(String)|Returns an Integer object holding the  value
|java.lang.Integer.valueOf(String,int)|Returns an Integer object holding the va

*java.lang.Integer_Description*

The Integer class wraps a value of the primitive type int in an object. An 
object of type Integer contains a single field whose type is int. 



In addition, this class provides several methods for converting an int to a 
String and a String to an int, as well as other constants and methods useful 
when dealing with an int. 

Implementation note: The implementations of the "bit twiddling" methods (such 
as highestOneBit(|java.lang.Integer|) and 
numberOfTrailingZeros(|java.lang.Integer|) ) are based on material from Henry 
S. Warren, Jr.'s Hacker's Delight, (Addison Wesley, 2002). 


*int_java.lang.Integer.MAX_VALUE*

The Integer class wraps a value of the primitive type int in an object. An 
object of type Integer contains a single field whose type is int. 



In addition, this class provides several methods for converting an int to a 
String and a String to an int, as well as other constants and methods useful 
when dealing with an int. 

Implementation note: The implementations of the "bit twiddling" methods (such 
as highestOneBit(|java.lang.Integer|) and 
numberOfTrailingZeros(|java.lang.Integer|) ) are based on material from Henry 
S. Warren, Jr.'s Hacker's Delight, (Addison Wesley, 2002). 


*int_java.lang.Integer.MIN_VALUE*

The Integer class wraps a value of the primitive type int in an object. An 
object of type Integer contains a single field whose type is int. 



In addition, this class provides several methods for converting an int to a 
String and a String to an int, as well as other constants and methods useful 
when dealing with an int. 

Implementation note: The implementations of the "bit twiddling" methods (such 
as highestOneBit(|java.lang.Integer|) and 
numberOfTrailingZeros(|java.lang.Integer|) ) are based on material from Henry 
S. Warren, Jr.'s Hacker's Delight, (Addison Wesley, 2002). 


*int_java.lang.Integer.SIZE*

The Integer class wraps a value of the primitive type int in an object. An 
object of type Integer contains a single field whose type is int. 



In addition, this class provides several methods for converting an int to a 
String and a String to an int, as well as other constants and methods useful 
when dealing with an int. 

Implementation note: The implementations of the "bit twiddling" methods (such 
as highestOneBit(|java.lang.Integer|) and 
numberOfTrailingZeros(|java.lang.Integer|) ) are based on material from Henry 
S. Warren, Jr.'s Hacker's Delight, (Addison Wesley, 2002). 


*java.lang.Class_java.lang.Integer.TYPE*

The Integer class wraps a value of the primitive type int in an object. An 
object of type Integer contains a single field whose type is int. 



In addition, this class provides several methods for converting an int to a 
String and a String to an int, as well as other constants and methods useful 
when dealing with an int. 

Implementation note: The implementations of the "bit twiddling" methods (such 
as highestOneBit(|java.lang.Integer|) and 
numberOfTrailingZeros(|java.lang.Integer|) ) are based on material from Henry 
S. Warren, Jr.'s Hacker's Delight, (Addison Wesley, 2002). 



*java.lang.Integer(int)*

public Integer(int value)

Constructs a newly allocated Integer object that represents the specified int 
value. 

    value - the value to be represented by the Integer object. 

*java.lang.Integer(String)*

public Integer(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Constructs a newly allocated Integer object that represents the int value 
indicated by the String parameter. The string is converted to an int value in 
exactly the manner used by the parseInt method for radix 10. 

    s - the String to be converted to an Integer. 

*java.lang.Integer.bitCount(int)*

public static int bitCount(int i)

Returns the number of one-bits in the two's complement binary representation of 
the specified int value. This function is sometimes referred to as the 
population count. 


    Returns: the number of one-bits in the two's complement binary representation of the 
             specified int value. 
*java.lang.Integer.byteValue()*

public byte byteValue()

Returns the value of this Integer as a byte. 


*java.lang.Integer.compareTo(Integer)*

public int compareTo(java.lang.Integer anotherInteger)

Compares two Integer objects numerically. 

    anotherInteger - the Integer to be compared. 

    Returns: the value 0 if this Integer is equal to the argument Integer; a value less than 
             0 if this Integer is numerically less than the argument Integer; 
             and a value greater than 0 if this Integer is numerically greater 
             than the argument Integer (signed comparison). 
*java.lang.Integer.decode(String)*

public static |java.lang.Integer| decode(java.lang.String nm)
  throws |java.lang.NumberFormatException|
         
Decodes a String into an Integer. Accepts decimal, hexadecimal, and octal 
numbers given by the following grammar: 



DecodableString: Signopt DecimalNumeral Signopt 0x HexDigits Signopt 0X 
HexDigits Signopt # HexDigits Signopt 0 OctalDigits 

Sign: - 



DecimalNumeral, HexDigits, and OctalDigits are defined in 3.10.1 of the Java 
Language Specification. 

The sequence of characters following an (optional) negative sign and/or radix 
specifier (0x, 0X, #, or leading zero) is parsed as by the Integer.parseInt 
method with the indicated radix (10, 16, or 8). This sequence of characters 
must represent a positive value or a (|java.lang.NumberFormatException|) will 
be thrown. The result is negated if first character of the specified String is 
the minus sign. No whitespace characters are permitted in the String. 

    nm - the String to decode. 

    Returns: a Integer object holding the int value represented by nm 
*java.lang.Integer.doubleValue()*

public double doubleValue()

Returns the value of this Integer as a double. 


*java.lang.Integer.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this object to the specified object. The result is true if and only if 
the argument is not null and is an Integer object that contains the same int 
value as this object. 

    obj - the object to compare with. 

    Returns: true if the objects are the same; false otherwise. 
*java.lang.Integer.floatValue()*

public float floatValue()

Returns the value of this Integer as a float. 


*java.lang.Integer.getInteger(String)*

public static |java.lang.Integer| getInteger(java.lang.String nm)

Determines the integer value of the system property with the specified name. 

The first argument is treated as the name of a system property. System 
properties are accessible through the (|java.lang.System|) method. The string 
value of this property is then interpreted as an integer value and an Integer 
object representing this value is returned. Details of possible numeric formats 
can be found with the definition of getProperty. 

If there is no property with the specified name, if the specified name is empty 
or null, or if the property does not have the correct numeric format, then null 
is returned. 

In other words, this method returns an Integer object equal to the value of: 

getInteger(nm, null) 

    nm - property name. 

    Returns: the Integer value of the property. 
*java.lang.Integer.getInteger(String,int)*

public static |java.lang.Integer| getInteger(
  java.lang.String nm,
  int val)

Determines the integer value of the system property with the specified name. 

The first argument is treated as the name of a system property. System 
properties are accessible through the (|java.lang.System|) method. The string 
value of this property is then interpreted as an integer value and an Integer 
object representing this value is returned. Details of possible numeric formats 
can be found with the definition of getProperty. 

The second argument is the default value. An Integer object that represents the 
value of the second argument is returned if there is no property of the 
specified name, if the property does not have the correct numeric format, or if 
the specified name is empty or null. 

In other words, this method returns an Integer object equal to the value of: 

getInteger(nm, new Integer(val)) 

but in practice it may be implemented in a manner such as: 

Integer result = getInteger(nm, null); return (result == null) ? new 
Integer(val) : result; 

to avoid the unnecessary allocation of an Integer object when the default value 
is not needed. 

    nm - property name. 
    val - default value. 

    Returns: the Integer value of the property. 
*java.lang.Integer.getInteger(String,Integer)*

public static |java.lang.Integer| getInteger(
  java.lang.String nm,
  java.lang.Integer val)

Returns the integer value of the system property with the specified name. The 
first argument is treated as the name of a system property. System properties 
are accessible through the (|java.lang.System|) method. The string value of 
this property is then interpreted as an integer value, as per the 
Integer.decode method, and an Integer object representing this value is 
returned. 

If the property value begins with the two ASCII characters 0x or the ASCII 
character #, not followed by a minus sign, then the rest of it is parsed as a 
hexadecimal integer exactly as by the method (|java.lang.Integer|) with radix 
16. If the property value begins with the ASCII character 0 followed by another 
character, it is parsed as an octal integer exactly as by the method 
(|java.lang.Integer|) with radix 8. Otherwise, the property value is parsed as 
a decimal integer exactly as by the method (|java.lang.Integer|) with radix 10. 

The second argument is the default value. The default value is returned if 
there is no property of the specified name, if the property does not have the 
correct numeric format, or if the specified name is empty or null. 

    nm - property name. 
    val - default value. 

    Returns: the Integer value of the property. 
*java.lang.Integer.hashCode()*

public int hashCode()

Returns a hash code for this Integer. 


    Returns: a hash code value for this object, equal to the primitive int value represented 
             by this Integer object. 
*java.lang.Integer.highestOneBit(int)*

public static int highestOneBit(int i)

Returns an int value with at most a single one-bit, in the position of the 
highest-order ("leftmost") one-bit in the specified int value. Returns zero if 
the specified value has no one-bits in its two's complement binary 
representation, that is, if it is equal to zero. 


    Returns: an int value with a single one-bit, in the position of the highest-order 
             one-bit in the specified value, or zero if the specified value is 
             itself equal to zero. 
*java.lang.Integer.intValue()*

public int intValue()

Returns the value of this Integer as an int. 


*java.lang.Integer.longValue()*

public long longValue()

Returns the value of this Integer as a long. 


*java.lang.Integer.lowestOneBit(int)*

public static int lowestOneBit(int i)

Returns an int value with at most a single one-bit, in the position of the 
lowest-order ("rightmost") one-bit in the specified int value. Returns zero if 
the specified value has no one-bits in its two's complement binary 
representation, that is, if it is equal to zero. 


    Returns: an int value with a single one-bit, in the position of the lowest-order one-bit 
             in the specified value, or zero if the specified value is itself 
             equal to zero. 
*java.lang.Integer.numberOfLeadingZeros(int)*

public static int numberOfLeadingZeros(int i)

Returns the number of zero bits preceding the highest-order ("leftmost") 
one-bit in the two's complement binary representation of the specified int 
value. Returns 32 if the specified value has no one-bits in its two's 
complement representation, in other words if it is equal to zero. 

Note that this method is closely related to the logarithm base 2. For all 
positive int values x: 

floor(log2(x)) = 31 - numberOfLeadingZeros(x) ceil(log2(x)) = 32 - 
numberOfLeadingZeros(x - 1) 


    Returns: the number of zero bits preceding the highest-order ("leftmost") one-bit in the 
             two's complement binary representation of the specified int value, 
             or 32 if the value is equal to zero. 
*java.lang.Integer.numberOfTrailingZeros(int)*

public static int numberOfTrailingZeros(int i)

Returns the number of zero bits following the lowest-order ("rightmost") 
one-bit in the two's complement binary representation of the specified int 
value. Returns 32 if the specified value has no one-bits in its two's 
complement representation, in other words if it is equal to zero. 


    Returns: the number of zero bits following the lowest-order ("rightmost") one-bit in the 
             two's complement binary representation of the specified int value, 
             or 32 if the value is equal to zero. 
*java.lang.Integer.parseInt(String)*

public static int parseInt(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Parses the string argument as a signed decimal integer. The characters in the 
string must all be decimal digits, except that the first character may be an 
ASCII minus sign '-' ('u002D') to indicate a negative value. The resulting 
integer value is returned, exactly as if the argument and the radix 10 were 
given as arguments to the (|java.lang.Integer|) method. 

    s - a String containing the int representation to be parsed 

    Returns: the integer value represented by the argument in decimal. 
*java.lang.Integer.parseInt(String,int)*

public static int parseInt(
  java.lang.String s,
  int radix)
  throws |java.lang.NumberFormatException|
         
Parses the string argument as a signed integer in the radix specified by the 
second argument. The characters in the string must all be digits of the 
specified radix (as determined by whether (|java.lang.Character|) returns a 
nonnegative value), except that the first character may be an ASCII minus sign 
'-' ('u002D') to indicate a negative value. The resulting integer value is 
returned. 

An exception of type NumberFormatException is thrown if any of the following 
situations occurs: 

The first argument is null or is a string of length zero. The radix is either 
smaller than (|java.lang.Character|) or larger than (|java.lang.Character|) . 
Any character of the string is not a digit of the specified radix, except that 
the first character may be a minus sign '-' ('u002D') provided that the string 
is longer than length 1. The value represented by the string is not a value of 
type int. 

Examples: 

parseInt("0", 10) returns 0 parseInt("473", 10) returns 473 parseInt("-0", 10) 
returns 0 parseInt("-FF", 16) returns -255 parseInt("1100110", 2) returns 102 
parseInt("2147483647", 10) returns 2147483647 parseInt("-2147483648", 10) 
returns -2147483648 parseInt("2147483648", 10) throws a NumberFormatException 
parseInt("99", 8) throws a NumberFormatException parseInt("Kona", 10) throws a 
NumberFormatException parseInt("Kona", 27) returns 411787 

    s - the String containing the integer representation to be parsed 
    radix - the radix to be used while parsing s. 

    Returns: the integer represented by the string argument in the specified radix. 
*java.lang.Integer.reverse(int)*

public static int reverse(int i)

Returns the value obtained by reversing the order of the bits in the two's 
complement binary representation of the specified int value. 


    Returns: the value obtained by reversing order of the bits in the specified int value. 
*java.lang.Integer.reverseBytes(int)*

public static int reverseBytes(int i)

Returns the value obtained by reversing the order of the bytes in the two's 
complement representation of the specified int value. 


    Returns: the value obtained by reversing the bytes in the specified int value. 
*java.lang.Integer.rotateLeft(int,int)*

public static int rotateLeft(
  int i,
  int distance)

Returns the value obtained by rotating the two's complement binary 
representation of the specified int value left by the specified number of bits. 
(Bits shifted out of the left hand, or high-order, side reenter on the right, 
or low-order.) 

Note that left rotation with a negative distance is equivalent to right 
rotation: rotateLeft(val, -distance) == rotateRight(val, distance). Note also 
that rotation by any multiple of 32 is a no-op, so all but the last five bits 
of the rotation distance can be ignored, even if the distance is negative: 
rotateLeft(val, distance) == rotateLeft(val, distance & 0x1F). 


    Returns: the value obtained by rotating the two's complement binary representation of 
             the specified int value left by the specified number of bits. 
*java.lang.Integer.rotateRight(int,int)*

public static int rotateRight(
  int i,
  int distance)

Returns the value obtained by rotating the two's complement binary 
representation of the specified int value right by the specified number of 
bits. (Bits shifted out of the right hand, or low-order, side reenter on the 
left, or high-order.) 

Note that right rotation with a negative distance is equivalent to left 
rotation: rotateRight(val, -distance) == rotateLeft(val, distance). Note also 
that rotation by any multiple of 32 is a no-op, so all but the last five bits 
of the rotation distance can be ignored, even if the distance is negative: 
rotateRight(val, distance) == rotateRight(val, distance & 0x1F). 


    Returns: the value obtained by rotating the two's complement binary representation of 
             the specified int value right by the specified number of bits. 
*java.lang.Integer.shortValue()*

public short shortValue()

Returns the value of this Integer as a short. 


*java.lang.Integer.signum(int)*

public static int signum(int i)

Returns the signum function of the specified int value. (The return value is -1 
if the specified value is negative; 0 if the specified value is zero; and 1 if 
the specified value is positive.) 


    Returns: the signum function of the specified int value. 
*java.lang.Integer.toBinaryString(int)*

public static |java.lang.String| toBinaryString(int i)

Returns a string representation of the integer argument as an unsigned integer 
in base2. 

The unsigned integer value is the argument plus 232 if the argument is 
negative; otherwise it is equal to the argument. This value is converted to a 
string of ASCII digits in binary (base2) with no extra leading 0s. If the 
unsigned magnitude is zero, it is represented by a single zero character '0' 
('u0030'); otherwise, the first character of the representation of the unsigned 
magnitude will not be the zero character. The characters '0' ('u0030') and '1' 
('u0031') are used as binary digits. 

    i - an integer to be converted to a string. 

    Returns: the string representation of the unsigned integer value represented by the 
             argument in binary (base2). 
*java.lang.Integer.toHexString(int)*

public static |java.lang.String| toHexString(int i)

Returns a string representation of the integer argument as an unsigned integer 
in base16. 

The unsigned integer value is the argument plus 232 if the argument is 
negative; otherwise, it is equal to the argument. This value is converted to a 
string of ASCII digits in hexadecimal (base16) with no extra leading 0s. If the 
unsigned magnitude is zero, it is represented by a single zero character '0' 
('u0030'); otherwise, the first character of the representation of the unsigned 
magnitude will not be the zero character. The following characters are used as 
hexadecimal digits: 

0123456789abcdef 

These are the characters 'u0030' through 'u0039' and 'u0061' through 'u0066'. 
If uppercase letters are desired, the (|java.lang.String|) method may be called 
on the result: 

Integer.toHexString(n).toUpperCase() 

    i - an integer to be converted to a string. 

    Returns: the string representation of the unsigned integer value represented by the 
             argument in hexadecimal (base16). 
*java.lang.Integer.toOctalString(int)*

public static |java.lang.String| toOctalString(int i)

Returns a string representation of the integer argument as an unsigned integer 
in base8. 

The unsigned integer value is the argument plus 232 if the argument is 
negative; otherwise, it is equal to the argument. This value is converted to a 
string of ASCII digits in octal (base8) with no extra leading 0s. 

If the unsigned magnitude is zero, it is represented by a single zero character 
'0' ('u0030'); otherwise, the first character of the representation of the 
unsigned magnitude will not be the zero character. The following characters are 
used as octal digits: 

01234567 

These are the characters 'u0030' through 'u0037'. 

    i - an integer to be converted to a string. 

    Returns: the string representation of the unsigned integer value represented by the 
             argument in octal (base8). 
*java.lang.Integer.toString()*

public |java.lang.String| toString()

Returns a String object representing this Integer's value. The value is 
converted to signed decimal representation and returned as a string, exactly as 
if the integer value were given as an argument to the (|java.lang.Integer|) 
method. 


    Returns: a string representation of the value of this object in base10. 
*java.lang.Integer.toString(int)*

public static |java.lang.String| toString(int i)

Returns a String object representing the specified integer. The argument is 
converted to signed decimal representation and returned as a string, exactly as 
if the argument and radix 10 were given as arguments to the 
(|java.lang.Integer|) method. 

    i - an integer to be converted. 

    Returns: a string representation of the argument in base10. 
*java.lang.Integer.toString(int,int)*

public static |java.lang.String| toString(
  int i,
  int radix)

Returns a string representation of the first argument in the radix specified by 
the second argument. 

If the radix is smaller than Character.MIN_RADIX or larger than 
Character.MAX_RADIX, then the radix 10 is used instead. 

If the first argument is negative, the first element of the result is the ASCII 
minus character '-' ('u002D'). If the first argument is not negative, no sign 
character appears in the result. 

The remaining characters of the result represent the magnitude of the first 
argument. If the magnitude is zero, it is represented by a single zero 
character '0' ('u0030'); otherwise, the first character of the representation 
of the magnitude will not be the zero character. The following ASCII characters 
are used as digits: 

0123456789abcdefghijklmnopqrstuvwxyz 

These are 'u0030' through 'u0039' and 'u0061' through 'u007A'. If radix is N, 
then the first N of these characters are used as radix-N digits in the order 
shown. Thus, the digits for hexadecimal (radix 16) are 0123456789abcdef. If 
uppercase letters are desired, the (|java.lang.String|) method may be called on 
the result: 

Integer.toString(n, 16).toUpperCase() 

    i - an integer to be converted to a string. 
    radix - the radix to use in the string representation. 

    Returns: a string representation of the argument in the specified radix. 
*java.lang.Integer.valueOf(int)*

public static |java.lang.Integer| valueOf(int i)

Returns a Integer instance representing the specified int value. If a new 
Integer instance is not required, this method should generally be used in 
preference to the constructor (|java.lang.Integer|) , as this method is likely 
to yield significantly better space and time performance by caching frequently 
requested values. 

    i - an int value. 

    Returns: a Integer instance representing i. 
*java.lang.Integer.valueOf(String)*

public static |java.lang.Integer| valueOf(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Returns an Integer object holding the value of the specified String. The 
argument is interpreted as representing a signed decimal integer, exactly as if 
the argument were given to the (|java.lang.Integer|) method. The result is an 
Integer object that represents the integer value specified by the string. 

In other words, this method returns an Integer object equal to the value of: 

new Integer(Integer.parseInt(s)) 

    s - the string to be parsed. 

    Returns: an Integer object holding the value represented by the string argument. 
*java.lang.Integer.valueOf(String,int)*

public static |java.lang.Integer| valueOf(
  java.lang.String s,
  int radix)
  throws |java.lang.NumberFormatException|
         
Returns an Integer object holding the value extracted from the specified String 
when parsed with the radix given by the second argument. The first argument is 
interpreted as representing a signed integer in the radix specified by the 
second argument, exactly as if the arguments were given to the 
(|java.lang.Integer|) method. The result is an Integer object that represents 
the integer value specified by the string. 

In other words, this method returns an Integer object equal to the value of: 

new Integer(Integer.parseInt(s, radix)) 

    s - the string to be parsed. 
    radix - the radix to be used in interpreting s 

    Returns: an Integer object holding the value represented by the string argument in the 
             specified radix. 


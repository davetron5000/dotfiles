*java.awt.Canvas* *Canvas* A Canvas component represents a blank rectangular 
 area of the screen onto which the application can draw or from 
 which the application can trap input

public class Canvas
  extends    |java.awt.Component|
  implements |javax.accessibility.Accessible|

|java.awt.Canvas_Description|
|java.awt.Canvas_Fields|
|java.awt.Canvas_Constructors|
|java.awt.Canvas_Methods|

====================================================================================================================================================================================

*java.awt.Canvas_Constructors*
|java.awt.Canvas()|Constructs a new Canvas.
|java.awt.Canvas(GraphicsConfiguration)|Constructs a new Canvas given a GraphicsConfiguration object.

*java.awt.Canvas_Methods*
|java.awt.Canvas.addNotify()|Creates the peer of the canvas.
|java.awt.Canvas.createBufferStrategy(int)|Creates a new strategy for multi-buffering on this component.
|java.awt.Canvas.createBufferStrategy(int,BufferCapabilities)|Creates a new strategy for multi-buffering on this component with the  required buffer capabilities.
|java.awt.Canvas.getAccessibleContext()|Gets the AccessibleContext associated with this Canvas.
|java.awt.Canvas.getBufferStrategy()|
|java.awt.Canvas.paint(Graphics)|Paints this canvas.
|java.awt.Canvas.update(Graphics)|Updates this canvas.

*java.awt.Canvas_Description*

A Canvas component represents a blank rectangular area of the screen onto which the application can draw or from which the application can trap input events from the user. 

An application must subclass the Canvas class in order to get useful functionality such as creating a custom component. The paint method must be overridden in order to perform 
custom graphics on the canvas. 



*java.awt.Canvas()*

public Canvas()

Constructs a new Canvas. 


*java.awt.Canvas(GraphicsConfiguration)*

public Canvas(java.awt.GraphicsConfiguration config)

Constructs a new Canvas given a GraphicsConfiguration object. 

    config - a reference to a GraphicsConfiguration object. 

*java.awt.Canvas.addNotify()*

public void addNotify()

Creates the peer of the canvas. This peer allows you to change the user interface of the canvas without changing its functionality. 



*java.awt.Canvas.createBufferStrategy(int)*

public void createBufferStrategy(int numBuffers)

Creates a new strategy for multi-buffering on this component. Multi-buffering is useful for rendering performance. This method attempts to create the best strategy available with 
the number of buffers supplied. It will always create a BufferStrategy with that number of buffers. A page-flipping strategy is attempted first, then a blitting strategy using 
accelerated buffers. Finally, an unaccelerated blitting strategy is used. 

Each time this method is called, the existing buffer strategy for this component is discarded. 


    numBuffers - number of buffers to create, including the front buffer 

*java.awt.Canvas.createBufferStrategy(int,BufferCapabilities)*

public void createBufferStrategy(
  int numBuffers,
  java.awt.BufferCapabilities caps)
  throws |java.awt.AWTException|
         
Creates a new strategy for multi-buffering on this component with the required buffer capabilities. This is useful, for example, if only accelerated memory or page flipping is 
desired (as specified by the buffer capabilities). 

Each time this method is called, the existing buffer strategy for this component is discarded. 


    numBuffers - number of buffers to create 
    caps - the required capabilities for creating the buffer strategy; cannot be null 

*java.awt.Canvas.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this Canvas. For canvases, the AccessibleContext takes the form of an AccessibleAWTCanvas. A new AccessibleAWTCanvas instance is created 
if necessary. 



    Returns: an AccessibleAWTCanvas that serves as the AccessibleContext of this Canvas 

*java.awt.Canvas.getBufferStrategy()*

public |java.awt.image.BufferStrategy| getBufferStrategy()





    Returns: the buffer strategy used by this component 

*java.awt.Canvas.paint(Graphics)*

public void paint(java.awt.Graphics g)

Paints this canvas. 

Most applications that subclass Canvas should override this method in order to perform some useful operation (typically, custom painting of the canvas). The default operation is 
simply to clear the canvas. Applications that override this method need not call super.paint(g). 


    g - the specified Graphics context 

*java.awt.Canvas.update(Graphics)*

public void update(java.awt.Graphics g)

Updates this canvas. 

This method is called in response to a call to repaint. The canvas is first cleared by filling it with the background color, and then completely redrawn by calling this canvas's 
paint method. Note: applications that override this method should either call super.update(g) or incorporate the functionality described above into their own code. 


    g - the specified Graphics context 



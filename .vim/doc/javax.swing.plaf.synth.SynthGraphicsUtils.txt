*javax.swing.plaf.synth.SynthGraphicsUtils* *SynthGraphicsUtils* Wrapper for pri

public class SynthGraphicsUtils
  extends    |java.lang.Object|

|javax.swing.plaf.synth.SynthGraphicsUtils_Description|
|javax.swing.plaf.synth.SynthGraphicsUtils_Fields|
|javax.swing.plaf.synth.SynthGraphicsUtils_Constructors|
|javax.swing.plaf.synth.SynthGraphicsUtils_Methods|

================================================================================

*javax.swing.plaf.synth.SynthGraphicsUtils_Constructors*
|javax.swing.plaf.synth.SynthGraphicsUtils()|Creates a SynthGraphicsUtils.

*javax.swing.plaf.synth.SynthGraphicsUtils_Methods*
|javax.swing.plaf.synth.SynthGraphicsUtils.computeStringWidth(SynthContext,Font,FontMetrics,String)|
|javax.swing.plaf.synth.SynthGraphicsUtils.drawLine(SynthContext,Object,Graphics,int,int,int,int)|
|javax.swing.plaf.synth.SynthGraphicsUtils.getMaximumCharHeight(SynthContext)|R
|javax.swing.plaf.synth.SynthGraphicsUtils.getMaximumSize(SynthContext,Font,String,Icon,int,int,int,int,int,int)|
|javax.swing.plaf.synth.SynthGraphicsUtils.getMinimumSize(SynthContext,Font,String,Icon,int,int,int,int,int,int)|
|javax.swing.plaf.synth.SynthGraphicsUtils.getPreferredSize(SynthContext,Font,String,Icon,int,int,int,int,int,int)|
|javax.swing.plaf.synth.SynthGraphicsUtils.layoutText(SynthContext,FontMetrics,String,Icon,int,int,int,int,Rectangle,Rectangle,Rectangle,int)|
|javax.swing.plaf.synth.SynthGraphicsUtils.paintText(SynthContext,Graphics,String,Icon,int,int,int,int,int,int,int)|
|javax.swing.plaf.synth.SynthGraphicsUtils.paintText(SynthContext,Graphics,String,int,int,int)|
|javax.swing.plaf.synth.SynthGraphicsUtils.paintText(SynthContext,Graphics,String,Rectangle,int)|

*javax.swing.plaf.synth.SynthGraphicsUtils_Description*

Wrapper for primitive graphics calls. 


*javax.swing.plaf.synth.SynthGraphicsUtils()*

public SynthGraphicsUtils()

Creates a SynthGraphicsUtils. 


*javax.swing.plaf.synth.SynthGraphicsUtils.computeStringWidth(SynthContext,Font,FontMetrics,String)*

public int computeStringWidth(
  javax.swing.plaf.synth.SynthContext ss,
  java.awt.Font font,
  java.awt.FontMetrics metrics,
  java.lang.String text)

Returns the size of the passed in string. 

    ss - SynthContext 
    font - Font to use 
    metrics - FontMetrics, may be ignored 
    text - Text to get size of. 

*javax.swing.plaf.synth.SynthGraphicsUtils.drawLine(SynthContext,Object,Graphics,int,int,int,int)*

public void drawLine(
  javax.swing.plaf.synth.SynthContext context,
  java.lang.Object paintKey,
  java.awt.Graphics g,
  int x1,
  int y1,
  int x2,
  int y2)

Draws a line between the two end points. 

    context - Identifies hosting region. 
    paintKey - Identifies the portion of the component being asked to paint, may be null. 
    g - Graphics object to paint to 
    x1 - x origin 
    y1 - y origin 
    x2 - x destination 
    y2 - y destination 

*javax.swing.plaf.synth.SynthGraphicsUtils.getMaximumCharHeight(SynthContext)*

public int getMaximumCharHeight(javax.swing.plaf.synth.SynthContext context)

Returns the maximum height of the the Font from the passed in SynthContext. 

    context - SynthContext used to determine font. 

    Returns: maximum height of the characters for the font from the passed in context. 
*javax.swing.plaf.synth.SynthGraphicsUtils.getMaximumSize(SynthContext,Font,String,Icon,int,int,int,int,int,int)*

public |java.awt.Dimension| getMaximumSize(
  javax.swing.plaf.synth.SynthContext ss,
  java.awt.Font font,
  java.lang.String text,
  javax.swing.Icon icon,
  int hAlign,
  int vAlign,
  int hTextPosition,
  int vTextPosition,
  int iconTextGap,
  int mnemonicIndex)

Returns the maximum size needed to properly render an icon and text. 

    ss - SynthContext 
    font - Font to use 
    text - Text to layout 
    icon - Icon to layout 
    hAlign - horizontal alignment 
    vAlign - vertical alignment 
    hTextPosition - horizontal text position 
    vTextPosition - vertical text position 
    iconTextGap - gap between icon and text 
    mnemonicIndex - Index into text to render the mnemonic at, -1 indicates no mnemonic. 

*javax.swing.plaf.synth.SynthGraphicsUtils.getMinimumSize(SynthContext,Font,String,Icon,int,int,int,int,int,int)*

public |java.awt.Dimension| getMinimumSize(
  javax.swing.plaf.synth.SynthContext ss,
  java.awt.Font font,
  java.lang.String text,
  javax.swing.Icon icon,
  int hAlign,
  int vAlign,
  int hTextPosition,
  int vTextPosition,
  int iconTextGap,
  int mnemonicIndex)

Returns the minimum size needed to properly render an icon and text. 

    ss - SynthContext 
    font - Font to use 
    text - Text to layout 
    icon - Icon to layout 
    hAlign - horizontal alignment 
    vAlign - vertical alignment 
    hTextPosition - horizontal text position 
    vTextPosition - vertical text position 
    iconTextGap - gap between icon and text 
    mnemonicIndex - Index into text to render the mnemonic at, -1 indicates no mnemonic. 

*javax.swing.plaf.synth.SynthGraphicsUtils.getPreferredSize(SynthContext,Font,String,Icon,int,int,int,int,int,int)*

public |java.awt.Dimension| getPreferredSize(
  javax.swing.plaf.synth.SynthContext ss,
  java.awt.Font font,
  java.lang.String text,
  javax.swing.Icon icon,
  int hAlign,
  int vAlign,
  int hTextPosition,
  int vTextPosition,
  int iconTextGap,
  int mnemonicIndex)

Returns the preferred size needed to properly render an icon and text. 

    ss - SynthContext 
    font - Font to use 
    text - Text to layout 
    icon - Icon to layout 
    hAlign - horizontal alignment 
    vAlign - vertical alignment 
    hTextPosition - horizontal text position 
    vTextPosition - vertical text position 
    iconTextGap - gap between icon and text 
    mnemonicIndex - Index into text to render the mnemonic at, -1 indicates no mnemonic. 

*javax.swing.plaf.synth.SynthGraphicsUtils.layoutText(SynthContext,FontMetrics,String,Icon,int,int,int,int,Rectangle,Rectangle,Rectangle,int)*

public |java.lang.String| layoutText(
  javax.swing.plaf.synth.SynthContext ss,
  java.awt.FontMetrics fm,
  java.lang.String text,
  javax.swing.Icon icon,
  int hAlign,
  int vAlign,
  int hTextPosition,
  int vTextPosition,
  java.awt.Rectangle viewR,
  java.awt.Rectangle iconR,
  java.awt.Rectangle textR,
  int iconTextGap)

Lays out text and an icon returning, by reference, the location to place the 
icon and text. 

    ss - SynthContext 
    fm - FontMetrics for the Font to use, this may be ignored 
    text - Text to layout 
    icon - Icon to layout 
    hAlign - horizontal alignment 
    vAlign - vertical alignment 
    hTextPosition - horizontal text position 
    vTextPosition - vertical text position 
    viewR - Rectangle to layout text and icon in. 
    iconR - Rectangle to place icon bounds in 
    textR - Rectangle to place text in 
    iconTextGap - gap between icon and text 

*javax.swing.plaf.synth.SynthGraphicsUtils.paintText(SynthContext,Graphics,String,Icon,int,int,int,int,int,int,int)*

public void paintText(
  javax.swing.plaf.synth.SynthContext ss,
  java.awt.Graphics g,
  java.lang.String text,
  javax.swing.Icon icon,
  int hAlign,
  int vAlign,
  int hTextPosition,
  int vTextPosition,
  int iconTextGap,
  int mnemonicIndex,
  int textOffset)

Paints an icon and text. This will render the text as html, if necessary, and 
offset the location by the insets of the component. 

    ss - SynthContext 
    g - Graphics to render string and icon into 
    text - Text to layout 
    icon - Icon to layout 
    hAlign - horizontal alignment 
    vAlign - vertical alignment 
    hTextPosition - horizontal text position 
    vTextPosition - vertical text position 
    iconTextGap - gap between icon and text 
    mnemonicIndex - Index into text to render the mnemonic at, -1 indicates no mnemonic. 
    textOffset - Amount to offset the text when painting 

*javax.swing.plaf.synth.SynthGraphicsUtils.paintText(SynthContext,Graphics,String,int,int,int)*

public void paintText(
  javax.swing.plaf.synth.SynthContext ss,
  java.awt.Graphics g,
  java.lang.String text,
  int x,
  int y,
  int mnemonicIndex)

Paints text at the specified location. This will not attempt to render the text 
as html nor will it offset by the insets of the component. 

    ss - SynthContext 
    g - Graphics used to render string in. 
    text - Text to render 
    x - X location to draw text at. 
    y - Upper left corner to draw text at. 
    mnemonicIndex - Index to draw string at. 

*javax.swing.plaf.synth.SynthGraphicsUtils.paintText(SynthContext,Graphics,String,Rectangle,int)*

public void paintText(
  javax.swing.plaf.synth.SynthContext ss,
  java.awt.Graphics g,
  java.lang.String text,
  java.awt.Rectangle bounds,
  int mnemonicIndex)

Paints text at the specified location. This will not attempt to render the text 
as html nor will it offset by the insets of the component. 

    ss - SynthContext 
    g - Graphics used to render string in. 
    text - Text to render 
    bounds - Bounds of the text to be drawn. 
    mnemonicIndex - Index to draw string at. 



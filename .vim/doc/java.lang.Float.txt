*java.lang.Float* *Float* The Float class wraps a value of primitive type
 float

public final class Float
  extends    |java.lang.Number|
  implements |java.lang.Comparable|

|java.lang.Float_Description|
|java.lang.Float_Fields|
|java.lang.Float_Constructors|
|java.lang.Float_Methods|

================================================================================

*java.lang.Float_Fields*
|float_java.lang.Float.MAX_VALUE|
|float_java.lang.Float.MIN_VALUE|
|float_java.lang.Float.NaN|
|float_java.lang.Float.NEGATIVE_INFINITY|
|float_java.lang.Float.POSITIVE_INFINITY|
|int_java.lang.Float.SIZE|
|java.lang.Class_java.lang.Float.TYPE|

*java.lang.Float_Constructors*
|java.lang.Float(double)|Constructs a newly allocated Float object that  repres
|java.lang.Float(float)|Constructs a newly allocated Float object that  represe
|java.lang.Float(String)|Constructs a newly allocated Float object that   repre

*java.lang.Float_Methods*
|java.lang.Float.byteValue()|Returns the value of this Float as a  byte (by cas
|java.lang.Float.compare(float,float)|Compares the two specified float values.
|java.lang.Float.compareTo(Float)|Compares two Float objects numerically.
|java.lang.Float.doubleValue()|Returns the double value of this  Float object.
|java.lang.Float.equals(Object)|Compares this object against the specified obje
|java.lang.Float.floatToIntBits(float)|Returns a representation of the specifie
|java.lang.Float.floatToRawIntBits(float)|Returns a representation of the speci
|java.lang.Float.floatValue()|Returns the float value of this Float  object.
|java.lang.Float.hashCode()|Returns a hash code for this Float object.
|java.lang.Float.intBitsToFloat(int)|Returns the float value corresponding to a
|java.lang.Float.intValue()|Returns the value of this Float as an  int (by cast
|java.lang.Float.isInfinite()|Returns true if this Float value is  infinitely l
|java.lang.Float.isInfinite(float)|Returns true if the specified number is infi
|java.lang.Float.isNaN()|Returns true if this Float value is a  Not-a-Number (N
|java.lang.Float.isNaN(float)|Returns true if the specified number is a  Not-a-
|java.lang.Float.longValue()|Returns value of this Float as a long  (by casting
|java.lang.Float.parseFloat(String)|Returns a new float initialized to the valu
|java.lang.Float.shortValue()|Returns the value of this Float as a  short (by c
|java.lang.Float.toHexString(float)|Returns a hexadecimal string representation
|java.lang.Float.toString()|Returns a string representation of this Float objec
|java.lang.Float.toString(float)|Returns a string representation of the float  
|java.lang.Float.valueOf(float)|Returns a Float instance representing the speci
|java.lang.Float.valueOf(String)|Returns a Float object holding the  float valu

*java.lang.Float_Description*

The Float class wraps a value of primitive type float in an object. An object 
of type Float contains a single field whose type is float. 

In addition, this class provides several methods for converting a float to a 
String and a String to a float, as well as other constants and methods useful 
when dealing with a float. 


*float_java.lang.Float.MAX_VALUE*

The Float class wraps a value of primitive type float in an object. An object 
of type Float contains a single field whose type is float. 

In addition, this class provides several methods for converting a float to a 
String and a String to a float, as well as other constants and methods useful 
when dealing with a float. 


*float_java.lang.Float.MIN_VALUE*

The Float class wraps a value of primitive type float in an object. An object 
of type Float contains a single field whose type is float. 

In addition, this class provides several methods for converting a float to a 
String and a String to a float, as well as other constants and methods useful 
when dealing with a float. 


*float_java.lang.Float.NaN*

The Float class wraps a value of primitive type float in an object. An object 
of type Float contains a single field whose type is float. 

In addition, this class provides several methods for converting a float to a 
String and a String to a float, as well as other constants and methods useful 
when dealing with a float. 


*float_java.lang.Float.NEGATIVE_INFINITY*

The Float class wraps a value of primitive type float in an object. An object 
of type Float contains a single field whose type is float. 

In addition, this class provides several methods for converting a float to a 
String and a String to a float, as well as other constants and methods useful 
when dealing with a float. 


*float_java.lang.Float.POSITIVE_INFINITY*

The Float class wraps a value of primitive type float in an object. An object 
of type Float contains a single field whose type is float. 

In addition, this class provides several methods for converting a float to a 
String and a String to a float, as well as other constants and methods useful 
when dealing with a float. 


*int_java.lang.Float.SIZE*

The Float class wraps a value of primitive type float in an object. An object 
of type Float contains a single field whose type is float. 

In addition, this class provides several methods for converting a float to a 
String and a String to a float, as well as other constants and methods useful 
when dealing with a float. 


*java.lang.Class_java.lang.Float.TYPE*

The Float class wraps a value of primitive type float in an object. An object 
of type Float contains a single field whose type is float. 

In addition, this class provides several methods for converting a float to a 
String and a String to a float, as well as other constants and methods useful 
when dealing with a float. 



*java.lang.Float(double)*

public Float(double value)

Constructs a newly allocated Float object that represents the argument 
converted to type float. 

    value - the value to be represented by the Float. 

*java.lang.Float(float)*

public Float(float value)

Constructs a newly allocated Float object that represents the primitive float 
argument. 

    value - the value to be represented by the Float. 

*java.lang.Float(String)*

public Float(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Constructs a newly allocated Float object that represents the floating-point 
value of type float represented by the string. The string is converted to a 
float value as if by the valueOf method. 

    s - a string to be converted to a Float. 

*java.lang.Float.byteValue()*

public byte byteValue()

Returns the value of this Float as a byte (by casting to a byte). 


    Returns: the float value represented by this object converted to type byte 
*java.lang.Float.compare(float,float)*

public static int compare(
  float f1,
  float f2)

Compares the two specified float values. The sign of the integer value returned 
is the same as that of the integer that would be returned by the call: 

new Float(f1).compareTo(new Float(f2)) 

    f1 - the first float to compare. 
    f2 - the second float to compare. 

    Returns: the value 0 if f1 is numerically equal to f2; a value less than 0 if f1 is 
             numerically less than f2; and a value greater than 0 if f1 is 
             numerically greater than f2. 
*java.lang.Float.compareTo(Float)*

public int compareTo(java.lang.Float anotherFloat)

Compares two Float objects numerically. There are two ways in which comparisons 
performed by this method differ from those performed by the Java language 
numerical comparison operators (<, <=, ==, >= >) when applied to primitive 
float values: 

Float.NaN is considered by this method to be equal to itself and greater than 
all other float values (including Float.POSITIVE_INFINITY). 

0.0f is considered by this method to be greater than -0.0f. 

This ensures that the natural ordering of Float objects imposed by this method 
is consistent with equals. 

    anotherFloat - the Float to be compared. 

    Returns: the value 0 if anotherFloat is numerically equal to this Float; a value less 
             than 0 if this Float is numerically less than anotherFloat; and a 
             value greater than 0 if this Float is numerically greater than 
             anotherFloat. 
*java.lang.Float.doubleValue()*

public double doubleValue()

Returns the double value of this Float object. 


    Returns: the float value represented by this object is converted to type double and the 
             result of the conversion is returned. 
*java.lang.Float.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this object against the specified object. The result is true if and 
only if the argument is not null and is a Float object that represents a float 
with the same value as the float represented by this object. For this purpose, 
two float values are considered to be the same if and only if the method 
(|java.lang.Float|) returns the identical int value when applied to each. 

Note that in most cases, for two instances of class Float, f1 and f2, the value 
of f1.equals(f2) is true if and only if 

f1.floatValue() == f2.floatValue() 

also has the value true. However, there are two exceptions: 

If f1 and f2 both represent Float.NaN, then the equals method returns true, 
even though Float.NaN==Float.NaN has the value false. If f1 represents +0.0f 
while f2 represents -0.0f, or vice versa, the equal test has the value false, 
even though 0.0f==-0.0f has the value true. 

This definition allows hash tables to operate properly. 

    obj - the object to be compared 

    Returns: true if the objects are the same; false otherwise. 
*java.lang.Float.floatToIntBits(float)*

public static native int floatToIntBits(float value)

Returns a representation of the specified floating-point value according to the 
IEEE 754 floating-point "single format" bit layout. 

Bit 31 (the bit that is selected by the mask 0x80000000) represents the sign of 
the floating-point number. Bits 30-23 (the bits that are selected by the mask 
0x7f800000) represent the exponent. Bits 22-0 (the bits that are selected by 
the mask 0x007fffff) represent the significand (sometimes called the mantissa) 
of the floating-point number. If the argument is positive infinity, the result 
is 0x7f800000. If the argument is negative infinity, the result is 0xff800000. 
If the argument is NaN, the result is 0x7fc00000. 

In all cases, the result is an integer that, when given to the 
(|java.lang.Float|) method, will produce a floating-point value the same as the 
argument to floatToIntBits (except all NaN values are collapsed to a single 
canonical NaN value). 

    value - a floating-point number. 

    Returns: the bits that represent the floating-point number. 
*java.lang.Float.floatToRawIntBits(float)*

public static native int floatToRawIntBits(float value)

Returns a representation of the specified floating-point value according to the 
IEEE 754 floating-point "single format" bit layout, preserving Not-a-Number 
(NaN) values. 

Bit 31 (the bit that is selected by the mask 0x80000000) represents the sign of 
the floating-point number. Bits 30-23 (the bits that are selected by the mask 
0x7f800000) represent the exponent. Bits 22-0 (the bits that are selected by 
the mask 0x007fffff) represent the significand (sometimes called the mantissa) 
of the floating-point number. If the argument is positive infinity, the result 
is 0x7f800000. If the argument is negative infinity, the result is 0xff800000. 

If the argument is NaN, the result is the integer representing the actual NaN 
value. Unlike the floatToIntBits method, intToRawIntBits does not collapse all 
the bit patterns encoding a NaN to a single canonical NaN value. 

In all cases, the result is an integer that, when given to the 
(|java.lang.Float|) method, will produce a floating-point value the same as the 
argument to floatToRawIntBits. 

    value - a floating-point number. 

    Returns: the bits that represent the floating-point number. 
*java.lang.Float.floatValue()*

public float floatValue()

Returns the float value of this Float object. 


    Returns: the float value represented by this object 
*java.lang.Float.hashCode()*

public int hashCode()

Returns a hash code for this Float object. The result is the integer bit 
representation, exactly as produced by the method (|java.lang.Float|) , of the 
primitive float value represented by this Float object. 


    Returns: a hash code value for this object. 
*java.lang.Float.intBitsToFloat(int)*

public static native float intBitsToFloat(int bits)

Returns the float value corresponding to a given bit representation. The 
argument is considered to be a representation of a floating-point value 
according to the IEEE 754 floating-point "single format" bit layout. 

If the argument is 0x7f800000, the result is positive infinity. 

If the argument is 0xff800000, the result is negative infinity. 

If the argument is any value in the range 0x7f800001 through 0x7fffffff or in 
the range 0xff800001 through 0xffffffff, the result is a NaN. No IEEE 754 
floating-point operation provided by Java can distinguish between two NaN 
values of the same type with different bit patterns. Distinct values of NaN are 
only distinguishable by use of the Float.floatToRawIntBits method. 

In all other cases, let s, e, and m be three values that can be computed from 
the argument: 

int s = ((bits >> 31) == 0) ? 1 : -1; int e = ((bits >> 23) & 0xff); int m = (e 
== 0) ? (bits & 0x7fffff) << 1 : (bits & 0x7fffff) | 0x800000; 

Then the floating-point result equals the value of the mathematical expression 
sm2e-150. 

Note that this method may not be able to return a float NaN with exactly same 
bit pattern as the int argument. IEEE 754 distinguishes between two kinds of 
NaNs, quiet NaNs and signaling NaNs. The differences between the two kinds of 
NaN are generally not visible in Java. Arithmetic operations on signaling NaNs 
turn them into quiet NaNs with a different, but often similar, bit pattern. 
However, on some processors merely copying a signaling NaN also performs that 
conversion. In particular, copying a signaling NaN to return it to the calling 
method may perform this conversion. So intBitsToFloat may not be able to return 
a float with a signaling NaN bit pattern. Consequently, for some int values, 
floatToRawIntBits(intBitsToFloat(start)) may not equal start. Moreover, which 
particular bit patterns represent signaling NaNs is platform dependent; 
although all NaN bit patterns, quiet or signaling, must be in the NaN range 
identified above. 

    bits - an integer. 

    Returns: the float floating-point value with the same bit pattern. 
*java.lang.Float.intValue()*

public int intValue()

Returns the value of this Float as an int (by casting to type int). 


    Returns: the float value represented by this object converted to type int 
*java.lang.Float.isInfinite()*

public boolean isInfinite()

Returns true if this Float value is infinitely large in magnitude, false 
otherwise. 


    Returns: true if the value represented by this object is positive infinity or negative 
             infinity; false otherwise. 
*java.lang.Float.isInfinite(float)*

public static boolean isInfinite(float v)

Returns true if the specified number is infinitely large in magnitude, false 
otherwise. 

    v - the value to be tested. 

    Returns: true if the argument is positive infinity or negative infinity; false 
             otherwise. 
*java.lang.Float.isNaN()*

public boolean isNaN()

Returns true if this Float value is a Not-a-Number (NaN), false otherwise. 


    Returns: true if the value represented by this object is NaN; false otherwise. 
*java.lang.Float.isNaN(float)*

public static boolean isNaN(float v)

Returns true if the specified number is a Not-a-Number (NaN) value, false 
otherwise. 

    v - the value to be tested. 

    Returns: true if the argument is NaN; false otherwise. 
*java.lang.Float.longValue()*

public long longValue()

Returns value of this Float as a long (by casting to type long). 


    Returns: the float value represented by this object converted to type long 
*java.lang.Float.parseFloat(String)*

public static float parseFloat(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Returns a new float initialized to the value represented by the specified 
String, as performed by the valueOf method of class Float. 

    s - the string to be parsed. 

    Returns: the float value represented by the string argument. 
*java.lang.Float.shortValue()*

public short shortValue()

Returns the value of this Float as a short (by casting to a short). 


    Returns: the float value represented by this object converted to type short 
*java.lang.Float.toHexString(float)*

public static |java.lang.String| toHexString(float f)

Returns a hexadecimal string representation of the float argument. All 
characters mentioned below are ASCII characters. 

If the argument is NaN, the result is the string NaN. Otherwise, the result is 
a string that represents the sign and magnitude (absolute value) of the 
argument. If the sign is negative, the first character of the result is '-' 
('u002D'); if the sign is positive, no sign character appears in the result. As 
for the magnitude m: 

If m is infinity, it is represented by the string "Infinity"; thus, positive 
infinity produces the result "Infinity" and negative infinity produces the 
result "-Infinity". 

If m is zero, it is represented by the string "0x0.0p0"; thus, negative zero 
produces the result "-0x0.0p0" and positive zero produces the result "0x0.0p0". 

If m is a float value with a normalized representation, substrings are used to 
represent the significand and exponent fields. The significand is represented 
by the characters 0x1. followed by a lowercase hexadecimal representation of 
the rest of the significand as a fraction. Trailing zeros in the hexadecimal 
representation are removed unless all the digits are zero, in which case a 
single zero is used. Next, the exponent is represented by p followed by a 
decimal string of the unbiased exponent as if produced by a call to 
Integer.toString(|java.lang.Integer|) on the exponent value. 

If m is a float value with a subnormal representation, the significand is 
represented by the characters 0x0. followed by a hexadecimal representation of 
the rest of the significand as a fraction. Trailing zeros in the hexadecimal 
representation are removed. Next, the exponent is represented by p-126. Note 
that there must be at least one nonzero digit in a subnormal significand. 





Examples Floating-point ValueHexadecimal String 1.0	0x1.0p0 -1.0	-0x1.0p0 
2.0	0x1.0p1 3.0	0x1.8p1 0.5	0x1.0p-1 0.25	0x1.0p-2 Float.MAX_VALUE 
0x1.fffffep127 Minimum Normal Value 0x1.0p-126 Maximum Subnormal Value 
0x0.fffffep-126 Float.MIN_VALUE 0x0.000002p-126 

    f - the float to be converted. 

    Returns: a hex string representation of the argument. 
*java.lang.Float.toString()*

public |java.lang.String| toString()

Returns a string representation of this Float object. The primitive float value 
represented by this object is converted to a String exactly as if by the method 
toString of one argument. 


    Returns: a String representation of this object. 
*java.lang.Float.toString(float)*

public static |java.lang.String| toString(float f)

Returns a string representation of the float argument. All characters mentioned 
below are ASCII characters. 

If the argument is NaN, the result is the string NaN. Otherwise, the result is 
a string that represents the sign and magnitude (absolute value) of the 
argument. If the sign is negative, the first character of the result is '-' 
('u002D'); if the sign is positive, no sign character appears in the result. As 
for the magnitude m: 

If m is infinity, it is represented by the characters "Infinity"; thus, 
positive infinity produces the result "Infinity" and negative infinity produces 
the result "-Infinity". If m is zero, it is represented by the characters 
"0.0"; thus, negative zero produces the result "-0.0" and positive zero 
produces the result "0.0". If m is greater than or equal to 10-3 but less than 
107, then it is represented as the integer part of m, in decimal form with no 
leading zeroes, followed by '.' ('u002E'), followed by one or more decimal 
digits representing the fractional part of m. If m is less than 10-3 or greater 
than or equal to 107, then it is represented in so-called "computerized 
scientific notation." Let n be the unique integer such that 10n <= m < 10n+1; 
then let a be the mathematically exact quotient of m and 10n so that 1 <= a < 
10. The magnitude is then represented as the integer part of a, as a single 
decimal digit, followed by '.' ('u002E'), followed by decimal digits 
representing the fractional part of a, followed by the letter 'E' ('u0045'), 
followed by a representation of n as a decimal integer, as produced by the 
method (|java.lang.Integer|) . 

How many digits must be printed for the fractional part of m or a? There must 
be at least one digit to represent the fractional part, and beyond that as 
many, but only as many, more digits as are needed to uniquely distinguish the 
argument value from adjacent values of type float. That is, suppose that x is 
the exact mathematical value represented by the decimal representation produced 
by this method for a finite nonzero argument f. Then f must be the float value 
nearest to x; or, if two float values are equally close to x, then f must be 
one of them and the least significant bit of the significand of f must be 0. 

To create localized string representations of a floating-point value, use 
subclasses of (|java.text.NumberFormat|) . 

    f - the float to be converted. 

    Returns: a string representation of the argument. 
*java.lang.Float.valueOf(float)*

public static |java.lang.Float| valueOf(float f)

Returns a Float instance representing the specified float value. If a new Float 
instance is not required, this method should generally be used in preference to 
the constructor (|java.lang.Float|) , as this method is likely to yield 
significantly better space and time performance by caching frequently requested 
values. 

    f - a float value. 

    Returns: a Float instance representing f. 
*java.lang.Float.valueOf(String)*

public static |java.lang.Float| valueOf(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Returns a Float object holding the float value represented by the argument 
string s. 

If s is null, then a NullPointerException is thrown. 

Leading and trailing whitespace characters in s are ignored. Whitespace is 
removed as if by the (|java.lang.String|) method; that is, both ASCII space and 
control characters are removed. The rest of s should constitute a FloatValue as 
described by the lexical syntax rules: 



FloatValue: Signopt NaN Signopt Infinity Signopt FloatingPointLiteral Signopt 
HexFloatingPointLiteral SignedInteger 



HexFloatingPointLiteral: HexSignificand BinaryExponent FloatTypeSuffixopt 



HexSignificand: HexNumeral HexNumeral . 0x HexDigitsopt . HexDigits 0X 
HexDigitsopt . HexDigits 



BinaryExponent: BinaryExponentIndicator SignedInteger 



BinaryExponentIndicator: p P 



where Sign, FloatingPointLiteral, HexNumeral, HexDigits, SignedInteger and 
FloatTypeSuffix are as defined in the lexical structure sections of the of the 
Java Language Specification. If s does not have the form of a FloatValue, then 
a NumberFormatException is thrown. Otherwise, s is regarded as representing an 
exact decimal value in the usual computerized scientific notation or as an 
exact hexadecimal value; this exact numerical value is then conceptually 
converted to an infinitely precise binary value that is then rounded to type 
float by the usual round-to-nearest rule of IEEE 754 floating-point arithmetic, 
which includes preserving the sign of a zero value. Finally, a Float object 
representing this float value is returned. 

To interpret localized string representations of a floating-point value, use 
subclasses of (|java.text.NumberFormat|) . 

Note that trailing format specifiers, specifiers that determine the type of a 
floating-point literal (1.0f is a float value; 1.0d is a double value), do not 
influence the results of this method. In other words, the numerical value of 
the input string is converted directly to the target floating-point type. In 
general, the two-step sequence of conversions, string to double followed by 
double to float, is not equivalent to converting a string directly to float. 
For example, if first converted to an intermediate double and then to float, 
the string "1.00000017881393421514957253748434595763683319091796875001d" 
results in the float value 1.0000002f; if the string is converted directly to 
float, 1.0000001f results. 

To avoid calling this method on a invalid string and having a 
NumberFormatException be thrown, the documentation for 
Double.valueOf(|java.lang.Double|) lists a regular expression which can be used 
to screen the input. 

    s - the string to be parsed. 

    Returns: a Float object holding the value represented by the String argument. 


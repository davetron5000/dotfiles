*java.lang.reflect.UndeclaredThrowableException* *UndeclaredThrowableException* 

public class UndeclaredThrowableException
  extends    |java.lang.RuntimeException|

|java.lang.reflect.UndeclaredThrowableException_Description|
|java.lang.reflect.UndeclaredThrowableException_Fields|
|java.lang.reflect.UndeclaredThrowableException_Constructors|
|java.lang.reflect.UndeclaredThrowableException_Methods|

================================================================================

*java.lang.reflect.UndeclaredThrowableException_Constructors*
|java.lang.reflect.UndeclaredThrowableException(Throwable)|Constructs an Undecl
|java.lang.reflect.UndeclaredThrowableException(Throwable,String)|Constructs an

*java.lang.reflect.UndeclaredThrowableException_Methods*
|java.lang.reflect.UndeclaredThrowableException.getCause()|Returns the cause of
|java.lang.reflect.UndeclaredThrowableException.getUndeclaredThrowable()|Return

*java.lang.reflect.UndeclaredThrowableException_Description*

Thrown by a method invocation on a proxy instance if its invocation handler's 
invoke(|java.lang.reflect.InvocationHandler|) method throws a checked exception 
(a Throwable that is not assignable to RuntimeException or Error) that is not 
assignable to any of the exception types declared in the throws clause of the 
method that was invoked on the proxy instance and dispatched to the invocation 
handler. 

An UndeclaredThrowableException instance contains the undeclared checked 
exception that was thrown by the invocation handler, and it can be retrieved 
with the getUndeclaredThrowable() method. UndeclaredThrowableException extends 
RuntimeException, so it is an unchecked exception that wraps a checked 
exception. 

As of release 1.4, this exception has been retrofitted to conform to the 
general purpose exception-chaining mechanism. The "undeclared checked exception 
that was thrown by the invocation handler" that may be provided at construction 
time and accessed via the (|java.lang.reflect.UndeclaredThrowableException|) 
method is now known as the cause, and may be accessed via the 
(|java.lang.Throwable|) method, as well as the aforementioned "legacy method." 


*java.lang.reflect.UndeclaredThrowableException(Throwable)*

public UndeclaredThrowableException(java.lang.Throwable undeclaredThrowable)

Constructs an UndeclaredThrowableException with the specified Throwable. 

    undeclaredThrowable - the undeclared checked exception that was thrown 

*java.lang.reflect.UndeclaredThrowableException(Throwable,String)*

public UndeclaredThrowableException(
  java.lang.Throwable undeclaredThrowable,
  java.lang.String s)

Constructs an UndeclaredThrowableException with the specified Throwable and a 
detail message. 

    undeclaredThrowable - the undeclared checked exception that was thrown 
    s - the detail message 

*java.lang.reflect.UndeclaredThrowableException.getCause()*

public |java.lang.Throwable| getCause()

Returns the cause of this exception (the Throwable instance wrapped in this 
UndeclaredThrowableException, which may be null). 


    Returns: the cause of this exception. 
*java.lang.reflect.UndeclaredThrowableException.getUndeclaredThrowable()*

public |java.lang.Throwable| getUndeclaredThrowable()

Returns the Throwable instance wrapped in this UndeclaredThrowableException, 
which may be null. 

This method predates the general-purpose exception chaining facility. The 
(|java.lang.Throwable|) method is now the preferred means of obtaining this 
information. 


    Returns: the undeclared checked exception that was thrown 


*javax.swing.JScrollPane* *JScrollPane* Provides a scrollable view of a lightweight component.

public class JScrollPane
  extends    |javax.swing.JComponent|
  implements |javax.swing.ScrollPaneConstants|
             |javax.accessibility.Accessible|

|javax.swing.JScrollPane_Description|
|javax.swing.JScrollPane_Fields|
|javax.swing.JScrollPane_Constructors|
|javax.swing.JScrollPane_Methods|

====================================================================================================================================================================================

*javax.swing.JScrollPane_Fields*
|javax.swing.JViewport_javax.swing.JScrollPane.columnHeader|
|javax.swing.JScrollBar_javax.swing.JScrollPane.horizontalScrollBar|
|int_javax.swing.JScrollPane.horizontalScrollBarPolicy|
|java.awt.Component_javax.swing.JScrollPane.lowerLeft|
|java.awt.Component_javax.swing.JScrollPane.lowerRight|
|javax.swing.JViewport_javax.swing.JScrollPane.rowHeader|
|java.awt.Component_javax.swing.JScrollPane.upperLeft|
|java.awt.Component_javax.swing.JScrollPane.upperRight|
|javax.swing.JScrollBar_javax.swing.JScrollPane.verticalScrollBar|
|int_javax.swing.JScrollPane.verticalScrollBarPolicy|
|javax.swing.JViewport_javax.swing.JScrollPane.viewport|

*javax.swing.JScrollPane_Constructors*
|javax.swing.JScrollPane()|Creates an empty (no viewport view) JScrollPane  where both horizontal and vertical scrollbars appear when needed.
|javax.swing.JScrollPane(Component)|Creates a JScrollPane that displays the  contents of the specified  component, where both horizontal and vertical scrollbars appear  whenever t
|javax.swing.JScrollPane(Component,int,int)|Creates a JScrollPane that displays the view  component in a viewport  whose view position can be controlled with a pair of scrollbars.
|javax.swing.JScrollPane(int,int)|Creates an empty (no viewport view) JScrollPane  with specified   scrollbar policies.

*javax.swing.JScrollPane_Methods*
|javax.swing.JScrollPane.createHorizontalScrollBar()|Returns a JScrollPane.ScrollBar by default.
|javax.swing.JScrollPane.createVerticalScrollBar()|Returns a JScrollPane.ScrollBar by default.
|javax.swing.JScrollPane.createViewport()|Returns a new JViewport by default.
|javax.swing.JScrollPane.getAccessibleContext()|Gets the AccessibleContext associated with this JScrollPane.
|javax.swing.JScrollPane.getColumnHeader()|Returns the column header.
|javax.swing.JScrollPane.getCorner(String)|Returns the component at the specified corner.
|javax.swing.JScrollPane.getHorizontalScrollBar()|Returns the horizontal scroll bar that controls the viewport's  horizontal view position.
|javax.swing.JScrollPane.getHorizontalScrollBarPolicy()|Returns the horizontal scroll bar policy value.
|javax.swing.JScrollPane.getRowHeader()|Returns the row header.
|javax.swing.JScrollPane.getUI()|Returns the look and feel (Lobject that renders this component.
|javax.swing.JScrollPane.getUIClassID()|Returns the suffix used to construct the name of the Lclass used to  render this component.
|javax.swing.JScrollPane.getVerticalScrollBar()|Returns the vertical scroll bar that controls the viewports  vertical view position.
|javax.swing.JScrollPane.getVerticalScrollBarPolicy()|Returns the vertical scroll bar policy value.
|javax.swing.JScrollPane.getViewport()|Returns the current JViewport.
|javax.swing.JScrollPane.getViewportBorder()|Returns the Border object that surrounds the viewport.
|javax.swing.JScrollPane.getViewportBorderBounds()|Returns the bounds of the viewport's border.
|javax.swing.JScrollPane.isValidateRoot()|Overridden to return true so that any calls to revalidate  on any descendants of this JScrollPane will cause the  entire tree beginning w
|javax.swing.JScrollPane.isWheelScrollingEnabled()|Indicates whether or not scrolling will take place in response to the  mouse wheel.
|javax.swing.JScrollPane.paramString()|Returns a string representation of this JScrollPane.
|javax.swing.JScrollPane.setColumnHeader(JViewport)|Removes the old columnHeader, if it exists.
|javax.swing.JScrollPane.setColumnHeaderView(Component)|Creates a column-header viewport if necessary, sets  its view, and then adds the column-header viewport  to the scrollpane.
|javax.swing.JScrollPane.setComponentOrientation(ComponentOrientation)|Sets the orientation for the vertical and horizontal  scrollbars as determined by the  ComponentOrientation 
|javax.swing.JScrollPane.setCorner(String,Component)|Adds a child that will appear in one of the scroll panes  corners, if there's room.
|javax.swing.JScrollPane.setHorizontalScrollBar(JScrollBar)|Adds the scrollbar that controls the viewport's horizontal view   position to the scrollpane.
|javax.swing.JScrollPane.setHorizontalScrollBarPolicy(int)|Determines when the horizontal scrollbar appears in the scrollpane.
|javax.swing.JScrollPane.setLayout(LayoutManager)|Sets the layout manager for this JScrollPane.
|javax.swing.JScrollPane.setRowHeader(JViewport)|Removes the old rowHeader, if it exists.
|javax.swing.JScrollPane.setRowHeaderView(Component)|Creates a row-header viewport if necessary, sets  its view and then adds the row-header viewport  to the scrollpane.
|javax.swing.JScrollPane.setUI(ScrollPaneUI)|Sets the ScrollPaneUI object that provides the  look and feel (Lfor this component.
|javax.swing.JScrollPane.setVerticalScrollBar(JScrollBar)|Adds the scrollbar that controls the viewports vertical view position  to the scrollpane.
|javax.swing.JScrollPane.setVerticalScrollBarPolicy(int)|Determines when the vertical scrollbar appears in the scrollpane.
|javax.swing.JScrollPane.setViewport(JViewport)|Removes the old viewport (if there is one); forces the  viewPosition of the new viewport to be in the +x,+y quadrant;  syncs up the
|javax.swing.JScrollPane.setViewportBorder(Border)|Adds a border around the viewport.
|javax.swing.JScrollPane.setViewportView(Component)|Creates a viewport if necessary and then sets its view.
|javax.swing.JScrollPane.setWheelScrollingEnabled(boolean)|Enables/disables scrolling in response to movement of the mouse wheel.
|javax.swing.JScrollPane.updateUI()|Replaces the current ScrollPaneUI object with a version   from the current default look and feel.

*javax.swing.JScrollPane_Description*

Provides a scrollable view of a lightweight component. A JScrollPane manages a viewport, optional vertical and horizontal scroll bars, and optional row and column heading 
viewports. You can find task-oriented documentation of JScrollPane in How to Use Scroll Panes, a section in The Java Tutorial. Note that JScrollPane does not support heavyweight 
components. 







The JViewport provides a window, or viewport onto a data source -- for example, a text file. That data source is the scrollable client (aka data model) displayed by the JViewport 
view. A JScrollPane basically consists of JScrollBars, a JViewport, and the wiring between them, as shown in the diagram at right. 

In addition to the scroll bars and viewport, a JScrollPane can have a column header and a row header. Each of these is a JViewport object that you specify with setRowHeaderView, 
and setColumnHeaderView. The column header viewport automatically scrolls left and right, tracking the left-right scrolling of the main viewport. (It never scrolls vertically, 
however.) The row header acts in a similar fashion. 

By default, the corners are empty. You can put a component into a corner using setCorner, in case you there is some function or decoration you would like to add to the scroll 
pane. The size of corner components is entirely determined by the size of the headers and scroll bars that surround them. 

To add a border around the main viewport, you can use setViewportBorder. (Of course, you can also add a border around the whole scroll pane using setBorder.) 

A common operation to want to do is to set the background color that will be used if the main viewport view is smaller than the viewport, or is not opaque. This can be 
accomplished by setting the background color of the viewport, via scrollPane.getViewport().setBackground(). The reason for setting the color of the viewport and not the scrollpane 
is that by default JViewport is opaque which, among other things, means it will completely fill in its background using its background color. Therefore when JScrollPane draws its 
background the viewport will usually draw over it. 

By default JScrollPane uses ScrollPaneLayout to handle the layout of its child Components. ScrollPaneLayout determines the size to make the viewport view in one of two ways: 

If the view implements Scrollable a combination of getPreferredScrollableViewportSize, getScrollableTracksViewportWidth and getScrollableTracksViewportHeightis used, otherwise 
getPreferredSize is used. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.JViewport_javax.swing.JScrollPane.columnHeader*

The column header child. Default is null. 


*javax.swing.JScrollBar_javax.swing.JScrollPane.horizontalScrollBar*

The scrollpane's horizontal scrollbar child. Default is a JScrollBar. 


*int_javax.swing.JScrollPane.horizontalScrollBarPolicy*

The display policy for the horizontal scrollbar. The default is ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED. 


*java.awt.Component_javax.swing.JScrollPane.lowerLeft*

The component to display in the lower left corner. Default is null. 


*java.awt.Component_javax.swing.JScrollPane.lowerRight*

The component to display in the lower right corner. Default is null. 


*javax.swing.JViewport_javax.swing.JScrollPane.rowHeader*

The row header child. Default is null. 


*java.awt.Component_javax.swing.JScrollPane.upperLeft*

The component to display in the upper left corner. Default is null. 


*java.awt.Component_javax.swing.JScrollPane.upperRight*

The component to display in the upper right corner. Default is null. 


*javax.swing.JScrollBar_javax.swing.JScrollPane.verticalScrollBar*

The scrollpane's vertical scrollbar child. Default is a JScrollBar. 


*int_javax.swing.JScrollPane.verticalScrollBarPolicy*

The display policy for the vertical scrollbar. The default is ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED. 


*javax.swing.JViewport_javax.swing.JScrollPane.viewport*

The scrollpane's viewport child. Default is an empty JViewport. 



*javax.swing.JScrollPane()*

public JScrollPane()

Creates an empty (no viewport view) JScrollPane where both horizontal and vertical scrollbars appear when needed. 


*javax.swing.JScrollPane(Component)*

public JScrollPane(java.awt.Component view)

Creates a JScrollPane that displays the contents of the specified component, where both horizontal and vertical scrollbars appear whenever the component's contents are larger than 
the view. 

    view - the component to display in the scrollpane's viewport 

*javax.swing.JScrollPane(Component,int,int)*

public JScrollPane(
  java.awt.Component view,
  int vsbPolicy,
  int hsbPolicy)

Creates a JScrollPane that displays the view component in a viewport whose view position can be controlled with a pair of scrollbars. The scrollbar policies specify when the 
scrollbars are displayed, For example, if vsbPolicy is VERTICAL_SCROLLBAR_AS_NEEDED then the vertical scrollbar only appears if the view doesn't fit vertically. The available 
policy settings are listed at (|javax.swing.JScrollPane|) and (|javax.swing.JScrollPane|) . 

    view - the component to display in the scrollpanes viewport 
    vsbPolicy - an integer that specifies the vertical scrollbar policy 
    hsbPolicy - an integer that specifies the horizontal scrollbar policy 

*javax.swing.JScrollPane(int,int)*

public JScrollPane(
  int vsbPolicy,
  int hsbPolicy)

Creates an empty (no viewport view) JScrollPane with specified scrollbar policies. The available policy settings are listed at (|javax.swing.JScrollPane|) and 
(|javax.swing.JScrollPane|) . 

    vsbPolicy - an integer that specifies the vertical scrollbar policy 
    hsbPolicy - an integer that specifies the horizontal scrollbar policy 

*javax.swing.JScrollPane.createHorizontalScrollBar()*

public |javax.swing.JScrollBar| createHorizontalScrollBar()

Returns a JScrollPane.ScrollBar by default. Subclasses may override this method to force ScrollPaneUI implementations to use a JScrollBar subclass. Used by ScrollPaneUI 
implementations to create the horizontal scrollbar. 



    Returns: a JScrollBar with a horizontal orientation 

*javax.swing.JScrollPane.createVerticalScrollBar()*

public |javax.swing.JScrollBar| createVerticalScrollBar()

Returns a JScrollPane.ScrollBar by default. Subclasses may override this method to force ScrollPaneUI implementations to use a JScrollBar subclass. Used by ScrollPaneUI 
implementations to create the vertical scrollbar. 



    Returns: a JScrollBar with a vertical orientation 

*javax.swing.JScrollPane.createViewport()*

protected |javax.swing.JViewport| createViewport()

Returns a new JViewport by default. Used to create the viewport (as needed) in setViewportView, setRowHeaderView, and setColumnHeaderView. Subclasses may override this method to 
return a subclass of JViewport. 



    Returns: a new JViewport 

*javax.swing.JScrollPane.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JScrollPane. For scroll panes, the AccessibleContext takes the form of an AccessibleJScrollPane. A new AccessibleJScrollPane 
instance is created if necessary. 



    Returns: an AccessibleJScrollPane that serves as the AccessibleContext of this JScrollPane 

*javax.swing.JScrollPane.getColumnHeader()*

public |javax.swing.JViewport| getColumnHeader()

Returns the column header. 



    Returns: the columnHeader property 

*javax.swing.JScrollPane.getCorner(String)*

public |java.awt.Component| getCorner(java.lang.String key)

Returns the component at the specified corner. The key value specifying the corner is one of: 

JScrollPane.LOWER_LEFT_CORNER JScrollPane.LOWER_RIGHT_CORNER JScrollPane.UPPER_LEFT_CORNER JScrollPane.UPPER_RIGHT_CORNER JScrollPane.LOWER_LEADING_CORNER 
JScrollPane.LOWER_TRAILING_CORNER JScrollPane.UPPER_LEADING_CORNER JScrollPane.UPPER_TRAILING_CORNER 


    key - one of the values as shown above 

    Returns: one of the components listed below or null if key is invalid: 

lowerLeft lowerRight upperLeft upperRight 

*javax.swing.JScrollPane.getHorizontalScrollBar()*

public |javax.swing.JScrollBar| getHorizontalScrollBar()

Returns the horizontal scroll bar that controls the viewport's horizontal view position. 



    Returns: the horizontalScrollBar property 

*javax.swing.JScrollPane.getHorizontalScrollBarPolicy()*

public int getHorizontalScrollBarPolicy()

Returns the horizontal scroll bar policy value. 



    Returns: the horizontalScrollBarPolicy property 

*javax.swing.JScrollPane.getRowHeader()*

public |javax.swing.JViewport| getRowHeader()

Returns the row header. 



    Returns: the rowHeader property 

*javax.swing.JScrollPane.getUI()*

public |javax.swing.plaf.ScrollPaneUI| getUI()

Returns the look and feel (Lobject that renders this component. 



    Returns: the ScrollPaneUI object that renders this component 

*javax.swing.JScrollPane.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the suffix used to construct the name of the Lclass used to render this component. 



    Returns: the string "ScrollPaneUI" 

*javax.swing.JScrollPane.getVerticalScrollBar()*

public |javax.swing.JScrollBar| getVerticalScrollBar()

Returns the vertical scroll bar that controls the viewports vertical view position. 



    Returns: the verticalScrollBar property 

*javax.swing.JScrollPane.getVerticalScrollBarPolicy()*

public int getVerticalScrollBarPolicy()

Returns the vertical scroll bar policy value. 



    Returns: the verticalScrollBarPolicy property 

*javax.swing.JScrollPane.getViewport()*

public |javax.swing.JViewport| getViewport()

Returns the current JViewport. 



    Returns: the viewport property 

*javax.swing.JScrollPane.getViewportBorder()*

public |javax.swing.border.Border| getViewportBorder()

Returns the Border object that surrounds the viewport. 



    Returns: the viewportBorder property 

*javax.swing.JScrollPane.getViewportBorderBounds()*

public |java.awt.Rectangle| getViewportBorderBounds()

Returns the bounds of the viewport's border. 



    Returns: a Rectangle object specifying the viewport border 

*javax.swing.JScrollPane.isValidateRoot()*

public boolean isValidateRoot()

Overridden to return true so that any calls to revalidate on any descendants of this JScrollPane will cause the entire tree beginning with this JScrollPane to be validated. 



    Returns: 

*javax.swing.JScrollPane.isWheelScrollingEnabled()*

public boolean isWheelScrollingEnabled()

Indicates whether or not scrolling will take place in response to the mouse wheel. Wheel scrolling is enabled by default. 



*javax.swing.JScrollPane.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JScrollPane. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary 
between implementations. The returned string may be empty but may not be null. 



    Returns: a string representation of this JScrollPane. 

*javax.swing.JScrollPane.setColumnHeader(JViewport)*

public void setColumnHeader(javax.swing.JViewport columnHeader)

Removes the old columnHeader, if it exists. If the new columnHeader isn't null, sync the x coordinate of the its viewPosition with the viewport (if there is one) and then add it 
to the scrollpane. 

Most applications will find it more convenient to use setRowHeaderView to add a row header component and its viewport to the scrollpane. 



*javax.swing.JScrollPane.setColumnHeaderView(Component)*

public void setColumnHeaderView(java.awt.Component view)

Creates a column-header viewport if necessary, sets its view, and then adds the column-header viewport to the scrollpane. For example: 

JScrollPane scrollpane = new JScrollPane(); scrollpane.setViewportView(myBigComponentToScroll); scrollpane.setColumnHeaderView(myBigComponentsColumnHeader); 


    view - the component to display as the column header 

*javax.swing.JScrollPane.setComponentOrientation(ComponentOrientation)*

public void setComponentOrientation(java.awt.ComponentOrientation co)

Sets the orientation for the vertical and horizontal scrollbars as determined by the ComponentOrientation argument. 


    co - one of the following values: 

java.awt.ComponentOrientation.LEFT_TO_RIGHT java.awt.ComponentOrientation.RIGHT_TO_LEFT java.awt.ComponentOrientation.UNKNOWN 

*javax.swing.JScrollPane.setCorner(String,Component)*

public void setCorner(
  java.lang.String key,
  java.awt.Component corner)

Adds a child that will appear in one of the scroll panes corners, if there's room. For example with both scrollbars showing (on the right and bottom edges of the scrollpane) the 
lower left corner component will be shown in the space between ends of the two scrollbars. Legal values for the key are: 

JScrollPane.LOWER_LEFT_CORNER JScrollPane.LOWER_RIGHT_CORNER JScrollPane.UPPER_LEFT_CORNER JScrollPane.UPPER_RIGHT_CORNER JScrollPane.LOWER_LEADING_CORNER 
JScrollPane.LOWER_TRAILING_CORNER JScrollPane.UPPER_LEADING_CORNER JScrollPane.UPPER_TRAILING_CORNER 

Although "corner" doesn't match any beans property signature, PropertyChange events are generated with the property name set to the corner key. 


    key - identifies which corner the component will appear in 
    corner - one of the following components: 

lowerLeft lowerRight upperLeft upperRight 

*javax.swing.JScrollPane.setHorizontalScrollBar(JScrollBar)*

public void setHorizontalScrollBar(javax.swing.JScrollBar horizontalScrollBar)

Adds the scrollbar that controls the viewport's horizontal view position to the scrollpane. This is usually unnecessary, as JScrollPane creates horizontal and vertical scrollbars 
by default. 


    horizontalScrollBar - the horizontal scrollbar to be added 

*javax.swing.JScrollPane.setHorizontalScrollBarPolicy(int)*

public void setHorizontalScrollBarPolicy(int policy)

Determines when the horizontal scrollbar appears in the scrollpane. The options are: ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED 
ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS 


    policy - one of the three values listed above 

*javax.swing.JScrollPane.setLayout(LayoutManager)*

public void setLayout(java.awt.LayoutManager layout)

Sets the layout manager for this JScrollPane. This method overrides setLayout in java.awt.Container to ensure that only LayoutManagers which are subclasses of ScrollPaneLayout can 
be used in a JScrollPane. If layout is non-null, this will invoke syncWithScrollPane on it. 


    layout - the specified layout manager 

*javax.swing.JScrollPane.setRowHeader(JViewport)*

public void setRowHeader(javax.swing.JViewport rowHeader)

Removes the old rowHeader, if it exists. If the new rowHeader isn't null, syncs the y coordinate of its viewPosition with the viewport (if there is one) and then adds it to the 
scrollpane. 

Most applications will find it more convenient to use setRowHeaderView to add a row header component and its viewport to the scrollpane. 


    rowHeader - the new row header to be used; if null the old row header is still removed and the new rowHeader is set to null 

*javax.swing.JScrollPane.setRowHeaderView(Component)*

public void setRowHeaderView(java.awt.Component view)

Creates a row-header viewport if necessary, sets its view and then adds the row-header viewport to the scrollpane. For example: 

JScrollPane scrollpane = new JScrollPane(); scrollpane.setViewportView(myBigComponentToScroll); scrollpane.setRowHeaderView(myBigComponentsRowHeader); 


    view - the component to display as the row header 

*javax.swing.JScrollPane.setUI(ScrollPaneUI)*

public void setUI(javax.swing.plaf.ScrollPaneUI ui)

Sets the ScrollPaneUI object that provides the look and feel (Lfor this component. 


    ui - the ScrollPaneUI Lobject 

*javax.swing.JScrollPane.setVerticalScrollBar(JScrollBar)*

public void setVerticalScrollBar(javax.swing.JScrollBar verticalScrollBar)

Adds the scrollbar that controls the viewports vertical view position to the scrollpane. This is usually unnecessary, as JScrollPane creates vertical and horizontal scrollbars by 
default. 


    verticalScrollBar - the new vertical scrollbar to be added 

*javax.swing.JScrollPane.setVerticalScrollBarPolicy(int)*

public void setVerticalScrollBarPolicy(int policy)

Determines when the vertical scrollbar appears in the scrollpane. Legal values are: 

ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS 


    policy - one of the three values listed above 

*javax.swing.JScrollPane.setViewport(JViewport)*

public void setViewport(javax.swing.JViewport viewport)

Removes the old viewport (if there is one); forces the viewPosition of the new viewport to be in the +x,+y quadrant; syncs up the row and column headers (if there are any) with 
the new viewport; and finally syncs the scrollbars and headers with the new viewport. 

Most applications will find it more convenient to use setViewportView to add a viewport and a view to the scrollpane. 


    viewport - the new viewport to be used; if viewport is null, the old viewport is still removed and the new viewport is set to null 

*javax.swing.JScrollPane.setViewportBorder(Border)*

public void setViewportBorder(javax.swing.border.Border viewportBorder)

Adds a border around the viewport. Note that the border isn't set on the viewport directly, JViewport doesn't support the JComponent border property. Similarly setting the 
JScrollPanes viewport doesn't affect the viewportBorder property. 

The default value of this property is computed by the look and feel implementation. 


    viewportBorder - the border to be added 

*javax.swing.JScrollPane.setViewportView(Component)*

public void setViewportView(java.awt.Component view)

Creates a viewport if necessary and then sets its view. Applications that don't provide the view directly to the JScrollPane constructor should use this method to specify the 
scrollable child that's going to be displayed in the scrollpane. For example: 

JScrollPane scrollpane = new JScrollPane(); scrollpane.setViewportView(myBigComponentToScroll); 

Applications should not add children directly to the scrollpane. 


    view - the component to add to the viewport 

*javax.swing.JScrollPane.setWheelScrollingEnabled(boolean)*

public void setWheelScrollingEnabled(boolean handleWheel)

Enables/disables scrolling in response to movement of the mouse wheel. Wheel scrolling is enabled by default. 


    handleWheel - true if scrolling should be done automatically for a MouseWheelEvent, false otherwise. 

*javax.swing.JScrollPane.updateUI()*

public void updateUI()

Replaces the current ScrollPaneUI object with a version from the current default look and feel. To be called when the default look and feel changes. 





*javax.swing.ScrollPaneLayout* *ScrollPaneLayout* The layout manager used by JSc

public class ScrollPaneLayout
  extends    |java.lang.Object|
  implements |java.awt.LayoutManager|
             |javax.swing.ScrollPaneConstants|
             |java.io.Serializable|

|javax.swing.ScrollPaneLayout_Description|
|javax.swing.ScrollPaneLayout_Fields|
|javax.swing.ScrollPaneLayout_Constructors|
|javax.swing.ScrollPaneLayout_Methods|

================================================================================

*javax.swing.ScrollPaneLayout_Fields*
|javax.swing.JViewport_javax.swing.ScrollPaneLayout.colHead|
|javax.swing.JScrollBar_javax.swing.ScrollPaneLayout.hsb|
|int_javax.swing.ScrollPaneLayout.hsbPolicy|
|java.awt.Component_javax.swing.ScrollPaneLayout.lowerLeft|
|java.awt.Component_javax.swing.ScrollPaneLayout.lowerRight|
|javax.swing.JViewport_javax.swing.ScrollPaneLayout.rowHead|
|java.awt.Component_javax.swing.ScrollPaneLayout.upperLeft|
|java.awt.Component_javax.swing.ScrollPaneLayout.upperRight|
|javax.swing.JViewport_javax.swing.ScrollPaneLayout.viewport|
|javax.swing.JScrollBar_javax.swing.ScrollPaneLayout.vsb|
|int_javax.swing.ScrollPaneLayout.vsbPolicy|

*javax.swing.ScrollPaneLayout_Constructors*
|javax.swing.ScrollPaneLayout()|

*javax.swing.ScrollPaneLayout_Methods*
|javax.swing.ScrollPaneLayout.addLayoutComponent(String,Component)|Adds the spe
|javax.swing.ScrollPaneLayout.addSingletonComponent(Component,Component)|Remove
|javax.swing.ScrollPaneLayout.getColumnHeader()|Returns the JViewport object th
|javax.swing.ScrollPaneLayout.getCorner(String)|Returns the Component at the sp
|javax.swing.ScrollPaneLayout.getHorizontalScrollBar()|Returns the JScrollBar o
|javax.swing.ScrollPaneLayout.getHorizontalScrollBarPolicy()|Returns the horizo
|javax.swing.ScrollPaneLayout.getRowHeader()|Returns the JViewport object that 
|javax.swing.ScrollPaneLayout.getVerticalScrollBar()|Returns the JScrollBar obj
|javax.swing.ScrollPaneLayout.getVerticalScrollBarPolicy()|Returns the vertical
|javax.swing.ScrollPaneLayout.getViewport()|Returns the JViewport object that d
|javax.swing.ScrollPaneLayout.getViewportBorderBounds(JScrollPane)|Returns the 
|javax.swing.ScrollPaneLayout.layoutContainer(Container)|Lays out the scrollpan
|javax.swing.ScrollPaneLayout.minimumLayoutSize(Container)|The minimum size of 
|javax.swing.ScrollPaneLayout.preferredLayoutSize(Container)|The preferred size
|javax.swing.ScrollPaneLayout.removeLayoutComponent(Component)|Removes the spec
|javax.swing.ScrollPaneLayout.setHorizontalScrollBarPolicy(int)|Sets the horizo
|javax.swing.ScrollPaneLayout.setVerticalScrollBarPolicy(int)|Sets the vertical
|javax.swing.ScrollPaneLayout.syncWithScrollPane(JScrollPane)|This method is in

*javax.swing.ScrollPaneLayout_Description*

The layout manager used by JScrollPane. JScrollPaneLayout is responsible for 
nine components: a viewport, two scrollbars, a row header, a column header, and 
four "corner" components. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JViewport_javax.swing.ScrollPaneLayout.colHead*

The layout manager used by JScrollPane. JScrollPaneLayout is responsible for 
nine components: a viewport, two scrollbars, a row header, a column header, and 
four "corner" components. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JScrollBar_javax.swing.ScrollPaneLayout.hsb*

The layout manager used by JScrollPane. JScrollPaneLayout is responsible for 
nine components: a viewport, two scrollbars, a row header, a column header, and 
four "corner" components. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.ScrollPaneLayout.hsbPolicy*

The layout manager used by JScrollPane. JScrollPaneLayout is responsible for 
nine components: a viewport, two scrollbars, a row header, a column header, and 
four "corner" components. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Component_javax.swing.ScrollPaneLayout.lowerLeft*

The layout manager used by JScrollPane. JScrollPaneLayout is responsible for 
nine components: a viewport, two scrollbars, a row header, a column header, and 
four "corner" components. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Component_javax.swing.ScrollPaneLayout.lowerRight*

The layout manager used by JScrollPane. JScrollPaneLayout is responsible for 
nine components: a viewport, two scrollbars, a row header, a column header, and 
four "corner" components. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JViewport_javax.swing.ScrollPaneLayout.rowHead*

The layout manager used by JScrollPane. JScrollPaneLayout is responsible for 
nine components: a viewport, two scrollbars, a row header, a column header, and 
four "corner" components. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Component_javax.swing.ScrollPaneLayout.upperLeft*

The layout manager used by JScrollPane. JScrollPaneLayout is responsible for 
nine components: a viewport, two scrollbars, a row header, a column header, and 
four "corner" components. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Component_javax.swing.ScrollPaneLayout.upperRight*

The layout manager used by JScrollPane. JScrollPaneLayout is responsible for 
nine components: a viewport, two scrollbars, a row header, a column header, and 
four "corner" components. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JViewport_javax.swing.ScrollPaneLayout.viewport*

The layout manager used by JScrollPane. JScrollPaneLayout is responsible for 
nine components: a viewport, two scrollbars, a row header, a column header, and 
four "corner" components. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.JScrollBar_javax.swing.ScrollPaneLayout.vsb*

The layout manager used by JScrollPane. JScrollPaneLayout is responsible for 
nine components: a viewport, two scrollbars, a row header, a column header, and 
four "corner" components. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.ScrollPaneLayout.vsbPolicy*

The layout manager used by JScrollPane. JScrollPaneLayout is responsible for 
nine components: a viewport, two scrollbars, a row header, a column header, and 
four "corner" components. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.ScrollPaneLayout()*

public ScrollPaneLayout()




*javax.swing.ScrollPaneLayout.addLayoutComponent(String,Component)*

public void addLayoutComponent(
  java.lang.String s,
  java.awt.Component c)

Adds the specified component to the layout. The layout is identified using one 
of: 

JScrollPane.VIEWPORT JScrollPane.VERTICAL_SCROLLBAR 
JScrollPane.HORIZONTAL_SCROLLBAR JScrollPane.ROW_HEADER 
JScrollPane.COLUMN_HEADER JScrollPane.LOWER_LEFT_CORNER 
JScrollPane.LOWER_RIGHT_CORNER JScrollPane.UPPER_LEFT_CORNER 
JScrollPane.UPPER_RIGHT_CORNER 

    s - the component identifier 
    c - the the component to be added 

*javax.swing.ScrollPaneLayout.addSingletonComponent(Component,Component)*

protected |java.awt.Component| addSingletonComponent(
  java.awt.Component oldC,
  java.awt.Component newC)

Removes an existing component. When a new component, such as the left corner, 
or vertical scrollbar, is added, the old one, if it exists, must be removed. 

This method returns newC. If oldC is not equal to newC and is non-null, it will 
be removed from its parent. 

    oldC - the Component to replace 
    newC - the Component to add 

    Returns: 
*javax.swing.ScrollPaneLayout.getColumnHeader()*

public |javax.swing.JViewport| getColumnHeader()

Returns the JViewport object that is the column header. 


    Returns: the JViewport object that is the column header 
*javax.swing.ScrollPaneLayout.getCorner(String)*

public |java.awt.Component| getCorner(java.lang.String key)

Returns the Component at the specified corner. 

    key - the String specifying the corner 

    Returns: the Component at the specified corner, as defined in {@link 
             ScrollPaneConstants}; if key is not one of the four corners, null 
             is returned 
*javax.swing.ScrollPaneLayout.getHorizontalScrollBar()*

public |javax.swing.JScrollBar| getHorizontalScrollBar()

Returns the JScrollBar object that handles horizontal scrolling. 


    Returns: the JScrollBar object that handles horizontal scrolling 
*javax.swing.ScrollPaneLayout.getHorizontalScrollBarPolicy()*

public int getHorizontalScrollBarPolicy()

Returns the horizontal scrollbar-display policy. 


    Returns: an integer giving the display policy 
*javax.swing.ScrollPaneLayout.getRowHeader()*

public |javax.swing.JViewport| getRowHeader()

Returns the JViewport object that is the row header. 


    Returns: the JViewport object that is the row header 
*javax.swing.ScrollPaneLayout.getVerticalScrollBar()*

public |javax.swing.JScrollBar| getVerticalScrollBar()

Returns the JScrollBar object that handles vertical scrolling. 


    Returns: the JScrollBar object that handles vertical scrolling 
*javax.swing.ScrollPaneLayout.getVerticalScrollBarPolicy()*

public int getVerticalScrollBarPolicy()

Returns the vertical scrollbar-display policy. 


    Returns: an integer giving the display policy 
*javax.swing.ScrollPaneLayout.getViewport()*

public |javax.swing.JViewport| getViewport()

Returns the JViewport object that displays the scrollable contents. 


    Returns: the JViewport object that displays the scrollable contents 
*javax.swing.ScrollPaneLayout.getViewportBorderBounds(JScrollPane)*

public |java.awt.Rectangle| getViewportBorderBounds(javax.swing.JScrollPane scrollpane)

Returns the bounds of the border around the specified scroll pane's viewport. 


    Returns: the size and position of the viewport border 
*javax.swing.ScrollPaneLayout.layoutContainer(Container)*

public void layoutContainer(java.awt.Container parent)

Lays out the scrollpane. The positioning of components depends on the following 
constraints: 

The row header, if present and visible, gets its preferred width and the 
viewport's height. 

The column header, if present and visible, gets its preferred height and the 
viewport's width. 

If a vertical scrollbar is needed, i.e. if the viewport's extent height is 
smaller than its view height or if the displayPolicy is ALWAYS, it's treated 
like the row header with respect to its dimensions and is made visible. 

If a horizontal scrollbar is needed, it is treated like the column header (see 
the paragraph above regarding the vertical scrollbar). 

If the scrollpane has a non-null viewportBorder, then space is allocated for 
that. 

The viewport gets the space available after accounting for the previous 
constraints. 

The corner components, if provided, are aligned with the ends of the scrollbars 
and headers. If there is a vertical scrollbar, the right corners appear; if 
there is a horizontal scrollbar, the lower corners appear; a row header gets 
left corners, and a column header gets upper corners. 

    parent - the Container to lay out 

*javax.swing.ScrollPaneLayout.minimumLayoutSize(Container)*

public |java.awt.Dimension| minimumLayoutSize(java.awt.Container parent)

The minimum size of a ScrollPane is the size of the insets plus minimum size of 
the viewport, plus the scrollpane's viewportBorder insets, plus the minimum 
size of the visible headers, plus the minimum size of the scrollbars whose 
displayPolicy isn't NEVER. 

    parent - the Container that will be laid out 

    Returns: a Dimension object specifying the minimum size 
*javax.swing.ScrollPaneLayout.preferredLayoutSize(Container)*

public |java.awt.Dimension| preferredLayoutSize(java.awt.Container parent)

The preferred size of a ScrollPane is the size of the insets, plus the 
preferred size of the viewport, plus the preferred size of the visible headers, 
plus the preferred size of the scrollbars that will appear given the current 
view and the current scrollbar displayPolicies. Note that the rowHeader is 
calculated as part of the preferred width and the colHeader is calculated as 
part of the preferred size. 

    parent - the Container that will be laid out 

    Returns: a Dimension object specifying the preferred size of the viewport and any 
             scrollbars 
*javax.swing.ScrollPaneLayout.removeLayoutComponent(Component)*

public void removeLayoutComponent(java.awt.Component c)

Removes the specified component from the layout. 

    c - the component to remove 

*javax.swing.ScrollPaneLayout.setHorizontalScrollBarPolicy(int)*

public void setHorizontalScrollBarPolicy(int x)

Sets the horizontal scrollbar-display policy. The options are: 
JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED 
JScrollPane.HOTRIZONTAL_SCROLLBAR_NEVER JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS 

Note: Applications should use the JScrollPane version of this method. It only 
exists for backwards compatibility with the Swing 1.0.2 (and earlier) versions 
of this class. 

    x - an int giving the display policy 

*javax.swing.ScrollPaneLayout.setVerticalScrollBarPolicy(int)*

public void setVerticalScrollBarPolicy(int x)

Sets the vertical scrollbar-display policy. The options are: 

JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED JScrollPane.VERTICAL_SCROLLBAR_NEVER 
JScrollPane.VERTICAL_SCROLLBAR_ALWAYS 

Note: Applications should use the JScrollPane version of this method. It only 
exists for backwards compatibility with the Swing 1.0.2 (and earlier) versions 
of this class. 

    x - an integer giving the display policy 

*javax.swing.ScrollPaneLayout.syncWithScrollPane(JScrollPane)*

public void syncWithScrollPane(javax.swing.JScrollPane sp)

This method is invoked after the ScrollPaneLayout is set as the LayoutManager 
of a JScrollPane. It initializes all of the internal fields that are ordinarily 
set by addLayoutComponent. For example: 

ScrollPaneLayout mySPLayout = new ScrollPanelLayout() { public void 
layoutContainer(Container p) { super.layoutContainer(p); // do some extra work 
here ... } }; scrollpane.setLayout(mySPLayout): 




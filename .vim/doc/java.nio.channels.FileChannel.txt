*java.nio.channels.FileChannel* *FileChannel* A channel for reading, writing, ma

public abstract class FileChannel
  extends    |java.nio.channels.spi.AbstractInterruptibleChannel|
  implements |java.nio.channels.ByteChannel|
             |java.nio.channels.GatheringByteChannel|
             |java.nio.channels.ScatteringByteChannel|

|java.nio.channels.FileChannel_Description|
|java.nio.channels.FileChannel_Fields|
|java.nio.channels.FileChannel_Constructors|
|java.nio.channels.FileChannel_Methods|

================================================================================

*java.nio.channels.FileChannel_Constructors*
|java.nio.channels.FileChannel()|Initializes a new instance of this class.

*java.nio.channels.FileChannel_Methods*
|java.nio.channels.FileChannel.force(boolean)|Forces any updates to this channe
|java.nio.channels.FileChannel.lock()|Acquires an exclusive lock on this channe
|java.nio.channels.FileChannel.lock(long,long,boolean)|Acquires a lock on the g
|java.nio.channels.FileChannel.map(FileChannel.MapMode,long,long)|Maps a region
|java.nio.channels.FileChannel.position()|Returns this channel's file position.
|java.nio.channels.FileChannel.position(long)|Sets this channel's file position
|java.nio.channels.FileChannel.read(ByteBuffer)|Reads a sequence of bytes from 
|java.nio.channels.FileChannel.read(ByteBuffer[])|Reads a sequence of bytes fro
|java.nio.channels.FileChannel.read(ByteBuffer[],int,int)|Reads a sequence of b
|java.nio.channels.FileChannel.read(ByteBuffer,long)|Reads a sequence of bytes 
|java.nio.channels.FileChannel.size()|Returns the current size of this channel'
|java.nio.channels.FileChannel.transferFrom(ReadableByteChannel,long,long)|Tran
|java.nio.channels.FileChannel.transferTo(long,long,WritableByteChannel)|Transf
|java.nio.channels.FileChannel.truncate(long)|Truncates this channel's file to 
|java.nio.channels.FileChannel.tryLock()|Attempts to acquire an exclusive lock 
|java.nio.channels.FileChannel.tryLock(long,long,boolean)|Attempts to acquire a
|java.nio.channels.FileChannel.write(ByteBuffer)|Writes a sequence of bytes to 
|java.nio.channels.FileChannel.write(ByteBuffer[])|Writes a sequence of bytes t
|java.nio.channels.FileChannel.write(ByteBuffer[],int,int)|Writes a sequence of
|java.nio.channels.FileChannel.write(ByteBuffer,long)|Writes a sequence of byte

*java.nio.channels.FileChannel_Description*

A channel for reading, writing, mapping, and manipulating a file. 

A file channel has a current position within its file which can be both 
</code>queried<code>(|java.nio.channels.FileChannel|) and 
</code>modified<code>(|java.nio.channels.FileChannel|) . The file itself 
contains a variable-length sequence of bytes that can be read and written and 
whose current </code><i>size</i><code>(|java.nio.channels.FileChannel|) can be 
queried. The size of the file increases when bytes are written beyond its 
current size; the size of the file decreases when it is 
</code><i>truncated</i><code>(|java.nio.channels.FileChannel|) . The file may 
also have some associated metadata such as access permissions, content type, 
and last-modification time; this class does not define methods for metadata 
access. 

In addition to the familiar read, write, and close operations of byte channels, 
this class defines the following file-specific operations: 



Bytes may be </code>read<code>(|java.nio.channels.FileChannel|) or 
</code>written<code>(|java.nio.channels.FileChannel|) at an absolute position 
in a file in a way that does not affect the channel's current position. 

A region of a file may be </code>mapped<code>(|java.nio.channels.FileChannel|) 
directly into memory; for large files this is often much more efficient than 
invoking the usual read or write methods. 

Updates made to a file may be </code>forced 
out<code>(|java.nio.channels.FileChannel|) to the underlying storage device, 
ensuring that data are not lost in the event of a system crash. 

Bytes can be transferred from a file </code>to some other 
channel<code>(|java.nio.channels.FileChannel|) , and </code>vice 
versa<code>(|java.nio.channels.FileChannel|) , in a way that can be optimized 
by many operating systems into a very fast transfer directly to or from the 
filesystem cache. 

A region of a file may be </code>locked<code>(|java.nio.channels.FileLock|) 
against access by other programs. 



File channels are safe for use by multiple concurrent threads. The 
close(|java.nio.channels.Channel|) method may be invoked at any time, as 
specified by the (|java.nio.channels.Channel|) interface. Only one operation 
that involves the channel's position or can change its file's size may be in 
progress at any given time; attempts to initiate a second such operation while 
the first is still in progress will block until the first operation completes. 
Other operations, in particular those that take an explicit position, may 
proceed concurrently; whether they in fact do so is dependent upon the 
underlying implementation and is therefore unspecified. 

The view of a file provided by an instance of this class is guaranteed to be 
consistent with other views of the same file provided by other instances in the 
same program. The view provided by an instance of this class may or may not, 
however, be consistent with the views seen by other concurrently-running 
programs due to caching performed by the underlying operating system and delays 
induced by network-filesystem protocols. This is true regardless of the 
language in which these other programs are written, and whether they are 
running on the same machine or on some other machine. The exact nature of any 
such inconsistencies are system-dependent and are therefore unspecified. 

This class does not define methods for opening existing files or for creating 
new ones; such methods may be added in a future release. In this release a file 
channel can be obtained from an existing 
FileInputStream(|java.io.FileInputStream|) , 
FileOutputStream(|java.io.FileOutputStream|) , or 
RandomAccessFile(|java.io.RandomAccessFile|) object by invoking that object's 
getChannel method, which returns a file channel that is connected to the same 
underlying file. 

The state of a file channel is intimately connected to that of the object whose 
getChannel method returned the channel. Changing the channel's position, 
whether explicitly or by reading or writing bytes, will change the file 
position of the originating object, and vice versa. Changing the file's length 
via the file channel will change the length seen via the originating object, 
and vice versa. Changing the file's content by writing bytes will change the 
content seen by the originating object, and vice versa. 

At various points this class specifies that an instance that is "open for 
reading," "open for writing," or "open for reading and writing" is required. A 
channel obtained via the getChannel(|java.io.FileInputStream|) method of a 
(|java.io.FileInputStream|) instance will be open for reading. A channel 
obtained via the getChannel(|java.io.FileOutputStream|) method of a 
(|java.io.FileOutputStream|) instance will be open for writing. Finally, a 
channel obtained via the getChannel(|java.io.RandomAccessFile|) method of a 
(|java.io.RandomAccessFile|) instance will be open for reading if the instance 
was created with mode "r" and will be open for reading and writing if the 
instance was created with mode "rw". 

A file channel that is open for writing may be in append mode, for example if 
it was obtained from a file-output stream that was created by invoking the 
FileOutputStream(File,boolean)(|java.io.FileOutputStream|) constructor and 
passing true for the second parameter. In this mode each invocation of a 
relative write operation first advances the position to the end of the file and 
then writes the requested data. Whether the advancement of the position and the 
writing of the data are done in a single atomic operation is system-dependent 
and therefore unspecified. 


*java.nio.channels.FileChannel()*

protected FileChannel()

Initializes a new instance of this class. 


*java.nio.channels.FileChannel.force(boolean)*

public abstract void force(boolean metaData)
  throws |java.io.IOException|
         
Forces any updates to this channel's file to be written to the storage device 
that contains it. 

If this channel's file resides on a local storage device then when this method 
returns it is guaranteed that all changes made to the file since this channel 
was created, or since this method was last invoked, will have been written to 
that device. This is useful for ensuring that critical information is not lost 
in the event of a system crash. 

If the file does not reside on a local device then no such guarantee is made. 

The metaData parameter can be used to limit the number of I/O operations that 
this method is required to perform. Passing false for this parameter indicates 
that only updates to the file's content need be written to storage; passing 
true indicates that updates to both the file's content and metadata must be 
written, which generally requires at least one more I/O operation. Whether this 
parameter actually has any effect is dependent upon the underlying operating 
system and is therefore unspecified. 

Invoking this method may cause an I/O operation to occur even if the channel 
was only opened for reading. Some operating systems, for example, maintain a 
last-access time as part of a file's metadata, and this time is updated 
whenever the file is read. Whether or not this is actually done is 
system-dependent and is therefore unspecified. 

This method is only guaranteed to force changes that were made to this 
channel's file via the methods defined in this class. It may or may not force 
changes that were made by modifying the content of a </code>mapped byte 
buffer<code>(|java.nio.MappedByteBuffer|) obtained by invoking the 
map(|java.nio.channels.FileChannel|) method. Invoking the 
force(|java.nio.MappedByteBuffer|) method of the mapped byte buffer will force 
changes made to the buffer's content to be written. 

    metaData - If true then this method is required to force changes to both the file's 
       content and metadata to be written to storage; otherwise, it need only 
       force content changes to be written 

*java.nio.channels.FileChannel.lock()*

public final |java.nio.channels.FileLock| lock()
  throws |java.io.IOException|
         
Acquires an exclusive lock on this channel's file. 

An invocation of this method of the form fc.lock() behaves in exactly the same 
way as the invocation 



fc. lock(|java.nio.channels.FileChannel|) (0L, Long.MAX_VALUE, false) 


    Returns: A lock object representing the newly-acquired lock 
*java.nio.channels.FileChannel.lock(long,long,boolean)*

public abstract |java.nio.channels.FileLock| lock(
  long position,
  long size,
  boolean shared)
  throws |java.io.IOException|
         
Acquires a lock on the given region of this channel's file. 

An invocation of this method will block until the region can be locked, this 
channel is closed, or the invoking thread is interrupted, whichever comes 
first. 

If this channel is closed by another thread during an invocation of this method 
then an (|AsynchronousCloseException|) will be thrown. 

If the invoking thread is interrupted while waiting to acquire the lock then 
its interrupt status will be set and a (|FileLockInterruptionException|) will 
be thrown. If the invoker's interrupt status is set when this method is invoked 
then that exception will be thrown immediately; the thread's interrupt status 
will not be changed. 

The region specified by the position and size parameters need not be contained 
within, or even overlap, the actual underlying file. Lock regions are fixed in 
size; if a locked region initially contains the end of the file and the file 
grows beyond the region then the new portion of the file will not be covered by 
the lock. If a file is expected to grow in size and a lock on the entire file 
is required then a region starting at zero, and no smaller than the expected 
maximum size of the file, should be locked. The zero-argument 
(|java.nio.channels.FileChannel|) method simply locks a region of size 
(|java.lang.Long|) . 

Some operating systems do not support shared locks, in which case a request for 
a shared lock is automatically converted into a request for an exclusive lock. 
Whether the newly-acquired lock is shared or exclusive may be tested by 
invoking the resulting lock object's isShared(|java.nio.channels.FileLock|) 
method. 

File locks are held on behalf of the entire Java virtual machine. They are not 
suitable for controlling access to a file by multiple threads within the same 
virtual machine. 

    position - The position at which the locked region is to start; must be non-negative 
    size - The size of the locked region; must be non-negative, and the sum position+size 
       must be non-negative 
    shared - true to request a shared lock, in which case this channel must be open for 
       reading (and possibly writing); false to request an exclusive lock, in 
       which case this channel must be open for writing (and possibly reading) 

    Returns: A lock object representing the newly-acquired lock 
*java.nio.channels.FileChannel.map(FileChannel.MapMode,long,long)*

public abstract |java.nio.MappedByteBuffer| map(
  java.nio.channels.FileChannel.MapMode mode,
  long position,
  long size)
  throws |java.io.IOException|
         
Maps a region of this channel's file directly into memory. 

A region of a file may be mapped into memory in one of three modes: 



Read-only: Any attempt to modify the resulting buffer will cause a 
(|java.nio.ReadOnlyBufferException|) to be thrown. ( 
MapMode.READ_ONLY(|java.nio.channels.FileChannel.MapMode|) ) 

Read/write: Changes made to the resulting buffer will eventually be propagated 
to the file; they may or may not be made visible to other programs that have 
mapped the same file. ( 
MapMode.READ_WRITE(|java.nio.channels.FileChannel.MapMode|) ) 

Private: Changes made to the resulting buffer will not be propagated to the 
file and will not be visible to other programs that have mapped the same file; 
instead, they will cause private copies of the modified portions of the buffer 
to be created. ( MapMode.PRIVATE(|java.nio.channels.FileChannel.MapMode|) ) 



For a read-only mapping, this channel must have been opened for reading; for a 
read/write or private mapping, this channel must have been opened for both 
reading and writing. 

The </code>mapped byte buffer<code>(|java.nio.MappedByteBuffer|) returned by 
this method will have a position of zero and a limit and capacity of size; its 
mark will be undefined. The buffer and the mapping that it represents will 
remain valid until the buffer itself is garbage-collected. 

A mapping, once established, is not dependent upon the file channel that was 
used to create it. Closing the channel, in particular, has no effect upon the 
validity of the mapping. 

Many of the details of memory-mapped files are inherently dependent upon the 
underlying operating system and are therefore unspecified. The behavior of this 
method when the requested region is not completely contained within this 
channel's file is unspecified. Whether changes made to the content or size of 
the underlying file, by this program or another, are propagated to the buffer 
is unspecified. The rate at which changes to the buffer are propagated to the 
file is unspecified. 

For most operating systems, mapping a file into memory is more expensive than 
reading or writing a few tens of kilobytes of data via the usual 
read(|java.nio.channels.FileChannel|) and 
write(|java.nio.channels.FileChannel|) methods. From the standpoint of 
performance it is generally only worth mapping relatively large files into 
memory. 

    mode - One of the constants {@link MapMode#READ_ONLY READ_ONLY}, {@link 
       MapMode#READ_WRITE READ_WRITE}, or {@link MapMode#PRIVATE PRIVATE} 
       defined in the {@link MapMode} class, according to whether the file is 
       to be mapped read-only, read/write, or privately (copy-on-write), 
       respectively 
    position - The position within the file at which the mapped region is to start; must be 
       non-negative 
    size - The size of the region to be mapped; must be non-negative and no greater than 
       {@link java.lang.Integer#MAX_VALUE} 

*java.nio.channels.FileChannel.position()*

public abstract long position()
  throws |java.io.IOException|
         
Returns this channel's file position. 


    Returns: This channel's file position, a non-negative integer counting the number of 
             bytes from the beginning of the file to the current position 
*java.nio.channels.FileChannel.position(long)*

public abstract |java.nio.channels.FileChannel| position(long newPosition)
  throws |java.io.IOException|
         
Sets this channel's file position. 

Setting the position to a value that is greater than the file's current size is 
legal but does not change the size of the file. A later attempt to read bytes 
at such a position will immediately return an end-of-file indication. A later 
attempt to write bytes at such a position will cause the file to be grown to 
accommodate the new bytes; the values of any bytes between the previous 
end-of-file and the newly-written bytes are unspecified. 

    newPosition - The new position, a non-negative integer counting the number of bytes from the 
       beginning of the file 

    Returns: This file channel 
*java.nio.channels.FileChannel.read(ByteBuffer)*

public abstract int read(java.nio.ByteBuffer dst)
  throws |java.io.IOException|
         
Reads a sequence of bytes from this channel into the given buffer. 

Bytes are read starting at this channel's current file position, and then the 
file position is updated with the number of bytes actually read. Otherwise this 
method behaves exactly as specified in the 
(|java.nio.channels.ReadableByteChannel|) interface. 


*java.nio.channels.FileChannel.read(ByteBuffer[])*

public final long read(java.nio.ByteBuffer[] dsts)
  throws |java.io.IOException|
         
Reads a sequence of bytes from this channel into the given buffers. 

Bytes are read starting at this channel's current file position, and then the 
file position is updated with the number of bytes actually read. Otherwise this 
method behaves exactly as specified in the 
(|java.nio.channels.ScatteringByteChannel|) interface. 


*java.nio.channels.FileChannel.read(ByteBuffer[],int,int)*

public abstract long read(
  java.nio.ByteBuffer[] dsts,
  int offset,
  int length)
  throws |java.io.IOException|
         
Reads a sequence of bytes from this channel into a subsequence of the given 
buffers. 

Bytes are read starting at this channel's current file position, and then the 
file position is updated with the number of bytes actually read. Otherwise this 
method behaves exactly as specified in the 
(|java.nio.channels.ScatteringByteChannel|) interface. 


*java.nio.channels.FileChannel.read(ByteBuffer,long)*

public abstract int read(
  java.nio.ByteBuffer dst,
  long position)
  throws |java.io.IOException|
         
Reads a sequence of bytes from this channel into the given buffer, starting at 
the given file position. 

This method works in the same manner as the (|java.nio.channels.FileChannel|) 
method, except that bytes are read starting at the given file position rather 
than at the channel's current position. This method does not modify this 
channel's position. If the given position is greater than the file's current 
size then no bytes are read. 

    dst - The buffer into which bytes are to be transferred 
    position - The file position at which the transfer is to begin; must be non-negative 

    Returns: The number of bytes read, possibly zero, or -1 if the given position is greater 
             than or equal to the file's current size 
*java.nio.channels.FileChannel.size()*

public abstract long size()
  throws |java.io.IOException|
         
Returns the current size of this channel's file. 


    Returns: The current size of this channel's file, measured in bytes 
*java.nio.channels.FileChannel.transferFrom(ReadableByteChannel,long,long)*

public abstract long transferFrom(
  java.nio.channels.ReadableByteChannel src,
  long position,
  long count)
  throws |java.io.IOException|
         
Transfers bytes into this channel's file from the given readable byte channel. 

An attempt is made to read up to count bytes from the source channel and write 
them to this channel's file starting at the given position. An invocation of 
this method may or may not transfer all of the requested bytes; whether or not 
it does so depends upon the natures and states of the channels. Fewer than the 
requested number of bytes will be transferred if the source channel has fewer 
than count bytes remaining, or if the source channel is non-blocking and has 
fewer than count bytes immediately available in its input buffer. 

This method does not modify this channel's position. If the given position is 
greater than the file's current size then no bytes are transferred. If the 
source channel has a position then bytes are read starting at that position and 
then the position is incremented by the number of bytes read. 

This method is potentially much more efficient than a simple loop that reads 
from the source channel and writes to this channel. Many operating systems can 
transfer bytes directly from the source channel into the filesystem cache 
without actually copying them. 

    src - The source channel 
    position - The position within the file at which the transfer is to begin; must be 
       non-negative 
    count - The maximum number of bytes to be transferred; must be non-negative 

    Returns: The number of bytes, possibly zero, that were actually transferred 
*java.nio.channels.FileChannel.transferTo(long,long,WritableByteChannel)*

public abstract long transferTo(
  long position,
  long count,
  java.nio.channels.WritableByteChannel target)
  throws |java.io.IOException|
         
Transfers bytes from this channel's file to the given writable byte channel. 

An attempt is made to read up to count bytes starting at the given position in 
this channel's file and write them to the target channel. An invocation of this 
method may or may not transfer all of the requested bytes; whether or not it 
does so depends upon the natures and states of the channels. Fewer than the 
requested number of bytes are transferred if this channel's file contains fewer 
than count bytes starting at the given position, or if the target channel is 
non-blocking and it has fewer than count bytes free in its output buffer. 

This method does not modify this channel's position. If the given position is 
greater than the file's current size then no bytes are transferred. If the 
target channel has a position then bytes are written starting at that position 
and then the position is incremented by the number of bytes written. 

This method is potentially much more efficient than a simple loop that reads 
from this channel and writes to the target channel. Many operating systems can 
transfer bytes directly from the filesystem cache to the target channel without 
actually copying them. 

    position - The position within the file at which the transfer is to begin; must be 
       non-negative 
    count - The maximum number of bytes to be transferred; must be non-negative 
    target - The target channel 

    Returns: The number of bytes, possibly zero, that were actually transferred 
*java.nio.channels.FileChannel.truncate(long)*

public abstract |java.nio.channels.FileChannel| truncate(long size)
  throws |java.io.IOException|
         
Truncates this channel's file to the given size. 

If the given size is less than the file's current size then the file is 
truncated, discarding any bytes beyond the new end of the file. If the given 
size is greater than or equal to the file's current size then the file is not 
modified. In either case, if this channel's file position is greater than the 
given size then it is set to that size. 

    size - The new size, a non-negative byte count 

    Returns: This file channel 
*java.nio.channels.FileChannel.tryLock()*

public final |java.nio.channels.FileLock| tryLock()
  throws |java.io.IOException|
         
Attempts to acquire an exclusive lock on this channel's file. 

An invocation of this method of the form fc.tryLock() behaves in exactly the 
same way as the invocation 



fc. tryLock(|java.nio.channels.FileChannel|) (0L, Long.MAX_VALUE, false) 


    Returns: A lock object representing the newly-acquired lock, or null if the lock could 
             not be acquired because another program holds an overlapping lock 
*java.nio.channels.FileChannel.tryLock(long,long,boolean)*

public abstract |java.nio.channels.FileLock| tryLock(
  long position,
  long size,
  boolean shared)
  throws |java.io.IOException|
         
Attempts to acquire a lock on the given region of this channel's file. 

This method does not block. An invocation of this always returns immediately, 
either having acquired a lock on the requested region or having failed to do 
so. If it fails to acquire a lock because an overlapping lock is held by 
another program then it returns null. If it fails to acquire a lock for any 
other reason then an appropriate exception is thrown. 

The region specified by the position and size parameters need not be contained 
within, or even overlap, the actual underlying file. Lock regions are fixed in 
size; if a locked region initially contains the end of the file and the file 
grows beyond the region then the new portion of the file will not be covered by 
the lock. If a file is expected to grow in size and a lock on the entire file 
is required then a region starting at zero, and no smaller than the expected 
maximum size of the file, should be locked. The zero-argument 
(|java.nio.channels.FileChannel|) method simply locks a region of size 
(|java.lang.Long|) . 

Some operating systems do not support shared locks, in which case a request for 
a shared lock is automatically converted into a request for an exclusive lock. 
Whether the newly-acquired lock is shared or exclusive may be tested by 
invoking the resulting lock object's isShared(|java.nio.channels.FileLock|) 
method. 

File locks are held on behalf of the entire Java virtual machine. They are not 
suitable for controlling access to a file by multiple threads within the same 
virtual machine. 

    position - The position at which the locked region is to start; must be non-negative 
    size - The size of the locked region; must be non-negative, and the sum position+size 
       must be non-negative 
    shared - true to request a shared lock, false to request an exclusive lock 

    Returns: A lock object representing the newly-acquired lock, or null if the lock could 
             not be acquired because another program holds an overlapping lock 
*java.nio.channels.FileChannel.write(ByteBuffer)*

public abstract int write(java.nio.ByteBuffer src)
  throws |java.io.IOException|
         
Writes a sequence of bytes to this channel from the given buffer. 

Bytes are written starting at this channel's current file position unless the 
channel is in append mode, in which case the position is first advanced to the 
end of the file. The file is grown, if necessary, to accommodate the written 
bytes, and then the file position is updated with the number of bytes actually 
written. Otherwise this method behaves exactly as specified by the 
(|java.nio.channels.WritableByteChannel|) interface. 


*java.nio.channels.FileChannel.write(ByteBuffer[])*

public final long write(java.nio.ByteBuffer[] srcs)
  throws |java.io.IOException|
         
Writes a sequence of bytes to this channel from the given buffers. 

Bytes are written starting at this channel's current file position unless the 
channel is in append mode, in which case the position is first advanced to the 
end of the file. The file is grown, if necessary, to accommodate the written 
bytes, and then the file position is updated with the number of bytes actually 
written. Otherwise this method behaves exactly as specified in the 
(|java.nio.channels.GatheringByteChannel|) interface. 


*java.nio.channels.FileChannel.write(ByteBuffer[],int,int)*

public abstract long write(
  java.nio.ByteBuffer[] srcs,
  int offset,
  int length)
  throws |java.io.IOException|
         
Writes a sequence of bytes to this channel from a subsequence of the given 
buffers. 

Bytes are written starting at this channel's current file position unless the 
channel is in append mode, in which case the position is first advanced to the 
end of the file. The file is grown, if necessary, to accommodate the written 
bytes, and then the file position is updated with the number of bytes actually 
written. Otherwise this method behaves exactly as specified in the 
(|java.nio.channels.GatheringByteChannel|) interface. 


*java.nio.channels.FileChannel.write(ByteBuffer,long)*

public abstract int write(
  java.nio.ByteBuffer src,
  long position)
  throws |java.io.IOException|
         
Writes a sequence of bytes to this channel from the given buffer, starting at 
the given file position. 

This method works in the same manner as the (|java.nio.channels.FileChannel|) 
method, except that bytes are written starting at the given file position 
rather than at the channel's current position. This method does not modify this 
channel's position. If the given position is greater than the file's current 
size then the file will be grown to accommodate the new bytes; the values of 
any bytes between the previous end-of-file and the newly-written bytes are 
unspecified. 

    src - The buffer from which bytes are to be transferred 
    position - The file position at which the transfer is to begin; must be non-negative 

    Returns: The number of bytes written, possibly zero 


*java.io.Writer* *Writer* Abstract class for writing to character streams.

public abstract class Writer
  extends    |java.lang.Object|
  implements |java.lang.Appendable|
             |java.io.Closeable|
             |java.io.Flushable|

|java.io.Writer_Description|
|java.io.Writer_Fields|
|java.io.Writer_Constructors|
|java.io.Writer_Methods|

====================================================================================================================================================================================

*java.io.Writer_Fields*
|java.lang.Object_java.io.Writer.lock|

*java.io.Writer_Constructors*
|java.io.Writer()|Create a new character-stream writer whose critical sections will  synchronize on the writer itself.
|java.io.Writer(Object)|Create a new character-stream writer whose critical sections will  synchronize on the given object.

*java.io.Writer_Methods*
|java.io.Writer.append(char)|Appends the specified character to this writer.
|java.io.Writer.append(CharSequence)|Appends the specified character sequence to this writer.
|java.io.Writer.append(CharSequence,int,int)|Appends a subsequence of the specified character sequence to this writer.
|java.io.Writer.close()|Close the stream, flushing it first.
|java.io.Writer.flush()|Flush the stream.
|java.io.Writer.write(char[])|Write an array of characters.
|java.io.Writer.write(char[],int,int)|Write a portion of an array of characters.
|java.io.Writer.write(int)|Write a single character.
|java.io.Writer.write(String)|Write a string.
|java.io.Writer.write(String,int,int)|Write a portion of a string.

*java.io.Writer_Description*

Abstract class for writing to character streams. The only methods that a subclass must implement are write(char[], int, int), flush(), and close(). Most subclasses, however, will 
override some of the methods defined here in order to provide higher efficiency, additional functionality, or both. 



*java.lang.Object_java.io.Writer.lock*

The object used to synchronize operations on this stream. For efficiency, a character-stream object may use an object other than itself to protect critical sections. A subclass 
should therefore use the object in this field rather than this or a synchronized method. 



*java.io.Writer()*

protected Writer()

Create a new character-stream writer whose critical sections will synchronize on the writer itself. 


*java.io.Writer(Object)*

protected Writer(java.lang.Object lock)

Create a new character-stream writer whose critical sections will synchronize on the given object. 

    lock - Object to synchronize on. 

*java.io.Writer.append(char)*

public |java.io.Writer| append(char c)
  throws |java.io.IOException|
         
Appends the specified character to this writer. 

An invocation of this method of the form out.append(c) behaves in exactly the same way as the invocation 



out.write(c) 


    c - The 16-bit character to append 

    Returns: 

*java.io.Writer.append(CharSequence)*

public |java.io.Writer| append(java.lang.CharSequence csq)
  throws |java.io.IOException|
         
Appends the specified character sequence to this writer. 

An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation 



out.write(csq.toString()) 

Depending on the specification of toString for the character sequence csq, the entire sequence may not be appended. For instance, invoking the toString method of a character 
buffer will return a subsequence whose content depends upon the buffer's position and limit. 


    csq - The character sequence to append. If csq is null, then the four characters "null" are appended to this writer. 

    Returns: 

*java.io.Writer.append(CharSequence,int,int)*

public |java.io.Writer| append(
  java.lang.CharSequence csq,
  int start,
  int end)
  throws |java.io.IOException|
         
Appends a subsequence of the specified character sequence to this writer. Appendable. 

An invocation of this method of the form out.append(csq, start, end) when csq is not null behaves in exactly the same way as the invocation 



out.write(csq.subSequence(start, end).toString()) 


    csq - The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters "null". 
    start - The index of the first character in the subsequence 
    end - The index of the character following the last character in the subsequence 

    Returns: 

*java.io.Writer.close()*

public abstract void close()
  throws |java.io.IOException|
         
Close the stream, flushing it first. Once a stream has been closed, further write() or flush() invocations will cause an IOException to be thrown. Closing a previously-closed 
stream, however, has no effect. 



*java.io.Writer.flush()*

public abstract void flush()
  throws |java.io.IOException|
         
Flush the stream. If the stream has saved any characters from the various write() methods in a buffer, write them immediately to their intended destination. Then, if that 
destination is another character or byte stream, flush it. Thus one flush() invocation will flush all the buffers in a chain of Writers and OutputStreams. 

If the intended destination of this stream is an abstraction provided by the underlying operating system, for example a file, then flushing the stream guarantees only that bytes 
previously written to the stream are passed to the operating system for writing; it does not guarantee that they are actually written to a physical device such as a disk drive. 



*java.io.Writer.write(char[])*

public void write(char[] cbuf)
  throws |java.io.IOException|
         
Write an array of characters. 


    cbuf - Array of characters to be written 

*java.io.Writer.write(char[],int,int)*

public abstract void write(
  char[] cbuf,
  int off,
  int len)
  throws |java.io.IOException|
         
Write a portion of an array of characters. 


    cbuf - Array of characters 
    off - Offset from which to start writing characters 
    len - Number of characters to write 

*java.io.Writer.write(int)*

public void write(int c)
  throws |java.io.IOException|
         
Write a single character. The character to be written is contained in the 16 low-order bits of the given integer value; the 16 high-order bits are ignored. 

Subclasses that intend to support efficient single-character output should override this method. 


    c - int specifying a character to be written. 

*java.io.Writer.write(String)*

public void write(java.lang.String str)
  throws |java.io.IOException|
         
Write a string. 


    str - String to be written 

*java.io.Writer.write(String,int,int)*

public void write(
  java.lang.String str,
  int off,
  int len)
  throws |java.io.IOException|
         
Write a portion of a string. 


    str - A String 
    off - Offset from which to start writing characters 
    len - Number of characters to write 



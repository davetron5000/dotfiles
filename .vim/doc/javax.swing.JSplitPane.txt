*javax.swing.JSplitPane* *JSplitPane* JSplitPane is used to divide two (and only

public class JSplitPane
  extends    |javax.swing.JComponent|
  implements |javax.accessibility.Accessible|

|javax.swing.JSplitPane_Description|
|javax.swing.JSplitPane_Fields|
|javax.swing.JSplitPane_Constructors|
|javax.swing.JSplitPane_Methods|

================================================================================

*javax.swing.JSplitPane_Fields*
|java.lang.String_javax.swing.JSplitPane.BOTTOM|
|java.lang.String_javax.swing.JSplitPane.CONTINUOUS_LAYOUT_PROPERTY|
|boolean_javax.swing.JSplitPane.continuousLayout|
|java.lang.String_javax.swing.JSplitPane.DIVIDER|
|java.lang.String_javax.swing.JSplitPane.DIVIDER_LOCATION_PROPERTY|
|java.lang.String_javax.swing.JSplitPane.DIVIDER_SIZE_PROPERTY|
|int_javax.swing.JSplitPane.dividerSize|
|int_javax.swing.JSplitPane.HORIZONTAL_SPLIT|
|java.lang.String_javax.swing.JSplitPane.LAST_DIVIDER_LOCATION_PROPERTY|
|int_javax.swing.JSplitPane.lastDividerLocation|
|java.lang.String_javax.swing.JSplitPane.LEFT|
|java.awt.Component_javax.swing.JSplitPane.leftComponent|
|java.lang.String_javax.swing.JSplitPane.ONE_TOUCH_EXPANDABLE_PROPERTY|
|boolean_javax.swing.JSplitPane.oneTouchExpandable|
|int_javax.swing.JSplitPane.orientation|
|java.lang.String_javax.swing.JSplitPane.ORIENTATION_PROPERTY|
|java.lang.String_javax.swing.JSplitPane.RESIZE_WEIGHT_PROPERTY|
|java.lang.String_javax.swing.JSplitPane.RIGHT|
|java.awt.Component_javax.swing.JSplitPane.rightComponent|
|java.lang.String_javax.swing.JSplitPane.TOP|
|int_javax.swing.JSplitPane.VERTICAL_SPLIT|

*javax.swing.JSplitPane_Constructors*
|javax.swing.JSplitPane()|Creates a new JSplitPane configured to arrange the ch
|javax.swing.JSplitPane(int)|Creates a new JSplitPane configured with the  spec
|javax.swing.JSplitPane(int,boolean)|Creates a new JSplitPane with the specifie
|javax.swing.JSplitPane(int,boolean,Component,Component)|Creates a new JSplitPa
|javax.swing.JSplitPane(int,Component,Component)|Creates a new JSplitPane with 

*javax.swing.JSplitPane_Methods*
|javax.swing.JSplitPane.addImpl(Component,Object,int)|Adds the specified compon
|javax.swing.JSplitPane.getAccessibleContext()|Gets the AccessibleContext assoc
|javax.swing.JSplitPane.getBottomComponent()|Returns the component below, or to
|javax.swing.JSplitPane.getDividerLocation()|Returns the last value passed to s
|javax.swing.JSplitPane.getDividerSize()|Returns the size of the divider.
|javax.swing.JSplitPane.getLastDividerLocation()|Returns the last location the 
|javax.swing.JSplitPane.getLeftComponent()|Returns the component to the left (o
|javax.swing.JSplitPane.getMaximumDividerLocation()|Returns the maximum locatio
|javax.swing.JSplitPane.getMinimumDividerLocation()|Returns the minimum locatio
|javax.swing.JSplitPane.getOrientation()|Returns the orientation.
|javax.swing.JSplitPane.getResizeWeight()|Returns the number that determines ho
|javax.swing.JSplitPane.getRightComponent()|Returns the component to the right 
|javax.swing.JSplitPane.getTopComponent()|Returns the component above, or to th
|javax.swing.JSplitPane.getUI()|Returns the SplitPaneUI that is providing the  
|javax.swing.JSplitPane.getUIClassID()|Returns the name of the Lclass that rend
|javax.swing.JSplitPane.isContinuousLayout()|Gets the continuousLayout property
|javax.swing.JSplitPane.isOneTouchExpandable()|Gets the oneTouchExpandable prop
|javax.swing.JSplitPane.isValidateRoot()|Returns true, so that calls to revalid
|javax.swing.JSplitPane.paintChildren(Graphics)|Subclassed to message the UI wi
|javax.swing.JSplitPane.paramString()|Returns a string representation of this J
|javax.swing.JSplitPane.remove(Component)|Removes the child component, componen
|javax.swing.JSplitPane.remove(int)|Removes the Component at the specified inde
|javax.swing.JSplitPane.removeAll()|Removes all the child components from the s
|javax.swing.JSplitPane.resetToPreferredSizes()|Lays out the JSplitPane layout 
|javax.swing.JSplitPane.setBottomComponent(Component)|Sets the component below,
|javax.swing.JSplitPane.setContinuousLayout(boolean)|Sets the value of the cont
|javax.swing.JSplitPane.setDividerLocation(double)|Sets the divider location as
|javax.swing.JSplitPane.setDividerLocation(int)|Sets the location of the divide
|javax.swing.JSplitPane.setDividerSize(int)|Sets the size of the divider.
|javax.swing.JSplitPane.setLastDividerLocation(int)|Sets the last location the 
|javax.swing.JSplitPane.setLeftComponent(Component)|Sets the component to the l
|javax.swing.JSplitPane.setOneTouchExpandable(boolean)|Sets the value of the on
|javax.swing.JSplitPane.setOrientation(int)|Sets the orientation, or how the sp
|javax.swing.JSplitPane.setResizeWeight(double)|Specifies how to distribute ext
|javax.swing.JSplitPane.setRightComponent(Component)|Sets the component to the 
|javax.swing.JSplitPane.setTopComponent(Component)|Sets the component above, or
|javax.swing.JSplitPane.setUI(SplitPaneUI)|Sets the Lobject that renders this c
|javax.swing.JSplitPane.updateUI()|Notification from the UIManager that the Lha

*javax.swing.JSplitPane_Description*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JSplitPane.BOTTOM*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JSplitPane.CONTINUOUS_LAYOUT_PROPERTY*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.JSplitPane.continuousLayout*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JSplitPane.DIVIDER*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JSplitPane.DIVIDER_LOCATION_PROPERTY*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JSplitPane.DIVIDER_SIZE_PROPERTY*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JSplitPane.dividerSize*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JSplitPane.HORIZONTAL_SPLIT*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JSplitPane.LAST_DIVIDER_LOCATION_PROPERTY*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JSplitPane.lastDividerLocation*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JSplitPane.LEFT*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Component_javax.swing.JSplitPane.leftComponent*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JSplitPane.ONE_TOUCH_EXPANDABLE_PROPERTY*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.JSplitPane.oneTouchExpandable*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JSplitPane.orientation*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JSplitPane.ORIENTATION_PROPERTY*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JSplitPane.RESIZE_WEIGHT_PROPERTY*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JSplitPane.RIGHT*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.awt.Component_javax.swing.JSplitPane.rightComponent*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JSplitPane.TOP*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JSplitPane.VERTICAL_SPLIT*

JSplitPane is used to divide two (and only two) Components. The two Components 
are graphically divided based on the look and feel implementation, and the two 
Components can then be interactively resized by the user. Information on using 
JSplitPane is in How to Use Split Panes in The Java Tutorial. 

The two Components in a split pane can be aligned left to right using 
JSplitPane.HORIZONTAL_SPLIT, or top to bottom using JSplitPane.VERTICAL_SPLIT. 
The preferred way to change the size of the Components is to invoke 
setDividerLocation where location is either the new x or y position, depending 
on the orientation of the JSplitPane. 

To resize the Components to their preferred sizes invoke resetToPreferredSizes. 

When the user is resizing the Components the minimum size of the Components is 
used to determine the maximum/minimum position the Components can be set to. If 
the minimum size of the two components is greater than the size of the split 
pane the divider will not allow you to resize it. To alter the minimum size of 
a JComponent, see (|javax.swing.JComponent|) . 

When the user resizes the split pane the new space is distributed between the 
two components based on the resizeWeight property. A value of 0, the default, 
indicates the right/bottom component gets all the space, where as a value of 1 
indicates the left/top component gets all the space. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.JSplitPane()*

public JSplitPane()

Creates a new JSplitPane configured to arrange the child components 
side-by-side horizontally with no continuous layout, using two buttons for the 
components. 


*javax.swing.JSplitPane(int)*

public JSplitPane(int newOrientation)

Creates a new JSplitPane configured with the specified orientation and no 
continuous layout. 

    newOrientation - JSplitPane.HORIZONTAL_SPLIT or JSplitPane.VERTICAL_SPLIT 

*javax.swing.JSplitPane(int,boolean)*

public JSplitPane(
  int newOrientation,
  boolean newContinuousLayout)

Creates a new JSplitPane with the specified orientation and redrawing style. 

    newOrientation - JSplitPane.HORIZONTAL_SPLIT or JSplitPane.VERTICAL_SPLIT 
    newContinuousLayout - a boolean, true for the components to redraw continuously as the divider 
       changes position, false to wait until the divider position stops 
       changing to redraw 

*javax.swing.JSplitPane(int,boolean,Component,Component)*

public JSplitPane(
  int newOrientation,
  boolean newContinuousLayout,
  java.awt.Component newLeftComponent,
  java.awt.Component newRightComponent)

Creates a new JSplitPane with the specified orientation and redrawing style, 
and with the specified components. 

    newOrientation - JSplitPane.HORIZONTAL_SPLIT or JSplitPane.VERTICAL_SPLIT 
    newContinuousLayout - a boolean, true for the components to redraw continuously as the divider 
       changes position, false to wait until the divider position stops 
       changing to redraw 
    newLeftComponent - the Component that will appear on the left of a horizontally-split pane, or at 
       the top of a vertically-split pane 
    newRightComponent - the Component that will appear on the right of a horizontally-split pane, or at 
       the bottom of a vertically-split pane 

*javax.swing.JSplitPane(int,Component,Component)*

public JSplitPane(
  int newOrientation,
  java.awt.Component newLeftComponent,
  java.awt.Component newRightComponent)

Creates a new JSplitPane with the specified orientation and with the specified 
components that do not do continuous redrawing. 

    newOrientation - JSplitPane.HORIZONTAL_SPLIT or JSplitPane.VERTICAL_SPLIT 
    newLeftComponent - the Component that will appear on the left of a horizontally-split pane, or at 
       the top of a vertically-split pane 
    newRightComponent - the Component that will appear on the right of a horizontally-split pane, or at 
       the bottom of a vertically-split pane 

*javax.swing.JSplitPane.addImpl(Component,Object,int)*

protected void addImpl(
  java.awt.Component comp,
  java.lang.Object constraints,
  int index)

Adds the specified component to this split pane. If constraints identifies the 
left/top or right/bottom child component, and a component with that identifier 
was previously added, it will be removed and then comp will be added in its 
place. If constraints is not one of the known identifiers the layout manager 
may throw an IllegalArgumentException. 

The possible constraints objects (Strings) are: 

JSplitPane.TOP JSplitPane.LEFT JSplitPane.BOTTOM JSplitPane.RIGHT 

If the constraints object is null, the component is added in the first 
available position (left/top if open, else right/bottom). 

    comp - the component to add 
    constraints - an Object specifying the layout constraints (position) for this component 
    index - an integer specifying the index in the container's list. 

*javax.swing.JSplitPane.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JSplitPane. For split panes, 
the AccessibleContext takes the form of an AccessibleJSplitPane. A new 
AccessibleJSplitPane instance is created if necessary. 


    Returns: an AccessibleJSplitPane that serves as the AccessibleContext of this JSplitPane 
*javax.swing.JSplitPane.getBottomComponent()*

public |java.awt.Component| getBottomComponent()

Returns the component below, or to the right of the divider. 


    Returns: the Component displayed in that position 
*javax.swing.JSplitPane.getDividerLocation()*

public int getDividerLocation()

Returns the last value passed to setDividerLocation. The value returned from 
this method may differ from the actual divider location (if setDividerLocation 
was passed a value bigger than the curent size). 


    Returns: an integer specifying the location of the divider 
*javax.swing.JSplitPane.getDividerSize()*

public int getDividerSize()

Returns the size of the divider. 


    Returns: an integer giving the size of the divider in pixels 
*javax.swing.JSplitPane.getLastDividerLocation()*

public int getLastDividerLocation()

Returns the last location the divider was at. 


    Returns: an integer specifying the last divider location as a count of pixels from the 
             left (or upper) edge of the pane to the left (or upper) edge of 
             the divider 
*javax.swing.JSplitPane.getLeftComponent()*

public |java.awt.Component| getLeftComponent()

Returns the component to the left (or above) the divider. 


    Returns: the Component displayed in that position 
*javax.swing.JSplitPane.getMaximumDividerLocation()*

public int getMaximumDividerLocation()

Returns the maximum location of the divider from the look and feel 
implementation. 


    Returns: an integer specifying a UI-specific value for the maximum location (typically a 
             pixel count); or -1 if the UI is null 
*javax.swing.JSplitPane.getMinimumDividerLocation()*

public int getMinimumDividerLocation()

Returns the minimum location of the divider from the look and feel 
implementation. 


    Returns: an integer specifying a UI-specific value for the minimum location (typically a 
             pixel count); or -1 if the UI is null 
*javax.swing.JSplitPane.getOrientation()*

public int getOrientation()

Returns the orientation. 


    Returns: an integer giving the orientation 
*javax.swing.JSplitPane.getResizeWeight()*

public double getResizeWeight()

Returns the number that determines how extra space is distributed. 


    Returns: how extra space is to be distributed on a resize of the split pane 
*javax.swing.JSplitPane.getRightComponent()*

public |java.awt.Component| getRightComponent()

Returns the component to the right (or below) the divider. 


    Returns: the Component displayed in that position 
*javax.swing.JSplitPane.getTopComponent()*

public |java.awt.Component| getTopComponent()

Returns the component above, or to the left of the divider. 


    Returns: the Component displayed in that position 
*javax.swing.JSplitPane.getUI()*

public |javax.swing.plaf.SplitPaneUI| getUI()

Returns the SplitPaneUI that is providing the current look and feel. 


    Returns: the SplitPaneUI object that renders this component 
*javax.swing.JSplitPane.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the name of the Lclass that renders this component. 


    Returns: the string "SplitPaneUI" 
*javax.swing.JSplitPane.isContinuousLayout()*

public boolean isContinuousLayout()

Gets the continuousLayout property. 


    Returns: the value of the continuousLayout property 
*javax.swing.JSplitPane.isOneTouchExpandable()*

public boolean isOneTouchExpandable()

Gets the oneTouchExpandable property. 


    Returns: the value of the oneTouchExpandable property 
*javax.swing.JSplitPane.isValidateRoot()*

public boolean isValidateRoot()

Returns true, so that calls to revalidate on any descendant of this JSplitPane 
will cause a request to be queued that will validate the JSplitPane and all its 
descendants. 


    Returns: 
*javax.swing.JSplitPane.paintChildren(Graphics)*

protected void paintChildren(java.awt.Graphics g)

Subclassed to message the UI with finishedPaintingChildren after super has been 
messaged, as well as painting the border. 

    g - the Graphics context within which to paint 

*javax.swing.JSplitPane.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JSplitPane. This method is intended to 
be used only for debugging purposes, and the content and format of the returned 
string may vary between implementations. The returned string may be empty but 
may not be null. 


    Returns: a string representation of this JSplitPane. 
*javax.swing.JSplitPane.remove(Component)*

public void remove(java.awt.Component component)

Removes the child component, component from the pane. Resets the leftComponent 
or rightComponent instance variable, as necessary. 

    component - the Component to remove 

*javax.swing.JSplitPane.remove(int)*

public void remove(int index)

Removes the Component at the specified index. Updates the leftComponent and 
rightComponent instance variables as necessary, and then messages super. 

    index - an integer specifying the component to remove, where 1 specifies the left/top 
       component and 2 specifies the bottom/right component 

*javax.swing.JSplitPane.removeAll()*

public void removeAll()

Removes all the child components from the split pane. Resets the leftComonent 
and rightComponent instance variables. 


*javax.swing.JSplitPane.resetToPreferredSizes()*

public void resetToPreferredSizes()

Lays out the JSplitPane layout based on the preferred size of the children 
components. This will likely result in changing the divider location. 


*javax.swing.JSplitPane.setBottomComponent(Component)*

public void setBottomComponent(java.awt.Component comp)

Sets the component below, or to the right of the divider. 

    comp - the Component to display in that position 

*javax.swing.JSplitPane.setContinuousLayout(boolean)*

public void setContinuousLayout(boolean newContinuousLayout)

Sets the value of the continuousLayout property, which must be true for the 
child components to be continuously redisplayed and laid out during user 
intervention. The default value of this property is false. Some look and feels 
might not support continuous layout; they will ignore this property. 

    newContinuousLayout - true if the components should continuously be redrawn as the divider changes 
       position 

*javax.swing.JSplitPane.setDividerLocation(double)*

public void setDividerLocation(double proportionalLocation)

Sets the divider location as a percentage of the JSplitPane's size. 

This method is implemented in terms of setDividerLocation(int). This method 
immediately changes the size of the split pane based on its current size. If 
the split pane is not correctly realized and on screen, this method will have 
no effect (new divider location will become (current size * 
proportionalLocation) which is 0). 

    proportionalLocation - a double-precision floating point value that specifies a percentage, from zero 
       (top/left) to 1.0 (bottom/right) 

*javax.swing.JSplitPane.setDividerLocation(int)*

public void setDividerLocation(int location)

Sets the location of the divider. This is passed off to the look and feel 
implementation, and then listeners are notified. A value less than 0 implies 
the divider should be reset to a value that attempts to honor the preferred 
size of the left/top component. After notifying the listeners, the last divider 
location is updated, via setLastDividerLocation. 

    location - an int specifying a UI-specific value (typically a pixel count) 

*javax.swing.JSplitPane.setDividerSize(int)*

public void setDividerSize(int newSize)

Sets the size of the divider. 

    newSize - an integer giving the size of the divider in pixels 

*javax.swing.JSplitPane.setLastDividerLocation(int)*

public void setLastDividerLocation(int newLastLocation)

Sets the last location the divider was at to newLastLocation. 

    newLastLocation - an integer specifying the last divider location in pixels, from the left (or 
       upper) edge of the pane to the left (or upper) edge of the divider 

*javax.swing.JSplitPane.setLeftComponent(Component)*

public void setLeftComponent(java.awt.Component comp)

Sets the component to the left (or above) the divider. 

    comp - the Component to display in that position 

*javax.swing.JSplitPane.setOneTouchExpandable(boolean)*

public void setOneTouchExpandable(boolean newValue)

Sets the value of the oneTouchExpandable property, which must be true for the 
JSplitPane to provide a UI widget on the divider to quickly expand/collapse the 
divider. The default value of this property is false. Some look and feels might 
not support one-touch expanding; they will ignore this property. 

    newValue - true to specify that the split pane should provide a collapse/expand widget 

*javax.swing.JSplitPane.setOrientation(int)*

public void setOrientation(int orientation)

Sets the orientation, or how the splitter is divided. The options are: 
JSplitPane.VERTICAL_SPLIT (above/below orientation of components) 
JSplitPane.HORIZONTAL_SPLIT (left/right orientation of components) 

    orientation - an integer specifying the orientation 

*javax.swing.JSplitPane.setResizeWeight(double)*

public void setResizeWeight(double value)

Specifies how to distribute extra space when the size of the split pane 
changes. A value of 0, the default, indicates the right/bottom component gets 
all the extra space (the left/top component acts fixed), where as a value of 1 
specifies the left/top component gets all the extra space (the right/bottom 
component acts fixed). Specifically, the left/top component gets (weight * 
diff) extra space and the right/bottom component gets (1 - weight) * diff extra 
space. 

    value - as described above 

*javax.swing.JSplitPane.setRightComponent(Component)*

public void setRightComponent(java.awt.Component comp)

Sets the component to the right (or below) the divider. 

    comp - the Component to display in that position 

*javax.swing.JSplitPane.setTopComponent(Component)*

public void setTopComponent(java.awt.Component comp)

Sets the component above, or to the left of the divider. 

    comp - the Component to display in that position 

*javax.swing.JSplitPane.setUI(SplitPaneUI)*

public void setUI(javax.swing.plaf.SplitPaneUI ui)

Sets the Lobject that renders this component. 

    ui - the SplitPaneUI Lobject 

*javax.swing.JSplitPane.updateUI()*

public void updateUI()

Notification from the UIManager that the Lhas changed. Replaces the current UI 
object with the latest version from the UIManager. 




*javax.swing.tree.DefaultMutableTreeNode* *DefaultMutableTreeNode* A DefaultMuta

public class DefaultMutableTreeNode
  extends    |java.lang.Object|
  implements |java.lang.Cloneable|
             |javax.swing.tree.MutableTreeNode|
             |java.io.Serializable|

|javax.swing.tree.DefaultMutableTreeNode_Description|
|javax.swing.tree.DefaultMutableTreeNode_Fields|
|javax.swing.tree.DefaultMutableTreeNode_Constructors|
|javax.swing.tree.DefaultMutableTreeNode_Methods|

================================================================================

*javax.swing.tree.DefaultMutableTreeNode_Fields*
|boolean_javax.swing.tree.DefaultMutableTreeNode.allowsChildren|
|java.util.Vector_javax.swing.tree.DefaultMutableTreeNode.children|
|java.util.Enumeration_javax.swing.tree.DefaultMutableTreeNode.EMPTY_ENUMERATION|
|javax.swing.tree.MutableTreeNode_javax.swing.tree.DefaultMutableTreeNode.parent|
|java.lang.Object_javax.swing.tree.DefaultMutableTreeNode.userObject|

*javax.swing.tree.DefaultMutableTreeNode_Constructors*
|javax.swing.tree.DefaultMutableTreeNode()|Creates a tree node that has no pare
|javax.swing.tree.DefaultMutableTreeNode(Object)|Creates a tree node with no pa
|javax.swing.tree.DefaultMutableTreeNode(Object,boolean)|Creates a tree node wi

*javax.swing.tree.DefaultMutableTreeNode_Methods*
|javax.swing.tree.DefaultMutableTreeNode.add(MutableTreeNode)|Removes newChild 
|javax.swing.tree.DefaultMutableTreeNode.breadthFirstEnumeration()|Creates and 
|javax.swing.tree.DefaultMutableTreeNode.children()|Creates and returns a forwa
|javax.swing.tree.DefaultMutableTreeNode.clone()|Overridden to make clone publi
|javax.swing.tree.DefaultMutableTreeNode.depthFirstEnumeration()|Creates and re
|javax.swing.tree.DefaultMutableTreeNode.getAllowsChildren()|Returns true if th
|javax.swing.tree.DefaultMutableTreeNode.getChildAfter(TreeNode)|Returns the ch
|javax.swing.tree.DefaultMutableTreeNode.getChildAt(int)|Returns the child at t
|javax.swing.tree.DefaultMutableTreeNode.getChildBefore(TreeNode)|Returns the c
|javax.swing.tree.DefaultMutableTreeNode.getChildCount()|Returns the number of 
|javax.swing.tree.DefaultMutableTreeNode.getDepth()|Returns the depth of the tr
|javax.swing.tree.DefaultMutableTreeNode.getFirstChild()|Returns this node's fi
|javax.swing.tree.DefaultMutableTreeNode.getFirstLeaf()|Finds and returns the f
|javax.swing.tree.DefaultMutableTreeNode.getIndex(TreeNode)|Returns the index o
|javax.swing.tree.DefaultMutableTreeNode.getLastChild()|Returns this node's las
|javax.swing.tree.DefaultMutableTreeNode.getLastLeaf()|Finds and returns the la
|javax.swing.tree.DefaultMutableTreeNode.getLeafCount()|Returns the total numbe
|javax.swing.tree.DefaultMutableTreeNode.getLevel()|Returns the number of level
|javax.swing.tree.DefaultMutableTreeNode.getNextLeaf()|Returns the leaf after t
|javax.swing.tree.DefaultMutableTreeNode.getNextNode()|Returns the node that fo
|javax.swing.tree.DefaultMutableTreeNode.getNextSibling()|Returns the next sibl
|javax.swing.tree.DefaultMutableTreeNode.getParent()|Returns this node's parent
|javax.swing.tree.DefaultMutableTreeNode.getPath()|Returns the path from the ro
|javax.swing.tree.DefaultMutableTreeNode.getPathToRoot(TreeNode,int)|Builds the
|javax.swing.tree.DefaultMutableTreeNode.getPreviousLeaf()|Returns the leaf bef
|javax.swing.tree.DefaultMutableTreeNode.getPreviousNode()|Returns the node tha
|javax.swing.tree.DefaultMutableTreeNode.getPreviousSibling()|Returns the previ
|javax.swing.tree.DefaultMutableTreeNode.getRoot()|Returns the root of the tree
|javax.swing.tree.DefaultMutableTreeNode.getSharedAncestor(DefaultMutableTreeNode)|
|javax.swing.tree.DefaultMutableTreeNode.getSiblingCount()|Returns the number o
|javax.swing.tree.DefaultMutableTreeNode.getUserObject()|Returns this node's us
|javax.swing.tree.DefaultMutableTreeNode.getUserObjectPath()|Returns the user o
|javax.swing.tree.DefaultMutableTreeNode.insert(MutableTreeNode,int)|Removes ne
|javax.swing.tree.DefaultMutableTreeNode.isLeaf()|Returns true if this node has
|javax.swing.tree.DefaultMutableTreeNode.isNodeAncestor(TreeNode)|Returns true 
|javax.swing.tree.DefaultMutableTreeNode.isNodeChild(TreeNode)|Returns true if 
|javax.swing.tree.DefaultMutableTreeNode.isNodeDescendant(DefaultMutableTreeNode)|
|javax.swing.tree.DefaultMutableTreeNode.isNodeRelated(DefaultMutableTreeNode)|
|javax.swing.tree.DefaultMutableTreeNode.isNodeSibling(TreeNode)|Returns true i
|javax.swing.tree.DefaultMutableTreeNode.isRoot()|Returns true if this node is 
|javax.swing.tree.DefaultMutableTreeNode.pathFromAncestorEnumeration(TreeNode)|
|javax.swing.tree.DefaultMutableTreeNode.postorderEnumeration()|Creates and ret
|javax.swing.tree.DefaultMutableTreeNode.preorderEnumeration()|Creates and retu
|javax.swing.tree.DefaultMutableTreeNode.remove(int)|Removes the child at the s
|javax.swing.tree.DefaultMutableTreeNode.remove(MutableTreeNode)|Removes aChild
|javax.swing.tree.DefaultMutableTreeNode.removeAllChildren()|Removes all of thi
|javax.swing.tree.DefaultMutableTreeNode.removeFromParent()|Removes the subtree
|javax.swing.tree.DefaultMutableTreeNode.setAllowsChildren(boolean)|Determines 
|javax.swing.tree.DefaultMutableTreeNode.setParent(MutableTreeNode)|Sets this n
|javax.swing.tree.DefaultMutableTreeNode.setUserObject(Object)|Sets the user ob
|javax.swing.tree.DefaultMutableTreeNode.toString()|Returns the result of sendi

*javax.swing.tree.DefaultMutableTreeNode_Description*

A DefaultMutableTreeNode is a general-purpose node in a tree data structure. 
For examples of using default mutable tree nodes, see How to Use Trees in The 
Java Tutorial. 



A tree node may have at most one parent and 0 or more children. 
DefaultMutableTreeNode provides operations for examining and modifying a node's 
parent and children and also operations for examining the tree that the node is 
a part of. A node's tree is the set of all nodes that can be reached by 
starting at the node and following all the possible links to parents and 
children. A node with no parent is the root of its tree; a node with no 
children is a leaf. A tree may consist of many subtrees, each node acting as 
the root for its own subtree. 

This class provides enumerations for efficiently traversing a tree or subtree 
in various orders or for following the path between two nodes. A 
DefaultMutableTreeNode may also hold a reference to a user object, the use of 
which is left to the user. Asking a DefaultMutableTreeNode for its string 
representation with toString() returns the string representation of its user 
object. 

This is not a thread safe class.If you intend to use a DefaultMutableTreeNode 
(or a tree of TreeNodes) in more than one thread, you need to do your own 
synchronizing. A good convention to adopt is synchronizing on the root node of 
a tree. 

While DefaultMutableTreeNode implements the MutableTreeNode interface and will 
allow you to add in any implementation of MutableTreeNode not all of the 
methods in DefaultMutableTreeNode will be applicable to all MutableTreeNodes 
implementations. Especially with some of the enumerations that are provided, 
using some of these methods assumes the DefaultMutableTreeNode contains only 
DefaultMutableNode instances. All of the TreeNode/MutableTreeNode methods will 
behave as defined no matter what implementations are added. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.tree.DefaultMutableTreeNode.allowsChildren*

A DefaultMutableTreeNode is a general-purpose node in a tree data structure. 
For examples of using default mutable tree nodes, see How to Use Trees in The 
Java Tutorial. 



A tree node may have at most one parent and 0 or more children. 
DefaultMutableTreeNode provides operations for examining and modifying a node's 
parent and children and also operations for examining the tree that the node is 
a part of. A node's tree is the set of all nodes that can be reached by 
starting at the node and following all the possible links to parents and 
children. A node with no parent is the root of its tree; a node with no 
children is a leaf. A tree may consist of many subtrees, each node acting as 
the root for its own subtree. 

This class provides enumerations for efficiently traversing a tree or subtree 
in various orders or for following the path between two nodes. A 
DefaultMutableTreeNode may also hold a reference to a user object, the use of 
which is left to the user. Asking a DefaultMutableTreeNode for its string 
representation with toString() returns the string representation of its user 
object. 

This is not a thread safe class.If you intend to use a DefaultMutableTreeNode 
(or a tree of TreeNodes) in more than one thread, you need to do your own 
synchronizing. A good convention to adopt is synchronizing on the root node of 
a tree. 

While DefaultMutableTreeNode implements the MutableTreeNode interface and will 
allow you to add in any implementation of MutableTreeNode not all of the 
methods in DefaultMutableTreeNode will be applicable to all MutableTreeNodes 
implementations. Especially with some of the enumerations that are provided, 
using some of these methods assumes the DefaultMutableTreeNode contains only 
DefaultMutableNode instances. All of the TreeNode/MutableTreeNode methods will 
behave as defined no matter what implementations are added. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.util.Vector_javax.swing.tree.DefaultMutableTreeNode.children*

A DefaultMutableTreeNode is a general-purpose node in a tree data structure. 
For examples of using default mutable tree nodes, see How to Use Trees in The 
Java Tutorial. 



A tree node may have at most one parent and 0 or more children. 
DefaultMutableTreeNode provides operations for examining and modifying a node's 
parent and children and also operations for examining the tree that the node is 
a part of. A node's tree is the set of all nodes that can be reached by 
starting at the node and following all the possible links to parents and 
children. A node with no parent is the root of its tree; a node with no 
children is a leaf. A tree may consist of many subtrees, each node acting as 
the root for its own subtree. 

This class provides enumerations for efficiently traversing a tree or subtree 
in various orders or for following the path between two nodes. A 
DefaultMutableTreeNode may also hold a reference to a user object, the use of 
which is left to the user. Asking a DefaultMutableTreeNode for its string 
representation with toString() returns the string representation of its user 
object. 

This is not a thread safe class.If you intend to use a DefaultMutableTreeNode 
(or a tree of TreeNodes) in more than one thread, you need to do your own 
synchronizing. A good convention to adopt is synchronizing on the root node of 
a tree. 

While DefaultMutableTreeNode implements the MutableTreeNode interface and will 
allow you to add in any implementation of MutableTreeNode not all of the 
methods in DefaultMutableTreeNode will be applicable to all MutableTreeNodes 
implementations. Especially with some of the enumerations that are provided, 
using some of these methods assumes the DefaultMutableTreeNode contains only 
DefaultMutableNode instances. All of the TreeNode/MutableTreeNode methods will 
behave as defined no matter what implementations are added. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.util.Enumeration_javax.swing.tree.DefaultMutableTreeNode.EMPTY_ENUMERATION*

A DefaultMutableTreeNode is a general-purpose node in a tree data structure. 
For examples of using default mutable tree nodes, see How to Use Trees in The 
Java Tutorial. 



A tree node may have at most one parent and 0 or more children. 
DefaultMutableTreeNode provides operations for examining and modifying a node's 
parent and children and also operations for examining the tree that the node is 
a part of. A node's tree is the set of all nodes that can be reached by 
starting at the node and following all the possible links to parents and 
children. A node with no parent is the root of its tree; a node with no 
children is a leaf. A tree may consist of many subtrees, each node acting as 
the root for its own subtree. 

This class provides enumerations for efficiently traversing a tree or subtree 
in various orders or for following the path between two nodes. A 
DefaultMutableTreeNode may also hold a reference to a user object, the use of 
which is left to the user. Asking a DefaultMutableTreeNode for its string 
representation with toString() returns the string representation of its user 
object. 

This is not a thread safe class.If you intend to use a DefaultMutableTreeNode 
(or a tree of TreeNodes) in more than one thread, you need to do your own 
synchronizing. A good convention to adopt is synchronizing on the root node of 
a tree. 

While DefaultMutableTreeNode implements the MutableTreeNode interface and will 
allow you to add in any implementation of MutableTreeNode not all of the 
methods in DefaultMutableTreeNode will be applicable to all MutableTreeNodes 
implementations. Especially with some of the enumerations that are provided, 
using some of these methods assumes the DefaultMutableTreeNode contains only 
DefaultMutableNode instances. All of the TreeNode/MutableTreeNode methods will 
behave as defined no matter what implementations are added. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.tree.MutableTreeNode_javax.swing.tree.DefaultMutableTreeNode.parent*

A DefaultMutableTreeNode is a general-purpose node in a tree data structure. 
For examples of using default mutable tree nodes, see How to Use Trees in The 
Java Tutorial. 



A tree node may have at most one parent and 0 or more children. 
DefaultMutableTreeNode provides operations for examining and modifying a node's 
parent and children and also operations for examining the tree that the node is 
a part of. A node's tree is the set of all nodes that can be reached by 
starting at the node and following all the possible links to parents and 
children. A node with no parent is the root of its tree; a node with no 
children is a leaf. A tree may consist of many subtrees, each node acting as 
the root for its own subtree. 

This class provides enumerations for efficiently traversing a tree or subtree 
in various orders or for following the path between two nodes. A 
DefaultMutableTreeNode may also hold a reference to a user object, the use of 
which is left to the user. Asking a DefaultMutableTreeNode for its string 
representation with toString() returns the string representation of its user 
object. 

This is not a thread safe class.If you intend to use a DefaultMutableTreeNode 
(or a tree of TreeNodes) in more than one thread, you need to do your own 
synchronizing. A good convention to adopt is synchronizing on the root node of 
a tree. 

While DefaultMutableTreeNode implements the MutableTreeNode interface and will 
allow you to add in any implementation of MutableTreeNode not all of the 
methods in DefaultMutableTreeNode will be applicable to all MutableTreeNodes 
implementations. Especially with some of the enumerations that are provided, 
using some of these methods assumes the DefaultMutableTreeNode contains only 
DefaultMutableNode instances. All of the TreeNode/MutableTreeNode methods will 
behave as defined no matter what implementations are added. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.Object_javax.swing.tree.DefaultMutableTreeNode.userObject*

A DefaultMutableTreeNode is a general-purpose node in a tree data structure. 
For examples of using default mutable tree nodes, see How to Use Trees in The 
Java Tutorial. 



A tree node may have at most one parent and 0 or more children. 
DefaultMutableTreeNode provides operations for examining and modifying a node's 
parent and children and also operations for examining the tree that the node is 
a part of. A node's tree is the set of all nodes that can be reached by 
starting at the node and following all the possible links to parents and 
children. A node with no parent is the root of its tree; a node with no 
children is a leaf. A tree may consist of many subtrees, each node acting as 
the root for its own subtree. 

This class provides enumerations for efficiently traversing a tree or subtree 
in various orders or for following the path between two nodes. A 
DefaultMutableTreeNode may also hold a reference to a user object, the use of 
which is left to the user. Asking a DefaultMutableTreeNode for its string 
representation with toString() returns the string representation of its user 
object. 

This is not a thread safe class.If you intend to use a DefaultMutableTreeNode 
(or a tree of TreeNodes) in more than one thread, you need to do your own 
synchronizing. A good convention to adopt is synchronizing on the root node of 
a tree. 

While DefaultMutableTreeNode implements the MutableTreeNode interface and will 
allow you to add in any implementation of MutableTreeNode not all of the 
methods in DefaultMutableTreeNode will be applicable to all MutableTreeNodes 
implementations. Especially with some of the enumerations that are provided, 
using some of these methods assumes the DefaultMutableTreeNode contains only 
DefaultMutableNode instances. All of the TreeNode/MutableTreeNode methods will 
behave as defined no matter what implementations are added. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.tree.DefaultMutableTreeNode()*

public DefaultMutableTreeNode()

Creates a tree node that has no parent and no children, but which allows 
children. 


*javax.swing.tree.DefaultMutableTreeNode(Object)*

public DefaultMutableTreeNode(java.lang.Object userObject)

Creates a tree node with no parent, no children, but which allows children, and 
initializes it with the specified user object. 

    userObject - an Object provided by the user that constitutes the node's data 

*javax.swing.tree.DefaultMutableTreeNode(Object,boolean)*

public DefaultMutableTreeNode(
  java.lang.Object userObject,
  boolean allowsChildren)

Creates a tree node with no parent, no children, initialized with the specified 
user object, and that allows children only if specified. 

    userObject - an Object provided by the user that constitutes the node's data 
    allowsChildren - if true, the node is allowed to have child nodes -- otherwise, it is always a 
       leaf node 

*javax.swing.tree.DefaultMutableTreeNode.add(MutableTreeNode)*

public void add(javax.swing.tree.MutableTreeNode newChild)

Removes newChild from its parent and makes it a child of this node by adding it 
to the end of this node's child array. 

    newChild - node to add as a child of this node 

*javax.swing.tree.DefaultMutableTreeNode.breadthFirstEnumeration()*

public |java.util.Enumeration| breadthFirstEnumeration()

Creates and returns an enumeration that traverses the subtree rooted at this 
node in breadth-first order. The first node returned by the enumeration's 
nextElement() method is this node. 

Modifying the tree by inserting, removing, or moving a node invalidates any 
enumerations created before the modification. 


    Returns: an enumeration for traversing the tree in breadth-first order 
*javax.swing.tree.DefaultMutableTreeNode.children()*

public |java.util.Enumeration| children()

Creates and returns a forward-order enumeration of this node's children. 
Modifying this node's child array invalidates any child enumerations created 
before the modification. 


    Returns: an Enumeration of this node's children 
*javax.swing.tree.DefaultMutableTreeNode.clone()*

public |java.lang.Object| clone()

Overridden to make clone public. Returns a shallow copy of this node; the new 
node has no parent or children and has a reference to the same user object, if 
any. 


    Returns: a copy of this node 
*javax.swing.tree.DefaultMutableTreeNode.depthFirstEnumeration()*

public |java.util.Enumeration| depthFirstEnumeration()

Creates and returns an enumeration that traverses the subtree rooted at this 
node in depth-first order. The first node returned by the enumeration's 
nextElement() method is the leftmost leaf. This is the same as a postorder 
traversal. 

Modifying the tree by inserting, removing, or moving a node invalidates any 
enumerations created before the modification. 


    Returns: an enumeration for traversing the tree in depth-first order 
*javax.swing.tree.DefaultMutableTreeNode.getAllowsChildren()*

public boolean getAllowsChildren()

Returns true if this node is allowed to have children. 


    Returns: true if this node allows children, else false 
*javax.swing.tree.DefaultMutableTreeNode.getChildAfter(TreeNode)*

public |javax.swing.tree.TreeNode| getChildAfter(javax.swing.tree.TreeNode aChild)

Returns the child in this node's child array that immediately follows aChild, 
which must be a child of this node. If aChild is the last child, returns null. 
This method performs a linear search of this node's children for aChild and is 
O(n) where n is the number of children; to traverse the entire array of 
children, use an enumeration instead. 


    Returns: the child of this node that immediately follows aChild 
*javax.swing.tree.DefaultMutableTreeNode.getChildAt(int)*

public |javax.swing.tree.TreeNode| getChildAt(int index)

Returns the child at the specified index in this node's child array. 

    index - an index into this node's child array 

    Returns: the TreeNode in this node's child array at the specified index 
*javax.swing.tree.DefaultMutableTreeNode.getChildBefore(TreeNode)*

public |javax.swing.tree.TreeNode| getChildBefore(javax.swing.tree.TreeNode aChild)

Returns the child in this node's child array that immediately precedes aChild, 
which must be a child of this node. If aChild is the first child, returns null. 
This method performs a linear search of this node's children for aChild and is 
O(n) where n is the number of children. 


    Returns: the child of this node that immediately precedes aChild 
*javax.swing.tree.DefaultMutableTreeNode.getChildCount()*

public int getChildCount()

Returns the number of children of this node. 


    Returns: an int giving the number of children of this node 
*javax.swing.tree.DefaultMutableTreeNode.getDepth()*

public int getDepth()

Returns the depth of the tree rooted at this node -- the longest distance from 
this node to a leaf. If this node has no children, returns 0. This operation is 
much more expensive than getLevel() because it must effectively traverse the 
entire tree rooted at this node. 


    Returns: the depth of the tree whose root is this node 
*javax.swing.tree.DefaultMutableTreeNode.getFirstChild()*

public |javax.swing.tree.TreeNode| getFirstChild()

Returns this node's first child. If this node has no children, throws 
NoSuchElementException. 


    Returns: the first child of this node 
*javax.swing.tree.DefaultMutableTreeNode.getFirstLeaf()*

public |javax.swing.tree.DefaultMutableTreeNode| getFirstLeaf()

Finds and returns the first leaf that is a descendant of this node -- either 
this node or its first child's first leaf. Returns this node if it is a leaf. 


    Returns: the first leaf in the subtree rooted at this node 
*javax.swing.tree.DefaultMutableTreeNode.getIndex(TreeNode)*

public int getIndex(javax.swing.tree.TreeNode aChild)

Returns the index of the specified child in this node's child array. If the 
specified node is not a child of this node, returns -1. This method performs a 
linear search and is O(n) where n is the number of children. 

    aChild - the TreeNode to search for among this node's children 

    Returns: an int giving the index of the node in this node's child array, or -1 if the 
             specified node is a not a child of this node 
*javax.swing.tree.DefaultMutableTreeNode.getLastChild()*

public |javax.swing.tree.TreeNode| getLastChild()

Returns this node's last child. If this node has no children, throws 
NoSuchElementException. 


    Returns: the last child of this node 
*javax.swing.tree.DefaultMutableTreeNode.getLastLeaf()*

public |javax.swing.tree.DefaultMutableTreeNode| getLastLeaf()

Finds and returns the last leaf that is a descendant of this node -- either 
this node or its last child's last leaf. Returns this node if it is a leaf. 


    Returns: the last leaf in the subtree rooted at this node 
*javax.swing.tree.DefaultMutableTreeNode.getLeafCount()*

public int getLeafCount()

Returns the total number of leaves that are descendants of this node. If this 
node is a leaf, returns 1. This method is O(n) where n is the number of 
descendants of this node. 


    Returns: the number of leaves beneath this node 
*javax.swing.tree.DefaultMutableTreeNode.getLevel()*

public int getLevel()

Returns the number of levels above this node -- the distance from the root to 
this node. If this node is the root, returns 0. 


    Returns: the number of levels above this node 
*javax.swing.tree.DefaultMutableTreeNode.getNextLeaf()*

public |javax.swing.tree.DefaultMutableTreeNode| getNextLeaf()

Returns the leaf after this node or null if this node is the last leaf in the 
tree. 

In this implementation of the MutableNode interface, this operation is very 
inefficient. In order to determine the next node, this method first performs a 
linear search in the parent's child-list in order to find the current node. 

That implementation makes the operation suitable for short traversals from a 
known position. But to traverse all of the leaves in the tree, you should use 
depthFirstEnumeration to enumerate the nodes in the tree and use isLeaf on each 
node to determine which are leaves. 


    Returns: returns the next leaf past this node 
*javax.swing.tree.DefaultMutableTreeNode.getNextNode()*

public |javax.swing.tree.DefaultMutableTreeNode| getNextNode()

Returns the node that follows this node in a preorder traversal of this node's 
tree. Returns null if this node is the last node of the traversal. This is an 
inefficient way to traverse the entire tree; use an enumeration, instead. 


    Returns: the node that follows this node in a preorder traversal, or null if this node 
             is last 
*javax.swing.tree.DefaultMutableTreeNode.getNextSibling()*

public |javax.swing.tree.DefaultMutableTreeNode| getNextSibling()

Returns the next sibling of this node in the parent's children array. Returns 
null if this node has no parent or is the parent's last child. This method 
performs a linear search that is O(n) where n is the number of children; to 
traverse the entire array, use the parent's child enumeration instead. 


    Returns: the sibling of this node that immediately follows this node 
*javax.swing.tree.DefaultMutableTreeNode.getParent()*

public |javax.swing.tree.TreeNode| getParent()

Returns this node's parent or null if this node has no parent. 


    Returns: this node's parent TreeNode, or null if this node has no parent 
*javax.swing.tree.DefaultMutableTreeNode.getPath()*

public |javax.swing.tree.TreeNode| getPath()

Returns the path from the root, to get to this node. The last element in the 
path is this node. 


    Returns: an array of TreeNode objects giving the path, where the first element in the 
             path is the root and the last element is this node. 
*javax.swing.tree.DefaultMutableTreeNode.getPathToRoot(TreeNode,int)*

protected |javax.swing.tree.TreeNode| getPathToRoot(
  javax.swing.tree.TreeNode aNode,
  int depth)

Builds the parents of node up to and including the root node, where the 
original node is the last element in the returned array. The length of the 
returned array gives the node's depth in the tree. 

    aNode - the TreeNode to get the path for 
    depth - an int giving the number of steps already taken towards the root (on recursive 
       calls), used to size the returned array 

    Returns: an array of TreeNodes giving the path from the root to the specified node 
*javax.swing.tree.DefaultMutableTreeNode.getPreviousLeaf()*

public |javax.swing.tree.DefaultMutableTreeNode| getPreviousLeaf()

Returns the leaf before this node or null if this node is the first leaf in the 
tree. 

In this implementation of the MutableNode interface, this operation is very 
inefficient. In order to determine the previous node, this method first 
performs a linear search in the parent's child-list in order to find the 
current node. 

That implementation makes the operation suitable for short traversals from a 
known position. But to traverse all of the leaves in the tree, you should use 
depthFirstEnumeration to enumerate the nodes in the tree and use isLeaf on each 
node to determine which are leaves. 


    Returns: returns the leaf before this node 
*javax.swing.tree.DefaultMutableTreeNode.getPreviousNode()*

public |javax.swing.tree.DefaultMutableTreeNode| getPreviousNode()

Returns the node that precedes this node in a preorder traversal of this node's 
tree. Returns null if this node is the first node of the traversal -- the root 
of the tree. This is an inefficient way to traverse the entire tree; use an 
enumeration, instead. 


    Returns: the node that precedes this node in a preorder traversal, or null if this node 
             is the first 
*javax.swing.tree.DefaultMutableTreeNode.getPreviousSibling()*

public |javax.swing.tree.DefaultMutableTreeNode| getPreviousSibling()

Returns the previous sibling of this node in the parent's children array. 
Returns null if this node has no parent or is the parent's first child. This 
method performs a linear search that is O(n) where n is the number of children. 


    Returns: the sibling of this node that immediately precedes this node 
*javax.swing.tree.DefaultMutableTreeNode.getRoot()*

public |javax.swing.tree.TreeNode| getRoot()

Returns the root of the tree that contains this node. The root is the ancestor 
with a null parent. 


    Returns: the root of the tree that contains this node 
*javax.swing.tree.DefaultMutableTreeNode.getSharedAncestor(DefaultMutableTreeNode)*

public |javax.swing.tree.TreeNode| getSharedAncestor(javax.swing.tree.DefaultMutableTreeNode aNode)

Returns the nearest common ancestor to this node and aNode. Returns null, if no 
such ancestor exists -- if this node and aNode are in different trees or if 
aNode is null. A node is considered an ancestor of itself. 

    aNode - node to find common ancestor with 

    Returns: nearest ancestor common to this node and aNode, or null if none 
*javax.swing.tree.DefaultMutableTreeNode.getSiblingCount()*

public int getSiblingCount()

Returns the number of siblings of this node. A node is its own sibling (if it 
has no parent or no siblings, this method returns 1). 


    Returns: the number of siblings of this node 
*javax.swing.tree.DefaultMutableTreeNode.getUserObject()*

public |java.lang.Object| getUserObject()

Returns this node's user object. 


    Returns: the Object stored at this node by the user 
*javax.swing.tree.DefaultMutableTreeNode.getUserObjectPath()*

public |java.lang.Object| getUserObjectPath()

Returns the user object path, from the root, to get to this node. If some of 
the TreeNodes in the path have null user objects, the returned path will 
contain nulls. 


*javax.swing.tree.DefaultMutableTreeNode.insert(MutableTreeNode,int)*

public void insert(
  javax.swing.tree.MutableTreeNode newChild,
  int childIndex)

Removes newChild from its present parent (if it has a parent), sets the child's 
parent to this node, and then adds the child to this node's child array at 
index childIndex. newChild must not be null and must not be an ancestor of this 
node. 

    newChild - the MutableTreeNode to insert under this node 
    childIndex - the index in this node's child array where this node is to be inserted 

*javax.swing.tree.DefaultMutableTreeNode.isLeaf()*

public boolean isLeaf()

Returns true if this node has no children. To distinguish between nodes that 
have no children and nodes that cannot have children (e.g. to distinguish files 
from empty directories), use this method in conjunction with getAllowsChildren 


    Returns: true if this node has no children 
*javax.swing.tree.DefaultMutableTreeNode.isNodeAncestor(TreeNode)*

public boolean isNodeAncestor(javax.swing.tree.TreeNode anotherNode)

Returns true if anotherNode is an ancestor of this node -- if it is this node, 
this node's parent, or an ancestor of this node's parent. (Note that a node is 
considered an ancestor of itself.) If anotherNode is null, this method returns 
false. This operation is at worst O(h) where h is the distance from the root to 
this node. 

    anotherNode - node to test as an ancestor of this node 

    Returns: true if this node is a descendant of anotherNode 
*javax.swing.tree.DefaultMutableTreeNode.isNodeChild(TreeNode)*

public boolean isNodeChild(javax.swing.tree.TreeNode aNode)

Returns true if aNode is a child of this node. If aNode is null, this method 
returns false. 


    Returns: true if aNode is a child of this node; false if aNode is null 
*javax.swing.tree.DefaultMutableTreeNode.isNodeDescendant(DefaultMutableTreeNode)*

public boolean isNodeDescendant(javax.swing.tree.DefaultMutableTreeNode anotherNode)

Returns true if anotherNode is a descendant of this node -- if it is this node, 
one of this node's children, or a descendant of one of this node's children. 
Note that a node is considered a descendant of itself. If anotherNode is null, 
returns false. This operation is at worst O(h) where h is the distance from the 
root to anotherNode. 

    anotherNode - node to test as descendant of this node 

    Returns: true if this node is an ancestor of anotherNode 
*javax.swing.tree.DefaultMutableTreeNode.isNodeRelated(DefaultMutableTreeNode)*

public boolean isNodeRelated(javax.swing.tree.DefaultMutableTreeNode aNode)

Returns true if and only if aNode is in the same tree as this node. Returns 
false if aNode is null. 


    Returns: true if aNode is in the same tree as this node; false if aNode is null 
*javax.swing.tree.DefaultMutableTreeNode.isNodeSibling(TreeNode)*

public boolean isNodeSibling(javax.swing.tree.TreeNode anotherNode)

Returns true if anotherNode is a sibling of (has the same parent as) this node. 
A node is its own sibling. If anotherNode is null, returns false. 

    anotherNode - node to test as sibling of this node 

    Returns: true if anotherNode is a sibling of this node 
*javax.swing.tree.DefaultMutableTreeNode.isRoot()*

public boolean isRoot()

Returns true if this node is the root of the tree. The root is the only node in 
the tree with a null parent; every tree has exactly one root. 


    Returns: true if this node is the root of its tree 
*javax.swing.tree.DefaultMutableTreeNode.pathFromAncestorEnumeration(TreeNode)*

public |java.util.Enumeration| pathFromAncestorEnumeration(javax.swing.tree.TreeNode ancestor)

Creates and returns an enumeration that follows the path from ancestor to this 
node. The enumeration's nextElement() method first returns ancestor, then the 
child of ancestor that is an ancestor of this node, and so on, and finally 
returns this node. Creation of the enumeration is O(m) where m is the number of 
nodes between this node and ancestor, inclusive. Each nextElement() message is 
O(1). 

Modifying the tree by inserting, removing, or moving a node invalidates any 
enumerations created before the modification. 


    Returns: an enumeration for following the path from an ancestor of this node to this one 
*javax.swing.tree.DefaultMutableTreeNode.postorderEnumeration()*

public |java.util.Enumeration| postorderEnumeration()

Creates and returns an enumeration that traverses the subtree rooted at this 
node in postorder. The first node returned by the enumeration's nextElement() 
method is the leftmost leaf. This is the same as a depth-first traversal. 

Modifying the tree by inserting, removing, or moving a node invalidates any 
enumerations created before the modification. 


    Returns: an enumeration for traversing the tree in postorder 
*javax.swing.tree.DefaultMutableTreeNode.preorderEnumeration()*

public |java.util.Enumeration| preorderEnumeration()

Creates and returns an enumeration that traverses the subtree rooted at this 
node in preorder. The first node returned by the enumeration's nextElement() 
method is this node. 

Modifying the tree by inserting, removing, or moving a node invalidates any 
enumerations created before the modification. 


    Returns: an enumeration for traversing the tree in preorder 
*javax.swing.tree.DefaultMutableTreeNode.remove(int)*

public void remove(int childIndex)

Removes the child at the specified index from this node's children and sets 
that node's parent to null. The child node to remove must be a MutableTreeNode. 

    childIndex - the index in this node's child array of the child to remove 

*javax.swing.tree.DefaultMutableTreeNode.remove(MutableTreeNode)*

public void remove(javax.swing.tree.MutableTreeNode aChild)

Removes aChild from this node's child array, giving it a null parent. 

    aChild - a child of this node to remove 

*javax.swing.tree.DefaultMutableTreeNode.removeAllChildren()*

public void removeAllChildren()

Removes all of this node's children, setting their parents to null. If this 
node has no children, this method does nothing. 


*javax.swing.tree.DefaultMutableTreeNode.removeFromParent()*

public void removeFromParent()

Removes the subtree rooted at this node from the tree, giving this node a null 
parent. Does nothing if this node is the root of its tree. 


*javax.swing.tree.DefaultMutableTreeNode.setAllowsChildren(boolean)*

public void setAllowsChildren(boolean allows)

Determines whether or not this node is allowed to have children. If allows is 
false, all of this node's children are removed. 

Note: By default, a node allows children. 

    allows - true if this node is allowed to have children 

*javax.swing.tree.DefaultMutableTreeNode.setParent(MutableTreeNode)*

public void setParent(javax.swing.tree.MutableTreeNode newParent)

Sets this node's parent to newParent but does not change the parent's child 
array. This method is called from insert() and remove() to reassign a child's 
parent, it should not be messaged from anywhere else. 

    newParent - this node's new parent 

*javax.swing.tree.DefaultMutableTreeNode.setUserObject(Object)*

public void setUserObject(java.lang.Object userObject)

Sets the user object for this node to userObject. 

    userObject - the Object that constitutes this node's user-specified data 

*javax.swing.tree.DefaultMutableTreeNode.toString()*

public |java.lang.String| toString()

Returns the result of sending toString() to this node's user object, or null if 
this node has no user object. 




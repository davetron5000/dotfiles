*javax.swing.SpinnerDateModel* *SpinnerDateModel* A SpinnerModel for sequences o

public class SpinnerDateModel
  extends    |javax.swing.AbstractSpinnerModel|
  implements |java.io.Serializable|

|javax.swing.SpinnerDateModel_Description|
|javax.swing.SpinnerDateModel_Fields|
|javax.swing.SpinnerDateModel_Constructors|
|javax.swing.SpinnerDateModel_Methods|

================================================================================

*javax.swing.SpinnerDateModel_Constructors*
|javax.swing.SpinnerDateModel()|Constructs a SpinnerDateModel whose initial  va
|javax.swing.SpinnerDateModel(Date,Comparable,Comparable,int)|Creates a Spinner

*javax.swing.SpinnerDateModel_Methods*
|javax.swing.SpinnerDateModel.getCalendarField()|Returns the Calendar field tha
|javax.swing.SpinnerDateModel.getDate()|Returns the current element in this seq
|javax.swing.SpinnerDateModel.getEnd()|Returns the last Date in the sequence.
|javax.swing.SpinnerDateModel.getNextValue()|Returns the next Date in the seque
|javax.swing.SpinnerDateModel.getPreviousValue()|Returns the previous Date in t
|javax.swing.SpinnerDateModel.getStart()|Returns the first Date in the sequence
|javax.swing.SpinnerDateModel.getValue()|Returns the current element in this se
|javax.swing.SpinnerDateModel.setCalendarField(int)|Changes the size of the dat
|javax.swing.SpinnerDateModel.setEnd(Comparable)|Changes the upper limit for Da
|javax.swing.SpinnerDateModel.setStart(Comparable)|Changes the lower limit for 
|javax.swing.SpinnerDateModel.setValue(Object)|Sets the current Date for this s

*javax.swing.SpinnerDateModel_Description*

A SpinnerModel for sequences of Dates. The upper and lower bounds of the 
sequence are defined by properties called start and end and the size of the 
increase or decrease computed by the nextValue and previousValue methods is 
defined by a property called calendarField. The start and end properties can be 
null to indicate that the sequence has no lower or upper limit. 

The value of the calendarField property must be one of the java.util.Calendar 
constants that specify a field within a Calendar. The getNextValue and 
getPreviousValue methods change the date forward or backwards by this amount. 
For example, if calendarField is Calendar.DAY_OF_WEEK, then nextValue produces 
a Date that's 24 hours after the current value, and previousValue produces a 
Date that's 24 hours earlier. 

The legal values for calendarField are: 

Calendar.ERA Calendar.YEAR Calendar.MONTH Calendar.WEEK_OF_YEAR 
Calendar.WEEK_OF_MONTH Calendar.DAY_OF_MONTH Calendar.DAY_OF_YEAR 
Calendar.DAY_OF_WEEK Calendar.DAY_OF_WEEK_IN_MONTH Calendar.AM_PM Calendar.HOUR 
Calendar.HOUR_OF_DAY Calendar.MINUTE Calendar.SECOND Calendar.MILLISECOND 

However some UIs may set the calendarField before commiting the edit to spin 
the field under the cursor. If you only want one field to spin you can subclass 
and ignore the setCalendarField calls. 

This model inherits a ChangeListener. The ChangeListeners are notified whenever 
the models value, calendarField, start, or end properties changes. 


*javax.swing.SpinnerDateModel()*

public SpinnerDateModel()

Constructs a SpinnerDateModel whose initial value is the current date, 
calendarField is equal to Calendar.DAY_OF_MONTH, and for which there are no 
start/end limits. 


*javax.swing.SpinnerDateModel(Date,Comparable,Comparable,int)*

public SpinnerDateModel(
  java.util.Date value,
  java.lang.Comparable start,
  java.lang.Comparable end,
  int calendarField)

Creates a SpinnerDateModel that represents a sequence of dates between start 
and end. The nextValue and previousValue methods compute elements of the 
sequence by advancing or reversing the current date value by the calendarField 
time unit. For a precise description of what it means to increment or decrement 
a Calendar field, see the add method in java.util.Calendar. 

The start and end parameters can be null to indicate that the range doesn't 
have an upper or lower bound. If value or calendarField is null, or if both 
start and end are specified and mininum > maximum then an 
IllegalArgumentException is thrown. Similarly if (minimum <= value <= maximum) 
is false, an IllegalArgumentException is thrown. 

    value - the current (non null) value of the model 
    start - the first date in the sequence or null 
    end - the last date in the sequence or null 
    calendarField - 

Calendar.ERA Calendar.YEAR Calendar.MONTH Calendar.WEEK_OF_YEAR 
       Calendar.WEEK_OF_MONTH Calendar.DAY_OF_MONTH Calendar.DAY_OF_YEAR 
       Calendar.DAY_OF_WEEK Calendar.DAY_OF_WEEK_IN_MONTH Calendar.AM_PM 
       Calendar.HOUR Calendar.HOUR_OF_DAY Calendar.MINUTE Calendar.SECOND 
       Calendar.MILLISECOND 

*javax.swing.SpinnerDateModel.getCalendarField()*

public int getCalendarField()

Returns the Calendar field that is added to or subtracted from by the nextValue 
and previousValue methods. 


    Returns: the value of the calendarField property 
*javax.swing.SpinnerDateModel.getDate()*

public |java.util.Date| getDate()

Returns the current element in this sequence of Dates. This method is 
equivalent to (Date)getValue. 


    Returns: the value property 
*javax.swing.SpinnerDateModel.getEnd()*

public |java.lang.Comparable| getEnd()

Returns the last Date in the sequence. 


    Returns: the value of the end property 
*javax.swing.SpinnerDateModel.getNextValue()*

public |java.lang.Object| getNextValue()

Returns the next Date in the sequence, or null if the next date is after end. 


    Returns: the next Date in the sequence, or null if the next date is after end. 
*javax.swing.SpinnerDateModel.getPreviousValue()*

public |java.lang.Object| getPreviousValue()

Returns the previous Date in the sequence, or null if the previous date is 
before start. 


    Returns: the previous Date in the sequence, or null if the previous date is before start 
*javax.swing.SpinnerDateModel.getStart()*

public |java.lang.Comparable| getStart()

Returns the first Date in the sequence. 


    Returns: the value of the start property 
*javax.swing.SpinnerDateModel.getValue()*

public |java.lang.Object| getValue()

Returns the current element in this sequence of Dates. 


    Returns: the value property 
*javax.swing.SpinnerDateModel.setCalendarField(int)*

public void setCalendarField(int calendarField)

Changes the size of the date value change computed by the nextValue and 
previousValue methods. The calendarField parameter must be one of the Calendar 
field constants like Calendar.MONTH or Calendar.MINUTE. The nextValue and 
previousValue methods simply move the specified Calendar field forward or 
backward by one unit with the Calendar.add method. You should use this method 
with care as some UIs may set the calendarField before commiting the edit to 
spin the field under the cursor. If you only want one field to spin you can 
subclass and ignore the setCalendarField calls. 

    calendarField - 

Calendar.ERA Calendar.YEAR Calendar.MONTH Calendar.WEEK_OF_YEAR 
       Calendar.WEEK_OF_MONTH Calendar.DAY_OF_MONTH Calendar.DAY_OF_YEAR 
       Calendar.DAY_OF_WEEK Calendar.DAY_OF_WEEK_IN_MONTH Calendar.AM_PM 
       Calendar.HOUR Calendar.HOUR_OF_DAY Calendar.MINUTE Calendar.SECOND 
       Calendar.MILLISECOND 

This method fires a ChangeEvent if the calendarField has changed. 

*javax.swing.SpinnerDateModel.setEnd(Comparable)*

public void setEnd(java.lang.Comparable end)

Changes the upper limit for Dates in this sequence. If start is null, then 
there is no upper limit. No bounds checking is done here: the new start value 
may invalidate the (start <= value <= end) invariant enforced by the 
constructors. This is to simplify updating the model. Naturally, one should 
ensure that the invariant is true before calling the nextValue, previousValue, 
or setValue methods. 

Typically this property is a Date however it's possible to use Comparable with 
a compareTo method for Dates. See setStart for an example. 

This method fires a ChangeEvent if the end has changed. 

    end - defines the last date in the sequence 

*javax.swing.SpinnerDateModel.setStart(Comparable)*

public void setStart(java.lang.Comparable start)

Changes the lower limit for Dates in this sequence. If start is null, then 
there is no lower limit. No bounds checking is done here: the new start value 
may invalidate the (start <= value <= end) invariant enforced by the 
constructors. This is to simplify updating the model. Naturally one should 
ensure that the invariant is true before calling the nextValue, previousValue, 
or setValue methods. 

Typically this property is a Date however it's possible to use a Comparable 
with a compareTo method for Dates. For example start might be an instance of a 
class like this: 

MyStartDate implements Comparable { long t = 12345; public int compareTo(Date 
d) { return (t ClassCastException if the Object passed to compareTo(Object) is 
not a Date. 

This method fires a ChangeEvent if the start has changed. 

    start - defines the first date in the sequence 

*javax.swing.SpinnerDateModel.setValue(Object)*

public void setValue(java.lang.Object value)

Sets the current Date for this sequence. If value is null, an 
IllegalArgumentException is thrown. No bounds checking is done here: the new 
value may invalidate the (start value end) invariant enforced by the 
constructors. Naturally, one should ensure that the (start <= value <= maximum) 
invariant is true before calling the nextValue, previousValue, or setValue 
methods. 

This method fires a ChangeEvent if the value has changed. 

    value - the current (non null) Date for this sequence 



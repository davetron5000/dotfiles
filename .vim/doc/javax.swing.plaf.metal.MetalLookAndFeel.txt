*javax.swing.plaf.metal.MetalLookAndFeel* *MetalLookAndFeel* Implements the Java

public class MetalLookAndFeel
  extends    |javax.swing.plaf.basic.BasicLookAndFeel|

|javax.swing.plaf.metal.MetalLookAndFeel_Description|
|javax.swing.plaf.metal.MetalLookAndFeel_Fields|
|javax.swing.plaf.metal.MetalLookAndFeel_Constructors|
|javax.swing.plaf.metal.MetalLookAndFeel_Methods|

================================================================================

*javax.swing.plaf.metal.MetalLookAndFeel_Constructors*
|javax.swing.plaf.metal.MetalLookAndFeel()|

*javax.swing.plaf.metal.MetalLookAndFeel_Methods*
|javax.swing.plaf.metal.MetalLookAndFeel.createDefaultTheme()|
|javax.swing.plaf.metal.MetalLookAndFeel.getAcceleratorForeground()|
|javax.swing.plaf.metal.MetalLookAndFeel.getAcceleratorSelectedForeground()|
|javax.swing.plaf.metal.MetalLookAndFeel.getBlack()|
|javax.swing.plaf.metal.MetalLookAndFeel.getControl()|
|javax.swing.plaf.metal.MetalLookAndFeel.getControlDarkShadow()|
|javax.swing.plaf.metal.MetalLookAndFeel.getControlDisabled()|
|javax.swing.plaf.metal.MetalLookAndFeel.getControlHighlight()|
|javax.swing.plaf.metal.MetalLookAndFeel.getControlInfo()|
|javax.swing.plaf.metal.MetalLookAndFeel.getControlShadow()|
|javax.swing.plaf.metal.MetalLookAndFeel.getControlTextColor()|
|javax.swing.plaf.metal.MetalLookAndFeel.getControlTextFont()|
|javax.swing.plaf.metal.MetalLookAndFeel.getCurrentTheme()|Return the theme cur
|javax.swing.plaf.metal.MetalLookAndFeel.getDefaults()|
|javax.swing.plaf.metal.MetalLookAndFeel.getDescription()|
|javax.swing.plaf.metal.MetalLookAndFeel.getDesktopColor()|
|javax.swing.plaf.metal.MetalLookAndFeel.getDisabledIcon(JComponent,Icon)|Retur
|javax.swing.plaf.metal.MetalLookAndFeel.getDisabledSelectedIcon(JComponent,Icon)|
|javax.swing.plaf.metal.MetalLookAndFeel.getFocusColor()|
|javax.swing.plaf.metal.MetalLookAndFeel.getHighlightedTextColor()|
|javax.swing.plaf.metal.MetalLookAndFeel.getID()|
|javax.swing.plaf.metal.MetalLookAndFeel.getInactiveControlTextColor()|
|javax.swing.plaf.metal.MetalLookAndFeel.getInactiveSystemTextColor()|
|javax.swing.plaf.metal.MetalLookAndFeel.getMenuBackground()|
|javax.swing.plaf.metal.MetalLookAndFeel.getMenuDisabledForeground()|
|javax.swing.plaf.metal.MetalLookAndFeel.getMenuForeground()|
|javax.swing.plaf.metal.MetalLookAndFeel.getMenuSelectedBackground()|
|javax.swing.plaf.metal.MetalLookAndFeel.getMenuSelectedForeground()|
|javax.swing.plaf.metal.MetalLookAndFeel.getMenuTextFont()|
|javax.swing.plaf.metal.MetalLookAndFeel.getName()|
|javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControl()|
|javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlDarkShadow()|
|javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlHighlight()|
|javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlInfo()|
|javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlShadow()|
|javax.swing.plaf.metal.MetalLookAndFeel.getSeparatorBackground()|
|javax.swing.plaf.metal.MetalLookAndFeel.getSeparatorForeground()|
|javax.swing.plaf.metal.MetalLookAndFeel.getSubTextFont()|
|javax.swing.plaf.metal.MetalLookAndFeel.getSupportsWindowDecorations()|Returns
|javax.swing.plaf.metal.MetalLookAndFeel.getSystemTextColor()|
|javax.swing.plaf.metal.MetalLookAndFeel.getSystemTextFont()|
|javax.swing.plaf.metal.MetalLookAndFeel.getTextHighlightColor()|
|javax.swing.plaf.metal.MetalLookAndFeel.getUserTextColor()|
|javax.swing.plaf.metal.MetalLookAndFeel.getUserTextFont()|
|javax.swing.plaf.metal.MetalLookAndFeel.getWhite()|
|javax.swing.plaf.metal.MetalLookAndFeel.getWindowBackground()|
|javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleBackground()|
|javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleFont()|
|javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleForeground()|
|javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleInactiveBackground()|
|javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleInactiveForeground()|
|javax.swing.plaf.metal.MetalLookAndFeel.initClassDefaults(UIDefaults)|Creates 
|javax.swing.plaf.metal.MetalLookAndFeel.initComponentDefaults(UIDefaults)|
|javax.swing.plaf.metal.MetalLookAndFeel.initSystemColorDefaults(UIDefaults)|Lo
|javax.swing.plaf.metal.MetalLookAndFeel.isNativeLookAndFeel()|
|javax.swing.plaf.metal.MetalLookAndFeel.isSupportedLookAndFeel()|
|javax.swing.plaf.metal.MetalLookAndFeel.provideErrorFeedback(Component)|Invoke
|javax.swing.plaf.metal.MetalLookAndFeel.setCurrentTheme(MetalTheme)|Set the th

*javax.swing.plaf.metal.MetalLookAndFeel_Description*

Implements the Java look and feel (codename: Metal). 

By default metal uses bold fonts for many controls. To make all controls (with 
the exception of the internal frame title bars and client decorated frame title 
bars) use plain fonts you can do either of the following: 

Set the system property swing.boldMetal to false. For example, 
java-Dswing.boldMetal=falseMyApp. Set the defaults property swing.boldMetal to 
Boolean.FALSE. For example: UIManager.put("swing.boldMetal",Boolean.FALSE); 

The defaults property swing.boldMetal, if set, takes precendence over the 
system property of the same name. After setting this defaults property you need 
to re-install the MetalLookAndFeel, as well as update the UI of any previously 
created widgets. Otherwise the results are undefined. These lines of code show 
you how to accomplish this: 

// turn off bold fonts UIManager.put("swing.boldMetal", Boolean.FALSE); 

// re-install the Metal Look and Feel UIManager.setLookAndFeel(new 
MetalLookAndFeel()); 

// only needed to update existing widgets 
SwingUtilities.updateComponentTreeUI(rootComponent); 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.plaf.metal.MetalLookAndFeel()*

public MetalLookAndFeel()




*javax.swing.plaf.metal.MetalLookAndFeel.createDefaultTheme()*

protected void createDefaultTheme()




*javax.swing.plaf.metal.MetalLookAndFeel.getAcceleratorForeground()*

public static |javax.swing.plaf.ColorUIResource| getAcceleratorForeground()




*javax.swing.plaf.metal.MetalLookAndFeel.getAcceleratorSelectedForeground()*

public static |javax.swing.plaf.ColorUIResource| getAcceleratorSelectedForeground()




*javax.swing.plaf.metal.MetalLookAndFeel.getBlack()*

public static |javax.swing.plaf.ColorUIResource| getBlack()




*javax.swing.plaf.metal.MetalLookAndFeel.getControl()*

public static |javax.swing.plaf.ColorUIResource| getControl()




*javax.swing.plaf.metal.MetalLookAndFeel.getControlDarkShadow()*

public static |javax.swing.plaf.ColorUIResource| getControlDarkShadow()




*javax.swing.plaf.metal.MetalLookAndFeel.getControlDisabled()*

public static |javax.swing.plaf.ColorUIResource| getControlDisabled()




*javax.swing.plaf.metal.MetalLookAndFeel.getControlHighlight()*

public static |javax.swing.plaf.ColorUIResource| getControlHighlight()




*javax.swing.plaf.metal.MetalLookAndFeel.getControlInfo()*

public static |javax.swing.plaf.ColorUIResource| getControlInfo()




*javax.swing.plaf.metal.MetalLookAndFeel.getControlShadow()*

public static |javax.swing.plaf.ColorUIResource| getControlShadow()




*javax.swing.plaf.metal.MetalLookAndFeel.getControlTextColor()*

public static |javax.swing.plaf.ColorUIResource| getControlTextColor()




*javax.swing.plaf.metal.MetalLookAndFeel.getControlTextFont()*

public static |javax.swing.plaf.FontUIResource| getControlTextFont()




*javax.swing.plaf.metal.MetalLookAndFeel.getCurrentTheme()*

public static |javax.swing.plaf.metal.MetalTheme| getCurrentTheme()

Return the theme currently being used by MetalLookAndFeel. This will always be 
non-null, as it will set the current theme if one hasn't been set already. 


    Returns: the current theme 
*javax.swing.plaf.metal.MetalLookAndFeel.getDefaults()*

public |javax.swing.UIDefaults| getDefaults()




*javax.swing.plaf.metal.MetalLookAndFeel.getDescription()*

public |java.lang.String| getDescription()




*javax.swing.plaf.metal.MetalLookAndFeel.getDesktopColor()*

public static |javax.swing.plaf.ColorUIResource| getDesktopColor()




*javax.swing.plaf.metal.MetalLookAndFeel.getDisabledIcon(JComponent,Icon)*

public |javax.swing.Icon| getDisabledIcon(
  javax.swing.JComponent component,
  javax.swing.Icon icon)

Returns an Icon with a disabled appearance. This method is used to generate a 
disabled Icon when one has not been specified. For example, if you create a 
JButton and only specify an Icon via setIcon this method will be called to 
generate the disabled Icon. If null is passed as icon this method returns null. 

Some look and feels might not render the disabled Icon, in which case they will 
ignore this. 

    component - JComponent that will display the Icon, may be null 
    icon - Icon to generate disable icon from. 

    Returns: Disabled icon, or null if a suitable Icon can not be generated. 
*javax.swing.plaf.metal.MetalLookAndFeel.getDisabledSelectedIcon(JComponent,Icon)*

public |javax.swing.Icon| getDisabledSelectedIcon(
  javax.swing.JComponent component,
  javax.swing.Icon icon)

Returns an Icon for use by disabled components that are also selected. This 
method is used to generate an Icon for components that are in both the disabled 
and selected states but do not have a specific Icon for this state. For 
example, if you create a JButton and only specify an Icon via setIcon this 
method will be called to generate the disabled and selected Icon. If null is 
passed as icon this method returns null. 

Some look and feels might not render the disabled and selected Icon, in which 
case they will ignore this. 

    component - JComponent that will display the Icon, may be null 
    icon - Icon to generate disabled and selected icon from. 

    Returns: Disabled and Selected icon, or null if a suitable Icon can not be generated. 
*javax.swing.plaf.metal.MetalLookAndFeel.getFocusColor()*

public static |javax.swing.plaf.ColorUIResource| getFocusColor()




*javax.swing.plaf.metal.MetalLookAndFeel.getHighlightedTextColor()*

public static |javax.swing.plaf.ColorUIResource| getHighlightedTextColor()




*javax.swing.plaf.metal.MetalLookAndFeel.getID()*

public |java.lang.String| getID()




*javax.swing.plaf.metal.MetalLookAndFeel.getInactiveControlTextColor()*

public static |javax.swing.plaf.ColorUIResource| getInactiveControlTextColor()




*javax.swing.plaf.metal.MetalLookAndFeel.getInactiveSystemTextColor()*

public static |javax.swing.plaf.ColorUIResource| getInactiveSystemTextColor()




*javax.swing.plaf.metal.MetalLookAndFeel.getMenuBackground()*

public static |javax.swing.plaf.ColorUIResource| getMenuBackground()




*javax.swing.plaf.metal.MetalLookAndFeel.getMenuDisabledForeground()*

public static |javax.swing.plaf.ColorUIResource| getMenuDisabledForeground()




*javax.swing.plaf.metal.MetalLookAndFeel.getMenuForeground()*

public static |javax.swing.plaf.ColorUIResource| getMenuForeground()




*javax.swing.plaf.metal.MetalLookAndFeel.getMenuSelectedBackground()*

public static |javax.swing.plaf.ColorUIResource| getMenuSelectedBackground()




*javax.swing.plaf.metal.MetalLookAndFeel.getMenuSelectedForeground()*

public static |javax.swing.plaf.ColorUIResource| getMenuSelectedForeground()




*javax.swing.plaf.metal.MetalLookAndFeel.getMenuTextFont()*

public static |javax.swing.plaf.FontUIResource| getMenuTextFont()




*javax.swing.plaf.metal.MetalLookAndFeel.getName()*

public |java.lang.String| getName()




*javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControl()*

public static |javax.swing.plaf.ColorUIResource| getPrimaryControl()




*javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlDarkShadow()*

public static |javax.swing.plaf.ColorUIResource| getPrimaryControlDarkShadow()




*javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlHighlight()*

public static |javax.swing.plaf.ColorUIResource| getPrimaryControlHighlight()




*javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlInfo()*

public static |javax.swing.plaf.ColorUIResource| getPrimaryControlInfo()




*javax.swing.plaf.metal.MetalLookAndFeel.getPrimaryControlShadow()*

public static |javax.swing.plaf.ColorUIResource| getPrimaryControlShadow()




*javax.swing.plaf.metal.MetalLookAndFeel.getSeparatorBackground()*

public static |javax.swing.plaf.ColorUIResource| getSeparatorBackground()




*javax.swing.plaf.metal.MetalLookAndFeel.getSeparatorForeground()*

public static |javax.swing.plaf.ColorUIResource| getSeparatorForeground()




*javax.swing.plaf.metal.MetalLookAndFeel.getSubTextFont()*

public static |javax.swing.plaf.FontUIResource| getSubTextFont()




*javax.swing.plaf.metal.MetalLookAndFeel.getSupportsWindowDecorations()*

public boolean getSupportsWindowDecorations()

Returns true if the LookAndFeel returned RootPaneUI instances support providing 
Window decorations in a JRootPane. 

This implementation returns true, since it does support providing these border 
and window title pane decorations. 


    Returns: True if the RootPaneUI instances created support client side decorations 
*javax.swing.plaf.metal.MetalLookAndFeel.getSystemTextColor()*

public static |javax.swing.plaf.ColorUIResource| getSystemTextColor()




*javax.swing.plaf.metal.MetalLookAndFeel.getSystemTextFont()*

public static |javax.swing.plaf.FontUIResource| getSystemTextFont()




*javax.swing.plaf.metal.MetalLookAndFeel.getTextHighlightColor()*

public static |javax.swing.plaf.ColorUIResource| getTextHighlightColor()




*javax.swing.plaf.metal.MetalLookAndFeel.getUserTextColor()*

public static |javax.swing.plaf.ColorUIResource| getUserTextColor()




*javax.swing.plaf.metal.MetalLookAndFeel.getUserTextFont()*

public static |javax.swing.plaf.FontUIResource| getUserTextFont()




*javax.swing.plaf.metal.MetalLookAndFeel.getWhite()*

public static |javax.swing.plaf.ColorUIResource| getWhite()




*javax.swing.plaf.metal.MetalLookAndFeel.getWindowBackground()*

public static |javax.swing.plaf.ColorUIResource| getWindowBackground()




*javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleBackground()*

public static |javax.swing.plaf.ColorUIResource| getWindowTitleBackground()




*javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleFont()*

public static |javax.swing.plaf.FontUIResource| getWindowTitleFont()




*javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleForeground()*

public static |javax.swing.plaf.ColorUIResource| getWindowTitleForeground()




*javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleInactiveBackground()*

public static |javax.swing.plaf.ColorUIResource| getWindowTitleInactiveBackground()




*javax.swing.plaf.metal.MetalLookAndFeel.getWindowTitleInactiveForeground()*

public static |javax.swing.plaf.ColorUIResource| getWindowTitleInactiveForeground()




*javax.swing.plaf.metal.MetalLookAndFeel.initClassDefaults(UIDefaults)*

protected void initClassDefaults(javax.swing.UIDefaults table)

Creates the mapping from UI class IDs to ComponentUI classes, putting the 
ID-ComponentUI pairs in the passed-in defaults table. Each JComponent class 
specifies its own UI class ID string. For example, JButton has the UI class ID 
"ButtonUI", which this method maps to "javax.swing.plaf.metal.MetalButtonUI". 


*javax.swing.plaf.metal.MetalLookAndFeel.initComponentDefaults(UIDefaults)*

protected void initComponentDefaults(javax.swing.UIDefaults table)




*javax.swing.plaf.metal.MetalLookAndFeel.initSystemColorDefaults(UIDefaults)*

protected void initSystemColorDefaults(javax.swing.UIDefaults table)

Load the SystemColors into the defaults table. The keys for SystemColor 
defaults are the same as the names of the public fields in SystemColor. 


*javax.swing.plaf.metal.MetalLookAndFeel.isNativeLookAndFeel()*

public boolean isNativeLookAndFeel()




*javax.swing.plaf.metal.MetalLookAndFeel.isSupportedLookAndFeel()*

public boolean isSupportedLookAndFeel()




*javax.swing.plaf.metal.MetalLookAndFeel.provideErrorFeedback(Component)*

public void provideErrorFeedback(java.awt.Component component)

Invoked when the user attempts an invalid operation, such as pasting into an 
uneditable JTextField that has focus. 

If the user has enabled visual error indication on the desktop, this method 
will flash the caption bar of the active window. The user can also set the 
property awt.visualbell=true to achieve the same results. 

    component - Component the error occured in, may be null indicating the error condition is 
       not directly associated with a Component. 

*javax.swing.plaf.metal.MetalLookAndFeel.setCurrentTheme(MetalTheme)*

public static void setCurrentTheme(javax.swing.plaf.metal.MetalTheme theme)

Set the theme to be used by MetalLookAndFeel. This may not be null. 

After setting the theme, you need to re-install the MetalLookAndFeel, as well 
as update the UI of any previously created widgets. Otherwise the results are 
undefined. These lines of code show you how to accomplish this: 

// turn off bold fonts MetalLookAndFeel.setCurrentTheme(theme); 

// re-install the Metal Look and Feel UIManager.setLookAndFeel(new 
MetalLookAndFeel()); 

// only needed to update existing widgets 
SwingUtilities.updateComponentTreeUI(rootComponent); 

    theme - the theme to be used, non-null 



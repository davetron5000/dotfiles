*javax.swing.DefaultButtonModel* *DefaultButtonModel* The default implementation of a Button component's data model.

public class DefaultButtonModel
  extends    |java.lang.Object|
  implements |javax.swing.ButtonModel|
             |java.io.Serializable|

|javax.swing.DefaultButtonModel_Description|
|javax.swing.DefaultButtonModel_Fields|
|javax.swing.DefaultButtonModel_Constructors|
|javax.swing.DefaultButtonModel_Methods|

====================================================================================================================================================================================

*javax.swing.DefaultButtonModel_Fields*
|java.lang.String_javax.swing.DefaultButtonModel.actionCommand|
|int_javax.swing.DefaultButtonModel.ARMED|
|javax.swing.event.ChangeEvent_javax.swing.DefaultButtonModel.changeEvent|
|int_javax.swing.DefaultButtonModel.ENABLED|
|javax.swing.ButtonGroup_javax.swing.DefaultButtonModel.group|
|javax.swing.event.EventListenerList_javax.swing.DefaultButtonModel.listenerList|
|int_javax.swing.DefaultButtonModel.mnemonic|
|int_javax.swing.DefaultButtonModel.PRESSED|
|int_javax.swing.DefaultButtonModel.ROLLOVER|
|int_javax.swing.DefaultButtonModel.SELECTED|
|int_javax.swing.DefaultButtonModel.stateMask|

*javax.swing.DefaultButtonModel_Constructors*
|javax.swing.DefaultButtonModel()|Constructs a default JButtonModel.

*javax.swing.DefaultButtonModel_Methods*
|javax.swing.DefaultButtonModel.addActionListener(ActionListener)|Adds an ActionListener to the button.
|javax.swing.DefaultButtonModel.addChangeListener(ChangeListener)|Adds a ChangeListener to the button.
|javax.swing.DefaultButtonModel.addItemListener(ItemListener)|Adds an ItemListener to the button.
|javax.swing.DefaultButtonModel.fireActionPerformed(ActionEvent)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.DefaultButtonModel.fireItemStateChanged(ItemEvent)|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.DefaultButtonModel.fireStateChanged()|Notifies all listeners that have registered interest for  notification on this event type.
|javax.swing.DefaultButtonModel.getActionCommand()|Returns the action command for this button.
|javax.swing.DefaultButtonModel.getActionListeners()|Returns an array of all the action listeners  registered on this DefaultButtonModel.
|javax.swing.DefaultButtonModel.getChangeListeners()|Returns an array of all the change listeners  registered on this DefaultButtonModel.
|javax.swing.DefaultButtonModel.getGroup()|Returns the group that this button belongs to.
|javax.swing.DefaultButtonModel.getItemListeners()|Returns an array of all the item listeners  registered on this DefaultButtonModel.
|javax.swing.DefaultButtonModel.getListeners(Class<T>)|Returns an array of all the objects currently registered as  FooListeners  upon this model.
|javax.swing.DefaultButtonModel.getMnemonic()|Gets the keyboard mnemonic for this model
|javax.swing.DefaultButtonModel.getSelectedObjects()|Overridden to return null.
|javax.swing.DefaultButtonModel.isArmed()|Indicates partial commitment towards pressing the  button.
|javax.swing.DefaultButtonModel.isEnabled()|Indicates whether the button can be selected or pressed by  an input device (such as a mouse pointer).
|javax.swing.DefaultButtonModel.isPressed()|Indicates whether button has been pressed.
|javax.swing.DefaultButtonModel.isRollover()|Indicates that the mouse is over the button.
|javax.swing.DefaultButtonModel.isSelected()|Indicates if the button has been selected.
|javax.swing.DefaultButtonModel.removeActionListener(ActionListener)|Removes an ActionListener from the button.
|javax.swing.DefaultButtonModel.removeChangeListener(ChangeListener)|Removes a ChangeListener from the button.
|javax.swing.DefaultButtonModel.removeItemListener(ItemListener)|Removes an ItemListener from the button.
|javax.swing.DefaultButtonModel.setActionCommand(String)|Sets the actionCommand string that gets sent as  part of the event when the button is pressed.
|javax.swing.DefaultButtonModel.setArmed(boolean)|Marks the button as "armed".
|javax.swing.DefaultButtonModel.setEnabled(boolean)|Enables or disables the button.
|javax.swing.DefaultButtonModel.setGroup(ButtonGroup)|Identifies the group this button belongs to --  needed for radio buttons, which are mutually  exclusive within their group.
|javax.swing.DefaultButtonModel.setMnemonic(int)|Sets the keyboard mnemonic (shortcut key or  accelerator key) for this button.
|javax.swing.DefaultButtonModel.setPressed(boolean)|Sets the button to pressed or unpressed.
|javax.swing.DefaultButtonModel.setRollover(boolean)|Sets or clears the button's rollover state
|javax.swing.DefaultButtonModel.setSelected(boolean)|Selects or deselects the button.

*javax.swing.DefaultButtonModel_Description*

The default implementation of a Button component's data model. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*java.lang.String_javax.swing.DefaultButtonModel.actionCommand*




*int_javax.swing.DefaultButtonModel.ARMED*

Indicates partial commitment towards choosing the button. 


*javax.swing.event.ChangeEvent_javax.swing.DefaultButtonModel.changeEvent*

Only one ChangeEvent is needed per button model instance since the event's only state is the source property. The source of events generated is always "this". 


*int_javax.swing.DefaultButtonModel.ENABLED*

Indicates that the button can be selected by an input device (such as a mouse pointer). 


*javax.swing.ButtonGroup_javax.swing.DefaultButtonModel.group*




*javax.swing.event.EventListenerList_javax.swing.DefaultButtonModel.listenerList*




*int_javax.swing.DefaultButtonModel.mnemonic*




*int_javax.swing.DefaultButtonModel.PRESSED*

Indicates that the button has been "pressed" (typically, when the mouse is released). 


*int_javax.swing.DefaultButtonModel.ROLLOVER*

Indicates that the mouse is over the button. 


*int_javax.swing.DefaultButtonModel.SELECTED*

Indicates that the button has been selected. Only needed for certain types of buttons - such as RadioButton or Checkbox. 


*int_javax.swing.DefaultButtonModel.stateMask*





*javax.swing.DefaultButtonModel()*

public DefaultButtonModel()

Constructs a default JButtonModel. 


*javax.swing.DefaultButtonModel.addActionListener(ActionListener)*

public void addActionListener(java.awt.event.ActionListener l)

Adds an ActionListener to the button. 


    l - the listener to add 

*javax.swing.DefaultButtonModel.addChangeListener(ChangeListener)*

public void addChangeListener(javax.swing.event.ChangeListener l)

Adds a ChangeListener to the button. 


    l - the listener to add 

*javax.swing.DefaultButtonModel.addItemListener(ItemListener)*

public void addItemListener(java.awt.event.ItemListener l)

Adds an ItemListener to the button. 


    l - the listener to add 

*javax.swing.DefaultButtonModel.fireActionPerformed(ActionEvent)*

protected void fireActionPerformed(java.awt.event.ActionEvent e)

Notifies all listeners that have registered interest for notification on this event type. 


    e - the ActionEvent to deliver to listeners 

*javax.swing.DefaultButtonModel.fireItemStateChanged(ItemEvent)*

protected void fireItemStateChanged(java.awt.event.ItemEvent e)

Notifies all listeners that have registered interest for notification on this event type. 


    e - the ItemEvent to deliver to listeners 

*javax.swing.DefaultButtonModel.fireStateChanged()*

protected void fireStateChanged()

Notifies all listeners that have registered interest for notification on this event type. The event instance is created lazily. 



*javax.swing.DefaultButtonModel.getActionCommand()*

public |java.lang.String| getActionCommand()

Returns the action command for this button. 



    Returns: the String that identifies the generated event 

*javax.swing.DefaultButtonModel.getActionListeners()*

public |java.awt.event.ActionListener|[] getActionListeners()

Returns an array of all the action listeners registered on this DefaultButtonModel. 



    Returns: all of this model's ActionListeners or an empty array if no action listeners are currently registered 

*javax.swing.DefaultButtonModel.getChangeListeners()*

public |javax.swing.event.ChangeListener|[] getChangeListeners()

Returns an array of all the change listeners registered on this DefaultButtonModel. 



    Returns: all of this model's ChangeListeners or an empty array if no change listeners are currently registered 

*javax.swing.DefaultButtonModel.getGroup()*

public |javax.swing.ButtonGroup| getGroup()

Returns the group that this button belongs to. Normally used with radio buttons, which are mutually exclusive within their group. 



    Returns: a ButtonGroup that this button belongs to 

*javax.swing.DefaultButtonModel.getItemListeners()*

public |java.awt.event.ItemListener|[] getItemListeners()

Returns an array of all the item listeners registered on this DefaultButtonModel. 



    Returns: all of this model's ItemListeners or an empty array if no item listeners are currently registered 

*javax.swing.DefaultButtonModel.getListeners(Class<T>)*

public |T|[] getListeners(java.lang.Class<T> listenerType)

Returns an array of all the objects currently registered as FooListeners upon this model. FooListeners are registered using the addFooListener method. 

You can specify the listenerType argument with a class literal, such as FooListener.class. For example, you can query a DefaultButtonModel instance m for its action listeners with 
the following code: 

ActionListener[] als = (ActionListener[])(m.getListeners(ActionListener.class)); 

If no such listeners exist, this method returns an empty array. 


    listenerType - the type of listeners requested; this parameter should specify an interface that descends from java.util.EventListener 

    Returns: an array of all objects registered as FooListeners on this model, or an empty array if no such listeners have been added 

*javax.swing.DefaultButtonModel.getMnemonic()*

public int getMnemonic()

Gets the keyboard mnemonic for this model 



    Returns: an int specifying the accelerator key 

*javax.swing.DefaultButtonModel.getSelectedObjects()*

public |java.lang.Object|[] getSelectedObjects()

Overridden to return null. 



*javax.swing.DefaultButtonModel.isArmed()*

public boolean isArmed()

Indicates partial commitment towards pressing the button. 



    Returns: true if the button is armed, and ready to be pressed 

*javax.swing.DefaultButtonModel.isEnabled()*

public boolean isEnabled()

Indicates whether the button can be selected or pressed by an input device (such as a mouse pointer). (Checkbox-buttons are selected, regular buttons are "pressed".) 



    Returns: true if the button is enabled, and therefore selectable (or pressable) 

*javax.swing.DefaultButtonModel.isPressed()*

public boolean isPressed()

Indicates whether button has been pressed. 



    Returns: true if the button has been pressed 

*javax.swing.DefaultButtonModel.isRollover()*

public boolean isRollover()

Indicates that the mouse is over the button. 



    Returns: true if the mouse is over the button 

*javax.swing.DefaultButtonModel.isSelected()*

public boolean isSelected()

Indicates if the button has been selected. Only needed for certain types of buttons - such as RadioButton or Checkbox. 



    Returns: true if the button is selected 

*javax.swing.DefaultButtonModel.removeActionListener(ActionListener)*

public void removeActionListener(java.awt.event.ActionListener l)

Removes an ActionListener from the button. 


    l - the listener to remove 

*javax.swing.DefaultButtonModel.removeChangeListener(ChangeListener)*

public void removeChangeListener(javax.swing.event.ChangeListener l)

Removes a ChangeListener from the button. 


    l - the listener to remove 

*javax.swing.DefaultButtonModel.removeItemListener(ItemListener)*

public void removeItemListener(java.awt.event.ItemListener l)

Removes an ItemListener from the button. 


    l - the listener to remove 

*javax.swing.DefaultButtonModel.setActionCommand(String)*

public void setActionCommand(java.lang.String actionCommand)

Sets the actionCommand string that gets sent as part of the event when the button is pressed. 


    actionCommand - the String that identifies the generated event 

*javax.swing.DefaultButtonModel.setArmed(boolean)*

public void setArmed(boolean b)

Marks the button as "armed". If the mouse button is released while it is over this item, the button's action event fires. If the mouse button is released elsewhere, the event does 
not fire and the button is disarmed. 


    b - true to arm the button so it can be selected 

*javax.swing.DefaultButtonModel.setEnabled(boolean)*

public void setEnabled(boolean b)

Enables or disables the button. 


    b - true to enable the button 

*javax.swing.DefaultButtonModel.setGroup(ButtonGroup)*

public void setGroup(javax.swing.ButtonGroup group)

Identifies the group this button belongs to -- needed for radio buttons, which are mutually exclusive within their group. 


    group - the ButtonGroup this button belongs to 

*javax.swing.DefaultButtonModel.setMnemonic(int)*

public void setMnemonic(int key)

Sets the keyboard mnemonic (shortcut key or accelerator key) for this button. 


    key - an int specifying the accelerator key 

*javax.swing.DefaultButtonModel.setPressed(boolean)*

public void setPressed(boolean b)

Sets the button to pressed or unpressed. 


    b - true to set the button to "pressed" 

*javax.swing.DefaultButtonModel.setRollover(boolean)*

public void setRollover(boolean b)

Sets or clears the button's rollover state 


    b - true to turn on rollover 

*javax.swing.DefaultButtonModel.setSelected(boolean)*

public void setSelected(boolean b)

Selects or deselects the button. 


    b - true selects the button, false deselects the button 



*java.text.ChoiceFormat* *ChoiceFormat* A ChoiceFormat allows you to attach a fo

public class ChoiceFormat
  extends    |java.text.NumberFormat|

|java.text.ChoiceFormat_Description|
|java.text.ChoiceFormat_Fields|
|java.text.ChoiceFormat_Constructors|
|java.text.ChoiceFormat_Methods|

================================================================================

*java.text.ChoiceFormat_Constructors*
|java.text.ChoiceFormat(double[],String[])|Constructs with the limits and the c
|java.text.ChoiceFormat(String)|Constructs with limits and corresponding format

*java.text.ChoiceFormat_Methods*
|java.text.ChoiceFormat.applyPattern(String)|Sets the pattern.
|java.text.ChoiceFormat.clone()|Overrides Cloneable
|java.text.ChoiceFormat.equals(Object)|Equality comparision between two
|java.text.ChoiceFormat.format(double,StringBuffer,FieldPosition)|Returns patte
|java.text.ChoiceFormat.format(long,StringBuffer,FieldPosition)|Specialization 
|java.text.ChoiceFormat.getFormats()|Get the formats passed in the constructor.
|java.text.ChoiceFormat.getLimits()|Get the limits passed in the constructor.
|java.text.ChoiceFormat.hashCode()|Generates a hash code for the message format
|java.text.ChoiceFormat.nextDouble(double)|Finds the least double greater than 
|java.text.ChoiceFormat.nextDouble(double,boolean)|Finds the least double great
|java.text.ChoiceFormat.parse(String,ParsePosition)|Parses a Number from the in
|java.text.ChoiceFormat.previousDouble(double)|Finds the greatest double less t
|java.text.ChoiceFormat.setChoices(double[],String[])|Set the choices to be use
|java.text.ChoiceFormat.toPattern()|Gets the pattern.

*java.text.ChoiceFormat_Description*

A ChoiceFormat allows you to attach a format to a range of numbers. It is 
generally used in a MessageFormat for handling plurals. The choice is specified 
with an ascending list of doubles, where each item specifies a half-open 
interval up to the next item: 



X matches j if and only if limit[j] <= X < limit[j+1] 

If there is no match, then either the first or last index is used, depending on 
whether the number (X) is too low or too high. If the limit array is not in 
ascending order, the results of formatting will be incorrect. ChoiceFormat also 
accepts u221E as equivalent to infinity(INF). 

Note: ChoiceFormat differs from the other Format classes in that you create a 
ChoiceFormat object with a constructor (not with a getInstance style factory 
method). The factory methods aren't necessary because ChoiceFormat doesn't 
require any complex setup for a given locale. In fact, ChoiceFormat doesn't 
implement any locale specific behavior. 

When creating a ChoiceFormat, you must specify an array of formats and an array 
of limits. The length of these arrays must be the same. For example, 

limits = {1,2,3,4,5,6,7} formats = {"Sun","Mon","Tue","Wed","Thur","Fri","Sat"} 

limits = {0, 1, ChoiceFormat.nextDouble(1)} formats = {"no files", "one file", 
"many files"} (nextDouble can be used to get the next higher double, to make 
the half-open interval.) 

Here is a simple example that shows formatting and parsing: 



double[] limits = {1,2,3,4,5,6,7}; String[] monthNames = 
{"Sun","Mon","Tue","Wed","Thur","Fri","Sat"}; ChoiceFormat form = new 
ChoiceFormat(limits, monthNames); ParsePosition status = new ParsePosition(0); 
for (double i = 0.0; i <= 8.0; ++i) { status.setIndex(0); System.out.println(i 
+ " -> " + form.format(i) + " -> " + form.parse(form.format(i),status)); } 

Here is a more complex example, with a pattern format: 



double[] filelimits = {0,1,2}; String[] filepart = {"are no files","is one 
file","are {2} files"}; ChoiceFormat fileform = new ChoiceFormat(filelimits, 
filepart); Format[] testFormats = {fileform, null, NumberFormat.getInstance()}; 
MessageFormat pattform = new MessageFormat("There {0} on {1}"); 
pattform.setFormats(testFormats); Object[] testArgs = {null, "ADisk", null}; 
for (int i = 0; i < 4; ++i) { testArgs[0] = new Integer(i); testArgs[2] = 
testArgs[0]; System.out.println(pattform.format(testArgs)); } 



Specifying a pattern for ChoiceFormat objects is fairly straightforward. For 
example: 



ChoiceFormat fmt = new ChoiceFormat( "-1#is negative| 0#is zero or fraction | 
1#is one |1.0<is 1+ |2#is two |2<is more than 2."); 
System.out.println("Formatter Pattern : " + fmt.toPattern()); 

System.out.println("Format with -INF : " + 
fmt.format(Double.NEGATIVE_INFINITY)); System.out.println("Format with -1.0 : " 
+ fmt.format(-1.0)); System.out.println("Format with 0 : " + fmt.format(0)); 
System.out.println("Format with 0.9 : " + fmt.format(0.9)); 
System.out.println("Format with 1.0 : " + fmt.format(1)); 
System.out.println("Format with 1.5 : " + fmt.format(1.5)); 
System.out.println("Format with 2 : " + fmt.format(2)); 
System.out.println("Format with 2.1 : " + fmt.format(2.1)); 
System.out.println("Format with NaN : " + fmt.format(Double.NaN)); 
System.out.println("Format with +INF : " + 
fmt.format(Double.POSITIVE_INFINITY)); 

And the output result would be like the following: 

Format with -INF : is negative Format with -1.0 : is negative Format with 0 : 
is zero or fraction Format with 0.9 : is zero or fraction Format with 1.0 : is 
one Format with 1.5 : is 1+ Format with 2 : is two Format with 2.1 : is more 
than 2. Format with NaN : is negative Format with +INF : is more than 2. 



Synchronization 

Choice formats are not synchronized. It is recommended to create separate 
format instances for each thread. If multiple threads access a format 
concurrently, it must be synchronized externally. 


*java.text.ChoiceFormat(double[],String[])*

public ChoiceFormat(
  double[] limits,
  java.lang.String[] formats)

Constructs with the limits and the corresponding formats. 


*java.text.ChoiceFormat(String)*

public ChoiceFormat(java.lang.String newPattern)

Constructs with limits and corresponding formats based on the pattern. 


*java.text.ChoiceFormat.applyPattern(String)*

public void applyPattern(java.lang.String newPattern)

Sets the pattern. 

    newPattern - See the class description. 

*java.text.ChoiceFormat.clone()*

public |java.lang.Object| clone()

Overrides Cloneable 


*java.text.ChoiceFormat.equals(Object)*

public boolean equals(java.lang.Object obj)

Equality comparision between two 


*java.text.ChoiceFormat.format(double,StringBuffer,FieldPosition)*

public |java.lang.StringBuffer| format(
  double number,
  java.lang.StringBuffer toAppendTo,
  java.text.FieldPosition status)

Returns pattern with formatted double. 

    number - number to be formatted & substituted. 
    toAppendTo - where text is appended. 
    status - ignore no useful status is returned. 

*java.text.ChoiceFormat.format(long,StringBuffer,FieldPosition)*

public |java.lang.StringBuffer| format(
  long number,
  java.lang.StringBuffer toAppendTo,
  java.text.FieldPosition status)

Specialization of format. This method really calls format(double, StringBuffer, 
FieldPosition) thus the range of longs that are supported is only equal to the 
range that can be stored by double. This will never be a practical limitation. 


*java.text.ChoiceFormat.getFormats()*

public |java.lang.Object| getFormats()

Get the formats passed in the constructor. 


    Returns: 
*java.text.ChoiceFormat.getLimits()*

public double getLimits()

Get the limits passed in the constructor. 


    Returns: 
*java.text.ChoiceFormat.hashCode()*

public int hashCode()

Generates a hash code for the message format object. 


*java.text.ChoiceFormat.nextDouble(double)*

public static final double nextDouble(double d)

Finds the least double greater than d. If NaN, returns same value. Used to make 
half-open intervals. 


*java.text.ChoiceFormat.nextDouble(double,boolean)*

public static double nextDouble(
  double d,
  boolean positive)

Finds the least double greater than d (if positive == true), or the greatest 
double less than d (if positive == false). If NaN, returns same value. 

Does not affect floating-point flags, provided these member functions do not: 
Double.longBitsToDouble(long) Double.doubleToLongBits(double) 
Double.isNaN(double) 


*java.text.ChoiceFormat.parse(String,ParsePosition)*

public |java.lang.Number| parse(
  java.lang.String text,
  java.text.ParsePosition status)

Parses a Number from the input text. 

    text - the source text. 
    status - an input-output parameter. On input, the status.index field indicates the first 
       character of the source text that should be parsed. On exit, if no error 
       occured, status.index is set to the first unparsed character in the 
       source text. On exit, if an error did occur, status.index is unchanged 
       and status.errorIndex is set to the first index of the character that 
       caused the parse to fail. 

    Returns: A Number representing the value of the number parsed. 
*java.text.ChoiceFormat.previousDouble(double)*

public static final double previousDouble(double d)

Finds the greatest double less than d. If NaN, returns same value. 


*java.text.ChoiceFormat.setChoices(double[],String[])*

public void setChoices(
  double[] limits,
  java.lang.String[] formats)

Set the choices to be used in formatting. 

    limits - contains the top value that you want parsed with that format,and should be in 
       ascending sorted order. When formatting X, the choice will be the i, 
       where limit[i] <= X < limit[i+1]. If the limit array is not in ascending 
       order, the results of formatting will be incorrect. 
    formats - are the formats you want to use for each limit. They can be either Format 
       objects or Strings. When formatting with object Y, if the object is a 
       NumberFormat, then ((NumberFormat) Y).format(X) is called. Otherwise 
       Y.toString() is called. 

*java.text.ChoiceFormat.toPattern()*

public |java.lang.String| toPattern()

Gets the pattern. 




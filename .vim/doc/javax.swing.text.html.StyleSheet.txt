*javax.swing.text.html.StyleSheet* *StyleSheet* Support for defining the visual characteristics of
 HTML views being rendered.

public class StyleSheet
  extends    |javax.swing.text.StyleContext|

|javax.swing.text.html.StyleSheet_Description|
|javax.swing.text.html.StyleSheet_Fields|
|javax.swing.text.html.StyleSheet_Constructors|
|javax.swing.text.html.StyleSheet_Methods|

====================================================================================================================================================================================

*javax.swing.text.html.StyleSheet_Constructors*
|javax.swing.text.html.StyleSheet()|Construct a StyleSheet

*javax.swing.text.html.StyleSheet_Methods*
|javax.swing.text.html.StyleSheet.addAttribute(AttributeSet,Object,Object)|Adds an attribute to the given set, and returns  the new representative set.
|javax.swing.text.html.StyleSheet.addAttributes(AttributeSet,AttributeSet)|Adds a set of attributes to the element.
|javax.swing.text.html.StyleSheet.addCSSAttribute(MutableAttributeSet,CSS.Attribute,String)|Adds a CSS attribute to the given set.
|javax.swing.text.html.StyleSheet.addCSSAttributeFromHTML(MutableAttributeSet,CSS.Attribute,String)|Adds a CSS attribute to the given set.
|javax.swing.text.html.StyleSheet.addRule(String)|Adds a set of rules to the sheet.
|javax.swing.text.html.StyleSheet.addStyleSheet(StyleSheet)|Adds the rules from the StyleSheet ss to those of  the receiver.
|javax.swing.text.html.StyleSheet.createLargeAttributeSet(AttributeSet)|Creates a large set of attributes that should trade off  space for time.
|javax.swing.text.html.StyleSheet.createSmallAttributeSet(AttributeSet)|Creates a compact set of attributes that might be shared.
|javax.swing.text.html.StyleSheet.getBackground(AttributeSet)|Takes a set of attributes and turn it into a background color  specification.
|javax.swing.text.html.StyleSheet.getBase()|Returns the base.
|javax.swing.text.html.StyleSheet.getBoxPainter(AttributeSet)|Fetches the box formatter to use for the given set  of CSS attributes.
|javax.swing.text.html.StyleSheet.getDeclaration(String)|Translates a CSS declaration to an AttributeSet that represents  the CSS declaration.
|javax.swing.text.html.StyleSheet.getFont(AttributeSet)|Fetches the font to use for the given set of attributes.
|javax.swing.text.html.StyleSheet.getForeground(AttributeSet)|Takes a set of attributes and turn it into a foreground color  specification.
|javax.swing.text.html.StyleSheet.getIndexOfSize(float)|
|javax.swing.text.html.StyleSheet.getListPainter(AttributeSet)|Fetches the list formatter to use for the given set  of CSS attributes.
|javax.swing.text.html.StyleSheet.getPointSize(int)|Returns the point size, given a size index.
|javax.swing.text.html.StyleSheet.getPointSize(String)|Given a string such as "+2", "-2", or "2",   returns a point size value.
|javax.swing.text.html.StyleSheet.getRule(HTML.Tag,Element)|Fetches the style to use to render the given type  of HTML tag.
|javax.swing.text.html.StyleSheet.getRule(String)|Fetches the rule that best matches the selector given  in string form.
|javax.swing.text.html.StyleSheet.getStyleSheets()|Returns an array of the linked StyleSheets.
|javax.swing.text.html.StyleSheet.getViewAttributes(View)|Fetches a set of attributes to use in the view for  displaying.
|javax.swing.text.html.StyleSheet.importStyleSheet(URL)|Imports a style sheet from url.
|javax.swing.text.html.StyleSheet.loadRules(Reader,URL)|Loads a set of rules that have been specified in terms of  CSS1 grammar.
|javax.swing.text.html.StyleSheet.removeAttribute(AttributeSet,Object)|Removes an attribute from the set.
|javax.swing.text.html.StyleSheet.removeAttributes(AttributeSet,AttributeSet)|Removes a set of attributes.
|javax.swing.text.html.StyleSheet.removeAttributes(AttributeSet,Enumeration<?>)|Removes a set of attributes for the element.
|javax.swing.text.html.StyleSheet.removeStyle(String)|Removes a named style previously added to the document.
|javax.swing.text.html.StyleSheet.removeStyleSheet(StyleSheet)|Removes the StyleSheet ss from those of the receiver.
|javax.swing.text.html.StyleSheet.setBase(URL)|Sets the base.
|javax.swing.text.html.StyleSheet.setBaseFontSize(int)|Sets the base font size, with valid values between 1 and 7.
|javax.swing.text.html.StyleSheet.setBaseFontSize(String)|Sets the base font size from the passed in String.
|javax.swing.text.html.StyleSheet.stringToColor(String)|Converts a color string such as "RED" or "#NNNNNN" to a Color.
|javax.swing.text.html.StyleSheet.translateHTMLToCSS(AttributeSet)|Converts a set of HTML attributes to an equivalent  set of CSS attributes.

*javax.swing.text.html.StyleSheet_Description*

Support for defining the visual characteristics of HTML views being rendered. The StyleSheet is used to translate the HTML model into visual characteristics. This enables views to 
be customized by a look-and-feel, multiple views over the same model can be rendered differently, etc. This can be thought of as a CSS rule repository. The key for CSS attributes 
is an object of type CSS.Attribute. The type of the value is up to the StyleSheet implementation, but the toString method is required to return a string representation of CSS 
value. 

The primary entry point for HTML View implementations to get their attributes is the getViewAttributes method. This should be implemented to establish the desired policy used to 
associate attributes with the view. Each HTMLEditorKit (i.e. and therefore each associated JEditorPane) can have its own StyleSheet, but by default one sheet will be shared by all 
of the HTMLEditorKit instances. HTMLDocument instance can also have a StyleSheet, which holds the document-specific CSS specifications. 

In order for Views to store less state and therefore be more lightweight, the StyleSheet can act as a factory for painters that handle some of the rendering tasks. This allows 
implementations to determine what they want to cache and have the sharing potentially at the level that a selector is common to multiple views. Since the StyleSheet may be used by 
views over multiple documents and typically the HTML attributes don't effect the selector being used, the potential for sharing is significant. 

The rules are stored as named styles, and other information is stored to translate the context of an element to a rule quickly. The following code fragment will display the named 
styles, and therefore the CSS rules contained. 

import java.util.*; import javax.swing.text.*; import javax.swing.text.html.*; 

public class ShowStyles { 

public static void main(String[] args) { HTMLEditorKit kit = new HTMLEditorKit(); HTMLDocument doc = (HTMLDocument) kit.createDefaultDocument(); StyleSheet styles = 
doc.getStyleSheet(); Enumeration rules = styles.getStyleNames(); while (rules.hasMoreElements()) { String name = (String) rules.nextElement(); Style rule = styles.getStyle(name); 
System.out.println(rule.toString()); } System.exit(0); } } 



The semantics for when a CSS style should overide visual attributes defined by an element are not well defined. For example, the html <body bgcolor=red> makes the body have a red 
background. But if the html file also contains the CSS rule body { background: blue } it becomes less clear as to what color the background of the body should be. The current 
implemention gives visual attributes defined in the element the highest precedence, that is they are always checked before any styles. Therefore, in the previous example the 
background would have a red color as the body element defines the background color to be red. 

As already mentioned this supports CSS. We don't support the full CSS spec. Refer to the javadoc of the CSS class to see what properties we support. The two major CSS parsing 
related concepts we do not currently support are pseudo selectors, such as A:link { color: red }, and the important modifier. 

Note: This implementation is currently incomplete. It can be replaced with alternative implementations that are complete. Future versions of this class will provide better CSS 
support. 



*javax.swing.text.html.StyleSheet()*

public StyleSheet()

Construct a StyleSheet 


*javax.swing.text.html.StyleSheet.addAttribute(AttributeSet,Object,Object)*

public |javax.swing.text.AttributeSet| addAttribute(
  javax.swing.text.AttributeSet old,
  java.lang.Object key,
  java.lang.Object value)

Adds an attribute to the given set, and returns the new representative set. This is reimplemented to convert StyleConstant attributes to CSS prior to forwarding to the superclass 
behavior. The StyleConstants attribute has no corresponding CSS entry, the StyleConstants attribute is stored (but will likely be unused). 


    old - the old attribute set 
    key - the non-null attribute key 
    value - the attribute value 

    Returns: the updated attribute set 

*javax.swing.text.html.StyleSheet.addAttributes(AttributeSet,AttributeSet)*

public |javax.swing.text.AttributeSet| addAttributes(
  javax.swing.text.AttributeSet old,
  javax.swing.text.AttributeSet attr)

Adds a set of attributes to the element. If any of these attributes are StyleConstants attributes, they will be converted to CSS prior to forwarding to the superclass behavior. 


    old - the old attribute set 
    attr - the attributes to add 

    Returns: the updated attribute set 

*javax.swing.text.html.StyleSheet.addCSSAttribute(MutableAttributeSet,CSS.Attribute,String)*

public void addCSSAttribute(
  javax.swing.text.MutableAttributeSet attr,
  javax.swing.text.html.CSS.Attribute key,
  java.lang.String value)

Adds a CSS attribute to the given set. 



*javax.swing.text.html.StyleSheet.addCSSAttributeFromHTML(MutableAttributeSet,CSS.Attribute,String)*

public boolean addCSSAttributeFromHTML(
  javax.swing.text.MutableAttributeSet attr,
  javax.swing.text.html.CSS.Attribute key,
  java.lang.String value)

Adds a CSS attribute to the given set. 



*javax.swing.text.html.StyleSheet.addRule(String)*

public void addRule(java.lang.String rule)

Adds a set of rules to the sheet. The rules are expected to be in valid CSS format. Typically this would be called as a result of parsing a <style> tag. 



*javax.swing.text.html.StyleSheet.addStyleSheet(StyleSheet)*

public void addStyleSheet(javax.swing.text.html.StyleSheet ss)

Adds the rules from the StyleSheet ss to those of the receiver. ss's rules will override the rules of any previously added style sheets. An added StyleSheet will never override 
the rules of the receiving style sheet. 



*javax.swing.text.html.StyleSheet.createLargeAttributeSet(AttributeSet)*

protected |javax.swing.text.MutableAttributeSet| createLargeAttributeSet(javax.swing.text.AttributeSet a)

Creates a large set of attributes that should trade off space for time. This set will not be shared. This is a hook for subclasses that want to alter the behavior of the larger 
attribute storage format (which is SimpleAttributeSet by default). This can be reimplemented to return a MutableAttributeSet that provides some sort of attribute conversion. 


    a - The set of attributes to be represented in the the larger form. 

*javax.swing.text.html.StyleSheet.createSmallAttributeSet(AttributeSet)*

protected |javax.swing.text.StyleContext.SmallAttributeSet| createSmallAttributeSet(javax.swing.text.AttributeSet a)

Creates a compact set of attributes that might be shared. This is a hook for subclasses that want to alter the behavior of SmallAttributeSet. This can be reimplemented to return 
an AttributeSet that provides some sort of attribute conversion. 


    a - The set of attributes to be represented in the the compact form. 

*javax.swing.text.html.StyleSheet.getBackground(AttributeSet)*

public |java.awt.Color| getBackground(javax.swing.text.AttributeSet a)

Takes a set of attributes and turn it into a background color specification. This might be used to specify things like brighter, more hue, etc. 


    a - the set of attributes 

    Returns: 

*javax.swing.text.html.StyleSheet.getBase()*

public |java.net.URL| getBase()

Returns the base. 



*javax.swing.text.html.StyleSheet.getBoxPainter(AttributeSet)*

public |javax.swing.text.html.StyleSheet.BoxPainter| getBoxPainter(javax.swing.text.AttributeSet a)

Fetches the box formatter to use for the given set of CSS attributes. 



*javax.swing.text.html.StyleSheet.getDeclaration(String)*

public |javax.swing.text.AttributeSet| getDeclaration(java.lang.String decl)

Translates a CSS declaration to an AttributeSet that represents the CSS declaration. Typically this would be called as a result of encountering an HTML style attribute. 



*javax.swing.text.html.StyleSheet.getFont(AttributeSet)*

public |java.awt.Font| getFont(javax.swing.text.AttributeSet a)

Fetches the font to use for the given set of attributes. 



*javax.swing.text.html.StyleSheet.getForeground(AttributeSet)*

public |java.awt.Color| getForeground(javax.swing.text.AttributeSet a)

Takes a set of attributes and turn it into a foreground color specification. This might be used to specify things like brighter, more hue, etc. 


    a - the set of attributes 

    Returns: 

*javax.swing.text.html.StyleSheet.getIndexOfSize(float)*

public static int getIndexOfSize(float pt)





*javax.swing.text.html.StyleSheet.getListPainter(AttributeSet)*

public |javax.swing.text.html.StyleSheet.ListPainter| getListPainter(javax.swing.text.AttributeSet a)

Fetches the list formatter to use for the given set of CSS attributes. 



*javax.swing.text.html.StyleSheet.getPointSize(int)*

public float getPointSize(int index)

Returns the point size, given a size index. 



*javax.swing.text.html.StyleSheet.getPointSize(String)*

public float getPointSize(java.lang.String size)

Given a string such as "+2", "-2", or "2", returns a point size value. 



*javax.swing.text.html.StyleSheet.getRule(HTML.Tag,Element)*

public |javax.swing.text.Style| getRule(
  javax.swing.text.html.HTML.Tag t,
  javax.swing.text.Element e)

Fetches the style to use to render the given type of HTML tag. The element given is representing the tag and can be used to determine the nesting for situations where the 
attributes will differ if nesting inside of elements. 


    t - the type to translate to visual attributes 
    e - the element representing the tag; the element can be used to determine the nesting for situations where the attributes will differ if nested inside of other elements 

    Returns: the set of CSS attributes to use to render the tag 

*javax.swing.text.html.StyleSheet.getRule(String)*

public |javax.swing.text.Style| getRule(java.lang.String selector)

Fetches the rule that best matches the selector given in string form. Where selector is a space separated String of the element names. For example, selector might be 'html body tr 
td'' The attributes of the returned Style will change as rules are added and removed. That is if you to ask for a rule with a selector "table p" and a new rule was added with a 
selector of "p" the returned Style would include the new attributes from the rule "p". 



*javax.swing.text.html.StyleSheet.getStyleSheets()*

public |javax.swing.text.html.StyleSheet|[] getStyleSheets()

Returns an array of the linked StyleSheets. Will return null if there are no linked StyleSheets. 



*javax.swing.text.html.StyleSheet.getViewAttributes(View)*

public |javax.swing.text.AttributeSet| getViewAttributes(javax.swing.text.View v)

Fetches a set of attributes to use in the view for displaying. This is basically a set of attributes that can be used for View.getAttributes. 



*javax.swing.text.html.StyleSheet.importStyleSheet(URL)*

public void importStyleSheet(java.net.URL url)

Imports a style sheet from url. The resulting rules are directly added to the receiver. If you do not want the rules to become part of the receiver, create a new StyleSheet and 
use addStyleSheet to link it in. 



*javax.swing.text.html.StyleSheet.loadRules(Reader,URL)*

public void loadRules(
  java.io.Reader in,
  java.net.URL ref)
  throws |java.io.IOException|
         
Loads a set of rules that have been specified in terms of CSS1 grammar. If there are collisions with existing rules, the newly specified rule will win. 


    in - the stream to read the CSS grammar from 
    ref - the reference URL. This value represents the location of the stream and may be null. All relative URLs specified in the stream will be based upon this parameter. 

*javax.swing.text.html.StyleSheet.removeAttribute(AttributeSet,Object)*

public |javax.swing.text.AttributeSet| removeAttribute(
  javax.swing.text.AttributeSet old,
  java.lang.Object key)

Removes an attribute from the set. If the attribute is a StyleConstants attribute, the request will be converted to a CSS attribute prior to forwarding to the superclass behavior. 


    old - the old set of attributes 
    key - the non-null attribute name 

    Returns: the updated attribute set 

*javax.swing.text.html.StyleSheet.removeAttributes(AttributeSet,AttributeSet)*

public |javax.swing.text.AttributeSet| removeAttributes(
  javax.swing.text.AttributeSet old,
  javax.swing.text.AttributeSet attrs)

Removes a set of attributes. If any of the attributes is a StyleConstants attribute, the request will be converted to a CSS attribute prior to forwarding to the superclass 
behavior. 


    old - the old attribute set 
    attrs - the attributes 

    Returns: the updated attribute set 

*javax.swing.text.html.StyleSheet.removeAttributes(AttributeSet,Enumeration<?>)*

public |javax.swing.text.AttributeSet| removeAttributes(
  javax.swing.text.AttributeSet old,
  java.util.Enumeration<?> names)

Removes a set of attributes for the element. If any of the attributes is a StyleConstants attribute, the request will be converted to a CSS attribute prior to forwarding to the 
superclass behavior. 


    old - the old attribute set 
    names - the attribute names 

    Returns: the updated attribute set 

*javax.swing.text.html.StyleSheet.removeStyle(String)*

public void removeStyle(java.lang.String nm)

Removes a named style previously added to the document. 


    nm - the name of the style to remove 

*javax.swing.text.html.StyleSheet.removeStyleSheet(StyleSheet)*

public void removeStyleSheet(javax.swing.text.html.StyleSheet ss)

Removes the StyleSheet ss from those of the receiver. 



*javax.swing.text.html.StyleSheet.setBase(URL)*

public void setBase(java.net.URL base)

Sets the base. All import statements that are relative, will be relative to base. 



*javax.swing.text.html.StyleSheet.setBaseFontSize(int)*

public void setBaseFontSize(int sz)

Sets the base font size, with valid values between 1 and 7. 



*javax.swing.text.html.StyleSheet.setBaseFontSize(String)*

public void setBaseFontSize(java.lang.String size)

Sets the base font size from the passed in String. The string can either identify a specific font size, with legal values between 1 and 7, or identifiy a relative font size such 
as +1 or -2. 



*javax.swing.text.html.StyleSheet.stringToColor(String)*

public |java.awt.Color| stringToColor(java.lang.String string)

Converts a color string such as "RED" or "#NNNNNN" to a Color. Note: This will only convert the HTML3.2 color strings or a string of length 7; otherwise, it will return null. 



*javax.swing.text.html.StyleSheet.translateHTMLToCSS(AttributeSet)*

public |javax.swing.text.AttributeSet| translateHTMLToCSS(javax.swing.text.AttributeSet htmlAttrSet)

Converts a set of HTML attributes to an equivalent set of CSS attributes. 


    htmlAttrSet - AttributeSet containing the HTML attributes. 



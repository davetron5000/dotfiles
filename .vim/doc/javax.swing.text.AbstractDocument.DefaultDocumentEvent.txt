*javax.swing.text.AbstractDocument.DefaultDocumentEvent* *AbstractDocument.DefaultDocumentEvent* 

public class AbstractDocument.DefaultDocumentEvent
  extends    |javax.swing.undo.CompoundEdit|
  implements |javax.swing.event.DocumentEvent|

|javax.swing.text.AbstractDocument.DefaultDocumentEvent_Description|
|javax.swing.text.AbstractDocument.DefaultDocumentEvent_Fields|
|javax.swing.text.AbstractDocument.DefaultDocumentEvent_Constructors|
|javax.swing.text.AbstractDocument.DefaultDocumentEvent_Methods|

================================================================================

*javax.swing.text.AbstractDocument.DefaultDocumentEvent_Constructors*
|javax.swing.text.AbstractDocument.DefaultDocumentEvent(int,int,DocumentEvent.EventType)|

*javax.swing.text.AbstractDocument.DefaultDocumentEvent_Methods*
|javax.swing.text.AbstractDocument.DefaultDocumentEvent.addEdit(UndoableEdit)|A
|javax.swing.text.AbstractDocument.DefaultDocumentEvent.getChange(Element)|Gets
|javax.swing.text.AbstractDocument.DefaultDocumentEvent.getDocument()|Gets the 
|javax.swing.text.AbstractDocument.DefaultDocumentEvent.getLength()|Returns the
|javax.swing.text.AbstractDocument.DefaultDocumentEvent.getOffset()|Returns the
|javax.swing.text.AbstractDocument.DefaultDocumentEvent.getPresentationName()|P
|javax.swing.text.AbstractDocument.DefaultDocumentEvent.getRedoPresentationName()|
|javax.swing.text.AbstractDocument.DefaultDocumentEvent.getType()|Returns the t
|javax.swing.text.AbstractDocument.DefaultDocumentEvent.getUndoPresentationName()|
|javax.swing.text.AbstractDocument.DefaultDocumentEvent.isSignificant()|Default
|javax.swing.text.AbstractDocument.DefaultDocumentEvent.redo()|Redoes a change.
|javax.swing.text.AbstractDocument.DefaultDocumentEvent.toString()|Returns a st
|javax.swing.text.AbstractDocument.DefaultDocumentEvent.undo()|Undoes a change.

*javax.swing.text.AbstractDocument.DefaultDocumentEvent_Description*

Stores document changes as the document is being modified. Can subsequently be 
used for change notification when done with the document modification 
transaction. This is used by the AbstractDocument class and its extensions for 
broadcasting change information to the document listeners. 


*javax.swing.text.AbstractDocument.DefaultDocumentEvent(int,int,DocumentEvent.EventType)*

public AbstractDocument.DefaultDocumentEvent(
  int offs,
  int len,
  javax.swing.event.DocumentEvent.EventType type)

Constructs a change record. 

    offs - the offset into the document of the change >= 0 
    len - the length of the change >= 0 
    type - the type of event (DocumentEvent.EventType) 

*javax.swing.text.AbstractDocument.DefaultDocumentEvent.addEdit(UndoableEdit)*

public boolean addEdit(javax.swing.undo.UndoableEdit anEdit)

Adds a document edit. If the number of edits crosses a threshold, this switches 
on a hashtable lookup for ElementChange implementations since access of these 
needs to be relatively quick. 

    anEdit - a document edit record 

    Returns: true if the edit was added 
*javax.swing.text.AbstractDocument.DefaultDocumentEvent.getChange(Element)*

public |javax.swing.event.DocumentEvent.ElementChange| getChange(javax.swing.text.Element elem)

Gets the changes for an element. 

    elem - the element 

    Returns: 
*javax.swing.text.AbstractDocument.DefaultDocumentEvent.getDocument()*

public |javax.swing.text.Document| getDocument()

Gets the document that sourced the change event. 


    Returns: 
*javax.swing.text.AbstractDocument.DefaultDocumentEvent.getLength()*

public int getLength()

Returns the length of the change. 


    Returns: the length >= 0 
*javax.swing.text.AbstractDocument.DefaultDocumentEvent.getOffset()*

public int getOffset()

Returns the offset within the document of the start of the change. 


    Returns: the offset >= 0 
*javax.swing.text.AbstractDocument.DefaultDocumentEvent.getPresentationName()*

public |java.lang.String| getPresentationName()

Provides a localized, human readable description of this edit suitable for use 
in, say, a change log. 


    Returns: the description 
*javax.swing.text.AbstractDocument.DefaultDocumentEvent.getRedoPresentationName()*

public |java.lang.String| getRedoPresentationName()

Provides a localized, human readable description of the redoable form of this 
edit, e.g. for use as a Redo menu item. Typically derived from 
getPresentationName(); 


    Returns: the description 
*javax.swing.text.AbstractDocument.DefaultDocumentEvent.getType()*

public |javax.swing.event.DocumentEvent.EventType| getType()

Returns the type of event. 


    Returns: the event type as a DocumentEvent.EventType 
*javax.swing.text.AbstractDocument.DefaultDocumentEvent.getUndoPresentationName()*

public |java.lang.String| getUndoPresentationName()

Provides a localized, human readable description of the undoable form of this 
edit, e.g. for use as an Undo menu item. Typically derived from 
getDescription(); 


    Returns: the description 
*javax.swing.text.AbstractDocument.DefaultDocumentEvent.isSignificant()*

public boolean isSignificant()

DefaultDocument events are significant. If you wish to aggregate 
DefaultDocumentEvents to present them as a single edit to the user place them 
into a CompoundEdit. 


    Returns: whether the event is significant for edit undo purposes 
*javax.swing.text.AbstractDocument.DefaultDocumentEvent.redo()*

public void redo()
  throws |javax.swing.undo.CannotRedoException|
         
Redoes a change. 


*javax.swing.text.AbstractDocument.DefaultDocumentEvent.toString()*

public |java.lang.String| toString()

Returns a string description of the change event. 


    Returns: 
*javax.swing.text.AbstractDocument.DefaultDocumentEvent.undo()*

public void undo()
  throws |javax.swing.undo.CannotUndoException|
         
Undoes a change. 




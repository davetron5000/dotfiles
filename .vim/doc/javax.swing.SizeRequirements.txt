*javax.swing.SizeRequirements* *SizeRequirements* For the convenience of layout managers,
 calculates information about the size and position of components.

public class SizeRequirements
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|javax.swing.SizeRequirements_Description|
|javax.swing.SizeRequirements_Fields|
|javax.swing.SizeRequirements_Constructors|
|javax.swing.SizeRequirements_Methods|

====================================================================================================================================================================================

*javax.swing.SizeRequirements_Fields*
|float_javax.swing.SizeRequirements.alignment|
|int_javax.swing.SizeRequirements.maximum|
|int_javax.swing.SizeRequirements.minimum|
|int_javax.swing.SizeRequirements.preferred|

*javax.swing.SizeRequirements_Constructors*
|javax.swing.SizeRequirements()|Creates a SizeRequirements object with the minimum, preferred,  and maximum sizes set to zero and an alignment value of 0.5  (centered).
|javax.swing.SizeRequirements(int,int,int,float)|Creates a SizeRequirements object with the specified minimum, preferred,  and maximum sizes and the specified alignment.

*javax.swing.SizeRequirements_Methods*
|javax.swing.SizeRequirements.adjustSizes(int,SizeRequirements[])|Adjust a specified array of sizes by a given amount.
|javax.swing.SizeRequirements.calculateAlignedPositions(int,SizeRequirements,SizeRequirements[],int[],int[])|Creates a bunch of offset/span pairs specifying how to  lay out a set 
|javax.swing.SizeRequirements.calculateAlignedPositions(int,SizeRequirements,SizeRequirements[],int[],int[],boolean)|Creates a set of offset/span pairs specifying how to  lay out 
|javax.swing.SizeRequirements.calculateTiledPositions(int,SizeRequirements,SizeRequirements[],int[],int[])|Creates a set of offset/span pairs representing how to  lay out a set of
|javax.swing.SizeRequirements.calculateTiledPositions(int,SizeRequirements,SizeRequirements[],int[],int[],boolean)|Creates a set of offset/span pairs representing how to  lay out 
|javax.swing.SizeRequirements.getAlignedSizeRequirements(SizeRequirements[])|Determines the total space necessary to  align a set of components.
|javax.swing.SizeRequirements.getTiledSizeRequirements(SizeRequirements[])|Determines the total space necessary to  place a set of components end-to-end.
|javax.swing.SizeRequirements.toString()|Returns a string describing the minimum, preferred, and maximum  size requirements, along with the alignment.

*javax.swing.SizeRequirements_Description*

For the convenience of layout managers, calculates information about the size and position of components. All size and position calculation methods are class methods that take 
arrays of SizeRequirements as arguments. The SizeRequirements class supports two types of layout: 



tiled The components are placed end-to-end, starting either at coordinate 0 (the leftmost or topmost position) or at the coordinate representing the end of the allocated span (the 
rightmost or bottommost position). 

aligned The components are aligned as specified by each component's X or Y alignment value. 





Each SizeRequirements object contains information about either the width (and X alignment) or height (and Y alignment) of a single component or a group of components: 



minimum The smallest reasonable width/height of the component or component group, in pixels. 

preferred The natural width/height of the component or component group, in pixels. 

maximum The largest reasonable width/height of the component or component group, in pixels. 

alignment The X/Y alignment of the component or component group. 



Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*float_javax.swing.SizeRequirements.alignment*

The alignment, specified as a value between 0.0 and 1.0, inclusive. To specify centering, the alignment should be 0.5. 


*int_javax.swing.SizeRequirements.maximum*

The maximum size allowed. For a component comp, this should be equal to either comp.getMaximumSize().width or comp.getMaximumSize().height. 


*int_javax.swing.SizeRequirements.minimum*

The minimum size required. For a component comp, this should be equal to either comp.getMinimumSize().width or comp.getMinimumSize().height. 


*int_javax.swing.SizeRequirements.preferred*

The preferred (natural) size. For a component comp, this should be equal to either comp.getPreferredSize().width or comp.getPreferredSize().height. 



*javax.swing.SizeRequirements()*

public SizeRequirements()

Creates a SizeRequirements object with the minimum, preferred, and maximum sizes set to zero and an alignment value of 0.5 (centered). 


*javax.swing.SizeRequirements(int,int,int,float)*

public SizeRequirements(
  int min,
  int pref,
  int max,
  float a)

Creates a SizeRequirements object with the specified minimum, preferred, and maximum sizes and the specified alignment. 

    min - the minimum size >= 0 
    pref - the preferred size >= 0 
    max - the maximum size >= 0 
    a - the alignment >= 0.0f <= 1.0f 

*javax.swing.SizeRequirements.adjustSizes(int,SizeRequirements[])*

public static int[] adjustSizes(
  int delta,
  javax.swing.SizeRequirements[] children)

Adjust a specified array of sizes by a given amount. 


    delta - an int specifying the size difference 
    children - an array of SizeRequirements objects 

    Returns: an array of ints containing the final size for each item 

*javax.swing.SizeRequirements.calculateAlignedPositions(int,SizeRequirements,SizeRequirements[],int[],int[])*

public static void calculateAlignedPositions(
  int allocated,
  javax.swing.SizeRequirements total,
  javax.swing.SizeRequirements[] children,
  int[] offsets,
  int[] spans)

Creates a bunch of offset/span pairs specifying how to lay out a set of components with the specified alignments. The resulting span allocations will overlap, with each one 
fitting as well as possible into the given total allocation. This method requires that you specify the total amount of space to be allocated, the size requirements for each 
component to be placed (specified as an array of SizeRequirements), and the total size requirements of the set of components (only the alignment field of which is actually used). 
You can get the total size requirement by invoking getAlignedSizeRequirements. 

Normal alignment will be done with an alignment value of 0.0f representing the left/top edge of a component. 


    allocated - the total span to be allocated >= 0. 
    total - the total of the children requests. 
    children - the size requirements for each component. 
    offsets - the offset from 0 for each child where the spans were allocated (determines placement of the span). 
    spans - the span allocated for each child to make the total target span. 

*javax.swing.SizeRequirements.calculateAlignedPositions(int,SizeRequirements,SizeRequirements[],int[],int[],boolean)*

public static void calculateAlignedPositions(
  int allocated,
  javax.swing.SizeRequirements total,
  javax.swing.SizeRequirements[] children,
  int[] offsets,
  int[] spans,
  boolean normal)

Creates a set of offset/span pairs specifying how to lay out a set of components with the specified alignments. The resulting span allocations will overlap, with each one fitting 
as well as possible into the given total allocation. This method requires that you specify the total amount of space to be allocated, the size requirements for each component to 
be placed (specified as an array of SizeRequirements), and the total size requirements of the set of components (only the alignment field of which is actually used) You can get 
the total size requirement by invoking getAlignedSizeRequirements. 

This method also requires a flag indicating whether normal or reverse alignment should be performed. With normal alignment the value 0.0f represents the left/top edge of the 
component to be aligned. With reverse alignment, 0.0f represents the right/bottom edge. 


    allocated - the total span to be allocated >= 0. 
    total - the total of the children requests. 
    children - the size requirements for each component. 
    offsets - the offset from 0 for each child where the spans were allocated (determines placement of the span). 
    spans - the span allocated for each child to make the total target span. 
    normal - when true, the alignment value 0.0f means left/top; when false, it means right/bottom. 

*javax.swing.SizeRequirements.calculateTiledPositions(int,SizeRequirements,SizeRequirements[],int[],int[])*

public static void calculateTiledPositions(
  int allocated,
  javax.swing.SizeRequirements total,
  javax.swing.SizeRequirements[] children,
  int[] offsets,
  int[] spans)

Creates a set of offset/span pairs representing how to lay out a set of components end-to-end. This method requires that you specify the total amount of space to be allocated, the 
size requirements for each component to be placed (specified as an array of SizeRequirements), and the total size requirement of the set of components. You can get the total size 
requirement by invoking the getTiledSizeRequirements method. The components will be tiled in the forward direction with offsets increasing from 0. 


    allocated - the total span to be allocated >= 0. 
    total - the total of the children requests. This argument is optional and may be null. 
    children - the size requirements for each component. 
    offsets - the offset from 0 for each child where the spans were allocated (determines placement of the span). 
    spans - the span allocated for each child to make the total target span. 

*javax.swing.SizeRequirements.calculateTiledPositions(int,SizeRequirements,SizeRequirements[],int[],int[],boolean)*

public static void calculateTiledPositions(
  int allocated,
  javax.swing.SizeRequirements total,
  javax.swing.SizeRequirements[] children,
  int[] offsets,
  int[] spans,
  boolean forward)

Creates a set of offset/span pairs representing how to lay out a set of components end-to-end. This method requires that you specify the total amount of space to be allocated, the 
size requirements for each component to be placed (specified as an array of SizeRequirements), and the total size requirement of the set of components. You can get the total size 
requirement by invoking the getTiledSizeRequirements method. 

This method also requires a flag indicating whether components should be tiled in the forward direction (offsets increasing from 0) or reverse direction (offsets decreasing from 
the end of the allocated space). The forward direction represents components tiled from left to right or top to bottom. The reverse direction represents components tiled from 
right to left or bottom to top. 


    allocated - the total span to be allocated >= 0. 
    total - the total of the children requests. This argument is optional and may be null. 
    children - the size requirements for each component. 
    offsets - the offset from 0 for each child where the spans were allocated (determines placement of the span). 
    spans - the span allocated for each child to make the total target span. 
    forward - tile with offsets increasing from 0 if true and with offsets decreasing from the end of the allocated space if false. 

*javax.swing.SizeRequirements.getAlignedSizeRequirements(SizeRequirements[])*

public static |javax.swing.SizeRequirements| getAlignedSizeRequirements(javax.swing.SizeRequirements[] children)

Determines the total space necessary to align a set of components. The needs of each component in the set are represented by an entry in the passed-in SizeRequirements array. The 
total space required will never be more than Integer.MAX_VALUE. 


    children - the set of child requirements. If of zero length, the returns result will be a default instance of SizeRequirements. 

    Returns: the total space requirements. 

*javax.swing.SizeRequirements.getTiledSizeRequirements(SizeRequirements[])*

public static |javax.swing.SizeRequirements| getTiledSizeRequirements(javax.swing.SizeRequirements[] children)

Determines the total space necessary to place a set of components end-to-end. The needs of each component in the set are represented by an entry in the passed-in SizeRequirements 
array. The returned SizeRequirements object has an alignment of 0.5 (centered). The space requirement is never more than Integer.MAX_VALUE. 


    children - the space requirements for a set of components. The vector may be of zero length, which will result in a default SizeRequirements object instance being passed back. 

    Returns: the total space requirements. 

*javax.swing.SizeRequirements.toString()*

public |java.lang.String| toString()

Returns a string describing the minimum, preferred, and maximum size requirements, along with the alignment. 



    Returns: 



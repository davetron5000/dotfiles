*java.io.CharArrayReader* *CharArrayReader* This class implements a character bu

public class CharArrayReader
  extends    |java.io.Reader|

|java.io.CharArrayReader_Description|
|java.io.CharArrayReader_Fields|
|java.io.CharArrayReader_Constructors|
|java.io.CharArrayReader_Methods|

================================================================================

*java.io.CharArrayReader_Fields*
|char[]_java.io.CharArrayReader.buf|
|int_java.io.CharArrayReader.count|
|int_java.io.CharArrayReader.markedPos|
|int_java.io.CharArrayReader.pos|

*java.io.CharArrayReader_Constructors*
|java.io.CharArrayReader(char[])|Create an CharArrayReader from the specified a
|java.io.CharArrayReader(char[],int,int)|Create an CharArrayReader from the spe

*java.io.CharArrayReader_Methods*
|java.io.CharArrayReader.close()|Close the stream.
|java.io.CharArrayReader.mark(int)|Mark the present position in the stream.
|java.io.CharArrayReader.markSupported()|Tell whether this stream supports the 
|java.io.CharArrayReader.read()|Read a single character.
|java.io.CharArrayReader.read(char[],int,int)|Read characters into a portion of
|java.io.CharArrayReader.ready()|Tell whether this stream is ready to be read.
|java.io.CharArrayReader.reset()|Reset the stream to the most recent mark, or t
|java.io.CharArrayReader.skip(long)|Skip characters.

*java.io.CharArrayReader_Description*

This class implements a character buffer that can be used as a character-input 
stream. 


*char[]_java.io.CharArrayReader.buf*

This class implements a character buffer that can be used as a character-input 
stream. 


*int_java.io.CharArrayReader.count*

This class implements a character buffer that can be used as a character-input 
stream. 


*int_java.io.CharArrayReader.markedPos*

This class implements a character buffer that can be used as a character-input 
stream. 


*int_java.io.CharArrayReader.pos*

This class implements a character buffer that can be used as a character-input 
stream. 



*java.io.CharArrayReader(char[])*

public CharArrayReader(char[] buf)

Create an CharArrayReader from the specified array of chars. 

    buf - Input buffer (not copied) 

*java.io.CharArrayReader(char[],int,int)*

public CharArrayReader(
  char[] buf,
  int offset,
  int length)

Create an CharArrayReader from the specified array of chars. 

The resulting reader will start reading at the given offset. The total number 
of char values that can be read from this reader will be either length or 
buf.length-offset, whichever is smaller. 

    buf - Input buffer (not copied) 
    offset - Offset of the first char to read 
    length - Number of chars to read 

*java.io.CharArrayReader.close()*

public void close()

Close the stream. 


*java.io.CharArrayReader.mark(int)*

public void mark(int readAheadLimit)
  throws |java.io.IOException|
         
Mark the present position in the stream. Subsequent calls to reset() will 
reposition the stream to this point. 

    readAheadLimit - Limit on the number of characters that may be read while still preserving the 
       mark. Because the stream's input comes from a character array, there is 
       no actual limit; hence this argument is ignored. 

*java.io.CharArrayReader.markSupported()*

public boolean markSupported()

Tell whether this stream supports the mark() operation, which it does. 


*java.io.CharArrayReader.read()*

public int read()
  throws |java.io.IOException|
         
Read a single character. 


*java.io.CharArrayReader.read(char[],int,int)*

public int read(
  char[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Read characters into a portion of an array. 

    b - Destination buffer 
    off - Offset at which to start storing characters 
    len - Maximum number of characters to read 

    Returns: The actual number of characters read, or -1 if the end of the stream has been 
             reached 
*java.io.CharArrayReader.ready()*

public boolean ready()
  throws |java.io.IOException|
         
Tell whether this stream is ready to be read. Character-array readers are 
always ready to be read. 


*java.io.CharArrayReader.reset()*

public void reset()
  throws |java.io.IOException|
         
Reset the stream to the most recent mark, or to the beginning if it has never 
been marked. 


*java.io.CharArrayReader.skip(long)*

public long skip(long n)
  throws |java.io.IOException|
         
Skip characters. Returns the number of characters that were skipped. 

The n parameter may be negative, even though the skip method of the 
(|java.io.Reader|) superclass throws an exception in this case. If n is 
negative, then this method does nothing and returns 0. 

    n - The number of characters to skip 

    Returns: The number of characters actually skipped 


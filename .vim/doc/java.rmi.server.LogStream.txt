*java.rmi.server.LogStream* *LogStream* LogStream provides a mechanism for loggi

public class LogStream
  extends    |java.io.PrintStream|

|java.rmi.server.LogStream_Description|
|java.rmi.server.LogStream_Fields|
|java.rmi.server.LogStream_Constructors|
|java.rmi.server.LogStream_Methods|

================================================================================

*java.rmi.server.LogStream_Fields*
|int_java.rmi.server.LogStream.BRIEF|
|int_java.rmi.server.LogStream.SILENT|
|int_java.rmi.server.LogStream.VERBOSE|

*java.rmi.server.LogStream_Methods*
|java.rmi.server.LogStream.getDefaultStream()|Return the current default stream
|java.rmi.server.LogStream.getOutputStream()|Return the current stream to which
|java.rmi.server.LogStream.log(String)|Return the LogStream identified by the g
|java.rmi.server.LogStream.parseLevel(String)|Convert a string name of a loggin
|java.rmi.server.LogStream.setDefaultStream(PrintStream)|Set the default stream
|java.rmi.server.LogStream.setOutputStream(OutputStream)|Set the stream to whic
|java.rmi.server.LogStream.toString()|Return log name as string representation.
|java.rmi.server.LogStream.write(byte[],int,int)|Write a subarray of bytes.
|java.rmi.server.LogStream.write(int)|Write a byte of data to the stream.

*java.rmi.server.LogStream_Description*

LogStream provides a mechanism for logging errors that are of possible interest 
to those monitoring a system. 


*int_java.rmi.server.LogStream.BRIEF*

LogStream provides a mechanism for logging errors that are of possible interest 
to those monitoring a system. 


*int_java.rmi.server.LogStream.SILENT*

LogStream provides a mechanism for logging errors that are of possible interest 
to those monitoring a system. 


*int_java.rmi.server.LogStream.VERBOSE*

LogStream provides a mechanism for logging errors that are of possible interest 
to those monitoring a system. 



*java.rmi.server.LogStream.getDefaultStream()*

public static synchronized |java.io.PrintStream| getDefaultStream()

Return the current default stream for new logs. 


    Returns: default log stream 
*java.rmi.server.LogStream.getOutputStream()*

public synchronized |java.io.OutputStream| getOutputStream()

Return the current stream to which output from this log is sent. 


    Returns: output stream for this log 
*java.rmi.server.LogStream.log(String)*

public static |java.rmi.server.LogStream| log(java.lang.String name)

Return the LogStream identified by the given name. If a log corresponding to 
"name" does not exist, a log using the default stream is created. 

    name - name identifying the desired LogStream 

    Returns: log associated with given name 
*java.rmi.server.LogStream.parseLevel(String)*

public static int parseLevel(java.lang.String s)

Convert a string name of a logging level to its internal integer 
representation. 

    s - name of logging level (e.g., 'SILENT', 'BRIEF', 'VERBOSE') 

    Returns: corresponding integer log level 
*java.rmi.server.LogStream.setDefaultStream(PrintStream)*

public static synchronized void setDefaultStream(java.io.PrintStream newDefault)

Set the default stream for new logs. 

    newDefault - new default log stream 

*java.rmi.server.LogStream.setOutputStream(OutputStream)*

public synchronized void setOutputStream(java.io.OutputStream out)

Set the stream to which output from this log is sent. 

    out - new output stream for this log 

*java.rmi.server.LogStream.toString()*

public |java.lang.String| toString()

Return log name as string representation. 


    Returns: 
*java.rmi.server.LogStream.write(byte[],int,int)*

public void write(
  byte[] b,
  int off,
  int len)

Write a subarray of bytes. Pass each through write byte method. 


*java.rmi.server.LogStream.write(int)*

public void write(int b)

Write a byte of data to the stream. If it is not a newline, then the byte is 
appended to the internal buffer. If it is a newline, then the currently 
buffered line is sent to the log's output stream, prefixed with the appropriate 
logging information. 




*java.security.cert.CertPathValidator* *CertPathValidator* A class for validatin

public class CertPathValidator
  extends    |java.lang.Object|

|java.security.cert.CertPathValidator_Description|
|java.security.cert.CertPathValidator_Fields|
|java.security.cert.CertPathValidator_Constructors|
|java.security.cert.CertPathValidator_Methods|

================================================================================

*java.security.cert.CertPathValidator_Constructors*
|java.security.cert.CertPathValidator(CertPathValidatorSpi,Provider,String)|Cre

*java.security.cert.CertPathValidator_Methods*
|java.security.cert.CertPathValidator.getAlgorithm()|Returns the algorithm name
|java.security.cert.CertPathValidator.getDefaultType()|Returns the default Cert
|java.security.cert.CertPathValidator.getInstance(String)|Returns a CertPathVal
|java.security.cert.CertPathValidator.getInstance(String,Provider)|Returns a Ce
|java.security.cert.CertPathValidator.getInstance(String,String)|Returns a Cert
|java.security.cert.CertPathValidator.getProvider()|Returns the Provider of thi
|java.security.cert.CertPathValidator.validate(CertPath,CertPathParameters)|Val

*java.security.cert.CertPathValidator_Description*

A class for validating certification paths (also known as certificate chains). 

This class uses a provider-based architecture, as described in the Java 
Cryptography Architecture. To create a CertPathValidator, call one of the 
static getInstance methods, passing in the algorithm name of the 
CertPathValidator desired and optionally the name of the provider desired. 

Once a CertPathValidator object has been created, it can be used to validate 
certification paths by calling the 
validate(|java.security.cert.CertPathValidator|) method and passing it the 
CertPath to be validated and an algorithm-specific set of parameters. If 
successful, the result is returned in an object that implements the 
CertPathValidatorResult interface. 

Concurrent Access 

The static methods of this class are guaranteed to be thread-safe. Multiple 
threads may concurrently invoke the static methods defined in this class with 
no ill effects. 

However, this is not true for the non-static methods defined by this class. 
Unless otherwise documented by a specific provider, threads that need to access 
a single CertPathValidator instance concurrently should synchronize amongst 
themselves and provide the necessary locking. Multiple threads each 
manipulating a different CertPathValidator instance need not synchronize. 


*java.security.cert.CertPathValidator(CertPathValidatorSpi,Provider,String)*

protected CertPathValidator(
  java.security.cert.CertPathValidatorSpi validatorSpi,
  java.security.Provider provider,
  java.lang.String algorithm)

Creates a CertPathValidator object of the given algorithm, and encapsulates the 
given provider implementation (SPI object) in it. 

    validatorSpi - the provider implementation 
    provider - the provider 
    algorithm - the algorithm name 

*java.security.cert.CertPathValidator.getAlgorithm()*

public final |java.lang.String| getAlgorithm()

Returns the algorithm name of this CertPathValidator. 


    Returns: the algorithm name of this CertPathValidator 
*java.security.cert.CertPathValidator.getDefaultType()*

public static final |java.lang.String| getDefaultType()

Returns the default CertPathValidator type as specified in the Java security 
properties file, or the string PKIX if no such property exists. The Java 
security properties file is located in the file named 
<JAVA_HOME>/lib/security/java.security, where <JAVA_HOME> refers to the 
directory where the JDK was installed. 

The default CertPathValidator type can be used by applications that do not want 
to use a hard-coded type when calling one of the getInstance methods, and want 
to provide a default type in case a user does not specify its own. 

The default CertPathValidator type can be changed by setting the value of the 
"certpathvalidator.type" security property (in the Java security properties 
file) to the desired type. 


    Returns: the default CertPathValidator type as specified in the Java security properties 
             file, or the string PKIX if no such property exists. 
*java.security.cert.CertPathValidator.getInstance(String)*

public static |java.security.cert.CertPathValidator| getInstance(java.lang.String algorithm)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a CertPathValidator object that implements the specified algorithm. 

If the default provider package provides an implementation of the specified 
CertPathValidator algorithm, an instance of CertPathValidator containing that 
implementation is returned. If the requested algorithm is not available in the 
default package, other packages are searched. 

    algorithm - the name of the requested CertPathValidator algorithm 

    Returns: a CertPathValidator object that implements the specified algorithm 
*java.security.cert.CertPathValidator.getInstance(String,Provider)*

public static |java.security.cert.CertPathValidator| getInstance(
  java.lang.String algorithm,
  java.security.Provider provider)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a CertPathValidator object that implements the specified algorithm, as 
supplied by the specified provider. Note: the provider doesn't have to be 
registered. 

    algorithm - the name of the requested CertPathValidator algorithm 
    provider - the provider 

    Returns: a CertPathValidator object that implements the specified algorithm, as supplied 
             by the specified provider 
*java.security.cert.CertPathValidator.getInstance(String,String)*

public static |java.security.cert.CertPathValidator| getInstance(
  java.lang.String algorithm,
  java.lang.String provider)
  throws |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         
Returns a CertPathValidator object that implements the specified algorithm, as 
supplied by the specified provider. 

    algorithm - the name of the requested CertPathValidator algorithm 
    provider - the name of the provider 

    Returns: a CertPathValidator object that implements the specified algorithm, as supplied 
             by the specified provider 
*java.security.cert.CertPathValidator.getProvider()*

public final |java.security.Provider| getProvider()

Returns the Provider of this CertPathValidator. 


    Returns: the Provider of this CertPathValidator 
*java.security.cert.CertPathValidator.validate(CertPath,CertPathParameters)*

public final |java.security.cert.CertPathValidatorResult| validate(
  java.security.cert.CertPath certPath,
  java.security.cert.CertPathParameters params)
  throws |java.security.cert.CertPathValidatorException|
         |java.security.InvalidAlgorithmParameterException|
         
Validates the specified certification path using the specified algorithm 
parameter set. 

The CertPath specified must be of a type that is supported by the validation 
algorithm, otherwise an InvalidAlgorithmParameterException will be thrown. For 
example, a CertPathValidator that implements the PKIX algorithm validates 
CertPath objects of type X.509. 

    certPath - the CertPath to be validated 
    params - the algorithm parameters 

    Returns: the result of the validation algorithm 


*java.awt.CompositeContext* *CompositeContext* The CompositeContext interface de

public interface interface CompositeContext


|java.awt.CompositeContext_Description|
|java.awt.CompositeContext_Fields|
|java.awt.CompositeContext_Constructors|
|java.awt.CompositeContext_Methods|

================================================================================

*java.awt.CompositeContext_Methods*
|java.awt.CompositeContext.compose(Raster,Raster,WritableRaster)|Composes the t
|java.awt.CompositeContext.dispose()|Releases resources allocated for a context

*java.awt.CompositeContext_Description*

The CompositeContext interface defines the encapsulated and optimized 
environment for a compositing operation. CompositeContext objects maintain 
state for compositing operations. In a multi-threaded environment, several 
contexts can exist simultaneously for a single (|java.awt.Composite|) object. 


*java.awt.CompositeContext.compose(Raster,Raster,WritableRaster)*

public void compose(
  java.awt.image.Raster src,
  java.awt.image.Raster dstIn,
  java.awt.image.WritableRaster dstOut)

Composes the two source (|java.awt.image.Raster|) objects and places the result 
in the destination (|java.awt.image.WritableRaster|) . Note that the 
destination can be the same object as either the first or second source. Note 
that dstIn and dstOut must be compatible with the dstColorModel passed to the 
createContext(|java.awt.Composite|) method of the Composite interface. 

    src - the first source for the compositing operation 
    dstIn - the second source for the compositing operation 
    dstOut - the WritableRaster into which the result of the operation is stored 

*java.awt.CompositeContext.dispose()*

public void dispose()

Releases resources allocated for a context. 




*javax.imageio.spi.ImageReaderWriterSpi* *ImageReaderWriterSpi* A superclass con

public abstract class ImageReaderWriterSpi
  extends    |javax.imageio.spi.IIOServiceProvider|

|javax.imageio.spi.ImageReaderWriterSpi_Description|
|javax.imageio.spi.ImageReaderWriterSpi_Fields|
|javax.imageio.spi.ImageReaderWriterSpi_Constructors|
|javax.imageio.spi.ImageReaderWriterSpi_Methods|

================================================================================

*javax.imageio.spi.ImageReaderWriterSpi_Fields*
|java.lang.String[]_javax.imageio.spi.ImageReaderWriterSpi.extraImageMetadataFormatClassNames|
|java.lang.String[]_javax.imageio.spi.ImageReaderWriterSpi.extraImageMetadataFormatNames|
|java.lang.String[]_javax.imageio.spi.ImageReaderWriterSpi.extraStreamMetadataFormatClassNames|
|java.lang.String[]_javax.imageio.spi.ImageReaderWriterSpi.extraStreamMetadataFormatNames|
|java.lang.String[]_javax.imageio.spi.ImageReaderWriterSpi.MIMETypes|
|java.lang.String[]_javax.imageio.spi.ImageReaderWriterSpi.names|
|java.lang.String_javax.imageio.spi.ImageReaderWriterSpi.nativeImageMetadataFormatClassName|
|java.lang.String_javax.imageio.spi.ImageReaderWriterSpi.nativeImageMetadataFormatName|
|java.lang.String_javax.imageio.spi.ImageReaderWriterSpi.nativeStreamMetadataFormatClassName|
|java.lang.String_javax.imageio.spi.ImageReaderWriterSpi.nativeStreamMetadataFormatName|
|java.lang.String_javax.imageio.spi.ImageReaderWriterSpi.pluginClassName|
|java.lang.String[]_javax.imageio.spi.ImageReaderWriterSpi.suffixes|
|boolean_javax.imageio.spi.ImageReaderWriterSpi.supportsStandardImageMetadataFormat|
|boolean_javax.imageio.spi.ImageReaderWriterSpi.supportsStandardStreamMetadataFormat|

*javax.imageio.spi.ImageReaderWriterSpi_Constructors*
|javax.imageio.spi.ImageReaderWriterSpi()|Constructs a blank ImageReaderWriterS
|javax.imageio.spi.ImageReaderWriterSpi(String,String,String[],String[],String[],String,boolean,String,String,String[],String[],boolean,String,String,String[],String[])|

*javax.imageio.spi.ImageReaderWriterSpi_Methods*
|javax.imageio.spi.ImageReaderWriterSpi.getExtraImageMetadataFormatNames()|Retu
|javax.imageio.spi.ImageReaderWriterSpi.getExtraStreamMetadataFormatNames()|Ret
|javax.imageio.spi.ImageReaderWriterSpi.getFileSuffixes()|Returns an array of S
|javax.imageio.spi.ImageReaderWriterSpi.getFormatNames()|Returns an array of St
|javax.imageio.spi.ImageReaderWriterSpi.getImageMetadataFormat(String)|Returns 
|javax.imageio.spi.ImageReaderWriterSpi.getMIMETypes()|Returns an array of Stri
|javax.imageio.spi.ImageReaderWriterSpi.getNativeImageMetadataFormatName()|Retu
|javax.imageio.spi.ImageReaderWriterSpi.getNativeStreamMetadataFormatName()|Ret
|javax.imageio.spi.ImageReaderWriterSpi.getPluginClassName()|Returns the fully-
|javax.imageio.spi.ImageReaderWriterSpi.getStreamMetadataFormat(String)|Returns
|javax.imageio.spi.ImageReaderWriterSpi.isStandardImageMetadataFormatSupported()|
|javax.imageio.spi.ImageReaderWriterSpi.isStandardStreamMetadataFormatSupported()|

*javax.imageio.spi.ImageReaderWriterSpi_Description*

A superclass containing instance variables and methods common to ImageReaderSpi 
and ImageWriterSpi. 


*java.lang.String[]_javax.imageio.spi.ImageReaderWriterSpi.extraImageMetadataFormatClassNames*

A superclass containing instance variables and methods common to ImageReaderSpi 
and ImageWriterSpi. 


*java.lang.String[]_javax.imageio.spi.ImageReaderWriterSpi.extraImageMetadataFormatNames*

A superclass containing instance variables and methods common to ImageReaderSpi 
and ImageWriterSpi. 


*java.lang.String[]_javax.imageio.spi.ImageReaderWriterSpi.extraStreamMetadataFormatClassNames*

A superclass containing instance variables and methods common to ImageReaderSpi 
and ImageWriterSpi. 


*java.lang.String[]_javax.imageio.spi.ImageReaderWriterSpi.extraStreamMetadataFormatNames*

A superclass containing instance variables and methods common to ImageReaderSpi 
and ImageWriterSpi. 


*java.lang.String[]_javax.imageio.spi.ImageReaderWriterSpi.MIMETypes*

A superclass containing instance variables and methods common to ImageReaderSpi 
and ImageWriterSpi. 


*java.lang.String[]_javax.imageio.spi.ImageReaderWriterSpi.names*

A superclass containing instance variables and methods common to ImageReaderSpi 
and ImageWriterSpi. 


*java.lang.String_javax.imageio.spi.ImageReaderWriterSpi.nativeImageMetadataFormatClassName*

A superclass containing instance variables and methods common to ImageReaderSpi 
and ImageWriterSpi. 


*java.lang.String_javax.imageio.spi.ImageReaderWriterSpi.nativeImageMetadataFormatName*

A superclass containing instance variables and methods common to ImageReaderSpi 
and ImageWriterSpi. 


*java.lang.String_javax.imageio.spi.ImageReaderWriterSpi.nativeStreamMetadataFormatClassName*

A superclass containing instance variables and methods common to ImageReaderSpi 
and ImageWriterSpi. 


*java.lang.String_javax.imageio.spi.ImageReaderWriterSpi.nativeStreamMetadataFormatName*

A superclass containing instance variables and methods common to ImageReaderSpi 
and ImageWriterSpi. 


*java.lang.String_javax.imageio.spi.ImageReaderWriterSpi.pluginClassName*

A superclass containing instance variables and methods common to ImageReaderSpi 
and ImageWriterSpi. 


*java.lang.String[]_javax.imageio.spi.ImageReaderWriterSpi.suffixes*

A superclass containing instance variables and methods common to ImageReaderSpi 
and ImageWriterSpi. 


*boolean_javax.imageio.spi.ImageReaderWriterSpi.supportsStandardImageMetadataFormat*

A superclass containing instance variables and methods common to ImageReaderSpi 
and ImageWriterSpi. 


*boolean_javax.imageio.spi.ImageReaderWriterSpi.supportsStandardStreamMetadataFormat*

A superclass containing instance variables and methods common to ImageReaderSpi 
and ImageWriterSpi. 



*javax.imageio.spi.ImageReaderWriterSpi()*

public ImageReaderWriterSpi()

Constructs a blank ImageReaderWriterSpi. It is up to the subclass to initialize 
instance variables and/or override method implementations in order to provide 
working versions of all methods. 


*javax.imageio.spi.ImageReaderWriterSpi(String,String,String[],String[],String[],String,boolean,String,String,String[],String[],boolean,String,String,String[],String[])*

public ImageReaderWriterSpi(
  java.lang.String vendorName,
  java.lang.String version,
  java.lang.String[] names,
  java.lang.String[] suffixes,
  java.lang.String[] MIMETypes,
  java.lang.String pluginClassName,
  boolean supportsStandardStreamMetadataFormat,
  java.lang.String nativeStreamMetadataFormatName,
  java.lang.String nativeStreamMetadataFormatClassName,
  java.lang.String[] extraStreamMetadataFormatNames,
  java.lang.String[] extraStreamMetadataFormatClassNames,
  boolean supportsStandardImageMetadataFormat,
  java.lang.String nativeImageMetadataFormatName,
  java.lang.String nativeImageMetadataFormatClassName,
  java.lang.String[] extraImageMetadataFormatNames,
  java.lang.String[] extraImageMetadataFormatClassNames)

Constructs an ImageReaderWriterSpi with a given set of values. 

    vendorName - the vendor name, as a non-null String. 
    version - a version identifier, as a non-null String. 
    names - a non-null array of Strings indicating the format names. At least one entry 
       must be present. 
    suffixes - an array of Strings indicating the common file suffixes. If no suffixes are 
       defined, null should be supplied. An array of length 0 will be 
       normalized to null. 
    MIMETypes - an array of Strings indicating the format's MIME types. If no MIME types are 
       defined, null should be supplied. An array of length 0 will be 
       normalized to null. 
    pluginClassName - the fully-qualified name of the associated ImageReader or ImageWriter class, as 
       a non-null String. 
    supportsStandardStreamMetadataFormat - a boolean that indicates whether a stream metadata object can use trees 
       described by the standard metadata format. 
    nativeStreamMetadataFormatName - a String, or null, to be returned from getNativeStreamMetadataFormatName. 
    nativeStreamMetadataFormatClassName - a String, or null, to be used to instantiate a metadata format object to be 
       returned from getNativeStreamMetadataFormat. 
    extraStreamMetadataFormatNames - an array of Strings, or null, to be returned from 
       getExtraStreamMetadataFormatNames. An array of length 0 is normalized to 
       null. 
    extraStreamMetadataFormatClassNames - an array of Strings, or null, to be used to instantiate a metadata format 
       object to be returned from getStreamMetadataFormat. An array of length 0 
       is normalized to null. 
    supportsStandardImageMetadataFormat - a boolean that indicates whether an image metadata object can use trees 
       described by the standard metadata format. 
    nativeImageMetadataFormatName - a String, or null, to be returned from getNativeImageMetadataFormatName. 
    nativeImageMetadataFormatClassName - a String, or null, to be used to instantiate a metadata format object to be 
       returned from getNativeImageMetadataFormat. 
    extraImageMetadataFormatNames - an array of Strings to be returned from getExtraImageMetadataFormatNames. An 
       array of length 0 is normalized to null. 
    extraImageMetadataFormatClassNames - an array of Strings, or null, to be used to instantiate a metadata format 
       object to be returned from getImageMetadataFormat. An array of length 0 
       is normalized to null. 

*javax.imageio.spi.ImageReaderWriterSpi.getExtraImageMetadataFormatNames()*

public |java.lang.String| getExtraImageMetadataFormatNames()

Returns an array of Strings containing the names of additional document 
formats, other than the native and standard formats, recognized by the 
getAsTree and setFromTree methods on the image metadata objects produced or 
consumed by this plug-in. 

If the plug-in does not handle image metadata, null should be returned. 

The set of formats may differ according to the particular images being read or 
written; this method should indicate all the additional formats supported by 
the plug-in under any circumstances. 

The default implementation returns a clone of the extraImageMetadataFormatNames 
instance variable, which is typically set by the constructor. 


    Returns: an array of Strings, or null. 
*javax.imageio.spi.ImageReaderWriterSpi.getExtraStreamMetadataFormatNames()*

public |java.lang.String| getExtraStreamMetadataFormatNames()

Returns an array of Strings containing the names of additional document 
formats, other than the native and standard formats, recognized by the 
getAsTree and setFromTree methods on the stream metadata objects produced or 
consumed by this plug-in. 

If the plug-in does not handle metadata, null should be returned. 

The set of formats may differ according to the particular images being read or 
written; this method should indicate all the additional formats supported by 
the plug-in under any circumstances. 

The default implementation returns a clone of the 
extraStreamMetadataFormatNames instance variable, which is typically set by the 
constructor. 


    Returns: an array of Strings, or null. 
*javax.imageio.spi.ImageReaderWriterSpi.getFileSuffixes()*

public |java.lang.String| getFileSuffixes()

Returns an array of Strings containing a list of file suffixes associated with 
the formats that are generally usable by the ImageReader or ImageWriter 
implementation associated with this service provider. For example, a single 
ImageReader might be able to process files with '.pbm' and '.pnm' suffixes, or 
both '.jpg' and '.jpeg' suffixes. If there are no known file suffixes, null 
will be returned. 

Returning a particular suffix does not guarantee that files with that suffix 
can be processed; it merely indicates that it may be worthwhile attempting to 
decode or encode such files using this service provider. 


    Returns: an array of Strings or length at least 1 containing common file suffixes 
             associated with this reader or writer, or null. 
*javax.imageio.spi.ImageReaderWriterSpi.getFormatNames()*

public |java.lang.String| getFormatNames()

Returns an array of Strings containing human-readable names for the formats 
that are generally usable by the ImageReader or ImageWriter implementation 
associated with this service provider. For example, a single ImageReader might 
be able to process both PBM and PNM files. 


    Returns: a non-null array of Strings or length at least 1 containing informal format 
             names associated with this reader or writer. 
*javax.imageio.spi.ImageReaderWriterSpi.getImageMetadataFormat(String)*

public |javax.imageio.metadata.IIOMetadataFormat| getImageMetadataFormat(java.lang.String formatName)

Returns an IIOMetadataFormat object describing the given image metadata format, 
or null if no description is available. The supplied name must be the native 
iamge metadata format name, the standard metadata format name, or one of those 
returned by getExtraImageMetadataFormatNames. 

    formatName - the desired image metadata format. 

    Returns: an IIOMetadataFormat object. 
*javax.imageio.spi.ImageReaderWriterSpi.getMIMETypes()*

public |java.lang.String| getMIMETypes()

Returns an array of Strings containing a list of MIME types associated with the 
formats that are generally usable by the ImageReader or ImageWriter 
implementation associated with this service provider. 

Ideally, only a single MIME type would be required in order to describe a 
particular format. However, for several reasons it is necessary to associate a 
list of types with each service provider. First, many common image file formats 
do not have standard MIME types, so a list of commonly used unofficial names 
will be required, such as image/x-pbm and image/x-portable-bitmap. Some file 
formats have official MIME types but may sometimes be referred to using their 
previous unofficial designations, such as image/x-png instead of the official 
image/png. Finally, a single service provider may be capable of parsing 
multiple distinct types from the MIME point of view, for example 
image/x-xbitmap and image/x-xpixmap. 

Returning a particular MIME type does not guarantee that files claiming to be 
of that type can be processed; it merely indicates that it may be worthwhile 
attempting to decode or encode such files using this service provider. 


    Returns: an array of Strings or length at least 1 containing MIME types associated with 
             this reader or writer, or null. 
*javax.imageio.spi.ImageReaderWriterSpi.getNativeImageMetadataFormatName()*

public |java.lang.String| getNativeImageMetadataFormatName()

Returns the name of the "native" image metadata format for this plug-in, which 
typically allows for lossless encoding and transmission of the image metadata 
stored in the format handled by this plug-in. If no such format is supported, 
nullwill be returned. 

The default implementation returns the nativeImageMetadataFormatName instance 
variable, which is typically set by the constructor. 


    Returns: the name of the native image metadata format, or null. 
*javax.imageio.spi.ImageReaderWriterSpi.getNativeStreamMetadataFormatName()*

public |java.lang.String| getNativeStreamMetadataFormatName()

Returns the name of the "native" stream metadata format for this plug-in, which 
typically allows for lossless encoding and transmission of the stream metadata 
stored in the format handled by this plug-in. If no such format is supported, 
nullwill be returned. 

The default implementation returns the nativeStreamMetadataFormatName instance 
variable, which is typically set by the constructor. 


    Returns: the name of the native stream metadata format, or null. 
*javax.imageio.spi.ImageReaderWriterSpi.getPluginClassName()*

public |java.lang.String| getPluginClassName()

Returns the fully-qualified class name of the ImageReader or ImageWriter 
plug-in associated with this service provider. 


    Returns: the class name, as a non-null String. 
*javax.imageio.spi.ImageReaderWriterSpi.getStreamMetadataFormat(String)*

public |javax.imageio.metadata.IIOMetadataFormat| getStreamMetadataFormat(java.lang.String formatName)

Returns an IIOMetadataFormat object describing the given stream metadata 
format, or null if no description is available. The supplied name must be the 
native stream metadata format name, the standard metadata format name, or one 
of those returned by getExtraStreamMetadataFormatNames. 

    formatName - the desired stream metadata format. 

    Returns: an IIOMetadataFormat object. 
*javax.imageio.spi.ImageReaderWriterSpi.isStandardImageMetadataFormatSupported()*

public boolean isStandardImageMetadataFormatSupported()

Returns true if the standard metadata format is among the document formats 
recognized by the getAsTree and setFromTree methods on the image metadata 
objects produced or consumed by this plug-in. 


    Returns: true if the standard format is supported for image metadata. 
*javax.imageio.spi.ImageReaderWriterSpi.isStandardStreamMetadataFormatSupported()*

public boolean isStandardStreamMetadataFormatSupported()

Returns true if the standard metadata format is among the document formats 
recognized by the getAsTree and setFromTree methods on the stream metadata 
objects produced or consumed by this plug-in. 


    Returns: true if the standard format is supported for stream metadata. 


*javax.swing.text.html.ImageView* *ImageView* View of an Image, intended to supp

public class ImageView
  extends    |javax.swing.text.View|

|javax.swing.text.html.ImageView_Description|
|javax.swing.text.html.ImageView_Fields|
|javax.swing.text.html.ImageView_Constructors|
|javax.swing.text.html.ImageView_Methods|

================================================================================

*javax.swing.text.html.ImageView_Constructors*
|javax.swing.text.html.ImageView(Element)|Creates a new view that represents an

*javax.swing.text.html.ImageView_Methods*
|javax.swing.text.html.ImageView.changedUpdate(DocumentEvent,Shape,ViewFactory)|
|javax.swing.text.html.ImageView.getAlignment(int)|Determines the desired align
|javax.swing.text.html.ImageView.getAltText()|Returns the text to display if th
|javax.swing.text.html.ImageView.getAttributes()|Fetches the attributes to use 
|javax.swing.text.html.ImageView.getImage()|Returns the image to render.
|javax.swing.text.html.ImageView.getImageURL()|Return a URL for the image sourc
|javax.swing.text.html.ImageView.getLoadingImageIcon()|Returns the icon to use 
|javax.swing.text.html.ImageView.getLoadsSynchronously()|Returns true if the im
|javax.swing.text.html.ImageView.getNoImageIcon()|Returns the icon to use if th
|javax.swing.text.html.ImageView.getPreferredSpan(int)|Determines the preferred
|javax.swing.text.html.ImageView.getStyleSheet()|Convenience method to get the 
|javax.swing.text.html.ImageView.getToolTipText(float,float,Shape)|For images t
|javax.swing.text.html.ImageView.modelToView(int,Shape,Position.Bias)|Provides 
|javax.swing.text.html.ImageView.paint(Graphics,Shape)|Paints the View.
|javax.swing.text.html.ImageView.setLoadsSynchronously(boolean)|Sets how the im
|javax.swing.text.html.ImageView.setParent(View)|Establishes the parent view fo
|javax.swing.text.html.ImageView.setPropertiesFromAttributes()|Update any cache
|javax.swing.text.html.ImageView.setSize(float,float)|Sets the size of the view
|javax.swing.text.html.ImageView.viewToModel(float,float,Shape,Position.Bias[])|

*javax.swing.text.html.ImageView_Description*

View of an Image, intended to support the HTML <IMG> tag. Supports scaling via 
the HEIGHT and WIDTH attributes of the tag. If the image is unable to be loaded 
any text specified via the ALT attribute will be rendered. 

While this class has been part of swing for a while now, it is public as of 
1.4. 


*javax.swing.text.html.ImageView(Element)*

public ImageView(javax.swing.text.Element elem)

Creates a new view that represents an IMG element. 

    elem - the element to create a view for 

*javax.swing.text.html.ImageView.changedUpdate(DocumentEvent,Shape,ViewFactory)*

public void changedUpdate(
  javax.swing.event.DocumentEvent e,
  java.awt.Shape a,
  javax.swing.text.ViewFactory f)

Invoked when the Elements attributes have changed. Recreates the image. 


*javax.swing.text.html.ImageView.getAlignment(int)*

public float getAlignment(int axis)

Determines the desired alignment for this view along an axis. This is 
implemented to give the alignment to the bottom of the icon along the y axis, 
and the default along the x axis. 

    axis - may be either X_AXIS or Y_AXIS 

    Returns: the desired alignment; this should be a value between 0.0 and 1.0 where 0 
             indicates alignment at the origin and 1.0 indicates alignment to 
             the full span away from the origin; an alignment of 0.5 would be 
             the center of the view 
*javax.swing.text.html.ImageView.getAltText()*

public |java.lang.String| getAltText()

Returns the text to display if the image can't be loaded. This is obtained from 
the Elements attribute set with the attribute name HTML.Attribute.ALT. 


*javax.swing.text.html.ImageView.getAttributes()*

public |javax.swing.text.AttributeSet| getAttributes()

Fetches the attributes to use when rendering. This is implemented to multiplex 
the attributes specified in the model with a StyleSheet. 


*javax.swing.text.html.ImageView.getImage()*

public |java.awt.Image| getImage()

Returns the image to render. 


*javax.swing.text.html.ImageView.getImageURL()*

public |java.net.URL| getImageURL()

Return a URL for the image source, or null if it could not be determined. 


*javax.swing.text.html.ImageView.getLoadingImageIcon()*

public |javax.swing.Icon| getLoadingImageIcon()

Returns the icon to use while in the process of loading the image. 


*javax.swing.text.html.ImageView.getLoadsSynchronously()*

public boolean getLoadsSynchronously()

Returns true if the image should be loaded when first asked for. 


*javax.swing.text.html.ImageView.getNoImageIcon()*

public |javax.swing.Icon| getNoImageIcon()

Returns the icon to use if the image couldn't be found. 


*javax.swing.text.html.ImageView.getPreferredSpan(int)*

public float getPreferredSpan(int axis)

Determines the preferred span for this view along an axis. 

    axis - may be either X_AXIS or Y_AXIS 

    Returns: the span the view would like to be rendered into; typically the view is told to 
             render into the span that is returned, although there is no 
             guarantee; the parent may choose to resize or break the view 
*javax.swing.text.html.ImageView.getStyleSheet()*

protected |javax.swing.text.html.StyleSheet| getStyleSheet()

Convenience method to get the StyleSheet. 


*javax.swing.text.html.ImageView.getToolTipText(float,float,Shape)*

public |java.lang.String| getToolTipText(
  float x,
  float y,
  java.awt.Shape allocation)

For images the tooltip text comes from text specified with the ALT attribute. 
This is overriden to return getAltText. 


*javax.swing.text.html.ImageView.modelToView(int,Shape,Position.Bias)*

public |java.awt.Shape| modelToView(
  int pos,
  java.awt.Shape a,
  javax.swing.text.Position.Bias b)
  throws |javax.swing.text.BadLocationException|
         
Provides a mapping from the document model coordinate space to the coordinate 
space of the view mapped to it. 

    pos - the position to convert 
    a - the allocated region to render into 

    Returns: the bounding box of the given position 
*javax.swing.text.html.ImageView.paint(Graphics,Shape)*

public void paint(
  java.awt.Graphics g,
  java.awt.Shape a)

Paints the View. 

    g - the rendering surface to use 
    a - the allocated region to render into 

*javax.swing.text.html.ImageView.setLoadsSynchronously(boolean)*

public void setLoadsSynchronously(boolean newValue)

Sets how the image is loaded. If newValue is true, the image we be loaded when 
first asked for, otherwise it will be loaded asynchronously. The default is to 
not load synchronously, that is to load the image asynchronously. 


*javax.swing.text.html.ImageView.setParent(View)*

public void setParent(javax.swing.text.View parent)

Establishes the parent view for this view. Seize this moment to cache the AWT 
Container I'm in. 


*javax.swing.text.html.ImageView.setPropertiesFromAttributes()*

protected void setPropertiesFromAttributes()

Update any cached values that come from attributes. 


*javax.swing.text.html.ImageView.setSize(float,float)*

public void setSize(
  float width,
  float height)

Sets the size of the view. This should cause layout of the view if it has any 
layout duties. 

    width - the width >= 0 
    height - the height >= 0 

*javax.swing.text.html.ImageView.viewToModel(float,float,Shape,Position.Bias[])*

public int viewToModel(
  float x,
  float y,
  java.awt.Shape a,
  javax.swing.text.Position.Bias[] bias)

Provides a mapping from the view coordinate space to the logical coordinate 
space of the model. 

    x - the X coordinate 
    y - the Y coordinate 
    a - the allocated region to render into 

    Returns: the location within the model that best represents the given point of view 


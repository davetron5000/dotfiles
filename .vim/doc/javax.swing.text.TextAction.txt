*javax.swing.text.TextAction* *TextAction* An Action implementation useful for k

public abstract class TextAction
  extends    |javax.swing.AbstractAction|

|javax.swing.text.TextAction_Description|
|javax.swing.text.TextAction_Fields|
|javax.swing.text.TextAction_Constructors|
|javax.swing.text.TextAction_Methods|

================================================================================

*javax.swing.text.TextAction_Constructors*
|javax.swing.text.TextAction(String)|Creates a new JTextAction object.

*javax.swing.text.TextAction_Methods*
|javax.swing.text.TextAction.augmentList(Action[],Action[])|Takes one list of  
|javax.swing.text.TextAction.getFocusedComponent()|Fetches the text component t
|javax.swing.text.TextAction.getTextComponent(ActionEvent)|Determines the compo

*javax.swing.text.TextAction_Description*

An Action implementation useful for key bindings that are shared across a 
number of different text components. Because the action is shared, it must have 
a way of getting it's target to act upon. This class provides support to try 
and find a text component to operate on. The preferred way of getting the 
component to act upon is through the ActionEvent that is received. If the 
Object returned by getSource can be narrowed to a text component, it will be 
used. If the action event is null or can't be narrowed, the last focused text 
component is tried. This is determined by being used in conjunction with a 
JTextController which arranges to share that information with a TextAction. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.text.TextAction(String)*

public TextAction(java.lang.String name)

Creates a new JTextAction object. 

    name - the name of the action 

*javax.swing.text.TextAction.augmentList(Action[],Action[])*

public static final |javax.swing.Action| augmentList(
  javax.swing.Action[] list1,
  javax.swing.Action[] list2)

Takes one list of commands and augments it with another list of commands. The 
second list takes precedence over the first list; that is, when both lists 
contain a command with the same name, the command from the second list is used. 

    list1 - the first list, may be empty but not null 
    list2 - the second list, may be empty but not null 

    Returns: the augmented list 
*javax.swing.text.TextAction.getFocusedComponent()*

protected final |javax.swing.text.JTextComponent| getFocusedComponent()

Fetches the text component that currently has focus. This allows actions to be 
shared across text components which is useful for key-bindings where a large 
set of actions are defined, but generally used the same way across many 
different components. 


    Returns: the component 
*javax.swing.text.TextAction.getTextComponent(ActionEvent)*

protected final |javax.swing.text.JTextComponent| getTextComponent(java.awt.event.ActionEvent e)

Determines the component to use for the action. This if fetched from the source 
of the ActionEvent if it's not null and can be narrowed. Otherwise, the last 
focused component is used. 

    e - the ActionEvent 

    Returns: the component 


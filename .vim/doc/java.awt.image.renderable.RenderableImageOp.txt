*java.awt.image.renderable.RenderableImageOp* *RenderableImageOp* This class han

public class RenderableImageOp
  extends    |java.lang.Object|
  implements |java.awt.image.renderable.RenderableImage|

|java.awt.image.renderable.RenderableImageOp_Description|
|java.awt.image.renderable.RenderableImageOp_Fields|
|java.awt.image.renderable.RenderableImageOp_Constructors|
|java.awt.image.renderable.RenderableImageOp_Methods|

================================================================================

*java.awt.image.renderable.RenderableImageOp_Constructors*
|java.awt.image.renderable.RenderableImageOp(ContextualRenderedImageFactory,ParameterBlock)|

*java.awt.image.renderable.RenderableImageOp_Methods*
|java.awt.image.renderable.RenderableImageOp.createDefaultRendering()|Gets a Re
|java.awt.image.renderable.RenderableImageOp.createRendering(RenderContext)|Cre
|java.awt.image.renderable.RenderableImageOp.createScaledRendering(int,int,RenderingHints)|
|java.awt.image.renderable.RenderableImageOp.getHeight()|Gets the height in use
|java.awt.image.renderable.RenderableImageOp.getMinX()|Gets the minimum X coord
|java.awt.image.renderable.RenderableImageOp.getMinY()|Gets the minimum Y coord
|java.awt.image.renderable.RenderableImageOp.getParameterBlock()|Returns a refe
|java.awt.image.renderable.RenderableImageOp.getProperty(String)|Gets a propert
|java.awt.image.renderable.RenderableImageOp.getPropertyNames()|Return a list o
|java.awt.image.renderable.RenderableImageOp.getSources()|Returns a vector of R
|java.awt.image.renderable.RenderableImageOp.getWidth()|Gets the width in user 
|java.awt.image.renderable.RenderableImageOp.isDynamic()|Returns true if succes
|java.awt.image.renderable.RenderableImageOp.setParameterBlock(ParameterBlock)|

*java.awt.image.renderable.RenderableImageOp_Description*

This class handles the renderable aspects of an operation with help from its 
associated instance of a ContextualRenderedImageFactory. 


*java.awt.image.renderable.RenderableImageOp(ContextualRenderedImageFactory,ParameterBlock)*

public RenderableImageOp(
  java.awt.image.renderable.ContextualRenderedImageFactory CRIF,
  java.awt.image.renderable.ParameterBlock paramBlock)

Constructs a RenderedImageOp given a ContextualRenderedImageFactory object, and 
a ParameterBlock containing RenderableImage sources and other parameters. Any 
RenderedImage sources referenced by the ParameterBlock will be ignored. 

    CRIF - a ContextualRenderedImageFactory object 
    paramBlock - a ParameterBlock containing this operation's source images and other parameters 
       necessary for the operation to run. 

*java.awt.image.renderable.RenderableImageOp.createDefaultRendering()*

public |java.awt.image.RenderedImage| createDefaultRendering()

Gets a RenderedImage instance of this image with a default width and height in 
pixels. The RenderContext is built automatically with an appropriate usr2dev 
transform and an area of interest of the full image. All the rendering hints 
come from hints passed in. Implementors of this interface must be sure that 
there is a defined default width and height. 


    Returns: a RenderedImage containing the rendered data. 
*java.awt.image.renderable.RenderableImageOp.createRendering(RenderContext)*

public |java.awt.image.RenderedImage| createRendering(java.awt.image.renderable.RenderContext renderContext)

Creates a RenderedImage which represents this RenderableImageOp (including its 
Renderable sources) rendered according to the given RenderContext. 

This method supports chaining of either Renderable or RenderedImage operations. 
If sources in the ParameterBlock used to construct the RenderableImageOp are 
RenderableImages, then a three step process is followed: 

mapRenderContext() is called on the associated CRIF for each RenderableImage 
source; createRendering() is called on each of the RenderableImage sources 
using the backwards-mapped RenderContexts obtained in step 1, resulting in a 
rendering of each source; ContextualRenderedImageFactory.create() is called 
with a new ParameterBlock containing the parameters of the RenderableImageOp 
and the RenderedImages that were created by the createRendering() calls. 

If the elements of the source Vector of the ParameterBlock used to construct 
the RenderableImageOp are instances of RenderedImage, then the CRIF.create() 
method is called immediately using the original ParameterBlock. This provides a 
basis case for the recursion. 

The created RenderedImage may have a property identified by the String 
HINTS_OBSERVED to indicate which RenderingHints (from the RenderContext) were 
used to create the image. In addition any RenderedImages that are obtained via 
the getSources() method on the created RenderedImage may have such a property. 

    renderContext - The RenderContext to use to perform the rendering. 

    Returns: a RenderedImage containing the desired output image. 
*java.awt.image.renderable.RenderableImageOp.createScaledRendering(int,int,RenderingHints)*

public |java.awt.image.RenderedImage| createScaledRendering(
  int w,
  int h,
  java.awt.RenderingHints hints)

Creates a RenderedImage instance of this image with width w, and height h in 
pixels. The RenderContext is built automatically with an appropriate usr2dev 
transform and an area of interest of the full image. All the rendering hints 
come from hints passed in. 

If w == 0, it will be taken to equal Math.round(h*(getWidth()/getHeight())). 
Similarly, if h == 0, it will be taken to equal 
Math.round(w*(getHeight()/getWidth())). One of w or h must be non-zero or else 
an IllegalArgumentException will be thrown. 

The created RenderedImage may have a property identified by the String 
HINTS_OBSERVED to indicate which RenderingHints were used to create the image. 
In addition any RenderedImages that are obtained via the getSources() method on 
the created RenderedImage may have such a property. 

    w - the width of rendered image in pixels, or 0. 
    h - the height of rendered image in pixels, or 0. 
    hints - a RenderingHints object containg hints. 

    Returns: a RenderedImage containing the rendered data. 
*java.awt.image.renderable.RenderableImageOp.getHeight()*

public float getHeight()

Gets the height in user coordinate space. By convention, the usual height of a 
RenderedImage is equal to 1.0F. 


    Returns: the height of the image in user coordinates. 
*java.awt.image.renderable.RenderableImageOp.getMinX()*

public float getMinX()

Gets the minimum X coordinate of the rendering-independent image data. 


*java.awt.image.renderable.RenderableImageOp.getMinY()*

public float getMinY()

Gets the minimum Y coordinate of the rendering-independent image data. 


*java.awt.image.renderable.RenderableImageOp.getParameterBlock()*

public |java.awt.image.renderable.ParameterBlock| getParameterBlock()

Returns a reference to the current parameter block. 


    Returns: the ParameterBlock of this RenderableImageOp. 
*java.awt.image.renderable.RenderableImageOp.getProperty(String)*

public |java.lang.Object| getProperty(java.lang.String name)

Gets a property from the property set of this image. If the property name is 
not recognized, java.awt.Image.UndefinedProperty will be returned. 

    name - the name of the property to get, as a String. 

    Returns: a reference to the property Object, or the value 
             java.awt.Image.UndefinedProperty. 
*java.awt.image.renderable.RenderableImageOp.getPropertyNames()*

public |java.lang.String| getPropertyNames()

Return a list of names recognized by getProperty. 


    Returns: a list of property names. 
*java.awt.image.renderable.RenderableImageOp.getSources()*

public |java.util.Vector| getSources()

Returns a vector of RenderableImages that are the sources of image data for 
this RenderableImage. Note that this method may return an empty vector, to 
indicate that the image has no sources, or null, to indicate that no 
information is available. 


    Returns: a (possibly empty) Vector of RenderableImages, or null. 
*java.awt.image.renderable.RenderableImageOp.getWidth()*

public float getWidth()

Gets the width in user coordinate space. By convention, the usual width of a 
RenderableImage is equal to the image's aspect ratio (width divided by height). 


    Returns: the width of the image in user coordinates. 
*java.awt.image.renderable.RenderableImageOp.isDynamic()*

public boolean isDynamic()

Returns true if successive renderings (that is, calls to createRendering() or 
createScaledRendering()) with the same arguments may produce different results. 
This method may be used to determine whether an existing rendering may be 
cached and reused. The CRIF's isDynamic method will be called. 


    Returns: true if successive renderings with the same arguments might produce different 
             results; false otherwise. 
*java.awt.image.renderable.RenderableImageOp.setParameterBlock(ParameterBlock)*

public |java.awt.image.renderable.ParameterBlock| setParameterBlock(java.awt.image.renderable.ParameterBlock paramBlock)

Change the current ParameterBlock of the operation, allowing editing of image 
rendering chains. The effects of such a change will be visible when a new 
rendering is created from this RenderableImageOp or any dependent 
RenderableImageOp. 

    paramBlock - the new ParameterBlock. 

    Returns: the old ParameterBlock. 


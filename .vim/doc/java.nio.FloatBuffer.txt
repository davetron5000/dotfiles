*java.nio.FloatBuffer* *FloatBuffer* A float buffer.

public abstract class FloatBuffer
  extends    |java.nio.Buffer|
  implements |java.lang.Comparable|

|java.nio.FloatBuffer_Description|
|java.nio.FloatBuffer_Fields|
|java.nio.FloatBuffer_Constructors|
|java.nio.FloatBuffer_Methods|

====================================================================================================================================================================================

*java.nio.FloatBuffer_Methods*
|java.nio.FloatBuffer.allocate(int)|Allocates a new float buffer.
|java.nio.FloatBuffer.array()|Returns the float array that backs this  buffer(optional operation).
|java.nio.FloatBuffer.arrayOffset()|Returns the offset within this buffer's backing array of the first  element of the buffer(optional operation).
|java.nio.FloatBuffer.asReadOnlyBuffer()|Creates a new, read-only float buffer that shares this buffer's  content.
|java.nio.FloatBuffer.compact()|Compacts this buffer(optional operation).
|java.nio.FloatBuffer.compareTo(FloatBuffer)|Compares this buffer to another.
|java.nio.FloatBuffer.duplicate()|Creates a new float buffer that shares this buffer's content.
|java.nio.FloatBuffer.equals(Object)|Tells whether or not this buffer is equal to another object.
|java.nio.FloatBuffer.get()|Relative get method.
|java.nio.FloatBuffer.get(float[])|Relative bulk get method.
|java.nio.FloatBuffer.get(float[],int,int)|Relative bulk get method.
|java.nio.FloatBuffer.get(int)|Absolute get method.
|java.nio.FloatBuffer.hasArray()|Tells whether or not this buffer is backed by an accessible float  array.
|java.nio.FloatBuffer.hashCode()|Returns the current hash code of this buffer.
|java.nio.FloatBuffer.isDirect()|Tells whether or not this float buffer is direct.
|java.nio.FloatBuffer.order()|Retrieves this buffer's byte order.
|java.nio.FloatBuffer.put(float)|Relative put method(optional operation).
|java.nio.FloatBuffer.put(float[])|Relative bulk put method(optional operation).
|java.nio.FloatBuffer.put(float[],int,int)|Relative bulk put method(optional operation).
|java.nio.FloatBuffer.put(FloatBuffer)|Relative bulk put method(optional operation).
|java.nio.FloatBuffer.put(int,float)|Absolute put method(optional operation).
|java.nio.FloatBuffer.slice()|Creates a new float buffer whose content is a shared subsequence of  this buffer's content.
|java.nio.FloatBuffer.toString()|Returns a string summarizing the state of this buffer.
|java.nio.FloatBuffer.wrap(float[])|Wraps a float array into a buffer.
|java.nio.FloatBuffer.wrap(float[],int,int)|Wraps a float array into a buffer.

*java.nio.FloatBuffer_Description*

A float buffer. 

This class defines four categories of operations upon float buffers: 



Absolute and relative </code><i>get</i><code>(|java.nio.FloatBuffer|) and </code><i>put</i><code>(|java.nio.FloatBuffer|) methods that read and write single floats; 

Relative </code><i>bulk get</i><code>(|java.nio.FloatBuffer|) methods that transfer contiguous sequences of floats from this buffer into an array; and 

Relative </code><i>bulk put</i><code>(|java.nio.FloatBuffer|) methods that transfer contiguous sequences of floats from a float array or some other float buffer into this 
buffer;and 

Methods for </code>compacting<code>(|java.nio.FloatBuffer|) , </code>duplicating<code>(|java.nio.FloatBuffer|) , and </code>slicing<code>(|java.nio.FloatBuffer|) a float buffer. 



Float buffers can be created either by </code><i>allocation</i><code>(|java.nio.FloatBuffer|) , which allocates space for the buffer's 

content, by </code><i>wrapping</i><code>(|java.nio.FloatBuffer|) an existing float array into a buffer, or by creating a view of an existing byte buffer 

Like a byte buffer, a float buffer is either direct or non-direct. A float buffer created via the wrap methods of this class will be non-direct. A float buffer created as a view 
of a byte buffer will be direct if, and only if, the byte buffer itself is direct. Whether or not a float buffer is direct may be determined by invoking the 
isDirect(|java.nio.FloatBuffer|) method. 

Methods in this class that do not otherwise have a value to return are specified to return the buffer upon which they are invoked. This allows method invocations to be chained. 



*java.nio.FloatBuffer.allocate(int)*

public static |java.nio.FloatBuffer| allocate(int capacity)

Allocates a new float buffer. 

The new buffer's position will be zero, its limit will be its capacity, and its mark will be undefined. It will have a </code>backing array<code>(|java.nio.FloatBuffer|) , and its 
</code>array offset<code>(|java.nio.FloatBuffer|) will be zero. 


    capacity - The new buffer's capacity, in floats 

    Returns: The new float buffer 

*java.nio.FloatBuffer.array()*

public final float[] array()

Returns the float array that backs this buffer(optional operation). 

Modifications to this buffer's content will cause the returned array's content to be modified, and vice versa. 

Invoke the hasArray(|java.nio.FloatBuffer|) method before invoking this method in order to ensure that this buffer has an accessible backing array. 



    Returns: The array that backs this buffer 

*java.nio.FloatBuffer.arrayOffset()*

public final int arrayOffset()

Returns the offset within this buffer's backing array of the first element of the buffer(optional operation). 

If this buffer is backed by an array then buffer position p corresponds to array index p+arrayOffset(). 

Invoke the hasArray(|java.nio.FloatBuffer|) method before invoking this method in order to ensure that this buffer has an accessible backing array. 



    Returns: The offset within this buffer's array of the first element of the buffer 

*java.nio.FloatBuffer.asReadOnlyBuffer()*

public abstract |java.nio.FloatBuffer| asReadOnlyBuffer()

Creates a new, read-only float buffer that shares this buffer's content. 

The content of the new buffer will be that of this buffer. Changes to this buffer's content will be visible in the new buffer; the new buffer itself, however, will be read-only 
and will not allow the shared content to be modified. The two buffers' position, limit, and mark values will be independent. 

The new buffer's capacity, limit, position, and mark values will be identical to those of this buffer. 

If this buffer is itself read-only then this method behaves in exactly the same way as the duplicate(|java.nio.FloatBuffer|) method. 



    Returns: The new, read-only float buffer 

*java.nio.FloatBuffer.compact()*

public abstract |java.nio.FloatBuffer| compact()

Compacts this buffer(optional operation). 

The floats between the buffer's current position and its limit, if any, are copied to the beginning of the buffer. That is, the float at index p=position() is copied to index 
zero, the float at index p+1 is copied to index one, and so forth until the float at index limit()-1 is copied to index n=limit()-1-p. The buffer's position is then set to n+1 and 
its limit is set to its capacity. The mark, if defined, is discarded. 

The buffer's position is set to the number of floats copied, rather than to zero, so that an invocation of this method can be followed immediately by an invocation of another 
relative put method. 



    Returns: 

*java.nio.FloatBuffer.compareTo(FloatBuffer)*

public int compareTo(java.nio.FloatBuffer that)

Compares this buffer to another. 

Two float buffers are compared by comparing their sequences of remaining elements lexicographically, without regard to the starting position of each sequence within its 
corresponding buffer. 

A float buffer is not comparable to any other type of object. 



    Returns: A negative integer, zero, or a positive integer as this buffer is less than, equal to, or greater than the given buffer 

*java.nio.FloatBuffer.duplicate()*

public abstract |java.nio.FloatBuffer| duplicate()

Creates a new float buffer that shares this buffer's content. 

The content of the new buffer will be that of this buffer. Changes to this buffer's content will be visible in the new buffer, and vice versa; the two buffers' position, limit, 
and mark values will be independent. 

The new buffer's capacity, limit, position, and mark values will be identical to those of this buffer. The new buffer will be direct if, and only if, this buffer is direct, and it 
will be read-only if, and only if, this buffer is read-only. 



    Returns: The new float buffer 

*java.nio.FloatBuffer.equals(Object)*

public boolean equals(java.lang.Object ob)

Tells whether or not this buffer is equal to another object. 

Two float buffers are equal if, and only if, 



They have the same element type, 

They have the same number of remaining elements, and 

The two sequences of remaining elements, considered independently of their starting positions, are pointwise equal. 



A float buffer is not equal to any other type of object. 


    ob - The object to which this buffer is to be compared 

    Returns: true if, and only if, this buffer is equal to the given object 

*java.nio.FloatBuffer.get()*

public abstract float get()

Relative get method. Reads the float at this buffer's current position, and then increments the position. 



    Returns: The float at the buffer's current position 

*java.nio.FloatBuffer.get(float[])*

public |java.nio.FloatBuffer| get(float[] dst)

Relative bulk get method. 

This method transfers floats from this buffer into the given destination array. An invocation of this method of the form src.get(a) behaves in exactly the same way as the 
invocation 



src.get(a, 0, a.length) 



    Returns: 

*java.nio.FloatBuffer.get(float[],int,int)*

public |java.nio.FloatBuffer| get(
  float[] dst,
  int offset,
  int length)

Relative bulk get method. 

This method transfers floats from this buffer into the given destination array. If there are fewer floats remaining in the buffer than are required to satisfy the request, that 
is, if length>remaining(), then no floats are transferred and a (|java.nio.BufferUnderflowException|) is thrown. 

Otherwise, this method copies length floats from this buffer into the given array, starting at the current position of this buffer and at the given offset in the array. The 
position of this buffer is then incremented by length. 

In other words, an invocation of this method of the form src.get(dst,off,len) has exactly the same effect as the loop 



for (int i = off; i 


    dst - The array into which floats are to be written 
    offset - The offset within the array of the first float to be written; must be non-negative and no larger than dst.length 
    length - The maximum number of floats to be written to the given array; must be non-negative and no larger than dst.length - offset 

    Returns: 

*java.nio.FloatBuffer.get(int)*

public abstract float get(int index)

Absolute get method. Reads the float at the given index. 


    index - The index from which the float will be read 

    Returns: The float at the given index 

*java.nio.FloatBuffer.hasArray()*

public final boolean hasArray()

Tells whether or not this buffer is backed by an accessible float array. 

If this method returns true then the array(|java.nio.FloatBuffer|) and arrayOffset(|java.nio.FloatBuffer|) methods may safely be invoked. 



    Returns: true if, and only if, this buffer is backed by an array and is not read-only 

*java.nio.FloatBuffer.hashCode()*

public int hashCode()

Returns the current hash code of this buffer. 

The hash code of a float buffer depends only upon its remaining elements; that is, upon the elements from position() up to, and including, the element at limit()-1. 

Because buffer hash codes are content-dependent, it is inadvisable to use buffers as keys in hash maps or similar data structures unless it is known that their contents will not 
change. 



    Returns: The current hash code of this buffer 

*java.nio.FloatBuffer.isDirect()*

public abstract boolean isDirect()

Tells whether or not this float buffer is direct. 



    Returns: true if, and only if, this buffer is direct 

*java.nio.FloatBuffer.order()*

public abstract |java.nio.ByteOrder| order()

Retrieves this buffer's byte order. 

The byte order of a float buffer created by allocation or by wrapping an existing float array is the </code>native order<code>(|java.nio.ByteOrder|) of the underlying hardware. 
The byte order of a float buffer created as a view of a byte buffer is that of the byte buffer at the moment that the view is created. 



    Returns: This buffer's byte order 

*java.nio.FloatBuffer.put(float)*

public abstract |java.nio.FloatBuffer| put(float f)

Relative put method(optional operation). 

Writes the given float into this buffer at the current position, and then increments the position. 


    f - The float to be written 

    Returns: 

*java.nio.FloatBuffer.put(float[])*

public final |java.nio.FloatBuffer| put(float[] src)

Relative bulk put method(optional operation). 

This method transfers the entire content of the given source float array into this buffer. An invocation of this method of the form dst.put(a) behaves in exactly the same way as 
the invocation 



dst.put(a, 0, a.length) 



    Returns: 

*java.nio.FloatBuffer.put(float[],int,int)*

public |java.nio.FloatBuffer| put(
  float[] src,
  int offset,
  int length)

Relative bulk put method(optional operation). 

This method transfers floats into this buffer from the given source array. If there are more floats to be copied from the array than remain in this buffer, that is, if 
length>remaining(), then no floats are transferred and a (|java.nio.BufferOverflowException|) is thrown. 

Otherwise, this method copies length floats from the given array into this buffer, starting at the given offset in the array and at the current position of this buffer. The 
position of this buffer is then incremented by length. 

In other words, an invocation of this method of the form dst.put(src,off,len) has exactly the same effect as the loop 



for (int i = off; i 


    src - The array from which floats are to be read 
    offset - The offset within the array of the first float to be read; must be non-negative and no larger than array.length 
    length - The number of floats to be read from the given array; must be non-negative and no larger than array.length - offset 

    Returns: 

*java.nio.FloatBuffer.put(FloatBuffer)*

public |java.nio.FloatBuffer| put(java.nio.FloatBuffer src)

Relative bulk put method(optional operation). 

This method transfers the floats remaining in the given source buffer into this buffer. If there are more floats remaining in the source buffer than in this buffer, that is, if 
src.remaining()>remaining(), then no floats are transferred and a (|java.nio.BufferOverflowException|) is thrown. 

Otherwise, this method copies n=src.remaining() floats from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then 
incremented by n. 

In other words, an invocation of this method of the form dst.put(src) has exactly the same effect as the loop 



while (src.hasRemaining()) dst.put(src.get()); 

except that it first checks that there is sufficient space in this buffer and it is potentially much more efficient. 


    src - The source buffer from which floats are to be read; must not be this buffer 

    Returns: 

*java.nio.FloatBuffer.put(int,float)*

public abstract |java.nio.FloatBuffer| put(
  int index,
  float f)

Absolute put method(optional operation). 

Writes the given float into this buffer at the given index. 


    index - The index at which the float will be written 
    f - The float value to be written 

    Returns: 

*java.nio.FloatBuffer.slice()*

public abstract |java.nio.FloatBuffer| slice()

Creates a new float buffer whose content is a shared subsequence of this buffer's content. 

The content of the new buffer will start at this buffer's current position. Changes to this buffer's content will be visible in the new buffer, and vice versa; the two buffers' 
position, limit, and mark values will be independent. 

The new buffer's position will be zero, its capacity and its limit will be the number of floats remaining in this buffer, and its mark will be undefined. The new buffer will be 
direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only. 



    Returns: The new float buffer 

*java.nio.FloatBuffer.toString()*

public |java.lang.String| toString()

Returns a string summarizing the state of this buffer. 



    Returns: A summary string 

*java.nio.FloatBuffer.wrap(float[])*

public static |java.nio.FloatBuffer| wrap(float[] array)

Wraps a float array into a buffer. 

The new buffer will be backed by the given float array; that is, modifications to the buffer will cause the array to be modified and vice versa. The new buffer's capacity and 
limit will be array.length, its position will be zero, and its mark will be undefined. Its </code>backing array<code>(|java.nio.FloatBuffer|) will be the given array, and its 
</code>array offset<code>(|java.nio.FloatBuffer|) will be zero. 


    array - The array that will back this buffer 

    Returns: The new float buffer 

*java.nio.FloatBuffer.wrap(float[],int,int)*

public static |java.nio.FloatBuffer| wrap(
  float[] array,
  int offset,
  int length)

Wraps a float array into a buffer. 

The new buffer will be backed by the given float array; that is, modifications to the buffer will cause the array to be modified and vice versa. The new buffer's capacity will be 
array.length, its position will be offset, its limit will be offset + length, and its mark will be undefined. Its </code>backing array<code>(|java.nio.FloatBuffer|) will be the 
given array, and its </code>array offset<code>(|java.nio.FloatBuffer|) will be zero. 


    array - The array that will back the new buffer 
    offset - The offset of the subarray to be used; must be non-negative and no larger than array.length. The new buffer's position will be set to this value. 
    length - The length of the subarray to be used; must be non-negative and no larger than array.length - offset. The new buffer's limit will be set to offset + length. 

    Returns: The new float buffer 



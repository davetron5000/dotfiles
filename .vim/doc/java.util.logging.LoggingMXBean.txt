*java.util.logging.LoggingMXBean* *LoggingMXBean* The management interface for t

public interface interface LoggingMXBean


|java.util.logging.LoggingMXBean_Description|
|java.util.logging.LoggingMXBean_Fields|
|java.util.logging.LoggingMXBean_Constructors|
|java.util.logging.LoggingMXBean_Methods|

================================================================================

*java.util.logging.LoggingMXBean_Methods*
|java.util.logging.LoggingMXBean.getLoggerLevel(String)|Gets the name of the lo
|java.util.logging.LoggingMXBean.getLoggerNames()|Returns the list of currently
|java.util.logging.LoggingMXBean.getParentLoggerName(String)|Returns the name o
|java.util.logging.LoggingMXBean.setLoggerLevel(String,String)|Sets the specifi

*java.util.logging.LoggingMXBean_Description*

The management interface for the logging facility. 

There is a single global instance of the LoggingMXBean. This instance is an 
MXBean can be obtained by calling the (|java.util.logging.LogManager|) method 
or from the platform 
<tt>MBeanServer</tt>(|java.lang.management.ManagementFactory|) method. 

The ObjectName(|javax.management.ObjectName|) for uniquely identifying the 
LoggingMXBean within an MBeanServer is: 
<tt>java.util.logging:type=Logging</tt>(|java.util.logging.LogManager|) 


*java.util.logging.LoggingMXBean.getLoggerLevel(String)*

public |java.lang.String| getLoggerLevel(java.lang.String loggerName)

Gets the name of the log level associated with the specified logger. If the 
specified logger does not exist, null is returned. This method first finds the 
logger of the given name and then returns the name of the log level by calling: 
Logger.getLevel()(|java.util.logging.Logger|) . 
getName()(|java.util.logging.Level|) ; 



If the Level of the specified logger is null, which means that this logger's 
effective level is inherited from its parent, an empty string will be returned. 

    loggerName - The name of the Logger to be retrieved. 

    Returns: The name of the log level of the specified logger; or an empty string if the 
             log level of the specified logger is null. If the specified logger 
             does not exist, null is returned. 
*java.util.logging.LoggingMXBean.getLoggerNames()*

public |java.util.List| getLoggerNames()

Returns the list of currently registered loggers. This method calls 
(|java.util.logging.LogManager|) and returns a list of the logger names. 


    Returns: A list of String each of which is a currently registered Logger name. 
*java.util.logging.LoggingMXBean.getParentLoggerName(String)*

public |java.lang.String| getParentLoggerName(java.lang.String loggerName)

Returns the name of the parent for the specified logger. If the specified 
logger does not exist, null is returned. If the specified logger is the root 
Logger in the namespace, the result will be an empty string. 

    loggerName - The name of a Logger. 

    Returns: the name of the nearest existing parent logger; an empty string if the 
             specified logger is the root logger. If the specified logger does 
             not exist, null is returned. 
*java.util.logging.LoggingMXBean.setLoggerLevel(String,String)*

public void setLoggerLevel(
  java.lang.String loggerName,
  java.lang.String levelName)

Sets the specified logger to the specified new level. If the levelName is not 
null, the level of the specified logger is set to the parsed Level matching the 
levelName. If the levelName is null, the level of the specified logger is set 
to null and the effective level of the logger is inherited from its nearest 
ancestor with a specific (non-null) level value. 

    loggerName - The name of the Logger to be set. Must be non-null. 
    levelName - The name of the level to set the specified logger to, or null if to set the 
       level to inherit from its nearest ancestor. 



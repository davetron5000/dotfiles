*java.lang.Short* *Short* The Short class wraps a value of primitive type
 short

public final class Short
  extends    |java.lang.Number|
  implements |java.lang.Comparable|

|java.lang.Short_Description|
|java.lang.Short_Fields|
|java.lang.Short_Constructors|
|java.lang.Short_Methods|

================================================================================

*java.lang.Short_Fields*
|short_java.lang.Short.MAX_VALUE|
|short_java.lang.Short.MIN_VALUE|
|int_java.lang.Short.SIZE|
|java.lang.Class_java.lang.Short.TYPE|

*java.lang.Short_Constructors*
|java.lang.Short(short)|Constructs a newly allocated Short object that  represe
|java.lang.Short(String)|Constructs a newly allocated Short object that  repres

*java.lang.Short_Methods*
|java.lang.Short.byteValue()|Returns the value of this Short as a  byte.
|java.lang.Short.compareTo(Short)|Compares two Short objects numerically.
|java.lang.Short.decode(String)|Decodes a String into a Short.
|java.lang.Short.doubleValue()|Returns the value of this Short as a  double.
|java.lang.Short.equals(Object)|Compares this object to the specified object.
|java.lang.Short.floatValue()|Returns the value of this Short as a  float.
|java.lang.Short.hashCode()|Returns a hash code for this Short.
|java.lang.Short.intValue()|Returns the value of this Short as an  int.
|java.lang.Short.longValue()|Returns the value of this Short as a  long.
|java.lang.Short.parseShort(String)|Parses the string argument as a signed deci
|java.lang.Short.parseShort(String,int)|Parses the string argument as a signed 
|java.lang.Short.reverseBytes(short)|Returns the value obtained by reversing th
|java.lang.Short.shortValue()|Returns the value of this Short as a  short.
|java.lang.Short.toString()|Returns a String object representing this  Short's 
|java.lang.Short.toString(short)|Returns a new String object representing the  
|java.lang.Short.valueOf(short)|Returns a Short instance representing the speci
|java.lang.Short.valueOf(String)|Returns a Short object holding the  value give
|java.lang.Short.valueOf(String,int)|Returns a Short object holding the value  

*java.lang.Short_Description*

The Short class wraps a value of primitive type short in an object. An object 
of type Short contains a single field whose type is short. 



In addition, this class provides several methods for converting a short to a 
String and a String to a short, as well as other constants and methods useful 
when dealing with a short. 


*short_java.lang.Short.MAX_VALUE*

The Short class wraps a value of primitive type short in an object. An object 
of type Short contains a single field whose type is short. 



In addition, this class provides several methods for converting a short to a 
String and a String to a short, as well as other constants and methods useful 
when dealing with a short. 


*short_java.lang.Short.MIN_VALUE*

The Short class wraps a value of primitive type short in an object. An object 
of type Short contains a single field whose type is short. 



In addition, this class provides several methods for converting a short to a 
String and a String to a short, as well as other constants and methods useful 
when dealing with a short. 


*int_java.lang.Short.SIZE*

The Short class wraps a value of primitive type short in an object. An object 
of type Short contains a single field whose type is short. 



In addition, this class provides several methods for converting a short to a 
String and a String to a short, as well as other constants and methods useful 
when dealing with a short. 


*java.lang.Class_java.lang.Short.TYPE*

The Short class wraps a value of primitive type short in an object. An object 
of type Short contains a single field whose type is short. 



In addition, this class provides several methods for converting a short to a 
String and a String to a short, as well as other constants and methods useful 
when dealing with a short. 



*java.lang.Short(short)*

public Short(short value)

Constructs a newly allocated Short object that represents the specified short 
value. 

    value - the value to be represented by the Short. 

*java.lang.Short(String)*

public Short(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Constructs a newly allocated Short object that represents the short value 
indicated by the String parameter. The string is converted to a short value in 
exactly the manner used by the parseShort method for radix 10. 

    s - the String to be converted to a Short 

*java.lang.Short.byteValue()*

public byte byteValue()

Returns the value of this Short as a byte. 


*java.lang.Short.compareTo(Short)*

public int compareTo(java.lang.Short anotherShort)

Compares two Short objects numerically. 

    anotherShort - the Short to be compared. 

    Returns: the value 0 if this Short is equal to the argument Short; a value less than 0 
             if this Short is numerically less than the argument Short; and a 
             value greater than 0 if this Short is numerically greater than the 
             argument Short (signed comparison). 
*java.lang.Short.decode(String)*

public static |java.lang.Short| decode(java.lang.String nm)
  throws |java.lang.NumberFormatException|
         
Decodes a String into a Short. Accepts decimal, hexadecimal, and octal numbers 
given by the following grammar: 



DecodableString: Signopt DecimalNumeral Signopt 0x HexDigits Signopt 0X 
HexDigits Signopt # HexDigits Signopt 0 OctalDigits 

Sign: - 



DecimalNumeral, HexDigits, and OctalDigits are defined in 3.10.1 of the Java 
Language Specification. 

The sequence of characters following an (optional) negative sign and/or radix 
specifier (0x, 0X, #, or leading zero) is parsed as by the Short.parseShort 
method with the indicated radix (10, 16, or 8). This sequence of characters 
must represent a positive value or a (|java.lang.NumberFormatException|) will 
be thrown. The result is negated if first character of the specified String is 
the minus sign. No whitespace characters are permitted in the String. 

    nm - the String to decode. 

    Returns: a Short object holding the short value represented by nm 
*java.lang.Short.doubleValue()*

public double doubleValue()

Returns the value of this Short as a double. 


*java.lang.Short.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this object to the specified object. The result is true if and only if 
the argument is not null and is a Short object that contains the same short 
value as this object. 

    obj - the object to compare with 

    Returns: true if the objects are the same; false otherwise. 
*java.lang.Short.floatValue()*

public float floatValue()

Returns the value of this Short as a float. 


*java.lang.Short.hashCode()*

public int hashCode()

Returns a hash code for this Short. 


*java.lang.Short.intValue()*

public int intValue()

Returns the value of this Short as an int. 


*java.lang.Short.longValue()*

public long longValue()

Returns the value of this Short as a long. 


*java.lang.Short.parseShort(String)*

public static short parseShort(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Parses the string argument as a signed decimal short. The characters in the 
string must all be decimal digits, except that the first character may be an 
ASCII minus sign '-' ('u002D') to indicate a negative value. The resulting 
short value is returned, exactly as if the argument and the radix 10 were given 
as arguments to the (|java.lang.Short|) method. 

    s - a String containing the short representation to be parsed 

    Returns: the short value represented by the argument in decimal. 
*java.lang.Short.parseShort(String,int)*

public static short parseShort(
  java.lang.String s,
  int radix)
  throws |java.lang.NumberFormatException|
         
Parses the string argument as a signed short in the radix specified by the 
second argument. The characters in the string must all be digits, of the 
specified radix (as determined by whether (|java.lang.Character|) returns a 
nonnegative value) except that the first character may be an ASCII minus sign 
'-' ('u002D') to indicate a negative value. The resulting byte value is 
returned. 

An exception of type NumberFormatException is thrown if any of the following 
situations occurs: 

The first argument is null or is a string of length zero. 

The radix is either smaller than (|java.lang.Character|) or larger than 
(|java.lang.Character|) . 

Any character of the string is not a digit of the specified radix, except that 
the first character may be a minus sign '-' ('u002D') provided that the string 
is longer than length 1. 

The value represented by the string is not a value of type short. 

    s - the String containing the short representation to be parsed 
    radix - the radix to be used while parsing s 

    Returns: the short represented by the string argument in the specified radix. 
*java.lang.Short.reverseBytes(short)*

public static short reverseBytes(short i)

Returns the value obtained by reversing the order of the bytes in the two's 
complement representation of the specified short value. 


    Returns: the value obtained by reversing (or, equivalently, swapping) the bytes in the 
             specified short value. 
*java.lang.Short.shortValue()*

public short shortValue()

Returns the value of this Short as a short. 


*java.lang.Short.toString()*

public |java.lang.String| toString()

Returns a String object representing this Short's value. The value is converted 
to signed decimal representation and returned as a string, exactly as if the 
short value were given as an argument to the (|java.lang.Short|) method. 


    Returns: a string representation of the value of this object in base10. 
*java.lang.Short.toString(short)*

public static |java.lang.String| toString(short s)

Returns a new String object representing the specified short. The radix is 
assumed to be 10. 

    s - the short to be converted 

    Returns: the string representation of the specified short 
*java.lang.Short.valueOf(short)*

public static |java.lang.Short| valueOf(short s)

Returns a Short instance representing the specified short value. If a new Short 
instance is not required, this method should generally be used in preference to 
the constructor (|java.lang.Short|) , as this method is likely to yield 
significantly better space and time performance by caching frequently requested 
values. 

    s - a short value. 

    Returns: a Short instance representing s. 
*java.lang.Short.valueOf(String)*

public static |java.lang.Short| valueOf(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Returns a Short object holding the value given by the specified String. The 
argument is interpreted as representing a signed decimal short, exactly as if 
the argument were given to the (|java.lang.Short|) method. The result is a 
Short object that represents the short value specified by the string. In other 
words, this method returns a Byte object equal to the value of: 

new Short(Short.parseShort(s)) 

    s - the string to be parsed 

    Returns: a Short object holding the value represented by the string argument 
*java.lang.Short.valueOf(String,int)*

public static |java.lang.Short| valueOf(
  java.lang.String s,
  int radix)
  throws |java.lang.NumberFormatException|
         
Returns a Short object holding the value extracted from the specified String 
when parsed with the radix given by the second argument. The first argument is 
interpreted as representing a signed short in the radix specified by the second 
argument, exactly as if the argument were given to the (|java.lang.Short|) 
method. The result is a Short object that represents the short value specified 
by the string. In other words, this method returns a Short object equal to the 
value of: 

new Short(Short.parseShort(s, radix)) 

    s - the string to be parsed 
    radix - the radix to be used in interpreting s 

    Returns: a Short object holding the value represented by the string argument in the 
             specified radix. 


*java.awt.image.PixelGrabber* *PixelGrabber* The PixelGrabber class implements an ImageConsumer which can be attached
 to an Image or ImageProducer object to retrieve a subset of t

public class PixelGrabber
  extends    |java.lang.Object|
  implements |java.awt.image.ImageConsumer|

|java.awt.image.PixelGrabber_Description|
|java.awt.image.PixelGrabber_Fields|
|java.awt.image.PixelGrabber_Constructors|
|java.awt.image.PixelGrabber_Methods|

====================================================================================================================================================================================

*java.awt.image.PixelGrabber_Constructors*
|java.awt.image.PixelGrabber(Image,int,int,int,int,boolean)|Create a PixelGrabber object to grab the (x, y, w, h) rectangular  section of pixels from the specified image.
|java.awt.image.PixelGrabber(Image,int,int,int,int,int[],int,int)|Create a PixelGrabber object to grab the (x, y, w, h) rectangular  section of pixels from the specified image int
|java.awt.image.PixelGrabber(ImageProducer,int,int,int,int,int[],int,int)|Create a PixelGrabber object to grab the (x, y, w, h) rectangular  section of pixels from the image produ

*java.awt.image.PixelGrabber_Methods*
|java.awt.image.PixelGrabber.abortGrabbing()|Request the PixelGrabber to abort the image fetch.
|java.awt.image.PixelGrabber.getColorModel()|Get the ColorModel for the pixels stored in the array.
|java.awt.image.PixelGrabber.getHeight()|Get the height of the pixel buffer (after adjusting for image height).
|java.awt.image.PixelGrabber.getPixels()|Get the pixel buffer.
|java.awt.image.PixelGrabber.getStatus()|Return the status of the pixels.
|java.awt.image.PixelGrabber.getWidth()|Get the width of the pixel buffer (after adjusting for image width).
|java.awt.image.PixelGrabber.grabPixels()|Request the Image or ImageProducer to start delivering pixels and  wait for all of the pixels in the rectangle of interest to be  deliver
|java.awt.image.PixelGrabber.grabPixels(long)|Request the Image or ImageProducer to start delivering pixels and  wait for all of the pixels in the rectangle of interest to be  del
|java.awt.image.PixelGrabber.imageComplete(int)|The imageComplete method is part of the ImageConsumer API which  this class must implement to retrieve the pixels.
|java.awt.image.PixelGrabber.setColorModel(ColorModel)|The setColorModel method is part of the ImageConsumer API which  this class must implement to retrieve the pixels.
|java.awt.image.PixelGrabber.setDimensions(int,int)|The setDimensions method is part of the ImageConsumer API which  this class must implement to retrieve the pixels.
|java.awt.image.PixelGrabber.setHints(int)|The setHints method is part of the ImageConsumer API which  this class must implement to retrieve the pixels.
|java.awt.image.PixelGrabber.setPixels(int,int,int,int,ColorModel,byte[],int,int)|The setPixels method is part of the ImageConsumer API which  this class must implement to retriev
|java.awt.image.PixelGrabber.setPixels(int,int,int,int,ColorModel,int[],int,int)|The setPixels method is part of the ImageConsumer API which  this class must implement to retrieve
|java.awt.image.PixelGrabber.setProperties(Hashtable<?,?>)|The setProperties method is part of the ImageConsumer API which  this class must implement to retrieve the pixels.
|java.awt.image.PixelGrabber.startGrabbing()|Request the PixelGrabber to start fetching the pixels.
|java.awt.image.PixelGrabber.status()|Returns the status of the pixels.

*java.awt.image.PixelGrabber_Description*

The PixelGrabber class implements an ImageConsumer which can be attached to an Image or ImageProducer object to retrieve a subset of the pixels in that image. Here is an example: 

public void handlesinglepixel(int x, int y, int pixel) { int alpha = (pixel >> 24) & 0xff; int red = (pixel >> 16) & 0xff; int green = (pixel >> 8) & 0xff; int blue = (pixel ) & 
0xff; // Deal with the pixel as necessary... } 

public void handlepixels(Image img, int x, int y, int w, int h) { int[] pixels = new int[w * h]; PixelGrabber pg = new PixelGrabber(img, x, y, w, h, pixels, 0, w); try { 
pg.grabPixels(); } catch (InterruptedException e) { System.err.println("interrupted waiting for pixels!"); return; } if ((pg.getStatus() & ImageObserver.ABORT) != 0) { 
System.err.println("image fetch aborted or errored"); return; } for (int j = 0; j < h; j++) { for (int i = 0; i < w; i++) { handlesinglepixel(x+i, y+j, pixels[j * w + i]); } } } 





*java.awt.image.PixelGrabber(Image,int,int,int,int,boolean)*

public PixelGrabber(
  java.awt.Image img,
  int x,
  int y,
  int w,
  int h,
  boolean forceRGB)

Create a PixelGrabber object to grab the (x, y, w, h) rectangular section of pixels from the specified image. The pixels are accumulated in the original ColorModel if the same 
ColorModel is used for every call to setPixels, otherwise the pixels are accumulated in the default RGB ColorModel. If the forceRGB parameter is true, then the pixels will be 
accumulated in the default RGB ColorModel anyway. A buffer is allocated by the PixelGrabber to hold the pixels in either case. If (w < 0) or (h < 0), then they will default to the 
remaining width and height of the source data when that information is delivered. 

    img - the image to retrieve the image data from 
    x - the x coordinate of the upper left corner of the rectangle of pixels to retrieve from the image, relative to the default (unscaled) size of the image 
    y - the y coordinate of the upper left corner of the rectangle of pixels to retrieve from the image 
    w - the width of the rectangle of pixels to retrieve 
    h - the height of the rectangle of pixels to retrieve 
    forceRGB - true if the pixels should always be converted to the default RGB ColorModel 

*java.awt.image.PixelGrabber(Image,int,int,int,int,int[],int,int)*

public PixelGrabber(
  java.awt.Image img,
  int x,
  int y,
  int w,
  int h,
  int[] pix,
  int off,
  int scansize)

Create a PixelGrabber object to grab the (x, y, w, h) rectangular section of pixels from the specified image into the given array. The pixels are stored into the array in the 
default RGB ColorModel. The RGB data for pixel (i, j) where (i, j) is inside the rectangle (x, y, w, h) is stored in the array at pix[(j - y) * scansize + (i - x) + off]. 

    img - the image to retrieve pixels from 
    x - the x coordinate of the upper left corner of the rectangle of pixels to retrieve from the image, relative to the default (unscaled) size of the image 
    y - the y coordinate of the upper left corner of the rectangle of pixels to retrieve from the image 
    w - the width of the rectangle of pixels to retrieve 
    h - the height of the rectangle of pixels to retrieve 
    pix - the array of integers which are to be used to hold the RGB pixels retrieved from the image 
    off - the offset into the array of where to store the first pixel 
    scansize - the distance from one row of pixels to the next in the array 

*java.awt.image.PixelGrabber(ImageProducer,int,int,int,int,int[],int,int)*

public PixelGrabber(
  java.awt.image.ImageProducer ip,
  int x,
  int y,
  int w,
  int h,
  int[] pix,
  int off,
  int scansize)

Create a PixelGrabber object to grab the (x, y, w, h) rectangular section of pixels from the image produced by the specified ImageProducer into the given array. The pixels are 
stored into the array in the default RGB ColorModel. The RGB data for pixel (i, j) where (i, j) is inside the rectangle (x, y, w, h) is stored in the array at pix[(j - y) * 
scansize + (i - x) + off]. 

    ip - the ImageProducer that produces the image from which to retrieve pixels 
    x - the x coordinate of the upper left corner of the rectangle of pixels to retrieve from the image, relative to the default (unscaled) size of the image 
    y - the y coordinate of the upper left corner of the rectangle of pixels to retrieve from the image 
    w - the width of the rectangle of pixels to retrieve 
    h - the height of the rectangle of pixels to retrieve 
    pix - the array of integers which are to be used to hold the RGB pixels retrieved from the image 
    off - the offset into the array of where to store the first pixel 
    scansize - the distance from one row of pixels to the next in the array 

*java.awt.image.PixelGrabber.abortGrabbing()*

public synchronized void abortGrabbing()

Request the PixelGrabber to abort the image fetch. 



*java.awt.image.PixelGrabber.getColorModel()*

public synchronized |java.awt.image.ColorModel| getColorModel()

Get the ColorModel for the pixels stored in the array. If the PixelGrabber was constructed with an explicit pixel buffer then this method will always return the default RGB 
ColorModel, otherwise it may return null until the ColorModel used by the ImageProducer is known. Since the PixelGrabber may fall back on accumulating the data in the default RGB 
ColorModel at any time if the source image uses more than one ColorModel to deliver the data, the ColorModel object returned by this method may change over time until the image 
grab is complete and may not reflect any of the ColorModel objects that was used by the ImageProducer to deliver the pixels. 



    Returns: the ColorModel object used for storing the pixels 

*java.awt.image.PixelGrabber.getHeight()*

public synchronized int getHeight()

Get the height of the pixel buffer (after adjusting for image height). If no width was specified for the rectangle of pixels to grab then then this information will only be 
available after the image has delivered the dimensions. 



    Returns: the final height used for the pixel buffer or -1 if the height is not yet known 

*java.awt.image.PixelGrabber.getPixels()*

public synchronized |java.lang.Object| getPixels()

Get the pixel buffer. If the PixelGrabber was not constructed with an explicit pixel buffer to hold the pixels then this method will return null until the size and format of the 
image data is known. Since the PixelGrabber may fall back on accumulating the data in the default RGB ColorModel at any time if the source image uses more than one ColorModel to 
deliver the data, the array object returned by this method may change over time until the image grab is complete. 



    Returns: either a byte array or an int array 

*java.awt.image.PixelGrabber.getStatus()*

public synchronized int getStatus()

Return the status of the pixels. The ImageObserver flags representing the available pixel information are returned. 



    Returns: the bitwise OR of all relevant ImageObserver flags 

*java.awt.image.PixelGrabber.getWidth()*

public synchronized int getWidth()

Get the width of the pixel buffer (after adjusting for image width). If no width was specified for the rectangle of pixels to grab then then this information will only be 
available after the image has delivered the dimensions. 



    Returns: the final width used for the pixel buffer or -1 if the width is not yet known 

*java.awt.image.PixelGrabber.grabPixels()*

public boolean grabPixels()
  throws |java.lang.InterruptedException|
         
Request the Image or ImageProducer to start delivering pixels and wait for all of the pixels in the rectangle of interest to be delivered. 



    Returns: true if the pixels were successfully grabbed, false on abort, error or timeout 

*java.awt.image.PixelGrabber.grabPixels(long)*

public synchronized boolean grabPixels(long ms)
  throws |java.lang.InterruptedException|
         
Request the Image or ImageProducer to start delivering pixels and wait for all of the pixels in the rectangle of interest to be delivered or until the specified timeout has 
elapsed. This method behaves in the following ways, depending on the value of ms: 

If ms == 0, waits until all pixels are delivered If ms > 0, waits until all pixels are delivered as timeout expires. If ms true if all pixels are grabbed, false otherwise and does 
not wait. 


    ms - the number of milliseconds to wait for the image pixels to arrive before timing out 

    Returns: true if the pixels were successfully grabbed, false on abort, error or timeout 

*java.awt.image.PixelGrabber.imageComplete(int)*

public synchronized void imageComplete(int status)

The imageComplete method is part of the ImageConsumer API which this class must implement to retrieve the pixels. 

Note: This method is intended to be called by the ImageProducer of the Image whose pixels are being grabbed. Developers using this class to retrieve pixels from an image should 
avoid calling this method directly since that operation could result in problems with retrieving the requested pixels. 


    status - the status of image loading 

*java.awt.image.PixelGrabber.setColorModel(ColorModel)*

public void setColorModel(java.awt.image.ColorModel model)

The setColorModel method is part of the ImageConsumer API which this class must implement to retrieve the pixels. 

Note: This method is intended to be called by the ImageProducer of the Image whose pixels are being grabbed. Developers using this class to retrieve pixels from an image should 
avoid calling this method directly since that operation could result in problems with retrieving the requested pixels. 


    model - the specified ColorModel 

*java.awt.image.PixelGrabber.setDimensions(int,int)*

public void setDimensions(
  int width,
  int height)

The setDimensions method is part of the ImageConsumer API which this class must implement to retrieve the pixels. 

Note: This method is intended to be called by the ImageProducer of the Image whose pixels are being grabbed. Developers using this class to retrieve pixels from an image should 
avoid calling this method directly since that operation could result in problems with retrieving the requested pixels. 


    width - the width of the dimension 
    height - the height of the dimension 

*java.awt.image.PixelGrabber.setHints(int)*

public void setHints(int hints)

The setHints method is part of the ImageConsumer API which this class must implement to retrieve the pixels. 

Note: This method is intended to be called by the ImageProducer of the Image whose pixels are being grabbed. Developers using this class to retrieve pixels from an image should 
avoid calling this method directly since that operation could result in problems with retrieving the requested pixels. 


    hints - a set of hints used to process the pixels 

*java.awt.image.PixelGrabber.setPixels(int,int,int,int,ColorModel,byte[],int,int)*

public void setPixels(
  int srcX,
  int srcY,
  int srcW,
  int srcH,
  java.awt.image.ColorModel model,
  byte[] pixels,
  int srcOff,
  int srcScan)

The setPixels method is part of the ImageConsumer API which this class must implement to retrieve the pixels. 

Note: This method is intended to be called by the ImageProducer of the Image whose pixels are being grabbed. Developers using this class to retrieve pixels from an image should 
avoid calling this method directly since that operation could result in problems with retrieving the requested pixels. 


    srcX,&nbsp;srcY - the coordinates of the upper-left corner of the area of pixels to be set 
    srcW - the width of the area of pixels 
    srcH - the height of the area of pixels 
    model - the specified ColorModel 
    pixels - the array of pixels 
    srcOff - the offset into the pixels array 
    srcScan - the distance from one row of pixels to the next in the pixels array 

*java.awt.image.PixelGrabber.setPixels(int,int,int,int,ColorModel,int[],int,int)*

public void setPixels(
  int srcX,
  int srcY,
  int srcW,
  int srcH,
  java.awt.image.ColorModel model,
  int[] pixels,
  int srcOff,
  int srcScan)

The setPixels method is part of the ImageConsumer API which this class must implement to retrieve the pixels. 

Note: This method is intended to be called by the ImageProducer of the Image whose pixels are being grabbed. Developers using this class to retrieve pixels from an image should 
avoid calling this method directly since that operation could result in problems with retrieving the requested pixels. 


    srcX,&nbsp;srcY - the coordinates of the upper-left corner of the area of pixels to be set 
    srcW - the width of the area of pixels 
    srcH - the height of the area of pixels 
    model - the specified ColorModel 
    pixels - the array of pixels 
    srcOff - the offset into the pixels array 
    srcScan - the distance from one row of pixels to the next in the pixels array 

*java.awt.image.PixelGrabber.setProperties(Hashtable<?,?>)*

public void setProperties(java.util.Hashtable<?, ?> props)

The setProperties method is part of the ImageConsumer API which this class must implement to retrieve the pixels. 

Note: This method is intended to be called by the ImageProducer of the Image whose pixels are being grabbed. Developers using this class to retrieve pixels from an image should 
avoid calling this method directly since that operation could result in problems with retrieving the requested pixels. 


    props - the list of properties 

*java.awt.image.PixelGrabber.startGrabbing()*

public synchronized void startGrabbing()

Request the PixelGrabber to start fetching the pixels. 



*java.awt.image.PixelGrabber.status()*

public synchronized int status()

Returns the status of the pixels. The ImageObserver flags representing the available pixel information are returned. This method and getStatus(|java.awt.image.PixelGrabber|) have 
the same implementation, but getStatus is the preferred method because it conforms to the convention of naming information-retrieval methods with the form "getXXX". 



    Returns: the bitwise OR of all relevant ImageObserver flags 



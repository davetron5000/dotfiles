*javax.swing.JDesktopPane* *JDesktopPane* A container used to create a multiple-

public class JDesktopPane
  extends    |javax.swing.JLayeredPane|
  implements |javax.accessibility.Accessible|

|javax.swing.JDesktopPane_Description|
|javax.swing.JDesktopPane_Fields|
|javax.swing.JDesktopPane_Constructors|
|javax.swing.JDesktopPane_Methods|

================================================================================

*javax.swing.JDesktopPane_Fields*
|int_javax.swing.JDesktopPane.LIVE_DRAG_MODE|
|int_javax.swing.JDesktopPane.OUTLINE_DRAG_MODE|

*javax.swing.JDesktopPane_Constructors*
|javax.swing.JDesktopPane()|Creates a new JDesktopPane.

*javax.swing.JDesktopPane_Methods*
|javax.swing.JDesktopPane.getAccessibleContext()|Gets the AccessibleContext ass
|javax.swing.JDesktopPane.getAllFrames()|Returns all JInternalFrames currently 
|javax.swing.JDesktopPane.getAllFramesInLayer(int)|Returns all JInternalFrames 
|javax.swing.JDesktopPane.getDesktopManager()|Returns the DesktopManger that ha
|javax.swing.JDesktopPane.getDragMode()|Gets the current "dragging style" used 
|javax.swing.JDesktopPane.getSelectedFrame()|Returns the currently active JInte
|javax.swing.JDesktopPane.getUI()|Returns the Lobject that renders this compone
|javax.swing.JDesktopPane.getUIClassID()|Returns the name of the Lclass that re
|javax.swing.JDesktopPane.isOpaque()|Returns true to indicate that this compone
|javax.swing.JDesktopPane.paramString()|Returns a string representation of this
|javax.swing.JDesktopPane.setDesktopManager(DesktopManager)|Sets the DesktopMan
|javax.swing.JDesktopPane.setDragMode(int)|Sets the "dragging style" used by th
|javax.swing.JDesktopPane.setSelectedFrame(JInternalFrame)|Sets the currently a
|javax.swing.JDesktopPane.setUI(DesktopPaneUI)|Sets the Lobject that renders th
|javax.swing.JDesktopPane.updateUI()|Notification from the UIManager that the L

*javax.swing.JDesktopPane_Description*

A container used to create a multiple-document interface or a virtual desktop. 
You create JInternalFrame objects and add them to the JDesktopPane. 
JDesktopPane extends JLayeredPane to manage the potentially overlapping 
internal frames. It also maintains a reference to an instance of DesktopManager 
that is set by the UI class for the current look and feel (L Note that 
JDesktopPane does not support borders. 

This class is normally used as the parent of JInternalFrames to provide a 
pluggable DesktopManager object to the JInternalFrames. The installUI of the 
Lspecific implementation is responsible for setting the desktopManager variable 
appropriately. When the parent of a JInternalFrame is a JDesktopPane, it should 
delegate most of its behavior to the desktopManager (closing, resizing, etc). 

For further documentation and examples see How to Use Internal Frames, a 
section in The Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JDesktopPane.LIVE_DRAG_MODE*

A container used to create a multiple-document interface or a virtual desktop. 
You create JInternalFrame objects and add them to the JDesktopPane. 
JDesktopPane extends JLayeredPane to manage the potentially overlapping 
internal frames. It also maintains a reference to an instance of DesktopManager 
that is set by the UI class for the current look and feel (L Note that 
JDesktopPane does not support borders. 

This class is normally used as the parent of JInternalFrames to provide a 
pluggable DesktopManager object to the JInternalFrames. The installUI of the 
Lspecific implementation is responsible for setting the desktopManager variable 
appropriately. When the parent of a JInternalFrame is a JDesktopPane, it should 
delegate most of its behavior to the desktopManager (closing, resizing, etc). 

For further documentation and examples see How to Use Internal Frames, a 
section in The Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.JDesktopPane.OUTLINE_DRAG_MODE*

A container used to create a multiple-document interface or a virtual desktop. 
You create JInternalFrame objects and add them to the JDesktopPane. 
JDesktopPane extends JLayeredPane to manage the potentially overlapping 
internal frames. It also maintains a reference to an instance of DesktopManager 
that is set by the UI class for the current look and feel (L Note that 
JDesktopPane does not support borders. 

This class is normally used as the parent of JInternalFrames to provide a 
pluggable DesktopManager object to the JInternalFrames. The installUI of the 
Lspecific implementation is responsible for setting the desktopManager variable 
appropriately. When the parent of a JInternalFrame is a JDesktopPane, it should 
delegate most of its behavior to the desktopManager (closing, resizing, etc). 

For further documentation and examples see How to Use Internal Frames, a 
section in The Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.JDesktopPane()*

public JDesktopPane()

Creates a new JDesktopPane. 


*javax.swing.JDesktopPane.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JDesktopPane. For desktop 
panes, the AccessibleContext takes the form of an AccessibleJDesktopPane. A new 
AccessibleJDesktopPane instance is created if necessary. 


    Returns: an AccessibleJDesktopPane that serves as the AccessibleContext of this 
             JDesktopPane 
*javax.swing.JDesktopPane.getAllFrames()*

public |javax.swing.JInternalFrame| getAllFrames()

Returns all JInternalFrames currently displayed in the desktop. Returns 
iconified frames as well as expanded frames. 


    Returns: an array of JInternalFrame objects 
*javax.swing.JDesktopPane.getAllFramesInLayer(int)*

public |javax.swing.JInternalFrame| getAllFramesInLayer(int layer)

Returns all JInternalFrames currently displayed in the specified layer of the 
desktop. Returns iconified frames as well expanded frames. 

    layer - an int specifying the desktop layer 

    Returns: an array of JInternalFrame objects 
*javax.swing.JDesktopPane.getDesktopManager()*

public |javax.swing.DesktopManager| getDesktopManager()

Returns the DesktopManger that handles desktop-specific UI actions. 


*javax.swing.JDesktopPane.getDragMode()*

public int getDragMode()

Gets the current "dragging style" used by the desktop pane. 


    Returns: either Live_DRAG_MODE or OUTLINE_DRAG_MODE 
*javax.swing.JDesktopPane.getSelectedFrame()*

public |javax.swing.JInternalFrame| getSelectedFrame()

Returns the currently active JInternalFrame in this JDesktopPane, or null if no 
JInternalFrame is currently active. 


    Returns: the currently active JInternalFrame or null 
*javax.swing.JDesktopPane.getUI()*

public |javax.swing.plaf.DesktopPaneUI| getUI()

Returns the Lobject that renders this component. 


    Returns: the DesktopPaneUI object that renders this component 
*javax.swing.JDesktopPane.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the name of the Lclass that renders this component. 


    Returns: the string "DesktopPaneUI" 
*javax.swing.JDesktopPane.isOpaque()*

public boolean isOpaque()

Returns true to indicate that this component paints every pixel in its range. 
(In other words, it does not have a transparent background or foreground.) 


    Returns: 
*javax.swing.JDesktopPane.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JDesktopPane. This method is intended 
to be used only for debugging purposes, and the content and format of the 
returned string may vary between implementations. The returned string may be 
empty but may not be null. 


    Returns: a string representation of this JDesktopPane 
*javax.swing.JDesktopPane.setDesktopManager(DesktopManager)*

public void setDesktopManager(javax.swing.DesktopManager d)

Sets the DesktopManger that will handle desktop-specific UI actions. 

    d - the DesktopManager to use 

*javax.swing.JDesktopPane.setDragMode(int)*

public void setDragMode(int dragMode)

Sets the "dragging style" used by the desktop pane. You may want to change to 
one mode or another for performance or aesthetic reasons. 

    dragMode - the style of drag to use for items in the Desktop 

*javax.swing.JDesktopPane.setSelectedFrame(JInternalFrame)*

public void setSelectedFrame(javax.swing.JInternalFrame f)

Sets the currently active JInternalFrame in this JDesktopPane. 

    f - the internal frame that's currently selected 

*javax.swing.JDesktopPane.setUI(DesktopPaneUI)*

public void setUI(javax.swing.plaf.DesktopPaneUI ui)

Sets the Lobject that renders this component. 

    ui - the DesktopPaneUI Lobject 

*javax.swing.JDesktopPane.updateUI()*

public void updateUI()

Notification from the UIManager that the Lhas changed. Replaces the current UI 
object with the latest version from the UIManager. 




*java.util.concurrent.FutureTask* *FutureTask* A cancellable asynchronous comput

public class FutureTask
  extends    |java.lang.Object|
  implements |java.util.concurrent.Future|
             |java.lang.Runnable|

|java.util.concurrent.FutureTask_Description|
|java.util.concurrent.FutureTask_Fields|
|java.util.concurrent.FutureTask_Constructors|
|java.util.concurrent.FutureTask_Methods|

================================================================================

*java.util.concurrent.FutureTask_Constructors*
|java.util.concurrent.FutureTask(Callable)|Creates a FutureTask that will upon 
|java.util.concurrent.FutureTask(Runnable,V)|Creates a FutureTask that will upo

*java.util.concurrent.FutureTask_Methods*
|java.util.concurrent.FutureTask.cancel(boolean)|
|java.util.concurrent.FutureTask.done()|Protected method invoked when this task
|java.util.concurrent.FutureTask.get()|
|java.util.concurrent.FutureTask.get(long,TimeUnit)|
|java.util.concurrent.FutureTask.isCancelled()|
|java.util.concurrent.FutureTask.isDone()|
|java.util.concurrent.FutureTask.run()|Sets this Future to the result of comput
|java.util.concurrent.FutureTask.runAndReset()|Executes the computation without
|java.util.concurrent.FutureTask.set(V)|Sets the result of this Future to the g
|java.util.concurrent.FutureTask.setException(Throwable)|Causes this future to 

*java.util.concurrent.FutureTask_Description*

A cancellable asynchronous computation. This class provides a base 
implementation of (|java.util.concurrent.Future|) , with methods to start and 
cancel a computation, query to see if the computation is complete, and retrieve 
the result of the computation. The result can only be retrieved when the 
computation has completed; the get method will block if the computation has not 
yet completed. Once the computation has completed, the computation cannot be 
restarted or cancelled. 

A FutureTask can be used to wrap a (|java.util.concurrent.Callable|) or 
(|java.lang.Runnable|) object. Because FutureTask implements Runnable, a 
FutureTask can be submitted to an (|java.util.concurrent.Executor|) for 
execution. 

In addition to serving as a standalone class, this class provides protected 
functionality that may be useful when creating customized task classes. 


*java.util.concurrent.FutureTask(Callable)*

public FutureTask(java.util.concurrent.Callable callable)

Creates a FutureTask that will upon running, execute the given Callable. 

    callable - the callable task 

*java.util.concurrent.FutureTask(Runnable,V)*

public FutureTask(
  java.lang.Runnable runnable,
  java.lang.Object result)

Creates a FutureTask that will upon running, execute the given Runnable, and 
arrange that get will return the given result on successful completion. 

    runnable - the runnable task 
    result - the result to return on successful completion. If you don't need a particular 
       result, consider using constructions of the form: Future<?> f = new 
       FutureTask<Object>(runnable, null) 

*java.util.concurrent.FutureTask.cancel(boolean)*

public boolean cancel(boolean mayInterruptIfRunning)




*java.util.concurrent.FutureTask.done()*

protected void done()

Protected method invoked when this task transitions to state isDone (whether 
normally or via cancellation). The default implementation does nothing. 
Subclasses may override this method to invoke completion callbacks or perform 
bookkeeping. Note that you can query status inside the implementation of this 
method to determine whether this task has been cancelled. 


*java.util.concurrent.FutureTask.get()*

public |java.lang.Object| get()
  throws |java.util.concurrent.ExecutionException|
         |java.lang.InterruptedException|
         



*java.util.concurrent.FutureTask.get(long,TimeUnit)*

public |java.lang.Object| get(
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.util.concurrent.ExecutionException|
         |java.lang.InterruptedException|
         |java.util.concurrent.TimeoutException|
         



*java.util.concurrent.FutureTask.isCancelled()*

public boolean isCancelled()




*java.util.concurrent.FutureTask.isDone()*

public boolean isDone()




*java.util.concurrent.FutureTask.run()*

public void run()

Sets this Future to the result of computation unless it has been cancelled. 


*java.util.concurrent.FutureTask.runAndReset()*

protected boolean runAndReset()

Executes the computation without setting its result, and then resets this 
Future to initial state, failing to do so if the computation encounters an 
exception or is cancelled. This is designed for use with tasks that 
intrinsically execute more than once. 


    Returns: true if successfully run and reset 
*java.util.concurrent.FutureTask.set(V)*

protected void set(java.lang.Object v)

Sets the result of this Future to the given value unless this future has 
already been set or has been cancelled. 

    v - the value 

*java.util.concurrent.FutureTask.setException(Throwable)*

protected void setException(java.lang.Throwable t)

Causes this future to report an ExecutionException with the given throwable as 
its cause, unless this Future has already been set or has been cancelled. 

    t - the cause of failure. 



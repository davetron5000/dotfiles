*java.io.CharArrayWriter* *CharArrayWriter* This class implements a character bu

public class CharArrayWriter
  extends    |java.io.Writer|

|java.io.CharArrayWriter_Description|
|java.io.CharArrayWriter_Fields|
|java.io.CharArrayWriter_Constructors|
|java.io.CharArrayWriter_Methods|

================================================================================

*java.io.CharArrayWriter_Fields*
|char[]_java.io.CharArrayWriter.buf|
|int_java.io.CharArrayWriter.count|

*java.io.CharArrayWriter_Constructors*
|java.io.CharArrayWriter()|Creates a new CharArrayWriter.
|java.io.CharArrayWriter(int)|Creates a new CharArrayWriter with the specified 

*java.io.CharArrayWriter_Methods*
|java.io.CharArrayWriter.append(char)|Appends the specified character to this w
|java.io.CharArrayWriter.append(CharSequence)|Appends the specified character s
|java.io.CharArrayWriter.append(CharSequence,int,int)|Appends a subsequence of 
|java.io.CharArrayWriter.close()|Close the stream.
|java.io.CharArrayWriter.flush()|Flush the stream.
|java.io.CharArrayWriter.reset()|Resets the buffer so that you can use it again
|java.io.CharArrayWriter.size()|Returns the current size of the buffer.
|java.io.CharArrayWriter.toCharArray()|Returns a copy of the input data.
|java.io.CharArrayWriter.toString()|Converts input data to a string.
|java.io.CharArrayWriter.write(char[],int,int)|Writes characters to the buffer.
|java.io.CharArrayWriter.write(int)|Writes a character to the buffer.
|java.io.CharArrayWriter.write(String,int,int)|Write a portion of a string to t
|java.io.CharArrayWriter.writeTo(Writer)|Writes the contents of the buffer to a

*java.io.CharArrayWriter_Description*

This class implements a character buffer that can be used as an Writer. The 
buffer automatically grows when data is written to the stream. The data can be 
retrieved using toCharArray() and toString(). 

Note: Invoking close() on this class has no effect, and methods of this class 
can be called after the stream has closed without generating an IOException. 


*char[]_java.io.CharArrayWriter.buf*

This class implements a character buffer that can be used as an Writer. The 
buffer automatically grows when data is written to the stream. The data can be 
retrieved using toCharArray() and toString(). 

Note: Invoking close() on this class has no effect, and methods of this class 
can be called after the stream has closed without generating an IOException. 


*int_java.io.CharArrayWriter.count*

This class implements a character buffer that can be used as an Writer. The 
buffer automatically grows when data is written to the stream. The data can be 
retrieved using toCharArray() and toString(). 

Note: Invoking close() on this class has no effect, and methods of this class 
can be called after the stream has closed without generating an IOException. 



*java.io.CharArrayWriter()*

public CharArrayWriter()

Creates a new CharArrayWriter. 


*java.io.CharArrayWriter(int)*

public CharArrayWriter(int initialSize)

Creates a new CharArrayWriter with the specified initial size. 

    initialSize - an int specifying the initial buffer size. 

*java.io.CharArrayWriter.append(char)*

public |java.io.CharArrayWriter| append(char c)

Appends the specified character to this writer. 

An invocation of this method of the form out.append(c) behaves in exactly the 
same way as the invocation 



out.write(c) 

    c - The 16-bit character to append 

    Returns: 
*java.io.CharArrayWriter.append(CharSequence)*

public |java.io.CharArrayWriter| append(java.lang.CharSequence csq)

Appends the specified character sequence to this writer. 

An invocation of this method of the form out.append(csq) behaves in exactly the 
same way as the invocation 



out.write(csq.toString()) 

Depending on the specification of toString for the character sequence csq, the 
entire sequence may not be appended. For instance, invoking the toString method 
of a character buffer will return a subsequence whose content depends upon the 
buffer's position and limit. 

    csq - The character sequence to append. If csq is null, then the four characters 
       "null" are appended to this writer. 

    Returns: 
*java.io.CharArrayWriter.append(CharSequence,int,int)*

public |java.io.CharArrayWriter| append(
  java.lang.CharSequence csq,
  int start,
  int end)

Appends a subsequence of the specified character sequence to this writer. 

An invocation of this method of the form out.append(csq, start, end) when csq 
is not null, behaves in exactly the same way as the invocation 



out.write(csq.subSequence(start, end).toString()) 

    csq - The character sequence from which a subsequence will be appended. If csq is 
       null, then characters will be appended as if csq contained the four 
       characters "null". 
    start - The index of the first character in the subsequence 
    end - The index of the character following the last character in the subsequence 

    Returns: 
*java.io.CharArrayWriter.close()*

public void close()

Close the stream. This method does not release the buffer, since its contents 
might still be required. Note: Invoking this method in this class will have no 
effect. 


*java.io.CharArrayWriter.flush()*

public void flush()

Flush the stream. 


*java.io.CharArrayWriter.reset()*

public void reset()

Resets the buffer so that you can use it again without throwing away the 
already allocated buffer. 


*java.io.CharArrayWriter.size()*

public int size()

Returns the current size of the buffer. 


    Returns: an int representing the current size of the buffer. 
*java.io.CharArrayWriter.toCharArray()*

public char toCharArray()

Returns a copy of the input data. 


    Returns: an array of chars copied from the input data. 
*java.io.CharArrayWriter.toString()*

public |java.lang.String| toString()

Converts input data to a string. 


    Returns: 
*java.io.CharArrayWriter.write(char[],int,int)*

public void write(
  char[] c,
  int off,
  int len)

Writes characters to the buffer. 

    c - the data to be written 
    off - the start offset in the data 
    len - the number of chars that are written 

*java.io.CharArrayWriter.write(int)*

public void write(int c)

Writes a character to the buffer. 


*java.io.CharArrayWriter.write(String,int,int)*

public void write(
  java.lang.String str,
  int off,
  int len)

Write a portion of a string to the buffer. 

    str - String to be written from 
    off - Offset from which to start reading characters 
    len - Number of characters to be written 

*java.io.CharArrayWriter.writeTo(Writer)*

public void writeTo(java.io.Writer out)
  throws |java.io.IOException|
         
Writes the contents of the buffer to another character stream. 

    out - the output stream to write to 



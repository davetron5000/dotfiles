*java.util.Arrays* *Arrays* This class contains various methods for manipulating

public class Arrays
  extends    |java.lang.Object|

|java.util.Arrays_Description|
|java.util.Arrays_Fields|
|java.util.Arrays_Constructors|
|java.util.Arrays_Methods|

================================================================================

*java.util.Arrays_Methods*
|java.util.Arrays.asList(T[])|Returns a fixed-size list backed by the specified
|java.util.Arrays.binarySearch(byte[],byte)|Searches the specified array of byt
|java.util.Arrays.binarySearch(char[],char)|Searches the specified array of cha
|java.util.Arrays.binarySearch(double[],double)|Searches the specified array of
|java.util.Arrays.binarySearch(float[],float)|Searches the specified array of f
|java.util.Arrays.binarySearch(int[],int)|Searches the specified array of ints 
|java.util.Arrays.binarySearch(long[],long)|Searches the specified array of lon
|java.util.Arrays.binarySearch(Object[],Object)|Searches the specified array fo
|java.util.Arrays.binarySearch(short[],short)|Searches the specified array of s
|java.util.Arrays.binarySearch(T[],T,Comparator)|Searches the specified array f
|java.util.Arrays.deepEquals(Object[],Object[])|Returns true if the two specifi
|java.util.Arrays.deepHashCode(Object[])|Returns a hash code based on the "deep
|java.util.Arrays.deepToString(Object[])|Returns a string representation of the
|java.util.Arrays.equals(boolean[],boolean[])|Returns true if the two specified
|java.util.Arrays.equals(byte[],byte[])|Returns true if the two specified array
|java.util.Arrays.equals(char[],char[])|Returns true if the two specified array
|java.util.Arrays.equals(double[],double[])|Returns true if the two specified a
|java.util.Arrays.equals(float[],float[])|Returns true if the two specified arr
|java.util.Arrays.equals(int[],int[])|Returns true if the two specified arrays 
|java.util.Arrays.equals(long[],long[])|Returns true if the two specified array
|java.util.Arrays.equals(Object[],Object[])|Returns true if the two specified a
|java.util.Arrays.equals(short[],short[])|Returns true if the two specified arr
|java.util.Arrays.fill(boolean[],boolean)|Assigns the specified boolean value t
|java.util.Arrays.fill(boolean[],int,int,boolean)|Assigns the specified boolean
|java.util.Arrays.fill(byte[],byte)|Assigns the specified byte value to each el
|java.util.Arrays.fill(byte[],int,int,byte)|Assigns the specified byte value to
|java.util.Arrays.fill(char[],char)|Assigns the specified char value to each el
|java.util.Arrays.fill(char[],int,int,char)|Assigns the specified char value to
|java.util.Arrays.fill(double[],double)|Assigns the specified double value to e
|java.util.Arrays.fill(double[],int,int,double)|Assigns the specified double va
|java.util.Arrays.fill(float[],float)|Assigns the specified float value to each
|java.util.Arrays.fill(float[],int,int,float)|Assigns the specified float value
|java.util.Arrays.fill(int[],int)|Assigns the specified int value to each eleme
|java.util.Arrays.fill(int[],int,int,int)|Assigns the specified int value to ea
|java.util.Arrays.fill(long[],int,int,long)|Assigns the specified long value to
|java.util.Arrays.fill(long[],long)|Assigns the specified long value to each el
|java.util.Arrays.fill(Object[],int,int,Object)|Assigns the specified Object re
|java.util.Arrays.fill(Object[],Object)|Assigns the specified Object reference 
|java.util.Arrays.fill(short[],int,int,short)|Assigns the specified short value
|java.util.Arrays.fill(short[],short)|Assigns the specified short value to each
|java.util.Arrays.hashCode(boolean[])|Returns a hash code based on the contents
|java.util.Arrays.hashCode(byte[])|Returns a hash code based on the contents of
|java.util.Arrays.hashCode(char[])|Returns a hash code based on the contents of
|java.util.Arrays.hashCode(double[])|Returns a hash code based on the contents 
|java.util.Arrays.hashCode(float[])|Returns a hash code based on the contents o
|java.util.Arrays.hashCode(int[])|Returns a hash code based on the contents of 
|java.util.Arrays.hashCode(long[])|Returns a hash code based on the contents of
|java.util.Arrays.hashCode(Object[])|Returns a hash code based on the contents 
|java.util.Arrays.hashCode(short[])|Returns a hash code based on the contents o
|java.util.Arrays.sort(byte[])|Sorts the specified array of bytes into ascendin
|java.util.Arrays.sort(byte[],int,int)|Sorts the specified range of the specifi
|java.util.Arrays.sort(char[])|Sorts the specified array of chars into ascendin
|java.util.Arrays.sort(char[],int,int)|Sorts the specified range of the specifi
|java.util.Arrays.sort(double[])|Sorts the specified array of doubles into asce
|java.util.Arrays.sort(double[],int,int)|Sorts the specified range of the speci
|java.util.Arrays.sort(float[])|Sorts the specified array of floats into ascend
|java.util.Arrays.sort(float[],int,int)|Sorts the specified range of the specif
|java.util.Arrays.sort(int[])|Sorts the specified array of ints into ascending 
|java.util.Arrays.sort(int[],int,int)|Sorts the specified range of the specifie
|java.util.Arrays.sort(long[])|Sorts the specified array of longs into ascendin
|java.util.Arrays.sort(long[],int,int)|Sorts the specified range of the specifi
|java.util.Arrays.sort(Object[])|Sorts the specified array of objects into asce
|java.util.Arrays.sort(Object[],int,int)|Sorts the specified range of the speci
|java.util.Arrays.sort(short[])|Sorts the specified array of shorts into ascend
|java.util.Arrays.sort(short[],int,int)|Sorts the specified range of the specif
|java.util.Arrays.sort(T[],Comparator)|Sorts the specified array of objects acc
|java.util.Arrays.sort(T[],int,int,Comparator)|Sorts the specified range of the
|java.util.Arrays.toString(boolean[])|Returns a string representation of the co
|java.util.Arrays.toString(byte[])|Returns a string representation of the conte
|java.util.Arrays.toString(char[])|Returns a string representation of the conte
|java.util.Arrays.toString(double[])|Returns a string representation of the con
|java.util.Arrays.toString(float[])|Returns a string representation of the cont
|java.util.Arrays.toString(int[])|Returns a string representation of the conten
|java.util.Arrays.toString(long[])|Returns a string representation of the conte
|java.util.Arrays.toString(Object[])|Returns a string representation of the con
|java.util.Arrays.toString(short[])|Returns a string representation of the cont

*java.util.Arrays_Description*

This class contains various methods for manipulating arrays (such as sorting 
and searching). This class also contains a static factory that allows arrays to 
be viewed as lists. 

The methods in this class all throw a NullPointerException if the specified 
array reference is null, except where noted. 

The documentation for the methods contained in this class includes briefs 
description of the implementations. Such descriptions should be regarded as 
implementation notes, rather than parts of the specification. Implementors 
should feel free to substitute other algorithms, so long as the specification 
itself is adhered to. (For example, the algorithm used by sort(Object[]) does 
not have to be a mergesort, but it does have to be stable.) 

This class is a member of the <a href="/../guide/collections/index.html"> Java 
Collections Framework. 


*java.util.Arrays.asList(T[])*

public static |java.util.List| asList(java.lang.Object[] a)

Returns a fixed-size list backed by the specified array. (Changes to the 
returned list "write through" to the array.) This method acts as bridge between 
array-based and collection-based APIs, in combination with Collection.toArray. 
The returned list is serializable and implements (|java.util.RandomAccess|) . 

This method also provides a convenient way to create a fixed-size list 
initialized to contain several elements: 

List stooges = Arrays.asList("Larry", "Moe", "Curly"); 

    a - the array by which the list will be backed. 

    Returns: a list view of the specified array. 
*java.util.Arrays.binarySearch(byte[],byte)*

public static int binarySearch(
  byte[] a,
  byte key)

Searches the specified array of bytes for the specified value using the binary 
search algorithm. The array must be sorted (as by the sort method, above) prior 
to making this call. If it is not sorted, the results are undefined. If the 
array contains multiple elements with the specified value, there is no 
guarantee which one will be found. 

    a - the array to be searched. 
    key - the value to be searched for. 

    Returns: index of the search key, if it is contained in the list; otherwise, 
             (-(insertion point) - 1). The insertion point is defined as the 
             point at which the key would be inserted into the list: the index 
             of the first element greater than the key, or list.size(), if all 
             elements in the list are less than the specified key. Note that 
             this guarantees that the return value will be >= 0 if and only if 
             the key is found. 
*java.util.Arrays.binarySearch(char[],char)*

public static int binarySearch(
  char[] a,
  char key)

Searches the specified array of chars for the specified value using the binary 
search algorithm. The array must be sorted (as by the sort method, above) prior 
to making this call. If it is not sorted, the results are undefined. If the 
array contains multiple elements with the specified value, there is no 
guarantee which one will be found. 

    a - the array to be searched. 
    key - the value to be searched for. 

    Returns: index of the search key, if it is contained in the list; otherwise, 
             (-(insertion point) - 1). The insertion point is defined as the 
             point at which the key would be inserted into the list: the index 
             of the first element greater than the key, or list.size(), if all 
             elements in the list are less than the specified key. Note that 
             this guarantees that the return value will be >= 0 if and only if 
             the key is found. 
*java.util.Arrays.binarySearch(double[],double)*

public static int binarySearch(
  double[] a,
  double key)

Searches the specified array of doubles for the specified value using the 
binary search algorithm. The array must be sorted (as by the sort method, 
above) prior to making this call. If it is not sorted, the results are 
undefined. If the array contains multiple elements with the specified value, 
there is no guarantee which one will be found. This method considers all NaN 
values to be equivalent and equal. 

    a - the array to be searched. 
    key - the value to be searched for. 

    Returns: index of the search key, if it is contained in the list; otherwise, 
             (-(insertion point) - 1). The insertion point is defined as the 
             point at which the key would be inserted into the list: the index 
             of the first element greater than the key, or list.size(), if all 
             elements in the list are less than the specified key. Note that 
             this guarantees that the return value will be >= 0 if and only if 
             the key is found. 
*java.util.Arrays.binarySearch(float[],float)*

public static int binarySearch(
  float[] a,
  float key)

Searches the specified array of floats for the specified value using the binary 
search algorithm. The array must be sorted (as by the sort method, above) prior 
to making this call. If it is not sorted, the results are undefined. If the 
array contains multiple elements with the specified value, there is no 
guarantee which one will be found. This method considers all NaN values to be 
equivalent and equal. 

    a - the array to be searched. 
    key - the value to be searched for. 

    Returns: index of the search key, if it is contained in the list; otherwise, 
             (-(insertion point) - 1). The insertion point is defined as the 
             point at which the key would be inserted into the list: the index 
             of the first element greater than the key, or list.size(), if all 
             elements in the list are less than the specified key. Note that 
             this guarantees that the return value will be >= 0 if and only if 
             the key is found. 
*java.util.Arrays.binarySearch(int[],int)*

public static int binarySearch(
  int[] a,
  int key)

Searches the specified array of ints for the specified value using the binary 
search algorithm. The array must be sorted (as by the sort method, above) prior 
to making this call. If it is not sorted, the results are undefined. If the 
array contains multiple elements with the specified value, there is no 
guarantee which one will be found. 

    a - the array to be searched. 
    key - the value to be searched for. 

    Returns: index of the search key, if it is contained in the list; otherwise, 
             (-(insertion point) - 1). The insertion point is defined as the 
             point at which the key would be inserted into the list: the index 
             of the first element greater than the key, or list.size(), if all 
             elements in the list are less than the specified key. Note that 
             this guarantees that the return value will be >= 0 if and only if 
             the key is found. 
*java.util.Arrays.binarySearch(long[],long)*

public static int binarySearch(
  long[] a,
  long key)

Searches the specified array of longs for the specified value using the binary 
search algorithm. The array must be sorted (as by the sort method, above) prior 
to making this call. If it is not sorted, the results are undefined. If the 
array contains multiple elements with the specified value, there is no 
guarantee which one will be found. 

    a - the array to be searched. 
    key - the value to be searched for. 

    Returns: index of the search key, if it is contained in the list; otherwise, 
             (-(insertion point) - 1). The insertion point is defined as the 
             point at which the key would be inserted into the list: the index 
             of the first element greater than the key, or list.size(), if all 
             elements in the list are less than the specified key. Note that 
             this guarantees that the return value will be >= 0 if and only if 
             the key is found. 
*java.util.Arrays.binarySearch(Object[],Object)*

public static int binarySearch(
  java.lang.Object[] a,
  java.lang.Object key)

Searches the specified array for the specified object using the binary search 
algorithm. The array must be sorted into ascending order according to the 
natural ordering of its elements (as by Sort(Object[]), above) prior to making 
this call. If it is not sorted, the results are undefined. (If the array 
contains elements that are not mutually comparable (for example,strings and 
integers), it cannot be sorted according to the natural order of its elements, 
hence results are undefined.) If the array contains multiple elements equal to 
the specified object, there is no guarantee which one will be found. 

    a - the array to be searched. 
    key - the value to be searched for. 

    Returns: index of the search key, if it is contained in the list; otherwise, 
             (-(insertion point) - 1). The insertion point is defined as the 
             point at which the key would be inserted into the list: the index 
             of the first element greater than the key, or list.size(), if all 
             elements in the list are less than the specified key. Note that 
             this guarantees that the return value will be >= 0 if and only if 
             the key is found. 
*java.util.Arrays.binarySearch(short[],short)*

public static int binarySearch(
  short[] a,
  short key)

Searches the specified array of shorts for the specified value using the binary 
search algorithm. The array must be sorted (as by the sort method, above) prior 
to making this call. If it is not sorted, the results are undefined. If the 
array contains multiple elements with the specified value, there is no 
guarantee which one will be found. 

    a - the array to be searched. 
    key - the value to be searched for. 

    Returns: index of the search key, if it is contained in the list; otherwise, 
             (-(insertion point) - 1). The insertion point is defined as the 
             point at which the key would be inserted into the list: the index 
             of the first element greater than the key, or list.size(), if all 
             elements in the list are less than the specified key. Note that 
             this guarantees that the return value will be >= 0 if and only if 
             the key is found. 
*java.util.Arrays.binarySearch(T[],T,Comparator)*

public static int binarySearch(
  java.lang.Object[] a,
  java.lang.Object key,
  java.util.Comparator c)

Searches the specified array for the specified object using the binary search 
algorithm. The array must be sorted into ascending order according to the 
specified comparator (as by the Sort(Object[], Comparator) method, above), 
prior to making this call. If it is not sorted, the results are undefined. If 
the array contains multiple elements equal to the specified object, there is no 
guarantee which one will be found. 

    a - the array to be searched. 
    key - the value to be searched for. 
    c - the comparator by which the array is ordered. A null value indicates that the 
       elements' natural ordering should be used. 

    Returns: index of the search key, if it is contained in the list; otherwise, 
             (-(insertion point) - 1). The insertion point is defined as the 
             point at which the key would be inserted into the list: the index 
             of the first element greater than the key, or list.size(), if all 
             elements in the list are less than the specified key. Note that 
             this guarantees that the return value will be >= 0 if and only if 
             the key is found. 
*java.util.Arrays.deepEquals(Object[],Object[])*

public static boolean deepEquals(
  java.lang.Object[] a1,
  java.lang.Object[] a2)

Returns true if the two specified arrays are deeply equal to one another. 
Unlike the @link{#equals{Object[],Object[]) method, this method is appropriate 
for use with nested arrays of arbitrary depth. 

Two array references are considered deeply equal if both are null, or if they 
refer to arrays that contain the same number of elements and all corresponding 
pairs of elements in the two arrays are deeply equal. 

Two possibly null elements e1 and e2 are deeply equal if any of the following 
conditions hold: 

e1 and e2 are both arrays of object reference types, and Arrays.deepEquals(e1, 
e2) would return true e1 and e2 are arrays of the same primitive type, and the 
appropriate overloading of Arrays.equals(e1, e2) would return true. e1 == e2 
e1.equals(e2) would return true. 

Note that this definition permits null elements at any depth. 

If either of the specified arrays contain themselves as elements either 
directly or indirectly through one or more levels of arrays, the behavior of 
this method is undefined. 

    a1 - one array to be tested for equality 
    a2 - the other array to be tested for equality 

    Returns: true if the two arrays are equal 
*java.util.Arrays.deepHashCode(Object[])*

public static int deepHashCode(java.lang.Object[] a)

Returns a hash code based on the "deep contents" of the specified array. If the 
array contains other arrays as elements, the hash code is based on their 
contents and so on, ad infinitum. It is therefore unacceptable to invoke this 
method on an array that contains itself as an element, either directly or 
indirectly through one or more levels of arrays. The behavior of such an 
invocation is undefined. 

For any two arrays a and b such that Arrays.deepEquals(a, b), it is also the 
case that Arrays.deepHashCode(a) == Arrays.deepHashCode(b). 

The computation of the value returned by this method is similar to that of the 
value returned by (|java.util.List|) on a list containing the same elements as 
a in the same order, with one difference: If an element e of a is itself an 
array, its hash code is computed not by calling e.hashCode(), but as by calling 
the appropriate overloading of Arrays.hashCode(e) if e is an array of a 
primitive type, or as by calling Arrays.deepHashCode(e) recursively if e is an 
array of a reference type. If a is null, this method returns 0. 

    a - the array whose deep-content-based hash code to compute 

    Returns: a deep-content-based hash code for a 
*java.util.Arrays.deepToString(Object[])*

public static |java.lang.String| deepToString(java.lang.Object[] a)

Returns a string representation of the "deep contents" of the specified array. 
If the array contains other arrays as elements, the string representation 
contains their contents and so on. This method is designed for converting 
multidimensional arrays to strings. 

The string representation consists of a list of the array's elements, enclosed 
in square brackets ("[]"). Adjacent elements are separated by the characters ", 
" (a comma followed by a space). Elements are converted to strings as by 
String.valueOf(Object), unless they are themselves arrays. 

If an element e is an array of a primitive type, it is converted to a string as 
by invoking the appropriate overloading of Arrays.toString(e). If an element e 
is an array of a reference type, it is converted to a string as by invoking 
this method recursively. 

To avoid infinite recursion, if the specified array contains itself as an 
element, or contains an indirect reference to itself through one or more levels 
of arrays, the self-reference is converted to the string "[...]". For example, 
an array containing only a reference to itself would be rendered as "[[...]]". 

This method returns "null" if the specified array is null. 

    a - the array whose string representation to return 

    Returns: a string representation of a 
*java.util.Arrays.equals(boolean[],boolean[])*

public static boolean equals(
  boolean[] a,
  boolean[] a2)

Returns true if the two specified arrays of booleans are equal to one another. 
Two arrays are considered equal if both arrays contain the same number of 
elements, and all corresponding pairs of elements in the two arrays are equal. 
In other words, two arrays are equal if they contain the same elements in the 
same order. Also, two array references are considered equal if both are null. 

    a - one array to be tested for equality. 
    a2 - the other array to be tested for equality. 

    Returns: true if the two arrays are equal. 
*java.util.Arrays.equals(byte[],byte[])*

public static boolean equals(
  byte[] a,
  byte[] a2)

Returns true if the two specified arrays of bytes are equal to one another. Two 
arrays are considered equal if both arrays contain the same number of elements, 
and all corresponding pairs of elements in the two arrays are equal. In other 
words, two arrays are equal if they contain the same elements in the same 
order. Also, two array references are considered equal if both are null. 

    a - one array to be tested for equality. 
    a2 - the other array to be tested for equality. 

    Returns: true if the two arrays are equal. 
*java.util.Arrays.equals(char[],char[])*

public static boolean equals(
  char[] a,
  char[] a2)

Returns true if the two specified arrays of chars are equal to one another. Two 
arrays are considered equal if both arrays contain the same number of elements, 
and all corresponding pairs of elements in the two arrays are equal. In other 
words, two arrays are equal if they contain the same elements in the same 
order. Also, two array references are considered equal if both are null. 

    a - one array to be tested for equality. 
    a2 - the other array to be tested for equality. 

    Returns: true if the two arrays are equal. 
*java.util.Arrays.equals(double[],double[])*

public static boolean equals(
  double[] a,
  double[] a2)

Returns true if the two specified arrays of doubles are equal to one another. 
Two arrays are considered equal if both arrays contain the same number of 
elements, and all corresponding pairs of elements in the two arrays are equal. 
In other words, two arrays are equal if they contain the same elements in the 
same order. Also, two array references are considered equal if both are null. 

Two doubles d1 and d2 are considered equal if: 

new Double(d1).equals(new Double(d2)) 

(Unlike the == operator, this method considers NaN equals to itself, and 0.0d 
unequal to -0.0d.) 

    a - one array to be tested for equality. 
    a2 - the other array to be tested for equality. 

    Returns: true if the two arrays are equal. 
*java.util.Arrays.equals(float[],float[])*

public static boolean equals(
  float[] a,
  float[] a2)

Returns true if the two specified arrays of floats are equal to one another. 
Two arrays are considered equal if both arrays contain the same number of 
elements, and all corresponding pairs of elements in the two arrays are equal. 
In other words, two arrays are equal if they contain the same elements in the 
same order. Also, two array references are considered equal if both are null. 

Two floats f1 and f2 are considered equal if: 

new Float(f1).equals(new Float(f2)) 

(Unlike the == operator, this method considers NaN equals to itself, and 0.0f 
unequal to -0.0f.) 

    a - one array to be tested for equality. 
    a2 - the other array to be tested for equality. 

    Returns: true if the two arrays are equal. 
*java.util.Arrays.equals(int[],int[])*

public static boolean equals(
  int[] a,
  int[] a2)

Returns true if the two specified arrays of ints are equal to one another. Two 
arrays are considered equal if both arrays contain the same number of elements, 
and all corresponding pairs of elements in the two arrays are equal. In other 
words, two arrays are equal if they contain the same elements in the same 
order. Also, two array references are considered equal if both are null. 

    a - one array to be tested for equality. 
    a2 - the other array to be tested for equality. 

    Returns: true if the two arrays are equal. 
*java.util.Arrays.equals(long[],long[])*

public static boolean equals(
  long[] a,
  long[] a2)

Returns true if the two specified arrays of longs are equal to one another. Two 
arrays are considered equal if both arrays contain the same number of elements, 
and all corresponding pairs of elements in the two arrays are equal. In other 
words, two arrays are equal if they contain the same elements in the same 
order. Also, two array references are considered equal if both are null. 

    a - one array to be tested for equality. 
    a2 - the other array to be tested for equality. 

    Returns: true if the two arrays are equal. 
*java.util.Arrays.equals(Object[],Object[])*

public static boolean equals(
  java.lang.Object[] a,
  java.lang.Object[] a2)

Returns true if the two specified arrays of Objects are equal to one another. 
The two arrays are considered equal if both arrays contain the same number of 
elements, and all corresponding pairs of elements in the two arrays are equal. 
Two objects e1 and e2 are considered equal if (e1==null ? e2==null : 
e1.equals(e2)). In other words, the two arrays are equal if they contain the 
same elements in the same order. Also, two array references are considered 
equal if both are null. 

    a - one array to be tested for equality. 
    a2 - the other array to be tested for equality. 

    Returns: true if the two arrays are equal. 
*java.util.Arrays.equals(short[],short[])*

public static boolean equals(
  short[] a,
  short[] a2)

Returns true if the two specified arrays of shorts are equal to one another. 
Two arrays are considered equal if both arrays contain the same number of 
elements, and all corresponding pairs of elements in the two arrays are equal. 
In other words, two arrays are equal if they contain the same elements in the 
same order. Also, two array references are considered equal if both are null. 

    a - one array to be tested for equality. 
    a2 - the other array to be tested for equality. 

    Returns: true if the two arrays are equal. 
*java.util.Arrays.fill(boolean[],boolean)*

public static void fill(
  boolean[] a,
  boolean val)

Assigns the specified boolean value to each element of the specified array of 
booleans. 

    a - the array to be filled. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(boolean[],int,int,boolean)*

public static void fill(
  boolean[] a,
  int fromIndex,
  int toIndex,
  boolean val)

Assigns the specified boolean value to each element of the specified range of 
the specified array of booleans. The range to be filled extends from index 
fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the 
range to be filled is empty.) 

    a - the array to be filled. 
    fromIndex - the index of the first element (inclusive) to be filled with the specified 
       value. 
    toIndex - the index of the last element (exclusive) to be filled with the specified 
       value. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(byte[],byte)*

public static void fill(
  byte[] a,
  byte val)

Assigns the specified byte value to each element of the specified array of 
bytes. 

    a - the array to be filled. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(byte[],int,int,byte)*

public static void fill(
  byte[] a,
  int fromIndex,
  int toIndex,
  byte val)

Assigns the specified byte value to each element of the specified range of the 
specified array of bytes. The range to be filled extends from index fromIndex, 
inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be 
filled is empty.) 

    a - the array to be filled. 
    fromIndex - the index of the first element (inclusive) to be filled with the specified 
       value. 
    toIndex - the index of the last element (exclusive) to be filled with the specified 
       value. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(char[],char)*

public static void fill(
  char[] a,
  char val)

Assigns the specified char value to each element of the specified array of 
chars. 

    a - the array to be filled. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(char[],int,int,char)*

public static void fill(
  char[] a,
  int fromIndex,
  int toIndex,
  char val)

Assigns the specified char value to each element of the specified range of the 
specified array of chars. The range to be filled extends from index fromIndex, 
inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be 
filled is empty.) 

    a - the array to be filled. 
    fromIndex - the index of the first element (inclusive) to be filled with the specified 
       value. 
    toIndex - the index of the last element (exclusive) to be filled with the specified 
       value. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(double[],double)*

public static void fill(
  double[] a,
  double val)

Assigns the specified double value to each element of the specified array of 
doubles. 

    a - the array to be filled. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(double[],int,int,double)*

public static void fill(
  double[] a,
  int fromIndex,
  int toIndex,
  double val)

Assigns the specified double value to each element of the specified range of 
the specified array of doubles. The range to be filled extends from index 
fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the 
range to be filled is empty.) 

    a - the array to be filled. 
    fromIndex - the index of the first element (inclusive) to be filled with the specified 
       value. 
    toIndex - the index of the last element (exclusive) to be filled with the specified 
       value. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(float[],float)*

public static void fill(
  float[] a,
  float val)

Assigns the specified float value to each element of the specified array of 
floats. 

    a - the array to be filled. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(float[],int,int,float)*

public static void fill(
  float[] a,
  int fromIndex,
  int toIndex,
  float val)

Assigns the specified float value to each element of the specified range of the 
specified array of floats. The range to be filled extends from index fromIndex, 
inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be 
filled is empty.) 

    a - the array to be filled. 
    fromIndex - the index of the first element (inclusive) to be filled with the specified 
       value. 
    toIndex - the index of the last element (exclusive) to be filled with the specified 
       value. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(int[],int)*

public static void fill(
  int[] a,
  int val)

Assigns the specified int value to each element of the specified array of ints. 

    a - the array to be filled. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(int[],int,int,int)*

public static void fill(
  int[] a,
  int fromIndex,
  int toIndex,
  int val)

Assigns the specified int value to each element of the specified range of the 
specified array of ints. The range to be filled extends from index fromIndex, 
inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be 
filled is empty.) 

    a - the array to be filled. 
    fromIndex - the index of the first element (inclusive) to be filled with the specified 
       value. 
    toIndex - the index of the last element (exclusive) to be filled with the specified 
       value. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(long[],int,int,long)*

public static void fill(
  long[] a,
  int fromIndex,
  int toIndex,
  long val)

Assigns the specified long value to each element of the specified range of the 
specified array of longs. The range to be filled extends from index fromIndex, 
inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be 
filled is empty.) 

    a - the array to be filled. 
    fromIndex - the index of the first element (inclusive) to be filled with the specified 
       value. 
    toIndex - the index of the last element (exclusive) to be filled with the specified 
       value. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(long[],long)*

public static void fill(
  long[] a,
  long val)

Assigns the specified long value to each element of the specified array of 
longs. 

    a - the array to be filled. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(Object[],int,int,Object)*

public static void fill(
  java.lang.Object[] a,
  int fromIndex,
  int toIndex,
  java.lang.Object val)

Assigns the specified Object reference to each element of the specified range 
of the specified array of Objects. The range to be filled extends from index 
fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the 
range to be filled is empty.) 

    a - the array to be filled. 
    fromIndex - the index of the first element (inclusive) to be filled with the specified 
       value. 
    toIndex - the index of the last element (exclusive) to be filled with the specified 
       value. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(Object[],Object)*

public static void fill(
  java.lang.Object[] a,
  java.lang.Object val)

Assigns the specified Object reference to each element of the specified array 
of Objects. 

    a - the array to be filled. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(short[],int,int,short)*

public static void fill(
  short[] a,
  int fromIndex,
  int toIndex,
  short val)

Assigns the specified short value to each element of the specified range of the 
specified array of shorts. The range to be filled extends from index fromIndex, 
inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be 
filled is empty.) 

    a - the array to be filled. 
    fromIndex - the index of the first element (inclusive) to be filled with the specified 
       value. 
    toIndex - the index of the last element (exclusive) to be filled with the specified 
       value. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.fill(short[],short)*

public static void fill(
  short[] a,
  short val)

Assigns the specified short value to each element of the specified array of 
shorts. 

    a - the array to be filled. 
    val - the value to be stored in all elements of the array. 

*java.util.Arrays.hashCode(boolean[])*

public static int hashCode(boolean[] a)

Returns a hash code based on the contents of the specified array. For any two 
boolean arrays a and b such that Arrays.equals(a, b), it is also the case that 
Arrays.hashCode(a) == Arrays.hashCode(b). 

The value returned by this method is the same value that would be obtained by 
invoking the <tt>hashCode</tt>(|java.util.List|) method on a (|java.util.List|) 
containing a sequence of (|java.lang.Boolean|) instances representing the 
elements of a in the same order. If a is null, this method returns 0. 

    a - the array whose hash value to compute 

    Returns: a content-based hash code for a 
*java.util.Arrays.hashCode(byte[])*

public static int hashCode(byte[] a)

Returns a hash code based on the contents of the specified array. For any two 
byte arrays a and b such that Arrays.equals(a, b), it is also the case that 
Arrays.hashCode(a) == Arrays.hashCode(b). 

The value returned by this method is the same value that would be obtained by 
invoking the <tt>hashCode</tt>(|java.util.List|) method on a (|java.util.List|) 
containing a sequence of (|java.lang.Byte|) instances representing the elements 
of a in the same order. If a is null, this method returns 0. 

    a - the array whose hash value to compute 

    Returns: a content-based hash code for a 
*java.util.Arrays.hashCode(char[])*

public static int hashCode(char[] a)

Returns a hash code based on the contents of the specified array. For any two 
char arrays a and b such that Arrays.equals(a, b), it is also the case that 
Arrays.hashCode(a) == Arrays.hashCode(b). 

The value returned by this method is the same value that would be obtained by 
invoking the <tt>hashCode</tt>(|java.util.List|) method on a (|java.util.List|) 
containing a sequence of (|java.lang.Character|) instances representing the 
elements of a in the same order. If a is null, this method returns 0. 

    a - the array whose hash value to compute 

    Returns: a content-based hash code for a 
*java.util.Arrays.hashCode(double[])*

public static int hashCode(double[] a)

Returns a hash code based on the contents of the specified array. For any two 
double arrays a and b such that Arrays.equals(a, b), it is also the case that 
Arrays.hashCode(a) == Arrays.hashCode(b). 

The value returned by this method is the same value that would be obtained by 
invoking the <tt>hashCode</tt>(|java.util.List|) method on a (|java.util.List|) 
containing a sequence of (|java.lang.Double|) instances representing the 
elements of a in the same order. If a is null, this method returns 0. 

    a - the array whose hash value to compute 

    Returns: a content-based hash code for a 
*java.util.Arrays.hashCode(float[])*

public static int hashCode(float[] a)

Returns a hash code based on the contents of the specified array. For any two 
float arrays a and b such that Arrays.equals(a, b), it is also the case that 
Arrays.hashCode(a) == Arrays.hashCode(b). 

The value returned by this method is the same value that would be obtained by 
invoking the <tt>hashCode</tt>(|java.util.List|) method on a (|java.util.List|) 
containing a sequence of (|java.lang.Float|) instances representing the 
elements of a in the same order. If a is null, this method returns 0. 

    a - the array whose hash value to compute 

    Returns: a content-based hash code for a 
*java.util.Arrays.hashCode(int[])*

public static int hashCode(int[] a)

Returns a hash code based on the contents of the specified array. For any two 
non-null int arrays a and b such that Arrays.equals(a, b), it is also the case 
that Arrays.hashCode(a) == Arrays.hashCode(b). 

The value returned by this method is the same value that would be obtained by 
invoking the <tt>hashCode</tt>(|java.util.List|) method on a (|java.util.List|) 
containing a sequence of (|java.lang.Integer|) instances representing the 
elements of a in the same order. If a is null, this method returns 0. 

    a - the array whose hash value to compute 

    Returns: a content-based hash code for a 
*java.util.Arrays.hashCode(long[])*

public static int hashCode(long[] a)

Returns a hash code based on the contents of the specified array. For any two 
long arrays a and b such that Arrays.equals(a, b), it is also the case that 
Arrays.hashCode(a) == Arrays.hashCode(b). 

The value returned by this method is the same value that would be obtained by 
invoking the <tt>hashCode</tt>(|java.util.List|) method on a (|java.util.List|) 
containing a sequence of (|java.lang.Long|) instances representing the elements 
of a in the same order. If a is null, this method returns 0. 

    a - the array whose hash value to compute 

    Returns: a content-based hash code for a 
*java.util.Arrays.hashCode(Object[])*

public static int hashCode(java.lang.Object[] a)

Returns a hash code based on the contents of the specified array. If the array 
contains other arrays as elements, the hash code is based on their identities 
rather than their contents. It is therefore acceptable to invoke this method on 
an array that contains itself as an element, either directly or indirectly 
through one or more levels of arrays. 

For any two arrays a and b such that Arrays.equals(a, b), it is also the case 
that Arrays.hashCode(a) == Arrays.hashCode(b). 

The value returned by this method is equal to the value that would be returned 
by Arrays.asList(a).hashCode(), unless a is null, in which case 0 is returned. 

    a - the array whose content-based hash code to compute 

    Returns: a content-based hash code for a 
*java.util.Arrays.hashCode(short[])*

public static int hashCode(short[] a)

Returns a hash code based on the contents of the specified array. For any two 
short arrays a and b such that Arrays.equals(a, b), it is also the case that 
Arrays.hashCode(a) == Arrays.hashCode(b). 

The value returned by this method is the same value that would be obtained by 
invoking the <tt>hashCode</tt>(|java.util.List|) method on a (|java.util.List|) 
containing a sequence of (|java.lang.Short|) instances representing the 
elements of a in the same order. If a is null, this method returns 0. 

    a - the array whose hash value to compute 

    Returns: a content-based hash code for a 
*java.util.Arrays.sort(byte[])*

public static void sort(byte[] a)

Sorts the specified array of bytes into ascending numerical order. The sorting 
algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas 
McIlroy's "Engineering a Sort Function", Software-Practice and Experience, Vol. 
23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance 
on many data sets that cause other quicksorts to degrade to quadratic 
performance. 

    a - the array to be sorted. 

*java.util.Arrays.sort(byte[],int,int)*

public static void sort(
  byte[] a,
  int fromIndex,
  int toIndex)

Sorts the specified range of the specified array of bytes into ascending 
numerical order. The range to be sorted extends from index fromIndex, 
inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be 
sorted is empty.) 

The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. 
Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
n*log(n) performance on many data sets that cause other quicksorts to degrade 
to quadratic performance. 

    a - the array to be sorted. 
    fromIndex - the index of the first element (inclusive) to be sorted. 
    toIndex - the index of the last element (exclusive) to be sorted. 

*java.util.Arrays.sort(char[])*

public static void sort(char[] a)

Sorts the specified array of chars into ascending numerical order. The sorting 
algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas 
McIlroy's "Engineering a Sort Function", Software-Practice and Experience, Vol. 
23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance 
on many data sets that cause other quicksorts to degrade to quadratic 
performance. 

    a - the array to be sorted. 

*java.util.Arrays.sort(char[],int,int)*

public static void sort(
  char[] a,
  int fromIndex,
  int toIndex)

Sorts the specified range of the specified array of chars into ascending 
numerical order. The range to be sorted extends from index fromIndex, 
inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be 
sorted is empty.) 

The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. 
Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
n*log(n) performance on many data sets that cause other quicksorts to degrade 
to quadratic performance. 

    a - the array to be sorted. 
    fromIndex - the index of the first element (inclusive) to be sorted. 
    toIndex - the index of the last element (exclusive) to be sorted. 

*java.util.Arrays.sort(double[])*

public static void sort(double[] a)

Sorts the specified array of doubles into ascending numerical order. 

The < relation does not provide a total order on all floating-point values; 
although they are distinct numbers -0.0 == 0.0 is true and a NaN value compares 
neither less than, greater than, nor equal to any floating-point value, even 
itself. To allow the sort to proceed, instead of using the < relation to 
determine ascending numerical order, this method uses the total order imposed 
by (|java.lang.Double|) . This ordering differs from the < relation in that 
-0.0 is treated as less than 0.0 and NaN is considered greater than any other 
floating-point value. For the purposes of sorting, all NaN values are 
considered equivalent and equal. 

The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. 
Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
n*log(n) performance on many data sets that cause other quicksorts to degrade 
to quadratic performance. 

    a - the array to be sorted. 

*java.util.Arrays.sort(double[],int,int)*

public static void sort(
  double[] a,
  int fromIndex,
  int toIndex)

Sorts the specified range of the specified array of doubles into ascending 
numerical order. The range to be sorted extends from index fromIndex, 
inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be 
sorted is empty.) 

The < relation does not provide a total order on all floating-point values; 
although they are distinct numbers -0.0 == 0.0 is true and a NaN value compares 
neither less than, greater than, nor equal to any floating-point value, even 
itself. To allow the sort to proceed, instead of using the < relation to 
determine ascending numerical order, this method uses the total order imposed 
by (|java.lang.Double|) . This ordering differs from the < relation in that 
-0.0 is treated as less than 0.0 and NaN is considered greater than any other 
floating-point value. For the purposes of sorting, all NaN values are 
considered equivalent and equal. 

The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. 
Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
n*log(n) performance on many data sets that cause other quicksorts to degrade 
to quadratic performance. 

    a - the array to be sorted. 
    fromIndex - the index of the first element (inclusive) to be sorted. 
    toIndex - the index of the last element (exclusive) to be sorted. 

*java.util.Arrays.sort(float[])*

public static void sort(float[] a)

Sorts the specified array of floats into ascending numerical order. 

The < relation does not provide a total order on all floating-point values; 
although they are distinct numbers -0.0f == 0.0f is true and a NaN value 
compares neither less than, greater than, nor equal to any floating-point 
value, even itself. To allow the sort to proceed, instead of using the < 
relation to determine ascending numerical order, this method uses the total 
order imposed by (|java.lang.Float|) . This ordering differs from the < 
relation in that -0.0f is treated as less than 0.0f and NaN is considered 
greater than any other floating-point value. For the purposes of sorting, all 
NaN values are considered equivalent and equal. 

The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. 
Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
n*log(n) performance on many data sets that cause other quicksorts to degrade 
to quadratic performance. 

    a - the array to be sorted. 

*java.util.Arrays.sort(float[],int,int)*

public static void sort(
  float[] a,
  int fromIndex,
  int toIndex)

Sorts the specified range of the specified array of floats into ascending 
numerical order. The range to be sorted extends from index fromIndex, 
inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be 
sorted is empty.) 

The < relation does not provide a total order on all floating-point values; 
although they are distinct numbers -0.0f == 0.0f is true and a NaN value 
compares neither less than, greater than, nor equal to any floating-point 
value, even itself. To allow the sort to proceed, instead of using the < 
relation to determine ascending numerical order, this method uses the total 
order imposed by (|java.lang.Float|) . This ordering differs from the < 
relation in that -0.0f is treated as less than 0.0f and NaN is considered 
greater than any other floating-point value. For the purposes of sorting, all 
NaN values are considered equivalent and equal. 

The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. 
Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
n*log(n) performance on many data sets that cause other quicksorts to degrade 
to quadratic performance. 

    a - the array to be sorted. 
    fromIndex - the index of the first element (inclusive) to be sorted. 
    toIndex - the index of the last element (exclusive) to be sorted. 

*java.util.Arrays.sort(int[])*

public static void sort(int[] a)

Sorts the specified array of ints into ascending numerical order. The sorting 
algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas 
McIlroy's "Engineering a Sort Function", Software-Practice and Experience, Vol. 
23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance 
on many data sets that cause other quicksorts to degrade to quadratic 
performance. 

    a - the array to be sorted. 

*java.util.Arrays.sort(int[],int,int)*

public static void sort(
  int[] a,
  int fromIndex,
  int toIndex)

Sorts the specified range of the specified array of ints into ascending 
numerical order. The range to be sorted extends from index fromIndex, 
inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be 
sorted is empty.) 

The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. 
Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
n*log(n) performance on many data sets that cause other quicksorts to degrade 
to quadratic performance. 

    a - the array to be sorted. 
    fromIndex - the index of the first element (inclusive) to be sorted. 
    toIndex - the index of the last element (exclusive) to be sorted. 

*java.util.Arrays.sort(long[])*

public static void sort(long[] a)

Sorts the specified array of longs into ascending numerical order. The sorting 
algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas 
McIlroy's "Engineering a Sort Function", Software-Practice and Experience, Vol. 
23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance 
on many data sets that cause other quicksorts to degrade to quadratic 
performance. 

    a - the array to be sorted. 

*java.util.Arrays.sort(long[],int,int)*

public static void sort(
  long[] a,
  int fromIndex,
  int toIndex)

Sorts the specified range of the specified array of longs into ascending 
numerical order. The range to be sorted extends from index fromIndex, 
inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be 
sorted is empty.) 

The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. 
Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
n*log(n) performance on many data sets that cause other quicksorts to degrade 
to quadratic performance. 

    a - the array to be sorted. 
    fromIndex - the index of the first element (inclusive) to be sorted. 
    toIndex - the index of the last element (exclusive) to be sorted. 

*java.util.Arrays.sort(Object[])*

public static void sort(java.lang.Object[] a)

Sorts the specified array of objects into ascending order, according to the 
natural ordering of its elements. All elements in the array must implement the 
Comparable interface. Furthermore, all elements in the array must be mutually 
comparable (that is, e1.compareTo(e2) must not throw a ClassCastException for 
any elements e1 and e2 in the array). 

This sort is guaranteed to be stable: equal elements will not be reordered as a 
result of the sort. 

The sorting algorithm is a modified mergesort (in which the merge is omitted if 
the highest element in the low sublist is less than the lowest element in the 
high sublist). This algorithm offers guaranteed n*log(n) performance. 

    a - the array to be sorted. 

*java.util.Arrays.sort(Object[],int,int)*

public static void sort(
  java.lang.Object[] a,
  int fromIndex,
  int toIndex)

Sorts the specified range of the specified array of objects into ascending 
order, according to the natural ordering of its elements. The range to be 
sorted extends from index fromIndex, inclusive, to index toIndex, exclusive. 
(If fromIndex==toIndex, the range to be sorted is empty.) All elements in this 
range must implement the Comparable interface. Furthermore, all elements in 
this range must be mutually comparable (that is, e1.compareTo(e2) must not 
throw a ClassCastException for any elements e1 and e2 in the array). 

This sort is guaranteed to be stable: equal elements will not be reordered as a 
result of the sort. 

The sorting algorithm is a modified mergesort (in which the merge is omitted if 
the highest element in the low sublist is less than the lowest element in the 
high sublist). This algorithm offers guaranteed n*log(n) performance. 

    a - the array to be sorted. 
    fromIndex - the index of the first element (inclusive) to be sorted. 
    toIndex - the index of the last element (exclusive) to be sorted. 

*java.util.Arrays.sort(short[])*

public static void sort(short[] a)

Sorts the specified array of shorts into ascending numerical order. The sorting 
algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas 
McIlroy's "Engineering a Sort Function", Software-Practice and Experience, Vol. 
23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance 
on many data sets that cause other quicksorts to degrade to quadratic 
performance. 

    a - the array to be sorted. 

*java.util.Arrays.sort(short[],int,int)*

public static void sort(
  short[] a,
  int fromIndex,
  int toIndex)

Sorts the specified range of the specified array of shorts into ascending 
numerical order. The range to be sorted extends from index fromIndex, 
inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be 
sorted is empty.) 

The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. 
Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
n*log(n) performance on many data sets that cause other quicksorts to degrade 
to quadratic performance. 

    a - the array to be sorted. 
    fromIndex - the index of the first element (inclusive) to be sorted. 
    toIndex - the index of the last element (exclusive) to be sorted. 

*java.util.Arrays.sort(T[],Comparator)*

public static void sort(
  java.lang.Object[] a,
  java.util.Comparator c)

Sorts the specified array of objects according to the order induced by the 
specified comparator. All elements in the array must be mutually comparable by 
the specified comparator (that is, c.compare(e1, e2) must not throw a 
ClassCastException for any elements e1 and e2 in the array). 

This sort is guaranteed to be stable: equal elements will not be reordered as a 
result of the sort. 

The sorting algorithm is a modified mergesort (in which the merge is omitted if 
the highest element in the low sublist is less than the lowest element in the 
high sublist). This algorithm offers guaranteed n*log(n) performance. 

    a - the array to be sorted. 
    c - the comparator to determine the order of the array. A null value indicates that 
       the elements' natural ordering should be used. 

*java.util.Arrays.sort(T[],int,int,Comparator)*

public static void sort(
  java.lang.Object[] a,
  int fromIndex,
  int toIndex,
  java.util.Comparator c)

Sorts the specified range of the specified array of objects according to the 
order induced by the specified comparator. The range to be sorted extends from 
index fromIndex, inclusive, to index toIndex, exclusive. (If 
fromIndex==toIndex, the range to be sorted is empty.) All elements in the range 
must be mutually comparable by the specified comparator (that is, c.compare(e1, 
e2) must not throw a ClassCastException for any elements e1 and e2 in the 
range). 

This sort is guaranteed to be stable: equal elements will not be reordered as a 
result of the sort. 

The sorting algorithm is a modified mergesort (in which the merge is omitted if 
the highest element in the low sublist is less than the lowest element in the 
high sublist). This algorithm offers guaranteed n*log(n) performance. 

    a - the array to be sorted. 
    fromIndex - the index of the first element (inclusive) to be sorted. 
    toIndex - the index of the last element (exclusive) to be sorted. 
    c - the comparator to determine the order of the array. A null value indicates that 
       the elements' natural ordering should be used. 

*java.util.Arrays.toString(boolean[])*

public static |java.lang.String| toString(boolean[] a)

Returns a string representation of the contents of the specified array. The 
string representation consists of a list of the array's elements, enclosed in 
square brackets ("[]"). Adjacent elements are separated by the characters ", " 
(a comma followed by a space). Elements are converted to strings as by 
String.valueOf(boolean). Returns "null" if a is null. 

    a - the array whose string representation to return 

    Returns: a string representation of a 
*java.util.Arrays.toString(byte[])*

public static |java.lang.String| toString(byte[] a)

Returns a string representation of the contents of the specified array. The 
string representation consists of a list of the array's elements, enclosed in 
square brackets ("[]"). Adjacent elements are separated by the characters ", " 
(a comma followed by a space). Elements are converted to strings as by 
String.valueOf(byte). Returns "null" if a is null. 

    a - the array whose string representation to return 

    Returns: a string representation of a 
*java.util.Arrays.toString(char[])*

public static |java.lang.String| toString(char[] a)

Returns a string representation of the contents of the specified array. The 
string representation consists of a list of the array's elements, enclosed in 
square brackets ("[]"). Adjacent elements are separated by the characters ", " 
(a comma followed by a space). Elements are converted to strings as by 
String.valueOf(char). Returns "null" if a is null. 

    a - the array whose string representation to return 

    Returns: a string representation of a 
*java.util.Arrays.toString(double[])*

public static |java.lang.String| toString(double[] a)

Returns a string representation of the contents of the specified array. The 
string representation consists of a list of the array's elements, enclosed in 
square brackets ("[]"). Adjacent elements are separated by the characters ", " 
(a comma followed by a space). Elements are converted to strings as by 
String.valueOf(double). Returns "null" if a is null. 

    a - the array whose string representation to return 

    Returns: a string representation of a 
*java.util.Arrays.toString(float[])*

public static |java.lang.String| toString(float[] a)

Returns a string representation of the contents of the specified array. The 
string representation consists of a list of the array's elements, enclosed in 
square brackets ("[]"). Adjacent elements are separated by the characters ", " 
(a comma followed by a space). Elements are converted to strings as by 
String.valueOf(float). Returns "null" if a is null. 

    a - the array whose string representation to return 

    Returns: a string representation of a 
*java.util.Arrays.toString(int[])*

public static |java.lang.String| toString(int[] a)

Returns a string representation of the contents of the specified array. The 
string representation consists of a list of the array's elements, enclosed in 
square brackets ("[]"). Adjacent elements are separated by the characters ", " 
(a comma followed by a space). Elements are converted to strings as by 
String.valueOf(int). Returns "null" if a is null. 

    a - the array whose string representation to return 

    Returns: a string representation of a 
*java.util.Arrays.toString(long[])*

public static |java.lang.String| toString(long[] a)

Returns a string representation of the contents of the specified array. The 
string representation consists of a list of the array's elements, enclosed in 
square brackets ("[]"). Adjacent elements are separated by the characters ", " 
(a comma followed by a space). Elements are converted to strings as by 
String.valueOf(long). Returns "null" if a is null. 

    a - the array whose string representation to return 

    Returns: a string representation of a 
*java.util.Arrays.toString(Object[])*

public static |java.lang.String| toString(java.lang.Object[] a)

Returns a string representation of the contents of the specified array. If the 
array contains other arrays as elements, they are converted to strings by the 
(|java.lang.Object|) method inherited from Object, which describes their 
identities rather than their contents. 

The value returned by this method is equal to the value that would be returned 
by Arrays.asList(a).toString(), unless a is null, in which case "null" is 
returned. 

    a - the array whose string representation to return 

    Returns: a string representation of a 
*java.util.Arrays.toString(short[])*

public static |java.lang.String| toString(short[] a)

Returns a string representation of the contents of the specified array. The 
string representation consists of a list of the array's elements, enclosed in 
square brackets ("[]"). Adjacent elements are separated by the characters ", " 
(a comma followed by a space). Elements are converted to strings as by 
String.valueOf(short). Returns "null" if a is null. 

    a - the array whose string representation to return 

    Returns: a string representation of a 


*javax.swing.BoxLayout* *BoxLayout* A layout manager that allows multiple compon

public class BoxLayout
  extends    |java.lang.Object|
  implements |java.awt.LayoutManager2|
             |java.io.Serializable|

|javax.swing.BoxLayout_Description|
|javax.swing.BoxLayout_Fields|
|javax.swing.BoxLayout_Constructors|
|javax.swing.BoxLayout_Methods|

================================================================================

*javax.swing.BoxLayout_Fields*
|int_javax.swing.BoxLayout.LINE_AXIS|
|int_javax.swing.BoxLayout.PAGE_AXIS|
|int_javax.swing.BoxLayout.X_AXIS|
|int_javax.swing.BoxLayout.Y_AXIS|

*javax.swing.BoxLayout_Constructors*
|javax.swing.BoxLayout(Container,int)|Creates a layout manager that will lay ou

*javax.swing.BoxLayout_Methods*
|javax.swing.BoxLayout.addLayoutComponent(Component,Object)|Not used by this cl
|javax.swing.BoxLayout.addLayoutComponent(String,Component)|Not used by this cl
|javax.swing.BoxLayout.getLayoutAlignmentX(Container)|Returns the alignment alo
|javax.swing.BoxLayout.getLayoutAlignmentY(Container)|Returns the alignment alo
|javax.swing.BoxLayout.invalidateLayout(Container)|Indicates that a child has c
|javax.swing.BoxLayout.layoutContainer(Container)|Called by the AWT  when the s
|javax.swing.BoxLayout.maximumLayoutSize(Container)|Returns the maximum dimensi
|javax.swing.BoxLayout.minimumLayoutSize(Container)|Returns the minimum dimensi
|javax.swing.BoxLayout.preferredLayoutSize(Container)|Returns the preferred dim
|javax.swing.BoxLayout.removeLayoutComponent(Component)|Not used by this class.

*javax.swing.BoxLayout_Description*

A layout manager that allows multiple components to be laid out either 
vertically or horizontally. The components will not wrap so, for example, a 
vertical arrangement of components will stay vertically arranged when the frame 
is resized. 







Nesting multiple panels with different combinations of horizontal and vertical 
gives an effect similar to GridBagLayout, without the complexity. The diagram 
shows two panels arranged horizontally, each of which contains 3 components 
arranged vertically. 

The BoxLayout manager is constructed with an axis parameter that specifies the 
type of layout that will be done. There are four choices: 

X_AXIS - Components are laid out horizontally from left to right. 

Y_AXIS - Components are laid out vertically from top to bottom. 

LINE_AXIS - Components are laid out the way words are laid out in a line, based 
on the container's ComponentOrientation property. If the container's 
ComponentOrientation is horizontal then components are laid out horizontally, 
otherwise they are laid out vertically. For horizontal orientations, if the 
container's ComponentOrientation is left to right then components are laid out 
left to right, otherwise they are laid out right to left. For vertical 
orientations components are always laid out from top to bottom. 

PAGE_AXIS - Components are laid out the way text lines are laid out on a page, 
based on the container's ComponentOrientation property. If the container's 
ComponentOrientation is horizontal then components are laid out vertically, 
otherwise they are laid out horizontally. For horizontal orientations, if the 
container's ComponentOrientation is left to right then components are laid out 
left to right, otherwise they are laid out right to left. For vertical 
orientations components are always laid out from top to bottom. 

For all directions, components are arranged in the same order as they were 
added to the container. 

BoxLayout attempts to arrange components at their preferred widths (for 
horizontal layout) or heights (for vertical layout). For a horizontal layout, 
if not all the components are the same height, BoxLayout attempts to make all 
the components as high as the highest component. If that's not possible for a 
particular component, then BoxLayout aligns that component vertically, 
according to the component's Y alignment. By default, a component has a Y 
alignment of 0.5, which means that the vertical center of the component should 
have the same Y coordinate as the vertical centers of other components with 0.5 
Y alignment. 

Similarly, for a vertical layout, BoxLayout attempts to make all components in 
the column as wide as the widest component. If that fails, it aligns them 
horizontally according to their X alignments. For PAGE_AXIS layout, horizontal 
alignment is done based on the leading edge of the component. In other words, 
an X alignment value of 0.0 means the left edge of a component if the 
container's ComponentOrientation is left to right and it means the right edge 
of the component otherwise. 

Instead of using BoxLayout directly, many programs use the Box class. The Box 
class is a lightweight container that uses a BoxLayout. It also provides handy 
methods to help you use BoxLayout well. Adding components to multiple nested 
boxes is a powerful way to get the arrangement you want. 

For further information and examples see How to Use BoxLayout, a section in The 
Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.BoxLayout.LINE_AXIS*

A layout manager that allows multiple components to be laid out either 
vertically or horizontally. The components will not wrap so, for example, a 
vertical arrangement of components will stay vertically arranged when the frame 
is resized. 







Nesting multiple panels with different combinations of horizontal and vertical 
gives an effect similar to GridBagLayout, without the complexity. The diagram 
shows two panels arranged horizontally, each of which contains 3 components 
arranged vertically. 

The BoxLayout manager is constructed with an axis parameter that specifies the 
type of layout that will be done. There are four choices: 

X_AXIS - Components are laid out horizontally from left to right. 

Y_AXIS - Components are laid out vertically from top to bottom. 

LINE_AXIS - Components are laid out the way words are laid out in a line, based 
on the container's ComponentOrientation property. If the container's 
ComponentOrientation is horizontal then components are laid out horizontally, 
otherwise they are laid out vertically. For horizontal orientations, if the 
container's ComponentOrientation is left to right then components are laid out 
left to right, otherwise they are laid out right to left. For vertical 
orientations components are always laid out from top to bottom. 

PAGE_AXIS - Components are laid out the way text lines are laid out on a page, 
based on the container's ComponentOrientation property. If the container's 
ComponentOrientation is horizontal then components are laid out vertically, 
otherwise they are laid out horizontally. For horizontal orientations, if the 
container's ComponentOrientation is left to right then components are laid out 
left to right, otherwise they are laid out right to left. For vertical 
orientations components are always laid out from top to bottom. 

For all directions, components are arranged in the same order as they were 
added to the container. 

BoxLayout attempts to arrange components at their preferred widths (for 
horizontal layout) or heights (for vertical layout). For a horizontal layout, 
if not all the components are the same height, BoxLayout attempts to make all 
the components as high as the highest component. If that's not possible for a 
particular component, then BoxLayout aligns that component vertically, 
according to the component's Y alignment. By default, a component has a Y 
alignment of 0.5, which means that the vertical center of the component should 
have the same Y coordinate as the vertical centers of other components with 0.5 
Y alignment. 

Similarly, for a vertical layout, BoxLayout attempts to make all components in 
the column as wide as the widest component. If that fails, it aligns them 
horizontally according to their X alignments. For PAGE_AXIS layout, horizontal 
alignment is done based on the leading edge of the component. In other words, 
an X alignment value of 0.0 means the left edge of a component if the 
container's ComponentOrientation is left to right and it means the right edge 
of the component otherwise. 

Instead of using BoxLayout directly, many programs use the Box class. The Box 
class is a lightweight container that uses a BoxLayout. It also provides handy 
methods to help you use BoxLayout well. Adding components to multiple nested 
boxes is a powerful way to get the arrangement you want. 

For further information and examples see How to Use BoxLayout, a section in The 
Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.BoxLayout.PAGE_AXIS*

A layout manager that allows multiple components to be laid out either 
vertically or horizontally. The components will not wrap so, for example, a 
vertical arrangement of components will stay vertically arranged when the frame 
is resized. 







Nesting multiple panels with different combinations of horizontal and vertical 
gives an effect similar to GridBagLayout, without the complexity. The diagram 
shows two panels arranged horizontally, each of which contains 3 components 
arranged vertically. 

The BoxLayout manager is constructed with an axis parameter that specifies the 
type of layout that will be done. There are four choices: 

X_AXIS - Components are laid out horizontally from left to right. 

Y_AXIS - Components are laid out vertically from top to bottom. 

LINE_AXIS - Components are laid out the way words are laid out in a line, based 
on the container's ComponentOrientation property. If the container's 
ComponentOrientation is horizontal then components are laid out horizontally, 
otherwise they are laid out vertically. For horizontal orientations, if the 
container's ComponentOrientation is left to right then components are laid out 
left to right, otherwise they are laid out right to left. For vertical 
orientations components are always laid out from top to bottom. 

PAGE_AXIS - Components are laid out the way text lines are laid out on a page, 
based on the container's ComponentOrientation property. If the container's 
ComponentOrientation is horizontal then components are laid out vertically, 
otherwise they are laid out horizontally. For horizontal orientations, if the 
container's ComponentOrientation is left to right then components are laid out 
left to right, otherwise they are laid out right to left. For vertical 
orientations components are always laid out from top to bottom. 

For all directions, components are arranged in the same order as they were 
added to the container. 

BoxLayout attempts to arrange components at their preferred widths (for 
horizontal layout) or heights (for vertical layout). For a horizontal layout, 
if not all the components are the same height, BoxLayout attempts to make all 
the components as high as the highest component. If that's not possible for a 
particular component, then BoxLayout aligns that component vertically, 
according to the component's Y alignment. By default, a component has a Y 
alignment of 0.5, which means that the vertical center of the component should 
have the same Y coordinate as the vertical centers of other components with 0.5 
Y alignment. 

Similarly, for a vertical layout, BoxLayout attempts to make all components in 
the column as wide as the widest component. If that fails, it aligns them 
horizontally according to their X alignments. For PAGE_AXIS layout, horizontal 
alignment is done based on the leading edge of the component. In other words, 
an X alignment value of 0.0 means the left edge of a component if the 
container's ComponentOrientation is left to right and it means the right edge 
of the component otherwise. 

Instead of using BoxLayout directly, many programs use the Box class. The Box 
class is a lightweight container that uses a BoxLayout. It also provides handy 
methods to help you use BoxLayout well. Adding components to multiple nested 
boxes is a powerful way to get the arrangement you want. 

For further information and examples see How to Use BoxLayout, a section in The 
Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.BoxLayout.X_AXIS*

A layout manager that allows multiple components to be laid out either 
vertically or horizontally. The components will not wrap so, for example, a 
vertical arrangement of components will stay vertically arranged when the frame 
is resized. 







Nesting multiple panels with different combinations of horizontal and vertical 
gives an effect similar to GridBagLayout, without the complexity. The diagram 
shows two panels arranged horizontally, each of which contains 3 components 
arranged vertically. 

The BoxLayout manager is constructed with an axis parameter that specifies the 
type of layout that will be done. There are four choices: 

X_AXIS - Components are laid out horizontally from left to right. 

Y_AXIS - Components are laid out vertically from top to bottom. 

LINE_AXIS - Components are laid out the way words are laid out in a line, based 
on the container's ComponentOrientation property. If the container's 
ComponentOrientation is horizontal then components are laid out horizontally, 
otherwise they are laid out vertically. For horizontal orientations, if the 
container's ComponentOrientation is left to right then components are laid out 
left to right, otherwise they are laid out right to left. For vertical 
orientations components are always laid out from top to bottom. 

PAGE_AXIS - Components are laid out the way text lines are laid out on a page, 
based on the container's ComponentOrientation property. If the container's 
ComponentOrientation is horizontal then components are laid out vertically, 
otherwise they are laid out horizontally. For horizontal orientations, if the 
container's ComponentOrientation is left to right then components are laid out 
left to right, otherwise they are laid out right to left. For vertical 
orientations components are always laid out from top to bottom. 

For all directions, components are arranged in the same order as they were 
added to the container. 

BoxLayout attempts to arrange components at their preferred widths (for 
horizontal layout) or heights (for vertical layout). For a horizontal layout, 
if not all the components are the same height, BoxLayout attempts to make all 
the components as high as the highest component. If that's not possible for a 
particular component, then BoxLayout aligns that component vertically, 
according to the component's Y alignment. By default, a component has a Y 
alignment of 0.5, which means that the vertical center of the component should 
have the same Y coordinate as the vertical centers of other components with 0.5 
Y alignment. 

Similarly, for a vertical layout, BoxLayout attempts to make all components in 
the column as wide as the widest component. If that fails, it aligns them 
horizontally according to their X alignments. For PAGE_AXIS layout, horizontal 
alignment is done based on the leading edge of the component. In other words, 
an X alignment value of 0.0 means the left edge of a component if the 
container's ComponentOrientation is left to right and it means the right edge 
of the component otherwise. 

Instead of using BoxLayout directly, many programs use the Box class. The Box 
class is a lightweight container that uses a BoxLayout. It also provides handy 
methods to help you use BoxLayout well. Adding components to multiple nested 
boxes is a powerful way to get the arrangement you want. 

For further information and examples see How to Use BoxLayout, a section in The 
Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.BoxLayout.Y_AXIS*

A layout manager that allows multiple components to be laid out either 
vertically or horizontally. The components will not wrap so, for example, a 
vertical arrangement of components will stay vertically arranged when the frame 
is resized. 







Nesting multiple panels with different combinations of horizontal and vertical 
gives an effect similar to GridBagLayout, without the complexity. The diagram 
shows two panels arranged horizontally, each of which contains 3 components 
arranged vertically. 

The BoxLayout manager is constructed with an axis parameter that specifies the 
type of layout that will be done. There are four choices: 

X_AXIS - Components are laid out horizontally from left to right. 

Y_AXIS - Components are laid out vertically from top to bottom. 

LINE_AXIS - Components are laid out the way words are laid out in a line, based 
on the container's ComponentOrientation property. If the container's 
ComponentOrientation is horizontal then components are laid out horizontally, 
otherwise they are laid out vertically. For horizontal orientations, if the 
container's ComponentOrientation is left to right then components are laid out 
left to right, otherwise they are laid out right to left. For vertical 
orientations components are always laid out from top to bottom. 

PAGE_AXIS - Components are laid out the way text lines are laid out on a page, 
based on the container's ComponentOrientation property. If the container's 
ComponentOrientation is horizontal then components are laid out vertically, 
otherwise they are laid out horizontally. For horizontal orientations, if the 
container's ComponentOrientation is left to right then components are laid out 
left to right, otherwise they are laid out right to left. For vertical 
orientations components are always laid out from top to bottom. 

For all directions, components are arranged in the same order as they were 
added to the container. 

BoxLayout attempts to arrange components at their preferred widths (for 
horizontal layout) or heights (for vertical layout). For a horizontal layout, 
if not all the components are the same height, BoxLayout attempts to make all 
the components as high as the highest component. If that's not possible for a 
particular component, then BoxLayout aligns that component vertically, 
according to the component's Y alignment. By default, a component has a Y 
alignment of 0.5, which means that the vertical center of the component should 
have the same Y coordinate as the vertical centers of other components with 0.5 
Y alignment. 

Similarly, for a vertical layout, BoxLayout attempts to make all components in 
the column as wide as the widest component. If that fails, it aligns them 
horizontally according to their X alignments. For PAGE_AXIS layout, horizontal 
alignment is done based on the leading edge of the component. In other words, 
an X alignment value of 0.0 means the left edge of a component if the 
container's ComponentOrientation is left to right and it means the right edge 
of the component otherwise. 

Instead of using BoxLayout directly, many programs use the Box class. The Box 
class is a lightweight container that uses a BoxLayout. It also provides handy 
methods to help you use BoxLayout well. Adding components to multiple nested 
boxes is a powerful way to get the arrangement you want. 

For further information and examples see How to Use BoxLayout, a section in The 
Java Tutorial. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.BoxLayout(Container,int)*

public BoxLayout(
  java.awt.Container target,
  int axis)

Creates a layout manager that will lay out components along the given axis. 

    target - the container that needs to be laid out 
    axis - the axis to lay out components along. Can be one of: BoxLayout.X_AXIS, 
       BoxLayout.Y_AXIS, BoxLayout.LINE_AXIS or BoxLayout.PAGE_AXIS 

*javax.swing.BoxLayout.addLayoutComponent(Component,Object)*

public void addLayoutComponent(
  java.awt.Component comp,
  java.lang.Object constraints)

Not used by this class. 

    comp - the component 
    constraints - constraints 

*javax.swing.BoxLayout.addLayoutComponent(String,Component)*

public void addLayoutComponent(
  java.lang.String name,
  java.awt.Component comp)

Not used by this class. 

    name - the name of the component 
    comp - the component 

*javax.swing.BoxLayout.getLayoutAlignmentX(Container)*

public synchronized float getLayoutAlignmentX(java.awt.Container target)

Returns the alignment along the X axis for the container. If the box is 
horizontal, the default alignment will be returned. Otherwise, the alignment 
needed to place the children along the X axis will be returned. 

    target - the container 

    Returns: the alignment >= 0.0f <= 1.0f 
*javax.swing.BoxLayout.getLayoutAlignmentY(Container)*

public synchronized float getLayoutAlignmentY(java.awt.Container target)

Returns the alignment along the Y axis for the container. If the box is 
vertical, the default alignment will be returned. Otherwise, the alignment 
needed to place the children along the Y axis will be returned. 

    target - the container 

    Returns: the alignment >= 0.0f <= 1.0f 
*javax.swing.BoxLayout.invalidateLayout(Container)*

public synchronized void invalidateLayout(java.awt.Container target)

Indicates that a child has changed its layout related information, and thus any 
cached calculations should be flushed. 

This method is called by AWT when the invalidate method is called on the 
Container. Since the invalidate method may be called asynchronously to the 
event thread, this method may be called asynchronously. 

    target - the affected container 

*javax.swing.BoxLayout.layoutContainer(Container)*

public void layoutContainer(java.awt.Container target)

Called by the AWT when the specified container needs to be laid out. 

    target - the container to lay out 

*javax.swing.BoxLayout.maximumLayoutSize(Container)*

public |java.awt.Dimension| maximumLayoutSize(java.awt.Container target)

Returns the maximum dimensions the target container can use to lay out the 
components it contains. 

    target - the container that needs to be laid out 

    Returns: the dimenions >= 0 <= Integer.MAX_VALUE 
*javax.swing.BoxLayout.minimumLayoutSize(Container)*

public |java.awt.Dimension| minimumLayoutSize(java.awt.Container target)

Returns the minimum dimensions needed to lay out the components contained in 
the specified target container. 

    target - the container that needs to be laid out 

    Returns: the dimensions >= 0 <= Integer.MAX_VALUE 
*javax.swing.BoxLayout.preferredLayoutSize(Container)*

public |java.awt.Dimension| preferredLayoutSize(java.awt.Container target)

Returns the preferred dimensions for this layout, given the components in the 
specified target container. 

    target - the container that needs to be laid out 

    Returns: the dimensions >= 0 <= Integer.MAX_VALUE 
*javax.swing.BoxLayout.removeLayoutComponent(Component)*

public void removeLayoutComponent(java.awt.Component comp)

Not used by this class. 

    comp - the component 



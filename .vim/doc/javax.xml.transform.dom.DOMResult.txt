*javax.xml.transform.dom.DOMResult* *DOMResult* Acts as a holder for a transform

public class DOMResult
  extends    |java.lang.Object|
  implements |javax.xml.transform.Result|

|javax.xml.transform.dom.DOMResult_Description|
|javax.xml.transform.dom.DOMResult_Fields|
|javax.xml.transform.dom.DOMResult_Constructors|
|javax.xml.transform.dom.DOMResult_Methods|

================================================================================

*javax.xml.transform.dom.DOMResult_Fields*
|java.lang.String_javax.xml.transform.dom.DOMResult.FEATURE|

*javax.xml.transform.dom.DOMResult_Constructors*
|javax.xml.transform.dom.DOMResult()|Zero-argument default constructor.
|javax.xml.transform.dom.DOMResult(Node)|Use a DOM node to create a new output 
|javax.xml.transform.dom.DOMResult(Node,Node)|Use a DOM node to create a new ou
|javax.xml.transform.dom.DOMResult(Node,Node,String)|Use a DOM node to create a
|javax.xml.transform.dom.DOMResult(Node,String)|Use a DOM node to create a new 

*javax.xml.transform.dom.DOMResult_Methods*
|javax.xml.transform.dom.DOMResult.getNextSibling()|Get the child node before w
|javax.xml.transform.dom.DOMResult.getNode()|Get the node that will contain the
|javax.xml.transform.dom.DOMResult.getSystemId()|Get the System Identifier.
|javax.xml.transform.dom.DOMResult.setNextSibling(Node)|Set the child node befo
|javax.xml.transform.dom.DOMResult.setNode(Node)|Set the node that will contain
|javax.xml.transform.dom.DOMResult.setSystemId(String)|Set the systemId that ma

*javax.xml.transform.dom.DOMResult_Description*

Acts as a holder for a transformation result tree in the form of a Document 
Object Model (DOM) tree. 

If no output DOM source is set, the transformation will create a Document node 
as the holder for the result of the transformation, which may be retrieved with 
(|javax.xml.transform.dom.DOMResult|) . 


*java.lang.String_javax.xml.transform.dom.DOMResult.FEATURE*

Acts as a holder for a transformation result tree in the form of a Document 
Object Model (DOM) tree. 

If no output DOM source is set, the transformation will create a Document node 
as the holder for the result of the transformation, which may be retrieved with 
(|javax.xml.transform.dom.DOMResult|) . 



*javax.xml.transform.dom.DOMResult()*

public DOMResult()

Zero-argument default constructor. 

node, siblingNode and systemId will be set to null. 


*javax.xml.transform.dom.DOMResult(Node)*

public DOMResult(org.w3c.dom.Node node)

Use a DOM node to create a new output target. 

In practice, the node should be a (|org.w3c.dom.Document|) node, a 
(|org.w3c.dom.DocumentFragment|) node, or a (|org.w3c.dom.Element|) node. In 
other words, a node that accepts children. 

siblingNode and systemId will be set to null. 

    node - The DOM node that will contain the result tree. 

*javax.xml.transform.dom.DOMResult(Node,Node)*

public DOMResult(
  org.w3c.dom.Node node,
  org.w3c.dom.Node nextSibling)

Use a DOM node to create a new output target specifying the child node where 
the result nodes should be inserted before. 

In practice, node and nextSibling should be a (|org.w3c.dom.Document|) node, a 
(|org.w3c.dom.DocumentFragment|) node, or a (|org.w3c.dom.Element|) node. In 
other words, a node that accepts children. 

Use nextSibling to specify the child node where the result nodes should be 
inserted before. If nextSibling is not a sibling of node, then an 
IllegalArgumentException is thrown. If node is null and nextSibling is not 
null, then an IllegalArgumentException is thrown. If nextSibling is null, then 
the behavior is the same as calling (|javax.xml.transform.dom.DOMResult|) , 
i.e. append the result nodes as the last child of the specified node. 

systemId will be set to null. 

    node - The DOM node that will contain the result tree. 
    nextSibling - The child node where the result nodes should be inserted before. 

*javax.xml.transform.dom.DOMResult(Node,Node,String)*

public DOMResult(
  org.w3c.dom.Node node,
  org.w3c.dom.Node nextSibling,
  java.lang.String systemId)

Use a DOM node to create a new output target specifying the child node where 
the result nodes should be inserted before and the specified System ID. 

In practice, node and nextSibling should be a (|org.w3c.dom.Document|) node, a 
(|org.w3c.dom.DocumentFragment|) node, or a (|org.w3c.dom.Element|) node. In 
other words, a node that accepts children. 

Use nextSibling to specify the child node where the result nodes should be 
inserted before. If nextSibling is not a sibling of node, then an 
IllegalArgumentException is thrown. If node is null and nextSibling is not 
null, then an IllegalArgumentException is thrown. If nextSibling is null, then 
the behavior is the same as calling (|javax.xml.transform.dom.DOMResult|) , 
i.e. append the result nodes as the last child of the specified node and use 
the specified System ID. 

    node - The DOM node that will contain the result tree. 
    nextSibling - The child node where the result nodes should be inserted before. 
    systemId - The system identifier which may be used in association with this node. 

*javax.xml.transform.dom.DOMResult(Node,String)*

public DOMResult(
  org.w3c.dom.Node node,
  java.lang.String systemId)

Use a DOM node to create a new output target with the specified System ID. 

In practice, the node should be a (|org.w3c.dom.Document|) node, a 
(|org.w3c.dom.DocumentFragment|) node, or a (|org.w3c.dom.Element|) node. In 
other words, a node that accepts children. 

siblingNode will be set to null. 

    node - The DOM node that will contain the result tree. 
    systemId - The system identifier which may be used in association with this node. 

*javax.xml.transform.dom.DOMResult.getNextSibling()*

public |org.w3c.dom.Node| getNextSibling()

Get the child node before which the result nodes will be inserted. 

If no node was set via (|javax.xml.transform.dom.DOMResult|) , 
(|javax.xml.transform.dom.DOMResult|) or (|javax.xml.transform.dom.DOMResult|) 
, then null will be returned. 


    Returns: The child node before which the result nodes will be inserted. 
*javax.xml.transform.dom.DOMResult.getNode()*

public |org.w3c.dom.Node| getNode()

Get the node that will contain the result DOM tree. 

If no node was set via (|javax.xml.transform.dom.DOMResult|) , 
(|javax.xml.transform.dom.DOMResult|) , (|javax.xml.transform.dom.DOMResult|) , 
(|javax.xml.transform.dom.DOMResult|) or (|javax.xml.transform.dom.DOMResult|) 
, then the node will be set by the transformation, and may be obtained from 
this method once the transformation is complete. Calling this method before the 
transformation will return null. 


    Returns: The node to which the transformation will be appended. 
*javax.xml.transform.dom.DOMResult.getSystemId()*

public |java.lang.String| getSystemId()

Get the System Identifier. 

If no System ID was set via (|javax.xml.transform.dom.DOMResult|) , 
(|javax.xml.transform.dom.DOMResult|) or (|javax.xml.transform.dom.DOMResult|) 
, then null will be returned. 


    Returns: The system identifier. 
*javax.xml.transform.dom.DOMResult.setNextSibling(Node)*

public void setNextSibling(org.w3c.dom.Node nextSibling)

Set the child node before which the result nodes will be inserted. 

Use nextSibling to specify the child node before which the result nodes should 
be inserted. If nextSibling is not a descendant of node, then an 
IllegalArgumentException is thrown. If node is null and nextSibling is not 
null, then an IllegalStateException is thrown. If nextSibling is null, then the 
behavior is the same as calling (|javax.xml.transform.dom.DOMResult|) , i.e. 
append the result nodes as the last child of the specified node. 

    nextSibling - The child node before which the result nodes will be inserted. 

*javax.xml.transform.dom.DOMResult.setNode(Node)*

public void setNode(org.w3c.dom.Node node)

Set the node that will contain the result DOM tree. 

In practice, the node should be a (|org.w3c.dom.Document|) node, a 
(|org.w3c.dom.DocumentFragment|) node, or a (|org.w3c.dom.Element|) node. In 
other words, a node that accepts children. 

An IllegalStateException is thrown if nextSibling is not null and node is not a 
parent of nextSibling. An IllegalStateException is thrown if node is null and 
nextSibling is not null. 

    node - The node to which the transformation will be appended. 

*javax.xml.transform.dom.DOMResult.setSystemId(String)*

public void setSystemId(java.lang.String systemId)

Set the systemId that may be used in association with the node. 

    systemId - The system identifier as a URI string. 



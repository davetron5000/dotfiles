*java.lang.Runtime* *Runtime* Every Java application has a single instance of cl

public class Runtime
  extends    |java.lang.Object|

|java.lang.Runtime_Description|
|java.lang.Runtime_Fields|
|java.lang.Runtime_Constructors|
|java.lang.Runtime_Methods|

================================================================================

*java.lang.Runtime_Methods*
|java.lang.Runtime.addShutdownHook(Thread)|Registers a new virtual-machine shut
|java.lang.Runtime.availableProcessors()|Returns the number of processors avail
|java.lang.Runtime.exec(String)|Executes the specified string command in a sepa
|java.lang.Runtime.exec(String[])|Executes the specified command and arguments 
|java.lang.Runtime.exec(String[],String[])|Executes the specified command and a
|java.lang.Runtime.exec(String[],String[],File)|Executes the specified command 
|java.lang.Runtime.exec(String,String[])|Executes the specified string command 
|java.lang.Runtime.exec(String,String[],File)|Executes the specified string com
|java.lang.Runtime.exit(int)|Terminates the currently running Java virtual mach
|java.lang.Runtime.freeMemory()|Returns the amount of free memory in the Java V
|java.lang.Runtime.gc()|Runs the garbage collector.
|java.lang.Runtime.getLocalizedInputStream(InputStream)|Creates a localized ver
|java.lang.Runtime.getLocalizedOutputStream(OutputStream)|Creates a localized v
|java.lang.Runtime.getRuntime()|Returns the runtime object associated with the 
|java.lang.Runtime.halt(int)|Forcibly terminates the currently running Java vir
|java.lang.Runtime.load(String)|Loads the specified filename as a dynamic libra
|java.lang.Runtime.loadLibrary(String)|Loads the dynamic library with the speci
|java.lang.Runtime.maxMemory()|Returns the maximum amount of memory that the Ja
|java.lang.Runtime.removeShutdownHook(Thread)|De-registers a previously-registe
|java.lang.Runtime.runFinalization()|Runs the finalization methods of any objec
|java.lang.Runtime.runFinalizersOnExit(boolean)|Enable or disable finalization 
|java.lang.Runtime.totalMemory()|Returns the total amount of memory in the Java
|java.lang.Runtime.traceInstructions(boolean)|Enables/Disables tracing of instr
|java.lang.Runtime.traceMethodCalls(boolean)|Enables/Disables tracing of method

*java.lang.Runtime_Description*

Every Java application has a single instance of class Runtime that allows the 
application to interface with the environment in which the application is 
running. The current runtime can be obtained from the getRuntime method. 

An application cannot create its own instance of this class. 


*java.lang.Runtime.addShutdownHook(Thread)*

public void addShutdownHook(java.lang.Thread hook)

Registers a new virtual-machine shutdown hook. 

The Java virtual machine shuts down in response to two kinds of events: 



The program exits normally, when the last non-daemon thread exits or when the 
exit(|java.lang.Runtime|) (equivalently, System.exit(|java.lang.System|) ) 
method is invoked, or 

The virtual machine is terminated in response to a user interrupt, such as 
typing ^C, or a system-wide event, such as user logoff or system shutdown. 



A shutdown hook is simply an initialized but unstarted thread. When the virtual 
machine begins its shutdown sequence it will start all registered shutdown 
hooks in some unspecified order and let them run concurrently. When all the 
hooks have finished it will then run all uninvoked finalizers if 
finalization-on-exit has been enabled. Finally, the virtual machine will halt. 
Note that daemon threads will continue to run during the shutdown sequence, as 
will non-daemon threads if shutdown was initiated by invoking the 
exit(|java.lang.Runtime|) method. 

Once the shutdown sequence has begun it can be stopped only by invoking the 
halt(|java.lang.Runtime|) method, which forcibly terminates the virtual 
machine. 

Once the shutdown sequence has begun it is impossible to register a new 
shutdown hook or de-register a previously-registered hook. Attempting either of 
these operations will cause an (|java.lang.IllegalStateException|) to be 
thrown. 

Shutdown hooks run at a delicate time in the life cycle of a virtual machine 
and should therefore be coded defensively. They should, in particular, be 
written to be thread-safe and to avoid deadlocks insofar as possible. They 
should also not rely blindly upon services that may have registered their own 
shutdown hooks and therefore may themselves in the process of shutting down. 

Shutdown hooks should also finish their work quickly. When a program invokes 
exit(|java.lang.Runtime|) the expectation is that the virtual machine will 
promptly shut down and exit. When the virtual machine is terminated due to user 
logoff or system shutdown the underlying operating system may only allow a 
fixed amount of time in which to shut down and exit. It is therefore 
inadvisable to attempt any user interaction or to perform a long-running 
computation in a shutdown hook. 

Uncaught exceptions are handled in shutdown hooks just as in any other thread, 
by invoking the uncaughtException(|java.lang.ThreadGroup|) method of the 
thread's (|java.lang.ThreadGroup|) object. The default implementation of this 
method prints the exception's stack trace to (|java.lang.System|) and 
terminates the thread; it does not cause the virtual machine to exit or halt. 

In rare circumstances the virtual machine may abort, that is, stop running 
without shutting down cleanly. This occurs when the virtual machine is 
terminated externally, for example with the SIGKILL signal on Unix or the 
TerminateProcess call on Microsoft Windows. The virtual machine may also abort 
if a native method goes awry by, for example, corrupting internal data 
structures or attempting to access nonexistent memory. If the virtual machine 
aborts then no guarantee can be made about whether or not any shutdown hooks 
will be run. 

    hook - An initialized but unstarted {@link Thread} object 

*java.lang.Runtime.availableProcessors()*

public native int availableProcessors()

Returns the number of processors available to the Java virtual machine. 

This value may change during a particular invocation of the virtual machine. 
Applications that are sensitive to the number of available processors should 
therefore occasionally poll this property and adjust their resource usage 
appropriately. 


    Returns: the maximum number of processors available to the virtual machine; never 
             smaller than one 
*java.lang.Runtime.exec(String)*

public |java.lang.Process| exec(java.lang.String command)
  throws |java.io.IOException|
         
Executes the specified string command in a separate process. 

This is a convenience method. An invocation of the form exec(command) behaves 
in exactly the same way as the invocation exec(|java.lang.Runtime|) (command, 
null, null). 

    command - a specified system command. 

    Returns: A new {@link Process} object for managing the subprocess 
*java.lang.Runtime.exec(String[])*

public |java.lang.Process| exec(java.lang.String[] cmdarray)
  throws |java.io.IOException|
         
Executes the specified command and arguments in a separate process. 

This is a convenience method. An invocation of the form exec(cmdarray) behaves 
in exactly the same way as the invocation exec(|java.lang.Runtime|) (cmdarray, 
null, null). 

    cmdarray - array containing the command to call and its arguments. 

    Returns: A new {@link Process} object for managing the subprocess 
*java.lang.Runtime.exec(String[],String[])*

public |java.lang.Process| exec(
  java.lang.String[] cmdarray,
  java.lang.String[] envp)
  throws |java.io.IOException|
         
Executes the specified command and arguments in a separate process with the 
specified environment. 

This is a convenience method. An invocation of the form exec(cmdarray, envp) 
behaves in exactly the same way as the invocation exec(|java.lang.Runtime|) 
(cmdarray, envp, null). 

    cmdarray - array containing the command to call and its arguments. 
    envp - array of strings, each element of which has environment variable settings in 
       the format name=value, or null if the subprocess should inherit the 
       environment of the current process. 

    Returns: A new {@link Process} object for managing the subprocess 
*java.lang.Runtime.exec(String[],String[],File)*

public |java.lang.Process| exec(
  java.lang.String[] cmdarray,
  java.lang.String[] envp,
  java.io.File dir)
  throws |java.io.IOException|
         
Executes the specified command and arguments in a separate process with the 
specified environment and working directory. 

Given an array of strings cmdarray, representing the tokens of a command line, 
and an array of strings envp, representing "environment" variable settings, 
this method creates a new process in which to execute the specified command. 

This method checks that cmdarray is a valid operating system command. Which 
commands are valid is system-dependent, but at the very least the command must 
be a non-empty list of non-null strings. 

If envp is null, the subprocess inherits the environment settings of the 
current process. 

(|java.lang.ProcessBuilder|) is now the preferred way to start a process with a 
modified environment. 

The working directory of the new subprocess is specified by dir. If dir is 
null, the subprocess inherits the current working directory of the current 
process. 

If a security manager exists, its checkExec(|java.lang.SecurityManager|) method 
is invoked with the first component of the array cmdarray as its argument. This 
may result in a (|java.lang.SecurityException|) being thrown. 

Starting an operating system process is highly system-dependent. Among the many 
things that can go wrong are: 

The operating system program file was not found. Access to the program file was 
denied. The working directory does not exist. 

In such cases an exception will be thrown. The exact nature of the exception is 
system-dependent, but it will always be a subclass of (|java.io.IOException|) . 

    cmdarray - array containing the command to call and its arguments. 
    envp - array of strings, each element of which has environment variable settings in 
       the format name=value, or null if the subprocess should inherit the 
       environment of the current process. 
    dir - the working directory of the subprocess, or null if the subprocess should 
       inherit the working directory of the current process. 

    Returns: A new {@link Process} object for managing the subprocess 
*java.lang.Runtime.exec(String,String[])*

public |java.lang.Process| exec(
  java.lang.String command,
  java.lang.String[] envp)
  throws |java.io.IOException|
         
Executes the specified string command in a separate process with the specified 
environment. 

This is a convenience method. An invocation of the form exec(command, envp) 
behaves in exactly the same way as the invocation exec(|java.lang.Runtime|) 
(command, envp, null). 

    command - a specified system command. 
    envp - array of strings, each element of which has environment variable settings in 
       the format name=value, or null if the subprocess should inherit the 
       environment of the current process. 

    Returns: A new {@link Process} object for managing the subprocess 
*java.lang.Runtime.exec(String,String[],File)*

public |java.lang.Process| exec(
  java.lang.String command,
  java.lang.String[] envp,
  java.io.File dir)
  throws |java.io.IOException|
         
Executes the specified string command in a separate process with the specified 
environment and working directory. 

This is a convenience method. An invocation of the form exec(command, envp, 
dir) behaves in exactly the same way as the invocation 
exec(|java.lang.Runtime|) (cmdarray, envp, dir), where cmdarray is an array of 
all the tokens in command. 

More precisely, the command string is broken into tokens using a 
(|java.util.StringTokenizer|) created by the call new 
(|java.util.StringTokenizer|) (command) with no further modification of the 
character categories. The tokens produced by the tokenizer are then placed in 
the new string array cmdarray, in the same order. 

    command - a specified system command. 
    envp - array of strings, each element of which has environment variable settings in 
       the format name=value, or null if the subprocess should inherit the 
       environment of the current process. 
    dir - the working directory of the subprocess, or null if the subprocess should 
       inherit the working directory of the current process. 

    Returns: A new {@link Process} object for managing the subprocess 
*java.lang.Runtime.exit(int)*

public void exit(int status)

Terminates the currently running Java virtual machine by initiating its 
shutdown sequence. This method never returns normally. The argument serves as a 
status code; by convention, a nonzero status code indicates abnormal 
termination. 

The virtual machine's shutdown sequence consists of two phases. In the first 
phase all registered shutdown hooks(|java.lang.Runtime|) , if any, are started 
in some unspecified order and allowed to run concurrently until they finish. In 
the second phase all uninvoked finalizers are run if 
finalization-on-exit(|java.lang.Runtime|) has been enabled. Once this is done 
the virtual machine halts(|java.lang.Runtime|) . 

If this method is invoked after the virtual machine has begun its shutdown 
sequence then if shutdown hooks are being run this method will block 
indefinitely. If shutdown hooks have already been run and on-exit finalization 
has been enabled then this method halts the virtual machine with the given 
status code if the status is nonzero; otherwise, it blocks indefinitely. 

The System.exit(|java.lang.System|) method is the conventional and convenient 
means of invoking this method. 

    status - Termination status. By convention, a nonzero status code indicates abnormal 
       termination. 

*java.lang.Runtime.freeMemory()*

public native long freeMemory()

Returns the amount of free memory in the Java Virtual Machine. Calling the gc 
method may result in increasing the value returned by freeMemory. 


    Returns: an approximation to the total amount of memory currently available for future 
             allocated objects, measured in bytes. 
*java.lang.Runtime.gc()*

public native void gc()

Runs the garbage collector. Calling this method suggests that the Java virtual 
machine expend effort toward recycling unused objects in order to make the 
memory they currently occupy available for quick reuse. When control returns 
from the method call, the virtual machine has made its best effort to recycle 
all discarded objects. 

The name gc stands for "garbage collector". The virtual machine performs this 
recycling process automatically as needed, in a separate thread, even if the gc 
method is not invoked explicitly. 

The method (|java.lang.System|) is the conventional and convenient means of 
invoking this method. 


*java.lang.Runtime.getLocalizedInputStream(InputStream)*

public |java.io.InputStream| getLocalizedInputStream(java.io.InputStream in)

Creates a localized version of an input stream. This method takes an 
InputStream and returns an InputStream equivalent to the argument in all 
respects except that it is localized: as characters in the local character set 
are read from the stream, they are automatically converted from the local 
character set to Unicode. 

If the argument is already a localized stream, it may be returned as the 
result. 

    in - InputStream to localize 

    Returns: a localized input stream 
*java.lang.Runtime.getLocalizedOutputStream(OutputStream)*

public |java.io.OutputStream| getLocalizedOutputStream(java.io.OutputStream out)

Creates a localized version of an output stream. This method takes an 
OutputStream and returns an OutputStream equivalent to the argument in all 
respects except that it is localized: as Unicode characters are written to the 
stream, they are automatically converted to the local character set. 

If the argument is already a localized stream, it may be returned as the 
result. 

    out - OutputStream to localize 

    Returns: a localized output stream 
*java.lang.Runtime.getRuntime()*

public static |java.lang.Runtime| getRuntime()

Returns the runtime object associated with the current Java application. Most 
of the methods of class Runtime are instance methods and must be invoked with 
respect to the current runtime object. 


    Returns: the Runtime object associated with the current Java application. 
*java.lang.Runtime.halt(int)*

public void halt(int status)

Forcibly terminates the currently running Java virtual machine. This method 
never returns normally. 

This method should be used with extreme caution. Unlike the 
exit(|java.lang.Runtime|) method, this method does not cause shutdown hooks to 
be started and does not run uninvoked finalizers if finalization-on-exit has 
been enabled. If the shutdown sequence has already been initiated then this 
method does not wait for any running shutdown hooks or finalizers to finish 
their work. 

    status - Termination status. By convention, a nonzero status code indicates abnormal 
       termination. If the {@link Runtime#exit exit} (equivalently, {@link 
       System#exit(int) System.exit}) method has already been invoked then this 
       status code will override the status code passed to that method. 

*java.lang.Runtime.load(String)*

public void load(java.lang.String filename)

Loads the specified filename as a dynamic library. The filename argument must 
be a complete path name. From java_g it will automagically insert "_g" before 
the ".so" (for example Runtime.getRuntime().load("/home/avh/lib/libX11.so");). 

First, if there is a security manager, its checkLink method is called with the 
filename as its argument. This may result in a security exception. 

This is similar to the method (|java.lang.Runtime|) , but it accepts a general 
file name as an argument rather than just a library name, allowing any file of 
native code to be loaded. 

The method (|java.lang.System|) is the conventional and convenient means of 
invoking this method. 

    filename - the file to load. 

*java.lang.Runtime.loadLibrary(String)*

public void loadLibrary(java.lang.String libname)

Loads the dynamic library with the specified library name. A file containing 
native code is loaded from the local file system from a place where library 
files are conventionally obtained. The details of this process are 
implementation-dependent. The mapping from a library name to a specific 
filename is done in a system-specific manner. 

First, if there is a security manager, its checkLink method is called with the 
libname as its argument. This may result in a security exception. 

The method (|java.lang.System|) is the conventional and convenient means of 
invoking this method. If native methods are to be used in the implementation of 
a class, a standard strategy is to put the native code in a library file (call 
it LibFile) and then to put a static initializer: 

static { System.loadLibrary("LibFile"); } 

within the class declaration. When the class is loaded and initialized, the 
necessary native code implementation for the native methods will then be loaded 
as well. 

If this method is called more than once with the same library name, the second 
and subsequent calls are ignored. 

    libname - the name of the library. 

*java.lang.Runtime.maxMemory()*

public native long maxMemory()

Returns the maximum amount of memory that the Java virtual machine will attempt 
to use. If there is no inherent limit then the value (|java.lang.Long|) will be 
returned. 


    Returns: the maximum amount of memory that the virtual machine will attempt to use, 
             measured in bytes 
*java.lang.Runtime.removeShutdownHook(Thread)*

public boolean removeShutdownHook(java.lang.Thread hook)

De-registers a previously-registered virtual-machine shutdown hook. 

    hook - the hook to remove 

    Returns: true if the specified hook had previously been registered and was successfully 
             de-registered, false otherwise. 
*java.lang.Runtime.runFinalization()*

public void runFinalization()

Runs the finalization methods of any objects pending finalization. Calling this 
method suggests that the Java virtual machine expend effort toward running the 
finalize methods of objects that have been found to be discarded but whose 
finalize methods have not yet been run. When control returns from the method 
call, the virtual machine has made a best effort to complete all outstanding 
finalizations. 

The virtual machine performs the finalization process automatically as needed, 
in a separate thread, if the runFinalization method is not invoked explicitly. 

The method (|java.lang.System|) is the conventional and convenient means of 
invoking this method. 


*java.lang.Runtime.runFinalizersOnExit(boolean)*

public static void runFinalizersOnExit(boolean value)

Enable or disable finalization on exit; doing so specifies that the finalizers 
of all objects that have finalizers that have not yet been automatically 
invoked are to be run before the Java runtime exits. By default, finalization 
on exit is disabled. 

If there is a security manager, its checkExit method is first called with 0 as 
its argument to ensure the exit is allowed. This could result in a 
SecurityException. 

    value - true to enable finalization on exit, false to disable 

*java.lang.Runtime.totalMemory()*

public native long totalMemory()

Returns the total amount of memory in the Java virtual machine. The value 
returned by this method may vary over time, depending on the host environment. 

Note that the amount of memory required to hold an object of any given type may 
be implementation-dependent. 


    Returns: the total amount of memory currently available for current and future objects, 
             measured in bytes. 
*java.lang.Runtime.traceInstructions(boolean)*

public native void traceInstructions(boolean on)

Enables/Disables tracing of instructions. If the boolean argument is true, this 
method suggests that the Java virtual machine emit debugging information for 
each instruction in the virtual machine as it is executed. The format of this 
information, and the file or other output stream to which it is emitted, 
depends on the host environment. The virtual machine may ignore this request if 
it does not support this feature. The destination of the trace output is system 
dependent. 

If the boolean argument is false, this method causes the virtual machine to 
stop performing the detailed instruction trace it is performing. 

    on - true to enable instruction tracing; false to disable this feature. 

*java.lang.Runtime.traceMethodCalls(boolean)*

public native void traceMethodCalls(boolean on)

Enables/Disables tracing of method calls. If the boolean argument is true, this 
method suggests that the Java virtual machine emit debugging information for 
each method in the virtual machine as it is called. The format of this 
information, and the file or other output stream to which it is emitted, 
depends on the host environment. The virtual machine may ignore this request if 
it does not support this feature. 

Calling this method with argument false suggests that the virtual machine cease 
emitting per-call debugging information. 

    on - true to enable instruction tracing; false to disable this feature. 



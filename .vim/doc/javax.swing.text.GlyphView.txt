*javax.swing.text.GlyphView* *GlyphView* A GlyphView is a styled chunk of text t

public class GlyphView
  extends    |javax.swing.text.View|
  implements |javax.swing.text.TabableView|
             |java.lang.Cloneable|

|javax.swing.text.GlyphView_Description|
|javax.swing.text.GlyphView_Fields|
|javax.swing.text.GlyphView_Constructors|
|javax.swing.text.GlyphView_Methods|

================================================================================

*javax.swing.text.GlyphView_Constructors*
|javax.swing.text.GlyphView(Element)|Constructs a new view wrapped on an elemen

*javax.swing.text.GlyphView_Methods*
|javax.swing.text.GlyphView.breakView(int,int,float,float)|Breaks this view on 
|javax.swing.text.GlyphView.changedUpdate(DocumentEvent,Shape,ViewFactory)|Give
|javax.swing.text.GlyphView.checkPainter()|Check to see that a glyph painter ex
|javax.swing.text.GlyphView.clone()|Creates a shallow copy.
|javax.swing.text.GlyphView.createFragment(int,int)|Creates a view that represe
|javax.swing.text.GlyphView.getAlignment(int)|Determines the desired alignment 
|javax.swing.text.GlyphView.getBackground()|Fetch the background color to use t
|javax.swing.text.GlyphView.getBreakWeight(int,float,float)|Determines how attr
|javax.swing.text.GlyphView.getEndOffset()|Fetches the portion of the model tha
|javax.swing.text.GlyphView.getFont()|Fetch the font that the glyphs should be 
|javax.swing.text.GlyphView.getForeground()|Fetch the foreground color to use t
|javax.swing.text.GlyphView.getGlyphPainter()|Fetch the currently installed gly
|javax.swing.text.GlyphView.getNextVisualPositionFrom(int,Position.Bias,Shape,int,Position.Bias[])|
|javax.swing.text.GlyphView.getPartialSpan(int,int)|Determines the span along t
|javax.swing.text.GlyphView.getPreferredSpan(int)|Determines the preferred span
|javax.swing.text.GlyphView.getStartOffset()|Fetches the portion of the model t
|javax.swing.text.GlyphView.getTabbedSpan(float,TabExpander)|Determines the des
|javax.swing.text.GlyphView.getTabExpander()|Fetch the TabExpander to use if ta
|javax.swing.text.GlyphView.getText(int,int)|Fetch a reference to the text that
|javax.swing.text.GlyphView.insertUpdate(DocumentEvent,Shape,ViewFactory)|Gives
|javax.swing.text.GlyphView.isStrikeThrough()|Determine if the glyphs should ha
|javax.swing.text.GlyphView.isSubscript()|Determine if the glyphs should be ren
|javax.swing.text.GlyphView.isSuperscript()|Determine if the glyphs should be r
|javax.swing.text.GlyphView.isUnderline()|Determine if the glyphs should be und
|javax.swing.text.GlyphView.modelToView(int,Shape,Position.Bias)|Provides a map
|javax.swing.text.GlyphView.paint(Graphics,Shape)|Renders a portion of a text s
|javax.swing.text.GlyphView.removeUpdate(DocumentEvent,Shape,ViewFactory)|Gives
|javax.swing.text.GlyphView.setGlyphPainter(GlyphView.GlyphPainter)|Sets the pa
|javax.swing.text.GlyphView.viewToModel(float,float,Shape,Position.Bias[])|Prov

*javax.swing.text.GlyphView_Description*

A GlyphView is a styled chunk of text that represents a view mapped over an 
element in the text model. This view is generally responsible for displaying 
text glyphs using character level attributes in some way. An implementation of 
the GlyphPainter class is used to do the actual rendering and model/view 
translations. This separates rendering from layout and management of the 
association with the model. 

The view supports breaking for the purpose of formatting. The fragments 
produced by breaking share the view that has primary responsibility for the 
element (i.e. they are nested classes and carry only a small amount of state of 
their own) so they can share its resources. 

Since this view represents text that may have tabs embedded in it, it 
implements the TabableView interface. Tabs will only be expanded if this view 
is embedded in a container that does tab expansion. ParagraphView is an example 
of a container that does tab expansion. 


*javax.swing.text.GlyphView(Element)*

public GlyphView(javax.swing.text.Element elem)

Constructs a new view wrapped on an element. 

    elem - the element 

*javax.swing.text.GlyphView.breakView(int,int,float,float)*

public |javax.swing.text.View| breakView(
  int axis,
  int p0,
  float pos,
  float len)

Breaks this view on the given axis at the given length. This is implemented to 
attempt to break on a whitespace location, and returns a fragment with the 
whitespace at the end. If a whitespace location can't be found, the nearest 
character is used. 

    axis - may be either View.X_AXIS or View.Y_AXIS 
    p0 - the location in the model where the fragment should start it's representation 
       >= 0. 
    pos - the position along the axis that the broken view would occupy >= 0. This may be 
       useful for things like tab calculations. 
    len - specifies the distance along the axis where a potential break is desired >= 0. 

    Returns: the fragment of the view that represents the given span, if the view can be 
             broken. If the view doesn't support breaking behavior, the view 
             itself is returned. 
*javax.swing.text.GlyphView.changedUpdate(DocumentEvent,Shape,ViewFactory)*

public void changedUpdate(
  javax.swing.event.DocumentEvent e,
  java.awt.Shape a,
  javax.swing.text.ViewFactory f)

Gives notification from the document that attributes were changed in a location 
that this view is responsible for. This is implemented to call 
preferenceChanged along both the horizontal and vertical axis. 

    e - the change information from the associated document 
    a - the current allocation of the view 
    f - the factory to use to rebuild if the view has children 

*javax.swing.text.GlyphView.checkPainter()*

protected void checkPainter()

Check to see that a glyph painter exists. If a painter doesn't exist, a default 
glyph painter will be installed. 


*javax.swing.text.GlyphView.clone()*

protected final |java.lang.Object| clone()

Creates a shallow copy. This is used by the createFragment and breakView 
methods. 


    Returns: 
*javax.swing.text.GlyphView.createFragment(int,int)*

public |javax.swing.text.View| createFragment(
  int p0,
  int p1)

Creates a view that represents a portion of the element. This is potentially 
useful during formatting operations for taking measurements of fragments of the 
view. If the view doesn't support fragmenting (the default), it should return 
itself. 

This view does support fragmenting. It is implemented to return a nested class 
that shares state in this view representing only a portion of the view. 

    p0 - the starting offset >= 0. This should be a value greater or equal to the 
       element starting offset and less than the element ending offset. 
    p1 - the ending offset > p0. This should be a value less than or equal to the 
       elements end offset and greater than the elements starting offset. 

    Returns: the view fragment, or itself if the view doesn't support breaking into 
             fragments 
*javax.swing.text.GlyphView.getAlignment(int)*

public float getAlignment(int axis)

Determines the desired alignment for this view along an axis. For the label, 
the alignment is along the font baseline for the y axis, and the superclasses 
alignment along the x axis. 

    axis - may be either View.X_AXIS or View.Y_AXIS 

    Returns: the desired alignment. This should be a value between 0.0 and 1.0 inclusive, 
             where 0 indicates alignment at the origin and 1.0 indicates 
             alignment to the full span away from the origin. An alignment of 
             0.5 would be the center of the view. 
*javax.swing.text.GlyphView.getBackground()*

public |java.awt.Color| getBackground()

Fetch the background color to use to render the glyphs. If there is no 
background color, null should be returned. This is implemented to call 
StyledDocument.getBackground if the associated document is a styled document, 
otherwise it returns null. 


*javax.swing.text.GlyphView.getBreakWeight(int,float,float)*

public int getBreakWeight(
  int axis,
  float pos,
  float len)

Determines how attractive a break opportunity in this view is. This can be used 
for determining which view is the most attractive to call breakView on in the 
process of formatting. The higher the weight, the more attractive the break. A 
value equal to or lower than View.BadBreakWeight should not be considered for a 
break. A value greater than or equal to View.ForcedBreakWeight should be 
broken. 

This is implemented to forward to the superclass for the Y_AXIS. Along the 
X_AXIS the following values may be returned. 

View.ExcellentBreakWeight if there is whitespace proceeding the desired break 
location. View.BadBreakWeight if the desired break location results in a break 
location of the starting offset. View.GoodBreakWeight if the other conditions 
don't occur. 

This will normally result in the behavior of breaking on a whitespace location 
if one can be found, otherwise breaking between characters. 

    axis - may be either View.X_AXIS or View.Y_AXIS 
    pos - the potential location of the start of the broken view >= 0. This may be useful 
       for calculating tab positions. 
    len - specifies the relative length from pos where a potential break is desired >= 0. 

    Returns: the weight, which should be a value between View.ForcedBreakWeight and 
             View.BadBreakWeight. 
*javax.swing.text.GlyphView.getEndOffset()*

public int getEndOffset()

Fetches the portion of the model that this view is responsible for. 


    Returns: the ending offset into the model 
*javax.swing.text.GlyphView.getFont()*

public |java.awt.Font| getFont()

Fetch the font that the glyphs should be based upon. This is implemented to 
call StyledDocument.getFont if the associated document is a StyledDocument. If 
the associated document is not a StyledDocument, the associated components font 
is used. If there is no associated component, null is returned. 


*javax.swing.text.GlyphView.getForeground()*

public |java.awt.Color| getForeground()

Fetch the foreground color to use to render the glyphs. If there is no 
foreground color, null should be returned. This is implemented to call 
StyledDocument.getBackground if the associated document is a StyledDocument. If 
the associated document is not a StyledDocument, the associated components 
foreground color is used. If there is no associated component, null is 
returned. 


*javax.swing.text.GlyphView.getGlyphPainter()*

public |javax.swing.text.GlyphView.GlyphPainter| getGlyphPainter()

Fetch the currently installed glyph painter. If a painter has not yet been 
installed, and a default was not yet needed, null is returned. 


*javax.swing.text.GlyphView.getNextVisualPositionFrom(int,Position.Bias,Shape,int,Position.Bias[])*

public int getNextVisualPositionFrom(
  int pos,
  javax.swing.text.Position.Bias b,
  java.awt.Shape a,
  int direction,
  javax.swing.text.Position.Bias[] biasRet)
  throws |javax.swing.text.BadLocationException|
         
Provides a way to determine the next visually represented model location that 
one might place a caret. Some views may not be visible, they might not be in 
the same order found in the model, or they just might not allow access to some 
of the locations in the model. 

    pos - the position to convert >= 0 
    a - the allocated region to render into 
    direction - the direction from the current position that can be thought of as the arrow 
       keys typically found on a keyboard. This may be SwingConstants.WEST, 
       SwingConstants.EAST, SwingConstants.NORTH, or SwingConstants.SOUTH. 

    Returns: the location within the model that best represents the next location visual 
             position. 
*javax.swing.text.GlyphView.getPartialSpan(int,int)*

public float getPartialSpan(
  int p0,
  int p1)

Determines the span along the same axis as tab expansion for a portion of the 
view. This is intended for use by the TabExpander for cases where the tab 
expansion involves aligning the portion of text that doesn't have whitespace 
relative to the tab stop. There is therefore an assumption that the range given 
does not contain tabs. 

This method can be called while servicing the getTabbedSpan or 
getPreferredSize. It has to arrange for its own text buffer to make the 
measurements. 

    p0 - the starting document offset >= 0 
    p1 - the ending document offset >= p0 

    Returns: the span >= 0 
*javax.swing.text.GlyphView.getPreferredSpan(int)*

public float getPreferredSpan(int axis)

Determines the preferred span for this view along an axis. 

    axis - may be either View.X_AXIS or View.Y_AXIS 

    Returns: the span the view would like to be rendered into >= 0. Typically the view is 
             told to render into the span that is returned, although there is 
             no guarantee. The parent may choose to resize or break the view. 
*javax.swing.text.GlyphView.getStartOffset()*

public int getStartOffset()

Fetches the portion of the model that this view is responsible for. 


    Returns: the starting offset into the model 
*javax.swing.text.GlyphView.getTabbedSpan(float,TabExpander)*

public float getTabbedSpan(
  float x,
  javax.swing.text.TabExpander e)

Determines the desired span when using the given tab expansion implementation. 

    x - the position the view would be located at for the purpose of tab expansion >= 
       0. 
    e - how to expand the tabs when encountered. 

    Returns: the desired span >= 0 
*javax.swing.text.GlyphView.getTabExpander()*

public |javax.swing.text.TabExpander| getTabExpander()

Fetch the TabExpander to use if tabs are present in this view. 


*javax.swing.text.GlyphView.getText(int,int)*

public |javax.swing.text.Segment| getText(
  int p0,
  int p1)

Fetch a reference to the text that occupies the given range. This is normally 
used by the GlyphPainter to determine what characters it should render glyphs 
for. 

    p0 - the starting document offset >= 0 
    p1 - the ending document offset >= p0 

    Returns: the Segment containing the text 
*javax.swing.text.GlyphView.insertUpdate(DocumentEvent,Shape,ViewFactory)*

public void insertUpdate(
  javax.swing.event.DocumentEvent e,
  java.awt.Shape a,
  javax.swing.text.ViewFactory f)

Gives notification that something was inserted into the document in a location 
that this view is responsible for. This is implemented to call 
preferenceChanged along the axis the glyphs are rendered. 

    e - the change information from the associated document 
    a - the current allocation of the view 
    f - the factory to use to rebuild if the view has children 

*javax.swing.text.GlyphView.isStrikeThrough()*

public boolean isStrikeThrough()

Determine if the glyphs should have a strikethrough line. If true, a line 
should be drawn through the center of the glyphs. 


*javax.swing.text.GlyphView.isSubscript()*

public boolean isSubscript()

Determine if the glyphs should be rendered as superscript. 


*javax.swing.text.GlyphView.isSuperscript()*

public boolean isSuperscript()

Determine if the glyphs should be rendered as subscript. 


*javax.swing.text.GlyphView.isUnderline()*

public boolean isUnderline()

Determine if the glyphs should be underlined. If true, an underline should be 
drawn through the baseline. 


*javax.swing.text.GlyphView.modelToView(int,Shape,Position.Bias)*

public |java.awt.Shape| modelToView(
  int pos,
  java.awt.Shape a,
  javax.swing.text.Position.Bias b)
  throws |javax.swing.text.BadLocationException|
         
Provides a mapping from the document model coordinate space to the coordinate 
space of the view mapped to it. 

    pos - the position to convert >= 0 
    a - the allocated region to render into 
    b - either Position.Bias.Forward or Position.Bias.Backward 

    Returns: the bounding box of the given position 
*javax.swing.text.GlyphView.paint(Graphics,Shape)*

public void paint(
  java.awt.Graphics g,
  java.awt.Shape a)

Renders a portion of a text style run. 

    g - the rendering surface to use 
    a - the allocated region to render into 

*javax.swing.text.GlyphView.removeUpdate(DocumentEvent,Shape,ViewFactory)*

public void removeUpdate(
  javax.swing.event.DocumentEvent e,
  java.awt.Shape a,
  javax.swing.text.ViewFactory f)

Gives notification that something was removed from the document in a location 
that this view is responsible for. This is implemented to call 
preferenceChanged along the axis the glyphs are rendered. 

    e - the change information from the associated document 
    a - the current allocation of the view 
    f - the factory to use to rebuild if the view has children 

*javax.swing.text.GlyphView.setGlyphPainter(GlyphView.GlyphPainter)*

public void setGlyphPainter(javax.swing.text.GlyphView.GlyphPainter p)

Sets the painter to use for rendering glyphs. 


*javax.swing.text.GlyphView.viewToModel(float,float,Shape,Position.Bias[])*

public int viewToModel(
  float x,
  float y,
  java.awt.Shape a,
  javax.swing.text.Position.Bias[] biasReturn)

Provides a mapping from the view coordinate space to the logical coordinate 
space of the model. 

    x - the X coordinate >= 0 
    y - the Y coordinate >= 0 
    a - the allocated region to render into 
    biasReturn - either Position.Bias.Forward or Position.Bias.Backward is returned as the 
       zero-th element of this array 

    Returns: the location within the model that best represents the given point of view >= 0 


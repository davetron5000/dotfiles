*java.awt.dnd.DragSourceDragEvent* *DragSourceDragEvent* The DragSourceDragEvent is 
 delivered from the DragSourceContextPeer,
 via the DragSourceContext, to the DragSourceListene

public class DragSourceDragEvent
  extends    |java.awt.dnd.DragSourceEvent|

|java.awt.dnd.DragSourceDragEvent_Description|
|java.awt.dnd.DragSourceDragEvent_Fields|
|java.awt.dnd.DragSourceDragEvent_Constructors|
|java.awt.dnd.DragSourceDragEvent_Methods|

====================================================================================================================================================================================

*java.awt.dnd.DragSourceDragEvent_Constructors*
|java.awt.dnd.DragSourceDragEvent(DragSourceContext,int,int,int)|Constructs a DragSourceDragEvent.
|java.awt.dnd.DragSourceDragEvent(DragSourceContext,int,int,int,int,int)|Constructs a DragSourceDragEvent given the specified  DragSourceContext, user drop action, target drop act

*java.awt.dnd.DragSourceDragEvent_Methods*
|java.awt.dnd.DragSourceDragEvent.getDropAction()|This method returns the logical intersection of the user drop action,   the target drop action and the set of drop actions suppor
|java.awt.dnd.DragSourceDragEvent.getGestureModifiers()|This method returns an int representing  the current state of the input device modifiers  associated with the user's gestur
|java.awt.dnd.DragSourceDragEvent.getGestureModifiersEx()|This method returns an int representing  the current state of the input device extended modifiers  associated with the us
|java.awt.dnd.DragSourceDragEvent.getTargetActions()|This method returns the target drop action.
|java.awt.dnd.DragSourceDragEvent.getUserAction()|This method returns the user drop action.

*java.awt.dnd.DragSourceDragEvent_Description*

The DragSourceDragEvent is delivered from the DragSourceContextPeer, via the DragSourceContext, to the DragSourceListener registered with that DragSourceContext and with its 
associated DragSource. 

The DragSourceDragEvent reports the target drop action and the user drop action that reflect the current state of the drag operation. 

Target drop action is one of DnDConstants that represents the drop action selected by the current drop target if this drop action is supported by the drag source or 
DnDConstants.ACTION_NONE if this drop action is not supported by the drag source. 

User drop action depends on the drop actions supported by the drag source and the drop action selected by the user. The user can select a drop action by pressing modifier keys 
during the drag operation: 

Ctrl + Shift -> ACTION_LINK Ctrl -> ACTION_COPY Shift -> ACTION_MOVE 

If the user selects a drop action, the user drop action is one of DnDConstants that represents the selected drop action if this drop action is supported by the drag source or 
DnDConstants.ACTION_NONE if this drop action is not supported by the drag source. 

If the user doesn't select a drop action, the set of DnDConstants that represents the set of drop actions supported by the drag source is searched for DnDConstants.ACTION_MOVE, 
then for DnDConstants.ACTION_COPY, then for DnDConstants.ACTION_LINK and the user drop action is the first constant found. If no constant is found the user drop action is 
DnDConstants.ACTION_NONE. 



*java.awt.dnd.DragSourceDragEvent(DragSourceContext,int,int,int)*

public DragSourceDragEvent(
  java.awt.dnd.DragSourceContext dsc,
  int dropAction,
  int action,
  int modifiers)

Constructs a DragSourceDragEvent. This class is typically instantiated by the DragSourceContextPeer rather than directly by client code. The coordinates for this 
DragSourceDragEvent are not specified, so getLocation will return null for this event. 

The arguments dropAction and action should be one of DnDConstants that represents a single action. The argument modifiers should be either a bitwise mask of old 
java.awt.event.InputEvent.*_MASK constants or a bitwise mask of extended java.awt.event.InputEvent.*_DOWN_MASK constants. This constructor does not throw any exception for invalid 
dropAction, action and modifiers. 

    dsc - the DragSourceContext that is to manage notifications for this event. 
    dropAction - the user drop action. 
    action - the target drop action. 
    modifiers - the modifier keys down during event (shift, ctrl, alt, meta) Either extended _DOWN_MASK or old _MASK modifiers should be used, but both models should not be mixed in one event. 
       Use of the extended modifiers is preferred. 

*java.awt.dnd.DragSourceDragEvent(DragSourceContext,int,int,int,int,int)*

public DragSourceDragEvent(
  java.awt.dnd.DragSourceContext dsc,
  int dropAction,
  int action,
  int modifiers,
  int x,
  int y)

Constructs a DragSourceDragEvent given the specified DragSourceContext, user drop action, target drop action, modifiers and coordinates. 

The arguments dropAction and action should be one of DnDConstants that represents a single action. The argument modifiers should be either a bitwise mask of old 
java.awt.event.InputEvent.*_MASK constants or a bitwise mask of extended java.awt.event.InputEvent.*_DOWN_MASK constants. This constructor does not throw any exception for invalid 
dropAction, action and modifiers. 

    dsc - the DragSourceContext associated with this event. 
    dropAction - the user drop action. 
    action - the target drop action. 
    modifiers - the modifier keys down during event (shift, ctrl, alt, meta) Either extended _DOWN_MASK or old _MASK modifiers should be used, but both models should not be mixed in one event. 
       Use of the extended modifiers is preferred. 
    x - the horizontal coordinate for the cursor location 
    y - the vertical coordinate for the cursor location 

*java.awt.dnd.DragSourceDragEvent.getDropAction()*

public int getDropAction()

This method returns the logical intersection of the user drop action, the target drop action and the set of drop actions supported by the drag source. 



    Returns: the logical intersection of the user drop action, the target drop action and the set of drop actions supported by the drag source. 

*java.awt.dnd.DragSourceDragEvent.getGestureModifiers()*

public int getGestureModifiers()

This method returns an int representing the current state of the input device modifiers associated with the user's gesture. Typically these would be mouse buttons or keyboard 
modifiers. 

If the modifiers passed to the constructor are invalid, this method returns them unchanged. 



    Returns: the current state of the input device modifiers 

*java.awt.dnd.DragSourceDragEvent.getGestureModifiersEx()*

public int getGestureModifiersEx()

This method returns an int representing the current state of the input device extended modifiers associated with the user's gesture. See (|java.awt.event.InputEvent|) If the 
modifiers passed to the constructor are invalid, this method returns them unchanged. 



    Returns: the current state of the input device extended modifiers 

*java.awt.dnd.DragSourceDragEvent.getTargetActions()*

public int getTargetActions()

This method returns the target drop action. 



    Returns: the target drop action. 

*java.awt.dnd.DragSourceDragEvent.getUserAction()*

public int getUserAction()

This method returns the user drop action. 



    Returns: the user drop action. 



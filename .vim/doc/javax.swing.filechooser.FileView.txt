*javax.swing.filechooser.FileView* *FileView* FileView defines an abstract class

public abstract class FileView
  extends    |java.lang.Object|

|javax.swing.filechooser.FileView_Description|
|javax.swing.filechooser.FileView_Fields|
|javax.swing.filechooser.FileView_Constructors|
|javax.swing.filechooser.FileView_Methods|

================================================================================

*javax.swing.filechooser.FileView_Constructors*
|javax.swing.filechooser.FileView()|

*javax.swing.filechooser.FileView_Methods*
|javax.swing.filechooser.FileView.getDescription(File)|A human readable descrip
|javax.swing.filechooser.FileView.getIcon(File)|The icon that represents this f
|javax.swing.filechooser.FileView.getName(File)|The name of the file.
|javax.swing.filechooser.FileView.getTypeDescription(File)|A human readable des
|javax.swing.filechooser.FileView.isTraversable(File)|Whether the directory is 

*javax.swing.filechooser.FileView_Description*

FileView defines an abstract class that can be implemented to provide the 
filechooser with UI information for a File. Each LJFileChooserUI object 
implements this class to pass back the correct icons and type descriptions 
specific to that LFor example, the Microsoft Windows Lreturns the generic 
Windows icons for directories and generic files. Additionally, you may want to 
provide your own FileView to JFileChooser to return different icons or 
additional information using (|javax.swing.JFileChooser|) . 



JFileChooser first looks to see if there is a user defined FileView, if there 
is, it gets type information from there first. If FileView returns null for any 
method, JFileChooser then uses the Lspecific view to get the information. So, 
for example, if you provide a FileView class that returns an Icon for JPG 
files, and returns null icons for all other files, the UI's FileView will 
provide default icons for all other files. 



For an example implementation of a simple file view, see 
yourJDK/demo/jfc/FileChooserDemo/ExampleFileView.java. For more information and 
examples see How to Use File Choosers, a section in The Java Tutorial. 


*javax.swing.filechooser.FileView()*

public FileView()




*javax.swing.filechooser.FileView.getDescription(File)*

public |java.lang.String| getDescription(java.io.File f)

A human readable description of the file. For example, a file named jag.jpg 
might have a description that read: "A JPEG image file of James Gosling's 
face". 


*javax.swing.filechooser.FileView.getIcon(File)*

public |javax.swing.Icon| getIcon(java.io.File f)

The icon that represents this file in the JFileChooser. 


*javax.swing.filechooser.FileView.getName(File)*

public |java.lang.String| getName(java.io.File f)

The name of the file. Normally this would be simply f.getName(). 


*javax.swing.filechooser.FileView.getTypeDescription(File)*

public |java.lang.String| getTypeDescription(java.io.File f)

A human readable description of the type of the file. For example, a jpg file 
might have a type description of: "A JPEG Compressed Image File" 


*javax.swing.filechooser.FileView.isTraversable(File)*

public |java.lang.Boolean| isTraversable(java.io.File f)

Whether the directory is traversable or not. This might be useful, for example, 
if you want a directory to represent a compound document and don't want the 
user to descend into it. 




*java.io.ObjectInput* *ObjectInput* ObjectInput extends the DataInput interface 

public interface interface ObjectInput

  implements |java.io.DataInput|

|java.io.ObjectInput_Description|
|java.io.ObjectInput_Fields|
|java.io.ObjectInput_Constructors|
|java.io.ObjectInput_Methods|

================================================================================

*java.io.ObjectInput_Methods*
|java.io.ObjectInput.available()|Returns the number of bytes that can be read  
|java.io.ObjectInput.close()|Closes the input stream.
|java.io.ObjectInput.read()|Reads a byte of data.
|java.io.ObjectInput.read(byte[])|Reads into an array of bytes.
|java.io.ObjectInput.read(byte[],int,int)|Reads into an array of bytes.
|java.io.ObjectInput.readObject()|Read and return an object.
|java.io.ObjectInput.skip(long)|Skips n bytes of input.

*java.io.ObjectInput_Description*

ObjectInput extends the DataInput interface to include the reading of objects. 
DataInput includes methods for the input of primitive types, ObjectInput 
extends that interface to include objects, arrays, and Strings. 


*java.io.ObjectInput.available()*

public int available()
  throws |java.io.IOException|
         
Returns the number of bytes that can be read without blocking. 


    Returns: the number of available bytes. 
*java.io.ObjectInput.close()*

public void close()
  throws |java.io.IOException|
         
Closes the input stream. Must be called to release any resources associated 
with the stream. 


*java.io.ObjectInput.read()*

public int read()
  throws |java.io.IOException|
         
Reads a byte of data. This method will block if no input is available. 


    Returns: the byte read, or -1 if the end of the stream is reached. 
*java.io.ObjectInput.read(byte[])*

public int read(byte[] b)
  throws |java.io.IOException|
         
Reads into an array of bytes. This method will block until some input is 
available. 

    b - the buffer into which the data is read 

    Returns: the actual number of bytes read, -1 is returned when the end of the stream is 
             reached. 
*java.io.ObjectInput.read(byte[],int,int)*

public int read(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Reads into an array of bytes. This method will block until some input is 
available. 

    b - the buffer into which the data is read 
    off - the start offset of the data 
    len - the maximum number of bytes read 

    Returns: the actual number of bytes read, -1 is returned when the end of the stream is 
             reached. 
*java.io.ObjectInput.readObject()*

public |java.lang.Object| readObject()
  throws |java.lang.ClassNotFoundException|
         |java.io.IOException|
         
Read and return an object. The class that implements this interface defines 
where the object is "read" from. 


    Returns: the object read from the stream 
*java.io.ObjectInput.skip(long)*

public long skip(long n)
  throws |java.io.IOException|
         
Skips n bytes of input. 

    n - the number of bytes to be skipped 

    Returns: the actual number of bytes skipped. 


*java.io.ByteArrayInputStream* *ByteArrayInputStream* A ByteArrayInputStream con

public class ByteArrayInputStream
  extends    |java.io.InputStream|

|java.io.ByteArrayInputStream_Description|
|java.io.ByteArrayInputStream_Fields|
|java.io.ByteArrayInputStream_Constructors|
|java.io.ByteArrayInputStream_Methods|

================================================================================

*java.io.ByteArrayInputStream_Fields*
|byte[]_java.io.ByteArrayInputStream.buf|
|int_java.io.ByteArrayInputStream.count|
|int_java.io.ByteArrayInputStream.mark|
|int_java.io.ByteArrayInputStream.pos|

*java.io.ByteArrayInputStream_Constructors*
|java.io.ByteArrayInputStream(byte[])|Creates a ByteArrayInputStream  so that i
|java.io.ByteArrayInputStream(byte[],int,int)|Creates ByteArrayInputStream  tha

*java.io.ByteArrayInputStream_Methods*
|java.io.ByteArrayInputStream.available()|Returns the number of bytes that can 
|java.io.ByteArrayInputStream.close()|Closing a ByteArrayInputStream has no eff
|java.io.ByteArrayInputStream.mark(int)|Set the current marked position in the 
|java.io.ByteArrayInputStream.markSupported()|Tests if this InputStream support
|java.io.ByteArrayInputStream.read()|Reads the next byte of data from this inpu
|java.io.ByteArrayInputStream.read(byte[],int,int)|Reads up to len bytes of dat
|java.io.ByteArrayInputStream.reset()|Resets the buffer to the marked position.
|java.io.ByteArrayInputStream.skip(long)|Skips n bytes of input from this input

*java.io.ByteArrayInputStream_Description*

A ByteArrayInputStream contains an internal buffer that contains bytes that may 
be read from the stream. An internal counter keeps track of the next byte to be 
supplied by the read method. 

Closing a ByteArrayInputStream has no effect. The methods in this class can be 
called after the stream has been closed without generating an IOException. 


*byte[]_java.io.ByteArrayInputStream.buf*

A ByteArrayInputStream contains an internal buffer that contains bytes that may 
be read from the stream. An internal counter keeps track of the next byte to be 
supplied by the read method. 

Closing a ByteArrayInputStream has no effect. The methods in this class can be 
called after the stream has been closed without generating an IOException. 


*int_java.io.ByteArrayInputStream.count*

A ByteArrayInputStream contains an internal buffer that contains bytes that may 
be read from the stream. An internal counter keeps track of the next byte to be 
supplied by the read method. 

Closing a ByteArrayInputStream has no effect. The methods in this class can be 
called after the stream has been closed without generating an IOException. 


*int_java.io.ByteArrayInputStream.mark*

A ByteArrayInputStream contains an internal buffer that contains bytes that may 
be read from the stream. An internal counter keeps track of the next byte to be 
supplied by the read method. 

Closing a ByteArrayInputStream has no effect. The methods in this class can be 
called after the stream has been closed without generating an IOException. 


*int_java.io.ByteArrayInputStream.pos*

A ByteArrayInputStream contains an internal buffer that contains bytes that may 
be read from the stream. An internal counter keeps track of the next byte to be 
supplied by the read method. 

Closing a ByteArrayInputStream has no effect. The methods in this class can be 
called after the stream has been closed without generating an IOException. 



*java.io.ByteArrayInputStream(byte[])*

public ByteArrayInputStream(byte[] buf)

Creates a ByteArrayInputStream so that it uses buf as its buffer array. The 
buffer array is not copied. The initial value of pos is 0 and the initial value 
of count is the length of buf. 

    buf - the input buffer. 

*java.io.ByteArrayInputStream(byte[],int,int)*

public ByteArrayInputStream(
  byte[] buf,
  int offset,
  int length)

Creates ByteArrayInputStream that uses buf as its buffer array. The initial 
value of pos is offset and the initial value of count is the minimum of 
offset+length and buf.length. The buffer array is not copied. The buffer's mark 
is set to the specified offset. 

    buf - the input buffer. 
    offset - the offset in the buffer of the first byte to read. 
    length - the maximum number of bytes to read from the buffer. 

*java.io.ByteArrayInputStream.available()*

public synchronized int available()

Returns the number of bytes that can be read from this input stream without 
blocking. The value returned is count- pos, which is the number of bytes 
remaining to be read from the input buffer. 


    Returns: the number of bytes that can be read from the input stream without blocking. 
*java.io.ByteArrayInputStream.close()*

public void close()
  throws |java.io.IOException|
         
Closing a ByteArrayInputStream has no effect. The methods in this class can be 
called after the stream has been closed without generating an IOException. 


*java.io.ByteArrayInputStream.mark(int)*

public void mark(int readAheadLimit)

Set the current marked position in the stream. ByteArrayInputStream objects are 
marked at position zero by default when constructed. They may be marked at 
another position within the buffer by this method. 

If no mark has been set, then the value of the mark is the offset passed to the 
constructor (or 0 if the offset was not supplied). 

Note: The readAheadLimit for this class has no meaning. 


*java.io.ByteArrayInputStream.markSupported()*

public boolean markSupported()

Tests if this InputStream supports mark/reset. The markSupported method of 
ByteArrayInputStream always returns true. 


*java.io.ByteArrayInputStream.read()*

public synchronized int read()

Reads the next byte of data from this input stream. The value byte is returned 
as an int in the range 0 to 255. If no byte is available because the end of the 
stream has been reached, the value -1 is returned. 

This read method cannot block. 


    Returns: the next byte of data, or -1 if the end of the stream has been reached. 
*java.io.ByteArrayInputStream.read(byte[],int,int)*

public synchronized int read(
  byte[] b,
  int off,
  int len)

Reads up to len bytes of data into an array of bytes from this input stream. If 
pos equals count, then -1 is returned to indicate end of file. Otherwise, the 
number k of bytes read is equal to the smaller of len and count-pos. If k is 
positive, then bytes buf[pos] through buf[pos+k-1] are copied into b[off] 
through b[off+k-1] in the manner performed by System.arraycopy. The value k is 
added into pos and k is returned. 

This read method cannot block. 

    b - the buffer into which the data is read. 
    off - the start offset of the data. 
    len - the maximum number of bytes read. 

    Returns: the total number of bytes read into the buffer, or -1 if there is no more data 
             because the end of the stream has been reached. 
*java.io.ByteArrayInputStream.reset()*

public synchronized void reset()

Resets the buffer to the marked position. The marked position is 0 unless 
another position was marked or an offset was specified in the constructor. 


*java.io.ByteArrayInputStream.skip(long)*

public synchronized long skip(long n)

Skips n bytes of input from this input stream. Fewer bytes might be skipped if 
the end of the input stream is reached. The actual number k of bytes to be 
skipped is equal to the smaller of n and count-pos. The value k is added into 
pos and k is returned. 

    n - the number of bytes to be skipped. 

    Returns: the actual number of bytes skipped. 


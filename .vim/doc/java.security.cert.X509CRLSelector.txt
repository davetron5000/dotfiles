*java.security.cert.X509CRLSelector* *X509CRLSelector* A CRLSelector that selects X509CRLs that
 match all specified criteria.

public class X509CRLSelector
  extends    |java.lang.Object|
  implements |java.security.cert.CRLSelector|

|java.security.cert.X509CRLSelector_Description|
|java.security.cert.X509CRLSelector_Fields|
|java.security.cert.X509CRLSelector_Constructors|
|java.security.cert.X509CRLSelector_Methods|

====================================================================================================================================================================================

*java.security.cert.X509CRLSelector_Constructors*
|java.security.cert.X509CRLSelector()|Creates an X509CRLSelector.

*java.security.cert.X509CRLSelector_Methods*
|java.security.cert.X509CRLSelector.addIssuer(X500Principal)|Adds a name to the issuerNames criterion.
|java.security.cert.X509CRLSelector.addIssuerName(byte[])|Adds a name to the issuerNames criterion.
|java.security.cert.X509CRLSelector.addIssuerName(String)|Denigrated, use#addIssuer(X500Principal)or#addIssuerName(byte[])instead.
|java.security.cert.X509CRLSelector.clone()|Returns a copy of this object.
|java.security.cert.X509CRLSelector.getCertificateChecking()|Returns the certificate being checked.
|java.security.cert.X509CRLSelector.getDateAndTime()|Returns the dateAndTime criterion.
|java.security.cert.X509CRLSelector.getIssuerNames()|Returns a copy of the issuerNames criterion.
|java.security.cert.X509CRLSelector.getIssuers()|Returns the issuerNames criterion.
|java.security.cert.X509CRLSelector.getMaxCRL()|Returns the maxCRLNumber criterion.
|java.security.cert.X509CRLSelector.getMinCRL()|Returns the minCRLNumber criterion.
|java.security.cert.X509CRLSelector.match(CRL)|Decides whether a CRL should be selected.
|java.security.cert.X509CRLSelector.setCertificateChecking(X509Certificate)|Sets the certificate being checked.
|java.security.cert.X509CRLSelector.setDateAndTime(Date)|Sets the dateAndTime criterion.
|java.security.cert.X509CRLSelector.setIssuerNames(Collection<?>)|Note: use#setIssuers(Collection)instead  or only specify the byte array form of distinguished names when using  t
|java.security.cert.X509CRLSelector.setIssuers(Collection<X500Principal>)|Sets the issuerNames criterion.
|java.security.cert.X509CRLSelector.setMaxCRLNumber(BigInteger)|Sets the maxCRLNumber criterion.
|java.security.cert.X509CRLSelector.setMinCRLNumber(BigInteger)|Sets the minCRLNumber criterion.
|java.security.cert.X509CRLSelector.toString()|Returns a printable representation of the X509CRLSelector.

*java.security.cert.X509CRLSelector_Description*

A CRLSelector that selects X509CRLs that match all specified criteria. This class is particularly useful when selecting CRLs from a CertStore to check revocation status of a 
particular certificate. 

When first constructed, an X509CRLSelector has no criteria enabled and each of the get methods return a default value (null). Therefore, the 
match(|java.security.cert.X509CRLSelector|) method would return true for any X509CRL. Typically, several criteria are enabled (by calling 
setIssuers(|java.security.cert.X509CRLSelector|) or setDateAndTime(|java.security.cert.X509CRLSelector|) , for instance) and then the X509CRLSelector is passed to 
CertStore.getCRLs(|java.security.cert.CertStore|) or some similar method. 

Please refer to RFC 2459 for definitions of the X.509 CRL fields and extensions mentioned below. 

Concurrent Access 

Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst 
themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize. 



*java.security.cert.X509CRLSelector()*

public X509CRLSelector()

Creates an X509CRLSelector. Initially, no criteria are set so any X509CRL will match. 


*java.security.cert.X509CRLSelector.addIssuer(X500Principal)*

public void addIssuer(javax.security.auth.x500.X500Principal issuer)

Adds a name to the issuerNames criterion. The issuer distinguished name in the X509CRL must match at least one of the specified distinguished names. 

This method allows the caller to add a name to the set of issuer names which X509CRLs may contain. The specified name is added to any previous value for the issuerNames criterion. 
If the specified name is a duplicate, it may be ignored. 


    issuer - the issuer as X500Principal 

*java.security.cert.X509CRLSelector.addIssuerName(byte[])*

public void addIssuerName(byte[] name)
  throws |java.io.IOException|
         
Adds a name to the issuerNames criterion. The issuer distinguished name in the X509CRL must match at least one of the specified distinguished names. 

This method allows the caller to add a name to the set of issuer names which X509CRLs may contain. The specified name is added to any previous value for the issuerNames criterion. 
If the specified name is a duplicate, it may be ignored. If a name is specified as a byte array, it should contain a single DER encoded distinguished name, as defined in X.501. 
The ASN.1 notation for this structure is as follows. 

The name is provided as a byte array. This byte array should contain a single DER encoded distinguished name, as defined in X.501. The ASN.1 notation for this structure appears in 
the documentation for setIssuerNames(Collection names)(|java.security.cert.X509CRLSelector|) . 

Note that the byte array supplied here is cloned to protect against subsequent modifications. 


    name - a byte array containing the name in ASN.1 DER encoded form 

*java.security.cert.X509CRLSelector.addIssuerName(String)*

public void addIssuerName(java.lang.String name)
  throws |java.io.IOException|
         
Denigrated, use (|java.security.cert.X509CRLSelector|) or (|java.security.cert.X509CRLSelector|) instead. This method should not be relied on as it can fail to match some CRLs 
because of a loss of encoding information in the RFC 2253 String form of some distinguished names. 

Adds a name to the issuerNames criterion. The issuer distinguished name in the X509CRL must match at least one of the specified distinguished names. 

This method allows the caller to add a name to the set of issuer names which X509CRLs may contain. The specified name is added to any previous value for the issuerNames criterion. 
If the specified name is a duplicate, it may be ignored. 


    name - the name in RFC 2253 form 

*java.security.cert.X509CRLSelector.clone()*

public |java.lang.Object| clone()

Returns a copy of this object. 



    Returns: 

*java.security.cert.X509CRLSelector.getCertificateChecking()*

public |java.security.cert.X509Certificate| getCertificateChecking()

Returns the certificate being checked. This is not a criterion. Rather, it is optional information that may help a CertStore find CRLs that would be relevant when checking 
revocation for the specified certificate. If the value returned is null, then no such optional information is provided. 



    Returns: the certificate being checked (or null) 

*java.security.cert.X509CRLSelector.getDateAndTime()*

public |java.util.Date| getDateAndTime()

Returns the dateAndTime criterion. The specified date must be equal to or later than the value of the thisUpdate component of the X509CRL and earlier than the value of the 
nextUpdate component. There is no match if the X509CRL does not contain a nextUpdate component. If null, no dateAndTime check will be done. 

Note that the Date returned is cloned to protect against subsequent modifications. 



    Returns: the Date to match against (or null) 

*java.security.cert.X509CRLSelector.getIssuerNames()*

public |java.util.Collection|<Object> getIssuerNames()

Returns a copy of the issuerNames criterion. The issuer distinguished name in the X509CRL must match at least one of the specified distinguished names. If the value returned is 
null, any issuer distinguished name will do. 

If the value returned is not null, it is a Collection of names. Each name is a String or a byte array representing a distinguished name (in RFC 2253 or ASN.1 DER encoded form, 
respectively). Note that the Collection returned may contain duplicate names. 

If a name is specified as a byte array, it should contain a single DER encoded distinguished name, as defined in X.501. The ASN.1 notation for this structure is given in the 
documentation for setIssuerNames(Collection names)(|java.security.cert.X509CRLSelector|) . 

Note that a deep copy is performed on the Collection to protect against subsequent modifications. 



    Returns: a Collection of names (or null) 

*java.security.cert.X509CRLSelector.getIssuers()*

public |java.util.Collection|<X500Principal> getIssuers()

Returns the issuerNames criterion. The issuer distinguished name in the X509CRL must match at least one of the specified distinguished names. If the value returned is null, any 
issuer distinguished name will do. 

If the value returned is not null, it is a unmodifiable Collection of X500Principals. 



    Returns: an unmodifiable Collection of names (or null) 

*java.security.cert.X509CRLSelector.getMaxCRL()*

public |java.math.BigInteger| getMaxCRL()

Returns the maxCRLNumber criterion. The X509CRL must have a CRL number extension whose value is less than or equal to the specified value. If null, no maxCRLNumber check will be 
done. 



    Returns: the maximum CRL number accepted (or null) 

*java.security.cert.X509CRLSelector.getMinCRL()*

public |java.math.BigInteger| getMinCRL()

Returns the minCRLNumber criterion. The X509CRL must have a CRL number extension whose value is greater than or equal to the specified value. If null, no minCRLNumber check will 
be done. 



    Returns: the minimum CRL number accepted (or null) 

*java.security.cert.X509CRLSelector.match(CRL)*

public boolean match(java.security.cert.CRL crl)

Decides whether a CRL should be selected. 


    crl - the CRL to be checked 

    Returns: true if the CRL should be selected, false otherwise 

*java.security.cert.X509CRLSelector.setCertificateChecking(X509Certificate)*

public void setCertificateChecking(java.security.cert.X509Certificate cert)

Sets the certificate being checked. This is not a criterion. Rather, it is optional information that may help a CertStore find CRLs that would be relevant when checking revocation 
for the specified certificate. If null is specified, then no such optional information is provided. 


    cert - the X509Certificate being checked (or null) 

*java.security.cert.X509CRLSelector.setDateAndTime(Date)*

public void setDateAndTime(java.util.Date dateAndTime)

Sets the dateAndTime criterion. The specified date must be equal to or later than the value of the thisUpdate component of the X509CRL and earlier than the value of the nextUpdate 
component. There is no match if the X509CRL does not contain a nextUpdate component. If null, no dateAndTime check will be done. 

Note that the Date supplied here is cloned to protect against subsequent modifications. 


    dateAndTime - the Date to match against (or null) 

*java.security.cert.X509CRLSelector.setIssuerNames(Collection<?>)*

public void setIssuerNames(java.util.Collection<?> names)
  throws |java.io.IOException|
         
Note: use (|java.security.cert.X509CRLSelector|) instead or only specify the byte array form of distinguished names when using this method. See 
(|java.security.cert.X509CRLSelector|) for more information. 

Sets the issuerNames criterion. The issuer distinguished name in the X509CRL must match at least one of the specified distinguished names. If null, any issuer distinguished name 
will do. 

This method allows the caller to specify, with a single method call, the complete set of issuer names which X509CRLs may contain. The specified value replaces the previous value 
for the issuerNames criterion. 

The names parameter (if not null) is a Collection of names. Each name is a String or a byte array representing a distinguished name (in RFC 2253 or ASN.1 DER encoded form, 
respectively). If null is supplied as the value for this argument, no issuerNames check will be performed. 

Note that the names parameter can contain duplicate distinguished names, but they may be removed from the Collection of names returned by the 
getIssuerNames(|java.security.cert.X509CRLSelector|) method. 

If a name is specified as a byte array, it should contain a single DER encoded distinguished name, as defined in X.501. The ASN.1 notation for this structure is as follows. 

Name ::= CHOICE { RDNSequence } 

RDNSequence ::= SEQUENCE OF RelativeDistinguishedName 

RelativeDistinguishedName ::= SET SIZE (1 .. MAX) OF AttributeTypeAndValue 

AttributeTypeAndValue ::= SEQUENCE { type AttributeType, value AttributeValue } 

AttributeType ::= OBJECT IDENTIFIER 

AttributeValue ::= ANY DEFINED BY AttributeType .... DirectoryString ::= CHOICE { teletexString TeletexString (SIZE (1..MAX)), printableString PrintableString (SIZE (1..MAX)), 
universalString UniversalString (SIZE (1..MAX)), utf8String UTF8String (SIZE (1.. MAX)), bmpString BMPString (SIZE (1..MAX)) } 

Note that a deep copy is performed on the Collection to protect against subsequent modifications. 


    names - a Collection of names (or null) 

*java.security.cert.X509CRLSelector.setIssuers(Collection<X500Principal>)*

public void setIssuers(java.util.Collection<javax.security.auth.x500.X500Principal> issuers)

Sets the issuerNames criterion. The issuer distinguished name in the X509CRL must match at least one of the specified distinguished names. If null, any issuer distinguished name 
will do. 

This method allows the caller to specify, with a single method call, the complete set of issuer names which X509CRLs may contain. The specified value replaces the previous value 
for the issuerNames criterion. 

The names parameter (if not null) is a Collection of X500Principals. 

Note that the names parameter can contain duplicate distinguished names, but they may be removed from the Collection of names returned by the 
getIssuers(|java.security.cert.X509CRLSelector|) method. 

Note that a copy is performed on the Collection to protect against subsequent modifications. 


    issuers - a Collection of X500Principals (or null) 

*java.security.cert.X509CRLSelector.setMaxCRLNumber(BigInteger)*

public void setMaxCRLNumber(java.math.BigInteger maxCRL)

Sets the maxCRLNumber criterion. The X509CRL must have a CRL number extension whose value is less than or equal to the specified value. If null, no maxCRLNumber check will be 
done. 


    maxCRL - the maximum CRL number accepted (or null) 

*java.security.cert.X509CRLSelector.setMinCRLNumber(BigInteger)*

public void setMinCRLNumber(java.math.BigInteger minCRL)

Sets the minCRLNumber criterion. The X509CRL must have a CRL number extension whose value is greater than or equal to the specified value. If null, no minCRLNumber check will be 
done. 


    minCRL - the minimum CRL number accepted (or null) 

*java.security.cert.X509CRLSelector.toString()*

public |java.lang.String| toString()

Returns a printable representation of the X509CRLSelector. 



    Returns: a String describing the contents of the X509CRLSelector. 



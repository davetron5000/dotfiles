*java.awt.ContainerOrderFocusTraversalPolicy* *ContainerOrderFocusTraversalPolicy* 

public class ContainerOrderFocusTraversalPolicy
  extends    |java.awt.FocusTraversalPolicy|
  implements |java.io.Serializable|

|java.awt.ContainerOrderFocusTraversalPolicy_Description|
|java.awt.ContainerOrderFocusTraversalPolicy_Fields|
|java.awt.ContainerOrderFocusTraversalPolicy_Constructors|
|java.awt.ContainerOrderFocusTraversalPolicy_Methods|

================================================================================

*java.awt.ContainerOrderFocusTraversalPolicy_Constructors*
|java.awt.ContainerOrderFocusTraversalPolicy()|

*java.awt.ContainerOrderFocusTraversalPolicy_Methods*
|java.awt.ContainerOrderFocusTraversalPolicy.accept(Component)|Determines wheth
|java.awt.ContainerOrderFocusTraversalPolicy.getComponentAfter(Container,Component)|
|java.awt.ContainerOrderFocusTraversalPolicy.getComponentBefore(Container,Component)|
|java.awt.ContainerOrderFocusTraversalPolicy.getDefaultComponent(Container)|Ret
|java.awt.ContainerOrderFocusTraversalPolicy.getFirstComponent(Container)|Retur
|java.awt.ContainerOrderFocusTraversalPolicy.getImplicitDownCycleTraversal()|Re
|java.awt.ContainerOrderFocusTraversalPolicy.getLastComponent(Container)|Return
|java.awt.ContainerOrderFocusTraversalPolicy.setImplicitDownCycleTraversal(boolean)|

*java.awt.ContainerOrderFocusTraversalPolicy_Description*

A FocusTraversalPolicy that determines traversal order based on the order of 
child Components in a Container. From a particular focus cycle root, the policy 
makes a pre-order traversal of the Component hierarchy, and traverses a 
Container's children according to the ordering of the array returned by 
Container.getComponents(). Portions of the hierarchy that are not visible and 
displayable will not be searched. 

By default, ContainerOrderFocusTraversalPolicy implicitly transfers focus 
down-cycle. That is, during normal forward focus traversal, the Component 
traversed after a focus cycle root will be the focus-cycle-root's default 
Component to focus. This behavior can be disabled using the 
setImplicitDownCycleTraversal method. 

By default, methods of this class with return a Component only if it is 
visible, displayable, enabled, and focusable. Subclasses can modify this 
behavior by overriding the accept method. 

This policy takes into account focus traversal policy providers. When searching 
for first/last/next/previous Component, if a focus traversal policy provider is 
encountered, its focus traversal policy is used to perform the search 
operation. 


*java.awt.ContainerOrderFocusTraversalPolicy()*

public ContainerOrderFocusTraversalPolicy()




*java.awt.ContainerOrderFocusTraversalPolicy.accept(Component)*

protected boolean accept(java.awt.Component aComponent)

Determines whether a Component is an acceptable choice as the new focus owner. 
By default, this method will accept a Component if and only if it is visible, 
displayable, enabled, and focusable. 

    aComponent - the Component whose fitness as a focus owner is to be tested 

    Returns: true if aComponent is visible, displayable, enabled, and focusable; false 
             otherwise 
*java.awt.ContainerOrderFocusTraversalPolicy.getComponentAfter(Container,Component)*

public |java.awt.Component| getComponentAfter(
  java.awt.Container aContainer,
  java.awt.Component aComponent)

Returns the Component that should receive the focus after aComponent. 
aContainer must be a focus cycle root of aComponent or a focus traversal policy 
provider. 

By default, ContainerOrderFocusTraversalPolicy implicitly transfers focus 
down-cycle. That is, during normal forward focus traversal, the Component 
traversed after a focus cycle root will be the focus-cycle- root's default 
Component to focus. This behavior can be disabled using the 
setImplicitDownCycleTraversal method. 

If aContainer is focus traversal policy provider, the focus is always 
transferred down-cycle. 

    aContainer - a focus cycle root of aComponent or a focus traversal policy provider 
    aComponent - a (possibly indirect) child of aContainer, or aContainer itself 

    Returns: the Component that should receive the focus after aComponent, or null if no 
             suitable Component can be found 
*java.awt.ContainerOrderFocusTraversalPolicy.getComponentBefore(Container,Component)*

public |java.awt.Component| getComponentBefore(
  java.awt.Container aContainer,
  java.awt.Component aComponent)

Returns the Component that should receive the focus before aComponent. 
aContainer must be a focus cycle root of aComponent or a focus traversal policy 
provider. 

    aContainer - a focus cycle root of aComponent or focus traversal policy provider 
    aComponent - a (possibly indirect) child of aContainer, or aContainer itself 

    Returns: the Component that should receive the focus before aComponent, or null if no 
             suitable Component can be found 
*java.awt.ContainerOrderFocusTraversalPolicy.getDefaultComponent(Container)*

public |java.awt.Component| getDefaultComponent(java.awt.Container aContainer)

Returns the default Component to focus. This Component will be the first to 
receive focus when traversing down into a new focus traversal cycle rooted at 
aContainer. The default implementation of this method returns the same 
Component as getFirstComponent. 

    aContainer - the focus cycle root or focus traversal policy provider whose default Component 
       is to be returned 

    Returns: the default Component in the traversal cycle of aContainer, or null if no 
             suitable Component can be found 
*java.awt.ContainerOrderFocusTraversalPolicy.getFirstComponent(Container)*

public |java.awt.Component| getFirstComponent(java.awt.Container aContainer)

Returns the first Component in the traversal cycle. This method is used to 
determine the next Component to focus when traversal wraps in the forward 
direction. 

    aContainer - the focus cycle root or focus traversal policy provider whose first Component 
       is to be returned 

    Returns: the first Component in the traversal cycle of aContainer, or null if no 
             suitable Component can be found 
*java.awt.ContainerOrderFocusTraversalPolicy.getImplicitDownCycleTraversal()*

public boolean getImplicitDownCycleTraversal()

Returns whether this ContainerOrderFocusTraversalPolicy transfers focus 
down-cycle implicitly. If true, during normal forward focus traversal, the 
Component traversed after a focus cycle root will be the focus-cycle-root's 
default Component to focus. If false, the next Component in the focus traversal 
cycle rooted at the specified focus cycle root will be traversed instead. 


    Returns: whether this ContainerOrderFocusTraversalPolicy transfers focus down-cycle 
             implicitly 
*java.awt.ContainerOrderFocusTraversalPolicy.getLastComponent(Container)*

public |java.awt.Component| getLastComponent(java.awt.Container aContainer)

Returns the last Component in the traversal cycle. This method is used to 
determine the next Component to focus when traversal wraps in the reverse 
direction. 

    aContainer - the focus cycle root or focus traversal policy provider whose last Component is 
       to be returned 

    Returns: the last Component in the traversal cycle of aContainer, or null if no suitable 
             Component can be found 
*java.awt.ContainerOrderFocusTraversalPolicy.setImplicitDownCycleTraversal(boolean)*

public void setImplicitDownCycleTraversal(boolean implicitDownCycleTraversal)

Sets whether this ContainerOrderFocusTraversalPolicy transfers focus down-cycle 
implicitly. If true, during normal forward focus traversal, the Component 
traversed after a focus cycle root will be the focus-cycle-root's default 
Component to focus. If false, the next Component in the focus traversal cycle 
rooted at the specified focus cycle root will be traversed instead. The default 
value for this property is true. 

    implicitDownCycleTraversal - whether this ContainerOrderFocusTraversalPolicy transfers focus down-cycle 
       implicitly 



*javax.swing.text.AbstractDocument.BranchElement* *AbstractDocument.BranchElement* 

public class AbstractDocument.BranchElement
  extends    |javax.swing.text.AbstractDocument.AbstractElement|

|javax.swing.text.AbstractDocument.BranchElement_Description|
|javax.swing.text.AbstractDocument.BranchElement_Fields|
|javax.swing.text.AbstractDocument.BranchElement_Constructors|
|javax.swing.text.AbstractDocument.BranchElement_Methods|

================================================================================

*javax.swing.text.AbstractDocument.BranchElement_Constructors*
|javax.swing.text.AbstractDocument.BranchElement(Element,AttributeSet)|Construc

*javax.swing.text.AbstractDocument.BranchElement_Methods*
|javax.swing.text.AbstractDocument.BranchElement.children()|Returns the childre
|javax.swing.text.AbstractDocument.BranchElement.getAllowsChildren()|Returns tr
|javax.swing.text.AbstractDocument.BranchElement.getElement(int)|Gets a child e
|javax.swing.text.AbstractDocument.BranchElement.getElementCount()|Gets the num
|javax.swing.text.AbstractDocument.BranchElement.getElementIndex(int)|Gets the 
|javax.swing.text.AbstractDocument.BranchElement.getEndOffset()|Gets the ending
|javax.swing.text.AbstractDocument.BranchElement.getName()|Gets the element nam
|javax.swing.text.AbstractDocument.BranchElement.getStartOffset()|Gets the star
|javax.swing.text.AbstractDocument.BranchElement.isLeaf()|Checks whether the el
|javax.swing.text.AbstractDocument.BranchElement.positionToElement(int)|Gets th
|javax.swing.text.AbstractDocument.BranchElement.replace(int,int,Element[])|Rep
|javax.swing.text.AbstractDocument.BranchElement.toString()|Converts the elemen

*javax.swing.text.AbstractDocument.BranchElement_Description*

Implements a composite element that contains other elements. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.text.AbstractDocument.BranchElement(Element,AttributeSet)*

public AbstractDocument.BranchElement(
  javax.swing.text.Element parent,
  javax.swing.text.AttributeSet a)

Constructs a composite element that initially contains no children. 

    parent - The parent element 
    a - the attributes for the element 

*javax.swing.text.AbstractDocument.BranchElement.children()*

public |java.util.Enumeration| children()

Returns the children of the receiver as an Enumeration. 


    Returns: the children of the receiver 
*javax.swing.text.AbstractDocument.BranchElement.getAllowsChildren()*

public boolean getAllowsChildren()

Returns true if the receiver allows children. 


    Returns: true if the receiver allows children, otherwise false 
*javax.swing.text.AbstractDocument.BranchElement.getElement(int)*

public |javax.swing.text.Element| getElement(int index)

Gets a child element. 

    index - the child index, >= 0 < getElementCount() 

    Returns: the child element, null if none 
*javax.swing.text.AbstractDocument.BranchElement.getElementCount()*

public int getElementCount()

Gets the number of children for the element. 


    Returns: the number of children >= 0 
*javax.swing.text.AbstractDocument.BranchElement.getElementIndex(int)*

public int getElementIndex(int offset)

Gets the child element index closest to the given model offset. 

    offset - the offset >= 0 

    Returns: the element index >= 0 
*javax.swing.text.AbstractDocument.BranchElement.getEndOffset()*

public int getEndOffset()

Gets the ending offset in the model for the element. 


    Returns: the offset >= 0 
*javax.swing.text.AbstractDocument.BranchElement.getName()*

public |java.lang.String| getName()

Gets the element name. 


    Returns: the element name 
*javax.swing.text.AbstractDocument.BranchElement.getStartOffset()*

public int getStartOffset()

Gets the starting offset in the model for the element. 


    Returns: the offset >= 0 
*javax.swing.text.AbstractDocument.BranchElement.isLeaf()*

public boolean isLeaf()

Checks whether the element is a leaf. 


    Returns: true if a leaf 
*javax.swing.text.AbstractDocument.BranchElement.positionToElement(int)*

public |javax.swing.text.Element| positionToElement(int pos)

Gets the child element that contains the given model position. 

    pos - the position >= 0 

    Returns: the element, null if none 
*javax.swing.text.AbstractDocument.BranchElement.replace(int,int,Element[])*

public void replace(
  int offset,
  int length,
  javax.swing.text.Element[] elems)

Replaces content with a new set of elements. 

    offset - the starting offset >= 0 
    length - the length to replace >= 0 
    elems - the new elements 

*javax.swing.text.AbstractDocument.BranchElement.toString()*

public |java.lang.String| toString()

Converts the element to a string. 


    Returns: 


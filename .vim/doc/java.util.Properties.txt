*java.util.Properties* *Properties* The Properties class represents a persistent

public class Properties
  extends    |java.util.Hashtable|

|java.util.Properties_Description|
|java.util.Properties_Fields|
|java.util.Properties_Constructors|
|java.util.Properties_Methods|

================================================================================

*java.util.Properties_Fields*
|java.util.Properties_java.util.Properties.defaults|

*java.util.Properties_Constructors*
|java.util.Properties()|Creates an empty property list with no default values.
|java.util.Properties(Properties)|Creates an empty property list with the speci

*java.util.Properties_Methods*
|java.util.Properties.getProperty(String)|Searches for the property with the sp
|java.util.Properties.getProperty(String,String)|Searches for the property with
|java.util.Properties.list(PrintStream)|Prints this property list out to the sp
|java.util.Properties.list(PrintWriter)|Prints this property list out to the sp
|java.util.Properties.load(InputStream)|Reads a property list (key and element 
|java.util.Properties.loadFromXML(InputStream)|Loads all of the properties repr
|java.util.Properties.propertyNames()|Returns an enumeration of all the keys in
|java.util.Properties.save(OutputStream,String)|Calls the store(OutputStream ou
|java.util.Properties.setProperty(String,String)|Calls the Hashtable method put
|java.util.Properties.store(OutputStream,String)|Writes this property list (key
|java.util.Properties.storeToXML(OutputStream,String)|Emits an XML document rep
|java.util.Properties.storeToXML(OutputStream,String,String)|Emits an XML docum

*java.util.Properties_Description*

The Properties class represents a persistent set of properties. The Properties 
can be saved to a stream or loaded from a stream. Each key and its 
corresponding value in the property list is a string. 

A property list can contain another property list as its "defaults"; this 
second property list is searched if the property key is not found in the 
original property list. 

Because Properties inherits from Hashtable, the put and putAll methods can be 
applied to a Properties object. Their use is strongly discouraged as they allow 
the caller to insert entries whose keys or values are not Strings. The 
setProperty method should be used instead. If the store or save method is 
called on a "compromised" Properties object that contains a non-String key or 
value, the call will fail. 

The load(|java.util.Properties|) and store(|java.util.Properties|) methods load 
and store properties in a simple line-oriented format specified below. This 
format uses the ISO 8859-1 character encoding. Characters that cannot be 
directly represented in this encoding can be written using Unicode escapes ; 
only a single 'u' character is allowed in an escape sequence. The native2ascii 
tool can be used to convert property files to and from other character 
encodings. 

The (|java.util.Properties|) and (|java.util.Properties|) methods load and 
store properties in a simple XML format. By default the UTF-8 character 
encoding is used, however a specific encoding may be specified if required. An 
XML properties document has the following DOCTYPE declaration: 



<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"> 

Note that the system URI (http://java.sun.com/dtd/properties.dtd) is not 
accessed when exporting or importing properties; it merely serves as a string 
to uniquely identify the DTD, which is: 

<?xml version="1.0" encoding="UTF-8"?> 

<!-- DTD for properties --> 

<!ELEMENT properties ( comment?, entry* ) > 

<!ATTLIST properties version CDATA #FIXED "1.0"> 

<!ELEMENT comment (#PCDATA) > 

<!ELEMENT entry (#PCDATA) > 

<!ATTLIST entry key CDATA #REQUIRED> 


*java.util.Properties_java.util.Properties.defaults*

The Properties class represents a persistent set of properties. The Properties 
can be saved to a stream or loaded from a stream. Each key and its 
corresponding value in the property list is a string. 

A property list can contain another property list as its "defaults"; this 
second property list is searched if the property key is not found in the 
original property list. 

Because Properties inherits from Hashtable, the put and putAll methods can be 
applied to a Properties object. Their use is strongly discouraged as they allow 
the caller to insert entries whose keys or values are not Strings. The 
setProperty method should be used instead. If the store or save method is 
called on a "compromised" Properties object that contains a non-String key or 
value, the call will fail. 

The load(|java.util.Properties|) and store(|java.util.Properties|) methods load 
and store properties in a simple line-oriented format specified below. This 
format uses the ISO 8859-1 character encoding. Characters that cannot be 
directly represented in this encoding can be written using Unicode escapes ; 
only a single 'u' character is allowed in an escape sequence. The native2ascii 
tool can be used to convert property files to and from other character 
encodings. 

The (|java.util.Properties|) and (|java.util.Properties|) methods load and 
store properties in a simple XML format. By default the UTF-8 character 
encoding is used, however a specific encoding may be specified if required. An 
XML properties document has the following DOCTYPE declaration: 



<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"> 

Note that the system URI (http://java.sun.com/dtd/properties.dtd) is not 
accessed when exporting or importing properties; it merely serves as a string 
to uniquely identify the DTD, which is: 

<?xml version="1.0" encoding="UTF-8"?> 

<!-- DTD for properties --> 

<!ELEMENT properties ( comment?, entry* ) > 

<!ATTLIST properties version CDATA #FIXED "1.0"> 

<!ELEMENT comment (#PCDATA) > 

<!ELEMENT entry (#PCDATA) > 

<!ATTLIST entry key CDATA #REQUIRED> 



*java.util.Properties()*

public Properties()

Creates an empty property list with no default values. 


*java.util.Properties(Properties)*

public Properties(java.util.Properties defaults)

Creates an empty property list with the specified defaults. 

    defaults - the defaults. 

*java.util.Properties.getProperty(String)*

public |java.lang.String| getProperty(java.lang.String key)

Searches for the property with the specified key in this property list. If the 
key is not found in this property list, the default property list, and its 
defaults, recursively, are then checked. The method returns null if the 
property is not found. 

    key - the property key. 

    Returns: the value in this property list with the specified key value. 
*java.util.Properties.getProperty(String,String)*

public |java.lang.String| getProperty(
  java.lang.String key,
  java.lang.String defaultValue)

Searches for the property with the specified key in this property list. If the 
key is not found in this property list, the default property list, and its 
defaults, recursively, are then checked. The method returns the default value 
argument if the property is not found. 

    key - the hashtable key. 
    defaultValue - a default value. 

    Returns: the value in this property list with the specified key value. 
*java.util.Properties.list(PrintStream)*

public void list(java.io.PrintStream out)

Prints this property list out to the specified output stream. This method is 
useful for debugging. 

    out - an output stream. 

*java.util.Properties.list(PrintWriter)*

public void list(java.io.PrintWriter out)

Prints this property list out to the specified output stream. This method is 
useful for debugging. 

    out - an output stream. 

*java.util.Properties.load(InputStream)*

public synchronized void load(java.io.InputStream inStream)
  throws |java.io.IOException|
         
Reads a property list (key and element pairs) from the input stream. The stream 
is assumed to be using the ISO 8859-1 character encoding; that is each byte is 
one Latin1 character. Characters not in Latin1, and certain special characters, 
can be represented in keys and elements using escape sequences similar to those 
used for character and string literals (see 3.3 and 3.10.6 of the Java Language 
Specification). 

The differences from the character escape sequences used for characters and 
strings are: 

Octal escapes are not recognized. 

The character sequence \b does not represent a backspace character. 

The method does not treat a backslash character, \, before a non-valid escape 
character as an error; the backslash is silently dropped. For example, in a 
Java string the sequence "\z" would cause a compile time error. In contrast, 
this method silently drops the backslash. Therefore, this method treats the two 
character sequence "\b" as equivalent to the single character 'b'. 

Escapes are not necessary for single and double quotes; however, by the rule 
above, single and double quote characters preceded by a backslash still yield 
single and double quote characters, respectively. 



An IllegalArgumentException is thrown if a malformed Unicode escape appears in 
the input. 

This method processes input in terms of lines. A natural line of input is 
terminated either by a set of line terminator characters (\n or \r or \r\n) or 
by the end of the file. A natural line may be either a blank line, a comment 
line, or hold some part of a key-element pair. The logical line holding all the 
data for a key-element pair may be spread out across several adjacent natural 
lines by escaping the line terminator sequence with a backslash character, \. 
Note that a comment line cannot be extended in this manner; every natural line 
that is a comment must have its own comment indicator, as described below. If a 
logical line is continued over several natural lines, the continuation lines 
receive further processing, also described below. Lines are read from the input 
stream until end of file is reached. 

A natural line that contains only white space characters is considered blank 
and is ignored. A comment line has an ASCII '#' or '!' as its first non-white 
space character; comment lines are also ignored and do not encode key-element 
information. In addition to line terminators, this method considers the 
characters space (' ', 'u0020'), tab ('\t', 'u0009'), and form feed ('\f', 
'u000C') to be white space. 

If a logical line is spread across several natural lines, the backslash 
escaping the line terminator sequence, the line terminator sequence, and any 
white space at the start the following line have no affect on the key or 
element values. The remainder of the discussion of key and element parsing will 
assume all the characters constituting the key and element appear on a single 
natural line after line continuation characters have been removed. Note that it 
is not sufficient to only examine the character preceding a line terminator 
sequence to see if the line terminator is escaped; there must be an odd number 
of contiguous backslashes for the line terminator to be escaped. Since the 
input is processed from left to right, a non-zero even number of 2n contiguous 
backslashes before a line terminator (or elsewhere) encodes n backslashes after 
escape processing. 

The key contains all of the characters in the line starting with the first 
non-white space character and up to, but not including, the first unescaped 
'=', ':', or white space character other than a line terminator. All of these 
key termination characters may be included in the key by escaping them with a 
preceding backslash character; for example, 

\:\= 

would be the two-character key ":=". Line terminator characters can be included 
using \r and \n escape sequences. Any white space after the key is skipped; if 
the first non-white space character after the key is '=' or ':', then it is 
ignored and any white space characters after it are also skipped. All remaining 
characters on the line become part of the associated element string; if there 
are no remaining characters, the element is the empty string . Once the raw 
character sequences constituting the key and element are identified, escape 
processing is performed as described above. 

As an example, each of the following three lines specifies the key "Truth" and 
the associated element value "Beauty": 



Truth = Beauty Truth:Beauty Truth			:Beauty 

As another example, the following three lines specify a single property: 



fruits apple, banana, pear, \ cantaloupe, watermelon, \ kiwi, mango 

The key is "fruits" and the associated element is: 

"apple, banana, pear, cantaloupe, watermelon, kiwi, mango" 

Note that a space appears before each \ so that a space will appear after each 
comma in the final result; the \, line terminator, and leading white space on 
the continuation line are merely discarded and are not replaced by one or more 
other characters. 

As a third example, the line: 

cheeses 

specifies that the key is "cheeses" and the associated element is the empty 
string "". 

    inStream - the input stream. 

*java.util.Properties.loadFromXML(InputStream)*

public synchronized void loadFromXML(java.io.InputStream in)
  throws |java.util.InvalidPropertiesFormatException|
         |java.io.IOException|
         
Loads all of the properties represented by the XML document on the specified 
input stream into this properties table. 

The XML document must have the following DOCTYPE declaration: 

<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"> 

Furthermore, the document must satisfy the properties DTD described above. 

The specified stream remains open after this method returns. 

    in - the input stream from which to read the XML document. 

*java.util.Properties.propertyNames()*

public |java.util.Enumeration| propertyNames()

Returns an enumeration of all the keys in this property list, including 
distinct keys in the default property list if a key of the same name has not 
already been found from the main properties list. 


    Returns: an enumeration of all the keys in this property list, including the keys in the 
             default property list. 
*java.util.Properties.save(OutputStream,String)*

public synchronized void save(
  java.io.OutputStream out,
  java.lang.String comments)

Calls the store(OutputStream out, String comments) method and suppresses 
IOExceptions that were thrown. 

    out - an output stream. 
    comments - a description of the property list. 

*java.util.Properties.setProperty(String,String)*

public synchronized |java.lang.Object| setProperty(
  java.lang.String key,
  java.lang.String value)

Calls the Hashtable method put. Provided for parallelism with the getProperty 
method. Enforces use of strings for property keys and values. The value 
returned is the result of the Hashtable call to put. 

    key - the key to be placed into this property list. 
    value - the value corresponding to key. 

    Returns: the previous value of the specified key in this property list, or null if it 
             did not have one. 
*java.util.Properties.store(OutputStream,String)*

public synchronized void store(
  java.io.OutputStream out,
  java.lang.String comments)
  throws |java.io.IOException|
         
Writes this property list (key and element pairs) in this Properties table to 
the output stream in a format suitable for loading into a Properties table 
using the load(|java.util.Properties|) method. The stream is written using the 
ISO 8859-1 character encoding. 

Properties from the defaults table of this Properties table (if any) are not 
written out by this method. 

If the comments argument is not null, then an ASCII # character, the comments 
string, and a line separator are first written to the output stream. Thus, the 
comments can serve as an identifying comment. 

Next, a comment line is always written, consisting of an ASCII # character, the 
current date and time (as if produced by the toString method of Date for the 
current time), and a line separator as generated by the Writer. 

Then every entry in this Properties table is written out, one per line. For 
each entry the key string is written, then an ASCII =, then the associated 
element string. Each character of the key and element strings is examined to 
see whether it should be rendered as an escape sequence. The ASCII characters 
\, tab, form feed, newline, and carriage return are written as \\, \t, \f \n, 
and \r, respectively. Characters less than u0020 and characters greater than 
u007E are written as uxxxx for the appropriate hexadecimal value xxxx. For the 
key, all space characters are written with a preceding \ character. For the 
element, leading space characters, but not embedded or trailing space 
characters, are written with a preceding \ character. The key and element 
characters #, !, =, and : are written with a preceding backslash to ensure that 
they are properly loaded. 

After the entries have been written, the output stream is flushed. The output 
stream remains open after this method returns. 

    out - an output stream. 
    comments - a description of the property list. 

*java.util.Properties.storeToXML(OutputStream,String)*

public synchronized void storeToXML(
  java.io.OutputStream os,
  java.lang.String comment)
  throws |java.io.IOException|
         
Emits an XML document representing all of the properties contained in this 
table. 

An invocation of this method of the form props.storeToXML(os, comment) behaves 
in exactly the same way as the invocation props.storeToXML(os, comment, 
"UTF-8");. 

    os - the output stream on which to emit the XML document. 
    comment - a description of the property list, or null if no comment is desired. 

*java.util.Properties.storeToXML(OutputStream,String,String)*

public synchronized void storeToXML(
  java.io.OutputStream os,
  java.lang.String comment,
  java.lang.String encoding)
  throws |java.io.IOException|
         
Emits an XML document representing all of the properties contained in this 
table, using the specified encoding. 

The XML document will have the following DOCTYPE declaration: 

<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"> 

If the specified comment is null then no comment will be stored in the 
document. 

The specified stream remains open after this method returns. 

    os - the output stream on which to emit the XML document. 
    comment - a description of the property list, or null if no comment is desired. 



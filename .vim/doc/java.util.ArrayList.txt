*java.util.ArrayList* *ArrayList* Resizable-array implementation of the List int

public class ArrayList
  extends    |java.util.AbstractList|
  implements |java.util.List|
             |java.util.RandomAccess|
             |java.lang.Cloneable|
             |java.io.Serializable|

|java.util.ArrayList_Description|
|java.util.ArrayList_Fields|
|java.util.ArrayList_Constructors|
|java.util.ArrayList_Methods|

================================================================================

*java.util.ArrayList_Constructors*
|java.util.ArrayList()|Constructs an empty list with an initial capacity of ten
|java.util.ArrayList(Collection)|Constructs a list containing the elements of t
|java.util.ArrayList(int)|Constructs an empty list with the specified initial c

*java.util.ArrayList_Methods*
|java.util.ArrayList.add(E)|Appends the specified element to the end of this li
|java.util.ArrayList.add(int,E)|Inserts the specified element at the specified 
|java.util.ArrayList.addAll(Collection)|Appends all of the elements in the spec
|java.util.ArrayList.addAll(int,Collection)|Inserts all of the elements in the 
|java.util.ArrayList.clear()|Removes all of the elements from this list.
|java.util.ArrayList.clone()|Returns a shallow copy of this ArrayList instance.
|java.util.ArrayList.contains(Object)|Returns true if this list contains the sp
|java.util.ArrayList.ensureCapacity(int)|Increases the capacity of this ArrayLi
|java.util.ArrayList.get(int)|Returns the element at the specified position in 
|java.util.ArrayList.indexOf(Object)|Searches for the first occurence of the gi
|java.util.ArrayList.isEmpty()|Tests if this list has no elements.
|java.util.ArrayList.lastIndexOf(Object)|Returns the index of the last occurren
|java.util.ArrayList.remove(int)|Removes the element at the specified position 
|java.util.ArrayList.remove(Object)|Removes a single instance of the specified 
|java.util.ArrayList.removeRange(int,int)|Removes from this List all of the ele
|java.util.ArrayList.set(int,E)|Replaces the element at the specified position 
|java.util.ArrayList.size()|Returns the number of elements in this list.
|java.util.ArrayList.toArray()|Returns an array containing all of the elements 
|java.util.ArrayList.toArray(T[])|Returns an array containing all of the elemen
|java.util.ArrayList.trimToSize()|Trims the capacity of this ArrayList instance

*java.util.ArrayList_Description*

Resizable-array implementation of the List interface. Implements all optional 
list operations, and permits all elements, including null. In addition to 
implementing the List interface, this class provides methods to manipulate the 
size of the array that is used internally to store the list. (This class is 
roughly equivalent to Vector, except that it is unsynchronized.) 

The size, isEmpty, get, set, iterator, and listIterator operations run in 
constant time. The add operation runs in amortized constant time, that is, 
adding n elements requires O(n) time. All of the other operations run in linear 
time (roughly speaking). The constant factor is low compared to that for the 
LinkedList implementation. 

Each ArrayList instance has a capacity. The capacity is the size of the array 
used to store the elements in the list. It is always at least as large as the 
list size. As elements are added to an ArrayList, its capacity grows 
automatically. The details of the growth policy are not specified beyond the 
fact that adding an element has constant amortized time cost. 

An application can increase the capacity of an ArrayList instance before adding 
a large number of elements using the ensureCapacity operation. This may reduce 
the amount of incremental reallocation. 

Note that this implementation is not synchronized. If multiple threads access 
an ArrayList instance concurrently, and at least one of the threads modifies 
the list structurally, it must be synchronized externally. (A structural 
modification is any operation that adds or deletes one or more elements, or 
explicitly resizes the backing array; merely setting the value of an element is 
not a structural modification.) This is typically accomplished by synchronizing 
on some object that naturally encapsulates the list. If no such object exists, 
the list should be "wrapped" using the Collections.synchronizedList method. 
This is best done at creation time, to prevent accidental unsynchronized access 
to the list: 

List list = Collections.synchronizedList(new ArrayList(...)); 

The iterators returned by this class's iterator and listIterator methods are 
fail-fast: if list is structurally modified at any time after the iterator is 
created, in any way except through the iterator's own remove or add methods, 
the iterator will throw a ConcurrentModificationException. Thus, in the face of 
concurrent modification, the iterator fails quickly and cleanly, rather than 
risking arbitrary, non-deterministic behavior at an undetermined time in the 
future. 

Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, 
generally speaking, impossible to make any hard guarantees in the presence of 
unsynchronized concurrent modification. Fail-fast iterators throw 
ConcurrentModificationException on a best-effort basis. Therefore, it would be 
wrong to write a program that depended on this exception for its correctness: 
the fail-fast behavior of iterators should be used only to detect bugs. 

This class is a member of the <a href="/../guide/collections/index.html"> Java 
Collections Framework. 


*java.util.ArrayList()*

public ArrayList()

Constructs an empty list with an initial capacity of ten. 


*java.util.ArrayList(Collection)*

public ArrayList(java.util.Collection c)

Constructs a list containing the elements of the specified collection, in the 
order they are returned by the collection's iterator. The ArrayList instance 
has an initial capacity of 110% the size of the specified collection. 

    c - the collection whose elements are to be placed into this list. 

*java.util.ArrayList(int)*

public ArrayList(int initialCapacity)

Constructs an empty list with the specified initial capacity. 

    initialCapacity - the initial capacity of the list. 

*java.util.ArrayList.add(E)*

public boolean add(java.lang.Object o)

Appends the specified element to the end of this list. 

    o - element to be appended to this list. 

    Returns: true (as per the general contract of Collection.add). 
*java.util.ArrayList.add(int,E)*

public void add(
  int index,
  java.lang.Object element)

Inserts the specified element at the specified position in this list. Shifts 
the element currently at that position (if any) and any subsequent elements to 
the right (adds one to their indices). 

    index - index at which the specified element is to be inserted. 
    element - element to be inserted. 

*java.util.ArrayList.addAll(Collection)*

public boolean addAll(java.util.Collection c)

Appends all of the elements in the specified Collection to the end of this 
list, in the order that they are returned by the specified Collection's 
Iterator. The behavior of this operation is undefined if the specified 
Collection is modified while the operation is in progress. (This implies that 
the behavior of this call is undefined if the specified Collection is this 
list, and this list is nonempty.) 

    c - the elements to be inserted into this list. 

    Returns: true if this list changed as a result of the call. 
*java.util.ArrayList.addAll(int,Collection)*

public boolean addAll(
  int index,
  java.util.Collection c)

Inserts all of the elements in the specified Collection into this list, 
starting at the specified position. Shifts the element currently at that 
position (if any) and any subsequent elements to the right (increases their 
indices). The new elements will appear in the list in the order that they are 
returned by the specified Collection's iterator. 

    index - index at which to insert first element from the specified collection. 
    c - elements to be inserted into this list. 

    Returns: true if this list changed as a result of the call. 
*java.util.ArrayList.clear()*

public void clear()

Removes all of the elements from this list. The list will be empty after this 
call returns. 


*java.util.ArrayList.clone()*

public |java.lang.Object| clone()

Returns a shallow copy of this ArrayList instance. (The elements themselves are 
not copied.) 


    Returns: a clone of this ArrayList instance. 
*java.util.ArrayList.contains(Object)*

public boolean contains(java.lang.Object elem)

Returns true if this list contains the specified element. 

    elem - element whose presence in this List is to be tested. 

    Returns: true if the specified element is present; false otherwise. 
*java.util.ArrayList.ensureCapacity(int)*

public void ensureCapacity(int minCapacity)

Increases the capacity of this ArrayList instance, if necessary, to ensure that 
it can hold at least the number of elements specified by the minimum capacity 
argument. 

    minCapacity - the desired minimum capacity. 

*java.util.ArrayList.get(int)*

public |java.lang.Object| get(int index)

Returns the element at the specified position in this list. 

    index - index of element to return. 

    Returns: the element at the specified position in this list. 
*java.util.ArrayList.indexOf(Object)*

public int indexOf(java.lang.Object elem)

Searches for the first occurence of the given argument, testing for equality 
using the equals method. 

    elem - an object. 

    Returns: the index of the first occurrence of the argument in this list; returns -1 if 
             the object is not found. 
*java.util.ArrayList.isEmpty()*

public boolean isEmpty()

Tests if this list has no elements. 


    Returns: true if this list has no elements; false otherwise. 
*java.util.ArrayList.lastIndexOf(Object)*

public int lastIndexOf(java.lang.Object elem)

Returns the index of the last occurrence of the specified object in this list. 

    elem - the desired element. 

    Returns: the index of the last occurrence of the specified object in this list; returns 
             -1 if the object is not found. 
*java.util.ArrayList.remove(int)*

public |java.lang.Object| remove(int index)

Removes the element at the specified position in this list. Shifts any 
subsequent elements to the left (subtracts one from their indices). 

    index - the index of the element to removed. 

    Returns: the element that was removed from the list. 
*java.util.ArrayList.remove(Object)*

public boolean remove(java.lang.Object o)

Removes a single instance of the specified element from this list, if it is 
present (optional operation). More formally, removes an element e such that 
(o==null ? e==null : o.equals(e)), if the list contains one or more such 
elements. Returns true if the list contained the specified element (or 
equivalently, if the list changed as a result of the call). 

    o - element to be removed from this list, if present. 

    Returns: true if the list contained the specified element. 
*java.util.ArrayList.removeRange(int,int)*

protected void removeRange(
  int fromIndex,
  int toIndex)

Removes from this List all of the elements whose index is between fromIndex, 
inclusive and toIndex, exclusive. Shifts any succeeding elements to the left 
(reduces their index). This call shortens the list by (toIndex - fromIndex) 
elements. (If toIndex==fromIndex, this operation has no effect.) 

    fromIndex - index of first element to be removed. 
    toIndex - index after last element to be removed. 

*java.util.ArrayList.set(int,E)*

public |java.lang.Object| set(
  int index,
  java.lang.Object element)

Replaces the element at the specified position in this list with the specified 
element. 

    index - index of element to replace. 
    element - element to be stored at the specified position. 

    Returns: the element previously at the specified position. 
*java.util.ArrayList.size()*

public int size()

Returns the number of elements in this list. 


    Returns: the number of elements in this list. 
*java.util.ArrayList.toArray()*

public |java.lang.Object| toArray()

Returns an array containing all of the elements in this list in the correct 
order. 


    Returns: an array containing all of the elements in this list in the correct order. 
*java.util.ArrayList.toArray(T[])*

public |java.lang.Object| toArray(java.lang.Object[] a)

Returns an array containing all of the elements in this list in the correct 
order; the runtime type of the returned array is that of the specified array. 
If the list fits in the specified array, it is returned therein. Otherwise, a 
new array is allocated with the runtime type of the specified array and the 
size of this list. 

If the list fits in the specified array with room to spare (i.e., the array has 
more elements than the list), the element in the array immediately following 
the end of the collection is set to null. This is useful in determining the 
length of the list only if the caller knows that the list does not contain any 
null elements. 

    a - the array into which the elements of the list are to be stored, if it is big 
       enough; otherwise, a new array of the same runtime type is allocated for 
       this purpose. 

    Returns: an array containing the elements of the list. 
*java.util.ArrayList.trimToSize()*

public void trimToSize()

Trims the capacity of this ArrayList instance to be the list's current size. An 
application can use this operation to minimize the storage of an ArrayList 
instance. 




*javax.persistence.EntityTransaction* *EntityTransaction* The EntityTransaction 

public interface interface EntityTransaction


|javax.persistence.EntityTransaction_Description|
|javax.persistence.EntityTransaction_Fields|
|javax.persistence.EntityTransaction_Constructors|
|javax.persistence.EntityTransaction_Methods|

================================================================================

*javax.persistence.EntityTransaction_Methods*
|javax.persistence.EntityTransaction.begin()|Start the resource transaction.
|javax.persistence.EntityTransaction.commit()|Commit the current transaction, w
|javax.persistence.EntityTransaction.getRollbackOnly()|Determine whether the cu
|javax.persistence.EntityTransaction.isActive()|Indicate whether a transaction 
|javax.persistence.EntityTransaction.rollback()|Roll back the current transacti
|javax.persistence.EntityTransaction.setRollbackOnly()|Mark the current transac

*javax.persistence.EntityTransaction_Description*

The EntityTransaction interface is used to control resource transactions on 
resource-local entity managers. The 
EntityManager.getTransaction()(|javax.persistence.EntityManager|) method 
returns the EntityTransaction interface. 



*javax.persistence.EntityTransaction.begin()*

public void begin()

Start the resource transaction. 



*javax.persistence.EntityTransaction.commit()*

public void commit()

Commit the current transaction, writing any unflushed changes to the database. 



*javax.persistence.EntityTransaction.getRollbackOnly()*

public boolean getRollbackOnly()

Determine whether the current transaction has been marked for rollback. 



*javax.persistence.EntityTransaction.isActive()*

public boolean isActive()

Indicate whether a transaction is in progress. 



*javax.persistence.EntityTransaction.rollback()*

public void rollback()

Roll back the current transaction 



*javax.persistence.EntityTransaction.setRollbackOnly()*

public void setRollbackOnly()

Mark the current transaction so that the only possible outcome of the 
transaction is for the transaction to be rolled back. 





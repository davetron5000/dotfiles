*javax.swing.JLayeredPane* *JLayeredPane* JLayeredPane adds depth to a JFC/Swing

public class JLayeredPane
  extends    |javax.swing.JComponent|
  implements |javax.accessibility.Accessible|

|javax.swing.JLayeredPane_Description|
|javax.swing.JLayeredPane_Fields|
|javax.swing.JLayeredPane_Constructors|
|javax.swing.JLayeredPane_Methods|

================================================================================

*javax.swing.JLayeredPane_Fields*
|java.lang.Integer_javax.swing.JLayeredPane.DEFAULT_LAYER|
|java.lang.Integer_javax.swing.JLayeredPane.DRAG_LAYER|
|java.lang.Integer_javax.swing.JLayeredPane.FRAME_CONTENT_LAYER|
|java.lang.String_javax.swing.JLayeredPane.LAYER_PROPERTY|
|java.lang.Integer_javax.swing.JLayeredPane.MODAL_LAYER|
|java.lang.Integer_javax.swing.JLayeredPane.PALETTE_LAYER|
|java.lang.Integer_javax.swing.JLayeredPane.POPUP_LAYER|

*javax.swing.JLayeredPane_Constructors*
|javax.swing.JLayeredPane()|Create a new JLayeredPane

*javax.swing.JLayeredPane_Methods*
|javax.swing.JLayeredPane.addImpl(Component,Object,int)|
|javax.swing.JLayeredPane.getAccessibleContext()|Gets the AccessibleContext ass
|javax.swing.JLayeredPane.getComponentCountInLayer(int)|Returns the number of c
|javax.swing.JLayeredPane.getComponentsInLayer(int)|Returns an array of the com
|javax.swing.JLayeredPane.getComponentToLayer()|Returns the hashtable that maps
|javax.swing.JLayeredPane.getIndexOf(Component)|Returns the index of the specif
|javax.swing.JLayeredPane.getLayer(Component)|Returns the layer attribute for t
|javax.swing.JLayeredPane.getLayer(JComponent)|Gets the layer property for a JC
|javax.swing.JLayeredPane.getLayeredPaneAbove(Component)|Convenience method tha
|javax.swing.JLayeredPane.getObjectForLayer(int)|Returns the Integer object ass
|javax.swing.JLayeredPane.getPosition(Component)|Get the relative position of t
|javax.swing.JLayeredPane.highestLayer()|Returns the highest layer value from a
|javax.swing.JLayeredPane.insertIndexForLayer(int,int)|Primitive method that de
|javax.swing.JLayeredPane.isOptimizedDrawingEnabled()|Returns false if componen
|javax.swing.JLayeredPane.lowestLayer()|Returns the lowest layer value from all
|javax.swing.JLayeredPane.moveToBack(Component)|Moves the component to the bott
|javax.swing.JLayeredPane.moveToFront(Component)|Moves the component to the top
|javax.swing.JLayeredPane.paint(Graphics)|Paints this JLayeredPane within the s
|javax.swing.JLayeredPane.paramString()|Returns a string representation of this
|javax.swing.JLayeredPane.putLayer(JComponent,int)|Sets the layer property on a
|javax.swing.JLayeredPane.remove(int)|Remove the indexed component from this pa
|javax.swing.JLayeredPane.removeAll()|Removes all the components from this cont
|javax.swing.JLayeredPane.setLayer(Component,int)|Sets the layer attribute on t
|javax.swing.JLayeredPane.setLayer(Component,int,int)|Sets the layer attribute 
|javax.swing.JLayeredPane.setPosition(Component,int)|Moves the component to pos

*javax.swing.JLayeredPane_Description*

JLayeredPane adds depth to a JFC/Swing container, allowing components to 
overlap each other when needed. An Integer object specifies each component's 
depth in the container, where higher-numbered components sit on top of other 
components. For task-oriented documentation and examples of using layered panes 
see How to Use a Layered Pane, a section in The Java Tutorial. 







For convenience, JLayeredPane divides the depth-range into several different 
layers. Putting a component into one of those layers makes it easy to ensure 
that components overlap properly, without having to worry about specifying 
numbers for specific depths: 

DEFAULT_LAYER The standard layer, where most components go. This the bottommost 
layer. PALETTE_LAYER The palette layer sits over the default layer. Useful for 
floating toolbars and palettes, so they can be positioned above other 
components. MODAL_LAYER The layer used for modal dialogs. They will appear on 
top of any toolbars, palettes, or standard components in the container. 
POPUP_LAYER The popup layer displays above dialogs. That way, the popup windows 
associated with combo boxes, tooltips, and other help text will appear above 
the component, palette, or dialog that generated them. DRAG_LAYER When dragging 
a component, reassigning it to the drag layer ensures that it is positioned 
over every other component in the container. When finished dragging, it can be 
reassigned to its normal layer. 

The JLayeredPane methods moveToFront(Component), moveToBack(Component) and 
setPosition can be used to reposition a component within its layer. The 
setLayer method can also be used to change the component's current layer. 

Details JLayeredPane manages its list of children like Container, but allows 
for the definition of a several layers within itself. Children in the same 
layer are managed exactly like the normal Container object, with the added 
feature that when children components overlap, children in higher layers 
display above the children in lower layers. 

Each layer is a distinct integer number. The layer attribute can be set on a 
Component by passing an Integer object during the add call. For example: 

layeredPane.add(child, JLayeredPane.DEFAULT_LAYER); or layeredPane.add(child, 
new Integer(10)); 

The layer attribute can also be set on a Component by calling 

layeredPaneParent.setLayer(child, 10) 

on the JLayeredPane that is the parent of component. The layer should be set 
before adding the child to the parent. 

Higher number layers display above lower number layers. So, using numbers for 
the layers and letters for individual components, a representative list order 
would look like this: 

5a, 5b, 5c, 2a, 2b, 2c, 1a 

where the leftmost components are closest to the top of the display. 

A component can be moved to the top or bottom position within its layer by 
calling moveToFront or moveToBack. 

The position of a component within a layer can also be specified directly. 
Valid positions range from 0 up to one less than the number of components in 
that layer. A value of -1 indicates the bottommost position. A value of 0 
indicates the topmost position. Unlike layer numbers, higher position values 
are lower in the display. 

Note: This sequence (defined by java.awt.Container) is the reverse of the layer 
numbering sequence. Usually though, you will use moveToFront, moveToBack, and 
setLayer. 

Here are some examples using the method add(Component, layer, position): 
Calling add(5x, 5, -1) results in: 

5a, 5b, 5c, 5x, 2a, 2b, 2c, 1a 

Calling add(5z, 5, 2) results in: 

5a, 5b, 5z, 5c, 5x, 2a, 2b, 2c, 1a 

Calling add(3a, 3, 7) results in: 

5a, 5b, 5z, 5c, 5x, 3a, 2a, 2b, 2c, 1a 

Using normal paint/event mechanics results in 1a appearing at the bottom and 5a 
being above all other components. 

Note: that these layers are simply a logical construct and LayoutManagers will 
affect all child components of this container without regard for layer 
settings. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.Integer_javax.swing.JLayeredPane.DEFAULT_LAYER*

JLayeredPane adds depth to a JFC/Swing container, allowing components to 
overlap each other when needed. An Integer object specifies each component's 
depth in the container, where higher-numbered components sit on top of other 
components. For task-oriented documentation and examples of using layered panes 
see How to Use a Layered Pane, a section in The Java Tutorial. 







For convenience, JLayeredPane divides the depth-range into several different 
layers. Putting a component into one of those layers makes it easy to ensure 
that components overlap properly, without having to worry about specifying 
numbers for specific depths: 

DEFAULT_LAYER The standard layer, where most components go. This the bottommost 
layer. PALETTE_LAYER The palette layer sits over the default layer. Useful for 
floating toolbars and palettes, so they can be positioned above other 
components. MODAL_LAYER The layer used for modal dialogs. They will appear on 
top of any toolbars, palettes, or standard components in the container. 
POPUP_LAYER The popup layer displays above dialogs. That way, the popup windows 
associated with combo boxes, tooltips, and other help text will appear above 
the component, palette, or dialog that generated them. DRAG_LAYER When dragging 
a component, reassigning it to the drag layer ensures that it is positioned 
over every other component in the container. When finished dragging, it can be 
reassigned to its normal layer. 

The JLayeredPane methods moveToFront(Component), moveToBack(Component) and 
setPosition can be used to reposition a component within its layer. The 
setLayer method can also be used to change the component's current layer. 

Details JLayeredPane manages its list of children like Container, but allows 
for the definition of a several layers within itself. Children in the same 
layer are managed exactly like the normal Container object, with the added 
feature that when children components overlap, children in higher layers 
display above the children in lower layers. 

Each layer is a distinct integer number. The layer attribute can be set on a 
Component by passing an Integer object during the add call. For example: 

layeredPane.add(child, JLayeredPane.DEFAULT_LAYER); or layeredPane.add(child, 
new Integer(10)); 

The layer attribute can also be set on a Component by calling 

layeredPaneParent.setLayer(child, 10) 

on the JLayeredPane that is the parent of component. The layer should be set 
before adding the child to the parent. 

Higher number layers display above lower number layers. So, using numbers for 
the layers and letters for individual components, a representative list order 
would look like this: 

5a, 5b, 5c, 2a, 2b, 2c, 1a 

where the leftmost components are closest to the top of the display. 

A component can be moved to the top or bottom position within its layer by 
calling moveToFront or moveToBack. 

The position of a component within a layer can also be specified directly. 
Valid positions range from 0 up to one less than the number of components in 
that layer. A value of -1 indicates the bottommost position. A value of 0 
indicates the topmost position. Unlike layer numbers, higher position values 
are lower in the display. 

Note: This sequence (defined by java.awt.Container) is the reverse of the layer 
numbering sequence. Usually though, you will use moveToFront, moveToBack, and 
setLayer. 

Here are some examples using the method add(Component, layer, position): 
Calling add(5x, 5, -1) results in: 

5a, 5b, 5c, 5x, 2a, 2b, 2c, 1a 

Calling add(5z, 5, 2) results in: 

5a, 5b, 5z, 5c, 5x, 2a, 2b, 2c, 1a 

Calling add(3a, 3, 7) results in: 

5a, 5b, 5z, 5c, 5x, 3a, 2a, 2b, 2c, 1a 

Using normal paint/event mechanics results in 1a appearing at the bottom and 5a 
being above all other components. 

Note: that these layers are simply a logical construct and LayoutManagers will 
affect all child components of this container without regard for layer 
settings. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.Integer_javax.swing.JLayeredPane.DRAG_LAYER*

JLayeredPane adds depth to a JFC/Swing container, allowing components to 
overlap each other when needed. An Integer object specifies each component's 
depth in the container, where higher-numbered components sit on top of other 
components. For task-oriented documentation and examples of using layered panes 
see How to Use a Layered Pane, a section in The Java Tutorial. 







For convenience, JLayeredPane divides the depth-range into several different 
layers. Putting a component into one of those layers makes it easy to ensure 
that components overlap properly, without having to worry about specifying 
numbers for specific depths: 

DEFAULT_LAYER The standard layer, where most components go. This the bottommost 
layer. PALETTE_LAYER The palette layer sits over the default layer. Useful for 
floating toolbars and palettes, so they can be positioned above other 
components. MODAL_LAYER The layer used for modal dialogs. They will appear on 
top of any toolbars, palettes, or standard components in the container. 
POPUP_LAYER The popup layer displays above dialogs. That way, the popup windows 
associated with combo boxes, tooltips, and other help text will appear above 
the component, palette, or dialog that generated them. DRAG_LAYER When dragging 
a component, reassigning it to the drag layer ensures that it is positioned 
over every other component in the container. When finished dragging, it can be 
reassigned to its normal layer. 

The JLayeredPane methods moveToFront(Component), moveToBack(Component) and 
setPosition can be used to reposition a component within its layer. The 
setLayer method can also be used to change the component's current layer. 

Details JLayeredPane manages its list of children like Container, but allows 
for the definition of a several layers within itself. Children in the same 
layer are managed exactly like the normal Container object, with the added 
feature that when children components overlap, children in higher layers 
display above the children in lower layers. 

Each layer is a distinct integer number. The layer attribute can be set on a 
Component by passing an Integer object during the add call. For example: 

layeredPane.add(child, JLayeredPane.DEFAULT_LAYER); or layeredPane.add(child, 
new Integer(10)); 

The layer attribute can also be set on a Component by calling 

layeredPaneParent.setLayer(child, 10) 

on the JLayeredPane that is the parent of component. The layer should be set 
before adding the child to the parent. 

Higher number layers display above lower number layers. So, using numbers for 
the layers and letters for individual components, a representative list order 
would look like this: 

5a, 5b, 5c, 2a, 2b, 2c, 1a 

where the leftmost components are closest to the top of the display. 

A component can be moved to the top or bottom position within its layer by 
calling moveToFront or moveToBack. 

The position of a component within a layer can also be specified directly. 
Valid positions range from 0 up to one less than the number of components in 
that layer. A value of -1 indicates the bottommost position. A value of 0 
indicates the topmost position. Unlike layer numbers, higher position values 
are lower in the display. 

Note: This sequence (defined by java.awt.Container) is the reverse of the layer 
numbering sequence. Usually though, you will use moveToFront, moveToBack, and 
setLayer. 

Here are some examples using the method add(Component, layer, position): 
Calling add(5x, 5, -1) results in: 

5a, 5b, 5c, 5x, 2a, 2b, 2c, 1a 

Calling add(5z, 5, 2) results in: 

5a, 5b, 5z, 5c, 5x, 2a, 2b, 2c, 1a 

Calling add(3a, 3, 7) results in: 

5a, 5b, 5z, 5c, 5x, 3a, 2a, 2b, 2c, 1a 

Using normal paint/event mechanics results in 1a appearing at the bottom and 5a 
being above all other components. 

Note: that these layers are simply a logical construct and LayoutManagers will 
affect all child components of this container without regard for layer 
settings. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.Integer_javax.swing.JLayeredPane.FRAME_CONTENT_LAYER*

JLayeredPane adds depth to a JFC/Swing container, allowing components to 
overlap each other when needed. An Integer object specifies each component's 
depth in the container, where higher-numbered components sit on top of other 
components. For task-oriented documentation and examples of using layered panes 
see How to Use a Layered Pane, a section in The Java Tutorial. 







For convenience, JLayeredPane divides the depth-range into several different 
layers. Putting a component into one of those layers makes it easy to ensure 
that components overlap properly, without having to worry about specifying 
numbers for specific depths: 

DEFAULT_LAYER The standard layer, where most components go. This the bottommost 
layer. PALETTE_LAYER The palette layer sits over the default layer. Useful for 
floating toolbars and palettes, so they can be positioned above other 
components. MODAL_LAYER The layer used for modal dialogs. They will appear on 
top of any toolbars, palettes, or standard components in the container. 
POPUP_LAYER The popup layer displays above dialogs. That way, the popup windows 
associated with combo boxes, tooltips, and other help text will appear above 
the component, palette, or dialog that generated them. DRAG_LAYER When dragging 
a component, reassigning it to the drag layer ensures that it is positioned 
over every other component in the container. When finished dragging, it can be 
reassigned to its normal layer. 

The JLayeredPane methods moveToFront(Component), moveToBack(Component) and 
setPosition can be used to reposition a component within its layer. The 
setLayer method can also be used to change the component's current layer. 

Details JLayeredPane manages its list of children like Container, but allows 
for the definition of a several layers within itself. Children in the same 
layer are managed exactly like the normal Container object, with the added 
feature that when children components overlap, children in higher layers 
display above the children in lower layers. 

Each layer is a distinct integer number. The layer attribute can be set on a 
Component by passing an Integer object during the add call. For example: 

layeredPane.add(child, JLayeredPane.DEFAULT_LAYER); or layeredPane.add(child, 
new Integer(10)); 

The layer attribute can also be set on a Component by calling 

layeredPaneParent.setLayer(child, 10) 

on the JLayeredPane that is the parent of component. The layer should be set 
before adding the child to the parent. 

Higher number layers display above lower number layers. So, using numbers for 
the layers and letters for individual components, a representative list order 
would look like this: 

5a, 5b, 5c, 2a, 2b, 2c, 1a 

where the leftmost components are closest to the top of the display. 

A component can be moved to the top or bottom position within its layer by 
calling moveToFront or moveToBack. 

The position of a component within a layer can also be specified directly. 
Valid positions range from 0 up to one less than the number of components in 
that layer. A value of -1 indicates the bottommost position. A value of 0 
indicates the topmost position. Unlike layer numbers, higher position values 
are lower in the display. 

Note: This sequence (defined by java.awt.Container) is the reverse of the layer 
numbering sequence. Usually though, you will use moveToFront, moveToBack, and 
setLayer. 

Here are some examples using the method add(Component, layer, position): 
Calling add(5x, 5, -1) results in: 

5a, 5b, 5c, 5x, 2a, 2b, 2c, 1a 

Calling add(5z, 5, 2) results in: 

5a, 5b, 5z, 5c, 5x, 2a, 2b, 2c, 1a 

Calling add(3a, 3, 7) results in: 

5a, 5b, 5z, 5c, 5x, 3a, 2a, 2b, 2c, 1a 

Using normal paint/event mechanics results in 1a appearing at the bottom and 5a 
being above all other components. 

Note: that these layers are simply a logical construct and LayoutManagers will 
affect all child components of this container without regard for layer 
settings. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.JLayeredPane.LAYER_PROPERTY*

JLayeredPane adds depth to a JFC/Swing container, allowing components to 
overlap each other when needed. An Integer object specifies each component's 
depth in the container, where higher-numbered components sit on top of other 
components. For task-oriented documentation and examples of using layered panes 
see How to Use a Layered Pane, a section in The Java Tutorial. 







For convenience, JLayeredPane divides the depth-range into several different 
layers. Putting a component into one of those layers makes it easy to ensure 
that components overlap properly, without having to worry about specifying 
numbers for specific depths: 

DEFAULT_LAYER The standard layer, where most components go. This the bottommost 
layer. PALETTE_LAYER The palette layer sits over the default layer. Useful for 
floating toolbars and palettes, so they can be positioned above other 
components. MODAL_LAYER The layer used for modal dialogs. They will appear on 
top of any toolbars, palettes, or standard components in the container. 
POPUP_LAYER The popup layer displays above dialogs. That way, the popup windows 
associated with combo boxes, tooltips, and other help text will appear above 
the component, palette, or dialog that generated them. DRAG_LAYER When dragging 
a component, reassigning it to the drag layer ensures that it is positioned 
over every other component in the container. When finished dragging, it can be 
reassigned to its normal layer. 

The JLayeredPane methods moveToFront(Component), moveToBack(Component) and 
setPosition can be used to reposition a component within its layer. The 
setLayer method can also be used to change the component's current layer. 

Details JLayeredPane manages its list of children like Container, but allows 
for the definition of a several layers within itself. Children in the same 
layer are managed exactly like the normal Container object, with the added 
feature that when children components overlap, children in higher layers 
display above the children in lower layers. 

Each layer is a distinct integer number. The layer attribute can be set on a 
Component by passing an Integer object during the add call. For example: 

layeredPane.add(child, JLayeredPane.DEFAULT_LAYER); or layeredPane.add(child, 
new Integer(10)); 

The layer attribute can also be set on a Component by calling 

layeredPaneParent.setLayer(child, 10) 

on the JLayeredPane that is the parent of component. The layer should be set 
before adding the child to the parent. 

Higher number layers display above lower number layers. So, using numbers for 
the layers and letters for individual components, a representative list order 
would look like this: 

5a, 5b, 5c, 2a, 2b, 2c, 1a 

where the leftmost components are closest to the top of the display. 

A component can be moved to the top or bottom position within its layer by 
calling moveToFront or moveToBack. 

The position of a component within a layer can also be specified directly. 
Valid positions range from 0 up to one less than the number of components in 
that layer. A value of -1 indicates the bottommost position. A value of 0 
indicates the topmost position. Unlike layer numbers, higher position values 
are lower in the display. 

Note: This sequence (defined by java.awt.Container) is the reverse of the layer 
numbering sequence. Usually though, you will use moveToFront, moveToBack, and 
setLayer. 

Here are some examples using the method add(Component, layer, position): 
Calling add(5x, 5, -1) results in: 

5a, 5b, 5c, 5x, 2a, 2b, 2c, 1a 

Calling add(5z, 5, 2) results in: 

5a, 5b, 5z, 5c, 5x, 2a, 2b, 2c, 1a 

Calling add(3a, 3, 7) results in: 

5a, 5b, 5z, 5c, 5x, 3a, 2a, 2b, 2c, 1a 

Using normal paint/event mechanics results in 1a appearing at the bottom and 5a 
being above all other components. 

Note: that these layers are simply a logical construct and LayoutManagers will 
affect all child components of this container without regard for layer 
settings. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.Integer_javax.swing.JLayeredPane.MODAL_LAYER*

JLayeredPane adds depth to a JFC/Swing container, allowing components to 
overlap each other when needed. An Integer object specifies each component's 
depth in the container, where higher-numbered components sit on top of other 
components. For task-oriented documentation and examples of using layered panes 
see How to Use a Layered Pane, a section in The Java Tutorial. 







For convenience, JLayeredPane divides the depth-range into several different 
layers. Putting a component into one of those layers makes it easy to ensure 
that components overlap properly, without having to worry about specifying 
numbers for specific depths: 

DEFAULT_LAYER The standard layer, where most components go. This the bottommost 
layer. PALETTE_LAYER The palette layer sits over the default layer. Useful for 
floating toolbars and palettes, so they can be positioned above other 
components. MODAL_LAYER The layer used for modal dialogs. They will appear on 
top of any toolbars, palettes, or standard components in the container. 
POPUP_LAYER The popup layer displays above dialogs. That way, the popup windows 
associated with combo boxes, tooltips, and other help text will appear above 
the component, palette, or dialog that generated them. DRAG_LAYER When dragging 
a component, reassigning it to the drag layer ensures that it is positioned 
over every other component in the container. When finished dragging, it can be 
reassigned to its normal layer. 

The JLayeredPane methods moveToFront(Component), moveToBack(Component) and 
setPosition can be used to reposition a component within its layer. The 
setLayer method can also be used to change the component's current layer. 

Details JLayeredPane manages its list of children like Container, but allows 
for the definition of a several layers within itself. Children in the same 
layer are managed exactly like the normal Container object, with the added 
feature that when children components overlap, children in higher layers 
display above the children in lower layers. 

Each layer is a distinct integer number. The layer attribute can be set on a 
Component by passing an Integer object during the add call. For example: 

layeredPane.add(child, JLayeredPane.DEFAULT_LAYER); or layeredPane.add(child, 
new Integer(10)); 

The layer attribute can also be set on a Component by calling 

layeredPaneParent.setLayer(child, 10) 

on the JLayeredPane that is the parent of component. The layer should be set 
before adding the child to the parent. 

Higher number layers display above lower number layers. So, using numbers for 
the layers and letters for individual components, a representative list order 
would look like this: 

5a, 5b, 5c, 2a, 2b, 2c, 1a 

where the leftmost components are closest to the top of the display. 

A component can be moved to the top or bottom position within its layer by 
calling moveToFront or moveToBack. 

The position of a component within a layer can also be specified directly. 
Valid positions range from 0 up to one less than the number of components in 
that layer. A value of -1 indicates the bottommost position. A value of 0 
indicates the topmost position. Unlike layer numbers, higher position values 
are lower in the display. 

Note: This sequence (defined by java.awt.Container) is the reverse of the layer 
numbering sequence. Usually though, you will use moveToFront, moveToBack, and 
setLayer. 

Here are some examples using the method add(Component, layer, position): 
Calling add(5x, 5, -1) results in: 

5a, 5b, 5c, 5x, 2a, 2b, 2c, 1a 

Calling add(5z, 5, 2) results in: 

5a, 5b, 5z, 5c, 5x, 2a, 2b, 2c, 1a 

Calling add(3a, 3, 7) results in: 

5a, 5b, 5z, 5c, 5x, 3a, 2a, 2b, 2c, 1a 

Using normal paint/event mechanics results in 1a appearing at the bottom and 5a 
being above all other components. 

Note: that these layers are simply a logical construct and LayoutManagers will 
affect all child components of this container without regard for layer 
settings. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.Integer_javax.swing.JLayeredPane.PALETTE_LAYER*

JLayeredPane adds depth to a JFC/Swing container, allowing components to 
overlap each other when needed. An Integer object specifies each component's 
depth in the container, where higher-numbered components sit on top of other 
components. For task-oriented documentation and examples of using layered panes 
see How to Use a Layered Pane, a section in The Java Tutorial. 







For convenience, JLayeredPane divides the depth-range into several different 
layers. Putting a component into one of those layers makes it easy to ensure 
that components overlap properly, without having to worry about specifying 
numbers for specific depths: 

DEFAULT_LAYER The standard layer, where most components go. This the bottommost 
layer. PALETTE_LAYER The palette layer sits over the default layer. Useful for 
floating toolbars and palettes, so they can be positioned above other 
components. MODAL_LAYER The layer used for modal dialogs. They will appear on 
top of any toolbars, palettes, or standard components in the container. 
POPUP_LAYER The popup layer displays above dialogs. That way, the popup windows 
associated with combo boxes, tooltips, and other help text will appear above 
the component, palette, or dialog that generated them. DRAG_LAYER When dragging 
a component, reassigning it to the drag layer ensures that it is positioned 
over every other component in the container. When finished dragging, it can be 
reassigned to its normal layer. 

The JLayeredPane methods moveToFront(Component), moveToBack(Component) and 
setPosition can be used to reposition a component within its layer. The 
setLayer method can also be used to change the component's current layer. 

Details JLayeredPane manages its list of children like Container, but allows 
for the definition of a several layers within itself. Children in the same 
layer are managed exactly like the normal Container object, with the added 
feature that when children components overlap, children in higher layers 
display above the children in lower layers. 

Each layer is a distinct integer number. The layer attribute can be set on a 
Component by passing an Integer object during the add call. For example: 

layeredPane.add(child, JLayeredPane.DEFAULT_LAYER); or layeredPane.add(child, 
new Integer(10)); 

The layer attribute can also be set on a Component by calling 

layeredPaneParent.setLayer(child, 10) 

on the JLayeredPane that is the parent of component. The layer should be set 
before adding the child to the parent. 

Higher number layers display above lower number layers. So, using numbers for 
the layers and letters for individual components, a representative list order 
would look like this: 

5a, 5b, 5c, 2a, 2b, 2c, 1a 

where the leftmost components are closest to the top of the display. 

A component can be moved to the top or bottom position within its layer by 
calling moveToFront or moveToBack. 

The position of a component within a layer can also be specified directly. 
Valid positions range from 0 up to one less than the number of components in 
that layer. A value of -1 indicates the bottommost position. A value of 0 
indicates the topmost position. Unlike layer numbers, higher position values 
are lower in the display. 

Note: This sequence (defined by java.awt.Container) is the reverse of the layer 
numbering sequence. Usually though, you will use moveToFront, moveToBack, and 
setLayer. 

Here are some examples using the method add(Component, layer, position): 
Calling add(5x, 5, -1) results in: 

5a, 5b, 5c, 5x, 2a, 2b, 2c, 1a 

Calling add(5z, 5, 2) results in: 

5a, 5b, 5z, 5c, 5x, 2a, 2b, 2c, 1a 

Calling add(3a, 3, 7) results in: 

5a, 5b, 5z, 5c, 5x, 3a, 2a, 2b, 2c, 1a 

Using normal paint/event mechanics results in 1a appearing at the bottom and 5a 
being above all other components. 

Note: that these layers are simply a logical construct and LayoutManagers will 
affect all child components of this container without regard for layer 
settings. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.Integer_javax.swing.JLayeredPane.POPUP_LAYER*

JLayeredPane adds depth to a JFC/Swing container, allowing components to 
overlap each other when needed. An Integer object specifies each component's 
depth in the container, where higher-numbered components sit on top of other 
components. For task-oriented documentation and examples of using layered panes 
see How to Use a Layered Pane, a section in The Java Tutorial. 







For convenience, JLayeredPane divides the depth-range into several different 
layers. Putting a component into one of those layers makes it easy to ensure 
that components overlap properly, without having to worry about specifying 
numbers for specific depths: 

DEFAULT_LAYER The standard layer, where most components go. This the bottommost 
layer. PALETTE_LAYER The palette layer sits over the default layer. Useful for 
floating toolbars and palettes, so they can be positioned above other 
components. MODAL_LAYER The layer used for modal dialogs. They will appear on 
top of any toolbars, palettes, or standard components in the container. 
POPUP_LAYER The popup layer displays above dialogs. That way, the popup windows 
associated with combo boxes, tooltips, and other help text will appear above 
the component, palette, or dialog that generated them. DRAG_LAYER When dragging 
a component, reassigning it to the drag layer ensures that it is positioned 
over every other component in the container. When finished dragging, it can be 
reassigned to its normal layer. 

The JLayeredPane methods moveToFront(Component), moveToBack(Component) and 
setPosition can be used to reposition a component within its layer. The 
setLayer method can also be used to change the component's current layer. 

Details JLayeredPane manages its list of children like Container, but allows 
for the definition of a several layers within itself. Children in the same 
layer are managed exactly like the normal Container object, with the added 
feature that when children components overlap, children in higher layers 
display above the children in lower layers. 

Each layer is a distinct integer number. The layer attribute can be set on a 
Component by passing an Integer object during the add call. For example: 

layeredPane.add(child, JLayeredPane.DEFAULT_LAYER); or layeredPane.add(child, 
new Integer(10)); 

The layer attribute can also be set on a Component by calling 

layeredPaneParent.setLayer(child, 10) 

on the JLayeredPane that is the parent of component. The layer should be set 
before adding the child to the parent. 

Higher number layers display above lower number layers. So, using numbers for 
the layers and letters for individual components, a representative list order 
would look like this: 

5a, 5b, 5c, 2a, 2b, 2c, 1a 

where the leftmost components are closest to the top of the display. 

A component can be moved to the top or bottom position within its layer by 
calling moveToFront or moveToBack. 

The position of a component within a layer can also be specified directly. 
Valid positions range from 0 up to one less than the number of components in 
that layer. A value of -1 indicates the bottommost position. A value of 0 
indicates the topmost position. Unlike layer numbers, higher position values 
are lower in the display. 

Note: This sequence (defined by java.awt.Container) is the reverse of the layer 
numbering sequence. Usually though, you will use moveToFront, moveToBack, and 
setLayer. 

Here are some examples using the method add(Component, layer, position): 
Calling add(5x, 5, -1) results in: 

5a, 5b, 5c, 5x, 2a, 2b, 2c, 1a 

Calling add(5z, 5, 2) results in: 

5a, 5b, 5z, 5c, 5x, 2a, 2b, 2c, 1a 

Calling add(3a, 3, 7) results in: 

5a, 5b, 5z, 5c, 5x, 3a, 2a, 2b, 2c, 1a 

Using normal paint/event mechanics results in 1a appearing at the bottom and 5a 
being above all other components. 

Note: that these layers are simply a logical construct and LayoutManagers will 
affect all child components of this container without regard for layer 
settings. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.JLayeredPane()*

public JLayeredPane()

Create a new JLayeredPane 


*javax.swing.JLayeredPane.addImpl(Component,Object,int)*

protected void addImpl(
  java.awt.Component comp,
  java.lang.Object constraints,
  int index)




*javax.swing.JLayeredPane.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JLayeredPane. For layered 
panes, the AccessibleContext takes the form of an AccessibleJLayeredPane. A new 
AccessibleJLayeredPane instance is created if necessary. 


    Returns: an AccessibleJLayeredPane that serves as the AccessibleContext of this 
             JLayeredPane 
*javax.swing.JLayeredPane.getComponentCountInLayer(int)*

public int getComponentCountInLayer(int layer)

Returns the number of children currently in the specified layer. 

    layer - an int specifying the layer to check 

    Returns: an int specifying the number of components in that layer 
*javax.swing.JLayeredPane.getComponentsInLayer(int)*

public |java.awt.Component| getComponentsInLayer(int layer)

Returns an array of the components in the specified layer. 

    layer - an int specifying the layer to check 

    Returns: an array of Components contained in that layer 
*javax.swing.JLayeredPane.getComponentToLayer()*

protected |java.util.Hashtable| getComponentToLayer()

Returns the hashtable that maps components to layers. 


    Returns: the Hashtable used to map components to their layers 
*javax.swing.JLayeredPane.getIndexOf(Component)*

public int getIndexOf(java.awt.Component c)

Returns the index of the specified Component. This is the absolute index, 
ignoring layers. Index numbers, like position numbers, have the topmost 
component at index zero. Larger numbers are closer to the bottom. 

    c - the Component to check 

    Returns: an int specifying the component's index 
*javax.swing.JLayeredPane.getLayer(Component)*

public int getLayer(java.awt.Component c)

Returns the layer attribute for the specified Component. 

    c - the Component to check 

    Returns: an int specifying the component's current layer 
*javax.swing.JLayeredPane.getLayer(JComponent)*

public static int getLayer(javax.swing.JComponent c)

Gets the layer property for a JComponent, it does not cause any side effects 
like setLayer(). (painting, add/remove, etc) Normally you should use the 
instance method getLayer(). 

    c - the JComponent to check 

    Returns: an int specifying the component's layer 
*javax.swing.JLayeredPane.getLayeredPaneAbove(Component)*

public static |javax.swing.JLayeredPane| getLayeredPaneAbove(java.awt.Component c)

Convenience method that returns the first JLayeredPane which contains the 
specified component. Note that all JFrames have a JLayeredPane at their root, 
so any component in a JFrame will have a JLayeredPane parent. 

    c - the Component to check 

    Returns: the JLayeredPane that contains the component, or null if no JLayeredPane is 
             found in the component hierarchy 
*javax.swing.JLayeredPane.getObjectForLayer(int)*

protected |java.lang.Integer| getObjectForLayer(int layer)

Returns the Integer object associated with a specified layer. 

    layer - an int specifying the layer 

    Returns: an Integer object for that layer 
*javax.swing.JLayeredPane.getPosition(Component)*

public int getPosition(java.awt.Component c)

Get the relative position of the component within its layer. 

    c - the Component to check 

    Returns: an int giving the component's position, where 0 is the topmost position and the 
             highest index value = the count count of components at that layer, 
             minus 1 
*javax.swing.JLayeredPane.highestLayer()*

public int highestLayer()

Returns the highest layer value from all current children. Returns 0 if there 
are no children. 


    Returns: an int indicating the layer of the topmost component in the pane, or zero if 
             there are no children 
*javax.swing.JLayeredPane.insertIndexForLayer(int,int)*

protected int insertIndexForLayer(
  int layer,
  int position)

Primitive method that determines the proper location to insert a new child 
based on layer and position requests. 

    layer - an int specifying the layer 
    position - an int specifying the position within the layer 

    Returns: an int giving the (absolute) insertion-index 
*javax.swing.JLayeredPane.isOptimizedDrawingEnabled()*

public boolean isOptimizedDrawingEnabled()

Returns false if components in the pane can overlap, which makes optimized 
drawing impossible. Otherwise, returns true. 


    Returns: false if components can overlap, else true 
*javax.swing.JLayeredPane.lowestLayer()*

public int lowestLayer()

Returns the lowest layer value from all current children. Returns 0 if there 
are no children. 


    Returns: an int indicating the layer of the bottommost component in the pane, or zero if 
             there are no children 
*javax.swing.JLayeredPane.moveToBack(Component)*

public void moveToBack(java.awt.Component c)

Moves the component to the bottom of the components in its current layer 
(position -1). 

    c - the Component to move 

*javax.swing.JLayeredPane.moveToFront(Component)*

public void moveToFront(java.awt.Component c)

Moves the component to the top of the components in its current layer (position 
0). 

    c - the Component to move 

*javax.swing.JLayeredPane.paint(Graphics)*

public void paint(java.awt.Graphics g)

Paints this JLayeredPane within the specified graphics context. 

    g - the Graphics context within which to paint 

*javax.swing.JLayeredPane.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JLayeredPane. This method is intended 
to be used only for debugging purposes, and the content and format of the 
returned string may vary between implementations. The returned string may be 
empty but may not be null. 


    Returns: a string representation of this JLayeredPane. 
*javax.swing.JLayeredPane.putLayer(JComponent,int)*

public static void putLayer(
  javax.swing.JComponent c,
  int layer)

Sets the layer property on a JComponent. This method does not cause any side 
effects like setLayer() (painting, add/remove, etc). Normally you should use 
the instance method setLayer(), in order to get the desired side-effects (like 
repainting). 

    c - the JComponent to move 
    layer - an int specifying the layer to move it to 

*javax.swing.JLayeredPane.remove(int)*

public void remove(int index)

Remove the indexed component from this pane. This is the absolute index, 
ignoring layers. 

    index - an int specifying the component to remove 

*javax.swing.JLayeredPane.removeAll()*

public void removeAll()

Removes all the components from this container. 


*javax.swing.JLayeredPane.setLayer(Component,int)*

public void setLayer(
  java.awt.Component c,
  int layer)

Sets the layer attribute on the specified component, making it the bottommost 
component in that layer. Should be called before adding to parent. 

    c - the Component to set the layer for 
    layer - an int specifying the layer to set, where lower numbers are closer to the 
       bottom 

*javax.swing.JLayeredPane.setLayer(Component,int,int)*

public void setLayer(
  java.awt.Component c,
  int layer,
  int position)

Sets the layer attribute for the specified component and also sets its position 
within that layer. 

    c - the Component to set the layer for 
    layer - an int specifying the layer to set, where lower numbers are closer to the 
       bottom 
    position - an int specifying the position within the layer, where 0 is the topmost 
       position and -1 is the bottommost position 

*javax.swing.JLayeredPane.setPosition(Component,int)*

public void setPosition(
  java.awt.Component c,
  int position)

Moves the component to position within its current layer, where 0 is the 
topmost position within the layer and -1 is the bottommost position. 

Note: Position numbering is defined by java.awt.Container, and is the opposite 
of layer numbering. Lower position numbers are closer to the top (0 is 
topmost), and higher position numbers are closer to the bottom. 

    c - the Component to move 
    position - an int in the range -1..N-1, where N is the number of components in the 
       component's current layer 



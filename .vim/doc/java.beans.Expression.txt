*java.beans.Expression* *Expression* An Expression object represents a primitive

public class Expression
  extends    |java.beans.Statement|

|java.beans.Expression_Description|
|java.beans.Expression_Fields|
|java.beans.Expression_Constructors|
|java.beans.Expression_Methods|

================================================================================

*java.beans.Expression_Constructors*
|java.beans.Expression(Object,Object,String,Object[])|Creates a new Expression 
|java.beans.Expression(Object,String,Object[])|Creates a new Statement object w

*java.beans.Expression_Methods*
|java.beans.Expression.getValue()|If the value property of this instance is not
|java.beans.Expression.setValue(Object)|Sets the value of this expression to va
|java.beans.Expression.toString()|Prints the value of this expression using a J

*java.beans.Expression_Description*

An Expression object represents a primitive expression in which a single method 
is applied to a target and a set of arguments to return a result - as in 
"a.getFoo()". 

In addition to the properties of the super class, the Expression object 
provides a value which is the object returned when this expression is 
evaluated. The return value is typically not provided by the caller and is 
instead computed by dynamically finding the method and invoking it when the 
first call to getValue is made. 


*java.beans.Expression(Object,Object,String,Object[])*

public Expression(
  java.lang.Object value,
  java.lang.Object target,
  java.lang.String methodName,
  java.lang.Object[] arguments)

Creates a new Expression object for a method that returns a result. The result 
will never be calculated however, since this constructor uses the value 
parameter to set the value property by calling the setValue method. 

    value - The value of this expression. 
    target - The target of this expression. 
    methodName - The methodName of this expression. 
    arguments - The arguments of this expression. If null then an empty array will be used. 

*java.beans.Expression(Object,String,Object[])*

public Expression(
  java.lang.Object target,
  java.lang.String methodName,
  java.lang.Object[] arguments)

Creates a new Statement object with a target, methodName and arguments as per 
the parameters. 

    target - The target of this expression. 
    methodName - The methodName of this expression. 
    arguments - The arguments of this expression. If null then an empty array will be used. 

*java.beans.Expression.getValue()*

public |java.lang.Object| getValue()
  throws |java.lang.Exception|
         
If the value property of this instance is not already set, this method 
dynamically finds the method with the specified methodName on this target with 
these arguments and calls it. The result of the method invocation is first 
copied into the value property of this expression and then returned as the 
result of getValue. If the value property was already set, either by a call to 
setValue or a previous call to getValue then the value property is returned 
without either looking up or calling the method. 

The value property of an Expression is set to a unique private (non-null) value 
by default and this value is used as an internal indication that the method has 
not yet been called. A return value of null replaces this default value in the 
same way that any other value would, ensuring that expressions are never 
evaluated more than once. 

See the excecute method for details on how methods are chosen using the dynamic 
types of the target and arguments. 


    Returns: The result of applying this method to these arguments. 
*java.beans.Expression.setValue(Object)*

public void setValue(java.lang.Object value)

Sets the value of this expression to value. This value will be returned by the 
getValue method without calling the method associated with this expression. 

    value - The value of this expression. 

*java.beans.Expression.toString()*

public |java.lang.String| toString()

Prints the value of this expression using a Java-style syntax. 




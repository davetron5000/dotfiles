*java.lang.management.ThreadInfo* *ThreadInfo* Thread information.

public class ThreadInfo
  extends    |java.lang.Object|

|java.lang.management.ThreadInfo_Description|
|java.lang.management.ThreadInfo_Fields|
|java.lang.management.ThreadInfo_Constructors|
|java.lang.management.ThreadInfo_Methods|

================================================================================

*java.lang.management.ThreadInfo_Methods*
|java.lang.management.ThreadInfo.from(CompositeData)|Returns a ThreadInfo objec
|java.lang.management.ThreadInfo.getBlockedCount()|Returns the total number of 
|java.lang.management.ThreadInfo.getBlockedTime()|Returns the approximate accum
|java.lang.management.ThreadInfo.getLockName()|Returns the string representatio
|java.lang.management.ThreadInfo.getLockOwnerId()|Returns the ID of the thread 
|java.lang.management.ThreadInfo.getLockOwnerName()|Returns the name of the thr
|java.lang.management.ThreadInfo.getStackTrace()|Returns the stack trace of the
|java.lang.management.ThreadInfo.getThreadId()|Returns the ID of the thread ass
|java.lang.management.ThreadInfo.getThreadName()|Returns the name of the thread
|java.lang.management.ThreadInfo.getThreadState()|Returns the state of the thre
|java.lang.management.ThreadInfo.getWaitedCount()|Returns the total number of t
|java.lang.management.ThreadInfo.getWaitedTime()|Returns the approximate accumu
|java.lang.management.ThreadInfo.isInNative()|Tests if the thread associated wi
|java.lang.management.ThreadInfo.isSuspended()|Tests if the thread associated w
|java.lang.management.ThreadInfo.toString()|Returns a string representation of 

*java.lang.management.ThreadInfo_Description*

Thread information. ThreadInfo contains the information about a thread 
including: General thread information 

Thread ID. Name of the thread. 

Execution information 

Thread state. The object upon which the thread is blocked waiting to enter a 
synchronization block or waiting to be notified in a 
Object.wait(|java.lang.Object|) call. The ID of the thread that owns the object 
that the thread is blocked. Stack trace of the thread. 

Synchronization statistics 

The number of times that the thread has blocked for synchronization or waited 
for notification. The accumulated elapsed time that the thread has blocked for 
synchronization or waited for notification since thread contention monitoring 
was enabled. Some Java virtual machine implementation may not support this. The 
(|java.lang.management.ThreadMXBean|) method can be used to determine if a Java 
virtual machine supports this. 

This thread information class is designed for use in monitoring of the system, 
not for synchronization control. 

MXBean Mapping ThreadInfo is mapped to a 
CompositeData(|javax.management.openmbean.CompositeData|) with attributes as 
specified in the from(|java.lang.management.ThreadInfo|) method. 


*java.lang.management.ThreadInfo.from(CompositeData)*

public static |java.lang.management.ThreadInfo| from(javax.management.openmbean.CompositeData cd)

Returns a ThreadInfo object represented by the given CompositeData. The given 
CompositeData must contain the following attributes: 



Attribute Name Type 

threadId java.lang.Long 

threadName java.lang.String 

threadState java.lang.String 

suspended java.lang.Boolean 

inNative java.lang.Boolean 

blockedCount java.lang.Long 

blockedTime java.lang.Long 

waitedCount java.lang.Long 

waitedTime java.lang.Long 

lockName java.lang.String 

lockOwnerId java.lang.Long 

lockOwnerName java.lang.String 

stackTrace javax.management.openmbean.CompositeData[] 

Each element is a CompositeData representing StackTraceElement containing the 
following attributes: 



Attribute Name Type 

className java.lang.String 

methodName java.lang.String 

fileName java.lang.String 

lineNumber java.lang.Integer 

nativeMethod java.lang.Boolean 







    cd - CompositeData representing a ThreadInfo 

    Returns: a ThreadInfo object represented by cd if cd is not null; null otherwise. 
*java.lang.management.ThreadInfo.getBlockedCount()*

public long getBlockedCount()

Returns the total number of times that the thread associated with this 
ThreadInfo blocked to enter or reenter a monitor. I.e. the number of times a 
thread has been in the BLOCKED(|java.lang.Thread.State|) state. 


    Returns: the total number of times that the thread entered the BLOCKED state. 
*java.lang.management.ThreadInfo.getBlockedTime()*

public long getBlockedTime()

Returns the approximate accumulated elapsed time (in milliseconds) that the 
thread associated with this ThreadInfo has blocked to enter or reenter a 
monitor since thread contention monitoring is enabled. I.e. the total 
accumulated time the thread has been in the BLOCKED(|java.lang.Thread.State|) 
state since thread contention monitoring was last enabled. This method returns 
-1 if thread contention monitoring is disabled. 

The Java virtual machine may measure the time with a high resolution timer. 
This statistic is reset when the thread contention monitoring is reenabled. 


    Returns: the approximate accumulated elapsed time in milliseconds that a thread entered 
             the BLOCKED state; -1 if thread contention monitoring is disabled. 
*java.lang.management.ThreadInfo.getLockName()*

public |java.lang.String| getLockName()

Returns the string representation of the monitor lock that the thread 
associated with this ThreadInfo is blocked to enter or waiting to be notified 
through the Object.wait(|java.lang.Object|) method. The returned string 
representation of a monitor lock consists of the name of the class of which the 
object is an instance, the at-sign character `@', and the unsigned hexadecimal 
representation of the identity hash code of the object. The returned string may 
not be unique depending on the implementation of the (|java.lang.System|) 
method. This method returns a string equals to the value of: 



lock.getClass().getName() + '@' + 
Integer.toHexString(System.identityHashCode(lock)) 

where lock is the monitor lock object. 

If the thread is not blocking to enter on any monitor object, or is not waiting 
on a monitor object for notification in a Object.wait call, this method returns 
null. 


    Returns: the string representation of the monitor lock that the thread is blocking to 
             enter or waiting to be notified through the Object.wait method if 
             any; null otherwise. 
*java.lang.management.ThreadInfo.getLockOwnerId()*

public long getLockOwnerId()

Returns the ID of the thread which holds the monitor lock of an object on which 
the thread associated with this ThreadInfo is blocking. This method will return 
-1 if this thread is not blocked or waiting on any monitor, or if the monitor 
lock is not held by any thread. 


    Returns: the thread ID of the owner thread of the monitor lock of the object this thread 
             is blocking on; -1 if this thread is not blocked or waiting on any 
             monitor, or if the monitor lock is not held by any thread. 
*java.lang.management.ThreadInfo.getLockOwnerName()*

public |java.lang.String| getLockOwnerName()

Returns the name of the thread which holds the monitor lock of an object on 
which the thread associated with this ThreadInfo is blocking. This method will 
return null if this thread is not blocked or waiting on any monitor, or if the 
monitor lock is not held by any thread. 


    Returns: the name of the thread that holds the monitor lock of the object this thread is 
             blocking on; null if this thread is not blocked or waiting on any 
             monitor, or if the monitor lock is not held by any thread. 
*java.lang.management.ThreadInfo.getStackTrace()*

public |java.lang.StackTraceElement| getStackTrace()

Returns the stack trace of the thread associated with this ThreadInfo. If no 
stack trace was requested for this thread info, this method will return a 
zero-length array. If the returned array is of non-zero length then the first 
element of the array represents the top of the stack, which is the most recent 
method invocation in the sequence. The last element of the array represents the 
bottom of the stack, which is the least recent method invocation in the 
sequence. 

Some Java virtual machines may, under some circumstances, omit one or more 
stack frames from the stack trace. In the extreme case, a virtual machine that 
has no stack trace information concerning the thread associated with this 
ThreadInfo is permitted to return a zero-length array from this method. 


    Returns: an array of StackTraceElement objects of the thread. 
*java.lang.management.ThreadInfo.getThreadId()*

public long getThreadId()

Returns the ID of the thread associated with this ThreadInfo. 


    Returns: the ID of the associated thread. 
*java.lang.management.ThreadInfo.getThreadName()*

public |java.lang.String| getThreadName()

Returns the name of the thread associated with this ThreadInfo. 


    Returns: the name of the associated thread. 
*java.lang.management.ThreadInfo.getThreadState()*

public |java.lang.Thread.State| getThreadState()

Returns the state of the thread associated with this ThreadInfo. 


    Returns: Thread.State of the associated thread. 
*java.lang.management.ThreadInfo.getWaitedCount()*

public long getWaitedCount()

Returns the total number of times that the thread associated with this 
ThreadInfo waited for notification. I.e. the number of times that a thread has 
been in the WAITING(|java.lang.Thread.State|) or 
TIMED_WAITING(|java.lang.Thread.State|) state. 


    Returns: the total number of times that the thread was in the WAITING or TIMED_WAITING 
             state. 
*java.lang.management.ThreadInfo.getWaitedTime()*

public long getWaitedTime()

Returns the approximate accumulated elapsed time (in milliseconds) that the 
thread associated with this ThreadInfo has waited for notification since thread 
contention monitoring is enabled. I.e. the total accumulated time the thread 
has been in the WAITING(|java.lang.Thread.State|) or 
TIMED_WAITING(|java.lang.Thread.State|) state since thread contention 
monitoring is enabled. This method returns -1 if thread contention monitoring 
is disabled. 

The Java virtual machine may measure the time with a high resolution timer. 
This statistic is reset when the thread contention monitoring is reenabled. 


    Returns: the approximate accumulated elapsed time in milliseconds that a thread has been 
             in the WAITING or TIMED_WAITING state; -1 if thread contention 
             monitoring is disabled. 
*java.lang.management.ThreadInfo.isInNative()*

public boolean isInNative()

Tests if the thread associated with this ThreadInfo is executing native code 
via the Java Native Interface (JNI). The JNI native code does not include the 
virtual machine support code or the compiled native code generated by the 
virtual machine. 


    Returns: true if the thread is executing native code; false otherwise. 
*java.lang.management.ThreadInfo.isSuspended()*

public boolean isSuspended()

Tests if the thread associated with this ThreadInfo is suspended. This method 
returns true if (|java.lang.Thread|) has been called. 


    Returns: true if the thread is suspended; false otherwise. 
*java.lang.management.ThreadInfo.toString()*

public |java.lang.String| toString()

Returns a string representation of this thread info. 


    Returns: a string representation of this thread info. 


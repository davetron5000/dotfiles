*javax.swing.plaf.basic.BasicTextUI* *BasicTextUI* 
 Basis of a text components look-and-feel.

public abstract class BasicTextUI
  extends    |javax.swing.plaf.TextUI|
  implements |javax.swing.text.ViewFactory|

|javax.swing.plaf.basic.BasicTextUI_Description|
|javax.swing.plaf.basic.BasicTextUI_Fields|
|javax.swing.plaf.basic.BasicTextUI_Constructors|
|javax.swing.plaf.basic.BasicTextUI_Methods|

====================================================================================================================================================================================

*javax.swing.plaf.basic.BasicTextUI_Constructors*
|javax.swing.plaf.basic.BasicTextUI()|Creates a new UI.

*javax.swing.plaf.basic.BasicTextUI_Methods*
|javax.swing.plaf.basic.BasicTextUI.create(Element)|Creates a view for an element.
|javax.swing.plaf.basic.BasicTextUI.create(Element,int,int)|Creates a view for an element.
|javax.swing.plaf.basic.BasicTextUI.createCaret()|Creates the object to use for a caret.
|javax.swing.plaf.basic.BasicTextUI.createHighlighter()|Creates the object to use for adding highlights.
|javax.swing.plaf.basic.BasicTextUI.createKeymap()|Creates the keymap to use for the text component, and installs  any necessary bindings into it.
|javax.swing.plaf.basic.BasicTextUI.damageRange(JTextComponent,int,int)|Causes the portion of the view responsible for the  given part of the model to be repainted.
|javax.swing.plaf.basic.BasicTextUI.damageRange(JTextComponent,int,int,Position.Bias,Position.Bias)|Causes the portion of the view responsible for the   given part of the model to
|javax.swing.plaf.basic.BasicTextUI.getComponent()|Fetches the text component associated with this  UI implementation.
|javax.swing.plaf.basic.BasicTextUI.getEditorKit(JTextComponent)|Fetches the EditorKit for the UI.
|javax.swing.plaf.basic.BasicTextUI.getKeymapName()|Fetches the name of the keymap that will be installed/used   by default for this UI.
|javax.swing.plaf.basic.BasicTextUI.getMaximumSize(JComponent)|Gets the maximum size for the editor component.
|javax.swing.plaf.basic.BasicTextUI.getMinimumSize(JComponent)|Gets the minimum size for the editor component.
|javax.swing.plaf.basic.BasicTextUI.getNextVisualPositionFrom(JTextComponent,int,Position.Bias,int,Position.Bias[])|Provides a way to determine the next visually represented model
|javax.swing.plaf.basic.BasicTextUI.getPreferredSize(JComponent)|Gets the preferred size for the editor component.
|javax.swing.plaf.basic.BasicTextUI.getPropertyPrefix()|Gets the name used as a key to look up properties through the  UIManager.
|javax.swing.plaf.basic.BasicTextUI.getRootView(JTextComponent)|Fetches a View with the allocation of the associated   text component (i.e.
|javax.swing.plaf.basic.BasicTextUI.getToolTipText(JTextComponent,Point)|Returns the string to be used as the tooltip at the passed in location.
|javax.swing.plaf.basic.BasicTextUI.getVisibleEditorRect()|Gets the allocation to give the root View.
|javax.swing.plaf.basic.BasicTextUI.installDefaults()|Initializes component properties, e.g.
|javax.swing.plaf.basic.BasicTextUI.installKeyboardActions()|
|javax.swing.plaf.basic.BasicTextUI.installListeners()|Installs listeners for the UI.
|javax.swing.plaf.basic.BasicTextUI.installUI(JComponent)|Installs the UI for a component.
|javax.swing.plaf.basic.BasicTextUI.modelChanged()|Flags model changes.
|javax.swing.plaf.basic.BasicTextUI.modelToView(JTextComponent,int)|Converts the given location in the model to a place in  the view coordinate system.
|javax.swing.plaf.basic.BasicTextUI.modelToView(JTextComponent,int,Position.Bias)|Converts the given location in the model to a place in  the view coordinate system.
|javax.swing.plaf.basic.BasicTextUI.paint(Graphics,JComponent)|Paints the interface.
|javax.swing.plaf.basic.BasicTextUI.paintBackground(Graphics)|Paints a background for the view.
|javax.swing.plaf.basic.BasicTextUI.paintSafely(Graphics)|Paints the interface safely with a guarantee that  the model won't change from the view of this thread.
|javax.swing.plaf.basic.BasicTextUI.propertyChange(PropertyChangeEvent)|This method gets called when a bound property is changed  on the associated JTextComponent.
|javax.swing.plaf.basic.BasicTextUI.setView(View)|Sets the current root of the view hierarchy and calls invalidate().
|javax.swing.plaf.basic.BasicTextUI.uninstallDefaults()|Sets the component properties that haven't been explicitly overridden to   null.
|javax.swing.plaf.basic.BasicTextUI.uninstallKeyboardActions()|
|javax.swing.plaf.basic.BasicTextUI.uninstallListeners()|Uninstalls listeners for the UI.
|javax.swing.plaf.basic.BasicTextUI.uninstallUI(JComponent)|Deinstalls the UI for a component.
|javax.swing.plaf.basic.BasicTextUI.update(Graphics,JComponent)|Superclass paints background in an uncontrollable way  (i.e.
|javax.swing.plaf.basic.BasicTextUI.viewToModel(JTextComponent,Point)|Converts the given place in the view coordinate system  to the nearest representative location in the model.
|javax.swing.plaf.basic.BasicTextUI.viewToModel(JTextComponent,Point,Position.Bias[])|Converts the given place in the view coordinate system  to the nearest representative locatio

*javax.swing.plaf.basic.BasicTextUI_Description*

Basis of a text components look-and-feel. This provides the basic editor view and controller services that may be useful when creating a look-and-feel for an extension of 
JTextComponent. 

Most state is held in the associated JTextComponent as bound properties, and the UI installs default values for the various properties. This default will install something for all 
of the properties. Typically, a LAF implementation will do more however. At a minimum, a LAF would generally install key bindings. 

This class also provides some concurrency support if the Document associated with the JTextComponent is a subclass of AbstractDocument. Access to the View (or View hierarchy) is 
serialized between any thread mutating the model and the Swing event thread (which is expected to render, do model/view coordinate translation, etc). Any access to the root view 
should first acquire a read-lock on the AbstractDocument and release that lock in a finally block. 

An important method to define is the (|javax.swing.plaf.basic.BasicTextUI|) method which is used as the basis of the keys used to fetch defaults from the UIManager. The string 
should reflect the type of TextUI (eg. TextField, TextArea, etc) without the particular LAF part of the name (eg Metal, Motif, etc). 

To build a view of the model, one of the following strategies can be employed. 

One strategy is to simply redefine the ViewFactory interface in the UI. By default, this UI itself acts as the factory for View implementations. This is useful for simple 
factories. To do this reimplement the (|javax.swing.plaf.basic.BasicTextUI|) method. 

A common strategy for creating more complex types of documents is to have the EditorKit implementation return a factory. Since the EditorKit ties all of the pieces necessary to 
maintain a type of document, the factory is typically an important part of that and should be produced by the EditorKit implementation. 

A less common way to create more complex types is to have the UI implementation create a. separate object for the factory. To do this, the (|javax.swing.plaf.basic.BasicTextUI|) 
method should be reimplemented to return some factory. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.plaf.basic.BasicTextUI()*

public BasicTextUI()

Creates a new UI. 


*javax.swing.plaf.basic.BasicTextUI.create(Element)*

public |javax.swing.text.View| create(javax.swing.text.Element elem)

Creates a view for an element. If a subclass wishes to directly implement the factory producing the view(s), it should reimplement this method. By default it simply returns null 
indicating it is unable to represent the element. 


    elem - the element 

    Returns: 

*javax.swing.plaf.basic.BasicTextUI.create(Element,int,int)*

public |javax.swing.text.View| create(
  javax.swing.text.Element elem,
  int p0,
  int p1)

Creates a view for an element. If a subclass wishes to directly implement the factory producing the view(s), it should reimplement this method. By default it simply returns null 
indicating it is unable to represent the part of the element. 


    elem - the element 
    p0 - the starting offset >= 0 
    p1 - the ending offset >= p0 

    Returns: 

*javax.swing.plaf.basic.BasicTextUI.createCaret()*

protected |javax.swing.text.Caret| createCaret()

Creates the object to use for a caret. By default an instance of BasicCaret is created. This method can be redefined to provide something else that implements the InputPosition 
interface or a subclass of JCaret. 



    Returns: the caret object 

*javax.swing.plaf.basic.BasicTextUI.createHighlighter()*

protected |javax.swing.text.Highlighter| createHighlighter()

Creates the object to use for adding highlights. By default an instance of BasicHighlighter is created. This method can be redefined to provide something else that implements the 
Highlighter interface or a subclass of DefaultHighlighter. 



    Returns: the highlighter 

*javax.swing.plaf.basic.BasicTextUI.createKeymap()*

protected |javax.swing.text.Keymap| createKeymap()

Creates the keymap to use for the text component, and installs any necessary bindings into it. By default, the keymap is shared between all instances of this type of TextUI. The 
keymap has the name defined by the getKeymapName method. If the keymap is not found, then DEFAULT_KEYMAP from JTextComponent is used. 

The set of bindings used to create the keymap is fetched from the UIManager using a key formed by combining the (|javax.swing.plaf.basic.BasicTextUI|) method and the string 
.keyBindings. The type is expected to be JTextComponent.KeyBinding[]. 



    Returns: 

*javax.swing.plaf.basic.BasicTextUI.damageRange(JTextComponent,int,int)*

public void damageRange(
  javax.swing.text.JTextComponent tc,
  int p0,
  int p1)

Causes the portion of the view responsible for the given part of the model to be repainted. Does nothing if the view is not currently painted. 


    tc - the text component for which this UI is installed 
    p0 - the beginning of the range >= 0 
    p1 - the end of the range >= p0 

*javax.swing.plaf.basic.BasicTextUI.damageRange(JTextComponent,int,int,Position.Bias,Position.Bias)*

public void damageRange(
  javax.swing.text.JTextComponent t,
  int p0,
  int p1,
  javax.swing.text.Position.Bias p0Bias,
  javax.swing.text.Position.Bias p1Bias)

Causes the portion of the view responsible for the given part of the model to be repainted. 


    p0 - the beginning of the range >= 0 
    p1 - the end of the range >= p0 

*javax.swing.plaf.basic.BasicTextUI.getComponent()*

protected final |javax.swing.text.JTextComponent| getComponent()

Fetches the text component associated with this UI implementation. This will be null until the ui has been installed. 



    Returns: the editor component 

*javax.swing.plaf.basic.BasicTextUI.getEditorKit(JTextComponent)*

public |javax.swing.text.EditorKit| getEditorKit(javax.swing.text.JTextComponent tc)

Fetches the EditorKit for the UI. 


    tc - the text component for which this UI is installed 

    Returns: the editor capabilities 

*javax.swing.plaf.basic.BasicTextUI.getKeymapName()*

protected |java.lang.String| getKeymapName()

Fetches the name of the keymap that will be installed/used by default for this UI. This is implemented to create a name based upon the classname. The name is the the name of the 
class with the package prefix removed. 



    Returns: 

*javax.swing.plaf.basic.BasicTextUI.getMaximumSize(JComponent)*

public |java.awt.Dimension| getMaximumSize(javax.swing.JComponent c)

Gets the maximum size for the editor component. 


    c - the editor component 

    Returns: 

*javax.swing.plaf.basic.BasicTextUI.getMinimumSize(JComponent)*

public |java.awt.Dimension| getMinimumSize(javax.swing.JComponent c)

Gets the minimum size for the editor component. 


    c - the editor component 

    Returns: 

*javax.swing.plaf.basic.BasicTextUI.getNextVisualPositionFrom(JTextComponent,int,Position.Bias,int,Position.Bias[])*

public int getNextVisualPositionFrom(
  javax.swing.text.JTextComponent t,
  int pos,
  javax.swing.text.Position.Bias b,
  int direction,
  javax.swing.text.Position.Bias[] biasRet)
  throws |javax.swing.text.BadLocationException|
         
Provides a way to determine the next visually represented model location that one might place a caret. Some views may not be visible, they might not be in the same order found in 
the model, or they just might not allow access to some of the locations in the model. 


    pos - the position to convert >= 0 
    a - the allocated region to render into 
    direction - the direction from the current position that can be thought of as the arrow keys typically found on a keyboard. This may be SwingConstants.WEST, SwingConstants.EAST, 
       SwingConstants.NORTH, or SwingConstants.SOUTH. 

    Returns: the location within the model that best represents the next location visual position. 

*javax.swing.plaf.basic.BasicTextUI.getPreferredSize(JComponent)*

public |java.awt.Dimension| getPreferredSize(javax.swing.JComponent c)

Gets the preferred size for the editor component. If the component has been given a size prior to receiving this request, it will set the size of the view hierarchy to reflect the 
size of the component before requesting the preferred size of the view hierarchy. This allows formatted views to format to the current component size before answering the request. 
Other views don't care about currently formatted size and give the same answer either way. 


    c - the editor component 

    Returns: 

*javax.swing.plaf.basic.BasicTextUI.getPropertyPrefix()*

protected abstract |java.lang.String| getPropertyPrefix()

Gets the name used as a key to look up properties through the UIManager. This is used as a prefix to all the standard text properties. 



    Returns: 

*javax.swing.plaf.basic.BasicTextUI.getRootView(JTextComponent)*

public |javax.swing.text.View| getRootView(javax.swing.text.JTextComponent tc)

Fetches a View with the allocation of the associated text component (i.e. the root of the hierarchy) that can be traversed to determine how the model is being represented 
spatially. 

NOTE:The View hierarchy can be traversed from the root view, and other things can be done as well. Things done in this way cannot be protected like simple method calls through the 
TextUI. Therefore, proper operation in the presence of concurrency must be arranged by any logic that calls this method! 


    tc - the text component for which this UI is installed 

    Returns: 

*javax.swing.plaf.basic.BasicTextUI.getToolTipText(JTextComponent,Point)*

public |java.lang.String| getToolTipText(
  javax.swing.text.JTextComponent t,
  java.awt.Point pt)

Returns the string to be used as the tooltip at the passed in location. This forwards the method onto the root View. 



*javax.swing.plaf.basic.BasicTextUI.getVisibleEditorRect()*

protected |java.awt.Rectangle| getVisibleEditorRect()

Gets the allocation to give the root View. Due to an unfortunate set of historical events this method is inappropriately named. The Rectangle returned has nothing to do with 
visibility. The component must have a non-zero positive size for this translation to be computed. 



    Returns: the bounding box for the root view 

*javax.swing.plaf.basic.BasicTextUI.installDefaults()*

protected void installDefaults()

Initializes component properties, e.g. font, foreground, background, caret color, selection color, selected text color, disabled text color, and border color. The font, 
foreground, and background properties are only set if their current value is either null or a UIResource, other properties are set if the current value is null. 



*javax.swing.plaf.basic.BasicTextUI.installKeyboardActions()*

protected void installKeyboardActions()





*javax.swing.plaf.basic.BasicTextUI.installListeners()*

protected void installListeners()

Installs listeners for the UI. 



*javax.swing.plaf.basic.BasicTextUI.installUI(JComponent)*

public void installUI(javax.swing.JComponent c)

Installs the UI for a component. This does the following things. 

Set the associated component to opaque (can be changed easily by a subclass or on JTextComponent directly), which is the most common case. This will cause the component's 
background color to be painted. 

Install the default caret and highlighter into the associated component. 

Attach to the editor and model. If there is no model, a default one is created. 

create the view factory and the view hierarchy used to represent the model. 


    c - the editor component 

*javax.swing.plaf.basic.BasicTextUI.modelChanged()*

protected void modelChanged()

Flags model changes. This is called whenever the model has changed. It is implemented to rebuild the view hierarchy to represent the default root element of the associated model. 



*javax.swing.plaf.basic.BasicTextUI.modelToView(JTextComponent,int)*

public |java.awt.Rectangle| modelToView(
  javax.swing.text.JTextComponent tc,
  int pos)
  throws |javax.swing.text.BadLocationException|
         
Converts the given location in the model to a place in the view coordinate system. The component must have a non-zero positive size for this translation to be computed. 


    tc - the text component for which this UI is installed 
    pos - the local location in the model to translate >= 0 

    Returns: the coordinates as a rectangle, null if the model is not painted 

*javax.swing.plaf.basic.BasicTextUI.modelToView(JTextComponent,int,Position.Bias)*

public |java.awt.Rectangle| modelToView(
  javax.swing.text.JTextComponent tc,
  int pos,
  javax.swing.text.Position.Bias bias)
  throws |javax.swing.text.BadLocationException|
         
Converts the given location in the model to a place in the view coordinate system. The component must have a non-zero positive size for this translation to be computed. 


    tc - the text component for which this UI is installed 
    pos - the local location in the model to translate >= 0 

    Returns: the coordinates as a rectangle, null if the model is not painted 

*javax.swing.plaf.basic.BasicTextUI.paint(Graphics,JComponent)*

public final void paint(
  java.awt.Graphics g,
  javax.swing.JComponent c)

Paints the interface. This is routed to the paintSafely method under the guarantee that the model won't change from the view of this thread while it's rendering (if the associated 
model is derived from AbstractDocument). This enables the model to potentially be updated asynchronously. 


    g - the graphics context 
    c - the editor component 

*javax.swing.plaf.basic.BasicTextUI.paintBackground(Graphics)*

protected void paintBackground(java.awt.Graphics g)

Paints a background for the view. This will only be called if isOpaque() on the associated component is true. The default is to paint the background color of the component. 


    g - the graphics context 

*javax.swing.plaf.basic.BasicTextUI.paintSafely(Graphics)*

protected void paintSafely(java.awt.Graphics g)

Paints the interface safely with a guarantee that the model won't change from the view of this thread. This does the following things, rendering from back to front. 

If the component is marked as opaque, the background is painted in the current background color of the component. 

The highlights (if any) are painted. 

The view hierarchy is painted. 

The caret is painted. 


    g - the graphics context 

*javax.swing.plaf.basic.BasicTextUI.propertyChange(PropertyChangeEvent)*

protected void propertyChange(java.beans.PropertyChangeEvent evt)

This method gets called when a bound property is changed on the associated JTextComponent. This is a hook which UI implementations may change to reflect how the UI displays bound 
properties of JTextComponent subclasses. This is implemented to do nothing (i.e. the response to properties in JTextComponent itself are handled prior to calling this method). 


    evt - the property change event 

*javax.swing.plaf.basic.BasicTextUI.setView(View)*

protected final void setView(javax.swing.text.View v)

Sets the current root of the view hierarchy and calls invalidate(). If there were any child components, they will be removed (i.e. there are assumed to have come from components 
embedded in views). 


    v - the root view 

*javax.swing.plaf.basic.BasicTextUI.uninstallDefaults()*

protected void uninstallDefaults()

Sets the component properties that haven't been explicitly overridden to null. A property is considered overridden if its current value is not a UIResource. 



*javax.swing.plaf.basic.BasicTextUI.uninstallKeyboardActions()*

protected void uninstallKeyboardActions()





*javax.swing.plaf.basic.BasicTextUI.uninstallListeners()*

protected void uninstallListeners()

Uninstalls listeners for the UI. 



*javax.swing.plaf.basic.BasicTextUI.uninstallUI(JComponent)*

public void uninstallUI(javax.swing.JComponent c)

Deinstalls the UI for a component. This removes the listeners, uninstalls the highlighter, removes views, and nulls out the keymap. 


    c - the editor component 

*javax.swing.plaf.basic.BasicTextUI.update(Graphics,JComponent)*

public void update(
  java.awt.Graphics g,
  javax.swing.JComponent c)

Superclass paints background in an uncontrollable way (i.e. one might want an image tiled into the background). To prevent this from happening twice, this method is reimplemented 
to simply paint. 

NOTE: Superclass is also not thread-safe in it's rendering of the background, although that's not an issue with the default rendering. 



*javax.swing.plaf.basic.BasicTextUI.viewToModel(JTextComponent,Point)*

public int viewToModel(
  javax.swing.text.JTextComponent tc,
  java.awt.Point pt)

Converts the given place in the view coordinate system to the nearest representative location in the model. The component must have a non-zero positive size for this translation 
to be computed. 


    tc - the text component for which this UI is installed 
    pt - the location in the view to translate. This should be in the same coordinate system as the mouse events. 

    Returns: the offset from the start of the document >= 0, -1 if not painted 

*javax.swing.plaf.basic.BasicTextUI.viewToModel(JTextComponent,Point,Position.Bias[])*

public int viewToModel(
  javax.swing.text.JTextComponent tc,
  java.awt.Point pt,
  javax.swing.text.Position.Bias[] biasReturn)

Converts the given place in the view coordinate system to the nearest representative location in the model. The component must have a non-zero positive size for this translation 
to be computed. 


    tc - the text component for which this UI is installed 
    pt - the location in the view to translate. This should be in the same coordinate system as the mouse events. 

    Returns: the offset from the start of the document >= 0, -1 if the component doesn't yet have a positive size. 



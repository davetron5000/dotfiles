*java.security.MessageDigest* *MessageDigest* This MessageDigest class provides applications the functionality of a
 message digest algorithm, such as MD5 or SHA.

public abstract class MessageDigest
  extends    |java.security.MessageDigestSpi|

|java.security.MessageDigest_Description|
|java.security.MessageDigest_Fields|
|java.security.MessageDigest_Constructors|
|java.security.MessageDigest_Methods|

====================================================================================================================================================================================

*java.security.MessageDigest_Constructors*
|java.security.MessageDigest(String)|Creates a message digest with the specified algorithm name.

*java.security.MessageDigest_Methods*
|java.security.MessageDigest.clone()|Returns a clone if the implementation is cloneable.
|java.security.MessageDigest.digest()|Completes the hash computation by performing final operations  such as padding.
|java.security.MessageDigest.digest(byte[])|Performs a final update on the digest using the specified array   of bytes, then completes the digest computation.
|java.security.MessageDigest.digest(byte[],int,int)|Completes the hash computation by performing final operations  such as padding.
|java.security.MessageDigest.getAlgorithm()|Returns a string that identifies the algorithm, independent of  implementation details.
|java.security.MessageDigest.getDigestLength()|Returns the length of the digest in bytes, or 0 if this operation is  not supported by the provider and the implementation is not cl
|java.security.MessageDigest.getInstance(String)|Generates a MessageDigest object that implements the specified digest  algorithm.
|java.security.MessageDigest.getInstance(String,Provider)|Generates a MessageDigest object implementing the specified  algorithm, as supplied from the specified provider, if such 
|java.security.MessageDigest.getInstance(String,String)|Generates a MessageDigest object implementing the specified  algorithm, as supplied from the specified provider, if such an
|java.security.MessageDigest.getProvider()|Returns the provider of this message digest object.
|java.security.MessageDigest.isEqual(byte[],byte[])|Compares two digests for equality.
|java.security.MessageDigest.reset()|Resets the digest for further use.
|java.security.MessageDigest.toString()|Returns a string representation of this message digest object.
|java.security.MessageDigest.update(byte)|Updates the digest using the specified byte.
|java.security.MessageDigest.update(byte[])|Updates the digest using the specified array of bytes.
|java.security.MessageDigest.update(byte[],int,int)|Updates the digest using the specified array of bytes, starting  at the specified offset.
|java.security.MessageDigest.update(ByteBuffer)|Update the digest using the specified ByteBuffer.

*java.security.MessageDigest_Description*

This MessageDigest class provides applications the functionality of a message digest algorithm, such as MD5 or SHA. Message digests are secure one-way hash functions that take 
arbitrary-sized data and output a fixed-length hash value. 

A MessageDigest object starts out initialized. The data is processed through it using the update(|java.security.MessageDigest|) methods. At any point 
reset(|java.security.MessageDigest|) can be called to reset the digest. Once all the data to be updated has been updated, one of the digest(|java.security.MessageDigest|) methods 
should be called to complete the hash computation. 

The digest method can be called once for a given number of updates. After digest has been called, the MessageDigest object is reset to its initialized state. 

Implementations are free to implement the Cloneable interface. Client applications can test cloneability by attempting cloning and catching the CloneNotSupportedException: 



MessageDigest md = MessageDigest.getInstance("SHA"); 

try { md.update(toChapter1); MessageDigest tc1 = md.clone(); byte[] toChapter1Digest = tc1.digest(); md.update(toChapter2); ...etc. } catch (CloneNotSupportedException cnse) { 
throw new DigestException("couldn't make digest of partial content"); } 

Note that if a given implementation is not cloneable, it is still possible to compute intermediate digests by instantiating several instances, if the number of digests is known in 
advance. 

Note that this class is abstract and extends from MessageDigestSpi for historical reasons. Application developers should only take notice of the methods defined in this 
MessageDigest class; all the methods in the superclass are intended for cryptographic service providers who wish to supply their own implementations of message digest algorithms. 



*java.security.MessageDigest(String)*

protected MessageDigest(java.lang.String algorithm)

Creates a message digest with the specified algorithm name. 

    algorithm - the standard name of the digest algorithm. See Appendix A in the Java Cryptography Architecture API Specification and Reference for information about standard algorithm names. 

*java.security.MessageDigest.clone()*

public |java.lang.Object| clone()
  throws |java.lang.CloneNotSupportedException|
         
Returns a clone if the implementation is cloneable. 



    Returns: a clone if the implementation is cloneable. 

*java.security.MessageDigest.digest()*

public byte[] digest()

Completes the hash computation by performing final operations such as padding. The digest is reset after this call is made. 



    Returns: the array of bytes for the resulting hash value. 

*java.security.MessageDigest.digest(byte[])*

public byte[] digest(byte[] input)

Performs a final update on the digest using the specified array of bytes, then completes the digest computation. That is, this method first calls 
update(input)(|java.security.MessageDigest|) , passing the input array to the update method, then calls digest()(|java.security.MessageDigest|) . 


    input - the input to be updated before the digest is completed. 

    Returns: the array of bytes for the resulting hash value. 

*java.security.MessageDigest.digest(byte[],int,int)*

public int digest(
  byte[] buf,
  int offset,
  int len)
  throws |java.security.DigestException|
         
Completes the hash computation by performing final operations such as padding. The digest is reset after this call is made. 


    buf - output buffer for the computed digest 
    offset - offset into the output buffer to begin storing the digest 
    len - number of bytes within buf allotted for the digest 

    Returns: the number of bytes placed into buf 

*java.security.MessageDigest.getAlgorithm()*

public final |java.lang.String| getAlgorithm()

Returns a string that identifies the algorithm, independent of implementation details. The name should be a standard Java Security name (such as "SHA", "MD5", and so on). See 
Appendix A in the Java Cryptography Architecture API Specification and Reference for information about standard algorithm names. 



    Returns: the name of the algorithm 

*java.security.MessageDigest.getDigestLength()*

public final int getDigestLength()

Returns the length of the digest in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable. 



    Returns: the digest length in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable. 

*java.security.MessageDigest.getInstance(String)*

public static |java.security.MessageDigest| getInstance(java.lang.String algorithm)
  throws |java.security.NoSuchAlgorithmException|
         
Generates a MessageDigest object that implements the specified digest algorithm. If the default provider package provides an implementation of the requested digest algorithm, an 
instance of MessageDigest containing that implementation is returned. If the algorithm is not available in the default package, other packages are searched. 


    algorithm - the name of the algorithm requested. See Appendix A in the Java Cryptography Architecture API Specification and Reference for information about standard algorithm names. 

    Returns: a Message Digest object implementing the specified algorithm. 

*java.security.MessageDigest.getInstance(String,Provider)*

public static |java.security.MessageDigest| getInstance(
  java.lang.String algorithm,
  java.security.Provider provider)
  throws |java.security.NoSuchAlgorithmException|
         
Generates a MessageDigest object implementing the specified algorithm, as supplied from the specified provider, if such an algorithm is available from the provider. Note: the 
provider doesn't have to be registered. 


    algorithm - the name of the algorithm requested. See Appendix A in the Java Cryptography Architecture API Specification and Reference for information about standard algorithm names. 
    provider - the provider. 

    Returns: a Message Digest object implementing the specified algorithm. 

*java.security.MessageDigest.getInstance(String,String)*

public static |java.security.MessageDigest| getInstance(
  java.lang.String algorithm,
  java.lang.String provider)
  throws |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         
Generates a MessageDigest object implementing the specified algorithm, as supplied from the specified provider, if such an algorithm is available from the provider. 


    algorithm - the name of the algorithm requested. See Appendix A in the Java Cryptography Architecture API Specification and Reference for information about standard algorithm names. 
    provider - the name of the provider. 

    Returns: a Message Digest object implementing the specified algorithm. 

*java.security.MessageDigest.getProvider()*

public final |java.security.Provider| getProvider()

Returns the provider of this message digest object. 



    Returns: the provider of this message digest object 

*java.security.MessageDigest.isEqual(byte[],byte[])*

public static boolean isEqual(
  byte[] digesta,
  byte[] digestb)

Compares two digests for equality. Does a simple byte compare. 


    digesta - one of the digests to compare. 
    digestb - the other digest to compare. 

    Returns: true if the digests are equal, false otherwise. 

*java.security.MessageDigest.reset()*

public void reset()

Resets the digest for further use. 



*java.security.MessageDigest.toString()*

public |java.lang.String| toString()

Returns a string representation of this message digest object. 



*java.security.MessageDigest.update(byte)*

public void update(byte input)

Updates the digest using the specified byte. 


    input - the byte with which to update the digest. 

*java.security.MessageDigest.update(byte[])*

public void update(byte[] input)

Updates the digest using the specified array of bytes. 


    input - the array of bytes. 

*java.security.MessageDigest.update(byte[],int,int)*

public void update(
  byte[] input,
  int offset,
  int len)

Updates the digest using the specified array of bytes, starting at the specified offset. 


    input - the array of bytes. 
    offset - the offset to start from in the array of bytes. 
    len - the number of bytes to use, starting at offset. 

*java.security.MessageDigest.update(ByteBuffer)*

public final void update(java.nio.ByteBuffer input)

Update the digest using the specified ByteBuffer. The digest is updated using the input.remaining() bytes starting at input.position(). Upon return, the buffer's position will be 
equal to its limit; its limit will not have changed. 


    input - the ByteBuffer 



*java.awt.dnd.DropTarget* *DropTarget* The DropTarget is associated 
 with a Com

public class DropTarget
  extends    |java.lang.Object|
  implements |java.awt.dnd.DropTargetListener|
             |java.io.Serializable|

|java.awt.dnd.DropTarget_Description|
|java.awt.dnd.DropTarget_Fields|
|java.awt.dnd.DropTarget_Constructors|
|java.awt.dnd.DropTarget_Methods|

================================================================================

*java.awt.dnd.DropTarget_Constructors*
|java.awt.dnd.DropTarget()|Creates a DropTarget.
|java.awt.dnd.DropTarget(Component,DropTargetListener)|Creates a DropTarget giv
|java.awt.dnd.DropTarget(Component,int,DropTargetListener)|Creates a DropTarget
|java.awt.dnd.DropTarget(Component,int,DropTargetListener,boolean)|Creates a Dr
|java.awt.dnd.DropTarget(Component,int,DropTargetListener,boolean,FlavorMap)|Cr

*java.awt.dnd.DropTarget_Methods*
|java.awt.dnd.DropTarget.addDropTargetListener(DropTargetListener)|Adds a new D
|java.awt.dnd.DropTarget.addNotify(ComponentPeer)|Notify the DropTarget that it
|java.awt.dnd.DropTarget.clearAutoscroll()|clear autoscrolling
|java.awt.dnd.DropTarget.createDropTargetAutoScroller(Component,Point)|create a
|java.awt.dnd.DropTarget.createDropTargetContext()|Creates the DropTargetContex
|java.awt.dnd.DropTarget.dragEnter(DropTargetDragEvent)|Calls dragEnter on the 
|java.awt.dnd.DropTarget.dragExit(DropTargetEvent)|Calls dragExit on the regist
|java.awt.dnd.DropTarget.dragOver(DropTargetDragEvent)|Calls dragOver on the re
|java.awt.dnd.DropTarget.drop(DropTargetDropEvent)|Calls drop on the registered
|java.awt.dnd.DropTarget.dropActionChanged(DropTargetDragEvent)|Calls dropActio
|java.awt.dnd.DropTarget.getComponent()|Gets the Component associated   with th
|java.awt.dnd.DropTarget.getDefaultActions()|Gets an int representing the  curr
|java.awt.dnd.DropTarget.getDropTargetContext()|Gets the DropTargetContext asso
|java.awt.dnd.DropTarget.getFlavorMap()|Gets the FlavorMap  associated with thi
|java.awt.dnd.DropTarget.initializeAutoscrolling(Point)|initialize autoscrollin
|java.awt.dnd.DropTarget.isActive()|Reports whether or not   this DropTarget   
|java.awt.dnd.DropTarget.removeDropTargetListener(DropTargetListener)|Removes t
|java.awt.dnd.DropTarget.removeNotify(ComponentPeer)|Notify the DropTarget that
|java.awt.dnd.DropTarget.setActive(boolean)|Sets the DropTarget active if true,
|java.awt.dnd.DropTarget.setComponent(Component)|Note: this interface is requir
|java.awt.dnd.DropTarget.setDefaultActions(int)|Sets the default acceptable act
|java.awt.dnd.DropTarget.setFlavorMap(FlavorMap)|Sets the FlavorMap associated 
|java.awt.dnd.DropTarget.updateAutoscroll(Point)|update autoscrolling with curr

*java.awt.dnd.DropTarget_Description*

The DropTarget is associated with a Component when that Component wishes to 
accept drops during Drag and Drop operations. 

Each DropTarget is associated with a FlavorMap. The default FlavorMap hereafter 
designates the FlavorMap returned by SystemFlavorMap.getDefaultFlavorMap(). 


*java.awt.dnd.DropTarget()*

public DropTarget()
  throws |java.awt.HeadlessException|
         
Creates a DropTarget. 


*java.awt.dnd.DropTarget(Component,DropTargetListener)*

public DropTarget(
  java.awt.Component c,
  java.awt.dnd.DropTargetListener dtl)
  throws |java.awt.HeadlessException|
         
Creates a DropTarget given the Component to associate itself with, and the 
DropTargetListener to handle event processing. 

The Component will receive drops only if it is enabled. 

    c - The Component with which this DropTarget is associated 
    dtl - The DropTargetListener for this DropTarget 

*java.awt.dnd.DropTarget(Component,int,DropTargetListener)*

public DropTarget(
  java.awt.Component c,
  int ops,
  java.awt.dnd.DropTargetListener dtl)
  throws |java.awt.HeadlessException|
         
Creates a DropTarget given the Component to associate itself with, an int 
representing the default acceptable action(s) to support, and a 
DropTargetListener to handle event processing. 

The Component will receive drops only if it is enabled. 

    c - The Component with which this DropTarget is associated 
    ops - The default acceptable actions for this DropTarget 
    dtl - The DropTargetListener for this DropTarget 

*java.awt.dnd.DropTarget(Component,int,DropTargetListener,boolean)*

public DropTarget(
  java.awt.Component c,
  int ops,
  java.awt.dnd.DropTargetListener dtl,
  boolean act)
  throws |java.awt.HeadlessException|
         
Creates a DropTarget given the Component to associate itself with, an int 
representing the default acceptable action(s) to support, a DropTargetListener 
to handle event processing, and a boolean indicating if the DropTarget is 
currently accepting drops. 

The Component will receive drops only if it is enabled. 

    c - The Component with which this DropTarget is associated 
    ops - The default acceptable actions for this DropTarget 
    dtl - The DropTargetListener for this DropTarget 
    act - Is the DropTarget accepting drops. 

*java.awt.dnd.DropTarget(Component,int,DropTargetListener,boolean,FlavorMap)*

public DropTarget(
  java.awt.Component c,
  int ops,
  java.awt.dnd.DropTargetListener dtl,
  boolean act,
  java.awt.datatransfer.FlavorMap fm)
  throws |java.awt.HeadlessException|
         
Creates a new DropTarget given the Component to associate itself with, an int 
representing the default acceptable action(s) to support, a DropTargetListener 
to handle event processing, a boolean indicating if the DropTarget is currently 
accepting drops, and a FlavorMap to use (or null for the default FlavorMap). 

The Component will receive drops only if it is enabled. 

    c - The Component with which this DropTarget is associated 
    ops - The default acceptable actions for this DropTarget 
    dtl - The DropTargetListener for this DropTarget 
    act - Is the DropTarget accepting drops. 
    fm - The FlavorMap to use, or null for the default FlavorMap 

*java.awt.dnd.DropTarget.addDropTargetListener(DropTargetListener)*

public synchronized void addDropTargetListener(java.awt.dnd.DropTargetListener dtl)
  throws |java.util.TooManyListenersException|
         
Adds a new DropTargetListener (UNICAST SOURCE). 

    dtl - The new DropTargetListener 

*java.awt.dnd.DropTarget.addNotify(ComponentPeer)*

public void addNotify(java.awt.peer.ComponentPeer peer)

Notify the DropTarget that it has been associated with a Component 

This method is usually called from java.awt.Component.addNotify() of the 
Component associated with this DropTarget to notify the DropTarget that a 
ComponentPeer has been associated with that Component. 

Calling this method, other than to notify this DropTarget of the association of 
the ComponentPeer with the Component may result in a malfunction of the DnD 
system. 



    peer - The Peer of the Component we are associated with! 

*java.awt.dnd.DropTarget.clearAutoscroll()*

protected void clearAutoscroll()

clear autoscrolling 


*java.awt.dnd.DropTarget.createDropTargetAutoScroller(Component,Point)*

protected |java.awt.dnd.DropTarget.DropTargetAutoScroller| createDropTargetAutoScroller(
  java.awt.Component c,
  java.awt.Point p)

create an embedded autoscroller 

    c - the Component 
    p - the Point 

*java.awt.dnd.DropTarget.createDropTargetContext()*

protected |java.awt.dnd.DropTargetContext| createDropTargetContext()

Creates the DropTargetContext associated with this DropTarget. Subclasses may 
override this method to instantiate their own DropTargetContext subclass. 

This call is typically *only* called by the platform's DropTargetContextPeer as 
a drag operation encounters this DropTarget. Accessing the Context while no 
Drag is current has undefined results. 


*java.awt.dnd.DropTarget.dragEnter(DropTargetDragEvent)*

public synchronized void dragEnter(java.awt.dnd.DropTargetDragEvent dtde)

Calls dragEnter on the registered DropTargetListener and passes it the 
specified DropTargetDragEvent. Has no effect if this DropTarget is not active. 

    dtde - the DropTargetDragEvent 

*java.awt.dnd.DropTarget.dragExit(DropTargetEvent)*

public synchronized void dragExit(java.awt.dnd.DropTargetEvent dte)

Calls dragExit on the registered DropTargetListener and passes it the specified 
DropTargetEvent. Has no effect if this DropTarget is not active. 

This method itself does not throw any exception for null parameter but for 
exceptions thrown by the respective method of the listener. 

    dte - the DropTargetEvent 

*java.awt.dnd.DropTarget.dragOver(DropTargetDragEvent)*

public synchronized void dragOver(java.awt.dnd.DropTargetDragEvent dtde)

Calls dragOver on the registered DropTargetListener and passes it the specified 
DropTargetDragEvent. Has no effect if this DropTarget is not active. 

    dtde - the DropTargetDragEvent 

*java.awt.dnd.DropTarget.drop(DropTargetDropEvent)*

public synchronized void drop(java.awt.dnd.DropTargetDropEvent dtde)

Calls drop on the registered DropTargetListener and passes it the specified 
DropTargetDropEvent if this DropTarget is active. 

    dtde - the DropTargetDropEvent 

*java.awt.dnd.DropTarget.dropActionChanged(DropTargetDragEvent)*

public synchronized void dropActionChanged(java.awt.dnd.DropTargetDragEvent dtde)

Calls dropActionChanged on the registered DropTargetListener and passes it the 
specified DropTargetDragEvent. Has no effect if this DropTarget is not active. 

    dtde - the DropTargetDragEvent 

*java.awt.dnd.DropTarget.getComponent()*

public synchronized |java.awt.Component| getComponent()

Gets the Component associated with this DropTarget. 


    Returns: the current Component 
*java.awt.dnd.DropTarget.getDefaultActions()*

public int getDefaultActions()

Gets an int representing the current action(s) supported by this DropTarget. 


    Returns: the current default actions 
*java.awt.dnd.DropTarget.getDropTargetContext()*

public |java.awt.dnd.DropTargetContext| getDropTargetContext()

Gets the DropTargetContext associated with this DropTarget. 


    Returns: the DropTargetContext associated with this DropTarget. 
*java.awt.dnd.DropTarget.getFlavorMap()*

public |java.awt.datatransfer.FlavorMap| getFlavorMap()

Gets the FlavorMap associated with this DropTarget. If no FlavorMap has been 
set for this DropTarget, it is associated with the default FlavorMap. 


    Returns: the FlavorMap for this DropTarget 
*java.awt.dnd.DropTarget.initializeAutoscrolling(Point)*

protected void initializeAutoscrolling(java.awt.Point p)

initialize autoscrolling 

    p - the Point 

*java.awt.dnd.DropTarget.isActive()*

public boolean isActive()

Reports whether or not this DropTarget is currently active (ready to accept 
drops). 


    Returns: true if active, false if not 
*java.awt.dnd.DropTarget.removeDropTargetListener(DropTargetListener)*

public synchronized void removeDropTargetListener(java.awt.dnd.DropTargetListener dtl)

Removes the current DropTargetListener (UNICAST SOURCE). 

    dtl - the DropTargetListener to deregister. 

*java.awt.dnd.DropTarget.removeNotify(ComponentPeer)*

public void removeNotify(java.awt.peer.ComponentPeer peer)

Notify the DropTarget that it has been disassociated from a Component 

This method is usually called from java.awt.Component.removeNotify() of the 
Component associated with this DropTarget to notify the DropTarget that a 
ComponentPeer has been disassociated with that Component. 

Calling this method, other than to notify this DropTarget of the disassociation 
of the ComponentPeer from the Component may result in a malfunction of the DnD 
system. 



    peer - The Peer of the Component we are being disassociated from! 

*java.awt.dnd.DropTarget.setActive(boolean)*

public synchronized void setActive(boolean isActive)

Sets the DropTarget active if true, inactive if false. 

    isActive - sets the DropTarget (in)active. 

*java.awt.dnd.DropTarget.setComponent(Component)*

public synchronized void setComponent(java.awt.Component c)

Note: this interface is required to permit the safe association of a DropTarget 
with a Component in one of two ways, either: 
component.setDropTarget(droptarget); or droptarget.setComponent(component); 

The Component will receive drops only if it is enabled. 

    c - The new Component this DropTarget is to be associated with. 

*java.awt.dnd.DropTarget.setDefaultActions(int)*

public void setDefaultActions(int ops)

Sets the default acceptable actions for this DropTarget 

    ops - the default actions 

*java.awt.dnd.DropTarget.setFlavorMap(FlavorMap)*

public void setFlavorMap(java.awt.datatransfer.FlavorMap fm)

Sets the FlavorMap associated with this DropTarget. 

    fm - the new FlavorMap, or null to associate the default FlavorMap with this 
       DropTarget. 

*java.awt.dnd.DropTarget.updateAutoscroll(Point)*

protected void updateAutoscroll(java.awt.Point dragCursorLocn)

update autoscrolling with current cursor locn 

    dragCursorLocn - the Point 



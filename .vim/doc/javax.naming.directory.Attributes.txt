*javax.naming.directory.Attributes* *Attributes* This interface represents a collection of attributes.

public interface interface Attributes

  implements |java.lang.Cloneable|
             |java.io.Serializable|

|javax.naming.directory.Attributes_Description|
|javax.naming.directory.Attributes_Fields|
|javax.naming.directory.Attributes_Constructors|
|javax.naming.directory.Attributes_Methods|

====================================================================================================================================================================================

*javax.naming.directory.Attributes_Methods*
|javax.naming.directory.Attributes.clone()|Makes a copy of the attribute set.
|javax.naming.directory.Attributes.get(String)|Retrieves the attribute with the given attribute id from the  attribute set.
|javax.naming.directory.Attributes.getAll()|Retrieves an enumeration of the attributes in the attribute set.
|javax.naming.directory.Attributes.getIDs()|Retrieves an enumeration of the ids of the attributes in the  attribute set.
|javax.naming.directory.Attributes.isCaseIgnored()|Determines whether the attribute set ignores the case of  attribute identifiers when retrieving or adding attributes.
|javax.naming.directory.Attributes.put(Attribute)|Adds a new attribute to the attribute set.
|javax.naming.directory.Attributes.put(String,Object)|Adds a new attribute to the attribute set.
|javax.naming.directory.Attributes.remove(String)|Removes the attribute with the attribute id 'attrID' from  the attribute set.
|javax.naming.directory.Attributes.size()|Retrieves the number of attributes in the attribute set.

*javax.naming.directory.Attributes_Description*

This interface represents a collection of attributes. 

In a directory, named objects can have associated with them attributes. The Attributes interface represents a collection of attributes. For example, you can request from the 
directory the attributes associated with an object. Those attributes are returned in an object that implements the Attributes interface. 

Attributes in an object that implements the Attributes interface are unordered. The object can have zero or more attributes. Attributes is either case-sensitive or 
case-insensitive (case-ignore). This property is determined at the time the Attributes object is created. (see BasicAttributes constructor for example). In a case-insensitive 
Attributes, the case of its attribute identifiers is ignored when searching for an attribute, or adding attributes. In a case-sensitive Attributes, the case is significant. 

Note that updates to Attributes (such as adding or removing an attribute) do not affect the corresponding representation in the directory. Updates to the directory can only be 
effected using operations in the DirContext interface. 



*javax.naming.directory.Attributes.clone()*

public |java.lang.Object| clone()

Makes a copy of the attribute set. The new set contains the same attributes as the original set: the attributes are not themselves cloned. Changes to the copy will not affect the 
original and vice versa. 



    Returns: A non-null copy of this attribute set. 

*javax.naming.directory.Attributes.get(String)*

public |javax.naming.directory.Attribute| get(java.lang.String attrID)

Retrieves the attribute with the given attribute id from the attribute set. 


    attrID - The non-null id of the attribute to retrieve. If this attribute set ignores the character case of its attribute ids, the case of attrID is ignored. 

    Returns: The attribute identified by attrID; null if not found. 

*javax.naming.directory.Attributes.getAll()*

public |javax.naming.NamingEnumeration|<? extends javax.naming.directory.Attribute> getAll()

Retrieves an enumeration of the attributes in the attribute set. The effects of updates to this attribute set on this enumeration are undefined. 



    Returns: A non-null enumeration of the attributes in this attribute set. Each element of the enumeration is of class Attribute. If attribute set has zero attributes, an empty enumeration 
             is returned. 

*javax.naming.directory.Attributes.getIDs()*

public |javax.naming.NamingEnumeration|<String> getIDs()

Retrieves an enumeration of the ids of the attributes in the attribute set. The effects of updates to this attribute set on this enumeration are undefined. 



    Returns: A non-null enumeration of the attributes' ids in this attribute set. Each element of the enumeration is of class String. If attribute set has zero attributes, an empty enumeration 
             is returned. 

*javax.naming.directory.Attributes.isCaseIgnored()*

public boolean isCaseIgnored()

Determines whether the attribute set ignores the case of attribute identifiers when retrieving or adding attributes. 



    Returns: true if case is ignored; false otherwise. 

*javax.naming.directory.Attributes.put(Attribute)*

public |javax.naming.directory.Attribute| put(javax.naming.directory.Attribute attr)

Adds a new attribute to the attribute set. 


    attr - The non-null attribute to add. If the attribute set ignores the character case of its attribute ids, the case of attr's identifier is ignored. 

    Returns: The Attribute with the same ID as attr that was previous in this attribute set; null if no such attribute existed. 

*javax.naming.directory.Attributes.put(String,Object)*

public |javax.naming.directory.Attribute| put(
  java.lang.String attrID,
  java.lang.Object val)

Adds a new attribute to the attribute set. 


    attrID - non-null The id of the attribute to add. If the attribute set ignores the character case of its attribute ids, the case of attrID is ignored. 
    val - The possibly null value of the attribute to add. If null, the attribute does not have any values. 

    Returns: The Attribute with attrID that was previous in this attribute set; null if no such attribute existed. 

*javax.naming.directory.Attributes.remove(String)*

public |javax.naming.directory.Attribute| remove(java.lang.String attrID)

Removes the attribute with the attribute id 'attrID' from the attribute set. If the attribute does not exist, ignore. 


    attrID - The non-null id of the attribute to remove. If the attribute set ignores the character case of its attribute ids, the case of attrID is ignored. 

    Returns: The Attribute with the same ID as attrID that was previous in the attribute set; null if no such attribute existed. 

*javax.naming.directory.Attributes.size()*

public int size()

Retrieves the number of attributes in the attribute set. 



    Returns: The nonnegative number of attributes in this attribute set. 



*java.awt.font.GlyphMetrics* *GlyphMetrics* The GlyphMetrics class represents in

public final class GlyphMetrics
  extends    |java.lang.Object|

|java.awt.font.GlyphMetrics_Description|
|java.awt.font.GlyphMetrics_Fields|
|java.awt.font.GlyphMetrics_Constructors|
|java.awt.font.GlyphMetrics_Methods|

================================================================================

*java.awt.font.GlyphMetrics_Fields*
|byte_java.awt.font.GlyphMetrics.COMBINING|
|byte_java.awt.font.GlyphMetrics.COMPONENT|
|byte_java.awt.font.GlyphMetrics.LIGATURE|
|byte_java.awt.font.GlyphMetrics.STANDARD|
|byte_java.awt.font.GlyphMetrics.WHITESPACE|

*java.awt.font.GlyphMetrics_Constructors*
|java.awt.font.GlyphMetrics(boolean,float,float,Rectangle2D,byte)|Constructs a 
|java.awt.font.GlyphMetrics(float,Rectangle2D,byte)|Constructs a GlyphMetrics o

*java.awt.font.GlyphMetrics_Methods*
|java.awt.font.GlyphMetrics.getAdvance()|Returns the advance of the glyph along
|java.awt.font.GlyphMetrics.getAdvanceX()|Returns the x-component of the advanc
|java.awt.font.GlyphMetrics.getAdvanceY()|Returns the y-component of the advanc
|java.awt.font.GlyphMetrics.getBounds2D()|Returns the bounds of the glyph.
|java.awt.font.GlyphMetrics.getLSB()|Returns the left (top) side bearing of the
|java.awt.font.GlyphMetrics.getRSB()|Returns the right (bottom) side bearing of
|java.awt.font.GlyphMetrics.getType()|Returns the raw glyph type code.
|java.awt.font.GlyphMetrics.isCombining()|Returns true if this is a combining g
|java.awt.font.GlyphMetrics.isComponent()|Returns true if this is a component g
|java.awt.font.GlyphMetrics.isLigature()|Returns true if this is a ligature gly
|java.awt.font.GlyphMetrics.isStandard()|Returns true if this is a standard gly
|java.awt.font.GlyphMetrics.isWhitespace()|Returns true if this is a whitespace

*java.awt.font.GlyphMetrics_Description*

The GlyphMetrics class represents infomation for a single glyph. A glyph is the 
visual representation of one or more characters. Many different glyphs can be 
used to represent a single character or combination of characters. GlyphMetrics 
instances are produced by Font(|java.awt.Font|) and are applicable to a 
specific glyph in a particular Font. 

Glyphs are either STANDARD, LIGATURE, COMBINING, or COMPONENT. 

STANDARD glyphs are commonly used to represent single characters. LIGATURE 
glyphs are used to represent sequences of characters. COMPONENT glyphs in a 
(|java.awt.font.GlyphVector|) do not correspond to a particular character in a 
text model. Instead, COMPONENT glyphs are added for typographical reasons, such 
as Arabic justification. COMBINING glyphs embellish STANDARD or LIGATURE 
glyphs, such as accent marks. Carets do not appear before COMBINING glyphs. 

Other metrics available through GlyphMetrics are the components of the advance, 
the visual bounds, and the left and right side bearings. 

Glyphs for a rotated font, or obtained from a GlyphVector which has applied a 
rotation to the glyph, can have advances that contain both X and Y components. 
Usually the advance only has one component. 

The advance of a glyph is the distance from the glyph's origin to the origin of 
the next glyph along the baseline, which is either vertical or horizontal. Note 
that, in a GlyphVector, the distance from a glyph to its following glyph might 
not be the glyph's advance, because of kerning or other positioning 
adjustments. 

The bounds is the smallest rectangle that completely contains the outline of 
the glyph. The bounds rectangle is relative to the glyph's origin. The 
left-side bearing is the distance from the glyph origin to the left of its 
bounds rectangle. If the left-side bearing is negative, part of the glyph is 
drawn to the left of its origin. The right-side bearing is the distance from 
the right side of the bounds rectangle to the next glyph origin (the origin 
plus the advance). If negative, part of the glyph is drawn to the right of the 
next glyph's origin. Note that the bounds does not necessarily enclose all the 
pixels affected when rendering the glyph, because of rasterization and pixel 
adjustment effects. 

Although instances of GlyphMetrics can be directly constructed, they are almost 
always obtained from a GlyphVector. Once constructed, GlyphMetrics objects are 
immutable. 

Example: Querying a Font for glyph information 

Font font = ...; int glyphIndex = ...; GlyphMetrics metrics = 
GlyphVector.getGlyphMetrics(glyphIndex); int isStandard = metrics.isStandard(); 
float glyphAdvance = metrics.getAdvance(); 


*byte_java.awt.font.GlyphMetrics.COMBINING*

The GlyphMetrics class represents infomation for a single glyph. A glyph is the 
visual representation of one or more characters. Many different glyphs can be 
used to represent a single character or combination of characters. GlyphMetrics 
instances are produced by Font(|java.awt.Font|) and are applicable to a 
specific glyph in a particular Font. 

Glyphs are either STANDARD, LIGATURE, COMBINING, or COMPONENT. 

STANDARD glyphs are commonly used to represent single characters. LIGATURE 
glyphs are used to represent sequences of characters. COMPONENT glyphs in a 
(|java.awt.font.GlyphVector|) do not correspond to a particular character in a 
text model. Instead, COMPONENT glyphs are added for typographical reasons, such 
as Arabic justification. COMBINING glyphs embellish STANDARD or LIGATURE 
glyphs, such as accent marks. Carets do not appear before COMBINING glyphs. 

Other metrics available through GlyphMetrics are the components of the advance, 
the visual bounds, and the left and right side bearings. 

Glyphs for a rotated font, or obtained from a GlyphVector which has applied a 
rotation to the glyph, can have advances that contain both X and Y components. 
Usually the advance only has one component. 

The advance of a glyph is the distance from the glyph's origin to the origin of 
the next glyph along the baseline, which is either vertical or horizontal. Note 
that, in a GlyphVector, the distance from a glyph to its following glyph might 
not be the glyph's advance, because of kerning or other positioning 
adjustments. 

The bounds is the smallest rectangle that completely contains the outline of 
the glyph. The bounds rectangle is relative to the glyph's origin. The 
left-side bearing is the distance from the glyph origin to the left of its 
bounds rectangle. If the left-side bearing is negative, part of the glyph is 
drawn to the left of its origin. The right-side bearing is the distance from 
the right side of the bounds rectangle to the next glyph origin (the origin 
plus the advance). If negative, part of the glyph is drawn to the right of the 
next glyph's origin. Note that the bounds does not necessarily enclose all the 
pixels affected when rendering the glyph, because of rasterization and pixel 
adjustment effects. 

Although instances of GlyphMetrics can be directly constructed, they are almost 
always obtained from a GlyphVector. Once constructed, GlyphMetrics objects are 
immutable. 

Example: Querying a Font for glyph information 

Font font = ...; int glyphIndex = ...; GlyphMetrics metrics = 
GlyphVector.getGlyphMetrics(glyphIndex); int isStandard = metrics.isStandard(); 
float glyphAdvance = metrics.getAdvance(); 


*byte_java.awt.font.GlyphMetrics.COMPONENT*

The GlyphMetrics class represents infomation for a single glyph. A glyph is the 
visual representation of one or more characters. Many different glyphs can be 
used to represent a single character or combination of characters. GlyphMetrics 
instances are produced by Font(|java.awt.Font|) and are applicable to a 
specific glyph in a particular Font. 

Glyphs are either STANDARD, LIGATURE, COMBINING, or COMPONENT. 

STANDARD glyphs are commonly used to represent single characters. LIGATURE 
glyphs are used to represent sequences of characters. COMPONENT glyphs in a 
(|java.awt.font.GlyphVector|) do not correspond to a particular character in a 
text model. Instead, COMPONENT glyphs are added for typographical reasons, such 
as Arabic justification. COMBINING glyphs embellish STANDARD or LIGATURE 
glyphs, such as accent marks. Carets do not appear before COMBINING glyphs. 

Other metrics available through GlyphMetrics are the components of the advance, 
the visual bounds, and the left and right side bearings. 

Glyphs for a rotated font, or obtained from a GlyphVector which has applied a 
rotation to the glyph, can have advances that contain both X and Y components. 
Usually the advance only has one component. 

The advance of a glyph is the distance from the glyph's origin to the origin of 
the next glyph along the baseline, which is either vertical or horizontal. Note 
that, in a GlyphVector, the distance from a glyph to its following glyph might 
not be the glyph's advance, because of kerning or other positioning 
adjustments. 

The bounds is the smallest rectangle that completely contains the outline of 
the glyph. The bounds rectangle is relative to the glyph's origin. The 
left-side bearing is the distance from the glyph origin to the left of its 
bounds rectangle. If the left-side bearing is negative, part of the glyph is 
drawn to the left of its origin. The right-side bearing is the distance from 
the right side of the bounds rectangle to the next glyph origin (the origin 
plus the advance). If negative, part of the glyph is drawn to the right of the 
next glyph's origin. Note that the bounds does not necessarily enclose all the 
pixels affected when rendering the glyph, because of rasterization and pixel 
adjustment effects. 

Although instances of GlyphMetrics can be directly constructed, they are almost 
always obtained from a GlyphVector. Once constructed, GlyphMetrics objects are 
immutable. 

Example: Querying a Font for glyph information 

Font font = ...; int glyphIndex = ...; GlyphMetrics metrics = 
GlyphVector.getGlyphMetrics(glyphIndex); int isStandard = metrics.isStandard(); 
float glyphAdvance = metrics.getAdvance(); 


*byte_java.awt.font.GlyphMetrics.LIGATURE*

The GlyphMetrics class represents infomation for a single glyph. A glyph is the 
visual representation of one or more characters. Many different glyphs can be 
used to represent a single character or combination of characters. GlyphMetrics 
instances are produced by Font(|java.awt.Font|) and are applicable to a 
specific glyph in a particular Font. 

Glyphs are either STANDARD, LIGATURE, COMBINING, or COMPONENT. 

STANDARD glyphs are commonly used to represent single characters. LIGATURE 
glyphs are used to represent sequences of characters. COMPONENT glyphs in a 
(|java.awt.font.GlyphVector|) do not correspond to a particular character in a 
text model. Instead, COMPONENT glyphs are added for typographical reasons, such 
as Arabic justification. COMBINING glyphs embellish STANDARD or LIGATURE 
glyphs, such as accent marks. Carets do not appear before COMBINING glyphs. 

Other metrics available through GlyphMetrics are the components of the advance, 
the visual bounds, and the left and right side bearings. 

Glyphs for a rotated font, or obtained from a GlyphVector which has applied a 
rotation to the glyph, can have advances that contain both X and Y components. 
Usually the advance only has one component. 

The advance of a glyph is the distance from the glyph's origin to the origin of 
the next glyph along the baseline, which is either vertical or horizontal. Note 
that, in a GlyphVector, the distance from a glyph to its following glyph might 
not be the glyph's advance, because of kerning or other positioning 
adjustments. 

The bounds is the smallest rectangle that completely contains the outline of 
the glyph. The bounds rectangle is relative to the glyph's origin. The 
left-side bearing is the distance from the glyph origin to the left of its 
bounds rectangle. If the left-side bearing is negative, part of the glyph is 
drawn to the left of its origin. The right-side bearing is the distance from 
the right side of the bounds rectangle to the next glyph origin (the origin 
plus the advance). If negative, part of the glyph is drawn to the right of the 
next glyph's origin. Note that the bounds does not necessarily enclose all the 
pixels affected when rendering the glyph, because of rasterization and pixel 
adjustment effects. 

Although instances of GlyphMetrics can be directly constructed, they are almost 
always obtained from a GlyphVector. Once constructed, GlyphMetrics objects are 
immutable. 

Example: Querying a Font for glyph information 

Font font = ...; int glyphIndex = ...; GlyphMetrics metrics = 
GlyphVector.getGlyphMetrics(glyphIndex); int isStandard = metrics.isStandard(); 
float glyphAdvance = metrics.getAdvance(); 


*byte_java.awt.font.GlyphMetrics.STANDARD*

The GlyphMetrics class represents infomation for a single glyph. A glyph is the 
visual representation of one or more characters. Many different glyphs can be 
used to represent a single character or combination of characters. GlyphMetrics 
instances are produced by Font(|java.awt.Font|) and are applicable to a 
specific glyph in a particular Font. 

Glyphs are either STANDARD, LIGATURE, COMBINING, or COMPONENT. 

STANDARD glyphs are commonly used to represent single characters. LIGATURE 
glyphs are used to represent sequences of characters. COMPONENT glyphs in a 
(|java.awt.font.GlyphVector|) do not correspond to a particular character in a 
text model. Instead, COMPONENT glyphs are added for typographical reasons, such 
as Arabic justification. COMBINING glyphs embellish STANDARD or LIGATURE 
glyphs, such as accent marks. Carets do not appear before COMBINING glyphs. 

Other metrics available through GlyphMetrics are the components of the advance, 
the visual bounds, and the left and right side bearings. 

Glyphs for a rotated font, or obtained from a GlyphVector which has applied a 
rotation to the glyph, can have advances that contain both X and Y components. 
Usually the advance only has one component. 

The advance of a glyph is the distance from the glyph's origin to the origin of 
the next glyph along the baseline, which is either vertical or horizontal. Note 
that, in a GlyphVector, the distance from a glyph to its following glyph might 
not be the glyph's advance, because of kerning or other positioning 
adjustments. 

The bounds is the smallest rectangle that completely contains the outline of 
the glyph. The bounds rectangle is relative to the glyph's origin. The 
left-side bearing is the distance from the glyph origin to the left of its 
bounds rectangle. If the left-side bearing is negative, part of the glyph is 
drawn to the left of its origin. The right-side bearing is the distance from 
the right side of the bounds rectangle to the next glyph origin (the origin 
plus the advance). If negative, part of the glyph is drawn to the right of the 
next glyph's origin. Note that the bounds does not necessarily enclose all the 
pixels affected when rendering the glyph, because of rasterization and pixel 
adjustment effects. 

Although instances of GlyphMetrics can be directly constructed, they are almost 
always obtained from a GlyphVector. Once constructed, GlyphMetrics objects are 
immutable. 

Example: Querying a Font for glyph information 

Font font = ...; int glyphIndex = ...; GlyphMetrics metrics = 
GlyphVector.getGlyphMetrics(glyphIndex); int isStandard = metrics.isStandard(); 
float glyphAdvance = metrics.getAdvance(); 


*byte_java.awt.font.GlyphMetrics.WHITESPACE*

The GlyphMetrics class represents infomation for a single glyph. A glyph is the 
visual representation of one or more characters. Many different glyphs can be 
used to represent a single character or combination of characters. GlyphMetrics 
instances are produced by Font(|java.awt.Font|) and are applicable to a 
specific glyph in a particular Font. 

Glyphs are either STANDARD, LIGATURE, COMBINING, or COMPONENT. 

STANDARD glyphs are commonly used to represent single characters. LIGATURE 
glyphs are used to represent sequences of characters. COMPONENT glyphs in a 
(|java.awt.font.GlyphVector|) do not correspond to a particular character in a 
text model. Instead, COMPONENT glyphs are added for typographical reasons, such 
as Arabic justification. COMBINING glyphs embellish STANDARD or LIGATURE 
glyphs, such as accent marks. Carets do not appear before COMBINING glyphs. 

Other metrics available through GlyphMetrics are the components of the advance, 
the visual bounds, and the left and right side bearings. 

Glyphs for a rotated font, or obtained from a GlyphVector which has applied a 
rotation to the glyph, can have advances that contain both X and Y components. 
Usually the advance only has one component. 

The advance of a glyph is the distance from the glyph's origin to the origin of 
the next glyph along the baseline, which is either vertical or horizontal. Note 
that, in a GlyphVector, the distance from a glyph to its following glyph might 
not be the glyph's advance, because of kerning or other positioning 
adjustments. 

The bounds is the smallest rectangle that completely contains the outline of 
the glyph. The bounds rectangle is relative to the glyph's origin. The 
left-side bearing is the distance from the glyph origin to the left of its 
bounds rectangle. If the left-side bearing is negative, part of the glyph is 
drawn to the left of its origin. The right-side bearing is the distance from 
the right side of the bounds rectangle to the next glyph origin (the origin 
plus the advance). If negative, part of the glyph is drawn to the right of the 
next glyph's origin. Note that the bounds does not necessarily enclose all the 
pixels affected when rendering the glyph, because of rasterization and pixel 
adjustment effects. 

Although instances of GlyphMetrics can be directly constructed, they are almost 
always obtained from a GlyphVector. Once constructed, GlyphMetrics objects are 
immutable. 

Example: Querying a Font for glyph information 

Font font = ...; int glyphIndex = ...; GlyphMetrics metrics = 
GlyphVector.getGlyphMetrics(glyphIndex); int isStandard = metrics.isStandard(); 
float glyphAdvance = metrics.getAdvance(); 



*java.awt.font.GlyphMetrics(boolean,float,float,Rectangle2D,byte)*

public GlyphMetrics(
  boolean horizontal,
  float advanceX,
  float advanceY,
  java.awt.geom.Rectangle2D bounds,
  byte glyphType)

Constructs a GlyphMetrics object. 

    horizontal - if true, metrics are for a horizontal baseline, otherwise they are for a 
       vertical baseline 
    advanceX - the X-component of the glyph's advance 
    advanceY - the Y-component of the glyph's advance 
    bounds - the visual bounds of the glyph 
    glyphType - the type of the glyph 

*java.awt.font.GlyphMetrics(float,Rectangle2D,byte)*

public GlyphMetrics(
  float advance,
  java.awt.geom.Rectangle2D bounds,
  byte glyphType)

Constructs a GlyphMetrics object. 

    advance - the advance width of the glyph 
    bounds - the black box bounds of the glyph 
    glyphType - the type of the glyph 

*java.awt.font.GlyphMetrics.getAdvance()*

public float getAdvance()

Returns the advance of the glyph along the baseline (either horizontal or 
vertical). 


    Returns: the advance of the glyph 
*java.awt.font.GlyphMetrics.getAdvanceX()*

public float getAdvanceX()

Returns the x-component of the advance of the glyph. 


    Returns: the x-component of the advance of the glyph 
*java.awt.font.GlyphMetrics.getAdvanceY()*

public float getAdvanceY()

Returns the y-component of the advance of the glyph. 


    Returns: the y-component of the advance of the glyph 
*java.awt.font.GlyphMetrics.getBounds2D()*

public |java.awt.geom.Rectangle2D| getBounds2D()

Returns the bounds of the glyph. This is the bounding box of the glyph outline. 
Because of rasterization and pixel alignment effects, it does not necessarily 
enclose the pixels that are affected when rendering the glyph. 


    Returns: a {@link Rectangle2D} that is the bounds of the glyph. 
*java.awt.font.GlyphMetrics.getLSB()*

public float getLSB()

Returns the left (top) side bearing of the glyph. 

This is the distance from 0,0 to the left (top) of the glyph bounds. If the 
bounds of the glyph is to the left of (above) the origin, the LSB is negative. 


    Returns: the left side bearing of the glyph. 
*java.awt.font.GlyphMetrics.getRSB()*

public float getRSB()

Returns the right (bottom) side bearing of the glyph. 

This is the distance from the right (bottom) of the glyph bounds to the 
advance. If the bounds of the glyph is to the right of (below) the advance, the 
RSB is negative. 


    Returns: the right side bearing of the glyph. 
*java.awt.font.GlyphMetrics.getType()*

public int getType()

Returns the raw glyph type code. 


    Returns: the raw glyph type code. 
*java.awt.font.GlyphMetrics.isCombining()*

public boolean isCombining()

Returns true if this is a combining glyph. 


    Returns: true if this is a combining glyph; false otherwise. 
*java.awt.font.GlyphMetrics.isComponent()*

public boolean isComponent()

Returns true if this is a component glyph. 


    Returns: true if this is a component glyph; false otherwise. 
*java.awt.font.GlyphMetrics.isLigature()*

public boolean isLigature()

Returns true if this is a ligature glyph. 


    Returns: true if this is a ligature glyph; false otherwise. 
*java.awt.font.GlyphMetrics.isStandard()*

public boolean isStandard()

Returns true if this is a standard glyph. 


    Returns: true if this is a standard glyph; false otherwise. 
*java.awt.font.GlyphMetrics.isWhitespace()*

public boolean isWhitespace()

Returns true if this is a whitespace glyph. 


    Returns: true if this is a whitespace glyph; false otherwise. 


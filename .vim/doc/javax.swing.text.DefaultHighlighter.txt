*javax.swing.text.DefaultHighlighter* *DefaultHighlighter* Implements the Highli

public class DefaultHighlighter
  extends    |javax.swing.text.LayeredHighlighter|

|javax.swing.text.DefaultHighlighter_Description|
|javax.swing.text.DefaultHighlighter_Fields|
|javax.swing.text.DefaultHighlighter_Constructors|
|javax.swing.text.DefaultHighlighter_Methods|

================================================================================

*javax.swing.text.DefaultHighlighter_Fields*
|javax.swing.text.LayeredHighlighter.LayerPainter_javax.swing.text.DefaultHighlighter.DefaultPainter|

*javax.swing.text.DefaultHighlighter_Constructors*
|javax.swing.text.DefaultHighlighter()|Creates a new DefaultHighlighther object

*javax.swing.text.DefaultHighlighter_Methods*
|javax.swing.text.DefaultHighlighter.addHighlight(int,int,Highlighter.HighlightPainter)|
|javax.swing.text.DefaultHighlighter.changeHighlight(Object,int,int)|Changes a 
|javax.swing.text.DefaultHighlighter.deinstall(JTextComponent)|Called when the 
|javax.swing.text.DefaultHighlighter.getDrawsLayeredHighlights()|
|javax.swing.text.DefaultHighlighter.getHighlights()|Makes a copy of the highli
|javax.swing.text.DefaultHighlighter.install(JTextComponent)|Called when the UI
|javax.swing.text.DefaultHighlighter.paint(Graphics)|Renders the highlights.
|javax.swing.text.DefaultHighlighter.paintLayeredHighlights(Graphics,int,int,Shape,JTextComponent,View)|
|javax.swing.text.DefaultHighlighter.removeAllHighlights()|Removes all highligh
|javax.swing.text.DefaultHighlighter.removeHighlight(Object)|Removes a highligh
|javax.swing.text.DefaultHighlighter.setDrawsLayeredHighlights(boolean)|If true

*javax.swing.text.DefaultHighlighter_Description*

Implements the Highlighter interfaces. Implements a simple highlight painter 
that renders in a solid color. 


*javax.swing.text.LayeredHighlighter.LayerPainter_javax.swing.text.DefaultHighlighter.DefaultPainter*

Implements the Highlighter interfaces. Implements a simple highlight painter 
that renders in a solid color. 



*javax.swing.text.DefaultHighlighter()*

public DefaultHighlighter()

Creates a new DefaultHighlighther object. 


*javax.swing.text.DefaultHighlighter.addHighlight(int,int,Highlighter.HighlightPainter)*

public |java.lang.Object| addHighlight(
  int p0,
  int p1,
  javax.swing.text.Highlighter.HighlightPainter p)
  throws |javax.swing.text.BadLocationException|
         
Adds a highlight to the view. Returns a tag that can be used to refer to the 
highlight. 

    p0 - the start offset of the range to highlight >= 0 
    p1 - the end offset of the range to highlight >= p0 
    p - the painter to use to actually render the highlight 

    Returns: an object that can be used as a tag to refer to the highlight 
*javax.swing.text.DefaultHighlighter.changeHighlight(Object,int,int)*

public void changeHighlight(
  java.lang.Object tag,
  int p0,
  int p1)
  throws |javax.swing.text.BadLocationException|
         
Changes a highlight. 

    tag - the highlight tag 
    p0 - the beginning of the range >= 0 
    p1 - the end of the range >= p0 

*javax.swing.text.DefaultHighlighter.deinstall(JTextComponent)*

public void deinstall(javax.swing.text.JTextComponent c)

Called when the UI is being removed from the interface of a JTextComponent. 

    c - the component 

*javax.swing.text.DefaultHighlighter.getDrawsLayeredHighlights()*

public boolean getDrawsLayeredHighlights()




*javax.swing.text.DefaultHighlighter.getHighlights()*

public |javax.swing.text.Highlighter.Highlight| getHighlights()

Makes a copy of the highlights. Does not actually clone each highlight, but 
only makes references to them. 


    Returns: 
*javax.swing.text.DefaultHighlighter.install(JTextComponent)*

public void install(javax.swing.text.JTextComponent c)

Called when the UI is being installed into the interface of a JTextComponent. 
Installs the editor, and removes any existing highlights. 

    c - the editor component 

*javax.swing.text.DefaultHighlighter.paint(Graphics)*

public void paint(java.awt.Graphics g)

Renders the highlights. 

    g - the graphics context 

*javax.swing.text.DefaultHighlighter.paintLayeredHighlights(Graphics,int,int,Shape,JTextComponent,View)*

public void paintLayeredHighlights(
  java.awt.Graphics g,
  int p0,
  int p1,
  java.awt.Shape viewBounds,
  javax.swing.text.JTextComponent editor,
  javax.swing.text.View view)

When leaf Views (such as LabelView) are rendering they should call into this 
method. If a highlight is in the given region it will be drawn immediately. 

    g - Graphics used to draw 
    p0 - starting offset of view 
    p1 - ending offset of view 
    viewBounds - Bounds of View 
    editor - JTextComponent 
    view - View instance being rendered 

*javax.swing.text.DefaultHighlighter.removeAllHighlights()*

public void removeAllHighlights()

Removes all highlights. 


*javax.swing.text.DefaultHighlighter.removeHighlight(Object)*

public void removeHighlight(java.lang.Object tag)

Removes a highlight from the view. 

    tag - the reference to the highlight 

*javax.swing.text.DefaultHighlighter.setDrawsLayeredHighlights(boolean)*

public void setDrawsLayeredHighlights(boolean newValue)

If true, highlights are drawn as the Views draw the text. That is the Views 
will call into paintLayeredHighlight which will result in a rectangle being 
drawn before the text is drawn (if the offsets are in a highlighted region that 
is). For this to work the painter supplied must be an instance of 
LayeredHighlightPainter. 




*java.lang.SuppressWarnings* *SuppressWarnings* Indicates that the named compile

public interface interface SuppressWarnings

  implements |java.lang.annotation.Annotation|

|java.lang.SuppressWarnings_Description|
|java.lang.SuppressWarnings_Fields|
|java.lang.SuppressWarnings_Constructors|
|java.lang.SuppressWarnings_Methods|

================================================================================

*java.lang.SuppressWarnings_Methods*
|java.lang.SuppressWarnings.value()|The set of warnings that are to be suppress

*java.lang.SuppressWarnings_Description*

Indicates that the named compiler warnings should be suppressed in the 
annotated element (and in all program elements contained in the annotated 
element). Note that the set of warnings suppressed in a given element is a 
superset of the warnings suppressed in all containing elements. For example, if 
you annotate a class to suppress one warning and annotate a method to suppress 
another, both warnings will be suppressed in the method. 

As a matter of style, programmers should always use this annotation on the most 
deeply nested element where it is effective. If you want to suppress a warning 
in a particular method, you should annotate that method rather than its class. 


*java.lang.SuppressWarnings.value()*

public |java.lang.String| value()

The set of warnings that are to be suppressed by the compiler in the annotated 
element. Duplicate names are permitted. The second and successive occurrences 
of a name are ignored. The presence of unrecognized warning names is not an 
error: Compilers must ignore any warning names they do not recognize. They are, 
however, free to emit a warning if an annotation contains an unrecognized 
warning name. 

Compiler vendors should document the warning names they support in conjunction 
with this annotation type. They are encouraged to cooperate to ensure that the 
same names work across multiple compilers. 




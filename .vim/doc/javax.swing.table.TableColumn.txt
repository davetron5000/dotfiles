*javax.swing.table.TableColumn* *TableColumn* A TableColumn represents all the a

public class TableColumn
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|javax.swing.table.TableColumn_Description|
|javax.swing.table.TableColumn_Fields|
|javax.swing.table.TableColumn_Constructors|
|javax.swing.table.TableColumn_Methods|

================================================================================

*javax.swing.table.TableColumn_Fields*
|java.lang.String_javax.swing.table.TableColumn.CELL_RENDERER_PROPERTY|
|javax.swing.table.TableCellEditor_javax.swing.table.TableColumn.cellEditor|
|javax.swing.table.TableCellRenderer_javax.swing.table.TableColumn.cellRenderer|
|java.lang.String_javax.swing.table.TableColumn.COLUMN_WIDTH_PROPERTY|
|java.lang.String_javax.swing.table.TableColumn.HEADER_RENDERER_PROPERTY|
|java.lang.String_javax.swing.table.TableColumn.HEADER_VALUE_PROPERTY|
|javax.swing.table.TableCellRenderer_javax.swing.table.TableColumn.headerRenderer|
|java.lang.Object_javax.swing.table.TableColumn.headerValue|
|java.lang.Object_javax.swing.table.TableColumn.identifier|
|boolean_javax.swing.table.TableColumn.isResizable|
|int_javax.swing.table.TableColumn.maxWidth|
|int_javax.swing.table.TableColumn.minWidth|
|int_javax.swing.table.TableColumn.modelIndex|
|int_javax.swing.table.TableColumn.resizedPostingDisableCount|
|int_javax.swing.table.TableColumn.width|

*javax.swing.table.TableColumn_Constructors*
|javax.swing.table.TableColumn()|Cover method, using a default model index of 0
|javax.swing.table.TableColumn(int)|Cover method, using a default width of 75, 
|javax.swing.table.TableColumn(int,int)|Cover method, using a null renderer and
|javax.swing.table.TableColumn(int,int,TableCellRenderer,TableCellEditor)|Creat

*javax.swing.table.TableColumn_Methods*
|javax.swing.table.TableColumn.addPropertyChangeListener(PropertyChangeListener)|
|javax.swing.table.TableColumn.createDefaultHeaderRenderer()|As of Java 2 platf
|javax.swing.table.TableColumn.disableResizedPosting()|This field was not used 
|javax.swing.table.TableColumn.enableResizedPosting()|This field was not used i
|javax.swing.table.TableColumn.getCellEditor()|Returns the TableCellEditor used
|javax.swing.table.TableColumn.getCellRenderer()|Returns the TableCellRenderer 
|javax.swing.table.TableColumn.getHeaderRenderer()|Returns the TableCellRendere
|javax.swing.table.TableColumn.getHeaderValue()|Returns the Object used as the 
|javax.swing.table.TableColumn.getIdentifier()|Returns the identifier object fo
|javax.swing.table.TableColumn.getMaxWidth()|Returns the maximum width for the 
|javax.swing.table.TableColumn.getMinWidth()|Returns the minimum width for the 
|javax.swing.table.TableColumn.getModelIndex()|Returns the model index for this
|javax.swing.table.TableColumn.getPreferredWidth()|Returns the preferred width 
|javax.swing.table.TableColumn.getPropertyChangeListeners()|Returns an array of
|javax.swing.table.TableColumn.getResizable()|Returns true if the user is allow
|javax.swing.table.TableColumn.getWidth()|Returns the width of the TableColumn.
|javax.swing.table.TableColumn.removePropertyChangeListener(PropertyChangeListener)|
|javax.swing.table.TableColumn.setCellEditor(TableCellEditor)|Sets the editor t
|javax.swing.table.TableColumn.setCellRenderer(TableCellRenderer)|Sets the Tabl
|javax.swing.table.TableColumn.setHeaderRenderer(TableCellRenderer)|Sets the Ta
|javax.swing.table.TableColumn.setHeaderValue(Object)|Sets the Object whose str
|javax.swing.table.TableColumn.setIdentifier(Object)|Sets the TableColumn's ide
|javax.swing.table.TableColumn.setMaxWidth(int)|Sets the TableColumn's maximum 
|javax.swing.table.TableColumn.setMinWidth(int)|Sets the TableColumn's minimum 
|javax.swing.table.TableColumn.setModelIndex(int)|Sets the model index for this
|javax.swing.table.TableColumn.setPreferredWidth(int)|Sets this column's prefer
|javax.swing.table.TableColumn.setResizable(boolean)|Sets whether this column c
|javax.swing.table.TableColumn.setWidth(int)|This method should not be used to 
|javax.swing.table.TableColumn.sizeWidthToFit()|Resizes the TableColumn to fit 

*javax.swing.table.TableColumn_Description*

A TableColumn represents all the attributes of a column in a JTable, such as 
width, resizibility, minimum and maximum width. In addition, the TableColumn 
provides slots for a renderer and an editor that can be used to display and 
edit the values in this column. 

It is also possible to specify renderers and editors on a per type basis rather 
than a per column basis - see the setDefaultRenderer method in the JTable 
class. This default mechanism is only used when the renderer (or editor) in the 
TableColumn is null. 

The TableColumn stores the link between the columns in the JTable and the 
columns in the TableModel. The modelIndex is the column in the TableModel, 
which will be queried for the data values for the cells in this column. As the 
column moves around in the view this modelIndex does not change. 

Note: Some implementations may assume that all TableColumnModels are unique, 
therefore we would recommend that the same TableColumn instance not be added 
more than once to a TableColumnModel. To show TableColumns with the same column 
of data from the model, create a new instance with the same modelIndex. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.table.TableColumn.CELL_RENDERER_PROPERTY*

A TableColumn represents all the attributes of a column in a JTable, such as 
width, resizibility, minimum and maximum width. In addition, the TableColumn 
provides slots for a renderer and an editor that can be used to display and 
edit the values in this column. 

It is also possible to specify renderers and editors on a per type basis rather 
than a per column basis - see the setDefaultRenderer method in the JTable 
class. This default mechanism is only used when the renderer (or editor) in the 
TableColumn is null. 

The TableColumn stores the link between the columns in the JTable and the 
columns in the TableModel. The modelIndex is the column in the TableModel, 
which will be queried for the data values for the cells in this column. As the 
column moves around in the view this modelIndex does not change. 

Note: Some implementations may assume that all TableColumnModels are unique, 
therefore we would recommend that the same TableColumn instance not be added 
more than once to a TableColumnModel. To show TableColumns with the same column 
of data from the model, create a new instance with the same modelIndex. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.table.TableCellEditor_javax.swing.table.TableColumn.cellEditor*

A TableColumn represents all the attributes of a column in a JTable, such as 
width, resizibility, minimum and maximum width. In addition, the TableColumn 
provides slots for a renderer and an editor that can be used to display and 
edit the values in this column. 

It is also possible to specify renderers and editors on a per type basis rather 
than a per column basis - see the setDefaultRenderer method in the JTable 
class. This default mechanism is only used when the renderer (or editor) in the 
TableColumn is null. 

The TableColumn stores the link between the columns in the JTable and the 
columns in the TableModel. The modelIndex is the column in the TableModel, 
which will be queried for the data values for the cells in this column. As the 
column moves around in the view this modelIndex does not change. 

Note: Some implementations may assume that all TableColumnModels are unique, 
therefore we would recommend that the same TableColumn instance not be added 
more than once to a TableColumnModel. To show TableColumns with the same column 
of data from the model, create a new instance with the same modelIndex. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.table.TableCellRenderer_javax.swing.table.TableColumn.cellRenderer*

A TableColumn represents all the attributes of a column in a JTable, such as 
width, resizibility, minimum and maximum width. In addition, the TableColumn 
provides slots for a renderer and an editor that can be used to display and 
edit the values in this column. 

It is also possible to specify renderers and editors on a per type basis rather 
than a per column basis - see the setDefaultRenderer method in the JTable 
class. This default mechanism is only used when the renderer (or editor) in the 
TableColumn is null. 

The TableColumn stores the link between the columns in the JTable and the 
columns in the TableModel. The modelIndex is the column in the TableModel, 
which will be queried for the data values for the cells in this column. As the 
column moves around in the view this modelIndex does not change. 

Note: Some implementations may assume that all TableColumnModels are unique, 
therefore we would recommend that the same TableColumn instance not be added 
more than once to a TableColumnModel. To show TableColumns with the same column 
of data from the model, create a new instance with the same modelIndex. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.table.TableColumn.COLUMN_WIDTH_PROPERTY*

A TableColumn represents all the attributes of a column in a JTable, such as 
width, resizibility, minimum and maximum width. In addition, the TableColumn 
provides slots for a renderer and an editor that can be used to display and 
edit the values in this column. 

It is also possible to specify renderers and editors on a per type basis rather 
than a per column basis - see the setDefaultRenderer method in the JTable 
class. This default mechanism is only used when the renderer (or editor) in the 
TableColumn is null. 

The TableColumn stores the link between the columns in the JTable and the 
columns in the TableModel. The modelIndex is the column in the TableModel, 
which will be queried for the data values for the cells in this column. As the 
column moves around in the view this modelIndex does not change. 

Note: Some implementations may assume that all TableColumnModels are unique, 
therefore we would recommend that the same TableColumn instance not be added 
more than once to a TableColumnModel. To show TableColumns with the same column 
of data from the model, create a new instance with the same modelIndex. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.table.TableColumn.HEADER_RENDERER_PROPERTY*

A TableColumn represents all the attributes of a column in a JTable, such as 
width, resizibility, minimum and maximum width. In addition, the TableColumn 
provides slots for a renderer and an editor that can be used to display and 
edit the values in this column. 

It is also possible to specify renderers and editors on a per type basis rather 
than a per column basis - see the setDefaultRenderer method in the JTable 
class. This default mechanism is only used when the renderer (or editor) in the 
TableColumn is null. 

The TableColumn stores the link between the columns in the JTable and the 
columns in the TableModel. The modelIndex is the column in the TableModel, 
which will be queried for the data values for the cells in this column. As the 
column moves around in the view this modelIndex does not change. 

Note: Some implementations may assume that all TableColumnModels are unique, 
therefore we would recommend that the same TableColumn instance not be added 
more than once to a TableColumnModel. To show TableColumns with the same column 
of data from the model, create a new instance with the same modelIndex. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.table.TableColumn.HEADER_VALUE_PROPERTY*

A TableColumn represents all the attributes of a column in a JTable, such as 
width, resizibility, minimum and maximum width. In addition, the TableColumn 
provides slots for a renderer and an editor that can be used to display and 
edit the values in this column. 

It is also possible to specify renderers and editors on a per type basis rather 
than a per column basis - see the setDefaultRenderer method in the JTable 
class. This default mechanism is only used when the renderer (or editor) in the 
TableColumn is null. 

The TableColumn stores the link between the columns in the JTable and the 
columns in the TableModel. The modelIndex is the column in the TableModel, 
which will be queried for the data values for the cells in this column. As the 
column moves around in the view this modelIndex does not change. 

Note: Some implementations may assume that all TableColumnModels are unique, 
therefore we would recommend that the same TableColumn instance not be added 
more than once to a TableColumnModel. To show TableColumns with the same column 
of data from the model, create a new instance with the same modelIndex. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.table.TableCellRenderer_javax.swing.table.TableColumn.headerRenderer*

A TableColumn represents all the attributes of a column in a JTable, such as 
width, resizibility, minimum and maximum width. In addition, the TableColumn 
provides slots for a renderer and an editor that can be used to display and 
edit the values in this column. 

It is also possible to specify renderers and editors on a per type basis rather 
than a per column basis - see the setDefaultRenderer method in the JTable 
class. This default mechanism is only used when the renderer (or editor) in the 
TableColumn is null. 

The TableColumn stores the link between the columns in the JTable and the 
columns in the TableModel. The modelIndex is the column in the TableModel, 
which will be queried for the data values for the cells in this column. As the 
column moves around in the view this modelIndex does not change. 

Note: Some implementations may assume that all TableColumnModels are unique, 
therefore we would recommend that the same TableColumn instance not be added 
more than once to a TableColumnModel. To show TableColumns with the same column 
of data from the model, create a new instance with the same modelIndex. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.Object_javax.swing.table.TableColumn.headerValue*

A TableColumn represents all the attributes of a column in a JTable, such as 
width, resizibility, minimum and maximum width. In addition, the TableColumn 
provides slots for a renderer and an editor that can be used to display and 
edit the values in this column. 

It is also possible to specify renderers and editors on a per type basis rather 
than a per column basis - see the setDefaultRenderer method in the JTable 
class. This default mechanism is only used when the renderer (or editor) in the 
TableColumn is null. 

The TableColumn stores the link between the columns in the JTable and the 
columns in the TableModel. The modelIndex is the column in the TableModel, 
which will be queried for the data values for the cells in this column. As the 
column moves around in the view this modelIndex does not change. 

Note: Some implementations may assume that all TableColumnModels are unique, 
therefore we would recommend that the same TableColumn instance not be added 
more than once to a TableColumnModel. To show TableColumns with the same column 
of data from the model, create a new instance with the same modelIndex. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.Object_javax.swing.table.TableColumn.identifier*

A TableColumn represents all the attributes of a column in a JTable, such as 
width, resizibility, minimum and maximum width. In addition, the TableColumn 
provides slots for a renderer and an editor that can be used to display and 
edit the values in this column. 

It is also possible to specify renderers and editors on a per type basis rather 
than a per column basis - see the setDefaultRenderer method in the JTable 
class. This default mechanism is only used when the renderer (or editor) in the 
TableColumn is null. 

The TableColumn stores the link between the columns in the JTable and the 
columns in the TableModel. The modelIndex is the column in the TableModel, 
which will be queried for the data values for the cells in this column. As the 
column moves around in the view this modelIndex does not change. 

Note: Some implementations may assume that all TableColumnModels are unique, 
therefore we would recommend that the same TableColumn instance not be added 
more than once to a TableColumnModel. To show TableColumns with the same column 
of data from the model, create a new instance with the same modelIndex. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*boolean_javax.swing.table.TableColumn.isResizable*

A TableColumn represents all the attributes of a column in a JTable, such as 
width, resizibility, minimum and maximum width. In addition, the TableColumn 
provides slots for a renderer and an editor that can be used to display and 
edit the values in this column. 

It is also possible to specify renderers and editors on a per type basis rather 
than a per column basis - see the setDefaultRenderer method in the JTable 
class. This default mechanism is only used when the renderer (or editor) in the 
TableColumn is null. 

The TableColumn stores the link between the columns in the JTable and the 
columns in the TableModel. The modelIndex is the column in the TableModel, 
which will be queried for the data values for the cells in this column. As the 
column moves around in the view this modelIndex does not change. 

Note: Some implementations may assume that all TableColumnModels are unique, 
therefore we would recommend that the same TableColumn instance not be added 
more than once to a TableColumnModel. To show TableColumns with the same column 
of data from the model, create a new instance with the same modelIndex. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.table.TableColumn.maxWidth*

A TableColumn represents all the attributes of a column in a JTable, such as 
width, resizibility, minimum and maximum width. In addition, the TableColumn 
provides slots for a renderer and an editor that can be used to display and 
edit the values in this column. 

It is also possible to specify renderers and editors on a per type basis rather 
than a per column basis - see the setDefaultRenderer method in the JTable 
class. This default mechanism is only used when the renderer (or editor) in the 
TableColumn is null. 

The TableColumn stores the link between the columns in the JTable and the 
columns in the TableModel. The modelIndex is the column in the TableModel, 
which will be queried for the data values for the cells in this column. As the 
column moves around in the view this modelIndex does not change. 

Note: Some implementations may assume that all TableColumnModels are unique, 
therefore we would recommend that the same TableColumn instance not be added 
more than once to a TableColumnModel. To show TableColumns with the same column 
of data from the model, create a new instance with the same modelIndex. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.table.TableColumn.minWidth*

A TableColumn represents all the attributes of a column in a JTable, such as 
width, resizibility, minimum and maximum width. In addition, the TableColumn 
provides slots for a renderer and an editor that can be used to display and 
edit the values in this column. 

It is also possible to specify renderers and editors on a per type basis rather 
than a per column basis - see the setDefaultRenderer method in the JTable 
class. This default mechanism is only used when the renderer (or editor) in the 
TableColumn is null. 

The TableColumn stores the link between the columns in the JTable and the 
columns in the TableModel. The modelIndex is the column in the TableModel, 
which will be queried for the data values for the cells in this column. As the 
column moves around in the view this modelIndex does not change. 

Note: Some implementations may assume that all TableColumnModels are unique, 
therefore we would recommend that the same TableColumn instance not be added 
more than once to a TableColumnModel. To show TableColumns with the same column 
of data from the model, create a new instance with the same modelIndex. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.table.TableColumn.modelIndex*

A TableColumn represents all the attributes of a column in a JTable, such as 
width, resizibility, minimum and maximum width. In addition, the TableColumn 
provides slots for a renderer and an editor that can be used to display and 
edit the values in this column. 

It is also possible to specify renderers and editors on a per type basis rather 
than a per column basis - see the setDefaultRenderer method in the JTable 
class. This default mechanism is only used when the renderer (or editor) in the 
TableColumn is null. 

The TableColumn stores the link between the columns in the JTable and the 
columns in the TableModel. The modelIndex is the column in the TableModel, 
which will be queried for the data values for the cells in this column. As the 
column moves around in the view this modelIndex does not change. 

Note: Some implementations may assume that all TableColumnModels are unique, 
therefore we would recommend that the same TableColumn instance not be added 
more than once to a TableColumnModel. To show TableColumns with the same column 
of data from the model, create a new instance with the same modelIndex. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.table.TableColumn.resizedPostingDisableCount*

A TableColumn represents all the attributes of a column in a JTable, such as 
width, resizibility, minimum and maximum width. In addition, the TableColumn 
provides slots for a renderer and an editor that can be used to display and 
edit the values in this column. 

It is also possible to specify renderers and editors on a per type basis rather 
than a per column basis - see the setDefaultRenderer method in the JTable 
class. This default mechanism is only used when the renderer (or editor) in the 
TableColumn is null. 

The TableColumn stores the link between the columns in the JTable and the 
columns in the TableModel. The modelIndex is the column in the TableModel, 
which will be queried for the data values for the cells in this column. As the 
column moves around in the view this modelIndex does not change. 

Note: Some implementations may assume that all TableColumnModels are unique, 
therefore we would recommend that the same TableColumn instance not be added 
more than once to a TableColumnModel. To show TableColumns with the same column 
of data from the model, create a new instance with the same modelIndex. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*int_javax.swing.table.TableColumn.width*

A TableColumn represents all the attributes of a column in a JTable, such as 
width, resizibility, minimum and maximum width. In addition, the TableColumn 
provides slots for a renderer and an editor that can be used to display and 
edit the values in this column. 

It is also possible to specify renderers and editors on a per type basis rather 
than a per column basis - see the setDefaultRenderer method in the JTable 
class. This default mechanism is only used when the renderer (or editor) in the 
TableColumn is null. 

The TableColumn stores the link between the columns in the JTable and the 
columns in the TableModel. The modelIndex is the column in the TableModel, 
which will be queried for the data values for the cells in this column. As the 
column moves around in the view this modelIndex does not change. 

Note: Some implementations may assume that all TableColumnModels are unique, 
therefore we would recommend that the same TableColumn instance not be added 
more than once to a TableColumnModel. To show TableColumns with the same column 
of data from the model, create a new instance with the same modelIndex. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.table.TableColumn()*

public TableColumn()

Cover method, using a default model index of 0, default width of 75, a null 
renderer and a null editor. This method is intended for serialization. 


*javax.swing.table.TableColumn(int)*

public TableColumn(int modelIndex)

Cover method, using a default width of 75, a null renderer and a null editor. 


*javax.swing.table.TableColumn(int,int)*

public TableColumn(
  int modelIndex,
  int width)

Cover method, using a null renderer and a null editor. 


*javax.swing.table.TableColumn(int,int,TableCellRenderer,TableCellEditor)*

public TableColumn(
  int modelIndex,
  int width,
  javax.swing.table.TableCellRenderer cellRenderer,
  javax.swing.table.TableCellEditor cellEditor)

Creates and initializes an instance of TableColumn with modelIndex. All 
TableColumn constructors delegate to this one. The modelIndex is the index of 
the column in the model which will supply the data for this column in the 
table. The modelIndex does not change as the columns are reordered in the view. 
The width parameter is used to set both the preferredWidth for this column and 
the initial width. The renderer and editor are the objects used respectively to 
render and edit values in this column. When these are null, default values, 
provided by the getDefaultRenderer and getDefaultEditor methods in the JTable 
class are used to provide defaults based on the type of the data in this 
column. This column-centric rendering strategy can be circumvented by 
overriding the getCellRenderer methods in the JTable. 


*javax.swing.table.TableColumn.addPropertyChangeListener(PropertyChangeListener)*

public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener listener)

Adds a PropertyChangeListener to the listener list. The listener is registered 
for all properties. 

A PropertyChangeEvent will get fired in response to an explicit call to 
setFont, setBackground, or setForeground on the current component. Note that if 
the current component is inheriting its foreground, background, or font from 
its container, then no event will be fired in response to a change in the 
inherited property. 

    listener - the listener to be added 

*javax.swing.table.TableColumn.createDefaultHeaderRenderer()*

protected |javax.swing.table.TableCellRenderer| createDefaultHeaderRenderer()

As of Java 2 platform v1.3, this method is not called by the TableColumn 
constructor. Previously this method was used by the TableColumn to create a 
default header renderer. As of Java 2 platform v1.3, the default header 
renderer is null. JTableHeader now provides its own shared default renderer, 
just as the JTable does for its cell renderers. 


    Returns: the default header renderer 
*javax.swing.table.TableColumn.disableResizedPosting()*

public void disableResizedPosting()

This field was not used in previous releases and there are currently no plans 
to support it in the future. 


*javax.swing.table.TableColumn.enableResizedPosting()*

public void enableResizedPosting()

This field was not used in previous releases and there are currently no plans 
to support it in the future. 


*javax.swing.table.TableColumn.getCellEditor()*

public |javax.swing.table.TableCellEditor| getCellEditor()

Returns the TableCellEditor used by the JTable to edit values for this column. 
When the cellEditor is null, the JTable uses a default editor based on the 
class of the cells in that column. The default value for a cellEditor is null. 


    Returns: the cellEditor property 
*javax.swing.table.TableColumn.getCellRenderer()*

public |javax.swing.table.TableCellRenderer| getCellRenderer()

Returns the TableCellRenderer used by the JTable to draw values for this 
column. The cellRenderer of the column not only controls the visual look for 
the column, but is also used to interpret the value object supplied by the 
TableModel. When the cellRenderer is null, the JTable uses a default renderer 
based on the class of the cells in that column. The default value for a 
cellRenderer is null. 


    Returns: the cellRenderer property 
*javax.swing.table.TableColumn.getHeaderRenderer()*

public |javax.swing.table.TableCellRenderer| getHeaderRenderer()

Returns the TableCellRenderer used to draw the header of the TableColumn. When 
the headerRenderer is null, the JTableHeader uses its defaultRenderer. The 
default value for a headerRenderer is null. 


    Returns: the headerRenderer property 
*javax.swing.table.TableColumn.getHeaderValue()*

public |java.lang.Object| getHeaderValue()

Returns the Object used as the value for the header renderer. 


    Returns: the headerValue property 
*javax.swing.table.TableColumn.getIdentifier()*

public |java.lang.Object| getIdentifier()

Returns the identifier object for this column. Note identifiers are not used by 
JTable, they are purely a convenience for external use. If the identifier is 
null, getIdentifier() returns getHeaderValue as a default. 


    Returns: the identifier property 
*javax.swing.table.TableColumn.getMaxWidth()*

public int getMaxWidth()

Returns the maximum width for the TableColumn. The TableColumn's width can't be 
made larger than this either by the user or programmatically. The default 
maxWidth is Integer.MAX_VALUE. 


    Returns: the maxWidth property 
*javax.swing.table.TableColumn.getMinWidth()*

public int getMinWidth()

Returns the minimum width for the TableColumn. The TableColumn's width can't be 
made less than this either by the user or programmatically. The default 
minWidth is 15. 


    Returns: the minWidth property 
*javax.swing.table.TableColumn.getModelIndex()*

public int getModelIndex()

Returns the model index for this column. 


    Returns: the modelIndex property 
*javax.swing.table.TableColumn.getPreferredWidth()*

public int getPreferredWidth()

Returns the preferred width of the TableColumn. The default preferred width is 
75. 


    Returns: the preferredWidth property 
*javax.swing.table.TableColumn.getPropertyChangeListeners()*

public synchronized |java.beans.PropertyChangeListener| getPropertyChangeListeners()

Returns an array of all the PropertyChangeListeners added to this TableColumn 
with addPropertyChangeListener(). 


    Returns: all of the PropertyChangeListeners added or an empty array if no listeners have 
             been added 
*javax.swing.table.TableColumn.getResizable()*

public boolean getResizable()

Returns true if the user is allowed to resize the TableColumn's width, false 
otherwise. You can change the width programmatically regardless of this 
setting. The default is true. 


    Returns: the isResizable property 
*javax.swing.table.TableColumn.getWidth()*

public int getWidth()

Returns the width of the TableColumn. The default width is 75. 


    Returns: the width property 
*javax.swing.table.TableColumn.removePropertyChangeListener(PropertyChangeListener)*

public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener listener)

Removes a PropertyChangeListener from the listener list. The 
PropertyChangeListener to be removed was registered for all properties. 

    listener - the listener to be removed 

*javax.swing.table.TableColumn.setCellEditor(TableCellEditor)*

public void setCellEditor(javax.swing.table.TableCellEditor cellEditor)

Sets the editor to used by when a cell in this column is edited. 

    cellEditor - the new cellEditor 

*javax.swing.table.TableColumn.setCellRenderer(TableCellRenderer)*

public void setCellRenderer(javax.swing.table.TableCellRenderer cellRenderer)

Sets the TableCellRenderer used by JTable to draw individual values for this 
column. 

    cellRenderer - the new cellRenderer 

*javax.swing.table.TableColumn.setHeaderRenderer(TableCellRenderer)*

public void setHeaderRenderer(javax.swing.table.TableCellRenderer headerRenderer)

Sets the TableCellRenderer used to draw the TableColumn's header to 
headerRenderer. 

    headerRenderer - the new headerRenderer 

*javax.swing.table.TableColumn.setHeaderValue(Object)*

public void setHeaderValue(java.lang.Object headerValue)

Sets the Object whose string representation will be used as the value for the 
headerRenderer. When the TableColumn is created, the default headerValue is 
null. 

    headerValue - the new headerValue 

*javax.swing.table.TableColumn.setIdentifier(Object)*

public void setIdentifier(java.lang.Object identifier)

Sets the TableColumn's identifier to anIdentifier. Note: identifiers are not 
used by the JTable, they are purely a convenience for the external tagging and 
location of columns. 

    identifier - an identifier for this column 

*javax.swing.table.TableColumn.setMaxWidth(int)*

public void setMaxWidth(int maxWidth)

Sets the TableColumn's maximum width to maxWidth; also adjusts the width and 
preferred width if they are greater than this value. 

    maxWidth - the new maximum width 

*javax.swing.table.TableColumn.setMinWidth(int)*

public void setMinWidth(int minWidth)

Sets the TableColumn's minimum width to minWidth; also adjusts the current 
width and preferred width if they are less than this value. 

    minWidth - the new minimum width 

*javax.swing.table.TableColumn.setModelIndex(int)*

public void setModelIndex(int modelIndex)

Sets the model index for this column. The model index is the index of the 
column in the model that will be displayed by this TableColumn. As the 
TableColumn is moved around in the view the model index remains constant. 

    modelIndex - the new modelIndex 

*javax.swing.table.TableColumn.setPreferredWidth(int)*

public void setPreferredWidth(int preferredWidth)

Sets this column's preferred width to preferredWidth. If preferredWidth exceeds 
the minimum or maximum width, it is adjusted to the appropriate limiting value. 

For details on how the widths of columns in the JTable (and JTableHeader) are 
calculated from the preferredWidth, see the doLayout method in JTable. 

    preferredWidth - the new preferred width 

*javax.swing.table.TableColumn.setResizable(boolean)*

public void setResizable(boolean isResizable)

Sets whether this column can be resized. 

    isResizable - if true, resizing is allowed; otherwise false 

*javax.swing.table.TableColumn.setWidth(int)*

public void setWidth(int width)

This method should not be used to set the widths of columns in the JTable, use 
setPreferredWidth instead. Like a layout manager in the AWT, the JTable adjusts 
a column's width automatically whenever the table itself changes size, or a 
column's preferred width is changed. Setting widths programmatically therefore 
has no long term effect. 

This method sets this column's width to width. If width exceeds the minimum or 
maximum width, it is adjusted to the appropriate limiting value. 

    width - the new width 

*javax.swing.table.TableColumn.sizeWidthToFit()*

public void sizeWidthToFit()

Resizes the TableColumn to fit the width of its header cell. This method does 
nothing if the header renderer is null (the default case). Otherwise, it sets 
the minimum, maximum and preferred widths of this column to the widths of the 
minimum, maximum and preferred sizes of the Component delivered by the header 
renderer. The transient "width" property of this TableColumn is also set to the 
preferred width. Note this method is not used internally by the table package. 




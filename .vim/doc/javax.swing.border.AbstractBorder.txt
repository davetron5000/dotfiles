*javax.swing.border.AbstractBorder* *AbstractBorder* A class that implements an 

public abstract class AbstractBorder
  extends    |java.lang.Object|
  implements |javax.swing.border.Border|
             |java.io.Serializable|

|javax.swing.border.AbstractBorder_Description|
|javax.swing.border.AbstractBorder_Fields|
|javax.swing.border.AbstractBorder_Constructors|
|javax.swing.border.AbstractBorder_Methods|

================================================================================

*javax.swing.border.AbstractBorder_Constructors*
|javax.swing.border.AbstractBorder()|

*javax.swing.border.AbstractBorder_Methods*
|javax.swing.border.AbstractBorder.getBorderInsets(Component)|This default impl
|javax.swing.border.AbstractBorder.getBorderInsets(Component,Insets)|Reinitiali
|javax.swing.border.AbstractBorder.getInteriorRectangle(Component,Border,int,int,int,int)|
|javax.swing.border.AbstractBorder.getInteriorRectangle(Component,int,int,int,int)|
|javax.swing.border.AbstractBorder.isBorderOpaque()|This default implementation
|javax.swing.border.AbstractBorder.paintBorder(Component,Graphics,int,int,int,int)|

*javax.swing.border.AbstractBorder_Description*

A class that implements an empty border with no size. This provides a 
convenient base class from which other border classes can be easily derived. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.border.AbstractBorder()*

public AbstractBorder()




*javax.swing.border.AbstractBorder.getBorderInsets(Component)*

public |java.awt.Insets| getBorderInsets(java.awt.Component c)

This default implementation returns a new Insets instance where the top, left, 
bottom, and right fields are set to 0. 

    c - the component for which this border insets value applies 

    Returns: the new Insets object initialized to 0 
*javax.swing.border.AbstractBorder.getBorderInsets(Component,Insets)*

public |java.awt.Insets| getBorderInsets(
  java.awt.Component c,
  java.awt.Insets insets)

Reinitializes the insets parameter with this Border's current Insets. 

    c - the component for which this border insets value applies 
    insets - the object to be reinitialized 

    Returns: the insets object 
*javax.swing.border.AbstractBorder.getInteriorRectangle(Component,Border,int,int,int,int)*

public static |java.awt.Rectangle| getInteriorRectangle(
  java.awt.Component c,
  javax.swing.border.Border b,
  int x,
  int y,
  int width,
  int height)

Returns a rectangle using the arguments minus the insets of the border. This is 
useful for determining the area that components should draw in that will not 
intersect the border. 

    c - the component for which this border is being computed 
    b - the Border object 
    x - the x position of the border 
    y - the y position of the border 
    width - the width of the border 
    height - the height of the border 

    Returns: a Rectangle containing the interior coordinates 
*javax.swing.border.AbstractBorder.getInteriorRectangle(Component,int,int,int,int)*

public |java.awt.Rectangle| getInteriorRectangle(
  java.awt.Component c,
  int x,
  int y,
  int width,
  int height)

This convenience method calls the static method. 

    c - the component for which this border is being computed 
    x - the x position of the border 
    y - the y position of the border 
    width - the width of the border 
    height - the height of the border 

    Returns: a Rectangle containing the interior coordinates 
*javax.swing.border.AbstractBorder.isBorderOpaque()*

public boolean isBorderOpaque()

This default implementation returns false. 


    Returns: 
*javax.swing.border.AbstractBorder.paintBorder(Component,Graphics,int,int,int,int)*

public void paintBorder(
  java.awt.Component c,
  java.awt.Graphics g,
  int x,
  int y,
  int width,
  int height)

This default implementation does no painting. 

    c - the component for which this border is being painted 
    g - the paint graphics 
    x - the x position of the painted border 
    y - the y position of the painted border 
    width - the width of the painted border 
    height - the height of the painted border 



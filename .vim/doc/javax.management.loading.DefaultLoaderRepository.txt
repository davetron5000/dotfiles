*javax.management.loading.DefaultLoaderRepository* *DefaultLoaderRepository* Kee

public class DefaultLoaderRepository
  extends    |java.lang.Object|

|javax.management.loading.DefaultLoaderRepository_Description|
|javax.management.loading.DefaultLoaderRepository_Fields|
|javax.management.loading.DefaultLoaderRepository_Constructors|
|javax.management.loading.DefaultLoaderRepository_Methods|

================================================================================

*javax.management.loading.DefaultLoaderRepository_Constructors*
|javax.management.loading.DefaultLoaderRepository()|

*javax.management.loading.DefaultLoaderRepository_Methods*
|javax.management.loading.DefaultLoaderRepository.loadClass(String)|Go through 
|javax.management.loading.DefaultLoaderRepository.loadClassWithout(ClassLoader,String)|

*javax.management.loading.DefaultLoaderRepository_Description*

Keeps the list of Class Loaders registered in the MBean Server. It provides the 
necessary methods to load classes using the registered Class Loaders. 

This deprecated class is maintained for compatibility. In previous versions of 
JMX, there was one DefaultLoaderRepository shared by all MBean servers. As of 
JMX 1.2, that functionality is approximated by using 
(|javax.management.MBeanServerFactory|) to find all known MBean servers, and 
consulting the (|javax.management.loading.ClassLoaderRepository|) of each one. 
It is strongly recommended that code referencing DefaultLoaderRepository be 
rewritten. 


*javax.management.loading.DefaultLoaderRepository()*

public DefaultLoaderRepository()




*javax.management.loading.DefaultLoaderRepository.loadClass(String)*

public static |java.lang.Class| loadClass(java.lang.String className)
  throws |java.lang.ClassNotFoundException|
         
Go through the list of class loaders and try to load the requested class. The 
method will stop as soon as the class is found. If the class is not found the 
method will throw a ClassNotFoundException exception. 

    className - The name of the class to be loaded. 

    Returns: the loaded class. 
*javax.management.loading.DefaultLoaderRepository.loadClassWithout(ClassLoader,String)*

public static |java.lang.Class| loadClassWithout(
  java.lang.ClassLoader loader,
  java.lang.String className)
  throws |java.lang.ClassNotFoundException|
         
Go through the list of class loaders but exclude the given class loader, then 
try to load the requested class. The method will stop as soon as the class is 
found. If the class is not found the method will throw a ClassNotFoundException 
exception. 

    className - The name of the class to be loaded. 
    loader - The class loader to be excluded. 

    Returns: the loaded class. 


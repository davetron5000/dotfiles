*javax.management.Descriptor* *Descriptor* This interface represents the behavio

public interface interface Descriptor

  implements |java.io.Serializable|
             |java.lang.Cloneable|

|javax.management.Descriptor_Description|
|javax.management.Descriptor_Fields|
|javax.management.Descriptor_Constructors|
|javax.management.Descriptor_Methods|

================================================================================

*javax.management.Descriptor_Methods*
|javax.management.Descriptor.clone()|Returns a new Descriptor which is a duplic
|javax.management.Descriptor.getFieldNames()|Returns all the fields names in th
|javax.management.Descriptor.getFields()|Returns all of the  fields contained i
|javax.management.Descriptor.getFieldValue(String)|Returns the value for a spec
|javax.management.Descriptor.getFieldValues(String[])|Returns all the field val
|javax.management.Descriptor.isValid()|Returns true if all of the fields have l
|javax.management.Descriptor.removeField(String)|Removes a field from the descr
|javax.management.Descriptor.setField(String,Object)|Sets the value for a speci
|javax.management.Descriptor.setFields(String[],Object[])|Sets all Fields in th

*javax.management.Descriptor_Description*

This interface represents the behavioral metadata set for a JMX Element. For 
examples, a descriptor is part of the ModelMBeanInfo, 
ModelMBeanNotificationInfo, ModelMBeanAttributeInfo, ModelMBeanConstructorInfo, 
and ModelMBeanParameterInfo. 

A descriptor consists of a collection of fields. Each field is in 
fieldname=fieldvalue format. 

All field names and values are not predefined. New fields can be defined and 
added by any program. In the case of ModelMBean some fields have been 
predefined for consistency of implementation and support by the ModelMBeanInfo 
ModelMBean*Info, and ModelMBean classes. 


*javax.management.Descriptor.clone()*

public |java.lang.Object| clone()
  throws |javax.management.RuntimeOperationsException|
         
Returns a new Descriptor which is a duplicate of the Descriptor. 


*javax.management.Descriptor.getFieldNames()*

public |java.lang.String| getFieldNames()

Returns all the fields names in the descriptor. 


    Returns: String array of fields names. If the descriptor is empty, you will get an empty 
             array. 
*javax.management.Descriptor.getFields()*

public |java.lang.String| getFields()

Returns all of the fields contained in this descriptor as a string array. 


    Returns: String array of fields in the format fieldName=fieldValue If the value of a 
             field is not a String, then the toString() method will be called 
             on it and the returned value used as the value for the field in 
             the returned array. Object values which are not Strings will be 
             enclosed in parentheses. If the descriptor is empty, you will get 
             an empty array. 
*javax.management.Descriptor.getFieldValue(String)*

public |java.lang.Object| getFieldValue(java.lang.String fieldName)
  throws |javax.management.RuntimeOperationsException|
         
Returns the value for a specific fieldname. 

    fieldName - The field name in question; if not found, null is returned. 

    Returns: Object Field value. 
*javax.management.Descriptor.getFieldValues(String[])*

public |java.lang.Object| getFieldValues(java.lang.String[] fieldNames)

Returns all the field values in the descriptor as an array of Objects. The 
returned values are in the same order as the fieldNames String array parameter. 

    fieldNames - String array of the names of the fields that the values should be returned for. 
       If the array is empty then an empty array will be returned. If the array 
       is 'null' then all values will be returned. If a field name in the array 
       does not exist, then null is returned for the matching array element 
       being returned. 

    Returns: Object array of field values. If the descriptor is empty, you will get an empty 
             array. 
*javax.management.Descriptor.isValid()*

public boolean isValid()
  throws |javax.management.RuntimeOperationsException|
         
Returns true if all of the fields have legal values given their names. 


    Returns: true if the values are legal. 
*javax.management.Descriptor.removeField(String)*

public void removeField(java.lang.String fieldName)

Removes a field from the descriptor. 

    fieldName - String name of the field to be removed. If the field is not found no exception 
       is thrown. 

*javax.management.Descriptor.setField(String,Object)*

public void setField(
  java.lang.String fieldName,
  java.lang.Object fieldValue)
  throws |javax.management.RuntimeOperationsException|
         
Sets the value for a specific fieldname.	The field value will be validated 
before it is set. If it is not valid, then an exception will be thrown. This 
will modify an existing field or add a new field. 

    fieldName - The field name to be set. Cannot be null or empty. 
    fieldValue - The field value to be set for the field name. Can be null. 

*javax.management.Descriptor.setFields(String[],Object[])*

public void setFields(
  java.lang.String[] fieldNames,
  java.lang.Object[] fieldValues)
  throws |javax.management.RuntimeOperationsException|
         
Sets all Fields in the list to the new value in with the same index in the 
fieldValue array. Array sizes must match. The field value will be validated 
before it is set. If it is not valid, then an exception will be thrown. If the 
arrays are empty, then no change will take effect. 

    fieldNames - String array of field names. The array and array elements cannot be null. 
    fieldValues - Object array of the corresponding field values. The array cannot be null. 
       Elements of the array can be null. 



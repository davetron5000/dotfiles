*javax.sound.midi.Sequence* *Sequence* A Sequence is a data structure containing

public class Sequence
  extends    |java.lang.Object|

|javax.sound.midi.Sequence_Description|
|javax.sound.midi.Sequence_Fields|
|javax.sound.midi.Sequence_Constructors|
|javax.sound.midi.Sequence_Methods|

================================================================================

*javax.sound.midi.Sequence_Fields*
|float_javax.sound.midi.Sequence.divisionType|
|float_javax.sound.midi.Sequence.PPQ|
|int_javax.sound.midi.Sequence.resolution|
|float_javax.sound.midi.Sequence.SMPTE_24|
|float_javax.sound.midi.Sequence.SMPTE_25|
|float_javax.sound.midi.Sequence.SMPTE_30|
|float_javax.sound.midi.Sequence.SMPTE_30DROP|
|java.util.Vector_javax.sound.midi.Sequence.tracks|

*javax.sound.midi.Sequence_Constructors*
|javax.sound.midi.Sequence(float,int)|Constructs a new MIDI sequence with the s
|javax.sound.midi.Sequence(float,int,int)|Constructs a new MIDI sequence with t

*javax.sound.midi.Sequence_Methods*
|javax.sound.midi.Sequence.createTrack()|Creates a new, initially empty track a
|javax.sound.midi.Sequence.deleteTrack(Track)|Removes the specified track from 
|javax.sound.midi.Sequence.getDivisionType()|Obtains the timing division type f
|javax.sound.midi.Sequence.getMicrosecondLength()|Obtains the duration of this 
|javax.sound.midi.Sequence.getPatchList()|Obtains a list of patches referenced 
|javax.sound.midi.Sequence.getResolution()|Obtains the timing resolution for th
|javax.sound.midi.Sequence.getTickLength()|Obtains the duration of this sequenc
|javax.sound.midi.Sequence.getTracks()|Obtains an array containing all the trac

*javax.sound.midi.Sequence_Description*

A Sequence is a data structure containing musical information (often an entire 
song or composition) that can be played back by a 
(|javax.sound.midi.Sequencer|) object. Specifically, the Sequence contains 
timing information and one or more tracks. Each track(|javax.sound.midi.Track|) 
consists of a series of MIDI events (such as note-ons, note-offs, program 
changes, and meta-events). The sequence's timing information specifies the type 
of unit that is used to time-stamp the events in the sequence. 

A Sequence can be created from a MIDI file by reading the file into an input 
stream and invoking one of the getSequence methods of 
(|javax.sound.midi.MidiSystem|) . A sequence can also be built from scratch by 
adding new Tracks to an empty Sequence, and adding 
(|javax.sound.midi.MidiEvent|) objects to these Tracks. 


*float_javax.sound.midi.Sequence.divisionType*

A Sequence is a data structure containing musical information (often an entire 
song or composition) that can be played back by a 
(|javax.sound.midi.Sequencer|) object. Specifically, the Sequence contains 
timing information and one or more tracks. Each track(|javax.sound.midi.Track|) 
consists of a series of MIDI events (such as note-ons, note-offs, program 
changes, and meta-events). The sequence's timing information specifies the type 
of unit that is used to time-stamp the events in the sequence. 

A Sequence can be created from a MIDI file by reading the file into an input 
stream and invoking one of the getSequence methods of 
(|javax.sound.midi.MidiSystem|) . A sequence can also be built from scratch by 
adding new Tracks to an empty Sequence, and adding 
(|javax.sound.midi.MidiEvent|) objects to these Tracks. 


*float_javax.sound.midi.Sequence.PPQ*

A Sequence is a data structure containing musical information (often an entire 
song or composition) that can be played back by a 
(|javax.sound.midi.Sequencer|) object. Specifically, the Sequence contains 
timing information and one or more tracks. Each track(|javax.sound.midi.Track|) 
consists of a series of MIDI events (such as note-ons, note-offs, program 
changes, and meta-events). The sequence's timing information specifies the type 
of unit that is used to time-stamp the events in the sequence. 

A Sequence can be created from a MIDI file by reading the file into an input 
stream and invoking one of the getSequence methods of 
(|javax.sound.midi.MidiSystem|) . A sequence can also be built from scratch by 
adding new Tracks to an empty Sequence, and adding 
(|javax.sound.midi.MidiEvent|) objects to these Tracks. 


*int_javax.sound.midi.Sequence.resolution*

A Sequence is a data structure containing musical information (often an entire 
song or composition) that can be played back by a 
(|javax.sound.midi.Sequencer|) object. Specifically, the Sequence contains 
timing information and one or more tracks. Each track(|javax.sound.midi.Track|) 
consists of a series of MIDI events (such as note-ons, note-offs, program 
changes, and meta-events). The sequence's timing information specifies the type 
of unit that is used to time-stamp the events in the sequence. 

A Sequence can be created from a MIDI file by reading the file into an input 
stream and invoking one of the getSequence methods of 
(|javax.sound.midi.MidiSystem|) . A sequence can also be built from scratch by 
adding new Tracks to an empty Sequence, and adding 
(|javax.sound.midi.MidiEvent|) objects to these Tracks. 


*float_javax.sound.midi.Sequence.SMPTE_24*

A Sequence is a data structure containing musical information (often an entire 
song or composition) that can be played back by a 
(|javax.sound.midi.Sequencer|) object. Specifically, the Sequence contains 
timing information and one or more tracks. Each track(|javax.sound.midi.Track|) 
consists of a series of MIDI events (such as note-ons, note-offs, program 
changes, and meta-events). The sequence's timing information specifies the type 
of unit that is used to time-stamp the events in the sequence. 

A Sequence can be created from a MIDI file by reading the file into an input 
stream and invoking one of the getSequence methods of 
(|javax.sound.midi.MidiSystem|) . A sequence can also be built from scratch by 
adding new Tracks to an empty Sequence, and adding 
(|javax.sound.midi.MidiEvent|) objects to these Tracks. 


*float_javax.sound.midi.Sequence.SMPTE_25*

A Sequence is a data structure containing musical information (often an entire 
song or composition) that can be played back by a 
(|javax.sound.midi.Sequencer|) object. Specifically, the Sequence contains 
timing information and one or more tracks. Each track(|javax.sound.midi.Track|) 
consists of a series of MIDI events (such as note-ons, note-offs, program 
changes, and meta-events). The sequence's timing information specifies the type 
of unit that is used to time-stamp the events in the sequence. 

A Sequence can be created from a MIDI file by reading the file into an input 
stream and invoking one of the getSequence methods of 
(|javax.sound.midi.MidiSystem|) . A sequence can also be built from scratch by 
adding new Tracks to an empty Sequence, and adding 
(|javax.sound.midi.MidiEvent|) objects to these Tracks. 


*float_javax.sound.midi.Sequence.SMPTE_30*

A Sequence is a data structure containing musical information (often an entire 
song or composition) that can be played back by a 
(|javax.sound.midi.Sequencer|) object. Specifically, the Sequence contains 
timing information and one or more tracks. Each track(|javax.sound.midi.Track|) 
consists of a series of MIDI events (such as note-ons, note-offs, program 
changes, and meta-events). The sequence's timing information specifies the type 
of unit that is used to time-stamp the events in the sequence. 

A Sequence can be created from a MIDI file by reading the file into an input 
stream and invoking one of the getSequence methods of 
(|javax.sound.midi.MidiSystem|) . A sequence can also be built from scratch by 
adding new Tracks to an empty Sequence, and adding 
(|javax.sound.midi.MidiEvent|) objects to these Tracks. 


*float_javax.sound.midi.Sequence.SMPTE_30DROP*

A Sequence is a data structure containing musical information (often an entire 
song or composition) that can be played back by a 
(|javax.sound.midi.Sequencer|) object. Specifically, the Sequence contains 
timing information and one or more tracks. Each track(|javax.sound.midi.Track|) 
consists of a series of MIDI events (such as note-ons, note-offs, program 
changes, and meta-events). The sequence's timing information specifies the type 
of unit that is used to time-stamp the events in the sequence. 

A Sequence can be created from a MIDI file by reading the file into an input 
stream and invoking one of the getSequence methods of 
(|javax.sound.midi.MidiSystem|) . A sequence can also be built from scratch by 
adding new Tracks to an empty Sequence, and adding 
(|javax.sound.midi.MidiEvent|) objects to these Tracks. 


*java.util.Vector_javax.sound.midi.Sequence.tracks*

A Sequence is a data structure containing musical information (often an entire 
song or composition) that can be played back by a 
(|javax.sound.midi.Sequencer|) object. Specifically, the Sequence contains 
timing information and one or more tracks. Each track(|javax.sound.midi.Track|) 
consists of a series of MIDI events (such as note-ons, note-offs, program 
changes, and meta-events). The sequence's timing information specifies the type 
of unit that is used to time-stamp the events in the sequence. 

A Sequence can be created from a MIDI file by reading the file into an input 
stream and invoking one of the getSequence methods of 
(|javax.sound.midi.MidiSystem|) . A sequence can also be built from scratch by 
adding new Tracks to an empty Sequence, and adding 
(|javax.sound.midi.MidiEvent|) objects to these Tracks. 



*javax.sound.midi.Sequence(float,int)*

public Sequence(
  float divisionType,
  int resolution)
  throws |javax.sound.midi.InvalidMidiDataException|
         
Constructs a new MIDI sequence with the specified timing division type and 
timing resolution. The division type must be one of the recognized MIDI timing 
types. For tempo-based timing, divisionType is PPQ (pulses per quarter note) 
and the resolution is specified in ticks per beat. For SMTPE timing, 
divisionType specifies the number of frames per second and the resolution is 
specified in ticks per frame. The sequence will contain no initial tracks. 
Tracks may be added to or removed from the sequence using 
(|javax.sound.midi.Sequence|) and (|javax.sound.midi.Sequence|) . 

    divisionType - the timing division type (PPQ or one of the SMPTE types) 
    resolution - the timing resolution 

*javax.sound.midi.Sequence(float,int,int)*

public Sequence(
  float divisionType,
  int resolution,
  int numTracks)
  throws |javax.sound.midi.InvalidMidiDataException|
         
Constructs a new MIDI sequence with the specified timing division type, timing 
resolution, and number of tracks. The division type must be one of the 
recognized MIDI timing types. For tempo-based timing, divisionType is PPQ 
(pulses per quarter note) and the resolution is specified in ticks per beat. 
For SMTPE timing, divisionType specifies the number of frames per second and 
the resolution is specified in ticks per frame. The sequence will be 
initialized with the number of tracks specified by numTracks. These tracks are 
initially empty (i.e. they contain only the meta-event End of Track). The 
tracks may be retrieved for editing using the (|javax.sound.midi.Sequence|) 
method. Additional tracks may be added, or existing tracks removed, using 
(|javax.sound.midi.Sequence|) and (|javax.sound.midi.Sequence|) . 

    divisionType - the timing division type (PPQ or one of the SMPTE types) 
    resolution - the timing resolution 
    numTracks - the initial number of tracks in the sequence. 

*javax.sound.midi.Sequence.createTrack()*

public |javax.sound.midi.Track| createTrack()

Creates a new, initially empty track as part of this sequence. The track 
initially contains the meta-event End of Track. The newly created track is 
returned. All tracks in the sequence may be retrieved using 
(|javax.sound.midi.Sequence|) . Tracks may be removed from the sequence using 
(|javax.sound.midi.Sequence|) . 


    Returns: the newly created track 
*javax.sound.midi.Sequence.deleteTrack(Track)*

public boolean deleteTrack(javax.sound.midi.Track track)

Removes the specified track from the sequence. 

    track - the track to remove 

    Returns: true if the track existed in the track and was removed, otherwise false. 
*javax.sound.midi.Sequence.getDivisionType()*

public float getDivisionType()

Obtains the timing division type for this sequence. 


    Returns: the division type (PPQ or one of the SMPTE types) 
*javax.sound.midi.Sequence.getMicrosecondLength()*

public long getMicrosecondLength()

Obtains the duration of this sequence, expressed in microseconds. 


    Returns: this sequence's duration in microseconds. 
*javax.sound.midi.Sequence.getPatchList()*

public |javax.sound.midi.Patch| getPatchList()

Obtains a list of patches referenced in this sequence. This patch list may be 
used to load the required (|javax.sound.midi.Instrument|) objects into a 
(|javax.sound.midi.Synthesizer|) . 


    Returns: an array of {@link Patch} objects used in this sequence 
*javax.sound.midi.Sequence.getResolution()*

public int getResolution()

Obtains the timing resolution for this sequence. If the sequence's division 
type is PPQ, the resolution is specified in ticks per beat. For SMTPE timing, 
the resolution is specified in ticks per frame. 


    Returns: the number of ticks per beat (PPQ) or per frame (SMPTE) 
*javax.sound.midi.Sequence.getTickLength()*

public long getTickLength()

Obtains the duration of this sequence, expressed in MIDI ticks. 


    Returns: this sequence's length in ticks 
*javax.sound.midi.Sequence.getTracks()*

public |javax.sound.midi.Track| getTracks()

Obtains an array containing all the tracks in this sequence. If the sequence 
contains no tracks, an array of length 0 is returned. 


    Returns: the array of tracks 


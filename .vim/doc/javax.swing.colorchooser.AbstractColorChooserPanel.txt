*javax.swing.colorchooser.AbstractColorChooserPanel* *AbstractColorChooserPanel* 

public abstract class AbstractColorChooserPanel
  extends    |javax.swing.JPanel|

|javax.swing.colorchooser.AbstractColorChooserPanel_Description|
|javax.swing.colorchooser.AbstractColorChooserPanel_Fields|
|javax.swing.colorchooser.AbstractColorChooserPanel_Constructors|
|javax.swing.colorchooser.AbstractColorChooserPanel_Methods|

================================================================================

*javax.swing.colorchooser.AbstractColorChooserPanel_Constructors*
|javax.swing.colorchooser.AbstractColorChooserPanel()|

*javax.swing.colorchooser.AbstractColorChooserPanel_Methods*
|javax.swing.colorchooser.AbstractColorChooserPanel.buildChooser()|Builds a new
|javax.swing.colorchooser.AbstractColorChooserPanel.getColorFromModel()|Returns
|javax.swing.colorchooser.AbstractColorChooserPanel.getColorSelectionModel()|Re
|javax.swing.colorchooser.AbstractColorChooserPanel.getDisplayedMnemonicIndex()|
|javax.swing.colorchooser.AbstractColorChooserPanel.getDisplayName()|Returns a 
|javax.swing.colorchooser.AbstractColorChooserPanel.getLargeDisplayIcon()|Retur
|javax.swing.colorchooser.AbstractColorChooserPanel.getMnemonic()|Provides a hi
|javax.swing.colorchooser.AbstractColorChooserPanel.getSmallDisplayIcon()|Retur
|javax.swing.colorchooser.AbstractColorChooserPanel.installChooserPanel(JColorChooser)|
|javax.swing.colorchooser.AbstractColorChooserPanel.paint(Graphics)|Draws the p
|javax.swing.colorchooser.AbstractColorChooserPanel.uninstallChooserPanel(JColorChooser)|
|javax.swing.colorchooser.AbstractColorChooserPanel.updateChooser()|Invoked aut

*javax.swing.colorchooser.AbstractColorChooserPanel_Description*

This is the abstract superclass for color choosers. If you want to add a new 
color chooser panel into a JColorChooser, subclass this class. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.colorchooser.AbstractColorChooserPanel()*

public AbstractColorChooserPanel()




*javax.swing.colorchooser.AbstractColorChooserPanel.buildChooser()*

protected abstract void buildChooser()

Builds a new chooser panel. 


*javax.swing.colorchooser.AbstractColorChooserPanel.getColorFromModel()*

protected |java.awt.Color| getColorFromModel()

Returns the color that is currently selected. 


    Returns: the Color that is selected 
*javax.swing.colorchooser.AbstractColorChooserPanel.getColorSelectionModel()*

public |javax.swing.colorchooser.ColorSelectionModel| getColorSelectionModel()

Returns the model that the chooser panel is editing. 


    Returns: the ColorSelectionModel model this panel is editing 
*javax.swing.colorchooser.AbstractColorChooserPanel.getDisplayedMnemonicIndex()*

public int getDisplayedMnemonicIndex()

Provides a hint to the look and feel as to the index of the character in 
getDisplayName that should be visually identified as the mnemonic. The look and 
feel should only use this if getMnemonic returns a value > 0. 

The return value here is a hint, it is ultimately up to the look and feel to 
honor the return value in some meaningful way. For example, a look and feel may 
wish to render each AbstractColorChooserPanel in a JTabbedPane, and further use 
this return value to underline a character in the getDisplayName. 

This implementation returns -1, indicating the AbstractColorChooserPanel does 
not support a mnemonic, subclasses wishing a mnemonic will need to override 
this. 


    Returns: Character index to render mnemonic for; -1 to provide no visual identifier for 
             this panel. 
*javax.swing.colorchooser.AbstractColorChooserPanel.getDisplayName()*

public abstract |java.lang.String| getDisplayName()

Returns a string containing the display name of the panel. 


    Returns: the name of the display panel 
*javax.swing.colorchooser.AbstractColorChooserPanel.getLargeDisplayIcon()*

public abstract |javax.swing.Icon| getLargeDisplayIcon()

Returns the large display icon for the panel. 


    Returns: the large display icon 
*javax.swing.colorchooser.AbstractColorChooserPanel.getMnemonic()*

public int getMnemonic()

Provides a hint to the look and feel as to the KeyEvent.VK constant that can be 
used as a mnemonic to access the panel. A return value The return value here is 
a hint, it is ultimately up to the look and feel to honor the return value in 
some meaningful way. 

This implementation returns 0, indicating the AbstractColorChooserPanel does 
not support a mnemonic, subclasses wishing a mnemonic will need to override 
this. 


    Returns: KeyEvent.VK constant identifying the mnemonic; <= 0 for no mnemonic 
*javax.swing.colorchooser.AbstractColorChooserPanel.getSmallDisplayIcon()*

public abstract |javax.swing.Icon| getSmallDisplayIcon()

Returns the small display icon for the panel. 


    Returns: the small display icon 
*javax.swing.colorchooser.AbstractColorChooserPanel.installChooserPanel(JColorChooser)*

public void installChooserPanel(javax.swing.JColorChooser enclosingChooser)

Invoked when the panel is added to the chooser. If you override this, be sure 
to call super. 

    enclosingChooser - the panel to be added 

*javax.swing.colorchooser.AbstractColorChooserPanel.paint(Graphics)*

public void paint(java.awt.Graphics g)

Draws the panel. 

    g - the Graphics object 

*javax.swing.colorchooser.AbstractColorChooserPanel.uninstallChooserPanel(JColorChooser)*

public void uninstallChooserPanel(javax.swing.JColorChooser enclosingChooser)

Invoked when the panel is removed from the chooser. If override this, be sure 
to call super. 


*javax.swing.colorchooser.AbstractColorChooserPanel.updateChooser()*

public abstract void updateChooser()

Invoked automatically when the model's state changes. It is also called by 
installChooserPanel to allow you to set up the initial state of your chooser. 
Override this method to update your ChooserPanel. 




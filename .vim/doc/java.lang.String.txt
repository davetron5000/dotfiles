*java.lang.String* *String* The String class represents character strings.

public final class String
  extends    |java.lang.Object|
  implements |java.io.Serializable|
             |java.lang.Comparable|
             |java.lang.CharSequence|

|java.lang.String_Description|
|java.lang.String_Fields|
|java.lang.String_Constructors|
|java.lang.String_Methods|

================================================================================

*java.lang.String_Fields*
|java.util.Comparator_java.lang.String.CASE_INSENSITIVE_ORDER|

*java.lang.String_Constructors*
|java.lang.String()|Initializes a newly created String object so that it  repre
|java.lang.String(byte[])|Constructs a new String by decoding the specified arr
|java.lang.String(byte[],int)|Allocates a new String containing characters  con
|java.lang.String(byte[],int,int)|Constructs a new String by decoding the speci
|java.lang.String(byte[],int,int,int)|Allocates a new String constructed from a
|java.lang.String(byte[],int,int,String)|Constructs a new String by decoding th
|java.lang.String(byte[],String)|Constructs a new String by decoding the specif
|java.lang.String(char[])|Allocates a new String so that it represents the  seq
|java.lang.String(char[],int,int)|Allocates a new String that contains characte
|java.lang.String(int[],int,int)|Allocates a new String that contains character
|java.lang.String(String)|Initializes a newly created String object so that it 
|java.lang.String(StringBuffer)|Allocates a new string that contains the sequen
|java.lang.String(StringBuilder)|Allocates a new string that contains the seque

*java.lang.String_Methods*
|java.lang.String.charAt(int)|Returns the char value at the  specified index.
|java.lang.String.codePointAt(int)|Returns the character (Unicode code point) a
|java.lang.String.codePointBefore(int)|Returns the character (Unicode code poin
|java.lang.String.codePointCount(int,int)|Returns the number of Unicode code po
|java.lang.String.compareTo(String)|Compares two strings lexicographically.
|java.lang.String.compareToIgnoreCase(String)|Compares two strings lexicographi
|java.lang.String.concat(String)|Concatenates the specified string to the end o
|java.lang.String.contains(CharSequence)|Returns true if and only if this strin
|java.lang.String.contentEquals(CharSequence)|Returns true if and only if this 
|java.lang.String.contentEquals(StringBuffer)|Returns true if and only if this 
|java.lang.String.copyValueOf(char[])|Returns a String that represents the char
|java.lang.String.copyValueOf(char[],int,int)|Returns a String that represents 
|java.lang.String.endsWith(String)|Tests if this string ends with the specified
|java.lang.String.equals(Object)|Compares this string to the specified object.
|java.lang.String.equalsIgnoreCase(String)|Compares this String to another Stri
|java.lang.String.format(Locale,String,Object[])|Returns a formatted string usi
|java.lang.String.format(String,Object[])|Returns a formatted string using the 
|java.lang.String.getBytes()|Encodes this String into a sequence of bytes using
|java.lang.String.getBytes(int,int,byte[],int)|Copies characters from this stri
|java.lang.String.getBytes(String)|Encodes this String into a sequence of bytes
|java.lang.String.getChars(int,int,char[],int)|Copies characters from this stri
|java.lang.String.hashCode()|Returns a hash code for this string.
|java.lang.String.indexOf(int)|Returns the index within this string of the firs
|java.lang.String.indexOf(int,int)|Returns the index within this string of the 
|java.lang.String.indexOf(String)|Returns the index within this string of the f
|java.lang.String.indexOf(String,int)|Returns the index within this string of t
|java.lang.String.intern()|Returns a canonical representation for the string ob
|java.lang.String.lastIndexOf(int)|Returns the index within this string of the 
|java.lang.String.lastIndexOf(int,int)|Returns the index within this string of 
|java.lang.String.lastIndexOf(String)|Returns the index within this string of t
|java.lang.String.lastIndexOf(String,int)|Returns the index within this string 
|java.lang.String.length()|Returns the length of this string.
|java.lang.String.matches(String)|Tells whether or not this string matches the 
|java.lang.String.offsetByCodePoints(int,int)|Returns the index within this Str
|java.lang.String.regionMatches(boolean,int,String,int,int)|Tests if two string
|java.lang.String.regionMatches(int,String,int,int)|Tests if two string regions
|java.lang.String.replace(char,char)|Returns a new string resulting from replac
|java.lang.String.replace(CharSequence,CharSequence)|Replaces each substring of
|java.lang.String.replaceAll(String,String)|Replaces each substring of this str
|java.lang.String.replaceFirst(String,String)|Replaces the first substring of t
|java.lang.String.split(String)|Splits this string around matches of the givenj
|java.lang.String.split(String,int)|Splits this string around matches of the gi
|java.lang.String.startsWith(String)|Tests if this string starts with the speci
|java.lang.String.startsWith(String,int)|Tests if this string starts with the s
|java.lang.String.subSequence(int,int)|Returns a new character sequence that is
|java.lang.String.substring(int)|Returns a new string that is a substring of th
|java.lang.String.substring(int,int)|Returns a new string that is a substring o
|java.lang.String.toCharArray()|Converts this string to a new character array.
|java.lang.String.toLowerCase()|Converts all of the characters in this String t
|java.lang.String.toLowerCase(Locale)|Converts all of the characters in this St
|java.lang.String.toString()|This object (which is already a string!) is itself
|java.lang.String.toUpperCase()|Converts all of the characters in this String t
|java.lang.String.toUpperCase(Locale)|Converts all of the characters in this St
|java.lang.String.trim()|Returns a copy of the string, with leading and trailin
|java.lang.String.valueOf(boolean)|Returns the string representation of the boo
|java.lang.String.valueOf(char)|Returns the string representation of the char  
|java.lang.String.valueOf(char[])|Returns the string representation of the char
|java.lang.String.valueOf(char[],int,int)|Returns the string representation of 
|java.lang.String.valueOf(double)|Returns the string representation of the doub
|java.lang.String.valueOf(float)|Returns the string representation of the float
|java.lang.String.valueOf(int)|Returns the string representation of the int arg
|java.lang.String.valueOf(long)|Returns the string representation of the long a
|java.lang.String.valueOf(Object)|Returns the string representation of the Obje

*java.lang.String_Description*

The String class represents character strings. All string literals in Java 
programs, such as "abc", are implemented as instances of this class. 

Strings are constant; their values cannot be changed after they are created. 
String buffers support mutable strings. Because String objects are immutable 
they can be shared. For example: 

String str = "abc"; 

is equivalent to: 

char data[] = {'a', 'b', 'c'}; String str = new String(data); 

Here are some more examples of how strings can be used: 

System.out.println("abc"); String cde = "cde"; System.out.println("abc" + cde); 
String c = "abc".substring(2,3); String d = cde.substring(1, 2); 

The class String includes methods for examining individual characters of the 
sequence, for comparing strings, for searching strings, for extracting 
substrings, and for creating a copy of a string with all characters translated 
to uppercase or to lowercase. Case mapping is based on the Unicode Standard 
version specified by the Character(|java.lang.Character|) class. 

The Java language provides special support for the string concatenation 
operator (+), and for conversion of other objects to strings. String 
concatenation is implemented through the StringBuilder(or StringBuffer) class 
and its append method. String conversions are implemented through the method 
toString, defined by Object and inherited by all classes in Java. For 
additional information on string concatenation and conversion, see Gosling, 
Joy, and Steele, The Java Language Specification. 

Unless otherwise noted, passing a null argument to a constructor or method in 
this class will cause a (|java.lang.NullPointerException|) to be thrown. 

A String represents a string in the UTF-16 format in which supplementary 
characters are represented by surrogate pairs (see the section Unicode 
Character Representations in the Character class for more information). Index 
values refer to char code units, so a supplementary character uses two 
positions in a String. The String class provides methods for dealing with 
Unicode code points (i.e., characters), in addition to those for dealing with 
Unicode code units (i.e., char values). 


*java.util.Comparator_java.lang.String.CASE_INSENSITIVE_ORDER*

The String class represents character strings. All string literals in Java 
programs, such as "abc", are implemented as instances of this class. 

Strings are constant; their values cannot be changed after they are created. 
String buffers support mutable strings. Because String objects are immutable 
they can be shared. For example: 

String str = "abc"; 

is equivalent to: 

char data[] = {'a', 'b', 'c'}; String str = new String(data); 

Here are some more examples of how strings can be used: 

System.out.println("abc"); String cde = "cde"; System.out.println("abc" + cde); 
String c = "abc".substring(2,3); String d = cde.substring(1, 2); 

The class String includes methods for examining individual characters of the 
sequence, for comparing strings, for searching strings, for extracting 
substrings, and for creating a copy of a string with all characters translated 
to uppercase or to lowercase. Case mapping is based on the Unicode Standard 
version specified by the Character(|java.lang.Character|) class. 

The Java language provides special support for the string concatenation 
operator (+), and for conversion of other objects to strings. String 
concatenation is implemented through the StringBuilder(or StringBuffer) class 
and its append method. String conversions are implemented through the method 
toString, defined by Object and inherited by all classes in Java. For 
additional information on string concatenation and conversion, see Gosling, 
Joy, and Steele, The Java Language Specification. 

Unless otherwise noted, passing a null argument to a constructor or method in 
this class will cause a (|java.lang.NullPointerException|) to be thrown. 

A String represents a string in the UTF-16 format in which supplementary 
characters are represented by surrogate pairs (see the section Unicode 
Character Representations in the Character class for more information). Index 
values refer to char code units, so a supplementary character uses two 
positions in a String. The String class provides methods for dealing with 
Unicode code points (i.e., characters), in addition to those for dealing with 
Unicode code units (i.e., char values). 



*java.lang.String()*

public String()

Initializes a newly created String object so that it represents an empty 
character sequence. Note that use of this constructor is unnecessary since 
Strings are immutable. 


*java.lang.String(byte[])*

public String(byte[] bytes)

Constructs a new String by decoding the specified array of bytes using the 
platform's default charset. The length of the new String is a function of the 
charset, and hence may not be equal to the length of the byte array. 

The behavior of this constructor when the given bytes are not valid in the 
default charset is unspecified. The (|java.nio.charset.CharsetDecoder|) class 
should be used when more control over the decoding process is required. 

    bytes - the bytes to be decoded into characters 

*java.lang.String(byte[],int)*

public String(
  byte[] ascii,
  int hibyte)

Allocates a new String containing characters constructed from an array of 8-bit 
integer values. Each character cin the resulting string is constructed from the 
corresponding component b in the byte array such that: 

c == (char)(((hibyte and 0xff) << 8) | (b and 0xff)) 

    ascii - the bytes to be converted to characters. 
    hibyte - the top 8 bits of each 16-bit Unicode character. 

*java.lang.String(byte[],int,int)*

public String(
  byte[] bytes,
  int offset,
  int length)

Constructs a new String by decoding the specified subarray of bytes using the 
platform's default charset. The length of the new String is a function of the 
charset, and hence may not be equal to the length of the subarray. 

The behavior of this constructor when the given bytes are not valid in the 
default charset is unspecified. The (|java.nio.charset.CharsetDecoder|) class 
should be used when more control over the decoding process is required. 

    bytes - the bytes to be decoded into characters 
    offset - the index of the first byte to decode 
    length - the number of bytes to decode 

*java.lang.String(byte[],int,int,int)*

public String(
  byte[] ascii,
  int hibyte,
  int offset,
  int count)

Allocates a new String constructed from a subarray of an array of 8-bit integer 
values. 

The offset argument is the index of the first byte of the subarray, and the 
count argument specifies the length of the subarray. 

Each byte in the subarray is converted to a char as specified in the method 
above. 

    ascii - the bytes to be converted to characters. 
    hibyte - the top 8 bits of each 16-bit Unicode character. 
    offset - the initial offset. 
    count - the length. 

*java.lang.String(byte[],int,int,String)*

public String(
  byte[] bytes,
  int offset,
  int length,
  java.lang.String charsetName)
  throws |java.io.UnsupportedEncodingException|
         
Constructs a new String by decoding the specified subarray of bytes using the 
specified charset. The length of the new String is a function of the charset, 
and hence may not be equal to the length of the subarray. 

The behavior of this constructor when the given bytes are not valid in the 
given charset is unspecified. The (|java.nio.charset.CharsetDecoder|) class 
should be used when more control over the decoding process is required. 

    bytes - the bytes to be decoded into characters 
    offset - the index of the first byte to decode 
    length - the number of bytes to decode 
    charsetName - the name of a supported {@link java.nio.charset.Charset charset} 

*java.lang.String(byte[],String)*

public String(
  byte[] bytes,
  java.lang.String charsetName)
  throws |java.io.UnsupportedEncodingException|
         
Constructs a new String by decoding the specified array of bytes using the 
specified charset. The length of the new String is a function of the charset, 
and hence may not be equal to the length of the byte array. 

The behavior of this constructor when the given bytes are not valid in the 
given charset is unspecified. The (|java.nio.charset.CharsetDecoder|) class 
should be used when more control over the decoding process is required. 

    bytes - the bytes to be decoded into characters 
    charsetName - the name of a supported {@link java.nio.charset.Charset charset} 

*java.lang.String(char[])*

public String(char[] value)

Allocates a new String so that it represents the sequence of characters 
currently contained in the character array argument. The contents of the 
character array are copied; subsequent modification of the character array does 
not affect the newly created string. 

    value - the initial value of the string. 

*java.lang.String(char[],int,int)*

public String(
  char[] value,
  int offset,
  int count)

Allocates a new String that contains characters from a subarray of the 
character array argument. The offset argument is the index of the first 
character of the subarray and the count argument specifies the length of the 
subarray. The contents of the subarray are copied; subsequent modification of 
the character array does not affect the newly created string. 

    value - array that is the source of characters. 
    offset - the initial offset. 
    count - the length. 

*java.lang.String(int[],int,int)*

public String(
  int[] codePoints,
  int offset,
  int count)

Allocates a new String that contains characters from a subarray of the Unicode 
code point array argument. The offset argument is the index of the first code 
point of the subarray and the count argument specifies the length of the 
subarray. The contents of the subarray are converted to chars; subsequent 
modification of the int array does not affect the newly created string. 

    codePoints - array that is the source of Unicode code points. 
    offset - the initial offset. 
    count - the length. 

*java.lang.String(String)*

public String(java.lang.String original)

Initializes a newly created String object so that it represents the same 
sequence of characters as the argument; in other words, the newly created 
string is a copy of the argument string. Unless an explicit copy of original is 
needed, use of this constructor is unnecessary since Strings are immutable. 

    original - a String. 

*java.lang.String(StringBuffer)*

public String(java.lang.StringBuffer buffer)

Allocates a new string that contains the sequence of characters currently 
contained in the string buffer argument. The contents of the string buffer are 
copied; subsequent modification of the string buffer does not affect the newly 
created string. 

    buffer - a StringBuffer. 

*java.lang.String(StringBuilder)*

public String(java.lang.StringBuilder builder)

Allocates a new string that contains the sequence of characters currently 
contained in the string builder argument. The contents of the string builder 
are copied; subsequent modification of the string builder does not affect the 
newly created string. 

This constructor is provided to ease migration to StringBuilder. Obtaining a 
string from a string builder via the toString method is likely to run faster 
and is generally preferred. 

    builder - a StringBuilder 

*java.lang.String.charAt(int)*

public char charAt(int index)

Returns the char value at the specified index. An index ranges from 0 to 
length() - 1. The first char value of the sequence is at index 0, the next at 
index 1, and so on, as for array indexing. 

If the char value specified by the index is a surrogate, the surrogate value is 
returned. 

    index - the index of the char value. 

    Returns: the char value at the specified index of this string. The first char value is 
             at index 0. 
*java.lang.String.codePointAt(int)*

public int codePointAt(int index)

Returns the character (Unicode code point) at the specified index. The index 
refers to char values (Unicode code units) and ranges from 0 to 
(|java.lang.String|) - 1. 

If the char value specified at the given index is in the high-surrogate range, 
the following index is less than the length of this String, and the char value 
at the following index is in the low-surrogate range, then the supplementary 
code point corresponding to this surrogate pair is returned. Otherwise, the 
char value at the given index is returned. 

    index - the index to the char values 

    Returns: the code point value of the character at the index 
*java.lang.String.codePointBefore(int)*

public int codePointBefore(int index)

Returns the character (Unicode code point) before the specified index. The 
index refers to char values (Unicode code units) and ranges from 1 to 
length(|java.lang.CharSequence|) . 

If the char value at (index - 1) is in the low-surrogate range, (index - 2) is 
not negative, and the char value at (index - 2) is in the high-surrogate range, 
then the supplementary code point value of the surrogate pair is returned. If 
the char value at index - 1 is an unpaired low-surrogate or a high-surrogate, 
the surrogate value is returned. 

    index - the index following the code point that should be returned 

    Returns: the Unicode code point value before the given index. 
*java.lang.String.codePointCount(int,int)*

public int codePointCount(
  int beginIndex,
  int endIndex)

Returns the number of Unicode code points in the specified text range of this 
String. The text range begins at the specified beginIndex and extends to the 
char at index endIndex - 1. Thus the length (in chars) of the text range is 
endIndex-beginIndex. Unpaired surrogates within the text range count as one 
code point each. 

    beginIndex - the index to the first char of the text range. 
    endIndex - the index after the last char of the text range. 

    Returns: the number of Unicode code points in the specified text range 
*java.lang.String.compareTo(String)*

public int compareTo(java.lang.String anotherString)

Compares two strings lexicographically. The comparison is based on the Unicode 
value of each character in the strings. The character sequence represented by 
this String object is compared lexicographically to the character sequence 
represented by the argument string. The result is a negative integer if this 
String object lexicographically precedes the argument string. The result is a 
positive integer if this String object lexicographically follows the argument 
string. The result is zero if the strings are equal; compareTo returns 0 
exactly when the (|java.lang.String|) method would return true. 

This is the definition of lexicographic ordering. If two strings are different, 
then either they have different characters at some index that is a valid index 
for both strings, or their lengths are different, or both. If they have 
different characters at one or more index positions, let k be the smallest such 
index; then the string whose character at position k has the smaller value, as 
determined by using the < operator, lexicographically precedes the other 
string. In this case, compareTo returns the difference of the two character 
values at position k in the two string -- that is, the value: 

this.charAt(k)-anotherString.charAt(k) 

If there is no index position at which they differ, then the shorter string 
lexicographically precedes the longer string. In this case, compareTo returns 
the difference of the lengths of the strings -- that is, the value: 

this.length()-anotherString.length() 

    anotherString - the String to be compared. 

    Returns: the value 0 if the argument string is equal to this string; a value less than 0 
             if this string is lexicographically less than the string argument; 
             and a value greater than 0 if this string is lexicographically 
             greater than the string argument. 
*java.lang.String.compareToIgnoreCase(String)*

public int compareToIgnoreCase(java.lang.String str)

Compares two strings lexicographically, ignoring case differences. This method 
returns an integer whose sign is that of calling compareTo with normalized 
versions of the strings where case differences have been eliminated by calling 
Character.toLowerCase(Character.toUpperCase(character)) on each character. 

Note that this method does not take locale into account, and will result in an 
unsatisfactory ordering for certain locales. The java.text package provides 
collators to allow locale-sensitive ordering. 

    str - the String to be compared. 

    Returns: a negative integer, zero, or a positive integer as the specified String is 
             greater than, equal to, or less than this String, ignoring case 
             considerations. 
*java.lang.String.concat(String)*

public |java.lang.String| concat(java.lang.String str)

Concatenates the specified string to the end of this string. 

If the length of the argument string is 0, then this String object is returned. 
Otherwise, a new String object is created, representing a character sequence 
that is the concatenation of the character sequence represented by this String 
object and the character sequence represented by the argument string. Examples: 

"cares".concat("s") returns "caress" "to".concat("get").concat("her") returns 
"together" 

    str - the String that is concatenated to the end of this String. 

    Returns: a string that represents the concatenation of this object's characters followed 
             by the string argument's characters. 
*java.lang.String.contains(CharSequence)*

public boolean contains(java.lang.CharSequence s)

Returns true if and only if this string contains the specified sequence of char 
values. 

    s - the sequence to search for 

    Returns: true if this string contains s, false otherwise 
*java.lang.String.contentEquals(CharSequence)*

public boolean contentEquals(java.lang.CharSequence cs)

Returns true if and only if this String represents the same sequence of char 
values as the specified sequence. 

    cs - the sequence to compare to. 

    Returns: true if and only if this String represents the same sequence of char values as 
             the specified sequence, otherwise false. 
*java.lang.String.contentEquals(StringBuffer)*

public boolean contentEquals(java.lang.StringBuffer sb)

Returns true if and only if this String represents the same sequence of 
characters as the specified StringBuffer. 

    sb - the StringBuffer to compare to. 

    Returns: true if and only if this String represents the same sequence of characters as 
             the specified StringBuffer, otherwise false. 
*java.lang.String.copyValueOf(char[])*

public static |java.lang.String| copyValueOf(char[] data)

Returns a String that represents the character sequence in the array specified. 

    data - the character array. 

    Returns: a String that contains the characters of the character array. 
*java.lang.String.copyValueOf(char[],int,int)*

public static |java.lang.String| copyValueOf(
  char[] data,
  int offset,
  int count)

Returns a String that represents the character sequence in the array specified. 

    data - the character array. 
    offset - initial offset of the subarray. 
    count - length of the subarray. 

    Returns: a String that contains the characters of the specified subarray of the 
             character array. 
*java.lang.String.endsWith(String)*

public boolean endsWith(java.lang.String suffix)

Tests if this string ends with the specified suffix. 

    suffix - the suffix. 

    Returns: true if the character sequence represented by the argument is a suffix of the 
             character sequence represented by this object; false otherwise. 
             Note that the result will be true if the argument is the empty 
             string or is equal to this String object as determined by the 
             {@link #equals(Object)} method. 
*java.lang.String.equals(Object)*

public boolean equals(java.lang.Object anObject)

Compares this string to the specified object. The result is true if and only if 
the argument is not null and is a String object that represents the same 
sequence of characters as this object. 

    anObject - the object to compare this String against. 

    Returns: true if the String are equal; false otherwise. 
*java.lang.String.equalsIgnoreCase(String)*

public boolean equalsIgnoreCase(java.lang.String anotherString)

Compares this String to another String, ignoring case considerations. Two 
strings are considered equal ignoring case if they are of the same length, and 
corresponding characters in the two strings are equal ignoring case. 

Two characters c1 and c2 are considered the same, ignoring case if at least one 
of the following is true: The two characters are the same (as compared by the 
== operator). Applying the method (|java.lang.Character|) to each character 
produces the same result. Applying the method (|java.lang.Character|) to each 
character produces the same result. 

    anotherString - the String to compare this String against. 

    Returns: true if the argument is not null and the Strings are equal, ignoring case; 
             false otherwise. 
*java.lang.String.format(Locale,String,Object[])*

public static |java.lang.String| format(
  java.util.Locale l,
  java.lang.String format,
  java.lang.Object[] args)

Returns a formatted string using the specified locale, format string, and 
arguments. 

    l - The {@linkplain java.util.Locale locale} to apply during formatting. If l is 
       null then no localization is applied. 
    format - A format string 
    args - Arguments referenced by the format specifiers in the format string. If there 
       are more arguments than format specifiers, the extra arguments are 
       ignored. The number of arguments is variable and may be zero. The 
       maximum number of arguments is limited by the maximum dimension of a 
       Java array as defined by the Java Virtual Machine Specification. The 
       behaviour on a null argument depends on the conversion. 

    Returns: A formatted string 
*java.lang.String.format(String,Object[])*

public static |java.lang.String| format(
  java.lang.String format,
  java.lang.Object[] args)

Returns a formatted string using the specified format string and arguments. 

The locale always used is the one returned by 
Locale.getDefault()(|java.util.Locale|) . 

    format - A format string 
    args - Arguments referenced by the format specifiers in the format string. If there 
       are more arguments than format specifiers, the extra arguments are 
       ignored. The number of arguments is variable and may be zero. The 
       maximum number of arguments is limited by the maximum dimension of a 
       Java array as defined by the Java Virtual Machine Specification. The 
       behaviour on a null argument depends on the conversion. 

    Returns: A formatted string 
*java.lang.String.getBytes()*

public byte getBytes()

Encodes this String into a sequence of bytes using the platform's default 
charset, storing the result into a new byte array. 

The behavior of this method when this string cannot be encoded in the default 
charset is unspecified. The (|java.nio.charset.CharsetEncoder|) class should be 
used when more control over the encoding process is required. 


    Returns: The resultant byte array 
*java.lang.String.getBytes(int,int,byte[],int)*

public void getBytes(
  int srcBegin,
  int srcEnd,
  byte[] dst,
  int dstBegin)

Copies characters from this string into the destination byte array. Each byte 
receives the 8 low-order bits of the corresponding character. The eight 
high-order bits of each character are not copied and do not participate in the 
transfer in any way. 

The first character to be copied is at index srcBegin; the last character to be 
copied is at index srcEnd-1. The total number of characters to be copied is 
srcEnd-srcBegin. The characters, converted to bytes, are copied into the 
subarray of dst starting at index dstBegin and ending at index: 

dstbegin + (srcEnd-srcBegin) - 1 

    srcBegin - index of the first character in the string to copy. 
    srcEnd - index after the last character in the string to copy. 
    dst - the destination array. 
    dstBegin - the start offset in the destination array. 

*java.lang.String.getBytes(String)*

public byte getBytes(java.lang.String charsetName)
  throws |java.io.UnsupportedEncodingException|
         
Encodes this String into a sequence of bytes using the named charset, storing 
the result into a new byte array. 

The behavior of this method when this string cannot be encoded in the given 
charset is unspecified. The (|java.nio.charset.CharsetEncoder|) class should be 
used when more control over the encoding process is required. 

    charsetName - the name of a supported {@link java.nio.charset.Charset charset} 

    Returns: The resultant byte array 
*java.lang.String.getChars(int,int,char[],int)*

public void getChars(
  int srcBegin,
  int srcEnd,
  char[] dst,
  int dstBegin)

Copies characters from this string into the destination character array. 

The first character to be copied is at index srcBegin; the last character to be 
copied is at index srcEnd-1 (thus the total number of characters to be copied 
is srcEnd-srcBegin). The characters are copied into the subarray of dst 
starting at index dstBegin and ending at index: 

dstbegin + (srcEnd-srcBegin) - 1 

    srcBegin - index of the first character in the string to copy. 
    srcEnd - index after the last character in the string to copy. 
    dst - the destination array. 
    dstBegin - the start offset in the destination array. 

*java.lang.String.hashCode()*

public int hashCode()

Returns a hash code for this string. The hash code for a String object is 
computed as 

s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1] 

using int arithmetic, where s[i] is the ith character of the string, n is the 
length of the string, and ^ indicates exponentiation. (The hash value of the 
empty string is zero.) 


    Returns: a hash code value for this object. 
*java.lang.String.indexOf(int)*

public int indexOf(int ch)

Returns the index within this string of the first occurrence of the specified 
character. If a character with value ch occurs in the character sequence 
represented by this String object, then the index (in Unicode code units) of 
the first such occurrence is returned. For values of ch in the range from 0 to 
0xFFFF (inclusive), this is the smallest value k such that: 

this.charAt(k) == ch 

is true. For other values of ch, it is the smallest value k such that: 

this.codePointAt(k) == ch 

is true. In either case, if no such character occurs in this string, then -1 is 
returned. 

    ch - a character (Unicode code point). 

    Returns: the index of the first occurrence of the character in the character sequence 
             represented by this object, or -1 if the character does not occur. 
*java.lang.String.indexOf(int,int)*

public int indexOf(
  int ch,
  int fromIndex)

Returns the index within this string of the first occurrence of the specified 
character, starting the search at the specified index. 

If a character with value ch occurs in the character sequence represented by 
this String object at an index no smaller than fromIndex, then the index of the 
first such occurrence is returned. For values of ch in the range from 0 to 
0xFFFF (inclusive), this is the smallest value k such that: 

(this.charAt(k) == ch) (k >= fromIndex) 

is true. For other values of ch, it is the smallest value k such that: 

(this.codePointAt(k) == ch) (k >= fromIndex) 

is true. In either case, if no such character occurs in this string at or after 
position fromIndex, then -1 is returned. 

There is no restriction on the value of fromIndex. If it is negative, it has 
the same effect as if it were zero: this entire string may be searched. If it 
is greater than the length of this string, it has the same effect as if it were 
equal to the length of this string: -1 is returned. 

All indices are specified in char values (Unicode code units). 

    ch - a character (Unicode code point). 
    fromIndex - the index to start the search from. 

    Returns: the index of the first occurrence of the character in the character sequence 
             represented by this object that is greater than or equal to 
             fromIndex, or -1 if the character does not occur. 
*java.lang.String.indexOf(String)*

public int indexOf(java.lang.String str)

Returns the index within this string of the first occurrence of the specified 
substring. The integer returned is the smallest value k such that: 

this.startsWith(str, k) 

is true. 

    str - any string. 

    Returns: if the string argument occurs as a substring within this object, then the index 
             of the first character of the first such substring is returned; if 
             it does not occur as a substring, -1 is returned. 
*java.lang.String.indexOf(String,int)*

public int indexOf(
  java.lang.String str,
  int fromIndex)

Returns the index within this string of the first occurrence of the specified 
substring, starting at the specified index. The integer returned is the 
smallest value k for which: 

k >= Math.min(fromIndex, str.length()) this.startsWith(str, k) 

If no such value of k exists, then -1 is returned. 

    str - the substring for which to search. 
    fromIndex - the index from which to start the search. 

    Returns: the index within this string of the first occurrence of the specified 
             substring, starting at the specified index. 
*java.lang.String.intern()*

public native |java.lang.String| intern()

Returns a canonical representation for the string object. 

A pool of strings, initially empty, is maintained privately by the class 
String. 

When the intern method is invoked, if the pool already contains a string equal 
to this String object as determined by the (|java.lang.String|) method, then 
the string from the pool is returned. Otherwise, this String object is added to 
the pool and a reference to this String object is returned. 

It follows that for any two strings s and t, s.intern()==t.intern() is true if 
and only if s.equals(t) is true. 

All literal strings and string-valued constant expressions are interned. String 
literals are defined in 3.10.5 of the Java Language Specification 


    Returns: a string that has the same contents as this string, but is guaranteed to be 
             from a pool of unique strings. 
*java.lang.String.lastIndexOf(int)*

public int lastIndexOf(int ch)

Returns the index within this string of the last occurrence of the specified 
character. For values of ch in the range from 0 to 0xFFFF (inclusive), the 
index (in Unicode code units) returned is the largest value k such that: 

this.charAt(k) == ch 

is true. For other values of ch, it is the largest value k such that: 

this.codePointAt(k) == ch 

is true. In either case, if no such character occurs in this string, then -1 is 
returned. The String is searched backwards starting at the last character. 

    ch - a character (Unicode code point). 

    Returns: the index of the last occurrence of the character in the character sequence 
             represented by this object, or -1 if the character does not occur. 
*java.lang.String.lastIndexOf(int,int)*

public int lastIndexOf(
  int ch,
  int fromIndex)

Returns the index within this string of the last occurrence of the specified 
character, searching backward starting at the specified index. For values of ch 
in the range from 0 to 0xFFFF (inclusive), the index returned is the largest 
value k such that: 

(this.charAt(k) == ch) (k <= fromIndex) 

is true. For other values of ch, it is the largest value k such that: 

(this.codePointAt(k) == ch) (k <= fromIndex) 

is true. In either case, if no such character occurs in this string at or 
before position fromIndex, then -1 is returned. 

All indices are specified in char values (Unicode code units). 

    ch - a character (Unicode code point). 
    fromIndex - the index to start the search from. There is no restriction on the value of 
       fromIndex. If it is greater than or equal to the length of this string, 
       it has the same effect as if it were equal to one less than the length 
       of this string: this entire string may be searched. If it is negative, 
       it has the same effect as if it were -1: -1 is returned. 

    Returns: the index of the last occurrence of the character in the character sequence 
             represented by this object that is less than or equal to 
             fromIndex, or -1 if the character does not occur before that 
             point. 
*java.lang.String.lastIndexOf(String)*

public int lastIndexOf(java.lang.String str)

Returns the index within this string of the rightmost occurrence of the 
specified substring. The rightmost empty string "" is considered to occur at 
the index value this.length(). The returned index is the largest value k such 
that 

this.startsWith(str, k) 

is true. 

    str - the substring to search for. 

    Returns: if the string argument occurs one or more times as a substring within this 
             object, then the index of the first character of the last such 
             substring is returned. If it does not occur as a substring, -1 is 
             returned. 
*java.lang.String.lastIndexOf(String,int)*

public int lastIndexOf(
  java.lang.String str,
  int fromIndex)

Returns the index within this string of the last occurrence of the specified 
substring, searching backward starting at the specified index. The integer 
returned is the largest value k such that: 

k <= Math.min(fromIndex, str.length()) this.startsWith(str, k) 

If no such value of k exists, then -1 is returned. 

    str - the substring to search for. 
    fromIndex - the index to start the search from. 

    Returns: the index within this string of the last occurrence of the specified substring. 
*java.lang.String.length()*

public int length()

Returns the length of this string. The length is equal to the number of 16-bit 
Unicode characters in the string. 


    Returns: the length of the sequence of characters represented by this object. 
*java.lang.String.matches(String)*

public boolean matches(java.lang.String regex)

Tells whether or not this string matches the given regular expression. 

An invocation of this method of the form str.matches(regex) yields exactly the 
same result as the expression 

(|java.util.regex.Pattern|) . matches(|java.util.regex.Pattern|) (regex, str) 

    regex - the regular expression to which this string is to be matched 

    Returns: true if, and only if, this string matches the given regular expression 
*java.lang.String.offsetByCodePoints(int,int)*

public int offsetByCodePoints(
  int index,
  int codePointOffset)

Returns the index within this String that is offset from the given index by 
codePointOffset code points. Unpaired surrogates within the text range given by 
index and codePointOffset count as one code point each. 

    index - the index to be offset 
    codePointOffset - the offset in code points 

    Returns: the index within this String 
*java.lang.String.regionMatches(boolean,int,String,int,int)*

public boolean regionMatches(
  boolean ignoreCase,
  int toffset,
  java.lang.String other,
  int ooffset,
  int len)

Tests if two string regions are equal. 

A substring of this String object is compared to a substring of the argument 
other. The result is true if these substrings represent character sequences 
that are the same, ignoring case if and only if ignoreCase is true. The 
substring of this String object to be compared begins at index toffset and has 
length len. The substring of other to be compared begins at index ooffset and 
has length len. The result is false if and only if at least one of the 
following is true: toffset is negative. ooffset is negative. toffset+len is 
greater than the length of this String object. ooffset+len is greater than the 
length of the other argument. ignoreCase is false and there is some nonnegative 
integer k less than len such that: 

this.charAt(toffset+k) != other.charAt(ooffset+k) 

ignoreCase is true and there is some nonnegative integer k less than len such 
that: 

Character.toLowerCase(this.charAt(toffset+k)) != 
Character.toLowerCase(other.charAt(ooffset+k)) 

and: 

Character.toUpperCase(this.charAt(toffset+k)) != 
Character.toUpperCase(other.charAt(ooffset+k)) 



    ignoreCase - if true, ignore case when comparing characters. 
    toffset - the starting offset of the subregion in this string. 
    other - the string argument. 
    ooffset - the starting offset of the subregion in the string argument. 
    len - the number of characters to compare. 

    Returns: true if the specified subregion of this string matches the specified subregion 
             of the string argument; false otherwise. Whether the matching is 
             exact or case insensitive depends on the ignoreCase argument. 
*java.lang.String.regionMatches(int,String,int,int)*

public boolean regionMatches(
  int toffset,
  java.lang.String other,
  int ooffset,
  int len)

Tests if two string regions are equal. 

A substring of this String object is compared to a substring of the argument 
other. The result is true if these substrings represent identical character 
sequences. The substring of this String object to be compared begins at index 
toffset and has length len. The substring of other to be compared begins at 
index ooffset and has length len. The result is false if and only if at least 
one of the following is true: toffset is negative. ooffset is negative. 
toffset+len is greater than the length of this String object. ooffset+len is 
greater than the length of the other argument. There is some nonnegative 
integer k less than len such that: 
this.charAt(toffset+k)!=other.charAt(ooffset+k) 

    toffset - the starting offset of the subregion in this string. 
    other - the string argument. 
    ooffset - the starting offset of the subregion in the string argument. 
    len - the number of characters to compare. 

    Returns: true if the specified subregion of this string exactly matches the specified 
             subregion of the string argument; false otherwise. 
*java.lang.String.replace(char,char)*

public |java.lang.String| replace(
  char oldChar,
  char newChar)

Returns a new string resulting from replacing all occurrences of oldChar in 
this string with newChar. 

If the character oldChar does not occur in the character sequence represented 
by this String object, then a reference to this String object is returned. 
Otherwise, a new String object is created that represents a character sequence 
identical to the character sequence represented by this String object, except 
that every occurrence of oldChar is replaced by an occurrence of newChar. 

Examples: 

"mesquite in your cellar".replace('e', 'o') returns "mosquito in your collar" 
"the war of baronets".replace('r', 'y') returns "the way of bayonets" "sparring 
with a purple porpoise".replace('p', 't') returns "starring with a turtle 
tortoise" "JonL".replace('q', 'x') returns "JonL" (no change) 

    oldChar - the old character. 
    newChar - the new character. 

    Returns: a string derived from this string by replacing every occurrence of oldChar with 
             newChar. 
*java.lang.String.replace(CharSequence,CharSequence)*

public |java.lang.String| replace(
  java.lang.CharSequence target,
  java.lang.CharSequence replacement)

Replaces each substring of this string that matches the literal target sequence 
with the specified literal replacement sequence. The replacement proceeds from 
the beginning of the string to the end, for example, replacing "aa" with "b" in 
the string "aaa" will result in "ba" rather than "ab". 

    target - The sequence of char values to be replaced 
    replacement - The replacement sequence of char values 

    Returns: The resulting string 
*java.lang.String.replaceAll(String,String)*

public |java.lang.String| replaceAll(
  java.lang.String regex,
  java.lang.String replacement)

Replaces each substring of this string that matches the given regular 
expression with the given replacement. 

An invocation of this method of the form str.replaceAll(regex, repl) yields 
exactly the same result as the expression 

(|java.util.regex.Pattern|) . compile(|java.util.regex.Pattern|) (regex). 
matcher(|java.util.regex.Pattern|) (str). replaceAll(|java.util.regex.Matcher|) 
(repl) 

    regex - the regular expression to which this string is to be matched 

    Returns: The resulting String 
*java.lang.String.replaceFirst(String,String)*

public |java.lang.String| replaceFirst(
  java.lang.String regex,
  java.lang.String replacement)

Replaces the first substring of this string that matches the given regular 
expression with the given replacement. 

An invocation of this method of the form str.replaceFirst(regex, repl) yields 
exactly the same result as the expression 

(|java.util.regex.Pattern|) . compile(|java.util.regex.Pattern|) (regex). 
matcher(|java.util.regex.Pattern|) (str). 
replaceFirst(|java.util.regex.Matcher|) (repl) 

    regex - the regular expression to which this string is to be matched 

    Returns: The resulting String 
*java.lang.String.split(String)*

public |java.lang.String| split(java.lang.String regex)

Splits this string around matches of the given regular 
expression(|java.util.regex.Pattern|) . 

This method works as if by invoking the two-argument split(|java.lang.String|) 
method with the given expression and a limit argument of zero. Trailing empty 
strings are therefore not included in the resulting array. 

The string "boo:and:foo", for example, yields the following results with these 
expressions: 



Regex Result 

: { "boo", "and", "foo" } o { "b", "", ":and:f" } 

    regex - the delimiting regular expression 

    Returns: the array of strings computed by splitting this string around matches of the 
             given regular expression 
*java.lang.String.split(String,int)*

public |java.lang.String| split(
  java.lang.String regex,
  int limit)

Splits this string around matches of the given regular expression. 

The array returned by this method contains each substring of this string that 
is terminated by another substring that matches the given expression or is 
terminated by the end of the string. The substrings in the array are in the 
order in which they occur in this string. If the expression does not match any 
part of the input then the resulting array has just one element, namely this 
string. 

The limit parameter controls the number of times the pattern is applied and 
therefore affects the length of the resulting array. If the limit n is greater 
than zero then the pattern will be applied at most n-1 times, the array's 
length will be no greater than n, and the array's last entry will contain all 
input beyond the last matched delimiter. If n is non-positive then the pattern 
will be applied as many times as possible and the array can have any length. If 
n is zero then the pattern will be applied as many times as possible, the array 
can have any length, and trailing empty strings will be discarded. 

The string "boo:and:foo", for example, yields the following results with these 
parameters: 



Regex Limit Result 

: 2 { "boo", "and:foo" } : 5 { "boo", "and", "foo" } : -2 { "boo", "and", "foo" 
} o 5 { "b", "", ":and:f", "", "" } o -2 { "b", "", ":and:f", "", "" } o 0 { 
"b", "", ":and:f" } 

An invocation of this method of the form str.split(regex,n) yields the same 
result as the expression 

(|java.util.regex.Pattern|) . compile(|java.util.regex.Pattern|) (regex). 
split(|java.util.regex.Pattern|) (str,n) 

    regex - the delimiting regular expression 
    limit - the result threshold, as described above 

    Returns: the array of strings computed by splitting this string around matches of the 
             given regular expression 
*java.lang.String.startsWith(String)*

public boolean startsWith(java.lang.String prefix)

Tests if this string starts with the specified prefix. 

    prefix - the prefix. 

    Returns: true if the character sequence represented by the argument is a prefix of the 
             character sequence represented by this string; false otherwise. 
             Note also that true will be returned if the argument is an empty 
             string or is equal to this String object as determined by the 
             {@link #equals(Object)} method. 
*java.lang.String.startsWith(String,int)*

public boolean startsWith(
  java.lang.String prefix,
  int toffset)

Tests if this string starts with the specified prefix beginning a specified 
index. 

    prefix - the prefix. 
    toffset - where to begin looking in the string. 

    Returns: true if the character sequence represented by the argument is a prefix of the 
             substring of this object starting at index toffset; false 
             otherwise. The result is false if toffset is negative or greater 
             than the length of this String object; otherwise the result is the 
             same as the result of the expression 

this.substring(toffset).startsWith(prefix) 
*java.lang.String.subSequence(int,int)*

public |java.lang.CharSequence| subSequence(
  int beginIndex,
  int endIndex)

Returns a new character sequence that is a subsequence of this sequence. 

An invocation of this method of the form 



str.subSequence(begin,end) 

behaves in exactly the same way as the invocation 



str.substring(begin,end) 

This method is defined so that the String class can implement the 
(|java.lang.CharSequence|) interface. 

    beginIndex - the begin index, inclusive. 
    endIndex - the end index, exclusive. 

    Returns: the specified subsequence. 
*java.lang.String.substring(int)*

public |java.lang.String| substring(int beginIndex)

Returns a new string that is a substring of this string. The substring begins 
with the character at the specified index and extends to the end of this 
string. Examples: 

"unhappy".substring(2) returns "happy" "Harbison".substring(3) returns "bison" 
"emptiness".substring(9) returns "" (an empty string) 

    beginIndex - the beginning index, inclusive. 

    Returns: the specified substring. 
*java.lang.String.substring(int,int)*

public |java.lang.String| substring(
  int beginIndex,
  int endIndex)

Returns a new string that is a substring of this string. The substring begins 
at the specified beginIndex and extends to the character at index endIndex - 1. 
Thus the length of the substring is endIndex-beginIndex. 

Examples: 

"hamburger".substring(4, 8) returns "urge" "smiles".substring(1, 5) returns 
"mile" 

    beginIndex - the beginning index, inclusive. 
    endIndex - the ending index, exclusive. 

    Returns: the specified substring. 
*java.lang.String.toCharArray()*

public char toCharArray()

Converts this string to a new character array. 


    Returns: a newly allocated character array whose length is the length of this string and 
             whose contents are initialized to contain the character sequence 
             represented by this string. 
*java.lang.String.toLowerCase()*

public |java.lang.String| toLowerCase()

Converts all of the characters in this String to lower case using the rules of 
the default locale. This is equivalent to calling 
toLowerCase(Locale.getDefault()). 


    Returns: the String, converted to lowercase. 
*java.lang.String.toLowerCase(Locale)*

public |java.lang.String| toLowerCase(java.util.Locale locale)

Converts all of the characters in this String to lower case using the rules of 
the given Locale. Case mapping is based on the Unicode Standard version 
specified by the Character(|java.lang.Character|) class. Since case mappings 
are not always 1:1 char mappings, the resulting String may be a different 
length than the original String. 

Examples of lowercase mappings are in the following table: 

Language Code of Locale Upper Case Lower Case Description 

tr (Turkish) u0130 u0069 capital letter I with dot above -> small letter i 

tr (Turkish) u0049 u0131 capital letter I -> small letter dotless i 

(all) French Fries french fries lowercased all chars in String 

(all) 





lowercased all chars in String 



    locale - use the case transformation rules for this locale 

    Returns: the String, converted to lowercase. 
*java.lang.String.toString()*

public |java.lang.String| toString()

This object (which is already a string!) is itself returned. 


    Returns: the string itself. 
*java.lang.String.toUpperCase()*

public |java.lang.String| toUpperCase()

Converts all of the characters in this String to upper case using the rules of 
the default locale. This method is equivalent to 
toUpperCase(Locale.getDefault()). 


    Returns: the String, converted to uppercase. 
*java.lang.String.toUpperCase(Locale)*

public |java.lang.String| toUpperCase(java.util.Locale locale)

Converts all of the characters in this String to upper case using the rules of 
the given Locale. Case mapping is based on the Unicode Standard version 
specified by the Character(|java.lang.Character|) class. Since case mappings 
are not always 1:1 char mappings, the resulting String may be a different 
length than the original String. 

Examples of locale-sensitive and 1:M case mappings are in the following table. 



Language Code of Locale Lower Case Upper Case Description 

tr (Turkish) u0069 u0130 small letter i -> capital letter I with dot above 

tr (Turkish) u0131 u0049 small letter dotless i -> capital letter I 

(all) u00df u0053 u0053 small letter sharp s -> two letters: SS 

(all) Fahrvergngen FAHRVERGNGEN 



    locale - use the case transformation rules for this locale 

    Returns: the String, converted to uppercase. 
*java.lang.String.trim()*

public |java.lang.String| trim()

Returns a copy of the string, with leading and trailing whitespace omitted. 

If this String object represents an empty character sequence, or the first and 
last characters of character sequence represented by this String object both 
have codes greater than 'u0020' (the space character), then a reference to this 
String object is returned. 

Otherwise, if there is no character with a code greater than 'u0020' in the 
string, then a new String object representing an empty string is created and 
returned. 

Otherwise, let k be the index of the first character in the string whose code 
is greater than 'u0020', and let m be the index of the last character in the 
string whose code is greater than 'u0020'. A new String object is created, 
representing the substring of this string that begins with the character at 
index k and ends with the character at index m-that is, the result of 
this.substring(k,m+1). 

This method may be used to trim whitespace (as defined above) from the 
beginning and end of a string. 


    Returns: A copy of this string with leading and trailing white space removed, or this 
             string if it has no leading or trailing white space. 
*java.lang.String.valueOf(boolean)*

public static |java.lang.String| valueOf(boolean b)

Returns the string representation of the boolean argument. 

    b - a boolean. 

    Returns: if the argument is true, a string equal to "true" is returned; otherwise, a 
             string equal to "false" is returned. 
*java.lang.String.valueOf(char)*

public static |java.lang.String| valueOf(char c)

Returns the string representation of the char argument. 

    c - a char. 

    Returns: a string of length 1 containing as its single character the argument c. 
*java.lang.String.valueOf(char[])*

public static |java.lang.String| valueOf(char[] data)

Returns the string representation of the char array argument. The contents of 
the character array are copied; subsequent modification of the character array 
does not affect the newly created string. 

    data - a char array. 

    Returns: a newly allocated string representing the same sequence of characters contained 
             in the character array argument. 
*java.lang.String.valueOf(char[],int,int)*

public static |java.lang.String| valueOf(
  char[] data,
  int offset,
  int count)

Returns the string representation of a specific subarray of the char array 
argument. 

The offset argument is the index of the first character of the subarray. The 
count argument specifies the length of the subarray. The contents of the 
subarray are copied; subsequent modification of the character array does not 
affect the newly created string. 

    data - the character array. 
    offset - the initial offset into the value of the String. 
    count - the length of the value of the String. 

    Returns: a string representing the sequence of characters contained in the subarray of 
             the character array argument. 
*java.lang.String.valueOf(double)*

public static |java.lang.String| valueOf(double d)

Returns the string representation of the double argument. 

The representation is exactly the one returned by the Double.toString method of 
one argument. 

    d - a double. 

    Returns: a string representation of the double argument. 
*java.lang.String.valueOf(float)*

public static |java.lang.String| valueOf(float f)

Returns the string representation of the float argument. 

The representation is exactly the one returned by the Float.toString method of 
one argument. 

    f - a float. 

    Returns: a string representation of the float argument. 
*java.lang.String.valueOf(int)*

public static |java.lang.String| valueOf(int i)

Returns the string representation of the int argument. 

The representation is exactly the one returned by the Integer.toString method 
of one argument. 

    i - an int. 

    Returns: a string representation of the int argument. 
*java.lang.String.valueOf(long)*

public static |java.lang.String| valueOf(long l)

Returns the string representation of the long argument. 

The representation is exactly the one returned by the Long.toString method of 
one argument. 

    l - a long. 

    Returns: a string representation of the long argument. 
*java.lang.String.valueOf(Object)*

public static |java.lang.String| valueOf(java.lang.Object obj)

Returns the string representation of the Object argument. 

    obj - an Object. 

    Returns: if the argument is null, then a string equal to "null"; otherwise, the value of 
             obj.toString() is returned. 


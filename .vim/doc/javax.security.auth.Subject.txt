*javax.security.auth.Subject* *Subject*  A Subject represents a grouping of rela

public final class Subject
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|javax.security.auth.Subject_Description|
|javax.security.auth.Subject_Fields|
|javax.security.auth.Subject_Constructors|
|javax.security.auth.Subject_Methods|

================================================================================

*javax.security.auth.Subject_Constructors*
|javax.security.auth.Subject()|Create an instance of a Subject  with an empty S
|javax.security.auth.Subject(boolean,Set,Set,Set)|Create an instance of a Subje

*javax.security.auth.Subject_Methods*
|javax.security.auth.Subject.doAs(Subject,PrivilegedAction)|Perform work as a p
|javax.security.auth.Subject.doAs(Subject,PrivilegedExceptionAction)|Perform wo
|javax.security.auth.Subject.doAsPrivileged(Subject,PrivilegedAction,AccessControlContext)|
|javax.security.auth.Subject.doAsPrivileged(Subject,PrivilegedExceptionAction,AccessControlContext)|
|javax.security.auth.Subject.equals(Object)|Compares the specified Object with 
|javax.security.auth.Subject.getPrincipals()|Return the Set of Principals assoc
|javax.security.auth.Subject.getPrincipals(Class)|Return a Set of Principals as
|javax.security.auth.Subject.getPrivateCredentials()|Return the Set of private 
|javax.security.auth.Subject.getPrivateCredentials(Class)|Return a Set of priva
|javax.security.auth.Subject.getPublicCredentials()|Return the Set of public cr
|javax.security.auth.Subject.getPublicCredentials(Class)|Return a Set of public
|javax.security.auth.Subject.getSubject(AccessControlContext)|Get the Subject a
|javax.security.auth.Subject.hashCode()|Returns a hashcode for this Subject.
|javax.security.auth.Subject.isReadOnly()|Query whether this Subject is read-on
|javax.security.auth.Subject.setReadOnly()|Set this Subject to be read-only.
|javax.security.auth.Subject.toString()|Return the String representation of thi

*javax.security.auth.Subject_Description*

A Subject represents a grouping of related information for a single entity, 
such as a person. Such information includes the Subject's identities as well as 
its security-related attributes (passwords and cryptographic keys, for 
example). 

Subjects may potentially have multiple identities. Each identity is represented 
as a Principal within the Subject. Principals simply bind names to a Subject. 
For example, a Subject that happens to be a person, Alice, might have two 
Principals: one which binds "Alice Bar", the name on her driver license, to the 
Subject, and another which binds, "999-99-9999", the number on her student 
identification card, to the Subject. Both Principals refer to the same Subject 
even though each has a different name. 

A Subject may also own security-related attributes, which are referred to as 
credentials. Sensitive credentials that require special protection, such as 
private cryptographic keys, are stored within a private credential Set. 
Credentials intended to be shared, such as public key certificates or Kerberos 
server tickets are stored within a public credential Set. Different permissions 
are required to access and modify the different credential Sets. 

To retrieve all the Principals associated with a Subject, invoke the 
getPrincipals method. To retrieve all the public or private credentials 
belonging to a Subject, invoke the getPublicCredentials method or 
getPrivateCredentials method, respectively. To modify the returned Set of 
Principals and credentials, use the methods defined in the Set class. For 
example: 

Subject subject; Principal principal; Object credential; 

// add a Principal and credential to the Subject 
subject.getPrincipals().add(principal); 
subject.getPublicCredentials().add(credential); 

This Subject class implements Serializable. While the Principals associated 
with the Subject are serialized, the credentials associated with the Subject 
are not. Note that the java.security.Principal class does not implement 
Serializable. Therefore all concrete Principal implementations associated with 
Subjects must implement Serializable. 


*javax.security.auth.Subject()*

public Subject()

Create an instance of a Subject with an empty Set of Principals and empty Sets 
of public and private credentials. 

The newly constructed Sets check whether this Subject has been set read-only 
before permitting subsequent modifications. The newly created Sets also prevent 
illegal modifications by ensuring that callers have sufficient permissions. 

To modify the Principals Set, the caller must have 
AuthPermission("modifyPrincipals"). To modify the public credential Set, the 
caller must have AuthPermission("modifyPublicCredentials"). To modify the 
private credential Set, the caller must have 
AuthPermission("modifyPrivateCredentials"). 


*javax.security.auth.Subject(boolean,Set,Set,Set)*

public Subject(
  boolean readOnly,
  java.util.Set principals,
  java.util.Set pubCredentials,
  java.util.Set privCredentials)

Create an instance of a Subject with Principals and credentials. 

The Principals and credentials from the specified Sets are copied into newly 
constructed Sets. These newly created Sets check whether this Subject has been 
set read-only before permitting subsequent modifications. The newly created 
Sets also prevent illegal modifications by ensuring that callers have 
sufficient permissions. 

To modify the Principals Set, the caller must have 
AuthPermission("modifyPrincipals"). To modify the public credential Set, the 
caller must have AuthPermission("modifyPublicCredentials"). To modify the 
private credential Set, the caller must have 
AuthPermission("modifyPrivateCredentials"). 

    readOnly - true if the Subject is to be read-only, and false otherwise. 
    principals - the Set of Principals to be associated with this Subject. 
    pubCredentials - the Set of public credentials to be associated with this Subject. 
    privCredentials - the Set of private credentials to be associated with this Subject. 

*javax.security.auth.Subject.doAs(Subject,PrivilegedAction)*

public static |java.lang.Object| doAs(
  javax.security.auth.Subject subject,
  java.security.PrivilegedAction action)

Perform work as a particular Subject. 

This method first retrieves the current Thread's AccessControlContext via 
AccessController.getContext, and then instantiates a new AccessControlContext 
using the retrieved context along with a new SubjectDomainCombiner (constructed 
using the provided Subject). Finally, this method invokes 
AccessController.doPrivileged, passing it the provided PrivilegedAction, as 
well as the newly constructed AccessControlContext. 



    subject - the Subject that the specified action will run as. This parameter may be null. 
    action - the code to be run as the specified Subject. 

    Returns: the Object returned by the PrivilegedAction's run method. 
*javax.security.auth.Subject.doAs(Subject,PrivilegedExceptionAction)*

public static |java.lang.Object| doAs(
  javax.security.auth.Subject subject,
  java.security.PrivilegedExceptionAction action)
  throws |java.security.PrivilegedActionException|
         
Perform work as a particular Subject. 

This method first retrieves the current Thread's AccessControlContext via 
AccessController.getContext, and then instantiates a new AccessControlContext 
using the retrieved context along with a new SubjectDomainCombiner (constructed 
using the provided Subject). Finally, this method invokes 
AccessController.doPrivileged, passing it the provided 
PrivilegedExceptionAction, as well as the newly constructed 
AccessControlContext. 



    subject - the Subject that the specified action will run as. This parameter may be null. 
    action - the code to be run as the specified Subject. 

    Returns: the Object returned by the PrivilegedExceptionAction's run method. 
*javax.security.auth.Subject.doAsPrivileged(Subject,PrivilegedAction,AccessControlContext)*

public static |java.lang.Object| doAsPrivileged(
  javax.security.auth.Subject subject,
  java.security.PrivilegedAction action,
  java.security.AccessControlContext acc)

Perform privileged work as a particular Subject. 

This method behaves exactly as Subject.doAs, except that instead of retrieving 
the current Thread's AccessControlContext, it uses the provided 
AccessControlContext. If the provided AccessControlContext is null, this method 
instantiates a new AccessControlContext with an empty collection of 
ProtectionDomains. 



    subject - the Subject that the specified action will run as. This parameter may be null. 
    action - the code to be run as the specified Subject. 
    acc - the AccessControlContext to be tied to the specified subject and action. 

    Returns: the Object returned by the PrivilegedAction's run method. 
*javax.security.auth.Subject.doAsPrivileged(Subject,PrivilegedExceptionAction,AccessControlContext)*

public static |java.lang.Object| doAsPrivileged(
  javax.security.auth.Subject subject,
  java.security.PrivilegedExceptionAction action,
  java.security.AccessControlContext acc)
  throws |java.security.PrivilegedActionException|
         
Perform privileged work as a particular Subject. 

This method behaves exactly as Subject.doAs, except that instead of retrieving 
the current Thread's AccessControlContext, it uses the provided 
AccessControlContext. If the provided AccessControlContext is null, this method 
instantiates a new AccessControlContext with an empty collection of 
ProtectionDomains. 



    subject - the Subject that the specified action will run as. This parameter may be null. 
    action - the code to be run as the specified Subject. 
    acc - the AccessControlContext to be tied to the specified subject and action. 

    Returns: the Object returned by the PrivilegedExceptionAction's run method. 
*javax.security.auth.Subject.equals(Object)*

public boolean equals(java.lang.Object o)

Compares the specified Object with this Subject for equality. Returns true if 
the given object is also a Subject and the two Subject instances are 
equivalent. More formally, two Subject instances are equal if their Principal 
and Credential Sets are equal. 



    o - Object to be compared for equality with this Subject. 

    Returns: true if the specified Object is equal to this Subject. 
*javax.security.auth.Subject.getPrincipals()*

public |java.util.Set| getPrincipals()

Return the Set of Principals associated with this Subject. Each Principal 
represents an identity for this Subject. 

The returned Set is backed by this Subject's internal Principal Set. Any 
modification to the returned Set affects the internal Principal Set as well. 




    Returns: The Set of Principals associated with this Subject. 
*javax.security.auth.Subject.getPrincipals(Class)*

public |java.util.Set| getPrincipals(java.lang.Class c)

Return a Set of Principals associated with this Subject that are instances or 
subclasses of the specified Class. 

The returned Set is not backed by this Subject's internal Principal Set. A new 
Set is created and returned for each method invocation. Modifications to the 
returned Set will not affect the internal Principal Set. 



    c - the returned Set of Principals will all be instances of this class. 

    Returns: a Set of Principals that are instances of the specified Class. 
*javax.security.auth.Subject.getPrivateCredentials()*

public |java.util.Set| getPrivateCredentials()

Return the Set of private credentials held by this Subject. 

The returned Set is backed by this Subject's internal private Credential Set. 
Any modification to the returned Set affects the internal private Credential 
Set as well. 

A caller requires permissions to access the Credentials in the returned Set, or 
to modify the Set itself. A SecurityException is thrown if the caller does not 
have the proper permissions. 

While iterating through the Set, a SecurityException is thrown if the caller 
does not have permission to access a particular Credential. The Iterator is 
nevertheless advanced to next element in the Set. 




    Returns: A Set of private credentials held by this Subject. 
*javax.security.auth.Subject.getPrivateCredentials(Class)*

public |java.util.Set| getPrivateCredentials(java.lang.Class c)

Return a Set of private credentials associated with this Subject that are 
instances or subclasses of the specified Class. 

The caller must have permission to access all of the requested Credentials, or 
a SecurityException will be thrown. 

The returned Set is not backed by this Subject's internal private Credential 
Set. A new Set is created and returned for each method invocation. 
Modifications to the returned Set will not affect the internal private 
Credential Set. 



    c - the returned Set of private credentials will all be instances of this class. 

    Returns: a Set of private credentials that are instances of the	specified Class. 
*javax.security.auth.Subject.getPublicCredentials()*

public |java.util.Set| getPublicCredentials()

Return the Set of public credentials held by this Subject. 

The returned Set is backed by this Subject's internal public Credential Set. 
Any modification to the returned Set affects the internal public Credential Set 
as well. 




    Returns: A Set of public credentials held by this Subject. 
*javax.security.auth.Subject.getPublicCredentials(Class)*

public |java.util.Set| getPublicCredentials(java.lang.Class c)

Return a Set of public credentials associated with this Subject that are 
instances or subclasses of the specified Class. 

The returned Set is not backed by this Subject's internal public Credential 
Set. A new Set is created and returned for each method invocation. 
Modifications to the returned Set will not affect the internal public 
Credential Set. 



    c - the returned Set of public credentials will all be instances of this class. 

    Returns: a Set of public credentials that are instances of the	specified Class. 
*javax.security.auth.Subject.getSubject(AccessControlContext)*

public static |javax.security.auth.Subject| getSubject(java.security.AccessControlContext acc)

Get the Subject associated with the provided AccessControlContext. 

The AccessControlContext may contain many Subjects (from nested doAs calls). In 
this situation, the most recent Subject associated with the 
AccessControlContext is returned. 



    acc - the AccessControlContext from which to retrieve the Subject. 

    Returns: the Subject associated with the provided AccessControlContext, or null if no 
             Subject is associated with the provided AccessControlContext. 
*javax.security.auth.Subject.hashCode()*

public int hashCode()

Returns a hashcode for this Subject. 




    Returns: a hashcode for this Subject. 
*javax.security.auth.Subject.isReadOnly()*

public boolean isReadOnly()

Query whether this Subject is read-only. 




    Returns: true if this Subject is read-only, false otherwise. 
*javax.security.auth.Subject.setReadOnly()*

public void setReadOnly()

Set this Subject to be read-only. 

Modifications (additions and removals) to this Subject's Principal Set and 
credential Sets will be disallowed. The destroy operation on this Subject's 
credentials will still be permitted. 

Subsequent attempts to modify the Subject's Principal and credential Sets will 
result in an IllegalStateException being thrown. Also, once a Subject is 
read-only, it can not be reset to being writable again. 




*javax.security.auth.Subject.toString()*

public |java.lang.String| toString()

Return the String representation of this Subject. 




    Returns: the String representation of this Subject. 


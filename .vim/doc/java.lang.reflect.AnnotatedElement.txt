*java.lang.reflect.AnnotatedElement* *AnnotatedElement* Represents an annotated 

public interface interface AnnotatedElement


|java.lang.reflect.AnnotatedElement_Description|
|java.lang.reflect.AnnotatedElement_Fields|
|java.lang.reflect.AnnotatedElement_Constructors|
|java.lang.reflect.AnnotatedElement_Methods|

================================================================================

*java.lang.reflect.AnnotatedElement_Methods*
|java.lang.reflect.AnnotatedElement.getAnnotation(Class)|Returns this element's
|java.lang.reflect.AnnotatedElement.getAnnotations()|Returns all annotations pr
|java.lang.reflect.AnnotatedElement.getDeclaredAnnotations()|Returns all annota
|java.lang.reflect.AnnotatedElement.isAnnotationPresent(Class)|Returns true if 

*java.lang.reflect.AnnotatedElement_Description*

Represents an annotated element of the program currently running in this VM. 
This interface allows annotations to be read reflectively. All annotations 
returned by methods in this interface are immutable and serializable. It is 
permissible for the caller to modify the arrays returned by accessors for 
array-valued enum members; it will have no affect on the arrays returned to 
other callers. 

If an annotation returned by a method in this interface contains (directly or 
indirectly) a (|java.lang.Class|) -valued member referring to a class that is 
not accessible in this VM, attempting to read the class by calling the relevant 
Class-returning method on the returned annotation will result in a 
(|java.lang.TypeNotPresentException|) . 

Similarly, attempting to read an enum-valued member will result in a 
(|java.lang.EnumConstantNotPresentException|) if the enum constant in the 
annotation is no longer present in the enum type. 

Finally, Attempting to read a member whose definition has evolved incompatibly 
will result in a (|java.lang.annotation.AnnotationTypeMismatchException|) or an 
(|java.lang.annotation.IncompleteAnnotationException|) . 


*java.lang.reflect.AnnotatedElement.getAnnotation(Class)*

public |java.lang.annotation.Annotation| getAnnotation(java.lang.Class annotationType)

Returns this element's annotation for the specified type if such an annotation 
is present, else null. 

    annotationType - the Class object corresponding to the annotation type 

    Returns: this element's annotation for the specified annotation type if present on this 
             element, else null 
*java.lang.reflect.AnnotatedElement.getAnnotations()*

public |java.lang.annotation.Annotation| getAnnotations()

Returns all annotations present on this element. (Returns an array of length 
zero if this element has no annotations.) The caller of this method is free to 
modify the returned array; it will have no effect on the arrays returned to 
other callers. 


    Returns: all annotations present on this element 
*java.lang.reflect.AnnotatedElement.getDeclaredAnnotations()*

public |java.lang.annotation.Annotation| getDeclaredAnnotations()

Returns all annotations that are directly present on this element. Unlike the 
other methods in this interface, this method ignores inherited annotations. 
(Returns an array of length zero if no annotations are directly present on this 
element.) The caller of this method is free to modify the returned array; it 
will have no effect on the arrays returned to other callers. 


    Returns: All annotations directly present on this element 
*java.lang.reflect.AnnotatedElement.isAnnotationPresent(Class)*

public boolean isAnnotationPresent(java.lang.Class annotationType)

Returns true if an annotation for the specified type is present on this 
element, else false. This method is designed primarily for convenient access to 
marker annotations. 

    annotationType - the Class object corresponding to the annotation type 

    Returns: true if an annotation for the specified annotation type is present on this 
             element, else false 


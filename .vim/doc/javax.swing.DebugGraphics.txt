*javax.swing.DebugGraphics* *DebugGraphics* Graphics subclass supporting graphics debugging.

public class DebugGraphics
  extends    |java.awt.Graphics|

|javax.swing.DebugGraphics_Description|
|javax.swing.DebugGraphics_Fields|
|javax.swing.DebugGraphics_Constructors|
|javax.swing.DebugGraphics_Methods|

====================================================================================================================================================================================

*javax.swing.DebugGraphics_Fields*
|int_javax.swing.DebugGraphics.BUFFERED_OPTION|
|int_javax.swing.DebugGraphics.FLASH_OPTION|
|int_javax.swing.DebugGraphics.LOG_OPTION|
|int_javax.swing.DebugGraphics.NONE_OPTION|

*javax.swing.DebugGraphics_Constructors*
|javax.swing.DebugGraphics()|Constructs a new debug graphics context that supports slowed  down drawing.
|javax.swing.DebugGraphics(Graphics)|Constructs a debug graphics context from an existing graphics  context that supports slowed down drawing.
|javax.swing.DebugGraphics(Graphics,JComponent)|Constructs a debug graphics context from an existing graphics  context that slows down drawing for the specified component.

*javax.swing.DebugGraphics_Methods*
|javax.swing.DebugGraphics.clearRect(int,int,int,int)|Overrides Graphics.clearRect.
|javax.swing.DebugGraphics.clipRect(int,int,int,int)|Overrides Graphics.clipRect.
|javax.swing.DebugGraphics.copyArea(int,int,int,int,int,int)|Overrides Graphics.copyArea.
|javax.swing.DebugGraphics.create()|Overrides Graphics.create to return a DebugGraphics object.
|javax.swing.DebugGraphics.create(int,int,int,int)|Overrides Graphics.create to return a DebugGraphics object.
|javax.swing.DebugGraphics.dispose()|Overrides Graphics.dispose.
|javax.swing.DebugGraphics.draw3DRect(int,int,int,int,boolean)|Overrides Graphics.draw3DRect.
|javax.swing.DebugGraphics.drawArc(int,int,int,int,int,int)|Overrides Graphics.drawArc.
|javax.swing.DebugGraphics.drawBytes(byte[],int,int,int,int)|Overrides Graphics.drawBytes.
|javax.swing.DebugGraphics.drawChars(char[],int,int,int,int)|Overrides Graphics.drawChars.
|javax.swing.DebugGraphics.drawImage(Image,int,int,Color,ImageObserver)|Overrides Graphics.drawImage.
|javax.swing.DebugGraphics.drawImage(Image,int,int,ImageObserver)|Overrides Graphics.drawImage.
|javax.swing.DebugGraphics.drawImage(Image,int,int,int,int,Color,ImageObserver)|Overrides Graphics.drawImage.
|javax.swing.DebugGraphics.drawImage(Image,int,int,int,int,ImageObserver)|Overrides Graphics.drawImage.
|javax.swing.DebugGraphics.drawImage(Image,int,int,int,int,int,int,int,int,Color,ImageObserver)|Overrides Graphics.drawImage.
|javax.swing.DebugGraphics.drawImage(Image,int,int,int,int,int,int,int,int,ImageObserver)|Overrides Graphics.drawImage.
|javax.swing.DebugGraphics.drawLine(int,int,int,int)|Overrides Graphics.drawLine.
|javax.swing.DebugGraphics.drawOval(int,int,int,int)|Overrides Graphics.drawOval.
|javax.swing.DebugGraphics.drawPolygon(int[],int[],int)|Overrides Graphics.drawPolygon.
|javax.swing.DebugGraphics.drawPolyline(int[],int[],int)|Overrides Graphics.drawPolyline.
|javax.swing.DebugGraphics.drawRect(int,int,int,int)|Overrides Graphics.drawRect.
|javax.swing.DebugGraphics.drawRoundRect(int,int,int,int,int,int)|Overrides Graphics.drawRoundRect.
|javax.swing.DebugGraphics.drawString(AttributedCharacterIterator,int,int)|Overrides Graphics.drawString.
|javax.swing.DebugGraphics.drawString(String,int,int)|Overrides Graphics.drawString.
|javax.swing.DebugGraphics.fill3DRect(int,int,int,int,boolean)|Overrides Graphics.fill3DRect.
|javax.swing.DebugGraphics.fillArc(int,int,int,int,int,int)|Overrides Graphics.fillArc.
|javax.swing.DebugGraphics.fillOval(int,int,int,int)|Overrides Graphics.fillOval.
|javax.swing.DebugGraphics.fillPolygon(int[],int[],int)|Overrides Graphics.fillPolygon.
|javax.swing.DebugGraphics.fillRect(int,int,int,int)|Overrides Graphics.fillRect.
|javax.swing.DebugGraphics.fillRoundRect(int,int,int,int,int,int)|Overrides Graphics.fillRoundRect.
|javax.swing.DebugGraphics.flashColor()|Returns the Color used to flash drawing operations.
|javax.swing.DebugGraphics.flashCount()|Returns the number of times that drawing operations will flash.
|javax.swing.DebugGraphics.flashTime()|Returns the time delay of drawing operation flashing.
|javax.swing.DebugGraphics.getClip()|Overrides Graphics.getClip.
|javax.swing.DebugGraphics.getClipBounds()|Overrides Graphics.getClipBounds.
|javax.swing.DebugGraphics.getColor()|Returns the Color used for text drawing operations.
|javax.swing.DebugGraphics.getDebugOptions()|Returns the current debugging options for this DebugGraphics.
|javax.swing.DebugGraphics.getFont()|Returns the Font used for text drawing operations.
|javax.swing.DebugGraphics.getFontMetrics()|Overrides Graphics.getFontMetrics.
|javax.swing.DebugGraphics.getFontMetrics(Font)|Overrides Graphics.getFontMetrics.
|javax.swing.DebugGraphics.isDrawingBuffer()|Returns the drawingBuffer value.
|javax.swing.DebugGraphics.logStream()|Returns the stream to which the DebugGraphics logs drawing operations.
|javax.swing.DebugGraphics.setClip(int,int,int,int)|Overrides Graphics.setClip.
|javax.swing.DebugGraphics.setClip(Shape)|Overrides Graphics.setClip.
|javax.swing.DebugGraphics.setColor(Color)|Sets the color to be used for drawing and filling lines and shapes.
|javax.swing.DebugGraphics.setDebugOptions(int)|Enables/disables diagnostic information about every graphics  operation.
|javax.swing.DebugGraphics.setFlashColor(Color)|Sets the Color used to flash drawing operations.
|javax.swing.DebugGraphics.setFlashCount(int)|Sets the number of times that drawing operations will flash.
|javax.swing.DebugGraphics.setFlashTime(int)|Sets the time delay of drawing operation flashing.
|javax.swing.DebugGraphics.setFont(Font)|Sets the Font used for text drawing operations.
|javax.swing.DebugGraphics.setLogStream(PrintStream)|Sets the stream to which the DebugGraphics logs drawing operations.
|javax.swing.DebugGraphics.setPaintMode()|Overrides Graphics.setPaintMode.
|javax.swing.DebugGraphics.setXORMode(Color)|Overrides Graphics.setXORMode.
|javax.swing.DebugGraphics.translate(int,int)|Overrides Graphics.translate.

*javax.swing.DebugGraphics_Description*

Graphics subclass supporting graphics debugging. Overrides most methods from Graphics. DebugGraphics objects are rarely created by hand. They are most frequently created 
automatically when a JComponent's debugGraphicsOptions are changed using the setDebugGraphicsOptions() method. 

NOTE: You must turn off double buffering to use DebugGraphics: RepaintManager repaintManager = RepaintManager.currentManager(component); 
repaintManager.setDoubleBufferingEnabled(false); 



*int_javax.swing.DebugGraphics.BUFFERED_OPTION*

Show buffered operations in a separate Frame. 


*int_javax.swing.DebugGraphics.FLASH_OPTION*

Flash graphics operations. 


*int_javax.swing.DebugGraphics.LOG_OPTION*

Log graphics operations. 


*int_javax.swing.DebugGraphics.NONE_OPTION*

Don't debug graphics operations. 



*javax.swing.DebugGraphics()*

public DebugGraphics()

Constructs a new debug graphics context that supports slowed down drawing. 


*javax.swing.DebugGraphics(Graphics)*

public DebugGraphics(java.awt.Graphics graphics)

Constructs a debug graphics context from an existing graphics context that supports slowed down drawing. 

    graphics - the Graphics context to slow down 

*javax.swing.DebugGraphics(Graphics,JComponent)*

public DebugGraphics(
  java.awt.Graphics graphics,
  javax.swing.JComponent component)

Constructs a debug graphics context from an existing graphics context that slows down drawing for the specified component. 

    graphics - the Graphics context to slow down 
    component - the JComponent to draw slowly 

*javax.swing.DebugGraphics.clearRect(int,int,int,int)*

public void clearRect(
  int x,
  int y,
  int width,
  int height)

Overrides Graphics.clearRect. 



*javax.swing.DebugGraphics.clipRect(int,int,int,int)*

public void clipRect(
  int x,
  int y,
  int width,
  int height)

Overrides Graphics.clipRect. 



*javax.swing.DebugGraphics.copyArea(int,int,int,int,int,int)*

public void copyArea(
  int x,
  int y,
  int width,
  int height,
  int destX,
  int destY)

Overrides Graphics.copyArea. 



*javax.swing.DebugGraphics.create()*

public |java.awt.Graphics| create()

Overrides Graphics.create to return a DebugGraphics object. 



*javax.swing.DebugGraphics.create(int,int,int,int)*

public |java.awt.Graphics| create(
  int x,
  int y,
  int width,
  int height)

Overrides Graphics.create to return a DebugGraphics object. 



*javax.swing.DebugGraphics.dispose()*

public void dispose()

Overrides Graphics.dispose. 



*javax.swing.DebugGraphics.draw3DRect(int,int,int,int,boolean)*

public void draw3DRect(
  int x,
  int y,
  int width,
  int height,
  boolean raised)

Overrides Graphics.draw3DRect. 



*javax.swing.DebugGraphics.drawArc(int,int,int,int,int,int)*

public void drawArc(
  int x,
  int y,
  int width,
  int height,
  int startAngle,
  int arcAngle)

Overrides Graphics.drawArc. 



*javax.swing.DebugGraphics.drawBytes(byte[],int,int,int,int)*

public void drawBytes(
  byte[] data,
  int offset,
  int length,
  int x,
  int y)

Overrides Graphics.drawBytes. 



*javax.swing.DebugGraphics.drawChars(char[],int,int,int,int)*

public void drawChars(
  char[] data,
  int offset,
  int length,
  int x,
  int y)

Overrides Graphics.drawChars. 



*javax.swing.DebugGraphics.drawImage(Image,int,int,Color,ImageObserver)*

public boolean drawImage(
  java.awt.Image img,
  int x,
  int y,
  java.awt.Color bgcolor,
  java.awt.image.ImageObserver observer)

Overrides Graphics.drawImage. 



*javax.swing.DebugGraphics.drawImage(Image,int,int,ImageObserver)*

public boolean drawImage(
  java.awt.Image img,
  int x,
  int y,
  java.awt.image.ImageObserver observer)

Overrides Graphics.drawImage. 



*javax.swing.DebugGraphics.drawImage(Image,int,int,int,int,Color,ImageObserver)*

public boolean drawImage(
  java.awt.Image img,
  int x,
  int y,
  int width,
  int height,
  java.awt.Color bgcolor,
  java.awt.image.ImageObserver observer)

Overrides Graphics.drawImage. 



*javax.swing.DebugGraphics.drawImage(Image,int,int,int,int,ImageObserver)*

public boolean drawImage(
  java.awt.Image img,
  int x,
  int y,
  int width,
  int height,
  java.awt.image.ImageObserver observer)

Overrides Graphics.drawImage. 



*javax.swing.DebugGraphics.drawImage(Image,int,int,int,int,int,int,int,int,Color,ImageObserver)*

public boolean drawImage(
  java.awt.Image img,
  int dx1,
  int dy1,
  int dx2,
  int dy2,
  int sx1,
  int sy1,
  int sx2,
  int sy2,
  java.awt.Color bgcolor,
  java.awt.image.ImageObserver observer)

Overrides Graphics.drawImage. 



*javax.swing.DebugGraphics.drawImage(Image,int,int,int,int,int,int,int,int,ImageObserver)*

public boolean drawImage(
  java.awt.Image img,
  int dx1,
  int dy1,
  int dx2,
  int dy2,
  int sx1,
  int sy1,
  int sx2,
  int sy2,
  java.awt.image.ImageObserver observer)

Overrides Graphics.drawImage. 



*javax.swing.DebugGraphics.drawLine(int,int,int,int)*

public void drawLine(
  int x1,
  int y1,
  int x2,
  int y2)

Overrides Graphics.drawLine. 



*javax.swing.DebugGraphics.drawOval(int,int,int,int)*

public void drawOval(
  int x,
  int y,
  int width,
  int height)

Overrides Graphics.drawOval. 



*javax.swing.DebugGraphics.drawPolygon(int[],int[],int)*

public void drawPolygon(
  int[] xPoints,
  int[] yPoints,
  int nPoints)

Overrides Graphics.drawPolygon. 



*javax.swing.DebugGraphics.drawPolyline(int[],int[],int)*

public void drawPolyline(
  int[] xPoints,
  int[] yPoints,
  int nPoints)

Overrides Graphics.drawPolyline. 



*javax.swing.DebugGraphics.drawRect(int,int,int,int)*

public void drawRect(
  int x,
  int y,
  int width,
  int height)

Overrides Graphics.drawRect. 



*javax.swing.DebugGraphics.drawRoundRect(int,int,int,int,int,int)*

public void drawRoundRect(
  int x,
  int y,
  int width,
  int height,
  int arcWidth,
  int arcHeight)

Overrides Graphics.drawRoundRect. 



*javax.swing.DebugGraphics.drawString(AttributedCharacterIterator,int,int)*

public void drawString(
  java.text.AttributedCharacterIterator iterator,
  int x,
  int y)

Overrides Graphics.drawString. 



*javax.swing.DebugGraphics.drawString(String,int,int)*

public void drawString(
  java.lang.String aString,
  int x,
  int y)

Overrides Graphics.drawString. 



*javax.swing.DebugGraphics.fill3DRect(int,int,int,int,boolean)*

public void fill3DRect(
  int x,
  int y,
  int width,
  int height,
  boolean raised)

Overrides Graphics.fill3DRect. 



*javax.swing.DebugGraphics.fillArc(int,int,int,int,int,int)*

public void fillArc(
  int x,
  int y,
  int width,
  int height,
  int startAngle,
  int arcAngle)

Overrides Graphics.fillArc. 



*javax.swing.DebugGraphics.fillOval(int,int,int,int)*

public void fillOval(
  int x,
  int y,
  int width,
  int height)

Overrides Graphics.fillOval. 



*javax.swing.DebugGraphics.fillPolygon(int[],int[],int)*

public void fillPolygon(
  int[] xPoints,
  int[] yPoints,
  int nPoints)

Overrides Graphics.fillPolygon. 



*javax.swing.DebugGraphics.fillRect(int,int,int,int)*

public void fillRect(
  int x,
  int y,
  int width,
  int height)

Overrides Graphics.fillRect. 



*javax.swing.DebugGraphics.fillRoundRect(int,int,int,int,int,int)*

public void fillRoundRect(
  int x,
  int y,
  int width,
  int height,
  int arcWidth,
  int arcHeight)

Overrides Graphics.fillRoundRect. 



*javax.swing.DebugGraphics.flashColor()*

public static |java.awt.Color| flashColor()

Returns the Color used to flash drawing operations. 



*javax.swing.DebugGraphics.flashCount()*

public static int flashCount()

Returns the number of times that drawing operations will flash. 



*javax.swing.DebugGraphics.flashTime()*

public static int flashTime()

Returns the time delay of drawing operation flashing. 



*javax.swing.DebugGraphics.getClip()*

public |java.awt.Shape| getClip()

Overrides Graphics.getClip. 



*javax.swing.DebugGraphics.getClipBounds()*

public |java.awt.Rectangle| getClipBounds()

Overrides Graphics.getClipBounds. 



*javax.swing.DebugGraphics.getColor()*

public |java.awt.Color| getColor()

Returns the Color used for text drawing operations. 



*javax.swing.DebugGraphics.getDebugOptions()*

public int getDebugOptions()

Returns the current debugging options for this DebugGraphics. 



*javax.swing.DebugGraphics.getFont()*

public |java.awt.Font| getFont()

Returns the Font used for text drawing operations. 



*javax.swing.DebugGraphics.getFontMetrics()*

public |java.awt.FontMetrics| getFontMetrics()

Overrides Graphics.getFontMetrics. 



*javax.swing.DebugGraphics.getFontMetrics(Font)*

public |java.awt.FontMetrics| getFontMetrics(java.awt.Font f)

Overrides Graphics.getFontMetrics. 



*javax.swing.DebugGraphics.isDrawingBuffer()*

public boolean isDrawingBuffer()

Returns the drawingBuffer value. 



    Returns: true if this object is drawing from a Buffer 

*javax.swing.DebugGraphics.logStream()*

public static |java.io.PrintStream| logStream()

Returns the stream to which the DebugGraphics logs drawing operations. 



*javax.swing.DebugGraphics.setClip(int,int,int,int)*

public void setClip(
  int x,
  int y,
  int width,
  int height)

Overrides Graphics.setClip. 



*javax.swing.DebugGraphics.setClip(Shape)*

public void setClip(java.awt.Shape clip)

Overrides Graphics.setClip. 



*javax.swing.DebugGraphics.setColor(Color)*

public void setColor(java.awt.Color aColor)

Sets the color to be used for drawing and filling lines and shapes. 



*javax.swing.DebugGraphics.setDebugOptions(int)*

public void setDebugOptions(int options)

Enables/disables diagnostic information about every graphics operation. The value of options indicates how this information should be displayed. LOG_OPTION causes a text message 
to be printed. FLASH_OPTION causes the drawing to flash several times. BUFFERED_OPTION creates a new Frame that shows each operation on an offscreen buffer. The value of options 
is bitwise OR'd into the current value. To disable debugging use NONE_OPTION. 



*javax.swing.DebugGraphics.setFlashColor(Color)*

public static void setFlashColor(java.awt.Color flashColor)

Sets the Color used to flash drawing operations. 



*javax.swing.DebugGraphics.setFlashCount(int)*

public static void setFlashCount(int flashCount)

Sets the number of times that drawing operations will flash. 



*javax.swing.DebugGraphics.setFlashTime(int)*

public static void setFlashTime(int flashTime)

Sets the time delay of drawing operation flashing. 



*javax.swing.DebugGraphics.setFont(Font)*

public void setFont(java.awt.Font aFont)

Sets the Font used for text drawing operations. 



*javax.swing.DebugGraphics.setLogStream(PrintStream)*

public static void setLogStream(java.io.PrintStream stream)

Sets the stream to which the DebugGraphics logs drawing operations. 



*javax.swing.DebugGraphics.setPaintMode()*

public void setPaintMode()

Overrides Graphics.setPaintMode. 



*javax.swing.DebugGraphics.setXORMode(Color)*

public void setXORMode(java.awt.Color aColor)

Overrides Graphics.setXORMode. 



*javax.swing.DebugGraphics.translate(int,int)*

public void translate(
  int x,
  int y)

Overrides Graphics.translate. 





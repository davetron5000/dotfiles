*javax.swing.KeyStroke* *KeyStroke* A KeyStroke represents a key action on the keyboard, or equivalent input
 device.

public class KeyStroke
  extends    |java.awt.AWTKeyStroke|

|javax.swing.KeyStroke_Description|
|javax.swing.KeyStroke_Fields|
|javax.swing.KeyStroke_Constructors|
|javax.swing.KeyStroke_Methods|

====================================================================================================================================================================================

*javax.swing.KeyStroke_Methods*
|javax.swing.KeyStroke.getKeyStroke(char)|Returns a shared instance of a KeyStroke   that represents a KEY_TYPED event for the   specified character.
|javax.swing.KeyStroke.getKeyStroke(Character,int)|Returns a shared instance of a KeyStroke, given a Character object and a  set of modifiers.
|javax.swing.KeyStroke.getKeyStroke(char,boolean)|Returns an instance of a KeyStroke, specifying whether the key is  considered to be activated when it is pressed or released.
|javax.swing.KeyStroke.getKeyStroke(int,int)|Returns a shared instance of a KeyStroke, given a numeric key code and a  set of modifiers.
|javax.swing.KeyStroke.getKeyStroke(int,int,boolean)|Returns a shared instance of a KeyStroke, given a numeric key code and a  set of modifiers, specifying whether the key is acti
|javax.swing.KeyStroke.getKeyStroke(String)|Parses a string and returns a KeyStroke.
|javax.swing.KeyStroke.getKeyStrokeForEvent(KeyEvent)|Returns a KeyStroke which represents the stroke which generated a given  KeyEvent.

*javax.swing.KeyStroke_Description*

A KeyStroke represents a key action on the keyboard, or equivalent input device. KeyStrokes can correspond to only a press or release of a particular key, just as KEY_PRESSED and 
KEY_RELEASED KeyEvents do; alternately, they can correspond to typing a specific Java character, just as KEY_TYPED KeyEvents do. In all cases, KeyStrokes can specify modifiers 
(alt, shift, control, meta, or a combination thereof) which must be present during the action for an exact match. 

KeyStrokes are used to define high-level (semantic) action events. Instead of trapping every keystroke and throwing away the ones you are not interested in, those keystrokes you 
care about automatically initiate actions on the Components with which they are registered. 

KeyStrokes are immutable, and are intended to be unique. Client code cannot create a KeyStroke; a variant of getKeyStroke must be used instead. These factory methods allow the 
KeyStroke implementation to cache and share instances efficiently. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.KeyStroke.getKeyStroke(char)*

public static |javax.swing.KeyStroke| getKeyStroke(char keyChar)

Returns a shared instance of a KeyStroke that represents a KEY_TYPED event for the specified character. 


    keyChar - the character value for a keyboard key 

    Returns: a KeyStroke object for that key 

*javax.swing.KeyStroke.getKeyStroke(Character,int)*

public static |javax.swing.KeyStroke| getKeyStroke(
  java.lang.Character keyChar,
  int modifiers)

Returns a shared instance of a KeyStroke, given a Character object and a set of modifiers. Note that the first parameter is of type Character rather than char. This is to avoid 
inadvertent clashes with calls to getKeyStroke(int keyCode, int modifiers). 

The modifiers consist of any combination of: java.awt.event.InputEvent.SHIFT_MASK (1) java.awt.event.InputEvent.CTRL_MASK (2) java.awt.event.InputEvent.META_MASK (4) 
java.awt.event.InputEvent.ALT_MASK (8) 

Since these numbers are all different powers of two, any combination of them is an integer in which each bit represents a different modifier key. Use 0 to specify no modifiers. 


    keyChar - the Character object for a keyboard character 
    modifiers - a bitwise-ored combination of any modifiers 

    Returns: an KeyStroke object for that key 

*javax.swing.KeyStroke.getKeyStroke(char,boolean)*

public static |javax.swing.KeyStroke| getKeyStroke(
  char keyChar,
  boolean onKeyRelease)

Returns an instance of a KeyStroke, specifying whether the key is considered to be activated when it is pressed or released. Unlike all other factory methods in this class, the 
instances returned by this method are not necessarily cached or shared. 

    Deprecated: use getKeyStroke(char)

    keyChar - the character value for a keyboard key 
    onKeyRelease - true if this KeyStroke corresponds to a key release; false otherwise. 

    Returns: a KeyStroke object for that key 

*javax.swing.KeyStroke.getKeyStroke(int,int)*

public static |javax.swing.KeyStroke| getKeyStroke(
  int keyCode,
  int modifiers)

Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers. The returned KeyStroke will correspond to a key press. 

The "virtual key" constants defined in java.awt.event.KeyEvent can be used to specify the key code. For example: java.awt.event.KeyEvent.VK_ENTER java.awt.event.KeyEvent.VK_TAB 
java.awt.event.KeyEvent.VK_SPACE 

The modifiers consist of any combination of: java.awt.event.InputEvent.SHIFT_MASK (1) java.awt.event.InputEvent.CTRL_MASK (2) java.awt.event.InputEvent.META_MASK (4) 
java.awt.event.InputEvent.ALT_MASK (8) 

Since these numbers are all different powers of two, any combination of them is an integer in which each bit represents a different modifier key. Use 0 to specify no modifiers. 


    keyCode - an int specifying the numeric code for a keyboard key 
    modifiers - a bitwise-ored combination of any modifiers 

    Returns: a KeyStroke object for that key 

*javax.swing.KeyStroke.getKeyStroke(int,int,boolean)*

public static |javax.swing.KeyStroke| getKeyStroke(
  int keyCode,
  int modifiers,
  boolean onKeyRelease)

Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers, specifying whether the key is activated when it is pressed or released. 

The "virtual key" constants defined in java.awt.event.KeyEvent can be used to specify the key code. For example: java.awt.event.KeyEvent.VK_ENTER java.awt.event.KeyEvent.VK_TAB 
java.awt.event.KeyEvent.VK_SPACE 

The modifiers consist of any combination of: java.awt.event.InputEvent.SHIFT_MASK (1) java.awt.event.InputEvent.CTRL_MASK (2) java.awt.event.InputEvent.META_MASK (4) 
java.awt.event.InputEvent.ALT_MASK (8) 

Since these numbers are all different powers of two, any combination of them is an integer in which each bit represents a different modifier key. Use 0 to specify no modifiers. 


    keyCode - an int specifying the numeric code for a keyboard key 
    modifiers - a bitwise-ored combination of any modifiers 
    onKeyRelease - true if the KeyStroke should represent a key release; false otherwise. 

    Returns: a KeyStroke object for that key 

*javax.swing.KeyStroke.getKeyStroke(String)*

public static |javax.swing.KeyStroke| getKeyStroke(java.lang.String s)

Parses a string and returns a KeyStroke. The string must have the following syntax: 

<modifiers>* (<typedID> | <pressedReleasedID>) 

modifiers := shift | control | ctrl | meta | alt | altGraph typedID := typed <typedKey> typedKey := string of length 1 giving Unicode character. pressedReleasedID := (pressed | 
released) key key := KeyEvent key code name, i.e. the name following "VK_". 

If typed, pressed or released is not specified, pressed is assumed. Here are some examples: 

"INSERT" => getKeyStroke(KeyEvent.VK_INSERT, 0); "control DELETE" => getKeyStroke(KeyEvent.VK_DELETE, InputEvent.CTRL_MASK); "alt shift X" => getKeyStroke(KeyEvent.VK_X, 
InputEvent.ALT_MASK | InputEvent.SHIFT_MASK); "alt shift released X" => getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, true); "typed a" => 
getKeyStroke('a'); 

In order to maintain backward-compatibility, specifying a null String, or a String which is formatted incorrectly, returns null. 


    s - a String formatted as described above 

    Returns: a KeyStroke object for that String, or null if the specified String is null, or is formatted incorrectly 

*javax.swing.KeyStroke.getKeyStrokeForEvent(KeyEvent)*

public static |javax.swing.KeyStroke| getKeyStrokeForEvent(java.awt.event.KeyEvent anEvent)

Returns a KeyStroke which represents the stroke which generated a given KeyEvent. 

This method obtains the keyChar from a KeyTyped event, and the keyCode from a KeyPressed or KeyReleased event. The KeyEvent modifiers are obtained for all three types of KeyEvent. 


    anEvent - the KeyEvent from which to obtain the KeyStroke 

    Returns: the KeyStroke that precipitated the event 



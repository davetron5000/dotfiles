*java.net.MulticastSocket* *MulticastSocket* The multicast datagram socket class is useful for sending
 and receiving IP multicast packets.

public class MulticastSocket
  extends    |java.net.DatagramSocket|

|java.net.MulticastSocket_Description|
|java.net.MulticastSocket_Fields|
|java.net.MulticastSocket_Constructors|
|java.net.MulticastSocket_Methods|

====================================================================================================================================================================================

*java.net.MulticastSocket_Constructors*
|java.net.MulticastSocket()|Create a multicast socket.
|java.net.MulticastSocket(int)|Create a multicast socket and bind it to a specific port.
|java.net.MulticastSocket(SocketAddress)|Create a MulticastSocket bound to the specified socket address.

*java.net.MulticastSocket_Methods*
|java.net.MulticastSocket.getInterface()|Retrieve the address of the network interface used for  multicast packets.
|java.net.MulticastSocket.getLoopbackMode()|Get the setting for local loopback of multicast datagrams.
|java.net.MulticastSocket.getNetworkInterface()|Get the multicast network interface set.
|java.net.MulticastSocket.getTimeToLive()|Get the default time-to-live for multicast packets sent out on  the socket.
|java.net.MulticastSocket.getTTL()|Get the default time-to-live for multicast packets sent out on  the socket.
|java.net.MulticastSocket.joinGroup(InetAddress)|Joins a multicast group.
|java.net.MulticastSocket.joinGroup(SocketAddress,NetworkInterface)|Joins the specified multicast group at the specified interface.
|java.net.MulticastSocket.leaveGroup(InetAddress)|Leave a multicast group.
|java.net.MulticastSocket.leaveGroup(SocketAddress,NetworkInterface)|Leave a multicast group on a specified local interface.
|java.net.MulticastSocket.send(DatagramPacket,byte)|Sends a datagram packet to the destination, with a TTL (time-  to-live) other than the default for the socket.
|java.net.MulticastSocket.setInterface(InetAddress)|Set the multicast network interface used by methods  whose behavior would be affected by the value of the  network interface.
|java.net.MulticastSocket.setLoopbackMode(boolean)|Disable/Enable local loopback of multicast datagrams  The option is used by the platform's networking code as a hint   for setti
|java.net.MulticastSocket.setNetworkInterface(NetworkInterface)|Specify the network interface for outgoing multicast datagrams   sent on this socket.
|java.net.MulticastSocket.setTimeToLive(int)|Set the default time-to-live for multicast packets sent out  on this MulticastSocket in order to control the   scope of the multicasts
|java.net.MulticastSocket.setTTL(byte)|Set the default time-to-live for multicast packets sent out  on this MulticastSocket in order to control the   scope of the multicasts.

*java.net.MulticastSocket_Description*

The multicast datagram socket class is useful for sending and receiving IP multicast packets. A MulticastSocket is a (UDP) DatagramSocket, with additional capabilities for joining 
"groups" of other multicast hosts on the internet. 

A multicast group is specified by a class D IP address and by a standard UDP port number. Class D IP addresses are in the range 224.0.0.0 to 239.255.255.255, inclusive. The 
address 224.0.0.0 is reserved and should not be used. 

One would join a multicast group by first creating a MulticastSocket with the desired port, then invoking the joinGroup(InetAddress groupAddr) method: 

// join a Multicast group and send the group salutations ... String msg = "Hello"; InetAddress group = InetAddress.getByName("228.5.6.7"); MulticastSocket s = new 
MulticastSocket(6789); s.joinGroup(group); DatagramPacket hi = new DatagramPacket(msg.getBytes(), msg.length(), group, 6789); s.send(hi); // get their responses! byte[] buf = new 
byte[1000]; DatagramPacket recv = new DatagramPacket(buf, buf.length); s.receive(recv); ... // OK, I'm done talking - leave the group... s.leaveGroup(group); 

When one sends a message to a multicast group, all subscribing recipients to that host and port receive the message (within the time-to-live range of the packet, see below). The 
socket needn't be a member of the multicast group to send messages to it. 

When a socket subscribes to a multicast group/port, it receives datagrams sent by other hosts to the group/port, as do all other members of the group and port. A socket 
relinquishes membership in a group by the leaveGroup(InetAddress addr) method. Multiple MulticastSocket's may subscribe to a multicast group and port concurrently, and they will 
all receive group datagrams. 

Currently applets are not allowed to use multicast sockets. 



*java.net.MulticastSocket()*

public MulticastSocket()
  throws |java.io.IOException|
         
Create a multicast socket. 

If there is a security manager, its checkListen method is first called with 0 as its argument to ensure the operation is allowed. This could result in a SecurityException. 

When the socket is created the (|java.net.DatagramSocket|) method is called to enable the SO_REUSEADDR socket option. 


*java.net.MulticastSocket(int)*

public MulticastSocket(int port)
  throws |java.io.IOException|
         
Create a multicast socket and bind it to a specific port. 

If there is a security manager, its checkListen method is first called with the port argument as its argument to ensure the operation is allowed. This could result in a 
SecurityException. 

When the socket is created the (|java.net.DatagramSocket|) method is called to enable the SO_REUSEADDR socket option. 

    port - port to use 

*java.net.MulticastSocket(SocketAddress)*

public MulticastSocket(java.net.SocketAddress bindaddr)
  throws |java.io.IOException|
         
Create a MulticastSocket bound to the specified socket address. 

Or, if the address is null, create an unbound socket. 

If there is a security manager, its checkListen method is first called with the SocketAddress port as its argument to ensure the operation is allowed. This could result in a 
SecurityException. 

When the socket is created the (|java.net.DatagramSocket|) method is called to enable the SO_REUSEADDR socket option. 

    bindaddr - Socket address to bind to, or null for an unbound socket. 

*java.net.MulticastSocket.getInterface()*

public |java.net.InetAddress| getInterface()
  throws |java.net.SocketException|
         
Retrieve the address of the network interface used for multicast packets. 



    Returns: An InetAddress representing the address of the network interface used for multicast packets. 

*java.net.MulticastSocket.getLoopbackMode()*

public boolean getLoopbackMode()
  throws |java.net.SocketException|
         
Get the setting for local loopback of multicast datagrams. 



    Returns: true if the LoopbackMode has been disabled 

*java.net.MulticastSocket.getNetworkInterface()*

public |java.net.NetworkInterface| getNetworkInterface()
  throws |java.net.SocketException|
         
Get the multicast network interface set. 



    Returns: the multicast NetworkInterface currently set 

*java.net.MulticastSocket.getTimeToLive()*

public int getTimeToLive()
  throws |java.io.IOException|
         
Get the default time-to-live for multicast packets sent out on the socket. 



    Returns: the default time-to-live value 

*java.net.MulticastSocket.getTTL()*

public byte getTTL()
  throws |java.io.IOException|
         
Get the default time-to-live for multicast packets sent out on the socket. 

    Deprecated: use the getTimeToLive method instead, which returns
 an <b>int</b> instead of a <b>byte</b>.


    Returns: the default time-to-live value 

*java.net.MulticastSocket.joinGroup(InetAddress)*

public void joinGroup(java.net.InetAddress mcastaddr)
  throws |java.io.IOException|
         
Joins a multicast group. Its behavior may be affected by setInterface or setNetworkInterface. 

If there is a security manager, this method first calls its checkMulticast method with the mcastaddr argument as its argument. 


    mcastaddr - is the multicast address to join 

*java.net.MulticastSocket.joinGroup(SocketAddress,NetworkInterface)*

public void joinGroup(
  java.net.SocketAddress mcastaddr,
  java.net.NetworkInterface netIf)
  throws |java.io.IOException|
         
Joins the specified multicast group at the specified interface. 

If there is a security manager, this method first calls its checkMulticast method with the mcastaddr argument as its argument. 


    mcastaddr - is the multicast address to join 
    netIf - specifies the local interface to receive multicast datagram packets, or null to defer to the interface set by {@link MulticastSocket#setInterface(InetAddress)} or {@link 
       MulticastSocket#setNetworkInterface(NetworkInterface)} 

*java.net.MulticastSocket.leaveGroup(InetAddress)*

public void leaveGroup(java.net.InetAddress mcastaddr)
  throws |java.io.IOException|
         
Leave a multicast group. Its behavior may be affected by setInterface or setNetworkInterface. 

If there is a security manager, this method first calls its checkMulticast method with the mcastaddr argument as its argument. 


    mcastaddr - is the multicast address to leave 

*java.net.MulticastSocket.leaveGroup(SocketAddress,NetworkInterface)*

public void leaveGroup(
  java.net.SocketAddress mcastaddr,
  java.net.NetworkInterface netIf)
  throws |java.io.IOException|
         
Leave a multicast group on a specified local interface. 

If there is a security manager, this method first calls its checkMulticast method with the mcastaddr argument as its argument. 


    mcastaddr - is the multicast address to leave 
    netIf - specifies the local interface or null to defer to the interface set by {@link MulticastSocket#setInterface(InetAddress)} or {@link 
       MulticastSocket#setNetworkInterface(NetworkInterface)} 

*java.net.MulticastSocket.send(DatagramPacket,byte)*

public void send(
  java.net.DatagramPacket p,
  byte ttl)
  throws |java.io.IOException|
         
Sends a datagram packet to the destination, with a TTL (time- to-live) other than the default for the socket. This method need only be used in instances where a particular TTL is 
desired; otherwise it is preferable to set a TTL once on the socket, and use that default TTL for all packets. This method does not alter the default TTL for the socket. Its 
behavior may be affected by setInterface. 

If there is a security manager, this method first performs some security checks. First, if p.getAddress().isMulticastAddress() is true, this method calls the security manager's 
checkMulticast method with p.getAddress() and ttl as its arguments. If the evaluation of that expression is false, this method instead calls the security manager's checkConnect 
method with arguments p.getAddress().getHostAddress() and p.getPort(). Each call to a security manager method could result in a SecurityException if the operation is not allowed. 

    Deprecated: Use the following code or its equivalent instead:
	......
	int ttl = mcastSocket.getTimeToLive();
  mcastSocket.setTimeToLive(newttl);
	mcastSocket.send(p);
	mcastSocket.setTimeToLive(ttl);
	......

    p - is the packet to be sent. The packet should contain the destination multicast ip address and the data to be sent. One does not need to be the member of the group to send packets 
       to a destination multicast address. 
    ttl - optional time to live for multicast packet. default ttl is 1. 

*java.net.MulticastSocket.setInterface(InetAddress)*

public void setInterface(java.net.InetAddress inf)
  throws |java.net.SocketException|
         
Set the multicast network interface used by methods whose behavior would be affected by the value of the network interface. Useful for multihomed hosts. 


    inf - the InetAddress 

*java.net.MulticastSocket.setLoopbackMode(boolean)*

public void setLoopbackMode(boolean disable)
  throws |java.net.SocketException|
         
Disable/Enable local loopback of multicast datagrams The option is used by the platform's networking code as a hint for setting whether multicast data will be looped back to the 
local socket. 

Because this option is a hint, applications that want to verify what loopback mode is set to should call (|java.net.MulticastSocket|) 


    disable - true to disable the LoopbackMode 

*java.net.MulticastSocket.setNetworkInterface(NetworkInterface)*

public void setNetworkInterface(java.net.NetworkInterface netIf)
  throws |java.net.SocketException|
         
Specify the network interface for outgoing multicast datagrams sent on this socket. 


    netIf - the interface 

*java.net.MulticastSocket.setTimeToLive(int)*

public void setTimeToLive(int ttl)
  throws |java.io.IOException|
         
Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts. 

The ttl must be in the range 0 or an IllegalArgumentException will be thrown. 


    ttl - the time-to-live 

*java.net.MulticastSocket.setTTL(byte)*

public void setTTL(byte ttl)
  throws |java.io.IOException|
         
Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts. 

The ttl is an unsigned 8-bit quantity, and so must be in the range 0 . 

    Deprecated: use the setTimeToLive method instead, which uses
 <b>int</b> instead of <b>byte</b> as the type for ttl.

    ttl - the time-to-live 



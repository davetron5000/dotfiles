*java.awt.image.MemoryImageSource* *MemoryImageSource* This class is an implemen

public class MemoryImageSource
  extends    |java.lang.Object|
  implements |java.awt.image.ImageProducer|

|java.awt.image.MemoryImageSource_Description|
|java.awt.image.MemoryImageSource_Fields|
|java.awt.image.MemoryImageSource_Constructors|
|java.awt.image.MemoryImageSource_Methods|

================================================================================

*java.awt.image.MemoryImageSource_Constructors*
|java.awt.image.MemoryImageSource(int,int,ColorModel,byte[],int,int)|Constructs
|java.awt.image.MemoryImageSource(int,int,ColorModel,byte[],int,int,Hashtable)|
|java.awt.image.MemoryImageSource(int,int,ColorModel,int[],int,int)|Constructs 
|java.awt.image.MemoryImageSource(int,int,ColorModel,int[],int,int,Hashtable)|C
|java.awt.image.MemoryImageSource(int,int,int[],int,int)|Constructs an ImagePro
|java.awt.image.MemoryImageSource(int,int,int[],int,int,Hashtable)|Constructs a

*java.awt.image.MemoryImageSource_Methods*
|java.awt.image.MemoryImageSource.addConsumer(ImageConsumer)|Adds an ImageConsu
|java.awt.image.MemoryImageSource.isConsumer(ImageConsumer)|Determines if an Im
|java.awt.image.MemoryImageSource.newPixels()|Sends a whole new buffer of pixel
|java.awt.image.MemoryImageSource.newPixels(byte[],ColorModel,int,int)|Changes 
|java.awt.image.MemoryImageSource.newPixels(int[],ColorModel,int,int)|Changes t
|java.awt.image.MemoryImageSource.newPixels(int,int,int,int)|Sends a rectangula
|java.awt.image.MemoryImageSource.newPixels(int,int,int,int,boolean)|Sends a re
|java.awt.image.MemoryImageSource.removeConsumer(ImageConsumer)|Removes an Imag
|java.awt.image.MemoryImageSource.requestTopDownLeftRightResend(ImageConsumer)|
|java.awt.image.MemoryImageSource.setAnimated(boolean)|Changes this memory imag
|java.awt.image.MemoryImageSource.setFullBufferUpdates(boolean)|Specifies wheth
|java.awt.image.MemoryImageSource.startProduction(ImageConsumer)|Adds an ImageC

*java.awt.image.MemoryImageSource_Description*

This class is an implementation of the ImageProducer interface which uses an 
array to produce pixel values for an Image. Here is an example which calculates 
a 100x100 image representing a fade from black to blue along the X axis and a 
fade from black to red along the Y axis: 

int w = 100; int h = 100; int pix[] = new int[w * h]; int index = 0; for (int y 
= 0; y < h; y++) { int red = (y * 255) / (h - 1); for (int x = 0; x < w; x++) { 
int blue = (x * 255) / (w - 1); pix[index++] = (255 << 24) | (red << 16) | 
blue; } } Image img = createImage(new MemoryImageSource(w, h, pix, 0, w)); 



The MemoryImageSource is also capable of managing a memory image which varies 
over time to allow animation or custom rendering. Here is an example showing 
how to set up the animation source and signal changes in the data (adapted from 
the MemoryAnimationSourceDemo by Garth Dickie): 

int pixels[]; MemoryImageSource source; 

public void init() { int width = 50; int height = 50; int size = width * 
height; pixels = new int[size]; 

int value = getBackground().getRGB(); for (int i = 0; i < size; i++) { 
pixels[i] = value; } 

source = new MemoryImageSource(width, height, pixels, 0, width); 
source.setAnimated(true); image = createImage(source); } 

public void run() { Thread me = Thread.currentThread( ); 
me.setPriority(Thread.MIN_PRIORITY); 

while (true) { try { thread.sleep(10); } catch( InterruptedException e ) { 
return; } 

// Modify the values in the pixels array at (x, y, w, h) 

// Send the new data to the interested ImageConsumers source.newPixels(x, y, w, 
h); } } 




*java.awt.image.MemoryImageSource(int,int,ColorModel,byte[],int,int)*

public MemoryImageSource(
  int w,
  int h,
  java.awt.image.ColorModel cm,
  byte[] pix,
  int off,
  int scan)

Constructs an ImageProducer object which uses an array of bytes to produce data 
for an Image object. 

    w - the width of the rectangle of pixels 
    h - the height of the rectangle of pixels 
    cm - the specified ColorModel 
    pix - an array of pixels 
    off - the offset into the array of where to store the first pixel 
    scan - the distance from one row of pixels to the next in the array 

*java.awt.image.MemoryImageSource(int,int,ColorModel,byte[],int,int,Hashtable)*

public MemoryImageSource(
  int w,
  int h,
  java.awt.image.ColorModel cm,
  byte[] pix,
  int off,
  int scan,
  java.util.Hashtable props)

Constructs an ImageProducer object which uses an array of bytes to produce data 
for an Image object. 

    w - the width of the rectangle of pixels 
    h - the height of the rectangle of pixels 
    cm - the specified ColorModel 
    pix - an array of pixels 
    off - the offset into the array of where to store the first pixel 
    scan - the distance from one row of pixels to the next in the array 
    props - a list of properties that the ImageProducer uses to process an image 

*java.awt.image.MemoryImageSource(int,int,ColorModel,int[],int,int)*

public MemoryImageSource(
  int w,
  int h,
  java.awt.image.ColorModel cm,
  int[] pix,
  int off,
  int scan)

Constructs an ImageProducer object which uses an array of integers to produce 
data for an Image object. 

    w - the width of the rectangle of pixels 
    h - the height of the rectangle of pixels 
    cm - the specified ColorModel 
    pix - an array of pixels 
    off - the offset into the array of where to store the first pixel 
    scan - the distance from one row of pixels to the next in the array 

*java.awt.image.MemoryImageSource(int,int,ColorModel,int[],int,int,Hashtable)*

public MemoryImageSource(
  int w,
  int h,
  java.awt.image.ColorModel cm,
  int[] pix,
  int off,
  int scan,
  java.util.Hashtable props)

Constructs an ImageProducer object which uses an array of integers to produce 
data for an Image object. 

    w - the width of the rectangle of pixels 
    h - the height of the rectangle of pixels 
    cm - the specified ColorModel 
    pix - an array of pixels 
    off - the offset into the array of where to store the first pixel 
    scan - the distance from one row of pixels to the next in the array 
    props - a list of properties that the ImageProducer uses to process an image 

*java.awt.image.MemoryImageSource(int,int,int[],int,int)*

public MemoryImageSource(
  int w,
  int h,
  int[] pix,
  int off,
  int scan)

Constructs an ImageProducer object which uses an array of integers in the 
default RGB ColorModel to produce data for an Image object. 

    w - the width of the rectangle of pixels 
    h - the height of the rectangle of pixels 
    pix - an array of pixels 
    off - the offset into the array of where to store the first pixel 
    scan - the distance from one row of pixels to the next in the array 

*java.awt.image.MemoryImageSource(int,int,int[],int,int,Hashtable)*

public MemoryImageSource(
  int w,
  int h,
  int[] pix,
  int off,
  int scan,
  java.util.Hashtable props)

Constructs an ImageProducer object which uses an array of integers in the 
default RGB ColorModel to produce data for an Image object. 

    w - the width of the rectangle of pixels 
    h - the height of the rectangle of pixels 
    pix - an array of pixels 
    off - the offset into the array of where to store the first pixel 
    scan - the distance from one row of pixels to the next in the array 
    props - a list of properties that the ImageProducer uses to process an image 

*java.awt.image.MemoryImageSource.addConsumer(ImageConsumer)*

public synchronized void addConsumer(java.awt.image.ImageConsumer ic)

Adds an ImageConsumer to the list of consumers interested in data for this 
image. 

    ic - the specified ImageConsumer 

*java.awt.image.MemoryImageSource.isConsumer(ImageConsumer)*

public synchronized boolean isConsumer(java.awt.image.ImageConsumer ic)

Determines if an ImageConsumer is on the list of consumers currently interested 
in data for this image. 

    ic - the specified ImageConsumer 

    Returns: true if the ImageConsumer is on the list; false otherwise. 
*java.awt.image.MemoryImageSource.newPixels()*

public void newPixels()

Sends a whole new buffer of pixels to any ImageConsumers that are currently 
interested in the data for this image and notify them that an animation frame 
is complete. This method only has effect if the animation flag has been turned 
on through the setAnimated() method. 


*java.awt.image.MemoryImageSource.newPixels(byte[],ColorModel,int,int)*

public synchronized void newPixels(
  byte[] newpix,
  java.awt.image.ColorModel newmodel,
  int offset,
  int scansize)

Changes to a new byte array to hold the pixels for this image. If the animation 
flag has been turned on through the setAnimated() method, then the new pixels 
will be immediately delivered to any ImageConsumers that are currently 
interested in the data for this image. 

    newpix - the new pixel array 
    newmodel - the specified ColorModel 
    offset - the offset into the array 
    scansize - the distance from one row of pixels to the next in the array 

*java.awt.image.MemoryImageSource.newPixels(int[],ColorModel,int,int)*

public synchronized void newPixels(
  int[] newpix,
  java.awt.image.ColorModel newmodel,
  int offset,
  int scansize)

Changes to a new int array to hold the pixels for this image. If the animation 
flag has been turned on through the setAnimated() method, then the new pixels 
will be immediately delivered to any ImageConsumers that are currently 
interested in the data for this image. 

    newpix - the new pixel array 
    newmodel - the specified ColorModel 
    offset - the offset into the array 
    scansize - the distance from one row of pixels to the next in the array 

*java.awt.image.MemoryImageSource.newPixels(int,int,int,int)*

public synchronized void newPixels(
  int x,
  int y,
  int w,
  int h)

Sends a rectangular region of the buffer of pixels to any ImageConsumers that 
are currently interested in the data for this image and notify them that an 
animation frame is complete. This method only has effect if the animation flag 
has been turned on through the setAnimated() method. If the full buffer update 
flag was turned on with the setFullBufferUpdates() method then the rectangle 
parameters will be ignored and the entire buffer will always be sent. 

    x - the x coordinate of the upper left corner of the rectangle of pixels to be sent 
    y - the y coordinate of the upper left corner of the rectangle of pixels to be sent 
    w - the width of the rectangle of pixels to be sent 
    h - the height of the rectangle of pixels to be sent 

*java.awt.image.MemoryImageSource.newPixels(int,int,int,int,boolean)*

public synchronized void newPixels(
  int x,
  int y,
  int w,
  int h,
  boolean framenotify)

Sends a rectangular region of the buffer of pixels to any ImageConsumers that 
are currently interested in the data for this image. If the framenotify 
parameter is true then the consumers are also notified that an animation frame 
is complete. This method only has effect if the animation flag has been turned 
on through the setAnimated() method. If the full buffer update flag was turned 
on with the setFullBufferUpdates() method then the rectangle parameters will be 
ignored and the entire buffer will always be sent. 

    x - the x coordinate of the upper left corner of the rectangle of pixels to be sent 
    y - the y coordinate of the upper left corner of the rectangle of pixels to be sent 
    w - the width of the rectangle of pixels to be sent 
    h - the height of the rectangle of pixels to be sent 
    framenotify - true if the consumers should be sent a {@link ImageConsumer#SINGLEFRAMEDONE 
       SINGLEFRAMEDONE} notification 

*java.awt.image.MemoryImageSource.removeConsumer(ImageConsumer)*

public synchronized void removeConsumer(java.awt.image.ImageConsumer ic)

Removes an ImageConsumer from the list of consumers interested in data for this 
image. 

    ic - the specified ImageConsumer 

*java.awt.image.MemoryImageSource.requestTopDownLeftRightResend(ImageConsumer)*

public void requestTopDownLeftRightResend(java.awt.image.ImageConsumer ic)

Requests that a given ImageConsumer have the image data delivered one more time 
in top-down, left-right order. 

    ic - the specified ImageConsumer 

*java.awt.image.MemoryImageSource.setAnimated(boolean)*

public synchronized void setAnimated(boolean animated)

Changes this memory image into a multi-frame animation or a single-frame static 
image depending on the animated parameter. This method should be called 
immediately after the MemoryImageSource is constructed and before an image is 
created with it to ensure that all ImageConsumers will receive the correct 
multi-frame data. If an ImageConsumer is added to this ImageProducer before 
this flag is set then that ImageConsumer will see only a snapshot of the pixel 
data that was available when it connected. 

    animated - true if the image is a multi-frame animation 

*java.awt.image.MemoryImageSource.setFullBufferUpdates(boolean)*

public synchronized void setFullBufferUpdates(boolean fullbuffers)

Specifies whether this animated memory image should always be updated by 
sending the complete buffer of pixels whenever there is a change. This flag is 
ignored if the animation flag is not turned on through the setAnimated() 
method. This method should be called immediately after the MemoryImageSource is 
constructed and before an image is created with it to ensure that all 
ImageConsumers will receive the correct pixel delivery hints. 

    fullbuffers - true if the complete pixel buffer should always be sent 

*java.awt.image.MemoryImageSource.startProduction(ImageConsumer)*

public void startProduction(java.awt.image.ImageConsumer ic)

Adds an ImageConsumer to the list of consumers interested in data for this 
image and immediately starts delivery of the image data through the 
ImageConsumer interface. 

    ic - the specified ImageConsumer image data through the ImageConsumer interface. 



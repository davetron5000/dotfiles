*java.io.ObjectOutputStream* *ObjectOutputStream* An ObjectOutputStream writes primitive data types and graphs of Java objects
 to an OutputStream.

public class ObjectOutputStream
  extends    |java.io.OutputStream|
  implements |java.io.ObjectOutput|
             |java.io.ObjectStreamConstants|

|java.io.ObjectOutputStream_Description|
|java.io.ObjectOutputStream_Fields|
|java.io.ObjectOutputStream_Constructors|
|java.io.ObjectOutputStream_Methods|

====================================================================================================================================================================================

*java.io.ObjectOutputStream_Constructors*
|java.io.ObjectOutputStream()|Provide a way for subclasses that are completely reimplementing  ObjectOutputStream to not have to allocate private data just used by  this implement
|java.io.ObjectOutputStream(OutputStream)|Creates an ObjectOutputStream that writes to the specified OutputStream.

*java.io.ObjectOutputStream_Methods*
|java.io.ObjectOutputStream.annotateClass(Class<?>)|Subclasses may implement this method to allow class data to be stored in  the stream.
|java.io.ObjectOutputStream.annotateProxyClass(Class<?>)|Subclasses may implement this method to store custom data in the stream  along with descriptors for dynamic proxy classes.
|java.io.ObjectOutputStream.close()|Closes the stream.
|java.io.ObjectOutputStream.defaultWriteObject()|Write the non-static and non-transient fields of the current class to  this stream.
|java.io.ObjectOutputStream.drain()|Drain any buffered data in ObjectOutputStream.
|java.io.ObjectOutputStream.enableReplaceObject(boolean)|Enable the stream to do replacement of objects in the stream.
|java.io.ObjectOutputStream.flush()|Flushes the stream.
|java.io.ObjectOutputStream.putFields()|Retrieve the object used to buffer persistent fields to be written to  the stream.
|java.io.ObjectOutputStream.replaceObject(Object)|This method will allow trusted subclasses of ObjectOutputStream to  substitute one object for another during serialization.
|java.io.ObjectOutputStream.reset()|Reset will disregard the state of any objects already written to the  stream.
|java.io.ObjectOutputStream.useProtocolVersion(int)|Specify stream protocol version to use when writing the stream.
|java.io.ObjectOutputStream.write(byte[])|Writes an array of bytes.
|java.io.ObjectOutputStream.write(byte[],int,int)|Writes a sub array of bytes.
|java.io.ObjectOutputStream.write(int)|Writes a byte.
|java.io.ObjectOutputStream.writeBoolean(boolean)|Writes a boolean.
|java.io.ObjectOutputStream.writeByte(int)|Writes an 8 bit byte.
|java.io.ObjectOutputStream.writeBytes(String)|Writes a String as a sequence of bytes.
|java.io.ObjectOutputStream.writeChar(int)|Writes a 16 bit char.
|java.io.ObjectOutputStream.writeChars(String)|Writes a String as a sequence of chars.
|java.io.ObjectOutputStream.writeClassDescriptor(ObjectStreamClass)|Write the specified class descriptor to the ObjectOutputStream.
|java.io.ObjectOutputStream.writeDouble(double)|Writes a 64 bit double.
|java.io.ObjectOutputStream.writeFields()|Write the buffered fields to the stream.
|java.io.ObjectOutputStream.writeFloat(float)|Writes a 32 bit float.
|java.io.ObjectOutputStream.writeInt(int)|Writes a 32 bit int.
|java.io.ObjectOutputStream.writeLong(long)|Writes a 64 bit long.
|java.io.ObjectOutputStream.writeObject(Object)|Write the specified object to the ObjectOutputStream.
|java.io.ObjectOutputStream.writeObjectOverride(Object)|Method used by subclasses to override the default writeObject method.
|java.io.ObjectOutputStream.writeShort(int)|Writes a 16 bit short.
|java.io.ObjectOutputStream.writeStreamHeader()|The writeStreamHeader method is provided so subclasses can append or  prepend their own header to the stream.
|java.io.ObjectOutputStream.writeUnshared(Object)|Writes an "unshared" object to the ObjectOutputStream.
|java.io.ObjectOutputStream.writeUTF(String)|Primitive data write of this String in   modified UTF-8  format.

*java.io.ObjectOutputStream_Description*

An ObjectOutputStream writes primitive data types and graphs of Java objects to an OutputStream. The objects can be read (reconstituted) using an ObjectInputStream. Persistent 
storage of objects can be accomplished by using a file for the stream. If the stream is a network socket stream, the objects can be reconstituted on another host or in another 
process. 

Only objects that support the java.io.Serializable interface can be written to streams. The class of each serializable object is encoded including the class name and signature of 
the class, the values of the object's fields and arrays, and the closure of any other objects referenced from the initial objects. 

The method writeObject is used to write an object to the stream. Any object, including Strings and arrays, is written with writeObject. Multiple objects or primitives can be 
written to the stream. The objects must be read back from the corresponding ObjectInputstream with the same types and in the same order as they were written. 

Primitive data types can also be written to the stream using the appropriate methods from DataOutput. Strings can also be written using the writeUTF method. 

The default serialization mechanism for an object writes the class of the object, the class signature, and the values of all non-transient and non-static fields. References to 
other objects (except in transient or static fields) cause those objects to be written also. Multiple references to a single object are encoded using a reference sharing mechanism 
so that graphs of objects can be restored to the same shape as when the original was written. 

For example to write an object that can be read by the example in ObjectInputStream: 



FileOutputStream fos = new FileOutputStream("t.tmp"); ObjectOutputStream oos = new ObjectOutputStream(fos); 

oos.writeInt(12345); oos.writeObject("Today"); oos.writeObject(new Date()); 

oos.close(); 

Classes that require special handling during the serialization and deserialization process must implement special methods with these exact signatures: 



private void readObject(java.io.ObjectInputStream stream) throws IOException, ClassNotFoundException; private void writeObject(java.io.ObjectOutputStream stream) throws 
IOException 

The writeObject method is responsible for writing the state of the object for its particular class so that the corresponding readObject method can restore it. The method does not 
need to concern itself with the state belonging to the object's superclasses or subclasses. State is saved by writing the individual fields to the ObjectOutputStream using the 
writeObject method or by using the methods for primitive data types supported by DataOutput. 

Serialization does not write out the fields of any object that does not implement the java.io.Serializable interface. Subclasses of Objects that are not serializable can be 
serializable. In this case the non-serializable class must have a no-arg constructor to allow its fields to be initialized. In this case it is the responsibility of the subclass 
to save and restore the state of the non-serializable class. It is frequently the case that the fields of that class are accessible (public, package, or protected) or that there 
are get and set methods that can be used to restore the state. 

Serialization of an object can be prevented by implementing writeObject and readObject methods that throw the NotSerializableException. The exception will be caught by the 
ObjectOutputStream and abort the serialization process. 

Implementing the Externalizable interface allows the object to assume complete control over the contents and format of the object's serialized form. The methods of the 
Externalizable interface, writeExternal and readExternal, are called to save and restore the objects state. When implemented by a class they can write and read their own state 
using all of the methods of ObjectOutput and ObjectInput. It is the responsibility of the objects to handle any versioning that occurs. 

Enum constants are serialized differently than ordinary serializable or externalizable objects. The serialized form of an enum constant consists solely of its name; field values 
of the constant are not transmitted. To serialize an enum constant, ObjectOutputStream writes the string returned by the constant's name method. Like other serializable or 
externalizable objects, enum constants can function as the targets of back references appearing subsequently in the serialization stream. The process by which enum constants are 
serialized cannot be customized; any class-specific writeObject and writeReplace methods defined by enum types are ignored during serialization. Similarly, any 
serialPersistentFields or serialVersionUID field declarations are also ignored--all enum types have a fixed serialVersionUID of 0L. 

Primitive data, excluding serializable fields and externalizable data, is written to the ObjectOutputStream in block-data records. A block data record is composed of a header and 
data. The block data header consists of a marker and the number of bytes to follow the header. Consecutive primitive data writes are merged into one block-data record. The 
blocking factor used for a block-data record will be 1024 bytes. Each block-data record will be filled up to 1024 bytes, or be written whenever there is a termination of 
block-data mode. Calls to the ObjectOutputStream methods writeObject, defaultWriteObject and writeFields initially terminate any existing block-data record. 



*java.io.ObjectOutputStream()*

protected ObjectOutputStream()
  throws |java.io.IOException|
         |java.lang.SecurityException|
         
Provide a way for subclasses that are completely reimplementing ObjectOutputStream to not have to allocate private data just used by this implementation of ObjectOutputStream. 

If there is a security manager installed, this method first calls the security manager's checkPermission method with a SerializablePermission("enableSubclassImplementation") 
permission to ensure it's ok to enable subclassing. 


*java.io.ObjectOutputStream(OutputStream)*

public ObjectOutputStream(java.io.OutputStream out)
  throws |java.io.IOException|
         
Creates an ObjectOutputStream that writes to the specified OutputStream. This constructor writes the serialization stream header to the underlying stream; callers may wish to 
flush the stream immediately to ensure that constructors for receiving ObjectInputStreams will not block when reading the header. 

If a security manager is installed, this constructor will check for the "enableSubclassImplementation" SerializablePermission when invoked directly or indirectly by the 
constructor of a subclass which overrides the ObjectOutputStream.putFields or ObjectOutputStream.writeUnshared methods. 

    out - output stream to write to 

*java.io.ObjectOutputStream.annotateClass(Class<?>)*

protected void annotateClass(java.lang.Class<?> cl)
  throws |java.io.IOException|
         
Subclasses may implement this method to allow class data to be stored in the stream. By default this method does nothing. The corresponding method in ObjectInputStream is 
resolveClass. This method is called exactly once for each unique class in the stream. The class name and signature will have already been written to the stream. This method may 
make free use of the ObjectOutputStream to save any representation of the class it deems suitable (for example, the bytes of the class file). The resolveClass method in the 
corresponding subclass of ObjectInputStream must read and use any data or objects written by annotateClass. 


    cl - the class to annotate custom data for 

*java.io.ObjectOutputStream.annotateProxyClass(Class<?>)*

protected void annotateProxyClass(java.lang.Class<?> cl)
  throws |java.io.IOException|
         
Subclasses may implement this method to store custom data in the stream along with descriptors for dynamic proxy classes. 

This method is called exactly once for each unique proxy class descriptor in the stream. The default implementation of this method in ObjectOutputStream does nothing. 

The corresponding method in ObjectInputStream is resolveProxyClass. For a given subclass of ObjectOutputStream that overrides this method, the resolveProxyClass method in the 
corresponding subclass of ObjectInputStream must read any data or objects written by annotateProxyClass. 


    cl - the proxy class to annotate custom data for 

*java.io.ObjectOutputStream.close()*

public void close()
  throws |java.io.IOException|
         
Closes the stream. This method must be called to release any resources associated with the stream. 



*java.io.ObjectOutputStream.defaultWriteObject()*

public void defaultWriteObject()
  throws |java.io.IOException|
         
Write the non-static and non-transient fields of the current class to this stream. This may only be called from the writeObject method of the class being serialized. It will throw 
the NotActiveException if it is called otherwise. 



*java.io.ObjectOutputStream.drain()*

protected void drain()
  throws |java.io.IOException|
         
Drain any buffered data in ObjectOutputStream. Similar to flush but does not propagate the flush to the underlying stream. 



*java.io.ObjectOutputStream.enableReplaceObject(boolean)*

protected boolean enableReplaceObject(boolean enable)
  throws |java.lang.SecurityException|
         
Enable the stream to do replacement of objects in the stream. When enabled, the replaceObject method is called for every object being serialized. 

If enable is true, and there is a security manager installed, this method first calls the security manager's checkPermission method with a 
SerializablePermission("enableSubstitution") permission to ensure it's ok to enable the stream to do replacement of objects in the stream. 


    enable - boolean parameter to enable replacement of objects 

    Returns: the previous setting before this method was invoked 

*java.io.ObjectOutputStream.flush()*

public void flush()
  throws |java.io.IOException|
         
Flushes the stream. This will write any buffered output bytes and flush through to the underlying stream. 



*java.io.ObjectOutputStream.putFields()*

public |java.io.ObjectOutputStream.PutField| putFields()
  throws |java.io.IOException|
         
Retrieve the object used to buffer persistent fields to be written to the stream. The fields will be written to the stream when writeFields method is called. 



    Returns: an instance of the class Putfield that holds the serializable fields 

*java.io.ObjectOutputStream.replaceObject(Object)*

protected |java.lang.Object| replaceObject(java.lang.Object obj)
  throws |java.io.IOException|
         
This method will allow trusted subclasses of ObjectOutputStream to substitute one object for another during serialization. Replacing objects is disabled until enableReplaceObject 
is called. The enableReplaceObject method checks that the stream requesting to do replacement can be trusted. The first occurrence of each object written into the serialization 
stream is passed to replaceObject. Subsequent references to the object are replaced by the object returned by the original call to replaceObject. To ensure that the private state 
of objects is not unintentionally exposed, only trusted streams may use replaceObject. 

The ObjectOutputStream.writeObject method takes a parameter of type Object (as opposed to type Serializable) to allow for cases where non-serializable objects are replaced by 
serializable ones. 

When a subclass is replacing objects it must insure that either a complementary substitution must be made during deserialization or that the substituted object is compatible with 
every field where the reference will be stored. Objects whose type is not a subclass of the type of the field or array element abort the serialization by raising an exception and 
the object is not be stored. 

This method is called only once when each object is first encountered. All subsequent references to the object will be redirected to the new object. This method should return the 
object to be substituted or the original object. 

Null can be returned as the object to be substituted, but may cause NullReferenceException in classes that contain references to the original object since they may be expecting an 
object instead of null. 


    obj - the object to be replaced 

    Returns: the alternate object that replaced the specified one 

*java.io.ObjectOutputStream.reset()*

public void reset()
  throws |java.io.IOException|
         
Reset will disregard the state of any objects already written to the stream. The state is reset to be the same as a new ObjectOutputStream. The current point in the stream is 
marked as reset so the corresponding ObjectInputStream will be reset at the same point. Objects previously written to the stream will not be refered to as already being in the 
stream. They will be written to the stream again. 



*java.io.ObjectOutputStream.useProtocolVersion(int)*

public void useProtocolVersion(int version)
  throws |java.io.IOException|
         
Specify stream protocol version to use when writing the stream. 

This routine provides a hook to enable the current version of Serialization to write in a format that is backwards compatible to a previous version of the stream format. 

Every effort will be made to avoid introducing additional backwards incompatibilities; however, sometimes there is no other alternative. 


    version - use ProtocolVersion from java.io.ObjectStreamConstants. 

*java.io.ObjectOutputStream.write(byte[])*

public void write(byte[] buf)
  throws |java.io.IOException|
         
Writes an array of bytes. This method will block until the bytes are actually written. 


    buf - the data to be written 

*java.io.ObjectOutputStream.write(byte[],int,int)*

public void write(
  byte[] buf,
  int off,
  int len)
  throws |java.io.IOException|
         
Writes a sub array of bytes. 


    buf - the data to be written 
    off - the start offset in the data 
    len - the number of bytes that are written 

*java.io.ObjectOutputStream.write(int)*

public void write(int val)
  throws |java.io.IOException|
         
Writes a byte. This method will block until the byte is actually written. 


    val - the byte to be written to the stream 

*java.io.ObjectOutputStream.writeBoolean(boolean)*

public void writeBoolean(boolean val)
  throws |java.io.IOException|
         
Writes a boolean. 


    val - the boolean to be written 

*java.io.ObjectOutputStream.writeByte(int)*

public void writeByte(int val)
  throws |java.io.IOException|
         
Writes an 8 bit byte. 


    val - the byte value to be written 

*java.io.ObjectOutputStream.writeBytes(String)*

public void writeBytes(java.lang.String str)
  throws |java.io.IOException|
         
Writes a String as a sequence of bytes. 


    str - the String of bytes to be written 

*java.io.ObjectOutputStream.writeChar(int)*

public void writeChar(int val)
  throws |java.io.IOException|
         
Writes a 16 bit char. 


    val - the char value to be written 

*java.io.ObjectOutputStream.writeChars(String)*

public void writeChars(java.lang.String str)
  throws |java.io.IOException|
         
Writes a String as a sequence of chars. 


    str - the String of chars to be written 

*java.io.ObjectOutputStream.writeClassDescriptor(ObjectStreamClass)*

protected void writeClassDescriptor(java.io.ObjectStreamClass desc)
  throws |java.io.IOException|
         
Write the specified class descriptor to the ObjectOutputStream. Class descriptors are used to identify the classes of objects written to the stream. Subclasses of 
ObjectOutputStream may override this method to customize the way in which class descriptors are written to the serialization stream. The corresponding method in ObjectInputStream, 
readClassDescriptor, should then be overridden to reconstitute the class descriptor from its custom stream representation. By default, this method writes class descriptors 
according to the format defined in the Object Serialization specification. 

Note that this method will only be called if the ObjectOutputStream is not using the old serialization stream format (set by calling ObjectOutputStream's useProtocolVersion 
method). If this serialization stream is using the old format (PROTOCOL_VERSION_1), the class descriptor will be written internally in a manner that cannot be overridden or 
customized. 


    desc - class descriptor to write to the stream 

*java.io.ObjectOutputStream.writeDouble(double)*

public void writeDouble(double val)
  throws |java.io.IOException|
         
Writes a 64 bit double. 


    val - the double value to be written 

*java.io.ObjectOutputStream.writeFields()*

public void writeFields()
  throws |java.io.IOException|
         
Write the buffered fields to the stream. 



*java.io.ObjectOutputStream.writeFloat(float)*

public void writeFloat(float val)
  throws |java.io.IOException|
         
Writes a 32 bit float. 


    val - the float value to be written 

*java.io.ObjectOutputStream.writeInt(int)*

public void writeInt(int val)
  throws |java.io.IOException|
         
Writes a 32 bit int. 


    val - the integer value to be written 

*java.io.ObjectOutputStream.writeLong(long)*

public void writeLong(long val)
  throws |java.io.IOException|
         
Writes a 64 bit long. 


    val - the long value to be written 

*java.io.ObjectOutputStream.writeObject(Object)*

public final void writeObject(java.lang.Object obj)
  throws |java.io.IOException|
         
Write the specified object to the ObjectOutputStream. The class of the object, the signature of the class, and the values of the non-transient and non-static fields of the class 
and all of its supertypes are written. Default serialization for a class can be overridden using the writeObject and the readObject methods. Objects referenced by this object are 
written transitively so that a complete equivalent graph of objects can be reconstructed by an ObjectInputStream. 

Exceptions are thrown for problems with the OutputStream and for classes that should not be serialized. All exceptions are fatal to the OutputStream, which is left in an 
indeterminate state, and it is up to the caller to ignore or recover the stream state. 



*java.io.ObjectOutputStream.writeObjectOverride(Object)*

protected void writeObjectOverride(java.lang.Object obj)
  throws |java.io.IOException|
         
Method used by subclasses to override the default writeObject method. This method is called by trusted subclasses of ObjectInputStream that constructed ObjectInputStream using the 
protected no-arg constructor. The subclass is expected to provide an override method with the modifier "final". 


    obj - object to be written to the underlying stream 

*java.io.ObjectOutputStream.writeShort(int)*

public void writeShort(int val)
  throws |java.io.IOException|
         
Writes a 16 bit short. 


    val - the short value to be written 

*java.io.ObjectOutputStream.writeStreamHeader()*

protected void writeStreamHeader()
  throws |java.io.IOException|
         
The writeStreamHeader method is provided so subclasses can append or prepend their own header to the stream. It writes the magic number and version to the stream. 



*java.io.ObjectOutputStream.writeUnshared(Object)*

public void writeUnshared(java.lang.Object obj)
  throws |java.io.IOException|
         
Writes an "unshared" object to the ObjectOutputStream. This method is identical to writeObject, except that it always writes the given object as a new, unique object in the stream 
(as opposed to a back-reference pointing to a previously serialized instance). Specifically: 

An object written via writeUnshared is always serialized in the same manner as a newly appearing object (an object that has not been written to the stream yet), regardless of 
whether or not the object has been written previously. 

If writeObject is used to write an object that has been previously written with writeUnshared, the previous writeUnshared operation is treated as if it were a write of a separate 
object. In other words, ObjectOutputStream will never generate back-references to object data written by calls to writeUnshared. 

While writing an object via writeUnshared does not in itself guarantee a unique reference to the object when it is deserialized, it allows a single object to be defined multiple 
times in a stream, so that multiple calls to readUnshared by the receiver will not conflict. Note that the rules described above only apply to the base-level object written with 
writeUnshared, and not to any transitively referenced sub-objects in the object graph to be serialized. 

ObjectOutputStream subclasses which override this method can only be constructed in security contexts possessing the "enableSubclassImplementation" SerializablePermission; any 
attempt to instantiate such a subclass without this permission will cause a SecurityException to be thrown. 


    obj - object to write to stream 

*java.io.ObjectOutputStream.writeUTF(String)*

public void writeUTF(java.lang.String str)
  throws |java.io.IOException|
         
Primitive data write of this String in modified UTF-8 format. Note that there is a significant difference between writing a String into the stream as primitive data or as an 
Object. A String instance written by writeObject is written into the stream as a String initially. Future writeObject() calls write references to the string into the stream. 


    str - the String to be written 



*java.sql.SQLException* *SQLException* An exception that provides information on

public class SQLException
  extends    |java.lang.Exception|

|java.sql.SQLException_Description|
|java.sql.SQLException_Fields|
|java.sql.SQLException_Constructors|
|java.sql.SQLException_Methods|

================================================================================

*java.sql.SQLException_Constructors*
|java.sql.SQLException()|Constructs an SQLException object;  the reason field d
|java.sql.SQLException(String)|Constructs an SQLException object with a reason;
|java.sql.SQLException(String,String)|Constructs an SQLException object with th
|java.sql.SQLException(String,String,int)|Constructs a fully-specified SQLExcep

*java.sql.SQLException_Methods*
|java.sql.SQLException.getErrorCode()|Retrieves the vendor-specific exception c
|java.sql.SQLException.getNextException()|Retrieves the exception chained to th
|java.sql.SQLException.getSQLState()|Retrieves the SQLState for this SQLExcepti
|java.sql.SQLException.setNextException(SQLException)|Adds an SQLException obje

*java.sql.SQLException_Description*

An exception that provides information on a database access error or other 
errors. 

Each SQLException provides several kinds of information: 

a string describing the error. This is used as the Java Exception message, 
available via the method getMesage. a "SQLstate" string, which follows either 
the XOPEN SQLstate conventions or the SQL 99 conventions. The values of the 
SQLState string are described in the appropriate spec. The DatabaseMetaData 
method getSQLStateType can be used to discover whether the driver returns the 
XOPEN type or the SQL 99 type. an integer error code that is specific to each 
vendor. Normally this will be the actual error code returned by the underlying 
database. a chain to a next Exception. This can be used to provide additional 
error information. 


*java.sql.SQLException()*

public SQLException()

Constructs an SQLException object; the reason field defaults to null, the 
SQLState field defaults to null, and the vendorCode field defaults to 0. 


*java.sql.SQLException(String)*

public SQLException(java.lang.String reason)

Constructs an SQLException object with a reason; the SQLState field defaults to 
null, and the vendorCode field defaults to 0. 

    reason - a description of the exception 

*java.sql.SQLException(String,String)*

public SQLException(
  java.lang.String reason,
  java.lang.String SQLState)

Constructs an SQLException object with the given reason and SQLState; the 
vendorCode field defaults to 0. 

    reason - a description of the exception 
    SQLState - an XOPEN or SQL 99 code identifying the exception 

*java.sql.SQLException(String,String,int)*

public SQLException(
  java.lang.String reason,
  java.lang.String SQLState,
  int vendorCode)

Constructs a fully-specified SQLException object. 

    reason - a description of the exception 
    SQLState - an XOPEN or SQL 99 code identifying the exception 
    vendorCode - a database vendor-specific exception code 

*java.sql.SQLException.getErrorCode()*

public int getErrorCode()

Retrieves the vendor-specific exception code for this SQLException object. 


    Returns: the vendor's error code 
*java.sql.SQLException.getNextException()*

public |java.sql.SQLException| getNextException()

Retrieves the exception chained to this SQLException object. 


    Returns: the next SQLException object in the chain; null if there are none 
*java.sql.SQLException.getSQLState()*

public |java.lang.String| getSQLState()

Retrieves the SQLState for this SQLException object. 


    Returns: the SQLState value 
*java.sql.SQLException.setNextException(SQLException)*

public synchronized void setNextException(java.sql.SQLException ex)

Adds an SQLException object to the end of the chain. 

    ex - the new exception that will be added to the end of the SQLException chain 



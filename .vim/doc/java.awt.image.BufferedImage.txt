*java.awt.image.BufferedImage* *BufferedImage* The BufferedImage subclass descri

public class BufferedImage
  extends    |java.awt.Image|
  implements |java.awt.image.WritableRenderedImage|
             |java.awt.Transparency|

|java.awt.image.BufferedImage_Description|
|java.awt.image.BufferedImage_Fields|
|java.awt.image.BufferedImage_Constructors|
|java.awt.image.BufferedImage_Methods|

================================================================================

*java.awt.image.BufferedImage_Fields*
|int_java.awt.image.BufferedImage.TYPE_3BYTE_BGR|
|int_java.awt.image.BufferedImage.TYPE_4BYTE_ABGR|
|int_java.awt.image.BufferedImage.TYPE_4BYTE_ABGR_PRE|
|int_java.awt.image.BufferedImage.TYPE_BYTE_BINARY|
|int_java.awt.image.BufferedImage.TYPE_BYTE_GRAY|
|int_java.awt.image.BufferedImage.TYPE_BYTE_INDEXED|
|int_java.awt.image.BufferedImage.TYPE_CUSTOM|
|int_java.awt.image.BufferedImage.TYPE_INT_ARGB|
|int_java.awt.image.BufferedImage.TYPE_INT_ARGB_PRE|
|int_java.awt.image.BufferedImage.TYPE_INT_BGR|
|int_java.awt.image.BufferedImage.TYPE_INT_RGB|
|int_java.awt.image.BufferedImage.TYPE_USHORT_555_RGB|
|int_java.awt.image.BufferedImage.TYPE_USHORT_565_RGB|
|int_java.awt.image.BufferedImage.TYPE_USHORT_GRAY|

*java.awt.image.BufferedImage_Constructors*
|java.awt.image.BufferedImage(ColorModel,WritableRaster,boolean,Hashtable)|Cons
|java.awt.image.BufferedImage(int,int,int)|Constructs a BufferedImage of one of
|java.awt.image.BufferedImage(int,int,int,IndexColorModel)|Constructs a Buffere

*java.awt.image.BufferedImage_Methods*
|java.awt.image.BufferedImage.addTileObserver(TileObserver)|Adds a tile observe
|java.awt.image.BufferedImage.coerceData(boolean)|Forces the data to match the 
|java.awt.image.BufferedImage.copyData(WritableRaster)|Computes an arbitrary re
|java.awt.image.BufferedImage.createGraphics()|Creates a Graphics2D, which can 
|java.awt.image.BufferedImage.flush()|Flushes all resources being used to cache
|java.awt.image.BufferedImage.getAlphaRaster()|Returns a WritableRaster represe
|java.awt.image.BufferedImage.getCapabilities(GraphicsConfiguration)|This overr
|java.awt.image.BufferedImage.getColorModel()|Returns the ColorModel.
|java.awt.image.BufferedImage.getData()|Returns the image as one large tile.
|java.awt.image.BufferedImage.getData(Rectangle)|Computes and returns an arbitr
|java.awt.image.BufferedImage.getGraphics()|This method returns aGraphics2D, bu
|java.awt.image.BufferedImage.getHeight()|Returns the height of the BufferedIma
|java.awt.image.BufferedImage.getHeight(ImageObserver)|Returns the height of th
|java.awt.image.BufferedImage.getMinTileX()|Returns the minimum tile index in t
|java.awt.image.BufferedImage.getMinTileY()|Returns the minimum tile index in t
|java.awt.image.BufferedImage.getMinX()|Returns the minimum x coordinate of thi
|java.awt.image.BufferedImage.getMinY()|Returns the minimum y coordinate of thi
|java.awt.image.BufferedImage.getNumXTiles()|Returns the number of tiles in the
|java.awt.image.BufferedImage.getNumYTiles()|Returns the number of tiles in the
|java.awt.image.BufferedImage.getProperty(String)|Returns a property of the ima
|java.awt.image.BufferedImage.getProperty(String,ImageObserver)|Returns a prope
|java.awt.image.BufferedImage.getPropertyNames()|Returns an array of names reco
|java.awt.image.BufferedImage.getRaster()|Returns theWritableRaster.
|java.awt.image.BufferedImage.getRGB(int,int)|Returns an integer pixel in the d
|java.awt.image.BufferedImage.getRGB(int,int,int,int,int[],int,int)|Returns an 
|java.awt.image.BufferedImage.getSampleModel()|Returns the SampleModel associat
|java.awt.image.BufferedImage.getSource()|Returns the object that produces the 
|java.awt.image.BufferedImage.getSources()|Returns aVectorofRenderedImageobject
|java.awt.image.BufferedImage.getSubimage(int,int,int,int)|Returns a subimage d
|java.awt.image.BufferedImage.getTile(int,int)|Returns tile (tileX,tileY).
|java.awt.image.BufferedImage.getTileGridXOffset()|Returns the x offset of the 
|java.awt.image.BufferedImage.getTileGridYOffset()|Returns the y offset of the 
|java.awt.image.BufferedImage.getTileHeight()|Returns the tile height in pixels
|java.awt.image.BufferedImage.getTileWidth()|Returns the tile width in pixels.
|java.awt.image.BufferedImage.getTransparency()|Returns the transparency.
|java.awt.image.BufferedImage.getType()|Returns the image type.
|java.awt.image.BufferedImage.getWidth()|Returns the width of the BufferedImage
|java.awt.image.BufferedImage.getWidth(ImageObserver)|Returns the width of the 
|java.awt.image.BufferedImage.getWritableTile(int,int)|Checks out a tile for wr
|java.awt.image.BufferedImage.getWritableTileIndices()|Returns an array ofPoint
|java.awt.image.BufferedImage.hasTileWriters()|Returns whether or not any tile 
|java.awt.image.BufferedImage.isAlphaPremultiplied()|Returns whether or not the
|java.awt.image.BufferedImage.isTileWritable(int,int)|Returns whether or not a 
|java.awt.image.BufferedImage.releaseWritableTile(int,int)|Relinquishes permiss
|java.awt.image.BufferedImage.removeTileObserver(TileObserver)|Removes a tile o
|java.awt.image.BufferedImage.setData(Raster)|Sets a rectangular region of the 
|java.awt.image.BufferedImage.setRGB(int,int,int)|Sets a pixel in this Buffered
|java.awt.image.BufferedImage.setRGB(int,int,int,int,int[],int,int)|Sets an arr
|java.awt.image.BufferedImage.toString()|Returns a String representation of thi

*java.awt.image.BufferedImage_Description*

The BufferedImage subclass describes an Image(|java.awt.Image|) with an 
accessible buffer of image data. A BufferedImage is comprised of a 
(|java.awt.image.ColorModel|) and a (|java.awt.image.Raster|) of image data. 
The number and types of bands in the (|java.awt.image.SampleModel|) of the 
Raster must match the number and types required by the ColorModel to represent 
its color and alpha components. All BufferedImage objects have an upper left 
corner coordinate of (0,0). Any Raster used to construct a BufferedImage must 
therefore have minX=0 and minY=0. 

This class relies on the data fetching and setting methods of Raster, and on 
the color characterization methods of ColorModel. 


*int_java.awt.image.BufferedImage.TYPE_3BYTE_BGR*

The BufferedImage subclass describes an Image(|java.awt.Image|) with an 
accessible buffer of image data. A BufferedImage is comprised of a 
(|java.awt.image.ColorModel|) and a (|java.awt.image.Raster|) of image data. 
The number and types of bands in the (|java.awt.image.SampleModel|) of the 
Raster must match the number and types required by the ColorModel to represent 
its color and alpha components. All BufferedImage objects have an upper left 
corner coordinate of (0,0). Any Raster used to construct a BufferedImage must 
therefore have minX=0 and minY=0. 

This class relies on the data fetching and setting methods of Raster, and on 
the color characterization methods of ColorModel. 


*int_java.awt.image.BufferedImage.TYPE_4BYTE_ABGR*

The BufferedImage subclass describes an Image(|java.awt.Image|) with an 
accessible buffer of image data. A BufferedImage is comprised of a 
(|java.awt.image.ColorModel|) and a (|java.awt.image.Raster|) of image data. 
The number and types of bands in the (|java.awt.image.SampleModel|) of the 
Raster must match the number and types required by the ColorModel to represent 
its color and alpha components. All BufferedImage objects have an upper left 
corner coordinate of (0,0). Any Raster used to construct a BufferedImage must 
therefore have minX=0 and minY=0. 

This class relies on the data fetching and setting methods of Raster, and on 
the color characterization methods of ColorModel. 


*int_java.awt.image.BufferedImage.TYPE_4BYTE_ABGR_PRE*

The BufferedImage subclass describes an Image(|java.awt.Image|) with an 
accessible buffer of image data. A BufferedImage is comprised of a 
(|java.awt.image.ColorModel|) and a (|java.awt.image.Raster|) of image data. 
The number and types of bands in the (|java.awt.image.SampleModel|) of the 
Raster must match the number and types required by the ColorModel to represent 
its color and alpha components. All BufferedImage objects have an upper left 
corner coordinate of (0,0). Any Raster used to construct a BufferedImage must 
therefore have minX=0 and minY=0. 

This class relies on the data fetching and setting methods of Raster, and on 
the color characterization methods of ColorModel. 


*int_java.awt.image.BufferedImage.TYPE_BYTE_BINARY*

The BufferedImage subclass describes an Image(|java.awt.Image|) with an 
accessible buffer of image data. A BufferedImage is comprised of a 
(|java.awt.image.ColorModel|) and a (|java.awt.image.Raster|) of image data. 
The number and types of bands in the (|java.awt.image.SampleModel|) of the 
Raster must match the number and types required by the ColorModel to represent 
its color and alpha components. All BufferedImage objects have an upper left 
corner coordinate of (0,0). Any Raster used to construct a BufferedImage must 
therefore have minX=0 and minY=0. 

This class relies on the data fetching and setting methods of Raster, and on 
the color characterization methods of ColorModel. 


*int_java.awt.image.BufferedImage.TYPE_BYTE_GRAY*

The BufferedImage subclass describes an Image(|java.awt.Image|) with an 
accessible buffer of image data. A BufferedImage is comprised of a 
(|java.awt.image.ColorModel|) and a (|java.awt.image.Raster|) of image data. 
The number and types of bands in the (|java.awt.image.SampleModel|) of the 
Raster must match the number and types required by the ColorModel to represent 
its color and alpha components. All BufferedImage objects have an upper left 
corner coordinate of (0,0). Any Raster used to construct a BufferedImage must 
therefore have minX=0 and minY=0. 

This class relies on the data fetching and setting methods of Raster, and on 
the color characterization methods of ColorModel. 


*int_java.awt.image.BufferedImage.TYPE_BYTE_INDEXED*

The BufferedImage subclass describes an Image(|java.awt.Image|) with an 
accessible buffer of image data. A BufferedImage is comprised of a 
(|java.awt.image.ColorModel|) and a (|java.awt.image.Raster|) of image data. 
The number and types of bands in the (|java.awt.image.SampleModel|) of the 
Raster must match the number and types required by the ColorModel to represent 
its color and alpha components. All BufferedImage objects have an upper left 
corner coordinate of (0,0). Any Raster used to construct a BufferedImage must 
therefore have minX=0 and minY=0. 

This class relies on the data fetching and setting methods of Raster, and on 
the color characterization methods of ColorModel. 


*int_java.awt.image.BufferedImage.TYPE_CUSTOM*

The BufferedImage subclass describes an Image(|java.awt.Image|) with an 
accessible buffer of image data. A BufferedImage is comprised of a 
(|java.awt.image.ColorModel|) and a (|java.awt.image.Raster|) of image data. 
The number and types of bands in the (|java.awt.image.SampleModel|) of the 
Raster must match the number and types required by the ColorModel to represent 
its color and alpha components. All BufferedImage objects have an upper left 
corner coordinate of (0,0). Any Raster used to construct a BufferedImage must 
therefore have minX=0 and minY=0. 

This class relies on the data fetching and setting methods of Raster, and on 
the color characterization methods of ColorModel. 


*int_java.awt.image.BufferedImage.TYPE_INT_ARGB*

The BufferedImage subclass describes an Image(|java.awt.Image|) with an 
accessible buffer of image data. A BufferedImage is comprised of a 
(|java.awt.image.ColorModel|) and a (|java.awt.image.Raster|) of image data. 
The number and types of bands in the (|java.awt.image.SampleModel|) of the 
Raster must match the number and types required by the ColorModel to represent 
its color and alpha components. All BufferedImage objects have an upper left 
corner coordinate of (0,0). Any Raster used to construct a BufferedImage must 
therefore have minX=0 and minY=0. 

This class relies on the data fetching and setting methods of Raster, and on 
the color characterization methods of ColorModel. 


*int_java.awt.image.BufferedImage.TYPE_INT_ARGB_PRE*

The BufferedImage subclass describes an Image(|java.awt.Image|) with an 
accessible buffer of image data. A BufferedImage is comprised of a 
(|java.awt.image.ColorModel|) and a (|java.awt.image.Raster|) of image data. 
The number and types of bands in the (|java.awt.image.SampleModel|) of the 
Raster must match the number and types required by the ColorModel to represent 
its color and alpha components. All BufferedImage objects have an upper left 
corner coordinate of (0,0). Any Raster used to construct a BufferedImage must 
therefore have minX=0 and minY=0. 

This class relies on the data fetching and setting methods of Raster, and on 
the color characterization methods of ColorModel. 


*int_java.awt.image.BufferedImage.TYPE_INT_BGR*

The BufferedImage subclass describes an Image(|java.awt.Image|) with an 
accessible buffer of image data. A BufferedImage is comprised of a 
(|java.awt.image.ColorModel|) and a (|java.awt.image.Raster|) of image data. 
The number and types of bands in the (|java.awt.image.SampleModel|) of the 
Raster must match the number and types required by the ColorModel to represent 
its color and alpha components. All BufferedImage objects have an upper left 
corner coordinate of (0,0). Any Raster used to construct a BufferedImage must 
therefore have minX=0 and minY=0. 

This class relies on the data fetching and setting methods of Raster, and on 
the color characterization methods of ColorModel. 


*int_java.awt.image.BufferedImage.TYPE_INT_RGB*

The BufferedImage subclass describes an Image(|java.awt.Image|) with an 
accessible buffer of image data. A BufferedImage is comprised of a 
(|java.awt.image.ColorModel|) and a (|java.awt.image.Raster|) of image data. 
The number and types of bands in the (|java.awt.image.SampleModel|) of the 
Raster must match the number and types required by the ColorModel to represent 
its color and alpha components. All BufferedImage objects have an upper left 
corner coordinate of (0,0). Any Raster used to construct a BufferedImage must 
therefore have minX=0 and minY=0. 

This class relies on the data fetching and setting methods of Raster, and on 
the color characterization methods of ColorModel. 


*int_java.awt.image.BufferedImage.TYPE_USHORT_555_RGB*

The BufferedImage subclass describes an Image(|java.awt.Image|) with an 
accessible buffer of image data. A BufferedImage is comprised of a 
(|java.awt.image.ColorModel|) and a (|java.awt.image.Raster|) of image data. 
The number and types of bands in the (|java.awt.image.SampleModel|) of the 
Raster must match the number and types required by the ColorModel to represent 
its color and alpha components. All BufferedImage objects have an upper left 
corner coordinate of (0,0). Any Raster used to construct a BufferedImage must 
therefore have minX=0 and minY=0. 

This class relies on the data fetching and setting methods of Raster, and on 
the color characterization methods of ColorModel. 


*int_java.awt.image.BufferedImage.TYPE_USHORT_565_RGB*

The BufferedImage subclass describes an Image(|java.awt.Image|) with an 
accessible buffer of image data. A BufferedImage is comprised of a 
(|java.awt.image.ColorModel|) and a (|java.awt.image.Raster|) of image data. 
The number and types of bands in the (|java.awt.image.SampleModel|) of the 
Raster must match the number and types required by the ColorModel to represent 
its color and alpha components. All BufferedImage objects have an upper left 
corner coordinate of (0,0). Any Raster used to construct a BufferedImage must 
therefore have minX=0 and minY=0. 

This class relies on the data fetching and setting methods of Raster, and on 
the color characterization methods of ColorModel. 


*int_java.awt.image.BufferedImage.TYPE_USHORT_GRAY*

The BufferedImage subclass describes an Image(|java.awt.Image|) with an 
accessible buffer of image data. A BufferedImage is comprised of a 
(|java.awt.image.ColorModel|) and a (|java.awt.image.Raster|) of image data. 
The number and types of bands in the (|java.awt.image.SampleModel|) of the 
Raster must match the number and types required by the ColorModel to represent 
its color and alpha components. All BufferedImage objects have an upper left 
corner coordinate of (0,0). Any Raster used to construct a BufferedImage must 
therefore have minX=0 and minY=0. 

This class relies on the data fetching and setting methods of Raster, and on 
the color characterization methods of ColorModel. 



*java.awt.image.BufferedImage(ColorModel,WritableRaster,boolean,Hashtable)*

public BufferedImage(
  java.awt.image.ColorModel cm,
  java.awt.image.WritableRaster raster,
  boolean isRasterPremultiplied,
  java.util.Hashtable properties)

Constructs a new BufferedImage with a specified ColorModel and Raster. If the 
number and types of bands in the SampleModel of the Raster do not match the 
number and types required by the ColorModel to represent its color and alpha 
components, a (|java.awt.image.RasterFormatException|) is thrown. This method 
can multiply or divide the color Raster data by alpha to match the 
alphaPremultiplied state in the ColorModel. Properties for this BufferedImage 
can be established by passing in a (|java.util.Hashtable|) of String/Object 
pairs. 

    cm - ColorModel for the new image 
    raster - Raster for the image data 
    isRasterPremultiplied - if true, the data in the raster has been premultiplied with alpha. 
    properties - Hashtable of String/Object pairs. 

*java.awt.image.BufferedImage(int,int,int)*

public BufferedImage(
  int width,
  int height,
  int imageType)

Constructs a BufferedImage of one of the predefined image types. The ColorSpace 
for the image is the default sRGB space. 

    width - width of the created image 
    height - height of the created image 
    imageType - type of the created image 

*java.awt.image.BufferedImage(int,int,int,IndexColorModel)*

public BufferedImage(
  int width,
  int height,
  int imageType,
  java.awt.image.IndexColorModel cm)

Constructs a BufferedImage of one of the predefined image types: 
TYPE_BYTE_BINARY or TYPE_BYTE_INDEXED. 

If the image type is TYPE_BYTE_BINARY, the number of entries in the color model 
is used to determine whether the image should have 1, 2, or 4 bits per pixel. 
If the color model has 1 or 2 entries, the image will have 1 bit per pixel. If 
it has 3 or 4 entries, the image with have 2 bits per pixel. If it has between 
5 and 16 entries, the image will have 4 bits per pixel. Otherwise, an 
IllegalArgumentException will be thrown. 

    width - width of the created image 
    height - height of the created image 
    imageType - type of the created image 
    cm - IndexColorModel of the created image 

*java.awt.image.BufferedImage.addTileObserver(TileObserver)*

public void addTileObserver(java.awt.image.TileObserver to)

Adds a tile observer. If the observer is already present, it receives multiple 
notifications. 

    to - the specified {@link TileObserver} 

*java.awt.image.BufferedImage.coerceData(boolean)*

public void coerceData(boolean isAlphaPremultiplied)

Forces the data to match the state specified in the isAlphaPremultiplied 
variable. It may multiply or divide the color raster data by alpha, or do 
nothing if the data is in the correct state. 

    isAlphaPremultiplied - true if the alpha has been premultiplied; false otherwise. 

*java.awt.image.BufferedImage.copyData(WritableRaster)*

public |java.awt.image.WritableRaster| copyData(java.awt.image.WritableRaster outRaster)

Computes an arbitrary rectangular region of the BufferedImage and copies it 
into a specified WritableRaster. The region to be computed is determined from 
the bounds of the specified WritableRaster. The specified WritableRaster must 
have a SampleModel that is compatible with this image. If outRaster is null, an 
appropriate WritableRaster is created. 

    outRaster - a WritableRaster to hold the returned part of the image, or null 

    Returns: a reference to the supplied or created WritableRaster. 
*java.awt.image.BufferedImage.createGraphics()*

public |java.awt.Graphics2D| createGraphics()

Creates a Graphics2D, which can be used to draw into this BufferedImage. 


    Returns: a Graphics2D, used for drawing into this image. 
*java.awt.image.BufferedImage.flush()*

public void flush()

Flushes all resources being used to cache optimization information. The 
underlying pixel data is unaffected. 


*java.awt.image.BufferedImage.getAlphaRaster()*

public |java.awt.image.WritableRaster| getAlphaRaster()

Returns a WritableRaster representing the alpha channel for BufferedImage 
objects with ColorModel objects that support a separate spatial alpha channel, 
such as ComponentColorModel and DirectColorModel. Returns null if there is no 
alpha channel associated with the ColorModel in this image. This method assumes 
that for all ColorModel objects other than IndexColorModel, if the ColorModel 
supports alpha, there is a separate alpha channel which is stored as the last 
band of image data. If the image uses an IndexColorModel that has alpha in the 
lookup table, this method returns null since there is no spatially discrete 
alpha channel. This method creates a new WritableRaster, but shares the data 
array. 


    Returns: a WritableRaster or null if this BufferedImage has no alpha channel associated 
             with its ColorModel. 
*java.awt.image.BufferedImage.getCapabilities(GraphicsConfiguration)*

public |java.awt.ImageCapabilities| getCapabilities(java.awt.GraphicsConfiguration gc)

This overrides Image.getCapabilities(gc) to get the capabilities of its 
surfaceManager. This means that BufferedImage objects that are accelerated may 
return a caps object that will indicate this acceleration. 


*java.awt.image.BufferedImage.getColorModel()*

public |java.awt.image.ColorModel| getColorModel()

Returns the ColorModel. 


    Returns: the ColorModel of this BufferedImage. 
*java.awt.image.BufferedImage.getData()*

public |java.awt.image.Raster| getData()

Returns the image as one large tile. The Raster returned is a copy of the image 
data is not updated if the image is changed. 


    Returns: a Raster that is a copy of the image data. 
*java.awt.image.BufferedImage.getData(Rectangle)*

public |java.awt.image.Raster| getData(java.awt.Rectangle rect)

Computes and returns an arbitrary region of the BufferedImage. The Raster 
returned is a copy of the image data and is not updated if the image is 
changed. 

    rect - the region of the BufferedImage to be returned. 

    Returns: a Raster that is a copy of the image data of the specified region of the 
             BufferedImage 
*java.awt.image.BufferedImage.getGraphics()*

public |java.awt.Graphics| getGraphics()

This method returns a (|java.awt.Graphics2D|) , but is here for backwards 
compatibility. createGraphics(|java.awt.image.BufferedImage|) is more 
convenient, since it is declared to return a Graphics2D. 


    Returns: a Graphics2D, which can be used to draw into this image. 
*java.awt.image.BufferedImage.getHeight()*

public int getHeight()

Returns the height of the BufferedImage. 


    Returns: the height of this BufferedImage 
*java.awt.image.BufferedImage.getHeight(ImageObserver)*

public int getHeight(java.awt.image.ImageObserver observer)

Returns the height of the BufferedImage. 

    observer - ignored 

    Returns: the height of this BufferedImage 
*java.awt.image.BufferedImage.getMinTileX()*

public int getMinTileX()

Returns the minimum tile index in the x direction. This is always zero. 


    Returns: the minimum tile index in the x direction. 
*java.awt.image.BufferedImage.getMinTileY()*

public int getMinTileY()

Returns the minimum tile index in the y direction. This is always zero. 


    Returns: the mininum tile index in the y direction. 
*java.awt.image.BufferedImage.getMinX()*

public int getMinX()

Returns the minimum x coordinate of this BufferedImage. This is always zero. 


    Returns: the minimum x coordinate of this BufferedImage. 
*java.awt.image.BufferedImage.getMinY()*

public int getMinY()

Returns the minimum y coordinate of this BufferedImage. This is always zero. 


    Returns: the minimum y coordinate of this BufferedImage. 
*java.awt.image.BufferedImage.getNumXTiles()*

public int getNumXTiles()

Returns the number of tiles in the x direction. This is always one. 


    Returns: the number of tiles in the x direction. 
*java.awt.image.BufferedImage.getNumYTiles()*

public int getNumYTiles()

Returns the number of tiles in the y direction. This is always one. 


    Returns: the number of tiles in the y direction. 
*java.awt.image.BufferedImage.getProperty(String)*

public |java.lang.Object| getProperty(java.lang.String name)

Returns a property of the image by name. 

    name - the property name 

    Returns: an Object that is the property referred to by the specified name. 
*java.awt.image.BufferedImage.getProperty(String,ImageObserver)*

public |java.lang.Object| getProperty(
  java.lang.String name,
  java.awt.image.ImageObserver observer)

Returns a property of the image by name. Individual property names are defined 
by the various image formats. If a property is not defined for a particular 
image, this method returns the UndefinedProperty field. If the properties for 
this image are not yet known, then this method returns null and the 
ImageObserver object is notified later. The property name "comment" should be 
used to store an optional comment that can be presented to the user as a 
description of the image, its source, or its author. 

    name - the property name 
    observer - the ImageObserver that receives notification regarding image information 

    Returns: an {@link Object} that is the property referred to by the specified name or 
             null if the properties of this image are not yet known. 
*java.awt.image.BufferedImage.getPropertyNames()*

public |java.lang.String| getPropertyNames()

Returns an array of names recognized by 
getProperty(String)(|java.awt.image.BufferedImage|) or null, if no property 
names are recognized. 


    Returns: a String array containing all of the property names that getProperty(String) 
             recognizes; or null if no property names are recognized. 
*java.awt.image.BufferedImage.getRaster()*

public |java.awt.image.WritableRaster| getRaster()

Returns the (|java.awt.image.WritableRaster|) . 


    Returns: the WriteableRaster of this BufferedImage. 
*java.awt.image.BufferedImage.getRGB(int,int)*

public int getRGB(
  int x,
  int y)

Returns an integer pixel in the default RGB color model (TYPE_INT_ARGB) and 
default sRGB colorspace. Color conversion takes place if this default model 
does not match the image ColorModel. There are only 8-bits of precision for 
each color component in the returned data when using this method. 



An ArrayOutOfBoundsException may be thrown if the coordinates are not in 
bounds. However, explicit bounds checking is not guaranteed. 

    x,&nbsp;y - the coordinates of the pixel from which to get the pixel in the default RGB 
       color model and sRGB color space 

    Returns: an integer pixel in the default RGB color model and default sRGB colorspace. 
*java.awt.image.BufferedImage.getRGB(int,int,int,int,int[],int,int)*

public int getRGB(
  int startX,
  int startY,
  int w,
  int h,
  int[] rgbArray,
  int offset,
  int scansize)

Returns an array of integer pixels in the default RGB color model 
(TYPE_INT_ARGB) and default sRGB color space, from a portion of the image data. 
Color conversion takes place if the default model does not match the image 
ColorModel. There are only 8-bits of precision for each color component in the 
returned data when using this method. With a specified coordinate (x,y) in the 
image, the ARGB pixel can be accessed in this way: 



pixel = rgbArray[offset + (y-startY)*scansize + (x-startX)]; 



An ArrayOutOfBoundsException may be thrown if the region is not in bounds. 
However, explicit bounds checking is not guaranteed. 

    startX,&nbsp;startY - the starting coordinates 
    w - width of region 
    h - height of region 
    rgbArray - if not null, the rgb pixels are written here 
    offset - offset into the rgbArray 
    scansize - scanline stride for the rgbArray 

    Returns: array of RGB pixels. 
*java.awt.image.BufferedImage.getSampleModel()*

public |java.awt.image.SampleModel| getSampleModel()

Returns the SampleModel associated with this BufferedImage. 


    Returns: the SampleModel of this BufferedImage. 
*java.awt.image.BufferedImage.getSource()*

public |java.awt.image.ImageProducer| getSource()

Returns the object that produces the pixels for the image. 


    Returns: the {@link ImageProducer} that is used to produce the pixels for this image. 
*java.awt.image.BufferedImage.getSources()*

public |java.util.Vector| getSources()

Returns a (|java.util.Vector|) of (|java.awt.image.RenderedImage|) objects that 
are the immediate sources, not the sources of these immediate sources, of image 
data for this BufferedImage. This method returns null if the BufferedImage has 
no information about its immediate sources. It returns an empty Vector if the 
BufferedImage has no immediate sources. 


    Returns: a Vector containing immediate sources of this BufferedImage object's image 
             date, or null if this BufferedImage has no information about its 
             immediate sources, or an empty Vector if this BufferedImage has no 
             immediate sources. 
*java.awt.image.BufferedImage.getSubimage(int,int,int,int)*

public |java.awt.image.BufferedImage| getSubimage(
  int x,
  int y,
  int w,
  int h)

Returns a subimage defined by a specified rectangular region. The returned 
BufferedImage shares the same data array as the original image. 

    x,&nbsp;y - the coordinates of the upper-left corner of the specified rectangular region 
    w - the width of the specified rectangular region 
    h - the height of the specified rectangular region 

    Returns: a BufferedImage that is the subimage of this BufferedImage. 
*java.awt.image.BufferedImage.getTile(int,int)*

public |java.awt.image.Raster| getTile(
  int tileX,
  int tileY)

Returns tile (tileX,tileY). Note that tileX and tileY are indices into the tile 
array, not pixel locations. The Raster that is returned is live, which means 
that it is updated if the image is changed. 

    tileX - the x index of the requested tile in the tile array 
    tileY - the y index of the requested tile in the tile array 

    Returns: a Raster that is the tile defined by the arguments tileX and tileY. 
*java.awt.image.BufferedImage.getTileGridXOffset()*

public int getTileGridXOffset()

Returns the x offset of the tile grid relative to the origin, For example, the 
x coordinate of the location of tile (0,0). This is always zero. 


    Returns: the x offset of the tile grid. 
*java.awt.image.BufferedImage.getTileGridYOffset()*

public int getTileGridYOffset()

Returns the y offset of the tile grid relative to the origin, For example, the 
y coordinate of the location of tile (0,0). This is always zero. 


    Returns: the y offset of the tile grid. 
*java.awt.image.BufferedImage.getTileHeight()*

public int getTileHeight()

Returns the tile height in pixels. 


    Returns: the tile height in pixels. 
*java.awt.image.BufferedImage.getTileWidth()*

public int getTileWidth()

Returns the tile width in pixels. 


    Returns: the tile width in pixels. 
*java.awt.image.BufferedImage.getTransparency()*

public int getTransparency()

Returns the transparency. Returns either OPAQUE, BITMASK, or TRANSLUCENT. 


    Returns: the transparency of this BufferedImage. 
*java.awt.image.BufferedImage.getType()*

public int getType()

Returns the image type. If it is not one of the known types, TYPE_CUSTOM is 
returned. 


    Returns: the image type of this BufferedImage. 
*java.awt.image.BufferedImage.getWidth()*

public int getWidth()

Returns the width of the BufferedImage. 


    Returns: the width of this BufferedImage 
*java.awt.image.BufferedImage.getWidth(ImageObserver)*

public int getWidth(java.awt.image.ImageObserver observer)

Returns the width of the BufferedImage. 

    observer - ignored 

    Returns: the width of this BufferedImage 
*java.awt.image.BufferedImage.getWritableTile(int,int)*

public |java.awt.image.WritableRaster| getWritableTile(
  int tileX,
  int tileY)

Checks out a tile for writing. All registered TileObservers are notified when a 
tile goes from having no writers to having one writer. 

    tileX - the x index of the tile 
    tileY - the y index of the tile 

    Returns: a WritableRaster that is the tile, indicated by the specified indices, to be 
             checked out for writing. 
*java.awt.image.BufferedImage.getWritableTileIndices()*

public |java.awt.Point| getWritableTileIndices()

Returns an array of (|java.awt.Point|) objects indicating which tiles are 
checked out for writing. Returns null if none are checked out. 


    Returns: a Point array that indicates the tiles that are checked out for writing, or 
             null if no tiles are checked out for writing. 
*java.awt.image.BufferedImage.hasTileWriters()*

public boolean hasTileWriters()

Returns whether or not any tile is checked out for writing. Semantically 
equivalent to 

(getWritableTileIndices() != null). 


    Returns: true if any tile is checked out for writing; false otherwise. 
*java.awt.image.BufferedImage.isAlphaPremultiplied()*

public boolean isAlphaPremultiplied()

Returns whether or not the alpha has been premultiplied. It returns false if 
there is no alpha. 


    Returns: true if the alpha has been premultiplied; false otherwise. 
*java.awt.image.BufferedImage.isTileWritable(int,int)*

public boolean isTileWritable(
  int tileX,
  int tileY)

Returns whether or not a tile is currently checked out for writing. 

    tileX - the x index of the tile. 
    tileY - the y index of the tile. 

    Returns: true if the tile specified by the specified indices is checked out for writing; 
             false otherwise. 
*java.awt.image.BufferedImage.releaseWritableTile(int,int)*

public void releaseWritableTile(
  int tileX,
  int tileY)

Relinquishes permission to write to a tile. If the caller continues to write to 
the tile, the results are undefined. Calls to this method should only appear in 
matching pairs with calls to getWritableTile(int, 
int)(|java.awt.image.BufferedImage|) . Any other leads to undefined results. 
All registered TileObservers are notified when a tile goes from having one 
writer to having no writers. 

    tileX - the x index of the tile 
    tileY - the y index of the tile 

*java.awt.image.BufferedImage.removeTileObserver(TileObserver)*

public void removeTileObserver(java.awt.image.TileObserver to)

Removes a tile observer. If the observer was not registered, nothing happens. 
If the observer was registered for multiple notifications, it is now registered 
for one fewer notification. 

    to - the specified TileObserver. 

*java.awt.image.BufferedImage.setData(Raster)*

public void setData(java.awt.image.Raster r)

Sets a rectangular region of the image to the contents of the specified Raster 
r, which is assumed to be in the same coordinate space as the BufferedImage. 
The operation is clipped to the bounds of the BufferedImage. 

    r - the specified Raster 

*java.awt.image.BufferedImage.setRGB(int,int,int)*

public synchronized void setRGB(
  int x,
  int y,
  int rgb)

Sets a pixel in this BufferedImage to the specified RGB value. The pixel is 
assumed to be in the default RGB color model, TYPE_INT_ARGB, and default sRGB 
color space. For images with an IndexColorModel, the index with the nearest 
color is chosen. 



An ArrayOutOfBoundsException may be thrown if the coordinates are not in 
bounds. However, explicit bounds checking is not guaranteed. 

    x,&nbsp;y - the coordinates of the pixel to set 
    rgb - the RGB value 

*java.awt.image.BufferedImage.setRGB(int,int,int,int,int[],int,int)*

public void setRGB(
  int startX,
  int startY,
  int w,
  int h,
  int[] rgbArray,
  int offset,
  int scansize)

Sets an array of integer pixels in the default RGB color model (TYPE_INT_ARGB) 
and default sRGB color space, into a portion of the image data. Color 
conversion takes place if the default model does not match the image 
ColorModel. There are only 8-bits of precision for each color component in the 
returned data when using this method. With a specified coordinate (x,y) in the 
this image, the ARGB pixel can be accessed in this way: 

pixel = rgbArray[offset + (y-startY)*scansize + (x-startX)]; 

WARNING: No dithering takes place. 



An ArrayOutOfBoundsException may be thrown if the region is not in bounds. 
However, explicit bounds checking is not guaranteed. 

    startX,&nbsp;startY - the starting coordinates 
    w - width of the region 
    h - height of the region 
    rgbArray - the rgb pixels 
    offset - offset into the rgbArray 
    scansize - scanline stride for the rgbArray 

*java.awt.image.BufferedImage.toString()*

public |java.lang.String| toString()

Returns a String representation of this BufferedImage object and its values. 


    Returns: a String representing this BufferedImage. 


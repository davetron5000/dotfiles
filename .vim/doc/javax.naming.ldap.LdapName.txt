*javax.naming.ldap.LdapName* *LdapName* This class represents a distinguished na

public class LdapName
  extends    |java.lang.Object|
  implements |javax.naming.Name|

|javax.naming.ldap.LdapName_Description|
|javax.naming.ldap.LdapName_Fields|
|javax.naming.ldap.LdapName_Constructors|
|javax.naming.ldap.LdapName_Methods|

================================================================================

*javax.naming.ldap.LdapName_Constructors*
|javax.naming.ldap.LdapName(List)|Constructs an LDAP name given its parsed RDN 
|javax.naming.ldap.LdapName(String)|Constructs an LDAP name from the given dist

*javax.naming.ldap.LdapName_Methods*
|javax.naming.ldap.LdapName.add(int,Rdn)|Adds a single RDN at a specified posit
|javax.naming.ldap.LdapName.add(int,String)|Adds a single component at a specif
|javax.naming.ldap.LdapName.add(Rdn)|Adds a single RDN to the end of this LDAP 
|javax.naming.ldap.LdapName.add(String)|Adds a single component to the end of t
|javax.naming.ldap.LdapName.addAll(int,List)|Adds the RDNs of a name -- in orde
|javax.naming.ldap.LdapName.addAll(int,Name)|Adds the components of a name -- i
|javax.naming.ldap.LdapName.addAll(List)|Adds the RDNs of a name -- in order --
|javax.naming.ldap.LdapName.addAll(Name)|Adds the components of a name -- in or
|javax.naming.ldap.LdapName.clone()|Generates a new copy of this name.
|javax.naming.ldap.LdapName.compareTo(Object)|Compares this LdapName with the s
|javax.naming.ldap.LdapName.endsWith(List)|Determines whether the specified RDN
|javax.naming.ldap.LdapName.endsWith(Name)|Determines whether this LDAP name en
|javax.naming.ldap.LdapName.equals(Object)|Determines whether two LDAP names ar
|javax.naming.ldap.LdapName.get(int)|Retrieves a component of this LDAP name as
|javax.naming.ldap.LdapName.getAll()|Retrieves the components of this name as a
|javax.naming.ldap.LdapName.getPrefix(int)|Creates a name whose components cons
|javax.naming.ldap.LdapName.getRdn(int)|Retrieves an RDN of this LDAP name as a
|javax.naming.ldap.LdapName.getRdns()|Retrieves the list of relative distinguis
|javax.naming.ldap.LdapName.getSuffix(int)|Creates a name whose components cons
|javax.naming.ldap.LdapName.hashCode()|Computes the hash code of this LDAP name
|javax.naming.ldap.LdapName.isEmpty()|Determines whether this LDAP name is empt
|javax.naming.ldap.LdapName.remove(int)|Removes a component from this LDAP name
|javax.naming.ldap.LdapName.size()|Retrieves the number of components in this L
|javax.naming.ldap.LdapName.startsWith(List)|Determines whether the specified R
|javax.naming.ldap.LdapName.startsWith(Name)|Determines whether this LDAP name 
|javax.naming.ldap.LdapName.toString()|Returns a string representation of this 

*javax.naming.ldap.LdapName_Description*

This class represents a distinguished name as specified by RFC 2253. A 
distinguished name, or DN, is composed of an ordered list of components called 
relative distinguished names, or RDNs. Details of a DN's syntax are described 
in RFC 2253. 

This class resolves a few ambiguities found in RFC 2253 as follows: 

RFC 2253 leaves the term "whitespace" undefined. The ASCII space character 0x20 
(" ") is used in its place. Whitespace is allowed on either side of ',', ';', 
'=', and '+'. Such whitespace is accepted but not generated by this code, and 
is ignored when comparing names. AttributeValue strings containing '=' or 
non-leading '#' characters (unescaped) are accepted. 

String names passed to LdapName or returned by it use the full Unicode 
character set. They may also contain characters encoded into UTF-8 with each 
octet represented by a three-character substring such as "\\B4". They may not, 
however, contain characters encoded into UTF-8 with each octet represented by a 
single character in the string: the meaning would be ambiguous. 

LdapName will properly parse all valid names, but does not attempt to detect 
all possible violations when parsing invalid names. It is "generous" in 
accepting invalid names. The "validity" of a name is determined ultimately when 
it is supplied to an LDAP server, which may accept or reject the name based on 
factors such as its schema information and interoperability considerations. 

When names are tested for equality, attribute types, both binary and string 
values, are case-insensitive. String values with different but equivalent usage 
of quoting, escaping, or UTF8-hex-encoding are considered equal. The order of 
components in multi-valued RDNs (such as "ou=Sales+cn=Bob") is not significant. 

The components of a LDAP name, that is, RDNs, are numbered. The indexes of a 
LDAP name with n RDNs range from 0 to n-1. This range may be written as [0,n). 
The right most RDN is at index 0, and the left most RDN is at index n-1. For 
example, the distinguished name: "CN=Steve Kille, O=Isode Limited, C=GB" is 
numbered in the following sequence ranging from 0 to 2: {C=GB, O=Isode Limited, 
CN=Steve Kille}. An empty LDAP name is represented by an empty RDN list. 

Concurrent multithreaded read-only access of an instance of LdapName need not 
be synchronized. 

Unless otherwise noted, the behavior of passing a null argument to a 
constructor or method in this class will cause a NullPointerException to be 
thrown. 


*javax.naming.ldap.LdapName(List)*

public LdapName(java.util.List rdns)

Constructs an LDAP name given its parsed RDN components. 

The indexing of RDNs in the list follows the numbering of RDNs described in the 
class description. 

    rdns - The non-null list of Rdns forming this LDAP name. 

*javax.naming.ldap.LdapName(String)*

public LdapName(java.lang.String name)
  throws |javax.naming.InvalidNameException|
         
Constructs an LDAP name from the given distinguished name. 

    name - This is a non-null distinguished name formatted according to the rules defined 
       in RFC 2253. 

*javax.naming.ldap.LdapName.add(int,Rdn)*

public |javax.naming.Name| add(
  int posn,
  javax.naming.ldap.Rdn comp)

Adds a single RDN at a specified position within this LDAP name. RDNs of this 
LDAP name at or after the index (if any) of the new RDN are shifted up by one 
(away from index 0) to accommodate the new RDN. 

    comp - The non-null RDN to add. 
    posn - The index at which to add the new RDN. Must be in the range [0,size()]. 

    Returns: The updated LdapName, not a new instance. Cannot be null. 
*javax.naming.ldap.LdapName.add(int,String)*

public |javax.naming.Name| add(
  int posn,
  java.lang.String comp)
  throws |javax.naming.InvalidNameException|
         
Adds a single component at a specified position within this LDAP name. 
Components of this LDAP name at or after the index (if any) of the new 
component are shifted up by one (away from index 0) to accommodate the new 
component. 

    comp - The non-null component to add. 
    posn - The index at which to add the new component. Must be in the range [0,size()]. 

    Returns: The updated LdapName, not a new instance. Cannot be null. 
*javax.naming.ldap.LdapName.add(Rdn)*

public |javax.naming.Name| add(javax.naming.ldap.Rdn comp)

Adds a single RDN to the end of this LDAP name. 

    comp - The non-null RDN to add. 

    Returns: The updated LdapName, not a new instance. Cannot be null. 
*javax.naming.ldap.LdapName.add(String)*

public |javax.naming.Name| add(java.lang.String comp)
  throws |javax.naming.InvalidNameException|
         
Adds a single component to the end of this LDAP name. 

    comp - The non-null component to add. 

    Returns: The updated LdapName, not a new instance. Cannot be null. 
*javax.naming.ldap.LdapName.addAll(int,List)*

public |javax.naming.Name| addAll(
  int posn,
  java.util.List suffixRdns)

Adds the RDNs of a name -- in order -- at a specified position within this 
name. RDNs of this LDAP name at or after the index (if any) of the first new 
RDN are shifted up (away from index 0) to accomodate the new RDNs. 

    suffixRdns - The non-null suffix Rdns to add. 
    posn - The index at which to add the suffix RDNs. Must be in the range [0,size()]. 

    Returns: The updated name (not a new instance). 
*javax.naming.ldap.LdapName.addAll(int,Name)*

public |javax.naming.Name| addAll(
  int posn,
  javax.naming.Name suffix)
  throws |javax.naming.InvalidNameException|
         
Adds the components of a name -- in order -- at a specified position within 
this name. Components of this LDAP name at or after the index (if any) of the 
first new component are shifted up (away from index 0) to accomodate the new 
components. 

    suffix - The non-null components to add. 
    posn - The index at which to add the new component. Must be in the range [0,size()]. 

    Returns: The updated name (not a new instance). 
*javax.naming.ldap.LdapName.addAll(List)*

public |javax.naming.Name| addAll(java.util.List suffixRdns)

Adds the RDNs of a name -- in order -- to the end of this name. 

    suffixRdns - The non-null suffix Rdns to add. 

    Returns: The updated name (not a new instance). 
*javax.naming.ldap.LdapName.addAll(Name)*

public |javax.naming.Name| addAll(javax.naming.Name suffix)
  throws |javax.naming.InvalidNameException|
         
Adds the components of a name -- in order -- to the end of this name. 

    suffix - The non-null components to add. 

    Returns: The updated name (not a new instance). 
*javax.naming.ldap.LdapName.clone()*

public |java.lang.Object| clone()

Generates a new copy of this name. Subsequent changes to the components of this 
name will not affect the new copy, and vice versa. 


    Returns: A copy of the this LDAP name. 
*javax.naming.ldap.LdapName.compareTo(Object)*

public int compareTo(java.lang.Object obj)

Compares this LdapName with the specified Object for order. Returns a negative 
integer, zero, or a positive integer as this Name is less than, equal to, or 
greater than the given Object. 

If obj is null or not an instance of LdapName, ClassCastException is thrown. 

Ordering of LDAP names follows the lexicographical rules for string comparison, 
with the extension that this applies to all the RDNs in the LDAP name. All the 
RDNs are lined up in their specified order and compared lexicographically. See 
Rdn.compareTo(Object obj)(|javax.naming.ldap.Rdn|) for RDN comparison rules. 

If this LDAP name is lexicographically lesser than obj, a negative number is 
returned. If this LDAP name is lexicographically greater than obj, a positive 
number is returned. 

    obj - The non-null LdapName instance to compare against. 

    Returns: A negative integer, zero, or a positive integer as this Name is less than, 
             equal to, or greater than the given obj. 
*javax.naming.ldap.LdapName.endsWith(List)*

public boolean endsWith(java.util.List rdns)

Determines whether the specified RDN sequence forms a suffix of this LDAP name. 
Returns true if this LdapName is at least as long as rdns, and for every 
position p in the range [size() - rdns.size(), size()) the component getRdn(p) 
matches rdns.get(p). Returns false otherwise. If rdns is null, false is 
returned. 

    rdns - The sequence of Rdns to check. 

    Returns: true if rdns form a suffix of this LDAP name, false otherwise. 
*javax.naming.ldap.LdapName.endsWith(Name)*

public boolean endsWith(javax.naming.Name n)

Determines whether this LDAP name ends with a specified LDAP name suffix. A 
name n is a suffix if it is equal to getSuffix(size()-n.size())--in other words 
this LDAP name ends with 'n'. If n is null or not a RFC2253 formatted name as 
described in the class description, false is returned. 

    n - The LDAP name to check. 

    Returns: true if n is a suffix of this name, false otherwise. 
*javax.naming.ldap.LdapName.equals(Object)*

public boolean equals(java.lang.Object obj)

Determines whether two LDAP names are equal. If obj is null or not an LDAP 
name, false is returned. 

Two LDAP names are equal if each RDN in one is equal to the corresponding RDN 
in the other. This implies both have the same number of RDNs, and each RDN's 
equals() test against the corresponding RDN in the other name returns true. See 
(|javax.naming.ldap.Rdn|) for a definition of RDN equality. 

    obj - The possibly null object to compare against. 

    Returns: true if obj is equal to this LDAP name, false otherwise. 
*javax.naming.ldap.LdapName.get(int)*

public |java.lang.String| get(int posn)

Retrieves a component of this LDAP name as a string. 

    posn - The 0-based index of the component to retrieve. Must be in the range 
       [0,size()). 

    Returns: The non-null component at index posn. 
*javax.naming.ldap.LdapName.getAll()*

public |java.util.Enumeration| getAll()

Retrieves the components of this name as an enumeration of strings. The effect 
of updates to this name on this enumeration is undefined. If the name has zero 
components, an empty (non-null) enumeration is returned. The order of the 
components returned by the enumeration is same as the order in which the 
components are numbered as described in the class description. 


    Returns: A non-null enumeration of the components of this LDAP name. Each element of the 
             enumeration is of class String. 
*javax.naming.ldap.LdapName.getPrefix(int)*

public |javax.naming.Name| getPrefix(int posn)

Creates a name whose components consist of a prefix of the components of this 
LDAP name. Subsequent changes to this name will not affect the name that is 
returned and vice versa. 

    posn - The 0-based index of the component at which to stop. Must be in the range 
       [0,size()]. 

    Returns: An instance of LdapName consisting of the components at indexes in the range 
             [0,posn). If posn is zero, an empty LDAP name is returned. 
*javax.naming.ldap.LdapName.getRdn(int)*

public |javax.naming.ldap.Rdn| getRdn(int posn)

Retrieves an RDN of this LDAP name as an Rdn. 

    posn - The 0-based index of the RDN to retrieve. Must be in the range [0,size()). 

    Returns: The non-null RDN at index posn. 
*javax.naming.ldap.LdapName.getRdns()*

public |java.util.List| getRdns()

Retrieves the list of relative distinguished names. The contents of the list 
are unmodifiable. The indexing of RDNs in the returned list follows the 
numbering of RDNs as described in the class description. If the name has zero 
components, an empty list is returned. 


    Returns: The name as a list of RDNs which are instances of the class {@link Rdn Rdn}. 
*javax.naming.ldap.LdapName.getSuffix(int)*

public |javax.naming.Name| getSuffix(int posn)

Creates a name whose components consist of a suffix of the components in this 
LDAP name. Subsequent changes to this name do not affect the name that is 
returned and vice versa. 

    posn - The 0-based index of the component at which to start. Must be in the range 
       [0,size()]. 

    Returns: An instance of LdapName consisting of the components at indexes in the range 
             [posn,size()). If posn is equal to size(), an empty LDAP name is 
             returned. 
*javax.naming.ldap.LdapName.hashCode()*

public int hashCode()

Computes the hash code of this LDAP name. The hash code is the sum of the hash 
codes of individual RDNs of this name. 


    Returns: An int representing the hash code of this name. 
*javax.naming.ldap.LdapName.isEmpty()*

public boolean isEmpty()

Determines whether this LDAP name is empty. An empty name is one with zero 
components. 


    Returns: true if this LDAP name is empty, false otherwise. 
*javax.naming.ldap.LdapName.remove(int)*

public |java.lang.Object| remove(int posn)
  throws |javax.naming.InvalidNameException|
         
Removes a component from this LDAP name. The component of this name at the 
specified position is removed. Components with indexes greater than this 
position (if any) are shifted down (toward index 0) by one. 

    posn - The index of the component to remove. Must be in the range [0,size()). 

    Returns: The component removed (a String). 
*javax.naming.ldap.LdapName.size()*

public int size()

Retrieves the number of components in this LDAP name. 


    Returns: The non-negative number of components in this LDAP name. 
*javax.naming.ldap.LdapName.startsWith(List)*

public boolean startsWith(java.util.List rdns)

Determines whether the specified RDN sequence forms a prefix of this LDAP name. 
Returns true if this LdapName is at least as long as rdns, and for every 
position p in the range [0, rdns.size()) the component getRdn(p) matches 
rdns.get(p). Returns false otherwise. If rdns is null, false is returned. 

    rdns - The sequence of Rdns to check. 

    Returns: true if rdns form a prefix of this LDAP name, false otherwise. 
*javax.naming.ldap.LdapName.startsWith(Name)*

public boolean startsWith(javax.naming.Name n)

Determines whether this LDAP name starts with a specified LDAP name prefix. A 
name n is a prefix if it is equal to getPrefix(n.size())--in other words this 
LDAP name starts with 'n'. If n is null or not a RFC2253 formatted name as 
described in the class description, false is returned. 

    n - The LDAP name to check. 

    Returns: true if n is a prefix of this LDAP name, false otherwise. 
*javax.naming.ldap.LdapName.toString()*

public |java.lang.String| toString()

Returns a string representation of this LDAP name in a format defined by RFC 
2253 and described in the class description. If the name has zero components an 
empty string is returned. 


    Returns: The string representation of the LdapName. 


*java.awt.event.FocusEvent* *FocusEvent* A low-level event which indicates that 

public class FocusEvent
  extends    |java.awt.event.ComponentEvent|

|java.awt.event.FocusEvent_Description|
|java.awt.event.FocusEvent_Fields|
|java.awt.event.FocusEvent_Constructors|
|java.awt.event.FocusEvent_Methods|

================================================================================

*java.awt.event.FocusEvent_Fields*
|int_java.awt.event.FocusEvent.FOCUS_FIRST|
|int_java.awt.event.FocusEvent.FOCUS_GAINED|
|int_java.awt.event.FocusEvent.FOCUS_LAST|
|int_java.awt.event.FocusEvent.FOCUS_LOST|

*java.awt.event.FocusEvent_Constructors*
|java.awt.event.FocusEvent(Component,int)|Constructs a FocusEvent object and id
|java.awt.event.FocusEvent(Component,int,boolean)|Constructs a FocusEvent objec
|java.awt.event.FocusEvent(Component,int,boolean,Component)|Constructs a FocusE

*java.awt.event.FocusEvent_Methods*
|java.awt.event.FocusEvent.getOppositeComponent()|Returns the other Component i
|java.awt.event.FocusEvent.isTemporary()|Identifies the focus change event as t
|java.awt.event.FocusEvent.paramString()|Returns a parameter string identifying

*java.awt.event.FocusEvent_Description*

A low-level event which indicates that a Component has gained or lost the input 
focus. This low-level event is generated by a Component (such as a TextField). 
The event is passed to every FocusListener or FocusAdapter object which 
registered to receive such events using the Component's addFocusListener 
method. ( FocusAdapter objects implement the FocusListener interface.) Each 
such listener object gets this FocusEvent when the event occurs. 

There are two levels of focus events: permanent and temporary. Permanent focus 
change events occur when focus is directly moved from one Component to another, 
such as through a call to requestFocus() or as the user uses the TAB key to 
traverse Components. Temporary focus change events occur when focus is 
temporarily lost for a Component as the indirect result of another operation, 
such as Window deactivation or a Scrollbar drag. In this case, the original 
focus state will automatically be restored once that operation is finished, or, 
for the case of Window deactivation, when the Window is reactivated. Both 
permanent and temporary focus events are delivered using the FOCUS_GAINED and 
FOCUS_LOST event ids; the level may be distinguished in the event using the 
isTemporary() method. 


*int_java.awt.event.FocusEvent.FOCUS_FIRST*

A low-level event which indicates that a Component has gained or lost the input 
focus. This low-level event is generated by a Component (such as a TextField). 
The event is passed to every FocusListener or FocusAdapter object which 
registered to receive such events using the Component's addFocusListener 
method. ( FocusAdapter objects implement the FocusListener interface.) Each 
such listener object gets this FocusEvent when the event occurs. 

There are two levels of focus events: permanent and temporary. Permanent focus 
change events occur when focus is directly moved from one Component to another, 
such as through a call to requestFocus() or as the user uses the TAB key to 
traverse Components. Temporary focus change events occur when focus is 
temporarily lost for a Component as the indirect result of another operation, 
such as Window deactivation or a Scrollbar drag. In this case, the original 
focus state will automatically be restored once that operation is finished, or, 
for the case of Window deactivation, when the Window is reactivated. Both 
permanent and temporary focus events are delivered using the FOCUS_GAINED and 
FOCUS_LOST event ids; the level may be distinguished in the event using the 
isTemporary() method. 


*int_java.awt.event.FocusEvent.FOCUS_GAINED*

A low-level event which indicates that a Component has gained or lost the input 
focus. This low-level event is generated by a Component (such as a TextField). 
The event is passed to every FocusListener or FocusAdapter object which 
registered to receive such events using the Component's addFocusListener 
method. ( FocusAdapter objects implement the FocusListener interface.) Each 
such listener object gets this FocusEvent when the event occurs. 

There are two levels of focus events: permanent and temporary. Permanent focus 
change events occur when focus is directly moved from one Component to another, 
such as through a call to requestFocus() or as the user uses the TAB key to 
traverse Components. Temporary focus change events occur when focus is 
temporarily lost for a Component as the indirect result of another operation, 
such as Window deactivation or a Scrollbar drag. In this case, the original 
focus state will automatically be restored once that operation is finished, or, 
for the case of Window deactivation, when the Window is reactivated. Both 
permanent and temporary focus events are delivered using the FOCUS_GAINED and 
FOCUS_LOST event ids; the level may be distinguished in the event using the 
isTemporary() method. 


*int_java.awt.event.FocusEvent.FOCUS_LAST*

A low-level event which indicates that a Component has gained or lost the input 
focus. This low-level event is generated by a Component (such as a TextField). 
The event is passed to every FocusListener or FocusAdapter object which 
registered to receive such events using the Component's addFocusListener 
method. ( FocusAdapter objects implement the FocusListener interface.) Each 
such listener object gets this FocusEvent when the event occurs. 

There are two levels of focus events: permanent and temporary. Permanent focus 
change events occur when focus is directly moved from one Component to another, 
such as through a call to requestFocus() or as the user uses the TAB key to 
traverse Components. Temporary focus change events occur when focus is 
temporarily lost for a Component as the indirect result of another operation, 
such as Window deactivation or a Scrollbar drag. In this case, the original 
focus state will automatically be restored once that operation is finished, or, 
for the case of Window deactivation, when the Window is reactivated. Both 
permanent and temporary focus events are delivered using the FOCUS_GAINED and 
FOCUS_LOST event ids; the level may be distinguished in the event using the 
isTemporary() method. 


*int_java.awt.event.FocusEvent.FOCUS_LOST*

A low-level event which indicates that a Component has gained or lost the input 
focus. This low-level event is generated by a Component (such as a TextField). 
The event is passed to every FocusListener or FocusAdapter object which 
registered to receive such events using the Component's addFocusListener 
method. ( FocusAdapter objects implement the FocusListener interface.) Each 
such listener object gets this FocusEvent when the event occurs. 

There are two levels of focus events: permanent and temporary. Permanent focus 
change events occur when focus is directly moved from one Component to another, 
such as through a call to requestFocus() or as the user uses the TAB key to 
traverse Components. Temporary focus change events occur when focus is 
temporarily lost for a Component as the indirect result of another operation, 
such as Window deactivation or a Scrollbar drag. In this case, the original 
focus state will automatically be restored once that operation is finished, or, 
for the case of Window deactivation, when the Window is reactivated. Both 
permanent and temporary focus events are delivered using the FOCUS_GAINED and 
FOCUS_LOST event ids; the level may be distinguished in the event using the 
isTemporary() method. 



*java.awt.event.FocusEvent(Component,int)*

public FocusEvent(
  java.awt.Component source,
  int id)

Constructs a FocusEvent object and identifies it as a permanent change in 
focus. Note that passing in an invalid id results in unspecified behavior. This 
method throws an IllegalArgumentException if source is null. 

    source - the Component that originated the event 
    id - an integer indicating the type of event 

*java.awt.event.FocusEvent(Component,int,boolean)*

public FocusEvent(
  java.awt.Component source,
  int id,
  boolean temporary)

Constructs a FocusEvent object and identifies whether or not the change is 
temporary. Note that passing in an invalid id results in unspecified behavior. 
This method throws an IllegalArgumentException if source is null. 

    source - the Component that originated the event 
    id - an integer indicating the type of event 
    temporary - true if the focus change is temporary; false otherwise 

*java.awt.event.FocusEvent(Component,int,boolean,Component)*

public FocusEvent(
  java.awt.Component source,
  int id,
  boolean temporary,
  java.awt.Component opposite)

Constructs a FocusEvent object with the specified temporary state and opposite 
Component. The opposite Component is the other Component involved in this focus 
change. For a FOCUS_GAINED event, this is the Component that lost focus. For a 
FOCUS_LOST event, this is the Component that gained focus. If this focus change 
occurs with a native application, with a Java application in a different VM, or 
with no other Component, then the opposite Component is null. Note that passing 
in an invalid id results in unspecified behavior. This method throws an 
IllegalArgumentException if source is null. 

    source - the Component that originated the event 
    id - FOCUS_GAINED or FOCUS_LOST 
    temporary - true if the focus change is temporary; false otherwise 
    opposite - the other Component involved in the focus change, or null 

*java.awt.event.FocusEvent.getOppositeComponent()*

public |java.awt.Component| getOppositeComponent()

Returns the other Component involved in this focus change. For a FOCUS_GAINED 
event, this is the Component that lost focus. For a FOCUS_LOST event, this is 
the Component that gained focus. If this focus change occurs with a native 
application, with a Java application in a different VM or context, or with no 
other Component, then null is returned. 


    Returns: the other Component involved in the focus change, or null 
*java.awt.event.FocusEvent.isTemporary()*

public boolean isTemporary()

Identifies the focus change event as temporary or permanent. 


    Returns: true if the focus change is temporary; false otherwise 
*java.awt.event.FocusEvent.paramString()*

public |java.lang.String| paramString()

Returns a parameter string identifying this event. This method is useful for 
event-logging and for debugging. 


    Returns: a string identifying the event and its attributes 


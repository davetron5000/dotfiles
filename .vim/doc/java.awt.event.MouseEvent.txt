*java.awt.event.MouseEvent* *MouseEvent* An event which indicates that a mouse action occurred in a component.

public class MouseEvent
  extends    |java.awt.event.InputEvent|

|java.awt.event.MouseEvent_Description|
|java.awt.event.MouseEvent_Fields|
|java.awt.event.MouseEvent_Constructors|
|java.awt.event.MouseEvent_Methods|

====================================================================================================================================================================================

*java.awt.event.MouseEvent_Fields*
|int_java.awt.event.MouseEvent.BUTTON1|
|int_java.awt.event.MouseEvent.BUTTON2|
|int_java.awt.event.MouseEvent.BUTTON3|
|int_java.awt.event.MouseEvent.MOUSE_CLICKED|
|int_java.awt.event.MouseEvent.MOUSE_DRAGGED|
|int_java.awt.event.MouseEvent.MOUSE_ENTERED|
|int_java.awt.event.MouseEvent.MOUSE_EXITED|
|int_java.awt.event.MouseEvent.MOUSE_FIRST|
|int_java.awt.event.MouseEvent.MOUSE_LAST|
|int_java.awt.event.MouseEvent.MOUSE_MOVED|
|int_java.awt.event.MouseEvent.MOUSE_PRESSED|
|int_java.awt.event.MouseEvent.MOUSE_RELEASED|
|int_java.awt.event.MouseEvent.MOUSE_WHEEL|
|int_java.awt.event.MouseEvent.NOBUTTON|

*java.awt.event.MouseEvent_Constructors*
|java.awt.event.MouseEvent(Component,int,long,int,int,int,int,boolean)|Constructs a MouseEvent object with the  specified source component,  type, modifiers, coordinates, and clic
|java.awt.event.MouseEvent(Component,int,long,int,int,int,int,boolean,int)|Constructs a MouseEvent object with the  specified source component,  type, modifiers, coordinates, and 

*java.awt.event.MouseEvent_Methods*
|java.awt.event.MouseEvent.getButton()|Returns which, if any, of the mouse buttons has changed state.
|java.awt.event.MouseEvent.getClickCount()|Returns the number of mouse clicks associated with this event.
|java.awt.event.MouseEvent.getMouseModifiersText(int)|Returns a String describing the modifier keys and  mouse buttons that were down during the event, such as "Shift",  or "Ctrl+
|java.awt.event.MouseEvent.getPoint()|Returns the x,y position of the event relative to the source component.
|java.awt.event.MouseEvent.getX()|Returns the horizontal x position of the event relative to the   source component.
|java.awt.event.MouseEvent.getY()|Returns the vertical y position of the event relative to the  source component.
|java.awt.event.MouseEvent.isPopupTrigger()|Returns whether or not this mouse event is the popup menu  trigger event for the platform.
|java.awt.event.MouseEvent.paramString()|Returns a parameter string identifying this event.
|java.awt.event.MouseEvent.translatePoint(int,int)|Translates the event's coordinates to a new position  by adding specified x (horizontal) and y  (vertical) offsets.

*java.awt.event.MouseEvent_Description*

An event which indicates that a mouse action occurred in a component. A mouse action is considered to occur in a particular component if and only if the mouse cursor is over the 
unobscured part of the component's bounds when the action happens. Component bounds can be obscurred by the visible component's children or by a menu or by a top-level window. 
This event is used both for mouse events (click, enter, exit) and mouse motion events (moves and drags). 

This low-level event is generated by a component object for: 

Mouse Events 

a mouse button is pressed a mouse button is released a mouse button is clicked (pressed and released) the mouse cursor enters the unobscured part of component's geometry the mouse 
cursor exits the unobscured part of component's geometry 

Mouse Motion Events 

the mouse is moved the mouse is dragged 



A MouseEvent object is passed to every MouseListener or MouseAdapter object which is registered to receive the "interesting" mouse events using the component's addMouseListener 
method. (MouseAdapter objects implement the MouseListener interface.) Each such listener object gets a MouseEvent containing the mouse event. 

A MouseEvent object is also passed to every MouseMotionListener or MouseMotionAdapter object which is registered to receive mouse motion events using the component's 
addMouseMotionListener method. (MouseMotionAdapter objects implement the MouseMotionListener interface.) Each such listener object gets a MouseEvent containing the mouse motion 
event. 

When a mouse button is clicked, events are generated and sent to the registered MouseListeners. The state of modal keys can be retrieved using (|java.awt.event.InputEvent|) and 
(|java.awt.event.InputEvent|) . The button mask returned by (|java.awt.event.InputEvent|) reflects only the button that changed state, not the current state of all buttons. (Note: 
Due to overlap in the values of ALT_MASK/BUTTON2_MASK and META_MASK/BUTTON3_MASK, this is not always true for mouse events involving modifier keys). To get the state of all 
buttons and modifier keys, use (|java.awt.event.InputEvent|) . The button which has changed state is returned by (|java.awt.event.MouseEvent|) For example, if the first mouse 
button is pressed, events are sent in the following order: 

id modifiers button MOUSE_PRESSED: BUTTON1_MASK BUTTON1 MOUSE_RELEASED: BUTTON1_MASK BUTTON1 MOUSE_CLICKED: BUTTON1_MASK BUTTON1 

When multiple mouse buttons are pressed, each press, release, and click results in a separate event. 

For example, if the user presses button 1 followed by button 2, and then releases them in the same order, the following sequence of events is generated: 

id modifiers button MOUSE_PRESSED: BUTTON1_MASK BUTTON1 MOUSE_PRESSED: BUTTON2_MASK BUTTON2 MOUSE_RELEASED: BUTTON1_MASK BUTTON1 MOUSE_CLICKED: BUTTON1_MASK BUTTON1 
MOUSE_RELEASED: BUTTON2_MASK BUTTON2 MOUSE_CLICKED: BUTTON2_MASK BUTTON2 

If button 2 is released first, the MOUSE_RELEASED/MOUSE_CLICKED pair for BUTTON2_MASK arrives first, followed by the pair for BUTTON1_MASK. 

MOUSE_DRAGGED events are delivered to the Component in which the mouse button was pressed until the mouse button is released (regardless of whether the mouse position is within 
the bounds of the Component). Due to platform-dependent Dragimplementations, MOUSE_DRAGGED events may not be delivered during a native Dragoperation. 

In a multi-screen environment mouse drag events are delivered to the Component even if the mouse position is outside the bounds of the GraphicsConfiguration associated with that 
Component. However, the reported position for mouse drag events in this case may differ from the actual mouse position: 

In a multi-screen environment without a virtual device: 

The reported coordinates for mouse drag events are clipped to fit within the bounds of the GraphicsConfiguration associated with the Component. In a multi-screen environment with 
a virtual device: 

The reported coordinates for mouse drag events are clipped to fit within the bounds of the virtual device associated with the Component. 



*int_java.awt.event.MouseEvent.BUTTON1*

Indicates mouse button #1; used by (|java.awt.event.MouseEvent|) . 


*int_java.awt.event.MouseEvent.BUTTON2*

Indicates mouse button #2; used by (|java.awt.event.MouseEvent|) . 


*int_java.awt.event.MouseEvent.BUTTON3*

Indicates mouse button #3; used by (|java.awt.event.MouseEvent|) . 


*int_java.awt.event.MouseEvent.MOUSE_CLICKED*

The "mouse clicked" event. This MouseEvent occurs when a mouse button is pressed and released. 


*int_java.awt.event.MouseEvent.MOUSE_DRAGGED*

The "mouse dragged" event. This MouseEvent occurs when the mouse position changes while a mouse button is pressed. 


*int_java.awt.event.MouseEvent.MOUSE_ENTERED*

The "mouse entered" event. This MouseEvent occurs when the mouse cursor enters the unobscured part of component's geometry. 


*int_java.awt.event.MouseEvent.MOUSE_EXITED*

The "mouse exited" event. This MouseEvent occurs when the mouse cursor exits the unobscured part of component's geometry. 


*int_java.awt.event.MouseEvent.MOUSE_FIRST*

The first number in the range of ids used for mouse events. 


*int_java.awt.event.MouseEvent.MOUSE_LAST*

The last number in the range of ids used for mouse events. 


*int_java.awt.event.MouseEvent.MOUSE_MOVED*

The "mouse moved" event. This MouseEvent occurs when the mouse position changes. 


*int_java.awt.event.MouseEvent.MOUSE_PRESSED*

The "mouse pressed" event. This MouseEvent occurs when a mouse button is pushed down. 


*int_java.awt.event.MouseEvent.MOUSE_RELEASED*

The "mouse released" event. This MouseEvent occurs when a mouse button is let up. 


*int_java.awt.event.MouseEvent.MOUSE_WHEEL*

The "mouse wheel" event. This is the only MouseWheelEvent. It occurs when a mouse equipped with a wheel has its wheel rotated. 


*int_java.awt.event.MouseEvent.NOBUTTON*

Indicates no mouse buttons; used by (|java.awt.event.MouseEvent|) . 



*java.awt.event.MouseEvent(Component,int,long,int,int,int,int,boolean)*

public MouseEvent(
  java.awt.Component source,
  int id,
  long when,
  int modifiers,
  int x,
  int y,
  int clickCount,
  boolean popupTrigger)

Constructs a MouseEvent object with the specified source component, type, modifiers, coordinates, and click count. Note that passing in an invalid id results in unspecified 
behavior. This method throws an IllegalArgumentException if source is null. 

    source - the Component that originated the event 
    id - the integer that identifies the event 
    when - a long int that gives the time the event occurred 
    modifiers - the modifier keys down during event (e.g. shift, ctrl, alt, meta) Either extended _DOWN_MASK or old _MASK modifiers should be used, but both models should not be mixed in one 
       event. Use of the extended modifiers is preferred. 
    x - the horizontal x coordinate for the mouse location 
    y - the vertical y coordinate for the mouse location 
    clickCount - the number of mouse clicks associated with event 
    popupTrigger - a boolean, true if this event is a trigger for a popup menu 

*java.awt.event.MouseEvent(Component,int,long,int,int,int,int,boolean,int)*

public MouseEvent(
  java.awt.Component source,
  int id,
  long when,
  int modifiers,
  int x,
  int y,
  int clickCount,
  boolean popupTrigger,
  int button)

Constructs a MouseEvent object with the specified source component, type, modifiers, coordinates, and click count. 

Note that passing in an invalid id results in unspecified behavior. Creating an invalid event (such as by using more than one of the old _MASKs, or modifier/button values which 
don't match) results in unspecified behavior. This method throws an IllegalArgumentException if source is null. 

    source - the Component that originated the event 
    id - the integer that identifies the event 
    when - a long int that gives the time the event occurred 
    modifiers - the modifier keys down during event (e.g. shift, ctrl, alt, meta) Either extended _DOWN_MASK or old _MASK modifiers should be used, but both models should not be mixed in one 
       event. Use of the extended modifiers is preferred. 
    x - the horizontal x coordinate for the mouse location 
    y - the vertical y coordinate for the mouse location 
    clickCount - the number of mouse clicks associated with event 
    popupTrigger - a boolean, true if this event is a trigger for a popup menu 
    button - which of the mouse buttons has changed state. NOBUTTON, BUTTON1, BUTTON2 or BUTTON3. 

*java.awt.event.MouseEvent.getButton()*

public int getButton()

Returns which, if any, of the mouse buttons has changed state. 



    Returns: one of the following constants: NOBUTTON, BUTTON1, BUTTON2 or BUTTON3. 

*java.awt.event.MouseEvent.getClickCount()*

public int getClickCount()

Returns the number of mouse clicks associated with this event. 



    Returns: integer value for the number of clicks 

*java.awt.event.MouseEvent.getMouseModifiersText(int)*

public static |java.lang.String| getMouseModifiersText(int modifiers)

Returns a String describing the modifier keys and mouse buttons that were down during the event, such as "Shift", or "Ctrl+Shift". These strings can be localized by changing the 
awt.properties file. 

Note that InputEvent.ALT_MASK and InputEvent.BUTTON2_MASK have the same value, so the string "Alt" is returned for both modifiers. Likewise, InputEvent.META_MASK and 
InputEvent.BUTTON3_MASK have the same value, so the string "Meta" is returned for both modifiers. 


    modifiers - a modifier mask describing the modifier keys and mouse buttons that were down during the event 

    Returns: string a text description of the combination of modifier keys and mouse buttons that were down during the event 

*java.awt.event.MouseEvent.getPoint()*

public |java.awt.Point| getPoint()

Returns the x,y position of the event relative to the source component. 



    Returns: a Point object containing the x and y coordinates relative to the source component 

*java.awt.event.MouseEvent.getX()*

public int getX()

Returns the horizontal x position of the event relative to the source component. 



    Returns: x an integer indicating horizontal position relative to the component 

*java.awt.event.MouseEvent.getY()*

public int getY()

Returns the vertical y position of the event relative to the source component. 



    Returns: y an integer indicating vertical position relative to the component 

*java.awt.event.MouseEvent.isPopupTrigger()*

public boolean isPopupTrigger()

Returns whether or not this mouse event is the popup menu trigger event for the platform. Note: Popup menus are triggered differently on different systems. Therefore, 
isPopupTrigger should be checked in both mousePressed and mouseReleased for proper cross-platform functionality. 



    Returns: boolean, true if this event is the popup menu trigger for this platform 

*java.awt.event.MouseEvent.paramString()*

public |java.lang.String| paramString()

Returns a parameter string identifying this event. This method is useful for event-logging and for debugging. 



    Returns: a string identifying the event and its attributes 

*java.awt.event.MouseEvent.translatePoint(int,int)*

public synchronized void translatePoint(
  int x,
  int y)

Translates the event's coordinates to a new position by adding specified x (horizontal) and y (vertical) offsets. 


    x - the horizontal x value to add to the current x coordinate position 
    y - the vertical y value to add to the current y coordinate position 



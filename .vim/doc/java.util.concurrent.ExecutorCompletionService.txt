*java.util.concurrent.ExecutorCompletionService* *ExecutorCompletionService* ACompletionServicethat uses a suppliedExecutorto execute tasks.

public class ExecutorCompletionService<V>
  extends    |java.lang.Object|
  implements |java.util.concurrent.CompletionService|

|java.util.concurrent.ExecutorCompletionService_Description|
|java.util.concurrent.ExecutorCompletionService_Fields|
|java.util.concurrent.ExecutorCompletionService_Constructors|
|java.util.concurrent.ExecutorCompletionService_Methods|

====================================================================================================================================================================================

*java.util.concurrent.ExecutorCompletionService_Constructors*
|java.util.concurrent.ExecutorCompletionService(Executor)|Creates an ExecutorCompletionService using the supplied  executor for base task execution and aLinkedBlockingQueueas a co
|java.util.concurrent.ExecutorCompletionService(Executor,BlockingQueue<Future<V>>)|Creates an ExecutorCompletionService using the supplied  executor for base task execution and th

*java.util.concurrent.ExecutorCompletionService_Methods*
|java.util.concurrent.ExecutorCompletionService.poll()|
|java.util.concurrent.ExecutorCompletionService.poll(long,TimeUnit)|
|java.util.concurrent.ExecutorCompletionService.submit(Callable<V>)|
|java.util.concurrent.ExecutorCompletionService.submit(Runnable,V)|
|java.util.concurrent.ExecutorCompletionService.take()|

*java.util.concurrent.ExecutorCompletionService_Description*

A (|java.util.concurrent.CompletionService|) that uses a supplied (|java.util.concurrent.Executor|) to execute tasks. This class arranges that submitted tasks are, upon 
completion, placed on a queue accessible using take. The class is lightweight enough to be suitable for transient use when processing groups of tasks. 



Usage Examples. 

Suppose you have a set of solvers for a certain problem, each returning a value of some type Result, and would like to run them concurrently, processing the results of each of 
them that return a non-null value, in some method use(Result r). You could write this as: 



void solve(Executor e, Collection<Callable<Result>> solvers) throws InterruptedException, ExecutionException { CompletionService<Result> ecs = new 
ExecutorCompletionService<Result>(e); for (Callable<Result> s : solvers) ecs.submit(s); int n = solvers.size(); for (int i = 0; i < n; ++i) { Result r = ecs.take().get(); if (r != 
null) use(r); } } 

Suppose instead that you would like to use the first non-null result of the set of tasks, ignoring any that encounter exceptions, and cancelling all other tasks when the first one 
is ready: 



void solve(Executor e, Collection<Callable<Result>> solvers) throws InterruptedException { CompletionService<Result> ecs = new ExecutorCompletionService<Result>(e); int n = 
solvers.size(); List<Future<Result>> futures = new ArrayList<Future<Result>>(n); Result result = null; try { for (Callable<Result> s : solvers) futures.add(ecs.submit(s)); for 
(int i = 0; i < n; ++i) { try { Result r = ecs.take().get(); if (r != null) { result = r; break; } } catch(ExecutionException ignore) {} } } finally { for (Future<Result> f : 
futures) f.cancel(true); } 

if (result != null) use(result); } 



*java.util.concurrent.ExecutorCompletionService(Executor)*

public ExecutorCompletionService(java.util.concurrent.Executor executor)

Creates an ExecutorCompletionService using the supplied executor for base task execution and a (|java.util.concurrent.LinkedBlockingQueue|) as a completion queue. 

    executor - the executor to use 

*java.util.concurrent.ExecutorCompletionService(Executor,BlockingQueue<Future<V>>)*

public ExecutorCompletionService(
  java.util.concurrent.Executor executor,
  java.util.concurrent.BlockingQueue<java.util.concurrent.Future<V>> completionQueue)

Creates an ExecutorCompletionService using the supplied executor for base task execution and the supplied queue as its completion queue. 

    executor - the executor to use 
    completionQueue - the queue to use as the completion queue normally one dedicated for use by this service 

*java.util.concurrent.ExecutorCompletionService.poll()*

public |java.util.concurrent.Future|<V> poll()





*java.util.concurrent.ExecutorCompletionService.poll(long,TimeUnit)*

public |java.util.concurrent.Future|<V> poll(
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         




*java.util.concurrent.ExecutorCompletionService.submit(Callable<V>)*

public |java.util.concurrent.Future|<V> submit(java.util.concurrent.Callable<V> task)





*java.util.concurrent.ExecutorCompletionService.submit(Runnable,V)*

public |java.util.concurrent.Future|<V> submit(
  java.lang.Runnable task,
  V result)





*java.util.concurrent.ExecutorCompletionService.take()*

public |java.util.concurrent.Future|<V> take()
  throws |java.lang.InterruptedException|
         






*javax.swing.text.html.HTMLEditorKit.HTMLTextAction* *HTMLEditorKit.HTMLTextAction* 

public abstract static class HTMLEditorKit.HTMLTextAction
  extends    |javax.swing.text.StyledEditorKit.StyledTextAction|

|javax.swing.text.html.HTMLEditorKit.HTMLTextAction_Description|
|javax.swing.text.html.HTMLEditorKit.HTMLTextAction_Fields|
|javax.swing.text.html.HTMLEditorKit.HTMLTextAction_Constructors|
|javax.swing.text.html.HTMLEditorKit.HTMLTextAction_Methods|

================================================================================

*javax.swing.text.html.HTMLEditorKit.HTMLTextAction_Constructors*
|javax.swing.text.html.HTMLEditorKit.HTMLTextAction(String)|

*javax.swing.text.html.HTMLEditorKit.HTMLTextAction_Methods*
|javax.swing.text.html.HTMLEditorKit.HTMLTextAction.elementCountToTag(HTMLDocument,int,HTML.Tag)|
|javax.swing.text.html.HTMLEditorKit.HTMLTextAction.findElementMatchingTag(HTMLDocument,int,HTML.Tag)|
|javax.swing.text.html.HTMLEditorKit.HTMLTextAction.getElementsAt(HTMLDocument,int)|
|javax.swing.text.html.HTMLEditorKit.HTMLTextAction.getHTMLDocument(JEditorPane)|
|javax.swing.text.html.HTMLEditorKit.HTMLTextAction.getHTMLEditorKit(JEditorPane)|

*javax.swing.text.html.HTMLEditorKit.HTMLTextAction_Description*

An abstract Action providing some convenience methods that may be useful in 
inserting HTML into an existing document. NOTE: None of the convenience methods 
obtain a lock on the document. If you have another thread modifying the text 
these methods may have inconsistent behavior, or return the wrong thing. 


*javax.swing.text.html.HTMLEditorKit.HTMLTextAction(String)*

public HTMLEditorKit.HTMLTextAction(java.lang.String name)




*javax.swing.text.html.HTMLEditorKit.HTMLTextAction.elementCountToTag(HTMLDocument,int,HTML.Tag)*

protected int elementCountToTag(
  javax.swing.text.html.HTMLDocument doc,
  int offset,
  javax.swing.text.html.HTML.Tag tag)

Returns number of elements, starting at the deepest leaf, needed to get to an 
element representing tag. This will return -1 if no elements is found 
representing tag, or 0 if the parent of the leaf at offset represents tag. 


*javax.swing.text.html.HTMLEditorKit.HTMLTextAction.findElementMatchingTag(HTMLDocument,int,HTML.Tag)*

protected |javax.swing.text.Element| findElementMatchingTag(
  javax.swing.text.html.HTMLDocument doc,
  int offset,
  javax.swing.text.html.HTML.Tag tag)

Returns the deepest element at offset matching tag. 


*javax.swing.text.html.HTMLEditorKit.HTMLTextAction.getElementsAt(HTMLDocument,int)*

protected |javax.swing.text.Element| getElementsAt(
  javax.swing.text.html.HTMLDocument doc,
  int offset)

Returns an array of the Elements that contain offset. The first elements 
corresponds to the root. 


*javax.swing.text.html.HTMLEditorKit.HTMLTextAction.getHTMLDocument(JEditorPane)*

protected |javax.swing.text.html.HTMLDocument| getHTMLDocument(javax.swing.JEditorPane e)




    Returns: HTMLDocument of e. 
*javax.swing.text.html.HTMLEditorKit.HTMLTextAction.getHTMLEditorKit(JEditorPane)*

protected |javax.swing.text.html.HTMLEditorKit| getHTMLEditorKit(javax.swing.JEditorPane e)




    Returns: HTMLEditorKit for e. 


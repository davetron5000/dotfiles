*javax.swing.plaf.basic.BasicSliderUI* *BasicSliderUI* A Basic Limplementation o

public class BasicSliderUI
  extends    |javax.swing.plaf.SliderUI|

|javax.swing.plaf.basic.BasicSliderUI_Description|
|javax.swing.plaf.basic.BasicSliderUI_Fields|
|javax.swing.plaf.basic.BasicSliderUI_Constructors|
|javax.swing.plaf.basic.BasicSliderUI_Methods|

================================================================================

*javax.swing.plaf.basic.BasicSliderUI_Fields*
|javax.swing.event.ChangeListener_javax.swing.plaf.basic.BasicSliderUI.changeListener|
|java.awt.event.ComponentListener_javax.swing.plaf.basic.BasicSliderUI.componentListener|
|java.awt.Rectangle_javax.swing.plaf.basic.BasicSliderUI.contentRect|
|java.awt.Insets_javax.swing.plaf.basic.BasicSliderUI.focusInsets|
|java.awt.event.FocusListener_javax.swing.plaf.basic.BasicSliderUI.focusListener|
|java.awt.Rectangle_javax.swing.plaf.basic.BasicSliderUI.focusRect|
|java.awt.Insets_javax.swing.plaf.basic.BasicSliderUI.insetCache|
|java.awt.Rectangle_javax.swing.plaf.basic.BasicSliderUI.labelRect|
|boolean_javax.swing.plaf.basic.BasicSliderUI.leftToRightCache|
|int_javax.swing.plaf.basic.BasicSliderUI.MAX_SCROLL|
|int_javax.swing.plaf.basic.BasicSliderUI.MIN_SCROLL|
|int_javax.swing.plaf.basic.BasicSliderUI.NEGATIVE_SCROLL|
|int_javax.swing.plaf.basic.BasicSliderUI.POSITIVE_SCROLL|
|java.beans.PropertyChangeListener_javax.swing.plaf.basic.BasicSliderUI.propertyChangeListener|
|javax.swing.plaf.basic.BasicSliderUI.ScrollListener_javax.swing.plaf.basic.BasicSliderUI.scrollListener|
|javax.swing.Timer_javax.swing.plaf.basic.BasicSliderUI.scrollTimer|
|javax.swing.JSlider_javax.swing.plaf.basic.BasicSliderUI.slider|
|java.awt.Rectangle_javax.swing.plaf.basic.BasicSliderUI.thumbRect|
|java.awt.Rectangle_javax.swing.plaf.basic.BasicSliderUI.tickRect|
|int_javax.swing.plaf.basic.BasicSliderUI.trackBuffer|
|javax.swing.plaf.basic.BasicSliderUI.TrackListener_javax.swing.plaf.basic.BasicSliderUI.trackListener|
|java.awt.Rectangle_javax.swing.plaf.basic.BasicSliderUI.trackRect|

*javax.swing.plaf.basic.BasicSliderUI_Constructors*
|javax.swing.plaf.basic.BasicSliderUI(JSlider)|

*javax.swing.plaf.basic.BasicSliderUI_Methods*
|javax.swing.plaf.basic.BasicSliderUI.calculateContentRect()|
|javax.swing.plaf.basic.BasicSliderUI.calculateFocusRect()|
|javax.swing.plaf.basic.BasicSliderUI.calculateGeometry()|
|javax.swing.plaf.basic.BasicSliderUI.calculateLabelRect()|
|javax.swing.plaf.basic.BasicSliderUI.calculateThumbLocation()|
|javax.swing.plaf.basic.BasicSliderUI.calculateThumbSize()|
|javax.swing.plaf.basic.BasicSliderUI.calculateTickRect()|
|javax.swing.plaf.basic.BasicSliderUI.calculateTrackBuffer()|
|javax.swing.plaf.basic.BasicSliderUI.calculateTrackRect()|
|javax.swing.plaf.basic.BasicSliderUI.createChangeListener(JSlider)|
|javax.swing.plaf.basic.BasicSliderUI.createComponentListener(JSlider)|
|javax.swing.plaf.basic.BasicSliderUI.createFocusListener(JSlider)|
|javax.swing.plaf.basic.BasicSliderUI.createPropertyChangeListener(JSlider)|
|javax.swing.plaf.basic.BasicSliderUI.createScrollListener(JSlider)|
|javax.swing.plaf.basic.BasicSliderUI.createTrackListener(JSlider)|
|javax.swing.plaf.basic.BasicSliderUI.createUI(JComponent)|
|javax.swing.plaf.basic.BasicSliderUI.drawInverted()|
|javax.swing.plaf.basic.BasicSliderUI.getFocusColor()|
|javax.swing.plaf.basic.BasicSliderUI.getHeightOfHighValueLabel()|
|javax.swing.plaf.basic.BasicSliderUI.getHeightOfLowValueLabel()|
|javax.swing.plaf.basic.BasicSliderUI.getHeightOfTallestLabel()|
|javax.swing.plaf.basic.BasicSliderUI.getHighestValueLabel()|Returns the label 
|javax.swing.plaf.basic.BasicSliderUI.getHighlightColor()|
|javax.swing.plaf.basic.BasicSliderUI.getLowestValueLabel()|Returns the label t
|javax.swing.plaf.basic.BasicSliderUI.getMaximumSize(JComponent)|
|javax.swing.plaf.basic.BasicSliderUI.getMinimumHorizontalSize()|
|javax.swing.plaf.basic.BasicSliderUI.getMinimumSize(JComponent)|
|javax.swing.plaf.basic.BasicSliderUI.getMinimumVerticalSize()|
|javax.swing.plaf.basic.BasicSliderUI.getPreferredHorizontalSize()|
|javax.swing.plaf.basic.BasicSliderUI.getPreferredSize(JComponent)|
|javax.swing.plaf.basic.BasicSliderUI.getPreferredVerticalSize()|
|javax.swing.plaf.basic.BasicSliderUI.getShadowColor()|
|javax.swing.plaf.basic.BasicSliderUI.getThumbSize()|
|javax.swing.plaf.basic.BasicSliderUI.getTickLength()|Gets the height of the ti
|javax.swing.plaf.basic.BasicSliderUI.getWidthOfHighValueLabel()|
|javax.swing.plaf.basic.BasicSliderUI.getWidthOfLowValueLabel()|
|javax.swing.plaf.basic.BasicSliderUI.getWidthOfWidestLabel()|
|javax.swing.plaf.basic.BasicSliderUI.installDefaults(JSlider)|
|javax.swing.plaf.basic.BasicSliderUI.installKeyboardActions(JSlider)|
|javax.swing.plaf.basic.BasicSliderUI.installListeners(JSlider)|
|javax.swing.plaf.basic.BasicSliderUI.installUI(JComponent)|
|javax.swing.plaf.basic.BasicSliderUI.isDragging()|Returns true if the user is 
|javax.swing.plaf.basic.BasicSliderUI.paint(Graphics,JComponent)|
|javax.swing.plaf.basic.BasicSliderUI.paintFocus(Graphics)|
|javax.swing.plaf.basic.BasicSliderUI.paintHorizontalLabel(Graphics,int,Component)|
|javax.swing.plaf.basic.BasicSliderUI.paintLabels(Graphics)|
|javax.swing.plaf.basic.BasicSliderUI.paintMajorTickForHorizSlider(Graphics,Rectangle,int)|
|javax.swing.plaf.basic.BasicSliderUI.paintMajorTickForVertSlider(Graphics,Rectangle,int)|
|javax.swing.plaf.basic.BasicSliderUI.paintMinorTickForHorizSlider(Graphics,Rectangle,int)|
|javax.swing.plaf.basic.BasicSliderUI.paintMinorTickForVertSlider(Graphics,Rectangle,int)|
|javax.swing.plaf.basic.BasicSliderUI.paintThumb(Graphics)|
|javax.swing.plaf.basic.BasicSliderUI.paintTicks(Graphics)|
|javax.swing.plaf.basic.BasicSliderUI.paintTrack(Graphics)|
|javax.swing.plaf.basic.BasicSliderUI.paintVerticalLabel(Graphics,int,Component)|
|javax.swing.plaf.basic.BasicSliderUI.recalculateIfInsetsChanged()|
|javax.swing.plaf.basic.BasicSliderUI.recalculateIfOrientationChanged()|
|javax.swing.plaf.basic.BasicSliderUI.scrollByBlock(int)|
|javax.swing.plaf.basic.BasicSliderUI.scrollByUnit(int)|
|javax.swing.plaf.basic.BasicSliderUI.scrollDueToClickInTrack(int)|This functio
|javax.swing.plaf.basic.BasicSliderUI.setThumbLocation(int,int)|
|javax.swing.plaf.basic.BasicSliderUI.uninstallKeyboardActions(JSlider)|
|javax.swing.plaf.basic.BasicSliderUI.uninstallListeners(JSlider)|
|javax.swing.plaf.basic.BasicSliderUI.uninstallUI(JComponent)|
|javax.swing.plaf.basic.BasicSliderUI.valueForXPosition(int)|Returns a value gi
|javax.swing.plaf.basic.BasicSliderUI.valueForYPosition(int)|Returns a value gi
|javax.swing.plaf.basic.BasicSliderUI.xPositionForValue(int)|
|javax.swing.plaf.basic.BasicSliderUI.yPositionForValue(int)|

*javax.swing.plaf.basic.BasicSliderUI_Description*

A Basic Limplementation of SliderUI. 


*javax.swing.event.ChangeListener_javax.swing.plaf.basic.BasicSliderUI.changeListener*

A Basic Limplementation of SliderUI. 


*java.awt.event.ComponentListener_javax.swing.plaf.basic.BasicSliderUI.componentListener*

A Basic Limplementation of SliderUI. 


*java.awt.Rectangle_javax.swing.plaf.basic.BasicSliderUI.contentRect*

A Basic Limplementation of SliderUI. 


*java.awt.Insets_javax.swing.plaf.basic.BasicSliderUI.focusInsets*

A Basic Limplementation of SliderUI. 


*java.awt.event.FocusListener_javax.swing.plaf.basic.BasicSliderUI.focusListener*

A Basic Limplementation of SliderUI. 


*java.awt.Rectangle_javax.swing.plaf.basic.BasicSliderUI.focusRect*

A Basic Limplementation of SliderUI. 


*java.awt.Insets_javax.swing.plaf.basic.BasicSliderUI.insetCache*

A Basic Limplementation of SliderUI. 


*java.awt.Rectangle_javax.swing.plaf.basic.BasicSliderUI.labelRect*

A Basic Limplementation of SliderUI. 


*boolean_javax.swing.plaf.basic.BasicSliderUI.leftToRightCache*

A Basic Limplementation of SliderUI. 


*int_javax.swing.plaf.basic.BasicSliderUI.MAX_SCROLL*

A Basic Limplementation of SliderUI. 


*int_javax.swing.plaf.basic.BasicSliderUI.MIN_SCROLL*

A Basic Limplementation of SliderUI. 


*int_javax.swing.plaf.basic.BasicSliderUI.NEGATIVE_SCROLL*

A Basic Limplementation of SliderUI. 


*int_javax.swing.plaf.basic.BasicSliderUI.POSITIVE_SCROLL*

A Basic Limplementation of SliderUI. 


*java.beans.PropertyChangeListener_javax.swing.plaf.basic.BasicSliderUI.propertyChangeListener*

A Basic Limplementation of SliderUI. 


*javax.swing.plaf.basic.BasicSliderUI.ScrollListener_javax.swing.plaf.basic.BasicSliderUI.scrollListener*

A Basic Limplementation of SliderUI. 


*javax.swing.Timer_javax.swing.plaf.basic.BasicSliderUI.scrollTimer*

A Basic Limplementation of SliderUI. 


*javax.swing.JSlider_javax.swing.plaf.basic.BasicSliderUI.slider*

A Basic Limplementation of SliderUI. 


*java.awt.Rectangle_javax.swing.plaf.basic.BasicSliderUI.thumbRect*

A Basic Limplementation of SliderUI. 


*java.awt.Rectangle_javax.swing.plaf.basic.BasicSliderUI.tickRect*

A Basic Limplementation of SliderUI. 


*int_javax.swing.plaf.basic.BasicSliderUI.trackBuffer*

A Basic Limplementation of SliderUI. 


*javax.swing.plaf.basic.BasicSliderUI.TrackListener_javax.swing.plaf.basic.BasicSliderUI.trackListener*

A Basic Limplementation of SliderUI. 


*java.awt.Rectangle_javax.swing.plaf.basic.BasicSliderUI.trackRect*

A Basic Limplementation of SliderUI. 



*javax.swing.plaf.basic.BasicSliderUI(JSlider)*

public BasicSliderUI(javax.swing.JSlider b)




*javax.swing.plaf.basic.BasicSliderUI.calculateContentRect()*

protected void calculateContentRect()




*javax.swing.plaf.basic.BasicSliderUI.calculateFocusRect()*

protected void calculateFocusRect()




*javax.swing.plaf.basic.BasicSliderUI.calculateGeometry()*

protected void calculateGeometry()




*javax.swing.plaf.basic.BasicSliderUI.calculateLabelRect()*

protected void calculateLabelRect()




*javax.swing.plaf.basic.BasicSliderUI.calculateThumbLocation()*

protected void calculateThumbLocation()




*javax.swing.plaf.basic.BasicSliderUI.calculateThumbSize()*

protected void calculateThumbSize()




*javax.swing.plaf.basic.BasicSliderUI.calculateTickRect()*

protected void calculateTickRect()




*javax.swing.plaf.basic.BasicSliderUI.calculateTrackBuffer()*

protected void calculateTrackBuffer()




*javax.swing.plaf.basic.BasicSliderUI.calculateTrackRect()*

protected void calculateTrackRect()




*javax.swing.plaf.basic.BasicSliderUI.createChangeListener(JSlider)*

protected |javax.swing.event.ChangeListener| createChangeListener(javax.swing.JSlider slider)




*javax.swing.plaf.basic.BasicSliderUI.createComponentListener(JSlider)*

protected |java.awt.event.ComponentListener| createComponentListener(javax.swing.JSlider slider)




*javax.swing.plaf.basic.BasicSliderUI.createFocusListener(JSlider)*

protected |java.awt.event.FocusListener| createFocusListener(javax.swing.JSlider slider)




*javax.swing.plaf.basic.BasicSliderUI.createPropertyChangeListener(JSlider)*

protected |java.beans.PropertyChangeListener| createPropertyChangeListener(javax.swing.JSlider slider)




*javax.swing.plaf.basic.BasicSliderUI.createScrollListener(JSlider)*

protected |javax.swing.plaf.basic.BasicSliderUI.ScrollListener| createScrollListener(javax.swing.JSlider slider)




*javax.swing.plaf.basic.BasicSliderUI.createTrackListener(JSlider)*

protected |javax.swing.plaf.basic.BasicSliderUI.TrackListener| createTrackListener(javax.swing.JSlider slider)




*javax.swing.plaf.basic.BasicSliderUI.createUI(JComponent)*

public static |javax.swing.plaf.ComponentUI| createUI(javax.swing.JComponent b)




*javax.swing.plaf.basic.BasicSliderUI.drawInverted()*

protected boolean drawInverted()




*javax.swing.plaf.basic.BasicSliderUI.getFocusColor()*

protected |java.awt.Color| getFocusColor()




*javax.swing.plaf.basic.BasicSliderUI.getHeightOfHighValueLabel()*

protected int getHeightOfHighValueLabel()




*javax.swing.plaf.basic.BasicSliderUI.getHeightOfLowValueLabel()*

protected int getHeightOfLowValueLabel()




*javax.swing.plaf.basic.BasicSliderUI.getHeightOfTallestLabel()*

protected int getHeightOfTallestLabel()




*javax.swing.plaf.basic.BasicSliderUI.getHighestValueLabel()*

protected |java.awt.Component| getHighestValueLabel()

Returns the label that corresponds to the lowest slider value in the label 
table. 


*javax.swing.plaf.basic.BasicSliderUI.getHighlightColor()*

protected |java.awt.Color| getHighlightColor()




*javax.swing.plaf.basic.BasicSliderUI.getLowestValueLabel()*

protected |java.awt.Component| getLowestValueLabel()

Returns the label that corresponds to the highest slider value in the label 
table. 


*javax.swing.plaf.basic.BasicSliderUI.getMaximumSize(JComponent)*

public |java.awt.Dimension| getMaximumSize(javax.swing.JComponent c)




*javax.swing.plaf.basic.BasicSliderUI.getMinimumHorizontalSize()*

public |java.awt.Dimension| getMinimumHorizontalSize()




*javax.swing.plaf.basic.BasicSliderUI.getMinimumSize(JComponent)*

public |java.awt.Dimension| getMinimumSize(javax.swing.JComponent c)




*javax.swing.plaf.basic.BasicSliderUI.getMinimumVerticalSize()*

public |java.awt.Dimension| getMinimumVerticalSize()




*javax.swing.plaf.basic.BasicSliderUI.getPreferredHorizontalSize()*

public |java.awt.Dimension| getPreferredHorizontalSize()




*javax.swing.plaf.basic.BasicSliderUI.getPreferredSize(JComponent)*

public |java.awt.Dimension| getPreferredSize(javax.swing.JComponent c)




*javax.swing.plaf.basic.BasicSliderUI.getPreferredVerticalSize()*

public |java.awt.Dimension| getPreferredVerticalSize()




*javax.swing.plaf.basic.BasicSliderUI.getShadowColor()*

protected |java.awt.Color| getShadowColor()




*javax.swing.plaf.basic.BasicSliderUI.getThumbSize()*

protected |java.awt.Dimension| getThumbSize()




*javax.swing.plaf.basic.BasicSliderUI.getTickLength()*

protected int getTickLength()

Gets the height of the tick area for horizontal sliders and the width of the 
tick area for vertical sliders. BasicSliderUI uses the returned value to 
determine the tick area rectangle. If you want to give your ticks some room, 
make this larger than you need and paint your ticks away from the sides in 
paintTicks(). 


*javax.swing.plaf.basic.BasicSliderUI.getWidthOfHighValueLabel()*

protected int getWidthOfHighValueLabel()




*javax.swing.plaf.basic.BasicSliderUI.getWidthOfLowValueLabel()*

protected int getWidthOfLowValueLabel()




*javax.swing.plaf.basic.BasicSliderUI.getWidthOfWidestLabel()*

protected int getWidthOfWidestLabel()




*javax.swing.plaf.basic.BasicSliderUI.installDefaults(JSlider)*

protected void installDefaults(javax.swing.JSlider slider)




*javax.swing.plaf.basic.BasicSliderUI.installKeyboardActions(JSlider)*

protected void installKeyboardActions(javax.swing.JSlider slider)




*javax.swing.plaf.basic.BasicSliderUI.installListeners(JSlider)*

protected void installListeners(javax.swing.JSlider slider)




*javax.swing.plaf.basic.BasicSliderUI.installUI(JComponent)*

public void installUI(javax.swing.JComponent c)




*javax.swing.plaf.basic.BasicSliderUI.isDragging()*

protected boolean isDragging()

Returns true if the user is dragging the slider. 


    Returns: true if the user is dragging the slider 
*javax.swing.plaf.basic.BasicSliderUI.paint(Graphics,JComponent)*

public void paint(
  java.awt.Graphics g,
  javax.swing.JComponent c)




*javax.swing.plaf.basic.BasicSliderUI.paintFocus(Graphics)*

public void paintFocus(java.awt.Graphics g)




*javax.swing.plaf.basic.BasicSliderUI.paintHorizontalLabel(Graphics,int,Component)*

protected void paintHorizontalLabel(
  java.awt.Graphics g,
  int value,
  java.awt.Component label)

Called for every label in the label table. Used to draw the labels for 
horizontal sliders. The graphics have been translated to labelRect.y already. 


*javax.swing.plaf.basic.BasicSliderUI.paintLabels(Graphics)*

public void paintLabels(java.awt.Graphics g)




*javax.swing.plaf.basic.BasicSliderUI.paintMajorTickForHorizSlider(Graphics,Rectangle,int)*

protected void paintMajorTickForHorizSlider(
  java.awt.Graphics g,
  java.awt.Rectangle tickBounds,
  int x)




*javax.swing.plaf.basic.BasicSliderUI.paintMajorTickForVertSlider(Graphics,Rectangle,int)*

protected void paintMajorTickForVertSlider(
  java.awt.Graphics g,
  java.awt.Rectangle tickBounds,
  int y)




*javax.swing.plaf.basic.BasicSliderUI.paintMinorTickForHorizSlider(Graphics,Rectangle,int)*

protected void paintMinorTickForHorizSlider(
  java.awt.Graphics g,
  java.awt.Rectangle tickBounds,
  int x)




*javax.swing.plaf.basic.BasicSliderUI.paintMinorTickForVertSlider(Graphics,Rectangle,int)*

protected void paintMinorTickForVertSlider(
  java.awt.Graphics g,
  java.awt.Rectangle tickBounds,
  int y)




*javax.swing.plaf.basic.BasicSliderUI.paintThumb(Graphics)*

public void paintThumb(java.awt.Graphics g)




*javax.swing.plaf.basic.BasicSliderUI.paintTicks(Graphics)*

public void paintTicks(java.awt.Graphics g)




*javax.swing.plaf.basic.BasicSliderUI.paintTrack(Graphics)*

public void paintTrack(java.awt.Graphics g)




*javax.swing.plaf.basic.BasicSliderUI.paintVerticalLabel(Graphics,int,Component)*

protected void paintVerticalLabel(
  java.awt.Graphics g,
  int value,
  java.awt.Component label)

Called for every label in the label table. Used to draw the labels for vertical 
sliders. The graphics have been translated to labelRect.x already. 


*javax.swing.plaf.basic.BasicSliderUI.recalculateIfInsetsChanged()*

protected void recalculateIfInsetsChanged()




*javax.swing.plaf.basic.BasicSliderUI.recalculateIfOrientationChanged()*

protected void recalculateIfOrientationChanged()




*javax.swing.plaf.basic.BasicSliderUI.scrollByBlock(int)*

public void scrollByBlock(int direction)




*javax.swing.plaf.basic.BasicSliderUI.scrollByUnit(int)*

public void scrollByUnit(int direction)




*javax.swing.plaf.basic.BasicSliderUI.scrollDueToClickInTrack(int)*

protected void scrollDueToClickInTrack(int dir)

This function is called when a mousePressed was detected in the track, not in 
the thumb. The default behavior is to scroll by block. You can override this 
method to stop it from scrolling or to add additional behavior. 


*javax.swing.plaf.basic.BasicSliderUI.setThumbLocation(int,int)*

public void setThumbLocation(
  int x,
  int y)




*javax.swing.plaf.basic.BasicSliderUI.uninstallKeyboardActions(JSlider)*

protected void uninstallKeyboardActions(javax.swing.JSlider slider)




*javax.swing.plaf.basic.BasicSliderUI.uninstallListeners(JSlider)*

protected void uninstallListeners(javax.swing.JSlider slider)




*javax.swing.plaf.basic.BasicSliderUI.uninstallUI(JComponent)*

public void uninstallUI(javax.swing.JComponent c)




*javax.swing.plaf.basic.BasicSliderUI.valueForXPosition(int)*

public int valueForXPosition(int xPos)

Returns a value give an x position. If xPos is past the track at the left or 
the right it will set the value to the min or max of the slider, depending if 
the slider is inverted or not. 


*javax.swing.plaf.basic.BasicSliderUI.valueForYPosition(int)*

public int valueForYPosition(int yPos)

Returns a value give a y position. If yPos is past the track at the top or the 
bottom it will set the value to the min or max of the slider, depending if the 
slider is inverted or not. 


*javax.swing.plaf.basic.BasicSliderUI.xPositionForValue(int)*

protected int xPositionForValue(int value)




*javax.swing.plaf.basic.BasicSliderUI.yPositionForValue(int)*

protected int yPositionForValue(int value)






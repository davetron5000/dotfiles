*java.sql.DatabaseMetaData* *DatabaseMetaData* Comprehensive information about t

public interface interface DatabaseMetaData


|java.sql.DatabaseMetaData_Description|
|java.sql.DatabaseMetaData_Fields|
|java.sql.DatabaseMetaData_Constructors|
|java.sql.DatabaseMetaData_Methods|

================================================================================

*java.sql.DatabaseMetaData_Fields*
|short_java.sql.DatabaseMetaData.attributeNoNulls|
|short_java.sql.DatabaseMetaData.attributeNullable|
|short_java.sql.DatabaseMetaData.attributeNullableUnknown|
|int_java.sql.DatabaseMetaData.bestRowNotPseudo|
|int_java.sql.DatabaseMetaData.bestRowPseudo|
|int_java.sql.DatabaseMetaData.bestRowSession|
|int_java.sql.DatabaseMetaData.bestRowTemporary|
|int_java.sql.DatabaseMetaData.bestRowTransaction|
|int_java.sql.DatabaseMetaData.bestRowUnknown|
|int_java.sql.DatabaseMetaData.columnNoNulls|
|int_java.sql.DatabaseMetaData.columnNullable|
|int_java.sql.DatabaseMetaData.columnNullableUnknown|
|int_java.sql.DatabaseMetaData.importedKeyCascade|
|int_java.sql.DatabaseMetaData.importedKeyInitiallyDeferred|
|int_java.sql.DatabaseMetaData.importedKeyInitiallyImmediate|
|int_java.sql.DatabaseMetaData.importedKeyNoAction|
|int_java.sql.DatabaseMetaData.importedKeyNotDeferrable|
|int_java.sql.DatabaseMetaData.importedKeyRestrict|
|int_java.sql.DatabaseMetaData.importedKeySetDefault|
|int_java.sql.DatabaseMetaData.importedKeySetNull|
|int_java.sql.DatabaseMetaData.procedureColumnIn|
|int_java.sql.DatabaseMetaData.procedureColumnInOut|
|int_java.sql.DatabaseMetaData.procedureColumnOut|
|int_java.sql.DatabaseMetaData.procedureColumnResult|
|int_java.sql.DatabaseMetaData.procedureColumnReturn|
|int_java.sql.DatabaseMetaData.procedureColumnUnknown|
|int_java.sql.DatabaseMetaData.procedureNoNulls|
|int_java.sql.DatabaseMetaData.procedureNoResult|
|int_java.sql.DatabaseMetaData.procedureNullable|
|int_java.sql.DatabaseMetaData.procedureNullableUnknown|
|int_java.sql.DatabaseMetaData.procedureResultUnknown|
|int_java.sql.DatabaseMetaData.procedureReturnsResult|
|int_java.sql.DatabaseMetaData.sqlStateSQL99|
|int_java.sql.DatabaseMetaData.sqlStateXOpen|
|short_java.sql.DatabaseMetaData.tableIndexClustered|
|short_java.sql.DatabaseMetaData.tableIndexHashed|
|short_java.sql.DatabaseMetaData.tableIndexOther|
|short_java.sql.DatabaseMetaData.tableIndexStatistic|
|int_java.sql.DatabaseMetaData.typeNoNulls|
|int_java.sql.DatabaseMetaData.typeNullable|
|int_java.sql.DatabaseMetaData.typeNullableUnknown|
|int_java.sql.DatabaseMetaData.typePredBasic|
|int_java.sql.DatabaseMetaData.typePredChar|
|int_java.sql.DatabaseMetaData.typePredNone|
|int_java.sql.DatabaseMetaData.typeSearchable|
|int_java.sql.DatabaseMetaData.versionColumnNotPseudo|
|int_java.sql.DatabaseMetaData.versionColumnPseudo|
|int_java.sql.DatabaseMetaData.versionColumnUnknown|

*java.sql.DatabaseMetaData_Methods*
|java.sql.DatabaseMetaData.allProceduresAreCallable()|Retrieves whether the cur
|java.sql.DatabaseMetaData.allTablesAreSelectable()|Retrieves whether the curre
|java.sql.DatabaseMetaData.dataDefinitionCausesTransactionCommit()|Retrieves wh
|java.sql.DatabaseMetaData.dataDefinitionIgnoredInTransactions()|Retrieves whet
|java.sql.DatabaseMetaData.deletesAreDetected(int)|Retrieves whether or not a v
|java.sql.DatabaseMetaData.doesMaxRowSizeIncludeBlobs()|Retrieves whether the r
|java.sql.DatabaseMetaData.getAttributes(String,String,String,String)|Retrieves
|java.sql.DatabaseMetaData.getBestRowIdentifier(String,String,String,int,boolean)|
|java.sql.DatabaseMetaData.getCatalogs()|Retrieves the catalog names available 
|java.sql.DatabaseMetaData.getCatalogSeparator()|Retrieves the String that this
|java.sql.DatabaseMetaData.getCatalogTerm()|Retrieves the database vendor's pre
|java.sql.DatabaseMetaData.getColumnPrivileges(String,String,String,String)|Ret
|java.sql.DatabaseMetaData.getColumns(String,String,String,String)|Retrieves a 
|java.sql.DatabaseMetaData.getConnection()|Retrieves the connection that produc
|java.sql.DatabaseMetaData.getCrossReference(String,String,String,String,String,String)|
|java.sql.DatabaseMetaData.getDatabaseMajorVersion()|Retrieves the major versio
|java.sql.DatabaseMetaData.getDatabaseMinorVersion()|Retrieves the minor versio
|java.sql.DatabaseMetaData.getDatabaseProductName()|Retrieves the name of this 
|java.sql.DatabaseMetaData.getDatabaseProductVersion()|Retrieves the version nu
|java.sql.DatabaseMetaData.getDefaultTransactionIsolation()|Retrieves this data
|java.sql.DatabaseMetaData.getDriverMajorVersion()|Retrieves this JDBC driver's
|java.sql.DatabaseMetaData.getDriverMinorVersion()|Retrieves this JDBC driver's
|java.sql.DatabaseMetaData.getDriverName()|Retrieves the name of this JDBC driv
|java.sql.DatabaseMetaData.getDriverVersion()|Retrieves the version number of t
|java.sql.DatabaseMetaData.getExportedKeys(String,String,String)|Retrieves a de
|java.sql.DatabaseMetaData.getExtraNameCharacters()|Retrieves all the "extra" c
|java.sql.DatabaseMetaData.getIdentifierQuoteString()|Retrieves the string used
|java.sql.DatabaseMetaData.getImportedKeys(String,String,String)|Retrieves a de
|java.sql.DatabaseMetaData.getIndexInfo(String,String,String,boolean,boolean)|R
|java.sql.DatabaseMetaData.getJDBCMajorVersion()|Retrieves the major JDBC versi
|java.sql.DatabaseMetaData.getJDBCMinorVersion()|Retrieves the minor JDBC versi
|java.sql.DatabaseMetaData.getMaxBinaryLiteralLength()|Retrieves the maximum nu
|java.sql.DatabaseMetaData.getMaxCatalogNameLength()|Retrieves the maximum numb
|java.sql.DatabaseMetaData.getMaxCharLiteralLength()|Retrieves the maximum numb
|java.sql.DatabaseMetaData.getMaxColumnNameLength()|Retrieves the maximum numbe
|java.sql.DatabaseMetaData.getMaxColumnsInGroupBy()|Retrieves the maximum numbe
|java.sql.DatabaseMetaData.getMaxColumnsInIndex()|Retrieves the maximum number 
|java.sql.DatabaseMetaData.getMaxColumnsInOrderBy()|Retrieves the maximum numbe
|java.sql.DatabaseMetaData.getMaxColumnsInSelect()|Retrieves the maximum number
|java.sql.DatabaseMetaData.getMaxColumnsInTable()|Retrieves the maximum number 
|java.sql.DatabaseMetaData.getMaxConnections()|Retrieves the maximum number of 
|java.sql.DatabaseMetaData.getMaxCursorNameLength()|Retrieves the maximum numbe
|java.sql.DatabaseMetaData.getMaxIndexLength()|Retrieves the maximum number of 
|java.sql.DatabaseMetaData.getMaxProcedureNameLength()|Retrieves the maximum nu
|java.sql.DatabaseMetaData.getMaxRowSize()|Retrieves the maximum number of byte
|java.sql.DatabaseMetaData.getMaxSchemaNameLength()|Retrieves the maximum numbe
|java.sql.DatabaseMetaData.getMaxStatementLength()|Retrieves the maximum number
|java.sql.DatabaseMetaData.getMaxStatements()|Retrieves the maximum number of a
|java.sql.DatabaseMetaData.getMaxTableNameLength()|Retrieves the maximum number
|java.sql.DatabaseMetaData.getMaxTablesInSelect()|Retrieves the maximum number 
|java.sql.DatabaseMetaData.getMaxUserNameLength()|Retrieves the maximum number 
|java.sql.DatabaseMetaData.getNumericFunctions()|Retrieves a comma-separated li
|java.sql.DatabaseMetaData.getPrimaryKeys(String,String,String)|Retrieves a des
|java.sql.DatabaseMetaData.getProcedureColumns(String,String,String,String)|Ret
|java.sql.DatabaseMetaData.getProcedures(String,String,String)|Retrieves a desc
|java.sql.DatabaseMetaData.getProcedureTerm()|Retrieves the database vendor's p
|java.sql.DatabaseMetaData.getResultSetHoldability()|Retrieves the default hold
|java.sql.DatabaseMetaData.getSchemas()|Retrieves the schema names available in
|java.sql.DatabaseMetaData.getSchemaTerm()|Retrieves the database vendor's pref
|java.sql.DatabaseMetaData.getSearchStringEscape()|Retrieves the string that ca
|java.sql.DatabaseMetaData.getSQLKeywords()|Retrieves a comma-separated list of
|java.sql.DatabaseMetaData.getSQLStateType()|Indicates whether the SQLSTATE ret
|java.sql.DatabaseMetaData.getStringFunctions()|Retrieves a comma-separated lis
|java.sql.DatabaseMetaData.getSuperTables(String,String,String)|Retrieves a des
|java.sql.DatabaseMetaData.getSuperTypes(String,String,String)|Retrieves a desc
|java.sql.DatabaseMetaData.getSystemFunctions()|Retrieves a comma-separated lis
|java.sql.DatabaseMetaData.getTablePrivileges(String,String,String)|Retrieves a
|java.sql.DatabaseMetaData.getTables(String,String,String,String[])|Retrieves a
|java.sql.DatabaseMetaData.getTableTypes()|Retrieves the table types available 
|java.sql.DatabaseMetaData.getTimeDateFunctions()|Retrieves a comma-separated l
|java.sql.DatabaseMetaData.getTypeInfo()|Retrieves a description of all the sta
|java.sql.DatabaseMetaData.getUDTs(String,String,String,int[])|Retrieves a desc
|java.sql.DatabaseMetaData.getURL()|Retrieves the URL for this DBMS.
|java.sql.DatabaseMetaData.getUserName()|Retrieves the user name as known to th
|java.sql.DatabaseMetaData.getVersionColumns(String,String,String)|Retrieves a 
|java.sql.DatabaseMetaData.insertsAreDetected(int)|Retrieves whether or not a v
|java.sql.DatabaseMetaData.isCatalogAtStart()|Retrieves whether a catalog appea
|java.sql.DatabaseMetaData.isReadOnly()|Retrieves whether this database is in r
|java.sql.DatabaseMetaData.locatorsUpdateCopy()|Indicates whether updates made 
|java.sql.DatabaseMetaData.nullPlusNonNullIsNull()|Retrieves whether this datab
|java.sql.DatabaseMetaData.nullsAreSortedAtEnd()|Retrieves whether NULL values 
|java.sql.DatabaseMetaData.nullsAreSortedAtStart()|Retrieves whether NULL value
|java.sql.DatabaseMetaData.nullsAreSortedHigh()|Retrieves whether NULL values a
|java.sql.DatabaseMetaData.nullsAreSortedLow()|Retrieves whether NULL values ar
|java.sql.DatabaseMetaData.othersDeletesAreVisible(int)|Retrieves whether delet
|java.sql.DatabaseMetaData.othersInsertsAreVisible(int)|Retrieves whether inser
|java.sql.DatabaseMetaData.othersUpdatesAreVisible(int)|Retrieves whether updat
|java.sql.DatabaseMetaData.ownDeletesAreVisible(int)|Retrieves whether a result
|java.sql.DatabaseMetaData.ownInsertsAreVisible(int)|Retrieves whether a result
|java.sql.DatabaseMetaData.ownUpdatesAreVisible(int)|Retrieves whether for the 
|java.sql.DatabaseMetaData.storesLowerCaseIdentifiers()|Retrieves whether this 
|java.sql.DatabaseMetaData.storesLowerCaseQuotedIdentifiers()|Retrieves whether
|java.sql.DatabaseMetaData.storesMixedCaseIdentifiers()|Retrieves whether this 
|java.sql.DatabaseMetaData.storesMixedCaseQuotedIdentifiers()|Retrieves whether
|java.sql.DatabaseMetaData.storesUpperCaseIdentifiers()|Retrieves whether this 
|java.sql.DatabaseMetaData.storesUpperCaseQuotedIdentifiers()|Retrieves whether
|java.sql.DatabaseMetaData.supportsAlterTableWithAddColumn()|Retrieves whether 
|java.sql.DatabaseMetaData.supportsAlterTableWithDropColumn()|Retrieves whether
|java.sql.DatabaseMetaData.supportsANSI92EntryLevelSQL()|Retrieves whether this
|java.sql.DatabaseMetaData.supportsANSI92FullSQL()|Retrieves whether this datab
|java.sql.DatabaseMetaData.supportsANSI92IntermediateSQL()|Retrieves whether th
|java.sql.DatabaseMetaData.supportsBatchUpdates()|Retrieves whether this databa
|java.sql.DatabaseMetaData.supportsCatalogsInDataManipulation()|Retrieves wheth
|java.sql.DatabaseMetaData.supportsCatalogsInIndexDefinitions()|Retrieves wheth
|java.sql.DatabaseMetaData.supportsCatalogsInPrivilegeDefinitions()|Retrieves w
|java.sql.DatabaseMetaData.supportsCatalogsInProcedureCalls()|Retrieves whether
|java.sql.DatabaseMetaData.supportsCatalogsInTableDefinitions()|Retrieves wheth
|java.sql.DatabaseMetaData.supportsColumnAliasing()|Retrieves whether this data
|java.sql.DatabaseMetaData.supportsConvert()|Retrieves whether this database su
|java.sql.DatabaseMetaData.supportsConvert(int,int)|Retrieves whether this data
|java.sql.DatabaseMetaData.supportsCoreSQLGrammar()|Retrieves whether this data
|java.sql.DatabaseMetaData.supportsCorrelatedSubqueries()|Retrieves whether thi
|java.sql.DatabaseMetaData.supportsDataDefinitionAndDataManipulationTransactions()|
|java.sql.DatabaseMetaData.supportsDataManipulationTransactionsOnly()|Retrieves
|java.sql.DatabaseMetaData.supportsDifferentTableCorrelationNames()|Retrieves w
|java.sql.DatabaseMetaData.supportsExpressionsInOrderBy()|Retrieves whether thi
|java.sql.DatabaseMetaData.supportsExtendedSQLGrammar()|Retrieves whether this 
|java.sql.DatabaseMetaData.supportsFullOuterJoins()|Retrieves whether this data
|java.sql.DatabaseMetaData.supportsGetGeneratedKeys()|Retrieves whether auto-ge
|java.sql.DatabaseMetaData.supportsGroupBy()|Retrieves whether this database su
|java.sql.DatabaseMetaData.supportsGroupByBeyondSelect()|Retrieves whether this
|java.sql.DatabaseMetaData.supportsGroupByUnrelated()|Retrieves whether this da
|java.sql.DatabaseMetaData.supportsIntegrityEnhancementFacility()|Retrieves whe
|java.sql.DatabaseMetaData.supportsLikeEscapeClause()|Retrieves whether this da
|java.sql.DatabaseMetaData.supportsLimitedOuterJoins()|Retrieves whether this d
|java.sql.DatabaseMetaData.supportsMinimumSQLGrammar()|Retrieves whether this d
|java.sql.DatabaseMetaData.supportsMixedCaseIdentifiers()|Retrieves whether thi
|java.sql.DatabaseMetaData.supportsMixedCaseQuotedIdentifiers()|Retrieves wheth
|java.sql.DatabaseMetaData.supportsMultipleOpenResults()|Retrieves whether it i
|java.sql.DatabaseMetaData.supportsMultipleResultSets()|Retrieves whether this 
|java.sql.DatabaseMetaData.supportsMultipleTransactions()|Retrieves whether thi
|java.sql.DatabaseMetaData.supportsNamedParameters()|Retrieves whether this dat
|java.sql.DatabaseMetaData.supportsNonNullableColumns()|Retrieves whether colum
|java.sql.DatabaseMetaData.supportsOpenCursorsAcrossCommit()|Retrieves whether 
|java.sql.DatabaseMetaData.supportsOpenCursorsAcrossRollback()|Retrieves whethe
|java.sql.DatabaseMetaData.supportsOpenStatementsAcrossCommit()|Retrieves wheth
|java.sql.DatabaseMetaData.supportsOpenStatementsAcrossRollback()|Retrieves whe
|java.sql.DatabaseMetaData.supportsOrderByUnrelated()|Retrieves whether this da
|java.sql.DatabaseMetaData.supportsOuterJoins()|Retrieves whether this database
|java.sql.DatabaseMetaData.supportsPositionedDelete()|Retrieves whether this da
|java.sql.DatabaseMetaData.supportsPositionedUpdate()|Retrieves whether this da
|java.sql.DatabaseMetaData.supportsResultSetConcurrency(int,int)|Retrieves whet
|java.sql.DatabaseMetaData.supportsResultSetHoldability(int)|Retrieves whether 
|java.sql.DatabaseMetaData.supportsResultSetType(int)|Retrieves whether this da
|java.sql.DatabaseMetaData.supportsSavepoints()|Retrieves whether this database
|java.sql.DatabaseMetaData.supportsSchemasInDataManipulation()|Retrieves whethe
|java.sql.DatabaseMetaData.supportsSchemasInIndexDefinitions()|Retrieves whethe
|java.sql.DatabaseMetaData.supportsSchemasInPrivilegeDefinitions()|Retrieves wh
|java.sql.DatabaseMetaData.supportsSchemasInProcedureCalls()|Retrieves whether 
|java.sql.DatabaseMetaData.supportsSchemasInTableDefinitions()|Retrieves whethe
|java.sql.DatabaseMetaData.supportsSelectForUpdate()|Retrieves whether this dat
|java.sql.DatabaseMetaData.supportsStatementPooling()|Retrieves whether this da
|java.sql.DatabaseMetaData.supportsStoredProcedures()|Retrieves whether this da
|java.sql.DatabaseMetaData.supportsSubqueriesInComparisons()|Retrieves whether 
|java.sql.DatabaseMetaData.supportsSubqueriesInExists()|Retrieves whether this 
|java.sql.DatabaseMetaData.supportsSubqueriesInIns()|Retrieves whether this dat
|java.sql.DatabaseMetaData.supportsSubqueriesInQuantifieds()|Retrieves whether 
|java.sql.DatabaseMetaData.supportsTableCorrelationNames()|Retrieves whether th
|java.sql.DatabaseMetaData.supportsTransactionIsolationLevel(int)|Retrieves whe
|java.sql.DatabaseMetaData.supportsTransactions()|Retrieves whether this databa
|java.sql.DatabaseMetaData.supportsUnion()|Retrieves whether this database supp
|java.sql.DatabaseMetaData.supportsUnionAll()|Retrieves whether this database s
|java.sql.DatabaseMetaData.updatesAreDetected(int)|Retrieves whether or not a v
|java.sql.DatabaseMetaData.usesLocalFilePerTable()|Retrieves whether this datab
|java.sql.DatabaseMetaData.usesLocalFiles()|Retrieves whether this database sto

*java.sql.DatabaseMetaData_Description*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*short_java.sql.DatabaseMetaData.attributeNoNulls*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*short_java.sql.DatabaseMetaData.attributeNullable*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*short_java.sql.DatabaseMetaData.attributeNullableUnknown*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.bestRowNotPseudo*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.bestRowPseudo*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.bestRowSession*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.bestRowTemporary*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.bestRowTransaction*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.bestRowUnknown*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.columnNoNulls*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.columnNullable*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.columnNullableUnknown*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.importedKeyCascade*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.importedKeyInitiallyDeferred*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.importedKeyInitiallyImmediate*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.importedKeyNoAction*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.importedKeyNotDeferrable*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.importedKeyRestrict*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.importedKeySetDefault*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.importedKeySetNull*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.procedureColumnIn*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.procedureColumnInOut*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.procedureColumnOut*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.procedureColumnResult*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.procedureColumnReturn*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.procedureColumnUnknown*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.procedureNoNulls*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.procedureNoResult*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.procedureNullable*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.procedureNullableUnknown*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.procedureResultUnknown*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.procedureReturnsResult*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.sqlStateSQL99*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.sqlStateXOpen*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*short_java.sql.DatabaseMetaData.tableIndexClustered*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*short_java.sql.DatabaseMetaData.tableIndexHashed*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*short_java.sql.DatabaseMetaData.tableIndexOther*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*short_java.sql.DatabaseMetaData.tableIndexStatistic*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.typeNoNulls*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.typeNullable*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.typeNullableUnknown*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.typePredBasic*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.typePredChar*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.typePredNone*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.typeSearchable*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.versionColumnNotPseudo*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.versionColumnPseudo*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 


*int_java.sql.DatabaseMetaData.versionColumnUnknown*

Comprehensive information about the database as a whole. 

This interface is implemented by driver vendors to let users know the 
capabilities of a Database Management System (DBMS) in combination with the 
driver based on JDBCTM technology ("JDBC driver") that is used with it. 
Different relational DBMSs often support different features, implement features 
in different ways, and use different data types. In addition, a driver may 
implement a feature on top of what the DBMS offers. Information returned by 
methods in this interface applies to the capabilities of a particular driver 
and a particular DBMS working together. Note that as used in this 
documentation, the term "database" is used generically to refer to both the 
driver and DBMS. 

A user for this interface is commonly a tool that needs to discover how to deal 
with the underlying DBMS. This is especially true for applications that are 
intended to be used with more than one DBMS. For example, a tool might use the 
method getTypeInfo to find out what data types can be used in a CREATE TABLE 
statement. Or a user might call the method supportsCorrelatedSubqueries to see 
if it is possible to use a correlated subquery or supportsBatchUpdates to see 
if it is possible to use batch updates. 

Some DatabaseMetaData methods return lists of information in the form of 
ResultSet objects. Regular ResultSet methods, such as getString and getInt, can 
be used to retrieve the data from these ResultSet objects. If a given form of 
metadata is not available, the ResultSet getter methods throw an SQLException. 

Some DatabaseMetaData methods take arguments that are String patterns. These 
arguments all have names such as fooPattern. Within a pattern String, "%" means 
match any substring of 0 or more characters, and "_" means match any one 
character. Only metadata entries matching the search pattern are returned. If a 
search pattern argument is set to null, that argument's criterion will be 
dropped from the search. 

A method that gets information about a feature that the driver does not support 
will throw an SQLException. In the case of methods that return a ResultSet 
object, either a ResultSet object (which may be empty) is returned or an 
SQLException is thrown. 



*java.sql.DatabaseMetaData.allProceduresAreCallable()*

public boolean allProceduresAreCallable()
  throws |java.sql.SQLException|
         
Retrieves whether the current user can call all the procedures returned by the 
method getProcedures. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.allTablesAreSelectable()*

public boolean allTablesAreSelectable()
  throws |java.sql.SQLException|
         
Retrieves whether the current user can use all the tables returned by the 
method getTables in a SELECT statement. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.dataDefinitionCausesTransactionCommit()*

public boolean dataDefinitionCausesTransactionCommit()
  throws |java.sql.SQLException|
         
Retrieves whether a data definition statement within a transaction forces the 
transaction to commit. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.dataDefinitionIgnoredInTransactions()*

public boolean dataDefinitionIgnoredInTransactions()
  throws |java.sql.SQLException|
         
Retrieves whether this database ignores a data definition statement within a 
transaction. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.deletesAreDetected(int)*

public boolean deletesAreDetected(int type)
  throws |java.sql.SQLException|
         
Retrieves whether or not a visible row delete can be detected by calling the 
method ResultSet.rowDeleted. If the method deletesAreDetected returns false, it 
means that deleted rows are removed from the result set. 

    type - the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, 
       ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE 

    Returns: true if deletes are detected by the given result set type; false otherwise 
*java.sql.DatabaseMetaData.doesMaxRowSizeIncludeBlobs()*

public boolean doesMaxRowSizeIncludeBlobs()
  throws |java.sql.SQLException|
         
Retrieves whether the return value for the method getMaxRowSize includes the 
SQL data types LONGVARCHAR and LONGVARBINARY. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.getAttributes(String,String,String,String)*

public |java.sql.ResultSet| getAttributes(
  java.lang.String catalog,
  java.lang.String schemaPattern,
  java.lang.String typeNamePattern,
  java.lang.String attributeNamePattern)
  throws |java.sql.SQLException|
         
Retrieves a description of the given attribute of the given type for a 
user-defined type (UDT) that is available in the given schema and catalog. 

Descriptions are returned only for attributes of UDTs matching the catalog, 
schema, type, and attribute name criteria. They are ordered by TYPE_SCHEM, 
TYPE_NAME and ORDINAL_POSITION. This description does not contain inherited 
attributes. 

The ResultSet object that is returned has the following columns: 

TYPE_CAT String => type catalog (may be null) TYPE_SCHEM String => type schema 
(may be null) TYPE_NAME String => type name ATTR_NAME String => attribute name 
DATA_TYPE int => attribute type SQL type from java.sql.Types ATTR_TYPE_NAME 
String => Data source dependent type name. For a UDT, the type name is fully 
qualified. For a REF, the type name is fully qualified and represents the 
target type of the reference type. ATTR_SIZE int => column size. For char or 
date types this is the maximum number of characters; for numeric or decimal 
types this is precision. DECIMAL_DIGITS int => the number of fractional digits 
NUM_PREC_RADIX int => Radix (typically either 10 or 2) NULLABLE int => whether 
NULL is allowed 

attributeNoNulls - might not allow NULL values attributeNullable - definitely 
allows NULL values attributeNullableUnknown - nullability unknown 

REMARKS String => comment describing column (may be null) ATTR_DEF String => 
default value (may be null) SQL_DATA_TYPE int => unused SQL_DATETIME_SUB int => 
unused CHAR_OCTET_LENGTH int => for char types the maximum number of bytes in 
the column ORDINAL_POSITION int	=> index of column in table (starting at 1) 
IS_NULLABLE String => "NO" means column definitely does not allow NULL values; 
"YES" means the column might allow NULL values. An empty string means unknown. 
SCOPE_CATALOG String => catalog of table that is the scope of a reference 
attribute (null if DATA_TYPE isn't REF) SCOPE_SCHEMA String => schema of table 
that is the scope of a reference attribute (null if DATA_TYPE isn't REF) 
SCOPE_TABLE String => table name that is the scope of a reference attribute 
(null if the DATA_TYPE isn't REF) SOURCE_DATA_TYPE short => source type of a 
distinct type or user-generated Ref type,SQL type from java.sql.Types (null if 
DATA_TYPE isn't DISTINCT or user-generated REF) 

    catalog - a catalog name; must match the catalog name as it is stored in the database; "" 
       retrieves those without a catalog; null means that the catalog name 
       should not be used to narrow the search 
    schemaPattern - a schema name pattern; must match the schema name as it is stored in the 
       database; "" retrieves those without a schema; null means that the 
       schema name should not be used to narrow the search 
    typeNamePattern - a type name pattern; must match the type name as it is stored in the database 
    attributeNamePattern - an attribute name pattern; must match the attribute name as it is declared in 
       the database 

    Returns: a ResultSet object in which each row is an attribute description 
*java.sql.DatabaseMetaData.getBestRowIdentifier(String,String,String,int,boolean)*

public |java.sql.ResultSet| getBestRowIdentifier(
  java.lang.String catalog,
  java.lang.String schema,
  java.lang.String table,
  int scope,
  boolean nullable)
  throws |java.sql.SQLException|
         
Retrieves a description of a table's optimal set of columns that uniquely 
identifies a row. They are ordered by SCOPE. 

Each column description has the following columns: 

SCOPE short => actual scope of result 

bestRowTemporary - very temporary, while using row bestRowTransaction - valid 
for remainder of current transaction bestRowSession - valid for remainder of 
current session 

COLUMN_NAME String => column name DATA_TYPE int => SQL data type from 
java.sql.Types TYPE_NAME String => Data source dependent type name, for a UDT 
the type name is fully qualified COLUMN_SIZE int => precision BUFFER_LENGTH int 
=> not used DECIMAL_DIGITS short => scale PSEUDO_COLUMN short => is this a 
pseudo column like an Oracle ROWID 

bestRowUnknown - may or may not be pseudo column bestRowNotPseudo - is NOT a 
pseudo column bestRowPseudo - is a pseudo column 



    catalog - a catalog name; must match the catalog name as it is stored in the database; "" 
       retrieves those without a catalog; null means that the catalog name 
       should not be used to narrow the search 
    schema - a schema name; must match the schema name as it is stored in the database; "" 
       retrieves those without a schema; null means that the schema name should 
       not be used to narrow the search 
    table - a table name; must match the table name as it is stored in the database 
    scope - the scope of interest; use same values as SCOPE 
    nullable - include columns that are nullable. 

    Returns: ResultSet - each row is a column description 
*java.sql.DatabaseMetaData.getCatalogs()*

public |java.sql.ResultSet| getCatalogs()
  throws |java.sql.SQLException|
         
Retrieves the catalog names available in this database. The results are ordered 
by catalog name. 

The catalog column is: 

TABLE_CAT String => catalog name 


    Returns: a ResultSet object in which each row has a single String column that is a 
             catalog name 
*java.sql.DatabaseMetaData.getCatalogSeparator()*

public |java.lang.String| getCatalogSeparator()
  throws |java.sql.SQLException|
         
Retrieves the String that this database uses as the separator between a catalog 
and table name. 


    Returns: the separator string 
*java.sql.DatabaseMetaData.getCatalogTerm()*

public |java.lang.String| getCatalogTerm()
  throws |java.sql.SQLException|
         
Retrieves the database vendor's preferred term for "catalog". 


    Returns: the vendor term for "catalog" 
*java.sql.DatabaseMetaData.getColumnPrivileges(String,String,String,String)*

public |java.sql.ResultSet| getColumnPrivileges(
  java.lang.String catalog,
  java.lang.String schema,
  java.lang.String table,
  java.lang.String columnNamePattern)
  throws |java.sql.SQLException|
         
Retrieves a description of the access rights for a table's columns. 

Only privileges matching the column name criteria are returned. They are 
ordered by COLUMN_NAME and PRIVILEGE. 

Each privilige description has the following columns: 

TABLE_CAT String => table catalog (may be null) TABLE_SCHEM String => table 
schema (may be null) TABLE_NAME String => table name COLUMN_NAME String => 
column name GRANTOR => grantor of access (may be null) GRANTEE String => 
grantee of access PRIVILEGE String => name of access (SELECT, INSERT, UPDATE, 
REFRENCES, ...) IS_GRANTABLE String => "YES" if grantee is permitted to grant 
to others; "NO" if not; null if unknown 

    catalog - a catalog name; must match the catalog name as it is stored in the database; "" 
       retrieves those without a catalog; null means that the catalog name 
       should not be used to narrow the search 
    schema - a schema name; must match the schema name as it is stored in the database; "" 
       retrieves those without a schema; null means that the schema name should 
       not be used to narrow the search 
    table - a table name; must match the table name as it is stored in the database 
    columnNamePattern - a column name pattern; must match the column name as it is stored in the 
       database 

    Returns: ResultSet - each row is a column privilege description 
*java.sql.DatabaseMetaData.getColumns(String,String,String,String)*

public |java.sql.ResultSet| getColumns(
  java.lang.String catalog,
  java.lang.String schemaPattern,
  java.lang.String tableNamePattern,
  java.lang.String columnNamePattern)
  throws |java.sql.SQLException|
         
Retrieves a description of table columns available in the specified catalog. 

Only column descriptions matching the catalog, schema, table and column name 
criteria are returned. They are ordered by TABLE_SCHEM, TABLE_NAME, and 
ORDINAL_POSITION. 

Each column description has the following columns: 

TABLE_CAT String => table catalog (may be null) TABLE_SCHEM String => table 
schema (may be null) TABLE_NAME String => table name COLUMN_NAME String => 
column name DATA_TYPE int => SQL type from java.sql.Types TYPE_NAME String => 
Data source dependent type name, for a UDT the type name is fully qualified 
COLUMN_SIZE int => column size. For char or date types this is the maximum 
number of characters, for numeric or decimal types this is precision. 
BUFFER_LENGTH is not used. DECIMAL_DIGITS int => the number of fractional 
digits NUM_PREC_RADIX int => Radix (typically either 10 or 2) NULLABLE int => 
is NULL allowed. 

columnNoNulls - might not allow NULL values columnNullable - definitely allows 
NULL values columnNullableUnknown - nullability unknown 

REMARKS String => comment describing column (may be null) COLUMN_DEF String => 
default value (may be null) SQL_DATA_TYPE int => unused SQL_DATETIME_SUB int => 
unused CHAR_OCTET_LENGTH int => for char types the maximum number of bytes in 
the column ORDINAL_POSITION int	=> index of column in table (starting at 1) 
IS_NULLABLE String => "NO" means column definitely does not allow NULL values; 
"YES" means the column might allow NULL values. An empty string means nobody 
knows. SCOPE_CATLOG String => catalog of table that is the scope of a reference 
attribute (null if DATA_TYPE isn't REF) SCOPE_SCHEMA String => schema of table 
that is the scope of a reference attribute (null if the DATA_TYPE isn't REF) 
SCOPE_TABLE String => table name that this the scope of a reference attribure 
(null if the DATA_TYPE isn't REF) SOURCE_DATA_TYPE short => source type of a 
distinct type or user-generated Ref type, SQL type from java.sql.Types (null if 
DATA_TYPE isn't DISTINCT or user-generated REF) 

    catalog - a catalog name; must match the catalog name as it is stored in the database; "" 
       retrieves those without a catalog; null means that the catalog name 
       should not be used to narrow the search 
    schemaPattern - a schema name pattern; must match the schema name as it is stored in the 
       database; "" retrieves those without a schema; null means that the 
       schema name should not be used to narrow the search 
    tableNamePattern - a table name pattern; must match the table name as it is stored in the database 
    columnNamePattern - a column name pattern; must match the column name as it is stored in the 
       database 

    Returns: ResultSet - each row is a column description 
*java.sql.DatabaseMetaData.getConnection()*

public |java.sql.Connection| getConnection()
  throws |java.sql.SQLException|
         
Retrieves the connection that produced this metadata object. 


    Returns: the connection that produced this metadata object 
*java.sql.DatabaseMetaData.getCrossReference(String,String,String,String,String,String)*

public |java.sql.ResultSet| getCrossReference(
  java.lang.String primaryCatalog,
  java.lang.String primarySchema,
  java.lang.String primaryTable,
  java.lang.String foreignCatalog,
  java.lang.String foreignSchema,
  java.lang.String foreignTable)
  throws |java.sql.SQLException|
         
Retrieves a description of the foreign key columns in the given foreign key 
table that reference the primary key columns of the given primary key table 
(describe how one table imports another's key). This should normally return a 
single foreign key/primary key pair because most tables import a foreign key 
from a table only once. They are ordered by FKTABLE_CAT, FKTABLE_SCHEM, 
FKTABLE_NAME, and KEY_SEQ. 

Each foreign key column description has the following columns: 

PKTABLE_CAT String => primary key table catalog (may be null) PKTABLE_SCHEM 
String => primary key table schema (may be null) PKTABLE_NAME String => primary 
key table name PKCOLUMN_NAME String => primary key column name FKTABLE_CAT 
String => foreign key table catalog (may be null) being exported (may be null) 
FKTABLE_SCHEM String => foreign key table schema (may be null) being exported 
(may be null) FKTABLE_NAME String => foreign key table name being exported 
FKCOLUMN_NAME String => foreign key column name being exported KEY_SEQ short => 
sequence number within foreign key UPDATE_RULE short => What happens to foreign 
key when primary is updated: 

importedNoAction - do not allow update of primary key if it has been imported 
importedKeyCascade - change imported key to agree with primary key update 
importedKeySetNull - change imported key to NULL if its primary key has been 
updated importedKeySetDefault - change imported key to default values if its 
primary key has been updated importedKeyRestrict - same as importedKeyNoAction 
(for ODBC 2.x compatibility) 

DELETE_RULE short => What happens to the foreign key when primary is deleted. 

importedKeyNoAction - do not allow delete of primary key if it has been 
imported importedKeyCascade - delete rows that import a deleted key 
importedKeySetNull - change imported key to NULL if its primary key has been 
deleted importedKeyRestrict - same as importedKeyNoAction (for ODBC 2.x 
compatibility) importedKeySetDefault - change imported key to default if its 
primary key has been deleted 

FK_NAME String => foreign key name (may be null) PK_NAME String => primary key 
name (may be null) DEFERRABILITY short => can the evaluation of foreign key 
constraints be deferred until commit 

importedKeyInitiallyDeferred - see SQL92 for definition 
importedKeyInitiallyImmediate - see SQL92 for definition 
importedKeyNotDeferrable - see SQL92 for definition 



    primaryCatalog - a catalog name; must match the catalog name as it is stored in the database; "" 
       retrieves those without a catalog; null means drop catalog name from the 
       selection criteria 
    primarySchema - a schema name; must match the schema name as it is stored in the database; "" 
       retrieves those without a schema; null means drop schema name from the 
       selection criteria 
    primaryTable - the name of the table that exports the key; must match the table name as it is 
       stored in the database 
    foreignCatalog - a catalog name; must match the catalog name as it is stored in the database; "" 
       retrieves those without a catalog; null means drop catalog name from the 
       selection criteria 
    foreignSchema - a schema name; must match the schema name as it is stored in the database; "" 
       retrieves those without a schema; null means drop schema name from the 
       selection criteria 
    foreignTable - the name of the table that imports the key; must match the table name as it is 
       stored in the database 

    Returns: ResultSet - each row is a foreign key column description 
*java.sql.DatabaseMetaData.getDatabaseMajorVersion()*

public int getDatabaseMajorVersion()
  throws |java.sql.SQLException|
         
Retrieves the major version number of the underlying database. 


    Returns: the underlying database's major version 
*java.sql.DatabaseMetaData.getDatabaseMinorVersion()*

public int getDatabaseMinorVersion()
  throws |java.sql.SQLException|
         
Retrieves the minor version number of the underlying database. 


    Returns: underlying database's minor version 
*java.sql.DatabaseMetaData.getDatabaseProductName()*

public |java.lang.String| getDatabaseProductName()
  throws |java.sql.SQLException|
         
Retrieves the name of this database product. 


    Returns: database product name 
*java.sql.DatabaseMetaData.getDatabaseProductVersion()*

public |java.lang.String| getDatabaseProductVersion()
  throws |java.sql.SQLException|
         
Retrieves the version number of this database product. 


    Returns: database version number 
*java.sql.DatabaseMetaData.getDefaultTransactionIsolation()*

public int getDefaultTransactionIsolation()
  throws |java.sql.SQLException|
         
Retrieves this database's default transaction isolation level. The possible 
values are defined in java.sql.Connection. 


    Returns: the default isolation level 
*java.sql.DatabaseMetaData.getDriverMajorVersion()*

public int getDriverMajorVersion()

Retrieves this JDBC driver's major version number. 


    Returns: JDBC driver major version 
*java.sql.DatabaseMetaData.getDriverMinorVersion()*

public int getDriverMinorVersion()

Retrieves this JDBC driver's minor version number. 


    Returns: JDBC driver minor version number 
*java.sql.DatabaseMetaData.getDriverName()*

public |java.lang.String| getDriverName()
  throws |java.sql.SQLException|
         
Retrieves the name of this JDBC driver. 


    Returns: JDBC driver name 
*java.sql.DatabaseMetaData.getDriverVersion()*

public |java.lang.String| getDriverVersion()
  throws |java.sql.SQLException|
         
Retrieves the version number of this JDBC driver as a String. 


    Returns: JDBC driver version 
*java.sql.DatabaseMetaData.getExportedKeys(String,String,String)*

public |java.sql.ResultSet| getExportedKeys(
  java.lang.String catalog,
  java.lang.String schema,
  java.lang.String table)
  throws |java.sql.SQLException|
         
Retrieves a description of the foreign key columns that reference the given 
table's primary key columns (the foreign keys exported by a table). They are 
ordered by FKTABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME, and KEY_SEQ. 

Each foreign key column description has the following columns: 

PKTABLE_CAT String => primary key table catalog (may be null) PKTABLE_SCHEM 
String => primary key table schema (may be null) PKTABLE_NAME String => primary 
key table name PKCOLUMN_NAME String => primary key column name FKTABLE_CAT 
String => foreign key table catalog (may be null) being exported (may be null) 
FKTABLE_SCHEM String => foreign key table schema (may be null) being exported 
(may be null) FKTABLE_NAME String => foreign key table name being exported 
FKCOLUMN_NAME String => foreign key column name being exported KEY_SEQ short => 
sequence number within foreign key UPDATE_RULE short => What happens to foreign 
key when primary is updated: 

importedNoAction - do not allow update of primary key if it has been imported 
importedKeyCascade - change imported key to agree with primary key update 
importedKeySetNull - change imported key to NULL if its primary key has been 
updated importedKeySetDefault - change imported key to default values if its 
primary key has been updated importedKeyRestrict - same as importedKeyNoAction 
(for ODBC 2.x compatibility) 

DELETE_RULE short => What happens to the foreign key when primary is deleted. 

importedKeyNoAction - do not allow delete of primary key if it has been 
imported importedKeyCascade - delete rows that import a deleted key 
importedKeySetNull - change imported key to NULL if its primary key has been 
deleted importedKeyRestrict - same as importedKeyNoAction (for ODBC 2.x 
compatibility) importedKeySetDefault - change imported key to default if its 
primary key has been deleted 

FK_NAME String => foreign key name (may be null) PK_NAME String => primary key 
name (may be null) DEFERRABILITY short => can the evaluation of foreign key 
constraints be deferred until commit 

importedKeyInitiallyDeferred - see SQL92 for definition 
importedKeyInitiallyImmediate - see SQL92 for definition 
importedKeyNotDeferrable - see SQL92 for definition 



    catalog - a catalog name; must match the catalog name as it is stored in this database; 
       "" retrieves those without a catalog; null means that the catalog name 
       should not be used to narrow the search 
    schema - a schema name; must match the schema name as it is stored in the database; "" 
       retrieves those without a schema; null means that the schema name should 
       not be used to narrow the search 
    table - a table name; must match the table name as it is stored in this database 

    Returns: a ResultSet object in which each row is a foreign key column description 
*java.sql.DatabaseMetaData.getExtraNameCharacters()*

public |java.lang.String| getExtraNameCharacters()
  throws |java.sql.SQLException|
         
Retrieves all the "extra" characters that can be used in unquoted identifier 
names (those beyond a-z, A-Z, 0-9 and _). 


    Returns: the string containing the extra characters 
*java.sql.DatabaseMetaData.getIdentifierQuoteString()*

public |java.lang.String| getIdentifierQuoteString()
  throws |java.sql.SQLException|
         
Retrieves the string used to quote SQL identifiers. This method returns a space 
" " if identifier quoting is not supported. 


    Returns: the quoting string or a space if quoting is not supported 
*java.sql.DatabaseMetaData.getImportedKeys(String,String,String)*

public |java.sql.ResultSet| getImportedKeys(
  java.lang.String catalog,
  java.lang.String schema,
  java.lang.String table)
  throws |java.sql.SQLException|
         
Retrieves a description of the primary key columns that are referenced by a 
table's foreign key columns (the primary keys imported by a table). They are 
ordered by PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, and KEY_SEQ. 

Each primary key column description has the following columns: 

PKTABLE_CAT String => primary key table catalog being imported (may be null) 
PKTABLE_SCHEM String => primary key table schema being imported (may be null) 
PKTABLE_NAME String => primary key table name being imported PKCOLUMN_NAME 
String => primary key column name being imported FKTABLE_CAT String => foreign 
key table catalog (may be null) FKTABLE_SCHEM String => foreign key table 
schema (may be null) FKTABLE_NAME String => foreign key table name 
FKCOLUMN_NAME String => foreign key column name KEY_SEQ short => sequence 
number within a foreign key UPDATE_RULE short => What happens to a foreign key 
when the primary key is updated: 

importedNoAction - do not allow update of primary key if it has been imported 
importedKeyCascade - change imported key to agree with primary key update 
importedKeySetNull - change imported key to NULL if its primary key has been 
updated importedKeySetDefault - change imported key to default values if its 
primary key has been updated importedKeyRestrict - same as importedKeyNoAction 
(for ODBC 2.x compatibility) 

DELETE_RULE short => What happens to the foreign key when primary is deleted. 

importedKeyNoAction - do not allow delete of primary key if it has been 
imported importedKeyCascade - delete rows that import a deleted key 
importedKeySetNull - change imported key to NULL if its primary key has been 
deleted importedKeyRestrict - same as importedKeyNoAction (for ODBC 2.x 
compatibility) importedKeySetDefault - change imported key to default if its 
primary key has been deleted 

FK_NAME String => foreign key name (may be null) PK_NAME String => primary key 
name (may be null) DEFERRABILITY short => can the evaluation of foreign key 
constraints be deferred until commit 

importedKeyInitiallyDeferred - see SQL92 for definition 
importedKeyInitiallyImmediate - see SQL92 for definition 
importedKeyNotDeferrable - see SQL92 for definition 



    catalog - a catalog name; must match the catalog name as it is stored in the database; "" 
       retrieves those without a catalog; null means that the catalog name 
       should not be used to narrow the search 
    schema - a schema name; must match the schema name as it is stored in the database; "" 
       retrieves those without a schema; null means that the schema name should 
       not be used to narrow the search 
    table - a table name; must match the table name as it is stored in the database 

    Returns: ResultSet - each row is a primary key column description 
*java.sql.DatabaseMetaData.getIndexInfo(String,String,String,boolean,boolean)*

public |java.sql.ResultSet| getIndexInfo(
  java.lang.String catalog,
  java.lang.String schema,
  java.lang.String table,
  boolean unique,
  boolean approximate)
  throws |java.sql.SQLException|
         
Retrieves a description of the given table's indices and statistics. They are 
ordered by NON_UNIQUE, TYPE, INDEX_NAME, and ORDINAL_POSITION. 

Each index column description has the following columns: 

TABLE_CAT String => table catalog (may be null) TABLE_SCHEM String => table 
schema (may be null) TABLE_NAME String => table name NON_UNIQUE boolean => Can 
index values be non-unique. false when TYPE is tableIndexStatistic 
INDEX_QUALIFIER String => index catalog (may be null); null when TYPE is 
tableIndexStatistic INDEX_NAME String => index name; null when TYPE is 
tableIndexStatistic TYPE short => index type: 

tableIndexStatistic - this identifies table statistics that are returned in 
conjuction with a table's index descriptions tableIndexClustered - this is a 
clustered index tableIndexHashed - this is a hashed index tableIndexOther - 
this is some other style of index 

ORDINAL_POSITION short => column sequence number within index; zero when TYPE 
is tableIndexStatistic COLUMN_NAME String => column name; null when TYPE is 
tableIndexStatistic ASC_OR_DESC String => column sort sequence, "A" => 
ascending, "D" => descending, may be null if sort sequence is not supported; 
null when TYPE is tableIndexStatistic CARDINALITY int => When TYPE is 
tableIndexStatistic, then this is the number of rows in the table; otherwise, 
it is the number of unique values in the index. PAGES int => When TYPE is 
tableIndexStatisic then this is the number of pages used for the table, 
otherwise it is the number of pages used for the current index. 
FILTER_CONDITION String => Filter condition, if any. (may be null) 

    catalog - a catalog name; must match the catalog name as it is stored in this database; 
       "" retrieves those without a catalog; null means that the catalog name 
       should not be used to narrow the search 
    schema - a schema name; must match the schema name as it is stored in this database; "" 
       retrieves those without a schema; null means that the schema name should 
       not be used to narrow the search 
    table - a table name; must match the table name as it is stored in this database 
    unique - when true, return only indices for unique values; when false, return indices 
       regardless of whether unique or not 
    approximate - when true, result is allowed to reflect approximate or out of data values; when 
       false, results are requested to be accurate 

    Returns: ResultSet - each row is an index column description 
*java.sql.DatabaseMetaData.getJDBCMajorVersion()*

public int getJDBCMajorVersion()
  throws |java.sql.SQLException|
         
Retrieves the major JDBC version number for this driver. 


    Returns: JDBC version major number 
*java.sql.DatabaseMetaData.getJDBCMinorVersion()*

public int getJDBCMinorVersion()
  throws |java.sql.SQLException|
         
Retrieves the minor JDBC version number for this driver. 


    Returns: JDBC version minor number 
*java.sql.DatabaseMetaData.getMaxBinaryLiteralLength()*

public int getMaxBinaryLiteralLength()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of hex characters this database allows in an 
inline binary literal. 


    Returns: max the maximum length (in hex characters) for a binary literal; a result of 
             zero means that there is no limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxCatalogNameLength()*

public int getMaxCatalogNameLength()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of characters that this database allows in a 
catalog name. 


    Returns: the maximum number of characters allowed in a catalog name; a result of zero 
             means that there is no limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxCharLiteralLength()*

public int getMaxCharLiteralLength()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of characters this database allows for a character 
literal. 


    Returns: the maximum number of characters allowed for a character literal; a result of 
             zero means that there is no limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxColumnNameLength()*

public int getMaxColumnNameLength()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of characters this database allows for a column 
name. 


    Returns: the maximum number of characters allowed for a column name; a result of zero 
             means that there is no limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxColumnsInGroupBy()*

public int getMaxColumnsInGroupBy()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of columns this database allows in a GROUP BY 
clause. 


    Returns: the maximum number of columns allowed; a result of zero means that there is no 
             limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxColumnsInIndex()*

public int getMaxColumnsInIndex()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of columns this database allows in an index. 


    Returns: the maximum number of columns allowed; a result of zero means that there is no 
             limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxColumnsInOrderBy()*

public int getMaxColumnsInOrderBy()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of columns this database allows in an ORDER BY 
clause. 


    Returns: the maximum number of columns allowed; a result of zero means that there is no 
             limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxColumnsInSelect()*

public int getMaxColumnsInSelect()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of columns this database allows in a SELECT list. 


    Returns: the maximum number of columns allowed; a result of zero means that there is no 
             limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxColumnsInTable()*

public int getMaxColumnsInTable()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of columns this database allows in a table. 


    Returns: the maximum number of columns allowed; a result of zero means that there is no 
             limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxConnections()*

public int getMaxConnections()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of concurrent connections to this database that 
are possible. 


    Returns: the maximum number of active connections possible at one time; a result of zero 
             means that there is no limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxCursorNameLength()*

public int getMaxCursorNameLength()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of characters that this database allows in a 
cursor name. 


    Returns: the maximum number of characters allowed in a cursor name; a result of zero 
             means that there is no limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxIndexLength()*

public int getMaxIndexLength()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of bytes this database allows for an index, 
including all of the parts of the index. 


    Returns: the maximum number of bytes allowed; this limit includes the composite of all 
             the constituent parts of the index; a result of zero means that 
             there is no limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxProcedureNameLength()*

public int getMaxProcedureNameLength()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of characters that this database allows in a 
procedure name. 


    Returns: the maximum number of characters allowed in a procedure name; a result of zero 
             means that there is no limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxRowSize()*

public int getMaxRowSize()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of bytes this database allows in a single row. 


    Returns: the maximum number of bytes allowed for a row; a result of zero means that 
             there is no limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxSchemaNameLength()*

public int getMaxSchemaNameLength()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of characters that this database allows in a 
schema name. 


    Returns: the maximum number of characters allowed in a schema name; a result of zero 
             means that there is no limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxStatementLength()*

public int getMaxStatementLength()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of characters this database allows in an SQL 
statement. 


    Returns: the maximum number of characters allowed for an SQL statement; a result of zero 
             means that there is no limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxStatements()*

public int getMaxStatements()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of active statements to this database that can be 
open at the same time. 


    Returns: the maximum number of statements that can be open at one time; a result of zero 
             means that there is no limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxTableNameLength()*

public int getMaxTableNameLength()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of characters this database allows in a table 
name. 


    Returns: the maximum number of characters allowed for a table name; a result of zero 
             means that there is no limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxTablesInSelect()*

public int getMaxTablesInSelect()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of tables this database allows in a SELECT 
statement. 


    Returns: the maximum number of tables allowed in a SELECT statement; a result of zero 
             means that there is no limit or the limit is not known 
*java.sql.DatabaseMetaData.getMaxUserNameLength()*

public int getMaxUserNameLength()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of characters this database allows in a user name. 


    Returns: the maximum number of characters allowed for a user name; a result of zero 
             means that there is no limit or the limit is not known 
*java.sql.DatabaseMetaData.getNumericFunctions()*

public |java.lang.String| getNumericFunctions()
  throws |java.sql.SQLException|
         
Retrieves a comma-separated list of math functions available with this 
database. These are the Open /Open CLI math function names used in the JDBC 
function escape clause. 


    Returns: the list of math functions supported by this database 
*java.sql.DatabaseMetaData.getPrimaryKeys(String,String,String)*

public |java.sql.ResultSet| getPrimaryKeys(
  java.lang.String catalog,
  java.lang.String schema,
  java.lang.String table)
  throws |java.sql.SQLException|
         
Retrieves a description of the given table's primary key columns. They are 
ordered by COLUMN_NAME. 

Each primary key column description has the following columns: 

TABLE_CAT String => table catalog (may be null) TABLE_SCHEM String => table 
schema (may be null) TABLE_NAME String => table name COLUMN_NAME String => 
column name KEY_SEQ short => sequence number within primary key PK_NAME String 
=> primary key name (may be null) 

    catalog - a catalog name; must match the catalog name as it is stored in the database; "" 
       retrieves those without a catalog; null means that the catalog name 
       should not be used to narrow the search 
    schema - a schema name; must match the schema name as it is stored in the database; "" 
       retrieves those without a schema; null means that the schema name should 
       not be used to narrow the search 
    table - a table name; must match the table name as it is stored in the database 

    Returns: ResultSet - each row is a primary key column description 
*java.sql.DatabaseMetaData.getProcedureColumns(String,String,String,String)*

public |java.sql.ResultSet| getProcedureColumns(
  java.lang.String catalog,
  java.lang.String schemaPattern,
  java.lang.String procedureNamePattern,
  java.lang.String columnNamePattern)
  throws |java.sql.SQLException|
         
Retrieves a description of the given catalog's stored procedure parameter and 
result columns. 

Only descriptions matching the schema, procedure and parameter name criteria 
are returned. They are ordered by PROCEDURE_SCHEM and PROCEDURE_NAME. Within 
this, the return value, if any, is first. Next are the parameter descriptions 
in call order. The column descriptions follow in column number order. 

Each row in the ResultSet is a parameter description or column description with 
the following fields: 

PROCEDURE_CAT String => procedure catalog (may be null) PROCEDURE_SCHEM String 
=> procedure schema (may be null) PROCEDURE_NAME String => procedure name 
COLUMN_NAME String => column/parameter name COLUMN_TYPE Short => kind of 
column/parameter: 

procedureColumnUnknown - nobody knows procedureColumnIn - IN parameter 
procedureColumnInOut - INOUT parameter procedureColumnOut - OUT parameter 
procedureColumnReturn - procedure return value procedureColumnResult - result 
column in ResultSet 

DATA_TYPE int => SQL type from java.sql.Types TYPE_NAME String => SQL type 
name, for a UDT type the type name is fully qualified PRECISION int => 
precision LENGTH int => length in bytes of data SCALE short => scale RADIX 
short => radix NULLABLE short => can it contain NULL. 

procedureNoNulls - does not allow NULL values procedureNullable - allows NULL 
values procedureNullableUnknown - nullability unknown 

REMARKS String => comment describing parameter/column 

Note: Some databases may not return the column descriptions for a procedure. 
Additional columns beyond REMARKS can be defined by the database. 

    catalog - a catalog name; must match the catalog name as it is stored in the database; "" 
       retrieves those without a catalog; null means that the catalog name 
       should not be used to narrow the search 
    schemaPattern - a schema name pattern; must match the schema name as it is stored in the 
       database; "" retrieves those without a schema; null means that the 
       schema name should not be used to narrow the search 
    procedureNamePattern - a procedure name pattern; must match the procedure name as it is stored in the 
       database 
    columnNamePattern - a column name pattern; must match the column name as it is stored in the 
       database 

    Returns: ResultSet - each row describes a stored procedure parameter or column 
*java.sql.DatabaseMetaData.getProcedures(String,String,String)*

public |java.sql.ResultSet| getProcedures(
  java.lang.String catalog,
  java.lang.String schemaPattern,
  java.lang.String procedureNamePattern)
  throws |java.sql.SQLException|
         
Retrieves a description of the stored procedures available in the given 
catalog. 

Only procedure descriptions matching the schema and procedure name criteria are 
returned. They are ordered by PROCEDURE_SCHEM and PROCEDURE_NAME. 

Each procedure description has the the following columns: 

PROCEDURE_CAT String => procedure catalog (may be null) PROCEDURE_SCHEM String 
=> procedure schema (may be null) PROCEDURE_NAME String => procedure name 
reserved for future use reserved for future use reserved for future use REMARKS 
String => explanatory comment on the procedure PROCEDURE_TYPE short => kind of 
procedure: 

procedureResultUnknown - May return a result procedureNoResult - Does not 
return a result procedureReturnsResult - Returns a result 



    catalog - a catalog name; must match the catalog name as it is stored in the database; "" 
       retrieves those without a catalog; null means that the catalog name 
       should not be used to narrow the search 
    schemaPattern - a schema name pattern; must match the schema name as it is stored in the 
       database; "" retrieves those without a schema; null means that the 
       schema name should not be used to narrow the search 
    procedureNamePattern - a procedure name pattern; must match the procedure name as it is stored in the 
       database 

    Returns: ResultSet - each row is a procedure description 
*java.sql.DatabaseMetaData.getProcedureTerm()*

public |java.lang.String| getProcedureTerm()
  throws |java.sql.SQLException|
         
Retrieves the database vendor's preferred term for "procedure". 


    Returns: the vendor term for "procedure" 
*java.sql.DatabaseMetaData.getResultSetHoldability()*

public int getResultSetHoldability()
  throws |java.sql.SQLException|
         
Retrieves the default holdability of this ResultSet object. 


    Returns: the default holdability; either ResultSet.HOLD_CURSORS_OVER_COMMIT or 
             ResultSet.CLOSE_CURSORS_AT_COMMIT 
*java.sql.DatabaseMetaData.getSchemas()*

public |java.sql.ResultSet| getSchemas()
  throws |java.sql.SQLException|
         
Retrieves the schema names available in this database. The results are ordered 
by schema name. 

The schema column is: 

TABLE_SCHEM String => schema name TABLE_CATALOG String => catalog name (may be 
null) 


    Returns: a ResultSet object in which each row is a schema decription 
*java.sql.DatabaseMetaData.getSchemaTerm()*

public |java.lang.String| getSchemaTerm()
  throws |java.sql.SQLException|
         
Retrieves the database vendor's preferred term for "schema". 


    Returns: the vendor term for "schema" 
*java.sql.DatabaseMetaData.getSearchStringEscape()*

public |java.lang.String| getSearchStringEscape()
  throws |java.sql.SQLException|
         
Retrieves the string that can be used to escape wildcard characters. This is 
the string that can be used to escape '_' or '%' in the catalog search 
parameters that are a pattern (and therefore use one of the wildcard 
characters). 

The '_' character represents any single character; the '%' character represents 
any sequence of zero or more characters. 


    Returns: the string used to escape wildcard characters 
*java.sql.DatabaseMetaData.getSQLKeywords()*

public |java.lang.String| getSQLKeywords()
  throws |java.sql.SQLException|
         
Retrieves a comma-separated list of all of this database's SQL keywords that 
are NOT also SQL92 keywords. 


    Returns: the list of this database's keywords that are not also SQL92 keywords 
*java.sql.DatabaseMetaData.getSQLStateType()*

public int getSQLStateType()
  throws |java.sql.SQLException|
         
Indicates whether the SQLSTATE returned by SQLException.getSQLState is X/Open 
(now known as Open Group) SQL CLI or SQL99. 


    Returns: the type of SQLSTATE; one of: sqlStateXOpen or sqlStateSQL99 
*java.sql.DatabaseMetaData.getStringFunctions()*

public |java.lang.String| getStringFunctions()
  throws |java.sql.SQLException|
         
Retrieves a comma-separated list of string functions available with this 
database. These are the Open Group CLI string function names used in the JDBC 
function escape clause. 


    Returns: the list of string functions supported by this database 
*java.sql.DatabaseMetaData.getSuperTables(String,String,String)*

public |java.sql.ResultSet| getSuperTables(
  java.lang.String catalog,
  java.lang.String schemaPattern,
  java.lang.String tableNamePattern)
  throws |java.sql.SQLException|
         
Retrieves a description of the table hierarchies defined in a particular schema 
in this database. 

Only supertable information for tables matching the catalog, schema and table 
name are returned. The table name parameter may be a fully- qualified name, in 
which case, the catalog and schemaPattern parameters are ignored. If a table 
does not have a super table, it is not listed here. Supertables have to be 
defined in the same catalog and schema as the sub tables. Therefore, the type 
description does not need to include this information for the supertable. 

Each type description has the following columns: 

TABLE_CAT String => the type's catalog (may be null) TABLE_SCHEM String => 
type's schema (may be null) TABLE_NAME String => type name SUPERTABLE_NAME 
String => the direct super type's name 

Note: If the driver does not support type hierarchies, an empty result set is 
returned. 

    catalog - a catalog name; "" retrieves those without a catalog; null means drop catalog 
       name from the selection criteria 
    schemaPattern - a schema name pattern; "" retrieves those without a schema 
    tableNamePattern - a table name pattern; may be a fully-qualified name 

    Returns: a ResultSet object in which each row is a type description 
*java.sql.DatabaseMetaData.getSuperTypes(String,String,String)*

public |java.sql.ResultSet| getSuperTypes(
  java.lang.String catalog,
  java.lang.String schemaPattern,
  java.lang.String typeNamePattern)
  throws |java.sql.SQLException|
         
Retrieves a description of the user-defined type (UDT) hierarchies defined in a 
particular schema in this database. Only the immediate super type/ sub type 
relationship is modeled. 

Only supertype information for UDTs matching the catalog, schema, and type name 
is returned. The type name parameter may be a fully-qualified name. When the 
UDT name supplied is a fully-qualified name, the catalog and schemaPattern 
parameters are ignored. 

If a UDT does not have a direct super type, it is not listed here. A row of the 
ResultSet object returned by this method describes the designated UDT and a 
direct supertype. A row has the following columns: 

TYPE_CAT String => the UDT's catalog (may be null) TYPE_SCHEM String => UDT's 
schema (may be null) TYPE_NAME String => type name of the UDT SUPERTYPE_CAT 
String => the direct super type's catalog (may be null) SUPERTYPE_SCHEM String 
=> the direct super type's schema (may be null) SUPERTYPE_NAME String => the 
direct super type's name 

Note: If the driver does not support type hierarchies, an empty result set is 
returned. 

    catalog - a catalog name; "" retrieves those without a catalog; null means drop catalog 
       name from the selection criteria 
    schemaPattern - a schema name pattern; "" retrieves those without a schema 
    typeNamePattern - a UDT name pattern; may be a fully-qualified name 

    Returns: a ResultSet object in which a row gives information about the designated UDT 
*java.sql.DatabaseMetaData.getSystemFunctions()*

public |java.lang.String| getSystemFunctions()
  throws |java.sql.SQLException|
         
Retrieves a comma-separated list of system functions available with this 
database. These are the Open Group CLI system function names used in the JDBC 
function escape clause. 


    Returns: a list of system functions supported by this database 
*java.sql.DatabaseMetaData.getTablePrivileges(String,String,String)*

public |java.sql.ResultSet| getTablePrivileges(
  java.lang.String catalog,
  java.lang.String schemaPattern,
  java.lang.String tableNamePattern)
  throws |java.sql.SQLException|
         
Retrieves a description of the access rights for each table available in a 
catalog. Note that a table privilege applies to one or more columns in the 
table. It would be wrong to assume that this privilege applies to all columns 
(this may be true for some systems but is not true for all.) 

Only privileges matching the schema and table name criteria are returned. They 
are ordered by TABLE_SCHEM, TABLE_NAME, and PRIVILEGE. 

Each privilige description has the following columns: 

TABLE_CAT String => table catalog (may be null) TABLE_SCHEM String => table 
schema (may be null) TABLE_NAME String => table name GRANTOR => grantor of 
access (may be null) GRANTEE String => grantee of access PRIVILEGE String => 
name of access (SELECT, INSERT, UPDATE, REFRENCES, ...) IS_GRANTABLE String => 
"YES" if grantee is permitted to grant to others; "NO" if not; null if unknown 

    catalog - a catalog name; must match the catalog name as it is stored in the database; "" 
       retrieves those without a catalog; null means that the catalog name 
       should not be used to narrow the search 
    schemaPattern - a schema name pattern; must match the schema name as it is stored in the 
       database; "" retrieves those without a schema; null means that the 
       schema name should not be used to narrow the search 
    tableNamePattern - a table name pattern; must match the table name as it is stored in the database 

    Returns: ResultSet - each row is a table privilege description 
*java.sql.DatabaseMetaData.getTables(String,String,String,String[])*

public |java.sql.ResultSet| getTables(
  java.lang.String catalog,
  java.lang.String schemaPattern,
  java.lang.String tableNamePattern,
  java.lang.String[] types)
  throws |java.sql.SQLException|
         
Retrieves a description of the tables available in the given catalog. Only 
table descriptions matching the catalog, schema, table name and type criteria 
are returned. They are ordered by TABLE_TYPE, TABLE_SCHEM and TABLE_NAME. 

Each table description has the following columns: 

TABLE_CAT String => table catalog (may be null) TABLE_SCHEM String => table 
schema (may be null) TABLE_NAME String => table name TABLE_TYPE String => table 
type. Typical types are "TABLE", "VIEW",	"SYSTEM TABLE", "GLOBAL TEMPORARY", 
"LOCAL TEMPORARY", "ALIAS", "SYNONYM". REMARKS String => explanatory comment on 
the table TYPE_CAT String => the types catalog (may be null) TYPE_SCHEM String 
=> the types schema (may be null) TYPE_NAME String => type name (may be null) 
SELF_REFERENCING_COL_NAME String => name of the designated "identifier" column 
of a typed table (may be null) REF_GENERATION String => specifies how values in 
SELF_REFERENCING_COL_NAME are created. Values are "SYSTEM", "USER", "DERIVED". 
(may be null) 

Note: Some databases may not return information for all tables. 

    catalog - a catalog name; must match the catalog name as it is stored in the database; "" 
       retrieves those without a catalog; null means that the catalog name 
       should not be used to narrow the search 
    schemaPattern - a schema name pattern; must match the schema name as it is stored in the 
       database; "" retrieves those without a schema; null means that the 
       schema name should not be used to narrow the search 
    tableNamePattern - a table name pattern; must match the table name as it is stored in the database 
    types - a list of table types to include; null returns all types 

    Returns: ResultSet - each row is a table description 
*java.sql.DatabaseMetaData.getTableTypes()*

public |java.sql.ResultSet| getTableTypes()
  throws |java.sql.SQLException|
         
Retrieves the table types available in this database. The results are ordered 
by table type. 

The table type is: 

TABLE_TYPE String => table type. Typical types are "TABLE", "VIEW",	"SYSTEM 
TABLE", "GLOBAL TEMPORARY", "LOCAL TEMPORARY", "ALIAS", "SYNONYM". 


    Returns: a ResultSet object in which each row has a single String column that is a table 
             type 
*java.sql.DatabaseMetaData.getTimeDateFunctions()*

public |java.lang.String| getTimeDateFunctions()
  throws |java.sql.SQLException|
         
Retrieves a comma-separated list of the time and date functions available with 
this database. 


    Returns: the list of time and date functions supported by this database 
*java.sql.DatabaseMetaData.getTypeInfo()*

public |java.sql.ResultSet| getTypeInfo()
  throws |java.sql.SQLException|
         
Retrieves a description of all the standard SQL types supported by this 
database. They are ordered by DATA_TYPE and then by how closely the data type 
maps to the corresponding JDBC SQL type. 

Each type description has the following columns: 

TYPE_NAME String => Type name DATA_TYPE int => SQL data type from 
java.sql.Types PRECISION int => maximum precision LITERAL_PREFIX String => 
prefix used to quote a literal (may be null) LITERAL_SUFFIX String => suffix 
used to quote a literal (may be null) CREATE_PARAMS String => parameters used 
in creating the type (may be null) NULLABLE short => can you use NULL for this 
type. 

typeNoNulls - does not allow NULL values typeNullable - allows NULL values 
typeNullableUnknown - nullability unknown 

CASE_SENSITIVE boolean=> is it case sensitive. SEARCHABLE short => can you use 
"WHERE" based on this type: 

typePredNone - No support typePredChar - Only supported with WHERE .. LIKE 
typePredBasic - Supported except for WHERE .. LIKE typeSearchable - Supported 
for all WHERE .. 

UNSIGNED_ATTRIBUTE boolean => is it unsigned. FIXED_PREC_SCALE boolean => can 
it be a money value. AUTO_INCREMENT boolean => can it be used for an 
auto-increment value. LOCAL_TYPE_NAME String => localized version of type name 
(may be null) MINIMUM_SCALE short => minimum scale supported MAXIMUM_SCALE 
short => maximum scale supported SQL_DATA_TYPE int => unused SQL_DATETIME_SUB 
int => unused NUM_PREC_RADIX int => usually 2 or 10 


    Returns: a ResultSet object in which each row is an SQL type description 
*java.sql.DatabaseMetaData.getUDTs(String,String,String,int[])*

public |java.sql.ResultSet| getUDTs(
  java.lang.String catalog,
  java.lang.String schemaPattern,
  java.lang.String typeNamePattern,
  int[] types)
  throws |java.sql.SQLException|
         
Retrieves a description of the user-defined types (UDTs) defined in a 
particular schema. Schema-specific UDTs may have type JAVA_OBJECT, STRUCT, or 
DISTINCT. 

Only types matching the catalog, schema, type name and type criteria are 
returned. They are ordered by DATA_TYPE, TYPE_SCHEM and TYPE_NAME. The type 
name parameter may be a fully-qualified name. In this case, the catalog and 
schemaPattern parameters are ignored. 

Each type description has the following columns: 

TYPE_CAT String => the type's catalog (may be null) TYPE_SCHEM String => type's 
schema (may be null) TYPE_NAME String => type name CLASS_NAME String => Java 
class name DATA_TYPE int => type value defined in java.sql.Types. One of 
JAVA_OBJECT, STRUCT, or DISTINCT REMARKS String => explanatory comment on the 
type BASE_TYPE short => type code of the source type of a DISTINCT type or the 
type that implements the user-generated reference type of the 
SELF_REFERENCING_COLUMN of a structured type as defined in java.sql.Types (null 
if DATA_TYPE is not DISTINCT or not STRUCT with REFERENCE_GENERATION = 
USER_DEFINED) 

Note: If the driver does not support UDTs, an empty result set is returned. 

    catalog - a catalog name; must match the catalog name as it is stored in the database; "" 
       retrieves those without a catalog; null means that the catalog name 
       should not be used to narrow the search 
    schemaPattern - a schema pattern name; must match the schema name as it is stored in the 
       database; "" retrieves those without a schema; null means that the 
       schema name should not be used to narrow the search 
    typeNamePattern - a type name pattern; must match the type name as it is stored in the database; 
       may be a fully qualified name 
    types - a list of user-defined types (JAVA_OBJECT, STRUCT, or DISTINCT) to include; 
       null returns all types 

    Returns: ResultSet object in which each row describes a UDT 
*java.sql.DatabaseMetaData.getURL()*

public |java.lang.String| getURL()
  throws |java.sql.SQLException|
         
Retrieves the URL for this DBMS. 


    Returns: the URL for this DBMS or null if it cannot be generated 
*java.sql.DatabaseMetaData.getUserName()*

public |java.lang.String| getUserName()
  throws |java.sql.SQLException|
         
Retrieves the user name as known to this database. 


    Returns: the database user name 
*java.sql.DatabaseMetaData.getVersionColumns(String,String,String)*

public |java.sql.ResultSet| getVersionColumns(
  java.lang.String catalog,
  java.lang.String schema,
  java.lang.String table)
  throws |java.sql.SQLException|
         
Retrieves a description of a table's columns that are automatically updated 
when any value in a row is updated. They are unordered. 

Each column description has the following columns: 

SCOPE short => is not used COLUMN_NAME String => column name DATA_TYPE int => 
SQL data type from java.sql.Types TYPE_NAME String => Data source-dependent 
type name COLUMN_SIZE int => precision BUFFER_LENGTH int => length of column 
value in bytes DECIMAL_DIGITS short => scale PSEUDO_COLUMN short => whether 
this is pseudo column like an Oracle ROWID 

versionColumnUnknown - may or may not be pseudo column versionColumnNotPseudo - 
is NOT a pseudo column versionColumnPseudo - is a pseudo column 



    catalog - a catalog name; must match the catalog name as it is stored in the database; "" 
       retrieves those without a catalog; null means that the catalog name 
       should not be used to narrow the search 
    schema - a schema name; must match the schema name as it is stored in the database; "" 
       retrieves those without a schema; null means that the schema name should 
       not be used to narrow the search 
    table - a table name; must match the table name as it is stored in the database 

    Returns: a ResultSet object in which each row is a column description 
*java.sql.DatabaseMetaData.insertsAreDetected(int)*

public boolean insertsAreDetected(int type)
  throws |java.sql.SQLException|
         
Retrieves whether or not a visible row insert can be detected by calling the 
method ResultSet.rowInserted. 

    type - the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, 
       ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE 

    Returns: true if changes are detected by the specified result set type; false otherwise 
*java.sql.DatabaseMetaData.isCatalogAtStart()*

public boolean isCatalogAtStart()
  throws |java.sql.SQLException|
         
Retrieves whether a catalog appears at the start of a fully qualified table 
name. If not, the catalog appears at the end. 


    Returns: true if the catalog name appears at the beginning of a fully qualified table 
             name; false otherwise 
*java.sql.DatabaseMetaData.isReadOnly()*

public boolean isReadOnly()
  throws |java.sql.SQLException|
         
Retrieves whether this database is in read-only mode. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.locatorsUpdateCopy()*

public boolean locatorsUpdateCopy()
  throws |java.sql.SQLException|
         
Indicates whether updates made to a LOB are made on a copy or directly to the 
LOB. 


    Returns: true if updates are made to a copy of the LOB; false if updates are made 
             directly to the LOB 
*java.sql.DatabaseMetaData.nullPlusNonNullIsNull()*

public boolean nullPlusNonNullIsNull()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports concatenations between NULL and 
non-NULL values being NULL. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.nullsAreSortedAtEnd()*

public boolean nullsAreSortedAtEnd()
  throws |java.sql.SQLException|
         
Retrieves whether NULL values are sorted at the end regardless of sort order. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.nullsAreSortedAtStart()*

public boolean nullsAreSortedAtStart()
  throws |java.sql.SQLException|
         
Retrieves whether NULL values are sorted at the start regardless of sort order. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.nullsAreSortedHigh()*

public boolean nullsAreSortedHigh()
  throws |java.sql.SQLException|
         
Retrieves whether NULL values are sorted high. Sorted high means that NULL 
values sort higher than any other value in a domain. In an ascending order, if 
this method returns true, NULL values will appear at the end. By contrast, the 
method nullsAreSortedAtEnd indicates whether NULL values are sorted at the end 
regardless of sort order. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.nullsAreSortedLow()*

public boolean nullsAreSortedLow()
  throws |java.sql.SQLException|
         
Retrieves whether NULL values are sorted low. Sorted low means that NULL values 
sort lower than any other value in a domain. In an ascending order, if this 
method returns true, NULL values will appear at the beginning. By contrast, the 
method nullsAreSortedAtStart indicates whether NULL values are sorted at the 
beginning regardless of sort order. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.othersDeletesAreVisible(int)*

public boolean othersDeletesAreVisible(int type)
  throws |java.sql.SQLException|
         
Retrieves whether deletes made by others are visible. 

    type - the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, 
       ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE 

    Returns: true if deletes made by others are visible for the given result set type; false 
             otherwise 
*java.sql.DatabaseMetaData.othersInsertsAreVisible(int)*

public boolean othersInsertsAreVisible(int type)
  throws |java.sql.SQLException|
         
Retrieves whether inserts made by others are visible. 

    type - the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, 
       ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE 

    Returns: true if inserts made by others are visible for the given result set type; false 
             otherwise 
*java.sql.DatabaseMetaData.othersUpdatesAreVisible(int)*

public boolean othersUpdatesAreVisible(int type)
  throws |java.sql.SQLException|
         
Retrieves whether updates made by others are visible. 

    type - the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, 
       ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE 

    Returns: true if updates made by others are visible for the given result set type; false 
             otherwise 
*java.sql.DatabaseMetaData.ownDeletesAreVisible(int)*

public boolean ownDeletesAreVisible(int type)
  throws |java.sql.SQLException|
         
Retrieves whether a result set's own deletes are visible. 

    type - the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, 
       ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE 

    Returns: true if deletes are visible for the given result set type; false otherwise 
*java.sql.DatabaseMetaData.ownInsertsAreVisible(int)*

public boolean ownInsertsAreVisible(int type)
  throws |java.sql.SQLException|
         
Retrieves whether a result set's own inserts are visible. 

    type - the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, 
       ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE 

    Returns: true if inserts are visible for the given result set type; false otherwise 
*java.sql.DatabaseMetaData.ownUpdatesAreVisible(int)*

public boolean ownUpdatesAreVisible(int type)
  throws |java.sql.SQLException|
         
Retrieves whether for the given type of ResultSet object, the result set's own 
updates are visible. 

    type - the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, 
       ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE 

    Returns: true if updates are visible for the given result set type; false otherwise 
*java.sql.DatabaseMetaData.storesLowerCaseIdentifiers()*

public boolean storesLowerCaseIdentifiers()
  throws |java.sql.SQLException|
         
Retrieves whether this database treats mixed case unquoted SQL identifiers as 
case insensitive and stores them in lower case. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.storesLowerCaseQuotedIdentifiers()*

public boolean storesLowerCaseQuotedIdentifiers()
  throws |java.sql.SQLException|
         
Retrieves whether this database treats mixed case quoted SQL identifiers as 
case insensitive and stores them in lower case. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.storesMixedCaseIdentifiers()*

public boolean storesMixedCaseIdentifiers()
  throws |java.sql.SQLException|
         
Retrieves whether this database treats mixed case unquoted SQL identifiers as 
case insensitive and stores them in mixed case. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.storesMixedCaseQuotedIdentifiers()*

public boolean storesMixedCaseQuotedIdentifiers()
  throws |java.sql.SQLException|
         
Retrieves whether this database treats mixed case quoted SQL identifiers as 
case insensitive and stores them in mixed case. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.storesUpperCaseIdentifiers()*

public boolean storesUpperCaseIdentifiers()
  throws |java.sql.SQLException|
         
Retrieves whether this database treats mixed case unquoted SQL identifiers as 
case insensitive and stores them in upper case. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.storesUpperCaseQuotedIdentifiers()*

public boolean storesUpperCaseQuotedIdentifiers()
  throws |java.sql.SQLException|
         
Retrieves whether this database treats mixed case quoted SQL identifiers as 
case insensitive and stores them in upper case. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsAlterTableWithAddColumn()*

public boolean supportsAlterTableWithAddColumn()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports ALTER TABLE with add column. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsAlterTableWithDropColumn()*

public boolean supportsAlterTableWithDropColumn()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports ALTER TABLE with drop column. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsANSI92EntryLevelSQL()*

public boolean supportsANSI92EntryLevelSQL()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports the ANSI92 entry level SQL grammar. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsANSI92FullSQL()*

public boolean supportsANSI92FullSQL()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports the ANSI92 full SQL grammar supported. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsANSI92IntermediateSQL()*

public boolean supportsANSI92IntermediateSQL()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports the ANSI92 intermediate SQL grammar 
supported. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsBatchUpdates()*

public boolean supportsBatchUpdates()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports batch updates. 


    Returns: true if this database supports batch upcates; false otherwise 
*java.sql.DatabaseMetaData.supportsCatalogsInDataManipulation()*

public boolean supportsCatalogsInDataManipulation()
  throws |java.sql.SQLException|
         
Retrieves whether a catalog name can be used in a data manipulation statement. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsCatalogsInIndexDefinitions()*

public boolean supportsCatalogsInIndexDefinitions()
  throws |java.sql.SQLException|
         
Retrieves whether a catalog name can be used in an index definition statement. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsCatalogsInPrivilegeDefinitions()*

public boolean supportsCatalogsInPrivilegeDefinitions()
  throws |java.sql.SQLException|
         
Retrieves whether a catalog name can be used in a privilege definition 
statement. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsCatalogsInProcedureCalls()*

public boolean supportsCatalogsInProcedureCalls()
  throws |java.sql.SQLException|
         
Retrieves whether a catalog name can be used in a procedure call statement. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsCatalogsInTableDefinitions()*

public boolean supportsCatalogsInTableDefinitions()
  throws |java.sql.SQLException|
         
Retrieves whether a catalog name can be used in a table definition statement. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsColumnAliasing()*

public boolean supportsColumnAliasing()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports column aliasing. 

If so, the SQL AS clause can be used to provide names for computed columns or 
to provide alias names for columns as required. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsConvert()*

public boolean supportsConvert()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports the CONVERT function between SQL 
types. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsConvert(int,int)*

public boolean supportsConvert(
  int fromType,
  int toType)
  throws |java.sql.SQLException|
         
Retrieves whether this database supports the CONVERT for two given SQL types. 

    fromType - the type to convert from; one of the type codes from the class java.sql.Types 
    toType - the type to convert to; one of the type codes from the class java.sql.Types 

    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsCoreSQLGrammar()*

public boolean supportsCoreSQLGrammar()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports the ODBC Core SQL grammar. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsCorrelatedSubqueries()*

public boolean supportsCorrelatedSubqueries()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports correlated subqueries. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsDataDefinitionAndDataManipulationTransactions()*

public boolean supportsDataDefinitionAndDataManipulationTransactions()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports both data definition and data 
manipulation statements within a transaction. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsDataManipulationTransactionsOnly()*

public boolean supportsDataManipulationTransactionsOnly()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports only data manipulation statements 
within a transaction. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsDifferentTableCorrelationNames()*

public boolean supportsDifferentTableCorrelationNames()
  throws |java.sql.SQLException|
         
Retrieves whether, when table correlation names are supported, they are 
restricted to being different from the names of the tables. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsExpressionsInOrderBy()*

public boolean supportsExpressionsInOrderBy()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports expressions in ORDER BY lists. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsExtendedSQLGrammar()*

public boolean supportsExtendedSQLGrammar()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports the ODBC Extended SQL grammar. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsFullOuterJoins()*

public boolean supportsFullOuterJoins()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports full nested outer joins. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsGetGeneratedKeys()*

public boolean supportsGetGeneratedKeys()
  throws |java.sql.SQLException|
         
Retrieves whether auto-generated keys can be retrieved after a statement has 
been executed. 


    Returns: true if auto-generated keys can be retrieved after a statement has executed; 
             false otherwise 
*java.sql.DatabaseMetaData.supportsGroupBy()*

public boolean supportsGroupBy()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports some form of GROUP BY clause. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsGroupByBeyondSelect()*

public boolean supportsGroupByBeyondSelect()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports using columns not included in the 
SELECT statement in a GROUP BY clause provided that all of the columns in the 
SELECT statement are included in the GROUP BY clause. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsGroupByUnrelated()*

public boolean supportsGroupByUnrelated()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports using a column that is not in the 
SELECT statement in a GROUP BY clause. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsIntegrityEnhancementFacility()*

public boolean supportsIntegrityEnhancementFacility()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports the SQL Integrity Enhancement 
Facility. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsLikeEscapeClause()*

public boolean supportsLikeEscapeClause()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports specifying a LIKE escape clause. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsLimitedOuterJoins()*

public boolean supportsLimitedOuterJoins()
  throws |java.sql.SQLException|
         
Retrieves whether this database provides limited support for outer joins. (This 
will be true if the method supportsFullOuterJoins returns true). 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsMinimumSQLGrammar()*

public boolean supportsMinimumSQLGrammar()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports the ODBC Minimum SQL grammar. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsMixedCaseIdentifiers()*

public boolean supportsMixedCaseIdentifiers()
  throws |java.sql.SQLException|
         
Retrieves whether this database treats mixed case unquoted SQL identifiers as 
case sensitive and as a result stores them in mixed case. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsMixedCaseQuotedIdentifiers()*

public boolean supportsMixedCaseQuotedIdentifiers()
  throws |java.sql.SQLException|
         
Retrieves whether this database treats mixed case quoted SQL identifiers as 
case sensitive and as a result stores them in mixed case. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsMultipleOpenResults()*

public boolean supportsMultipleOpenResults()
  throws |java.sql.SQLException|
         
Retrieves whether it is possible to have multiple ResultSet objects returned 
from a CallableStatement object simultaneously. 


    Returns: true if a CallableStatement object can return multiple ResultSet objects 
             simultaneously; false otherwise 
*java.sql.DatabaseMetaData.supportsMultipleResultSets()*

public boolean supportsMultipleResultSets()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports getting multiple ResultSet objects 
from a single call to the method execute. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsMultipleTransactions()*

public boolean supportsMultipleTransactions()
  throws |java.sql.SQLException|
         
Retrieves whether this database allows having multiple transactions open at 
once (on different connections). 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsNamedParameters()*

public boolean supportsNamedParameters()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports named parameters to callable 
statements. 


    Returns: true if named parameters are supported; false otherwise 
*java.sql.DatabaseMetaData.supportsNonNullableColumns()*

public boolean supportsNonNullableColumns()
  throws |java.sql.SQLException|
         
Retrieves whether columns in this database may be defined as non-nullable. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsOpenCursorsAcrossCommit()*

public boolean supportsOpenCursorsAcrossCommit()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports keeping cursors open across commits. 


    Returns: true if cursors always remain open; false if they might not remain open 
*java.sql.DatabaseMetaData.supportsOpenCursorsAcrossRollback()*

public boolean supportsOpenCursorsAcrossRollback()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports keeping cursors open across rollbacks. 


    Returns: true if cursors always remain open; false if they might not remain open 
*java.sql.DatabaseMetaData.supportsOpenStatementsAcrossCommit()*

public boolean supportsOpenStatementsAcrossCommit()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports keeping statements open across 
commits. 


    Returns: true if statements always remain open; false if they might not remain open 
*java.sql.DatabaseMetaData.supportsOpenStatementsAcrossRollback()*

public boolean supportsOpenStatementsAcrossRollback()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports keeping statements open across 
rollbacks. 


    Returns: true if statements always remain open; false if they might not remain open 
*java.sql.DatabaseMetaData.supportsOrderByUnrelated()*

public boolean supportsOrderByUnrelated()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports using a column that is not in the 
SELECT statement in an ORDER BY clause. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsOuterJoins()*

public boolean supportsOuterJoins()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports some form of outer join. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsPositionedDelete()*

public boolean supportsPositionedDelete()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports positioned DELETE statements. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsPositionedUpdate()*

public boolean supportsPositionedUpdate()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports positioned UPDATE statements. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsResultSetConcurrency(int,int)*

public boolean supportsResultSetConcurrency(
  int type,
  int concurrency)
  throws |java.sql.SQLException|
         
Retrieves whether this database supports the given concurrency type in 
combination with the given result set type. 

    type - defined in java.sql.ResultSet 
    concurrency - type defined in java.sql.ResultSet 

    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsResultSetHoldability(int)*

public boolean supportsResultSetHoldability(int holdability)
  throws |java.sql.SQLException|
         
Retrieves whether this database supports the given result set holdability. 

    holdability - one of the following constants: ResultSet.HOLD_CURSORS_OVER_COMMIT or 
       ResultSet.CLOSE_CURSORS_AT_COMMIT 

    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsResultSetType(int)*

public boolean supportsResultSetType(int type)
  throws |java.sql.SQLException|
         
Retrieves whether this database supports the given result set type. 

    type - defined in java.sql.ResultSet 

    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsSavepoints()*

public boolean supportsSavepoints()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports savepoints. 


    Returns: true if savepoints are supported; false otherwise 
*java.sql.DatabaseMetaData.supportsSchemasInDataManipulation()*

public boolean supportsSchemasInDataManipulation()
  throws |java.sql.SQLException|
         
Retrieves whether a schema name can be used in a data manipulation statement. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsSchemasInIndexDefinitions()*

public boolean supportsSchemasInIndexDefinitions()
  throws |java.sql.SQLException|
         
Retrieves whether a schema name can be used in an index definition statement. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsSchemasInPrivilegeDefinitions()*

public boolean supportsSchemasInPrivilegeDefinitions()
  throws |java.sql.SQLException|
         
Retrieves whether a schema name can be used in a privilege definition 
statement. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsSchemasInProcedureCalls()*

public boolean supportsSchemasInProcedureCalls()
  throws |java.sql.SQLException|
         
Retrieves whether a schema name can be used in a procedure call statement. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsSchemasInTableDefinitions()*

public boolean supportsSchemasInTableDefinitions()
  throws |java.sql.SQLException|
         
Retrieves whether a schema name can be used in a table definition statement. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsSelectForUpdate()*

public boolean supportsSelectForUpdate()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports SELECT FOR UPDATE statements. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsStatementPooling()*

public boolean supportsStatementPooling()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports statement pooling. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsStoredProcedures()*

public boolean supportsStoredProcedures()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports stored procedure calls that use the 
stored procedure escape syntax. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsSubqueriesInComparisons()*

public boolean supportsSubqueriesInComparisons()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports subqueries in comparison expressions. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsSubqueriesInExists()*

public boolean supportsSubqueriesInExists()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports subqueries in EXISTS expressions. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsSubqueriesInIns()*

public boolean supportsSubqueriesInIns()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports subqueries in IN statements. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsSubqueriesInQuantifieds()*

public boolean supportsSubqueriesInQuantifieds()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports subqueries in quantified expressions. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsTableCorrelationNames()*

public boolean supportsTableCorrelationNames()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports table correlation names. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsTransactionIsolationLevel(int)*

public boolean supportsTransactionIsolationLevel(int level)
  throws |java.sql.SQLException|
         
Retrieves whether this database supports the given transaction isolation level. 

    level - one of the transaction isolation levels defined in java.sql.Connection 

    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsTransactions()*

public boolean supportsTransactions()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports transactions. If not, invoking the 
method commit is a noop, and the isolation level is TRANSACTION_NONE. 


    Returns: true if transactions are supported; false otherwise 
*java.sql.DatabaseMetaData.supportsUnion()*

public boolean supportsUnion()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports SQL UNION. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.supportsUnionAll()*

public boolean supportsUnionAll()
  throws |java.sql.SQLException|
         
Retrieves whether this database supports SQL UNION ALL. 


    Returns: true if so; false otherwise 
*java.sql.DatabaseMetaData.updatesAreDetected(int)*

public boolean updatesAreDetected(int type)
  throws |java.sql.SQLException|
         
Retrieves whether or not a visible row update can be detected by calling the 
method ResultSet.rowUpdated. 

    type - the ResultSet type; one of ResultSet.TYPE_FORWARD_ONLY, 
       ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE 

    Returns: true if changes are detected by the result set type; false otherwise 
*java.sql.DatabaseMetaData.usesLocalFilePerTable()*

public boolean usesLocalFilePerTable()
  throws |java.sql.SQLException|
         
Retrieves whether this database uses a file for each table. 


    Returns: true if this database uses a local file for each table; false otherwise 
*java.sql.DatabaseMetaData.usesLocalFiles()*

public boolean usesLocalFiles()
  throws |java.sql.SQLException|
         
Retrieves whether this database stores tables in a local file. 


    Returns: true if so; false otherwise 


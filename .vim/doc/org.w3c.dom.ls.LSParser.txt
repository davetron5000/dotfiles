*org.w3c.dom.ls.LSParser* *LSParser* An interface to an object that is able to b

public interface interface LSParser


|org.w3c.dom.ls.LSParser_Description|
|org.w3c.dom.ls.LSParser_Fields|
|org.w3c.dom.ls.LSParser_Constructors|
|org.w3c.dom.ls.LSParser_Methods|

================================================================================

*org.w3c.dom.ls.LSParser_Fields*
|short_org.w3c.dom.ls.LSParser.ACTION_APPEND_AS_CHILDREN|
|short_org.w3c.dom.ls.LSParser.ACTION_INSERT_AFTER|
|short_org.w3c.dom.ls.LSParser.ACTION_INSERT_BEFORE|
|short_org.w3c.dom.ls.LSParser.ACTION_REPLACE|
|short_org.w3c.dom.ls.LSParser.ACTION_REPLACE_CHILDREN|

*org.w3c.dom.ls.LSParser_Methods*
|org.w3c.dom.ls.LSParser.abort()|Abort the loading of the document that is curr
|org.w3c.dom.ls.LSParser.getAsync()|true if the LSParser is asynchronous,   fal
|org.w3c.dom.ls.LSParser.getBusy()|true if the LSParser is currently busy   loa
|org.w3c.dom.ls.LSParser.getDomConfig()|The DOMConfiguration object used when p
|org.w3c.dom.ls.LSParser.getFilter()|When a filter is provided, the implementat
|org.w3c.dom.ls.LSParser.parse(LSInput)|Parse an XML document from a resource i
|org.w3c.dom.ls.LSParser.parseURI(String)|Parse an XML document from a location
|org.w3c.dom.ls.LSParser.parseWithContext(LSInput,Node,short)|Parse an XML frag
|org.w3c.dom.ls.LSParser.setFilter(LSParserFilter)|When a filter is provided, t

*org.w3c.dom.ls.LSParser_Description*

An interface to an object that is able to build, or augment, a DOM tree from 
various input sources. LSParser provides an API for parsing XML and building 
the corresponding DOM document structure. A LSParser instance can be obtained 
by invoking the DOMImplementationLS.createLSParser() method. As specified in 
[DOM Level 3 Core] , when a document is first made available via the LSParser: 

there will never be two adjacent nodes of type NODE_TEXT, and there will never 
be empty text nodes. 

it is expected that the value and nodeValue attributes of an Attr node 
initially return the XML 1.0 normalized value. However, if the parameters " 
validate-if-schema" and " datatype-normalization" are set to true, depending on 
the attribute normalization used, the attribute values may differ from the ones 
obtained by the XML 1.0 attribute normalization. If the parameters " 
datatype-normalization" is set to false, the XML 1.0 attribute normalization is 
guaranteed to occur, and if the attributes list does not contain namespace 
declarations, the attributes attribute on Element node represents the property 
[attributes] defined in [XML Information Set] . 

Asynchronous LSParser objects are expected to also implement the 
events::EventTarget interface so that event listeners can be registered on 
asynchronous LSParser objects. Events supported by asynchronous LSParser 
objects are: 

load 

The LSParser finishes to load the document. See also the definition of the 
LSLoadEvent interface. progress The LSParser signals progress as data is 
parsed. This specification does not attempt to define exactly when progress 
events should be dispatched. That is intentionally left as 
implementation-dependent. Here is one example of how an application might 
dispatch progress events: Once the parser starts receiving data, a progress 
event is dispatched to indicate that the parsing starts. From there on, a 
progress event is dispatched for every 4096 bytes of data that is received and 
processed. This is only one example, though, and implementations can choose to 
dispatch progress events at any time while parsing, or not dispatch them at 
all. See also the definition of the LSProgressEvent interface. 

Note: All events defined in this specification use the namespace URI 
"http://www.w3.org/2002/DOMLS". While parsing an input source, errors are 
reported to the application through the error handler (LSParser.domConfig's " 
error-handler" parameter). This specification does in no way try to define all 
possible errors that can occur while parsing XML, or any other markup, but some 
common error cases are defined. The types (DOMError.type) of errors and 
warnings defined by this specification are: 

"check-character-normalization-failure" [error] Raised if the parameter " 
check-character-normalization" is set to true and a string is encountered that 
fails normalization checking. "doctype-not-allowed" [fatal] Raised if the 
configuration parameter "disallow-doctype" is set to true and a doctype is 
encountered. "no-input-specified" [fatal] 

Raised when loading a document and no input is specified in the LSInput object. 

"pi-base-uri-not-preserved" [warning] Raised if a processing instruction is 
encountered in a location where the base URI of the processing instruction can 
not be preserved. One example of a case where this warning will be raised is if 
the configuration parameter " entities" is set to false and the following XML 
file is parsed: 

<!DOCTYPE root [ <!ENTITY e SYSTEM 'subdir/myentity.ent' ]> <root> and e; 
</root> 

And subdir/myentity.ent contains: 

<one> <two/> </one> <?pi 3.14159?> <more/> 

"unbound-prefix-in-entity" [warning] An implementation dependent warning that 
may be raised if the configuration parameter " namespaces" is set to true and 
an unbound namespace prefix is encountered in an entity's replacement text. 
Raising this warning is not enforced since some existing parsers may not 
recognize unbound namespace prefixes in the replacement text of entities. 

"unknown-character-denormalization" [fatal] Raised if the configuration 
parameter "ignore-unknown-character-denormalizations" is set to false and a 
character is encountered for which the processor cannot determine the 
normalization properties. 

"unsupported-encoding" [fatal] Raised if an unsupported encoding is 
encountered. "unsupported-media-type" [fatal] 

Raised if the configuration parameter "supported-media-types-only" is set to 
true and an unsupported media type is encountered. 

In addition to raising the defined errors and warnings, implementations are 
expected to raise implementation specific errors and warnings for any other 
error and warning cases such as IO errors (file not found, permission 
denied,...), XML well-formedness errors, and so on. See also the Document 
Object Model (DOM) Level 3 Load and Save Specification. 


*short_org.w3c.dom.ls.LSParser.ACTION_APPEND_AS_CHILDREN*

An interface to an object that is able to build, or augment, a DOM tree from 
various input sources. LSParser provides an API for parsing XML and building 
the corresponding DOM document structure. A LSParser instance can be obtained 
by invoking the DOMImplementationLS.createLSParser() method. As specified in 
[DOM Level 3 Core] , when a document is first made available via the LSParser: 

there will never be two adjacent nodes of type NODE_TEXT, and there will never 
be empty text nodes. 

it is expected that the value and nodeValue attributes of an Attr node 
initially return the XML 1.0 normalized value. However, if the parameters " 
validate-if-schema" and " datatype-normalization" are set to true, depending on 
the attribute normalization used, the attribute values may differ from the ones 
obtained by the XML 1.0 attribute normalization. If the parameters " 
datatype-normalization" is set to false, the XML 1.0 attribute normalization is 
guaranteed to occur, and if the attributes list does not contain namespace 
declarations, the attributes attribute on Element node represents the property 
[attributes] defined in [XML Information Set] . 

Asynchronous LSParser objects are expected to also implement the 
events::EventTarget interface so that event listeners can be registered on 
asynchronous LSParser objects. Events supported by asynchronous LSParser 
objects are: 

load 

The LSParser finishes to load the document. See also the definition of the 
LSLoadEvent interface. progress The LSParser signals progress as data is 
parsed. This specification does not attempt to define exactly when progress 
events should be dispatched. That is intentionally left as 
implementation-dependent. Here is one example of how an application might 
dispatch progress events: Once the parser starts receiving data, a progress 
event is dispatched to indicate that the parsing starts. From there on, a 
progress event is dispatched for every 4096 bytes of data that is received and 
processed. This is only one example, though, and implementations can choose to 
dispatch progress events at any time while parsing, or not dispatch them at 
all. See also the definition of the LSProgressEvent interface. 

Note: All events defined in this specification use the namespace URI 
"http://www.w3.org/2002/DOMLS". While parsing an input source, errors are 
reported to the application through the error handler (LSParser.domConfig's " 
error-handler" parameter). This specification does in no way try to define all 
possible errors that can occur while parsing XML, or any other markup, but some 
common error cases are defined. The types (DOMError.type) of errors and 
warnings defined by this specification are: 

"check-character-normalization-failure" [error] Raised if the parameter " 
check-character-normalization" is set to true and a string is encountered that 
fails normalization checking. "doctype-not-allowed" [fatal] Raised if the 
configuration parameter "disallow-doctype" is set to true and a doctype is 
encountered. "no-input-specified" [fatal] 

Raised when loading a document and no input is specified in the LSInput object. 

"pi-base-uri-not-preserved" [warning] Raised if a processing instruction is 
encountered in a location where the base URI of the processing instruction can 
not be preserved. One example of a case where this warning will be raised is if 
the configuration parameter " entities" is set to false and the following XML 
file is parsed: 

<!DOCTYPE root [ <!ENTITY e SYSTEM 'subdir/myentity.ent' ]> <root> and e; 
</root> 

And subdir/myentity.ent contains: 

<one> <two/> </one> <?pi 3.14159?> <more/> 

"unbound-prefix-in-entity" [warning] An implementation dependent warning that 
may be raised if the configuration parameter " namespaces" is set to true and 
an unbound namespace prefix is encountered in an entity's replacement text. 
Raising this warning is not enforced since some existing parsers may not 
recognize unbound namespace prefixes in the replacement text of entities. 

"unknown-character-denormalization" [fatal] Raised if the configuration 
parameter "ignore-unknown-character-denormalizations" is set to false and a 
character is encountered for which the processor cannot determine the 
normalization properties. 

"unsupported-encoding" [fatal] Raised if an unsupported encoding is 
encountered. "unsupported-media-type" [fatal] 

Raised if the configuration parameter "supported-media-types-only" is set to 
true and an unsupported media type is encountered. 

In addition to raising the defined errors and warnings, implementations are 
expected to raise implementation specific errors and warnings for any other 
error and warning cases such as IO errors (file not found, permission 
denied,...), XML well-formedness errors, and so on. See also the Document 
Object Model (DOM) Level 3 Load and Save Specification. 


*short_org.w3c.dom.ls.LSParser.ACTION_INSERT_AFTER*

An interface to an object that is able to build, or augment, a DOM tree from 
various input sources. LSParser provides an API for parsing XML and building 
the corresponding DOM document structure. A LSParser instance can be obtained 
by invoking the DOMImplementationLS.createLSParser() method. As specified in 
[DOM Level 3 Core] , when a document is first made available via the LSParser: 

there will never be two adjacent nodes of type NODE_TEXT, and there will never 
be empty text nodes. 

it is expected that the value and nodeValue attributes of an Attr node 
initially return the XML 1.0 normalized value. However, if the parameters " 
validate-if-schema" and " datatype-normalization" are set to true, depending on 
the attribute normalization used, the attribute values may differ from the ones 
obtained by the XML 1.0 attribute normalization. If the parameters " 
datatype-normalization" is set to false, the XML 1.0 attribute normalization is 
guaranteed to occur, and if the attributes list does not contain namespace 
declarations, the attributes attribute on Element node represents the property 
[attributes] defined in [XML Information Set] . 

Asynchronous LSParser objects are expected to also implement the 
events::EventTarget interface so that event listeners can be registered on 
asynchronous LSParser objects. Events supported by asynchronous LSParser 
objects are: 

load 

The LSParser finishes to load the document. See also the definition of the 
LSLoadEvent interface. progress The LSParser signals progress as data is 
parsed. This specification does not attempt to define exactly when progress 
events should be dispatched. That is intentionally left as 
implementation-dependent. Here is one example of how an application might 
dispatch progress events: Once the parser starts receiving data, a progress 
event is dispatched to indicate that the parsing starts. From there on, a 
progress event is dispatched for every 4096 bytes of data that is received and 
processed. This is only one example, though, and implementations can choose to 
dispatch progress events at any time while parsing, or not dispatch them at 
all. See also the definition of the LSProgressEvent interface. 

Note: All events defined in this specification use the namespace URI 
"http://www.w3.org/2002/DOMLS". While parsing an input source, errors are 
reported to the application through the error handler (LSParser.domConfig's " 
error-handler" parameter). This specification does in no way try to define all 
possible errors that can occur while parsing XML, or any other markup, but some 
common error cases are defined. The types (DOMError.type) of errors and 
warnings defined by this specification are: 

"check-character-normalization-failure" [error] Raised if the parameter " 
check-character-normalization" is set to true and a string is encountered that 
fails normalization checking. "doctype-not-allowed" [fatal] Raised if the 
configuration parameter "disallow-doctype" is set to true and a doctype is 
encountered. "no-input-specified" [fatal] 

Raised when loading a document and no input is specified in the LSInput object. 

"pi-base-uri-not-preserved" [warning] Raised if a processing instruction is 
encountered in a location where the base URI of the processing instruction can 
not be preserved. One example of a case where this warning will be raised is if 
the configuration parameter " entities" is set to false and the following XML 
file is parsed: 

<!DOCTYPE root [ <!ENTITY e SYSTEM 'subdir/myentity.ent' ]> <root> and e; 
</root> 

And subdir/myentity.ent contains: 

<one> <two/> </one> <?pi 3.14159?> <more/> 

"unbound-prefix-in-entity" [warning] An implementation dependent warning that 
may be raised if the configuration parameter " namespaces" is set to true and 
an unbound namespace prefix is encountered in an entity's replacement text. 
Raising this warning is not enforced since some existing parsers may not 
recognize unbound namespace prefixes in the replacement text of entities. 

"unknown-character-denormalization" [fatal] Raised if the configuration 
parameter "ignore-unknown-character-denormalizations" is set to false and a 
character is encountered for which the processor cannot determine the 
normalization properties. 

"unsupported-encoding" [fatal] Raised if an unsupported encoding is 
encountered. "unsupported-media-type" [fatal] 

Raised if the configuration parameter "supported-media-types-only" is set to 
true and an unsupported media type is encountered. 

In addition to raising the defined errors and warnings, implementations are 
expected to raise implementation specific errors and warnings for any other 
error and warning cases such as IO errors (file not found, permission 
denied,...), XML well-formedness errors, and so on. See also the Document 
Object Model (DOM) Level 3 Load and Save Specification. 


*short_org.w3c.dom.ls.LSParser.ACTION_INSERT_BEFORE*

An interface to an object that is able to build, or augment, a DOM tree from 
various input sources. LSParser provides an API for parsing XML and building 
the corresponding DOM document structure. A LSParser instance can be obtained 
by invoking the DOMImplementationLS.createLSParser() method. As specified in 
[DOM Level 3 Core] , when a document is first made available via the LSParser: 

there will never be two adjacent nodes of type NODE_TEXT, and there will never 
be empty text nodes. 

it is expected that the value and nodeValue attributes of an Attr node 
initially return the XML 1.0 normalized value. However, if the parameters " 
validate-if-schema" and " datatype-normalization" are set to true, depending on 
the attribute normalization used, the attribute values may differ from the ones 
obtained by the XML 1.0 attribute normalization. If the parameters " 
datatype-normalization" is set to false, the XML 1.0 attribute normalization is 
guaranteed to occur, and if the attributes list does not contain namespace 
declarations, the attributes attribute on Element node represents the property 
[attributes] defined in [XML Information Set] . 

Asynchronous LSParser objects are expected to also implement the 
events::EventTarget interface so that event listeners can be registered on 
asynchronous LSParser objects. Events supported by asynchronous LSParser 
objects are: 

load 

The LSParser finishes to load the document. See also the definition of the 
LSLoadEvent interface. progress The LSParser signals progress as data is 
parsed. This specification does not attempt to define exactly when progress 
events should be dispatched. That is intentionally left as 
implementation-dependent. Here is one example of how an application might 
dispatch progress events: Once the parser starts receiving data, a progress 
event is dispatched to indicate that the parsing starts. From there on, a 
progress event is dispatched for every 4096 bytes of data that is received and 
processed. This is only one example, though, and implementations can choose to 
dispatch progress events at any time while parsing, or not dispatch them at 
all. See also the definition of the LSProgressEvent interface. 

Note: All events defined in this specification use the namespace URI 
"http://www.w3.org/2002/DOMLS". While parsing an input source, errors are 
reported to the application through the error handler (LSParser.domConfig's " 
error-handler" parameter). This specification does in no way try to define all 
possible errors that can occur while parsing XML, or any other markup, but some 
common error cases are defined. The types (DOMError.type) of errors and 
warnings defined by this specification are: 

"check-character-normalization-failure" [error] Raised if the parameter " 
check-character-normalization" is set to true and a string is encountered that 
fails normalization checking. "doctype-not-allowed" [fatal] Raised if the 
configuration parameter "disallow-doctype" is set to true and a doctype is 
encountered. "no-input-specified" [fatal] 

Raised when loading a document and no input is specified in the LSInput object. 

"pi-base-uri-not-preserved" [warning] Raised if a processing instruction is 
encountered in a location where the base URI of the processing instruction can 
not be preserved. One example of a case where this warning will be raised is if 
the configuration parameter " entities" is set to false and the following XML 
file is parsed: 

<!DOCTYPE root [ <!ENTITY e SYSTEM 'subdir/myentity.ent' ]> <root> and e; 
</root> 

And subdir/myentity.ent contains: 

<one> <two/> </one> <?pi 3.14159?> <more/> 

"unbound-prefix-in-entity" [warning] An implementation dependent warning that 
may be raised if the configuration parameter " namespaces" is set to true and 
an unbound namespace prefix is encountered in an entity's replacement text. 
Raising this warning is not enforced since some existing parsers may not 
recognize unbound namespace prefixes in the replacement text of entities. 

"unknown-character-denormalization" [fatal] Raised if the configuration 
parameter "ignore-unknown-character-denormalizations" is set to false and a 
character is encountered for which the processor cannot determine the 
normalization properties. 

"unsupported-encoding" [fatal] Raised if an unsupported encoding is 
encountered. "unsupported-media-type" [fatal] 

Raised if the configuration parameter "supported-media-types-only" is set to 
true and an unsupported media type is encountered. 

In addition to raising the defined errors and warnings, implementations are 
expected to raise implementation specific errors and warnings for any other 
error and warning cases such as IO errors (file not found, permission 
denied,...), XML well-formedness errors, and so on. See also the Document 
Object Model (DOM) Level 3 Load and Save Specification. 


*short_org.w3c.dom.ls.LSParser.ACTION_REPLACE*

An interface to an object that is able to build, or augment, a DOM tree from 
various input sources. LSParser provides an API for parsing XML and building 
the corresponding DOM document structure. A LSParser instance can be obtained 
by invoking the DOMImplementationLS.createLSParser() method. As specified in 
[DOM Level 3 Core] , when a document is first made available via the LSParser: 

there will never be two adjacent nodes of type NODE_TEXT, and there will never 
be empty text nodes. 

it is expected that the value and nodeValue attributes of an Attr node 
initially return the XML 1.0 normalized value. However, if the parameters " 
validate-if-schema" and " datatype-normalization" are set to true, depending on 
the attribute normalization used, the attribute values may differ from the ones 
obtained by the XML 1.0 attribute normalization. If the parameters " 
datatype-normalization" is set to false, the XML 1.0 attribute normalization is 
guaranteed to occur, and if the attributes list does not contain namespace 
declarations, the attributes attribute on Element node represents the property 
[attributes] defined in [XML Information Set] . 

Asynchronous LSParser objects are expected to also implement the 
events::EventTarget interface so that event listeners can be registered on 
asynchronous LSParser objects. Events supported by asynchronous LSParser 
objects are: 

load 

The LSParser finishes to load the document. See also the definition of the 
LSLoadEvent interface. progress The LSParser signals progress as data is 
parsed. This specification does not attempt to define exactly when progress 
events should be dispatched. That is intentionally left as 
implementation-dependent. Here is one example of how an application might 
dispatch progress events: Once the parser starts receiving data, a progress 
event is dispatched to indicate that the parsing starts. From there on, a 
progress event is dispatched for every 4096 bytes of data that is received and 
processed. This is only one example, though, and implementations can choose to 
dispatch progress events at any time while parsing, or not dispatch them at 
all. See also the definition of the LSProgressEvent interface. 

Note: All events defined in this specification use the namespace URI 
"http://www.w3.org/2002/DOMLS". While parsing an input source, errors are 
reported to the application through the error handler (LSParser.domConfig's " 
error-handler" parameter). This specification does in no way try to define all 
possible errors that can occur while parsing XML, or any other markup, but some 
common error cases are defined. The types (DOMError.type) of errors and 
warnings defined by this specification are: 

"check-character-normalization-failure" [error] Raised if the parameter " 
check-character-normalization" is set to true and a string is encountered that 
fails normalization checking. "doctype-not-allowed" [fatal] Raised if the 
configuration parameter "disallow-doctype" is set to true and a doctype is 
encountered. "no-input-specified" [fatal] 

Raised when loading a document and no input is specified in the LSInput object. 

"pi-base-uri-not-preserved" [warning] Raised if a processing instruction is 
encountered in a location where the base URI of the processing instruction can 
not be preserved. One example of a case where this warning will be raised is if 
the configuration parameter " entities" is set to false and the following XML 
file is parsed: 

<!DOCTYPE root [ <!ENTITY e SYSTEM 'subdir/myentity.ent' ]> <root> and e; 
</root> 

And subdir/myentity.ent contains: 

<one> <two/> </one> <?pi 3.14159?> <more/> 

"unbound-prefix-in-entity" [warning] An implementation dependent warning that 
may be raised if the configuration parameter " namespaces" is set to true and 
an unbound namespace prefix is encountered in an entity's replacement text. 
Raising this warning is not enforced since some existing parsers may not 
recognize unbound namespace prefixes in the replacement text of entities. 

"unknown-character-denormalization" [fatal] Raised if the configuration 
parameter "ignore-unknown-character-denormalizations" is set to false and a 
character is encountered for which the processor cannot determine the 
normalization properties. 

"unsupported-encoding" [fatal] Raised if an unsupported encoding is 
encountered. "unsupported-media-type" [fatal] 

Raised if the configuration parameter "supported-media-types-only" is set to 
true and an unsupported media type is encountered. 

In addition to raising the defined errors and warnings, implementations are 
expected to raise implementation specific errors and warnings for any other 
error and warning cases such as IO errors (file not found, permission 
denied,...), XML well-formedness errors, and so on. See also the Document 
Object Model (DOM) Level 3 Load and Save Specification. 


*short_org.w3c.dom.ls.LSParser.ACTION_REPLACE_CHILDREN*

An interface to an object that is able to build, or augment, a DOM tree from 
various input sources. LSParser provides an API for parsing XML and building 
the corresponding DOM document structure. A LSParser instance can be obtained 
by invoking the DOMImplementationLS.createLSParser() method. As specified in 
[DOM Level 3 Core] , when a document is first made available via the LSParser: 

there will never be two adjacent nodes of type NODE_TEXT, and there will never 
be empty text nodes. 

it is expected that the value and nodeValue attributes of an Attr node 
initially return the XML 1.0 normalized value. However, if the parameters " 
validate-if-schema" and " datatype-normalization" are set to true, depending on 
the attribute normalization used, the attribute values may differ from the ones 
obtained by the XML 1.0 attribute normalization. If the parameters " 
datatype-normalization" is set to false, the XML 1.0 attribute normalization is 
guaranteed to occur, and if the attributes list does not contain namespace 
declarations, the attributes attribute on Element node represents the property 
[attributes] defined in [XML Information Set] . 

Asynchronous LSParser objects are expected to also implement the 
events::EventTarget interface so that event listeners can be registered on 
asynchronous LSParser objects. Events supported by asynchronous LSParser 
objects are: 

load 

The LSParser finishes to load the document. See also the definition of the 
LSLoadEvent interface. progress The LSParser signals progress as data is 
parsed. This specification does not attempt to define exactly when progress 
events should be dispatched. That is intentionally left as 
implementation-dependent. Here is one example of how an application might 
dispatch progress events: Once the parser starts receiving data, a progress 
event is dispatched to indicate that the parsing starts. From there on, a 
progress event is dispatched for every 4096 bytes of data that is received and 
processed. This is only one example, though, and implementations can choose to 
dispatch progress events at any time while parsing, or not dispatch them at 
all. See also the definition of the LSProgressEvent interface. 

Note: All events defined in this specification use the namespace URI 
"http://www.w3.org/2002/DOMLS". While parsing an input source, errors are 
reported to the application through the error handler (LSParser.domConfig's " 
error-handler" parameter). This specification does in no way try to define all 
possible errors that can occur while parsing XML, or any other markup, but some 
common error cases are defined. The types (DOMError.type) of errors and 
warnings defined by this specification are: 

"check-character-normalization-failure" [error] Raised if the parameter " 
check-character-normalization" is set to true and a string is encountered that 
fails normalization checking. "doctype-not-allowed" [fatal] Raised if the 
configuration parameter "disallow-doctype" is set to true and a doctype is 
encountered. "no-input-specified" [fatal] 

Raised when loading a document and no input is specified in the LSInput object. 

"pi-base-uri-not-preserved" [warning] Raised if a processing instruction is 
encountered in a location where the base URI of the processing instruction can 
not be preserved. One example of a case where this warning will be raised is if 
the configuration parameter " entities" is set to false and the following XML 
file is parsed: 

<!DOCTYPE root [ <!ENTITY e SYSTEM 'subdir/myentity.ent' ]> <root> and e; 
</root> 

And subdir/myentity.ent contains: 

<one> <two/> </one> <?pi 3.14159?> <more/> 

"unbound-prefix-in-entity" [warning] An implementation dependent warning that 
may be raised if the configuration parameter " namespaces" is set to true and 
an unbound namespace prefix is encountered in an entity's replacement text. 
Raising this warning is not enforced since some existing parsers may not 
recognize unbound namespace prefixes in the replacement text of entities. 

"unknown-character-denormalization" [fatal] Raised if the configuration 
parameter "ignore-unknown-character-denormalizations" is set to false and a 
character is encountered for which the processor cannot determine the 
normalization properties. 

"unsupported-encoding" [fatal] Raised if an unsupported encoding is 
encountered. "unsupported-media-type" [fatal] 

Raised if the configuration parameter "supported-media-types-only" is set to 
true and an unsupported media type is encountered. 

In addition to raising the defined errors and warnings, implementations are 
expected to raise implementation specific errors and warnings for any other 
error and warning cases such as IO errors (file not found, permission 
denied,...), XML well-formedness errors, and so on. See also the Document 
Object Model (DOM) Level 3 Load and Save Specification. 



*org.w3c.dom.ls.LSParser.abort()*

public void abort()

Abort the loading of the document that is currently being loaded by the 
LSParser. If the LSParser is currently not busy, a call to this method does 
nothing. 


*org.w3c.dom.ls.LSParser.getAsync()*

public boolean getAsync()

true if the LSParser is asynchronous, false if it is synchronous. 


*org.w3c.dom.ls.LSParser.getBusy()*

public boolean getBusy()

true if the LSParser is currently busy loading a document, otherwise false. 


*org.w3c.dom.ls.LSParser.getDomConfig()*

public |org.w3c.dom.DOMConfiguration| getDomConfig()

The DOMConfiguration object used when parsing an input source. This 
DOMConfiguration is specific to the parse operation. No parameter values from 
this DOMConfiguration object are passed automatically to the DOMConfiguration 
object on the Document that is created, or used, by the parse operation. The 
DOM application is responsible for passing any needed parameter values from 
this DOMConfiguration object to the DOMConfiguration object referenced by the 
Document object. In addition to the parameters recognized in on the 
DOMConfiguration interface defined in [DOM Level 3 Core] , the DOMConfiguration 
objects for LSParser add or modify the following parameters: 

"charset-overrides-xml-encoding" 

true [optional] (default) If a higher level protocol such as HTTP [IETF RFC 
2616] provides an indication of the character encoding of the input stream 
being processed, that will override any encoding specified in the XML 
declaration or the Text declaration (see also section 4.3.3, "Character 
Encoding in Entities", in [XML 1.0]). Explicitly setting an encoding in the 
LSInput overrides any encoding from the protocol. false [required] The parser 
ignores any character set encoding information from higher-level protocols. 

"disallow-doctype" 



true [optional] Throw a fatal "doctype-not-allowed" error if a doctype node is 
found while parsing the document. This is useful when dealing with things like 
SOAP envelopes where doctype nodes are not allowed. false [required] (default) 
Allow doctype nodes in the document. 

"ignore-unknown-character-denormalizations" 



true [required] (default) If, while verifying full normalization when [XML 1.1] 
is supported, a processor encounters characters for which it cannot determine 
the normalization properties, then the processor will ignore any possible 
denormalizations caused by these characters. This parameter is ignored for [XML 
1.0]. 

false [optional] Report an fatal "unknown-character-denormalization" error if a 
character is encountered for which the processor cannot determine the 
normalization properties. 

"infoset" See the definition of DOMConfiguration for a description of this 
parameter. Unlike in [DOM Level 3 Core] , this parameter will default to true 
for LSParser. "namespaces" 

true [required] (default) Perform the namespace processing as defined in [XML 
Namespaces] and [XML Namespaces 1.1] . false [optional] Do not perform the 
namespace processing. 

"resource-resolver" [required] A reference to a LSResourceResolver object, or 
null. If the value of this parameter is not null when an external resource 
(such as an external XML entity or an XML schema location) is encountered, the 
implementation will request that the LSResourceResolver referenced in this 
parameter resolves the resource. "supported-media-types-only" 



true [optional] Check that the media type of the parsed resource is a supported 
media type. If an unsupported media type is encountered, a fatal error of type 
"unsupported-media-type" will be raised. The media types defined in [IETF RFC 
3023] must always be accepted. false [required] (default) Accept any media 
type. 

"validate" See the definition of DOMConfiguration for a description of this 
parameter. Unlike in [DOM Level 3 Core] , the processing of the internal subset 
is always accomplished, even if this parameter is set to false. 

"validate-if-schema" See the definition of DOMConfiguration for a description 
of this parameter. Unlike in [DOM Level 3 Core] , the processing of the 
internal subset is always accomplished, even if this parameter is set to false. 

"well-formed" See the definition of DOMConfiguration for a description of this 
parameter. Unlike in [DOM Level 3 Core] , this parameter cannot be set to 
false. 


*org.w3c.dom.ls.LSParser.getFilter()*

public |org.w3c.dom.ls.LSParserFilter| getFilter()

When a filter is provided, the implementation will call out to the filter as it 
is constructing the DOM tree structure. The filter can choose to remove 
elements from the document being constructed, or to terminate the parsing 
early. The filter is invoked after the operations requested by the 
DOMConfiguration parameters have been applied. For example, if " validate" is 
set to true, the validation is done before invoking the filter. 


*org.w3c.dom.ls.LSParser.parse(LSInput)*

public |org.w3c.dom.Document| parse(org.w3c.dom.ls.LSInput input)
  throws |org.w3c.dom.DOMException|
         |org.w3c.dom.ls.LSException|
         
Parse an XML document from a resource identified by a LSInput. 

    input - The LSInput from which the source of the document is to be read. 

    Returns: If the LSParser is a synchronous LSParser, the newly created and populated 
             Document is returned. If the LSParser is asynchronous, null is 
             returned since the document object may not yet be constructed when 
             this method returns. 
*org.w3c.dom.ls.LSParser.parseURI(String)*

public |org.w3c.dom.Document| parseURI(java.lang.String uri)
  throws |org.w3c.dom.DOMException|
         |org.w3c.dom.ls.LSException|
         
Parse an XML document from a location identified by a URI reference [IETF RFC 
2396]. If the URI contains a fragment identifier (see section 4.1 in [IETF RFC 
2396]), the behavior is not defined by this specification, future versions of 
this specification may define the behavior. 

    uri - The location of the XML document to be read. 

    Returns: If the LSParser is a synchronous LSParser, the newly created and populated 
             Document is returned, or null if an error occured. If the LSParser 
             is asynchronous, null is returned since the document object may 
             not yet be constructed when this method returns. 
*org.w3c.dom.ls.LSParser.parseWithContext(LSInput,Node,short)*

public |org.w3c.dom.Node| parseWithContext(
  org.w3c.dom.ls.LSInput input,
  org.w3c.dom.Node contextArg,
  short action)
  throws |org.w3c.dom.DOMException|
         |org.w3c.dom.ls.LSException|
         
Parse an XML fragment from a resource identified by a LSInput and insert the 
content into an existing document at the position specified with the context 
and action arguments. When parsing the input stream, the context node (or its 
parent, depending on where the result will be inserted) is used for resolving 
unbound namespace prefixes. The context node's ownerDocument node (or the node 
itself if the node of type DOCUMENT_NODE) is used to resolve default attributes 
and entity references. As the new data is inserted into the document, at least 
one mutation event is fired per new immediate child or sibling of the context 
node. If the context node is a Document node and the action is 
ACTION_REPLACE_CHILDREN, then the document that is passed as the context node 
will be changed such that its xmlEncoding, documentURI, xmlVersion, 
inputEncoding, xmlStandalone, and all other such attributes are set to what 
they would be set to if the input source was parsed using LSParser.parse(). 
This method is always synchronous, even if the LSParser is asynchronous 
(LSParser.async is true). If an error occurs while parsing, the caller is 
notified through the ErrorHandler instance associated with the " error-handler" 
parameter of the DOMConfiguration. When calling parseWithContext, the values of 
the following configuration parameters will be ignored and their default values 
will always be used instead: " validate", " validate-if-schema", and " 
element-content-whitespace". Other parameters will be treated normally, and the 
parser is expected to call the LSParserFilter just as if a whole document was 
parsed. 

    input - The LSInput from which the source document is to be read. The source document 
       must be an XML fragment, i.e. anything except a complete XML document 
       (except in the case where the context node of type DOCUMENT_NODE, and 
       the action is ACTION_REPLACE_CHILDREN), a DOCTYPE (internal subset), 
       entity declaration(s), notation declaration(s), or XML or text 
       declaration(s). 
    contextArg - The node that is used as the context for the data that is being parsed. This 
       node must be a Document node, a DocumentFragment node, or a node of a 
       type that is allowed as a child of an Element node, e.g. it cannot be an 
       Attribute node. 
    action - This parameter describes which action should be taken between the new set of 
       nodes being inserted and the existing children of the context node. The 
       set of possible actions is defined in ACTION_TYPES above. 

    Returns: Return the node that is the result of the parse operation. If the result is 
             more than one top-level node, the first one is returned. 
*org.w3c.dom.ls.LSParser.setFilter(LSParserFilter)*

public void setFilter(org.w3c.dom.ls.LSParserFilter filter)

When a filter is provided, the implementation will call out to the filter as it 
is constructing the DOM tree structure. The filter can choose to remove 
elements from the document being constructed, or to terminate the parsing 
early. The filter is invoked after the operations requested by the 
DOMConfiguration parameters have been applied. For example, if " validate" is 
set to true, the validation is done before invoking the filter. 




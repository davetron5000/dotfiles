*org.w3c.dom.DOMImplementation* *DOMImplementation* The DOMImplementation interf

public interface interface DOMImplementation


|org.w3c.dom.DOMImplementation_Description|
|org.w3c.dom.DOMImplementation_Fields|
|org.w3c.dom.DOMImplementation_Constructors|
|org.w3c.dom.DOMImplementation_Methods|

================================================================================

*org.w3c.dom.DOMImplementation_Methods*
|org.w3c.dom.DOMImplementation.createDocument(String,String,DocumentType)|Creat
|org.w3c.dom.DOMImplementation.createDocumentType(String,String,String)|Creates
|org.w3c.dom.DOMImplementation.getFeature(String,String)|This method returns a 
|org.w3c.dom.DOMImplementation.hasFeature(String,String)|Test if the DOM implem

*org.w3c.dom.DOMImplementation_Description*

The DOMImplementation interface provides a number of methods for performing 
operations that are independent of any particular instance of the document 
object model. See also the Document Object Model (DOM) Level 3 Core 
Specification. 


*org.w3c.dom.DOMImplementation.createDocument(String,String,DocumentType)*

public |org.w3c.dom.Document| createDocument(
  java.lang.String namespaceURI,
  java.lang.String qualifiedName,
  org.w3c.dom.DocumentType doctype)
  throws |org.w3c.dom.DOMException|
         
Creates a DOM Document object of the specified type with its document element. 
Note that based on the DocumentType given to create the document, the 
implementation may instantiate specialized Document objects that support 
additional features than the "Core", such as "HTML" [DOM Level 2 HTML] . On the 
other hand, setting the DocumentType after the document was created makes this 
very unlikely to happen. Alternatively, specialized Document creation methods, 
such as createHTMLDocument [DOM Level 2 HTML] , can be used to obtain specific 
types of Document objects. 

    namespaceURI - The namespace URI of the document element to create or null. 
    qualifiedName - The qualified name of the document element to be created or null. 
    doctype - The type of document to be created or null. When doctype is not null, its 
       Node.ownerDocument attribute is set to the document being created. 

    Returns: A new Document object with its document element. If the NamespaceURI, 
             qualifiedName, and doctype are null, the returned Document is 
             empty with no document element. 
*org.w3c.dom.DOMImplementation.createDocumentType(String,String,String)*

public |org.w3c.dom.DocumentType| createDocumentType(
  java.lang.String qualifiedName,
  java.lang.String publicId,
  java.lang.String systemId)
  throws |org.w3c.dom.DOMException|
         
Creates an empty DocumentType node. Entity declarations and notations are not 
made available. Entity reference expansions and default attribute additions do 
not occur.. 

    qualifiedName - The qualified name of the document type to be created. 
    publicId - The external subset public identifier. 
    systemId - The external subset system identifier. 

    Returns: A new DocumentType node with Node.ownerDocument set to null. 
*org.w3c.dom.DOMImplementation.getFeature(String,String)*

public |java.lang.Object| getFeature(
  java.lang.String feature,
  java.lang.String version)

This method returns a specialized object which implements the specialized APIs 
of the specified feature and version, as specified in . The specialized object 
may also be obtained by using binding-specific casting methods but is not 
necessarily expected to, as discussed in . This method also allow the 
implementation to provide specialized objects which do not support the 
DOMImplementation interface. 

    feature - The name of the feature requested. Note that any plus sign "+" prepended to the 
       name of the feature will be ignored since it is not significant in the 
       context of this method. 
    version - This is the version number of the feature to test. 

    Returns: Returns an object which implements the specialized APIs of the specified 
             feature and version, if any, or null if there is no object which 
             implements interfaces associated with that feature. If the 
             DOMObject returned by this method implements the DOMImplementation 
             interface, it must delegate to the primary core DOMImplementation 
             and not return results inconsistent with the primary core 
             DOMImplementation such as hasFeature, getFeature, etc. 
*org.w3c.dom.DOMImplementation.hasFeature(String,String)*

public boolean hasFeature(
  java.lang.String feature,
  java.lang.String version)

Test if the DOM implementation implements a specific feature and version, as 
specified in . 

    feature - The name of the feature to test. 
    version - This is the version number of the feature to test. 

    Returns: true if the feature is implemented in the specified version, false otherwise. 


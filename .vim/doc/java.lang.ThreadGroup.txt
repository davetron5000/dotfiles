*java.lang.ThreadGroup* *ThreadGroup* A thread group represents a set of threads

public class ThreadGroup
  extends    |java.lang.Object|
  implements |java.lang.Thread.UncaughtExceptionHandler|

|java.lang.ThreadGroup_Description|
|java.lang.ThreadGroup_Fields|
|java.lang.ThreadGroup_Constructors|
|java.lang.ThreadGroup_Methods|

================================================================================

*java.lang.ThreadGroup_Constructors*
|java.lang.ThreadGroup(String)|Constructs a new thread group.
|java.lang.ThreadGroup(ThreadGroup,String)|Creates a new thread group.

*java.lang.ThreadGroup_Methods*
|java.lang.ThreadGroup.activeCount()|Returns an estimate of the number of activ
|java.lang.ThreadGroup.activeGroupCount()|Returns an estimate of the number of 
|java.lang.ThreadGroup.allowThreadSuspension(boolean)|Used by VM to control low
|java.lang.ThreadGroup.checkAccess()|Determines if the currently running thread
|java.lang.ThreadGroup.destroy()|Destroys this thread group and all of its subg
|java.lang.ThreadGroup.enumerate(Thread[])|Copies into the specified array ever
|java.lang.ThreadGroup.enumerate(Thread[],boolean)|Copies into the specified ar
|java.lang.ThreadGroup.enumerate(ThreadGroup[])|Copies into the specified array
|java.lang.ThreadGroup.enumerate(ThreadGroup[],boolean)|Copies into the specifi
|java.lang.ThreadGroup.getMaxPriority()|Returns the maximum priority of this th
|java.lang.ThreadGroup.getName()|Returns the name of this thread group.
|java.lang.ThreadGroup.getParent()|Returns the parent of this thread group.
|java.lang.ThreadGroup.interrupt()|Interrupts all threads in this thread group.
|java.lang.ThreadGroup.isDaemon()|Tests if this thread group is a daemon thread
|java.lang.ThreadGroup.isDestroyed()|Tests if this thread group has been destro
|java.lang.ThreadGroup.list()|Prints information about this thread group to the
|java.lang.ThreadGroup.parentOf(ThreadGroup)|Tests if this thread group is eith
|java.lang.ThreadGroup.resume()|Resumes all threads in this thread group.
|java.lang.ThreadGroup.setDaemon(boolean)|Changes the daemon status of this thr
|java.lang.ThreadGroup.setMaxPriority(int)|Sets the maximum priority of the gro
|java.lang.ThreadGroup.stop()|Stops all threads in this thread group.
|java.lang.ThreadGroup.suspend()|Suspends all threads in this thread group.
|java.lang.ThreadGroup.toString()|Returns a string representation of this Threa
|java.lang.ThreadGroup.uncaughtException(Thread,Throwable)|Called by the Java V

*java.lang.ThreadGroup_Description*

A thread group represents a set of threads. In addition, a thread group can 
also include other thread groups. The thread groups form a tree in which every 
thread group except the initial thread group has a parent. 

A thread is allowed to access information about its own thread group, but not 
to access information about its thread group's parent thread group or any other 
thread groups. 


*java.lang.ThreadGroup(String)*

public ThreadGroup(java.lang.String name)

Constructs a new thread group. The parent of this new group is the thread group 
of the currently running thread. 

The checkAccess method of the parent thread group is called with no arguments; 
this may result in a security exception. 

    name - the name of the new thread group. 

*java.lang.ThreadGroup(ThreadGroup,String)*

public ThreadGroup(
  java.lang.ThreadGroup parent,
  java.lang.String name)

Creates a new thread group. The parent of this new group is the specified 
thread group. 

The checkAccess method of the parent thread group is called with no arguments; 
this may result in a security exception. 

    parent - the parent thread group. 
    name - the name of the new thread group. 

*java.lang.ThreadGroup.activeCount()*

public int activeCount()

Returns an estimate of the number of active threads in this thread group. The 
result might not reflect concurrent activity, and might be affected by the 
presence of certain system threads. 

Due to the inherently imprecise nature of the result, it is recommended that 
this method only be used for informational purposes. 


    Returns: an estimate of the number of active threads in this thread group and in any 
             other thread group that has this thread group as an ancestor. 
*java.lang.ThreadGroup.activeGroupCount()*

public int activeGroupCount()

Returns an estimate of the number of active groups in this thread group. The 
result might not reflect concurrent activity. 

Due to the inherently imprecise nature of the result, it is recommended that 
this method only be used for informational purposes. 


    Returns: the number of active thread groups with this thread group as an ancestor. 
*java.lang.ThreadGroup.allowThreadSuspension(boolean)*

public boolean allowThreadSuspension(boolean b)

Used by VM to control lowmem implicit suspension. 

    b - boolean to allow or disallow suspension 

    Returns: true on success 
*java.lang.ThreadGroup.checkAccess()*

public final void checkAccess()

Determines if the currently running thread has permission to modify this thread 
group. 

If there is a security manager, its checkAccess method is called with this 
thread group as its argument. This may result in throwing a SecurityException. 


*java.lang.ThreadGroup.destroy()*

public final void destroy()

Destroys this thread group and all of its subgroups. This thread group must be 
empty, indicating that all threads that had been in this thread group have 
since stopped. 

First, the checkAccess method of this thread group is called with no arguments; 
this may result in a security exception. 


*java.lang.ThreadGroup.enumerate(Thread[])*

public int enumerate(java.lang.Thread[] list)

Copies into the specified array every active thread in this thread group and 
its subgroups. 

First, the checkAccess method of this thread group is called with no arguments; 
this may result in a security exception. 

An application might use the activeCount method to get an estimate of how big 
the array should be, however if the array is too short to hold all the threads, 
the extra threads are silently ignored. If it is critical to obtain every 
active thread in this thread group and its subgroups, the caller should verify 
that the returned int value is strictly less than the length of list. 

Due to the inherent race condition in this method, it is recommended that the 
method only be used for informational purposes. 

    list - an array into which to place the list of threads. 

    Returns: the number of threads put into the array. 
*java.lang.ThreadGroup.enumerate(Thread[],boolean)*

public int enumerate(
  java.lang.Thread[] list,
  boolean recurse)

Copies into the specified array every active thread in this thread group. If 
the recurse flag is true, references to every active thread in this thread's 
subgroups are also included. If the array is too short to hold all the threads, 
the extra threads are silently ignored. 

First, the checkAccess method of this thread group is called with no arguments; 
this may result in a security exception. 

An application might use the activeCount method to get an estimate of how big 
the array should be, however if the array is too short to hold all the threads, 
the extra threads are silently ignored. If it is critical to obtain every 
active thread in this thread group, the caller should verify that the returned 
int value is strictly less than the length of list. 

Due to the inherent race condition in this method, it is recommended that the 
method only be used for informational purposes. 

    list - an array into which to place the list of threads. 
    recurse - a flag indicating whether also to include threads in thread groups that are 
       subgroups of this thread group. 

    Returns: the number of threads placed into the array. 
*java.lang.ThreadGroup.enumerate(ThreadGroup[])*

public int enumerate(java.lang.ThreadGroup[] list)

Copies into the specified array references to every active subgroup in this 
thread group. 

First, the checkAccess method of this thread group is called with no arguments; 
this may result in a security exception. 

An application might use the activeGroupCount method to get an estimate of how 
big the array should be, however if the array is too short to hold all the 
thread groups, the extra thread groups are silently ignored. If it is critical 
to obtain every active subgroup in this thread group, the caller should verify 
that the returned int value is strictly less than the length of list. 

Due to the inherent race condition in this method, it is recommended that the 
method only be used for informational purposes. 

    list - an array into which to place the list of thread groups. 

    Returns: the number of thread groups put into the array. 
*java.lang.ThreadGroup.enumerate(ThreadGroup[],boolean)*

public int enumerate(
  java.lang.ThreadGroup[] list,
  boolean recurse)

Copies into the specified array references to every active subgroup in this 
thread group. If the recurse flag is true, references to all active subgroups 
of the subgroups and so forth are also included. 

First, the checkAccess method of this thread group is called with no arguments; 
this may result in a security exception. 

An application might use the activeGroupCount method to get an estimate of how 
big the array should be, however if the array is too short to hold all the 
thread groups, the extra thread groups are silently ignored. If it is critical 
to obtain every active subgroup in this thread group, the caller should verify 
that the returned int value is strictly less than the length of list. 

Due to the inherent race condition in this method, it is recommended that the 
method only be used for informational purposes. 

    list - an array into which to place the list of threads. 
    recurse - a flag indicating whether to recursively enumerate all included thread groups. 

    Returns: the number of thread groups put into the array. 
*java.lang.ThreadGroup.getMaxPriority()*

public final int getMaxPriority()

Returns the maximum priority of this thread group. Threads that are part of 
this group cannot have a higher priority than the maximum priority. 


    Returns: the maximum priority that a thread in this thread group can have. 
*java.lang.ThreadGroup.getName()*

public final |java.lang.String| getName()

Returns the name of this thread group. 


    Returns: the name of this thread group. 
*java.lang.ThreadGroup.getParent()*

public final |java.lang.ThreadGroup| getParent()

Returns the parent of this thread group. 

First, if the parent is not null, the checkAccess method of the parent thread 
group is called with no arguments; this may result in a security exception. 


    Returns: the parent of this thread group. The top-level thread group is the only thread 
             group whose parent is null. 
*java.lang.ThreadGroup.interrupt()*

public final void interrupt()

Interrupts all threads in this thread group. 

First, the checkAccess method of this thread group is called with no arguments; 
this may result in a security exception. 

This method then calls the interrupt method on all the threads in this thread 
group and in all of its subgroups. 


*java.lang.ThreadGroup.isDaemon()*

public final boolean isDaemon()

Tests if this thread group is a daemon thread group. A daemon thread group is 
automatically destroyed when its last thread is stopped or its last thread 
group is destroyed. 


    Returns: true if this thread group is a daemon thread group; false otherwise. 
*java.lang.ThreadGroup.isDestroyed()*

public synchronized boolean isDestroyed()

Tests if this thread group has been destroyed. 


    Returns: true if this object is destroyed 
*java.lang.ThreadGroup.list()*

public void list()

Prints information about this thread group to the standard output. This method 
is useful only for debugging. 


*java.lang.ThreadGroup.parentOf(ThreadGroup)*

public final boolean parentOf(java.lang.ThreadGroup g)

Tests if this thread group is either the thread group argument or one of its 
ancestor thread groups. 

    g - a thread group. 

    Returns: true if this thread group is the thread group argument or one of its ancestor 
             thread groups; false otherwise. 
*java.lang.ThreadGroup.resume()*

public final void resume()

Resumes all threads in this thread group. 

First, the checkAccess method of this thread group is called with no arguments; 
this may result in a security exception. 

This method then calls the resume method on all the threads in this thread 
group and in all of its sub groups. 


*java.lang.ThreadGroup.setDaemon(boolean)*

public final void setDaemon(boolean daemon)

Changes the daemon status of this thread group. 

First, the checkAccess method of this thread group is called with no arguments; 
this may result in a security exception. 

A daemon thread group is automatically destroyed when its last thread is 
stopped or its last thread group is destroyed. 

    daemon - if true, marks this thread group as a daemon thread group; otherwise, marks 
       this thread group as normal. 

*java.lang.ThreadGroup.setMaxPriority(int)*

public final void setMaxPriority(int pri)

Sets the maximum priority of the group. Threads in the thread group that 
already have a higher priority are not affected. 

First, the checkAccess method of this thread group is called with no arguments; 
this may result in a security exception. 

If the pri argument is less than (|java.lang.Thread|) or greater than 
(|java.lang.Thread|) , the maximum priority of the group remains unchanged. 

Otherwise, the priority of this ThreadGroup object is set to the smaller of the 
specified pri and the maximum permitted priority of the parent of this thread 
group. (If this thread group is the system thread group, which has no parent, 
then its maximum priority is simply set to pri.) Then this method is called 
recursively, with pri as its argument, for every thread group that belongs to 
this thread group. 

    pri - the new priority of the thread group. 

*java.lang.ThreadGroup.stop()*

public final void stop()

Stops all threads in this thread group. 

First, the checkAccess method of this thread group is called with no arguments; 
this may result in a security exception. 

This method then calls the stop method on all the threads in this thread group 
and in all of its subgroups. 


*java.lang.ThreadGroup.suspend()*

public final void suspend()

Suspends all threads in this thread group. 

First, the checkAccess method of this thread group is called with no arguments; 
this may result in a security exception. 

This method then calls the suspend method on all the threads in this thread 
group and in all of its subgroups. 


*java.lang.ThreadGroup.toString()*

public |java.lang.String| toString()

Returns a string representation of this Thread group. 


    Returns: a string representation of this thread group. 
*java.lang.ThreadGroup.uncaughtException(Thread,Throwable)*

public void uncaughtException(
  java.lang.Thread t,
  java.lang.Throwable e)

Called by the Java Virtual Machine when a thread in this thread group stops 
because of an uncaught exception, and the thread does not have a specific 
(|java.lang.Thread.UncaughtExceptionHandler|) installed. 

The uncaughtException method of ThreadGroup does the following: 

If this thread group has a parent thread group, the uncaughtException method of 
that parent is called with the same two arguments. Otherwise, this method 
checks to see if there is a default uncaught exception 
handler(|java.lang.Thread|) installed, and if so, its uncaughtException method 
is called with the same two arguments. Otherwise, this method determines if the 
Throwable argument is an instance of (|java.lang.ThreadDeath|) . If so, nothing 
special is done. Otherwise, a message containing the thread's name, as returned 
from the thread's getName(|java.lang.Thread|) method, and a stack backtrace, 
using the Throwable's printStackTrace(|java.lang.Throwable|) method, is printed 
to the standard error stream(|java.lang.System|) . 

Applications can override this method in subclasses of ThreadGroup to provide 
alternative handling of uncaught exceptions. 

    t - the thread that is about to exit. 
    e - the uncaught exception. 



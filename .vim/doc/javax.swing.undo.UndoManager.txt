*javax.swing.undo.UndoManager* *UndoManager* Concrete subclass of CompoundEdit 


public class UndoManager
  extends    |javax.swing.undo.CompoundEdit|
  implements |javax.swing.event.UndoableEditListener|

|javax.swing.undo.UndoManager_Description|
|javax.swing.undo.UndoManager_Fields|
|javax.swing.undo.UndoManager_Constructors|
|javax.swing.undo.UndoManager_Methods|

================================================================================

*javax.swing.undo.UndoManager_Constructors*
|javax.swing.undo.UndoManager()|

*javax.swing.undo.UndoManager_Methods*
|javax.swing.undo.UndoManager.addEdit(UndoableEdit)|If inProgress, inserts anEd
|javax.swing.undo.UndoManager.canRedo()|Overridden to preserve usual semantics:
|javax.swing.undo.UndoManager.canUndo()|Overridden to preserve usual semantics:
|javax.swing.undo.UndoManager.canUndoOrRedo()|Return true if calling undoOrRedo
|javax.swing.undo.UndoManager.discardAllEdits()|Empty the undo manager, sending
|javax.swing.undo.UndoManager.editToBeRedone()|Returns the the next significant
|javax.swing.undo.UndoManager.editToBeUndone()|Returns the the next significant
|javax.swing.undo.UndoManager.end()|Sending end() to an UndoManager turns it in
|javax.swing.undo.UndoManager.getLimit()|Returns the maximum number of edits th
|javax.swing.undo.UndoManager.getRedoPresentationName()|If inProgress, returns 
|javax.swing.undo.UndoManager.getUndoOrRedoPresentationName()|Return the approp
|javax.swing.undo.UndoManager.getUndoPresentationName()|If inProgress, returns 
|javax.swing.undo.UndoManager.redo()|If this UndoManager is inProgress,  redoes
|javax.swing.undo.UndoManager.redoTo(UndoableEdit)|Redoes all changes from inde
|javax.swing.undo.UndoManager.setLimit(int)|Set the maximum number of edits thi
|javax.swing.undo.UndoManager.toString()|Returns a string that displays and ide
|javax.swing.undo.UndoManager.trimEdits(int,int)|Tell the edits in the given ra
|javax.swing.undo.UndoManager.trimForLimit()|Reduce the number of queued edits 
|javax.swing.undo.UndoManager.undo()|If this UndoManager is inProgress, undo th
|javax.swing.undo.UndoManager.undoableEditHappened(UndoableEditEvent)|Called by
|javax.swing.undo.UndoManager.undoOrRedo()|Undo or redo as appropriate.
|javax.swing.undo.UndoManager.undoTo(UndoableEdit)|Undoes all changes from inde

*javax.swing.undo.UndoManager_Description*

Concrete subclass of CompoundEdit which can serve as a UndoableEditListener, 
consolidating the UndoableEditEvents from a variety of sources, and undoing or 
redoing them one at a time. 

Unlike AbstractUndoableEdit and CompoundEdit, the public methods of this class 
are synchronized, and should be safe to call from multiple threads. This should 
make UndoManager a convenient marshall for sets of undoable JavaBeans. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.undo.UndoManager()*

public UndoManager()




*javax.swing.undo.UndoManager.addEdit(UndoableEdit)*

public synchronized boolean addEdit(javax.swing.undo.UndoableEdit anEdit)

If inProgress, inserts anEdit at indexOfNextAdd, and removes any old edits that 
were at indexOfNextAdd or later. The die method is called on each edit that is 
removed is sent, in the reverse of the order the edits were added. Updates 
indexOfNextAdd. 

If not inProgress, acts as a CompoundEdit. 

    anEdit - the edit to be added 

*javax.swing.undo.UndoManager.canRedo()*

public synchronized boolean canRedo()

Overridden to preserve usual semantics: returns true if a redo operation would 
be successful now, false otherwise 


*javax.swing.undo.UndoManager.canUndo()*

public synchronized boolean canUndo()

Overridden to preserve usual semantics: returns true if an undo operation would 
be successful now, false otherwise 


*javax.swing.undo.UndoManager.canUndoOrRedo()*

public synchronized boolean canUndoOrRedo()

Return true if calling undoOrRedo will undo or redo. Suitable for deciding to 
enable a command that toggles between the two functions, which only makes sense 
to use if limit == 1. 


*javax.swing.undo.UndoManager.discardAllEdits()*

public synchronized void discardAllEdits()

Empty the undo manager, sending each edit a die message in the process. 


*javax.swing.undo.UndoManager.editToBeRedone()*

protected |javax.swing.undo.UndoableEdit| editToBeRedone()

Returns the the next significant edit to be redone if redo is called. May 
return null 


*javax.swing.undo.UndoManager.editToBeUndone()*

protected |javax.swing.undo.UndoableEdit| editToBeUndone()

Returns the the next significant edit to be undone if undo is called. May 
return null 


*javax.swing.undo.UndoManager.end()*

public synchronized void end()

Sending end() to an UndoManager turns it into a plain old (ended) CompoundEdit. 

Calls super's end() method (making inProgress false), then sends die() to the 
unreachable edits at indexOfNextAdd and beyond, in the reverse of the order in 
which they were added. 


*javax.swing.undo.UndoManager.getLimit()*

public synchronized int getLimit()

Returns the maximum number of edits this UndoManager will hold. Default value 
is 100. 


*javax.swing.undo.UndoManager.getRedoPresentationName()*

public synchronized |java.lang.String| getRedoPresentationName()

If inProgress, returns getRedoPresentationName of the significant edit that 
will be redone when redo() is invoked. If there is none, returns 
AbstractUndoableEdit.redoText from the defaults table. 

If not inProgress, acts as a CompoundEdit 


*javax.swing.undo.UndoManager.getUndoOrRedoPresentationName()*

public synchronized |java.lang.String| getUndoOrRedoPresentationName()

Return the appropriate name for a command that toggles between undo and redo. 
Only makes sense to use such a command if limit == 1 and we're not in progress. 


*javax.swing.undo.UndoManager.getUndoPresentationName()*

public synchronized |java.lang.String| getUndoPresentationName()

If inProgress, returns getUndoPresentationName of the significant edit that 
will be undone when undo() is invoked. If there is none, returns 
AbstractUndoableEdit.undoText from the defaults table. 

If not inProgress, acts as a CompoundEdit 


*javax.swing.undo.UndoManager.redo()*

public synchronized void redo()
  throws |javax.swing.undo.CannotRedoException|
         
If this UndoManager is inProgress, redoes the last significant UndoableEdit at 
indexOfNextAdd or after, and all insignificant edits up to it. Updates 
indexOfNextAdd accordingly. 

If not inProgress, indexOfNextAdd is ignored and super's routine is called. 


*javax.swing.undo.UndoManager.redoTo(UndoableEdit)*

protected void redoTo(javax.swing.undo.UndoableEdit edit)
  throws |javax.swing.undo.CannotRedoException|
         
Redoes all changes from indexOfNextAdd to edit. Updates indexOfNextAdd 
accordingly. 


*javax.swing.undo.UndoManager.setLimit(int)*

public synchronized void setLimit(int l)

Set the maximum number of edits this UndoManager will hold. If edits need to be 
discarded to shrink the limit, they will be told to die in the reverse of the 
order that they were added. 


*javax.swing.undo.UndoManager.toString()*

public |java.lang.String| toString()

Returns a string that displays and identifies this object's properties. 


    Returns: a String representation of this object 
*javax.swing.undo.UndoManager.trimEdits(int,int)*

protected void trimEdits(
  int from,
  int to)

Tell the edits in the given range (inclusive) to die, and remove them from 
edits. from > to is a no-op. 


*javax.swing.undo.UndoManager.trimForLimit()*

protected void trimForLimit()

Reduce the number of queued edits to a range of size limit, centered on 
indexOfNextAdd. 


*javax.swing.undo.UndoManager.undo()*

public synchronized void undo()
  throws |javax.swing.undo.CannotUndoException|
         
If this UndoManager is inProgress, undo the last significant UndoableEdit 
before indexOfNextAdd, and all insignificant edits back to it. Updates 
indexOfNextAdd accordingly. 

If not inProgress, indexOfNextAdd is ignored and super's routine is called. 


*javax.swing.undo.UndoManager.undoableEditHappened(UndoableEditEvent)*

public void undoableEditHappened(javax.swing.event.UndoableEditEvent e)

Called by the UndoabledEdit sources this UndoManager listens to. Calls addEdit 
with e.getEdit(). 


*javax.swing.undo.UndoManager.undoOrRedo()*

public synchronized void undoOrRedo()
  throws |javax.swing.undo.CannotRedoException|
         |javax.swing.undo.CannotUndoException|
         
Undo or redo as appropriate. Suitable for binding to an action that toggles 
between these two functions. Only makes sense to send this if limit == 1. 


*javax.swing.undo.UndoManager.undoTo(UndoableEdit)*

protected void undoTo(javax.swing.undo.UndoableEdit edit)
  throws |javax.swing.undo.CannotUndoException|
         
Undoes all changes from indexOfNextAdd to edit. Updates indexOfNextAdd 
accordingly. 




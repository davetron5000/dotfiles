*java.util.concurrent.CopyOnWriteArrayList* *CopyOnWriteArrayList* A thread-safe

public class CopyOnWriteArrayList
  extends    |java.lang.Object|
  implements |java.util.List|
             |java.util.RandomAccess|
             |java.lang.Cloneable|
             |java.io.Serializable|

|java.util.concurrent.CopyOnWriteArrayList_Description|
|java.util.concurrent.CopyOnWriteArrayList_Fields|
|java.util.concurrent.CopyOnWriteArrayList_Constructors|
|java.util.concurrent.CopyOnWriteArrayList_Methods|

================================================================================

*java.util.concurrent.CopyOnWriteArrayList_Constructors*
|java.util.concurrent.CopyOnWriteArrayList()|Creates an empty list.
|java.util.concurrent.CopyOnWriteArrayList(Collection)|Creates a list containin
|java.util.concurrent.CopyOnWriteArrayList(E[])|Create a new CopyOnWriteArrayLi

*java.util.concurrent.CopyOnWriteArrayList_Methods*
|java.util.concurrent.CopyOnWriteArrayList.add(E)|Appends the specified element
|java.util.concurrent.CopyOnWriteArrayList.add(int,E)|Inserts the specified ele
|java.util.concurrent.CopyOnWriteArrayList.addAll(Collection)|Appends all of th
|java.util.concurrent.CopyOnWriteArrayList.addAll(int,Collection)|Inserts all o
|java.util.concurrent.CopyOnWriteArrayList.addAllAbsent(Collection)|Appends all
|java.util.concurrent.CopyOnWriteArrayList.addIfAbsent(E)|Append the element if
|java.util.concurrent.CopyOnWriteArrayList.clear()|Removes all of the elements 
|java.util.concurrent.CopyOnWriteArrayList.clone()|Returns a shallow copy of th
|java.util.concurrent.CopyOnWriteArrayList.contains(Object)|Returns true if thi
|java.util.concurrent.CopyOnWriteArrayList.containsAll(Collection)|Returns true
|java.util.concurrent.CopyOnWriteArrayList.equals(Object)|Compares the specifie
|java.util.concurrent.CopyOnWriteArrayList.get(int)|Returns the element at the 
|java.util.concurrent.CopyOnWriteArrayList.hashCode()|Returns the hash code val
|java.util.concurrent.CopyOnWriteArrayList.indexOf(E,int)|Searches for the firs
|java.util.concurrent.CopyOnWriteArrayList.indexOf(Object)|Searches for the fir
|java.util.concurrent.CopyOnWriteArrayList.isEmpty()|Tests if this list has no 
|java.util.concurrent.CopyOnWriteArrayList.iterator()|Returns an Iterator over 
|java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(E,int)|Searches backward
|java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(Object)|Returns the inde
|java.util.concurrent.CopyOnWriteArrayList.listIterator()|Returns an Iterator o
|java.util.concurrent.CopyOnWriteArrayList.listIterator(int)|Returns a ListIter
|java.util.concurrent.CopyOnWriteArrayList.remove(int)|Removes the element at t
|java.util.concurrent.CopyOnWriteArrayList.remove(Object)|Removes a single inst
|java.util.concurrent.CopyOnWriteArrayList.removeAll(Collection)|Removes from t
|java.util.concurrent.CopyOnWriteArrayList.retainAll(Collection)|Retains only t
|java.util.concurrent.CopyOnWriteArrayList.set(int,E)|Replaces the element at t
|java.util.concurrent.CopyOnWriteArrayList.size()|Returns the number of element
|java.util.concurrent.CopyOnWriteArrayList.subList(int,int)|Returns a view of t
|java.util.concurrent.CopyOnWriteArrayList.toArray()|Returns an array containin
|java.util.concurrent.CopyOnWriteArrayList.toArray(T[])|Returns an array contai
|java.util.concurrent.CopyOnWriteArrayList.toString()|Returns a string represen

*java.util.concurrent.CopyOnWriteArrayList_Description*

A thread-safe variant of (|java.util.ArrayList|) in which all mutative 
operations (add, set, and so on) are implemented by making a fresh copy of the 
underlying array. 

This is ordinarily too costly, but may be more efficient than alternatives when 
traversal operations vastly outnumber mutations, and is useful when you cannot 
or don't want to synchronize traversals, yet need to preclude interference 
among concurrent threads. The "snapshot" style iterator method uses a reference 
to the state of the array at the point that the iterator was created. This 
array never changes during the lifetime of the iterator, so interference is 
impossible and the iterator is guaranteed not to throw 
ConcurrentModificationException. The iterator will not reflect additions, 
removals, or changes to the list since the iterator was created. 
Element-changing operations on iterators themselves (remove, set, and add) are 
not supported. These methods throw UnsupportedOperationException. 

This class is a member of the <a href="/../guide/collections/index.html"> Java 
Collections Framework. 


*java.util.concurrent.CopyOnWriteArrayList()*

public CopyOnWriteArrayList()

Creates an empty list. 


*java.util.concurrent.CopyOnWriteArrayList(Collection)*

public CopyOnWriteArrayList(java.util.Collection c)

Creates a list containing the elements of the specified Collection, in the 
order they are returned by the Collection's iterator. 

    c - the collection of initially held elements 

*java.util.concurrent.CopyOnWriteArrayList(E[])*

public CopyOnWriteArrayList(java.lang.Object[] toCopyIn)

Create a new CopyOnWriteArrayList holding a copy of given array. 

    toCopyIn - the array (a copy of this array is used as the internal array) 

*java.util.concurrent.CopyOnWriteArrayList.add(E)*

public synchronized boolean add(java.lang.Object element)

Appends the specified element to the end of this list. 

    element - element to be appended to this list. 

    Returns: true (as per the general contract of Collection.add). 
*java.util.concurrent.CopyOnWriteArrayList.add(int,E)*

public synchronized void add(
  int index,
  java.lang.Object element)

Inserts the specified element at the specified position in this list. Shifts 
the element currently at that position (if any) and any subsequent elements to 
the right (adds one to their indices). 

    index - index at which the specified element is to be inserted. 
    element - element to be inserted. 

*java.util.concurrent.CopyOnWriteArrayList.addAll(Collection)*

public synchronized boolean addAll(java.util.Collection c)

Appends all of the elements in the specified Collection to the end of this 
list, in the order that they are returned by the specified Collection's 
Iterator. 

    c - elements to be inserted into this list. 

    Returns: true if any elements are added 
*java.util.concurrent.CopyOnWriteArrayList.addAll(int,Collection)*

public synchronized boolean addAll(
  int index,
  java.util.Collection c)

Inserts all of the elements in the specified Collection into this list, 
starting at the specified position. Shifts the element currently at that 
position (if any) and any subsequent elements to the right (increases their 
indices). The new elements will appear in the list in the order that they are 
returned by the specified Collection's iterator. 

    index - index at which to insert first element from the specified collection. 
    c - elements to be inserted into this list. 

    Returns: true if any elements are added 
*java.util.concurrent.CopyOnWriteArrayList.addAllAbsent(Collection)*

public synchronized int addAllAbsent(java.util.Collection c)

Appends all of the elements in the specified Collection that are not already 
contained in this list, to the end of this list, in the order that they are 
returned by the specified Collection's Iterator. 

    c - elements to be added into this list. 

    Returns: the number of elements added 
*java.util.concurrent.CopyOnWriteArrayList.addIfAbsent(E)*

public synchronized boolean addIfAbsent(java.lang.Object element)

Append the element if not present. 

    element - element to be added to this Collection, if absent. 

    Returns: true if added 
*java.util.concurrent.CopyOnWriteArrayList.clear()*

public synchronized void clear()

Removes all of the elements from this list. 


*java.util.concurrent.CopyOnWriteArrayList.clone()*

public |java.lang.Object| clone()

Returns a shallow copy of this list. (The elements themselves are not copied.) 


    Returns: a clone of this list. 
*java.util.concurrent.CopyOnWriteArrayList.contains(Object)*

public boolean contains(java.lang.Object elem)

Returns true if this list contains the specified element. 

    elem - element whose presence in this List is to be tested. 

    Returns: true if the specified element is present; false otherwise. 
*java.util.concurrent.CopyOnWriteArrayList.containsAll(Collection)*

public boolean containsAll(java.util.Collection c)

Returns true if this Collection contains all of the elements in the specified 
Collection. 

This implementation iterates over the specified Collection, checking each 
element returned by the Iterator in turn to see if it's contained in this 
Collection. If all elements are so contained true is returned, otherwise false. 

    c - the collection 

    Returns: true if all elements are contained 
*java.util.concurrent.CopyOnWriteArrayList.equals(Object)*

public boolean equals(java.lang.Object o)

Compares the specified Object with this List for equality. Returns true if and 
only if the specified Object is also a List, both Lists have the same size, and 
all corresponding pairs of elements in the two Lists are equal. (Two elements 
e1 and e2 are equal if (e1==null ? e2==null : e1.equals(e2)).) In other words, 
two Lists are defined to be equal if they contain the same elements in the same 
order. 

This implementation first checks if the specified object is this List. If so, 
it returns true; if not, it checks if the specified object is a List. If not, 
it returns false; if so, it iterates over both lists, comparing corresponding 
pairs of elements. If any comparison returns false, this method returns false. 
If either Iterator runs out of elements before the other it returns false (as 
the Lists are of unequal length); otherwise it returns true when the iterations 
complete. 

    o - the Object to be compared for equality with this List. 

    Returns: true if the specified Object is equal to this List. 
*java.util.concurrent.CopyOnWriteArrayList.get(int)*

public |java.lang.Object| get(int index)

Returns the element at the specified position in this list. 

    index - index of element to return. 

    Returns: the element at the specified position in this list. 
*java.util.concurrent.CopyOnWriteArrayList.hashCode()*

public int hashCode()

Returns the hash code value for this List. 

This implementation uses the definition in (|java.util.List|) . 


    Returns: the hash code 
*java.util.concurrent.CopyOnWriteArrayList.indexOf(E,int)*

public int indexOf(
  java.lang.Object elem,
  int index)

Searches for the first occurrence of the given argument, beginning the search 
at index, and testing for equality using the equals method. 

    elem - an object. 
    index - the index to start searching from. 

    Returns: the index of the first occurrence of the object argument in this List at 
             position index or later in the List; returns -1 if the object is 
             not found. 
*java.util.concurrent.CopyOnWriteArrayList.indexOf(Object)*

public int indexOf(java.lang.Object elem)

Searches for the first occurrence of the given argument, testing for equality 
using the equals method. 

    elem - an object. 

    Returns: the index of the first occurrence of the argument in this list; returns -1 if 
             the object is not found. 
*java.util.concurrent.CopyOnWriteArrayList.isEmpty()*

public boolean isEmpty()

Tests if this list has no elements. 


    Returns: true if this list has no elements; false otherwise. 
*java.util.concurrent.CopyOnWriteArrayList.iterator()*

public |java.util.Iterator| iterator()

Returns an Iterator over the elements contained in this collection. The 
iterator provides a snapshot of the state of the list when the iterator was 
constructed. No synchronization is needed while traversing the iterator. The 
iterator does NOT support the remove method. 


    Returns: 
*java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(E,int)*

public int lastIndexOf(
  java.lang.Object elem,
  int index)

Searches backwards for the specified object, starting from the specified index, 
and returns an index to it. 

    elem - the desired element. 
    index - the index to start searching from. 

    Returns: the index of the last occurrence of the specified object in this List at 
             position less than index in the List; -1 if the object is not 
             found. 
*java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(Object)*

public int lastIndexOf(java.lang.Object elem)

Returns the index of the last occurrence of the specified object in this list. 

    elem - the desired element. 

    Returns: the index of the last occurrence of the specified object in this list; returns 
             -1 if the object is not found. 
*java.util.concurrent.CopyOnWriteArrayList.listIterator()*

public |java.util.ListIterator| listIterator()

Returns an Iterator of the elements in this List (in proper sequence). The 
iterator provides a snapshot of the state of the list when the iterator was 
constructed. No synchronization is needed while traversing the iterator. The 
iterator does NOT support the remove, set, or add methods. 


    Returns: 
*java.util.concurrent.CopyOnWriteArrayList.listIterator(int)*

public |java.util.ListIterator| listIterator(int index)

Returns a ListIterator of the elements in this List (in proper sequence), 
starting at the specified position in the List. The specified index indicates 
the first element that would be returned by an initial call to nextElement. An 
initial call to previousElement would return the element with the specified 
index minus one. The ListIterator returned by this implementation will throw an 
UnsupportedOperationException in its remove, set and add methods. 

    index - index of first element to be returned from the ListIterator (by a call to 
       getNext). 

    Returns: 
*java.util.concurrent.CopyOnWriteArrayList.remove(int)*

public synchronized |java.lang.Object| remove(int index)

Removes the element at the specified position in this list. Shifts any 
subsequent elements to the left (subtracts one from their indices). 

    index - the index of the element to removed. 

    Returns: the element that was removed from the list. 
*java.util.concurrent.CopyOnWriteArrayList.remove(Object)*

public synchronized boolean remove(java.lang.Object o)

Removes a single instance of the specified element from this list, if it is 
present (optional operation). More formally, removes an element e such that 
(o==null ? e==null : o.equals(e)), if the list contains one or more such 
elements. Returns true if the list contained the specified element (or 
equivalently, if the list changed as a result of the call). 

    o - element to be removed from this list, if present. 

    Returns: true if the list contained the specified element. 
*java.util.concurrent.CopyOnWriteArrayList.removeAll(Collection)*

public synchronized boolean removeAll(java.util.Collection c)

Removes from this Collection all of its elements that are contained in the 
specified Collection. This is a particularly expensive operation in this class 
because of the need for an internal temporary array. 

    c - the collection 

    Returns: true if this Collection changed as a result of the call. 
*java.util.concurrent.CopyOnWriteArrayList.retainAll(Collection)*

public synchronized boolean retainAll(java.util.Collection c)

Retains only the elements in this Collection that are contained in the 
specified Collection (optional operation). In other words, removes from this 
Collection all of its elements that are not contained in the specified 
Collection. 

    c - the collection 

    Returns: true if this Collection changed as a result of the call. 
*java.util.concurrent.CopyOnWriteArrayList.set(int,E)*

public synchronized |java.lang.Object| set(
  int index,
  java.lang.Object element)

Replaces the element at the specified position in this list with the specified 
element. 

    index - index of element to replace. 
    element - element to be stored at the specified position. 

    Returns: the element previously at the specified position. 
*java.util.concurrent.CopyOnWriteArrayList.size()*

public int size()

Returns the number of elements in this list. 


    Returns: the number of elements in this list. 
*java.util.concurrent.CopyOnWriteArrayList.subList(int,int)*

public synchronized |java.util.List| subList(
  int fromIndex,
  int toIndex)

Returns a view of the portion of this List between fromIndex, inclusive, and 
toIndex, exclusive. The returned List is backed by this List, so changes in the 
returned List are reflected in this List, and vice-versa. While mutative 
operations are supported, they are probably not very useful for 
CopyOnWriteArrayLists. 

The semantics of the List returned by this method become undefined if the 
backing list (i.e., this List) is structurally modified in any way other than 
via the returned List. (Structural modifications are those that change the size 
of the List, or otherwise perturb it in such a fashion that iterations in 
progress may yield incorrect results.) 

    fromIndex - low endpoint (inclusive) of the subList. 
    toIndex - high endpoint (exclusive) of the subList. 

    Returns: a view of the specified range within this List. 
*java.util.concurrent.CopyOnWriteArrayList.toArray()*

public |java.lang.Object| toArray()

Returns an array containing all of the elements in this list in the correct 
order. 


    Returns: an array containing all of the elements in this list in the correct order. 
*java.util.concurrent.CopyOnWriteArrayList.toArray(T[])*

public |java.lang.Object| toArray(java.lang.Object[] a)

Returns an array containing all of the elements in this list in the correct 
order. The runtime type of the returned array is that of the specified array. 
If the list fits in the specified array, it is returned therein. Otherwise, a 
new array is allocated with the runtime type of the specified array and the 
size of this list. 

If the list fits in the specified array with room to spare (i.e., the array has 
more elements than the list), the element in the array immediately following 
the end of the collection is set to null. This is useful in determining the 
length of the list only if the caller knows that the list does not contain any 
null elements. 

    a - the array into which the elements of the list are to be stored, if it is big 
       enough; otherwise, a new array of the same runtime type is allocated for 
       this purpose. 

    Returns: an array containing the elements of the list. 
*java.util.concurrent.CopyOnWriteArrayList.toString()*

public |java.lang.String| toString()

Returns a string representation of this Collection, containing the String 
representation of each element. 




*java.security.cert.TrustAnchor* *TrustAnchor* A trust anchor or most-trusted Certification Authority (CA).

public class TrustAnchor
  extends    |java.lang.Object|

|java.security.cert.TrustAnchor_Description|
|java.security.cert.TrustAnchor_Fields|
|java.security.cert.TrustAnchor_Constructors|
|java.security.cert.TrustAnchor_Methods|

====================================================================================================================================================================================

*java.security.cert.TrustAnchor_Constructors*
|java.security.cert.TrustAnchor(String,PublicKey,byte[])|Creates an instance of TrustAnchor where the  most-trusted CA is specified as a distinguished name and public key.
|java.security.cert.TrustAnchor(X500Principal,PublicKey,byte[])|Creates an instance of TrustAnchor where the  most-trusted CA is specified as an X500Principal and public key.
|java.security.cert.TrustAnchor(X509Certificate,byte[])|Creates an instance of TrustAnchor with the specified  X509Certificate and optional name constraints, which  are intended t

*java.security.cert.TrustAnchor_Methods*
|java.security.cert.TrustAnchor.getCA()|Returns the name of the most-trusted CA as an X500Principal.
|java.security.cert.TrustAnchor.getCAName()|Returns the name of the most-trusted CA in RFC 2253 String  format.
|java.security.cert.TrustAnchor.getCAPublicKey()|Returns the public key of the most-trusted CA.
|java.security.cert.TrustAnchor.getNameConstraints()|Returns the name constraints parameter.
|java.security.cert.TrustAnchor.getTrustedCert()|Returns the most-trusted CA certificate.
|java.security.cert.TrustAnchor.toString()|Returns a formatted string describing the TrustAnchor.

*java.security.cert.TrustAnchor_Description*

A trust anchor or most-trusted Certification Authority (CA). 

This class represents a "most-trusted CA", which is used as a trust anchor for validating X.509 certification paths. A most-trusted CA includes the public key of the CA, the CA's 
name, and any constraints upon the set of paths which may be validated using this key. These parameters can be specified in the form of a trusted X509Certificate or as individual 
parameters. 

Concurrent Access 

All TrustAnchor objects must be immutable and thread-safe. That is, multiple threads may concurrently invoke the methods defined in this class on a single TrustAnchor object (or 
more than one) with no ill effects. Requiring TrustAnchor objects to be immutable and thread-safe allows them to be passed around to various pieces of code without worrying about 
coordinating access. This stipulation applies to all public fields and methods of this class and any added or overridden by subclasses. 



*java.security.cert.TrustAnchor(String,PublicKey,byte[])*

public TrustAnchor(
  java.lang.String caName,
  java.security.PublicKey pubKey,
  byte[] nameConstraints)

Creates an instance of TrustAnchor where the most-trusted CA is specified as a distinguished name and public key. Name constraints are an optional parameter, and are intended to 
be used as additional constraints when validating an X.509 certification path. 

The name constraints are specified as a byte array. This byte array contains the DER encoded form of the name constraints, as they would appear in the NameConstraints structure 
defined in RFC 2459 and X.509. The ASN.1 notation for this structure is supplied in the documentation for TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) 
(|java.security.cert.TrustAnchor|) . 

Note that the name constraints byte array supplied here is cloned to protect against subsequent modifications. 

    caName - the X.500 distinguished name of the most-trusted CA in RFC 2253 String format 
    pubKey - the public key of the most-trusted CA 
    nameConstraints - a byte array containing the ASN.1 DER encoding of a NameConstraints extension to be used for checking name constraints. Only the value of the extension is included, not the OID or 
       criticality flag. Specify null to omit the parameter. 

*java.security.cert.TrustAnchor(X500Principal,PublicKey,byte[])*

public TrustAnchor(
  javax.security.auth.x500.X500Principal caPrincipal,
  java.security.PublicKey pubKey,
  byte[] nameConstraints)

Creates an instance of TrustAnchor where the most-trusted CA is specified as an X500Principal and public key. Name constraints are an optional parameter, and are intended to be 
used as additional constraints when validating an X.509 certification path. 

The name constraints are specified as a byte array. This byte array contains the DER encoded form of the name constraints, as they would appear in the NameConstraints structure 
defined in RFC 2459 and X.509. The ASN.1 notation for this structure is supplied in the documentation for TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) 
(|java.security.cert.TrustAnchor|) . 

Note that the name constraints byte array supplied here is cloned to protect against subsequent modifications. 

    caPrincipal - the name of the most-trusted CA as X500Principal 
    pubKey - the public key of the most-trusted CA 
    nameConstraints - a byte array containing the ASN.1 DER encoding of a NameConstraints extension to be used for checking name constraints. Only the value of the extension is included, not the OID or 
       criticality flag. Specify null to omit the parameter. 

*java.security.cert.TrustAnchor(X509Certificate,byte[])*

public TrustAnchor(
  java.security.cert.X509Certificate trustedCert,
  byte[] nameConstraints)

Creates an instance of TrustAnchor with the specified X509Certificate and optional name constraints, which are intended to be used as additional constraints when validating an 
X.509 certification path. 

The name constraints are specified as a byte array. This byte array should contain the DER encoded form of the name constraints, as they would appear in the NameConstraints 
structure defined in RFC 2459 and X.509. The ASN.1 definition of this structure appears below. 



NameConstraints ::= SEQUENCE { permittedSubtrees [0] GeneralSubtrees OPTIONAL, excludedSubtrees [1] GeneralSubtrees OPTIONAL } 

GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree 

GeneralSubtree ::= SEQUENCE { base GeneralName, minimum [0] BaseDistance DEFAULT 0, maximum [1] BaseDistance OPTIONAL } 

BaseDistance ::= INTEGER (0..MAX) 

GeneralName ::= CHOICE { otherName [0] OtherName, rfc822Name [1] IA5String, dNSName [2] IA5String, x400Address [3] ORAddress, directoryName [4] Name, ediPartyName [5] 
EDIPartyName, uniformResourceIdentifier [6] IA5String, iPAddress [7] OCTET STRING, registeredID [8] OBJECT IDENTIFIER} 

Note that the name constraints byte array supplied is cloned to protect against subsequent modifications. 

    trustedCert - a trusted X509Certificate 
    nameConstraints - a byte array containing the ASN.1 DER encoding of a NameConstraints extension to be used for checking name constraints. Only the value of the extension is included, not the OID or 
       criticality flag. Specify null to omit the parameter. 

*java.security.cert.TrustAnchor.getCA()*

public final |javax.security.auth.x500.X500Principal| getCA()

Returns the name of the most-trusted CA as an X500Principal. 



    Returns: the X.500 distinguished name of the most-trusted CA, or null if the trust anchor was not specified as a trusted public key and name or X500Principal pair 

*java.security.cert.TrustAnchor.getCAName()*

public final |java.lang.String| getCAName()

Returns the name of the most-trusted CA in RFC 2253 String format. 



    Returns: the X.500 distinguished name of the most-trusted CA, or null if the trust anchor was not specified as a trusted public key and name or X500Principal pair 

*java.security.cert.TrustAnchor.getCAPublicKey()*

public final |java.security.PublicKey| getCAPublicKey()

Returns the public key of the most-trusted CA. 



    Returns: the public key of the most-trusted CA, or null if the trust anchor was not specified as a trusted public key and name or X500Principal pair 

*java.security.cert.TrustAnchor.getNameConstraints()*

public final byte[] getNameConstraints()

Returns the name constraints parameter. The specified name constraints are associated with this trust anchor and are intended to be used as additional constraints when validating 
an X.509 certification path. 

The name constraints are returned as a byte array. This byte array contains the DER encoded form of the name constraints, as they would appear in the NameConstraints structure 
defined in RFC 2459 and X.509. The ASN.1 notation for this structure is supplied in the documentation for TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) 
(|java.security.cert.TrustAnchor|) . 

Note that the byte array returned is cloned to protect against subsequent modifications. 



    Returns: a byte array containing the ASN.1 DER encoding of a NameConstraints extension used for checking name constraints, or null if not set. 

*java.security.cert.TrustAnchor.getTrustedCert()*

public final |java.security.cert.X509Certificate| getTrustedCert()

Returns the most-trusted CA certificate. 



    Returns: a trusted X509Certificate or null if the trust anchor was not specified as a trusted certificate 

*java.security.cert.TrustAnchor.toString()*

public |java.lang.String| toString()

Returns a formatted string describing the TrustAnchor. 



    Returns: a formatted string describing the TrustAnchor 



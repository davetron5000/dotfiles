*javax.swing.text.DefaultEditorKit* *DefaultEditorKit* This is the set of things needed by a text component
 to be a reasonably functioning editor for some type
 of text document.

public class DefaultEditorKit
  extends    |javax.swing.text.EditorKit|

|javax.swing.text.DefaultEditorKit_Description|
|javax.swing.text.DefaultEditorKit_Fields|
|javax.swing.text.DefaultEditorKit_Constructors|
|javax.swing.text.DefaultEditorKit_Methods|

====================================================================================================================================================================================

*javax.swing.text.DefaultEditorKit_Fields*
|java.lang.String_javax.swing.text.DefaultEditorKit.backwardAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.beepAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.beginAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.beginLineAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.beginParagraphAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.beginWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.copyAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.cutAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.defaultKeyTypedAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.deleteNextCharAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.deletePrevCharAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.downAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.endAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.endLineAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.EndOfLineStringProperty|
|java.lang.String_javax.swing.text.DefaultEditorKit.endParagraphAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.endWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.forwardAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.insertBreakAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.insertContentAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.insertTabAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.nextWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.pageDownAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.pageUpAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.pasteAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.previousWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.readOnlyAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectAllAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionBackwardAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionBeginAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionBeginLineAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionBeginParagraphAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionBeginWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionDownAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionEndAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionEndLineAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionEndParagraphAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionEndWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionForwardAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionNextWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionPreviousWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionUpAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectLineAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectParagraphAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.upAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.writableAction|

*javax.swing.text.DefaultEditorKit_Constructors*
|javax.swing.text.DefaultEditorKit()|default constructor for DefaultEditorKit

*javax.swing.text.DefaultEditorKit_Methods*
|javax.swing.text.DefaultEditorKit.createCaret()|Fetches a caret that can navigate through views  produced by the associated ViewFactory.
|javax.swing.text.DefaultEditorKit.createDefaultDocument()|Creates an uninitialized text storage model (PlainDocument)  that is appropriate for this type of editor.
|javax.swing.text.DefaultEditorKit.getActions()|Fetches the set of commands that can be used  on a text component that is using a model and  view produced by this kit.
|javax.swing.text.DefaultEditorKit.getContentType()|Gets the MIME type of the data that this  kit represents support for.
|javax.swing.text.DefaultEditorKit.getViewFactory()|Fetches a factory that is suitable for producing   views of any models that are produced by this  kit.
|javax.swing.text.DefaultEditorKit.read(InputStream,Document,int)|Inserts content from the given stream which is expected   to be in a format appropriate for this kind of content 
|javax.swing.text.DefaultEditorKit.read(Reader,Document,int)|Inserts content from the given stream, which will be   treated as plain text.
|javax.swing.text.DefaultEditorKit.write(OutputStream,Document,int,int)|Writes content from a document to the given stream  in a format appropriate for this kind of content handle
|javax.swing.text.DefaultEditorKit.write(Writer,Document,int,int)|Writes content from a document to the given stream  as plain text.

*javax.swing.text.DefaultEditorKit_Description*

This is the set of things needed by a text component to be a reasonably functioning editor for some type of text document. This implementation provides a default implementation 
which treats text as plain text and provides a minimal set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, line.separator, is defined to be platform-dependent, either "\n", "\r", or "\r\n". There is also a property 
defined in DefaultEditorKit, called EndOfLineStringProperty, which is defined automatically when a document is loaded, to be the first occurrence of any of the newline characters. 
When a document is loaded, EndOfLineStringProperty is set appropriately, and when the document is written back out, the EndOfLineStringProperty is used. But while the document is 
in memory, the "\n" character is used to define a newline, regardless of how the newline is defined when the document is on disk. Therefore, for searching purposes, "\n" should 
always be used. When a new document is created, and the EndOfLineStringProperty has not been defined, it will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty methods. Subclasses may override this behavior. 





*java.lang.String_javax.swing.text.DefaultEditorKit.backwardAction*

Name of the Action for moving the caret logically backward one position. 


*java.lang.String_javax.swing.text.DefaultEditorKit.beepAction*

Name of the action to create a beep. 


*java.lang.String_javax.swing.text.DefaultEditorKit.beginAction*

Name of the Action for moving the caret to the beginning of the document. 


*java.lang.String_javax.swing.text.DefaultEditorKit.beginLineAction*

Name of the Action for moving the caret to the beginning of a line. 


*java.lang.String_javax.swing.text.DefaultEditorKit.beginParagraphAction*

Name of the Action for moving the caret to the beginning of a paragraph. 


*java.lang.String_javax.swing.text.DefaultEditorKit.beginWordAction*

Name of the Action for moving the caret to the beginning of a word. 


*java.lang.String_javax.swing.text.DefaultEditorKit.copyAction*

Name of the action to copy the selected region and place the contents into the system clipboard. 


*java.lang.String_javax.swing.text.DefaultEditorKit.cutAction*

Name of the action to cut the selected region and place the contents into the system clipboard. 


*java.lang.String_javax.swing.text.DefaultEditorKit.defaultKeyTypedAction*

Name of the action that is executed by default if a key typed event is received and there is no keymap entry. 


*java.lang.String_javax.swing.text.DefaultEditorKit.deleteNextCharAction*

Name of the action to delete the character of content that follows the current caret position. 


*java.lang.String_javax.swing.text.DefaultEditorKit.deletePrevCharAction*

Name of the action to delete the character of content that precedes the current caret position. 


*java.lang.String_javax.swing.text.DefaultEditorKit.downAction*

Name of the Action for moving the caret logically downward one position. 


*java.lang.String_javax.swing.text.DefaultEditorKit.endAction*

Name of the Action for moving the caret to the end of the document. 


*java.lang.String_javax.swing.text.DefaultEditorKit.endLineAction*

Name of the Action for moving the caret to the end of a line. 


*java.lang.String_javax.swing.text.DefaultEditorKit.EndOfLineStringProperty*

When reading a document if a CRLF is encountered a property with this name is added and the value will be "\r\n". 


*java.lang.String_javax.swing.text.DefaultEditorKit.endParagraphAction*

Name of the Action for moving the caret to the end of a paragraph. 


*java.lang.String_javax.swing.text.DefaultEditorKit.endWordAction*

Name of the Action for moving the caret to the end of a word. 


*java.lang.String_javax.swing.text.DefaultEditorKit.forwardAction*

Name of the Action for moving the caret logically forward one position. 


*java.lang.String_javax.swing.text.DefaultEditorKit.insertBreakAction*

Name of the action to place a line/paragraph break into the document. If there is a selection, it is removed before the break is added. 


*java.lang.String_javax.swing.text.DefaultEditorKit.insertContentAction*

Name of the action to place content into the associated document. If there is a selection, it is removed before the new content is added. 


*java.lang.String_javax.swing.text.DefaultEditorKit.insertTabAction*

Name of the action to place a tab character into the document. If there is a selection, it is removed before the tab is added. 


*java.lang.String_javax.swing.text.DefaultEditorKit.nextWordAction*

Name of the Action for moving the caret to the beginning of the next word. 


*java.lang.String_javax.swing.text.DefaultEditorKit.pageDownAction*

Name of the action to page down vertically. 


*java.lang.String_javax.swing.text.DefaultEditorKit.pageUpAction*

Name of the action to page up vertically. 


*java.lang.String_javax.swing.text.DefaultEditorKit.pasteAction*

Name of the action to paste the contents of the system clipboard into the selected region, or before the caret if nothing is selected. 


*java.lang.String_javax.swing.text.DefaultEditorKit.previousWordAction*

Name of the Action for moving the caret to the beginning of the previous word. 


*java.lang.String_javax.swing.text.DefaultEditorKit.readOnlyAction*

Name of the action to set the editor into read-only mode. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectAllAction*

Name of the Action for selecting the entire document 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectionBackwardAction*

Name of the Action for extending the selection by moving the caret logically backward one position. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectionBeginAction*

Name of the Action for moving the caret to the beginning of the document. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectionBeginLineAction*

Name of the Action for moving the caret to the beginning of a line, extending the selection. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectionBeginParagraphAction*

Name of the Action for moving the caret to the beginning of a paragraph, extending the selection. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectionBeginWordAction*

Name of the Action for moving the caret to the beginning of a word, extending the selection. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectionDownAction*

Name of the Action for moving the caret logically downward one position, extending the selection. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectionEndAction*

Name of the Action for moving the caret to the end of the document. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectionEndLineAction*

Name of the Action for moving the caret to the end of a line, extending the selection. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectionEndParagraphAction*

Name of the Action for moving the caret to the end of a paragraph, extending the selection. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectionEndWordAction*

Name of the Action for moving the caret to the end of a word, extending the selection. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectionForwardAction*

Name of the Action for extending the selection by moving the caret logically forward one position. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectionNextWordAction*

Name of the Action for moving the selection to the beginning of the next word, extending the selection. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectionPreviousWordAction*

Name of the Action for moving the selection to the beginning of the previous word, extending the selection. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectionUpAction*

Name of the Action for moving the caret logically upward one position, extending the selection. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectLineAction*

Name of the Action for selecting a line around the caret. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectParagraphAction*

Name of the Action for selecting a paragraph around the caret. 


*java.lang.String_javax.swing.text.DefaultEditorKit.selectWordAction*

Name of the Action for selecting a word around the caret. 


*java.lang.String_javax.swing.text.DefaultEditorKit.upAction*

Name of the Action for moving the caret logically upward one position. 


*java.lang.String_javax.swing.text.DefaultEditorKit.writableAction*

Name of the action to set the editor into writeable mode. 



*javax.swing.text.DefaultEditorKit()*

public DefaultEditorKit()

default constructor for DefaultEditorKit 


*javax.swing.text.DefaultEditorKit.createCaret()*

public |javax.swing.text.Caret| createCaret()

Fetches a caret that can navigate through views produced by the associated ViewFactory. 



    Returns: 

*javax.swing.text.DefaultEditorKit.createDefaultDocument()*

public |javax.swing.text.Document| createDefaultDocument()

Creates an uninitialized text storage model (PlainDocument) that is appropriate for this type of editor. 



    Returns: 

*javax.swing.text.DefaultEditorKit.getActions()*

public |javax.swing.Action|[] getActions()

Fetches the set of commands that can be used on a text component that is using a model and view produced by this kit. 



    Returns: the command list 

*javax.swing.text.DefaultEditorKit.getContentType()*

public |java.lang.String| getContentType()

Gets the MIME type of the data that this kit represents support for. The default is text/plain. 



    Returns: 

*javax.swing.text.DefaultEditorKit.getViewFactory()*

public |javax.swing.text.ViewFactory| getViewFactory()

Fetches a factory that is suitable for producing views of any models that are produced by this kit. The default is to have the UI produce the factory, so this method has no 
implementation. 



    Returns: the view factory 

*javax.swing.text.DefaultEditorKit.read(InputStream,Document,int)*

public void read(
  java.io.InputStream in,
  javax.swing.text.Document doc,
  int pos)
  throws |javax.swing.text.BadLocationException|
         |java.io.IOException|
         
Inserts content from the given stream which is expected to be in a format appropriate for this kind of content handler. 


    in - The stream to read from 
    doc - The destination for the insertion. 
    pos - The location in the document to place the content >= 0. 

*javax.swing.text.DefaultEditorKit.read(Reader,Document,int)*

public void read(
  java.io.Reader in,
  javax.swing.text.Document doc,
  int pos)
  throws |javax.swing.text.BadLocationException|
         |java.io.IOException|
         
Inserts content from the given stream, which will be treated as plain text. 


    in - The stream to read from 
    doc - The destination for the insertion. 
    pos - The location in the document to place the content >= 0. 

*javax.swing.text.DefaultEditorKit.write(OutputStream,Document,int,int)*

public void write(
  java.io.OutputStream out,
  javax.swing.text.Document doc,
  int pos,
  int len)
  throws |javax.swing.text.BadLocationException|
         |java.io.IOException|
         
Writes content from a document to the given stream in a format appropriate for this kind of content handler. 


    out - The stream to write to 
    doc - The source for the write. 
    pos - The location in the document to fetch the content >= 0. 
    len - The amount to write out >= 0. 

*javax.swing.text.DefaultEditorKit.write(Writer,Document,int,int)*

public void write(
  java.io.Writer out,
  javax.swing.text.Document doc,
  int pos,
  int len)
  throws |javax.swing.text.BadLocationException|
         |java.io.IOException|
         
Writes content from a document to the given stream as plain text. 


    out - The stream to write to 
    doc - The source for the write. 
    pos - The location in the document to fetch the content from >= 0. 
    len - The amount to write out >= 0. 



*javax.swing.text.DefaultEditorKit* *DefaultEditorKit* This is the set of things

public class DefaultEditorKit
  extends    |javax.swing.text.EditorKit|

|javax.swing.text.DefaultEditorKit_Description|
|javax.swing.text.DefaultEditorKit_Fields|
|javax.swing.text.DefaultEditorKit_Constructors|
|javax.swing.text.DefaultEditorKit_Methods|

================================================================================

*javax.swing.text.DefaultEditorKit_Fields*
|java.lang.String_javax.swing.text.DefaultEditorKit.backwardAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.beepAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.beginAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.beginLineAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.beginParagraphAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.beginWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.copyAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.cutAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.defaultKeyTypedAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.deleteNextCharAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.deletePrevCharAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.downAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.endAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.endLineAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.EndOfLineStringProperty|
|java.lang.String_javax.swing.text.DefaultEditorKit.endParagraphAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.endWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.forwardAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.insertBreakAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.insertContentAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.insertTabAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.nextWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.pageDownAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.pageUpAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.pasteAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.previousWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.readOnlyAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectAllAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionBackwardAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionBeginAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionBeginLineAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionBeginParagraphAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionBeginWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionDownAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionEndAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionEndLineAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionEndParagraphAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionEndWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionForwardAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionNextWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionPreviousWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectionUpAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectLineAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectParagraphAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.selectWordAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.upAction|
|java.lang.String_javax.swing.text.DefaultEditorKit.writableAction|

*javax.swing.text.DefaultEditorKit_Constructors*
|javax.swing.text.DefaultEditorKit()|default constructor for DefaultEditorKit

*javax.swing.text.DefaultEditorKit_Methods*
|javax.swing.text.DefaultEditorKit.createCaret()|Fetches a caret that can navig
|javax.swing.text.DefaultEditorKit.createDefaultDocument()|Creates an uninitial
|javax.swing.text.DefaultEditorKit.getActions()|Fetches the set of commands tha
|javax.swing.text.DefaultEditorKit.getContentType()|Gets the MIME type of the d
|javax.swing.text.DefaultEditorKit.getViewFactory()|Fetches a factory that is s
|javax.swing.text.DefaultEditorKit.read(InputStream,Document,int)|Inserts conte
|javax.swing.text.DefaultEditorKit.read(Reader,Document,int)|Inserts content fr
|javax.swing.text.DefaultEditorKit.write(OutputStream,Document,int,int)|Writes 
|javax.swing.text.DefaultEditorKit.write(Writer,Document,int,int)|Writes conten

*javax.swing.text.DefaultEditorKit_Description*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.backwardAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.beepAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.beginAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.beginLineAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.beginParagraphAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.beginWordAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.copyAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.cutAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.defaultKeyTypedAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.deleteNextCharAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.deletePrevCharAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.downAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.endAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.endLineAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.EndOfLineStringProperty*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.endParagraphAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.endWordAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.forwardAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.insertBreakAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.insertContentAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.insertTabAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.nextWordAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.pageDownAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.pageUpAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.pasteAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.previousWordAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.readOnlyAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectAllAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectionBackwardAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectionBeginAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectionBeginLineAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectionBeginParagraphAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectionBeginWordAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectionDownAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectionEndAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectionEndLineAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectionEndParagraphAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectionEndWordAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectionForwardAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectionNextWordAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectionPreviousWordAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectionUpAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectLineAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectParagraphAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.selectWordAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.upAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 




*java.lang.String_javax.swing.text.DefaultEditorKit.writableAction*

This is the set of things needed by a text component to be a reasonably 
functioning editor for some type of text document. This implementation provides 
a default implementation which treats text as plain text and provides a minimal 
set of actions for a simple editor. 

Newlines 

There are two properties which deal with newlines. The system property, 
line.separator, is defined to be platform-dependent, either "\n", "\r", or 
"\r\n". There is also a property defined in DefaultEditorKit, called 
EndOfLineStringProperty, which is defined automatically when a document is 
loaded, to be the first occurrence of any of the newline characters. When a 
document is loaded, EndOfLineStringProperty is set appropriately, and when the 
document is written back out, the EndOfLineStringProperty is used. But while 
the document is in memory, the "\n" character is used to define a newline, 
regardless of how the newline is defined when the document is on disk. 
Therefore, for searching purposes, "\n" should always be used. When a new 
document is created, and the EndOfLineStringProperty has not been defined, it 
will use the System property when writing out the document. Note that 
EndOfLineStringProperty is set on the Document using the get/setProperty 
methods. Subclasses may override this behavior. 





*javax.swing.text.DefaultEditorKit()*

public DefaultEditorKit()

default constructor for DefaultEditorKit 


*javax.swing.text.DefaultEditorKit.createCaret()*

public |javax.swing.text.Caret| createCaret()

Fetches a caret that can navigate through views produced by the associated 
ViewFactory. 


    Returns: 
*javax.swing.text.DefaultEditorKit.createDefaultDocument()*

public |javax.swing.text.Document| createDefaultDocument()

Creates an uninitialized text storage model (PlainDocument) that is appropriate 
for this type of editor. 


    Returns: 
*javax.swing.text.DefaultEditorKit.getActions()*

public |javax.swing.Action| getActions()

Fetches the set of commands that can be used on a text component that is using 
a model and view produced by this kit. 


    Returns: the command list 
*javax.swing.text.DefaultEditorKit.getContentType()*

public |java.lang.String| getContentType()

Gets the MIME type of the data that this kit represents support for. The 
default is text/plain. 


    Returns: 
*javax.swing.text.DefaultEditorKit.getViewFactory()*

public |javax.swing.text.ViewFactory| getViewFactory()

Fetches a factory that is suitable for producing views of any models that are 
produced by this kit. The default is to have the UI produce the factory, so 
this method has no implementation. 


    Returns: the view factory 
*javax.swing.text.DefaultEditorKit.read(InputStream,Document,int)*

public void read(
  java.io.InputStream in,
  javax.swing.text.Document doc,
  int pos)
  throws |javax.swing.text.BadLocationException|
         |java.io.IOException|
         
Inserts content from the given stream which is expected to be in a format 
appropriate for this kind of content handler. 

    in - The stream to read from 
    doc - The destination for the insertion. 
    pos - The location in the document to place the content >= 0. 

*javax.swing.text.DefaultEditorKit.read(Reader,Document,int)*

public void read(
  java.io.Reader in,
  javax.swing.text.Document doc,
  int pos)
  throws |javax.swing.text.BadLocationException|
         |java.io.IOException|
         
Inserts content from the given stream, which will be treated as plain text. 

    in - The stream to read from 
    doc - The destination for the insertion. 
    pos - The location in the document to place the content >= 0. 

*javax.swing.text.DefaultEditorKit.write(OutputStream,Document,int,int)*

public void write(
  java.io.OutputStream out,
  javax.swing.text.Document doc,
  int pos,
  int len)
  throws |javax.swing.text.BadLocationException|
         |java.io.IOException|
         
Writes content from a document to the given stream in a format appropriate for 
this kind of content handler. 

    out - The stream to write to 
    doc - The source for the write. 
    pos - The location in the document to fetch the content >= 0. 
    len - The amount to write out >= 0. 

*javax.swing.text.DefaultEditorKit.write(Writer,Document,int,int)*

public void write(
  java.io.Writer out,
  javax.swing.text.Document doc,
  int pos,
  int len)
  throws |javax.swing.text.BadLocationException|
         |java.io.IOException|
         
Writes content from a document to the given stream as plain text. 

    out - The stream to write to 
    doc - The source for the write. 
    pos - The location in the document to fetch the content from >= 0. 
    len - The amount to write out >= 0. 



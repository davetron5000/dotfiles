*java.awt.image.WritableRaster* *WritableRaster* This class extends Raster to pr

public class WritableRaster
  extends    |java.awt.image.Raster|

|java.awt.image.WritableRaster_Description|
|java.awt.image.WritableRaster_Fields|
|java.awt.image.WritableRaster_Constructors|
|java.awt.image.WritableRaster_Methods|

================================================================================

*java.awt.image.WritableRaster_Constructors*
|java.awt.image.WritableRaster(SampleModel,DataBuffer,Point)|Constructs a Writa
|java.awt.image.WritableRaster(SampleModel,DataBuffer,Rectangle,Point,WritableRaster)|
|java.awt.image.WritableRaster(SampleModel,Point)|Constructs a WritableRaster w

*java.awt.image.WritableRaster_Methods*
|java.awt.image.WritableRaster.createWritableChild(int,int,int,int,int,int,int[])|
|java.awt.image.WritableRaster.createWritableTranslatedChild(int,int)|Create a 
|java.awt.image.WritableRaster.getWritableParent()|Returns the parent WritableR
|java.awt.image.WritableRaster.setDataElements(int,int,int,int,Object)|Sets the
|java.awt.image.WritableRaster.setDataElements(int,int,Object)|Sets the data fo
|java.awt.image.WritableRaster.setDataElements(int,int,Raster)|Sets the data fo
|java.awt.image.WritableRaster.setPixel(int,int,double[])|Sets a pixel in the D
|java.awt.image.WritableRaster.setPixel(int,int,float[])|Sets a pixel in the Da
|java.awt.image.WritableRaster.setPixel(int,int,int[])|Sets a pixel in the Data
|java.awt.image.WritableRaster.setPixels(int,int,int,int,double[])|Sets all sam
|java.awt.image.WritableRaster.setPixels(int,int,int,int,float[])|Sets all samp
|java.awt.image.WritableRaster.setPixels(int,int,int,int,int[])|Sets all sample
|java.awt.image.WritableRaster.setRect(int,int,Raster)|Copies pixels from Raste
|java.awt.image.WritableRaster.setRect(Raster)|Copies pixels from Raster srcRas
|java.awt.image.WritableRaster.setSample(int,int,int,double)|Sets a sample in t
|java.awt.image.WritableRaster.setSample(int,int,int,float)|Sets a sample in th
|java.awt.image.WritableRaster.setSample(int,int,int,int)|Sets a sample in the 
|java.awt.image.WritableRaster.setSamples(int,int,int,int,int,double[])|Sets th
|java.awt.image.WritableRaster.setSamples(int,int,int,int,int,float[])|Sets the
|java.awt.image.WritableRaster.setSamples(int,int,int,int,int,int[])|Sets the s

*java.awt.image.WritableRaster_Description*

This class extends Raster to provide pixel writing capabilities. Refer to the 
class comment for Raster for descriptions of how a Raster stores pixels. 

The constructors of this class are protected. To instantiate a WritableRaster, 
use one of the createWritableRaster factory methods in the Raster class. 


*java.awt.image.WritableRaster(SampleModel,DataBuffer,Point)*

protected WritableRaster(
  java.awt.image.SampleModel sampleModel,
  java.awt.image.DataBuffer dataBuffer,
  java.awt.Point origin)

Constructs a WritableRaster with the given SampleModel and DataBuffer. The 
WritableRaster's upper left corner is origin and it is the same size as the 
SampleModel. The DataBuffer is not initialized and must be compatible with 
SampleModel. 

    sampleModel - The SampleModel that specifies the layout. 
    dataBuffer - The DataBuffer that contains the image data. 
    origin - The Point that specifies the origin. 

*java.awt.image.WritableRaster(SampleModel,DataBuffer,Rectangle,Point,WritableRaster)*

protected WritableRaster(
  java.awt.image.SampleModel sampleModel,
  java.awt.image.DataBuffer dataBuffer,
  java.awt.Rectangle aRegion,
  java.awt.Point sampleModelTranslate,
  java.awt.image.WritableRaster parent)

Constructs a WritableRaster with the given SampleModel, DataBuffer, and parent. 
aRegion specifies the bounding rectangle of the new Raster. When translated 
into the base Raster's coordinate system, aRegion must be contained by the base 
Raster. (The base Raster is the Raster's ancestor which has no parent.) 
sampleModelTranslate specifies the sampleModelTranslateX and 
sampleModelTranslateY values of the new Raster. 

Note that this constructor should generally be called by other constructors or 
create methods, it should not be used directly. 

    sampleModel - The SampleModel that specifies the layout. 
    dataBuffer - The DataBuffer that contains the image data. 
    aRegion - The Rectangle that specifies the image area. 
    sampleModelTranslate - The Point that specifies the translation from SampleModel to Raster 
       coordinates. 
    parent - The parent (if any) of this raster. 

*java.awt.image.WritableRaster(SampleModel,Point)*

protected WritableRaster(
  java.awt.image.SampleModel sampleModel,
  java.awt.Point origin)

Constructs a WritableRaster with the given SampleModel. The WritableRaster's 
upper left corner is origin and it is the same size as the SampleModel. A 
DataBuffer large enough to describe the WritableRaster is automatically 
created. 

    sampleModel - The SampleModel that specifies the layout. 
    origin - The Point that specifies the origin. 

*java.awt.image.WritableRaster.createWritableChild(int,int,int,int,int,int,int[])*

public |java.awt.image.WritableRaster| createWritableChild(
  int parentX,
  int parentY,
  int w,
  int h,
  int childMinX,
  int childMinY,
  int[] bandList)

Returns a new WritableRaster which shares all or part of this WritableRaster's 
DataBuffer. The new WritableRaster will possess a reference to the current 
WritableRaster, accessible through its getParent() and getWritableParent() 
methods. 

The parentX, parentY, width and height parameters form a Rectangle in this 
WritableRaster's coordinate space, indicating the area of pixels to be shared. 
An error will be thrown if this Rectangle is not contained with the bounds of 
the current WritableRaster. 

The new WritableRaster may additionally be translated to a different coordinate 
system for the plane than that used by the current WritableRaster. The 
childMinX and childMinY parameters give the new (x, y) coordinate of the 
upper-left pixel of the returned WritableRaster; the coordinate (childMinX, 
childMinY) in the new WritableRaster will map to the same pixel as the 
coordinate (parentX, parentY) in the current WritableRaster. 

The new WritableRaster may be defined to contain only a subset of the bands of 
the current WritableRaster, possibly reordered, by means of the bandList 
parameter. If bandList is null, it is taken to include all of the bands of the 
current WritableRaster in their current order. 

To create a new WritableRaster that contains a subregion of the current 
WritableRaster, but shares its coordinate system and bands, this method should 
be called with childMinX equal to parentX, childMinY equal to parentY, and 
bandList equal to null. 

    parentX - X coordinate of the upper left corner in this WritableRaster's coordinates. 
    parentY - Y coordinate of the upper left corner in this WritableRaster's coordinates. 
    w - Width of the region starting at (parentX, parentY). 
    h - Height of the region starting at (parentX, parentY). 
    childMinX - X coordinate of the upper left corner of the returned WritableRaster. 
    childMinY - Y coordinate of the upper left corner of the returned WritableRaster. 
    bandList - Array of band indices, or null to use all bands. 

    Returns: a WritableRaster sharing all or part of the DataBuffer of this WritableRaster. 
*java.awt.image.WritableRaster.createWritableTranslatedChild(int,int)*

public |java.awt.image.WritableRaster| createWritableTranslatedChild(
  int childMinX,
  int childMinY)

Create a WritableRaster with the same size, SampleModel and DataBuffer as this 
one, but with a different location. The new WritableRaster will possess a 
reference to the current WritableRaster, accessible through its getParent() and 
getWritableParent() methods. 

    childMinX - X coord of the upper left corner of the new Raster. 
    childMinY - Y coord of the upper left corner of the new Raster. 

    Returns: a WritableRaster the same as this one except for the specified location. 
*java.awt.image.WritableRaster.getWritableParent()*

public |java.awt.image.WritableRaster| getWritableParent()

Returns the parent WritableRaster (if any) of this WritableRaster, or else 
null. 


    Returns: the parent of this WritableRaster, or null. 
*java.awt.image.WritableRaster.setDataElements(int,int,int,int,Object)*

public void setDataElements(
  int x,
  int y,
  int w,
  int h,
  java.lang.Object inData)

Sets the data for a rectangle of pixels from a primitive array of type 
TransferType. For image data supported by the Java 2D API, this will be one of 
DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, 
DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE. Data 
in the array may be in a packed format, thus increasing efficiency for data 
transfers. An ArrayIndexOutOfBoundsException may be thrown if the coordinates 
are not in bounds, or if inData is not large enough to hold the pixel data. 
However, explicit bounds checking is not guaranteed. A ClassCastException will 
be thrown if the input object is not null and references anything other than an 
array of TransferType. 

    x - The X coordinate of the upper left pixel location. 
    y - The Y coordinate of the upper left pixel location. 
    w - Width of the pixel rectangle. 
    h - Height of the pixel rectangle. 
    inData - An object reference to an array of type defined by getTransferType() and length 
       w*h*getNumDataElements() containing the pixel data to place between x,y 
       and x+w-1, y+h-1. 

*java.awt.image.WritableRaster.setDataElements(int,int,Object)*

public void setDataElements(
  int x,
  int y,
  java.lang.Object inData)

Sets the data for a single pixel from a primitive array of type TransferType. 
For image data supported by the Java 2D(tm) API, this will be one of 
DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, 
DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE. Data 
in the array may be in a packed format, thus increasing efficiency for data 
transfers. An ArrayIndexOutOfBoundsException may be thrown if the coordinates 
are not in bounds, or if inData is not large enough to hold the pixel data. 
However, explicit bounds checking is not guaranteed. A ClassCastException will 
be thrown if the input object is not null and references anything other than an 
array of TransferType. 

    x - The X coordinate of the pixel location. 
    y - The Y coordinate of the pixel location. 
    inData - An object reference to an array of type defined by getTransferType() and length 
       getNumDataElements() containing the pixel data to place at x,y. 

*java.awt.image.WritableRaster.setDataElements(int,int,Raster)*

public void setDataElements(
  int x,
  int y,
  java.awt.image.Raster inRaster)

Sets the data for a rectangle of pixels from an input Raster. The input Raster 
must be compatible with this WritableRaster in that they must have the same 
number of bands, corresponding bands must have the same number of bits per 
sample, the TransferTypes and NumDataElements must be the same, and the packing 
used by the getDataElements/setDataElements must be identical. An 
ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in 
bounds. However, explicit bounds checking is not guaranteed. 

    x - The X coordinate of the pixel location. 
    y - The Y coordinate of the pixel location. 
    inRaster - Raster containing data to place at x,y. 

*java.awt.image.WritableRaster.setPixel(int,int,double[])*

public void setPixel(
  int x,
  int y,
  double[] dArray)

Sets a pixel in the DataBuffer using a double array of samples for input. An 
ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in 
bounds. However, explicit bounds checking is not guaranteed. 

    x - The X coordinate of the pixel location. 
    y - The Y coordinate of the pixel location. 
    dArray - The input samples in a double array. 

*java.awt.image.WritableRaster.setPixel(int,int,float[])*

public void setPixel(
  int x,
  int y,
  float[] fArray)

Sets a pixel in the DataBuffer using a float array of samples for input. An 
ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in 
bounds. However, explicit bounds checking is not guaranteed. 

    x - The X coordinate of the pixel location. 
    y - The Y coordinate of the pixel location. 
    fArray - The input samples in a float array. 

*java.awt.image.WritableRaster.setPixel(int,int,int[])*

public void setPixel(
  int x,
  int y,
  int[] iArray)

Sets a pixel in the DataBuffer using an int array of samples for input. An 
ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in 
bounds. However, explicit bounds checking is not guaranteed. 

    x - The X coordinate of the pixel location. 
    y - The Y coordinate of the pixel location. 
    iArray - The input samples in a int array. 

*java.awt.image.WritableRaster.setPixels(int,int,int,int,double[])*

public void setPixels(
  int x,
  int y,
  int w,
  int h,
  double[] dArray)

Sets all samples for a rectangle of pixels from a double array containing one 
sample per array element. An ArrayIndexOutOfBoundsException may be thrown if 
the coordinates are not in bounds. However, explicit bounds checking is not 
guaranteed. 

    x - The X coordinate of the upper left pixel location. 
    y - The Y coordinate of the upper left pixel location. 
    w - Width of the pixel rectangle. 
    h - Height of the pixel rectangle. 
    dArray - The input double pixel array. 

*java.awt.image.WritableRaster.setPixels(int,int,int,int,float[])*

public void setPixels(
  int x,
  int y,
  int w,
  int h,
  float[] fArray)

Sets all samples for a rectangle of pixels from a float array containing one 
sample per array element. An ArrayIndexOutOfBoundsException may be thrown if 
the coordinates are not in bounds. However, explicit bounds checking is not 
guaranteed. 

    x - The X coordinate of the upper left pixel location. 
    y - The Y coordinate of the upper left pixel location. 
    w - Width of the pixel rectangle. 
    h - Height of the pixel rectangle. 
    fArray - The input float pixel array. 

*java.awt.image.WritableRaster.setPixels(int,int,int,int,int[])*

public void setPixels(
  int x,
  int y,
  int w,
  int h,
  int[] iArray)

Sets all samples for a rectangle of pixels from an int array containing one 
sample per array element. An ArrayIndexOutOfBoundsException may be thrown if 
the coordinates are not in bounds. However, explicit bounds checking is not 
guaranteed. 

    x - The X coordinate of the upper left pixel location. 
    y - The Y coordinate of the upper left pixel location. 
    w - Width of the pixel rectangle. 
    h - Height of the pixel rectangle. 
    iArray - The input int pixel array. 

*java.awt.image.WritableRaster.setRect(int,int,Raster)*

public void setRect(
  int dx,
  int dy,
  java.awt.image.Raster srcRaster)

Copies pixels from Raster srcRaster to this WritableRaster. For each (x, y) 
address in srcRaster, the corresponding pixel is copied to address (x+dx, y+dy) 
in this WritableRaster, unless (x+dx, y+dy) falls outside the bounds of this 
raster. srcRaster must have the same number of bands as this WritableRaster. 
The copy is a simple copy of source samples to the corresponding destination 
samples. For details, see (|java.awt.image.WritableRaster|) . 

    dx - The X translation factor from src space to dst space of the copy. 
    dy - The Y translation factor from src space to dst space of the copy. 
    srcRaster - The Raster from which to copy pixels. 

*java.awt.image.WritableRaster.setRect(Raster)*

public void setRect(java.awt.image.Raster srcRaster)

Copies pixels from Raster srcRaster to this WritableRaster. Each pixel in 
srcRaster is copied to the same x,y address in this raster, unless the address 
falls outside the bounds of this raster. srcRaster must have the same number of 
bands as this WritableRaster. The copy is a simple copy of source samples to 
the corresponding destination samples. 

If all samples of both source and destination Rasters are of integral type and 
less than or equal to 32 bits in size, then calling this method is equivalent 
to executing the following code for all x,y addresses valid in both Rasters. 

Raster srcRaster; WritableRaster dstRaster; for (int b = 0; b When copying a 
float or double source to an integral type destination, each source sample is 
cast to the destination type. When copying an integral type source to a float 
or double destination, the source is first converted to a 32-bit int (if 
necessary), using the above rules for integral types, and then the int is cast 
to float or double. 

    srcRaster - The Raster from which to copy pixels. 

*java.awt.image.WritableRaster.setSample(int,int,int,double)*

public void setSample(
  int x,
  int y,
  int b,
  double s)

Sets a sample in the specified band for the pixel located at (x,y) in the 
DataBuffer using a double for input. An ArrayIndexOutOfBoundsException may be 
thrown if the coordinates are not in bounds. However, explicit bounds checking 
is not guaranteed. 

    x - The X coordinate of the pixel location. 
    y - The Y coordinate of the pixel location. 
    b - The band to set. 
    s - The input sample as a double. 

*java.awt.image.WritableRaster.setSample(int,int,int,float)*

public void setSample(
  int x,
  int y,
  int b,
  float s)

Sets a sample in the specified band for the pixel located at (x,y) in the 
DataBuffer using a float for input. An ArrayIndexOutOfBoundsException may be 
thrown if the coordinates are not in bounds. However, explicit bounds checking 
is not guaranteed. 

    x - The X coordinate of the pixel location. 
    y - The Y coordinate of the pixel location. 
    b - The band to set. 
    s - The input sample as a float. 

*java.awt.image.WritableRaster.setSample(int,int,int,int)*

public void setSample(
  int x,
  int y,
  int b,
  int s)

Sets a sample in the specified band for the pixel located at (x,y) in the 
DataBuffer using an int for input. An ArrayIndexOutOfBoundsException may be 
thrown if the coordinates are not in bounds. However, explicit bounds checking 
is not guaranteed. 

    x - The X coordinate of the pixel location. 
    y - The Y coordinate of the pixel location. 
    b - The band to set. 
    s - The input sample. 

*java.awt.image.WritableRaster.setSamples(int,int,int,int,int,double[])*

public void setSamples(
  int x,
  int y,
  int w,
  int h,
  int b,
  double[] dArray)

Sets the samples in the specified band for the specified rectangle of pixels 
from a double array containing one sample per array element. An 
ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in 
bounds. However, explicit bounds checking is not guaranteed. 

    x - The X coordinate of the upper left pixel location. 
    y - The Y coordinate of the upper left pixel location. 
    w - Width of the pixel rectangle. 
    h - Height of the pixel rectangle. 
    b - The band to set. 
    dArray - The input double sample array. 

*java.awt.image.WritableRaster.setSamples(int,int,int,int,int,float[])*

public void setSamples(
  int x,
  int y,
  int w,
  int h,
  int b,
  float[] fArray)

Sets the samples in the specified band for the specified rectangle of pixels 
from a float array containing one sample per array element. An 
ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in 
bounds. However, explicit bounds checking is not guaranteed. 

    x - The X coordinate of the upper left pixel location. 
    y - The Y coordinate of the upper left pixel location. 
    w - Width of the pixel rectangle. 
    h - Height of the pixel rectangle. 
    b - The band to set. 
    fArray - The input float sample array. 

*java.awt.image.WritableRaster.setSamples(int,int,int,int,int,int[])*

public void setSamples(
  int x,
  int y,
  int w,
  int h,
  int b,
  int[] iArray)

Sets the samples in the specified band for the specified rectangle of pixels 
from an int array containing one sample per array element. An 
ArrayIndexOutOfBoundsException may be thrown if the coordinates are not in 
bounds. However, explicit bounds checking is not guaranteed. 

    x - The X coordinate of the upper left pixel location. 
    y - The Y coordinate of the upper left pixel location. 
    w - Width of the pixel rectangle. 
    h - Height of the pixel rectangle. 
    b - The band to set. 
    iArray - The input int sample array. 



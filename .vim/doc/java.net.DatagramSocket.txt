*java.net.DatagramSocket* *DatagramSocket* This class represents a socket for se

public class DatagramSocket
  extends    |java.lang.Object|

|java.net.DatagramSocket_Description|
|java.net.DatagramSocket_Fields|
|java.net.DatagramSocket_Constructors|
|java.net.DatagramSocket_Methods|

================================================================================

*java.net.DatagramSocket_Constructors*
|java.net.DatagramSocket()|Constructs a datagram socket and binds it to any ava
|java.net.DatagramSocket(DatagramSocketImpl)|Creates an unbound datagram socket
|java.net.DatagramSocket(int)|Constructs a datagram socket and binds it to the 
|java.net.DatagramSocket(int,InetAddress)|Creates a datagram socket, bound to t
|java.net.DatagramSocket(SocketAddress)|Creates a datagram socket, bound to the

*java.net.DatagramSocket_Methods*
|java.net.DatagramSocket.bind(SocketAddress)|Binds this DatagramSocket to a spe
|java.net.DatagramSocket.close()|Closes this datagram socket.
|java.net.DatagramSocket.connect(InetAddress,int)|Connects the socket to a remo
|java.net.DatagramSocket.connect(SocketAddress)|Connects this socket to a remot
|java.net.DatagramSocket.disconnect()|Disconnects the socket.
|java.net.DatagramSocket.getBroadcast()|Tests if SO_BROADCAST is enabled.
|java.net.DatagramSocket.getChannel()|Returns the uniquejava.nio.channels.Datag
|java.net.DatagramSocket.getInetAddress()|Returns the address to which this soc
|java.net.DatagramSocket.getLocalAddress()|Gets the local address to which the 
|java.net.DatagramSocket.getLocalPort()|Returns the port number on the local ho
|java.net.DatagramSocket.getLocalSocketAddress()|Returns the address of the end
|java.net.DatagramSocket.getPort()|Returns the port for this socket.
|java.net.DatagramSocket.getReceiveBufferSize()|Get value of the SO_RCVBUF opti
|java.net.DatagramSocket.getRemoteSocketAddress()|Returns the address of the en
|java.net.DatagramSocket.getReuseAddress()|Tests if SO_REUSEADDR is enabled.
|java.net.DatagramSocket.getSendBufferSize()|Get value of the SO_SNDBUF option 
|java.net.DatagramSocket.getSoTimeout()|Retrive setting for SO_TIMEOUT.
|java.net.DatagramSocket.getTrafficClass()|Gets traffic class or type-of-servic
|java.net.DatagramSocket.isBound()|Returns the binding state of the socket.
|java.net.DatagramSocket.isClosed()|Returns whether the socket is closed or not
|java.net.DatagramSocket.isConnected()|Returns the connection state of the sock
|java.net.DatagramSocket.receive(DatagramPacket)|Receives a datagram packet fro
|java.net.DatagramSocket.send(DatagramPacket)|Sends a datagram packet from this
|java.net.DatagramSocket.setBroadcast(boolean)|Enable/disable SO_BROADCAST.
|java.net.DatagramSocket.setDatagramSocketImplFactory(DatagramSocketImplFactory)|
|java.net.DatagramSocket.setReceiveBufferSize(int)|Sets the SO_RCVBUF option to
|java.net.DatagramSocket.setReuseAddress(boolean)|Enable/disable the SO_REUSEAD
|java.net.DatagramSocket.setSendBufferSize(int)|Sets the SO_SNDBUF option to th
|java.net.DatagramSocket.setSoTimeout(int)|Enable/disable SO_TIMEOUT with the s
|java.net.DatagramSocket.setTrafficClass(int)|Sets traffic class or type-of-ser

*java.net.DatagramSocket_Description*

This class represents a socket for sending and receiving datagram packets. 

A datagram socket is the sending or receiving point for a packet delivery 
service. Each packet sent or received on a datagram socket is individually 
addressed and routed. Multiple packets sent from one machine to another may be 
routed differently, and may arrive in any order. 

UDP broadcasts sends are always enabled on a DatagramSocket. In order to 
receive broadcast packets a DatagramSocket should be bound to the wildcard 
address. In some implementations, broadcast packets may also be received when a 
DatagramSocket is bound to a more specific address. 

Example: 

DatagramSocket s = new DatagramSocket(null); s.bind(new 
InetSocketAddress(8888)); 

Which is equivalent to: 

DatagramSocket s = new DatagramSocket(8888); 

Both cases will create a DatagramSocket able to receive broadcasts on UDP port 
8888. 


*java.net.DatagramSocket()*

public DatagramSocket()
  throws |java.net.SocketException|
         
Constructs a datagram socket and binds it to any available port on the local 
host machine. The socket will be bound to the wildcard address, an IP address 
chosen by the kernel. 

If there is a security manager, its checkListen method is first called with 0 
as its argument to ensure the operation is allowed. This could result in a 
SecurityException. 


*java.net.DatagramSocket(DatagramSocketImpl)*

protected DatagramSocket(java.net.DatagramSocketImpl impl)

Creates an unbound datagram socket with the specified DatagramSocketImpl. 

    impl - an instance of a DatagramSocketImpl the subclass wishes to use on the 
       DatagramSocket. 

*java.net.DatagramSocket(int)*

public DatagramSocket(int port)
  throws |java.net.SocketException|
         
Constructs a datagram socket and binds it to the specified port on the local 
host machine. The socket will be bound to the wildcard address, an IP address 
chosen by the kernel. 

If there is a security manager, its checkListen method is first called with the 
port argument as its argument to ensure the operation is allowed. This could 
result in a SecurityException. 

    port - port to use. 

*java.net.DatagramSocket(int,InetAddress)*

public DatagramSocket(
  int port,
  java.net.InetAddress laddr)
  throws |java.net.SocketException|
         
Creates a datagram socket, bound to the specified local address. The local port 
must be between 0 and 65535 inclusive. If the IP address is 0.0.0.0, the socket 
will be bound to the wildcard address, an IP address chosen by the kernel. 

If there is a security manager, its checkListen method is first called with the 
port argument as its argument to ensure the operation is allowed. This could 
result in a SecurityException. 

    port - local port to use 
    laddr - local address to bind 

*java.net.DatagramSocket(SocketAddress)*

public DatagramSocket(java.net.SocketAddress bindaddr)
  throws |java.net.SocketException|
         
Creates a datagram socket, bound to the specified local socket address. 

If, if the address is null, creates an unbound socket. 

If there is a security manager, its checkListen method is first called with the 
port from the socket address as its argument to ensure the operation is 
allowed. This could result in a SecurityException. 

    bindaddr - local socket address to bind, or null for an unbound socket. 

*java.net.DatagramSocket.bind(SocketAddress)*

public synchronized void bind(java.net.SocketAddress addr)
  throws |java.net.SocketException|
         
Binds this DatagramSocket to a specific address & port. 

If the address is null, then the system will pick up an ephemeral port and a 
valid local address to bind the socket. 

    addr - The address & port to bind to. 

*java.net.DatagramSocket.close()*

public void close()

Closes this datagram socket. 

Any thread currently blocked in {#link receive} upon this socket will throw a 
(|java.net.SocketException|) . 

If this socket has an associated channel then the channel is closed as well. 


*java.net.DatagramSocket.connect(InetAddress,int)*

public void connect(
  java.net.InetAddress address,
  int port)

Connects the socket to a remote address for this socket. When a socket is 
connected to a remote address, packets may only be sent to or received from 
that address. By default a datagram socket is not connected. 

If the remote destination to which the socket is connected does not exist, or 
is otherwise unreachable, and if an ICMP destination unreachable packet has 
been received for that address, then a subsequent call to send or receive may 
throw a PortUnreachableException. Note, there is no guarantee that the 
exception will be thrown. 

A caller's permission to send and receive datagrams to a given host and port 
are checked at connect time. When a socket is connected, receive and send will 
not perform any security checks on incoming and outgoing packets, other than 
matching the packet's and the socket's address and port. On a send operation, 
if the packet's address is set and the packet's address and the socket's 
address do not match, an IllegalArgumentException will be thrown. A socket 
connected to a multicast address may only be used to send packets. 

    address - the remote address for the socket 
    port - the remote port for the socket. 

*java.net.DatagramSocket.connect(SocketAddress)*

public void connect(java.net.SocketAddress addr)
  throws |java.net.SocketException|
         
Connects this socket to a remote socket address (IP address + port number). 

    addr - The remote address. 

*java.net.DatagramSocket.disconnect()*

public void disconnect()

Disconnects the socket. This does nothing if the socket is not connected. 


*java.net.DatagramSocket.getBroadcast()*

public synchronized boolean getBroadcast()
  throws |java.net.SocketException|
         
Tests if SO_BROADCAST is enabled. 


    Returns: a boolean indicating whether or not SO_BROADCAST is enabled. 
*java.net.DatagramSocket.getChannel()*

public |java.nio.channels.DatagramChannel| getChannel()

Returns the unique (|java.nio.channels.DatagramChannel|) object associated with 
this datagram socket, if any. 

A datagram socket will have a channel if, and only if, the channel itself was 
created via the DatagramChannel.open(|java.nio.channels.DatagramChannel|) 
method. 


    Returns: the datagram channel associated with this datagram socket, or null if this 
             socket was not created for a channel 
*java.net.DatagramSocket.getInetAddress()*

public |java.net.InetAddress| getInetAddress()

Returns the address to which this socket is connected. Returns null if the 
socket is not connected. 


    Returns: the address to which this socket is connected. 
*java.net.DatagramSocket.getLocalAddress()*

public |java.net.InetAddress| getLocalAddress()

Gets the local address to which the socket is bound. 

If there is a security manager, its checkConnect method is first called with 
the host address and -1 as its arguments to see if the operation is allowed. 


    Returns: the local address to which the socket is bound, or an InetAddress representing 
             any local address if either the socket is not bound, or the 
             security manager checkConnect method does not allow the operation 
*java.net.DatagramSocket.getLocalPort()*

public int getLocalPort()

Returns the port number on the local host to which this socket is bound. 


    Returns: the port number on the local host to which this socket is bound. 
*java.net.DatagramSocket.getLocalSocketAddress()*

public |java.net.SocketAddress| getLocalSocketAddress()

Returns the address of the endpoint this socket is bound to, or null if it is 
not bound yet. 


    Returns: a SocketAddress representing the local endpoint of this socket, or null if it 
             is not bound yet. 
*java.net.DatagramSocket.getPort()*

public int getPort()

Returns the port for this socket. Returns -1 if the socket is not connected. 


    Returns: the port to which this socket is connected. 
*java.net.DatagramSocket.getReceiveBufferSize()*

public synchronized int getReceiveBufferSize()
  throws |java.net.SocketException|
         
Get value of the SO_RCVBUF option for this DatagramSocket, that is the buffer 
size used by the platform for input on this DatagramSocket. 


    Returns: the value of the SO_RCVBUF option for this DatagramSocket 
*java.net.DatagramSocket.getRemoteSocketAddress()*

public |java.net.SocketAddress| getRemoteSocketAddress()

Returns the address of the endpoint this socket is connected to, or null if it 
is unconnected. 


    Returns: a SocketAddress representing the remote endpoint of this socket, or null if it 
             is not connected yet. 
*java.net.DatagramSocket.getReuseAddress()*

public synchronized boolean getReuseAddress()
  throws |java.net.SocketException|
         
Tests if SO_REUSEADDR is enabled. 


    Returns: a boolean indicating whether or not SO_REUSEADDR is enabled. 
*java.net.DatagramSocket.getSendBufferSize()*

public synchronized int getSendBufferSize()
  throws |java.net.SocketException|
         
Get value of the SO_SNDBUF option for this DatagramSocket, that is the buffer 
size used by the platform for output on this DatagramSocket. 


    Returns: the value of the SO_SNDBUF option for this DatagramSocket 
*java.net.DatagramSocket.getSoTimeout()*

public synchronized int getSoTimeout()
  throws |java.net.SocketException|
         
Retrive setting for SO_TIMEOUT. 0 returns implies that the option is disabled 
(i.e., timeout of infinity). 


    Returns: the setting for SO_TIMEOUT 
*java.net.DatagramSocket.getTrafficClass()*

public synchronized int getTrafficClass()
  throws |java.net.SocketException|
         
Gets traffic class or type-of-service in the IP datagram header for packets 
sent from this DatagramSocket. 

As the underlying network implementation may ignore the traffic class or 
type-of-service set using (|java.net.DatagramSocket|) this method may return a 
different value than was previously set using the (|java.net.DatagramSocket|) 
method on this DatagramSocket. 


    Returns: the traffic class or type-of-service already set 
*java.net.DatagramSocket.isBound()*

public boolean isBound()

Returns the binding state of the socket. 


    Returns: true if the socket succesfuly bound to an address 
*java.net.DatagramSocket.isClosed()*

public boolean isClosed()

Returns whether the socket is closed or not. 


    Returns: true if the socket has been closed 
*java.net.DatagramSocket.isConnected()*

public boolean isConnected()

Returns the connection state of the socket. 


    Returns: true if the socket succesfuly connected to a server 
*java.net.DatagramSocket.receive(DatagramPacket)*

public synchronized void receive(java.net.DatagramPacket p)
  throws |java.io.IOException|
         
Receives a datagram packet from this socket. When this method returns, the 
DatagramPacket's buffer is filled with the data received. The datagram packet 
also contains the sender's IP address, and the port number on the sender's 
machine. 

This method blocks until a datagram is received. The length field of the 
datagram packet object contains the length of the received message. If the 
message is longer than the packet's length, the message is truncated. 

If there is a security manager, a packet cannot be received if the security 
manager's checkAccept method does not allow it. 

    p - the DatagramPacket into which to place the incoming data. 

*java.net.DatagramSocket.send(DatagramPacket)*

public void send(java.net.DatagramPacket p)
  throws |java.io.IOException|
         
Sends a datagram packet from this socket. The DatagramPacket includes 
information indicating the data to be sent, its length, the IP address of the 
remote host, and the port number on the remote host. 

If there is a security manager, and the socket is not currently connected to a 
remote address, this method first performs some security checks. First, if 
p.getAddress().isMulticastAddress() is true, this method calls the security 
manager's checkMulticast method with p.getAddress() as its argument. If the 
evaluation of that expression is false, this method instead calls the security 
manager's checkConnect method with arguments p.getAddress().getHostAddress() 
and p.getPort(). Each call to a security manager method could result in a 
SecurityException if the operation is not allowed. 

    p - the DatagramPacket to be sent. 

*java.net.DatagramSocket.setBroadcast(boolean)*

public synchronized void setBroadcast(boolean on)
  throws |java.net.SocketException|
         
Enable/disable SO_BROADCAST. 

    on - whether or not to have broadcast turned on. 

*java.net.DatagramSocket.setDatagramSocketImplFactory(DatagramSocketImplFactory)*

public static synchronized void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory fac)
  throws |java.io.IOException|
         
Sets the datagram socket implementation factory for the application. The 
factory can be specified only once. 

When an application creates a new datagram socket, the socket implementation 
factory's createDatagramSocketImpl method is called to create the actual 
datagram socket implementation. 

Passing null to the method is a no-op unless the factory was already set. 

If there is a security manager, this method first calls the security manager's 
checkSetFactory method to ensure the operation is allowed. This could result in 
a SecurityException. 

    fac - the desired factory. 

*java.net.DatagramSocket.setReceiveBufferSize(int)*

public synchronized void setReceiveBufferSize(int size)
  throws |java.net.SocketException|
         
Sets the SO_RCVBUF option to the specified value for this DatagramSocket. The 
SO_RCVBUF option is used by the the network implementation as a hint to size 
the underlying network I/O buffers. The SO_RCVBUF setting may also be used by 
the network implementation to determine the maximum size of the packet that can 
be received on this socket. 

Because SO_RCVBUF is a hint, applications that want to verify what size the 
buffers were set to should call (|java.net.DatagramSocket|) . 

Increasing SO_RCVBUF may allow the network implementation to buffer multiple 
packets when packets arrive faster than are being received using 
(|java.net.DatagramSocket|) . 

Note: It is implementation specific if a packet larger than SO_RCVBUF can be 
received. 

    size - the size to which to set the receive buffer size. This value must be greater 
       than 0. 

*java.net.DatagramSocket.setReuseAddress(boolean)*

public synchronized void setReuseAddress(boolean on)
  throws |java.net.SocketException|
         
Enable/disable the SO_REUSEADDR socket option. 

For UDP sockets it may be necessary to bind more than one socket to the same 
socket address. This is typically for the purpose of receiving multicast 
packets (See (|java.net.MulticastSocket|) ). The SO_REUSEADDR socket option 
allows multiple sockets to be bound to the same socket address if the 
SO_REUSEADDR socket option is enabled prior to binding the socket using 
(|java.net.DatagramSocket|) . 

When a DatagramSocket is created the initial setting of SO_REUSEADDR is 
disabled. 

The behaviour when SO_REUSEADDR is enabled or disabled after a socket is bound 
(See (|java.net.DatagramSocket|) ) is not defined. 

    on - whether to enable or disable the 

*java.net.DatagramSocket.setSendBufferSize(int)*

public synchronized void setSendBufferSize(int size)
  throws |java.net.SocketException|
         
Sets the SO_SNDBUF option to the specified value for this DatagramSocket. The 
SO_SNDBUF option is used by the network implementation as a hint to size the 
underlying network I/O buffers. The SO_SNDBUF setting may also be used by the 
network implementation to determine the maximum size of the packet that can be 
sent on this socket. 

As SO_SNDBUF is a hint, applications that want to verify what size the buffer 
is should call (|java.net.DatagramSocket|) . 

Increasing the buffer size may allow multiple outgoing packets to be queued by 
the network implementation when the send rate is high. 

Note: If (|java.net.DatagramSocket|) is used to send a DatagramPacket that is 
larger than the setting of SO_SNDBUF then it is implementation specific if the 
packet is sent or discarded. 

    size - the size to which to set the send buffer size. This value must be greater than 
       0. 

*java.net.DatagramSocket.setSoTimeout(int)*

public synchronized void setSoTimeout(int timeout)
  throws |java.net.SocketException|
         
Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds. With 
this option set to a non-zero timeout, a call to receive() for this 
DatagramSocket will block for only this amount of time. If the timeout expires, 
a java.net.SocketTimeoutException is raised, though the DatagramSocket is still 
valid. The option must be enabled prior to entering the blocking operation to 
have effect. The timeout must be > 0. A timeout of zero is interpreted as an 
infinite timeout. 

    timeout - the specified timeout in milliseconds. 

*java.net.DatagramSocket.setTrafficClass(int)*

public synchronized void setTrafficClass(int tc)
  throws |java.net.SocketException|
         
Sets traffic class or type-of-service octet in the IP datagram header for 
datagrams sent from this DatagramSocket. As the underlying network 
implementation may ignore this value applications should consider it a hint. 

The tc must be in the range 0 or an IllegalArgumentException will be thrown. 
Notes: for Internet Protocol v4 the value consists of an octet with precedence 
and TOS fields as detailed in RFC 1349. The TOS field is bitset created by 
bitwise-or'ing values such the following :- 

IPTOS_LOWCOST (0x02) IPTOS_RELIABILITY (0x04) IPTOS_THROUGHPUT (0x08) 
IPTOS_LOWDELAY (0x10) 

The last low order bit is always ignored as this corresponds to the MBZ (must 
be zero) bit. 

Setting bits in the precedence field may result in a SocketException indicating 
that the operation is not permitted. 

for Internet Protocol v6 tc is the value that would be placed into the 
sin6_flowinfo field of the IP header. 

    tc - an int value for the bitset. 



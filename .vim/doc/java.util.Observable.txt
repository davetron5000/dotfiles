*java.util.Observable* *Observable* This class represents an observable object, 

public class Observable
  extends    |java.lang.Object|

|java.util.Observable_Description|
|java.util.Observable_Fields|
|java.util.Observable_Constructors|
|java.util.Observable_Methods|

================================================================================

*java.util.Observable_Constructors*
|java.util.Observable()|Construct an Observable with zero Observers.

*java.util.Observable_Methods*
|java.util.Observable.addObserver(Observer)|Adds an observer to the set of obse
|java.util.Observable.clearChanged()|Indicates that this object has no longer c
|java.util.Observable.countObservers()|Returns the number of observers of this 
|java.util.Observable.deleteObserver(Observer)|Deletes an observer from the set
|java.util.Observable.deleteObservers()|Clears the observer list so that this o
|java.util.Observable.hasChanged()|Tests if this object has changed.
|java.util.Observable.notifyObservers()|If this object has changed, as indicate
|java.util.Observable.notifyObservers(Object)|If this object has changed, as in
|java.util.Observable.setChanged()|Marks this Observable object as having been 

*java.util.Observable_Description*

This class represents an observable object, or "data" in the model-view 
paradigm. It can be subclassed to represent an object that the application 
wants to have observed. 

An observable object can have one or more observers. An observer may be any 
object that implements interface Observer. After an observable instance 
changes, an application calling the Observable's notifyObservers method causes 
all of its observers to be notified of the change by a call to their update 
method. 

The order in which notifications will be delivered is unspecified. The default 
implementation provided in the Observable class will notify Observers in the 
order in which they registered interest, but subclasses may change this order, 
use no guaranteed order, deliver notifications on separate threads, or may 
guarantee that their subclass follows this order, as they choose. 

Note that this notification mechanism is has nothing to do with threads and is 
completely separate from the wait and notify mechanism of class Object. 

When an observable object is newly created, its set of observers is empty. Two 
observers are considered the same if and only if the equals method returns true 
for them. 


*java.util.Observable()*

public Observable()

Construct an Observable with zero Observers. 


*java.util.Observable.addObserver(Observer)*

public synchronized void addObserver(java.util.Observer o)

Adds an observer to the set of observers for this object, provided that it is 
not the same as some observer already in the set. The order in which 
notifications will be delivered to multiple observers is not specified. See the 
class comment. 

    o - an observer to be added. 

*java.util.Observable.clearChanged()*

protected synchronized void clearChanged()

Indicates that this object has no longer changed, or that it has already 
notified all of its observers of its most recent change, so that the hasChanged 
method will now return false. This method is called automatically by the 
notifyObservers methods. 


*java.util.Observable.countObservers()*

public synchronized int countObservers()

Returns the number of observers of this Observable object. 


    Returns: the number of observers of this object. 
*java.util.Observable.deleteObserver(Observer)*

public synchronized void deleteObserver(java.util.Observer o)

Deletes an observer from the set of observers of this object. Passing null to 
this method will have no effect. 

    o - the observer to be deleted. 

*java.util.Observable.deleteObservers()*

public synchronized void deleteObservers()

Clears the observer list so that this object no longer has any observers. 


*java.util.Observable.hasChanged()*

public synchronized boolean hasChanged()

Tests if this object has changed. 


    Returns: true if and only if the setChanged method has been called more recently than 
             the clearChanged method on this object; false otherwise. 
*java.util.Observable.notifyObservers()*

public void notifyObservers()

If this object has changed, as indicated by the hasChanged method, then notify 
all of its observers and then call the clearChanged method to indicate that 
this object has no longer changed. 

Each observer has its update method called with two arguments: this observable 
object and null. In other words, this method is equivalent to: 

notifyObservers(null) 


*java.util.Observable.notifyObservers(Object)*

public void notifyObservers(java.lang.Object arg)

If this object has changed, as indicated by the hasChanged method, then notify 
all of its observers and then call the clearChanged method to indicate that 
this object has no longer changed. 

Each observer has its update method called with two arguments: this observable 
object and the arg argument. 

    arg - any object. 

*java.util.Observable.setChanged()*

protected synchronized void setChanged()

Marks this Observable object as having been changed; the hasChanged method will 
now return true. 




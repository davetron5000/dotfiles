*javax.swing.plaf.multi.MultiTextUI* *MultiTextUI* A multiplexing UI used to com

public class MultiTextUI
  extends    |javax.swing.plaf.TextUI|

|javax.swing.plaf.multi.MultiTextUI_Description|
|javax.swing.plaf.multi.MultiTextUI_Fields|
|javax.swing.plaf.multi.MultiTextUI_Constructors|
|javax.swing.plaf.multi.MultiTextUI_Methods|

================================================================================

*javax.swing.plaf.multi.MultiTextUI_Fields*
|java.util.Vector_javax.swing.plaf.multi.MultiTextUI.uis|

*javax.swing.plaf.multi.MultiTextUI_Constructors*
|javax.swing.plaf.multi.MultiTextUI()|

*javax.swing.plaf.multi.MultiTextUI_Methods*
|javax.swing.plaf.multi.MultiTextUI.contains(JComponent,int,int)|Invokes the co
|javax.swing.plaf.multi.MultiTextUI.createUI(JComponent)|Returns a multiplexing
|javax.swing.plaf.multi.MultiTextUI.damageRange(JTextComponent,int,int)|Invokes
|javax.swing.plaf.multi.MultiTextUI.damageRange(JTextComponent,int,int,Position.Bias,Position.Bias)|
|javax.swing.plaf.multi.MultiTextUI.getAccessibleChild(JComponent,int)|Invokes 
|javax.swing.plaf.multi.MultiTextUI.getAccessibleChildrenCount(JComponent)|Invo
|javax.swing.plaf.multi.MultiTextUI.getEditorKit(JTextComponent)|Invokes the ge
|javax.swing.plaf.multi.MultiTextUI.getMaximumSize(JComponent)|Invokes the getM
|javax.swing.plaf.multi.MultiTextUI.getMinimumSize(JComponent)|Invokes the getM
|javax.swing.plaf.multi.MultiTextUI.getNextVisualPositionFrom(JTextComponent,int,Position.Bias,int,Position.Bias[])|
|javax.swing.plaf.multi.MultiTextUI.getPreferredSize(JComponent)|Invokes the ge
|javax.swing.plaf.multi.MultiTextUI.getRootView(JTextComponent)|Invokes the get
|javax.swing.plaf.multi.MultiTextUI.getToolTipText(JTextComponent,Point)|Invoke
|javax.swing.plaf.multi.MultiTextUI.getUIs()|Returns the list of UIs associated
|javax.swing.plaf.multi.MultiTextUI.installUI(JComponent)|Invokes the installUI
|javax.swing.plaf.multi.MultiTextUI.modelToView(JTextComponent,int)|Invokes the
|javax.swing.plaf.multi.MultiTextUI.modelToView(JTextComponent,int,Position.Bias)|
|javax.swing.plaf.multi.MultiTextUI.paint(Graphics,JComponent)|Invokes the pain
|javax.swing.plaf.multi.MultiTextUI.uninstallUI(JComponent)|Invokes the uninsta
|javax.swing.plaf.multi.MultiTextUI.update(Graphics,JComponent)|Invokes the upd
|javax.swing.plaf.multi.MultiTextUI.viewToModel(JTextComponent,Point)|Invokes t
|javax.swing.plaf.multi.MultiTextUI.viewToModel(JTextComponent,Point,Position.Bias[])|

*javax.swing.plaf.multi.MultiTextUI_Description*

A multiplexing UI used to combine TextUIs. 

This file was automatically generated by AutoMulti. 


*java.util.Vector_javax.swing.plaf.multi.MultiTextUI.uis*

A multiplexing UI used to combine TextUIs. 

This file was automatically generated by AutoMulti. 



*javax.swing.plaf.multi.MultiTextUI()*

public MultiTextUI()




*javax.swing.plaf.multi.MultiTextUI.contains(JComponent,int,int)*

public boolean contains(
  javax.swing.JComponent a,
  int b,
  int c)

Invokes the contains method on each UI handled by this object. 


    Returns: the value obtained from the first UI, which is the UI obtained from the default 
             LookAndFeel 
*javax.swing.plaf.multi.MultiTextUI.createUI(JComponent)*

public static |javax.swing.plaf.ComponentUI| createUI(javax.swing.JComponent a)

Returns a multiplexing UI instance if any of the auxiliary LookAndFeels 
supports this UI. Otherwise, just returns the UI object obtained from the 
default LookAndFeel. 


*javax.swing.plaf.multi.MultiTextUI.damageRange(JTextComponent,int,int)*

public void damageRange(
  javax.swing.text.JTextComponent a,
  int b,
  int c)

Invokes the damageRange method on each UI handled by this object. 


*javax.swing.plaf.multi.MultiTextUI.damageRange(JTextComponent,int,int,Position.Bias,Position.Bias)*

public void damageRange(
  javax.swing.text.JTextComponent a,
  int b,
  int c,
  javax.swing.text.Position.Bias d,
  javax.swing.text.Position.Bias e)

Invokes the damageRange method on each UI handled by this object. 


*javax.swing.plaf.multi.MultiTextUI.getAccessibleChild(JComponent,int)*

public |javax.accessibility.Accessible| getAccessibleChild(
  javax.swing.JComponent a,
  int b)

Invokes the getAccessibleChild method on each UI handled by this object. 


    Returns: the value obtained from the first UI, which is the UI obtained from the default 
             LookAndFeel 
*javax.swing.plaf.multi.MultiTextUI.getAccessibleChildrenCount(JComponent)*

public int getAccessibleChildrenCount(javax.swing.JComponent a)

Invokes the getAccessibleChildrenCount method on each UI handled by this 
object. 


    Returns: the value obtained from the first UI, which is the UI obtained from the default 
             LookAndFeel 
*javax.swing.plaf.multi.MultiTextUI.getEditorKit(JTextComponent)*

public |javax.swing.text.EditorKit| getEditorKit(javax.swing.text.JTextComponent a)

Invokes the getEditorKit method on each UI handled by this object. 


    Returns: the value obtained from the first UI, which is the UI obtained from the default 
             LookAndFeel 
*javax.swing.plaf.multi.MultiTextUI.getMaximumSize(JComponent)*

public |java.awt.Dimension| getMaximumSize(javax.swing.JComponent a)

Invokes the getMaximumSize method on each UI handled by this object. 


    Returns: the value obtained from the first UI, which is the UI obtained from the default 
             LookAndFeel 
*javax.swing.plaf.multi.MultiTextUI.getMinimumSize(JComponent)*

public |java.awt.Dimension| getMinimumSize(javax.swing.JComponent a)

Invokes the getMinimumSize method on each UI handled by this object. 


    Returns: the value obtained from the first UI, which is the UI obtained from the default 
             LookAndFeel 
*javax.swing.plaf.multi.MultiTextUI.getNextVisualPositionFrom(JTextComponent,int,Position.Bias,int,Position.Bias[])*

public int getNextVisualPositionFrom(
  javax.swing.text.JTextComponent a,
  int b,
  javax.swing.text.Position.Bias c,
  int d,
  javax.swing.text.Position.Bias[] e)
  throws |javax.swing.text.BadLocationException|
         
Invokes the getNextVisualPositionFrom method on each UI handled by this object. 


    Returns: the value obtained from the first UI, which is the UI obtained from the default 
             LookAndFeel 
*javax.swing.plaf.multi.MultiTextUI.getPreferredSize(JComponent)*

public |java.awt.Dimension| getPreferredSize(javax.swing.JComponent a)

Invokes the getPreferredSize method on each UI handled by this object. 


    Returns: the value obtained from the first UI, which is the UI obtained from the default 
             LookAndFeel 
*javax.swing.plaf.multi.MultiTextUI.getRootView(JTextComponent)*

public |javax.swing.text.View| getRootView(javax.swing.text.JTextComponent a)

Invokes the getRootView method on each UI handled by this object. 


    Returns: the value obtained from the first UI, which is the UI obtained from the default 
             LookAndFeel 
*javax.swing.plaf.multi.MultiTextUI.getToolTipText(JTextComponent,Point)*

public |java.lang.String| getToolTipText(
  javax.swing.text.JTextComponent a,
  java.awt.Point b)

Invokes the getToolTipText method on each UI handled by this object. 


    Returns: the value obtained from the first UI, which is the UI obtained from the default 
             LookAndFeel 
*javax.swing.plaf.multi.MultiTextUI.getUIs()*

public |javax.swing.plaf.ComponentUI| getUIs()

Returns the list of UIs associated with this multiplexing UI. This allows 
processing of the UIs by an application aware of multiplexing UIs on 
components. 


*javax.swing.plaf.multi.MultiTextUI.installUI(JComponent)*

public void installUI(javax.swing.JComponent a)

Invokes the installUI method on each UI handled by this object. 


*javax.swing.plaf.multi.MultiTextUI.modelToView(JTextComponent,int)*

public |java.awt.Rectangle| modelToView(
  javax.swing.text.JTextComponent a,
  int b)
  throws |javax.swing.text.BadLocationException|
         
Invokes the modelToView method on each UI handled by this object. 


    Returns: the value obtained from the first UI, which is the UI obtained from the default 
             LookAndFeel 
*javax.swing.plaf.multi.MultiTextUI.modelToView(JTextComponent,int,Position.Bias)*

public |java.awt.Rectangle| modelToView(
  javax.swing.text.JTextComponent a,
  int b,
  javax.swing.text.Position.Bias c)
  throws |javax.swing.text.BadLocationException|
         
Invokes the modelToView method on each UI handled by this object. 


    Returns: the value obtained from the first UI, which is the UI obtained from the default 
             LookAndFeel 
*javax.swing.plaf.multi.MultiTextUI.paint(Graphics,JComponent)*

public void paint(
  java.awt.Graphics a,
  javax.swing.JComponent b)

Invokes the paint method on each UI handled by this object. 


*javax.swing.plaf.multi.MultiTextUI.uninstallUI(JComponent)*

public void uninstallUI(javax.swing.JComponent a)

Invokes the uninstallUI method on each UI handled by this object. 


*javax.swing.plaf.multi.MultiTextUI.update(Graphics,JComponent)*

public void update(
  java.awt.Graphics a,
  javax.swing.JComponent b)

Invokes the update method on each UI handled by this object. 


*javax.swing.plaf.multi.MultiTextUI.viewToModel(JTextComponent,Point)*

public int viewToModel(
  javax.swing.text.JTextComponent a,
  java.awt.Point b)

Invokes the viewToModel method on each UI handled by this object. 


    Returns: the value obtained from the first UI, which is the UI obtained from the default 
             LookAndFeel 
*javax.swing.plaf.multi.MultiTextUI.viewToModel(JTextComponent,Point,Position.Bias[])*

public int viewToModel(
  javax.swing.text.JTextComponent a,
  java.awt.Point b,
  javax.swing.text.Position.Bias[] c)

Invokes the viewToModel method on each UI handled by this object. 


    Returns: the value obtained from the first UI, which is the UI obtained from the default 
             LookAndFeel 


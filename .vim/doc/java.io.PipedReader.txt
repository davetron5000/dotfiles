*java.io.PipedReader* *PipedReader* Piped character-input streams.

public class PipedReader
  extends    |java.io.Reader|

|java.io.PipedReader_Description|
|java.io.PipedReader_Fields|
|java.io.PipedReader_Constructors|
|java.io.PipedReader_Methods|

================================================================================

*java.io.PipedReader_Constructors*
|java.io.PipedReader()|Creates a PipedReader so  that it is not  yet connected.
|java.io.PipedReader(PipedWriter)|Creates a PipedReader so  that it is connecte

*java.io.PipedReader_Methods*
|java.io.PipedReader.close()|Closes this piped stream and releases any system r
|java.io.PipedReader.connect(PipedWriter)|Causes this piped reader to be connec
|java.io.PipedReader.read()|Reads the next character of data from this piped st
|java.io.PipedReader.read(char[],int,int)|Reads up to len characters of data fr
|java.io.PipedReader.ready()|Tell whether this stream is ready to be read.

*java.io.PipedReader_Description*

Piped character-input streams. 


*java.io.PipedReader()*

public PipedReader()

Creates a PipedReader so that it is not yet connected. It must be connected to 
a PipedWriter before being used. 


*java.io.PipedReader(PipedWriter)*

public PipedReader(java.io.PipedWriter src)
  throws |java.io.IOException|
         
Creates a PipedReader so that it is connected to the piped writer src. Data 
written to src will then be available as input from this stream. 

    src - the stream to connect to. 

*java.io.PipedReader.close()*

public void close()
  throws |java.io.IOException|
         
Closes this piped stream and releases any system resources associated with the 
stream. 


*java.io.PipedReader.connect(PipedWriter)*

public void connect(java.io.PipedWriter src)
  throws |java.io.IOException|
         
Causes this piped reader to be connected to the piped writer src. If this 
object is already connected to some other piped writer, an IOException is 
thrown. 

If src is an unconnected piped writer and snk is an unconnected piped reader, 
they may be connected by either the call: 

snk.connect(src) 

or the call: 

src.connect(snk) 

The two calls have the same effect. 

    src - The piped writer to connect to. 

*java.io.PipedReader.read()*

public synchronized int read()
  throws |java.io.IOException|
         
Reads the next character of data from this piped stream. If no character is 
available because the end of the stream has been reached, the value -1 is 
returned. This method blocks until input data is available, the end of the 
stream is detected, or an exception is thrown. 

If a thread was providing data characters to the connected piped writer, but 
the thread is no longer alive, then an IOException is thrown. 


    Returns: the next character of data, or -1 if the end of the stream is reached. 
*java.io.PipedReader.read(char[],int,int)*

public synchronized int read(
  char[] cbuf,
  int off,
  int len)
  throws |java.io.IOException|
         
Reads up to len characters of data from this piped stream into an array of 
characters. Less than len characters will be read if the end of the data stream 
is reached. This method blocks until at least one character of input is 
available. If a thread was providing data characters to the connected piped 
output, but the thread is no longer alive, then an IOException is thrown. 

    cbuf - the buffer into which the data is read. 
    off - the start offset of the data. 
    len - the maximum number of characters read. 

    Returns: the total number of characters read into the buffer, or -1 if there is no more 
             data because the end of the stream has been reached. 
*java.io.PipedReader.ready()*

public synchronized boolean ready()
  throws |java.io.IOException|
         
Tell whether this stream is ready to be read. A piped character stream is ready 
if the circular buffer is not empty. 




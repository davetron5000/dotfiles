*javax.management.relation.RelationSupportMBean* *RelationSupportMBean* A Relati

public interface interface RelationSupportMBean

  implements |javax.management.relation.Relation|

|javax.management.relation.RelationSupportMBean_Description|
|javax.management.relation.RelationSupportMBean_Fields|
|javax.management.relation.RelationSupportMBean_Constructors|
|javax.management.relation.RelationSupportMBean_Methods|

================================================================================

*javax.management.relation.RelationSupportMBean_Methods*
|javax.management.relation.RelationSupportMBean.isInRelationService()|Returns a
|javax.management.relation.RelationSupportMBean.setRelationServiceManagementFlag(Boolean)|

*javax.management.relation.RelationSupportMBean_Description*

A RelationSupport object is used internally by the Relation Service to 
represent simple relations (only roles, no properties or methods), with an 
unlimited number of roles, of any relation type. As internal representation, it 
is not exposed to the user. RelationSupport class conforms to the design 
patterns of standard MBean. So the user can decide to instantiate a 
RelationSupport object himself as a MBean (as it follows the MBean design 
patterns), to register it in the MBean Server, and then to add it in the 
Relation Service. The user can also, when creating his own MBean relation 
class, have it extending RelationSupport, to retrieve the implementations of 
required interfaces (see below). It is also possible to have in a user relation 
MBean class a member being a RelationSupport object, and to implement the 
required interfaces by delegating all to this member. RelationSupport 
implements the Relation interface (to be handled by the Relation Service). 


*javax.management.relation.RelationSupportMBean.isInRelationService()*

public |java.lang.Boolean| isInRelationService()

Returns an internal flag specifying if the object is still handled by the 
Relation Service. 


    Returns: a Boolean equal to {@link Boolean#TRUE} if the object is still handled by the 
             Relation Service and {@link Boolean#FALSE} otherwise. 
*javax.management.relation.RelationSupportMBean.setRelationServiceManagementFlag(Boolean)*

public void setRelationServiceManagementFlag(java.lang.Boolean theFlg)
  throws |java.lang.IllegalArgumentException|
         
Specifies whether this relation is handled by the Relation Service. BEWARE, 
this method has to be exposed as the Relation Service will access the relation 
through its management interface. It is RECOMMENDED NOT to use this method. 
Using it does not affect the registration of the relation object in the 
Relation Service, but will provide wrong information about it! 

    theFlg - whether the relation is handled by the Relation Service. 



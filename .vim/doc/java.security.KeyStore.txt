*java.security.KeyStore* *KeyStore* This class represents a storage facility for cryptographic
 keys and certificates.

public class KeyStore
  extends    |java.lang.Object|

|java.security.KeyStore_Description|
|java.security.KeyStore_Fields|
|java.security.KeyStore_Constructors|
|java.security.KeyStore_Methods|

====================================================================================================================================================================================

*java.security.KeyStore_Constructors*
|java.security.KeyStore(KeyStoreSpi,Provider,String)|Creates a KeyStore object of the given type, and encapsulates the given  provider implementation (SPI object) in it.

*java.security.KeyStore_Methods*
|java.security.KeyStore.aliases()|Lists all the alias names of this keystore.
|java.security.KeyStore.containsAlias(String)|Checks if the given alias exists in this keystore.
|java.security.KeyStore.deleteEntry(String)|Deletes the entry identified by the given alias from this keystore.
|java.security.KeyStore.entryInstanceOf(String,Class<?extendsKeyStore.Entry>)|Determines if the keystore Entry for the specified  alias is an instance or subclass of the specified
|java.security.KeyStore.getCertificate(String)|Returns the certificate associated with the given alias.
|java.security.KeyStore.getCertificateAlias(Certificate)|Returns the (alias) name of the first keystore entry whose certificate  matches the given certificate.
|java.security.KeyStore.getCertificateChain(String)|Returns the certificate chain associated with the given alias.
|java.security.KeyStore.getCreationDate(String)|Returns the creation date of the entry identified by the given alias.
|java.security.KeyStore.getDefaultType()|Returns the default keystore type as specified in the Java security  properties file, or the string  jks (acronym for Java keystore)  if n
|java.security.KeyStore.getEntry(String,KeyStore.ProtectionParameter)|Gets a keystore Entry for the specified alias  with the specified protection parameter.
|java.security.KeyStore.getInstance(String)|Generates a keystore object of the given type.
|java.security.KeyStore.getInstance(String,Provider)|Generates a keystore object for the specified keystore  type from the specified provider.
|java.security.KeyStore.getInstance(String,String)|Generates a keystore object for the specified keystore  type from the specified provider.
|java.security.KeyStore.getKey(String,char[])|Returns the key associated with the given alias, using the given  password to recover it.
|java.security.KeyStore.getProvider()|Returns the provider of this keystore.
|java.security.KeyStore.getType()|Returns the type of this keystore.
|java.security.KeyStore.isCertificateEntry(String)|Returns true if the entry identified by the given alias  was created by a call to setCertificateEntry,  or created by a call to 
|java.security.KeyStore.isKeyEntry(String)|Returns true if the entry identified by the given alias  was created by a call to setKeyEntry,  or created by a call to setEntry with a 
|java.security.KeyStore.load(InputStream,char[])|Loads this KeyStore from the given input stream.
|java.security.KeyStore.load(KeyStore.LoadStoreParameter)|Loads this keystore using the given LoadStoreParameter.
|java.security.KeyStore.setCertificateEntry(String,Certificate)|Assigns the given trusted certificate to the given alias.
|java.security.KeyStore.setEntry(String,KeyStore.Entry,KeyStore.ProtectionParameter)|Saves a keystore Entry under the specified alias.
|java.security.KeyStore.setKeyEntry(String,byte[],Certificate[])|Assigns the given key (that has already been protected) to the given  alias.
|java.security.KeyStore.setKeyEntry(String,Key,char[],Certificate[])|Assigns the given key to the given alias, protecting it with the given  password.
|java.security.KeyStore.size()|Retrieves the number of entries in this keystore.
|java.security.KeyStore.store(KeyStore.LoadStoreParameter)|Stores this keystore using the given LoadStoreParameter.
|java.security.KeyStore.store(OutputStream,char[])|Stores this keystore to the given output stream, and protects its  integrity with the given password.

*java.security.KeyStore_Description*

This class represents a storage facility for cryptographic keys and certificates. 

A KeyStore manages different types of entries. Each type of entry implements the KeyStore.Entry interface. Three basic KeyStore.Entry implementations are provided: 

KeyStore.PrivateKeyEntry This type of entry holds a cryptographic PrivateKey, which is optionally stored in a protected format to prevent unauthorized access. It is also 
accompanied by a certificate chain for the corresponding public key. 

Private keys and certificate chains are used by a given entity for self-authentication. Applications for this authentication include software distribution organizations which sign 
JAR files as part of releasing and/or licensing software. 

KeyStore.SecretKeyEntry This type of entry holds a cryptographic SecretKey, which is optionally stored in a protected format to prevent unauthorized access. 

KeyStore.TrustedCertificateEntry This type of entry contains a single public key Certificate belonging to another party. It is called a trusted certificate because the keystore 
owner trusts that the public key in the certificate indeed belongs to the identity identified by the subject (owner) of the certificate. 

This type of entry can be used to authenticate other parties. 

Each entry in a keystore is identified by an "alias" string. In the case of private keys and their associated certificate chains, these strings distinguish among the different 
ways in which the entity may authenticate itself. For example, the entity may authenticate itself using different certificate authorities, or using different public key 
algorithms. 

Whether keystores are persistent, and the mechanisms used by the keystore if it is persistent, are not specified here. This allows use of a variety of techniques for protecting 
sensitive (e.g., private or secret) keys. Smart cards or other integrated cryptographic engines (SafeKeyper) are one option, and simpler mechanisms such as files may also be used 
(in a variety of formats). 

Typical ways to request a KeyStore object include relying on the default type and providing a specific keystore type. 

To rely on the default type: 

KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType()); 

The system will return a keystore implementation for the default type. 

To provide a specific keystore type: 

KeyStore ks = KeyStore.getInstance("JKS"); 

The system will return the most preferred implementation of the specified keystore type available in the environment. 

Before a keystore can be accessed, it must be loaded(|java.security.KeyStore|) . 

KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType()); 

// get user password and file input stream char[] password = getPassword(); java.io.FileInputStream fis = new java.io.FileInputStream("keyStoreName"); ks.load(fis, password); 
fis.close(); 

To create an empty keystore using the above load method, pass null as the InputStream argument. 

Once the keystore has been loaded, it is possible to read existing entries from the keystore, or to write new entries into the keystore: 

// get my private key KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("privateKeyAlias", password); PrivateKey myPrivateKey = pkEntry.getPrivateKey(); 

// save my secret key javax.crypto.SecretKey mySecretKey; KeyStore.SecretKeyEntry skEntry = new KeyStore.SecretKeyEntry(mySecretKey); ks.setEntry("secretKeyAlias", skEntry, 
password); 

// store away the keystore java.io.FileOutputStream fos = new java.io.FileOutputStream("newKeyStoreName"); ks.store(fos, password); fos.close(); 

Note that although the same password may be used to load the keystore, to protect the private key entry, to protect the secret key entry, and to store the keystore (as is shown in 
the sample code above), different passwords or other protection parameters may also be used. 



*java.security.KeyStore(KeyStoreSpi,Provider,String)*

protected KeyStore(
  java.security.KeyStoreSpi keyStoreSpi,
  java.security.Provider provider,
  java.lang.String type)

Creates a KeyStore object of the given type, and encapsulates the given provider implementation (SPI object) in it. 

    keyStoreSpi - the provider implementation. 
    provider - the provider. 
    type - the keystore type. 

*java.security.KeyStore.aliases()*

public final |java.util.Enumeration|<String> aliases()
  throws |java.security.KeyStoreException|
         
Lists all the alias names of this keystore. 



    Returns: enumeration of the alias names 

*java.security.KeyStore.containsAlias(String)*

public final boolean containsAlias(java.lang.String alias)
  throws |java.security.KeyStoreException|
         
Checks if the given alias exists in this keystore. 


    alias - the alias name 

    Returns: true if the alias exists, false otherwise 

*java.security.KeyStore.deleteEntry(String)*

public final void deleteEntry(java.lang.String alias)
  throws |java.security.KeyStoreException|
         
Deletes the entry identified by the given alias from this keystore. 


    alias - the alias name 

*java.security.KeyStore.entryInstanceOf(String,Class<?extendsKeyStore.Entry>)*

public final boolean entryInstanceOf(
  java.lang.String alias,
  java.lang.Class<? extends java.security.KeyStore.Entry> entryClass)
  throws |java.security.KeyStoreException|
         
Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass. 


    alias - the alias name 
    entryClass - the entry class 

    Returns: true if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass, false otherwise 

*java.security.KeyStore.getCertificate(String)*

public final |java.security.cert.Certificate| getCertificate(java.lang.String alias)
  throws |java.security.KeyStoreException|
         
Returns the certificate associated with the given alias. 

If the given alias name identifies an entry created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, then the trusted certificate 
contained in that entry is returned. 

If the given alias name identifies an entry created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry, then the first element of the certificate 
chain in that entry is returned. 


    alias - the alias name 

    Returns: the certificate, or null if the given alias does not exist or does not contain a certificate. 

*java.security.KeyStore.getCertificateAlias(Certificate)*

public final |java.lang.String| getCertificateAlias(java.security.cert.Certificate cert)
  throws |java.security.KeyStoreException|
         
Returns the (alias) name of the first keystore entry whose certificate matches the given certificate. 

This method attempts to match the given certificate with each keystore entry. If the entry being considered was created by a call to setCertificateEntry, or created by a call to 
setEntry with a TrustedCertificateEntry, then the given certificate is compared to that entry's certificate. 

If the entry being considered was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry, then the given certificate is compared to the first 
element of that entry's certificate chain. 


    cert - the certificate to match with. 

    Returns: the alias name of the first entry with a matching certificate, or null if no such entry exists in this keystore. 

*java.security.KeyStore.getCertificateChain(String)*

public final |java.security.cert.Certificate|[] getCertificateChain(java.lang.String alias)
  throws |java.security.KeyStoreException|
         
Returns the certificate chain associated with the given alias. The certificate chain must have been associated with the alias by a call to setKeyEntry, or by a call to setEntry 
with a PrivateKeyEntry. 


    alias - the alias name 

    Returns: the certificate chain (ordered with the user's certificate first and the root certificate authority last), or null if the given alias does not exist or does not contain a 
             certificate chain 

*java.security.KeyStore.getCreationDate(String)*

public final |java.util.Date| getCreationDate(java.lang.String alias)
  throws |java.security.KeyStoreException|
         
Returns the creation date of the entry identified by the given alias. 


    alias - the alias name 

    Returns: the creation date of this entry, or null if the given alias does not exist 

*java.security.KeyStore.getDefaultType()*

public static final |java.lang.String| getDefaultType()

Returns the default keystore type as specified in the Java security properties file, or the string jks (acronym for Java keystore) if no such property exists. The Java security 
properties file is located in the file named <JAVA_HOME>/lib/security/java.security, where <JAVA_HOME> refers to the directory where the JDK was installed. 

The default keystore type can be used by applications that do not want to use a hard-coded keystore type when calling one of the getInstance methods, and want to provide a default 
keystore type in case a user does not specify its own. 

The default keystore type can be changed by setting the value of the "keystore.type" security property (in the Java security properties file) to the desired keystore type. 



    Returns: the default keystore type as specified in the Java security properties file, or the string jks if no such property exists. 

*java.security.KeyStore.getEntry(String,KeyStore.ProtectionParameter)*

public final |java.security.KeyStore.Entry| getEntry(
  java.lang.String alias,
  java.security.KeyStore.ProtectionParameter protParam)
  throws |java.security.KeyStoreException|
         |java.security.NoSuchAlgorithmException|
         |java.security.UnrecoverableEntryException|
         
Gets a keystore Entry for the specified alias with the specified protection parameter. 


    alias - get the keystore Entry for this alias 
    protParam - the ProtectionParameter used to protect the Entry, which may be null 

    Returns: the keystore Entry for the specified alias, or null if there is no such entry 

*java.security.KeyStore.getInstance(String)*

public static |java.security.KeyStore| getInstance(java.lang.String type)
  throws |java.security.KeyStoreException|
         
Generates a keystore object of the given type. 

If the default provider package provides a keystore implementation of the given type, an instance of KeyStore containing that implementation is returned. If the requested keystore 
type is not available in the default package, other packages are searched. 


    type - the type of keystore. See Appendix A in the Java Cryptography Architecture API Specification and Reference for information about standard keystore types. 

    Returns: a keystore object of the specified type. 

*java.security.KeyStore.getInstance(String,Provider)*

public static |java.security.KeyStore| getInstance(
  java.lang.String type,
  java.security.Provider provider)
  throws |java.security.KeyStoreException|
         
Generates a keystore object for the specified keystore type from the specified provider. Note: the provider doesn't have to be registered. 


    type - the type of keystore. See Appendix A in the Java Cryptography Architecture API Specification and Reference for information about standard keystore types. 
    provider - the provider. 

    Returns: a keystore object of the specified type, as supplied by the specified provider. 

*java.security.KeyStore.getInstance(String,String)*

public static |java.security.KeyStore| getInstance(
  java.lang.String type,
  java.lang.String provider)
  throws |java.security.KeyStoreException|
         |java.security.NoSuchProviderException|
         
Generates a keystore object for the specified keystore type from the specified provider. 


    type - the type of keystore. See Appendix A in the Java Cryptography Architecture API Specification and Reference for information about standard keystore types. 
    provider - the name of the provider. 

    Returns: a keystore object of the specified type, as supplied by the specified provider. 

*java.security.KeyStore.getKey(String,char[])*

public final |java.security.Key| getKey(
  java.lang.String alias,
  char[] password)
  throws |java.security.KeyStoreException|
         |java.security.NoSuchAlgorithmException|
         |java.security.UnrecoverableKeyException|
         
Returns the key associated with the given alias, using the given password to recover it. The key must have been associated with the alias by a call to setKeyEntry, or by a call to 
setEntry with a PrivateKeyEntry or SecretKeyEntry. 


    alias - the alias name 
    password - the password for recovering the key 

    Returns: the requested key, or null if the given alias does not exist or does not identify a key-related entry. 

*java.security.KeyStore.getProvider()*

public final |java.security.Provider| getProvider()

Returns the provider of this keystore. 



    Returns: the provider of this keystore. 

*java.security.KeyStore.getType()*

public final |java.lang.String| getType()

Returns the type of this keystore. 



    Returns: the type of this keystore. 

*java.security.KeyStore.isCertificateEntry(String)*

public final boolean isCertificateEntry(java.lang.String alias)
  throws |java.security.KeyStoreException|
         
Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry. 


    alias - the alias for the keystore entry to be checked 

    Returns: true if the entry identified by the given alias contains a trusted certificate, false otherwise. 

*java.security.KeyStore.isKeyEntry(String)*

public final boolean isKeyEntry(java.lang.String alias)
  throws |java.security.KeyStoreException|
         
Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry. 


    alias - the alias for the keystore entry to be checked 

    Returns: true if the entry identified by the given alias is a key-related entry, false otherwise. 

*java.security.KeyStore.load(InputStream,char[])*

public final void load(
  java.io.InputStream stream,
  char[] password)
  throws |java.security.cert.CertificateException|
         |java.io.IOException|
         |java.security.NoSuchAlgorithmException|
         
Loads this KeyStore from the given input stream. 

A password may be given to unlock the keystore (e.g. the keystore resides on a hardware token device), or to check the integrity of the keystore data. If a password is not given 
for integrity checking, then integrity checking is not performed. 

In order to create an empty keystore, or if the keystore cannot be initialized from a stream, pass null as the stream argument. 

Note that if this keystore has already been loaded, it is reinitialized and loaded again from the given input stream. 


    stream - the input stream from which the keystore is loaded, or null 
    password - the password used to check the integrity of the keystore, the password used to unlock the keystore, or null 

*java.security.KeyStore.load(KeyStore.LoadStoreParameter)*

public final void load(java.security.KeyStore.LoadStoreParameter param)
  throws |java.security.cert.CertificateException|
         |java.io.IOException|
         |java.security.NoSuchAlgorithmException|
         
Loads this keystore using the given LoadStoreParameter. 

Note that if this KeyStore has already been loaded, it is reinitialized and loaded again from the given parameter. 


    param - the LoadStoreParameter that specifies how to load the keystore, which may be null 

*java.security.KeyStore.setCertificateEntry(String,Certificate)*

public final void setCertificateEntry(
  java.lang.String alias,
  java.security.cert.Certificate cert)
  throws |java.security.KeyStoreException|
         
Assigns the given trusted certificate to the given alias. 

If the given alias identifies an existing entry created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, the trusted certificate 
in the existing entry is overridden by the given certificate. 


    alias - the alias name 
    cert - the certificate 

*java.security.KeyStore.setEntry(String,KeyStore.Entry,KeyStore.ProtectionParameter)*

public final void setEntry(
  java.lang.String alias,
  java.security.KeyStore.Entry entry,
  java.security.KeyStore.ProtectionParameter protParam)
  throws |java.security.KeyStoreException|
         
Saves a keystore Entry under the specified alias. The protection parameter is used to protect the Entry. 

If an entry already exists for the specified alias, it is overridden. 


    alias - save the keystore Entry under this alias 
    entry - the Entry to save 
    protParam - the ProtectionParameter used to protect the Entry, which may be null 

*java.security.KeyStore.setKeyEntry(String,byte[],Certificate[])*

public final void setKeyEntry(
  java.lang.String alias,
  byte[] key,
  java.security.cert.Certificate[] chain)
  throws |java.security.KeyStoreException|
         
Assigns the given key (that has already been protected) to the given alias. 

If the protected key is of type java.security.PrivateKey, it must be accompanied by a certificate chain certifying the corresponding public key. If the underlying keystore 
implementation is of type jks, key must be encoded as an EncryptedPrivateKeyInfo as defined in the PKCS #8 standard. 

If the given alias already exists, the keystore information associated with it is overridden by the given key (and possibly certificate chain). 


    alias - the alias name 
    key - the key (in protected format) to be associated with the alias 
    chain - the certificate chain for the corresponding public key (only useful if the protected key is of type java.security.PrivateKey). 

*java.security.KeyStore.setKeyEntry(String,Key,char[],Certificate[])*

public final void setKeyEntry(
  java.lang.String alias,
  java.security.Key key,
  char[] password,
  java.security.cert.Certificate[] chain)
  throws |java.security.KeyStoreException|
         
Assigns the given key to the given alias, protecting it with the given password. 

If the given key is of type java.security.PrivateKey, it must be accompanied by a certificate chain certifying the corresponding public key. 

If the given alias already exists, the keystore information associated with it is overridden by the given key (and possibly certificate chain). 


    alias - the alias name 
    key - the key to be associated with the alias 
    password - the password to protect the key 
    chain - the certificate chain for the corresponding public key (only required if the given key is of type java.security.PrivateKey). 

*java.security.KeyStore.size()*

public final int size()
  throws |java.security.KeyStoreException|
         
Retrieves the number of entries in this keystore. 



    Returns: the number of entries in this keystore 

*java.security.KeyStore.store(KeyStore.LoadStoreParameter)*

public final void store(java.security.KeyStore.LoadStoreParameter param)
  throws |java.security.cert.CertificateException|
         |java.io.IOException|
         |java.security.KeyStoreException|
         |java.security.NoSuchAlgorithmException|
         
Stores this keystore using the given LoadStoreParameter. 


    param - the LoadStoreParameter that specifies how to store the keystore, which may be null 

*java.security.KeyStore.store(OutputStream,char[])*

public final void store(
  java.io.OutputStream stream,
  char[] password)
  throws |java.security.cert.CertificateException|
         |java.io.IOException|
         |java.security.KeyStoreException|
         |java.security.NoSuchAlgorithmException|
         
Stores this keystore to the given output stream, and protects its integrity with the given password. 


    stream - the output stream to which this keystore is written. 
    password - the password to generate the keystore integrity check 



*java.io.OutputStream* *OutputStream* This abstract class is the superclass of all classes representing 
 an output stream of bytes.

public abstract class OutputStream
  extends    |java.lang.Object|
  implements |java.io.Closeable|
             |java.io.Flushable|

|java.io.OutputStream_Description|
|java.io.OutputStream_Fields|
|java.io.OutputStream_Constructors|
|java.io.OutputStream_Methods|

====================================================================================================================================================================================

*java.io.OutputStream_Constructors*
|java.io.OutputStream()|

*java.io.OutputStream_Methods*
|java.io.OutputStream.close()|Closes this output stream and releases any system resources   associated with this stream.
|java.io.OutputStream.flush()|Flushes this output stream and forces any buffered output bytes   to be written out.
|java.io.OutputStream.write(byte[])|Writes b.length bytes from the specified byte array   to this output stream.
|java.io.OutputStream.write(byte[],int,int)|Writes len bytes from the specified byte array   starting at offset off to this output stream.
|java.io.OutputStream.write(int)|Writes the specified byte to this output stream.

*java.io.OutputStream_Description*

This abstract class is the superclass of all classes representing an output stream of bytes. An output stream accepts output bytes and sends them to some sink. 

Applications that need to define a subclass of OutputStream must always provide at least a method that writes one byte of output. 



*java.io.OutputStream()*

public OutputStream()




*java.io.OutputStream.close()*

public void close()
  throws |java.io.IOException|
         
Closes this output stream and releases any system resources associated with this stream. The general contract of close is that it closes the output stream. A closed stream cannot 
perform output operations and cannot be reopened. 

The close method of OutputStream does nothing. 



*java.io.OutputStream.flush()*

public void flush()
  throws |java.io.IOException|
         
Flushes this output stream and forces any buffered output bytes to be written out. The general contract of flush is that calling it is an indication that, if any bytes previously 
written have been buffered by the implementation of the output stream, such bytes should immediately be written to their intended destination. 

If the intended destination of this stream is an abstraction provided by the underlying operating system, for example a file, then flushing the stream guarantees only that bytes 
previously written to the stream are passed to the operating system for writing; it does not guarantee that they are actually written to a physical device such as a disk drive. 

The flush method of OutputStream does nothing. 



*java.io.OutputStream.write(byte[])*

public void write(byte[] b)
  throws |java.io.IOException|
         
Writes b.length bytes from the specified byte array to this output stream. The general contract for write(b) is that it should have exactly the same effect as the call write(b, 0, 
b.length). 


    b - the data. 

*java.io.OutputStream.write(byte[],int,int)*

public void write(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Writes len bytes from the specified byte array starting at offset off to this output stream. The general contract for write(b, off, len) is that some of the bytes in the array b 
are written to the output stream in order; element b[off] is the first byte written and b[off+len-1] is the last byte written by this operation. 

The write method of OutputStream calls the write method of one argument on each of the bytes to be written out. Subclasses are encouraged to override this method and provide a 
more efficient implementation. 

If b is null, a NullPointerException is thrown. 

If off is negative, or len is negative, or off+len is greater than the length of the array b, then an IndexOutOfBoundsException is thrown. 


    b - the data. 
    off - the start offset in the data. 
    len - the number of bytes to write. 

*java.io.OutputStream.write(int)*

public abstract void write(int b)
  throws |java.io.IOException|
         
Writes the specified byte to this output stream. The general contract for write is that one byte is written to the output stream. The byte to be written is the eight low-order 
bits of the argument b. The 24 high-order bits of b are ignored. 

Subclasses of OutputStream must provide an implementation for this method. 


    b - the byte. 



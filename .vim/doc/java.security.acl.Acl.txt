*java.security.acl.Acl* *Acl* Interface representing an Access Control List (ACL

public interface interface Acl

  implements |java.security.acl.Owner|

|java.security.acl.Acl_Description|
|java.security.acl.Acl_Fields|
|java.security.acl.Acl_Constructors|
|java.security.acl.Acl_Methods|

================================================================================

*java.security.acl.Acl_Methods*
|java.security.acl.Acl.addEntry(Principal,AclEntry)|Adds an ACL entry to this A
|java.security.acl.Acl.checkPermission(Principal,Permission)|Checks whether or 
|java.security.acl.Acl.entries()|Returns an enumeration of the entries in this 
|java.security.acl.Acl.getName()|Returns the name of this ACL.
|java.security.acl.Acl.getPermissions(Principal)|Returns an enumeration for the
|java.security.acl.Acl.removeEntry(Principal,AclEntry)|Removes an ACL entry fro
|java.security.acl.Acl.setName(Principal,String)|Sets the name of this ACL.
|java.security.acl.Acl.toString()|Returns a string representation of the   ACL 

*java.security.acl.Acl_Description*

Interface representing an Access Control List (ACL). An Access Control List is 
a data structure used to guard access to resources. 

An ACL can be thought of as a data structure with multiple ACL entries. Each 
ACL entry, of interface type AclEntry, contains a set of permissions associated 
with a particular principal. (A principal represents an entity such as an 
individual user or a group). Additionally, each ACL entry is specified as being 
either positive or negative. If positive, the permissions are to be granted to 
the associated principal. If negative, the permissions are to be denied. 

The ACL Entries in each ACL observe the following rules: 

Each principal can have at most one positive ACL entry and one negative entry; 
that is, multiple positive or negative ACL entries are not allowed for any 
principal. Each entry specifies the set of permissions that are to be granted 
(if positive) or denied (if negative). 

If there is no entry for a particular principal, then the principal is 
considered to have a null (empty) permission set. 

If there is a positive entry that grants a principal a particular permission, 
and a negative entry that denies the principal the same permission, the result 
is as though the permission was never granted or denied. 

Individual permissions always override permissions of the group(s) to which the 
individual belongs. That is, individual negative permissions (specific denial 
of permissions) override the groups' positive permissions. And individual 
positive permissions override the groups' negative permissions. 



The java.security.acl package provides the interfaces to the ACL and related 
data structures (ACL entries, groups, permissions, etc.), and the 
sun.security.acl classes provide a default implementation of the interfaces. 
For example, java.security.acl.Acl provides the interface to an ACL and the 
sun.security.acl.AclImpl class provides the default implementation of the 
interface. 

The java.security.acl.Acl interface extends the java.security.acl.Owner 
interface. The Owner interface is used to maintain a list of owners for each 
ACL. Only owners are allowed to modify an ACL. For example, only an owner can 
call the ACL's addEntry method to add a new ACL entry to the ACL. 


*java.security.acl.Acl.addEntry(Principal,AclEntry)*

public boolean addEntry(
  java.security.Principal caller,
  java.security.acl.AclEntry entry)
  throws |java.security.acl.NotOwnerException|
         
Adds an ACL entry to this ACL. An entry associates a principal (e.g., an 
individual or a group) with a set of permissions. Each principal can have at 
most one positive ACL entry (specifying permissions to be granted to the 
principal) and one negative ACL entry (specifying permissions to be denied). If 
there is already an ACL entry of the same type (negative or positive) already 
in the ACL, false is returned. 

    caller - the principal invoking this method. It must be an owner of this ACL. 
    entry - the ACL entry to be added to this ACL. 

    Returns: true on success, false if an entry of the same type (positive or negative) for 
             the same principal is already present in this ACL. 
*java.security.acl.Acl.checkPermission(Principal,Permission)*

public boolean checkPermission(
  java.security.Principal principal,
  java.security.acl.Permission permission)

Checks whether or not the specified principal has the specified permission. If 
it does, true is returned, otherwise false is returned. 

More specifically, this method checks whether the passed permission is a member 
of the allowed permission set of the specified principal. The allowed 
permission set is determined by the same algorithm as is used by the 
getPermissions method. 

    principal - the principal, assumed to be a valid authenticated Principal. 
    permission - the permission to be checked for. 

    Returns: true if the principal has the specified permission, false otherwise. 
*java.security.acl.Acl.entries()*

public |java.util.Enumeration| entries()

Returns an enumeration of the entries in this ACL. Each element in the 
enumeration is of type AclEntry. 


    Returns: an enumeration of the entries in this ACL. 
*java.security.acl.Acl.getName()*

public |java.lang.String| getName()

Returns the name of this ACL. 


    Returns: the name of this ACL. 
*java.security.acl.Acl.getPermissions(Principal)*

public |java.util.Enumeration| getPermissions(java.security.Principal user)

Returns an enumeration for the set of allowed permissions for the specified 
principal (representing an entity such as an individual or a group). This set 
of allowed permissions is calculated as follows: 



If there is no entry in this Access Control List for the specified principal, 
an empty permission set is returned. 

Otherwise, the principal's group permission sets are determined. (A principal 
can belong to one or more groups, where a group is a group of principals, 
represented by the Group interface.) The group positive permission set is the 
union of all the positive permissions of each group that the principal belongs 
to. The group negative permission set is the union of all the negative 
permissions of each group that the principal belongs to. If there is a specific 
permission that occurs in both the positive permission set and the negative 
permission set, it is removed from both. 

The individual positive and negative permission sets are also determined. The 
positive permission set contains the permissions specified in the positive ACL 
entry (if any) for the principal. Similarly, the negative permission set 
contains the permissions specified in the negative ACL entry (if any) for the 
principal. The individual positive (or negative) permission set is considered 
to be null if there is not a positive (negative) ACL entry for the principal in 
this ACL. 

The set of permissions granted to the principal is then calculated using the 
simple rule that individual permissions always override the group permissions. 
That is, the principal's individual negative permission set (specific denial of 
permissions) overrides the group positive permission set, and the principal's 
individual positive permission set overrides the group negative permission set. 



    user - the principal whose permission set is to be returned. 

    Returns: the permission set specifying the permissions the principal is allowed. 
*java.security.acl.Acl.removeEntry(Principal,AclEntry)*

public boolean removeEntry(
  java.security.Principal caller,
  java.security.acl.AclEntry entry)
  throws |java.security.acl.NotOwnerException|
         
Removes an ACL entry from this ACL. 

    caller - the principal invoking this method. It must be an owner of this ACL. 
    entry - the ACL entry to be removed from this ACL. 

    Returns: true on success, false if the entry is not part of this ACL. 
*java.security.acl.Acl.setName(Principal,String)*

public void setName(
  java.security.Principal caller,
  java.lang.String name)
  throws |java.security.acl.NotOwnerException|
         
Sets the name of this ACL. 

    caller - the principal invoking this method. It must be an owner of this ACL. 
    name - the name to be given to this ACL. 

*java.security.acl.Acl.toString()*

public |java.lang.String| toString()

Returns a string representation of the ACL contents. 


    Returns: a string representation of the ACL contents. 


*java.awt.Menu* *Menu* A Menu object is a pull-down menu component
 that is deployed from a menu bar.

public class Menu
  extends    |java.awt.MenuItem|
  implements |java.awt.MenuContainer|
             |javax.accessibility.Accessible|

|java.awt.Menu_Description|
|java.awt.Menu_Fields|
|java.awt.Menu_Constructors|
|java.awt.Menu_Methods|

====================================================================================================================================================================================

*java.awt.Menu_Constructors*
|java.awt.Menu()|Constructs a new menu with an empty label.
|java.awt.Menu(String)|Constructs a new menu with the specified label.
|java.awt.Menu(String,boolean)|Constructs a new menu with the specified label,  indicating whether the menu can be torn off.

*java.awt.Menu_Methods*
|java.awt.Menu.add(MenuItem)|Adds the specified menu item to this menu.
|java.awt.Menu.add(String)|Adds an item with the specified label to this menu.
|java.awt.Menu.addNotify()|Creates the menu's peer.
|java.awt.Menu.addSeparator()|Adds a separator line, or a hypen, to the menu at the current position.
|java.awt.Menu.countItems()|
|java.awt.Menu.getAccessibleContext()|Gets the AccessibleContext associated with this Menu.
|java.awt.Menu.getItem(int)|Gets the item located at the specified index of this menu.
|java.awt.Menu.getItemCount()|Get the number of items in this menu.
|java.awt.Menu.insert(MenuItem,int)|Inserts a menu item into this menu  at the specified position.
|java.awt.Menu.insert(String,int)|Inserts a menu item with the specified label into this menu  at the specified position.
|java.awt.Menu.insertSeparator(int)|Inserts a separator at the specified position.
|java.awt.Menu.isTearOff()|Indicates whether this menu is a tear-off menu.
|java.awt.Menu.paramString()|Returns a string representing the state of this Menu.
|java.awt.Menu.remove(int)|Removes the menu item at the specified index from this menu.
|java.awt.Menu.remove(MenuComponent)|Removes the specified menu item from this menu.
|java.awt.Menu.removeAll()|Removes all items from this menu.
|java.awt.Menu.removeNotify()|Removes the menu's peer.

*java.awt.Menu_Description*

A Menu object is a pull-down menu component that is deployed from a menu bar. 

A menu can optionally be a tear-off menu. A tear-off menu can be opened and dragged away from its parent menu bar or menu. It remains on the screen after the mouse button has been 
released. The mechanism for tearing off a menu is platform dependent, since the look and feel of the tear-off menu is determined by its peer. On platforms that do not support 
tear-off menus, the tear-off property is ignored. 

Each item in a menu must belong to the MenuItem class. It can be an instance of MenuItem, a submenu (an instance of Menu), or a check box (an instance of CheckboxMenuItem). 



*java.awt.Menu()*

public Menu()
  throws |java.awt.HeadlessException|
         
Constructs a new menu with an empty label. This menu is not a tear-off menu. 


*java.awt.Menu(String)*

public Menu(java.lang.String label)
  throws |java.awt.HeadlessException|
         
Constructs a new menu with the specified label. This menu is not a tear-off menu. 

    label - the menu's label in the menu bar, or in another menu of which this menu is a submenu. 

*java.awt.Menu(String,boolean)*

public Menu(
  java.lang.String label,
  boolean tearOff)
  throws |java.awt.HeadlessException|
         
Constructs a new menu with the specified label, indicating whether the menu can be torn off. 

Tear-off functionality may not be supported by all implementations of AWT. If a particular implementation doesn't support tear-off menus, this value is silently ignored. 

    label - the menu's label in the menu bar, or in another menu of which this menu is a submenu. 
    tearOff - if true, the menu is a tear-off menu. 

*java.awt.Menu.add(MenuItem)*

public |java.awt.MenuItem| add(java.awt.MenuItem mi)

Adds the specified menu item to this menu. If the menu item has been part of another menu, removes it from that menu. 


    mi - the menu item to be added 

    Returns: the menu item added 

*java.awt.Menu.add(String)*

public void add(java.lang.String label)

Adds an item with the specified label to this menu. 


    label - the text on the item 

*java.awt.Menu.addNotify()*

public void addNotify()

Creates the menu's peer. The peer allows us to modify the appearance of the menu without changing its functionality. 



*java.awt.Menu.addSeparator()*

public void addSeparator()

Adds a separator line, or a hypen, to the menu at the current position. 



*java.awt.Menu.countItems()*

public int countItems()



    Deprecated: As of JDK version 1.1,
 replaced by <code>getItemCount()</code>.


*java.awt.Menu.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this Menu. For menus, the AccessibleContext takes the form of an AccessibleAWTMenu. A new AccessibleAWTMenu instance is created if 
necessary. 



    Returns: an AccessibleAWTMenu that serves as the AccessibleContext of this Menu 

*java.awt.Menu.getItem(int)*

public |java.awt.MenuItem| getItem(int index)

Gets the item located at the specified index of this menu. 


    index - the position of the item to be returned. 

    Returns: the item located at the specified index. 

*java.awt.Menu.getItemCount()*

public int getItemCount()

Get the number of items in this menu. 



    Returns: the number of items in this menu. 

*java.awt.Menu.insert(MenuItem,int)*

public void insert(
  java.awt.MenuItem menuitem,
  int index)

Inserts a menu item into this menu at the specified position. 


    menuitem - the menu item to be inserted. 
    index - the position at which the menu item should be inserted. 

*java.awt.Menu.insert(String,int)*

public void insert(
  java.lang.String label,
  int index)

Inserts a menu item with the specified label into this menu at the specified position. This is a convenience method for insert(menuItem, index). 


    label - the text on the item 
    index - the position at which the menu item should be inserted 

*java.awt.Menu.insertSeparator(int)*

public void insertSeparator(int index)

Inserts a separator at the specified position. 


    index - the position at which the menu separator should be inserted. 

*java.awt.Menu.isTearOff()*

public boolean isTearOff()

Indicates whether this menu is a tear-off menu. 

Tear-off functionality may not be supported by all implementations of AWT. If a particular implementation doesn't support tear-off menus, this value is silently ignored. 



    Returns: true if this is a tear-off menu; false otherwise. 

*java.awt.Menu.paramString()*

public |java.lang.String| paramString()

Returns a string representing the state of this Menu. This method is intended to be used only for debugging purposes, and the content and format of the returned string may vary 
between implementations. The returned string may be empty but may not be null. 



    Returns: the parameter string of this menu 

*java.awt.Menu.remove(int)*

public void remove(int index)

Removes the menu item at the specified index from this menu. 


    index - the position of the item to be removed. 

*java.awt.Menu.remove(MenuComponent)*

public void remove(java.awt.MenuComponent item)

Removes the specified menu item from this menu. 


    item - the item to be removed from the menu. If item is null or is not in this menu, this method does nothing. 

*java.awt.Menu.removeAll()*

public void removeAll()

Removes all items from this menu. 



*java.awt.Menu.removeNotify()*

public void removeNotify()

Removes the menu's peer. The peer allows us to modify the appearance of the menu without changing its functionality. 





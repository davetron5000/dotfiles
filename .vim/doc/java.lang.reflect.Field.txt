*java.lang.reflect.Field* *Field* A Field provides information about, and dynami

public final class Field
  extends    |java.lang.reflect.AccessibleObject|
  implements |java.lang.reflect.Member|

|java.lang.reflect.Field_Description|
|java.lang.reflect.Field_Fields|
|java.lang.reflect.Field_Constructors|
|java.lang.reflect.Field_Methods|

================================================================================

*java.lang.reflect.Field_Methods*
|java.lang.reflect.Field.equals(Object)|Compares this Field against the specifi
|java.lang.reflect.Field.get(Object)|Returns the value of the field represented
|java.lang.reflect.Field.getAnnotation(Class)|
|java.lang.reflect.Field.getBoolean(Object)|Gets the value of a static or insta
|java.lang.reflect.Field.getByte(Object)|Gets the value of a static or instance
|java.lang.reflect.Field.getChar(Object)|Gets the value of a static or instance
|java.lang.reflect.Field.getDeclaredAnnotations()|
|java.lang.reflect.Field.getDeclaringClass()|Returns the Class object represent
|java.lang.reflect.Field.getDouble(Object)|Gets the value of a static or instan
|java.lang.reflect.Field.getFloat(Object)|Gets the value of a static or instanc
|java.lang.reflect.Field.getGenericType()|Returns a Type object that represents
|java.lang.reflect.Field.getInt(Object)|Gets the value of a static or instance 
|java.lang.reflect.Field.getLong(Object)|Gets the value of a static or instance
|java.lang.reflect.Field.getModifiers()|Returns the Java language modifiers for
|java.lang.reflect.Field.getName()|Returns the name of the field represented by
|java.lang.reflect.Field.getShort(Object)|Gets the value of a static or instanc
|java.lang.reflect.Field.getType()|Returns a Class object that identifies the  
|java.lang.reflect.Field.hashCode()|Returns a hashcode for this Field.
|java.lang.reflect.Field.isEnumConstant()|Returns true if this field represents
|java.lang.reflect.Field.isSynthetic()|Returns true if this field is a syntheti
|java.lang.reflect.Field.set(Object,Object)|Sets the field represented by this 
|java.lang.reflect.Field.setBoolean(Object,boolean)|Sets the value of a field a
|java.lang.reflect.Field.setByte(Object,byte)|Sets the value of a field as a by
|java.lang.reflect.Field.setChar(Object,char)|Sets the value of a field as a ch
|java.lang.reflect.Field.setDouble(Object,double)|Sets the value of a field as 
|java.lang.reflect.Field.setFloat(Object,float)|Sets the value of a field as a 
|java.lang.reflect.Field.setInt(Object,int)|Sets the value of a field as an int
|java.lang.reflect.Field.setLong(Object,long)|Sets the value of a field as a lo
|java.lang.reflect.Field.setShort(Object,short)|Sets the value of a field as a 
|java.lang.reflect.Field.toGenericString()|Returns a string describing this Fie
|java.lang.reflect.Field.toString()|Returns a string describing this Field.

*java.lang.reflect.Field_Description*

A Field provides information about, and dynamic access to, a single field of a 
class or an interface. The reflected field may be a class (static) field or an 
instance field. 

A Field permits widening conversions to occur during a get or set access 
operation, but throws an IllegalArgumentException if a narrowing conversion 
would occur. 


*java.lang.reflect.Field.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this Field against the specified object. Returns true if the objects 
are the same. Two Field objects are the same if they were declared by the same 
class and have the same name and type. 


*java.lang.reflect.Field.get(Object)*

public |java.lang.Object| get(java.lang.Object obj)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Returns the value of the field represented by this Field, on the specified 
object. The value is automatically wrapped in an object if it has a primitive 
type. 

The underlying field's value is obtained as follows: 

If the underlying field is a static field, the obj argument is ignored; it may 
be null. 

Otherwise, the underlying field is an instance field. If the specified obj 
argument is null, the method throws a NullPointerException. If the specified 
object is not an instance of the class or interface declaring the underlying 
field, the method throws an IllegalArgumentException. 

If this Field object enforces Java language access control, and the underlying 
field is inaccessible, the method throws an IllegalAccessException. If the 
underlying field is static, the class that declared the field is initialized if 
it has not already been initialized. 

Otherwise, the value is retrieved from the underlying instance or static field. 
If the field has a primitive type, the value is wrapped in an object before 
being returned, otherwise it is returned as is. 

If the field is hidden in the type of obj, the field's value is obtained 
according to the preceding rules. 

    obj - object from which the represented field's value is to be extracted 

    Returns: the value of the represented field in object obj; primitive values are wrapped 
             in an appropriate object before being returned 
*java.lang.reflect.Field.getAnnotation(Class)*

public |java.lang.annotation.Annotation| getAnnotation(java.lang.Class annotationClass)




*java.lang.reflect.Field.getBoolean(Object)*

public boolean getBoolean(java.lang.Object obj)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Gets the value of a static or instance boolean field. 

    obj - the object to extract the boolean value from 

    Returns: the value of the boolean field 
*java.lang.reflect.Field.getByte(Object)*

public byte getByte(java.lang.Object obj)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Gets the value of a static or instance byte field. 

    obj - the object to extract the byte value from 

    Returns: the value of the byte field 
*java.lang.reflect.Field.getChar(Object)*

public char getChar(java.lang.Object obj)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Gets the value of a static or instance field of type char or of another 
primitive type convertible to type char via a widening conversion. 

    obj - the object to extract the char value from 

    Returns: the value of the field converted to type char 
*java.lang.reflect.Field.getDeclaredAnnotations()*

public |java.lang.annotation.Annotation| getDeclaredAnnotations()




*java.lang.reflect.Field.getDeclaringClass()*

public |java.lang.Class| getDeclaringClass()

Returns the Class object representing the class or interface that declares the 
field represented by this Field object. 


*java.lang.reflect.Field.getDouble(Object)*

public double getDouble(java.lang.Object obj)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Gets the value of a static or instance field of type double or of another 
primitive type convertible to type double via a widening conversion. 

    obj - the object to extract the double value from 

    Returns: the value of the field converted to type double 
*java.lang.reflect.Field.getFloat(Object)*

public float getFloat(java.lang.Object obj)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Gets the value of a static or instance field of type float or of another 
primitive type convertible to type float via a widening conversion. 

    obj - the object to extract the float value from 

    Returns: the value of the field converted to type float 
*java.lang.reflect.Field.getGenericType()*

public |java.lang.reflect.Type| getGenericType()

Returns a Type object that represents the declared type for the field 
represented by this Field object. 

If the Type is a parameterized type, the Type object returned must accurately 
reflect the actual type parameters used in the source code. 

If an the type of the underlying field is a type variable or a parameterized 
type, it is created. Otherwise, it is resolved. 


    Returns: a Type object that represents the declared type for the field represented by 
             this Field object 
*java.lang.reflect.Field.getInt(Object)*

public int getInt(java.lang.Object obj)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Gets the value of a static or instance field of type int or of another 
primitive type convertible to type int via a widening conversion. 

    obj - the object to extract the int value from 

    Returns: the value of the field converted to type int 
*java.lang.reflect.Field.getLong(Object)*

public long getLong(java.lang.Object obj)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Gets the value of a static or instance field of type long or of another 
primitive type convertible to type long via a widening conversion. 

    obj - the object to extract the long value from 

    Returns: the value of the field converted to type long 
*java.lang.reflect.Field.getModifiers()*

public int getModifiers()

Returns the Java language modifiers for the field represented by this Field 
object, as an integer. The Modifier class should be used to decode the 
modifiers. 


*java.lang.reflect.Field.getName()*

public |java.lang.String| getName()

Returns the name of the field represented by this Field object. 


*java.lang.reflect.Field.getShort(Object)*

public short getShort(java.lang.Object obj)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Gets the value of a static or instance field of type short or of another 
primitive type convertible to type short via a widening conversion. 

    obj - the object to extract the short value from 

    Returns: the value of the field converted to type short 
*java.lang.reflect.Field.getType()*

public |java.lang.Class| getType()

Returns a Class object that identifies the declared type for the field 
represented by this Field object. 


    Returns: a Class object identifying the declared type of the field represented by this 
             object 
*java.lang.reflect.Field.hashCode()*

public int hashCode()

Returns a hashcode for this Field. This is computed as the exclusive-or of the 
hashcodes for the underlying field's declaring class name and its name. 


*java.lang.reflect.Field.isEnumConstant()*

public boolean isEnumConstant()

Returns true if this field represents an element of an enumerated type; returns 
false otherwise. 


    Returns: true if and only if this field represents an element of an enumerated type. 
*java.lang.reflect.Field.isSynthetic()*

public boolean isSynthetic()

Returns true if this field is a synthetic field; returns false otherwise. 


    Returns: true if and only if this field is a synthetic field as defined by the Java 
             Language Specification. 
*java.lang.reflect.Field.set(Object,Object)*

public void set(
  java.lang.Object obj,
  java.lang.Object value)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Sets the field represented by this Field object on the specified object 
argument to the specified new value. The new value is automatically unwrapped 
if the underlying field has a primitive type. 

The operation proceeds as follows: 

If the underlying field is static, the obj argument is ignored; it may be null. 

Otherwise the underlying field is an instance field. If the specified object 
argument is null, the method throws a NullPointerException. If the specified 
object argument is not an instance of the class or interface declaring the 
underlying field, the method throws an IllegalArgumentException. 

If this Field object enforces Java language access control, and the underlying 
field is inaccessible, the method throws an IllegalAccessException. 

If the underlying field is final, the method throws an IllegalAccessException 
unless setAccessible(true) has succeeded for this field and this field is 
non-static. Setting a final field in this way is meaningful only during 
deserialization or reconstruction of instances of classes with blank final 
fields, before they are made available for access by other parts of a program. 
Use in any other context may have unpredictable effects, including cases in 
which other parts of a program continue to use the original value of this 
field. 

If the underlying field is of a primitive type, an unwrapping conversion is 
attempted to convert the new value to a value of a primitive type. If this 
attempt fails, the method throws an IllegalArgumentException. 

If, after possible unwrapping, the new value cannot be converted to the type of 
the underlying field by an identity or widening conversion, the method throws 
an IllegalArgumentException. 

If the underlying field is static, the class that declared the field is 
initialized if it has not already been initialized. 

The field is set to the possibly unwrapped and widened new value. 

If the field is hidden in the type of obj, the field's value is set according 
to the preceding rules. 

    obj - the object whose field should be modified 
    value - the new value for the field of obj being modified 

*java.lang.reflect.Field.setBoolean(Object,boolean)*

public void setBoolean(
  java.lang.Object obj,
  boolean z)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Sets the value of a field as a boolean on the specified object. This method is 
equivalent to set(obj, zObj), where zObj is a Boolean object and 
zObj.booleanValue() == z. 

    obj - the object whose field should be modified 
    z - the new value for the field of obj being modified 

*java.lang.reflect.Field.setByte(Object,byte)*

public void setByte(
  java.lang.Object obj,
  byte b)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Sets the value of a field as a byte on the specified object. This method is 
equivalent to set(obj, bObj), where bObj is a Byte object and bObj.byteValue() 
== b. 

    obj - the object whose field should be modified 
    b - the new value for the field of obj being modified 

*java.lang.reflect.Field.setChar(Object,char)*

public void setChar(
  java.lang.Object obj,
  char c)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Sets the value of a field as a char on the specified object. This method is 
equivalent to set(obj, cObj), where cObj is a Character object and 
cObj.charValue() == c. 

    obj - the object whose field should be modified 
    c - the new value for the field of obj being modified 

*java.lang.reflect.Field.setDouble(Object,double)*

public void setDouble(
  java.lang.Object obj,
  double d)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Sets the value of a field as a double on the specified object. This method is 
equivalent to set(obj, dObj), where dObj is a Double object and 
dObj.doubleValue() == d. 

    obj - the object whose field should be modified 
    d - the new value for the field of obj being modified 

*java.lang.reflect.Field.setFloat(Object,float)*

public void setFloat(
  java.lang.Object obj,
  float f)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Sets the value of a field as a float on the specified object. This method is 
equivalent to set(obj, fObj), where fObj is a Float object and 
fObj.floatValue() == f. 

    obj - the object whose field should be modified 
    f - the new value for the field of obj being modified 

*java.lang.reflect.Field.setInt(Object,int)*

public void setInt(
  java.lang.Object obj,
  int i)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Sets the value of a field as an int on the specified object. This method is 
equivalent to set(obj, iObj), where iObj is a Integer object and 
iObj.intValue() == i. 

    obj - the object whose field should be modified 
    i - the new value for the field of obj being modified 

*java.lang.reflect.Field.setLong(Object,long)*

public void setLong(
  java.lang.Object obj,
  long l)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Sets the value of a field as a long on the specified object. This method is 
equivalent to set(obj, lObj), where lObj is a Long object and lObj.longValue() 
== l. 

    obj - the object whose field should be modified 
    l - the new value for the field of obj being modified 

*java.lang.reflect.Field.setShort(Object,short)*

public void setShort(
  java.lang.Object obj,
  short s)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         
Sets the value of a field as a short on the specified object. This method is 
equivalent to set(obj, sObj), where sObj is a Short object and 
sObj.shortValue() == s. 

    obj - the object whose field should be modified 
    s - the new value for the field of obj being modified 

*java.lang.reflect.Field.toGenericString()*

public |java.lang.String| toGenericString()

Returns a string describing this Field, including its generic type. The format 
is the access modifiers for the field, if any, followed by the generic field 
type, followed by a space, followed by the fully-qualified name of the class 
declaring the field, followed by a period, followed by the name of the field. 

The modifiers are placed in canonical order as specified by "The Java Language 
Specification". This is public, protected or private first, and then other 
modifiers in the following order: static, final, transient, volatile. 


    Returns: a string describing this Field, including its generic type 
*java.lang.reflect.Field.toString()*

public |java.lang.String| toString()

Returns a string describing this Field. The format is the access modifiers for 
the field, if any, followed by the field type, followed by a space, followed by 
the fully-qualified name of the class declaring the field, followed by a 
period, followed by the name of the field. For example: 

public static final int java.lang.Thread.MIN_PRIORITY private int 
java.io.FileDescriptor.fd 

The modifiers are placed in canonical order as specified by "The Java Language 
Specification". This is public, protected or private first, and then other 
modifiers in the following order: static, final, transient, volatile. 




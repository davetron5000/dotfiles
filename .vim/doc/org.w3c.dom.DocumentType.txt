*org.w3c.dom.DocumentType* *DocumentType* Each Document has a doctype attribute 

public interface interface DocumentType

  implements |org.w3c.dom.Node|

|org.w3c.dom.DocumentType_Description|
|org.w3c.dom.DocumentType_Fields|
|org.w3c.dom.DocumentType_Constructors|
|org.w3c.dom.DocumentType_Methods|

================================================================================

*org.w3c.dom.DocumentType_Methods*
|org.w3c.dom.DocumentType.getEntities()|A NamedNodeMap containing the general e
|org.w3c.dom.DocumentType.getInternalSubset()|The internal subset as a string, 
|org.w3c.dom.DocumentType.getName()|The name of DTD; i.e., the name immediately
|org.w3c.dom.DocumentType.getNotations()|A NamedNodeMap containing the notation
|org.w3c.dom.DocumentType.getPublicId()|The public identifier of the external s
|org.w3c.dom.DocumentType.getSystemId()|The system identifier of the external s

*org.w3c.dom.DocumentType_Description*

Each Document has a doctype attribute whose value is either null or a 
DocumentType object. The DocumentType interface in the DOM Core provides an 
interface to the list of entities that are defined for the document, and little 
else because the effect of namespaces and the various XML schema efforts on DTD 
representation are not clearly understood as of this writing. DOM Level 3 
doesn't support editing DocumentType nodes. DocumentType nodes are read-only. 
See also the Document Object Model (DOM) Level 3 Core Specification. 


*org.w3c.dom.DocumentType.getEntities()*

public |org.w3c.dom.NamedNodeMap| getEntities()

A NamedNodeMap containing the general entities, both external and internal, 
declared in the DTD. Parameter entities are not contained. Duplicates are 
discarded. For example in: 

<!DOCTYPE ex SYSTEM "ex.dtd" [ <!ENTITY foo "foo"> <!ENTITY bar "bar"> <!ENTITY 
bar "bar2"> <!ENTITY % baz "baz"> ]> <ex/> 

the interface provides access to foo and the first declaration of bar but not 
the second declaration of bar or baz. Every node in this map also implements 
the Entity interface. The DOM Level 2 does not support editing entities, 
therefore entities cannot be altered in any way. 


*org.w3c.dom.DocumentType.getInternalSubset()*

public |java.lang.String| getInternalSubset()

The internal subset as a string, or null if there is none. This is does not 
contain the delimiting square brackets. Note: The actual content returned 
depends on how much information is available to the implementation. This may 
vary depending on various parameters, including the XML processor used to build 
the document. 


*org.w3c.dom.DocumentType.getName()*

public |java.lang.String| getName()

The name of DTD; i.e., the name immediately following the DOCTYPE keyword. 


*org.w3c.dom.DocumentType.getNotations()*

public |org.w3c.dom.NamedNodeMap| getNotations()

A NamedNodeMap containing the notations declared in the DTD. Duplicates are 
discarded. Every node in this map also implements the Notation interface. The 
DOM Level 2 does not support editing notations, therefore notations cannot be 
altered in any way. 


*org.w3c.dom.DocumentType.getPublicId()*

public |java.lang.String| getPublicId()

The public identifier of the external subset. 


*org.w3c.dom.DocumentType.getSystemId()*

public |java.lang.String| getSystemId()

The system identifier of the external subset. This may be an absolute URI or 
not. 




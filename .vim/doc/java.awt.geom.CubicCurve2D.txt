*java.awt.geom.CubicCurve2D* *CubicCurve2D* The CubicCurve2D class defines a cubic parametric curve 
 segment in (x, y) coordinate space.

public abstract class CubicCurve2D
  extends    |java.lang.Object|
  implements |java.awt.Shape|
             |java.lang.Cloneable|

|java.awt.geom.CubicCurve2D_Description|
|java.awt.geom.CubicCurve2D_Fields|
|java.awt.geom.CubicCurve2D_Constructors|
|java.awt.geom.CubicCurve2D_Methods|

====================================================================================================================================================================================

*java.awt.geom.CubicCurve2D_Constructors*
|java.awt.geom.CubicCurve2D()|This is an abstract class that cannot be instantiated directly.

*java.awt.geom.CubicCurve2D_Methods*
|java.awt.geom.CubicCurve2D.clone()|Creates a new object of the same class as this object.
|java.awt.geom.CubicCurve2D.contains(double,double)|Tests if a specified coordinate is inside the boundary of the shape.
|java.awt.geom.CubicCurve2D.contains(double,double,double,double)|Tests if the interior of the shape entirely contains the specified  set of rectangular coordinates.
|java.awt.geom.CubicCurve2D.contains(Point2D)|Tests if a specified Point2D is inside the boundary of   the shape.
|java.awt.geom.CubicCurve2D.contains(Rectangle2D)|Tests if the interior of the shape entirely contains the specified  Rectangle2D.
|java.awt.geom.CubicCurve2D.getBounds()|Returns the bounding box of the shape.
|java.awt.geom.CubicCurve2D.getCtrlP1()|Returns the first control point.
|java.awt.geom.CubicCurve2D.getCtrlP2()|Returns the second control point.
|java.awt.geom.CubicCurve2D.getCtrlX1()|Returns the X coordinate of the first control point in double precision.
|java.awt.geom.CubicCurve2D.getCtrlX2()|Returns the X coordinate of the second control point  in double precision.
|java.awt.geom.CubicCurve2D.getCtrlY1()|Returns the Y coordinate of the first control point in double precision.
|java.awt.geom.CubicCurve2D.getCtrlY2()|Returns the Y coordinate of the second control point  in double precision.
|java.awt.geom.CubicCurve2D.getFlatness()|Returns the flatness of this curve.
|java.awt.geom.CubicCurve2D.getFlatness(double[],int)|Returns the flatness of the cubic curve specified  by the controlpoints stored in the indicated array at the   indicated inde
|java.awt.geom.CubicCurve2D.getFlatness(double,double,double,double,double,double,double,double)|Returns the flatness of the cubic curve specified  by the indicated controlpoints.
|java.awt.geom.CubicCurve2D.getFlatnessSq()|Returns the square of the flatness of this curve.
|java.awt.geom.CubicCurve2D.getFlatnessSq(double[],int)|Returns the square of the flatness of the cubic curve specified  by the controlpoints stored in the indicated array at the 
|java.awt.geom.CubicCurve2D.getFlatnessSq(double,double,double,double,double,double,double,double)|Returns the square of the flatness of the cubic curve specified  by the indicate
|java.awt.geom.CubicCurve2D.getP1()|Returns the start point.
|java.awt.geom.CubicCurve2D.getP2()|Returns the end point.
|java.awt.geom.CubicCurve2D.getPathIterator(AffineTransform)|Returns an iteration object that defines the boundary of the  shape.
|java.awt.geom.CubicCurve2D.getPathIterator(AffineTransform,double)|Return an iteration object that defines the boundary of the  flattened shape.
|java.awt.geom.CubicCurve2D.getX1()|Returns the X coordinate of the start point in double precision.
|java.awt.geom.CubicCurve2D.getX2()|Returns the X coordinate of the end point in double precision.
|java.awt.geom.CubicCurve2D.getY1()|Returns the Y coordinate of the start point in double precision.
|java.awt.geom.CubicCurve2D.getY2()|Returns the Y coordinate of the end point in double precision.
|java.awt.geom.CubicCurve2D.intersects(double,double,double,double)|Tests if the shape intersects the interior of a specified  set of rectangular coordinates.
|java.awt.geom.CubicCurve2D.intersects(Rectangle2D)|Tests if the shape intersects the interior of a specified  Rectangle2D.
|java.awt.geom.CubicCurve2D.setCurve(CubicCurve2D)|Sets the location of the endpoints and controlpoints of this curve  to the same as those in the specified CubicCurve2D.
|java.awt.geom.CubicCurve2D.setCurve(double[],int)|Sets the location of the endpoints and controlpoints of this curve  to the double coordinates at the specified offset in the spe
|java.awt.geom.CubicCurve2D.setCurve(double,double,double,double,double,double,double,double)|Sets the location of the endpoints and controlpoints of this curve  to the specified 
|java.awt.geom.CubicCurve2D.setCurve(Point2D[],int)|Sets the location of the endpoints and controlpoints of this curve  to the coordinates of the Point2D objects at the specified 
|java.awt.geom.CubicCurve2D.setCurve(Point2D,Point2D,Point2D,Point2D)|Sets the location of the endpoints and controlpoints of this curve  to the specified Point2D coordinates.
|java.awt.geom.CubicCurve2D.solveCubic(double[])|Solves the cubic whose coefficients are in the eqn   array and places the non-complex roots back into the same array,   returning 
|java.awt.geom.CubicCurve2D.solveCubic(double[],double[])|Solve the cubic whose coefficients are in the eqn  array and place the non-complex roots into the res  array, returning t
|java.awt.geom.CubicCurve2D.subdivide(CubicCurve2D,CubicCurve2D)|Subdivides this cubic curve and stores the resulting two  subdivided curves into the left and right curve paramete
|java.awt.geom.CubicCurve2D.subdivide(CubicCurve2D,CubicCurve2D,CubicCurve2D)|Subdivides the cubic curve specified by the src parameter  and stores the resulting two subdivided cu
|java.awt.geom.CubicCurve2D.subdivide(double[],int,double[],int,double[],int)|Subdivides the cubic curve specified by the coordinates  stored in the src array at indices srcoff   

*java.awt.geom.CubicCurve2D_Description*

The CubicCurve2D class defines a cubic parametric curve segment in (x, y) coordinate space. 

This class is only the abstract superclass for all objects which store a 2D cubic curve segment. The actual storage representation of the coordinates is left to the subclass. 



*java.awt.geom.CubicCurve2D()*

protected CubicCurve2D()

This is an abstract class that cannot be instantiated directly. Type-specific implementation subclasses are available for instantiation and provide a number of formats for storing 
the information necessary to satisfy the various accessor methods below. 


*java.awt.geom.CubicCurve2D.clone()*

public |java.lang.Object| clone()

Creates a new object of the same class as this object. 



    Returns: a clone of this instance. 

*java.awt.geom.CubicCurve2D.contains(double,double)*

public boolean contains(
  double x,
  double y)

Tests if a specified coordinate is inside the boundary of the shape. 


    x,&nbsp;y - the specified coordinate to be tested 

    Returns: true if the coordinate is inside the boundary of the shape; false otherwise. 

*java.awt.geom.CubicCurve2D.contains(double,double,double,double)*

public boolean contains(
  double x,
  double y,
  double w,
  double h)

Tests if the interior of the shape entirely contains the specified set of rectangular coordinates. 


    x,&nbsp;y - the coordinates of the upper left corner of the specified rectangular shape 
    w - the width of the specified rectangular shape 
    h - the height of the specified rectangular shape 

    Returns: true if the shape entirely contains the specified set of rectangular coordinates; false otherwise. 

*java.awt.geom.CubicCurve2D.contains(Point2D)*

public boolean contains(java.awt.geom.Point2D p)

Tests if a specified Point2D is inside the boundary of the shape. 


    p - the specified Point2D to be tested 

    Returns: true if the p is inside the boundary of the shape; false otherwise. 

*java.awt.geom.CubicCurve2D.contains(Rectangle2D)*

public boolean contains(java.awt.geom.Rectangle2D r)

Tests if the interior of the shape entirely contains the specified Rectangle2D. 


    r - the specified Rectangle2D to be tested 

    Returns: true if the shape entirely contains the specified Rectangle2D; false otherwise. 

*java.awt.geom.CubicCurve2D.getBounds()*

public |java.awt.Rectangle| getBounds()

Returns the bounding box of the shape. 



    Returns: a {@link Rectangle} that is the bounding box of the shape. 

*java.awt.geom.CubicCurve2D.getCtrlP1()*

public abstract |java.awt.geom.Point2D| getCtrlP1()

Returns the first control point. 



    Returns: a Point2D that is the first control point of the CubicCurve2D. 

*java.awt.geom.CubicCurve2D.getCtrlP2()*

public abstract |java.awt.geom.Point2D| getCtrlP2()

Returns the second control point. 



    Returns: a Point2D that is the second control point of the CubicCurve2D. 

*java.awt.geom.CubicCurve2D.getCtrlX1()*

public abstract double getCtrlX1()

Returns the X coordinate of the first control point in double precision. 



    Returns: the X coordinate of the first control point of the CubicCurve2D. 

*java.awt.geom.CubicCurve2D.getCtrlX2()*

public abstract double getCtrlX2()

Returns the X coordinate of the second control point in double precision. 



    Returns: the X coordinate of the second control point of the CubicCurve2D. 

*java.awt.geom.CubicCurve2D.getCtrlY1()*

public abstract double getCtrlY1()

Returns the Y coordinate of the first control point in double precision. 



    Returns: the Y coordinate of the first control point of the CubicCurve2D. 

*java.awt.geom.CubicCurve2D.getCtrlY2()*

public abstract double getCtrlY2()

Returns the Y coordinate of the second control point in double precision. 



    Returns: the Y coordinate of the second control point of the CubicCurve2D. 

*java.awt.geom.CubicCurve2D.getFlatness()*

public double getFlatness()

Returns the flatness of this curve. The flatness is the maximum distance of a controlpoint from the line connecting the endpoints. 



    Returns: the flatness of this curve. 

*java.awt.geom.CubicCurve2D.getFlatness(double[],int)*

public static double getFlatness(
  double[] coords,
  int offset)

Returns the flatness of the cubic curve specified by the controlpoints stored in the indicated array at the indicated index. The flatness is the maximum distance of a controlpoint 
from the line connecting the endpoints. 


    coords - an array containing coordinates 
    offset - the index of coords at which to begin setting the endpoints and controlpoints of this curve to the coordinates contained in coords 

    Returns: the flatness of the CubicCurve2D specified by the coordinates in coords at the specified offset. 

*java.awt.geom.CubicCurve2D.getFlatness(double,double,double,double,double,double,double,double)*

public static double getFlatness(
  double x1,
  double y1,
  double ctrlx1,
  double ctrly1,
  double ctrlx2,
  double ctrly2,
  double x2,
  double y2)

Returns the flatness of the cubic curve specified by the indicated controlpoints. The flatness is the maximum distance of a controlpoint from the line connecting the endpoints. 


    x1,&nbsp;y1 - the first specified coordinates that specify the start point of a CubicCurve2D 
    ctrlx1,&nbsp;ctrly1 - the second specified coordinates that specify the first control point of a CubicCurve2D 
    ctrlx2,&nbsp;ctrly2 - the third specified coordinates that specify the second control point of a CubicCurve2D 
    x2,&nbsp;y2 - the fourth specified coordinates that specify the end point of a CubicCurve2D 

    Returns: the flatness of the CubicCurve2D represented by the specified coordinates. 

*java.awt.geom.CubicCurve2D.getFlatnessSq()*

public double getFlatnessSq()

Returns the square of the flatness of this curve. The flatness is the maximum distance of a controlpoint from the line connecting the endpoints. 



    Returns: the square of the flatness of this curve. 

*java.awt.geom.CubicCurve2D.getFlatnessSq(double[],int)*

public static double getFlatnessSq(
  double[] coords,
  int offset)

Returns the square of the flatness of the cubic curve specified by the controlpoints stored in the indicated array at the indicated index. The flatness is the maximum distance of 
a controlpoint from the line connecting the endpoints. 


    coords - an array containing coordinates 
    offset - the index of coords at which to begin setting the endpoints and controlpoints of this curve to the coordinates contained in coords 

    Returns: the square of the flatness of the CubicCurve2D specified by the coordinates in coords at the specified offset. 

*java.awt.geom.CubicCurve2D.getFlatnessSq(double,double,double,double,double,double,double,double)*

public static double getFlatnessSq(
  double x1,
  double y1,
  double ctrlx1,
  double ctrly1,
  double ctrlx2,
  double ctrly2,
  double x2,
  double y2)

Returns the square of the flatness of the cubic curve specified by the indicated controlpoints. The flatness is the maximum distance of a controlpoint from the line connecting the 
endpoints. 


    x1,&nbsp;y1 - the first specified coordinates that specify the start point of a CubicCurve2D 
    ctrlx1,&nbsp;ctrly1 - the second specified coordinates that specify the first control point of a CubicCurve2D 
    ctrlx2,&nbsp;ctrly2 - the third specified coordinates that specify the second control point of a CubicCurve2D 
    x2,&nbsp;y2 - the fourth specified coordinates that specify the end point of a CubicCurve2D 

    Returns: the square of the flatness of the CubicCurve2D represented by the specified coordinates. 

*java.awt.geom.CubicCurve2D.getP1()*

public abstract |java.awt.geom.Point2D| getP1()

Returns the start point. 



    Returns: a Point2D that is the start point of the CubicCurve2D. 

*java.awt.geom.CubicCurve2D.getP2()*

public abstract |java.awt.geom.Point2D| getP2()

Returns the end point. 



    Returns: a Point2D that is the end point of the CubicCurve2D. 

*java.awt.geom.CubicCurve2D.getPathIterator(AffineTransform)*

public |java.awt.geom.PathIterator| getPathIterator(java.awt.geom.AffineTransform at)

Returns an iteration object that defines the boundary of the shape. The iterator for this class is not multi-threaded safe, which means that this CubicCurve2D class does not 
guarantee that modifications to the geometry of this CubicCurve2D object do not affect any iterations of that geometry that are already in process. 


    at - an optional AffineTransform to be applied to the coordinates as they are returned in the iteration, or null if untransformed coordinates are desired 

    Returns: the PathIterator object that returns the geometry of the outline of this CubicCurve2D, one segment at a time. 

*java.awt.geom.CubicCurve2D.getPathIterator(AffineTransform,double)*

public |java.awt.geom.PathIterator| getPathIterator(
  java.awt.geom.AffineTransform at,
  double flatness)

Return an iteration object that defines the boundary of the flattened shape. The iterator for this class is not multi-threaded safe, which means that this CubicCurve2D class does 
not guarantee that modifications to the geometry of this CubicCurve2D object do not affect any iterations of that geometry that are already in process. 


    at - an optional AffineTransform to be applied to the coordinates as they are returned in the iteration, or null if untransformed coordinates are desired 
    flatness - the maximum amount that the control points for a given curve can vary from colinear before a subdivided curve is replaced by a straight line connecting the endpoints 

    Returns: the PathIterator object that returns the geometry of the outline of this CubicCurve2D, one segment at a time. 

*java.awt.geom.CubicCurve2D.getX1()*

public abstract double getX1()

Returns the X coordinate of the start point in double precision. 



    Returns: the X coordinate of the start point of the CubicCurve2D. 

*java.awt.geom.CubicCurve2D.getX2()*

public abstract double getX2()

Returns the X coordinate of the end point in double precision. 



    Returns: the X coordinate of the end point of the CubicCurve2D. 

*java.awt.geom.CubicCurve2D.getY1()*

public abstract double getY1()

Returns the Y coordinate of the start point in double precision. 



    Returns: the Y coordinate of the start point of the CubicCurve2D. 

*java.awt.geom.CubicCurve2D.getY2()*

public abstract double getY2()

Returns the Y coordinate of the end point in double precision. 



    Returns: the Y coordinate of the end point of the CubicCurve2D. 

*java.awt.geom.CubicCurve2D.intersects(double,double,double,double)*

public boolean intersects(
  double x,
  double y,
  double w,
  double h)

Tests if the shape intersects the interior of a specified set of rectangular coordinates. 


    x,&nbsp;y - the coordinates of the upper left corner of the specified rectangular area 
    w - the width of the specified rectangular area 
    h - the height of the specified rectangular area 

    Returns: true if the shape intersects the interior of the specified rectangular area; false otherwise. 

*java.awt.geom.CubicCurve2D.intersects(Rectangle2D)*

public boolean intersects(java.awt.geom.Rectangle2D r)

Tests if the shape intersects the interior of a specified Rectangle2D. 


    r - the specified Rectangle2D to be tested 

    Returns: true if the shape intersects the interior of the specified Rectangle2D; false otherwise. 

*java.awt.geom.CubicCurve2D.setCurve(CubicCurve2D)*

public void setCurve(java.awt.geom.CubicCurve2D c)

Sets the location of the endpoints and controlpoints of this curve to the same as those in the specified CubicCurve2D. 


    c - the specified CubicCurve2D 

*java.awt.geom.CubicCurve2D.setCurve(double[],int)*

public void setCurve(
  double[] coords,
  int offset)

Sets the location of the endpoints and controlpoints of this curve to the double coordinates at the specified offset in the specified array. 


    coords - a double array containing coordinates 
    offset - the index of coords at which to begin setting the endpoints and controlpoints of this curve to the coordinates contained in coords 

*java.awt.geom.CubicCurve2D.setCurve(double,double,double,double,double,double,double,double)*

public abstract void setCurve(
  double x1,
  double y1,
  double ctrlx1,
  double ctrly1,
  double ctrlx2,
  double ctrly2,
  double x2,
  double y2)

Sets the location of the endpoints and controlpoints of this curve to the specified double coordinates. 


    x1,&nbsp;y1 - the first specified coordinates used to set the start point of this CubicCurve2D 
    ctrlx1,&nbsp;ctrly1 - the second specified coordinates used to set the first control point of this CubicCurve2D 
    ctrlx2,&nbsp;ctrly2 - the third specified coordinates used to set the second control point of this CubicCurve2D 
    x2,&nbsp;y2 - the fourth specified coordinates used to set the end point of this CubicCurve2D 

*java.awt.geom.CubicCurve2D.setCurve(Point2D[],int)*

public void setCurve(
  java.awt.geom.Point2D[] pts,
  int offset)

Sets the location of the endpoints and controlpoints of this curve to the coordinates of the Point2D objects at the specified offset in the specified array. 


    pts - an array of Point2D objects 
    offset - the index of pts at which to begin setting the endpoints and controlpoints of this curve to the points contained in pts 

*java.awt.geom.CubicCurve2D.setCurve(Point2D,Point2D,Point2D,Point2D)*

public void setCurve(
  java.awt.geom.Point2D p1,
  java.awt.geom.Point2D cp1,
  java.awt.geom.Point2D cp2,
  java.awt.geom.Point2D p2)

Sets the location of the endpoints and controlpoints of this curve to the specified Point2D coordinates. 


    p1 - the first specified Point2D used to set the start point of this curve 
    cp1 - the second specified Point2D used to set the first control point of this curve 
    cp2 - the third specified Point2D used to set the second control point of this curve 
    p2 - the fourth specified Point2D used to set the end point of this curve 

*java.awt.geom.CubicCurve2D.solveCubic(double[])*

public static int solveCubic(double[] eqn)

Solves the cubic whose coefficients are in the eqn array and places the non-complex roots back into the same array, returning the number of roots. The solved cubic is represented 
by the equation: 

eqn = {c, b, a, d} dx^3 + ax^2 + bx + c = 0 

A return value of -1 is used to distinguish a constant equation that might be always 0 or never 0 from an equation that has no zeroes. 


    eqn - an array containing coefficients for a cubic 

    Returns: the number of roots, or -1 if the equation is a constant. 

*java.awt.geom.CubicCurve2D.solveCubic(double[],double[])*

public static int solveCubic(
  double[] eqn,
  double[] res)

Solve the cubic whose coefficients are in the eqn array and place the non-complex roots into the res array, returning the number of roots. The cubic solved is represented by the 
equation: eqn = {c, b, a, d} dx^3 + ax^2 + bx + c = 0 A return value of -1 is used to distinguish a constant equation, which may be always 0 or never 0, from an equation which has 
no zeroes. 


    eqn - the specified array of coefficients to use to solve the cubic equation 
    res - the array that contains the non-complex roots resulting from the solution of the cubic equation 

    Returns: the number of roots, or -1 if the equation is a constant 

*java.awt.geom.CubicCurve2D.subdivide(CubicCurve2D,CubicCurve2D)*

public void subdivide(
  java.awt.geom.CubicCurve2D left,
  java.awt.geom.CubicCurve2D right)

Subdivides this cubic curve and stores the resulting two subdivided curves into the left and right curve parameters. Either or both of the left and right objects may be the same 
as this object or null. 


    left - the cubic curve object for storing for the left or first half of the subdivided curve 
    right - the cubic curve object for storing for the right or second half of the subdivided curve 

*java.awt.geom.CubicCurve2D.subdivide(CubicCurve2D,CubicCurve2D,CubicCurve2D)*

public static void subdivide(
  java.awt.geom.CubicCurve2D src,
  java.awt.geom.CubicCurve2D left,
  java.awt.geom.CubicCurve2D right)

Subdivides the cubic curve specified by the src parameter and stores the resulting two subdivided curves into the left and right curve parameters. Either or both of the left and 
right objects may be the same as the src object or null. 


    src - the cubic curve to be subdivided 
    left - the cubic curve object for storing the left or first half of the subdivided curve 
    right - the cubic curve object for storing the right or second half of the subdivided curve 

*java.awt.geom.CubicCurve2D.subdivide(double[],int,double[],int,double[],int)*

public static void subdivide(
  double[] src,
  int srcoff,
  double[] left,
  int leftoff,
  double[] right,
  int rightoff)

Subdivides the cubic curve specified by the coordinates stored in the src array at indices srcoff through (srcoff+7) and stores the resulting two subdivided curves into the two 
result arrays at the corresponding indices. Either or both of the left and right arrays may be null or a reference to the same array as the src array. Note that the last point in 
the first subdivided curve is the same as the first point in the second subdivided curve. Thus, it is possible to pass the same array for left and right and to use offsets, such 
as rightoff equals (leftoff + 6), in order to avoid allocating extra storage for this common point. 


    src - the array holding the coordinates for the source curve 
    srcoff - the offset into the array of the beginning of the the 6 source coordinates 
    left - the array for storing the coordinates for the first half of the subdivided curve 
    leftoff - the offset into the array of the beginning of the the 6 left coordinates 
    right - the array for storing the coordinates for the second half of the subdivided curve 
    rightoff - the offset into the array of the beginning of the the 6 right coordinates 



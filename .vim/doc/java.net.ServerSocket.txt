*java.net.ServerSocket* *ServerSocket* This class implements server sockets.

public class ServerSocket
  extends    |java.lang.Object|

|java.net.ServerSocket_Description|
|java.net.ServerSocket_Fields|
|java.net.ServerSocket_Constructors|
|java.net.ServerSocket_Methods|

================================================================================

*java.net.ServerSocket_Constructors*
|java.net.ServerSocket()|Creates an unbound server socket.
|java.net.ServerSocket(int)|Creates a server socket, bound to the specified por
|java.net.ServerSocket(int,int)|Creates a server socket and binds it to the spe
|java.net.ServerSocket(int,int,InetAddress)|Create a server with the specified 

*java.net.ServerSocket_Methods*
|java.net.ServerSocket.accept()|Listens for a connection to be made to this soc
|java.net.ServerSocket.bind(SocketAddress)|Binds the ServerSocket to a specific
|java.net.ServerSocket.bind(SocketAddress,int)|Binds the ServerSocket to a spec
|java.net.ServerSocket.close()|Closes this socket.
|java.net.ServerSocket.getChannel()|Returns the uniquejava.nio.channels.ServerS
|java.net.ServerSocket.getInetAddress()|Returns the local address of this serve
|java.net.ServerSocket.getLocalPort()|Returns the port on which this socket is 
|java.net.ServerSocket.getLocalSocketAddress()|Returns the address of the endpo
|java.net.ServerSocket.getReceiveBufferSize()|Gets the value of the SO_RCVBUF o
|java.net.ServerSocket.getReuseAddress()|Tests if SO_REUSEADDR is enabled.
|java.net.ServerSocket.getSoTimeout()|Retrive setting for SO_TIMEOUT.
|java.net.ServerSocket.implAccept(Socket)|Subclasses of ServerSocket use this m
|java.net.ServerSocket.isBound()|Returns the binding state of the ServerSocket.
|java.net.ServerSocket.isClosed()|Returns the closed state of the ServerSocket.
|java.net.ServerSocket.setPerformancePreferences(int,int,int)|Sets performance 
|java.net.ServerSocket.setReceiveBufferSize(int)|Sets a default proposed value 
|java.net.ServerSocket.setReuseAddress(boolean)|Enable/disable the SO_REUSEADDR
|java.net.ServerSocket.setSocketFactory(SocketImplFactory)|Sets the server sock
|java.net.ServerSocket.setSoTimeout(int)|Enable/disable SO_TIMEOUT with the spe
|java.net.ServerSocket.toString()|Returns the implementation address and implem

*java.net.ServerSocket_Description*

This class implements server sockets. A server socket waits for requests to 
come in over the network. It performs some operation based on that request, and 
then possibly returns a result to the requester. 

The actual work of the server socket is performed by an instance of the 
SocketImpl class. An application can change the socket factory that creates the 
socket implementation to configure itself to create sockets appropriate to the 
local firewall. 


*java.net.ServerSocket()*

public ServerSocket()
  throws |java.io.IOException|
         
Creates an unbound server socket. 


*java.net.ServerSocket(int)*

public ServerSocket(int port)
  throws |java.io.IOException|
         
Creates a server socket, bound to the specified port. A port of 0 creates a 
socket on any free port. 

The maximum queue length for incoming connection indications (a request to 
connect) is set to 50. If a connection indication arrives when the queue is 
full, the connection is refused. 

If the application has specified a server socket factory, that factory's 
createSocketImpl method is called to create the actual socket implementation. 
Otherwise a "plain" socket is created. 

If there is a security manager, its checkListen method is called with the port 
argument as its argument to ensure the operation is allowed. This could result 
in a SecurityException. 

    port - the port number, or 0 to use any free port. 

*java.net.ServerSocket(int,int)*

public ServerSocket(
  int port,
  int backlog)
  throws |java.io.IOException|
         
Creates a server socket and binds it to the specified local port number, with 
the specified backlog. A port number of 0 creates a socket on any free port. 

The maximum queue length for incoming connection indications (a request to 
connect) is set to the backlog parameter. If a connection indication arrives 
when the queue is full, the connection is refused. 

If the application has specified a server socket factory, that factory's 
createSocketImpl method is called to create the actual socket implementation. 
Otherwise a "plain" socket is created. 

If there is a security manager, its checkListen method is called with the port 
argument as its argument to ensure the operation is allowed. This could result 
in a SecurityException. 

The backlog argument must be a positive value greater than 0. If the value 
passed if equal or less than 0, then the default value will be assumed. 

    port - the specified port, or 0 to use any free port. 
    backlog - the maximum length of the queue. 

*java.net.ServerSocket(int,int,InetAddress)*

public ServerSocket(
  int port,
  int backlog,
  java.net.InetAddress bindAddr)
  throws |java.io.IOException|
         
Create a server with the specified port, listen backlog, and local IP address 
to bind to. The bindAddr argument can be used on a multi-homed host for a 
ServerSocket that will only accept connect requests to one of its addresses. If 
bindAddr is null, it will default accepting connections on any/all local 
addresses. The port must be between 0 and 65535, inclusive. 

If there is a security manager, this method calls its checkListen method with 
the port argument as its argument to ensure the operation is allowed. This 
could result in a SecurityException. 

The backlog argument must be a positive value greater than 0. If the value 
passed if equal or less than 0, then the default value will be assumed. 

    port - the local TCP port 
    backlog - the listen backlog 
    bindAddr - the local InetAddress the server will bind to 

*java.net.ServerSocket.accept()*

public |java.net.Socket| accept()
  throws |java.io.IOException|
         
Listens for a connection to be made to this socket and accepts it. The method 
blocks until a connection is made. 

A new Socket s is created and, if there is a security manager, the security 
manager's checkAccept method is called with s.getInetAddress().getHostAddress() 
and s.getPort() as its arguments to ensure the operation is allowed. This could 
result in a SecurityException. 


    Returns: the new Socket 
*java.net.ServerSocket.bind(SocketAddress)*

public void bind(java.net.SocketAddress endpoint)
  throws |java.io.IOException|
         
Binds the ServerSocket to a specific address (IP address and port number). 

If the address is null, then the system will pick up an ephemeral port and a 
valid local address to bind the socket. 

    endpoint - The IP address & port number to bind to. 

*java.net.ServerSocket.bind(SocketAddress,int)*

public void bind(
  java.net.SocketAddress endpoint,
  int backlog)
  throws |java.io.IOException|
         
Binds the ServerSocket to a specific address (IP address and port number). 

If the address is null, then the system will pick up an ephemeral port and a 
valid local address to bind the socket. 

The backlog argument must be a positive value greater than 0. If the value 
passed if equal or less than 0, then the default value will be assumed. 

    endpoint - The IP address & port number to bind to. 
    backlog - The listen backlog length. 

*java.net.ServerSocket.close()*

public void close()
  throws |java.io.IOException|
         
Closes this socket. 

Any thread currently blocked in (|java.net.ServerSocket|) will throw a 
(|java.net.SocketException|) . 

If this socket has an associated channel then the channel is closed as well. 


*java.net.ServerSocket.getChannel()*

public |java.nio.channels.ServerSocketChannel| getChannel()

Returns the unique (|java.nio.channels.ServerSocketChannel|) object associated 
with this socket, if any. 

A server socket will have a channel if, and only if, the channel itself was 
created via the 
ServerSocketChannel.open(|java.nio.channels.ServerSocketChannel|) method. 


    Returns: the server-socket channel associated with this socket, or null if this socket 
             was not created for a channel 
*java.net.ServerSocket.getInetAddress()*

public |java.net.InetAddress| getInetAddress()

Returns the local address of this server socket. 


    Returns: the address to which this socket is bound, or null if the socket is unbound. 
*java.net.ServerSocket.getLocalPort()*

public int getLocalPort()

Returns the port on which this socket is listening. 


    Returns: the port number to which this socket is listening or -1 if the socket is not 
             bound yet. 
*java.net.ServerSocket.getLocalSocketAddress()*

public |java.net.SocketAddress| getLocalSocketAddress()

Returns the address of the endpoint this socket is bound to, or null if it is 
not bound yet. 


    Returns: a SocketAddress representing the local endpoint of this socket, or null if it 
             is not bound yet. 
*java.net.ServerSocket.getReceiveBufferSize()*

public synchronized int getReceiveBufferSize()
  throws |java.net.SocketException|
         
Gets the value of the SO_RCVBUF option for this ServerSocket, that is the 
proposed buffer size that will be used for Sockets accepted from this 
ServerSocket. 

Note, the value actually set in the accepted socket is determined by calling 
(|java.net.Socket|) . 


    Returns: the value of the SO_RCVBUF option for this Socket. 
*java.net.ServerSocket.getReuseAddress()*

public boolean getReuseAddress()
  throws |java.net.SocketException|
         
Tests if SO_REUSEADDR is enabled. 


    Returns: a boolean indicating whether or not SO_REUSEADDR is enabled. 
*java.net.ServerSocket.getSoTimeout()*

public synchronized int getSoTimeout()
  throws |java.io.IOException|
         
Retrive setting for SO_TIMEOUT. 0 returns implies that the option is disabled 
(i.e., timeout of infinity). 


    Returns: the SO_TIMEOUT value 
*java.net.ServerSocket.implAccept(Socket)*

protected final void implAccept(java.net.Socket s)
  throws |java.io.IOException|
         
Subclasses of ServerSocket use this method to override accept() to return their 
own subclass of socket. So a FooServerSocket will typically hand this method an 
empty FooSocket. On return from implAccept the FooSocket will be connected to a 
client. 

    s - the Socket 

*java.net.ServerSocket.isBound()*

public boolean isBound()

Returns the binding state of the ServerSocket. 


    Returns: true if the ServerSocket succesfuly bound to an address 
*java.net.ServerSocket.isClosed()*

public boolean isClosed()

Returns the closed state of the ServerSocket. 


    Returns: true if the socket has been closed 
*java.net.ServerSocket.setPerformancePreferences(int,int,int)*

public void setPerformancePreferences(
  int connectionTime,
  int latency,
  int bandwidth)

Sets performance preferences for this ServerSocket. 

Sockets use the TCP/IP protocol by default. Some implementations may offer 
alternative protocols which have different performance characteristics than 
TCP/IP. This method allows the application to express its own preferences as to 
how these tradeoffs should be made when the implementation chooses from the 
available protocols. 

Performance preferences are described by three integers whose values indicate 
the relative importance of short connection time, low latency, and high 
bandwidth. The absolute values of the integers are irrelevant; in order to 
choose a protocol the values are simply compared, with larger values indicating 
stronger preferences. If the application prefers short connection time over 
both low latency and high bandwidth, for example, then it could invoke this 
method with the values (1, 0, 0). If the application prefers high bandwidth 
above low latency, and low latency above short connection time, then it could 
invoke this method with the values (0, 1, 2). 

Invoking this method after this socket has been bound will have no effect. This 
implies that in order to use this capability requires the socket to be created 
with the no-argument constructor. 

    connectionTime - An int expressing the relative importance of a short connection time 
    latency - An int expressing the relative importance of low latency 
    bandwidth - An int expressing the relative importance of high bandwidth 

*java.net.ServerSocket.setReceiveBufferSize(int)*

public synchronized void setReceiveBufferSize(int size)
  throws |java.net.SocketException|
         
Sets a default proposed value for the SO_RCVBUF option for sockets accepted 
from this ServerSocket. The value actually set in the accepted socket must be 
determined by calling (|java.net.Socket|) after the socket is returned by 
(|java.net.ServerSocket|) . 

The value of SO_RCVBUF is used both to set the size of the internal socket 
receive buffer, and to set the size of the TCP receive window that is 
advertized to the remote peer. 

It is possible to change the value subsequently, by calling (|java.net.Socket|) 
. However, if the application wishes to allow a receive window larger than 64K 
bytes, as defined by RFC1323 then the proposed value must be set in the 
ServerSocket before it is bound to a local address. This implies, that the 
ServerSocket must be created with the no-argument constructor, then 
setReceiveBufferSize() must be called and lastly the ServerSocket is bound to 
an address by calling bind(). 

Failure to do this will not cause an error, and the buffer size may be set to 
the requested value but the TCP receive window in sockets accepted from this 
ServerSocket will be no larger than 64K bytes. 

    size - the size to which to set the receive buffer size. This value must be greater 
       than 0. 

*java.net.ServerSocket.setReuseAddress(boolean)*

public void setReuseAddress(boolean on)
  throws |java.net.SocketException|
         
Enable/disable the SO_REUSEADDR socket option. 

When a TCP connection is closed the connection may remain in a timeout state 
for a period of time after the connection is closed (typically known as the 
TIME_WAIT state or 2MSL wait state). For applications using a well known socket 
address or port it may not be possible to bind a socket to the required 
SocketAddress if there is a connection in the timeout state involving the 
socket address or port. 

Enabling SO_REUSEADDR prior to binding the socket using 
(|java.net.ServerSocket|) allows the socket to be bound even though a previous 
connection is in a timeout state. 

When a ServerSocket is created the initial setting of SO_REUSEADDR is not 
defined. Applications can use (|java.net.ServerSocket|) to determine the 
initial setting of SO_REUSEADDR. 

The behaviour when SO_REUSEADDR is enabled or disabled after a socket is bound 
(See (|java.net.ServerSocket|) ) is not defined. 

    on - whether to enable or disable the socket option 

*java.net.ServerSocket.setSocketFactory(SocketImplFactory)*

public static synchronized void setSocketFactory(java.net.SocketImplFactory fac)
  throws |java.io.IOException|
         
Sets the server socket implementation factory for the application. The factory 
can be specified only once. 

When an application creates a new server socket, the socket implementation 
factory's createSocketImpl method is called to create the actual socket 
implementation. 

Passing null to the method is a no-op unless the factory was already set. 

If there is a security manager, this method first calls the security manager's 
checkSetFactory method to ensure the operation is allowed. This could result in 
a SecurityException. 

    fac - the desired factory. 

*java.net.ServerSocket.setSoTimeout(int)*

public synchronized void setSoTimeout(int timeout)
  throws |java.net.SocketException|
         
Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds. With 
this option set to a non-zero timeout, a call to accept() for this ServerSocket 
will block for only this amount of time. If the timeout expires, a 
java.net.SocketTimeoutException is raised, though the ServerSocket is still 
valid. The option must be enabled prior to entering the blocking operation to 
have effect. The timeout must be > 0. A timeout of zero is interpreted as an 
infinite timeout. 

    timeout - the specified timeout, in milliseconds 

*java.net.ServerSocket.toString()*

public |java.lang.String| toString()

Returns the implementation address and implementation port of this socket as a 
String. 


    Returns: a string representation of this socket. 


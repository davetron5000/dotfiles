*java.util.concurrent.TimeUnit* *TimeUnit* A TimeUnit represents time durations 

public final class TimeUnit
  extends    |java.lang.Enum|

|java.util.concurrent.TimeUnit_Description|
|java.util.concurrent.TimeUnit_Fields|
|java.util.concurrent.TimeUnit_Constructors|
|java.util.concurrent.TimeUnit_Methods|

================================================================================

*java.util.concurrent.TimeUnit_Fields*
|java.util.concurrent.TimeUnit_java.util.concurrent.TimeUnit.MICROSECONDS|
|java.util.concurrent.TimeUnit_java.util.concurrent.TimeUnit.MILLISECONDS|
|java.util.concurrent.TimeUnit_java.util.concurrent.TimeUnit.NANOSECONDS|
|java.util.concurrent.TimeUnit_java.util.concurrent.TimeUnit.SECONDS|

*java.util.concurrent.TimeUnit_Methods*
|java.util.concurrent.TimeUnit.convert(long,TimeUnit)|Convert the given time du
|java.util.concurrent.TimeUnit.sleep(long)|Perform a Thread.sleep using this un
|java.util.concurrent.TimeUnit.timedJoin(Thread,long)|Perform a timed Thread.jo
|java.util.concurrent.TimeUnit.timedWait(Object,long)|Perform a timed Object.wa
|java.util.concurrent.TimeUnit.toMicros(long)|Equivalent to MICROSECONDS.conver
|java.util.concurrent.TimeUnit.toMillis(long)|Equivalent to MILLISECONDS.conver
|java.util.concurrent.TimeUnit.toNanos(long)|Equivalent to NANOSECONDS.convert(
|java.util.concurrent.TimeUnit.toSeconds(long)|Equivalent to SECONDS.convert(du
|java.util.concurrent.TimeUnit.valueOf(String)|
|java.util.concurrent.TimeUnit.values()|

*java.util.concurrent.TimeUnit_Description*

A TimeUnit represents time durations at a given unit of granularity and 
provides utility methods to convert across units, and to perform timing and 
delay operations in these units. A TimeUnit does not maintain time information, 
but only helps organize and use time representations that may be maintained 
separately across various contexts. 

A TimeUnit is mainly used to inform time-based methods how a given timing 
parameter should be interpreted. For example, the following code will timeout 
in 50 milliseconds if the lock(|java.util.concurrent.locks.Lock|) is not 
available: 

Lock lock = ...; if ( lock.tryLock(50L, TimeUnit.MILLISECONDS) ) ... 

while this code will timeout in 50 seconds: 

Lock lock = ...; if ( lock.tryLock(50L, TimeUnit.SECONDS) ) ... 

Note however, that there is no guarantee that a particular timeout 
implementation will be able to notice the passage of time at the same 
granularity as the given TimeUnit. 


*java.util.concurrent.TimeUnit_java.util.concurrent.TimeUnit.MICROSECONDS*

A TimeUnit represents time durations at a given unit of granularity and 
provides utility methods to convert across units, and to perform timing and 
delay operations in these units. A TimeUnit does not maintain time information, 
but only helps organize and use time representations that may be maintained 
separately across various contexts. 

A TimeUnit is mainly used to inform time-based methods how a given timing 
parameter should be interpreted. For example, the following code will timeout 
in 50 milliseconds if the lock(|java.util.concurrent.locks.Lock|) is not 
available: 

Lock lock = ...; if ( lock.tryLock(50L, TimeUnit.MILLISECONDS) ) ... 

while this code will timeout in 50 seconds: 

Lock lock = ...; if ( lock.tryLock(50L, TimeUnit.SECONDS) ) ... 

Note however, that there is no guarantee that a particular timeout 
implementation will be able to notice the passage of time at the same 
granularity as the given TimeUnit. 


*java.util.concurrent.TimeUnit_java.util.concurrent.TimeUnit.MILLISECONDS*

A TimeUnit represents time durations at a given unit of granularity and 
provides utility methods to convert across units, and to perform timing and 
delay operations in these units. A TimeUnit does not maintain time information, 
but only helps organize and use time representations that may be maintained 
separately across various contexts. 

A TimeUnit is mainly used to inform time-based methods how a given timing 
parameter should be interpreted. For example, the following code will timeout 
in 50 milliseconds if the lock(|java.util.concurrent.locks.Lock|) is not 
available: 

Lock lock = ...; if ( lock.tryLock(50L, TimeUnit.MILLISECONDS) ) ... 

while this code will timeout in 50 seconds: 

Lock lock = ...; if ( lock.tryLock(50L, TimeUnit.SECONDS) ) ... 

Note however, that there is no guarantee that a particular timeout 
implementation will be able to notice the passage of time at the same 
granularity as the given TimeUnit. 


*java.util.concurrent.TimeUnit_java.util.concurrent.TimeUnit.NANOSECONDS*

A TimeUnit represents time durations at a given unit of granularity and 
provides utility methods to convert across units, and to perform timing and 
delay operations in these units. A TimeUnit does not maintain time information, 
but only helps organize and use time representations that may be maintained 
separately across various contexts. 

A TimeUnit is mainly used to inform time-based methods how a given timing 
parameter should be interpreted. For example, the following code will timeout 
in 50 milliseconds if the lock(|java.util.concurrent.locks.Lock|) is not 
available: 

Lock lock = ...; if ( lock.tryLock(50L, TimeUnit.MILLISECONDS) ) ... 

while this code will timeout in 50 seconds: 

Lock lock = ...; if ( lock.tryLock(50L, TimeUnit.SECONDS) ) ... 

Note however, that there is no guarantee that a particular timeout 
implementation will be able to notice the passage of time at the same 
granularity as the given TimeUnit. 


*java.util.concurrent.TimeUnit_java.util.concurrent.TimeUnit.SECONDS*

A TimeUnit represents time durations at a given unit of granularity and 
provides utility methods to convert across units, and to perform timing and 
delay operations in these units. A TimeUnit does not maintain time information, 
but only helps organize and use time representations that may be maintained 
separately across various contexts. 

A TimeUnit is mainly used to inform time-based methods how a given timing 
parameter should be interpreted. For example, the following code will timeout 
in 50 milliseconds if the lock(|java.util.concurrent.locks.Lock|) is not 
available: 

Lock lock = ...; if ( lock.tryLock(50L, TimeUnit.MILLISECONDS) ) ... 

while this code will timeout in 50 seconds: 

Lock lock = ...; if ( lock.tryLock(50L, TimeUnit.SECONDS) ) ... 

Note however, that there is no guarantee that a particular timeout 
implementation will be able to notice the passage of time at the same 
granularity as the given TimeUnit. 



*java.util.concurrent.TimeUnit.convert(long,TimeUnit)*

public long convert(
  long duration,
  java.util.concurrent.TimeUnit unit)

Convert the given time duration in the given unit to this unit. Conversions 
from finer to coarser granularities truncate, so lose precision. For example 
converting 999 milliseconds to seconds results in 0. Conversions from coarser 
to finer granularities with arguments that would numerically overflow saturate 
to Long.MIN_VALUE if negative or Long.MAX_VALUE if positive. 

    duration - the time duration in the given unit 
    unit - the unit of the duration argument 

    Returns: the converted duration in this unit, or Long.MIN_VALUE if conversion would 
             negatively overflow, or Long.MAX_VALUE if it would positively 
             overflow. 
*java.util.concurrent.TimeUnit.sleep(long)*

public void sleep(long timeout)
  throws |java.lang.InterruptedException|
         
Perform a Thread.sleep using this unit. This is a convenience method that 
converts time arguments into the form required by the Thread.sleep method. 

    timeout - the minimum time to sleep 

*java.util.concurrent.TimeUnit.timedJoin(Thread,long)*

public void timedJoin(
  java.lang.Thread thread,
  long timeout)
  throws |java.lang.InterruptedException|
         
Perform a timed Thread.join using this time unit. This is a convenience method 
that converts time arguments into the form required by the Thread.join method. 

    thread - the thread to wait for 
    timeout - the maximum time to wait 

*java.util.concurrent.TimeUnit.timedWait(Object,long)*

public void timedWait(
  java.lang.Object obj,
  long timeout)
  throws |java.lang.InterruptedException|
         
Perform a timed Object.wait using this time unit. This is a convenience method 
that converts timeout arguments into the form required by the Object.wait 
method. 

For example, you could implement a blocking poll method (see 
BlockingQueue.poll(|java.util.concurrent.BlockingQueue|) ) using: 

public synchronized Object poll(long timeout, TimeUnit unit) throws 
InterruptedException { while (empty) { unit.timedWait(this, timeout); ... } } 

    obj - the object to wait on 
    timeout - the maximum time to wait. 

*java.util.concurrent.TimeUnit.toMicros(long)*

public long toMicros(long duration)

Equivalent to MICROSECONDS.convert(duration, this). 

    duration - the duration 

    Returns: the converted duration, or Long.MIN_VALUE if conversion would negatively 
             overflow, or Long.MAX_VALUE if it would positively overflow. 
*java.util.concurrent.TimeUnit.toMillis(long)*

public long toMillis(long duration)

Equivalent to MILLISECONDS.convert(duration, this). 

    duration - the duration 

    Returns: the converted duration, or Long.MIN_VALUE if conversion would negatively 
             overflow, or Long.MAX_VALUE if it would positively overflow. 
*java.util.concurrent.TimeUnit.toNanos(long)*

public long toNanos(long duration)

Equivalent to NANOSECONDS.convert(duration, this). 

    duration - the duration 

    Returns: the converted duration, or Long.MIN_VALUE if conversion would negatively 
             overflow, or Long.MAX_VALUE if it would positively overflow. 
*java.util.concurrent.TimeUnit.toSeconds(long)*

public long toSeconds(long duration)

Equivalent to SECONDS.convert(duration, this). 

    duration - the duration 

    Returns: the converted duration. 
*java.util.concurrent.TimeUnit.valueOf(String)*

public static |java.util.concurrent.TimeUnit| valueOf(java.lang.String name)




*java.util.concurrent.TimeUnit.values()*

public static final |java.util.concurrent.TimeUnit| values()






*java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock* *ReentrantReadWriteLock.ReadLock* 

public static class ReentrantReadWriteLock.ReadLock
  extends    |java.lang.Object|
  implements |java.util.concurrent.locks.Lock|
             |java.io.Serializable|

|java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock_Description|
|java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock_Fields|
|java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock_Constructors|
|java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock_Methods|

================================================================================

*java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock_Constructors*
|java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock(ReentrantReadWriteLock)|

*java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock_Methods*
|java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lock()|Acquires the
|java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lockInterruptibly()|
|java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.newCondition()|Thro
|java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.toString()|Returns 
|java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.tryLock()|Acquires 
|java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.tryLock(long,TimeUnit)|
|java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.unlock()|Attempts t

*java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock_Description*

The lock returned by method 
(|java.util.concurrent.locks.ReentrantReadWriteLock|) . 


*java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock(ReentrantReadWriteLock)*

protected ReentrantReadWriteLock.ReadLock(java.util.concurrent.locks.ReentrantReadWriteLock lock)

Constructor for use by subclasses 

    lock - the outer lock object 

*java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lock()*

public void lock()

Acquires the read lock. 

Acquires the read lock if the write lock is not held by another thread and 
returns immediately. 

If the write lock is held by another thread then the current thread becomes 
disabled for thread scheduling purposes and lies dormant until the read lock 
has been acquired. 


*java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lockInterruptibly()*

public void lockInterruptibly()
  throws |java.lang.InterruptedException|
         
Acquires the read lock unless the current thread is 
interrupted(|java.lang.Thread|) . 

Acquires the read lock if the write lock is not held by another thread and 
returns immediately. 

If the write lock is held by another thread then the current thread becomes 
disabled for thread scheduling purposes and lies dormant until one of two 
things happens: 



The read lock is acquired by the current thread; or 

Some other thread interrupts(|java.lang.Thread|) the current thread. 



If the current thread: 



has its interrupted status set on entry to this method; or 

is interrupted(|java.lang.Thread|) while acquiring the read lock, 



then (|java.lang.InterruptedException|) is thrown and the current thread's 
interrupted status is cleared. 

In this implementation, as this method is an explicit interruption point, 
preference is given to responding to the interrupt over normal or reentrant 
acquisition of the lock. 


*java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.newCondition()*

public |java.util.concurrent.locks.Condition| newCondition()

Throws UnsupportedOperationException because ReadLocks do not support 
conditions. 


*java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.toString()*

public |java.lang.String| toString()

Returns a string identifying this lock, as well as its lock state. The state, 
in brackets, includes the String Read locks = followed by the number of held 
read locks. 


    Returns: a string identifying this lock, as well as its lock state. 
*java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.tryLock()*

public boolean tryLock()

Acquires the read lock only if the write lock is not held by another thread at 
the time of invocation. 

Acquires the read lock if the write lock is not held by another thread and 
returns immediately with the value true. Even when this lock has been set to 
use a fair ordering policy, a call to tryLock() will immediately acquire the 
read lock if it is available, whether or not other threads are currently 
waiting for the read lock. This barging behavior can be useful in certain 
circumstances, even though it breaks fairness. If you want to honor the 
fairness setting for this lock, then use tryLock(0, TimeUnit.SECONDS) 
(|java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock|) which is almost 
equivalent (it also detects interruption). 

If the write lock is held by another thread then this method will return 
immediately with the value false. 


    Returns: true if the read lock was acquired. 
*java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.tryLock(long,TimeUnit)*

public boolean tryLock(
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         
Acquires the read lock if the write lock is not held by another thread within 
the given waiting time and the current thread has not been 
interrupted(|java.lang.Thread|) . 

Acquires the read lock if the write lock is not held by another thread and 
returns immediately with the value true. If this lock has been set to use a 
fair ordering policy then an available lock will not be acquired if any other 
threads are waiting for the lock. This is in contrast to the 
(|java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock|) method. If you 
want a timed tryLock that does permit barging on a fair lock then combine the 
timed and un-timed forms together: 

if (lock.tryLock() || lock.tryLock(timeout, unit) ) { ... } 

If the write lock is held by another thread then the current thread becomes 
disabled for thread scheduling purposes and lies dormant until one of three 
things happens: 



The read lock is acquired by the current thread; or 

Some other thread interrupts(|java.lang.Thread|) the current thread; or 

The specified waiting time elapses 



If the read lock is acquired then the value true is returned. 

If the current thread: 



has its interrupted status set on entry to this method; or 

is interrupted(|java.lang.Thread|) while acquiring the read lock, 

then (|java.lang.InterruptedException|) is thrown and the current thread's 
interrupted status is cleared. 

If the specified waiting time elapses then the value false is returned. If the 
time is less than or equal to zero, the method will not wait at all. 

In this implementation, as this method is an explicit interruption point, 
preference is given to responding to the interrupt over normal or reentrant 
acquisition of the lock, and over reporting the elapse of the waiting time. 

    timeout - the time to wait for the read lock 
    unit - the time unit of the timeout argument 

    Returns: true if the read lock was acquired. 
*java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.unlock()*

public void unlock()

Attempts to release this lock. 

If the number of readers is now zero then the lock is made available for write 
lock attempts. 




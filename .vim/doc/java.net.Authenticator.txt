*java.net.Authenticator* *Authenticator* The class Authenticator represents an object that knows how to obtain
 authentication for a network connection.

public abstract class Authenticator
  extends    |java.lang.Object|

|java.net.Authenticator_Description|
|java.net.Authenticator_Fields|
|java.net.Authenticator_Constructors|
|java.net.Authenticator_Methods|

====================================================================================================================================================================================

*java.net.Authenticator_Constructors*
|java.net.Authenticator()|

*java.net.Authenticator_Methods*
|java.net.Authenticator.getPasswordAuthentication()|Called when password authorization is needed.
|java.net.Authenticator.getRequestingHost()|Gets the hostname of the  site or proxy requesting authentication, or null  if not available.
|java.net.Authenticator.getRequestingPort()|Gets the port number for the requested connection.
|java.net.Authenticator.getRequestingPrompt()|Gets the prompt string given by the requestor.
|java.net.Authenticator.getRequestingProtocol()|Give the protocol that's requesting the connection.
|java.net.Authenticator.getRequestingScheme()|Gets the scheme of the requestor (the HTTP scheme  for an HTTP firewall, for example).
|java.net.Authenticator.getRequestingSite()|Gets the InetAddress of the  site requesting authorization, or null  if not available.
|java.net.Authenticator.getRequestingURL()|Returns the URL that resulted in this  request for authentication.
|java.net.Authenticator.getRequestorType()|Returns whether the requestor is a Proxy or a Server.
|java.net.Authenticator.requestPasswordAuthentication(InetAddress,int,String,String,String)|Ask the authenticator that has been registered with the system  for a password.
|java.net.Authenticator.requestPasswordAuthentication(String,InetAddress,int,String,String,String)|Ask the authenticator that has been registered with the system  for a password.
|java.net.Authenticator.requestPasswordAuthentication(String,InetAddress,int,String,String,String,URL,Authenticator.RequestorType)|Ask the authenticator that has been registered w
|java.net.Authenticator.setDefault(Authenticator)|Sets the authenticator that will be used by the networking code  when a proxy or an HTTP server asks for authentication.

*java.net.Authenticator_Description*

The class Authenticator represents an object that knows how to obtain authentication for a network connection. Usually, it will do this by prompting the user for information. 

Applications use this class by overriding (|java.net.Authenticator|) in a sub-class. This method will typically use the various getXXX() accessor methods to get information about 
the entity requesting authentication. It must then acquire a username and password either by interacting with the user or through some other non-interactive means. The credentials 
are then returned as a (|java.net.PasswordAuthentication|) return value. 

An instance of this concrete sub-class is then registered with the system by calling (|java.net.Authenticator|) . When authentication is required, the system will invoke one of 
the requestPasswordAuthentication() methods which in turn will call the getPasswordAuthentication() method of the registered object. 

All methods that request authentication have a default implementation that fails. 



*java.net.Authenticator()*

public Authenticator()




*java.net.Authenticator.getPasswordAuthentication()*

protected |java.net.PasswordAuthentication| getPasswordAuthentication()

Called when password authorization is needed. Subclasses should override the default implementation, which returns null. 



    Returns: The PasswordAuthentication collected from the user, or null if none is provided. 

*java.net.Authenticator.getRequestingHost()*

protected final |java.lang.String| getRequestingHost()

Gets the hostname of the site or proxy requesting authentication, or null if not available. 



    Returns: the hostname of the connection requiring authentication, or null if it's not available. 

*java.net.Authenticator.getRequestingPort()*

protected final int getRequestingPort()

Gets the port number for the requested connection. 



    Returns: an int indicating the port for the requested connection. 

*java.net.Authenticator.getRequestingPrompt()*

protected final |java.lang.String| getRequestingPrompt()

Gets the prompt string given by the requestor. 



    Returns: the prompt string given by the requestor (realm for http requests) 

*java.net.Authenticator.getRequestingProtocol()*

protected final |java.lang.String| getRequestingProtocol()

Give the protocol that's requesting the connection. Often this will be based on a URL, but in a future JDK it could be, for example, "SOCKS" for a password-protected SOCKS5 
firewall. 



    Returns: the protcol, optionally followed by "/version", where version is a version number. 

*java.net.Authenticator.getRequestingScheme()*

protected final |java.lang.String| getRequestingScheme()

Gets the scheme of the requestor (the HTTP scheme for an HTTP firewall, for example). 



    Returns: the scheme of the requestor 

*java.net.Authenticator.getRequestingSite()*

protected final |java.net.InetAddress| getRequestingSite()

Gets the InetAddress of the site requesting authorization, or null if not available. 



    Returns: the InetAddress of the site requesting authorization, or null if it's not available. 

*java.net.Authenticator.getRequestingURL()*

protected |java.net.URL| getRequestingURL()

Returns the URL that resulted in this request for authentication. 



    Returns: the requesting URL 

*java.net.Authenticator.getRequestorType()*

protected |java.net.Authenticator.RequestorType| getRequestorType()

Returns whether the requestor is a Proxy or a Server. 



    Returns: the authentication type of the requestor 

*java.net.Authenticator.requestPasswordAuthentication(InetAddress,int,String,String,String)*

public static |java.net.PasswordAuthentication| requestPasswordAuthentication(
  java.net.InetAddress addr,
  int port,
  java.lang.String protocol,
  java.lang.String prompt,
  java.lang.String scheme)

Ask the authenticator that has been registered with the system for a password. 

First, if there is a security manager, its checkPermission method is called with a NetPermission("requestPasswordAuthentication") permission. This may result in a 
java.lang.SecurityException. 


    addr - The InetAddress of the site requesting authorization, or null if not known. 
    port - the port for the requested connection 
    protocol - The protocol that's requesting the connection ({@link java.net.Authenticator#getRequestingProtocol()}) 
    prompt - A prompt string for the user 
    scheme - The authentication scheme 

    Returns: The username/password, or null if one can't be gotten. 

*java.net.Authenticator.requestPasswordAuthentication(String,InetAddress,int,String,String,String)*

public static |java.net.PasswordAuthentication| requestPasswordAuthentication(
  java.lang.String host,
  java.net.InetAddress addr,
  int port,
  java.lang.String protocol,
  java.lang.String prompt,
  java.lang.String scheme)

Ask the authenticator that has been registered with the system for a password. This is the preferred method for requesting a password because the hostname can be provided in cases 
where the InetAddress is not available. 

First, if there is a security manager, its checkPermission method is called with a NetPermission("requestPasswordAuthentication") permission. This may result in a 
java.lang.SecurityException. 


    host - The hostname of the site requesting authentication. 
    addr - The InetAddress of the site requesting authentication, or null if not known. 
    port - the port for the requested connection. 
    protocol - The protocol that's requesting the connection ({@link java.net.Authenticator#getRequestingProtocol()}) 
    prompt - A prompt string for the user which identifies the authentication realm. 
    scheme - The authentication scheme 

    Returns: The username/password, or null if one can't be gotten. 

*java.net.Authenticator.requestPasswordAuthentication(String,InetAddress,int,String,String,String,URL,Authenticator.RequestorType)*

public static |java.net.PasswordAuthentication| requestPasswordAuthentication(
  java.lang.String host,
  java.net.InetAddress addr,
  int port,
  java.lang.String protocol,
  java.lang.String prompt,
  java.lang.String scheme,
  java.net.URL url,
  java.net.Authenticator.RequestorType reqType)

Ask the authenticator that has been registered with the system for a password. 

First, if there is a security manager, its checkPermission method is called with a NetPermission("requestPasswordAuthentication") permission. This may result in a 
java.lang.SecurityException. 


    host - The hostname of the site requesting authentication. 
    addr - The InetAddress of the site requesting authorization, or null if not known. 
    port - the port for the requested connection 
    protocol - The protocol that's requesting the connection ({@link java.net.Authenticator#getRequestingProtocol()}) 
    prompt - A prompt string for the user 
    scheme - The authentication scheme 
    url - The requesting URL that caused the authentication 
    reqType - The type (server or proxy) of the entity requesting authentication. 

    Returns: The username/password, or null if one can't be gotten. 

*java.net.Authenticator.setDefault(Authenticator)*

public static synchronized void setDefault(java.net.Authenticator a)

Sets the authenticator that will be used by the networking code when a proxy or an HTTP server asks for authentication. 

First, if there is a security manager, its checkPermission method is called with a NetPermission("setDefaultAuthenticator") permission. This may result in a 
java.lang.SecurityException. 


    a - The authenticator to be set. If a is null then any previously set authenticator is removed. 



*java.sql.CallableStatement* *CallableStatement* The interface used to execute S

public interface interface CallableStatement

  implements |java.sql.PreparedStatement|

|java.sql.CallableStatement_Description|
|java.sql.CallableStatement_Fields|
|java.sql.CallableStatement_Constructors|
|java.sql.CallableStatement_Methods|

================================================================================

*java.sql.CallableStatement_Methods*
|java.sql.CallableStatement.getArray(int)|Retrieves the value of the designated
|java.sql.CallableStatement.getArray(String)|Retrieves the value of a JDBC ARRA
|java.sql.CallableStatement.getBigDecimal(int)|Retrieves the value of the desig
|java.sql.CallableStatement.getBigDecimal(int,int)|Retrieves the value of the d
|java.sql.CallableStatement.getBigDecimal(String)|Retrieves the value of a JDBC
|java.sql.CallableStatement.getBlob(int)|Retrieves the value of the designated 
|java.sql.CallableStatement.getBlob(String)|Retrieves the value of a JDBC BLOB 
|java.sql.CallableStatement.getBoolean(int)|Retrieves the value of the designat
|java.sql.CallableStatement.getBoolean(String)|Retrieves the value of a JDBC BI
|java.sql.CallableStatement.getByte(int)|Retrieves the value of the designated 
|java.sql.CallableStatement.getByte(String)|Retrieves the value of a JDBC TINYI
|java.sql.CallableStatement.getBytes(int)|Retrieves the value of the designated
|java.sql.CallableStatement.getBytes(String)|Retrieves the value of a JDBC BINA
|java.sql.CallableStatement.getClob(int)|Retrieves the value of the designated 
|java.sql.CallableStatement.getClob(String)|Retrieves the value of a JDBC CLOB 
|java.sql.CallableStatement.getDate(int)|Retrieves the value of the designated 
|java.sql.CallableStatement.getDate(int,Calendar)|Retrieves the value of the de
|java.sql.CallableStatement.getDate(String)|Retrieves the value of a JDBC DATE 
|java.sql.CallableStatement.getDate(String,Calendar)|Retrieves the value of a J
|java.sql.CallableStatement.getDouble(int)|Retrieves the value of the designate
|java.sql.CallableStatement.getDouble(String)|Retrieves the value of a JDBC DOU
|java.sql.CallableStatement.getFloat(int)|Retrieves the value of the designated
|java.sql.CallableStatement.getFloat(String)|Retrieves the value of a JDBC FLOA
|java.sql.CallableStatement.getInt(int)|Retrieves the value of the designated J
|java.sql.CallableStatement.getInt(String)|Retrieves the value of a JDBC INTEGE
|java.sql.CallableStatement.getLong(int)|Retrieves the value of the designated 
|java.sql.CallableStatement.getLong(String)|Retrieves the value of a JDBC BIGIN
|java.sql.CallableStatement.getObject(int)|Retrieves the value of the designate
|java.sql.CallableStatement.getObject(int,Map)|Returns an object representing t
|java.sql.CallableStatement.getObject(String)|Retrieves the value of a paramete
|java.sql.CallableStatement.getObject(String,Map)|Returns an object representin
|java.sql.CallableStatement.getRef(int)|Retrieves the value of the designated J
|java.sql.CallableStatement.getRef(String)|Retrieves the value of a JDBC REF(<s
|java.sql.CallableStatement.getShort(int)|Retrieves the value of the designated
|java.sql.CallableStatement.getShort(String)|Retrieves the value of a JDBC SMAL
|java.sql.CallableStatement.getString(int)|Retrieves the value of the designate
|java.sql.CallableStatement.getString(String)|Retrieves the value of a JDBC CHA
|java.sql.CallableStatement.getTime(int)|Retrieves the value of the designated 
|java.sql.CallableStatement.getTime(int,Calendar)|Retrieves the value of the de
|java.sql.CallableStatement.getTime(String)|Retrieves the value of a JDBC TIME 
|java.sql.CallableStatement.getTime(String,Calendar)|Retrieves the value of a J
|java.sql.CallableStatement.getTimestamp(int)|Retrieves the value of the design
|java.sql.CallableStatement.getTimestamp(int,Calendar)|Retrieves the value of t
|java.sql.CallableStatement.getTimestamp(String)|Retrieves the value of a JDBC 
|java.sql.CallableStatement.getTimestamp(String,Calendar)|Retrieves the value o
|java.sql.CallableStatement.getURL(int)|Retrieves the value of the designated J
|java.sql.CallableStatement.getURL(String)|Retrieves the value of a JDBC DATALI
|java.sql.CallableStatement.registerOutParameter(int,int)|Registers the OUT par
|java.sql.CallableStatement.registerOutParameter(int,int,int)|Registers the par
|java.sql.CallableStatement.registerOutParameter(int,int,String)|Registers the 
|java.sql.CallableStatement.registerOutParameter(String,int)|Registers the OUT 
|java.sql.CallableStatement.registerOutParameter(String,int,int)|Registers the 
|java.sql.CallableStatement.registerOutParameter(String,int,String)|Registers t
|java.sql.CallableStatement.setAsciiStream(String,InputStream,int)|Sets the des
|java.sql.CallableStatement.setBigDecimal(String,BigDecimal)|Sets the designate
|java.sql.CallableStatement.setBinaryStream(String,InputStream,int)|Sets the de
|java.sql.CallableStatement.setBoolean(String,boolean)|Sets the designated para
|java.sql.CallableStatement.setByte(String,byte)|Sets the designated parameter 
|java.sql.CallableStatement.setBytes(String,byte[])|Sets the designated paramet
|java.sql.CallableStatement.setCharacterStream(String,Reader,int)|Sets the desi
|java.sql.CallableStatement.setDate(String,Date)|Sets the designated parameter 
|java.sql.CallableStatement.setDate(String,Date,Calendar)|Sets the designated p
|java.sql.CallableStatement.setDouble(String,double)|Sets the designated parame
|java.sql.CallableStatement.setFloat(String,float)|Sets the designated paramete
|java.sql.CallableStatement.setInt(String,int)|Sets the designated parameter to
|java.sql.CallableStatement.setLong(String,long)|Sets the designated parameter 
|java.sql.CallableStatement.setNull(String,int)|Sets the designated parameter t
|java.sql.CallableStatement.setNull(String,int,String)|Sets the designated para
|java.sql.CallableStatement.setObject(String,Object)|Sets the value of the desi
|java.sql.CallableStatement.setObject(String,Object,int)|Sets the value of the 
|java.sql.CallableStatement.setObject(String,Object,int,int)|Sets the value of 
|java.sql.CallableStatement.setShort(String,short)|Sets the designated paramete
|java.sql.CallableStatement.setString(String,String)|Sets the designated parame
|java.sql.CallableStatement.setTime(String,Time)|Sets the designated parameter 
|java.sql.CallableStatement.setTime(String,Time,Calendar)|Sets the designated p
|java.sql.CallableStatement.setTimestamp(String,Timestamp)|Sets the designated 
|java.sql.CallableStatement.setTimestamp(String,Timestamp,Calendar)|Sets the de
|java.sql.CallableStatement.setURL(String,URL)|Sets the designated parameter to
|java.sql.CallableStatement.wasNull()|Retrieves whether the last OUT parameter 

*java.sql.CallableStatement_Description*

The interface used to execute SQL stored procedures. The JDBC API provides a 
stored procedure SQL escape syntax that allows stored procedures to be called 
in a standard way for all RDBMSs. This escape syntax has one form that includes 
a result parameter and one that does not. If used, the result parameter must be 
registered as an OUT parameter. The other parameters can be used for input, 
output or both. Parameters are referred to sequentially, by number, with the 
first parameter being 1. 

{?= call <procedure-name>[<arg1>,<arg2>, ...]} {call 
<procedure-name>[<arg1>,<arg2>, ...]} 

IN parameter values are set using the set methods inherited from 
(|java.sql.PreparedStatement|) . The type of all OUT parameters must be 
registered prior to executing the stored procedure; their values are retrieved 
after execution via the get methods provided here. 

A CallableStatement can return one (|java.sql.ResultSet|) object or multiple 
ResultSet objects. Multiple ResultSet objects are handled using operations 
inherited from (|java.sql.Statement|) . 

For maximum portability, a call's ResultSet objects and update counts should be 
processed prior to getting the values of output parameters. 


*java.sql.CallableStatement.getArray(int)*

public |java.sql.Array| getArray(int i)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC ARRAY parameter as an 
(|java.sql.Array|) object in the Java programming language. 

    i - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value as an Array object in the Java programming language. If the 
             value was SQL NULL, the value null is returned. 
*java.sql.CallableStatement.getArray(String)*

public |java.sql.Array| getArray(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC ARRAY parameter as an (|java.sql.Array|) object 
in the Java programming language. 

    parameterName - the name of the parameter 

    Returns: the parameter value as an Array object in Java programming language. If the 
             value was SQL NULL, the value null is returned. 
*java.sql.CallableStatement.getBigDecimal(int)*

public |java.math.BigDecimal| getBigDecimal(int parameterIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC NUMERIC parameter as a 
java.math.BigDecimal object with as many digits to the right of the decimal 
point as the value contains. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value in full precision. If the value is SQL NULL, the result is 
             null. 
*java.sql.CallableStatement.getBigDecimal(int,int)*

public |java.math.BigDecimal| getBigDecimal(
  int parameterIndex,
  int scale)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC NUMERIC parameter as a 
java.math.BigDecimal object with scale digits to the right of the decimal 
point. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 
    scale - the number of digits to the right of the decimal point 

    Returns: the parameter value. If the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getBigDecimal(String)*

public |java.math.BigDecimal| getBigDecimal(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC NUMERIC parameter as a java.math.BigDecimal 
object with as many digits to the right of the decimal point as the value 
contains. 

    parameterName - the name of the parameter 

    Returns: the parameter value in full precision. If the value is SQL NULL, the result is 
             null. 
*java.sql.CallableStatement.getBlob(int)*

public |java.sql.Blob| getBlob(int i)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC BLOB parameter as a 
(|java.sql.Blob|) object in the Java programming language. 

    i - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value as a Blob object in the Java programming language. If the 
             value was SQL NULL, the value null is returned. 
*java.sql.CallableStatement.getBlob(String)*

public |java.sql.Blob| getBlob(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC BLOB parameter as a (|java.sql.Blob|) object in 
the Java programming language. 

    parameterName - the name of the parameter 

    Returns: the parameter value as a Blob object in the Java programming language. If the 
             value was SQL NULL, the value null is returned. 
*java.sql.CallableStatement.getBoolean(int)*

public boolean getBoolean(int parameterIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC BIT parameter as a boolean in the 
Java programming language. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value. If the value is SQL NULL, the result is false. 
*java.sql.CallableStatement.getBoolean(String)*

public boolean getBoolean(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC BIT parameter as a boolean in the Java 
programming language. 

    parameterName - the name of the parameter 

    Returns: the parameter value. If the value is SQL NULL, the result is false. 
*java.sql.CallableStatement.getByte(int)*

public byte getByte(int parameterIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC TINYINT parameter as a byte in the 
Java programming language. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value. If the value is SQL NULL, the result is 0. 
*java.sql.CallableStatement.getByte(String)*

public byte getByte(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC TINYINT parameter as a byte in the Java 
programming language. 

    parameterName - the name of the parameter 

    Returns: the parameter value. If the value is SQL NULL, the result is 0. 
*java.sql.CallableStatement.getBytes(int)*

public byte getBytes(int parameterIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC BINARY or VARBINARY parameter as an 
array of byte values in the Java programming language. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value. If the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getBytes(String)*

public byte getBytes(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC BINARY or VARBINARY parameter as an array of byte 
values in the Java programming language. 

    parameterName - the name of the parameter 

    Returns: the parameter value. If the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getClob(int)*

public |java.sql.Clob| getClob(int i)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC CLOB parameter as a Clob object in 
the Java programming language. 

    i - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value as a Clob object in the Java programming language. If the 
             value was SQL NULL, the value null is returned. 
*java.sql.CallableStatement.getClob(String)*

public |java.sql.Clob| getClob(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC CLOB parameter as a Clob object in the Java 
programming language. 

    parameterName - the name of the parameter 

    Returns: the parameter value as a Clob object in the Java programming language. If the 
             value was SQL NULL, the value null is returned. 
*java.sql.CallableStatement.getDate(int)*

public |java.sql.Date| getDate(int parameterIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC DATE parameter as a java.sql.Date 
object. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value. If the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getDate(int,Calendar)*

public |java.sql.Date| getDate(
  int parameterIndex,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC DATE parameter as a java.sql.Date 
object, using the given Calendar object to construct the date. With a Calendar 
object, the driver can calculate the date taking into account a custom timezone 
and locale. If no Calendar object is specified, the driver uses the default 
timezone and locale. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 
    cal - the Calendar object the driver will use to construct the date 

    Returns: the parameter value. If the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getDate(String)*

public |java.sql.Date| getDate(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC DATE parameter as a java.sql.Date object. 

    parameterName - the name of the parameter 

    Returns: the parameter value. If the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getDate(String,Calendar)*

public |java.sql.Date| getDate(
  java.lang.String parameterName,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC DATE parameter as a java.sql.Date object, using 
the given Calendar object to construct the date. With a Calendar object, the 
driver can calculate the date taking into account a custom timezone and locale. 
If no Calendar object is specified, the driver uses the default timezone and 
locale. 

    parameterName - the name of the parameter 
    cal - the Calendar object the driver will use to construct the date 

    Returns: the parameter value. If the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getDouble(int)*

public double getDouble(int parameterIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC DOUBLE parameter as a double in the 
Java programming language. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value. If the value is SQL NULL, the result is 0. 
*java.sql.CallableStatement.getDouble(String)*

public double getDouble(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC DOUBLE parameter as a double in the Java 
programming language. 

    parameterName - the name of the parameter 

    Returns: the parameter value. If the value is SQL NULL, the result is 0. 
*java.sql.CallableStatement.getFloat(int)*

public float getFloat(int parameterIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC FLOAT parameter as a float in the 
Java programming language. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value. If the value is SQL NULL, the result is 0. 
*java.sql.CallableStatement.getFloat(String)*

public float getFloat(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC FLOAT parameter as a float in the Java 
programming language. 

    parameterName - the name of the parameter 

    Returns: the parameter value. If the value is SQL NULL, the result is 0. 
*java.sql.CallableStatement.getInt(int)*

public int getInt(int parameterIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC INTEGER parameter as an int in the 
Java programming language. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value. If the value is SQL NULL, the result is 0. 
*java.sql.CallableStatement.getInt(String)*

public int getInt(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC INTEGER parameter as an int in the Java 
programming language. 

    parameterName - the name of the parameter 

    Returns: the parameter value. If the value is SQL NULL, the result is 0. 
*java.sql.CallableStatement.getLong(int)*

public long getLong(int parameterIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC BIGINT parameter as a long in the 
Java programming language. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value. If the value is SQL NULL, the result is 0. 
*java.sql.CallableStatement.getLong(String)*

public long getLong(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC BIGINT parameter as a long in the Java 
programming language. 

    parameterName - the name of the parameter 

    Returns: the parameter value. If the value is SQL NULL, the result is 0. 
*java.sql.CallableStatement.getObject(int)*

public |java.lang.Object| getObject(int parameterIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated parameter as an Object in the Java 
programming language. If the value is an SQL NULL, the driver returns a Java 
null. 

This method returns a Java object whose type corresponds to the JDBC type that 
was registered for this parameter using the method registerOutParameter. By 
registering the target JDBC type as java.sql.Types.OTHER, this method can be 
used to read database-specific abstract data types. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 

    Returns: A java.lang.Object holding the OUT parameter value 
*java.sql.CallableStatement.getObject(int,Map)*

public |java.lang.Object| getObject(
  int i,
  java.util.Map map)
  throws |java.sql.SQLException|
         
Returns an object representing the value of OUT parameter i and uses map for 
the custom mapping of the parameter value. 

This method returns a Java object whose type corresponds to the JDBC type that 
was registered for this parameter using the method registerOutParameter. By 
registering the target JDBC type as java.sql.Types.OTHER, this method can be 
used to read database-specific abstract data types. 

    i - the first parameter is 1, the second is 2, and so on 
    map - the mapping from SQL type names to Java classes 

    Returns: a java.lang.Object holding the OUT parameter value 
*java.sql.CallableStatement.getObject(String)*

public |java.lang.Object| getObject(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a parameter as an Object in the Java programming 
language. If the value is an SQL NULL, the driver returns a Java null. 

This method returns a Java object whose type corresponds to the JDBC type that 
was registered for this parameter using the method registerOutParameter. By 
registering the target JDBC type as java.sql.Types.OTHER, this method can be 
used to read database-specific abstract data types. 

    parameterName - the name of the parameter 

    Returns: A java.lang.Object holding the OUT parameter value. 
*java.sql.CallableStatement.getObject(String,Map)*

public |java.lang.Object| getObject(
  java.lang.String parameterName,
  java.util.Map map)
  throws |java.sql.SQLException|
         
Returns an object representing the value of OUT parameter i and uses map for 
the custom mapping of the parameter value. 

This method returns a Java object whose type corresponds to the JDBC type that 
was registered for this parameter using the method registerOutParameter. By 
registering the target JDBC type as java.sql.Types.OTHER, this method can be 
used to read database-specific abstract data types. 

    parameterName - the name of the parameter 
    map - the mapping from SQL type names to Java classes 

    Returns: a java.lang.Object holding the OUT parameter value 
*java.sql.CallableStatement.getRef(int)*

public |java.sql.Ref| getRef(int i)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC REF(<structured-type>) parameter as 
a (|java.sql.Ref|) object in the Java programming language. 

    i - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value as a Ref object in the Java programming language. If the 
             value was SQL NULL, the value null is returned. 
*java.sql.CallableStatement.getRef(String)*

public |java.sql.Ref| getRef(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC REF(<structured-type>) parameter as a 
(|java.sql.Ref|) object in the Java programming language. 

    parameterName - the name of the parameter 

    Returns: the parameter value as a Ref object in the Java programming language. If the 
             value was SQL NULL, the value null is returned. 
*java.sql.CallableStatement.getShort(int)*

public short getShort(int parameterIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC SMALLINT parameter as a short in the 
Java programming language. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value. If the value is SQL NULL, the result is 0. 
*java.sql.CallableStatement.getShort(String)*

public short getShort(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC SMALLINT parameter as a short in the Java 
programming language. 

    parameterName - the name of the parameter 

    Returns: the parameter value. If the value is SQL NULL, the result is 0. 
*java.sql.CallableStatement.getString(int)*

public |java.lang.String| getString(int parameterIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC CHAR, VARCHAR, or LONGVARCHAR 
parameter as a String in the Java programming language. 

For the fixed-length type JDBC CHAR, the String object returned has exactly the 
same value the JDBC CHAR value had in the database, including any padding added 
by the database. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value. If the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getString(String)*

public |java.lang.String| getString(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC CHAR, VARCHAR, or LONGVARCHAR parameter as a 
String in the Java programming language. 

For the fixed-length type JDBC CHAR, the String object returned has exactly the 
same value the JDBC CHAR value had in the database, including any padding added 
by the database. 

    parameterName - the name of the parameter 

    Returns: the parameter value. If the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getTime(int)*

public |java.sql.Time| getTime(int parameterIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC TIME parameter as a java.sql.Time 
object. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value. If the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getTime(int,Calendar)*

public |java.sql.Time| getTime(
  int parameterIndex,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC TIME parameter as a java.sql.Time 
object, using the given Calendar object to construct the time. With a Calendar 
object, the driver can calculate the time taking into account a custom timezone 
and locale. If no Calendar object is specified, the driver uses the default 
timezone and locale. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 
    cal - the Calendar object the driver will use to construct the time 

    Returns: the parameter value; if the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getTime(String)*

public |java.sql.Time| getTime(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC TIME parameter as a java.sql.Time object. 

    parameterName - the name of the parameter 

    Returns: the parameter value. If the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getTime(String,Calendar)*

public |java.sql.Time| getTime(
  java.lang.String parameterName,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC TIME parameter as a java.sql.Time object, using 
the given Calendar object to construct the time. With a Calendar object, the 
driver can calculate the time taking into account a custom timezone and locale. 
If no Calendar object is specified, the driver uses the default timezone and 
locale. 

    parameterName - the name of the parameter 
    cal - the Calendar object the driver will use to construct the time 

    Returns: the parameter value; if the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getTimestamp(int)*

public |java.sql.Timestamp| getTimestamp(int parameterIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC TIMESTAMP parameter as a 
java.sql.Timestamp object. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 

    Returns: the parameter value. If the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getTimestamp(int,Calendar)*

public |java.sql.Timestamp| getTimestamp(
  int parameterIndex,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC TIMESTAMP parameter as a 
java.sql.Timestamp object, using the given Calendar object to construct the 
Timestamp object. With a Calendar object, the driver can calculate the 
timestamp taking into account a custom timezone and locale. If no Calendar 
object is specified, the driver uses the default timezone and locale. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 
    cal - the Calendar object the driver will use to construct the timestamp 

    Returns: the parameter value. If the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getTimestamp(String)*

public |java.sql.Timestamp| getTimestamp(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC TIMESTAMP parameter as a java.sql.Timestamp 
object. 

    parameterName - the name of the parameter 

    Returns: the parameter value. If the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getTimestamp(String,Calendar)*

public |java.sql.Timestamp| getTimestamp(
  java.lang.String parameterName,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC TIMESTAMP parameter as a java.sql.Timestamp 
object, using the given Calendar object to construct the Timestamp object. With 
a Calendar object, the driver can calculate the timestamp taking into account a 
custom timezone and locale. If no Calendar object is specified, the driver uses 
the default timezone and locale. 

    parameterName - the name of the parameter 
    cal - the Calendar object the driver will use to construct the timestamp 

    Returns: the parameter value. If the value is SQL NULL, the result is null. 
*java.sql.CallableStatement.getURL(int)*

public |java.net.URL| getURL(int parameterIndex)
  throws |java.sql.SQLException|
         
Retrieves the value of the designated JDBC DATALINK parameter as a java.net.URL 
object. 

    parameterIndex - the first parameter is 1, the second is 2,... 

    Returns: a java.net.URL object that represents the JDBC DATALINK value used as the 
             designated parameter 
*java.sql.CallableStatement.getURL(String)*

public |java.net.URL| getURL(java.lang.String parameterName)
  throws |java.sql.SQLException|
         
Retrieves the value of a JDBC DATALINK parameter as a java.net.URL object. 

    parameterName - the name of the parameter 

    Returns: the parameter value as a java.net.URL object in the Java programming language. 
             If the value was SQL NULL, the value null is returned. 
*java.sql.CallableStatement.registerOutParameter(int,int)*

public void registerOutParameter(
  int parameterIndex,
  int sqlType)
  throws |java.sql.SQLException|
         
Registers the OUT parameter in ordinal position parameterIndex to the JDBC type 
sqlType. All OUT parameters must be registered before a stored procedure is 
executed. 

The JDBC type specified by sqlType for an OUT parameter determines the Java 
type that must be used in the get method to read the value of that parameter. 

If the JDBC type expected to be returned to this output parameter is specific 
to this particular database, sqlType should be java.sql.Types.OTHER. The method 
(|java.sql.CallableStatement|) retrieves the value. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 
    sqlType - the JDBC type code defined by java.sql.Types. If the parameter is of JDBC type 
       NUMERIC or DECIMAL, the version of registerOutParameter that accepts a 
       scale value should be used. 

*java.sql.CallableStatement.registerOutParameter(int,int,int)*

public void registerOutParameter(
  int parameterIndex,
  int sqlType,
  int scale)
  throws |java.sql.SQLException|
         
Registers the parameter in ordinal position parameterIndex to be of JDBC type 
sqlType. This method must be called before a stored procedure is executed. 

The JDBC type specified by sqlType for an OUT parameter determines the Java 
type that must be used in the get method to read the value of that parameter. 

This version of registerOutParameter should be used when the parameter is of 
JDBC type NUMERIC or DECIMAL. 

    parameterIndex - the first parameter is 1, the second is 2, and so on 
    sqlType - the SQL type code defined by java.sql.Types. 
    scale - the desired number of digits to the right of the decimal point. It must be 
       greater than or equal to zero. 

*java.sql.CallableStatement.registerOutParameter(int,int,String)*

public void registerOutParameter(
  int paramIndex,
  int sqlType,
  java.lang.String typeName)
  throws |java.sql.SQLException|
         
Registers the designated output parameter. This version of the method 
registerOutParameter should be used for a user-defined or REF output parameter. 
Examples of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and 
named array types. 

Before executing a stored procedure call, you must explicitly call 
registerOutParameter to register the type from java.sql.Types for each OUT 
parameter. For a user-defined parameter, the fully-qualified SQL type name of 
the parameter should also be given, while a REF parameter requires that the 
fully-qualified type name of the referenced type be given. A JDBC driver that 
does not need the type code and type name information may ignore it. To be 
portable, however, applications should always provide these values for 
user-defined and REF parameters. 

Although it is intended for user-defined and REF parameters, this method may be 
used to register a parameter of any JDBC type. If the parameter does not have a 
user-defined or REF type, the typeName parameter is ignored. 

Note: When reading the value of an out parameter, you must use the getter 
method whose Java type corresponds to the parameter's registered SQL type. 

    paramIndex - the first parameter is 1, the second is 2,... 
    sqlType - a value from {@link java.sql.Types} 
    typeName - the fully-qualified name of an SQL structured type 

*java.sql.CallableStatement.registerOutParameter(String,int)*

public void registerOutParameter(
  java.lang.String parameterName,
  int sqlType)
  throws |java.sql.SQLException|
         
Registers the OUT parameter named parameterName to the JDBC type sqlType. All 
OUT parameters must be registered before a stored procedure is executed. 

The JDBC type specified by sqlType for an OUT parameter determines the Java 
type that must be used in the get method to read the value of that parameter. 

If the JDBC type expected to be returned to this output parameter is specific 
to this particular database, sqlType should be java.sql.Types.OTHER. The method 
(|java.sql.CallableStatement|) retrieves the value. 

    parameterName - the name of the parameter 
    sqlType - the JDBC type code defined by java.sql.Types. If the parameter is of JDBC type 
       NUMERIC or DECIMAL, the version of registerOutParameter that accepts a 
       scale value should be used. 

*java.sql.CallableStatement.registerOutParameter(String,int,int)*

public void registerOutParameter(
  java.lang.String parameterName,
  int sqlType,
  int scale)
  throws |java.sql.SQLException|
         
Registers the parameter named parameterName to be of JDBC type sqlType. This 
method must be called before a stored procedure is executed. 

The JDBC type specified by sqlType for an OUT parameter determines the Java 
type that must be used in the get method to read the value of that parameter. 

This version of registerOutParameter should be used when the parameter is of 
JDBC type NUMERIC or DECIMAL. 

    parameterName - the name of the parameter 
    sqlType - SQL type code defined by java.sql.Types. 
    scale - the desired number of digits to the right of the decimal point. It must be 
       greater than or equal to zero. 

*java.sql.CallableStatement.registerOutParameter(String,int,String)*

public void registerOutParameter(
  java.lang.String parameterName,
  int sqlType,
  java.lang.String typeName)
  throws |java.sql.SQLException|
         
Registers the designated output parameter. This version of the method 
registerOutParameter should be used for a user-named or REF output parameter. 
Examples of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and named 
array types. 

Before executing a stored procedure call, you must explicitly call 
registerOutParameter to register the type from java.sql.Types for each OUT 
parameter. For a user-named parameter the fully-qualified SQL type name of the 
parameter should also be given, while a REF parameter requires that the 
fully-qualified type name of the referenced type be given. A JDBC driver that 
does not need the type code and type name information may ignore it. To be 
portable, however, applications should always provide these values for 
user-named and REF parameters. 

Although it is intended for user-named and REF parameters, this method may be 
used to register a parameter of any JDBC type. If the parameter does not have a 
user-named or REF type, the typeName parameter is ignored. 

Note: When reading the value of an out parameter, you must use the getXXX 
method whose Java type XXX corresponds to the parameter's registered SQL type. 

    parameterName - the name of the parameter 
    sqlType - a value from {@link java.sql.Types} 
    typeName - the fully-qualified name of an SQL structured type 

*java.sql.CallableStatement.setAsciiStream(String,InputStream,int)*

public void setAsciiStream(
  java.lang.String parameterName,
  java.io.InputStream x,
  int length)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given input stream, which will have the 
specified number of bytes. When a very large ASCII value is input to a 
LONGVARCHAR parameter, it may be more practical to send it via a 
java.io.InputStream. Data will be read from the stream as needed until 
end-of-file is reached. The JDBC driver will do any necessary conversion from 
ASCII to the database char format. 

Note: This stream object can either be a standard Java stream object or your 
own subclass that implements the standard interface. 

    parameterName - the name of the parameter 
    x - the Java input stream that contains the ASCII parameter value 
    length - the number of bytes in the stream 

*java.sql.CallableStatement.setBigDecimal(String,BigDecimal)*

public void setBigDecimal(
  java.lang.String parameterName,
  java.math.BigDecimal x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given java.math.BigDecimal value. The 
driver converts this to an SQL NUMERIC value when it sends it to the database. 

    parameterName - the name of the parameter 
    x - the parameter value 

*java.sql.CallableStatement.setBinaryStream(String,InputStream,int)*

public void setBinaryStream(
  java.lang.String parameterName,
  java.io.InputStream x,
  int length)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given input stream, which will have the 
specified number of bytes. When a very large binary value is input to a 
LONGVARBINARY parameter, it may be more practical to send it via a 
java.io.InputStream object. The data will be read from the stream as needed 
until end-of-file is reached. 

Note: This stream object can either be a standard Java stream object or your 
own subclass that implements the standard interface. 

    parameterName - the name of the parameter 
    x - the java input stream which contains the binary parameter value 
    length - the number of bytes in the stream 

*java.sql.CallableStatement.setBoolean(String,boolean)*

public void setBoolean(
  java.lang.String parameterName,
  boolean x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java boolean value. The driver 
converts this to an SQL BIT value when it sends it to the database. 

    parameterName - the name of the parameter 
    x - the parameter value 

*java.sql.CallableStatement.setByte(String,byte)*

public void setByte(
  java.lang.String parameterName,
  byte x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java byte value. The driver converts 
this to an SQL TINYINT value when it sends it to the database. 

    parameterName - the name of the parameter 
    x - the parameter value 

*java.sql.CallableStatement.setBytes(String,byte[])*

public void setBytes(
  java.lang.String parameterName,
  byte[] x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java array of bytes. The driver 
converts this to an SQL VARBINARY or LONGVARBINARY (depending on the argument's 
size relative to the driver's limits on VARBINARY values) when it sends it to 
the database. 

    parameterName - the name of the parameter 
    x - the parameter value 

*java.sql.CallableStatement.setCharacterStream(String,Reader,int)*

public void setCharacterStream(
  java.lang.String parameterName,
  java.io.Reader reader,
  int length)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Reader object, which is the given 
number of characters long. When a very large UNICODE value is input to a 
LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader 
object. The data will be read from the stream as needed until end-of-file is 
reached. The JDBC driver will do any necessary conversion from UNICODE to the 
database char format. 

Note: This stream object can either be a standard Java stream object or your 
own subclass that implements the standard interface. 

    parameterName - the name of the parameter 
    reader - the java.io.Reader object that contains the UNICODE data used as the designated 
       parameter 
    length - the number of characters in the stream 

*java.sql.CallableStatement.setDate(String,Date)*

public void setDate(
  java.lang.String parameterName,
  java.sql.Date x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given java.sql.Date value. The driver 
converts this to an SQL DATE value when it sends it to the database. 

    parameterName - the name of the parameter 
    x - the parameter value 

*java.sql.CallableStatement.setDate(String,Date,Calendar)*

public void setDate(
  java.lang.String parameterName,
  java.sql.Date x,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given java.sql.Date value, using the given 
Calendar object. The driver uses the Calendar object to construct an SQL DATE 
value, which the driver then sends to the database. With a a Calendar object, 
the driver can calculate the date taking into account a custom timezone. If no 
Calendar object is specified, the driver uses the default timezone, which is 
that of the virtual machine running the application. 

    parameterName - the name of the parameter 
    x - the parameter value 
    cal - the Calendar object the driver will use to construct the date 

*java.sql.CallableStatement.setDouble(String,double)*

public void setDouble(
  java.lang.String parameterName,
  double x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java double value. The driver 
converts this to an SQL DOUBLE value when it sends it to the database. 

    parameterName - the name of the parameter 
    x - the parameter value 

*java.sql.CallableStatement.setFloat(String,float)*

public void setFloat(
  java.lang.String parameterName,
  float x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java float value. The driver 
converts this to an SQL FLOAT value when it sends it to the database. 

    parameterName - the name of the parameter 
    x - the parameter value 

*java.sql.CallableStatement.setInt(String,int)*

public void setInt(
  java.lang.String parameterName,
  int x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java int value. The driver converts 
this to an SQL INTEGER value when it sends it to the database. 

    parameterName - the name of the parameter 
    x - the parameter value 

*java.sql.CallableStatement.setLong(String,long)*

public void setLong(
  java.lang.String parameterName,
  long x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java long value. The driver converts 
this to an SQL BIGINT value when it sends it to the database. 

    parameterName - the name of the parameter 
    x - the parameter value 

*java.sql.CallableStatement.setNull(String,int)*

public void setNull(
  java.lang.String parameterName,
  int sqlType)
  throws |java.sql.SQLException|
         
Sets the designated parameter to SQL NULL. 

Note: You must specify the parameter's SQL type. 

    parameterName - the name of the parameter 
    sqlType - the SQL type code defined in java.sql.Types 

*java.sql.CallableStatement.setNull(String,int,String)*

public void setNull(
  java.lang.String parameterName,
  int sqlType,
  java.lang.String typeName)
  throws |java.sql.SQLException|
         
Sets the designated parameter to SQL NULL. This version of the method setNull 
should be used for user-defined types and REF type parameters. Examples of 
user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array 
types. 

Note: To be portable, applications must give the SQL type code and the 
fully-qualified SQL type name when specifying a NULL user-defined or REF 
parameter. In the case of a user-defined type the name is the type name of the 
parameter itself. For a REF parameter, the name is the type name of the 
referenced type. If a JDBC driver does not need the type code or type name 
information, it may ignore it. 

Although it is intended for user-defined and Ref parameters, this method may be 
used to set a null parameter of any JDBC type. If the parameter does not have a 
user-defined or REF type, the given typeName is ignored. 

    parameterName - the name of the parameter 
    sqlType - a value from java.sql.Types 
    typeName - the fully-qualified name of an SQL user-defined type; ignored if the parameter 
       is not a user-defined type or SQL REF value 

*java.sql.CallableStatement.setObject(String,Object)*

public void setObject(
  java.lang.String parameterName,
  java.lang.Object x)
  throws |java.sql.SQLException|
         
Sets the value of the designated parameter with the given object. The second 
parameter must be of type Object; therefore, the java.lang equivalent objects 
should be used for built-in types. 

The JDBC specification specifies a standard mapping from Java Object types to 
SQL types. The given argument will be converted to the corresponding SQL type 
before being sent to the database. 

Note that this method may be used to pass datatabase- specific abstract data 
types, by using a driver-specific Java type. 

If the object is of a class implementing the interface SQLData, the JDBC driver 
should call the method SQLData.writeSQL to write it to the SQL data stream. If, 
on the other hand, the object is of a class implementing Ref, Blob, Clob, 
Struct, or Array, the driver should pass it to the database as a value of the 
corresponding SQL type. 

This method throws an exception if there is an ambiguity, for example, if the 
object is of a class implementing more than one of the interfaces named above. 

    parameterName - the name of the parameter 
    x - the object containing the input parameter value 

*java.sql.CallableStatement.setObject(String,Object,int)*

public void setObject(
  java.lang.String parameterName,
  java.lang.Object x,
  int targetSqlType)
  throws |java.sql.SQLException|
         
Sets the value of the designated parameter with the given object. This method 
is like the method setObject above, except that it assumes a scale of zero. 

    parameterName - the name of the parameter 
    x - the object containing the input parameter value 
    targetSqlType - the SQL type (as defined in java.sql.Types) to be sent to the database 

*java.sql.CallableStatement.setObject(String,Object,int,int)*

public void setObject(
  java.lang.String parameterName,
  java.lang.Object x,
  int targetSqlType,
  int scale)
  throws |java.sql.SQLException|
         
Sets the value of the designated parameter with the given object. The second 
argument must be an object type; for integral values, the java.lang equivalent 
objects should be used. 

The given Java object will be converted to the given targetSqlType before being 
sent to the database. 

If the object has a custom mapping (is of a class implementing the interface 
SQLData), the JDBC driver should call the method SQLData.writeSQL to write it 
to the SQL data stream. If, on the other hand, the object is of a class 
implementing Ref, Blob, Clob, Struct, or Array, the driver should pass it to 
the database as a value of the corresponding SQL type. 

Note that this method may be used to pass datatabase- specific abstract data 
types. 

    parameterName - the name of the parameter 
    x - the object containing the input parameter value 
    targetSqlType - the SQL type (as defined in java.sql.Types) to be sent to the database. The 
       scale argument may further qualify this type. 
    scale - for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types, this is the number 
       of digits after the decimal point. For all other types, this value will 
       be ignored. 

*java.sql.CallableStatement.setShort(String,short)*

public void setShort(
  java.lang.String parameterName,
  short x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java short value. The driver 
converts this to an SQL SMALLINT value when it sends it to the database. 

    parameterName - the name of the parameter 
    x - the parameter value 

*java.sql.CallableStatement.setString(String,String)*

public void setString(
  java.lang.String parameterName,
  java.lang.String x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given Java String value. The driver 
converts this to an SQL VARCHAR or LONGVARCHAR value (depending on the 
argument's size relative to the driver's limits on VARCHAR values) when it 
sends it to the database. 

    parameterName - the name of the parameter 
    x - the parameter value 

*java.sql.CallableStatement.setTime(String,Time)*

public void setTime(
  java.lang.String parameterName,
  java.sql.Time x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given java.sql.Time value. The driver 
converts this to an SQL TIME value when it sends it to the database. 

    parameterName - the name of the parameter 
    x - the parameter value 

*java.sql.CallableStatement.setTime(String,Time,Calendar)*

public void setTime(
  java.lang.String parameterName,
  java.sql.Time x,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given java.sql.Time value, using the given 
Calendar object. The driver uses the Calendar object to construct an SQL TIME 
value, which the driver then sends to the database. With a a Calendar object, 
the driver can calculate the time taking into account a custom timezone. If no 
Calendar object is specified, the driver uses the default timezone, which is 
that of the virtual machine running the application. 

    parameterName - the name of the parameter 
    x - the parameter value 
    cal - the Calendar object the driver will use to construct the time 

*java.sql.CallableStatement.setTimestamp(String,Timestamp)*

public void setTimestamp(
  java.lang.String parameterName,
  java.sql.Timestamp x)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given java.sql.Timestamp value. The driver 
converts this to an SQL TIMESTAMP value when it sends it to the database. 

    parameterName - the name of the parameter 
    x - the parameter value 

*java.sql.CallableStatement.setTimestamp(String,Timestamp,Calendar)*

public void setTimestamp(
  java.lang.String parameterName,
  java.sql.Timestamp x,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given java.sql.Timestamp value, using the 
given Calendar object. The driver uses the Calendar object to construct an SQL 
TIMESTAMP value, which the driver then sends to the database. With a a Calendar 
object, the driver can calculate the timestamp taking into account a custom 
timezone. If no Calendar object is specified, the driver uses the default 
timezone, which is that of the virtual machine running the application. 

    parameterName - the name of the parameter 
    x - the parameter value 
    cal - the Calendar object the driver will use to construct the timestamp 

*java.sql.CallableStatement.setURL(String,URL)*

public void setURL(
  java.lang.String parameterName,
  java.net.URL val)
  throws |java.sql.SQLException|
         
Sets the designated parameter to the given java.net.URL object. The driver 
converts this to an SQL DATALINK value when it sends it to the database. 

    parameterName - the name of the parameter 
    val - the parameter value 

*java.sql.CallableStatement.wasNull()*

public boolean wasNull()
  throws |java.sql.SQLException|
         
Retrieves whether the last OUT parameter read had the value of SQL NULL. Note 
that this method should be called only after calling a getter method; 
otherwise, there is no value to use in determining whether it is null or not. 


    Returns: true if the last parameter read was SQL NULL; false otherwise 


*java.util.EventListenerProxy* *EventListenerProxy* An abstract wrapper class fo

public abstract class EventListenerProxy
  extends    |java.lang.Object|
  implements |java.util.EventListener|

|java.util.EventListenerProxy_Description|
|java.util.EventListenerProxy_Fields|
|java.util.EventListenerProxy_Constructors|
|java.util.EventListenerProxy_Methods|

================================================================================

*java.util.EventListenerProxy_Constructors*
|java.util.EventListenerProxy(EventListener)|

*java.util.EventListenerProxy_Methods*
|java.util.EventListenerProxy.getListener()|

*java.util.EventListenerProxy_Description*

An abstract wrapper class for an EventListener class which associates a set of 
additional parameters with the listener. Subclasses must provide the storage 
and accessor methods for the additional arguments or parameters. 

Subclasses of EventListenerProxy may be returned by getListeners() methods as a 
way of associating named properties with their listeners. 

For example, a Bean which supports named properties would have a two argument 
method signature for adding a PropertyChangeListener for a property: 

public void addPropertyChangeListener(String propertyName, 
PropertyChangeListener listener); 

If the Bean also implemented the zero argument get listener method: 

public PropertyChangeListener[] getPropertyChangeListeners(); 

then the array may contain inner PropertyChangeListeners which are also 
PropertyChangeListenerProxy objects. 

If the calling method is interested in retrieving the named property then it 
would have to test the element to see if it is a proxy class. 


*java.util.EventListenerProxy(EventListener)*

public EventListenerProxy(java.util.EventListener listener)



    listener - The listener object. 

*java.util.EventListenerProxy.getListener()*

public |java.util.EventListener| getListener()




    Returns: The listener associated with this proxy. 


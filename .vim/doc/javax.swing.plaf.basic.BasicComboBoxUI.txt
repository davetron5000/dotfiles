*javax.swing.plaf.basic.BasicComboBoxUI* *BasicComboBoxUI* Basic UI implementation for JComboBox.

public class BasicComboBoxUI
  extends    |javax.swing.plaf.ComboBoxUI|

|javax.swing.plaf.basic.BasicComboBoxUI_Description|
|javax.swing.plaf.basic.BasicComboBoxUI_Fields|
|javax.swing.plaf.basic.BasicComboBoxUI_Constructors|
|javax.swing.plaf.basic.BasicComboBoxUI_Methods|

====================================================================================================================================================================================

*javax.swing.plaf.basic.BasicComboBoxUI_Fields*
|javax.swing.JButton_javax.swing.plaf.basic.BasicComboBoxUI.arrowButton|
|java.awt.Dimension_javax.swing.plaf.basic.BasicComboBoxUI.cachedMinimumSize|
|javax.swing.JComboBox_javax.swing.plaf.basic.BasicComboBoxUI.comboBox|
|javax.swing.CellRendererPane_javax.swing.plaf.basic.BasicComboBoxUI.currentValuePane|
|java.awt.Component_javax.swing.plaf.basic.BasicComboBoxUI.editor|
|java.awt.event.FocusListener_javax.swing.plaf.basic.BasicComboBoxUI.focusListener|
|boolean_javax.swing.plaf.basic.BasicComboBoxUI.hasFocus|
|boolean_javax.swing.plaf.basic.BasicComboBoxUI.isMinimumSizeDirty|
|java.awt.event.ItemListener_javax.swing.plaf.basic.BasicComboBoxUI.itemListener|
|java.awt.event.KeyListener_javax.swing.plaf.basic.BasicComboBoxUI.keyListener|
|javax.swing.JList_javax.swing.plaf.basic.BasicComboBoxUI.listBox|
|javax.swing.event.ListDataListener_javax.swing.plaf.basic.BasicComboBoxUI.listDataListener|
|javax.swing.plaf.basic.ComboPopup_javax.swing.plaf.basic.BasicComboBoxUI.popup|
|java.awt.event.KeyListener_javax.swing.plaf.basic.BasicComboBoxUI.popupKeyListener|
|java.awt.event.MouseListener_javax.swing.plaf.basic.BasicComboBoxUI.popupMouseListener|
|java.awt.event.MouseMotionListener_javax.swing.plaf.basic.BasicComboBoxUI.popupMouseMotionListener|
|java.beans.PropertyChangeListener_javax.swing.plaf.basic.BasicComboBoxUI.propertyChangeListener|

*javax.swing.plaf.basic.BasicComboBoxUI_Constructors*
|javax.swing.plaf.basic.BasicComboBoxUI()|

*javax.swing.plaf.basic.BasicComboBoxUI_Methods*
|javax.swing.plaf.basic.BasicComboBoxUI.addEditor()|This public method is implementation specific and should be private.
|javax.swing.plaf.basic.BasicComboBoxUI.configureArrowButton()|This public method is implementation specific and should be private.
|javax.swing.plaf.basic.BasicComboBoxUI.configureEditor()|This protected method is implementation specific and should be private.
|javax.swing.plaf.basic.BasicComboBoxUI.createArrowButton()|Creates an button which will be used as the control to show or hide  the popup portion of the combo box.
|javax.swing.plaf.basic.BasicComboBoxUI.createEditor()|Creates the default editor that will be used in editable combo boxes.
|javax.swing.plaf.basic.BasicComboBoxUI.createFocusListener()|Creates a FocusListener which will be added to the combo box.
|javax.swing.plaf.basic.BasicComboBoxUI.createItemListener()|Creates an ItemListener which will be added to the   combo box.
|javax.swing.plaf.basic.BasicComboBoxUI.createKeyListener()|Creates a KeyListener which will be added to the  combo box.
|javax.swing.plaf.basic.BasicComboBoxUI.createLayoutManager()|Creates a layout manager for managing the components which make up the   combo box.
|javax.swing.plaf.basic.BasicComboBoxUI.createListDataListener()|Creates a list data listener which will be added to the  ComboBoxModel.
|javax.swing.plaf.basic.BasicComboBoxUI.createPopup()|Creates the popup portion of the combo box.
|javax.swing.plaf.basic.BasicComboBoxUI.createPropertyChangeListener()|Creates a PropertyChangeListener which will be added to  the combo box.
|javax.swing.plaf.basic.BasicComboBoxUI.createRenderer()|Creates the default renderer that will be used in a non-editiable combo   box.
|javax.swing.plaf.basic.BasicComboBoxUI.createUI(JComponent)|
|javax.swing.plaf.basic.BasicComboBoxUI.getAccessibleChild(JComponent,int)|
|javax.swing.plaf.basic.BasicComboBoxUI.getAccessibleChildrenCount(JComponent)|
|javax.swing.plaf.basic.BasicComboBoxUI.getDefaultSize()|Return the default size of an empty display area of the combo box using  the current renderer and font.
|javax.swing.plaf.basic.BasicComboBoxUI.getDisplaySize()|Returns the calculated size of the display area.
|javax.swing.plaf.basic.BasicComboBoxUI.getInsets()|Gets the insets from the JComboBox.
|javax.swing.plaf.basic.BasicComboBoxUI.getMaximumSize(JComponent)|
|javax.swing.plaf.basic.BasicComboBoxUI.getMinimumSize(JComponent)|The minumum size is the size of the display area plus insets plus the button.
|javax.swing.plaf.basic.BasicComboBoxUI.getPreferredSize(JComponent)|
|javax.swing.plaf.basic.BasicComboBoxUI.installComponents()|Creates and initializes the components which make up the  aggregate combo box.
|javax.swing.plaf.basic.BasicComboBoxUI.installDefaults()|Installs the default colors, default font, default renderer, and default  editor into the JComboBox.
|javax.swing.plaf.basic.BasicComboBoxUI.installKeyboardActions()|Adds keyboard actions to the JComboBox.
|javax.swing.plaf.basic.BasicComboBoxUI.installListeners()|Create and install the listeners for the combo box and its model.
|javax.swing.plaf.basic.BasicComboBoxUI.installUI(JComponent)|
|javax.swing.plaf.basic.BasicComboBoxUI.isFocusTraversable(JComboBox)|Determines if the JComboBox is focus traversable.
|javax.swing.plaf.basic.BasicComboBoxUI.isNavigationKey(int)|Returns whether or not the supplied keyCode maps to a key that is used for  navigation.
|javax.swing.plaf.basic.BasicComboBoxUI.isPopupVisible(JComboBox)|Tells if the popup is visible or not.
|javax.swing.plaf.basic.BasicComboBoxUI.paint(Graphics,JComponent)|
|javax.swing.plaf.basic.BasicComboBoxUI.paintCurrentValue(Graphics,Rectangle,boolean)|Paints the currently selected item.
|javax.swing.plaf.basic.BasicComboBoxUI.paintCurrentValueBackground(Graphics,Rectangle,boolean)|Paints the background of the currently selected item.
|javax.swing.plaf.basic.BasicComboBoxUI.rectangleForCurrentValue()|Returns the area that is reserved for drawing the currently selected item.
|javax.swing.plaf.basic.BasicComboBoxUI.removeEditor()|This public method is implementation specific and should be private.
|javax.swing.plaf.basic.BasicComboBoxUI.selectNextPossibleValue()|Selects the next item in the list.
|javax.swing.plaf.basic.BasicComboBoxUI.selectPreviousPossibleValue()|Selects the previous item in the list.
|javax.swing.plaf.basic.BasicComboBoxUI.setPopupVisible(JComboBox,boolean)|Hides the popup.
|javax.swing.plaf.basic.BasicComboBoxUI.toggleOpenClose()|Hides the popup if it is showing and shows the popup if it is hidden.
|javax.swing.plaf.basic.BasicComboBoxUI.unconfigureArrowButton()|This public method is implementation specific and should be private.
|javax.swing.plaf.basic.BasicComboBoxUI.unconfigureEditor()|This protected method is implementation specific and should be private.
|javax.swing.plaf.basic.BasicComboBoxUI.uninstallComponents()|The aggregate components which compise the combo box are   unregistered and uninitialized.
|javax.swing.plaf.basic.BasicComboBoxUI.uninstallDefaults()|Uninstalls the default colors, default font, default renderer, and default  editor into the JComboBox.
|javax.swing.plaf.basic.BasicComboBoxUI.uninstallKeyboardActions()|Removes the focus InputMap and ActionMap.
|javax.swing.plaf.basic.BasicComboBoxUI.uninstallListeners()|Remove the installed listeners from the combo box and its model.
|javax.swing.plaf.basic.BasicComboBoxUI.uninstallUI(JComponent)|

*javax.swing.plaf.basic.BasicComboBoxUI_Description*

Basic UI implementation for JComboBox. 

The combo box is a compound component which means that it is an agregate of many simpler components. This class creates and manages the listeners on the combo box and the combo 
box model. These listeners update the user interface in response to changes in the properties and state of the combo box. 

All event handling is handled by listener classes created with the createxxxListener() methods and internal classes. You can change the behavior of this class by overriding the 
createxxxListener() methods and supplying your own event listeners or subclassing from the ones supplied in this class. 

For adding specific actions, overide installKeyboardActions to add actions in response to KeyStroke bindings. See the article Keyboard Bindings in Swing at The Swing Connection. 



*javax.swing.JButton_javax.swing.plaf.basic.BasicComboBoxUI.arrowButton*




*java.awt.Dimension_javax.swing.plaf.basic.BasicComboBoxUI.cachedMinimumSize*




*javax.swing.JComboBox_javax.swing.plaf.basic.BasicComboBoxUI.comboBox*




*javax.swing.CellRendererPane_javax.swing.plaf.basic.BasicComboBoxUI.currentValuePane*




*java.awt.Component_javax.swing.plaf.basic.BasicComboBoxUI.editor*




*java.awt.event.FocusListener_javax.swing.plaf.basic.BasicComboBoxUI.focusListener*

This protected field is implementation specific. Do not access directly or override. Override the listener construction method instead. 


*boolean_javax.swing.plaf.basic.BasicComboBoxUI.hasFocus*

This protected field is implementation specific. Do not access directly or override. 


*boolean_javax.swing.plaf.basic.BasicComboBoxUI.isMinimumSizeDirty*




*java.awt.event.ItemListener_javax.swing.plaf.basic.BasicComboBoxUI.itemListener*

This protected field is implementation specific. Do not access directly or override. Override the listener construction method instead. 


*java.awt.event.KeyListener_javax.swing.plaf.basic.BasicComboBoxUI.keyListener*

This protected field is implementation specific. Do not access directly or override. Override the listener construction method instead. 


*javax.swing.JList_javax.swing.plaf.basic.BasicComboBoxUI.listBox*




*javax.swing.event.ListDataListener_javax.swing.plaf.basic.BasicComboBoxUI.listDataListener*

This protected field is implementation specific. Do not access directly or override. Override the listener construction method instead. 


*javax.swing.plaf.basic.ComboPopup_javax.swing.plaf.basic.BasicComboBoxUI.popup*




*java.awt.event.KeyListener_javax.swing.plaf.basic.BasicComboBoxUI.popupKeyListener*




*java.awt.event.MouseListener_javax.swing.plaf.basic.BasicComboBoxUI.popupMouseListener*




*java.awt.event.MouseMotionListener_javax.swing.plaf.basic.BasicComboBoxUI.popupMouseMotionListener*




*java.beans.PropertyChangeListener_javax.swing.plaf.basic.BasicComboBoxUI.propertyChangeListener*

This protected field is implementation specific. Do not access directly or override. Override the listener construction method instead. 



*javax.swing.plaf.basic.BasicComboBoxUI()*

public BasicComboBoxUI()




*javax.swing.plaf.basic.BasicComboBoxUI.addEditor()*

public void addEditor()

This public method is implementation specific and should be private. do not call or override. To implement a specific editor create a custom ComboBoxEditor 



*javax.swing.plaf.basic.BasicComboBoxUI.configureArrowButton()*

public void configureArrowButton()

This public method is implementation specific and should be private. Do not call or override. 



*javax.swing.plaf.basic.BasicComboBoxUI.configureEditor()*

protected void configureEditor()

This protected method is implementation specific and should be private. do not call or override. 



*javax.swing.plaf.basic.BasicComboBoxUI.createArrowButton()*

protected |javax.swing.JButton| createArrowButton()

Creates an button which will be used as the control to show or hide the popup portion of the combo box. 



    Returns: a button which represents the popup control 

*javax.swing.plaf.basic.BasicComboBoxUI.createEditor()*

protected |javax.swing.ComboBoxEditor| createEditor()

Creates the default editor that will be used in editable combo boxes. A default editor will be used only if an editor has not been explicitly set with setEditor. 



    Returns: a ComboBoxEditor used for the combo box 

*javax.swing.plaf.basic.BasicComboBoxUI.createFocusListener()*

protected |java.awt.event.FocusListener| createFocusListener()

Creates a FocusListener which will be added to the combo box. If this method returns null then it will not be added to the combo box. 



    Returns: an instance of a FocusListener or null 

*javax.swing.plaf.basic.BasicComboBoxUI.createItemListener()*

protected |java.awt.event.ItemListener| createItemListener()

Creates an ItemListener which will be added to the combo box. If this method returns null then it will not be added to the combo box. 

Subclasses may override this method to return instances of their own ItemEvent handlers. 



    Returns: an instance of an ItemListener or null 

*javax.swing.plaf.basic.BasicComboBoxUI.createKeyListener()*

protected |java.awt.event.KeyListener| createKeyListener()

Creates a KeyListener which will be added to the combo box. If this method returns null then it will not be added to the combo box. 



    Returns: an instance KeyListener or null 

*javax.swing.plaf.basic.BasicComboBoxUI.createLayoutManager()*

protected |java.awt.LayoutManager| createLayoutManager()

Creates a layout manager for managing the components which make up the combo box. 



    Returns: an instance of a layout manager 

*javax.swing.plaf.basic.BasicComboBoxUI.createListDataListener()*

protected |javax.swing.event.ListDataListener| createListDataListener()

Creates a list data listener which will be added to the ComboBoxModel. If this method returns null then it will not be added to the combo box model. 



    Returns: an instance of a ListDataListener or null 

*javax.swing.plaf.basic.BasicComboBoxUI.createPopup()*

protected |javax.swing.plaf.basic.ComboPopup| createPopup()

Creates the popup portion of the combo box. 



    Returns: an instance of ComboPopup 

*javax.swing.plaf.basic.BasicComboBoxUI.createPropertyChangeListener()*

protected |java.beans.PropertyChangeListener| createPropertyChangeListener()

Creates a PropertyChangeListener which will be added to the combo box. If this method returns null then it will not be added to the combo box. 



    Returns: an instance of a PropertyChangeListener or null 

*javax.swing.plaf.basic.BasicComboBoxUI.createRenderer()*

protected |javax.swing.ListCellRenderer| createRenderer()

Creates the default renderer that will be used in a non-editiable combo box. A default renderer will used only if a renderer has not been explicitly set with setRenderer. 



    Returns: a ListCellRender used for the combo box 

*javax.swing.plaf.basic.BasicComboBoxUI.createUI(JComponent)*

public static |javax.swing.plaf.ComponentUI| createUI(javax.swing.JComponent c)





*javax.swing.plaf.basic.BasicComboBoxUI.getAccessibleChild(JComponent,int)*

public |javax.accessibility.Accessible| getAccessibleChild(
  javax.swing.JComponent c,
  int i)





*javax.swing.plaf.basic.BasicComboBoxUI.getAccessibleChildrenCount(JComponent)*

public int getAccessibleChildrenCount(javax.swing.JComponent c)





*javax.swing.plaf.basic.BasicComboBoxUI.getDefaultSize()*

protected |java.awt.Dimension| getDefaultSize()

Return the default size of an empty display area of the combo box using the current renderer and font. 



    Returns: the size of an empty display area 

*javax.swing.plaf.basic.BasicComboBoxUI.getDisplaySize()*

protected |java.awt.Dimension| getDisplaySize()

Returns the calculated size of the display area. The display area is the portion of the combo box in which the selected item is displayed. This method will use the prototype 
display value if it has been set. 

For combo boxes with a non trivial number of items, it is recommended to use a prototype display value to significantly speed up the display size calculation. 



    Returns: the size of the display area calculated from the combo box items 

*javax.swing.plaf.basic.BasicComboBoxUI.getInsets()*

protected |java.awt.Insets| getInsets()

Gets the insets from the JComboBox. 



*javax.swing.plaf.basic.BasicComboBoxUI.getMaximumSize(JComponent)*

public |java.awt.Dimension| getMaximumSize(javax.swing.JComponent c)





*javax.swing.plaf.basic.BasicComboBoxUI.getMinimumSize(JComponent)*

public |java.awt.Dimension| getMinimumSize(javax.swing.JComponent c)

The minumum size is the size of the display area plus insets plus the button. 



*javax.swing.plaf.basic.BasicComboBoxUI.getPreferredSize(JComponent)*

public |java.awt.Dimension| getPreferredSize(javax.swing.JComponent c)





*javax.swing.plaf.basic.BasicComboBoxUI.installComponents()*

protected void installComponents()

Creates and initializes the components which make up the aggregate combo box. This method is called as part of the UI installation process. 



*javax.swing.plaf.basic.BasicComboBoxUI.installDefaults()*

protected void installDefaults()

Installs the default colors, default font, default renderer, and default editor into the JComboBox. 



*javax.swing.plaf.basic.BasicComboBoxUI.installKeyboardActions()*

protected void installKeyboardActions()

Adds keyboard actions to the JComboBox. Actions on enter and esc are already supplied. Add more actions as you need them. 



*javax.swing.plaf.basic.BasicComboBoxUI.installListeners()*

protected void installListeners()

Create and install the listeners for the combo box and its model. This method is called when the UI is installed. 



*javax.swing.plaf.basic.BasicComboBoxUI.installUI(JComponent)*

public void installUI(javax.swing.JComponent c)





*javax.swing.plaf.basic.BasicComboBoxUI.isFocusTraversable(JComboBox)*

public boolean isFocusTraversable(javax.swing.JComboBox c)

Determines if the JComboBox is focus traversable. If the JComboBox is editable this returns false, otherwise it returns true. 



*javax.swing.plaf.basic.BasicComboBoxUI.isNavigationKey(int)*

protected boolean isNavigationKey(int keyCode)

Returns whether or not the supplied keyCode maps to a key that is used for navigation. This is used for optimizing key input by only passing non- navigation keys to the type-ahead 
mechanism. Subclasses should override this if they change the navigation keys. 



*javax.swing.plaf.basic.BasicComboBoxUI.isPopupVisible(JComboBox)*

public boolean isPopupVisible(javax.swing.JComboBox c)

Tells if the popup is visible or not. 



*javax.swing.plaf.basic.BasicComboBoxUI.paint(Graphics,JComponent)*

public void paint(
  java.awt.Graphics g,
  javax.swing.JComponent c)





*javax.swing.plaf.basic.BasicComboBoxUI.paintCurrentValue(Graphics,Rectangle,boolean)*

public void paintCurrentValue(
  java.awt.Graphics g,
  java.awt.Rectangle bounds,
  boolean hasFocus)

Paints the currently selected item. 



*javax.swing.plaf.basic.BasicComboBoxUI.paintCurrentValueBackground(Graphics,Rectangle,boolean)*

public void paintCurrentValueBackground(
  java.awt.Graphics g,
  java.awt.Rectangle bounds,
  boolean hasFocus)

Paints the background of the currently selected item. 



*javax.swing.plaf.basic.BasicComboBoxUI.rectangleForCurrentValue()*

protected |java.awt.Rectangle| rectangleForCurrentValue()

Returns the area that is reserved for drawing the currently selected item. 



*javax.swing.plaf.basic.BasicComboBoxUI.removeEditor()*

public void removeEditor()

This public method is implementation specific and should be private. do not call or override. 



*javax.swing.plaf.basic.BasicComboBoxUI.selectNextPossibleValue()*

protected void selectNextPossibleValue()

Selects the next item in the list. It won't change the selection if the currently selected item is already the last item. 



*javax.swing.plaf.basic.BasicComboBoxUI.selectPreviousPossibleValue()*

protected void selectPreviousPossibleValue()

Selects the previous item in the list. It won't change the selection if the currently selected item is already the first item. 



*javax.swing.plaf.basic.BasicComboBoxUI.setPopupVisible(JComboBox,boolean)*

public void setPopupVisible(
  javax.swing.JComboBox c,
  boolean v)

Hides the popup. 



*javax.swing.plaf.basic.BasicComboBoxUI.toggleOpenClose()*

protected void toggleOpenClose()

Hides the popup if it is showing and shows the popup if it is hidden. 



*javax.swing.plaf.basic.BasicComboBoxUI.unconfigureArrowButton()*

public void unconfigureArrowButton()

This public method is implementation specific and should be private. Do not call or override. 



*javax.swing.plaf.basic.BasicComboBoxUI.unconfigureEditor()*

protected void unconfigureEditor()

This protected method is implementation specific and should be private. Do not call or override. 



*javax.swing.plaf.basic.BasicComboBoxUI.uninstallComponents()*

protected void uninstallComponents()

The aggregate components which compise the combo box are unregistered and uninitialized. This method is called as part of the UI uninstallation process. 



*javax.swing.plaf.basic.BasicComboBoxUI.uninstallDefaults()*

protected void uninstallDefaults()

Uninstalls the default colors, default font, default renderer, and default editor into the JComboBox. 



*javax.swing.plaf.basic.BasicComboBoxUI.uninstallKeyboardActions()*

protected void uninstallKeyboardActions()

Removes the focus InputMap and ActionMap. 



*javax.swing.plaf.basic.BasicComboBoxUI.uninstallListeners()*

protected void uninstallListeners()

Remove the installed listeners from the combo box and its model. The number and types of listeners removed and in this method should be the same that was added in installListeners 



*javax.swing.plaf.basic.BasicComboBoxUI.uninstallUI(JComponent)*

public void uninstallUI(javax.swing.JComponent c)







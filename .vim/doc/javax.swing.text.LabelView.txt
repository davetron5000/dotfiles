*javax.swing.text.LabelView* *LabelView* A LabelView is a styled chunk of text
 

public class LabelView
  extends    |javax.swing.text.GlyphView|
  implements |javax.swing.text.TabableView|

|javax.swing.text.LabelView_Description|
|javax.swing.text.LabelView_Fields|
|javax.swing.text.LabelView_Constructors|
|javax.swing.text.LabelView_Methods|

================================================================================

*javax.swing.text.LabelView_Constructors*
|javax.swing.text.LabelView(Element)|Constructs a new view wrapped on an elemen

*javax.swing.text.LabelView_Methods*
|javax.swing.text.LabelView.changedUpdate(DocumentEvent,Shape,ViewFactory)|Give
|javax.swing.text.LabelView.getBackground()|Fetches the background color to use
|javax.swing.text.LabelView.getFont()|Fetches the font that the glyphs should b
|javax.swing.text.LabelView.getFontMetrics()|Fetches the FontMetrics used for t
|javax.swing.text.LabelView.getForeground()|Fetches the foreground color to use
|javax.swing.text.LabelView.isStrikeThrough()|Determines if the glyphs should h
|javax.swing.text.LabelView.isSubscript()|Determines if the glyphs should be re
|javax.swing.text.LabelView.isSuperscript()|Determines if the glyphs should be 
|javax.swing.text.LabelView.isUnderline()|Determines if the glyphs should be un
|javax.swing.text.LabelView.setBackground(Color)|Sets the background color for 
|javax.swing.text.LabelView.setPropertiesFromAttributes()|Sets the cached prope
|javax.swing.text.LabelView.setStrikeThrough(boolean)|Sets whether or not the v
|javax.swing.text.LabelView.setSubscript(boolean)|Sets whether or not the view 
|javax.swing.text.LabelView.setSuperscript(boolean)|Sets whether or not the vie
|javax.swing.text.LabelView.setUnderline(boolean)|Sets whether or not the view 

*javax.swing.text.LabelView_Description*

A LabelView is a styled chunk of text that represents a view mapped over an 
element in the text model. It caches the character level attributes used for 
rendering. 


*javax.swing.text.LabelView(Element)*

public LabelView(javax.swing.text.Element elem)

Constructs a new view wrapped on an element. 

    elem - the element 

*javax.swing.text.LabelView.changedUpdate(DocumentEvent,Shape,ViewFactory)*

public void changedUpdate(
  javax.swing.event.DocumentEvent e,
  java.awt.Shape a,
  javax.swing.text.ViewFactory f)

Gives notification from the document that attributes were changed in a location 
that this view is responsible for. 

    e - the change information from the associated document 
    a - the current allocation of the view 
    f - the factory to use to rebuild if the view has children 

*javax.swing.text.LabelView.getBackground()*

public |java.awt.Color| getBackground()

Fetches the background color to use to render the glyphs. This is implemented 
to return a cached background color, which defaults to null. 


    Returns: the cached background color 
*javax.swing.text.LabelView.getFont()*

public |java.awt.Font| getFont()

Fetches the font that the glyphs should be based upon. This is implemented to 
return a cached font. 


    Returns: the cached font 
*javax.swing.text.LabelView.getFontMetrics()*

protected |java.awt.FontMetrics| getFontMetrics()

Fetches the FontMetrics used for this view. 


*javax.swing.text.LabelView.getForeground()*

public |java.awt.Color| getForeground()

Fetches the foreground color to use to render the glyphs. This is implemented 
to return a cached foreground color, which defaults to null. 


    Returns: the cached foreground color 
*javax.swing.text.LabelView.isStrikeThrough()*

public boolean isStrikeThrough()

Determines if the glyphs should have a strikethrough line. If true, a line 
should be drawn through the center of the glyphs. This is implemented to return 
the cached strikeThrough property. 

When you request this property, LabelView re-syncs its state with the 
properties of the Element's AttributeSet. If Element's AttributeSet does not 
have this property set, it will revert to false. 


    Returns: the value of the cached strikeThrough property 
*javax.swing.text.LabelView.isSubscript()*

public boolean isSubscript()

Determines if the glyphs should be rendered as superscript. 


    Returns: the value of the cached subscript property 

When you request this property, LabelView re-syncs its state with the 
             properties of the Element's AttributeSet. If Element's 
             AttributeSet does not have this property set, it will revert to 
             false. 
    Returns: the value of the cached subscript property 
*javax.swing.text.LabelView.isSuperscript()*

public boolean isSuperscript()

Determines if the glyphs should be rendered as subscript. 

When you request this property, LabelView re-syncs its state with the 
properties of the Element's AttributeSet. If Element's AttributeSet does not 
have this property set, it will revert to false. 


    Returns: the value of the cached superscript property 
*javax.swing.text.LabelView.isUnderline()*

public boolean isUnderline()

Determines if the glyphs should be underlined. If true, an underline should be 
drawn through the baseline. This is implemented to return the cached underline 
property. 

When you request this property, LabelView re-syncs its state with the 
properties of the Element's AttributeSet. If Element's AttributeSet does not 
have this property set, it will revert to false. 


    Returns: the value of the cached underline property 
*javax.swing.text.LabelView.setBackground(Color)*

protected void setBackground(java.awt.Color bg)

Sets the background color for the view. This method is typically invoked as 
part of configuring this View. If you need to customize the background color 
you should override setPropertiesFromAttributes and invoke this method. A value 
of null indicates no background should be rendered, so that the background of 
the parent View will show through. 

    bg - background color, or null 

*javax.swing.text.LabelView.setPropertiesFromAttributes()*

protected void setPropertiesFromAttributes()

Sets the cached properties from the attributes. 


*javax.swing.text.LabelView.setStrikeThrough(boolean)*

protected void setStrikeThrough(boolean s)

Sets whether or not the view has a strike/line through it. Note that this 
setter is protected and is really only meant if you need to update some 
additional state when set. 

    s - true if the view has a strike/line through it, otherwise false 

*javax.swing.text.LabelView.setSubscript(boolean)*

protected void setSubscript(boolean s)

Sets whether or not the view represents a subscript. Note that this setter is 
protected and is really only meant if you need to update some additional state 
when set. 

    s - true if the view represents a subscript, otherwise false 

*javax.swing.text.LabelView.setSuperscript(boolean)*

protected void setSuperscript(boolean s)

Sets whether or not the view represents a superscript. Note that this setter is 
protected and is really only meant if you need to update some additional state 
when set. 

    s - true if the view represents a superscript, otherwise false 

*javax.swing.text.LabelView.setUnderline(boolean)*

protected void setUnderline(boolean u)

Sets whether or not the view is underlined. Note that this setter is protected 
and is really only meant if you need to update some additional state when set. 

    u - true if the view is underlined, otherwise false 



*java.sql.Clob* *Clob* The mapping in the JavaTM programming language 
 for the 

public interface interface Clob


|java.sql.Clob_Description|
|java.sql.Clob_Fields|
|java.sql.Clob_Constructors|
|java.sql.Clob_Methods|

================================================================================

*java.sql.Clob_Methods*
|java.sql.Clob.getAsciiStream()|Retrieves the CLOB value designated by this Clo
|java.sql.Clob.getCharacterStream()|Retrieves the CLOB value designated by this
|java.sql.Clob.getSubString(long,int)|Retrieves a copy of the specified substri
|java.sql.Clob.length()|Retrieves the number of characters   in the CLOB value 
|java.sql.Clob.position(Clob,long)|Retrieves the character position at which th
|java.sql.Clob.position(String,long)|Retrieves the character position at which 
|java.sql.Clob.setAsciiStream(long)|Retrieves a stream to be used to write Asci
|java.sql.Clob.setCharacterStream(long)|Retrieves a stream to be used to write 
|java.sql.Clob.setString(long,String)|Writes the given Java String to the CLOB 
|java.sql.Clob.setString(long,String,int,int)|Writes len characters of str, sta
|java.sql.Clob.truncate(long)|Truncates the CLOB value that this Clob   designa

*java.sql.Clob_Description*

The mapping in the JavaTM programming language for the SQL CLOB type. An SQL 
CLOB is a built-in type that stores a Character Large Object as a column value 
in a row of a database table. By default drivers implement a Clob object using 
an SQL locator(CLOB), which means that a Clob object contains a logical pointer 
to the SQL CLOB data rather than the data itself. A Clob object is valid for 
the duration of the transaction in which it was created. The Clob interface 
provides methods for getting the length of an SQL CLOB (Character Large Object) 
value, for materializing a CLOB value on the client, and for searching for a 
substring or CLOB object within a CLOB value. Methods in the interfaces 
(|java.sql.ResultSet|) , (|java.sql.CallableStatement|) , and 
(|java.sql.PreparedStatement|) , such as getClob and setClob allow a programmer 
to access an SQL CLOB value. In addition, this interface has methods for 
updating a CLOB value. 


*java.sql.Clob.getAsciiStream()*

public |java.io.InputStream| getAsciiStream()
  throws |java.sql.SQLException|
         
Retrieves the CLOB value designated by this Clob object as an ascii stream. 


    Returns: a java.io.InputStream object containing the CLOB data 
*java.sql.Clob.getCharacterStream()*

public |java.io.Reader| getCharacterStream()
  throws |java.sql.SQLException|
         
Retrieves the CLOB value designated by this Clob object as a java.io.Reader 
object (or as a stream of characters). 


    Returns: a java.io.Reader object containing the CLOB data 
*java.sql.Clob.getSubString(long,int)*

public |java.lang.String| getSubString(
  long pos,
  int length)
  throws |java.sql.SQLException|
         
Retrieves a copy of the specified substring in the CLOB value designated by 
this Clob object. The substring begins at position pos and has up to length 
consecutive characters. 

    pos - the first character of the substring to be extracted. The first character is at 
       position 1. 
    length - the number of consecutive characters to be copied 

    Returns: a String that is the specified substring in the CLOB value designated by this 
             Clob object 
*java.sql.Clob.length()*

public long length()
  throws |java.sql.SQLException|
         
Retrieves the number of characters in the CLOB value designated by this Clob 
object. 


    Returns: length of the CLOB in characters 
*java.sql.Clob.position(Clob,long)*

public long position(
  java.sql.Clob searchstr,
  long start)
  throws |java.sql.SQLException|
         
Retrieves the character position at which the specified Clob object searchstr 
appears in this Clob object. The search begins at position start. 

    searchstr - the Clob object for which to search 
    start - the position at which to begin searching; the first position is 1 

    Returns: the position at which the Clob object appears or -1 if it is not present; the 
             first position is 1 
*java.sql.Clob.position(String,long)*

public long position(
  java.lang.String searchstr,
  long start)
  throws |java.sql.SQLException|
         
Retrieves the character position at which the specified substring searchstr 
appears in the SQL CLOB value represented by this Clob object. The search 
begins at position start. 

    searchstr - the substring for which to search 
    start - the position at which to begin searching; the first position is 1 

    Returns: the position at which the substring appears or -1 if it is not present; the 
             first position is 1 
*java.sql.Clob.setAsciiStream(long)*

public |java.io.OutputStream| setAsciiStream(long pos)
  throws |java.sql.SQLException|
         
Retrieves a stream to be used to write Ascii characters to the CLOB value that 
this Clob object represents, starting at position pos. 

    pos - the position at which to start writing to this CLOB object 

    Returns: the stream to which ASCII encoded characters can be written 
*java.sql.Clob.setCharacterStream(long)*

public |java.io.Writer| setCharacterStream(long pos)
  throws |java.sql.SQLException|
         
Retrieves a stream to be used to write a stream of Unicode characters to the 
CLOB value that this Clob object represents, at position pos. 

    pos - the position at which to start writing to the CLOB value 

    Returns: a stream to which Unicode encoded characters can be written 
*java.sql.Clob.setString(long,String)*

public int setString(
  long pos,
  java.lang.String str)
  throws |java.sql.SQLException|
         
Writes the given Java String to the CLOB value that this Clob object designates 
at the position pos. 

    pos - the position at which to start writing to the CLOB value that this Clob object 
       represents 
    str - the string to be written to the CLOB value that this Clob designates 

    Returns: the number of characters written 
*java.sql.Clob.setString(long,String,int,int)*

public int setString(
  long pos,
  java.lang.String str,
  int offset,
  int len)
  throws |java.sql.SQLException|
         
Writes len characters of str, starting at character offset, to the CLOB value 
that this Clob represents. 

    pos - the position at which to start writing to this CLOB object 
    str - the string to be written to the CLOB value that this Clob object represents 
    offset - the offset into str to start reading the characters to be written 
    len - the number of characters to be written 

    Returns: the number of characters written 
*java.sql.Clob.truncate(long)*

public void truncate(long len)
  throws |java.sql.SQLException|
         
Truncates the CLOB value that this Clob designates to have a length of len 
characters. 

    len - the length, in bytes, to which the CLOB value should be truncated 



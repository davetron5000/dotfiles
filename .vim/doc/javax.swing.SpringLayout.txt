*javax.swing.SpringLayout* *SpringLayout* A SpringLayout lays out the children o

public class SpringLayout
  extends    |java.lang.Object|
  implements |java.awt.LayoutManager2|

|javax.swing.SpringLayout_Description|
|javax.swing.SpringLayout_Fields|
|javax.swing.SpringLayout_Constructors|
|javax.swing.SpringLayout_Methods|

================================================================================

*javax.swing.SpringLayout_Fields*
|java.lang.String_javax.swing.SpringLayout.EAST|
|java.lang.String_javax.swing.SpringLayout.NORTH|
|java.lang.String_javax.swing.SpringLayout.SOUTH|
|java.lang.String_javax.swing.SpringLayout.WEST|

*javax.swing.SpringLayout_Constructors*
|javax.swing.SpringLayout()|Constructs a new SpringLayout.

*javax.swing.SpringLayout_Methods*
|javax.swing.SpringLayout.addLayoutComponent(Component,Object)|If constraints i
|javax.swing.SpringLayout.addLayoutComponent(String,Component)|Has no effect,  
|javax.swing.SpringLayout.getConstraint(String,Component)|Returns the spring co
|javax.swing.SpringLayout.getConstraints(Component)|Returns the constraints for
|javax.swing.SpringLayout.getLayoutAlignmentX(Container)|Returns 0.5f (centered
|javax.swing.SpringLayout.getLayoutAlignmentY(Container)|Returns 0.5f (centered
|javax.swing.SpringLayout.invalidateLayout(Container)|
|javax.swing.SpringLayout.layoutContainer(Container)|
|javax.swing.SpringLayout.maximumLayoutSize(Container)|
|javax.swing.SpringLayout.minimumLayoutSize(Container)|
|javax.swing.SpringLayout.preferredLayoutSize(Container)|
|javax.swing.SpringLayout.putConstraint(String,Component,int,String,Component)|
|javax.swing.SpringLayout.putConstraint(String,Component,Spring,String,Component)|
|javax.swing.SpringLayout.removeLayoutComponent(Component)|Removes the constrai

*javax.swing.SpringLayout_Description*

A SpringLayout lays out the children of its associated container according to a 
set of constraints. See How to Use SpringLayout in The Java Tutorial for 
examples of using SpringLayout. 

Each constraint, represented by a Spring object, controls the vertical or 
horizontal distance between two component edges. The edges can belong to any 
child of the container, or to the container itself. For example, the allowable 
width of a component can be expressed using a constraint that controls the 
distance between the west (left) and east (right) edges of the component. The 
allowable y coordinates for a component can be expressed by constraining the 
distance between the north (top) edge of the component and the north edge of 
its container. 

Every child of a SpringLayout-controlled container, as well as the container 
itself, has exactly one set of constraints associated with it. These 
constraints are represented by a SpringLayout.Constraints object. By default, 
SpringLayout creates constraints that make their associated component have the 
minimum, preferred, and maximum sizes returned by the component's 
(|java.awt.Component|) , (|java.awt.Component|) , and (|java.awt.Component|) 
methods. The x and y positions are initially not constrained, so that until you 
constrain them the Component will be positioned at 0,0 relative to the Insets 
of the parent Container. 

You can change a component's constraints in several ways. You can use one of 
the putConstraint(|javax.swing.SpringLayout|) methods to establish a spring 
linking the edges of two components within the same container. Or you can get 
the appropriate SpringLayout.Constraints object using 
getConstraints(|javax.swing.SpringLayout|) and then modify one or more of its 
springs. Or you can get the spring for a particular edge of a component using 
getConstraint(|javax.swing.SpringLayout|) , and modify it. You can also 
associate your own SpringLayout.Constraints object with a component by 
specifying the constraints object when you add the component to its container 
(using (|java.awt.Container|) ). 

The Spring object representing each constraint has a minimum, preferred, 
maximum, and current value. The current value of the spring is somewhere 
between the minimum and maximum values, according to the formula given in the 
(|javax.swing.Spring|) method description. When the minimum, preferred, and 
maximum values are the same, the current value is always equal to them; this 
inflexible spring is called a strut. You can create struts using the factory 
method (|javax.swing.Spring|) . The Spring class also provides factory methods 
for creating other kinds of springs, including springs that depend on other 
springs. 

In a SpringLayout, the position of each edge is dependent on the position of 
just one other edge. If a constraint is subsequently added to create a new 
binding for an edge, the previous binding is discarded and the edge remains 
dependent on a single edge. Springs should only be attached between edges of 
the container and its immediate children; the behavior of the SpringLayout when 
presented with constraints linking the edges of components from different 
containers (either internal or external) is undefined. 

SpringLayout vs. Other Layout Managers 



Note: Unlike many layout managers, SpringLayout doesn't automatically set the 
location of the components it manages. If you hand-code a GUI that uses 
SpringLayout, remember to initialize component locations by constraining the 
west/east and north/south locations. 

Depending on the constraints you use, you may also need to set the size of the 
container explicitly. 



Despite the simplicity of SpringLayout, it can emulate the behavior of most 
other layout managers. For some features, such as the line breaking provided by 
FlowLayout, you'll need to create a special-purpose subclass of the Spring 
class. 

SpringLayout also provides a way to solve many of the difficult layout problems 
that cannot be solved by nesting combinations of Boxes. That said, SpringLayout 
honors the LayoutManager2 contract correctly and so can be nested with other 
layout managers -- a technique that can be preferable to creating the 
constraints implied by the other layout managers. 

The asymptotic complexity of the layout operation of a SpringLayout is linear 
in the number of constraints (and/or components). 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.SpringLayout.EAST*

A SpringLayout lays out the children of its associated container according to a 
set of constraints. See How to Use SpringLayout in The Java Tutorial for 
examples of using SpringLayout. 

Each constraint, represented by a Spring object, controls the vertical or 
horizontal distance between two component edges. The edges can belong to any 
child of the container, or to the container itself. For example, the allowable 
width of a component can be expressed using a constraint that controls the 
distance between the west (left) and east (right) edges of the component. The 
allowable y coordinates for a component can be expressed by constraining the 
distance between the north (top) edge of the component and the north edge of 
its container. 

Every child of a SpringLayout-controlled container, as well as the container 
itself, has exactly one set of constraints associated with it. These 
constraints are represented by a SpringLayout.Constraints object. By default, 
SpringLayout creates constraints that make their associated component have the 
minimum, preferred, and maximum sizes returned by the component's 
(|java.awt.Component|) , (|java.awt.Component|) , and (|java.awt.Component|) 
methods. The x and y positions are initially not constrained, so that until you 
constrain them the Component will be positioned at 0,0 relative to the Insets 
of the parent Container. 

You can change a component's constraints in several ways. You can use one of 
the putConstraint(|javax.swing.SpringLayout|) methods to establish a spring 
linking the edges of two components within the same container. Or you can get 
the appropriate SpringLayout.Constraints object using 
getConstraints(|javax.swing.SpringLayout|) and then modify one or more of its 
springs. Or you can get the spring for a particular edge of a component using 
getConstraint(|javax.swing.SpringLayout|) , and modify it. You can also 
associate your own SpringLayout.Constraints object with a component by 
specifying the constraints object when you add the component to its container 
(using (|java.awt.Container|) ). 

The Spring object representing each constraint has a minimum, preferred, 
maximum, and current value. The current value of the spring is somewhere 
between the minimum and maximum values, according to the formula given in the 
(|javax.swing.Spring|) method description. When the minimum, preferred, and 
maximum values are the same, the current value is always equal to them; this 
inflexible spring is called a strut. You can create struts using the factory 
method (|javax.swing.Spring|) . The Spring class also provides factory methods 
for creating other kinds of springs, including springs that depend on other 
springs. 

In a SpringLayout, the position of each edge is dependent on the position of 
just one other edge. If a constraint is subsequently added to create a new 
binding for an edge, the previous binding is discarded and the edge remains 
dependent on a single edge. Springs should only be attached between edges of 
the container and its immediate children; the behavior of the SpringLayout when 
presented with constraints linking the edges of components from different 
containers (either internal or external) is undefined. 

SpringLayout vs. Other Layout Managers 



Note: Unlike many layout managers, SpringLayout doesn't automatically set the 
location of the components it manages. If you hand-code a GUI that uses 
SpringLayout, remember to initialize component locations by constraining the 
west/east and north/south locations. 

Depending on the constraints you use, you may also need to set the size of the 
container explicitly. 



Despite the simplicity of SpringLayout, it can emulate the behavior of most 
other layout managers. For some features, such as the line breaking provided by 
FlowLayout, you'll need to create a special-purpose subclass of the Spring 
class. 

SpringLayout also provides a way to solve many of the difficult layout problems 
that cannot be solved by nesting combinations of Boxes. That said, SpringLayout 
honors the LayoutManager2 contract correctly and so can be nested with other 
layout managers -- a technique that can be preferable to creating the 
constraints implied by the other layout managers. 

The asymptotic complexity of the layout operation of a SpringLayout is linear 
in the number of constraints (and/or components). 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.SpringLayout.NORTH*

A SpringLayout lays out the children of its associated container according to a 
set of constraints. See How to Use SpringLayout in The Java Tutorial for 
examples of using SpringLayout. 

Each constraint, represented by a Spring object, controls the vertical or 
horizontal distance between two component edges. The edges can belong to any 
child of the container, or to the container itself. For example, the allowable 
width of a component can be expressed using a constraint that controls the 
distance between the west (left) and east (right) edges of the component. The 
allowable y coordinates for a component can be expressed by constraining the 
distance between the north (top) edge of the component and the north edge of 
its container. 

Every child of a SpringLayout-controlled container, as well as the container 
itself, has exactly one set of constraints associated with it. These 
constraints are represented by a SpringLayout.Constraints object. By default, 
SpringLayout creates constraints that make their associated component have the 
minimum, preferred, and maximum sizes returned by the component's 
(|java.awt.Component|) , (|java.awt.Component|) , and (|java.awt.Component|) 
methods. The x and y positions are initially not constrained, so that until you 
constrain them the Component will be positioned at 0,0 relative to the Insets 
of the parent Container. 

You can change a component's constraints in several ways. You can use one of 
the putConstraint(|javax.swing.SpringLayout|) methods to establish a spring 
linking the edges of two components within the same container. Or you can get 
the appropriate SpringLayout.Constraints object using 
getConstraints(|javax.swing.SpringLayout|) and then modify one or more of its 
springs. Or you can get the spring for a particular edge of a component using 
getConstraint(|javax.swing.SpringLayout|) , and modify it. You can also 
associate your own SpringLayout.Constraints object with a component by 
specifying the constraints object when you add the component to its container 
(using (|java.awt.Container|) ). 

The Spring object representing each constraint has a minimum, preferred, 
maximum, and current value. The current value of the spring is somewhere 
between the minimum and maximum values, according to the formula given in the 
(|javax.swing.Spring|) method description. When the minimum, preferred, and 
maximum values are the same, the current value is always equal to them; this 
inflexible spring is called a strut. You can create struts using the factory 
method (|javax.swing.Spring|) . The Spring class also provides factory methods 
for creating other kinds of springs, including springs that depend on other 
springs. 

In a SpringLayout, the position of each edge is dependent on the position of 
just one other edge. If a constraint is subsequently added to create a new 
binding for an edge, the previous binding is discarded and the edge remains 
dependent on a single edge. Springs should only be attached between edges of 
the container and its immediate children; the behavior of the SpringLayout when 
presented with constraints linking the edges of components from different 
containers (either internal or external) is undefined. 

SpringLayout vs. Other Layout Managers 



Note: Unlike many layout managers, SpringLayout doesn't automatically set the 
location of the components it manages. If you hand-code a GUI that uses 
SpringLayout, remember to initialize component locations by constraining the 
west/east and north/south locations. 

Depending on the constraints you use, you may also need to set the size of the 
container explicitly. 



Despite the simplicity of SpringLayout, it can emulate the behavior of most 
other layout managers. For some features, such as the line breaking provided by 
FlowLayout, you'll need to create a special-purpose subclass of the Spring 
class. 

SpringLayout also provides a way to solve many of the difficult layout problems 
that cannot be solved by nesting combinations of Boxes. That said, SpringLayout 
honors the LayoutManager2 contract correctly and so can be nested with other 
layout managers -- a technique that can be preferable to creating the 
constraints implied by the other layout managers. 

The asymptotic complexity of the layout operation of a SpringLayout is linear 
in the number of constraints (and/or components). 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.SpringLayout.SOUTH*

A SpringLayout lays out the children of its associated container according to a 
set of constraints. See How to Use SpringLayout in The Java Tutorial for 
examples of using SpringLayout. 

Each constraint, represented by a Spring object, controls the vertical or 
horizontal distance between two component edges. The edges can belong to any 
child of the container, or to the container itself. For example, the allowable 
width of a component can be expressed using a constraint that controls the 
distance between the west (left) and east (right) edges of the component. The 
allowable y coordinates for a component can be expressed by constraining the 
distance between the north (top) edge of the component and the north edge of 
its container. 

Every child of a SpringLayout-controlled container, as well as the container 
itself, has exactly one set of constraints associated with it. These 
constraints are represented by a SpringLayout.Constraints object. By default, 
SpringLayout creates constraints that make their associated component have the 
minimum, preferred, and maximum sizes returned by the component's 
(|java.awt.Component|) , (|java.awt.Component|) , and (|java.awt.Component|) 
methods. The x and y positions are initially not constrained, so that until you 
constrain them the Component will be positioned at 0,0 relative to the Insets 
of the parent Container. 

You can change a component's constraints in several ways. You can use one of 
the putConstraint(|javax.swing.SpringLayout|) methods to establish a spring 
linking the edges of two components within the same container. Or you can get 
the appropriate SpringLayout.Constraints object using 
getConstraints(|javax.swing.SpringLayout|) and then modify one or more of its 
springs. Or you can get the spring for a particular edge of a component using 
getConstraint(|javax.swing.SpringLayout|) , and modify it. You can also 
associate your own SpringLayout.Constraints object with a component by 
specifying the constraints object when you add the component to its container 
(using (|java.awt.Container|) ). 

The Spring object representing each constraint has a minimum, preferred, 
maximum, and current value. The current value of the spring is somewhere 
between the minimum and maximum values, according to the formula given in the 
(|javax.swing.Spring|) method description. When the minimum, preferred, and 
maximum values are the same, the current value is always equal to them; this 
inflexible spring is called a strut. You can create struts using the factory 
method (|javax.swing.Spring|) . The Spring class also provides factory methods 
for creating other kinds of springs, including springs that depend on other 
springs. 

In a SpringLayout, the position of each edge is dependent on the position of 
just one other edge. If a constraint is subsequently added to create a new 
binding for an edge, the previous binding is discarded and the edge remains 
dependent on a single edge. Springs should only be attached between edges of 
the container and its immediate children; the behavior of the SpringLayout when 
presented with constraints linking the edges of components from different 
containers (either internal or external) is undefined. 

SpringLayout vs. Other Layout Managers 



Note: Unlike many layout managers, SpringLayout doesn't automatically set the 
location of the components it manages. If you hand-code a GUI that uses 
SpringLayout, remember to initialize component locations by constraining the 
west/east and north/south locations. 

Depending on the constraints you use, you may also need to set the size of the 
container explicitly. 



Despite the simplicity of SpringLayout, it can emulate the behavior of most 
other layout managers. For some features, such as the line breaking provided by 
FlowLayout, you'll need to create a special-purpose subclass of the Spring 
class. 

SpringLayout also provides a way to solve many of the difficult layout problems 
that cannot be solved by nesting combinations of Boxes. That said, SpringLayout 
honors the LayoutManager2 contract correctly and so can be nested with other 
layout managers -- a technique that can be preferable to creating the 
constraints implied by the other layout managers. 

The asymptotic complexity of the layout operation of a SpringLayout is linear 
in the number of constraints (and/or components). 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.SpringLayout.WEST*

A SpringLayout lays out the children of its associated container according to a 
set of constraints. See How to Use SpringLayout in The Java Tutorial for 
examples of using SpringLayout. 

Each constraint, represented by a Spring object, controls the vertical or 
horizontal distance between two component edges. The edges can belong to any 
child of the container, or to the container itself. For example, the allowable 
width of a component can be expressed using a constraint that controls the 
distance between the west (left) and east (right) edges of the component. The 
allowable y coordinates for a component can be expressed by constraining the 
distance between the north (top) edge of the component and the north edge of 
its container. 

Every child of a SpringLayout-controlled container, as well as the container 
itself, has exactly one set of constraints associated with it. These 
constraints are represented by a SpringLayout.Constraints object. By default, 
SpringLayout creates constraints that make their associated component have the 
minimum, preferred, and maximum sizes returned by the component's 
(|java.awt.Component|) , (|java.awt.Component|) , and (|java.awt.Component|) 
methods. The x and y positions are initially not constrained, so that until you 
constrain them the Component will be positioned at 0,0 relative to the Insets 
of the parent Container. 

You can change a component's constraints in several ways. You can use one of 
the putConstraint(|javax.swing.SpringLayout|) methods to establish a spring 
linking the edges of two components within the same container. Or you can get 
the appropriate SpringLayout.Constraints object using 
getConstraints(|javax.swing.SpringLayout|) and then modify one or more of its 
springs. Or you can get the spring for a particular edge of a component using 
getConstraint(|javax.swing.SpringLayout|) , and modify it. You can also 
associate your own SpringLayout.Constraints object with a component by 
specifying the constraints object when you add the component to its container 
(using (|java.awt.Container|) ). 

The Spring object representing each constraint has a minimum, preferred, 
maximum, and current value. The current value of the spring is somewhere 
between the minimum and maximum values, according to the formula given in the 
(|javax.swing.Spring|) method description. When the minimum, preferred, and 
maximum values are the same, the current value is always equal to them; this 
inflexible spring is called a strut. You can create struts using the factory 
method (|javax.swing.Spring|) . The Spring class also provides factory methods 
for creating other kinds of springs, including springs that depend on other 
springs. 

In a SpringLayout, the position of each edge is dependent on the position of 
just one other edge. If a constraint is subsequently added to create a new 
binding for an edge, the previous binding is discarded and the edge remains 
dependent on a single edge. Springs should only be attached between edges of 
the container and its immediate children; the behavior of the SpringLayout when 
presented with constraints linking the edges of components from different 
containers (either internal or external) is undefined. 

SpringLayout vs. Other Layout Managers 



Note: Unlike many layout managers, SpringLayout doesn't automatically set the 
location of the components it manages. If you hand-code a GUI that uses 
SpringLayout, remember to initialize component locations by constraining the 
west/east and north/south locations. 

Depending on the constraints you use, you may also need to set the size of the 
container explicitly. 



Despite the simplicity of SpringLayout, it can emulate the behavior of most 
other layout managers. For some features, such as the line breaking provided by 
FlowLayout, you'll need to create a special-purpose subclass of the Spring 
class. 

SpringLayout also provides a way to solve many of the difficult layout problems 
that cannot be solved by nesting combinations of Boxes. That said, SpringLayout 
honors the LayoutManager2 contract correctly and so can be nested with other 
layout managers -- a technique that can be preferable to creating the 
constraints implied by the other layout managers. 

The asymptotic complexity of the layout operation of a SpringLayout is linear 
in the number of constraints (and/or components). 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.SpringLayout()*

public SpringLayout()

Constructs a new SpringLayout. 


*javax.swing.SpringLayout.addLayoutComponent(Component,Object)*

public void addLayoutComponent(
  java.awt.Component component,
  java.lang.Object constraints)

If constraints is an instance of SpringLayout.Constraints, associates the 
constraints with the specified component. 

    component - the component being added 
    constraints - the component's constraints 

*javax.swing.SpringLayout.addLayoutComponent(String,Component)*

public void addLayoutComponent(
  java.lang.String name,
  java.awt.Component c)

Has no effect, since this layout manager does not use a per-component string. 


*javax.swing.SpringLayout.getConstraint(String,Component)*

public |javax.swing.Spring| getConstraint(
  java.lang.String edgeName,
  java.awt.Component c)

Returns the spring controlling the distance between the specified edge of the 
component and the top or left edge of its parent. This method, instead of 
returning the current binding for the edge, returns a proxy that tracks the 
characteristics of the edge even if the edge is subsequently rebound. Proxies 
are intended to be used in builder envonments where it is useful to allow the 
user to define the constraints for a layout in any order. Proxies do, however, 
provide the means to create cyclic dependencies amongst the constraints of a 
layout. Such cycles are detected internally by SpringLayout so that the layout 
operation always terminates. 

    edgeName - must be SpringLayout.NORTH, SpringLayout.SOUTH, SpringLayout.EAST, or 
       SpringLayout.WEST 
    c - the component whose edge spring is desired 

    Returns: a proxy for the spring controlling the distance between the specified edge and 
             the top or left edge of its parent 
*javax.swing.SpringLayout.getConstraints(Component)*

public |javax.swing.SpringLayout.Constraints| getConstraints(java.awt.Component c)

Returns the constraints for the specified component. Note that, unlike the 
GridBagLayout getConstraints method, this method does not clone constraints. If 
no constraints have been associated with this component, this method returns a 
default constraints object positioned at 0,0 relative to the parent's Insets 
and its width/height constrained to the minimum, maximum, and preferred sizes 
of the component. The size characteristics are not frozen at the time this 
method is called; instead this method returns a constraints object whose 
characteristics track the characteristics of the component as they change. 

    c - the component whose constraints will be returned 

    Returns: the constraints for the specified component 
*javax.swing.SpringLayout.getLayoutAlignmentX(Container)*

public float getLayoutAlignmentX(java.awt.Container p)

Returns 0.5f (centered). 


*javax.swing.SpringLayout.getLayoutAlignmentY(Container)*

public float getLayoutAlignmentY(java.awt.Container p)

Returns 0.5f (centered). 


*javax.swing.SpringLayout.invalidateLayout(Container)*

public void invalidateLayout(java.awt.Container p)




*javax.swing.SpringLayout.layoutContainer(Container)*

public void layoutContainer(java.awt.Container parent)




*javax.swing.SpringLayout.maximumLayoutSize(Container)*

public |java.awt.Dimension| maximumLayoutSize(java.awt.Container parent)




*javax.swing.SpringLayout.minimumLayoutSize(Container)*

public |java.awt.Dimension| minimumLayoutSize(java.awt.Container parent)




*javax.swing.SpringLayout.preferredLayoutSize(Container)*

public |java.awt.Dimension| preferredLayoutSize(java.awt.Container parent)




*javax.swing.SpringLayout.putConstraint(String,Component,int,String,Component)*

public void putConstraint(
  java.lang.String e1,
  java.awt.Component c1,
  int pad,
  java.lang.String e2,
  java.awt.Component c2)

Links edge e1 of component c1 to edge e2 of component c2, with a fixed distance 
between the edges. This constraint will cause the assignment 

value(e1, c1) = value(e2, c2) + pad 

to take place during all subsequent layout operations. 

    e1 - the edge of the dependent 
    c1 - the component of the dependent 
    pad - the fixed distance between dependent and anchor 
    e2 - the edge of the anchor 
    c2 - the component of the anchor 

*javax.swing.SpringLayout.putConstraint(String,Component,Spring,String,Component)*

public void putConstraint(
  java.lang.String e1,
  java.awt.Component c1,
  javax.swing.Spring s,
  java.lang.String e2,
  java.awt.Component c2)

Links edge e1 of component c1 to edge e2 of component c2. As edge (e2, c2) 
changes value, edge (e1, c1) will be calculated by taking the (spring) sum of 
(e2, c2) and s. Each edge must have one of the following values: 
SpringLayout.NORTH, SpringLayout.SOUTH, SpringLayout.EAST, SpringLayout.WEST. 

    e1 - the edge of the dependent 
    c1 - the component of the dependent 
    s - the spring linking dependent and anchor 
    e2 - the edge of the anchor 
    c2 - the component of the anchor 

*javax.swing.SpringLayout.removeLayoutComponent(Component)*

public void removeLayoutComponent(java.awt.Component c)

Removes the constraints associated with the specified component. 

    c - the component being removed from the container 



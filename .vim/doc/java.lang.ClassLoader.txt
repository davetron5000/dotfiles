*java.lang.ClassLoader* *ClassLoader* A class loader is an object that is respon

public abstract class ClassLoader
  extends    |java.lang.Object|

|java.lang.ClassLoader_Description|
|java.lang.ClassLoader_Fields|
|java.lang.ClassLoader_Constructors|
|java.lang.ClassLoader_Methods|

================================================================================

*java.lang.ClassLoader_Constructors*
|java.lang.ClassLoader()|Creates a new class loader using the ClassLoader retur
|java.lang.ClassLoader(ClassLoader)|Creates a new class loader using the specif

*java.lang.ClassLoader_Methods*
|java.lang.ClassLoader.clearAssertionStatus()|Sets the default assertion status
|java.lang.ClassLoader.defineClass(byte[],int,int)|Converts an array of bytes i
|java.lang.ClassLoader.defineClass(String,byte[],int,int)|Converts an array of 
|java.lang.ClassLoader.defineClass(String,byte[],int,int,ProtectionDomain)|Conv
|java.lang.ClassLoader.defineClass(String,ByteBuffer,ProtectionDomain)|Converts
|java.lang.ClassLoader.definePackage(String,String,String,String,String,String,String,URL)|
|java.lang.ClassLoader.findClass(String)|Finds the class with the specified bin
|java.lang.ClassLoader.findLibrary(String)|Returns the absolute path name of a 
|java.lang.ClassLoader.findLoadedClass(String)|Returns the class with the given
|java.lang.ClassLoader.findResource(String)|Finds the resource with the given n
|java.lang.ClassLoader.findResources(String)|Returns an enumeration ofjava.net.
|java.lang.ClassLoader.findSystemClass(String)|Finds a class with the specified
|java.lang.ClassLoader.getPackage(String)|Returns a Package that has been defin
|java.lang.ClassLoader.getPackages()|Returns all of the Packages defined by thi
|java.lang.ClassLoader.getParent()|Returns the parent class loader for delegati
|java.lang.ClassLoader.getResource(String)|Finds the resource with the given na
|java.lang.ClassLoader.getResourceAsStream(String)|Returns an input stream for 
|java.lang.ClassLoader.getResources(String)|Finds all the resources with the gi
|java.lang.ClassLoader.getSystemClassLoader()|Returns the system class loader f
|java.lang.ClassLoader.getSystemResource(String)|Find a resource of the specifi
|java.lang.ClassLoader.getSystemResourceAsStream(String)|Open for reading, a re
|java.lang.ClassLoader.getSystemResources(String)|Finds all resources of the sp
|java.lang.ClassLoader.loadClass(String)|Loads the class with the specified bin
|java.lang.ClassLoader.loadClass(String,boolean)|Loads the class with the speci
|java.lang.ClassLoader.resolveClass(Class)|Links the specified class.
|java.lang.ClassLoader.setClassAssertionStatus(String,boolean)|Sets the desired
|java.lang.ClassLoader.setDefaultAssertionStatus(boolean)|Sets the default asse
|java.lang.ClassLoader.setPackageAssertionStatus(String,boolean)|Sets the packa
|java.lang.ClassLoader.setSigners(Class,Object[])|Sets the signers of a class.

*java.lang.ClassLoader_Description*

A class loader is an object that is responsible for loading classes. The class 
ClassLoader is an abstract class. Given the binary name of a class, a class 
loader should attempt to locate or generate data that constitutes a definition 
for the class. A typical strategy is to transform the name into a file name and 
then read a "class file" of that name from a file system. 

Every <tt>Class</tt>(|java.lang.Class|) object contains a 
reference(|java.lang.Class|) to the ClassLoader that defined it. 

Class objects for array classes are not created by class loaders, but are 
created automatically as required by the Java runtime. The class loader for an 
array class, as returned by (|java.lang.Class|) is the same as the class loader 
for its element type; if the element type is a primitive type, then the array 
class has no class loader. 

Applications implement subclasses of ClassLoader in order to extend the manner 
in which the Java virtual machine dynamically loads classes. 

Class loaders may typically be used by security managers to indicate security 
domains. 

The ClassLoader class uses a delegation model to search for classes and 
resources. Each instance of ClassLoader has an associated parent class loader. 
When requested to find a class or resource, a ClassLoader instance will 
delegate the search for the class or resource to its parent class loader before 
attempting to find the class or resource itself. The virtual machine's built-in 
class loader, called the "bootstrap class loader", does not itself have a 
parent but may serve as the parent of a ClassLoader instance. 

Normally, the Java virtual machine loads classes from the local file system in 
a platform-dependent manner. For example, on UNIX systems, the virtual machine 
loads classes from the directory defined by the CLASSPATH environment variable. 

However, some classes may not originate from a file; they may originate from 
other sources, such as the network, or they could be constructed by an 
application. The method <tt>defineClass</tt>(|java.lang.ClassLoader|) converts 
an array of bytes into an instance of class Class. Instances of this newly 
defined class can be created using 
<tt>Class.newInstance</tt>(|java.lang.Class|) . 

The methods and constructors of objects created by a class loader may reference 
other classes. To determine the class(es) referred to, the Java virtual machine 
invokes the <tt>loadClass</tt>(|java.lang.ClassLoader|) method of the class 
loader that originally created the class. 

For example, an application could create a network class loader to download 
class files from a server. Sample code might look like: 



ClassLoader loader= new NetworkClassLoader(host,port); Object main= 
loader.loadClass("Main", true).newInstance(); ... 

The network class loader subclass must define the methods 
<tt>findClass</tt>(|java.lang.ClassLoader|) and loadClassData to load a class 
from the network. Once it has downloaded the bytes that make up the class, it 
should use the method <tt>defineClass</tt>(|java.lang.ClassLoader|) to create a 
class instance. A sample implementation is: 



class NetworkClassLoader extends ClassLoader { String host; int port; 

public Class findClass(String name) { byte[] b = loadClassData(name); return 
defineClass(name, b, 0, b.length); } 

private byte[] loadClassData(String name) { // load the class data from the 
connection ... } } 

Binary names 

Any class name provided as a (|java.lang.String|) parameter to methods in 
ClassLoader must be a binary name as defined by the Java Language 
Specification. 

Examples of valid class names include: 

"java.lang.String" "javax.swing.JSpinner$DefaultEditor" 
"java.security.KeyStore$Builder$FileBuilder$1" "java.net.URLClassLoader$3$1" 


*java.lang.ClassLoader()*

protected ClassLoader()

Creates a new class loader using the ClassLoader returned by the method 
<tt>getSystemClassLoader()</tt>(|java.lang.ClassLoader|) as the parent class 
loader. 

If there is a security manager, its 
<tt>checkCreateClassLoader</tt>(|java.lang.SecurityManager|) method is invoked. 
This may result in a security exception. 


*java.lang.ClassLoader(ClassLoader)*

protected ClassLoader(java.lang.ClassLoader parent)

Creates a new class loader using the specified parent class loader for 
delegation. 

If there is a security manager, its 
<tt>checkCreateClassLoader</tt>(|java.lang.SecurityManager|) method is invoked. 
This may result in a security exception. 

    parent - The parent class loader 

*java.lang.ClassLoader.clearAssertionStatus()*

public synchronized void clearAssertionStatus()

Sets the default assertion status for this class loader to false and discards 
any package defaults or class assertion status settings associated with the 
class loader. This method is provided so that class loaders can be made to 
ignore any command line or persistent assertion status settings and "start with 
a clean slate." 


*java.lang.ClassLoader.defineClass(byte[],int,int)*

protected final |java.lang.Class| defineClass(
  byte[] b,
  int off,
  int len)
  throws |java.lang.ClassFormatError|
         
Converts an array of bytes into an instance of class Class. Before the Class 
can be used it must be resolved. This method is deprecated in favor of the 
version that takes a binary name as its first argument, and is more secure. 

    b - The bytes that make up the class data. The bytes in positions off through 
       off+len-1 should have the format of a valid class file as defined by the 
       Java Virtual Machine Specification. 
    off - The start offset in b of the class data 
    len - The length of the class data 

    Returns: The Class object that was created from the specified class data 
*java.lang.ClassLoader.defineClass(String,byte[],int,int)*

protected final |java.lang.Class| defineClass(
  java.lang.String name,
  byte[] b,
  int off,
  int len)
  throws |java.lang.ClassFormatError|
         
Converts an array of bytes into an instance of class Class. Before the Class 
can be used it must be resolved. 

This method assigns a default 
<tt>ProtectionDomain</tt>(|java.security.ProtectionDomain|) to the newly 
defined class. The ProtectionDomain is effectively granted the same set of 
permissions returned when <tt>Policy.getPolicy().getPermissions(new 
CodeSource(null, null))</tt>(|java.security.Policy|) is invoked. The default 
domain is created on the first invocation of 
<tt>defineClass</tt>(|java.lang.ClassLoader|) , and re-used on subsequent 
invocations. 

To assign a specific ProtectionDomain to the class, use the 
<tt>defineClass</tt>(|java.lang.ClassLoader|) method that takes a 
ProtectionDomain as one of its arguments. 

    name - The expected binary name of the class, or null if not known 
    b - The bytes that make up the class data. The bytes in positions off through 
       off+len-1 should have the format of a valid class file as defined by the 
       Java Virtual Machine Specification. 
    off - The start offset in b of the class data 
    len - The length of the class data 

    Returns: The Class object that was created from the specified class data. 
*java.lang.ClassLoader.defineClass(String,byte[],int,int,ProtectionDomain)*

protected final |java.lang.Class| defineClass(
  java.lang.String name,
  byte[] b,
  int off,
  int len,
  java.security.ProtectionDomain protectionDomain)
  throws |java.lang.ClassFormatError|
         
Converts an array of bytes into an instance of class Class, with an optional 
ProtectionDomain. If the domain is null, then a default domain will be assigned 
to the class as specified in the documentation for (|java.lang.ClassLoader|) . 
Before the class can be used it must be resolved. 

The first class defined in a package determines the exact set of certificates 
that all subsequent classes defined in that package must contain. The set of 
certificates for a class is obtained from the 
<tt>CodeSource</tt>(|java.security.CodeSource|) within the ProtectionDomain of 
the class. Any classes added to that package must contain the same set of 
certificates or a SecurityException will be thrown. Note that if name is null, 
this check is not performed. You should always pass in the binary name of the 
class you are defining as well as the bytes. This ensures that the class you 
are defining is indeed the class you think it is. 

The specified name cannot begin with "java.", since all classes in the "java.* 
packages can only be defined by the bootstrap class loader. If name is not 
null, it must be equal to the binary name of the class specified by the byte 
array "b", otherwise a (|null|) will be thrown. 

    name - The expected binary name of the class, or null if not known 
    b - The bytes that make up the class data. The bytes in positions off through 
       off+len-1 should have the format of a valid class file as defined by the 
       Java Virtual Machine Specification. 
    off - The start offset in b of the class data 
    len - The length of the class data 
    protectionDomain - The ProtectionDomain of the class 

    Returns: The Class object created from the data, and optional ProtectionDomain. 
*java.lang.ClassLoader.defineClass(String,ByteBuffer,ProtectionDomain)*

protected final |java.lang.Class| defineClass(
  java.lang.String name,
  java.nio.ByteBuffer b,
  java.security.ProtectionDomain protectionDomain)
  throws |java.lang.ClassFormatError|
         
Converts a <tt>ByteBuffer</tt>(|java.nio.ByteBuffer|) into an instance of class 
Class, with an optional ProtectionDomain. If the domain is null, then a default 
domain will be assigned to the class as specified in the documentation for 
(|java.lang.ClassLoader|) . Before the class can be used it must be resolved. 

The rules about the first class defined in a package determining the set of 
certificates for the package, and the restrictions on class names are identical 
to those specified in the documentation for (|java.lang.ClassLoader|) . 

An invocation of this method of the form cl.defineClass(name, bBuffer, pd) 
yields exactly the same result as the statements 

... byte[] temp = new byte[bBuffer. remaining(|java.nio.ByteBuffer|) ()]; 
bBuffer. get(|java.nio.ByteBuffer|) (temp); return 
</tt><i>cl</i><tt>.defineClass(|java.lang.ClassLoader|) (name, temp, 0, 
temp.length, pd); 

    name - The expected binary namenull if not known 
    b - The bytes that make up the class data. The bytes from positions b.position() 
       through b.position() + b.limit() -1 should have the format of a valid 
       class file as defined by the Java Virtual Machine Specification. 
    protectionDomain - The ProtectionDomain of the class, or null. 

    Returns: The Class object created from the data, and optional ProtectionDomain. 
*java.lang.ClassLoader.definePackage(String,String,String,String,String,String,String,URL)*

protected |java.lang.Package| definePackage(
  java.lang.String name,
  java.lang.String specTitle,
  java.lang.String specVersion,
  java.lang.String specVendor,
  java.lang.String implTitle,
  java.lang.String implVersion,
  java.lang.String implVendor,
  java.net.URL sealBase)
  throws |java.lang.IllegalArgumentException|
         
Defines a package by name in this ClassLoader. This allows class loaders to 
define the packages for their classes. Packages must be created before the 
class is defined, and package names must be unique within a class loader and 
cannot be redefined or changed once created. 

    name - The package name 
    specTitle - The specification title 
    specVersion - The specification version 
    specVendor - The specification vendor 
    implTitle - The implementation title 
    implVersion - The implementation version 
    implVendor - The implementation vendor 
    sealBase - If not null, then this package is sealed with respect to the given code source 
       {@link java.net.URL URL} object. Otherwise, the package is not sealed. 

    Returns: The newly defined Package object 
*java.lang.ClassLoader.findClass(String)*

protected |java.lang.Class| findClass(java.lang.String name)
  throws |java.lang.ClassNotFoundException|
         
Finds the class with the specified binary name. This method should be 
overridden by class loader implementations that follow the delegation model for 
loading classes, and will be invoked by the 
<tt>loadClass</tt>(|java.lang.ClassLoader|) method after checking the parent 
class loader for the requested class. The default implementation throws a 
ClassNotFoundException. 

    name - The binary name of the class 

    Returns: The resulting Class object 
*java.lang.ClassLoader.findLibrary(String)*

protected |java.lang.String| findLibrary(java.lang.String libname)

Returns the absolute path name of a native library. The VM invokes this method 
to locate the native libraries that belong to classes loaded with this class 
loader. If this method returns null, the VM searches the library along the path 
specified as the "java.library.path" property. 

    libname - The library name 

    Returns: The absolute path of the native library 
*java.lang.ClassLoader.findLoadedClass(String)*

protected final |java.lang.Class| findLoadedClass(java.lang.String name)

Returns the class with the given binary name if this loader has been recorded 
by the Java virtual machine as an initiating loader of a class with that binary 
name. Otherwise null is returned. 

    name - The binary name of the class 

    Returns: The Class object, or null if the class has not been loaded 
*java.lang.ClassLoader.findResource(String)*

protected |java.net.URL| findResource(java.lang.String name)

Finds the resource with the given name. Class loader implementations should 
override this method to specify where to find resources. 

    name - The resource name 

    Returns: A URL object for reading the resource, or null if the resource could not be 
             found 
*java.lang.ClassLoader.findResources(String)*

protected |java.util.Enumeration| findResources(java.lang.String name)
  throws |java.io.IOException|
         
Returns an enumeration of <tt>URL</tt>(|java.net.URL|) objects representing all 
the resources with the given name. Class loader implementations should override 
this method to specify where to load resources from. 

    name - The resource name 

    Returns: An enumeration of {@link java.net.URL URL} objects for the resources 
*java.lang.ClassLoader.findSystemClass(String)*

protected final |java.lang.Class| findSystemClass(java.lang.String name)
  throws |java.lang.ClassNotFoundException|
         
Finds a class with the specified binary name, loading it if necessary. 

This method loads the class through the system class loader (see 
(|java.lang.ClassLoader|) ). The Class object returned might have more than one 
ClassLoader associated with it. Subclasses of ClassLoader need not usually 
invoke this method, because most class loaders need to override just 
(|java.lang.ClassLoader|) . 

    name - The binary name of the class 

    Returns: The Class object for the specified name 
*java.lang.ClassLoader.getPackage(String)*

protected |java.lang.Package| getPackage(java.lang.String name)

Returns a Package that has been defined by this class loader or any of its 
ancestors. 

    name - The package name 

    Returns: The Package corresponding to the given name, or null if not found 
*java.lang.ClassLoader.getPackages()*

protected |java.lang.Package| getPackages()

Returns all of the Packages defined by this class loader and its ancestors. 


    Returns: The array of Package objects defined by this ClassLoader 
*java.lang.ClassLoader.getParent()*

public final |java.lang.ClassLoader| getParent()

Returns the parent class loader for delegation. Some implementations may use 
null to represent the bootstrap class loader. This method will return null in 
such implementations if this class loader's parent is the bootstrap class 
loader. 

If a security manager is present, and the invoker's class loader is not null 
and is not an ancestor of this class loader, then this method invokes the 
security manager's <tt>checkPermission</tt>(|java.lang.SecurityManager|) method 
with a 
<tt>RuntimePermission("getClassLoader")</tt>(|java.lang.RuntimePermission|) 
permission to verify access to the parent class loader is permitted. If not, a 
SecurityException will be thrown. 


    Returns: The parent ClassLoader 
*java.lang.ClassLoader.getResource(String)*

public |java.net.URL| getResource(java.lang.String name)

Finds the resource with the given name. A resource is some data (images, audio, 
text, etc) that can be accessed by class code in a way that is independent of 
the location of the code. 

The name of a resource is a '/'-separated path name that identifies the 
resource. 

This method will first search the parent class loader for the resource; if the 
parent is null the path of the class loader built-in to the virtual machine is 
searched. That failing, this method will invoke (|java.lang.ClassLoader|) to 
find the resource. 

    name - The resource name 

    Returns: A URL object for reading the resource, or null if the resource could not be 
             found or the invoker doesn't have adequate privileges to get the 
             resource. 
*java.lang.ClassLoader.getResourceAsStream(String)*

public |java.io.InputStream| getResourceAsStream(java.lang.String name)

Returns an input stream for reading the specified resource. 

The search order is described in the documentation for 
(|java.lang.ClassLoader|) . 

    name - The resource name 

    Returns: An input stream for reading the resource, or null if the resource could not be 
             found 
*java.lang.ClassLoader.getResources(String)*

public |java.util.Enumeration| getResources(java.lang.String name)
  throws |java.io.IOException|
         
Finds all the resources with the given name. A resource is some data (images, 
audio, text, etc) that can be accessed by class code in a way that is 
independent of the location of the code. 

The name of a resource is a /-separated path name that identifies the resource. 

The search order is described in the documentation for 
(|java.lang.ClassLoader|) . 

    name - The resource name 

    Returns: An enumeration of {@link java.net.URL URL} objects for the resource. If no 
             resources could be found, the enumeration will be empty. Resources 
             that the class loader doesn't have access to will not be in the 
             enumeration. 
*java.lang.ClassLoader.getSystemClassLoader()*

public static |java.lang.ClassLoader| getSystemClassLoader()

Returns the system class loader for delegation. This is the default delegation 
parent for new ClassLoader instances, and is typically the class loader used to 
start the application. 

This method is first invoked early in the runtime's startup sequence, at which 
point it creates the system class loader and sets it as the context class 
loader of the invoking Thread. 

The default system class loader is an implementation-dependent instance of this 
class. 

If the system property "java.system.class.loader" is defined when this method 
is first invoked then the value of that property is taken to be the name of a 
class that will be returned as the system class loader. The class is loaded 
using the default system class loader and must define a public constructor that 
takes a single parameter of type ClassLoader which is used as the delegation 
parent. An instance is then created using this constructor with the default 
system class loader as the parameter. The resulting class loader is defined to 
be the system class loader. 

If a security manager is present, and the invoker's class loader is not null 
and the invoker's class loader is not the same as or an ancestor of the system 
class loader, then this method invokes the security manager's 
<tt>checkPermission</tt>(|java.lang.SecurityManager|) method with a 
<tt>RuntimePermission("getClassLoader")</tt>(|java.lang.RuntimePermission|) 
permission to verify access to the system class loader. If not, a 
SecurityException will be thrown. 


    Returns: The system ClassLoader for delegation, or null if none 
*java.lang.ClassLoader.getSystemResource(String)*

public static |java.net.URL| getSystemResource(java.lang.String name)

Find a resource of the specified name from the search path used to load 
classes. This method locates the resource through the system class loader (see 
(|java.lang.ClassLoader|) ). 

    name - The resource name 

    Returns: A {@link java.net.URL URL} object for reading the resource, or null if the 
             resource could not be found 
*java.lang.ClassLoader.getSystemResourceAsStream(String)*

public static |java.io.InputStream| getSystemResourceAsStream(java.lang.String name)

Open for reading, a resource of the specified name from the search path used to 
load classes. This method locates the resource through the system class loader 
(see (|java.lang.ClassLoader|) ). 

    name - The resource name 

    Returns: An input stream for reading the resource, or null if the resource could not be 
             found 
*java.lang.ClassLoader.getSystemResources(String)*

public static |java.util.Enumeration| getSystemResources(java.lang.String name)
  throws |java.io.IOException|
         
Finds all resources of the specified name from the search path used to load 
classes. The resources thus found are returned as an 
<tt>Enumeration</tt>(|java.util.Enumeration|) of <tt>URL</tt>(|java.net.URL|) 
objects. 

The search order is described in the documentation for 
(|java.lang.ClassLoader|) . 

    name - The resource name 

    Returns: An enumeration of resource {@link java.net.URL URL} objects 
*java.lang.ClassLoader.loadClass(String)*

public |java.lang.Class| loadClass(java.lang.String name)
  throws |java.lang.ClassNotFoundException|
         
Loads the class with the specified binary name. This method searches for 
classes in the same manner as the (|java.lang.ClassLoader|) method. It is 
invoked by the Java virtual machine to resolve class references. Invoking this 
method is equivalent to invoking <tt>loadClass(name, 
false)</tt>(|java.lang.ClassLoader|) . 

    name - The binary name of the class 

    Returns: The resulting Class object 
*java.lang.ClassLoader.loadClass(String,boolean)*

protected synchronized |java.lang.Class| loadClass(
  java.lang.String name,
  boolean resolve)
  throws |java.lang.ClassNotFoundException|
         
Loads the class with the specified binary name. The default implementation of 
this method searches for classes in the following order: 



Invoke (|java.lang.ClassLoader|) to check if the class has already been loaded. 

Invoke the <tt>loadClass</tt>(|java.lang.ClassLoader|) method on the parent 
class loader. If the parent is null the class loader built-in to the virtual 
machine is used, instead. 

Invoke the (|java.lang.ClassLoader|) method to find the class. 



If the class was found using the above steps, and the resolve flag is true, 
this method will then invoke the (|java.lang.ClassLoader|) method on the 
resulting Class object. 

Subclasses of ClassLoader are encouraged to override (|java.lang.ClassLoader|) 
, rather than this method. 

    name - The binary name of the class 
    resolve - If true then resolve the class 

    Returns: The resulting Class object 
*java.lang.ClassLoader.resolveClass(Class)*

protected final void resolveClass(java.lang.Class c)

Links the specified class. This (misleadingly named) method may be used by a 
class loader to link a class. If the class c has already been linked, then this 
method simply returns. Otherwise, the class is linked as described in the 
"Execution" chapter of the Java Language Specification. 

    c - The class to link 

*java.lang.ClassLoader.setClassAssertionStatus(String,boolean)*

public synchronized void setClassAssertionStatus(
  java.lang.String className,
  boolean enabled)

Sets the desired assertion status for the named top-level class in this class 
loader and any nested classes contained therein. This setting takes precedence 
over the class loader's default assertion status, and over any applicable 
per-package default. This method has no effect if the named class has already 
been initialized. (Once a class is initialized, its assertion status cannot 
change.) 

If the named class is not a top-level class, this invocation will have no 
effect on the actual assertion status of any class, and its return value is 
undefined. 

    className - The fully qualified class name of the top-level class whose assertion status is 
       to be set. 
    enabled - true if the named class is to have assertions enabled when (and if) it is 
       initialized, false if the class is to have assertions disabled. 

*java.lang.ClassLoader.setDefaultAssertionStatus(boolean)*

public synchronized void setDefaultAssertionStatus(boolean enabled)

Sets the default assertion status for this class loader. This setting 
determines whether classes loaded by this class loader and initialized in the 
future will have assertions enabled or disabled by default. This setting may be 
overridden on a per-package or per-class basis by invoking 
(|java.lang.ClassLoader|) or (|java.lang.ClassLoader|) . 

    enabled - true if classes loaded by this class loader will henceforth have assertions 
       enabled by default, false if they will have assertions disabled by 
       default. 

*java.lang.ClassLoader.setPackageAssertionStatus(String,boolean)*

public synchronized void setPackageAssertionStatus(
  java.lang.String packageName,
  boolean enabled)

Sets the package default assertion status for the named package. The package 
default assertion status determines the assertion status for classes 
initialized in the future that belong to the named package or any of its 
"subpackages". 

A subpackage of a package named p is any package whose name begins with "p.". 
For example, javax.swing.text is a subpackage of javax.swing, and both 
java.util and java.lang.reflect are subpackages of java. 

In the event that multiple package defaults apply to a given class, the package 
default pertaining to the most specific package takes precedence over the 
others. For example, if javax.lang and javax.lang.reflect both have package 
defaults associated with them, the latter package default applies to classes in 
javax.lang.reflect. 

Package defaults take precedence over the class loader's default assertion 
status, and may be overridden on a per-class basis by invoking 
(|java.lang.ClassLoader|) . 

    packageName - The name of the package whose package default assertion status is to be set. A 
       null value indicates the unnamed package that is "current" (Java 
       Language Specification, section 7.4.2). 
    enabled - true if classes loaded by this classloader and belonging to the named package 
       or any of its subpackages will have assertions enabled by default, false 
       if they will have assertions disabled by default. 

*java.lang.ClassLoader.setSigners(Class,Object[])*

protected final void setSigners(
  java.lang.Class c,
  java.lang.Object[] signers)

Sets the signers of a class. This should be invoked after defining a class. 

    c - The Class object 
    signers - The signers for the class 



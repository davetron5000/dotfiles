*javax.naming.InitialContext* *InitialContext* This class is the starting contex

public class InitialContext
  extends    |java.lang.Object|
  implements |javax.naming.Context|

|javax.naming.InitialContext_Description|
|javax.naming.InitialContext_Fields|
|javax.naming.InitialContext_Constructors|
|javax.naming.InitialContext_Methods|

================================================================================

*javax.naming.InitialContext_Fields*
|javax.naming.Context_javax.naming.InitialContext.defaultInitCtx|
|boolean_javax.naming.InitialContext.gotDefault|
|java.util.Hashtable_javax.naming.InitialContext.myProps|

*javax.naming.InitialContext_Constructors*
|javax.naming.InitialContext()|Constructs an initial context.
|javax.naming.InitialContext(boolean)|Constructs an initial context with the op
|javax.naming.InitialContext(Hashtable)|Constructs an initial context using the

*javax.naming.InitialContext_Methods*
|javax.naming.InitialContext.addToEnvironment(String,Object)|
|javax.naming.InitialContext.bind(Name,Object)|
|javax.naming.InitialContext.bind(String,Object)|
|javax.naming.InitialContext.close()|
|javax.naming.InitialContext.composeName(Name,Name)|Composes the name of this c
|javax.naming.InitialContext.composeName(String,String)|Composes the name of th
|javax.naming.InitialContext.createSubcontext(Name)|
|javax.naming.InitialContext.createSubcontext(String)|
|javax.naming.InitialContext.destroySubcontext(Name)|
|javax.naming.InitialContext.destroySubcontext(String)|
|javax.naming.InitialContext.getDefaultInitCtx()|Retrieves the initial context 
|javax.naming.InitialContext.getEnvironment()|
|javax.naming.InitialContext.getNameInNamespace()|
|javax.naming.InitialContext.getNameParser(Name)|
|javax.naming.InitialContext.getNameParser(String)|
|javax.naming.InitialContext.getURLOrDefaultInitCtx(Name)|Retrieves a context f
|javax.naming.InitialContext.getURLOrDefaultInitCtx(String)|Retrieves a context
|javax.naming.InitialContext.init(Hashtable)|Initializes the initial context us
|javax.naming.InitialContext.list(Name)|
|javax.naming.InitialContext.list(String)|
|javax.naming.InitialContext.listBindings(Name)|
|javax.naming.InitialContext.listBindings(String)|
|javax.naming.InitialContext.lookup(Name)|
|javax.naming.InitialContext.lookup(String)|
|javax.naming.InitialContext.lookupLink(Name)|
|javax.naming.InitialContext.lookupLink(String)|
|javax.naming.InitialContext.rebind(Name,Object)|
|javax.naming.InitialContext.rebind(String,Object)|
|javax.naming.InitialContext.removeFromEnvironment(String)|
|javax.naming.InitialContext.rename(Name,Name)|
|javax.naming.InitialContext.rename(String,String)|
|javax.naming.InitialContext.unbind(Name)|
|javax.naming.InitialContext.unbind(String)|

*javax.naming.InitialContext_Description*

This class is the starting context for performing naming operations. 

All naming operations are relative to a context. The initial context implements 
the Context interface and provides the starting point for resolution of names. 

When the initial context is constructed, its environment is initialized with 
properties defined in the environment parameter passed to the constructor, and 
in any application resource files. In addition, a small number of standard JNDI 
properties may be specified as system properties or as applet parameters 
(through the use of (|javax.naming.Context|) ). These special properties are 
listed in the field detail sections of the Context and LdapContext interface 
documentation. 

JNDI determines each property's value by merging the values from the following 
two sources, in order: 

The first occurrence of the property from the constructor's environment 
parameter and (for appropriate properties) the applet parameters and system 
properties. 

The application resource files (jndi.properties). 

For each property found in both of these two sources, or in more than one 
application resource file, the property's value is determined as follows. If 
the property is one of the standard JNDI properties that specify a list of JNDI 
factories (see Context), all of the values are concatenated into a single 
colon-separated list. For other properties, only the first value found is used. 

The initial context implementation is determined at runtime. The default policy 
uses the environment property " 
java.naming.factory.initial(|javax.naming.Context|) ", which contains the class 
name of the initial context factory. An exception to this policy is made when 
resolving URL strings, as described below. 

When a URL string (a String of the form scheme_id:rest_of_name) is passed as a 
name parameter to any method, a URL context factory for handling that scheme is 
located and used to resolve the URL. If no such factory is found, the initial 
context specified by "java.naming.factory.initial" is used. Similarly, when a 
CompositeName object whose first component is a URL string is passed as a name 
parameter to any method, a URL context factory is located and used to resolve 
the first name component. See 
<tt>NamingManager.getURLContext()</tt>(|javax.naming.spi.NamingManager|) for a 
description of how URL context factories are located. 

This default policy of locating the initial context and URL context factories 
may be overridden by calling NamingManager.setInitialContextFactoryBuilder(). 

NoInitialContextException is thrown when an initial context cannot be 
instantiated. This exception can be thrown during any interaction with the 
InitialContext, not only when the InitialContext is constructed. For example, 
the implementation of the initial context might lazily retrieve the context 
only when actual methods are invoked on it. The application should not have any 
dependency on when the existence of an initial context is determined. 

When the environment property "java.naming.factory.initial" is non-null, the 
InitialContext constructor will attempt to create the initial context specified 
therein. At that time, the initial context factory involved might throw an 
exception if a problem is encountered. However, it is provider 
implementation-dependent when it verifies and indicates to the users of the 
initial context any environment property- or connection- related problems. It 
can do so lazily--delaying until an operation is performed on the context, or 
eagerly, at the time the context is constructed. 

An InitialContext instance is not synchronized against concurrent access by 
multiple threads. Multiple threads each manipulating a different InitialContext 
instance need not synchronize. Threads that need to access a single 
InitialContext instance concurrently should synchronize amongst themselves and 
provide the necessary locking. 


*javax.naming.Context_javax.naming.InitialContext.defaultInitCtx*

This class is the starting context for performing naming operations. 

All naming operations are relative to a context. The initial context implements 
the Context interface and provides the starting point for resolution of names. 

When the initial context is constructed, its environment is initialized with 
properties defined in the environment parameter passed to the constructor, and 
in any application resource files. In addition, a small number of standard JNDI 
properties may be specified as system properties or as applet parameters 
(through the use of (|javax.naming.Context|) ). These special properties are 
listed in the field detail sections of the Context and LdapContext interface 
documentation. 

JNDI determines each property's value by merging the values from the following 
two sources, in order: 

The first occurrence of the property from the constructor's environment 
parameter and (for appropriate properties) the applet parameters and system 
properties. 

The application resource files (jndi.properties). 

For each property found in both of these two sources, or in more than one 
application resource file, the property's value is determined as follows. If 
the property is one of the standard JNDI properties that specify a list of JNDI 
factories (see Context), all of the values are concatenated into a single 
colon-separated list. For other properties, only the first value found is used. 

The initial context implementation is determined at runtime. The default policy 
uses the environment property " 
java.naming.factory.initial(|javax.naming.Context|) ", which contains the class 
name of the initial context factory. An exception to this policy is made when 
resolving URL strings, as described below. 

When a URL string (a String of the form scheme_id:rest_of_name) is passed as a 
name parameter to any method, a URL context factory for handling that scheme is 
located and used to resolve the URL. If no such factory is found, the initial 
context specified by "java.naming.factory.initial" is used. Similarly, when a 
CompositeName object whose first component is a URL string is passed as a name 
parameter to any method, a URL context factory is located and used to resolve 
the first name component. See 
<tt>NamingManager.getURLContext()</tt>(|javax.naming.spi.NamingManager|) for a 
description of how URL context factories are located. 

This default policy of locating the initial context and URL context factories 
may be overridden by calling NamingManager.setInitialContextFactoryBuilder(). 

NoInitialContextException is thrown when an initial context cannot be 
instantiated. This exception can be thrown during any interaction with the 
InitialContext, not only when the InitialContext is constructed. For example, 
the implementation of the initial context might lazily retrieve the context 
only when actual methods are invoked on it. The application should not have any 
dependency on when the existence of an initial context is determined. 

When the environment property "java.naming.factory.initial" is non-null, the 
InitialContext constructor will attempt to create the initial context specified 
therein. At that time, the initial context factory involved might throw an 
exception if a problem is encountered. However, it is provider 
implementation-dependent when it verifies and indicates to the users of the 
initial context any environment property- or connection- related problems. It 
can do so lazily--delaying until an operation is performed on the context, or 
eagerly, at the time the context is constructed. 

An InitialContext instance is not synchronized against concurrent access by 
multiple threads. Multiple threads each manipulating a different InitialContext 
instance need not synchronize. Threads that need to access a single 
InitialContext instance concurrently should synchronize amongst themselves and 
provide the necessary locking. 


*boolean_javax.naming.InitialContext.gotDefault*

This class is the starting context for performing naming operations. 

All naming operations are relative to a context. The initial context implements 
the Context interface and provides the starting point for resolution of names. 

When the initial context is constructed, its environment is initialized with 
properties defined in the environment parameter passed to the constructor, and 
in any application resource files. In addition, a small number of standard JNDI 
properties may be specified as system properties or as applet parameters 
(through the use of (|javax.naming.Context|) ). These special properties are 
listed in the field detail sections of the Context and LdapContext interface 
documentation. 

JNDI determines each property's value by merging the values from the following 
two sources, in order: 

The first occurrence of the property from the constructor's environment 
parameter and (for appropriate properties) the applet parameters and system 
properties. 

The application resource files (jndi.properties). 

For each property found in both of these two sources, or in more than one 
application resource file, the property's value is determined as follows. If 
the property is one of the standard JNDI properties that specify a list of JNDI 
factories (see Context), all of the values are concatenated into a single 
colon-separated list. For other properties, only the first value found is used. 

The initial context implementation is determined at runtime. The default policy 
uses the environment property " 
java.naming.factory.initial(|javax.naming.Context|) ", which contains the class 
name of the initial context factory. An exception to this policy is made when 
resolving URL strings, as described below. 

When a URL string (a String of the form scheme_id:rest_of_name) is passed as a 
name parameter to any method, a URL context factory for handling that scheme is 
located and used to resolve the URL. If no such factory is found, the initial 
context specified by "java.naming.factory.initial" is used. Similarly, when a 
CompositeName object whose first component is a URL string is passed as a name 
parameter to any method, a URL context factory is located and used to resolve 
the first name component. See 
<tt>NamingManager.getURLContext()</tt>(|javax.naming.spi.NamingManager|) for a 
description of how URL context factories are located. 

This default policy of locating the initial context and URL context factories 
may be overridden by calling NamingManager.setInitialContextFactoryBuilder(). 

NoInitialContextException is thrown when an initial context cannot be 
instantiated. This exception can be thrown during any interaction with the 
InitialContext, not only when the InitialContext is constructed. For example, 
the implementation of the initial context might lazily retrieve the context 
only when actual methods are invoked on it. The application should not have any 
dependency on when the existence of an initial context is determined. 

When the environment property "java.naming.factory.initial" is non-null, the 
InitialContext constructor will attempt to create the initial context specified 
therein. At that time, the initial context factory involved might throw an 
exception if a problem is encountered. However, it is provider 
implementation-dependent when it verifies and indicates to the users of the 
initial context any environment property- or connection- related problems. It 
can do so lazily--delaying until an operation is performed on the context, or 
eagerly, at the time the context is constructed. 

An InitialContext instance is not synchronized against concurrent access by 
multiple threads. Multiple threads each manipulating a different InitialContext 
instance need not synchronize. Threads that need to access a single 
InitialContext instance concurrently should synchronize amongst themselves and 
provide the necessary locking. 


*java.util.Hashtable_javax.naming.InitialContext.myProps*

This class is the starting context for performing naming operations. 

All naming operations are relative to a context. The initial context implements 
the Context interface and provides the starting point for resolution of names. 

When the initial context is constructed, its environment is initialized with 
properties defined in the environment parameter passed to the constructor, and 
in any application resource files. In addition, a small number of standard JNDI 
properties may be specified as system properties or as applet parameters 
(through the use of (|javax.naming.Context|) ). These special properties are 
listed in the field detail sections of the Context and LdapContext interface 
documentation. 

JNDI determines each property's value by merging the values from the following 
two sources, in order: 

The first occurrence of the property from the constructor's environment 
parameter and (for appropriate properties) the applet parameters and system 
properties. 

The application resource files (jndi.properties). 

For each property found in both of these two sources, or in more than one 
application resource file, the property's value is determined as follows. If 
the property is one of the standard JNDI properties that specify a list of JNDI 
factories (see Context), all of the values are concatenated into a single 
colon-separated list. For other properties, only the first value found is used. 

The initial context implementation is determined at runtime. The default policy 
uses the environment property " 
java.naming.factory.initial(|javax.naming.Context|) ", which contains the class 
name of the initial context factory. An exception to this policy is made when 
resolving URL strings, as described below. 

When a URL string (a String of the form scheme_id:rest_of_name) is passed as a 
name parameter to any method, a URL context factory for handling that scheme is 
located and used to resolve the URL. If no such factory is found, the initial 
context specified by "java.naming.factory.initial" is used. Similarly, when a 
CompositeName object whose first component is a URL string is passed as a name 
parameter to any method, a URL context factory is located and used to resolve 
the first name component. See 
<tt>NamingManager.getURLContext()</tt>(|javax.naming.spi.NamingManager|) for a 
description of how URL context factories are located. 

This default policy of locating the initial context and URL context factories 
may be overridden by calling NamingManager.setInitialContextFactoryBuilder(). 

NoInitialContextException is thrown when an initial context cannot be 
instantiated. This exception can be thrown during any interaction with the 
InitialContext, not only when the InitialContext is constructed. For example, 
the implementation of the initial context might lazily retrieve the context 
only when actual methods are invoked on it. The application should not have any 
dependency on when the existence of an initial context is determined. 

When the environment property "java.naming.factory.initial" is non-null, the 
InitialContext constructor will attempt to create the initial context specified 
therein. At that time, the initial context factory involved might throw an 
exception if a problem is encountered. However, it is provider 
implementation-dependent when it verifies and indicates to the users of the 
initial context any environment property- or connection- related problems. It 
can do so lazily--delaying until an operation is performed on the context, or 
eagerly, at the time the context is constructed. 

An InitialContext instance is not synchronized against concurrent access by 
multiple threads. Multiple threads each manipulating a different InitialContext 
instance need not synchronize. Threads that need to access a single 
InitialContext instance concurrently should synchronize amongst themselves and 
provide the necessary locking. 



*javax.naming.InitialContext()*

public InitialContext()
  throws |javax.naming.NamingException|
         
Constructs an initial context. No environment properties are supplied. 
Equivalent to new InitialContext(null). 


*javax.naming.InitialContext(boolean)*

protected InitialContext(boolean lazy)
  throws |javax.naming.NamingException|
         
Constructs an initial context with the option of not initializing it. This may 
be used by a constructor in a subclass when the value of the environment 
parameter is not yet known at the time the InitialContext constructor is 
called. The subclass's constructor will call this constructor, compute the 
value of the environment, and then call init() before returning. 

    lazy - true means do not initialize the initial context; false is equivalent to 
       calling new InitialContext() 

*javax.naming.InitialContext(Hashtable)*

public InitialContext(java.util.Hashtable environment)
  throws |javax.naming.NamingException|
         
Constructs an initial context using the supplied environment. Environment 
properties are discussed in the class description. 

This constructor will not modify environment or save a reference to it, but may 
save a clone. 

    environment - environment used to create the initial context. Null indicates an empty 
       environment. 

*javax.naming.InitialContext.addToEnvironment(String,Object)*

public |java.lang.Object| addToEnvironment(
  java.lang.String propName,
  java.lang.Object propVal)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.bind(Name,Object)*

public void bind(
  javax.naming.Name name,
  java.lang.Object obj)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.bind(String,Object)*

public void bind(
  java.lang.String name,
  java.lang.Object obj)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.close()*

public void close()
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.composeName(Name,Name)*

public |javax.naming.Name| composeName(
  javax.naming.Name name,
  javax.naming.Name prefix)
  throws |javax.naming.NamingException|
         
Composes the name of this context with a name relative to this context. Since 
an initial context may never be named relative to any context other than 
itself, the value of the prefix parameter must be an empty name. 


*javax.naming.InitialContext.composeName(String,String)*

public |java.lang.String| composeName(
  java.lang.String name,
  java.lang.String prefix)
  throws |javax.naming.NamingException|
         
Composes the name of this context with a name relative to this context. Since 
an initial context may never be named relative to any context other than 
itself, the value of the prefix parameter must be an empty name (""). 


*javax.naming.InitialContext.createSubcontext(Name)*

public |javax.naming.Context| createSubcontext(javax.naming.Name name)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.createSubcontext(String)*

public |javax.naming.Context| createSubcontext(java.lang.String name)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.destroySubcontext(Name)*

public void destroySubcontext(javax.naming.Name name)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.destroySubcontext(String)*

public void destroySubcontext(java.lang.String name)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.getDefaultInitCtx()*

protected |javax.naming.Context| getDefaultInitCtx()
  throws |javax.naming.NamingException|
         
Retrieves the initial context by calling NamingManager.getInitialContext() and 
cache it in defaultInitCtx. Set gotDefault so that we know we've tried this 
before. 


    Returns: The non-null cached initial context. 
*javax.naming.InitialContext.getEnvironment()*

public |java.util.Hashtable| getEnvironment()
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.getNameInNamespace()*

public |java.lang.String| getNameInNamespace()
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.getNameParser(Name)*

public |javax.naming.NameParser| getNameParser(javax.naming.Name name)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.getNameParser(String)*

public |javax.naming.NameParser| getNameParser(java.lang.String name)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.getURLOrDefaultInitCtx(Name)*

protected |javax.naming.Context| getURLOrDefaultInitCtx(javax.naming.Name name)
  throws |javax.naming.NamingException|
         
Retrieves a context for resolving name. If the first component of name name is 
a URL string, then attempt to find a URL context for it. If none is found, or 
if the first component of name is not a URL string, then return 
getDefaultInitCtx(). 

When creating a subclass of InitialContext, use this method as follows. Define 
a new method that uses this method to get an initial context of the desired 
subclass. 

protected XXXContext getURLOrDefaultInitXXXCtx(Name name) throws 
NamingException { Context answer = getURLOrDefaultInitCtx(name); if (!(answer 
instanceof XXXContext)) { if (answer == null) { throw new 
NoInitialContextException(); } else { throw new NotContextException("Not an 
XXXContext"); } } return (XXXContext)answer; } 

When providing implementations for the new methods in the subclass, use this 
newly defined method to get the initial context. 

public Object XXXMethod1(Name name, ...) { throws NamingException { return 
getURLOrDefaultInitXXXCtx(name).XXXMethod1(name, ...); } 

    name - The non-null name for which to get the context. 

    Returns: A URL context for name or the cached initial context. The result cannot be 
             null. 
*javax.naming.InitialContext.getURLOrDefaultInitCtx(String)*

protected |javax.naming.Context| getURLOrDefaultInitCtx(java.lang.String name)
  throws |javax.naming.NamingException|
         
Retrieves a context for resolving the string name name. If name name is a URL 
string, then attempt to find a URL context for it. If none is found, or if name 
is not a URL string, then return getDefaultInitCtx(). 

See getURLOrDefaultInitCtx(Name) for description of how a subclass should use 
this method. 

    name - The non-null name for which to get the context. 

    Returns: A URL context for name or the cached initial context. The result cannot be 
             null. 
*javax.naming.InitialContext.init(Hashtable)*

protected void init(java.util.Hashtable environment)
  throws |javax.naming.NamingException|
         
Initializes the initial context using the supplied environment. Environment 
properties are discussed in the class description. 

This method will modify environment and save a reference to it. The caller may 
no longer modify it. 

    environment - environment used to create the initial context. Null indicates an empty 
       environment. 

*javax.naming.InitialContext.list(Name)*

public |javax.naming.NamingEnumeration| list(javax.naming.Name name)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.list(String)*

public |javax.naming.NamingEnumeration| list(java.lang.String name)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.listBindings(Name)*

public |javax.naming.NamingEnumeration| listBindings(javax.naming.Name name)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.listBindings(String)*

public |javax.naming.NamingEnumeration| listBindings(java.lang.String name)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.lookup(Name)*

public |java.lang.Object| lookup(javax.naming.Name name)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.lookup(String)*

public |java.lang.Object| lookup(java.lang.String name)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.lookupLink(Name)*

public |java.lang.Object| lookupLink(javax.naming.Name name)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.lookupLink(String)*

public |java.lang.Object| lookupLink(java.lang.String name)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.rebind(Name,Object)*

public void rebind(
  javax.naming.Name name,
  java.lang.Object obj)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.rebind(String,Object)*

public void rebind(
  java.lang.String name,
  java.lang.Object obj)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.removeFromEnvironment(String)*

public |java.lang.Object| removeFromEnvironment(java.lang.String propName)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.rename(Name,Name)*

public void rename(
  javax.naming.Name oldName,
  javax.naming.Name newName)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.rename(String,String)*

public void rename(
  java.lang.String oldName,
  java.lang.String newName)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.unbind(Name)*

public void unbind(javax.naming.Name name)
  throws |javax.naming.NamingException|
         



*javax.naming.InitialContext.unbind(String)*

public void unbind(java.lang.String name)
  throws |javax.naming.NamingException|
         





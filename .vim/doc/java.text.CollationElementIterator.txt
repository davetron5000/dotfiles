*java.text.CollationElementIterator* *CollationElementIterator* The CollationEle

public final class CollationElementIterator
  extends    |java.lang.Object|

|java.text.CollationElementIterator_Description|
|java.text.CollationElementIterator_Fields|
|java.text.CollationElementIterator_Constructors|
|java.text.CollationElementIterator_Methods|

================================================================================

*java.text.CollationElementIterator_Fields*
|int_java.text.CollationElementIterator.NULLORDER|

*java.text.CollationElementIterator_Methods*
|java.text.CollationElementIterator.getMaxExpansion(int)|Return the maximum len
|java.text.CollationElementIterator.getOffset()|Returns the character offset in
|java.text.CollationElementIterator.next()|Get the next collation element in th
|java.text.CollationElementIterator.previous()|Get the previous collation eleme
|java.text.CollationElementIterator.primaryOrder(int)|Return the primary compon
|java.text.CollationElementIterator.reset()|Resets the cursor to the beginning 
|java.text.CollationElementIterator.secondaryOrder(int)|Return the secondary co
|java.text.CollationElementIterator.setOffset(int)|Sets the iterator to point t
|java.text.CollationElementIterator.setText(CharacterIterator)|Set a new string
|java.text.CollationElementIterator.setText(String)|Set a new string over which
|java.text.CollationElementIterator.tertiaryOrder(int)|Return the tertiary comp

*java.text.CollationElementIterator_Description*

The CollationElementIterator class is used as an iterator to walk through each 
character of an international string. Use the iterator to return the ordering 
priority of the positioned character. The ordering priority of a character, 
which we refer to as a key, defines how a character is collated in the given 
collation object. 

For example, consider the following in Spanish: 



"ca" -> the first key is key('c') and second key is key('a'). "cha" -> the 
first key is key('ch') and second key is key('a'). 

And in German, 



"Šb"-> the first key is key('a'), the second key is key('e'), and the third key 
is key('b'). 

The key of a character is an integer composed of primary order(short), 
secondary order(byte), and tertiary order(byte). Java strictly defines the size 
and signedness of its primitive data types. Therefore, the static functions 
primaryOrder, secondaryOrder, and tertiaryOrder return int, short, and short 
respectively to ensure the correctness of the key value. 

Example of the iterator usage, 



String testString = "This is a test"; RuleBasedCollator ruleBasedCollator = 
(RuleBasedCollator)Collator.getInstance(); CollationElementIterator 
collationElementIterator = 
ruleBasedCollator.getCollationElementIterator(testString); int primaryOrder = 
CollationElementIterator.primaryOrder(collationElementIterator.next()); 



CollationElementIterator.next returns the collation order of the next 
character. A collation order consists of primary order, secondary order and 
tertiary order. The data type of the collation order is int. The first 16 bits 
of a collation order is its primary order; the next 8 bits is the secondary 
order and the last 8 bits is the tertiary order. 


*int_java.text.CollationElementIterator.NULLORDER*

The CollationElementIterator class is used as an iterator to walk through each 
character of an international string. Use the iterator to return the ordering 
priority of the positioned character. The ordering priority of a character, 
which we refer to as a key, defines how a character is collated in the given 
collation object. 

For example, consider the following in Spanish: 



"ca" -> the first key is key('c') and second key is key('a'). "cha" -> the 
first key is key('ch') and second key is key('a'). 

And in German, 



"Šb"-> the first key is key('a'), the second key is key('e'), and the third key 
is key('b'). 

The key of a character is an integer composed of primary order(short), 
secondary order(byte), and tertiary order(byte). Java strictly defines the size 
and signedness of its primitive data types. Therefore, the static functions 
primaryOrder, secondaryOrder, and tertiaryOrder return int, short, and short 
respectively to ensure the correctness of the key value. 

Example of the iterator usage, 



String testString = "This is a test"; RuleBasedCollator ruleBasedCollator = 
(RuleBasedCollator)Collator.getInstance(); CollationElementIterator 
collationElementIterator = 
ruleBasedCollator.getCollationElementIterator(testString); int primaryOrder = 
CollationElementIterator.primaryOrder(collationElementIterator.next()); 



CollationElementIterator.next returns the collation order of the next 
character. A collation order consists of primary order, secondary order and 
tertiary order. The data type of the collation order is int. The first 16 bits 
of a collation order is its primary order; the next 8 bits is the secondary 
order and the last 8 bits is the tertiary order. 



*java.text.CollationElementIterator.getMaxExpansion(int)*

public int getMaxExpansion(int order)

Return the maximum length of any expansion sequences that end with the 
specified comparison order. 

    order - a collation order returned by previous or next. 

    Returns: the maximum length of any expansion sequences ending with the specified order. 
*java.text.CollationElementIterator.getOffset()*

public int getOffset()

Returns the character offset in the original text corresponding to the next 
collation element. (That is, getOffset() returns the position in the text 
corresponding to the collation element that will be returned by the next call 
to next().) This value will always be the index of the FIRST character 
corresponding to the collation element (a contracting character sequence is 
when two or more characters all correspond to the same collation element). This 
means if you do setOffset(x) followed immediately by getOffset(), getOffset() 
won't necessarily return x. 


    Returns: The character offset in the original text corresponding to the collation 
             element that will be returned by the next call to next(). 
*java.text.CollationElementIterator.next()*

public int next()

Get the next collation element in the string. This iterator iterates over a 
sequence of collation elements that were built from the string. Because there 
isn't necessarily a one-to-one mapping from characters to collation elements, 
this doesn't mean the same thing as "return the collation element [or ordering 
priority] of the next character in the string". This function returns the 
collation element that the iterator is currently pointing to and then updates 
the internal pointer to point to the next element. previous() updates the 
pointer first and then returns the element. This means that when you change 
direction while iterating (i.e., call next() and then call previous(), or call 
previous() and then call next()), you'll get back the same element twice. 


*java.text.CollationElementIterator.previous()*

public int previous()

Get the previous collation element in the string. This iterator iterates over a 
sequence of collation elements that were built from the string. Because there 
isn't necessarily a one-to-one mapping from characters to collation elements, 
this doesn't mean the same thing as "return the collation element [or ordering 
priority] of the previous character in the string". This function updates the 
iterator's internal pointer to point to the collation element preceding the one 
it's currently pointing to and then returns that element, while next() returns 
the current element and then updates the pointer. This means that when you 
change direction while iterating (i.e., call next() and then call previous(), 
or call previous() and then call next()), you'll get back the same element 
twice. 


*java.text.CollationElementIterator.primaryOrder(int)*

public static final int primaryOrder(int order)

Return the primary component of a collation element. 

    order - the collation element 

    Returns: the element's primary component 
*java.text.CollationElementIterator.reset()*

public void reset()

Resets the cursor to the beginning of the string. The next call to next() will 
return the first collation element in the string. 


*java.text.CollationElementIterator.secondaryOrder(int)*

public static final short secondaryOrder(int order)

Return the secondary component of a collation element. 

    order - the collation element 

    Returns: the element's secondary component 
*java.text.CollationElementIterator.setOffset(int)*

public void setOffset(int newOffset)

Sets the iterator to point to the collation element corresponding to the 
specified character (the parameter is a CHARACTER offset in the original 
string, not an offset into its corresponding sequence of collation elements). 
The value returned by the next call to next() will be the collation element 
corresponding to the specified position in the text. If that position is in the 
middle of a contracting character sequence, the result of the next call to 
next() is the collation element for that sequence. This means that getOffset() 
is not guaranteed to return the same value as was passed to a preceding call to 
setOffset(). 

    newOffset - The new character offset into the original text. 

*java.text.CollationElementIterator.setText(CharacterIterator)*

public void setText(java.text.CharacterIterator source)

Set a new string over which to iterate. 

    source - the new source text. 

*java.text.CollationElementIterator.setText(String)*

public void setText(java.lang.String source)

Set a new string over which to iterate. 

    source - the new source text 

*java.text.CollationElementIterator.tertiaryOrder(int)*

public static final short tertiaryOrder(int order)

Return the tertiary component of a collation element. 

    order - the collation element 

    Returns: the element's tertiary component 


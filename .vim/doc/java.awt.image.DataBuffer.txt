*java.awt.image.DataBuffer* *DataBuffer* This class exists to wrap one or more d

public abstract class DataBuffer
  extends    |java.lang.Object|

|java.awt.image.DataBuffer_Description|
|java.awt.image.DataBuffer_Fields|
|java.awt.image.DataBuffer_Constructors|
|java.awt.image.DataBuffer_Methods|

================================================================================

*java.awt.image.DataBuffer_Fields*
|int_java.awt.image.DataBuffer.banks|
|int_java.awt.image.DataBuffer.dataType|
|int_java.awt.image.DataBuffer.offset|
|int[]_java.awt.image.DataBuffer.offsets|
|int_java.awt.image.DataBuffer.size|
|int_java.awt.image.DataBuffer.TYPE_BYTE|
|int_java.awt.image.DataBuffer.TYPE_DOUBLE|
|int_java.awt.image.DataBuffer.TYPE_FLOAT|
|int_java.awt.image.DataBuffer.TYPE_INT|
|int_java.awt.image.DataBuffer.TYPE_SHORT|
|int_java.awt.image.DataBuffer.TYPE_UNDEFINED|
|int_java.awt.image.DataBuffer.TYPE_USHORT|

*java.awt.image.DataBuffer_Constructors*
|java.awt.image.DataBuffer(int,int)|Constructs a DataBuffer containing one bank
|java.awt.image.DataBuffer(int,int,int)|Constructs a DataBuffer containing the 
|java.awt.image.DataBuffer(int,int,int,int)|Constructs a DataBuffer that contai
|java.awt.image.DataBuffer(int,int,int,int[])|Constructs a DataBuffer which con

*java.awt.image.DataBuffer_Methods*
|java.awt.image.DataBuffer.getDataType()|Returns the data type of this DataBuff
|java.awt.image.DataBuffer.getDataTypeSize(int)|Returns the size (in bits) of t
|java.awt.image.DataBuffer.getElem(int)|Returns the requested data array elemen
|java.awt.image.DataBuffer.getElem(int,int)|Returns the requested data array el
|java.awt.image.DataBuffer.getElemDouble(int)|Returns the requested data array 
|java.awt.image.DataBuffer.getElemDouble(int,int)|Returns the requested data ar
|java.awt.image.DataBuffer.getElemFloat(int)|Returns the requested data array e
|java.awt.image.DataBuffer.getElemFloat(int,int)|Returns the requested data arr
|java.awt.image.DataBuffer.getNumBanks()|Returns the number of banks in this Da
|java.awt.image.DataBuffer.getOffset()|Returns the offset of the default bank i
|java.awt.image.DataBuffer.getOffsets()|Returns the offsets (in array elements)
|java.awt.image.DataBuffer.getSize()|Returns the size (in array elements) of al
|java.awt.image.DataBuffer.setElem(int,int)|Sets the requested data array eleme
|java.awt.image.DataBuffer.setElem(int,int,int)|Sets the requested data array e
|java.awt.image.DataBuffer.setElemDouble(int,double)|Sets the requested data ar
|java.awt.image.DataBuffer.setElemDouble(int,int,double)|Sets the requested dat
|java.awt.image.DataBuffer.setElemFloat(int,float)|Sets the requested data arra
|java.awt.image.DataBuffer.setElemFloat(int,int,float)|Sets the requested data 

*java.awt.image.DataBuffer_Description*

This class exists to wrap one or more data arrays. Each data array in the 
DataBuffer is referred to as a bank. Accessor methods for getting and setting 
elements of the DataBuffer's banks exist with and without a bank specifier. The 
methods without a bank specifier use the default 0th bank. The DataBuffer can 
optionally take an offset per bank, so that data in an existing array can be 
used even if the interesting data doesn't start at array location zero. Getting 
or setting the 0th element of a bank, uses the (0+offset)th element of the 
array. The size field specifies how much of the data array is available for 
use. Size + offset for a given bank should never be greater than the length of 
the associated data array. The data type of a data buffer indicates the type of 
the data array(s) and may also indicate additional semantics, e.g. storing 
unsigned 8-bit data in elements of a byte array. The data type may be 
TYPE_UNDEFINED or one of the types defined below. Other types may be added in 
the future. Generally, an object of class DataBuffer will be cast down to one 
of its data type specific subclasses to access data type specific methods for 
improved performance. Currently, the Java 2D(tm) API image classes use 
TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT, TYPE_FLOAT, and TYPE_DOUBLE 
DataBuffers to store image data. 


*int_java.awt.image.DataBuffer.banks*

This class exists to wrap one or more data arrays. Each data array in the 
DataBuffer is referred to as a bank. Accessor methods for getting and setting 
elements of the DataBuffer's banks exist with and without a bank specifier. The 
methods without a bank specifier use the default 0th bank. The DataBuffer can 
optionally take an offset per bank, so that data in an existing array can be 
used even if the interesting data doesn't start at array location zero. Getting 
or setting the 0th element of a bank, uses the (0+offset)th element of the 
array. The size field specifies how much of the data array is available for 
use. Size + offset for a given bank should never be greater than the length of 
the associated data array. The data type of a data buffer indicates the type of 
the data array(s) and may also indicate additional semantics, e.g. storing 
unsigned 8-bit data in elements of a byte array. The data type may be 
TYPE_UNDEFINED or one of the types defined below. Other types may be added in 
the future. Generally, an object of class DataBuffer will be cast down to one 
of its data type specific subclasses to access data type specific methods for 
improved performance. Currently, the Java 2D(tm) API image classes use 
TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT, TYPE_FLOAT, and TYPE_DOUBLE 
DataBuffers to store image data. 


*int_java.awt.image.DataBuffer.dataType*

This class exists to wrap one or more data arrays. Each data array in the 
DataBuffer is referred to as a bank. Accessor methods for getting and setting 
elements of the DataBuffer's banks exist with and without a bank specifier. The 
methods without a bank specifier use the default 0th bank. The DataBuffer can 
optionally take an offset per bank, so that data in an existing array can be 
used even if the interesting data doesn't start at array location zero. Getting 
or setting the 0th element of a bank, uses the (0+offset)th element of the 
array. The size field specifies how much of the data array is available for 
use. Size + offset for a given bank should never be greater than the length of 
the associated data array. The data type of a data buffer indicates the type of 
the data array(s) and may also indicate additional semantics, e.g. storing 
unsigned 8-bit data in elements of a byte array. The data type may be 
TYPE_UNDEFINED or one of the types defined below. Other types may be added in 
the future. Generally, an object of class DataBuffer will be cast down to one 
of its data type specific subclasses to access data type specific methods for 
improved performance. Currently, the Java 2D(tm) API image classes use 
TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT, TYPE_FLOAT, and TYPE_DOUBLE 
DataBuffers to store image data. 


*int_java.awt.image.DataBuffer.offset*

This class exists to wrap one or more data arrays. Each data array in the 
DataBuffer is referred to as a bank. Accessor methods for getting and setting 
elements of the DataBuffer's banks exist with and without a bank specifier. The 
methods without a bank specifier use the default 0th bank. The DataBuffer can 
optionally take an offset per bank, so that data in an existing array can be 
used even if the interesting data doesn't start at array location zero. Getting 
or setting the 0th element of a bank, uses the (0+offset)th element of the 
array. The size field specifies how much of the data array is available for 
use. Size + offset for a given bank should never be greater than the length of 
the associated data array. The data type of a data buffer indicates the type of 
the data array(s) and may also indicate additional semantics, e.g. storing 
unsigned 8-bit data in elements of a byte array. The data type may be 
TYPE_UNDEFINED or one of the types defined below. Other types may be added in 
the future. Generally, an object of class DataBuffer will be cast down to one 
of its data type specific subclasses to access data type specific methods for 
improved performance. Currently, the Java 2D(tm) API image classes use 
TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT, TYPE_FLOAT, and TYPE_DOUBLE 
DataBuffers to store image data. 


*int[]_java.awt.image.DataBuffer.offsets*

This class exists to wrap one or more data arrays. Each data array in the 
DataBuffer is referred to as a bank. Accessor methods for getting and setting 
elements of the DataBuffer's banks exist with and without a bank specifier. The 
methods without a bank specifier use the default 0th bank. The DataBuffer can 
optionally take an offset per bank, so that data in an existing array can be 
used even if the interesting data doesn't start at array location zero. Getting 
or setting the 0th element of a bank, uses the (0+offset)th element of the 
array. The size field specifies how much of the data array is available for 
use. Size + offset for a given bank should never be greater than the length of 
the associated data array. The data type of a data buffer indicates the type of 
the data array(s) and may also indicate additional semantics, e.g. storing 
unsigned 8-bit data in elements of a byte array. The data type may be 
TYPE_UNDEFINED or one of the types defined below. Other types may be added in 
the future. Generally, an object of class DataBuffer will be cast down to one 
of its data type specific subclasses to access data type specific methods for 
improved performance. Currently, the Java 2D(tm) API image classes use 
TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT, TYPE_FLOAT, and TYPE_DOUBLE 
DataBuffers to store image data. 


*int_java.awt.image.DataBuffer.size*

This class exists to wrap one or more data arrays. Each data array in the 
DataBuffer is referred to as a bank. Accessor methods for getting and setting 
elements of the DataBuffer's banks exist with and without a bank specifier. The 
methods without a bank specifier use the default 0th bank. The DataBuffer can 
optionally take an offset per bank, so that data in an existing array can be 
used even if the interesting data doesn't start at array location zero. Getting 
or setting the 0th element of a bank, uses the (0+offset)th element of the 
array. The size field specifies how much of the data array is available for 
use. Size + offset for a given bank should never be greater than the length of 
the associated data array. The data type of a data buffer indicates the type of 
the data array(s) and may also indicate additional semantics, e.g. storing 
unsigned 8-bit data in elements of a byte array. The data type may be 
TYPE_UNDEFINED or one of the types defined below. Other types may be added in 
the future. Generally, an object of class DataBuffer will be cast down to one 
of its data type specific subclasses to access data type specific methods for 
improved performance. Currently, the Java 2D(tm) API image classes use 
TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT, TYPE_FLOAT, and TYPE_DOUBLE 
DataBuffers to store image data. 


*int_java.awt.image.DataBuffer.TYPE_BYTE*

This class exists to wrap one or more data arrays. Each data array in the 
DataBuffer is referred to as a bank. Accessor methods for getting and setting 
elements of the DataBuffer's banks exist with and without a bank specifier. The 
methods without a bank specifier use the default 0th bank. The DataBuffer can 
optionally take an offset per bank, so that data in an existing array can be 
used even if the interesting data doesn't start at array location zero. Getting 
or setting the 0th element of a bank, uses the (0+offset)th element of the 
array. The size field specifies how much of the data array is available for 
use. Size + offset for a given bank should never be greater than the length of 
the associated data array. The data type of a data buffer indicates the type of 
the data array(s) and may also indicate additional semantics, e.g. storing 
unsigned 8-bit data in elements of a byte array. The data type may be 
TYPE_UNDEFINED or one of the types defined below. Other types may be added in 
the future. Generally, an object of class DataBuffer will be cast down to one 
of its data type specific subclasses to access data type specific methods for 
improved performance. Currently, the Java 2D(tm) API image classes use 
TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT, TYPE_FLOAT, and TYPE_DOUBLE 
DataBuffers to store image data. 


*int_java.awt.image.DataBuffer.TYPE_DOUBLE*

This class exists to wrap one or more data arrays. Each data array in the 
DataBuffer is referred to as a bank. Accessor methods for getting and setting 
elements of the DataBuffer's banks exist with and without a bank specifier. The 
methods without a bank specifier use the default 0th bank. The DataBuffer can 
optionally take an offset per bank, so that data in an existing array can be 
used even if the interesting data doesn't start at array location zero. Getting 
or setting the 0th element of a bank, uses the (0+offset)th element of the 
array. The size field specifies how much of the data array is available for 
use. Size + offset for a given bank should never be greater than the length of 
the associated data array. The data type of a data buffer indicates the type of 
the data array(s) and may also indicate additional semantics, e.g. storing 
unsigned 8-bit data in elements of a byte array. The data type may be 
TYPE_UNDEFINED or one of the types defined below. Other types may be added in 
the future. Generally, an object of class DataBuffer will be cast down to one 
of its data type specific subclasses to access data type specific methods for 
improved performance. Currently, the Java 2D(tm) API image classes use 
TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT, TYPE_FLOAT, and TYPE_DOUBLE 
DataBuffers to store image data. 


*int_java.awt.image.DataBuffer.TYPE_FLOAT*

This class exists to wrap one or more data arrays. Each data array in the 
DataBuffer is referred to as a bank. Accessor methods for getting and setting 
elements of the DataBuffer's banks exist with and without a bank specifier. The 
methods without a bank specifier use the default 0th bank. The DataBuffer can 
optionally take an offset per bank, so that data in an existing array can be 
used even if the interesting data doesn't start at array location zero. Getting 
or setting the 0th element of a bank, uses the (0+offset)th element of the 
array. The size field specifies how much of the data array is available for 
use. Size + offset for a given bank should never be greater than the length of 
the associated data array. The data type of a data buffer indicates the type of 
the data array(s) and may also indicate additional semantics, e.g. storing 
unsigned 8-bit data in elements of a byte array. The data type may be 
TYPE_UNDEFINED or one of the types defined below. Other types may be added in 
the future. Generally, an object of class DataBuffer will be cast down to one 
of its data type specific subclasses to access data type specific methods for 
improved performance. Currently, the Java 2D(tm) API image classes use 
TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT, TYPE_FLOAT, and TYPE_DOUBLE 
DataBuffers to store image data. 


*int_java.awt.image.DataBuffer.TYPE_INT*

This class exists to wrap one or more data arrays. Each data array in the 
DataBuffer is referred to as a bank. Accessor methods for getting and setting 
elements of the DataBuffer's banks exist with and without a bank specifier. The 
methods without a bank specifier use the default 0th bank. The DataBuffer can 
optionally take an offset per bank, so that data in an existing array can be 
used even if the interesting data doesn't start at array location zero. Getting 
or setting the 0th element of a bank, uses the (0+offset)th element of the 
array. The size field specifies how much of the data array is available for 
use. Size + offset for a given bank should never be greater than the length of 
the associated data array. The data type of a data buffer indicates the type of 
the data array(s) and may also indicate additional semantics, e.g. storing 
unsigned 8-bit data in elements of a byte array. The data type may be 
TYPE_UNDEFINED or one of the types defined below. Other types may be added in 
the future. Generally, an object of class DataBuffer will be cast down to one 
of its data type specific subclasses to access data type specific methods for 
improved performance. Currently, the Java 2D(tm) API image classes use 
TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT, TYPE_FLOAT, and TYPE_DOUBLE 
DataBuffers to store image data. 


*int_java.awt.image.DataBuffer.TYPE_SHORT*

This class exists to wrap one or more data arrays. Each data array in the 
DataBuffer is referred to as a bank. Accessor methods for getting and setting 
elements of the DataBuffer's banks exist with and without a bank specifier. The 
methods without a bank specifier use the default 0th bank. The DataBuffer can 
optionally take an offset per bank, so that data in an existing array can be 
used even if the interesting data doesn't start at array location zero. Getting 
or setting the 0th element of a bank, uses the (0+offset)th element of the 
array. The size field specifies how much of the data array is available for 
use. Size + offset for a given bank should never be greater than the length of 
the associated data array. The data type of a data buffer indicates the type of 
the data array(s) and may also indicate additional semantics, e.g. storing 
unsigned 8-bit data in elements of a byte array. The data type may be 
TYPE_UNDEFINED or one of the types defined below. Other types may be added in 
the future. Generally, an object of class DataBuffer will be cast down to one 
of its data type specific subclasses to access data type specific methods for 
improved performance. Currently, the Java 2D(tm) API image classes use 
TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT, TYPE_FLOAT, and TYPE_DOUBLE 
DataBuffers to store image data. 


*int_java.awt.image.DataBuffer.TYPE_UNDEFINED*

This class exists to wrap one or more data arrays. Each data array in the 
DataBuffer is referred to as a bank. Accessor methods for getting and setting 
elements of the DataBuffer's banks exist with and without a bank specifier. The 
methods without a bank specifier use the default 0th bank. The DataBuffer can 
optionally take an offset per bank, so that data in an existing array can be 
used even if the interesting data doesn't start at array location zero. Getting 
or setting the 0th element of a bank, uses the (0+offset)th element of the 
array. The size field specifies how much of the data array is available for 
use. Size + offset for a given bank should never be greater than the length of 
the associated data array. The data type of a data buffer indicates the type of 
the data array(s) and may also indicate additional semantics, e.g. storing 
unsigned 8-bit data in elements of a byte array. The data type may be 
TYPE_UNDEFINED or one of the types defined below. Other types may be added in 
the future. Generally, an object of class DataBuffer will be cast down to one 
of its data type specific subclasses to access data type specific methods for 
improved performance. Currently, the Java 2D(tm) API image classes use 
TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT, TYPE_FLOAT, and TYPE_DOUBLE 
DataBuffers to store image data. 


*int_java.awt.image.DataBuffer.TYPE_USHORT*

This class exists to wrap one or more data arrays. Each data array in the 
DataBuffer is referred to as a bank. Accessor methods for getting and setting 
elements of the DataBuffer's banks exist with and without a bank specifier. The 
methods without a bank specifier use the default 0th bank. The DataBuffer can 
optionally take an offset per bank, so that data in an existing array can be 
used even if the interesting data doesn't start at array location zero. Getting 
or setting the 0th element of a bank, uses the (0+offset)th element of the 
array. The size field specifies how much of the data array is available for 
use. Size + offset for a given bank should never be greater than the length of 
the associated data array. The data type of a data buffer indicates the type of 
the data array(s) and may also indicate additional semantics, e.g. storing 
unsigned 8-bit data in elements of a byte array. The data type may be 
TYPE_UNDEFINED or one of the types defined below. Other types may be added in 
the future. Generally, an object of class DataBuffer will be cast down to one 
of its data type specific subclasses to access data type specific methods for 
improved performance. Currently, the Java 2D(tm) API image classes use 
TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT, TYPE_FLOAT, and TYPE_DOUBLE 
DataBuffers to store image data. 



*java.awt.image.DataBuffer(int,int)*

protected DataBuffer(
  int dataType,
  int size)

Constructs a DataBuffer containing one bank of the specified data type and 
size. 

    dataType - the data type of this DataBuffer 
    size - the size of the banks 

*java.awt.image.DataBuffer(int,int,int)*

protected DataBuffer(
  int dataType,
  int size,
  int numBanks)

Constructs a DataBuffer containing the specified number of banks. Each bank has 
the specified size and an offset of 0. 

    dataType - the data type of this DataBuffer 
    size - the size of the banks 
    numBanks - the number of banks in this DataBuffer 

*java.awt.image.DataBuffer(int,int,int,int)*

protected DataBuffer(
  int dataType,
  int size,
  int numBanks,
  int offset)

Constructs a DataBuffer that contains the specified number of banks. Each bank 
has the specified datatype, size and offset. 

    dataType - the data type of this DataBuffer 
    size - the size of the banks 
    numBanks - the number of banks in this DataBuffer 
    offset - the offset for each bank 

*java.awt.image.DataBuffer(int,int,int,int[])*

protected DataBuffer(
  int dataType,
  int size,
  int numBanks,
  int[] offsets)

Constructs a DataBuffer which contains the specified number of banks. Each bank 
has the specified datatype and size. The offset for each bank is specified by 
its respective entry in the offsets array. 

    dataType - the data type of this DataBuffer 
    size - the size of the banks 
    numBanks - the number of banks in this DataBuffer 
    offsets - an array containing an offset for each bank. 

*java.awt.image.DataBuffer.getDataType()*

public int getDataType()

Returns the data type of this DataBuffer. 


    Returns: the data type of this DataBuffer. 
*java.awt.image.DataBuffer.getDataTypeSize(int)*

public static int getDataTypeSize(int type)

Returns the size (in bits) of the data type, given a datatype tag. 

    type - the value of one of the defined datatype tags 

    Returns: the size of the data type 
*java.awt.image.DataBuffer.getElem(int)*

public int getElem(int i)

Returns the requested data array element from the first (default) bank as an 
integer. 

    i - the index of the requested data array element 

    Returns: the data array element at the specified index. 
*java.awt.image.DataBuffer.getElem(int,int)*

public abstract int getElem(
  int bank,
  int i)

Returns the requested data array element from the specified bank as an integer. 

    bank - the specified bank 
    i - the index of the requested data array element 

    Returns: the data array element at the specified index from the specified bank at the 
             specified index. 
*java.awt.image.DataBuffer.getElemDouble(int)*

public double getElemDouble(int i)

Returns the requested data array element from the first (default) bank as a 
double. The implementation in this class is to cast 
(|java.awt.image.DataBuffer|) to a double. Subclasses can override this method 
if another implementation is needed. 

    i - the specified index 

    Returns: a double value representing the element at the specified index in the data 
             array. 
*java.awt.image.DataBuffer.getElemDouble(int,int)*

public double getElemDouble(
  int bank,
  int i)

Returns the requested data array element from the specified bank as a double. 
The implementation in this class is to cast getElem(bank, i) to a double. 
Subclasses may override this method if another implementation is needed. 

    bank - the specified bank 
    i - the specified index 

    Returns: a double value representing the element from the specified bank at the 
             specified index in the data array. 
*java.awt.image.DataBuffer.getElemFloat(int)*

public float getElemFloat(int i)

Returns the requested data array element from the first (default) bank as a 
float. The implementation in this class is to cast getElem(i) to a float. 
Subclasses may override this method if another implementation is needed. 

    i - the index of the requested data array element 

    Returns: a float value representing the data array element at the specified index. 
*java.awt.image.DataBuffer.getElemFloat(int,int)*

public float getElemFloat(
  int bank,
  int i)

Returns the requested data array element from the specified bank as a float. 
The implementation in this class is to cast (|java.awt.image.DataBuffer|) to a 
float. Subclasses can override this method if another implementation is needed. 

    bank - the specified bank 
    i - the index of the requested data array element 

    Returns: a float value representing the data array element from the specified bank at 
             the specified index. 
*java.awt.image.DataBuffer.getNumBanks()*

public int getNumBanks()

Returns the number of banks in this DataBuffer. 


    Returns: the number of banks. 
*java.awt.image.DataBuffer.getOffset()*

public int getOffset()

Returns the offset of the default bank in array elements. 


    Returns: the offset of the default bank. 
*java.awt.image.DataBuffer.getOffsets()*

public int getOffsets()

Returns the offsets (in array elements) of all the banks. 


    Returns: the offsets of all banks. 
*java.awt.image.DataBuffer.getSize()*

public int getSize()

Returns the size (in array elements) of all banks. 


    Returns: the size of all banks. 
*java.awt.image.DataBuffer.setElem(int,int)*

public void setElem(
  int i,
  int val)

Sets the requested data array element in the first (default) bank from the 
given integer. 

    i - the specified index into the data array 
    val - the data to set the element at the specified index in the data array 

*java.awt.image.DataBuffer.setElem(int,int,int)*

public abstract void setElem(
  int bank,
  int i,
  int val)

Sets the requested data array element in the specified bank from the given 
integer. 

    bank - the specified bank 
    i - the specified index into the data array 
    val - the data to set the element in the specified bank at the specified index in the 
       data array 

*java.awt.image.DataBuffer.setElemDouble(int,double)*

public void setElemDouble(
  int i,
  double val)

Sets the requested data array element in the first (default) bank from the 
given double. The implementation in this class is to cast val to an int and 
call (|java.awt.image.DataBuffer|) . Subclasses can override this method if 
another implementation is needed. 

    i - the specified index 
    val - the value to set the element at the specified index in the data array 

*java.awt.image.DataBuffer.setElemDouble(int,int,double)*

public void setElemDouble(
  int bank,
  int i,
  double val)

Sets the requested data array element in the specified bank from the given 
double. The implementation in this class is to cast val to an int and call 
(|java.awt.image.DataBuffer|) . Subclasses can override this method if another 
implementation is needed. 

    bank - the specified bank 
    i - the specified index 
    val - the value to set the element in the specified bank at the specified index of 
       the data array 

*java.awt.image.DataBuffer.setElemFloat(int,float)*

public void setElemFloat(
  int i,
  float val)

Sets the requested data array element in the first (default) bank from the 
given float. The implementation in this class is to cast val to an int and call 
(|java.awt.image.DataBuffer|) . Subclasses can override this method if another 
implementation is needed. 

    i - the specified index 
    val - the value to set the element at the specified index in the data array 

*java.awt.image.DataBuffer.setElemFloat(int,int,float)*

public void setElemFloat(
  int bank,
  int i,
  float val)

Sets the requested data array element in the specified bank from the given 
float. The implementation in this class is to cast val to an int and call 
(|java.awt.image.DataBuffer|) . Subclasses can override this method if another 
implementation is needed. 

    bank - the specified bank 
    i - the specified index 
    val - the value to set the element in the specified bank at the specified index in 
       the data array 



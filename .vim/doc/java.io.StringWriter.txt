*java.io.StringWriter* *StringWriter* A character stream that collects its output in a string buffer, which can
 then be used to construct a string.

public class StringWriter
  extends    |java.io.Writer|

|java.io.StringWriter_Description|
|java.io.StringWriter_Fields|
|java.io.StringWriter_Constructors|
|java.io.StringWriter_Methods|

====================================================================================================================================================================================

*java.io.StringWriter_Constructors*
|java.io.StringWriter()|Create a new string writer, using the default initial string-buffer  size.
|java.io.StringWriter(int)|Create a new string writer, using the specified initial string-buffer  size.

*java.io.StringWriter_Methods*
|java.io.StringWriter.append(char)|Appends the specified character to this writer.
|java.io.StringWriter.append(CharSequence)|Appends the specified character sequence to this writer.
|java.io.StringWriter.append(CharSequence,int,int)|Appends a subsequence of the specified character sequence to this writer.
|java.io.StringWriter.close()|Closing a StringWriter has no effect.
|java.io.StringWriter.flush()|Flush the stream.
|java.io.StringWriter.getBuffer()|Return the string buffer itself.
|java.io.StringWriter.toString()|Return the buffer's current value as a string.
|java.io.StringWriter.write(char[],int,int)|Write a portion of an array of characters.
|java.io.StringWriter.write(int)|Write a single character.
|java.io.StringWriter.write(String)|Write a string.
|java.io.StringWriter.write(String,int,int)|Write a portion of a string.

*java.io.StringWriter_Description*

A character stream that collects its output in a string buffer, which can then be used to construct a string. 

Closing a StringWriter has no effect. The methods in this class can be called after the stream has been closed without generating an IOException. 



*java.io.StringWriter()*

public StringWriter()

Create a new string writer, using the default initial string-buffer size. 


*java.io.StringWriter(int)*

public StringWriter(int initialSize)

Create a new string writer, using the specified initial string-buffer size. 

    initialSize - an int specifying the initial size of the buffer. 

*java.io.StringWriter.append(char)*

public |java.io.StringWriter| append(char c)

Appends the specified character to this writer. 

An invocation of this method of the form out.append(c) behaves in exactly the same way as the invocation 



out.write(c) 


    c - The 16-bit character to append 

    Returns: 

*java.io.StringWriter.append(CharSequence)*

public |java.io.StringWriter| append(java.lang.CharSequence csq)

Appends the specified character sequence to this writer. 

An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation 



out.write(csq.toString()) 

Depending on the specification of toString for the character sequence csq, the entire sequence may not be appended. For instance, invoking the toString method of a character 
buffer will return a subsequence whose content depends upon the buffer's position and limit. 


    csq - The character sequence to append. If csq is null, then the four characters "null" are appended to this writer. 

    Returns: 

*java.io.StringWriter.append(CharSequence,int,int)*

public |java.io.StringWriter| append(
  java.lang.CharSequence csq,
  int start,
  int end)

Appends a subsequence of the specified character sequence to this writer. 

An invocation of this method of the form out.append(csq, start, end) when csq is not null, behaves in exactly the same way as the invocation 



out.write(csq.subSequence(start, end).toString()) 


    csq - The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters "null". 
    start - The index of the first character in the subsequence 
    end - The index of the character following the last character in the subsequence 

    Returns: 

*java.io.StringWriter.close()*

public void close()
  throws |java.io.IOException|
         
Closing a StringWriter has no effect. The methods in this class can be called after the stream has been closed without generating an IOException. 



*java.io.StringWriter.flush()*

public void flush()

Flush the stream. 



*java.io.StringWriter.getBuffer()*

public |java.lang.StringBuffer| getBuffer()

Return the string buffer itself. 



    Returns: StringBuffer holding the current buffer value. 

*java.io.StringWriter.toString()*

public |java.lang.String| toString()

Return the buffer's current value as a string. 



*java.io.StringWriter.write(char[],int,int)*

public void write(
  char[] cbuf,
  int off,
  int len)

Write a portion of an array of characters. 


    cbuf - Array of characters 
    off - Offset from which to start writing characters 
    len - Number of characters to write 

*java.io.StringWriter.write(int)*

public void write(int c)

Write a single character. 



*java.io.StringWriter.write(String)*

public void write(java.lang.String str)

Write a string. 



*java.io.StringWriter.write(String,int,int)*

public void write(
  java.lang.String str,
  int off,
  int len)

Write a portion of a string. 


    str - String to be written 
    off - Offset from which to start writing characters 
    len - Number of characters to write 



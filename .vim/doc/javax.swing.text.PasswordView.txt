*javax.swing.text.PasswordView* *PasswordView* Implements a View suitable for use in JPasswordField
 UI implementations.

public class PasswordView
  extends    |javax.swing.text.FieldView|

|javax.swing.text.PasswordView_Description|
|javax.swing.text.PasswordView_Fields|
|javax.swing.text.PasswordView_Constructors|
|javax.swing.text.PasswordView_Methods|

====================================================================================================================================================================================

*javax.swing.text.PasswordView_Constructors*
|javax.swing.text.PasswordView(Element)|Constructs a new view wrapped on an element.

*javax.swing.text.PasswordView_Methods*
|javax.swing.text.PasswordView.drawEchoCharacter(Graphics,int,int,char)|Renders the echo character, or whatever graphic should be used  to display the password characters.
|javax.swing.text.PasswordView.drawSelectedText(Graphics,int,int,int,int)|Renders the given range in the model as selected text.
|javax.swing.text.PasswordView.drawUnselectedText(Graphics,int,int,int,int)|Renders the given range in the model as normal unselected  text.
|javax.swing.text.PasswordView.getPreferredSpan(int)|Determines the preferred span for this view along an  axis.
|javax.swing.text.PasswordView.modelToView(int,Shape,Position.Bias)|Provides a mapping from the document model coordinate space  to the coordinate space of the view mapped to it.
|javax.swing.text.PasswordView.viewToModel(float,float,Shape,Position.Bias[])|Provides a mapping from the view coordinate space to the logical  coordinate space of the model.

*javax.swing.text.PasswordView_Description*

Implements a View suitable for use in JPasswordField UI implementations. This is basically a field ui that renders its contents as the echo character specified in the associated 
component (if it can narrow the component to a JPasswordField). 



*javax.swing.text.PasswordView(Element)*

public PasswordView(javax.swing.text.Element elem)

Constructs a new view wrapped on an element. 

    elem - the element 

*javax.swing.text.PasswordView.drawEchoCharacter(Graphics,int,int,char)*

protected int drawEchoCharacter(
  java.awt.Graphics g,
  int x,
  int y,
  char c)

Renders the echo character, or whatever graphic should be used to display the password characters. The color in the Graphics object is set to the appropriate foreground color for 
selected or unselected text. 


    g - the graphics context 
    x - the starting X coordinate >= 0 
    y - the starting Y coordinate >= 0 
    c - the echo character 

    Returns: the updated X position >= 0 

*javax.swing.text.PasswordView.drawSelectedText(Graphics,int,int,int,int)*

protected int drawSelectedText(
  java.awt.Graphics g,
  int x,
  int y,
  int p0,
  int p1)
  throws |javax.swing.text.BadLocationException|
         
Renders the given range in the model as selected text. This is implemented to render the text in the color specified in the hosting component. It assumes the highlighter will 
render the selected background. Uses the result of getEchoChar() to display the characters. 


    g - the graphics context 
    x - the starting X coordinate >= 0 
    y - the starting Y coordinate >= 0 
    p0 - the starting offset in the model >= 0 
    p1 - the ending offset in the model >= p0 

    Returns: the X location of the end of the range >= 0 

*javax.swing.text.PasswordView.drawUnselectedText(Graphics,int,int,int,int)*

protected int drawUnselectedText(
  java.awt.Graphics g,
  int x,
  int y,
  int p0,
  int p1)
  throws |javax.swing.text.BadLocationException|
         
Renders the given range in the model as normal unselected text. This sets the foreground color and echos the characters using the value returned by getEchoChar(). 


    g - the graphics context 
    x - the starting X coordinate >= 0 
    y - the starting Y coordinate >= 0 
    p0 - the starting offset in the model >= 0 
    p1 - the ending offset in the model >= p0 

    Returns: the X location of the end of the range >= 0 

*javax.swing.text.PasswordView.getPreferredSpan(int)*

public float getPreferredSpan(int axis)

Determines the preferred span for this view along an axis. 


    axis - may be either View.X_AXIS or View.Y_AXIS 

    Returns: the span the view would like to be rendered into >= 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose 
             to resize or break the view. 

*javax.swing.text.PasswordView.modelToView(int,Shape,Position.Bias)*

public |java.awt.Shape| modelToView(
  int pos,
  java.awt.Shape a,
  javax.swing.text.Position.Bias b)
  throws |javax.swing.text.BadLocationException|
         
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it. 


    pos - the position to convert >= 0 
    a - the allocated region to render into 

    Returns: the bounding box of the given position 

*javax.swing.text.PasswordView.viewToModel(float,float,Shape,Position.Bias[])*

public int viewToModel(
  float fx,
  float fy,
  java.awt.Shape a,
  javax.swing.text.Position.Bias[] bias)

Provides a mapping from the view coordinate space to the logical coordinate space of the model. 


    fx - the X coordinate >= 0.0f 
    fy - the Y coordinate >= 0.0f 
    a - the allocated region to render into 

    Returns: the location within the model that best represents the given point in the view 



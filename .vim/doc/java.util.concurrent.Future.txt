*java.util.concurrent.Future* *Future* A Future represents the result of an asyn

public interface interface Future


|java.util.concurrent.Future_Description|
|java.util.concurrent.Future_Fields|
|java.util.concurrent.Future_Constructors|
|java.util.concurrent.Future_Methods|

================================================================================

*java.util.concurrent.Future_Methods*
|java.util.concurrent.Future.cancel(boolean)|Attempts to cancel execution of th
|java.util.concurrent.Future.get()|Waits if necessary for the computation to co
|java.util.concurrent.Future.get(long,TimeUnit)|Waits if necessary for at most 
|java.util.concurrent.Future.isCancelled()|Returns true if this task was cancel
|java.util.concurrent.Future.isDone()|Returns true if this task completed.

*java.util.concurrent.Future_Description*

A Future represents the result of an asynchronous computation. Methods are 
provided to check if the computation is complete, to wait for its completion, 
and to retrieve the result of the computation. The result can only be retrieved 
using method get when the computation has completed, blocking if necessary 
until it is ready. Cancellation is performed by the cancel method. Additional 
methods are provided to determine if the task completed normally or was 
cancelled. Once a computation has completed, the computation cannot be 
cancelled. If you would like to use a Future for the sake of cancellability but 
not provide a usable result, you can declare types of the form Future<?> and 
return null as a result of the underlying task. 

Sample Usage (Note that the following classes are all made-up.) 

interface ArchiveSearcher { String search(String target); } class App { 
ExecutorService executor = ... ArchiveSearcher searcher = ... void 
showSearch(final String target) throws InterruptedException { Future<String> 
future = executor.submit(new Callable<String>() { public String call() { return 
searcher.search(target); } }); displayOtherThings(); // do other things while 
searching try { displayText(future.get()); // use future } catch 
(ExecutionException ex) { cleanup(); return; } } } 

The (|java.util.concurrent.FutureTask|) class is an implementation of Future 
that implements Runnable, and so may be executed by an Executor. For example, 
the above construction with submit could be replaced by: 

FutureTask<String> future = new FutureTask<String>(new Callable<String>() { 
public String call() { return searcher.search(target); }}); 
executor.execute(future); 


*java.util.concurrent.Future.cancel(boolean)*

public boolean cancel(boolean mayInterruptIfRunning)

Attempts to cancel execution of this task. This attempt will fail if the task 
has already completed, already been cancelled, or could not be cancelled for 
some other reason. If successful, and this task has not started when cancel is 
called, this task should never run. If the task has already started, then the 
mayInterruptIfRunning parameter determines whether the thread executing this 
task should be interrupted in an attempt to stop the task. 

    mayInterruptIfRunning - true if the thread executing this task should be interrupted; otherwise, 
       in-progress tasks are allowed to complete 

    Returns: false if the task could not be cancelled, typically because it has already 
             completed normally; true otherwise 
*java.util.concurrent.Future.get()*

public |java.lang.Object| get()
  throws |java.util.concurrent.ExecutionException|
         |java.lang.InterruptedException|
         
Waits if necessary for the computation to complete, and then retrieves its 
result. 


    Returns: the computed result 
*java.util.concurrent.Future.get(long,TimeUnit)*

public |java.lang.Object| get(
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.util.concurrent.ExecutionException|
         |java.lang.InterruptedException|
         |java.util.concurrent.TimeoutException|
         
Waits if necessary for at most the given time for the computation to complete, 
and then retrieves its result, if available. 

    timeout - the maximum time to wait 
    unit - the time unit of the timeout argument 

    Returns: the computed result 
*java.util.concurrent.Future.isCancelled()*

public boolean isCancelled()

Returns true if this task was cancelled before it completed normally. 


    Returns: true if task was cancelled before it completed 
*java.util.concurrent.Future.isDone()*

public boolean isDone()

Returns true if this task completed. 

Completion may be due to normal termination, an exception, or cancellation -- 
in all of these cases, this method will return true. 


    Returns: true if this task completed. 


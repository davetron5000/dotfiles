*java.security.cert.X509CRL* *X509CRL* 
 Abstract class for an X.509 Certificate

public abstract class X509CRL
  extends    |java.security.cert.CRL|
  implements |java.security.cert.X509Extension|

|java.security.cert.X509CRL_Description|
|java.security.cert.X509CRL_Fields|
|java.security.cert.X509CRL_Constructors|
|java.security.cert.X509CRL_Methods|

================================================================================

*java.security.cert.X509CRL_Constructors*
|java.security.cert.X509CRL()|Constructor for X.509 CRLs.

*java.security.cert.X509CRL_Methods*
|java.security.cert.X509CRL.equals(Object)|Compares this CRL for equality with 
|java.security.cert.X509CRL.getEncoded()|Returns the ASN.1 DER-encoded form of 
|java.security.cert.X509CRL.getIssuerDN()|Denigrated, replaced by#getIssuerX500
|java.security.cert.X509CRL.getIssuerX500Principal()|Returns the issuer (issuer
|java.security.cert.X509CRL.getNextUpdate()|Gets the nextUpdate date from the C
|java.security.cert.X509CRL.getRevokedCertificate(BigInteger)|Gets the CRL entr
|java.security.cert.X509CRL.getRevokedCertificate(X509Certificate)|Get the CRL 
|java.security.cert.X509CRL.getRevokedCertificates()|Gets all the entries from 
|java.security.cert.X509CRL.getSigAlgName()|Gets the signature algorithm name f
|java.security.cert.X509CRL.getSigAlgOID()|Gets the signature algorithm OID str
|java.security.cert.X509CRL.getSigAlgParams()|Gets the DER-encoded signature al
|java.security.cert.X509CRL.getSignature()|Gets the signature value (the raw si
|java.security.cert.X509CRL.getTBSCertList()|Gets the DER-encoded CRL informati
|java.security.cert.X509CRL.getThisUpdate()|Gets the thisUpdate date from the C
|java.security.cert.X509CRL.getVersion()|Gets the version (version number) valu
|java.security.cert.X509CRL.hashCode()|Returns a hashcode value for this CRL fr
|java.security.cert.X509CRL.verify(PublicKey)|Verifies that this CRL was signed
|java.security.cert.X509CRL.verify(PublicKey,String)|Verifies that this CRL was

*java.security.cert.X509CRL_Description*

Abstract class for an X.509 Certificate Revocation List (CRL). A CRL is a 
time-stamped list identifying revoked certificates. It is signed by a 
Certificate Authority (CA) and made freely available in a public repository. 

Each revoked certificate is identified in a CRL by its certificate serial 
number. When a certificate-using system uses a certificate (e.g., for verifying 
a remote user's digital signature), that system not only checks the certificate 
signature and validity but also acquires a suitably- recent CRL and checks that 
the certificate serial number is not on that CRL. The meaning of 
"suitably-recent" may vary with local policy, but it usually means the most 
recently-issued CRL. A CA issues a new CRL on a regular periodic basis (e.g., 
hourly, daily, or weekly). Entries are added to CRLs as revocations occur, and 
an entry may be removed when the certificate expiration date is reached. 

The X.509 v2 CRL format is described below in ASN.1: 

CertificateList ::= SEQUENCE { tbsCertList TBSCertList, signatureAlgorithm 
AlgorithmIdentifier, signature BIT STRING } 

More information can be found in RFC 2459, "Internet X.509 Public Key 
Infrastructure Certificate and CRL Profile" at 
http://www.ietf.org/rfc/rfc2459.txt . 

The ASN.1 definition of tbsCertList is: 

TBSCertList ::= SEQUENCE { version Version OPTIONAL, -- if present, must be v2 
signature AlgorithmIdentifier, issuer Name, thisUpdate ChoiceOfTime, nextUpdate 
ChoiceOfTime OPTIONAL, revokedCertificates SEQUENCE OF SEQUENCE { 
userCertificate CertificateSerialNumber, revocationDate ChoiceOfTime, 
crlEntryExtensions Extensions OPTIONAL -- if present, must be v2 } OPTIONAL, 
crlExtensions [0] EXPLICIT Extensions OPTIONAL -- if present, must be v2 } 

CRLs are instantiated using a certificate factory. The following is an example 
of how to instantiate an X.509 CRL: 

InputStream inStream = new FileInputStream("fileName-of-crl"); 
CertificateFactory cf = CertificateFactory.getInstance("X.509"); X509CRL crl = 
(X509CRL)cf.generateCRL(inStream); inStream.close(); 


*java.security.cert.X509CRL()*

protected X509CRL()

Constructor for X.509 CRLs. 


*java.security.cert.X509CRL.equals(Object)*

public boolean equals(java.lang.Object other)

Compares this CRL for equality with the given object. If the other object is an 
instanceof X509CRL, then its encoded form is retrieved and compared with the 
encoded form of this CRL. 

    other - the object to test for equality with this CRL. 

    Returns: true iff the encoded forms of the two CRLs match, false otherwise. 
*java.security.cert.X509CRL.getEncoded()*

public abstract byte getEncoded()
  throws |java.security.cert.CRLException|
         
Returns the ASN.1 DER-encoded form of this CRL. 


    Returns: the encoded form of this certificate 
*java.security.cert.X509CRL.getIssuerDN()*

public abstract |java.security.Principal| getIssuerDN()

Denigrated, replaced by (|java.security.cert.X509CRL|) . This method returns 
the issuer as an implementation specific Principal object, which should not be 
relied upon by portable code. 

Gets the issuer (issuer distinguished name) value from the CRL. The issuer name 
identifies the entity that signed (and issued) the CRL. 

The issuer name field contains an X.500 distinguished name (DN). The ASN.1 
definition for this is: 

issuer Name 

Name ::= CHOICE { RDNSequence } RDNSequence ::= SEQUENCE OF 
RelativeDistinguishedName RelativeDistinguishedName ::= SET OF 
AttributeValueAssertion 

AttributeValueAssertion ::= SEQUENCE { AttributeType, AttributeValue } 
AttributeType ::= OBJECT IDENTIFIER AttributeValue ::= ANY 

The Name describes a hierarchical name composed of attributes, such as country 
name, and corresponding values, such as US. The type of the AttributeValue 
component is determined by the AttributeType; in general it will be a 
directoryString. A directoryString is usually one of PrintableString, 
TeletexString or UniversalString. 


    Returns: a Principal whose name is the issuer distinguished name. 
*java.security.cert.X509CRL.getIssuerX500Principal()*

public |javax.security.auth.x500.X500Principal| getIssuerX500Principal()

Returns the issuer (issuer distinguished name) value from the CRL as an 
X500Principal. 

It is recommended that subclasses override this method. 


    Returns: an X500Principal representing the issuer distinguished name 
*java.security.cert.X509CRL.getNextUpdate()*

public abstract |java.util.Date| getNextUpdate()

Gets the nextUpdate date from the CRL. 


    Returns: the nextUpdate date from the CRL, or null if not present. 
*java.security.cert.X509CRL.getRevokedCertificate(BigInteger)*

public abstract |java.security.cert.X509CRLEntry| getRevokedCertificate(java.math.BigInteger serialNumber)

Gets the CRL entry, if any, with the given certificate serialNumber. 

    serialNumber - the serial number of the certificate for which a CRL entry is to be looked up 

    Returns: the entry with the given serial number, or null if no such entry exists in this 
             CRL. 
*java.security.cert.X509CRL.getRevokedCertificate(X509Certificate)*

public |java.security.cert.X509CRLEntry| getRevokedCertificate(java.security.cert.X509Certificate certificate)

Get the CRL entry, if any, for the given certificate. 

This method can be used to lookup CRL entries in indirect CRLs, that means CRLs 
that contain entries from issuers other than the CRL issuer. The default 
implementation will only return entries for certificates issued by the CRL 
issuer. Subclasses that wish to support indirect CRLs should override this 
method. 

    certificate - the certificate for which a CRL entry is to be looked up 

    Returns: the entry for the given certificate, or null if no such entry exists in this 
             CRL. 
*java.security.cert.X509CRL.getRevokedCertificates()*

public abstract |java.util.Set| getRevokedCertificates()

Gets all the entries from this CRL. This returns a Set of X509CRLEntry objects. 


    Returns: all the entries or null if there are none present. 
*java.security.cert.X509CRL.getSigAlgName()*

public abstract |java.lang.String| getSigAlgName()

Gets the signature algorithm name for the CRL signature algorithm. An example 
is the string "SHA-1/DSA". The ASN.1 definition for this is: 

signatureAlgorithm AlgorithmIdentifier AlgorithmIdentifier ::= SEQUENCE { 
algorithm OBJECT IDENTIFIER, parameters ANY DEFINED BY algorithm OPTIONAL } -- 
contains a value of the type -- registered for use with the -- algorithm object 
identifier value 

The algorithm name is determined from the algorithm OID string. 


    Returns: the signature algorithm name. 
*java.security.cert.X509CRL.getSigAlgOID()*

public abstract |java.lang.String| getSigAlgOID()

Gets the signature algorithm OID string from the CRL. An OID is represented by 
a set of nonnegative whole numbers separated by periods. For example, the 
string "1.2.840.10040.4.3" identifies the SHA-1 with DSA signature algorithm, 
as per RFC 2459. 

See getSigAlgName(|java.security.cert.X509CRL|) for relevant ASN.1 definitions. 


    Returns: the signature algorithm OID string. 
*java.security.cert.X509CRL.getSigAlgParams()*

public abstract byte getSigAlgParams()

Gets the DER-encoded signature algorithm parameters from this CRL's signature 
algorithm. In most cases, the signature algorithm parameters are null; the 
parameters are usually supplied with the public key. If access to individual 
parameter values is needed then use 
AlgorithmParameters(|java.security.AlgorithmParameters|) and instantiate with 
the name returned by getSigAlgName(|java.security.cert.X509CRL|) . 

See getSigAlgName(|java.security.cert.X509CRL|) for relevant ASN.1 definitions. 


    Returns: the DER-encoded signature algorithm parameters, or null if no parameters are 
             present. 
*java.security.cert.X509CRL.getSignature()*

public abstract byte getSignature()

Gets the signature value (the raw signature bits) from the CRL. The ASN.1 
definition for this is: 

signature BIT STRING 


    Returns: the signature. 
*java.security.cert.X509CRL.getTBSCertList()*

public abstract byte getTBSCertList()
  throws |java.security.cert.CRLException|
         
Gets the DER-encoded CRL information, the tbsCertList from this CRL. This can 
be used to verify the signature independently. 


    Returns: the DER-encoded CRL information. 
*java.security.cert.X509CRL.getThisUpdate()*

public abstract |java.util.Date| getThisUpdate()

Gets the thisUpdate date from the CRL. The ASN.1 definition for this is: 

thisUpdate ChoiceOfTime ChoiceOfTime ::= CHOICE { utcTime UTCTime, generalTime 
GeneralizedTime } 


    Returns: the thisUpdate date from the CRL. 
*java.security.cert.X509CRL.getVersion()*

public abstract int getVersion()

Gets the version (version number) value from the CRL. The ASN.1 definition for 
this is: 

version Version OPTIONAL, -- if present, must be v2 Version ::= INTEGER { 
v1(0), v2(1), v3(2) } -- v3 does not apply to CRLs but appears for consistency 
-- with definition of Version for certs 


    Returns: the version number, i.e. 1 or 2. 
*java.security.cert.X509CRL.hashCode()*

public int hashCode()

Returns a hashcode value for this CRL from its encoded form. 


    Returns: the hashcode value. 
*java.security.cert.X509CRL.verify(PublicKey)*

public abstract void verify(java.security.PublicKey key)
  throws |java.security.cert.CRLException|
         |java.security.InvalidKeyException|
         |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         |java.security.SignatureException|
         
Verifies that this CRL was signed using the private key that corresponds to the 
given public key. 

    key - the PublicKey used to carry out the verification. 

*java.security.cert.X509CRL.verify(PublicKey,String)*

public abstract void verify(
  java.security.PublicKey key,
  java.lang.String sigProvider)
  throws |java.security.cert.CRLException|
         |java.security.InvalidKeyException|
         |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         |java.security.SignatureException|
         
Verifies that this CRL was signed using the private key that corresponds to the 
given public key. This method uses the signature verification engine supplied 
by the given provider. 

    key - the PublicKey used to carry out the verification. 
    sigProvider - the name of the signature provider. 



*java.lang.annotation.Target* *Target* Indicates the kinds of program element to

public interface interface Target

  implements |java.lang.annotation.Annotation|

|java.lang.annotation.Target_Description|
|java.lang.annotation.Target_Fields|
|java.lang.annotation.Target_Constructors|
|java.lang.annotation.Target_Methods|

================================================================================

*java.lang.annotation.Target_Methods*
|java.lang.annotation.Target.value()|

*java.lang.annotation.Target_Description*

Indicates the kinds of program element to which an annotation type is 
applicable. If a Target meta-annotation is not present on an annotation type 
declaration, the declared type may be used on any program element. If such a 
meta-annotation is present, the compiler will enforce the specified usage 
restriction. 

For example, this meta-annotation indicates that the declared type is itself a 
meta-annotation type. It can only be used on annotation type declarations: 

Target(ElementType.ANNOTATION_TYPE) public interface MetaAnnotationType { ... } 

This meta-annotation indicates that the declared type is intended solely for 
use as a member type in complex annotation type declarations. It cannot be used 
to annotate anything directly: 

Target({}) public interface MemberType { ... } 

It is a compile-time error for a single ElementType constant to appear more 
than once in a Target annotation. For example, the following meta-annotation is 
illegal: 

Target({ElementType.FIELD, ElementType.METHOD, ElementType.FIELD}) public 
interface Bogus { ... } 


*java.lang.annotation.Target.value()*

public |java.lang.annotation.ElementType| value()






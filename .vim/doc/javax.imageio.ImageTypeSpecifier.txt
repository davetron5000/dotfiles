*javax.imageio.ImageTypeSpecifier* *ImageTypeSpecifier* A class that allows the 

public class ImageTypeSpecifier
  extends    |java.lang.Object|

|javax.imageio.ImageTypeSpecifier_Description|
|javax.imageio.ImageTypeSpecifier_Fields|
|javax.imageio.ImageTypeSpecifier_Constructors|
|javax.imageio.ImageTypeSpecifier_Methods|

================================================================================

*javax.imageio.ImageTypeSpecifier_Fields*
|java.awt.image.ColorModel_javax.imageio.ImageTypeSpecifier.colorModel|
|java.awt.image.SampleModel_javax.imageio.ImageTypeSpecifier.sampleModel|

*javax.imageio.ImageTypeSpecifier_Constructors*
|javax.imageio.ImageTypeSpecifier(ColorModel,SampleModel)|Constructs an ImageTy
|javax.imageio.ImageTypeSpecifier(RenderedImage)|Constructs an ImageTypeSpecifi

*javax.imageio.ImageTypeSpecifier_Methods*
|javax.imageio.ImageTypeSpecifier.createBanded(ColorSpace,int[],int[],int,boolean,boolean)|
|javax.imageio.ImageTypeSpecifier.createBufferedImage(int,int)|Creates a Buffer
|javax.imageio.ImageTypeSpecifier.createFromBufferedImageType(int)|Returns an I
|javax.imageio.ImageTypeSpecifier.createFromRenderedImage(RenderedImage)|Return
|javax.imageio.ImageTypeSpecifier.createGrayscale(int,int,boolean)|Returns a sp
|javax.imageio.ImageTypeSpecifier.createGrayscale(int,int,boolean,boolean)|Retu
|javax.imageio.ImageTypeSpecifier.createIndexed(byte[],byte[],byte[],byte[],int,int)|
|javax.imageio.ImageTypeSpecifier.createInterleaved(ColorSpace,int[],int,boolean,boolean)|
|javax.imageio.ImageTypeSpecifier.createPacked(ColorSpace,int,int,int,int,int,boolean)|
|javax.imageio.ImageTypeSpecifier.equals(Object)|Returns true if the given Obje
|javax.imageio.ImageTypeSpecifier.getBitsPerBand(int)|Return the number of bits
|javax.imageio.ImageTypeSpecifier.getBufferedImageType()|Returns an int contain
|javax.imageio.ImageTypeSpecifier.getColorModel()|Returns the ColorModel specif
|javax.imageio.ImageTypeSpecifier.getNumBands()|Return the number of bands   sp
|javax.imageio.ImageTypeSpecifier.getNumComponents()|Return the number of color
|javax.imageio.ImageTypeSpecifier.getSampleModel()|Returns a SampleModel based 
|javax.imageio.ImageTypeSpecifier.getSampleModel(int,int)|Returns a SampleModel
|javax.imageio.ImageTypeSpecifier.hashCode()|Returns the hash code for this Ima

*javax.imageio.ImageTypeSpecifier_Description*

A class that allows the format of an image (in particular, its SampleModel and 
ColorModel) to be specified in a convenient manner. 


*java.awt.image.ColorModel_javax.imageio.ImageTypeSpecifier.colorModel*

A class that allows the format of an image (in particular, its SampleModel and 
ColorModel) to be specified in a convenient manner. 


*java.awt.image.SampleModel_javax.imageio.ImageTypeSpecifier.sampleModel*

A class that allows the format of an image (in particular, its SampleModel and 
ColorModel) to be specified in a convenient manner. 



*javax.imageio.ImageTypeSpecifier(ColorModel,SampleModel)*

public ImageTypeSpecifier(
  java.awt.image.ColorModel colorModel,
  java.awt.image.SampleModel sampleModel)

Constructs an ImageTypeSpecifier directly from a ColorModel and a SampleModel. 
It is the caller's responsibility to supply compatible parameters. 

    colorModel - a ColorModel. 
    sampleModel - a SampleModel. 

*javax.imageio.ImageTypeSpecifier(RenderedImage)*

public ImageTypeSpecifier(java.awt.image.RenderedImage image)

Constructs an ImageTypeSpecifier from a RenderedImage. If a BufferedImage is 
being used, one of the factory methods createFromRenderedImage or 
createFromBufferedImageType should be used instead in order to get a more 
accurate result. 

    image - a RenderedImage. 

*javax.imageio.ImageTypeSpecifier.createBanded(ColorSpace,int[],int[],int,boolean,boolean)*

public static |javax.imageio.ImageTypeSpecifier| createBanded(
  java.awt.color.ColorSpace colorSpace,
  int[] bankIndices,
  int[] bandOffsets,
  int dataType,
  boolean hasAlpha,
  boolean isAlphaPremultiplied)

Returns a specifier for a banded image format that will use a 
ComponentColorModel and a BandedSampleModel to store each channel in a separate 
array. 

    colorSpace - the desired ColorSpace. 
    bankIndices - an array of ints indicating the bank in which each band will be stored. 
    bandOffsets - an array of ints indicating the starting offset of each band within its bank. 
    dataType - the desired data type, as one of the enumerations from the DataBuffer class. 
    hasAlpha - true if an alpha channel is desired. 
    isAlphaPremultiplied - true if the color channels will be premultipled by the alpha channel. 

    Returns: an ImageTypeSpecifier with the desired characteristics. 
*javax.imageio.ImageTypeSpecifier.createBufferedImage(int,int)*

public |java.awt.image.BufferedImage| createBufferedImage(
  int width,
  int height)

Creates a BufferedImage with a given width and height according to the 
specification embodied in this object. 

    width - the desired width of the returned BufferedImage. 
    height - the desired height of the returned BufferedImage. 

    Returns: a new BufferedImage 
*javax.imageio.ImageTypeSpecifier.createFromBufferedImageType(int)*

public static |javax.imageio.ImageTypeSpecifier| createFromBufferedImageType(int bufferedImageType)

Returns an ImageTypeSpecifier that encodes one of the standard BufferedImage 
types (other than TYPE_CUSTOM). 

    bufferedImageType - an int representing one of the standard BufferedImage types. 

    Returns: an ImageTypeSpecifier with the desired characteristics. 
*javax.imageio.ImageTypeSpecifier.createFromRenderedImage(RenderedImage)*

public static |javax.imageio.ImageTypeSpecifier| createFromRenderedImage(java.awt.image.RenderedImage image)

Returns an ImageTypeSpecifier that encodes the layout of a RenderedImage (which 
may be a BufferedImage). 

    image - a RenderedImage. 

    Returns: an ImageTypeSpecifier with the desired characteristics. 
*javax.imageio.ImageTypeSpecifier.createGrayscale(int,int,boolean)*

public static |javax.imageio.ImageTypeSpecifier| createGrayscale(
  int bits,
  int dataType,
  boolean isSigned)

Returns a specifier for a grayscale image format that will pack pixels of the 
given bit depth into array elements of the specified data type. 

    bits - the number of bits per gray value (1, 2, 4, 8, or 16). 
    dataType - the desired data type, as one of the enumerations from the DataBuffer class. 
    isSigned - true if negative values are to be represented. 

    Returns: an ImageTypeSpecifier with the desired characteristics. 
*javax.imageio.ImageTypeSpecifier.createGrayscale(int,int,boolean,boolean)*

public static |javax.imageio.ImageTypeSpecifier| createGrayscale(
  int bits,
  int dataType,
  boolean isSigned,
  boolean isAlphaPremultiplied)

Returns a specifier for a grayscale plus alpha image format that will pack 
pixels of the given bit depth into array elements of the specified data type. 

    bits - the number of bits per gray value (1, 2, 4, 8, or 16). 
    dataType - the desired data type, as one of the enumerations from the DataBuffer class. 
    isSigned - true if negative values are to be represented. 
    isAlphaPremultiplied - true if the luminance channel will be premultipled by the alpha channel. 

    Returns: an ImageTypeSpecifier with the desired characteristics. 
*javax.imageio.ImageTypeSpecifier.createIndexed(byte[],byte[],byte[],byte[],int,int)*

public static |javax.imageio.ImageTypeSpecifier| createIndexed(
  byte[] redLUT,
  byte[] greenLUT,
  byte[] blueLUT,
  byte[] alphaLUT,
  int bits,
  int dataType)

Returns a specifier for an indexed-color image format that will pack index 
values of the given bit depth into array elements of the specified data type. 

    redLUT - an array of bytes containing the red values for each index. 
    greenLUT - an array of bytes containing * the green values for each index. 
    blueLUT - an array of bytes containing the blue values for each index. 
    alphaLUT - an array of bytes containing the alpha values for each index, or null to create 
       a fully opaque LUT. 
    bits - the number of bits in each index. 
    dataType - the desired output type, as one of the enumerations from the DataBuffer class. 

    Returns: an ImageTypeSpecifier with the desired characteristics. 
*javax.imageio.ImageTypeSpecifier.createInterleaved(ColorSpace,int[],int,boolean,boolean)*

public static |javax.imageio.ImageTypeSpecifier| createInterleaved(
  java.awt.color.ColorSpace colorSpace,
  int[] bandOffsets,
  int dataType,
  boolean hasAlpha,
  boolean isAlphaPremultiplied)

Returns a specifier for an interleaved image format that will use a 
ComponentColorModel and a PixelInterleavedSampleModel to store each pixel 
component in a separate byte, short, or int. 

    colorSpace - the desired ColorSpace. 
    bandOffsets - an array of ints indicating the offsets for each band. 
    dataType - the desired data type, as one of the enumerations from the DataBuffer class. 
    hasAlpha - true if an alpha channel is desired. 
    isAlphaPremultiplied - true if the color channels will be premultipled by the alpha channel. 

    Returns: an ImageTypeSpecifier with the desired characteristics. 
*javax.imageio.ImageTypeSpecifier.createPacked(ColorSpace,int,int,int,int,int,boolean)*

public static |javax.imageio.ImageTypeSpecifier| createPacked(
  java.awt.color.ColorSpace colorSpace,
  int redMask,
  int greenMask,
  int blueMask,
  int alphaMask,
  int transferType,
  boolean isAlphaPremultiplied)

Returns a specifier for a packed image format that will use a DirectColorModel 
and a packed SampleModel to store each pixel packed into in a single byte, 
short, or int. 

    colorSpace - the desired ColorSpace. 
    redMask - a contiguous mask indicated the position of the red channel. 
    greenMask - a contiguous mask indicated the position of the green channel. 
    blueMask - a contiguous mask indicated the position of the blue channel. 
    alphaMask - a contiguous mask indicated the position of the alpha channel. 
    transferType - the desired SampleModel transfer type. 
    isAlphaPremultiplied - true if the color channels will be premultipled by the alpha channel. 

    Returns: an ImageTypeSpecifier with the desired characteristics. 
*javax.imageio.ImageTypeSpecifier.equals(Object)*

public boolean equals(java.lang.Object o)

Returns true if the given Object is an ImageTypeSpecifier and has a SampleModel 
and ColorModel that are equal to those of this object. 

    o - the Object to be compared for equality. 

    Returns: true if the given object is an equivalent ImageTypeSpecifier. 
*javax.imageio.ImageTypeSpecifier.getBitsPerBand(int)*

public int getBitsPerBand(int band)

Return the number of bits used to represent samples of the given band. 

    band - the index of the band to be queried, as an int. 

    Returns: an int specifying a number of bits. 
*javax.imageio.ImageTypeSpecifier.getBufferedImageType()*

public int getBufferedImageType()

Returns an int containing one of the enumerated constant values describing 
image formats from BufferedImage. 


    Returns: an int representing a BufferedImage type. 
*javax.imageio.ImageTypeSpecifier.getColorModel()*

public |java.awt.image.ColorModel| getColorModel()

Returns the ColorModel specified by this object. 


    Returns: a ColorModel. 
*javax.imageio.ImageTypeSpecifier.getNumBands()*

public int getNumBands()

Return the number of bands specified by this object. This is the same value as 
returned by SampleModel.getNumBands 


    Returns: the number of bands in the image. 
*javax.imageio.ImageTypeSpecifier.getNumComponents()*

public int getNumComponents()

Return the number of color components specified by this object. This is the 
same value as returned by ColorModel.getNumComponents 


    Returns: the number of components in the image. 
*javax.imageio.ImageTypeSpecifier.getSampleModel()*

public |java.awt.image.SampleModel| getSampleModel()

Returns a SampleModel based on the settings encapsulated within this object. 
The width and height of the SampleModel will be set to arbitrary values. 


    Returns: a SampleModel with arbitrary dimensions. 
*javax.imageio.ImageTypeSpecifier.getSampleModel(int,int)*

public |java.awt.image.SampleModel| getSampleModel(
  int width,
  int height)

Returns a SampleModel based on the settings encapsulated within this object. 
The width and height of the SampleModel will be set to the supplied values. 

    width - the desired width of the returned SampleModel. 
    height - the desired height of the returned SampleModel. 

    Returns: a SampleModel with the given dimensions. 
*javax.imageio.ImageTypeSpecifier.hashCode()*

public int hashCode()

Returns the hash code for this ImageTypeSpecifier. 


    Returns: a hash code for this ImageTypeSpecifier 


*java.security.MessageDigestSpi* *MessageDigestSpi* This class defines the Service Provider Interface (SPI)
 for the MessageDigest class, which provides the functionality
 of a mes

public abstract class MessageDigestSpi
  extends    |java.lang.Object|

|java.security.MessageDigestSpi_Description|
|java.security.MessageDigestSpi_Fields|
|java.security.MessageDigestSpi_Constructors|
|java.security.MessageDigestSpi_Methods|

====================================================================================================================================================================================

*java.security.MessageDigestSpi_Constructors*
|java.security.MessageDigestSpi()|

*java.security.MessageDigestSpi_Methods*
|java.security.MessageDigestSpi.clone()|Returns a clone if the implementation is cloneable.
|java.security.MessageDigestSpi.engineDigest()|Completes the hash computation by performing final  operations such as padding.
|java.security.MessageDigestSpi.engineDigest(byte[],int,int)|Completes the hash computation by performing final  operations such as padding.
|java.security.MessageDigestSpi.engineGetDigestLength()|Returns the digest length in bytes.
|java.security.MessageDigestSpi.engineReset()|Resets the digest for further use.
|java.security.MessageDigestSpi.engineUpdate(byte)|Updates the digest using the specified byte.
|java.security.MessageDigestSpi.engineUpdate(byte[],int,int)|Updates the digest using the specified array of bytes,      starting at the specified offset.
|java.security.MessageDigestSpi.engineUpdate(ByteBuffer)|Update the digest using the specified ByteBuffer.

*java.security.MessageDigestSpi_Description*

This class defines the Service Provider Interface (SPI) for the MessageDigest class, which provides the functionality of a message digest algorithm, such as MD5 or SHA. Message 
digests are secure one-way hash functions that take arbitrary-sized data and output a fixed-length hash value. 

All the abstract methods in this class must be implemented by a cryptographic service provider who wishes to supply the implementation of a particular message digest algorithm. 

Implementations are free to implement the Cloneable interface. 



*java.security.MessageDigestSpi()*

public MessageDigestSpi()




*java.security.MessageDigestSpi.clone()*

public |java.lang.Object| clone()
  throws |java.lang.CloneNotSupportedException|
         
Returns a clone if the implementation is cloneable. 



    Returns: a clone if the implementation is cloneable. 

*java.security.MessageDigestSpi.engineDigest()*

protected abstract byte[] engineDigest()

Completes the hash computation by performing final operations such as padding. Once engineDigest has been called, the engine should be reset (see 
engineReset(|java.security.MessageDigestSpi|) ). Resetting is the responsibility of the engine implementor. 



    Returns: the array of bytes for the resulting hash value. 

*java.security.MessageDigestSpi.engineDigest(byte[],int,int)*

protected int engineDigest(
  byte[] buf,
  int offset,
  int len)
  throws |java.security.DigestException|
         
Completes the hash computation by performing final operations such as padding. Once engineDigest has been called, the engine should be reset (see 
engineReset(|java.security.MessageDigestSpi|) ). Resetting is the responsibility of the engine implementor. 

This method should be abstract, but we leave it concrete for binary compatibility. Knowledgeable providers should override this method. 


    buf - the output buffer in which to store the digest 
    offset - offset to start from in the output buffer 
    len - number of bytes within buf allotted for the digest. Both this default implementation and the SUN provider do not return partial digests. The presence of this parameter is solely 
       for consistency in our API's. If the value of this parameter is less than the actual digest length, the method will throw a DigestException. This parameter is ignored if 
       its value is greater than or equal to the actual digest length. 

    Returns: the length of the digest stored in the output buffer. 

*java.security.MessageDigestSpi.engineGetDigestLength()*

protected int engineGetDigestLength()

Returns the digest length in bytes. 

This concrete method has been added to this previously-defined abstract class. (For backwards compatibility, it cannot be abstract.) 

The default behavior is to return 0. 

This method may be overridden by a provider to return the digest length. 



    Returns: the digest length in bytes. 

*java.security.MessageDigestSpi.engineReset()*

protected abstract void engineReset()

Resets the digest for further use. 



*java.security.MessageDigestSpi.engineUpdate(byte)*

protected abstract void engineUpdate(byte input)

Updates the digest using the specified byte. 


    input - the byte to use for the update. 

*java.security.MessageDigestSpi.engineUpdate(byte[],int,int)*

protected abstract void engineUpdate(
  byte[] input,
  int offset,
  int len)

Updates the digest using the specified array of bytes, starting at the specified offset. 


    input - the array of bytes to use for the update. 
    offset - the offset to start from in the array of bytes. 
    len - the number of bytes to use, starting at offset. 

*java.security.MessageDigestSpi.engineUpdate(ByteBuffer)*

protected void engineUpdate(java.nio.ByteBuffer input)

Update the digest using the specified ByteBuffer. The digest is updated using the input.remaining() bytes starting at input.position(). Upon return, the buffer's position will be 
equal to its limit; its limit will not have changed. 


    input - the ByteBuffer 



*java.awt.font.FontRenderContext* *FontRenderContext* The FontRenderContext class is a container for the
   information needed to correctly measure text.

public class FontRenderContext
  extends    |java.lang.Object|

|java.awt.font.FontRenderContext_Description|
|java.awt.font.FontRenderContext_Fields|
|java.awt.font.FontRenderContext_Constructors|
|java.awt.font.FontRenderContext_Methods|

====================================================================================================================================================================================

*java.awt.font.FontRenderContext_Constructors*
|java.awt.font.FontRenderContext()|Constructs a new FontRenderContext  object.
|java.awt.font.FontRenderContext(AffineTransform,boolean,boolean)|Constructs a FontRenderContext object from an  optionalAffineTransformand two boolean  values that determine if t

*java.awt.font.FontRenderContext_Methods*
|java.awt.font.FontRenderContext.equals(FontRenderContext)|Return true if rhs has the same transform, antialiasing,   and fractional metrics values as this.
|java.awt.font.FontRenderContext.equals(Object)|Return true if obj is an instance of FontRenderContext and has the same  transform, antialiasing, and fractional metrics values as 
|java.awt.font.FontRenderContext.getTransform()|Gets the transform that is used to scale typographical points    to pixels in this FontRenderContext.
|java.awt.font.FontRenderContext.hashCode()|Return a hashcode for this FontRenderContext.
|java.awt.font.FontRenderContext.isAntiAliased()|Gets the text anti-aliasing mode used in this     FontRenderContext.
|java.awt.font.FontRenderContext.usesFractionalMetrics()|Gets the text fractional metrics mode requested by the application    for use in this FontRenderContext.

*java.awt.font.FontRenderContext_Description*

The FontRenderContext class is a container for the information needed to correctly measure text. The measurement of text can vary because of rules that map outlines to pixels, and 
rendering hints provided by an application. 

One such piece of information is a transform that scales typographical points to pixels. (A point is defined to be exactly 1/72 of an inch, which is slightly different than the 
traditional mechanical measurement of a point.) A character that is rendered at 12pt on a 600dpi device might have a different size than the same character rendered at 12pt on a 
72dpi device because of such factors as rounding to pixel boundaries and hints that the font designer may have specified. 

Anti-aliasing and Fractional-metrics specified by an application can also affect the size of a character because of rounding to pixel boundaries. 

Typically, instances of FontRenderContext are obtained from a Graphics2D(|java.awt.Graphics2D|) object. A FontRenderContext which is directly constructed will most likely not 
represent any actual graphics device, and may lead to unexpected or incorrect results. 



*java.awt.font.FontRenderContext()*

protected FontRenderContext()

Constructs a new FontRenderContext object. 


*java.awt.font.FontRenderContext(AffineTransform,boolean,boolean)*

public FontRenderContext(
  java.awt.geom.AffineTransform tx,
  boolean isAntiAliased,
  boolean usesFractionalMetrics)

Constructs a FontRenderContext object from an optional (|java.awt.geom.AffineTransform|) and two boolean values that determine if the newly constructed object has anti-aliasing or 
fractional metrics. 

    tx - the transform which is used to scale typographical points to pixels in this FontRenderContext. If null, an identity tranform is used. 
    isAntiAliased - determines if the newly contructed object has anti-aliasing 
    usesFractionalMetrics - determines if the newly constructed object uses fractional metrics 

*java.awt.font.FontRenderContext.equals(FontRenderContext)*

public boolean equals(java.awt.font.FontRenderContext rhs)

Return true if rhs has the same transform, antialiasing, and fractional metrics values as this. 


    rhs - the FontRenderContext to test for equality 

    Returns: true if rhs is equal to this FontRenderContext; false otherwise. 

*java.awt.font.FontRenderContext.equals(Object)*

public boolean equals(java.lang.Object obj)

Return true if obj is an instance of FontRenderContext and has the same transform, antialiasing, and fractional metrics values as this. 


    obj - the object to test for equality 

    Returns: true if the specified object is equal to this FontRenderContext; false otherwise. 

*java.awt.font.FontRenderContext.getTransform()*

public |java.awt.geom.AffineTransform| getTransform()

Gets the transform that is used to scale typographical points to pixels in this FontRenderContext. 



    Returns: the AffineTransform of this FontRenderContext. 

*java.awt.font.FontRenderContext.hashCode()*

public int hashCode()

Return a hashcode for this FontRenderContext. 



*java.awt.font.FontRenderContext.isAntiAliased()*

public boolean isAntiAliased()

Gets the text anti-aliasing mode used in this FontRenderContext. 



    Returns: true, if text is anti-aliased in this FontRenderContext; false otherwise. 

*java.awt.font.FontRenderContext.usesFractionalMetrics()*

public boolean usesFractionalMetrics()

Gets the text fractional metrics mode requested by the application for use in this FontRenderContext. 



    Returns: true, if layout should be performed with fractional metrics; false otherwise. in this FontRenderContext. 



*java.util.PriorityQueue* *PriorityQueue* An unbounded priorityQueue queuebased 

public class PriorityQueue
  extends    |java.util.AbstractQueue|
  implements |java.io.Serializable|

|java.util.PriorityQueue_Description|
|java.util.PriorityQueue_Fields|
|java.util.PriorityQueue_Constructors|
|java.util.PriorityQueue_Methods|

================================================================================

*java.util.PriorityQueue_Constructors*
|java.util.PriorityQueue()|Creates a PriorityQueue with the default initial cap
|java.util.PriorityQueue(Collection)|Creates a PriorityQueue containing the ele
|java.util.PriorityQueue(int)|Creates a PriorityQueue with the specified initia
|java.util.PriorityQueue(int,Comparator)|Creates a PriorityQueue with the speci
|java.util.PriorityQueue(PriorityQueue)|Creates a PriorityQueue containing the 
|java.util.PriorityQueue(SortedSet)|Creates a PriorityQueue containing the elem

*java.util.PriorityQueue_Methods*
|java.util.PriorityQueue.add(E)|Adds the specified element to this queue.
|java.util.PriorityQueue.clear()|Removes all elements from the priority queue.
|java.util.PriorityQueue.comparator()|Returns the comparator used to order this
|java.util.PriorityQueue.iterator()|Returns an iterator over the elements in th
|java.util.PriorityQueue.offer(E)|Inserts the specified element into this prior
|java.util.PriorityQueue.peek()|
|java.util.PriorityQueue.poll()|
|java.util.PriorityQueue.remove(Object)|Removes a single instance of the specif
|java.util.PriorityQueue.size()|

*java.util.PriorityQueue_Description*

An unbounded priority queue(|java.util.Queue|) based on a priority heap. This 
queue orders elements according to an order specified at construction time, 
which is specified either according to their natural order (see 
(|java.lang.Comparable|) ), or according to a (|java.util.Comparator|) , 
depending on which constructor is used. A priority queue does not permit null 
elements. A priority queue relying on natural ordering also does not permit 
insertion of non-comparable objects (doing so may result in 
ClassCastException). 

The head of this queue is the least element with respect to the specified 
ordering. If multiple elements are tied for least value, the head is one of 
those elements -- ties are broken arbitrarily. The queue retrieval operations 
poll, remove, peek, and element access the element at the head of the queue. 

A priority queue is unbounded, but has an internal capacity governing the size 
of an array used to store the elements on the queue. It is always at least as 
large as the queue size. As elements are added to a priority queue, its 
capacity grows automatically. The details of the growth policy are not 
specified. 

This class and its iterator implement all of the optional methods of the 
(|java.util.Collection|) and (|java.util.Iterator|) interfaces. The Iterator 
provided in method (|java.util.PriorityQueue|) is not guaranteed to traverse 
the elements of the PriorityQueue in any particular order. If you need ordered 
traversal, consider using Arrays.sort(pq.toArray()). 

Note that this implementation is not synchronized. Multiple threads should not 
access a PriorityQueue instance concurrently if any of the threads modifies the 
list structurally. Instead, use the thread-safe 
(|java.util.concurrent.PriorityBlockingQueue|) class. 

Implementation note: this implementation provides O(log(n)) time for the 
insertion methods (offer, poll, remove() and add) methods; linear time for the 
remove(Object) and contains(Object) methods; and constant time for the 
retrieval methods (peek, element, and size). 

This class is a member of the <a href="/../guide/collections/index.html"> Java 
Collections Framework. 


*java.util.PriorityQueue()*

public PriorityQueue()

Creates a PriorityQueue with the default initial capacity (11) that orders its 
elements according to their natural ordering (using Comparable). 


*java.util.PriorityQueue(Collection)*

public PriorityQueue(java.util.Collection c)

Creates a PriorityQueue containing the elements in the specified collection. 
The priority queue has an initial capacity of 110% of the size of the specified 
collection or 1 if the collection is empty. If the specified collection is an 
instance of a (|java.util.SortedSet|) or is another PriorityQueue, the priority 
queue will be sorted according to the same comparator, or according to its 
elements' natural order if the collection is sorted according to its elements' 
natural order. Otherwise, the priority queue is ordered according to its 
elements' natural order. 

    c - the collection whose elements are to be placed into this priority queue. 

*java.util.PriorityQueue(int)*

public PriorityQueue(int initialCapacity)

Creates a PriorityQueue with the specified initial capacity that orders its 
elements according to their natural ordering (using Comparable). 

    initialCapacity - the initial capacity for this priority queue. 

*java.util.PriorityQueue(int,Comparator)*

public PriorityQueue(
  int initialCapacity,
  java.util.Comparator comparator)

Creates a PriorityQueue with the specified initial capacity that orders its 
elements according to the specified comparator. 

    initialCapacity - the initial capacity for this priority queue. 
    comparator - the comparator used to order this priority queue. If null then the order 
       depends on the elements' natural ordering. 

*java.util.PriorityQueue(PriorityQueue)*

public PriorityQueue(java.util.PriorityQueue c)

Creates a PriorityQueue containing the elements in the specified collection. 
The priority queue has an initial capacity of 110% of the size of the specified 
collection or 1 if the collection is empty. This priority queue will be sorted 
according to the same comparator as the given collection, or according to its 
elements' natural order if the collection is sorted according to its elements' 
natural order. 

    c - the collection whose elements are to be placed into this priority queue. 

*java.util.PriorityQueue(SortedSet)*

public PriorityQueue(java.util.SortedSet c)

Creates a PriorityQueue containing the elements in the specified collection. 
The priority queue has an initial capacity of 110% of the size of the specified 
collection or 1 if the collection is empty. This priority queue will be sorted 
according to the same comparator as the given collection, or according to its 
elements' natural order if the collection is sorted according to its elements' 
natural order. 

    c - the collection whose elements are to be placed into this priority queue. 

*java.util.PriorityQueue.add(E)*

public boolean add(java.lang.Object o)

Adds the specified element to this queue. 


    Returns: true (as per the general contract of Collection.add). 
*java.util.PriorityQueue.clear()*

public void clear()

Removes all elements from the priority queue. The queue will be empty after 
this call returns. 


*java.util.PriorityQueue.comparator()*

public |java.util.Comparator| comparator()

Returns the comparator used to order this collection, or null if this 
collection is sorted according to its elements natural ordering (using 
Comparable). 


    Returns: the comparator used to order this collection, or null if this collection is 
             sorted according to its elements natural ordering. 
*java.util.PriorityQueue.iterator()*

public |java.util.Iterator| iterator()

Returns an iterator over the elements in this queue. The iterator does not 
return the elements in any particular order. 


    Returns: an iterator over the elements in this queue. 
*java.util.PriorityQueue.offer(E)*

public boolean offer(java.lang.Object o)

Inserts the specified element into this priority queue. 


    Returns: 
*java.util.PriorityQueue.peek()*

public |java.lang.Object| peek()




*java.util.PriorityQueue.poll()*

public |java.lang.Object| poll()




*java.util.PriorityQueue.remove(Object)*

public boolean remove(java.lang.Object o)

Removes a single instance of the specified element from this queue, if it is 
present. 


*java.util.PriorityQueue.size()*

public int size()






*javax.swing.UIManager* *UIManager* This class keeps track of the current look a

public class UIManager
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|javax.swing.UIManager_Description|
|javax.swing.UIManager_Fields|
|javax.swing.UIManager_Constructors|
|javax.swing.UIManager_Methods|

================================================================================

*javax.swing.UIManager_Constructors*
|javax.swing.UIManager()|

*javax.swing.UIManager_Methods*
|javax.swing.UIManager.addAuxiliaryLookAndFeel(LookAndFeel)|Adds a LookAndFeel 
|javax.swing.UIManager.addPropertyChangeListener(PropertyChangeListener)|Adds a
|javax.swing.UIManager.get(Object)|Returns an object from the defaults table.
|javax.swing.UIManager.get(Object,Locale)|Returns an object from the defaults t
|javax.swing.UIManager.getAuxiliaryLookAndFeels()|Returns the list of auxiliary
|javax.swing.UIManager.getBoolean(Object)|Returns a boolean from the defaults t
|javax.swing.UIManager.getBoolean(Object,Locale)|Returns a boolean from the def
|javax.swing.UIManager.getBorder(Object)|Returns a border from the defaults tab
|javax.swing.UIManager.getBorder(Object,Locale)|Returns a border from the defau
|javax.swing.UIManager.getColor(Object)|Returns a drawing color from the defaul
|javax.swing.UIManager.getColor(Object,Locale)|Returns a drawing color from the
|javax.swing.UIManager.getCrossPlatformLookAndFeelClassName()|Returns the name 
|javax.swing.UIManager.getDefaults()|Returns the default values for this look a
|javax.swing.UIManager.getDimension(Object)|Returns a dimension from the defaul
|javax.swing.UIManager.getDimension(Object,Locale)|Returns a dimension from the
|javax.swing.UIManager.getFont(Object)|Returns a drawing font from the defaults
|javax.swing.UIManager.getFont(Object,Locale)|Returns a drawing font from the d
|javax.swing.UIManager.getIcon(Object)|Returns an Icon from the defaults table.
|javax.swing.UIManager.getIcon(Object,Locale)|Returns an Icon from the defaults
|javax.swing.UIManager.getInsets(Object)|Returns an Insets object from the defa
|javax.swing.UIManager.getInsets(Object,Locale)|Returns an Insets object from t
|javax.swing.UIManager.getInstalledLookAndFeels()|Returns an array of objects t
|javax.swing.UIManager.getInt(Object)|Returns an integer from the defaults tabl
|javax.swing.UIManager.getInt(Object,Locale)|Returns an integer from the defaul
|javax.swing.UIManager.getLookAndFeel()|Returns the current default look and fe
|javax.swing.UIManager.getLookAndFeelDefaults()|Returns the default values for 
|javax.swing.UIManager.getPropertyChangeListeners()|Returns an array of all the
|javax.swing.UIManager.getString(Object)|Returns a string from the defaults tab
|javax.swing.UIManager.getString(Object,Locale)|Returns a string from the defau
|javax.swing.UIManager.getSystemLookAndFeelClassName()|Returns the name of the 
|javax.swing.UIManager.getUI(JComponent)|Returns the Lobject that renders the t
|javax.swing.UIManager.installLookAndFeel(String,String)|Creates a new look and
|javax.swing.UIManager.installLookAndFeel(UIManager.LookAndFeelInfo)|Adds the s
|javax.swing.UIManager.put(Object,Object)|Stores an object in the defaults tabl
|javax.swing.UIManager.removeAuxiliaryLookAndFeel(LookAndFeel)|Removes a LookAn
|javax.swing.UIManager.removePropertyChangeListener(PropertyChangeListener)|Rem
|javax.swing.UIManager.setInstalledLookAndFeels(UIManager.LookAndFeelInfo[])|Re
|javax.swing.UIManager.setLookAndFeel(LookAndFeel)|Sets the current default loo
|javax.swing.UIManager.setLookAndFeel(String)|Sets the current default look and

*javax.swing.UIManager_Description*

This class keeps track of the current look and feel and its defaults. The 
default look and feel class is chosen in the following manner: 

If the system property swing.defaultlaf is non-null, use it as the default look 
and feel class name. If the (|java.util.Properties|) file swing.properties 
exists and contains the key swing.defaultlaf, use its value as default look and 
feel class name. The location of swing.properties may vary depending upon the 
implementation of the Java platform. In Sun's implementation this will reside 
in and java.home>/lib/swing.properties. Refer to the release notes of the 
implementation you are using for further details. Otherwise use the Java look 
and feel. 

We manage three levels of defaults: user defaults, look and feel defaults, 
system defaults. A call to UIManager.get checks all three levels in order and 
returns the first non-null value for a key, if any. A call to UIManager.put 
just affects the user defaults. Note that a call to setLookAndFeel doesn't 
affect the user defaults, it just replaces the middle defaults "level". 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.UIManager()*

public UIManager()




*javax.swing.UIManager.addAuxiliaryLookAndFeel(LookAndFeel)*

public static void addAuxiliaryLookAndFeel(javax.swing.LookAndFeel laf)

Adds a LookAndFeel to the list of auxiliary look and feels. The auxiliary look 
and feels tell the multiplexing look and feel what other LookAndFeel classes 
for a component instance are to be used in addition to the default LookAndFeel 
class when creating a multiplexing UI. The change will only take effect when a 
new UI class is created or when the default look and feel is changed on a 
component instance. Note these are not the same as the installed look and 
feels. 

    laf - the LookAndFeel object 

*javax.swing.UIManager.addPropertyChangeListener(PropertyChangeListener)*

public static void addPropertyChangeListener(java.beans.PropertyChangeListener listener)

Adds a PropertyChangeListener to the listener list. The listener is registered 
for all properties. 

    listener - the PropertyChangeListener to be added 

*javax.swing.UIManager.get(Object)*

public static |java.lang.Object| get(java.lang.Object key)

Returns an object from the defaults table. 

    key - an Object specifying the desired object 

    Returns: 
*javax.swing.UIManager.get(Object,Locale)*

public static |java.lang.Object| get(
  java.lang.Object key,
  java.util.Locale l)

Returns an object from the defaults table that is appropriate for the given 
locale. 

    key - an Object specifying the desired object 
    l - the Locale for which the object is desired 

    Returns: 
*javax.swing.UIManager.getAuxiliaryLookAndFeels()*

public static |javax.swing.LookAndFeel| getAuxiliaryLookAndFeels()

Returns the list of auxiliary look and feels (can be null). The auxiliary look 
and feels tell the multiplexing look and feel what other LookAndFeel classes 
for a component instance are to be used in addition to the default LookAndFeel 
class when creating a multiplexing UI. Note these are not the same as the 
installed look and feels. 


    Returns: list of auxiliary LookAndFeels or null 
*javax.swing.UIManager.getBoolean(Object)*

public static boolean getBoolean(java.lang.Object key)

Returns a boolean from the defaults table which is associated with the key 
value. If the key is not found or the key doesn't represent a boolean value 
then false will be returned. 

    key - an Object specifying the key for the desired boolean value 

    Returns: the boolean value corresponding to the key 
*javax.swing.UIManager.getBoolean(Object,Locale)*

public static boolean getBoolean(
  java.lang.Object key,
  java.util.Locale l)

Returns a boolean from the defaults table which is associated with the key 
value and the given Locale. If the key is not found or the key doesn't 
represent a boolean value then false will be returned. 

    key - an Object specifying the key for the desired boolean value 
    l - the Locale for which the boolean is desired 

    Returns: the boolean value corresponding to the key 
*javax.swing.UIManager.getBorder(Object)*

public static |javax.swing.border.Border| getBorder(java.lang.Object key)

Returns a border from the defaults table. 

    key - an Object specifying the border 

    Returns: the Border object 
*javax.swing.UIManager.getBorder(Object,Locale)*

public static |javax.swing.border.Border| getBorder(
  java.lang.Object key,
  java.util.Locale l)

Returns a border from the defaults table that is appropriate for the given 
locale. 

    key - an Object specifying the border 
    l - the Locale for which the border is desired 

    Returns: the Border object 
*javax.swing.UIManager.getColor(Object)*

public static |java.awt.Color| getColor(java.lang.Object key)

Returns a drawing color from the defaults table. 

    key - an Object specifying the color 

    Returns: the Color object 
*javax.swing.UIManager.getColor(Object,Locale)*

public static |java.awt.Color| getColor(
  java.lang.Object key,
  java.util.Locale l)

Returns a drawing color from the defaults table that is appropriate for the 
given locale. 

    key - an Object specifying the color 
    l - the Locale for which the color is desired 

    Returns: the Color object 
*javax.swing.UIManager.getCrossPlatformLookAndFeelClassName()*

public static |java.lang.String| getCrossPlatformLookAndFeelClassName()

Returns the name of the LookAndFeel class that implements the default cross 
platform look and feel -- the Java Look and Feel (JLF). If the system property 
swing.crossplatformlaf has been defined, its value will be returned. 


    Returns: a string with the JLF implementation-class 
*javax.swing.UIManager.getDefaults()*

public static |javax.swing.UIDefaults| getDefaults()

Returns the default values for this look and feel. 


    Returns: a UIDefaults object containing the default values 
*javax.swing.UIManager.getDimension(Object)*

public static |java.awt.Dimension| getDimension(java.lang.Object key)

Returns a dimension from the defaults table. 

    key - an Object specifying the dimension object 

    Returns: the Dimension object 
*javax.swing.UIManager.getDimension(Object,Locale)*

public static |java.awt.Dimension| getDimension(
  java.lang.Object key,
  java.util.Locale l)

Returns a dimension from the defaults table that is appropriate for the given 
locale. 

    key - an Object specifying the dimension object 
    l - the Locale for which the object is desired 

    Returns: the Dimension object 
*javax.swing.UIManager.getFont(Object)*

public static |java.awt.Font| getFont(java.lang.Object key)

Returns a drawing font from the defaults table. 

    key - an Object specifying the font 

    Returns: the Font object 
*javax.swing.UIManager.getFont(Object,Locale)*

public static |java.awt.Font| getFont(
  java.lang.Object key,
  java.util.Locale l)

Returns a drawing font from the defaults table that is appropriate for the 
given locale. 

    key - an Object specifying the font 
    l - the Locale for which the font is desired 

    Returns: the Font object 
*javax.swing.UIManager.getIcon(Object)*

public static |javax.swing.Icon| getIcon(java.lang.Object key)

Returns an Icon from the defaults table. 

    key - an Object specifying the icon 

    Returns: the Icon object 
*javax.swing.UIManager.getIcon(Object,Locale)*

public static |javax.swing.Icon| getIcon(
  java.lang.Object key,
  java.util.Locale l)

Returns an Icon from the defaults table that is appropriate for the given 
locale. 

    key - an Object specifying the icon 
    l - the Locale for which the icon is desired 

    Returns: the Icon object 
*javax.swing.UIManager.getInsets(Object)*

public static |java.awt.Insets| getInsets(java.lang.Object key)

Returns an Insets object from the defaults table. 

    key - an Object specifying the Insets object 

    Returns: the Insets object 
*javax.swing.UIManager.getInsets(Object,Locale)*

public static |java.awt.Insets| getInsets(
  java.lang.Object key,
  java.util.Locale l)

Returns an Insets object from the defaults table that is appropriate for the 
given locale. 

    key - an Object specifying the Insets object 
    l - the Locale for which the object is desired 

    Returns: the Insets object 
*javax.swing.UIManager.getInstalledLookAndFeels()*

public static |javax.swing.UIManager.LookAndFeelInfo| getInstalledLookAndFeels()

Returns an array of objects that provide some information about the LookAndFeel 
implementations that have been installed with this software development kit. 
The LookAndFeel info objects can used by an application to construct a menu of 
look and feel options for the user or to set the look and feel at start up 
time. Note that we do not return the LookAndFeel classes themselves here to 
avoid the cost of unnecessarily loading them. 

Given a LookAndFeelInfo object one can set the current look and feel like this: 

UIManager.setLookAndFeel(info.getClassName()); 


    Returns: an array of LookAndFeelInfo objects 
*javax.swing.UIManager.getInt(Object)*

public static int getInt(java.lang.Object key)

Returns an integer from the defaults table. 

    key - an Object specifying the int 

    Returns: 
*javax.swing.UIManager.getInt(Object,Locale)*

public static int getInt(
  java.lang.Object key,
  java.util.Locale l)

Returns an integer from the defaults table that is appropriate for the given 
locale. 

    key - an Object specifying the int 
    l - the Locale for which the int is desired 

    Returns: 
*javax.swing.UIManager.getLookAndFeel()*

public static |javax.swing.LookAndFeel| getLookAndFeel()

Returns the current default look and feel or null. 


    Returns: the current default look and feel, or null 
*javax.swing.UIManager.getLookAndFeelDefaults()*

public static |javax.swing.UIDefaults| getLookAndFeelDefaults()

Returns the default values for this look and feel. 


    Returns: an UIDefaults object containing the default values 
*javax.swing.UIManager.getPropertyChangeListeners()*

public static |java.beans.PropertyChangeListener| getPropertyChangeListeners()

Returns an array of all the PropertyChangeListeners added to this UIManager 
with addPropertyChangeListener(). 


    Returns: all of the PropertyChangeListeners added or an empty array if no listeners have 
             been added 
*javax.swing.UIManager.getString(Object)*

public static |java.lang.String| getString(java.lang.Object key)

Returns a string from the defaults table. 

    key - an Object specifying the string 

    Returns: 
*javax.swing.UIManager.getString(Object,Locale)*

public static |java.lang.String| getString(
  java.lang.Object key,
  java.util.Locale l)

Returns a string from the defaults table that is appropriate for the given 
locale. 

    key - an Object specifying the string 
    l - the Locale for which the string is desired 

    Returns: 
*javax.swing.UIManager.getSystemLookAndFeelClassName()*

public static |java.lang.String| getSystemLookAndFeelClassName()

Returns the name of the LookAndFeel class that implements the native systems 
look and feel if there is one, otherwise the name of the default cross platform 
LookAndFeel class. If the system property swing.systemlaf has been defined, its 
value will be returned. 


    Returns: the String of the LookAndFeel class 
*javax.swing.UIManager.getUI(JComponent)*

public static |javax.swing.plaf.ComponentUI| getUI(javax.swing.JComponent target)

Returns the Lobject that renders the target component. 

    target - the JComponent to render 

    Returns: the ComponentUI object that renders the target component 
*javax.swing.UIManager.installLookAndFeel(String,String)*

public static void installLookAndFeel(
  java.lang.String name,
  java.lang.String className)

Creates a new look and feel and adds it to the current array. Then calls 
(|javax.swing.UIManager|) . 

    name - a String specifying the name of the look and feel 
    className - a String specifying the class name that implements the look and feel 

*javax.swing.UIManager.installLookAndFeel(UIManager.LookAndFeelInfo)*

public static void installLookAndFeel(javax.swing.UIManager.LookAndFeelInfo info)

Adds the specified look and feel to the current array and then calls 
(|javax.swing.UIManager|) . 

    info - a LookAndFeelInfo object that names the look and feel and identifies that class 
       that implements it 

*javax.swing.UIManager.put(Object,Object)*

public static |java.lang.Object| put(
  java.lang.Object key,
  java.lang.Object value)

Stores an object in the defaults table. 

    key - an Object specifying the retrieval key 
    value - the Object to store 

    Returns: the Object returned by {@link UIDefaults#put} 
*javax.swing.UIManager.removeAuxiliaryLookAndFeel(LookAndFeel)*

public static boolean removeAuxiliaryLookAndFeel(javax.swing.LookAndFeel laf)

Removes a LookAndFeel from the list of auxiliary look and feels. The auxiliary 
look and feels tell the multiplexing look and feel what other LookAndFeel 
classes for a component instance are to be used in addition to the default 
LookAndFeel class when creating a multiplexing UI. The change will only take 
effect when a new UI class is created or when the default look and feel is 
changed on a component instance. Note these are not the same as the installed 
look and feels. 


    Returns: true if the LookAndFeel was removed from the list 
*javax.swing.UIManager.removePropertyChangeListener(PropertyChangeListener)*

public static void removePropertyChangeListener(java.beans.PropertyChangeListener listener)

Removes a PropertyChangeListener from the listener list. This removes a 
PropertyChangeListener that was registered for all properties. 

    listener - the PropertyChangeListener to be removed 

*javax.swing.UIManager.setInstalledLookAndFeels(UIManager.LookAndFeelInfo[])*

public static void setInstalledLookAndFeels(javax.swing.UIManager.LookAndFeelInfo[] infos)
  throws |java.lang.SecurityException|
         
Replaces the current array of installed LookAndFeelInfos. 

    infos - new array of LookAndFeelInfo objects 

*javax.swing.UIManager.setLookAndFeel(LookAndFeel)*

public static void setLookAndFeel(javax.swing.LookAndFeel newLookAndFeel)
  throws |javax.swing.UnsupportedLookAndFeelException|
         
Sets the current default look and feel using a LookAndFeel object. 

This is a JavaBeans bound property. 

    newLookAndFeel - the LookAndFeel object 

*javax.swing.UIManager.setLookAndFeel(String)*

public static void setLookAndFeel(java.lang.String className)
  throws |java.lang.ClassNotFoundException|
         |java.lang.IllegalAccessException|
         |java.lang.InstantiationException|
         |javax.swing.UnsupportedLookAndFeelException|
         
Sets the current default look and feel using a class name. 

    className - a string specifying the name of the class that implements the look and feel 



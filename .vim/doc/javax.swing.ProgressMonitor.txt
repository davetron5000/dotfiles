*javax.swing.ProgressMonitor* *ProgressMonitor* A class to monitor the progress 

public class ProgressMonitor
  extends    |java.lang.Object|
  implements |javax.accessibility.Accessible|

|javax.swing.ProgressMonitor_Description|
|javax.swing.ProgressMonitor_Fields|
|javax.swing.ProgressMonitor_Constructors|
|javax.swing.ProgressMonitor_Methods|

================================================================================

*javax.swing.ProgressMonitor_Fields*
|javax.accessibility.AccessibleContext_javax.swing.ProgressMonitor.accessibleContext|

*javax.swing.ProgressMonitor_Constructors*
|javax.swing.ProgressMonitor(Component,Object,String,int,int)|Constructs a grap

*javax.swing.ProgressMonitor_Methods*
|javax.swing.ProgressMonitor.close()|Indicate that the operation is complete.
|javax.swing.ProgressMonitor.getAccessibleContext()|Gets the AccessibleContext 
|javax.swing.ProgressMonitor.getMaximum()|Returns the maximum value -- the high
|javax.swing.ProgressMonitor.getMillisToDecideToPopup()|Returns the amount of t
|javax.swing.ProgressMonitor.getMillisToPopup()|Returns the amount of time it w
|javax.swing.ProgressMonitor.getMinimum()|Returns the minimum value -- the lowe
|javax.swing.ProgressMonitor.getNote()|Specifies the additional note that is di
|javax.swing.ProgressMonitor.isCanceled()|Returns true if the user hits the Can
|javax.swing.ProgressMonitor.setMaximum(int)|Specifies the maximum value.
|javax.swing.ProgressMonitor.setMillisToDecideToPopup(int)|Specifies the amount
|javax.swing.ProgressMonitor.setMillisToPopup(int)|Specifies the amount of time
|javax.swing.ProgressMonitor.setMinimum(int)|Specifies the minimum value.
|javax.swing.ProgressMonitor.setNote(String)|Specifies the additional note that
|javax.swing.ProgressMonitor.setProgress(int)|Indicate the progress of the oper

*javax.swing.ProgressMonitor_Description*

A class to monitor the progress of some operation. If it looks like the 
operation will take a while, a progress dialog will be popped up. When the 
ProgressMonitor is created it is given a numeric range and a descriptive 
string. As the operation progresses, call the setProgress method to indicate 
how far along the [min,max] range the operation is. Initially, there is no 
ProgressDialog. After the first millisToDecideToPopup milliseconds (default 
500) the progress monitor will predict how long the operation will take. If it 
is longer than millisToPopup (default 2000, 2 seconds) a ProgressDialog will be 
popped up. 

From time to time, when the Dialog box is visible, the progress bar will be 
updated when setProgress is called. setProgress won't always update the 
progress bar, it will only be done if the amount of progress is visibly 
significant. 



For further documentation and examples see How to Monitor Progress, a section 
in The Java Tutorial. 


*javax.accessibility.AccessibleContext_javax.swing.ProgressMonitor.accessibleContext*

A class to monitor the progress of some operation. If it looks like the 
operation will take a while, a progress dialog will be popped up. When the 
ProgressMonitor is created it is given a numeric range and a descriptive 
string. As the operation progresses, call the setProgress method to indicate 
how far along the [min,max] range the operation is. Initially, there is no 
ProgressDialog. After the first millisToDecideToPopup milliseconds (default 
500) the progress monitor will predict how long the operation will take. If it 
is longer than millisToPopup (default 2000, 2 seconds) a ProgressDialog will be 
popped up. 

From time to time, when the Dialog box is visible, the progress bar will be 
updated when setProgress is called. setProgress won't always update the 
progress bar, it will only be done if the amount of progress is visibly 
significant. 



For further documentation and examples see How to Monitor Progress, a section 
in The Java Tutorial. 



*javax.swing.ProgressMonitor(Component,Object,String,int,int)*

public ProgressMonitor(
  java.awt.Component parentComponent,
  java.lang.Object message,
  java.lang.String note,
  int min,
  int max)

Constructs a graphic object that shows progress, typically by filling in a 
rectangular bar as the process nears completion. 

    parentComponent - the parent component for the dialog box 
    message - a descriptive message that will be shown to the user to indicate what operation 
       is being monitored. This does not change as the operation progresses. 
       See the message parameters to methods in {@link JOptionPane#message} for 
       the range of values. 
    note - a short note describing the state of the operation. As the operation 
       progresses, you can call setNote to change the note displayed. This is 
       used, for example, in operations that iterate through a list of files to 
       show the name of the file being processes. If note is initially null, 
       there will be no note line in the dialog box and setNote will be 
       ineffective 
    min - the lower bound of the range 
    max - the upper bound of the range 

*javax.swing.ProgressMonitor.close()*

public void close()

Indicate that the operation is complete. This happens automatically when the 
value set by setProgress is >= max, but it may be called earlier if the 
operation ends early. 


*javax.swing.ProgressMonitor.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext for the ProgressMonitor 


    Returns: the AccessibleContext for the ProgressMonitor 
*javax.swing.ProgressMonitor.getMaximum()*

public int getMaximum()

Returns the maximum value -- the higher end of the progress value. 


    Returns: an int representing the maximum value 
*javax.swing.ProgressMonitor.getMillisToDecideToPopup()*

public int getMillisToDecideToPopup()

Returns the amount of time this object waits before deciding whether or not to 
popup a progress monitor. 


*javax.swing.ProgressMonitor.getMillisToPopup()*

public int getMillisToPopup()

Returns the amount of time it will take for the popup to appear. 


*javax.swing.ProgressMonitor.getMinimum()*

public int getMinimum()

Returns the minimum value -- the lower end of the progress value. 


    Returns: an int representing the minimum value 
*javax.swing.ProgressMonitor.getNote()*

public |java.lang.String| getNote()

Specifies the additional note that is displayed along with the progress 
message. 


    Returns: a String specifying the note to display 
*javax.swing.ProgressMonitor.isCanceled()*

public boolean isCanceled()

Returns true if the user hits the Cancel button in the progress dialog. 


*javax.swing.ProgressMonitor.setMaximum(int)*

public void setMaximum(int m)

Specifies the maximum value. 

    m - an int specifying the maximum value 

*javax.swing.ProgressMonitor.setMillisToDecideToPopup(int)*

public void setMillisToDecideToPopup(int millisToDecideToPopup)

Specifies the amount of time to wait before deciding whether or not to popup a 
progress monitor. 

    millisToDecideToPopup - an int specifying the time to wait, in milliseconds 

*javax.swing.ProgressMonitor.setMillisToPopup(int)*

public void setMillisToPopup(int millisToPopup)

Specifies the amount of time it will take for the popup to appear. (If the 
predicted time remaining is less than this time, the popup won't be displayed.) 

    millisToPopup - an int specifying the time in milliseconds 

*javax.swing.ProgressMonitor.setMinimum(int)*

public void setMinimum(int m)

Specifies the minimum value. 

    m - an int specifying the minimum value 

*javax.swing.ProgressMonitor.setNote(String)*

public void setNote(java.lang.String note)

Specifies the additional note that is displayed along with the progress 
message. Used, for example, to show which file the is currently being copied 
during a multiple-file copy. 

    note - a String specifying the note to display 

*javax.swing.ProgressMonitor.setProgress(int)*

public void setProgress(int nv)

Indicate the progress of the operation being monitored. If the specified value 
is >= the maximum, the progress monitor is closed. 

    nv - an int specifying the current value, between the maximum and minimum specified 
       for this component 



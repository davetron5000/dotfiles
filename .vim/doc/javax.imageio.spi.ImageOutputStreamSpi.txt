*javax.imageio.spi.ImageOutputStreamSpi* *ImageOutputStreamSpi* The service prov

public abstract class ImageOutputStreamSpi
  extends    |javax.imageio.spi.IIOServiceProvider|

|javax.imageio.spi.ImageOutputStreamSpi_Description|
|javax.imageio.spi.ImageOutputStreamSpi_Fields|
|javax.imageio.spi.ImageOutputStreamSpi_Constructors|
|javax.imageio.spi.ImageOutputStreamSpi_Methods|

================================================================================

*javax.imageio.spi.ImageOutputStreamSpi_Fields*
|java.lang.Class_javax.imageio.spi.ImageOutputStreamSpi.outputClass|

*javax.imageio.spi.ImageOutputStreamSpi_Constructors*
|javax.imageio.spi.ImageOutputStreamSpi()|Constructs a blank ImageOutputStreamS
|javax.imageio.spi.ImageOutputStreamSpi(String,String,Class)|Constructs an Imag

*javax.imageio.spi.ImageOutputStreamSpi_Methods*
|javax.imageio.spi.ImageOutputStreamSpi.canUseCacheFile()|Returns true if the I
|javax.imageio.spi.ImageOutputStreamSpi.createOutputStreamInstance(Object)|Retu
|javax.imageio.spi.ImageOutputStreamSpi.createOutputStreamInstance(Object,boolean,File)|
|javax.imageio.spi.ImageOutputStreamSpi.getOutputClass()|Returns a Class object
|javax.imageio.spi.ImageOutputStreamSpi.needsCacheFile()|Returns true if the Im

*javax.imageio.spi.ImageOutputStreamSpi_Description*

The service provider interface (SPI) for ImageOutputStreams. For more 
information on service provider interfaces, see the class comment for the 
IIORegistry class. 

This interface allows arbitrary objects to be "wrapped" by instances of 
ImageOutputStream. For example, a particular ImageOutputStreamSpi might allow a 
generic OutputStream to be used as a destination; another might output to a 
File or to a device such as a serial port. 

By treating the creation of ImageOutputStreams as a pluggable service, it 
becomes possible to handle future output destinations without changing the API. 
Also, high-performance implementations of ImageOutputStream (for example, 
native implementations for a particular platform) can be installed and used 
transparently by applications. 


*java.lang.Class_javax.imageio.spi.ImageOutputStreamSpi.outputClass*

The service provider interface (SPI) for ImageOutputStreams. For more 
information on service provider interfaces, see the class comment for the 
IIORegistry class. 

This interface allows arbitrary objects to be "wrapped" by instances of 
ImageOutputStream. For example, a particular ImageOutputStreamSpi might allow a 
generic OutputStream to be used as a destination; another might output to a 
File or to a device such as a serial port. 

By treating the creation of ImageOutputStreams as a pluggable service, it 
becomes possible to handle future output destinations without changing the API. 
Also, high-performance implementations of ImageOutputStream (for example, 
native implementations for a particular platform) can be installed and used 
transparently by applications. 



*javax.imageio.spi.ImageOutputStreamSpi()*

protected ImageOutputStreamSpi()

Constructs a blank ImageOutputStreamSpi. It is up to the subclass to initialize 
instance variables and/or override method implementations in order to provide 
working versions of all methods. 


*javax.imageio.spi.ImageOutputStreamSpi(String,String,Class)*

public ImageOutputStreamSpi(
  java.lang.String vendorName,
  java.lang.String version,
  java.lang.Class outputClass)

Constructs an ImageOutputStreamSpi with a given set of values. 

    vendorName - the vendor name. 
    version - a version identifier. 
    outputClass - a Class object indicating the legal object type for use by the 
       createOutputStreamInstance method. 

*javax.imageio.spi.ImageOutputStreamSpi.canUseCacheFile()*

public boolean canUseCacheFile()

Returns true if the ImageOutputStream implementation associated with this 
service provider can optionally make use of a cache File for improved 
performance and/or memory footrprint. If false, the value of the cacheFile 
argument to createOutputStreamInstance will be ignored. 

The default implementation returns false. 


    Returns: true if a cache file can be used by the output streams created by this service 
             provider. 
*javax.imageio.spi.ImageOutputStreamSpi.createOutputStreamInstance(Object)*

public |javax.imageio.stream.ImageOutputStream| createOutputStreamInstance(java.lang.Object output)
  throws |java.io.IOException|
         
Returns an instance of the ImageOutputStream implementation associated with 
this service provider. A cache file will be created in the system-dependent 
default temporary-file directory, if needed. 

    output - an object of the class type returned by getOutputClass. 

    Returns: an ImageOutputStream instance. 
*javax.imageio.spi.ImageOutputStreamSpi.createOutputStreamInstance(Object,boolean,File)*

public abstract |javax.imageio.stream.ImageOutputStream| createOutputStreamInstance(
  java.lang.Object output,
  boolean useCache,
  java.io.File cacheDir)
  throws |java.io.IOException|
         
Returns an instance of the ImageOutputStream implementation associated with 
this service provider. If the use of a cache file is optional, the useCache 
parameter will be consulted. Where a cache is required, or not applicable, the 
value of useCache will be ignored. 

    output - an object of the class type returned by getOutputClass. 
    useCache - a boolean indicating whether a cache file should be used, in cases where it is 
       optional. 
    cacheDir - a File indicating where the cache file should be created, or null to use the 
       system directory. 

    Returns: an ImageOutputStream instance. 
*javax.imageio.spi.ImageOutputStreamSpi.getOutputClass()*

public |java.lang.Class| getOutputClass()

Returns a Class object representing the class or interface type that must be 
implemented by an output destination in order to be "wrapped" in an 
ImageOutputStream via the createOutputStreamInstance method. 

Typical return values might include OutputStream.class or File.class, but any 
class may be used. 


    Returns: a Class variable. 
*javax.imageio.spi.ImageOutputStreamSpi.needsCacheFile()*

public boolean needsCacheFile()

Returns true if the ImageOutputStream implementation associated with this 
service provider requires the use of a cache File. 

The default implementation returns false. 


    Returns: true if a cache file is needed by the output streams created by this service 
             provider. 


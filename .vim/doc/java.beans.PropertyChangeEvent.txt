*java.beans.PropertyChangeEvent* *PropertyChangeEvent* A "PropertyChange" event 

public class PropertyChangeEvent
  extends    |java.util.EventObject|

|java.beans.PropertyChangeEvent_Description|
|java.beans.PropertyChangeEvent_Fields|
|java.beans.PropertyChangeEvent_Constructors|
|java.beans.PropertyChangeEvent_Methods|

================================================================================

*java.beans.PropertyChangeEvent_Constructors*
|java.beans.PropertyChangeEvent(Object,String,Object,Object)|Constructs a new P

*java.beans.PropertyChangeEvent_Methods*
|java.beans.PropertyChangeEvent.getNewValue()|Sets the new value for the proper
|java.beans.PropertyChangeEvent.getOldValue()|Gets the old value for the proper
|java.beans.PropertyChangeEvent.getPropagationId()|The "propagationId" field is
|java.beans.PropertyChangeEvent.getPropertyName()|Gets the programmatic name of
|java.beans.PropertyChangeEvent.setPropagationId(Object)|Sets the propagationId

*java.beans.PropertyChangeEvent_Description*

A "PropertyChange" event gets delivered whenever a bean changes a "bound" or 
"constrained" property. A PropertyChangeEvent object is sent as an argument to 
the PropertyChangeListener and VetoableChangeListener methods. 

Normally PropertyChangeEvents are accompanied by the name and the old and new 
value of the changed property. If the new value is a primitive type (such as 
int or boolean) it must be wrapped as the corresponding java.lang.* Object type 
(such as Integer or Boolean). 

Null values may be provided for the old and the new values if their true values 
are not known. 

An event source may send a null object as the name to indicate that an 
arbitrary set of if its properties have changed. In this case the old and new 
values should also be null. 


*java.beans.PropertyChangeEvent(Object,String,Object,Object)*

public PropertyChangeEvent(
  java.lang.Object source,
  java.lang.String propertyName,
  java.lang.Object oldValue,
  java.lang.Object newValue)

Constructs a new PropertyChangeEvent. 

    source - The bean that fired the event. 
    propertyName - The programmatic name of the property that was changed. 
    oldValue - The old value of the property. 
    newValue - The new value of the property. 

*java.beans.PropertyChangeEvent.getNewValue()*

public |java.lang.Object| getNewValue()

Sets the new value for the property, expressed as an Object. 


    Returns: The new value for the property, expressed as an Object. May be null if multiple 
             properties have changed. 
*java.beans.PropertyChangeEvent.getOldValue()*

public |java.lang.Object| getOldValue()

Gets the old value for the property, expressed as an Object. 


    Returns: The old value for the property, expressed as an Object. May be null if multiple 
             properties have changed. 
*java.beans.PropertyChangeEvent.getPropagationId()*

public |java.lang.Object| getPropagationId()

The "propagationId" field is reserved for future use. In Beans 1.0 the sole 
requirement is that if a listener catches a PropertyChangeEvent and then fires 
a PropertyChangeEvent of its own, then it should make sure that it propagates 
the propagationId field from its incoming event to its outgoing event. 


    Returns: the propagationId object associated with a bound/constrained property update. 
*java.beans.PropertyChangeEvent.getPropertyName()*

public |java.lang.String| getPropertyName()

Gets the programmatic name of the property that was changed. 


    Returns: The programmatic name of the property that was changed. May be null if multiple 
             properties have changed. 
*java.beans.PropertyChangeEvent.setPropagationId(Object)*

public void setPropagationId(java.lang.Object propagationId)

Sets the propagationId object for the event. 

    propagationId - The propagationId object for the event. 



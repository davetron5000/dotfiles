*java.awt.geom.GeneralPath* *GeneralPath* The GeneralPath class represents a geo

public final class GeneralPath
  extends    |java.lang.Object|
  implements |java.awt.Shape|
             |java.lang.Cloneable|

|java.awt.geom.GeneralPath_Description|
|java.awt.geom.GeneralPath_Fields|
|java.awt.geom.GeneralPath_Constructors|
|java.awt.geom.GeneralPath_Methods|

================================================================================

*java.awt.geom.GeneralPath_Fields*
|int_java.awt.geom.GeneralPath.WIND_EVEN_ODD|
|int_java.awt.geom.GeneralPath.WIND_NON_ZERO|

*java.awt.geom.GeneralPath_Constructors*
|java.awt.geom.GeneralPath()|Constructs a new GeneralPath object.
|java.awt.geom.GeneralPath(int)|Constructs a new GeneralPath object with the sp
|java.awt.geom.GeneralPath(int,int)|Constructs a new GeneralPath object with th
|java.awt.geom.GeneralPath(Shape)|Constructs a new GeneralPath object from an a

*java.awt.geom.GeneralPath_Methods*
|java.awt.geom.GeneralPath.append(PathIterator,boolean)|Appends the geometry of
|java.awt.geom.GeneralPath.append(Shape,boolean)|Appends the geometry of the sp
|java.awt.geom.GeneralPath.clone()|Creates a new object of the same class as th
|java.awt.geom.GeneralPath.closePath()|Closes the current subpath by drawing a 
|java.awt.geom.GeneralPath.contains(double,double)|Tests if the specified coord
|java.awt.geom.GeneralPath.contains(double,double,double,double)|Tests if the s
|java.awt.geom.GeneralPath.contains(Point2D)|Tests if the specified Point2D is 
|java.awt.geom.GeneralPath.contains(Rectangle2D)|Tests if the specified Rectang
|java.awt.geom.GeneralPath.createTransformedShape(AffineTransform)|Returns a ne
|java.awt.geom.GeneralPath.curveTo(float,float,float,float,float,float)|Adds a 
|java.awt.geom.GeneralPath.getBounds()|Return the bounding box of the path.
|java.awt.geom.GeneralPath.getBounds2D()|Returns the bounding box of the path.
|java.awt.geom.GeneralPath.getCurrentPoint()|Returns the coordinates most recen
|java.awt.geom.GeneralPath.getPathIterator(AffineTransform)|Returns a PathItera
|java.awt.geom.GeneralPath.getPathIterator(AffineTransform,double)|Returns a Pa
|java.awt.geom.GeneralPath.getWindingRule()|Returns the fill style winding rule
|java.awt.geom.GeneralPath.intersects(double,double,double,double)|Tests if the
|java.awt.geom.GeneralPath.intersects(Rectangle2D)|Tests if the interior of thi
|java.awt.geom.GeneralPath.lineTo(float,float)|Adds a point to the path by draw
|java.awt.geom.GeneralPath.moveTo(float,float)|Adds a point to the path by movi
|java.awt.geom.GeneralPath.quadTo(float,float,float,float)|Adds a curved segmen
|java.awt.geom.GeneralPath.reset()|Resets the path to empty.
|java.awt.geom.GeneralPath.setWindingRule(int)|Sets the winding rule for this p
|java.awt.geom.GeneralPath.transform(AffineTransform)|Transforms the geometry o

*java.awt.geom.GeneralPath_Description*

The GeneralPath class represents a geometric path constructed from straight 
lines, and quadratic and cubic (Bzier) curves. It can contain multiple 
subpaths. 

The winding rule specifies how the interior of a path is determined. There are 
two types of winding rules: EVEN_ODD and NON_ZERO. 

An EVEN_ODD winding rule means that enclosed regions of the path alternate 
between interior and exterior areas as traversed from the outside of the path 
towards a point inside the region. 

A NON_ZERO winding rule means that if a ray is drawn in any direction from a 
given point to infinity and the places where the path intersects the ray are 
examined, the point is inside of the path if and only if the number of times 
that the path crosses the ray from left to right does not equal the number of 
times that the path crosses the ray from right to left. 


*int_java.awt.geom.GeneralPath.WIND_EVEN_ODD*

The GeneralPath class represents a geometric path constructed from straight 
lines, and quadratic and cubic (Bzier) curves. It can contain multiple 
subpaths. 

The winding rule specifies how the interior of a path is determined. There are 
two types of winding rules: EVEN_ODD and NON_ZERO. 

An EVEN_ODD winding rule means that enclosed regions of the path alternate 
between interior and exterior areas as traversed from the outside of the path 
towards a point inside the region. 

A NON_ZERO winding rule means that if a ray is drawn in any direction from a 
given point to infinity and the places where the path intersects the ray are 
examined, the point is inside of the path if and only if the number of times 
that the path crosses the ray from left to right does not equal the number of 
times that the path crosses the ray from right to left. 


*int_java.awt.geom.GeneralPath.WIND_NON_ZERO*

The GeneralPath class represents a geometric path constructed from straight 
lines, and quadratic and cubic (Bzier) curves. It can contain multiple 
subpaths. 

The winding rule specifies how the interior of a path is determined. There are 
two types of winding rules: EVEN_ODD and NON_ZERO. 

An EVEN_ODD winding rule means that enclosed regions of the path alternate 
between interior and exterior areas as traversed from the outside of the path 
towards a point inside the region. 

A NON_ZERO winding rule means that if a ray is drawn in any direction from a 
given point to infinity and the places where the path intersects the ray are 
examined, the point is inside of the path if and only if the number of times 
that the path crosses the ray from left to right does not equal the number of 
times that the path crosses the ray from right to left. 



*java.awt.geom.GeneralPath()*

public GeneralPath()

Constructs a new GeneralPath object. If an operation performed on this path 
requires the interior of the path to be defined then the default NON_ZERO 
winding rule is used. 


*java.awt.geom.GeneralPath(int)*

public GeneralPath(int rule)

Constructs a new GeneralPath object with the specified winding rule to control 
operations that require the interior of the path to be defined. 

    rule - the winding rule 

*java.awt.geom.GeneralPath(int,int)*

public GeneralPath(
  int rule,
  int initialCapacity)

Constructs a new GeneralPath object with the specified winding rule and the 
specified initial capacity to store path coordinates. This number is an initial 
guess as to how many path segments are in the path, but the storage is expanded 
as needed to store whatever path segments are added to this path. 

    rule - the winding rule 
    initialCapacity - the estimate for the number of path segments in the path 

*java.awt.geom.GeneralPath(Shape)*

public GeneralPath(java.awt.Shape s)

Constructs a new GeneralPath object from an arbitrary (|java.awt.Shape|) 
object. All of the initial geometry and the winding rule for this path are 
taken from the specified Shape object. 

    s - the specified Shape object 

*java.awt.geom.GeneralPath.append(PathIterator,boolean)*

public void append(
  java.awt.geom.PathIterator pi,
  boolean connect)

Appends the geometry of the specified (|java.awt.geom.PathIterator|) object to 
the path, possibly connecting the new geometry to the existing path segments 
with a line segment. If the connect parameter is true and the path is not empty 
then any initial moveTo in the geometry of the appended Shape is turned into a 
lineTo segment. If the destination coordinates of such a connecting lineTo 
segment match the ending coordinates of a currently open subpath then the 
segment is omitted as superfluous. The winding rule of the specified Shape is 
ignored and the appended geometry is governed by the winding rule specified for 
this path. 

    pi - the PathIterator whose geometry is appended to this path 
    connect - a boolean to control whether or not to turn an initial moveTo segment into a 
       lineTo segment to connect the new geometry to the existing path 

*java.awt.geom.GeneralPath.append(Shape,boolean)*

public void append(
  java.awt.Shape s,
  boolean connect)

Appends the geometry of the specified Shape object to the path, possibly 
connecting the new geometry to the existing path segments with a line segment. 
If the connect parameter is true and the path is not empty then any initial 
moveTo in the geometry of the appended Shape is turned into a lineTo segment. 
If the destination coordinates of such a connecting lineTo segment match the 
ending coordinates of a currently open subpath then the segment is omitted as 
superfluous. The winding rule of the specified Shape is ignored and the 
appended geometry is governed by the winding rule specified for this path. 

    s - the Shape whose geometry is appended to this path 
    connect - a boolean to control whether or not to turn an initial moveTo segment into a 
       lineTo segment to connect the new geometry to the existing path 

*java.awt.geom.GeneralPath.clone()*

public |java.lang.Object| clone()

Creates a new object of the same class as this object. 


    Returns: a clone of this instance. 
*java.awt.geom.GeneralPath.closePath()*

public synchronized void closePath()

Closes the current subpath by drawing a straight line back to the coordinates 
of the last moveTo. If the path is already closed then this method has no 
effect. 


*java.awt.geom.GeneralPath.contains(double,double)*

public boolean contains(
  double x,
  double y)

Tests if the specified coordinates are inside the boundary of this Shape. 

    x,&nbsp;y - the specified coordinates 

    Returns: true if the specified coordinates are inside this Shape; false otherwise 
*java.awt.geom.GeneralPath.contains(double,double,double,double)*

public boolean contains(
  double x,
  double y,
  double w,
  double h)

Tests if the specified rectangular area is inside the boundary of this Shape. 

    x,&nbsp;y - the specified coordinates 
    w - the width of the specified rectangular area 
    h - the height of the specified rectangular area 

    Returns: true if this Shape contains the specified rectangluar area; false otherwise. 
*java.awt.geom.GeneralPath.contains(Point2D)*

public boolean contains(java.awt.geom.Point2D p)

Tests if the specified Point2D is inside the boundary of this Shape. 

    p - the specified Point2D 

    Returns: true if this Shape contains the specified Point2D, false otherwise. 
*java.awt.geom.GeneralPath.contains(Rectangle2D)*

public boolean contains(java.awt.geom.Rectangle2D r)

Tests if the specified Rectangle2D is inside the boundary of this Shape. 

    r - a specified Rectangle2D 

    Returns: true if this Shape bounds the specified Rectangle2D; false otherwise. 
*java.awt.geom.GeneralPath.createTransformedShape(AffineTransform)*

public synchronized |java.awt.Shape| createTransformedShape(java.awt.geom.AffineTransform at)

Returns a new transformed Shape. 

    at - the AffineTransform used to transform a new Shape. 

    Returns: a new Shape, transformed with the specified AffineTransform. 
*java.awt.geom.GeneralPath.curveTo(float,float,float,float,float,float)*

public synchronized void curveTo(
  float x1,
  float y1,
  float x2,
  float y2,
  float x3,
  float y3)

Adds a curved segment, defined by three new points, to the path by drawing a 
Bzier curve that intersects both the current coordinates and the coordinates 
(x3,y3), using the specified points (x1,y1) and (x2,y2) as Bzier control 
points. 

    x1,&nbsp;y1 - the coordinates of the first Bezier control point 
    x2,&nbsp;y2 - the coordinates of the second Bzier control point 
    x3,&nbsp;y3 - the coordinates of the final endpoint 

*java.awt.geom.GeneralPath.getBounds()*

public |java.awt.Rectangle| getBounds()

Return the bounding box of the path. 


    Returns: a {@link java.awt.Rectangle} object that bounds the current path. 
*java.awt.geom.GeneralPath.getBounds2D()*

public synchronized |java.awt.geom.Rectangle2D| getBounds2D()

Returns the bounding box of the path. 


    Returns: a {@link Rectangle2D} object that bounds the current path. 
*java.awt.geom.GeneralPath.getCurrentPoint()*

public synchronized |java.awt.geom.Point2D| getCurrentPoint()

Returns the coordinates most recently added to the end of the path as a 
(|java.awt.geom.Point2D|) object. 


    Returns: a Point2D object containing the ending coordinates of the path or null if there 
             are no points in the path. 
*java.awt.geom.GeneralPath.getPathIterator(AffineTransform)*

public |java.awt.geom.PathIterator| getPathIterator(java.awt.geom.AffineTransform at)

Returns a PathIterator object that iterates along the boundary of this Shape 
and provides access to the geometry of the outline of this Shape. The iterator 
for this class is not multi-threaded safe, which means that this GeneralPath 
class does not guarantee that modifications to the geometry of this GeneralPath 
object do not affect any iterations of that geometry that are already in 
process. 

    at - an AffineTransform 

    Returns: a new PathIterator that iterates along the boundary of this Shape and provides 
             access to the geometry of this Shape's outline 
*java.awt.geom.GeneralPath.getPathIterator(AffineTransform,double)*

public |java.awt.geom.PathIterator| getPathIterator(
  java.awt.geom.AffineTransform at,
  double flatness)

Returns a PathIterator object that iterates along the boundary of the flattened 
Shape and provides access to the geometry of the outline of the Shape. The 
iterator for this class is not multi-threaded safe, which means that this 
GeneralPath class does not guarantee that modifications to the geometry of this 
GeneralPath object do not affect any iterations of that geometry that are 
already in process. 

    at - an AffineTransform 
    flatness - the maximum distance that the line segments used to approximate the curved 
       segments are allowed to deviate from any point on the original curve 

    Returns: a new PathIterator that iterates along the flattened Shape boundary. 
*java.awt.geom.GeneralPath.getWindingRule()*

public synchronized int getWindingRule()

Returns the fill style winding rule. 


    Returns: an integer representing the current winding rule. 
*java.awt.geom.GeneralPath.intersects(double,double,double,double)*

public boolean intersects(
  double x,
  double y,
  double w,
  double h)

Tests if the interior of this Shape intersects the interior of a specified set 
of rectangular coordinates. 

    x,&nbsp;y - the specified coordinates 
    w - the width of the specified rectangular coordinates 
    h - the height of the specified rectangular coordinates 

    Returns: true if this Shape and the interior of the specified set of rectangular 
             coordinates intersect each other; false otherwise. 
*java.awt.geom.GeneralPath.intersects(Rectangle2D)*

public boolean intersects(java.awt.geom.Rectangle2D r)

Tests if the interior of this Shape intersects the interior of a specified 
Rectangle2D. 

    r - the specified Rectangle2D 

    Returns: true if this Shape and the interior of the specified Rectangle2D intersect each 
             other; false otherwise. 
*java.awt.geom.GeneralPath.lineTo(float,float)*

public synchronized void lineTo(
  float x,
  float y)

Adds a point to the path by drawing a straight line from the current 
coordinates to the new specified coordinates. 

    x,&nbsp;y - the specified coordinates 

*java.awt.geom.GeneralPath.moveTo(float,float)*

public synchronized void moveTo(
  float x,
  float y)

Adds a point to the path by moving to the specified coordinates. 

    x,&nbsp;y - the specified coordinates 

*java.awt.geom.GeneralPath.quadTo(float,float,float,float)*

public synchronized void quadTo(
  float x1,
  float y1,
  float x2,
  float y2)

Adds a curved segment, defined by two new points, to the path by drawing a 
Quadratic curve that intersects both the current coordinates and the 
coordinates (x2,y2), using the specified point (x1,y1) as a quadratic 
parametric control point. 

    x1,&nbsp;y1 - the coordinates of the first quadratic control point 
    x2,&nbsp;y2 - the coordinates of the final endpoint 

*java.awt.geom.GeneralPath.reset()*

public synchronized void reset()

Resets the path to empty. The append position is set back to the beginning of 
the path and all coordinates and point types are forgotten. 


*java.awt.geom.GeneralPath.setWindingRule(int)*

public void setWindingRule(int rule)

Sets the winding rule for this path to the specified value. 

    rule - an integer representing the specified winding rule 

*java.awt.geom.GeneralPath.transform(AffineTransform)*

public void transform(java.awt.geom.AffineTransform at)

Transforms the geometry of this path using the specified 
(|java.awt.geom.AffineTransform|) . The geometry is transformed in place, which 
permanently changes the boundary defined by this object. 

    at - the AffineTransform used to transform the area 



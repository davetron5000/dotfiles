*java.lang.reflect.AccessibleObject* *AccessibleObject* The AccessibleObject cla

public class AccessibleObject
  extends    |java.lang.Object|
  implements |java.lang.reflect.AnnotatedElement|

|java.lang.reflect.AccessibleObject_Description|
|java.lang.reflect.AccessibleObject_Fields|
|java.lang.reflect.AccessibleObject_Constructors|
|java.lang.reflect.AccessibleObject_Methods|

================================================================================

*java.lang.reflect.AccessibleObject_Constructors*
|java.lang.reflect.AccessibleObject()|Constructor: only used by the Java Virtua

*java.lang.reflect.AccessibleObject_Methods*
|java.lang.reflect.AccessibleObject.getAnnotation(Class)|
|java.lang.reflect.AccessibleObject.getAnnotations()|
|java.lang.reflect.AccessibleObject.getDeclaredAnnotations()|
|java.lang.reflect.AccessibleObject.isAccessible()|Get the value of the accessi
|java.lang.reflect.AccessibleObject.isAnnotationPresent(Class)|
|java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject[],boolean)|C
|java.lang.reflect.AccessibleObject.setAccessible(boolean)|Set the accessible f

*java.lang.reflect.AccessibleObject_Description*

The AccessibleObject class is the base class for Field, Method and Constructor 
objects. It provides the ability to flag a reflected object as suppressing 
default Java language access control checks when it is used. The access 
checks--for public, default (package) access, protected, and private 
members--are performed when Fields, Methods or Constructors are used to set or 
get fields, to invoke methods, or to create and initialize new instances of 
classes, respectively. 

Setting the accessible flag in a reflected object permits sophisticated 
applications with sufficient privilege, such as Java Object Serialization or 
other persistence mechanisms, to manipulate objects in a manner that would 
normally be prohibited. 


*java.lang.reflect.AccessibleObject()*

protected AccessibleObject()

Constructor: only used by the Java Virtual Machine. 


*java.lang.reflect.AccessibleObject.getAnnotation(Class)*

public |java.lang.annotation.Annotation| getAnnotation(java.lang.Class annotationClass)




*java.lang.reflect.AccessibleObject.getAnnotations()*

public |java.lang.annotation.Annotation| getAnnotations()




*java.lang.reflect.AccessibleObject.getDeclaredAnnotations()*

public |java.lang.annotation.Annotation| getDeclaredAnnotations()




*java.lang.reflect.AccessibleObject.isAccessible()*

public boolean isAccessible()

Get the value of the accessible flag for this object. 


    Returns: the value of the object's accessible flag 
*java.lang.reflect.AccessibleObject.isAnnotationPresent(Class)*

public boolean isAnnotationPresent(java.lang.Class annotationClass)




*java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject[],boolean)*

public static void setAccessible(
  java.lang.reflect.AccessibleObject[] array,
  boolean flag)
  throws |java.lang.SecurityException|
         
Convenience method to set the accessible flag for an array of objects with a 
single security check (for efficiency). 

First, if there is a security manager, its checkPermission method is called 
with a ReflectPermission("suppressAccessChecks") permission. 

A SecurityException is raised if flag is true but accessibility of any of the 
elements of the input array may not be changed (for example, if the element 
object is a (|java.lang.reflect.Constructor|) object for the class 
(|java.lang.Class|) ). In the event of such a SecurityException, the 
accessibility of objects is set to flag for array elements upto (and excluding) 
the element for which the exception occurred; the accessibility of elements 
beyond (and including) the element for which the exception occurred is 
unchanged. 

    array - the array of AccessibleObjects 
    flag - the new value for the accessible flag in each object 

*java.lang.reflect.AccessibleObject.setAccessible(boolean)*

public void setAccessible(boolean flag)
  throws |java.lang.SecurityException|
         
Set the accessible flag for this object to the indicated boolean value. A value 
of true indicates that the reflected object should suppress Java language 
access checking when it is used. A value of false indicates that the reflected 
object should enforce Java language access checks. 

First, if there is a security manager, its checkPermission method is called 
with a ReflectPermission("suppressAccessChecks") permission. 

A SecurityException is raised if flag is true but accessibility of this object 
may not be changed (for example, if this element object is a 
(|java.lang.reflect.Constructor|) object for the class (|java.lang.Class|) ). 

A SecurityException is raised if this object is a 
(|java.lang.reflect.Constructor|) object for the class java.lang.Class, and 
flag is true. 

    flag - the new value for the accessible flag 



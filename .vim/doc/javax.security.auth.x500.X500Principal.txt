*javax.security.auth.x500.X500Principal* *X500Principal*  This class represents an X.500 Principal.

public final class X500Principal
  extends    |java.lang.Object|
  implements |java.security.Principal|
             |java.io.Serializable|

|javax.security.auth.x500.X500Principal_Description|
|javax.security.auth.x500.X500Principal_Fields|
|javax.security.auth.x500.X500Principal_Constructors|
|javax.security.auth.x500.X500Principal_Methods|

====================================================================================================================================================================================

*javax.security.auth.x500.X500Principal_Fields*
|java.lang.String_javax.security.auth.x500.X500Principal.CANONICAL|
|java.lang.String_javax.security.auth.x500.X500Principal.RFC1779|
|java.lang.String_javax.security.auth.x500.X500Principal.RFC2253|

*javax.security.auth.x500.X500Principal_Constructors*
|javax.security.auth.x500.X500Principal(byte[])|Creates an X500Principal from a distinguished name in   ASN.1 DER encoded form.
|javax.security.auth.x500.X500Principal(InputStream)|Creates an X500Principal from an InputStream  containing the distinguished name in ASN.1 DER encoded form.
|javax.security.auth.x500.X500Principal(String)|Creates an X500Principal from a string representation of  an X.500 distinguished name (ex:   "CN=Duke, OU=JavaSoft, O=Sun Microsyst

*javax.security.auth.x500.X500Principal_Methods*
|javax.security.auth.x500.X500Principal.equals(Object)|Compares the specified Object with this   X500Principal for equality.
|javax.security.auth.x500.X500Principal.getEncoded()|Returns the distinguished name in ASN.1 DER encoded form.
|javax.security.auth.x500.X500Principal.getName()|Returns a string representation of the X.500 distinguished name using  the format defined in RFC 2253.
|javax.security.auth.x500.X500Principal.getName(String)|Returns a string representation of the X.500 distinguished name  using the specified format.
|javax.security.auth.x500.X500Principal.hashCode()|Return a hash code for this X500Principal.
|javax.security.auth.x500.X500Principal.toString()|Return a user-friendly string representation of this  X500Principal.

*javax.security.auth.x500.X500Principal_Description*

This class represents an X.500 Principal. X500Principals are represented by distinguished names such as "CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US". 

This class can be instantiated by using a string representation of the distinguished name, or by using the ASN.1 DER encoded byte representation of the distinguished name. The 
current specification for the string representation of a distinguished name is defined in RFC 2253. This class, however, accepts string formats from both RFC 2253 and RFC 1779, 
and also recognizes attribute type keywords whose OIDs (Object Identifiers) are defined in RFC 2459. 

The string representation for this X500Principal can be obtained by calling the getName methods. 

Note that the getSubjectX500Principal and getIssuerX500Principal methods of X509Certificate return X500Principals representing the issuer and subject fields of the certificate. 



*java.lang.String_javax.security.auth.x500.X500Principal.CANONICAL*

Canonical String format of Distinguished Names. 


*java.lang.String_javax.security.auth.x500.X500Principal.RFC1779*

RFC 1779 String format of Distinguished Names. 


*java.lang.String_javax.security.auth.x500.X500Principal.RFC2253*

RFC 2253 String format of Distinguished Names. 



*javax.security.auth.x500.X500Principal(byte[])*

public X500Principal(byte[] name)

Creates an X500Principal from a distinguished name in ASN.1 DER encoded form. The ASN.1 notation for this structure is as follows. 

Name ::= CHOICE { RDNSequence } 

RDNSequence ::= SEQUENCE OF RelativeDistinguishedName 

RelativeDistinguishedName ::= SET SIZE (1 .. MAX) OF AttributeTypeAndValue 

AttributeTypeAndValue ::= SEQUENCE { type AttributeType, value AttributeValue } 

AttributeType ::= OBJECT IDENTIFIER 

AttributeValue ::= ANY DEFINED BY AttributeType .... DirectoryString ::= CHOICE { teletexString TeletexString (SIZE (1..MAX)), printableString PrintableString (SIZE (1..MAX)), 
universalString UniversalString (SIZE (1..MAX)), utf8String UTF8String (SIZE (1.. MAX)), bmpString BMPString (SIZE (1..MAX)) } 

    name - a byte array containing the distinguished name in ASN.1 DER encoded form 

*javax.security.auth.x500.X500Principal(InputStream)*

public X500Principal(java.io.InputStream is)

Creates an X500Principal from an InputStream containing the distinguished name in ASN.1 DER encoded form. The ASN.1 notation for this structure is supplied in the documentation 
for X500Principal(byte[] name)(|javax.security.auth.x500.X500Principal|) . 

The read position of the input stream is positioned to the next available byte after the encoded distinguished name. 

    is - an InputStream containing the distinguished name in ASN.1 DER encoded form 

*javax.security.auth.x500.X500Principal(String)*

public X500Principal(java.lang.String name)

Creates an X500Principal from a string representation of an X.500 distinguished name (ex: "CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US"). The distinguished name must be 
specified using the grammar defined in RFC 1779 or RFC 2253 (either format is acceptable). 

This constructor recognizes the attribute type keywords defined in RFC 1779 and RFC 2253 (and listed in getName(String format)(|javax.security.auth.x500.X500Principal|) ), as well 
as the T, DNQ or DNQUALIFIER, SURNAME, GIVENNAME, INITIALS, GENERATION, EMAILADDRESS, and SERIALNUMBER keywords whose OIDs are defined in RFC 2459 and its successor. Any other 
attribute type must be specified as an OID. 

    name - an X.500 distinguished name in RFC 1779 or RFC 2253 format 

*javax.security.auth.x500.X500Principal.equals(Object)*

public boolean equals(java.lang.Object o)

Compares the specified Object with this X500Principal for equality. 

Specifically, this method returns true if the Object o is an X500Principal and if the respective canonical string representations (obtained via the 
getName(X500Principal.CANONICAL) method) of this object and o are equal. 

This implementation is compliant with the requirements of RFC 2459. 


    o - Object to be compared for equality with this X500Principal 

    Returns: true if the specified Object is equal to this X500Principal, false otherwise 

*javax.security.auth.x500.X500Principal.getEncoded()*

public byte[] getEncoded()

Returns the distinguished name in ASN.1 DER encoded form. The ASN.1 notation for this structure is supplied in the documentation for X500Principal(byte[] 
name)(|javax.security.auth.x500.X500Principal|) . 

Note that the byte array returned is cloned to protect against subsequent modifications. 



    Returns: a byte array containing the distinguished name in ASN.1 DER encoded form 

*javax.security.auth.x500.X500Principal.getName()*

public |java.lang.String| getName()

Returns a string representation of the X.500 distinguished name using the format defined in RFC 2253. 

This method is equivalent to calling getName(X500Principal.RFC2253). 



    Returns: the distinguished name of this X500Principal 

*javax.security.auth.x500.X500Principal.getName(String)*

public |java.lang.String| getName(java.lang.String format)

Returns a string representation of the X.500 distinguished name using the specified format. Valid values for the format are "RFC1779", "RFC2253", and "CANONICAL" (case 
insensitive). 

If "RFC1779" is specified as the format, this method emits the attribute type keywords defined in RFC 1779 (CN, L, ST, O, OU, C, STREET). Any other attribute type is emitted as an 
OID. 

If "RFC2253" is specified as the format, this method emits the attribute type keywords defined in RFC 2253 (CN, L, ST, O, OU, C, STREET, DC, UID). Any other attribute type is 
emitted as an OID. Under a strict reading, RFC 2253 only specifies a UTF-8 string representation. The String returned by this method is the Unicode string achieved by decoding 
this UTF-8 representation. 

If "CANONICAL" is specified as the format, this method returns an RFC 2253 conformant string representation with the following additional canonicalizations: 

Leading zeros are removed from attribute types that are encoded as dotted decimal OIDs DirectoryString attribute values of type PrintableString and UTF8String are not output in 
hexadecimal format DirectoryString attribute values of types other than PrintableString and UTF8String are output in hexadecimal format Leading and trailing white space characters 
are removed from non-hexadecimal attribute values (unless the value consists entirely of white space characters) Internal substrings of one or more white space characters are 
converted to a single space in non-hexadecimal attribute values Relative Distinguished Names containing more than one Attribute Value Assertion (AVA) are output in the following 
order: an alphabetical ordering of AVAs containing standard keywords, followed by a numeric ordering of AVAs containing OID keywords. The only characters in attribute values that 
are escaped are those which section 2.4 of RFC 2253 states must be escaped (they are escaped using a preceding backslash character) The entire name is converted to upper case 
using String.toUpperCase(Locale.US) The entire name is converted to lower case using String.toLowerCase(Locale.US) The name is finally normalized using normalization form KD, as 
described in the Unicode Standard and UAX #15 

Additional standard formats may be introduced in the future. 


    format - the format to use 

    Returns: a string representation of this X500Principal using the specified format 

*javax.security.auth.x500.X500Principal.hashCode()*

public int hashCode()

Return a hash code for this X500Principal. 

The hash code is calculated via: getName(X500Principal.CANONICAL).hashCode() 



    Returns: a hash code for this X500Principal 

*javax.security.auth.x500.X500Principal.toString()*

public |java.lang.String| toString()

Return a user-friendly string representation of this X500Principal. 



    Returns: a string representation of this X500Principal 



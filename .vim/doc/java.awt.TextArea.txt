*java.awt.TextArea* *TextArea* A TextArea object is a multi-line region
 that di

public class TextArea
  extends    |java.awt.TextComponent|

|java.awt.TextArea_Description|
|java.awt.TextArea_Fields|
|java.awt.TextArea_Constructors|
|java.awt.TextArea_Methods|

================================================================================

*java.awt.TextArea_Fields*
|int_java.awt.TextArea.SCROLLBARS_BOTH|
|int_java.awt.TextArea.SCROLLBARS_HORIZONTAL_ONLY|
|int_java.awt.TextArea.SCROLLBARS_NONE|
|int_java.awt.TextArea.SCROLLBARS_VERTICAL_ONLY|

*java.awt.TextArea_Constructors*
|java.awt.TextArea()|Constructs a new text area with the empty string as text.
|java.awt.TextArea(int,int)|Constructs a new text area with the specified numbe
|java.awt.TextArea(String)|Constructs a new text area with the specified text.
|java.awt.TextArea(String,int,int)|Constructs a new text area with the specifie
|java.awt.TextArea(String,int,int,int)|Constructs a new text area with the spec

*java.awt.TextArea_Methods*
|java.awt.TextArea.addNotify()|Creates the TextArea's peer.
|java.awt.TextArea.append(String)|Appends the given text to the text area's cur
|java.awt.TextArea.appendText(String)|
|java.awt.TextArea.getAccessibleContext()|Returns the AccessibleContext associa
|java.awt.TextArea.getColumns()|Returns the number of columns in this text area
|java.awt.TextArea.getMinimumSize()|Determines the minimum size of this text ar
|java.awt.TextArea.getMinimumSize(int,int)|Determines the minimum size of a tex
|java.awt.TextArea.getPreferredSize()|Determines the preferred size of this tex
|java.awt.TextArea.getPreferredSize(int,int)|Determines the preferred size of a
|java.awt.TextArea.getRows()|Returns the number of rows in the text area.
|java.awt.TextArea.getScrollbarVisibility()|Returns an enumerated value that in
|java.awt.TextArea.insert(String,int)|Inserts the specified text at the specifi
|java.awt.TextArea.insertText(String,int)|
|java.awt.TextArea.minimumSize()|
|java.awt.TextArea.minimumSize(int,int)|
|java.awt.TextArea.paramString()|Returns a string representing the state of thi
|java.awt.TextArea.preferredSize()|
|java.awt.TextArea.preferredSize(int,int)|
|java.awt.TextArea.replaceRange(String,int,int)|Replaces text between the indic
|java.awt.TextArea.replaceText(String,int,int)|
|java.awt.TextArea.setColumns(int)|Sets the number of columns for this text are
|java.awt.TextArea.setRows(int)|Sets the number of rows for this text area.

*java.awt.TextArea_Description*

A TextArea object is a multi-line region that displays text. It can be set to 
allow editing or to be read-only. 

The following image shows the appearance of a text area: 



This text area could be created by the following line of code: 



new TextArea("Hello", 5, 40); 




*int_java.awt.TextArea.SCROLLBARS_BOTH*

A TextArea object is a multi-line region that displays text. It can be set to 
allow editing or to be read-only. 

The following image shows the appearance of a text area: 



This text area could be created by the following line of code: 



new TextArea("Hello", 5, 40); 




*int_java.awt.TextArea.SCROLLBARS_HORIZONTAL_ONLY*

A TextArea object is a multi-line region that displays text. It can be set to 
allow editing or to be read-only. 

The following image shows the appearance of a text area: 



This text area could be created by the following line of code: 



new TextArea("Hello", 5, 40); 




*int_java.awt.TextArea.SCROLLBARS_NONE*

A TextArea object is a multi-line region that displays text. It can be set to 
allow editing or to be read-only. 

The following image shows the appearance of a text area: 



This text area could be created by the following line of code: 



new TextArea("Hello", 5, 40); 




*int_java.awt.TextArea.SCROLLBARS_VERTICAL_ONLY*

A TextArea object is a multi-line region that displays text. It can be set to 
allow editing or to be read-only. 

The following image shows the appearance of a text area: 



This text area could be created by the following line of code: 



new TextArea("Hello", 5, 40); 





*java.awt.TextArea()*

public TextArea()
  throws |java.awt.HeadlessException|
         
Constructs a new text area with the empty string as text. This text area is 
created with scrollbar visibility equal to (|java.awt.TextArea|) , so both 
vertical and horizontal scrollbars will be visible for this text area. 


*java.awt.TextArea(int,int)*

public TextArea(
  int rows,
  int columns)
  throws |java.awt.HeadlessException|
         
Constructs a new text area with the specified number of rows and columns and 
the empty string as text. A column is an approximate average character width 
that is platform-dependent. The text area is created with scrollbar visibility 
equal to (|java.awt.TextArea|) , so both vertical and horizontal scrollbars 
will be visible for this text area. 

    rows - the number of rows 
    columns - the number of columns 

*java.awt.TextArea(String)*

public TextArea(java.lang.String text)
  throws |java.awt.HeadlessException|
         
Constructs a new text area with the specified text. This text area is created 
with scrollbar visibility equal to (|java.awt.TextArea|) , so both vertical and 
horizontal scrollbars will be visible for this text area. 

    text - the text to be displayed; if text is null, the empty string "" will be 
       displayed 

*java.awt.TextArea(String,int,int)*

public TextArea(
  java.lang.String text,
  int rows,
  int columns)
  throws |java.awt.HeadlessException|
         
Constructs a new text area with the specified text, and with the specified 
number of rows and columns. A column is an approximate average character width 
that is platform-dependent. The text area is created with scrollbar visibility 
equal to (|java.awt.TextArea|) , so both vertical and horizontal scrollbars 
will be visible for this text area. 

    text - the text to be displayed; if text is null, the empty string "" will be 
       displayed 
    rows - the number of rows 
    columns - the number of columns 

*java.awt.TextArea(String,int,int,int)*

public TextArea(
  java.lang.String text,
  int rows,
  int columns,
  int scrollbars)
  throws |java.awt.HeadlessException|
         
Constructs a new text area with the specified text, and with the rows, columns, 
and scroll bar visibility as specified. All TextArea constructors defer to this 
one. 

The TextArea class defines several constants that can be supplied as values for 
the scrollbars argument: 

SCROLLBARS_BOTH, SCROLLBARS_VERTICAL_ONLY, SCROLLBARS_HORIZONTAL_ONLY, 
SCROLLBARS_NONE. 

Any other value for the scrollbars argument is invalid and will result in this 
text area being created with scrollbar visibility equal to the default value of 
(|java.awt.TextArea|) . 

    text - the text to be displayed; if text is null, the empty string "" will be 
       displayed 
    rows - the number of rows; if rows is less than 0, rows is set to 0 
    columns - the number of columns; if columns is less than 0, columns is set to 0 
    scrollbars - a constant that determines what scrollbars are created to view the text area 

*java.awt.TextArea.addNotify()*

public void addNotify()

Creates the TextArea's peer. The peer allows us to modify the appearance of the 
TextArea without changing any of its functionality. 


*java.awt.TextArea.append(String)*

public void append(java.lang.String str)

Appends the given text to the text area's current text. Note that passing null 
or inconsistent parameters is invalid and will result in unspecified behavior. 

    str - the non-null text to append 

*java.awt.TextArea.appendText(String)*

public synchronized void appendText(java.lang.String str)




*java.awt.TextArea.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Returns the AccessibleContext associated with this TextArea. For text areas, 
the AccessibleContext takes the form of an AccessibleAWTTextArea. A new 
AccessibleAWTTextArea instance is created if necessary. 


    Returns: an AccessibleAWTTextArea that serves as the AccessibleContext of this TextArea 
*java.awt.TextArea.getColumns()*

public int getColumns()

Returns the number of columns in this text area. 


    Returns: the number of columns in the text area 
*java.awt.TextArea.getMinimumSize()*

public |java.awt.Dimension| getMinimumSize()

Determines the minimum size of this text area. 


    Returns: the preferred dimensions needed for this text area 
*java.awt.TextArea.getMinimumSize(int,int)*

public |java.awt.Dimension| getMinimumSize(
  int rows,
  int columns)

Determines the minimum size of a text area with the specified number of rows 
and columns. 

    rows - the number of rows 
    columns - the number of columns 

    Returns: the minimum dimensions required to display the text area with the specified 
             number of rows and columns 
*java.awt.TextArea.getPreferredSize()*

public |java.awt.Dimension| getPreferredSize()

Determines the preferred size of this text area. 


    Returns: the preferred dimensions needed for this text area 
*java.awt.TextArea.getPreferredSize(int,int)*

public |java.awt.Dimension| getPreferredSize(
  int rows,
  int columns)

Determines the preferred size of a text area with the specified number of rows 
and columns. 

    rows - the number of rows 
    columns - the number of columns 

    Returns: the preferred dimensions required to display the text area with the specified 
             number of rows and columns 
*java.awt.TextArea.getRows()*

public int getRows()

Returns the number of rows in the text area. 


    Returns: the number of rows in the text area 
*java.awt.TextArea.getScrollbarVisibility()*

public int getScrollbarVisibility()

Returns an enumerated value that indicates which scroll bars the text area 
uses. 

The TextArea class defines four integer constants that are used to specify 
which scroll bars are available. TextArea has one constructor that gives the 
application discretion over scroll bars. 


    Returns: an integer that indicates which scroll bars are used 
*java.awt.TextArea.insert(String,int)*

public void insert(
  java.lang.String str,
  int pos)

Inserts the specified text at the specified position in this text area. Note 
that passing null or inconsistent parameters is invalid and will result in 
unspecified behavior. 

    str - the non-null text to insert 
    pos - the position at which to insert 

*java.awt.TextArea.insertText(String,int)*

public synchronized void insertText(
  java.lang.String str,
  int pos)




*java.awt.TextArea.minimumSize()*

public |java.awt.Dimension| minimumSize()




*java.awt.TextArea.minimumSize(int,int)*

public |java.awt.Dimension| minimumSize(
  int rows,
  int columns)




*java.awt.TextArea.paramString()*

protected |java.lang.String| paramString()

Returns a string representing the state of this TextArea. This method is 
intended to be used only for debugging purposes, and the content and format of 
the returned string may vary between implementations. The returned string may 
be empty but may not be null. 


    Returns: the parameter string of this text area 
*java.awt.TextArea.preferredSize()*

public |java.awt.Dimension| preferredSize()




*java.awt.TextArea.preferredSize(int,int)*

public |java.awt.Dimension| preferredSize(
  int rows,
  int columns)




*java.awt.TextArea.replaceRange(String,int,int)*

public void replaceRange(
  java.lang.String str,
  int start,
  int end)

Replaces text between the indicated start and end positions with the specified 
replacement text. The text at the end position will not be replaced. The text 
at the start position will be replaced (unless the start position is the same 
as the end position). The text position is zero-based. The inserted substring 
may be of a different length than the text it replaces. Note that passing null 
or inconsistent parameters is invalid and will result in unspecified behavior. 

    str - the non-null text to use as the replacement 
    start - the start position 
    end - the end position 

*java.awt.TextArea.replaceText(String,int,int)*

public synchronized void replaceText(
  java.lang.String str,
  int start,
  int end)




*java.awt.TextArea.setColumns(int)*

public void setColumns(int columns)

Sets the number of columns for this text area. 

    columns - the number of columns 

*java.awt.TextArea.setRows(int)*

public void setRows(int rows)

Sets the number of rows for this text area. 

    rows - the number of rows 



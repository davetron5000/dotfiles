*java.awt.Checkbox* *Checkbox* A check box is a graphical component that can be 

public class Checkbox
  extends    |java.awt.Component|
  implements |java.awt.ItemSelectable|
             |javax.accessibility.Accessible|

|java.awt.Checkbox_Description|
|java.awt.Checkbox_Fields|
|java.awt.Checkbox_Constructors|
|java.awt.Checkbox_Methods|

================================================================================

*java.awt.Checkbox_Constructors*
|java.awt.Checkbox()|Creates a check box with an empty string for its label.
|java.awt.Checkbox(String)|Creates a check box with the specified label.
|java.awt.Checkbox(String,boolean)|Creates a check box with the specified label
|java.awt.Checkbox(String,boolean,CheckboxGroup)|Constructs a Checkbox with the
|java.awt.Checkbox(String,CheckboxGroup,boolean)|Creates a check box with the s

*java.awt.Checkbox_Methods*
|java.awt.Checkbox.addItemListener(ItemListener)|Adds the specified item listen
|java.awt.Checkbox.addNotify()|Creates the peer of the Checkbox.
|java.awt.Checkbox.getAccessibleContext()|Gets the AccessibleContext associated
|java.awt.Checkbox.getCheckboxGroup()|Determines this check box's group.
|java.awt.Checkbox.getItemListeners()|Returns an array of all the item listener
|java.awt.Checkbox.getLabel()|Gets the label of this check box.
|java.awt.Checkbox.getListeners(Class)|Returns an array of all the objects curr
|java.awt.Checkbox.getSelectedObjects()|Returns an array (length 1) containing 
|java.awt.Checkbox.getState()|Determines whether this check box is in the "on" 
|java.awt.Checkbox.paramString()|Returns a string representing the state of thi
|java.awt.Checkbox.processEvent(AWTEvent)|Processes events on this check box.
|java.awt.Checkbox.processItemEvent(ItemEvent)|Processes item events occurring 
|java.awt.Checkbox.removeItemListener(ItemListener)|Removes the specified item 
|java.awt.Checkbox.setCheckboxGroup(CheckboxGroup)|Sets this check box's group 
|java.awt.Checkbox.setLabel(String)|Sets this check box's label to be the strin
|java.awt.Checkbox.setState(boolean)|Sets the state of this check box to the sp

*java.awt.Checkbox_Description*

A check box is a graphical component that can be in either an "on" (true) or 
"off" (false) state. Clicking on a check box changes its state from "on" to 
"off," or from "off" to "on." 

The following code example creates a set of check boxes in a grid layout: 



setLayout(new GridLayout(3, 1)); add(new Checkbox("one", null, true)); add(new 
Checkbox("two")); add(new Checkbox("three")); 

This image depicts the check boxes and grid layout created by this code 
example: 



The button labeled one is in the "on" state, and the other two are in the "off" 
state. In this example, which uses the GridLayout class, the states of the 
three check boxes are set independently. 

Alternatively, several check boxes can be grouped together under the control of 
a single object, using the CheckboxGroup class. In a check box group, at most 
one button can be in the "on" state at any given time. Clicking on a check box 
to turn it on forces any other check box in the same group that is on into the 
"off" state. 


*java.awt.Checkbox()*

public Checkbox()
  throws |java.awt.HeadlessException|
         
Creates a check box with an empty string for its label. The state of this check 
box is set to "off," and it is not part of any check box group. 


*java.awt.Checkbox(String)*

public Checkbox(java.lang.String label)
  throws |java.awt.HeadlessException|
         
Creates a check box with the specified label. The state of this check box is 
set to "off," and it is not part of any check box group. 

    label - a string label for this check box, or null for no label. 

*java.awt.Checkbox(String,boolean)*

public Checkbox(
  java.lang.String label,
  boolean state)
  throws |java.awt.HeadlessException|
         
Creates a check box with the specified label and sets the specified state. This 
check box is not part of any check box group. 

    label - a string label for this check box, or null for no label 
    state - the initial state of this check box 

*java.awt.Checkbox(String,boolean,CheckboxGroup)*

public Checkbox(
  java.lang.String label,
  boolean state,
  java.awt.CheckboxGroup group)
  throws |java.awt.HeadlessException|
         
Constructs a Checkbox with the specified label, set to the specified state, and 
in the specified check box group. 

    label - a string label for this check box, or null for no label. 
    state - the initial state of this check box. 
    group - a check box group for this check box, or null for no group. 

*java.awt.Checkbox(String,CheckboxGroup,boolean)*

public Checkbox(
  java.lang.String label,
  java.awt.CheckboxGroup group,
  boolean state)
  throws |java.awt.HeadlessException|
         
Creates a check box with the specified label, in the specified check box group, 
and set to the specified state. 

    label - a string label for this check box, or null for no label. 
    group - a check box group for this check box, or null for no group. 
    state - the initial state of this check box. 

*java.awt.Checkbox.addItemListener(ItemListener)*

public synchronized void addItemListener(java.awt.event.ItemListener l)

Adds the specified item listener to receive item events from this check box. 
Item events are sent to listeners in response to user input, but not in 
response to calls to setState(). If l is null, no exception is thrown and no 
action is performed. 

    l - the item listener 

*java.awt.Checkbox.addNotify()*

public void addNotify()

Creates the peer of the Checkbox. The peer allows you to change the look of the 
Checkbox without changing its functionality. 


*java.awt.Checkbox.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this Checkbox. For checkboxes, the 
AccessibleContext takes the form of an AccessibleAWTCheckbox. A new 
AccessibleAWTCheckbox is created if necessary. 


    Returns: an AccessibleAWTCheckbox that serves as the AccessibleContext of this Checkbox 
*java.awt.Checkbox.getCheckboxGroup()*

public |java.awt.CheckboxGroup| getCheckboxGroup()

Determines this check box's group. 


    Returns: this check box's group, or null if the check box is not part of a check box 
             group. 
*java.awt.Checkbox.getItemListeners()*

public synchronized |java.awt.event.ItemListener| getItemListeners()

Returns an array of all the item listeners registered on this checkbox. 


    Returns: all of this checkbox's ItemListeners or an empty array if no item listeners are 
             currently registered 
*java.awt.Checkbox.getLabel()*

public |java.lang.String| getLabel()

Gets the label of this check box. 


    Returns: the label of this check box, or null if this check box has no label. 
*java.awt.Checkbox.getListeners(Class)*

public |java.util.EventListener| getListeners(java.lang.Class listenerType)

Returns an array of all the objects currently registered as FooListeners upon 
this Checkbox. FooListeners are registered using the addFooListener method. 

You can specify the listenerType argument with a class literal, such as 
FooListener.class. For example, you can query a Checkbox c for its item 
listeners with the following code: 

ItemListener[] ils = (ItemListener[])(c.getListeners(ItemListener.class)); 

If no such listeners exist, this method returns an empty array. 

    listenerType - the type of listeners requested; this parameter should specify an interface 
       that descends from java.util.EventListener 

    Returns: an array of all objects registered as FooListeners on this checkbox, or an 
             empty array if no such listeners have been added 
*java.awt.Checkbox.getSelectedObjects()*

public |java.lang.Object| getSelectedObjects()

Returns an array (length 1) containing the checkbox label or null if the 
checkbox is not selected. 


*java.awt.Checkbox.getState()*

public boolean getState()

Determines whether this check box is in the "on" or "off" state. The boolean 
value true indicates the "on" state, and false indicates the "off" state. 


    Returns: the state of this check box, as a boolean value 
*java.awt.Checkbox.paramString()*

protected |java.lang.String| paramString()

Returns a string representing the state of this Checkbox. This method is 
intended to be used only for debugging purposes, and the content and format of 
the returned string may vary between implementations. The returned string may 
be empty but may not be null. 


    Returns: the parameter string of this check box 
*java.awt.Checkbox.processEvent(AWTEvent)*

protected void processEvent(java.awt.AWTEvent e)

Processes events on this check box. If the event is an instance of ItemEvent, 
this method invokes the processItemEvent method. Otherwise, it calls its 
superclass's processEvent method. Note that if the event parameter is null the 
behavior is unspecified and may result in an exception. 

    e - the event 

*java.awt.Checkbox.processItemEvent(ItemEvent)*

protected void processItemEvent(java.awt.event.ItemEvent e)

Processes item events occurring on this check box by dispatching them to any 
registered ItemListener objects. 

This method is not called unless item events are enabled for this component. 
Item events are enabled when one of the following occurs: 

An ItemListener object is registered via addItemListener. Item events are 
enabled via enableEvents. 

Note that if the event parameter is null the behavior is unspecified and may 
result in an exception. 

    e - the item event 

*java.awt.Checkbox.removeItemListener(ItemListener)*

public synchronized void removeItemListener(java.awt.event.ItemListener l)

Removes the specified item listener so that the item listener no longer 
receives item events from this check box. If l is null, no exception is thrown 
and no action is performed. 

    l - the item listener 

*java.awt.Checkbox.setCheckboxGroup(CheckboxGroup)*

public void setCheckboxGroup(java.awt.CheckboxGroup g)

Sets this check box's group to the specified check box group. If this check box 
is already in a different check box group, it is first taken out of that group. 

If the state of this check box is true and the new group already has a check 
box selected, this check box's state is changed to false. If the state of this 
check box is true and the new group has no check box selected, this check box 
becomes the selected checkbox for the new group and its state is true. 

    g - the new check box group, or null to remove this check box from any check box 
       group 

*java.awt.Checkbox.setLabel(String)*

public void setLabel(java.lang.String label)

Sets this check box's label to be the string argument. 

    label - a string to set as the new label, or null for no label. 

*java.awt.Checkbox.setState(boolean)*

public void setState(boolean state)

Sets the state of this check box to the specified state. The boolean value true 
indicates the "on" state, and false indicates the "off" state. 

Note that this method should be primarily used to initialize the state of the 
checkbox. Programmatically setting the state of the checkbox will not trigger 
an ItemEvent. The only way to trigger an ItemEvent is by user interaction. 

    state - the boolean state of the check box 



*java.util.AbstractList* *AbstractList* This class provides a skeletal implement

public abstract class AbstractList
  extends    |java.util.AbstractCollection|
  implements |java.util.List|

|java.util.AbstractList_Description|
|java.util.AbstractList_Fields|
|java.util.AbstractList_Constructors|
|java.util.AbstractList_Methods|

================================================================================

*java.util.AbstractList_Fields*
|int_java.util.AbstractList.modCount|

*java.util.AbstractList_Constructors*
|java.util.AbstractList()|Sole constructor.

*java.util.AbstractList_Methods*
|java.util.AbstractList.add(E)|Appends the specified element to the end of this
|java.util.AbstractList.add(int,E)|Inserts the specified element at the specifi
|java.util.AbstractList.addAll(int,Collection)|Inserts all of the elements in t
|java.util.AbstractList.clear()|Removes all of the elements from this collectio
|java.util.AbstractList.equals(Object)|Compares the specified object with this 
|java.util.AbstractList.get(int)|Returns the element at the specified position 
|java.util.AbstractList.hashCode()|Returns the hash code value for this list.
|java.util.AbstractList.indexOf(Object)|Returns the index in this list of the f
|java.util.AbstractList.iterator()|Returns an iterator over the elements in thi
|java.util.AbstractList.lastIndexOf(Object)|Returns the index in this list of t
|java.util.AbstractList.listIterator()|Returns an iterator of the elements in t
|java.util.AbstractList.listIterator(int)|Returns a list iterator of the elemen
|java.util.AbstractList.remove(int)|Removes the element at the specified positi
|java.util.AbstractList.removeRange(int,int)|Removes from this list all of the 
|java.util.AbstractList.set(int,E)|Replaces the element at the specified positi
|java.util.AbstractList.subList(int,int)|Returns a view of the portion of this 

*java.util.AbstractList_Description*

This class provides a skeletal implementation of the List interface to minimize 
the effort required to implement this interface backed by a "random access" 
data store (such as an array). For sequential access data (such as a linked 
list), AbstractSequentialList should be used in preference to this class. 

To implement an unmodifiable list, the programmer needs only to extend this 
class and provide implementations for the get(int index) and size() methods. 

To implement a modifiable list, the programmer must additionally override the 
set(int index, Object element) method (which otherwise throws an 
UnsupportedOperationException. If the list is variable-size the programmer must 
additionally override the add(int index, Object element) and remove(int index) 
methods. 

The programmer should generally provide a void (no argument) and collection 
constructor, as per the recommendation in the Collection interface 
specification. 

Unlike the other abstract collection implementations, the programmer does not 
have to provide an iterator implementation; the iterator and list iterator are 
implemented by this class, on top the "random access" methods: get(int index), 
set(int index, Object element), set(int index, Object element), add(int index, 
Object element) and remove(int index). 

The documentation for each non-abstract methods in this class describes its 
implementation in detail. Each of these methods may be overridden if the 
collection being implemented admits a more efficient implementation. 

This class is a member of the <a href="/../guide/collections/index.html"> Java 
Collections Framework. 


*int_java.util.AbstractList.modCount*

This class provides a skeletal implementation of the List interface to minimize 
the effort required to implement this interface backed by a "random access" 
data store (such as an array). For sequential access data (such as a linked 
list), AbstractSequentialList should be used in preference to this class. 

To implement an unmodifiable list, the programmer needs only to extend this 
class and provide implementations for the get(int index) and size() methods. 

To implement a modifiable list, the programmer must additionally override the 
set(int index, Object element) method (which otherwise throws an 
UnsupportedOperationException. If the list is variable-size the programmer must 
additionally override the add(int index, Object element) and remove(int index) 
methods. 

The programmer should generally provide a void (no argument) and collection 
constructor, as per the recommendation in the Collection interface 
specification. 

Unlike the other abstract collection implementations, the programmer does not 
have to provide an iterator implementation; the iterator and list iterator are 
implemented by this class, on top the "random access" methods: get(int index), 
set(int index, Object element), set(int index, Object element), add(int index, 
Object element) and remove(int index). 

The documentation for each non-abstract methods in this class describes its 
implementation in detail. Each of these methods may be overridden if the 
collection being implemented admits a more efficient implementation. 

This class is a member of the <a href="/../guide/collections/index.html"> Java 
Collections Framework. 



*java.util.AbstractList()*

protected AbstractList()

Sole constructor. (For invocation by subclass constructors, typically 
implicit.) 


*java.util.AbstractList.add(E)*

public boolean add(java.lang.Object o)

Appends the specified element to the end of this List (optional operation). 

This implementation calls add(size(), o). 

Note that this implementation throws an UnsupportedOperationException unless 
add(int, Object) is overridden. 

    o - element to be appended to this list. 

    Returns: true (as per the general contract of Collection.add). 
*java.util.AbstractList.add(int,E)*

public void add(
  int index,
  java.lang.Object element)

Inserts the specified element at the specified position in this list (optional 
operation). Shifts the element currently at that position (if any) and any 
subsequent elements to the right (adds one to their indices). 

This implementation always throws an UnsupportedOperationException. 

    index - index at which the specified element is to be inserted. 
    element - element to be inserted. 

*java.util.AbstractList.addAll(int,Collection)*

public boolean addAll(
  int index,
  java.util.Collection c)

Inserts all of the elements in the specified collection into this list at the 
specified position (optional operation). Shifts the element currently at that 
position (if any) and any subsequent elements to the right (increases their 
indices). The new elements will appear in the list in the order that they are 
returned by the specified collection's iterator. The behavior of this operation 
is unspecified if the specified collection is modified while the operation is 
in progress. (Note that this will occur if the specified collection is this 
list, and it's nonempty.) 

This implementation gets an iterator over the specified collection and iterates 
over it, inserting the elements obtained from the iterator into this list at 
the appropriate position, one at a time, using add(int, Object). Many 
implementations will override this method for efficiency. 

Note that this implementation throws an UnsupportedOperationException unless 
add(int, Object) is overridden. 

    index - index at which to insert the first element from the specified collection. 
    c - elements to be inserted into this List. 

    Returns: true if this list changed as a result of the call. 
*java.util.AbstractList.clear()*

public void clear()

Removes all of the elements from this collection (optional operation). The 
collection will be empty after this call returns (unless it throws an 
exception). 

This implementation calls removeRange(0, size()). 

Note that this implementation throws an UnsupportedOperationException unless 
remove(int index) or removeRange(int fromIndex, int toIndex) is overridden. 


*java.util.AbstractList.equals(Object)*

public boolean equals(java.lang.Object o)

Compares the specified object with this list for equality. Returns true if and 
only if the specified object is also a list, both lists have the same size, and 
all corresponding pairs of elements in the two lists are equal. (Two elements 
e1 and e2 are equal if (e1==null ? e2==null : e1.equals(e2)).) In other words, 
two lists are defined to be equal if they contain the same elements in the same 
order. 

This implementation first checks if the specified object is this list. If so, 
it returns true; if not, it checks if the specified object is a list. If not, 
it returns false; if so, it iterates over both lists, comparing corresponding 
pairs of elements. If any comparison returns false, this method returns false. 
If either iterator runs out of elements before the other it returns false (as 
the lists are of unequal length); otherwise it returns true when the iterations 
complete. 

    o - the object to be compared for equality with this list. 

    Returns: true if the specified object is equal to this list. 
*java.util.AbstractList.get(int)*

public abstract |java.lang.Object| get(int index)

Returns the element at the specified position in this list. 

    index - index of element to return. 

    Returns: the element at the specified position in this list. 
*java.util.AbstractList.hashCode()*

public int hashCode()

Returns the hash code value for this list. 

This implementation uses exactly the code that is used to define the list hash 
function in the documentation for the List.hashCode method. 


    Returns: the hash code value for this list. 
*java.util.AbstractList.indexOf(Object)*

public int indexOf(java.lang.Object o)

Returns the index in this list of the first occurence of the specified element, 
or -1 if the list does not contain this element. More formally, returns the 
lowest index i such that (o==null ? get(i)==null : o.equals(get(i))), or -1 if 
there is no such index. 

This implementation first gets a list iterator (with listIterator()). Then, it 
iterates over the list until the specified element is found or the end of the 
list is reached. 

    o - element to search for. 

    Returns: the index in this List of the first occurence of the specified element, or -1 
             if the List does not contain this element. 
*java.util.AbstractList.iterator()*

public |java.util.Iterator| iterator()

Returns an iterator over the elements in this list in proper sequence. 

This implementation returns a straightforward implementation of the iterator 
interface, relying on the backing list's size(), get(int), and remove(int) 
methods. 

Note that the iterator returned by this method will throw an 
UnsupportedOperationException in response to its remove method unless the 
list's remove(int) method is overridden. 

This implementation can be made to throw runtime exceptions in the face of 
concurrent modification, as described in the specification for the (protected) 
modCount field. 


    Returns: an iterator over the elements in this list in proper sequence. 
*java.util.AbstractList.lastIndexOf(Object)*

public int lastIndexOf(java.lang.Object o)

Returns the index in this list of the last occurence of the specified element, 
or -1 if the list does not contain this element. More formally, returns the 
highest index i such that (o==null ? get(i)==null : o.equals(get(i))), or -1 if 
there is no such index. 

This implementation first gets a list iterator that points to the end of the 
list (with listIterator(size())). Then, it iterates backwards over the list 
until the specified element is found, or the beginning of the list is reached. 

    o - element to search for. 

    Returns: the index in this list of the last occurence of the specified element, or -1 if 
             the list does not contain this element. 
*java.util.AbstractList.listIterator()*

public |java.util.ListIterator| listIterator()

Returns an iterator of the elements in this list (in proper sequence). This 
implementation returns listIterator(0). 


    Returns: an iterator of the elements in this list (in proper sequence). 
*java.util.AbstractList.listIterator(int)*

public |java.util.ListIterator| listIterator(int index)

Returns a list iterator of the elements in this list (in proper sequence), 
starting at the specified position in the list. The specified index indicates 
the first element that would be returned by an initial call to the next method. 
An initial call to the previous method would return the element with the 
specified index minus one. 

This implementation returns a straightforward implementation of the 
ListIterator interface that extends the implementation of the Iterator 
interface returned by the iterator() method. The ListIterator implementation 
relies on the backing list's get(int), set(int, Object), add(int, Object) and 
remove(int) methods. 

Note that the list iterator returned by this implementation will throw an 
UnsupportedOperationException in response to its remove, set and add methods 
unless the list's remove(int), set(int, Object), and add(int, Object) methods 
are overridden. 

This implementation can be made to throw runtime exceptions in the face of 
concurrent modification, as described in the specification for the (protected) 
modCount field. 

    index - index of the first element to be returned from the list iterator (by a call to 
       the next method). 

    Returns: a list iterator of the elements in this list (in proper sequence), starting at 
             the specified position in the list. 
*java.util.AbstractList.remove(int)*

public |java.lang.Object| remove(int index)

Removes the element at the specified position in this list (optional 
operation). Shifts any subsequent elements to the left (subtracts one from 
their indices). Returns the element that was removed from the list. 

This implementation always throws an UnsupportedOperationException. 

    index - the index of the element to remove. 

    Returns: the element previously at the specified position. 
*java.util.AbstractList.removeRange(int,int)*

protected void removeRange(
  int fromIndex,
  int toIndex)

Removes from this list all of the elements whose index is between fromIndex, 
inclusive, and toIndex, exclusive. Shifts any succeeding elements to the left 
(reduces their index). This call shortens the ArrayList by (toIndex - 
fromIndex) elements. (If toIndex==fromIndex, this operation has no effect.) 

This method is called by the clear operation on this list and its subLists. 
Overriding this method to take advantage of the internals of the list 
implementation can substantially improve the performance of the clear operation 
on this list and its subLists. 

This implementation gets a list iterator positioned before fromIndex, and 
repeatedly calls ListIterator.next followed by ListIterator.remove until the 
entire range has been removed. Note: if ListIterator.remove requires linear 
time, this implementation requires quadratic time. 

    fromIndex - index of first element to be removed. 
    toIndex - index after last element to be removed. 

*java.util.AbstractList.set(int,E)*

public |java.lang.Object| set(
  int index,
  java.lang.Object element)

Replaces the element at the specified position in this list with the specified 
element (optional operation). 

This implementation always throws an UnsupportedOperationException. 

    index - index of element to replace. 
    element - element to be stored at the specified position. 

    Returns: the element previously at the specified position. 
*java.util.AbstractList.subList(int,int)*

public |java.util.List| subList(
  int fromIndex,
  int toIndex)

Returns a view of the portion of this list between fromIndex, inclusive, and 
toIndex, exclusive. (If fromIndex and toIndex are equal, the returned list is 
empty.) The returned list is backed by this list, so changes in the returned 
list are reflected in this list, and vice-versa. The returned list supports all 
of the optional list operations supported by this list. 

This method eliminates the need for explicit range operations (of the sort that 
commonly exist for arrays). Any operation that expects a list can be used as a 
range operation by operating on a subList view instead of a whole list. For 
example, the following idiom removes a range of elements from a list: 

list.subList(from, to).clear(); 

Similar idioms may be constructed for indexOf and lastIndexOf, and all of the 
algorithms in the Collections class can be applied to a subList. 

The semantics of the list returned by this method become undefined if the 
backing list (i.e., this list) is structurally modified in any way other than 
via the returned list. (Structural modifications are those that change the size 
of the list, or otherwise perturb it in such a fashion that iterations in 
progress may yield incorrect results.) 

This implementation returns a list that subclasses AbstractList. The subclass 
stores, in private fields, the offset of the subList within the backing list, 
the size of the subList (which can change over its lifetime), and the expected 
modCount value of the backing list. There are two variants of the subclass, one 
of which implements RandomAccess. If this list implements RandomAccess the 
returned list will be an instance of the subclass that implements RandomAccess. 

The subclass's set(int, Object), get(int), add(int, Object), remove(int), 
addAll(int, Collection) and removeRange(int, int) methods all delegate to the 
corresponding methods on the backing abstract list, after bounds-checking the 
index and adjusting for the offset. The addAll(Collection c) method merely 
returns addAll(size, c). 

The listIterator(int) method returns a "wrapper object" over a list iterator on 
the backing list, which is created with the corresponding method on the backing 
list. The iterator method merely returns listIterator(), and the size method 
merely returns the subclass's size field. 

All methods first check to see if the actual modCount of the backing list is 
equal to its expected value, and throw a ConcurrentModificationException if it 
is not. 

    fromIndex - low endpoint (inclusive) of the subList. 
    toIndex - high endpoint (exclusive) of the subList. 

    Returns: a view of the specified range within this list. 


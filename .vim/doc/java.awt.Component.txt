*java.awt.Component* *Component* A component is an object having a graphical rep

public abstract class Component
  extends    |java.lang.Object|
  implements |java.awt.image.ImageObserver|
             |java.awt.MenuContainer|
             |java.io.Serializable|

|java.awt.Component_Description|
|java.awt.Component_Fields|
|java.awt.Component_Constructors|
|java.awt.Component_Methods|

================================================================================

*java.awt.Component_Fields*
|float_java.awt.Component.BOTTOM_ALIGNMENT|
|float_java.awt.Component.CENTER_ALIGNMENT|
|float_java.awt.Component.LEFT_ALIGNMENT|
|float_java.awt.Component.RIGHT_ALIGNMENT|
|float_java.awt.Component.TOP_ALIGNMENT|

*java.awt.Component_Constructors*
|java.awt.Component()|Constructs a new component.

*java.awt.Component_Methods*
|java.awt.Component.action(Event,Object)|
|java.awt.Component.add(PopupMenu)|Adds the specified popup menu to the compone
|java.awt.Component.addComponentListener(ComponentListener)|Adds the specified 
|java.awt.Component.addFocusListener(FocusListener)|Adds the specified focus li
|java.awt.Component.addHierarchyBoundsListener(HierarchyBoundsListener)|Adds th
|java.awt.Component.addHierarchyListener(HierarchyListener)|Adds the specified 
|java.awt.Component.addInputMethodListener(InputMethodListener)|Adds the specif
|java.awt.Component.addKeyListener(KeyListener)|Adds the specified key listener
|java.awt.Component.addMouseListener(MouseListener)|Adds the specified mouse li
|java.awt.Component.addMouseMotionListener(MouseMotionListener)|Adds the specif
|java.awt.Component.addMouseWheelListener(MouseWheelListener)|Adds the specifie
|java.awt.Component.addNotify()|Makes this Component displayable by connecting 
|java.awt.Component.addPropertyChangeListener(PropertyChangeListener)|Adds a Pr
|java.awt.Component.addPropertyChangeListener(String,PropertyChangeListener)|Ad
|java.awt.Component.applyComponentOrientation(ComponentOrientation)|Sets the Co
|java.awt.Component.areFocusTraversalKeysSet(int)|Returns whether the Set of fo
|java.awt.Component.bounds()|
|java.awt.Component.checkImage(Image,ImageObserver)|Returns the status of the c
|java.awt.Component.checkImage(Image,int,int,ImageObserver)|Returns the status 
|java.awt.Component.coalesceEvents(AWTEvent,AWTEvent)|Potentially coalesce an e
|java.awt.Component.contains(int,int)|Checks whether this component "contains" 
|java.awt.Component.contains(Point)|Checks whether this component "contains" th
|java.awt.Component.createImage(ImageProducer)|Creates an image from the specif
|java.awt.Component.createImage(int,int)|Creates an off-screen drawable image  
|java.awt.Component.createVolatileImage(int,int)|Creates a volatile off-screen 
|java.awt.Component.createVolatileImage(int,int,ImageCapabilities)|Creates a vo
|java.awt.Component.deliverEvent(Event)|
|java.awt.Component.disable()|
|java.awt.Component.disableEvents(long)|Disables the events defined by the spec
|java.awt.Component.dispatchEvent(AWTEvent)|Dispatches an event to this compone
|java.awt.Component.doLayout()|Prompts the layout manager to lay out this compo
|java.awt.Component.enable()|
|java.awt.Component.enable(boolean)|
|java.awt.Component.enableEvents(long)|Enables the events defined by the specif
|java.awt.Component.enableInputMethods(boolean)|Enables or disables input metho
|java.awt.Component.firePropertyChange(String,boolean,boolean)|Support for repo
|java.awt.Component.firePropertyChange(String,byte,byte)|Reports a bound proper
|java.awt.Component.firePropertyChange(String,char,char)|Reports a bound proper
|java.awt.Component.firePropertyChange(String,double,double)|Reports a bound pr
|java.awt.Component.firePropertyChange(String,float,float)|Reports a bound prop
|java.awt.Component.firePropertyChange(String,int,int)|Support for reporting bo
|java.awt.Component.firePropertyChange(String,long,long)|Reports a bound proper
|java.awt.Component.firePropertyChange(String,Object,Object)|Support for report
|java.awt.Component.firePropertyChange(String,short,short)|Reports a bound prop
|java.awt.Component.getAccessibleContext()|Gets the AccessibleContext associate
|java.awt.Component.getAlignmentX()|Returns the alignment along the x axis.
|java.awt.Component.getAlignmentY()|Returns the alignment along the y axis.
|java.awt.Component.getBackground()|Gets the background color of this component
|java.awt.Component.getBounds()|Gets the bounds of this component in the form o
|java.awt.Component.getBounds(Rectangle)|Stores the bounds of this component in
|java.awt.Component.getColorModel()|Gets the instance of ColorModel used to dis
|java.awt.Component.getComponentAt(int,int)|Determines if this component or one
|java.awt.Component.getComponentAt(Point)|Returns the component or subcomponent
|java.awt.Component.getComponentListeners()|Returns an array of all the compone
|java.awt.Component.getComponentOrientation()|Retrieves the language-sensitive 
|java.awt.Component.getCursor()|Gets the cursor set in the component.
|java.awt.Component.getDropTarget()|Gets the DropTarget associated with this   
|java.awt.Component.getFocusCycleRootAncestor()|Returns the Container which is 
|java.awt.Component.getFocusListeners()|Returns an array of all the focus liste
|java.awt.Component.getFocusTraversalKeys(int)|Returns the Set of focus travers
|java.awt.Component.getFocusTraversalKeysEnabled()|Returns whether focus traver
|java.awt.Component.getFont()|Gets the font of this component.
|java.awt.Component.getFontMetrics(Font)|Gets the font metrics for the specifie
|java.awt.Component.getForeground()|Gets the foreground color of this component
|java.awt.Component.getGraphics()|Creates a graphics context for this component
|java.awt.Component.getGraphicsConfiguration()|Gets the GraphicsConfiguration a
|java.awt.Component.getHeight()|Returns the current height of this component.
|java.awt.Component.getHierarchyBoundsListeners()|Returns an array of all the h
|java.awt.Component.getHierarchyListeners()|Returns an array of all the hierarc
|java.awt.Component.getIgnoreRepaint()|
|java.awt.Component.getInputContext()|Gets the input context used by this compo
|java.awt.Component.getInputMethodListeners()|Returns an array of all the input
|java.awt.Component.getInputMethodRequests()|Gets the input method request hand
|java.awt.Component.getKeyListeners()|Returns an array of all the key listeners
|java.awt.Component.getListeners(Class)|Returns an array of all the objects cur
|java.awt.Component.getLocale()|Gets the locale of this component.
|java.awt.Component.getLocation()|Gets the location of this component in the fo
|java.awt.Component.getLocation(Point)|Stores the x,y origin of this component 
|java.awt.Component.getLocationOnScreen()|Gets the location of this component i
|java.awt.Component.getMaximumSize()|Gets the maximum size of this component.
|java.awt.Component.getMinimumSize()|Gets the mininimum size of this component.
|java.awt.Component.getMouseListeners()|Returns an array of all the mouse liste
|java.awt.Component.getMouseMotionListeners()|Returns an array of all the mouse
|java.awt.Component.getMousePosition()|Returns the position of the mouse pointe
|java.awt.Component.getMouseWheelListeners()|Returns an array of all the mouse 
|java.awt.Component.getName()|Gets the name of the component.
|java.awt.Component.getParent()|Gets the parent of this component.
|java.awt.Component.getPeer()|
|java.awt.Component.getPreferredSize()|Gets the preferred size of this componen
|java.awt.Component.getPropertyChangeListeners()|Returns an array of all the pr
|java.awt.Component.getPropertyChangeListeners(String)|Returns an array of all 
|java.awt.Component.getSize()|Returns the size of this component in the form of
|java.awt.Component.getSize(Dimension)|Stores the width/height of this componen
|java.awt.Component.getToolkit()|Gets the toolkit of this component.
|java.awt.Component.getTreeLock()|Gets this component's locking object (the obj
|java.awt.Component.getWidth()|Returns the current width of this component.
|java.awt.Component.getX()|Returns the current x coordinate of the components o
|java.awt.Component.getY()|Returns the current y coordinate of the components o
|java.awt.Component.gotFocus(Event,Object)|
|java.awt.Component.handleEvent(Event)|
|java.awt.Component.hasFocus()|Returns true if this Component is the   focus ow
|java.awt.Component.hide()|
|java.awt.Component.imageUpdate(Image,int,int,int,int,int)|Repaints the compone
|java.awt.Component.inside(int,int)|
|java.awt.Component.invalidate()|Invalidates this component.
|java.awt.Component.isBackgroundSet()|Returns whether the background color has 
|java.awt.Component.isCursorSet()|Returns whether the cursor has been explicitl
|java.awt.Component.isDisplayable()|Determines whether this component is displa
|java.awt.Component.isDoubleBuffered()|Returns true if this component is painte
|java.awt.Component.isEnabled()|Determines whether this component is enabled.
|java.awt.Component.isFocusable()|Returns whether this Component can be focused
|java.awt.Component.isFocusCycleRoot(Container)|Returns whether the specified C
|java.awt.Component.isFocusOwner()|Returns true if this Component is the      f
|java.awt.Component.isFocusTraversable()|Returns whether this Component can bec
|java.awt.Component.isFontSet()|Returns whether the font has been explicitly se
|java.awt.Component.isForegroundSet()|Returns whether the foreground color has 
|java.awt.Component.isLightweight()|A lightweight component doesn't have a nati
|java.awt.Component.isMaximumSizeSet()|Returns true if the maximum size has bee
|java.awt.Component.isMinimumSizeSet()|Returns whether or not setMinimumSize ha
|java.awt.Component.isOpaque()|Returns true if this component is completely opa
|java.awt.Component.isPreferredSizeSet()|Returns true if the preferred size has
|java.awt.Component.isShowing()|Determines whether this component is showing on
|java.awt.Component.isValid()|Determines whether this component is valid.
|java.awt.Component.isVisible()|Determines whether this component should be vis
|java.awt.Component.keyDown(Event,int)|
|java.awt.Component.keyUp(Event,int)|
|java.awt.Component.layout()|
|java.awt.Component.list()|Prints a listing of this component to the standard s
|java.awt.Component.list(PrintStream)|Prints a listing of this component to the
|java.awt.Component.list(PrintStream,int)|Prints out a list, starting at the sp
|java.awt.Component.list(PrintWriter)|Prints a listing to the specified print w
|java.awt.Component.list(PrintWriter,int)|Prints out a list, starting at the sp
|java.awt.Component.locate(int,int)|
|java.awt.Component.location()|
|java.awt.Component.lostFocus(Event,Object)|
|java.awt.Component.minimumSize()|
|java.awt.Component.mouseDown(Event,int,int)|
|java.awt.Component.mouseDrag(Event,int,int)|
|java.awt.Component.mouseEnter(Event,int,int)|
|java.awt.Component.mouseExit(Event,int,int)|
|java.awt.Component.mouseMove(Event,int,int)|
|java.awt.Component.mouseUp(Event,int,int)|
|java.awt.Component.move(int,int)|
|java.awt.Component.nextFocus()|
|java.awt.Component.paint(Graphics)|Paints this component.
|java.awt.Component.paintAll(Graphics)|Paints this component and all of its sub
|java.awt.Component.paramString()|Returns a string representing the state of th
|java.awt.Component.postEvent(Event)|
|java.awt.Component.preferredSize()|
|java.awt.Component.prepareImage(Image,ImageObserver)|Prepares an image for ren
|java.awt.Component.prepareImage(Image,int,int,ImageObserver)|Prepares an image
|java.awt.Component.print(Graphics)|Prints this component.
|java.awt.Component.printAll(Graphics)|Prints this component and all of its sub
|java.awt.Component.processComponentEvent(ComponentEvent)|Processes component e
|java.awt.Component.processEvent(AWTEvent)|Processes events occurring on this c
|java.awt.Component.processFocusEvent(FocusEvent)|Processes focus events occurr
|java.awt.Component.processHierarchyBoundsEvent(HierarchyEvent)|Processes hiera
|java.awt.Component.processHierarchyEvent(HierarchyEvent)|Processes hierarchy e
|java.awt.Component.processInputMethodEvent(InputMethodEvent)|Processes input m
|java.awt.Component.processKeyEvent(KeyEvent)|Processes key events occurring on
|java.awt.Component.processMouseEvent(MouseEvent)|Processes mouse events occurr
|java.awt.Component.processMouseMotionEvent(MouseEvent)|Processes mouse motion 
|java.awt.Component.processMouseWheelEvent(MouseWheelEvent)|Processes mouse whe
|java.awt.Component.remove(MenuComponent)|Removes the specified popup menu from
|java.awt.Component.removeComponentListener(ComponentListener)|Removes the spec
|java.awt.Component.removeFocusListener(FocusListener)|Removes the specified fo
|java.awt.Component.removeHierarchyBoundsListener(HierarchyBoundsListener)|Remo
|java.awt.Component.removeHierarchyListener(HierarchyListener)|Removes the spec
|java.awt.Component.removeInputMethodListener(InputMethodListener)|Removes the 
|java.awt.Component.removeKeyListener(KeyListener)|Removes the specified key li
|java.awt.Component.removeMouseListener(MouseListener)|Removes the specified mo
|java.awt.Component.removeMouseMotionListener(MouseMotionListener)|Removes the 
|java.awt.Component.removeMouseWheelListener(MouseWheelListener)|Removes the sp
|java.awt.Component.removeNotify()|Makes this Component undisplayable by destro
|java.awt.Component.removePropertyChangeListener(PropertyChangeListener)|Remove
|java.awt.Component.removePropertyChangeListener(String,PropertyChangeListener)|
|java.awt.Component.repaint()|Repaints this component.
|java.awt.Component.repaint(int,int,int,int)|Repaints the specified rectangle o
|java.awt.Component.repaint(long)|Repaints the component.
|java.awt.Component.repaint(long,int,int,int,int)|Repaints the specified rectan
|java.awt.Component.requestFocus()|Requests that this Component get the input f
|java.awt.Component.requestFocus(boolean)|Requests that this Component get the 
|java.awt.Component.requestFocusInWindow()|Requests that this Component get the
|java.awt.Component.requestFocusInWindow(boolean)|Requests that this Component 
|java.awt.Component.reshape(int,int,int,int)|
|java.awt.Component.resize(Dimension)|
|java.awt.Component.resize(int,int)|
|java.awt.Component.setBackground(Color)|Sets the background color of this comp
|java.awt.Component.setBounds(int,int,int,int)|Moves and resizes this component
|java.awt.Component.setBounds(Rectangle)|Moves and resizes this component to co
|java.awt.Component.setComponentOrientation(ComponentOrientation)|Sets the lang
|java.awt.Component.setCursor(Cursor)|Sets the cursor image to the specified cu
|java.awt.Component.setDropTarget(DropTarget)|Associate a DropTarget with this 
|java.awt.Component.setEnabled(boolean)|Enables or disables this component, dep
|java.awt.Component.setFocusable(boolean)|Sets the focusable state of this Comp
|java.awt.Component.setFocusTraversalKeys(int,Set)|Sets the focus traversal key
|java.awt.Component.setFocusTraversalKeysEnabled(boolean)|Sets whether focus tr
|java.awt.Component.setFont(Font)|Sets the font of this component.
|java.awt.Component.setForeground(Color)|Sets the foreground color of this comp
|java.awt.Component.setIgnoreRepaint(boolean)|Sets whether or not paint message
|java.awt.Component.setLocale(Locale)|Sets the locale of this component.
|java.awt.Component.setLocation(int,int)|Moves this component to a new location
|java.awt.Component.setLocation(Point)|Moves this component to a new location.
|java.awt.Component.setMaximumSize(Dimension)|Sets the maximum size of this com
|java.awt.Component.setMinimumSize(Dimension)|Sets the minimum size of this com
|java.awt.Component.setName(String)|Sets the name of the component to the speci
|java.awt.Component.setPreferredSize(Dimension)|Sets the preferred size of this
|java.awt.Component.setSize(Dimension)|Resizes this component so that it has wi
|java.awt.Component.setSize(int,int)|Resizes this component so that it has widt
|java.awt.Component.setVisible(boolean)|Shows or hides this component depending
|java.awt.Component.show()|
|java.awt.Component.show(boolean)|
|java.awt.Component.size()|
|java.awt.Component.toString()|Returns a string representation of this componen
|java.awt.Component.transferFocus()|Transfers the focus to the next component, 
|java.awt.Component.transferFocusBackward()|Transfers the focus to the previous
|java.awt.Component.transferFocusUpCycle()|Transfers the focus up one focus tra
|java.awt.Component.update(Graphics)|Updates this component.
|java.awt.Component.validate()|Ensures that this component has a valid layout.

*java.awt.Component_Description*

A component is an object having a graphical representation that can be 
displayed on the screen and that can interact with the user. Examples of 
components are the buttons, checkboxes, and scrollbars of a typical graphical 
user interface. The Component class is the abstract superclass of the 
nonmenu-related Abstract Window Toolkit components. Class Component can also be 
extended directly to create a lightweight component. A lightweight component is 
a component that is not associated with a native opaque window. 

Serialization It is important to note that only AWT listeners which conform to 
the Serializable protocol will be saved when the object is stored. If an AWT 
object has listeners that aren't marked serializable, they will be dropped at 
writeObject time. Developers will need, as always, to consider the implications 
of making an object serializable. One situation to watch out for is this: 

import java.awt.*; import java.awt.event.*; import java.io.Serializable; 

class MyApp implements ActionListener, Serializable { 
BigObjectThatShouldNotBeSerializedWithAButton bigOne; Button aButton = new 
Button(); 

MyApp() { // Oops, now aButton has a listener with a reference // to bigOne! 
aButton.addActionListener(this); } 

public void actionPerformed(ActionEvent e) { System.out.println("Hello There"); 
} } 

In this example, serializing aButton by itself will cause MyApp and everything 
it refers to to be serialized as well. The problem is that the listener is 
serializable by coincidence, not by design. To separate the decisions about 
MyApp and the ActionListener being serializable one can use a nested class, as 
in the following example: 

import java.awt.*; import java.awt.event.*; import java.io.Serializable; 

class MyApp java.io.Serializable { 
BigObjectThatShouldNotBeSerializedWithAButton bigOne; Button aButton = new 
Button(); 

class MyActionListener implements ActionListener { public void 
actionPerformed(ActionEvent e) { System.out.println("Hello There"); } } 

MyApp() { aButton.addActionListener(new MyActionListener()); } } 

Note: For more information on the paint mechanisms utilitized by AWT and Swing, 
including information on how to write the most efficient painting code, see 
Painting in AWT and Swing. 

For details on the focus subsystem, see 

How to Use the Focus Subsystem, a section in The Java Tutorial, and the Focus 
Specification for more information. 


*float_java.awt.Component.BOTTOM_ALIGNMENT*

A component is an object having a graphical representation that can be 
displayed on the screen and that can interact with the user. Examples of 
components are the buttons, checkboxes, and scrollbars of a typical graphical 
user interface. The Component class is the abstract superclass of the 
nonmenu-related Abstract Window Toolkit components. Class Component can also be 
extended directly to create a lightweight component. A lightweight component is 
a component that is not associated with a native opaque window. 

Serialization It is important to note that only AWT listeners which conform to 
the Serializable protocol will be saved when the object is stored. If an AWT 
object has listeners that aren't marked serializable, they will be dropped at 
writeObject time. Developers will need, as always, to consider the implications 
of making an object serializable. One situation to watch out for is this: 

import java.awt.*; import java.awt.event.*; import java.io.Serializable; 

class MyApp implements ActionListener, Serializable { 
BigObjectThatShouldNotBeSerializedWithAButton bigOne; Button aButton = new 
Button(); 

MyApp() { // Oops, now aButton has a listener with a reference // to bigOne! 
aButton.addActionListener(this); } 

public void actionPerformed(ActionEvent e) { System.out.println("Hello There"); 
} } 

In this example, serializing aButton by itself will cause MyApp and everything 
it refers to to be serialized as well. The problem is that the listener is 
serializable by coincidence, not by design. To separate the decisions about 
MyApp and the ActionListener being serializable one can use a nested class, as 
in the following example: 

import java.awt.*; import java.awt.event.*; import java.io.Serializable; 

class MyApp java.io.Serializable { 
BigObjectThatShouldNotBeSerializedWithAButton bigOne; Button aButton = new 
Button(); 

class MyActionListener implements ActionListener { public void 
actionPerformed(ActionEvent e) { System.out.println("Hello There"); } } 

MyApp() { aButton.addActionListener(new MyActionListener()); } } 

Note: For more information on the paint mechanisms utilitized by AWT and Swing, 
including information on how to write the most efficient painting code, see 
Painting in AWT and Swing. 

For details on the focus subsystem, see 

How to Use the Focus Subsystem, a section in The Java Tutorial, and the Focus 
Specification for more information. 


*float_java.awt.Component.CENTER_ALIGNMENT*

A component is an object having a graphical representation that can be 
displayed on the screen and that can interact with the user. Examples of 
components are the buttons, checkboxes, and scrollbars of a typical graphical 
user interface. The Component class is the abstract superclass of the 
nonmenu-related Abstract Window Toolkit components. Class Component can also be 
extended directly to create a lightweight component. A lightweight component is 
a component that is not associated with a native opaque window. 

Serialization It is important to note that only AWT listeners which conform to 
the Serializable protocol will be saved when the object is stored. If an AWT 
object has listeners that aren't marked serializable, they will be dropped at 
writeObject time. Developers will need, as always, to consider the implications 
of making an object serializable. One situation to watch out for is this: 

import java.awt.*; import java.awt.event.*; import java.io.Serializable; 

class MyApp implements ActionListener, Serializable { 
BigObjectThatShouldNotBeSerializedWithAButton bigOne; Button aButton = new 
Button(); 

MyApp() { // Oops, now aButton has a listener with a reference // to bigOne! 
aButton.addActionListener(this); } 

public void actionPerformed(ActionEvent e) { System.out.println("Hello There"); 
} } 

In this example, serializing aButton by itself will cause MyApp and everything 
it refers to to be serialized as well. The problem is that the listener is 
serializable by coincidence, not by design. To separate the decisions about 
MyApp and the ActionListener being serializable one can use a nested class, as 
in the following example: 

import java.awt.*; import java.awt.event.*; import java.io.Serializable; 

class MyApp java.io.Serializable { 
BigObjectThatShouldNotBeSerializedWithAButton bigOne; Button aButton = new 
Button(); 

class MyActionListener implements ActionListener { public void 
actionPerformed(ActionEvent e) { System.out.println("Hello There"); } } 

MyApp() { aButton.addActionListener(new MyActionListener()); } } 

Note: For more information on the paint mechanisms utilitized by AWT and Swing, 
including information on how to write the most efficient painting code, see 
Painting in AWT and Swing. 

For details on the focus subsystem, see 

How to Use the Focus Subsystem, a section in The Java Tutorial, and the Focus 
Specification for more information. 


*float_java.awt.Component.LEFT_ALIGNMENT*

A component is an object having a graphical representation that can be 
displayed on the screen and that can interact with the user. Examples of 
components are the buttons, checkboxes, and scrollbars of a typical graphical 
user interface. The Component class is the abstract superclass of the 
nonmenu-related Abstract Window Toolkit components. Class Component can also be 
extended directly to create a lightweight component. A lightweight component is 
a component that is not associated with a native opaque window. 

Serialization It is important to note that only AWT listeners which conform to 
the Serializable protocol will be saved when the object is stored. If an AWT 
object has listeners that aren't marked serializable, they will be dropped at 
writeObject time. Developers will need, as always, to consider the implications 
of making an object serializable. One situation to watch out for is this: 

import java.awt.*; import java.awt.event.*; import java.io.Serializable; 

class MyApp implements ActionListener, Serializable { 
BigObjectThatShouldNotBeSerializedWithAButton bigOne; Button aButton = new 
Button(); 

MyApp() { // Oops, now aButton has a listener with a reference // to bigOne! 
aButton.addActionListener(this); } 

public void actionPerformed(ActionEvent e) { System.out.println("Hello There"); 
} } 

In this example, serializing aButton by itself will cause MyApp and everything 
it refers to to be serialized as well. The problem is that the listener is 
serializable by coincidence, not by design. To separate the decisions about 
MyApp and the ActionListener being serializable one can use a nested class, as 
in the following example: 

import java.awt.*; import java.awt.event.*; import java.io.Serializable; 

class MyApp java.io.Serializable { 
BigObjectThatShouldNotBeSerializedWithAButton bigOne; Button aButton = new 
Button(); 

class MyActionListener implements ActionListener { public void 
actionPerformed(ActionEvent e) { System.out.println("Hello There"); } } 

MyApp() { aButton.addActionListener(new MyActionListener()); } } 

Note: For more information on the paint mechanisms utilitized by AWT and Swing, 
including information on how to write the most efficient painting code, see 
Painting in AWT and Swing. 

For details on the focus subsystem, see 

How to Use the Focus Subsystem, a section in The Java Tutorial, and the Focus 
Specification for more information. 


*float_java.awt.Component.RIGHT_ALIGNMENT*

A component is an object having a graphical representation that can be 
displayed on the screen and that can interact with the user. Examples of 
components are the buttons, checkboxes, and scrollbars of a typical graphical 
user interface. The Component class is the abstract superclass of the 
nonmenu-related Abstract Window Toolkit components. Class Component can also be 
extended directly to create a lightweight component. A lightweight component is 
a component that is not associated with a native opaque window. 

Serialization It is important to note that only AWT listeners which conform to 
the Serializable protocol will be saved when the object is stored. If an AWT 
object has listeners that aren't marked serializable, they will be dropped at 
writeObject time. Developers will need, as always, to consider the implications 
of making an object serializable. One situation to watch out for is this: 

import java.awt.*; import java.awt.event.*; import java.io.Serializable; 

class MyApp implements ActionListener, Serializable { 
BigObjectThatShouldNotBeSerializedWithAButton bigOne; Button aButton = new 
Button(); 

MyApp() { // Oops, now aButton has a listener with a reference // to bigOne! 
aButton.addActionListener(this); } 

public void actionPerformed(ActionEvent e) { System.out.println("Hello There"); 
} } 

In this example, serializing aButton by itself will cause MyApp and everything 
it refers to to be serialized as well. The problem is that the listener is 
serializable by coincidence, not by design. To separate the decisions about 
MyApp and the ActionListener being serializable one can use a nested class, as 
in the following example: 

import java.awt.*; import java.awt.event.*; import java.io.Serializable; 

class MyApp java.io.Serializable { 
BigObjectThatShouldNotBeSerializedWithAButton bigOne; Button aButton = new 
Button(); 

class MyActionListener implements ActionListener { public void 
actionPerformed(ActionEvent e) { System.out.println("Hello There"); } } 

MyApp() { aButton.addActionListener(new MyActionListener()); } } 

Note: For more information on the paint mechanisms utilitized by AWT and Swing, 
including information on how to write the most efficient painting code, see 
Painting in AWT and Swing. 

For details on the focus subsystem, see 

How to Use the Focus Subsystem, a section in The Java Tutorial, and the Focus 
Specification for more information. 


*float_java.awt.Component.TOP_ALIGNMENT*

A component is an object having a graphical representation that can be 
displayed on the screen and that can interact with the user. Examples of 
components are the buttons, checkboxes, and scrollbars of a typical graphical 
user interface. The Component class is the abstract superclass of the 
nonmenu-related Abstract Window Toolkit components. Class Component can also be 
extended directly to create a lightweight component. A lightweight component is 
a component that is not associated with a native opaque window. 

Serialization It is important to note that only AWT listeners which conform to 
the Serializable protocol will be saved when the object is stored. If an AWT 
object has listeners that aren't marked serializable, they will be dropped at 
writeObject time. Developers will need, as always, to consider the implications 
of making an object serializable. One situation to watch out for is this: 

import java.awt.*; import java.awt.event.*; import java.io.Serializable; 

class MyApp implements ActionListener, Serializable { 
BigObjectThatShouldNotBeSerializedWithAButton bigOne; Button aButton = new 
Button(); 

MyApp() { // Oops, now aButton has a listener with a reference // to bigOne! 
aButton.addActionListener(this); } 

public void actionPerformed(ActionEvent e) { System.out.println("Hello There"); 
} } 

In this example, serializing aButton by itself will cause MyApp and everything 
it refers to to be serialized as well. The problem is that the listener is 
serializable by coincidence, not by design. To separate the decisions about 
MyApp and the ActionListener being serializable one can use a nested class, as 
in the following example: 

import java.awt.*; import java.awt.event.*; import java.io.Serializable; 

class MyApp java.io.Serializable { 
BigObjectThatShouldNotBeSerializedWithAButton bigOne; Button aButton = new 
Button(); 

class MyActionListener implements ActionListener { public void 
actionPerformed(ActionEvent e) { System.out.println("Hello There"); } } 

MyApp() { aButton.addActionListener(new MyActionListener()); } } 

Note: For more information on the paint mechanisms utilitized by AWT and Swing, 
including information on how to write the most efficient painting code, see 
Painting in AWT and Swing. 

For details on the focus subsystem, see 

How to Use the Focus Subsystem, a section in The Java Tutorial, and the Focus 
Specification for more information. 



*java.awt.Component()*

protected Component()

Constructs a new component. Class Component can be extended directly to create 
a lightweight component that does not utilize an opaque native window. A 
lightweight component must be hosted by a native container somewhere higher up 
in the component tree (for example, by a Frame object). 


*java.awt.Component.action(Event,Object)*

public boolean action(
  java.awt.Event evt,
  java.lang.Object what)




*java.awt.Component.add(PopupMenu)*

public synchronized void add(java.awt.PopupMenu popup)

Adds the specified popup menu to the component. 

    popup - the popup menu to be added to the component. 

*java.awt.Component.addComponentListener(ComponentListener)*

public synchronized void addComponentListener(java.awt.event.ComponentListener l)

Adds the specified component listener to receive component events from this 
component. If listener l is null, no exception is thrown and no action is 
performed. 

    l - the component listener 

*java.awt.Component.addFocusListener(FocusListener)*

public synchronized void addFocusListener(java.awt.event.FocusListener l)

Adds the specified focus listener to receive focus events from this component 
when this component gains input focus. If listener l is null, no exception is 
thrown and no action is performed. 

    l - the focus listener 

*java.awt.Component.addHierarchyBoundsListener(HierarchyBoundsListener)*

public void addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener l)

Adds the specified hierarchy bounds listener to receive hierarchy bounds events 
from this component when the hierarchy to which this container belongs changes. 
If listener l is null, no exception is thrown and no action is performed. 

    l - the hierarchy bounds listener 

*java.awt.Component.addHierarchyListener(HierarchyListener)*

public void addHierarchyListener(java.awt.event.HierarchyListener l)

Adds the specified hierarchy listener to receive hierarchy changed events from 
this component when the hierarchy to which this container belongs changes. If 
listener l is null, no exception is thrown and no action is performed. 

    l - the hierarchy listener 

*java.awt.Component.addInputMethodListener(InputMethodListener)*

public synchronized void addInputMethodListener(java.awt.event.InputMethodListener l)

Adds the specified input method listener to receive input method events from 
this component. A component will only receive input method events from input 
methods if it also overrides getInputMethodRequests to return an 
InputMethodRequests instance. If listener l is null, no exception is thrown and 
no action is performed. 

    l - the input method listener 

*java.awt.Component.addKeyListener(KeyListener)*

public synchronized void addKeyListener(java.awt.event.KeyListener l)

Adds the specified key listener to receive key events from this component. If l 
is null, no exception is thrown and no action is performed. 

    l - the key listener. 

*java.awt.Component.addMouseListener(MouseListener)*

public synchronized void addMouseListener(java.awt.event.MouseListener l)

Adds the specified mouse listener to receive mouse events from this component. 
If listener l is null, no exception is thrown and no action is performed. 

    l - the mouse listener 

*java.awt.Component.addMouseMotionListener(MouseMotionListener)*

public synchronized void addMouseMotionListener(java.awt.event.MouseMotionListener l)

Adds the specified mouse motion listener to receive mouse motion events from 
this component. If listener l is null, no exception is thrown and no action is 
performed. 

    l - the mouse motion listener 

*java.awt.Component.addMouseWheelListener(MouseWheelListener)*

public synchronized void addMouseWheelListener(java.awt.event.MouseWheelListener l)

Adds the specified mouse wheel listener to receive mouse wheel events from this 
component. Containers also receive mouse wheel events from sub-components. 

For information on how mouse wheel events are dispatched, see the class 
description for (|java.awt.event.MouseWheelEvent|) . 

If l is null, no exception is thrown and no action is performed. 

    l - the mouse wheel listener 

*java.awt.Component.addNotify()*

public void addNotify()

Makes this Component displayable by connecting it to a native screen resource. 
This method is called internally by the toolkit and should not be called 
directly by programs. 


*java.awt.Component.addPropertyChangeListener(PropertyChangeListener)*

public synchronized void addPropertyChangeListener(java.beans.PropertyChangeListener listener)

Adds a PropertyChangeListener to the listener list. The listener is registered 
for all bound properties of this class, including the following: 

this Component's font ("font") this Component's background color ("background") 
this Component's foreground color ("foreground") this Component's focusability 
("focusable") this Component's focus traversal keys enabled state 
("focusTraversalKeysEnabled") this Component's Set of FORWARD_TRAVERSAL_KEYS 
("forwardFocusTraversalKeys") this Component's Set of BACKWARD_TRAVERSAL_KEYS 
("backwardFocusTraversalKeys") this Component's Set of UP_CYCLE_TRAVERSAL_KEYS 
("upCycleFocusTraversalKeys") this Component's preferred size ("preferredSize") 
this Component's minimum size ("minimumSize") this Component's maximum size 
("maximumSize") this Component's name ("name") 

Note that if this Component is inheriting a bound property, then no event will 
be fired in response to a change in the inherited property. 

If listener is null, no exception is thrown and no action is performed. 

    listener - the property change listener to be added 

*java.awt.Component.addPropertyChangeListener(String,PropertyChangeListener)*

public synchronized void addPropertyChangeListener(
  java.lang.String propertyName,
  java.beans.PropertyChangeListener listener)

Adds a PropertyChangeListener to the listener list for a specific property. The 
specified property may be user-defined, or one of the following: 

this Component's font ("font") this Component's background color ("background") 
this Component's foreground color ("foreground") this Component's focusability 
("focusable") this Component's focus traversal keys enabled state 
("focusTraversalKeysEnabled") this Component's Set of FORWARD_TRAVERSAL_KEYS 
("forwardFocusTraversalKeys") this Component's Set of BACKWARD_TRAVERSAL_KEYS 
("backwardFocusTraversalKeys") this Component's Set of UP_CYCLE_TRAVERSAL_KEYS 
("upCycleFocusTraversalKeys") 

Note that if this Component is inheriting a bound property, then no event will 
be fired in response to a change in the inherited property. 

If propertyName or listener is null, no exception is thrown and no action is 
taken. 

    propertyName - one of the property names listed above 
    listener - the property change listener to be added 

*java.awt.Component.applyComponentOrientation(ComponentOrientation)*

public void applyComponentOrientation(java.awt.ComponentOrientation orientation)

Sets the ComponentOrientation property of this component and all components 
contained within it. 

    orientation - the new component orientation of this component and the components contained 
       within it. 

*java.awt.Component.areFocusTraversalKeysSet(int)*

public boolean areFocusTraversalKeysSet(int id)

Returns whether the Set of focus traversal keys for the given focus traversal 
operation has been explicitly defined for this Component. If this method 
returns false, this Component is inheriting the Set from an ancestor, or from 
the current KeyboardFocusManager. 

    id - one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, 
       KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, or 
       KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS 

    Returns: true if the the Set of focus traversal keys for the given focus traversal 
             operation has been explicitly defined for this Component; false 
             otherwise. 
*java.awt.Component.bounds()*

public |java.awt.Rectangle| bounds()




*java.awt.Component.checkImage(Image,ImageObserver)*

public int checkImage(
  java.awt.Image image,
  java.awt.image.ImageObserver observer)

Returns the status of the construction of a screen representation of the 
specified image. 

This method does not cause the image to begin loading. An application must use 
the prepareImage method to force the loading of an image. 

Information on the flags returned by this method can be found with the 
discussion of the ImageObserver interface. 

    image - the Image object whose status is being checked 
    observer - the ImageObserver object to be notified as the image is being prepared 

    Returns: the bitwise inclusive OR of ImageObserver flags indicating what information 
             about the image is currently available 
*java.awt.Component.checkImage(Image,int,int,ImageObserver)*

public int checkImage(
  java.awt.Image image,
  int width,
  int height,
  java.awt.image.ImageObserver observer)

Returns the status of the construction of a screen representation of the 
specified image. 

This method does not cause the image to begin loading. An application must use 
the prepareImage method to force the loading of an image. 

The checkImage method of Component calls its peer's checkImage method to 
calculate the flags. If this component does not yet have a peer, the 
component's toolkit's checkImage method is called instead. 

Information on the flags returned by this method can be found with the 
discussion of the ImageObserver interface. 

    image - the Image object whose status is being checked 
    width - the width of the scaled version whose status is to be checked 
    height - the height of the scaled version whose status is to be checked 
    observer - the ImageObserver object to be notified as the image is being prepared 

    Returns: the bitwise inclusive OR of ImageObserver flags indicating what information 
             about the image is currently available 
*java.awt.Component.coalesceEvents(AWTEvent,AWTEvent)*

protected |java.awt.AWTEvent| coalesceEvents(
  java.awt.AWTEvent existingEvent,
  java.awt.AWTEvent newEvent)

Potentially coalesce an event being posted with an existing event. This method 
is called by EventQueue.postEvent if an event with the same ID as the event to 
be posted is found in the queue (both events must have this component as their 
source). This method either returns a coalesced event which replaces the 
existing event (and the new event is then discarded), or null to indicate that 
no combining should be done (add the second event to the end of the queue). 
Either event parameter may be modified and returned, as the other one is 
discarded unless null is returned. 

This implementation of coalesceEvents coalesces two event types: mouse move 
(and drag) events, and paint (and update) events. For mouse move events the 
last event is always returned, causing intermediate moves to be discarded. For 
paint events, the new event is coalesced into a complex RepaintArea in the 
peer. The new AWTEvent is always returned. 

    existingEvent - the event already on the EventQueue 
    newEvent - the event being posted to the EventQueue 

    Returns: a coalesced event, or null indicating that no coalescing was done 
*java.awt.Component.contains(int,int)*

public boolean contains(
  int x,
  int y)

Checks whether this component "contains" the specified point, where x and y are 
defined to be relative to the coordinate system of this component. 

    x - the x coordinate of the point 
    y - the y coordinate of the point 

*java.awt.Component.contains(Point)*

public boolean contains(java.awt.Point p)

Checks whether this component "contains" the specified point, where the point's 
x and y coordinates are defined to be relative to the coordinate system of this 
component. 

    p - the point 

*java.awt.Component.createImage(ImageProducer)*

public |java.awt.Image| createImage(java.awt.image.ImageProducer producer)

Creates an image from the specified image producer. 

    producer - the image producer 

    Returns: the image produced 
*java.awt.Component.createImage(int,int)*

public |java.awt.Image| createImage(
  int width,
  int height)

Creates an off-screen drawable image to be used for double buffering. 

    width - the specified width 
    height - the specified height 

    Returns: an off-screen drawable image, which can be used for double buffering. The 
             return value may be null if the component is not displayable. This 
             will always happen if GraphicsEnvironment.isHeadless() returns 
             true. 
*java.awt.Component.createVolatileImage(int,int)*

public |java.awt.image.VolatileImage| createVolatileImage(
  int width,
  int height)

Creates a volatile off-screen drawable image to be used for double buffering. 

    width - the specified width. 
    height - the specified height. 

    Returns: an off-screen drawable image, which can be used for double buffering. The 
             return value may be null if the component is not displayable. This 
             will always happen if GraphicsEnvironment.isHeadless() returns 
             true. 
*java.awt.Component.createVolatileImage(int,int,ImageCapabilities)*

public |java.awt.image.VolatileImage| createVolatileImage(
  int width,
  int height,
  java.awt.ImageCapabilities caps)
  throws |java.awt.AWTException|
         
Creates a volatile off-screen drawable image, with the given capabilities. The 
contents of this image may be lost at any time due to operating system issues, 
so the image must be managed via the VolatileImage interface. 

    width - the specified width. 
    height - the specified height. 
    caps - the image capabilities 

    Returns: a VolatileImage object, which can be used to manage surface contents loss and 
             capabilities. 
*java.awt.Component.deliverEvent(Event)*

public void deliverEvent(java.awt.Event e)




*java.awt.Component.disable()*

public void disable()




*java.awt.Component.disableEvents(long)*

protected final void disableEvents(long eventsToDisable)

Disables the events defined by the specified event mask parameter from being 
delivered to this component. 

    eventsToDisable - the event mask defining the event types 

*java.awt.Component.dispatchEvent(AWTEvent)*

public final void dispatchEvent(java.awt.AWTEvent e)

Dispatches an event to this component or one of its sub components. Calls 
processEvent before returning for 1.1-style events which have been enabled for 
the Component. 

    e - the event 

*java.awt.Component.doLayout()*

public void doLayout()

Prompts the layout manager to lay out this component. This is usually called 
when the component (more specifically, container) is validated. 


*java.awt.Component.enable()*

public void enable()




*java.awt.Component.enable(boolean)*

public void enable(boolean b)




*java.awt.Component.enableEvents(long)*

protected final void enableEvents(long eventsToEnable)

Enables the events defined by the specified event mask parameter to be 
delivered to this component. 

Event types are automatically enabled when a listener for that event type is 
added to the component. 

This method only needs to be invoked by subclasses of Component which desire to 
have the specified event types delivered to processEvent regardless of whether 
or not a listener is registered. 

    eventsToEnable - the event mask defining the event types 

*java.awt.Component.enableInputMethods(boolean)*

public void enableInputMethods(boolean enable)

Enables or disables input method support for this component. If input method 
support is enabled and the component also processes key events, incoming events 
are offered to the current input method and will only be processed by the 
component or dispatched to its listeners if the input method does not consume 
them. By default, input method support is enabled. 

    enable - true to enable, false to disable 

*java.awt.Component.firePropertyChange(String,boolean,boolean)*

protected void firePropertyChange(
  java.lang.String propertyName,
  boolean oldValue,
  boolean newValue)

Support for reporting bound property changes for boolean properties. This 
method can be called when a bound property has changed and it will send the 
appropriate PropertyChangeEvent to any registered PropertyChangeListeners. 

    propertyName - the property whose value has changed 
    oldValue - the property's previous value 
    newValue - the property's new value 

*java.awt.Component.firePropertyChange(String,byte,byte)*

public void firePropertyChange(
  java.lang.String propertyName,
  byte oldValue,
  byte newValue)

Reports a bound property change. 

    propertyName - the programmatic name of the property that was changed 
    oldValue - the old value of the property (as a byte) 
    newValue - the new value of the property (as a byte) 

*java.awt.Component.firePropertyChange(String,char,char)*

public void firePropertyChange(
  java.lang.String propertyName,
  char oldValue,
  char newValue)

Reports a bound property change. 

    propertyName - the programmatic name of the property that was changed 
    oldValue - the old value of the property (as a char) 
    newValue - the new value of the property (as a char) 

*java.awt.Component.firePropertyChange(String,double,double)*

public void firePropertyChange(
  java.lang.String propertyName,
  double oldValue,
  double newValue)

Reports a bound property change. 

    propertyName - the programmatic name of the property that was changed 
    oldValue - the old value of the property (as a double) 
    newValue - the new value of the property (as a double) 

*java.awt.Component.firePropertyChange(String,float,float)*

public void firePropertyChange(
  java.lang.String propertyName,
  float oldValue,
  float newValue)

Reports a bound property change. 

    propertyName - the programmatic name of the property that was changed 
    oldValue - the old value of the property (as a float) 
    newValue - the new value of the property (as a float) 

*java.awt.Component.firePropertyChange(String,int,int)*

protected void firePropertyChange(
  java.lang.String propertyName,
  int oldValue,
  int newValue)

Support for reporting bound property changes for integer properties. This 
method can be called when a bound property has changed and it will send the 
appropriate PropertyChangeEvent to any registered PropertyChangeListeners. 

    propertyName - the property whose value has changed 
    oldValue - the property's previous value 
    newValue - the property's new value 

*java.awt.Component.firePropertyChange(String,long,long)*

public void firePropertyChange(
  java.lang.String propertyName,
  long oldValue,
  long newValue)

Reports a bound property change. 

    propertyName - the programmatic name of the property that was changed 
    oldValue - the old value of the property (as a long) 
    newValue - the new value of the property (as a long) 

*java.awt.Component.firePropertyChange(String,Object,Object)*

protected void firePropertyChange(
  java.lang.String propertyName,
  java.lang.Object oldValue,
  java.lang.Object newValue)

Support for reporting bound property changes for Object properties. This method 
can be called when a bound property has changed and it will send the 
appropriate PropertyChangeEvent to any registered PropertyChangeListeners. 

    propertyName - the property whose value has changed 
    oldValue - the property's previous value 
    newValue - the property's new value 

*java.awt.Component.firePropertyChange(String,short,short)*

public void firePropertyChange(
  java.lang.String propertyName,
  short oldValue,
  short newValue)

Reports a bound property change. 

    propertyName - the programmatic name of the property that was changed 
    oldValue - the old value of the property (as a short) 
    newValue - the old value of the property (as a short) 

*java.awt.Component.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this Component. The method 
implemented by this base class returns null. Classes that extend Component 
should implement this method to return the AccessibleContext associated with 
the subclass. 


    Returns: the AccessibleContext of this Component 
*java.awt.Component.getAlignmentX()*

public float getAlignmentX()

Returns the alignment along the x axis. This specifies how the component would 
like to be aligned relative to other components. The value should be a number 
between 0 and 1 where 0 represents alignment along the origin, 1 is aligned the 
furthest away from the origin, 0.5 is centered, etc. 


*java.awt.Component.getAlignmentY()*

public float getAlignmentY()

Returns the alignment along the y axis. This specifies how the component would 
like to be aligned relative to other components. The value should be a number 
between 0 and 1 where 0 represents alignment along the origin, 1 is aligned the 
furthest away from the origin, 0.5 is centered, etc. 


*java.awt.Component.getBackground()*

public |java.awt.Color| getBackground()

Gets the background color of this component. 


    Returns: this component's background color; if this component does not have a background 
             color, the background color of its parent is returned 
*java.awt.Component.getBounds()*

public |java.awt.Rectangle| getBounds()

Gets the bounds of this component in the form of a Rectangle object. The bounds 
specify this component's width, height, and location relative to its parent. 


    Returns: a rectangle indicating this component's bounds 
*java.awt.Component.getBounds(Rectangle)*

public |java.awt.Rectangle| getBounds(java.awt.Rectangle rv)

Stores the bounds of this component into "return value" rv and return rv. If rv 
is null a new Rectangle is allocated. This version of getBounds is useful if 
the caller wants to avoid allocating a new Rectangle object on the heap. 

    rv - the return value, modified to the components bounds 

    Returns: 
*java.awt.Component.getColorModel()*

public |java.awt.image.ColorModel| getColorModel()

Gets the instance of ColorModel used to display the component on the output 
device. 


    Returns: the color model used by this component 
*java.awt.Component.getComponentAt(int,int)*

public |java.awt.Component| getComponentAt(
  int x,
  int y)

Determines if this component or one of its immediate subcomponents contains the 
(x,y) location, and if so, returns the containing component. This method only 
looks one level deep. If the point (x,y) is inside a subcomponent that itself 
has subcomponents, it does not go looking down the subcomponent tree. 

The locate method of Component simply returns the component itself if the (x,y) 
coordinate location is inside its bounding box, and null otherwise. 

    x - the x coordinate 
    y - the y coordinate 

    Returns: the component or subcomponent that contains the (x,y) location; null if the 
             location is outside this component 
*java.awt.Component.getComponentAt(Point)*

public |java.awt.Component| getComponentAt(java.awt.Point p)

Returns the component or subcomponent that contains the specified point. 

    p - the point 

*java.awt.Component.getComponentListeners()*

public synchronized |java.awt.event.ComponentListener| getComponentListeners()

Returns an array of all the component listeners registered on this component. 


    Returns: all of this comonent's ComponentListeners or an empty array if no component 
             listeners are currently registered 
*java.awt.Component.getComponentOrientation()*

public |java.awt.ComponentOrientation| getComponentOrientation()

Retrieves the language-sensitive orientation that is to be used to order the 
elements or text within this component. LayoutManager and Component subclasses 
that wish to respect orientation should call this method to get the component's 
orientation before performing layout or drawing. 


*java.awt.Component.getCursor()*

public |java.awt.Cursor| getCursor()

Gets the cursor set in the component. If the component does not have a cursor 
set, the cursor of its parent is returned. If no cursor is set in the entire 
hierarchy, Cursor.DEFAULT_CURSOR is returned. 


*java.awt.Component.getDropTarget()*

public synchronized |java.awt.dnd.DropTarget| getDropTarget()

Gets the DropTarget associated with this Component. 


*java.awt.Component.getFocusCycleRootAncestor()*

public |java.awt.Container| getFocusCycleRootAncestor()

Returns the Container which is the focus cycle root of this Component's focus 
traversal cycle. Each focus traversal cycle has only a single focus cycle root 
and each Component which is not a Container belongs to only a single focus 
traversal cycle. Containers which are focus cycle roots belong to two cycles: 
one rooted at the Container itself, and one rooted at the Container's nearest 
focus-cycle-root ancestor. For such Containers, this method will return the 
Container's nearest focus-cycle- root ancestor. 


    Returns: this Component's nearest focus-cycle-root ancestor 
*java.awt.Component.getFocusListeners()*

public synchronized |java.awt.event.FocusListener| getFocusListeners()

Returns an array of all the focus listeners registered on this component. 


    Returns: all of this component's FocusListeners or an empty array if no component 
             listeners are currently registered 
*java.awt.Component.getFocusTraversalKeys(int)*

public |java.util.Set| getFocusTraversalKeys(int id)

Returns the Set of focus traversal keys for a given traversal operation for 
this Component. (See setFocusTraversalKeys for a full description of each key.) 

If a Set of traversal keys has not been explicitly defined for this Component, 
then this Component's parent's Set is returned. If no Set has been explicitly 
defined for any of this Component's ancestors, then the current 
KeyboardFocusManager's default Set is returned. 

    id - one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, 
       KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, or 
       KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS 

    Returns: the Set of AWTKeyStrokes for the specified operation. The Set will be 
             unmodifiable, and may be empty. null will never be returned. 
*java.awt.Component.getFocusTraversalKeysEnabled()*

public boolean getFocusTraversalKeysEnabled()

Returns whether focus traversal keys are enabled for this Component. Components 
for which focus traversal keys are disabled receive key events for focus 
traversal keys. Components for which focus traversal keys are enabled do not 
see these events; instead, the events are automatically converted to traversal 
operations. 


    Returns: whether focus traversal keys are enabled for this Component 
*java.awt.Component.getFont()*

public |java.awt.Font| getFont()

Gets the font of this component. 


    Returns: this component's font; if a font has not been set for this component, the font 
             of its parent is returned 
*java.awt.Component.getFontMetrics(Font)*

public |java.awt.FontMetrics| getFontMetrics(java.awt.Font font)

Gets the font metrics for the specified font. 

    font - the font for which font metrics is to be obtained 

    Returns: the font metrics for font 
*java.awt.Component.getForeground()*

public |java.awt.Color| getForeground()

Gets the foreground color of this component. 


    Returns: this component's foreground color; if this component does not have a foreground 
             color, the foreground color of its parent is returned 
*java.awt.Component.getGraphics()*

public |java.awt.Graphics| getGraphics()

Creates a graphics context for this component. This method will return null if 
this component is currently not displayable. 


    Returns: a graphics context for this component, or null if it has none 
*java.awt.Component.getGraphicsConfiguration()*

public |java.awt.GraphicsConfiguration| getGraphicsConfiguration()

Gets the GraphicsConfiguration associated with this Component. If the Component 
has not been assigned a specific GraphicsConfiguration, the 
GraphicsConfiguration of the Component object's top-level container is 
returned. If the Component has been created, but not yet added to a Container, 
this method returns null. 


    Returns: the GraphicsConfiguration used by this Component or null 
*java.awt.Component.getHeight()*

public int getHeight()

Returns the current height of this component. This method is preferable to 
writing component.getBounds().heightcomponent.getSize().height because it 
doesn't cause any heap allocations. 


    Returns: the current height of this component 
*java.awt.Component.getHierarchyBoundsListeners()*

public synchronized |java.awt.event.HierarchyBoundsListener| getHierarchyBoundsListeners()

Returns an array of all the hierarchy bounds listeners registered on this 
component. 


    Returns: all of this component's HierarchyBoundsListeners or an empty array if no 
             hierarchy bounds listeners are currently registered 
*java.awt.Component.getHierarchyListeners()*

public synchronized |java.awt.event.HierarchyListener| getHierarchyListeners()

Returns an array of all the hierarchy listeners registered on this component. 


    Returns: all of this component's HierarchyListeners or an empty array if no hierarchy 
             listeners are currently registered 
*java.awt.Component.getIgnoreRepaint()*

public boolean getIgnoreRepaint()




    Returns: whether or not paint messages received from the operating system should be 
             ignored. 
*java.awt.Component.getInputContext()*

public |java.awt.im.InputContext| getInputContext()

Gets the input context used by this component for handling the communication 
with input methods when text is entered in this component. By default, the 
input context used for the parent component is returned. Components may 
override this to return a private input context. 


    Returns: the input context used by this component; null if no context can be determined 
*java.awt.Component.getInputMethodListeners()*

public synchronized |java.awt.event.InputMethodListener| getInputMethodListeners()

Returns an array of all the input method listeners registered on this 
component. 


    Returns: all of this component's InputMethodListeners or an empty array if no input 
             method listeners are currently registered 
*java.awt.Component.getInputMethodRequests()*

public |java.awt.im.InputMethodRequests| getInputMethodRequests()

Gets the input method request handler which supports requests from input 
methods for this component. A component that supports on-the-spot text input 
must override this method to return an InputMethodRequests instance. At the 
same time, it also has to handle input method events. 


    Returns: the input method request handler for this component, null by default 
*java.awt.Component.getKeyListeners()*

public synchronized |java.awt.event.KeyListener| getKeyListeners()

Returns an array of all the key listeners registered on this component. 


    Returns: all of this component's KeyListeners or an empty array if no key listeners are 
             currently registered 
*java.awt.Component.getListeners(Class)*

public |java.util.EventListener| getListeners(java.lang.Class listenerType)

Returns an array of all the objects currently registered as FooListeners upon 
this Component. FooListeners are registered using the addFooListener method. 

You can specify the listenerType argument with a class literal, such as 
FooListener.class. For example, you can query a Component c for its mouse 
listeners with the following code: 

MouseListener[] mls = (MouseListener[])(c.getListeners(MouseListener.class)); 

If no such listeners exist, this method returns an empty array. 

    listenerType - the type of listeners requested; this parameter should specify an interface 
       that descends from java.util.EventListener 

    Returns: an array of all objects registered as FooListeners on this component, or an 
             empty array if no such listeners have been added 
*java.awt.Component.getLocale()*

public |java.util.Locale| getLocale()

Gets the locale of this component. 


    Returns: this component's locale; if this component does not have a locale, the locale 
             of its parent is returned 
*java.awt.Component.getLocation()*

public |java.awt.Point| getLocation()

Gets the location of this component in the form of a point specifying the 
component's top-left corner. The location will be relative to the parent's 
coordinate space. 

Due to the asynchronous nature of native event handling, this method can return 
outdated values (for instance, after several calls of setLocation() in rapid 
succession). For this reason, the recommended method of obtaining a component's 
position is within java.awt.event.ComponentListener.componentMoved(), which is 
called after the operating system has finished moving the component. 


    Returns: an instance of Point representing the top-left corner of the component's bounds 
             in the coordinate space of the component's parent 
*java.awt.Component.getLocation(Point)*

public |java.awt.Point| getLocation(java.awt.Point rv)

Stores the x,y origin of this component into "return value" rv and return rv. 
If rv is null a new Point is allocated. This version of getLocation is useful 
if the caller wants to avoid allocating a new Point object on the heap. 

    rv - the return value, modified to the components location 

    Returns: 
*java.awt.Component.getLocationOnScreen()*

public |java.awt.Point| getLocationOnScreen()

Gets the location of this component in the form of a point specifying the 
component's top-left corner in the screen's coordinate space. 


    Returns: an instance of Point representing the top-left corner of the component's bounds 
             in the coordinate space of the screen 
*java.awt.Component.getMaximumSize()*

public |java.awt.Dimension| getMaximumSize()

Gets the maximum size of this component. 


    Returns: a dimension object indicating this component's maximum size 
*java.awt.Component.getMinimumSize()*

public |java.awt.Dimension| getMinimumSize()

Gets the mininimum size of this component. 


    Returns: a dimension object indicating this component's minimum size 
*java.awt.Component.getMouseListeners()*

public synchronized |java.awt.event.MouseListener| getMouseListeners()

Returns an array of all the mouse listeners registered on this component. 


    Returns: all of this component's MouseListeners or an empty array if no mouse listeners 
             are currently registered 
*java.awt.Component.getMouseMotionListeners()*

public synchronized |java.awt.event.MouseMotionListener| getMouseMotionListeners()

Returns an array of all the mouse motion listeners registered on this 
component. 


    Returns: all of this component's MouseMotionListeners or an empty array if no mouse 
             motion listeners are currently registered 
*java.awt.Component.getMousePosition()*

public |java.awt.Point| getMousePosition()
  throws |java.awt.HeadlessException|
         
Returns the position of the mouse pointer in this Component's coordinate space 
if the Component is directly under the mouse pointer, otherwise returns null. 
If the Component is not showing on the screen, this method returns null even if 
the mouse pointer is above the area where the Component would be displayed. If 
the Component is partially or fully obscured by other Components or native 
windows, this method returns a non-null value only if the mouse pointer is 
located above the unobscured part of the Component. 

For Containers it returns a non-null value if the mouse is above the Container 
itself or above any of its descendants. Use (|java.awt.Container|) if you need 
to exclude children. 

Sometimes the exact mouse coordinates are not important, and the only thing 
that matters is whether a specific Component is under the mouse pointer. If the 
return value of this method is null, mouse pointer is not directly above the 
Component. 


    Returns: mouse coordinates relative to this Component, or null 
*java.awt.Component.getMouseWheelListeners()*

public synchronized |java.awt.event.MouseWheelListener| getMouseWheelListeners()

Returns an array of all the mouse wheel listeners registered on this component. 


    Returns: all of this component's MouseWheelListeners or an empty array if no mouse wheel 
             listeners are currently registered 
*java.awt.Component.getName()*

public |java.lang.String| getName()

Gets the name of the component. 


    Returns: this component's name 
*java.awt.Component.getParent()*

public |java.awt.Container| getParent()

Gets the parent of this component. 


    Returns: the parent container of this component 
*java.awt.Component.getPeer()*

public |java.awt.peer.ComponentPeer| getPeer()




*java.awt.Component.getPreferredSize()*

public |java.awt.Dimension| getPreferredSize()

Gets the preferred size of this component. 


    Returns: a dimension object indicating this component's preferred size 
*java.awt.Component.getPropertyChangeListeners()*

public synchronized |java.beans.PropertyChangeListener| getPropertyChangeListeners()

Returns an array of all the property change listeners registered on this 
component. 


    Returns: all of this component's PropertyChangeListeners or an empty array if no 
             property change listeners are currently registered 
*java.awt.Component.getPropertyChangeListeners(String)*

public synchronized |java.beans.PropertyChangeListener| getPropertyChangeListeners(java.lang.String propertyName)

Returns an array of all the listeners which have been associated with the named 
property. 


    Returns: all of the PropertyChangeListeners associated with the named property; if no 
             such listeners have been added or if propertyName is null, an 
             empty array is returned 
*java.awt.Component.getSize()*

public |java.awt.Dimension| getSize()

Returns the size of this component in the form of a Dimension object. The 
height field of the Dimension object contains this component's height, and the 
width field of the Dimension object contains this component's width. 


    Returns: a Dimension object that indicates the size of this component 
*java.awt.Component.getSize(Dimension)*

public |java.awt.Dimension| getSize(java.awt.Dimension rv)

Stores the width/height of this component into "return value" rv and return rv. 
If rv is null a new Dimension object is allocated. This version of getSize is 
useful if the caller wants to avoid allocating a new Dimension object on the 
heap. 

    rv - the return value, modified to the components size 

    Returns: 
*java.awt.Component.getToolkit()*

public |java.awt.Toolkit| getToolkit()

Gets the toolkit of this component. Note that the frame that contains a 
component controls which toolkit is used by that component. Therefore if the 
component is moved from one frame to another, the toolkit it uses may change. 


    Returns: the toolkit of this component 
*java.awt.Component.getTreeLock()*

public final |java.lang.Object| getTreeLock()

Gets this component's locking object (the object that owns the thread 
sychronization monitor) for AWT component-tree and layout operations. 


    Returns: this component's locking object 
*java.awt.Component.getWidth()*

public int getWidth()

Returns the current width of this component. This method is preferable to 
writing component.getBounds().width, or component.getSize().width because it 
doesn't cause any heap allocations. 


    Returns: the current width of this component 
*java.awt.Component.getX()*

public int getX()

Returns the current x coordinate of the components origin. This method is 
preferable to writing component.getBounds().x, or component.getLocation().x 
because it doesn't cause any heap allocations. 


    Returns: the current x coordinate of the components origin 
*java.awt.Component.getY()*

public int getY()

Returns the current y coordinate of the components origin. This method is 
preferable to writing component.getBounds().y, or component.getLocation().y 
because it doesn't cause any heap allocations. 


    Returns: the current y coordinate of the components origin 
*java.awt.Component.gotFocus(Event,Object)*

public boolean gotFocus(
  java.awt.Event evt,
  java.lang.Object what)




*java.awt.Component.handleEvent(Event)*

public boolean handleEvent(java.awt.Event evt)




*java.awt.Component.hasFocus()*

public boolean hasFocus()

Returns true if this Component is the focus owner. This method is obsolete, and 
has been replaced by isFocusOwner(). 


    Returns: true if this Component is the focus owner; false otherwise 
*java.awt.Component.hide()*

public void hide()




*java.awt.Component.imageUpdate(Image,int,int,int,int,int)*

public boolean imageUpdate(
  java.awt.Image img,
  int infoflags,
  int x,
  int y,
  int w,
  int h)

Repaints the component when the image has changed. This imageUpdate method of 
an ImageObserver is called when more information about an image which had been 
previously requested using an asynchronous routine such as the drawImage method 
of Graphics becomes available. See the definition of imageUpdate for more 
information on this method and its arguments. 

The imageUpdate method of Component incrementally draws an image on the 
component as more of the bits of the image are available. 

If the system property awt.image.incrementaldraw is missing or has the value 
true, the image is incrementally drawn. If the system property has any other 
value, then the image is not drawn until it has been completely loaded. 

Also, if incremental drawing is in effect, the value of the system property 
awt.image.redrawrate is interpreted as an integer to give the maximum redraw 
rate, in milliseconds. If the system property is missing or cannot be 
interpreted as an integer, the redraw rate is once every 100ms. 

The interpretation of the x, y, width, and height arguments depends on the 
value of the infoflags argument. 

    img - the image being observed 
    infoflags - see imageUpdate for more information 
    x - the x coordinate 
    y - the y coordinate 
    w - the width 
    h - the height 

    Returns: false if the infoflags indicate that the image is completely loaded; true 
             otherwise. 
*java.awt.Component.inside(int,int)*

public boolean inside(
  int x,
  int y)




*java.awt.Component.invalidate()*

public void invalidate()

Invalidates this component. This component and all parents above it are marked 
as needing to be laid out. This method can be called often, so it needs to 
execute quickly. 


*java.awt.Component.isBackgroundSet()*

public boolean isBackgroundSet()

Returns whether the background color has been explicitly set for this 
Component. If this method returns false, this Component is inheriting its 
background color from an ancestor. 


    Returns: true if the background color has been explicitly set for this Component; false 
             otherwise. 
*java.awt.Component.isCursorSet()*

public boolean isCursorSet()

Returns whether the cursor has been explicitly set for this Component. If this 
method returns false, this Component is inheriting its cursor from an ancestor. 


    Returns: true if the cursor has been explicitly set for this Component; false otherwise. 
*java.awt.Component.isDisplayable()*

public boolean isDisplayable()

Determines whether this component is displayable. A component is displayable 
when it is connected to a native screen resource. 

A component is made displayable either when it is added to a displayable 
containment hierarchy or when its containment hierarchy is made displayable. A 
containment hierarchy is made displayable when its ancestor window is either 
packed or made visible. 

A component is made undisplayable either when it is removed from a displayable 
containment hierarchy or when its containment hierarchy is made undisplayable. 
A containment hierarchy is made undisplayable when its ancestor window is 
disposed. 


    Returns: true if the component is displayable, false otherwise 
*java.awt.Component.isDoubleBuffered()*

public boolean isDoubleBuffered()

Returns true if this component is painted to an offscreen image ("buffer") 
that's copied to the screen later. Component subclasses that support double 
buffering should override this method to return true if double buffering is 
enabled. 


    Returns: false by default 
*java.awt.Component.isEnabled()*

public boolean isEnabled()

Determines whether this component is enabled. An enabled component can respond 
to user input and generate events. Components are enabled initially by default. 
A component may be enabled or disabled by calling its setEnabled method. 


    Returns: true if the component is enabled, false otherwise 
*java.awt.Component.isFocusable()*

public boolean isFocusable()

Returns whether this Component can be focused. 


    Returns: true if this Component is focusable; false otherwise. 
*java.awt.Component.isFocusCycleRoot(Container)*

public boolean isFocusCycleRoot(java.awt.Container container)

Returns whether the specified Container is the focus cycle root of this 
Component's focus traversal cycle. Each focus traversal cycle has only a single 
focus cycle root and each Component which is not a Container belongs to only a 
single focus traversal cycle. 

    container - the Container to be tested 

    Returns: true if the specified Container is a focus-cycle- root of this Component; false 
             otherwise 
*java.awt.Component.isFocusOwner()*

public boolean isFocusOwner()

Returns true if this Component is the focus owner. 


    Returns: true if this Component is the focus owner; false otherwise 
*java.awt.Component.isFocusTraversable()*

public boolean isFocusTraversable()

Returns whether this Component can become the focus owner. 


    Returns: true if this Component is focusable; false otherwise 
*java.awt.Component.isFontSet()*

public boolean isFontSet()

Returns whether the font has been explicitly set for this Component. If this 
method returns false, this Component is inheriting its font from an ancestor. 


    Returns: true if the font has been explicitly set for this Component; false otherwise. 
*java.awt.Component.isForegroundSet()*

public boolean isForegroundSet()

Returns whether the foreground color has been explicitly set for this 
Component. If this method returns false, this Component is inheriting its 
foreground color from an ancestor. 


    Returns: true if the foreground color has been explicitly set for this Component; false 
             otherwise. 
*java.awt.Component.isLightweight()*

public boolean isLightweight()

A lightweight component doesn't have a native toolkit peer. Subclasses of 
Component and Container, other than the ones defined in this package like 
Button or Scrollbar, are lightweight. All of the Swing components are 
lightweights. 

This method will always return false if this component is not displayable 
because it is impossible to determine the weight of an undisplayable component. 


    Returns: true if this component has a lightweight peer; false if it has a native peer or 
             no peer 
*java.awt.Component.isMaximumSizeSet()*

public boolean isMaximumSizeSet()

Returns true if the maximum size has been set to a non-null value otherwise 
returns false. 


    Returns: true if maximumSize is non-null, false otherwise 
*java.awt.Component.isMinimumSizeSet()*

public boolean isMinimumSizeSet()

Returns whether or not setMinimumSize has been invoked with a non-null value. 


    Returns: true if setMinimumSize has been invoked with a non-null value. 
*java.awt.Component.isOpaque()*

public boolean isOpaque()

Returns true if this component is completely opaque, returns false by default. 

An opaque component paints every pixel within its rectangular region. A 
non-opaque component paints only some of its pixels, allowing the pixels 
underneath it to "show through". A component that does not fully paint its 
pixels therefore provides a degree of transparency. Only lightweight components 
can be transparent. 

Subclasses that guarantee to always completely paint their contents should 
override this method and return true. All of the "heavyweight" AWT components 
are opaque. 


    Returns: true if this component is completely opaque 
*java.awt.Component.isPreferredSizeSet()*

public boolean isPreferredSizeSet()

Returns true if the preferred size has been set to a non-null value otherwise 
returns false. 


    Returns: true if setPreferredSize has been invoked with a non-null value. 
*java.awt.Component.isShowing()*

public boolean isShowing()

Determines whether this component is showing on screen. This means that the 
component must be visible, and it must be in a container that is visible and 
showing. 


    Returns: true if the component is showing, false otherwise 
*java.awt.Component.isValid()*

public boolean isValid()

Determines whether this component is valid. A component is valid when it is 
correctly sized and positioned within its parent container and all its children 
are also valid. In order to account for peers' size requirements, components 
are invalidated before they are first shown on the screen. By the time the 
parent container is fully realized, all its components will be valid. 


    Returns: true if the component is valid, false otherwise 
*java.awt.Component.isVisible()*

public boolean isVisible()

Determines whether this component should be visible when its parent is visible. 
Components are initially visible, with the exception of top level components 
such as Frame objects. 


    Returns: true if the component is visible, false otherwise 
*java.awt.Component.keyDown(Event,int)*

public boolean keyDown(
  java.awt.Event evt,
  int key)




*java.awt.Component.keyUp(Event,int)*

public boolean keyUp(
  java.awt.Event evt,
  int key)




*java.awt.Component.layout()*

public void layout()




*java.awt.Component.list()*

public void list()

Prints a listing of this component to the standard system output stream 
System.out. 


*java.awt.Component.list(PrintStream)*

public void list(java.io.PrintStream out)

Prints a listing of this component to the specified output stream. 

    out - a print stream 

*java.awt.Component.list(PrintStream,int)*

public void list(
  java.io.PrintStream out,
  int indent)

Prints out a list, starting at the specified indentation, to the specified 
print stream. 

    out - a print stream 
    indent - number of spaces to indent 

*java.awt.Component.list(PrintWriter)*

public void list(java.io.PrintWriter out)

Prints a listing to the specified print writer. 

    out - the print writer to print to 

*java.awt.Component.list(PrintWriter,int)*

public void list(
  java.io.PrintWriter out,
  int indent)

Prints out a list, starting at the specified indentation, to the specified 
print writer. 

    out - the print writer to print to 
    indent - the number of spaces to indent 

*java.awt.Component.locate(int,int)*

public |java.awt.Component| locate(
  int x,
  int y)




*java.awt.Component.location()*

public |java.awt.Point| location()




*java.awt.Component.lostFocus(Event,Object)*

public boolean lostFocus(
  java.awt.Event evt,
  java.lang.Object what)




*java.awt.Component.minimumSize()*

public |java.awt.Dimension| minimumSize()




*java.awt.Component.mouseDown(Event,int,int)*

public boolean mouseDown(
  java.awt.Event evt,
  int x,
  int y)




*java.awt.Component.mouseDrag(Event,int,int)*

public boolean mouseDrag(
  java.awt.Event evt,
  int x,
  int y)




*java.awt.Component.mouseEnter(Event,int,int)*

public boolean mouseEnter(
  java.awt.Event evt,
  int x,
  int y)




*java.awt.Component.mouseExit(Event,int,int)*

public boolean mouseExit(
  java.awt.Event evt,
  int x,
  int y)




*java.awt.Component.mouseMove(Event,int,int)*

public boolean mouseMove(
  java.awt.Event evt,
  int x,
  int y)




*java.awt.Component.mouseUp(Event,int,int)*

public boolean mouseUp(
  java.awt.Event evt,
  int x,
  int y)




*java.awt.Component.move(int,int)*

public void move(
  int x,
  int y)




*java.awt.Component.nextFocus()*

public void nextFocus()




*java.awt.Component.paint(Graphics)*

public void paint(java.awt.Graphics g)

Paints this component. 

This method is called when the contents of the component should be painted; 
such as when the component is first being shown or is damaged and in need of 
repair. The clip rectangle in the Graphics parameter is set to the area which 
needs to be painted. Subclasses of Component that override this method need not 
call super.paint(g). 

For performance reasons, Components with zero width or height aren't considered 
to need painting when they are first shown, and also aren't considered to need 
repair. 

Note: For more information on the paint mechanisms utilitized by AWT and Swing, 
including information on how to write the most efficient painting code, see 
Painting in AWT and Swing. 

    g - the graphics context to use for painting 

*java.awt.Component.paintAll(Graphics)*

public void paintAll(java.awt.Graphics g)

Paints this component and all of its subcomponents. 

The origin of the graphics context, its (0,0) coordinate point, is the top-left 
corner of this component. The clipping region of the graphics context is the 
bounding rectangle of this component. 

    g - the graphics context to use for painting 

*java.awt.Component.paramString()*

protected |java.lang.String| paramString()

Returns a string representing the state of this component. This method is 
intended to be used only for debugging purposes, and the content and format of 
the returned string may vary between implementations. The returned string may 
be empty but may not be null. 


    Returns: a string representation of this component's state 
*java.awt.Component.postEvent(Event)*

public boolean postEvent(java.awt.Event e)




*java.awt.Component.preferredSize()*

public |java.awt.Dimension| preferredSize()




*java.awt.Component.prepareImage(Image,ImageObserver)*

public boolean prepareImage(
  java.awt.Image image,
  java.awt.image.ImageObserver observer)

Prepares an image for rendering on this component. The image data is downloaded 
asynchronously in another thread and the appropriate screen representation of 
the image is generated. 

    image - the Image for which to prepare a screen representation 
    observer - the ImageObserver object to be notified as the image is being prepared 

    Returns: true if the image has already been fully prepared; false otherwise 
*java.awt.Component.prepareImage(Image,int,int,ImageObserver)*

public boolean prepareImage(
  java.awt.Image image,
  int width,
  int height,
  java.awt.image.ImageObserver observer)

Prepares an image for rendering on this component at the specified width and 
height. 

The image data is downloaded asynchronously in another thread, and an 
appropriately scaled screen representation of the image is generated. 

    image - the instance of Image for which to prepare a screen representation 
    width - the width of the desired screen representation 
    height - the height of the desired screen representation 
    observer - the ImageObserver object to be notified as the image is being prepared 

    Returns: true if the image has already been fully prepared; false otherwise 
*java.awt.Component.print(Graphics)*

public void print(java.awt.Graphics g)

Prints this component. Applications should override this method for components 
that must do special processing before being printed or should be printed 
differently than they are painted. 

The default implementation of this method calls the paint method. 

The origin of the graphics context, its (0,0) coordinate point, is the top-left 
corner of this component. The clipping region of the graphics context is the 
bounding rectangle of this component. 

    g - the graphics context to use for printing 

*java.awt.Component.printAll(Graphics)*

public void printAll(java.awt.Graphics g)

Prints this component and all of its subcomponents. 

The origin of the graphics context, its (0,0) coordinate point, is the top-left 
corner of this component. The clipping region of the graphics context is the 
bounding rectangle of this component. 

    g - the graphics context to use for printing 

*java.awt.Component.processComponentEvent(ComponentEvent)*

protected void processComponentEvent(java.awt.event.ComponentEvent e)

Processes component events occurring on this component by dispatching them to 
any registered ComponentListener objects. 

This method is not called unless component events are enabled for this 
component. Component events are enabled when one of the following occurs: 

A ComponentListener object is registered via addComponentListener. Component 
events are enabled via enableEvents. 

Note that if the event parameter is null the behavior is unspecified and may 
result in an exception. 

    e - the component event 

*java.awt.Component.processEvent(AWTEvent)*

protected void processEvent(java.awt.AWTEvent e)

Processes events occurring on this component. By default this method calls the 
appropriate process<eventtype>Event method for the given class of event. Note 
that if the event parameter is null the behavior is unspecified and may result 
in an exception. 

    e - the event 

*java.awt.Component.processFocusEvent(FocusEvent)*

protected void processFocusEvent(java.awt.event.FocusEvent e)

Processes focus events occurring on this component by dispatching them to any 
registered FocusListener objects. 

This method is not called unless focus events are enabled for this component. 
Focus events are enabled when one of the following occurs: 

A FocusListener object is registered via addFocusListener. Focus events are 
enabled via enableEvents. 

If focus events are enabled for a Component, the current KeyboardFocusManager 
determines whether or not a focus event should be dispatched to registered 
FocusListener objects. If the events are to be dispatched, the 
KeyboardFocusManager calls the Component's dispatchEvent method, which results 
in a call to the Component's processFocusEvent method. 

If focus events are enabled for a Component, calling the Component's 
dispatchEvent method with a FocusEvent as the argument will result in a call to 
the Component's processFocusEvent method regardless of the current 
KeyboardFocusManager. 

Note that if the event parameter is null the behavior is unspecified and may 
result in an exception. 

    e - the focus event 

*java.awt.Component.processHierarchyBoundsEvent(HierarchyEvent)*

protected void processHierarchyBoundsEvent(java.awt.event.HierarchyEvent e)

Processes hierarchy bounds events occurring on this component by dispatching 
them to any registered HierarchyBoundsListener objects. 

This method is not called unless hierarchy bounds events are enabled for this 
component. Hierarchy bounds events are enabled when one of the following 
occurs: 

An HierarchyBoundsListener object is registered via addHierarchyBoundsListener. 
Hierarchy bounds events are enabled via enableEvents. 

Note that if the event parameter is null the behavior is unspecified and may 
result in an exception. 

    e - the hierarchy event 

*java.awt.Component.processHierarchyEvent(HierarchyEvent)*

protected void processHierarchyEvent(java.awt.event.HierarchyEvent e)

Processes hierarchy events occurring on this component by dispatching them to 
any registered HierarchyListener objects. 

This method is not called unless hierarchy events are enabled for this 
component. Hierarchy events are enabled when one of the following occurs: 

An HierarchyListener object is registered via addHierarchyListener. Hierarchy 
events are enabled via enableEvents. 

Note that if the event parameter is null the behavior is unspecified and may 
result in an exception. 

    e - the hierarchy event 

*java.awt.Component.processInputMethodEvent(InputMethodEvent)*

protected void processInputMethodEvent(java.awt.event.InputMethodEvent e)

Processes input method events occurring on this component by dispatching them 
to any registered InputMethodListener objects. 

This method is not called unless input method events are enabled for this 
component. Input method events are enabled when one of the following occurs: 

An InputMethodListener object is registered via addInputMethodListener. Input 
method events are enabled via enableEvents. 

Note that if the event parameter is null the behavior is unspecified and may 
result in an exception. 

    e - the input method event 

*java.awt.Component.processKeyEvent(KeyEvent)*

protected void processKeyEvent(java.awt.event.KeyEvent e)

Processes key events occurring on this component by dispatching them to any 
registered KeyListener objects. 

This method is not called unless key events are enabled for this component. Key 
events are enabled when one of the following occurs: 

A KeyListener object is registered via addKeyListener. Key events are enabled 
via enableEvents. 

If key events are enabled for a Component, the current KeyboardFocusManager 
determines whether or not a key event should be dispatched to registered 
KeyListener objects. The DefaultKeyboardFocusManager will not dispatch key 
events to a Component that is not the focus owner or is not showing. 

As of J2SE 1.4, KeyEvents are redirected to the focus owner. Please see the 
Focus Specification for further information. 

Calling a Component's dispatchEvent method with a KeyEvent as the argument will 
result in a call to the Component's processKeyEvent method regardless of the 
current KeyboardFocusManager as long as the component is showing, focused, and 
enabled, and key events are enabled on it. If the event parameter is null the 
behavior is unspecified and may result in an exception. 

    e - the key event 

*java.awt.Component.processMouseEvent(MouseEvent)*

protected void processMouseEvent(java.awt.event.MouseEvent e)

Processes mouse events occurring on this component by dispatching them to any 
registered MouseListener objects. 

This method is not called unless mouse events are enabled for this component. 
Mouse events are enabled when one of the following occurs: 

A MouseListener object is registered via addMouseListener. Mouse events are 
enabled via enableEvents. 

Note that if the event parameter is null the behavior is unspecified and may 
result in an exception. 

    e - the mouse event 

*java.awt.Component.processMouseMotionEvent(MouseEvent)*

protected void processMouseMotionEvent(java.awt.event.MouseEvent e)

Processes mouse motion events occurring on this component by dispatching them 
to any registered MouseMotionListener objects. 

This method is not called unless mouse motion events are enabled for this 
component. Mouse motion events are enabled when one of the following occurs: 

A MouseMotionListener object is registered via addMouseMotionListener. Mouse 
motion events are enabled via enableEvents. 

Note that if the event parameter is null the behavior is unspecified and may 
result in an exception. 

    e - the mouse motion event 

*java.awt.Component.processMouseWheelEvent(MouseWheelEvent)*

protected void processMouseWheelEvent(java.awt.event.MouseWheelEvent e)

Processes mouse wheel events occurring on this component by dispatching them to 
any registered MouseWheelListener objects. 

This method is not called unless mouse wheel events are enabled for this 
component. Mouse wheel events are enabled when one of the following occurs: 

A MouseWheelListener object is registered via addMouseWheelListener. Mouse 
wheel events are enabled via enableEvents. 

For information on how mouse wheel events are dispatched, see the class 
description for (|java.awt.event.MouseWheelEvent|) . 

Note that if the event parameter is null the behavior is unspecified and may 
result in an exception. 

    e - the mouse wheel event 

*java.awt.Component.remove(MenuComponent)*

public synchronized void remove(java.awt.MenuComponent popup)

Removes the specified popup menu from the component. 

    popup - the popup menu to be removed 

*java.awt.Component.removeComponentListener(ComponentListener)*

public synchronized void removeComponentListener(java.awt.event.ComponentListener l)

Removes the specified component listener so that it no longer receives 
component events from this component. This method performs no function, nor 
does it throw an exception, if the listener specified by the argument was not 
previously added to this component. If listener l is null, no exception is 
thrown and no action is performed. 

    l - the component listener 

*java.awt.Component.removeFocusListener(FocusListener)*

public synchronized void removeFocusListener(java.awt.event.FocusListener l)

Removes the specified focus listener so that it no longer receives focus events 
from this component. This method performs no function, nor does it throw an 
exception, if the listener specified by the argument was not previously added 
to this component. If listener l is null, no exception is thrown and no action 
is performed. 

    l - the focus listener 

*java.awt.Component.removeHierarchyBoundsListener(HierarchyBoundsListener)*

public void removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener l)

Removes the specified hierarchy bounds listener so that it no longer receives 
hierarchy bounds events from this component. This method performs no function, 
nor does it throw an exception, if the listener specified by the argument was 
not previously added to this component. If listener l is null, no exception is 
thrown and no action is performed. 

    l - the hierarchy bounds listener 

*java.awt.Component.removeHierarchyListener(HierarchyListener)*

public void removeHierarchyListener(java.awt.event.HierarchyListener l)

Removes the specified hierarchy listener so that it no longer receives 
hierarchy changed events from this component. This method performs no function, 
nor does it throw an exception, if the listener specified by the argument was 
not previously added to this component. If listener l is null, no exception is 
thrown and no action is performed. 

    l - the hierarchy listener 

*java.awt.Component.removeInputMethodListener(InputMethodListener)*

public synchronized void removeInputMethodListener(java.awt.event.InputMethodListener l)

Removes the specified input method listener so that it no longer receives input 
method events from this component. This method performs no function, nor does 
it throw an exception, if the listener specified by the argument was not 
previously added to this component. If listener l is null, no exception is 
thrown and no action is performed. 

    l - the input method listener 

*java.awt.Component.removeKeyListener(KeyListener)*

public synchronized void removeKeyListener(java.awt.event.KeyListener l)

Removes the specified key listener so that it no longer receives key events 
from this component. This method performs no function, nor does it throw an 
exception, if the listener specified by the argument was not previously added 
to this component. If listener l is null, no exception is thrown and no action 
is performed. 

    l - the key listener 

*java.awt.Component.removeMouseListener(MouseListener)*

public synchronized void removeMouseListener(java.awt.event.MouseListener l)

Removes the specified mouse listener so that it no longer receives mouse events 
from this component. This method performs no function, nor does it throw an 
exception, if the listener specified by the argument was not previously added 
to this component. If listener l is null, no exception is thrown and no action 
is performed. 

    l - the mouse listener 

*java.awt.Component.removeMouseMotionListener(MouseMotionListener)*

public synchronized void removeMouseMotionListener(java.awt.event.MouseMotionListener l)

Removes the specified mouse motion listener so that it no longer receives mouse 
motion events from this component. This method performs no function, nor does 
it throw an exception, if the listener specified by the argument was not 
previously added to this component. If listener l is null, no exception is 
thrown and no action is performed. 

    l - the mouse motion listener 

*java.awt.Component.removeMouseWheelListener(MouseWheelListener)*

public synchronized void removeMouseWheelListener(java.awt.event.MouseWheelListener l)

Removes the specified mouse wheel listener so that it no longer receives mouse 
wheel events from this component. This method performs no function, nor does it 
throw an exception, if the listener specified by the argument was not 
previously added to this component. If l is null, no exception is thrown and no 
action is performed. 

    l - the mouse wheel listener. 

*java.awt.Component.removeNotify()*

public void removeNotify()

Makes this Component undisplayable by destroying it native screen resource. 

This method is called by the toolkit internally and should not be called 
directly by programs. Code overriding this method should call 
super.removeNotify as the first line of the overriding method. 


*java.awt.Component.removePropertyChangeListener(PropertyChangeListener)*

public synchronized void removePropertyChangeListener(java.beans.PropertyChangeListener listener)

Removes a PropertyChangeListener from the listener list. This method should be 
used to remove PropertyChangeListeners that were registered for all bound 
properties of this class. 

If listener is null, no exception is thrown and no action is performed. 

    listener - the PropertyChangeListener to be removed 

*java.awt.Component.removePropertyChangeListener(String,PropertyChangeListener)*

public synchronized void removePropertyChangeListener(
  java.lang.String propertyName,
  java.beans.PropertyChangeListener listener)

Removes a PropertyChangeListener from the listener list for a specific 
property. This method should be used to remove PropertyChangeListeners that 
were registered for a specific bound property. 

If propertyName or listener is null, no exception is thrown and no action is 
taken. 

    propertyName - a valid property name 
    listener - the PropertyChangeListener to be removed 

*java.awt.Component.repaint()*

public void repaint()

Repaints this component. 

If this component is a lightweight component, this method causes a call to this 
component's paint method as soon as possible. Otherwise, this method causes a 
call to this component's update method as soon as possible. 

Note: For more information on the paint mechanisms utilitized by AWT and Swing, 
including information on how to write the most efficient painting code, see 
Painting in AWT and Swing. 


*java.awt.Component.repaint(int,int,int,int)*

public void repaint(
  int x,
  int y,
  int width,
  int height)

Repaints the specified rectangle of this component. 

If this component is a lightweight component, this method causes a call to this 
component's paint method as soon as possible. Otherwise, this method causes a 
call to this component's update method as soon as possible. 

Note: For more information on the paint mechanisms utilitized by AWT and Swing, 
including information on how to write the most efficient painting code, see 
Painting in AWT and Swing. 

    x - the x coordinate 
    y - the y coordinate 
    width - the width 
    height - the height 

*java.awt.Component.repaint(long)*

public void repaint(long tm)

Repaints the component. If this component is a lightweight component, this 
results in a call to paint within tm milliseconds. 

Note: For more information on the paint mechanisms utilitized by AWT and Swing, 
including information on how to write the most efficient painting code, see 
Painting in AWT and Swing. 

    tm - maximum time in milliseconds before update 

*java.awt.Component.repaint(long,int,int,int,int)*

public void repaint(
  long tm,
  int x,
  int y,
  int width,
  int height)

Repaints the specified rectangle of this component within tm milliseconds. 

If this component is a lightweight component, this method causes a call to this 
component's paint method. Otherwise, this method causes a call to this 
component's update method. 

Note: For more information on the paint mechanisms utilitized by AWT and Swing, 
including information on how to write the most efficient painting code, see 
Painting in AWT and Swing. 

    tm - maximum time in milliseconds before update 
    x - the x coordinate 
    y - the y coordinate 
    width - the width 
    height - the height 

*java.awt.Component.requestFocus()*

public void requestFocus()

Requests that this Component get the input focus, and that this Component's 
top-level ancestor become the focused Window. This component must be 
displayable, visible, and focusable for the request to be granted. Every effort 
will be made to honor the request; however, in some cases it may be impossible 
to do so. Developers must never assume that this Component is the focus owner 
until this Component receives a FOCUS_GAINED event. If this request is denied 
because this Component's top-level Window cannot become the focused Window, the 
request will be remembered and will be granted when the Window is later focused 
by the user. 

This method cannot be used to set the focus owner to no Component at all. Use 
KeyboardFocusManager.clearGlobalFocusOwner() instead. 

Because the focus behavior of this method is platform-dependent, developers are 
strongly encouraged to use requestFocusInWindow when possible. 


*java.awt.Component.requestFocus(boolean)*

protected boolean requestFocus(boolean temporary)

Requests that this Component get the input focus, and that this Component's 
top-level ancestor become the focused Window. This component must be 
displayable, visible, and focusable for the request to be granted. Every effort 
will be made to honor the request; however, in some cases it may be impossible 
to do so. Developers must never assume that this component is the focus owner 
until this component receives a FOCUS_GAINED event. If this request is denied 
because this component's top-level window cannot become the focused window, the 
request will be remembered and will be granted when the window is later focused 
by the user. 

This method returns a boolean value. If false is returned, the request is 
guaranteed to fail. If true is returned, the request will succeed unless it is 
vetoed, or an extraordinary event, such as disposal of the component's peer, 
occurs before the request can be granted by the native windowing system. Again, 
while a return value of true indicates that the request is likely to succeed, 
developers must never assume that this component is the focus owner until this 
component receives a FOCUS_GAINED event. 

This method cannot be used to set the focus owner to no component at all. Use 
KeyboardFocusManager.clearGlobalFocusOwner instead. 

Because the focus behavior of this method is platform-dependent, developers are 
strongly encouraged to use requestFocusInWindow when possible. 

Every effort will be made to ensure that FocusEvents generated as a result of 
this request will have the specified temporary value. However, because 
specifying an arbitrary temporary state may not be implementable on all native 
windowing systems, correct behavior for this method can be guaranteed only for 
lightweight Components. This method is not intended for general use, but exists 
instead as a hook for lightweight component libraries, such as Swing. 

    temporary - true if the focus change is temporary, such as when the window loses the focus; 
       for more information on temporary focus changes see the Focus 
       Specification 

    Returns: false if the focus change request is guaranteed to fail; true if it is likely 
             to succeed 
*java.awt.Component.requestFocusInWindow()*

public boolean requestFocusInWindow()

Requests that this Component get the input focus, if this Component's top-level 
ancestor is already the focused Window. This component must be displayable, 
visible, and focusable for the request to be granted. Every effort will be made 
to honor the request; however, in some cases it may be impossible to do so. 
Developers must never assume that this Component is the focus owner until this 
Component receives a FOCUS_GAINED event. 

This method returns a boolean value. If false is returned, the request is 
guaranteed to fail. If true is returned, the request will succeed unless it is 
vetoed, or an extraordinary event, such as disposal of the Component's peer, 
occurs before the request can be granted by the native windowing system. Again, 
while a return value of true indicates that the request is likely to succeed, 
developers must never assume that this Component is the focus owner until this 
Component receives a FOCUS_GAINED event. 

This method cannot be used to set the focus owner to no Component at all. Use 
KeyboardFocusManager.clearGlobalFocusOwner() instead. 

The focus behavior of this method can be implemented uniformly across 
platforms, and thus developers are strongly encouraged to use this method over 
requestFocus when possible. Code which relies on requestFocus may exhibit 
different focus behavior on different platforms. 


    Returns: false if the focus change request is guaranteed to fail; true if it is likely 
             to succeed 
*java.awt.Component.requestFocusInWindow(boolean)*

protected boolean requestFocusInWindow(boolean temporary)

Requests that this Component get the input focus, if this Component's top-level 
ancestor is already the focused Window. This component must be displayable, 
visible, and focusable for the request to be granted. Every effort will be made 
to honor the request; however, in some cases it may be impossible to do so. 
Developers must never assume that this component is the focus owner until this 
component receives a FOCUS_GAINED event. 

This method returns a boolean value. If false is returned, the request is 
guaranteed to fail. If true is returned, the request will succeed unless it is 
vetoed, or an extraordinary event, such as disposal of the component's peer, 
occurs before the request can be granted by the native windowing system. Again, 
while a return value of true indicates that the request is likely to succeed, 
developers must never assume that this component is the focus owner until this 
component receives a FOCUS_GAINED event. 

This method cannot be used to set the focus owner to no component at all. Use 
KeyboardFocusManager.clearGlobalFocusOwner instead. 

The focus behavior of this method can be implemented uniformly across 
platforms, and thus developers are strongly encouraged to use this method over 
requestFocus when possible. Code which relies on requestFocus may exhibit 
different focus behavior on different platforms. 

Every effort will be made to ensure that FocusEvents generated as a result of 
this request will have the specified temporary value. However, because 
specifying an arbitrary temporary state may not be implementable on all native 
windowing systems, correct behavior for this method can be guaranteed only for 
lightweight components. This method is not intended for general use, but exists 
instead as a hook for lightweight component libraries, such as Swing. 

    temporary - true if the focus change is temporary, such as when the window loses the focus; 
       for more information on temporary focus changes see the Focus 
       Specification 

    Returns: false if the focus change request is guaranteed to fail; true if it is likely 
             to succeed 
*java.awt.Component.reshape(int,int,int,int)*

public void reshape(
  int x,
  int y,
  int width,
  int height)




*java.awt.Component.resize(Dimension)*

public void resize(java.awt.Dimension d)




*java.awt.Component.resize(int,int)*

public void resize(
  int width,
  int height)




*java.awt.Component.setBackground(Color)*

public void setBackground(java.awt.Color c)

Sets the background color of this component. 

The background color affects each component differently and the parts of the 
component that are affected by the background color may differ between 
operating systems. 

    c - the color to become this component's color; if this parameter is null, then 
       this component will inherit the background color of its parent 

*java.awt.Component.setBounds(int,int,int,int)*

public void setBounds(
  int x,
  int y,
  int width,
  int height)

Moves and resizes this component. The new location of the top-left corner is 
specified by x and y, and the new size is specified by width and height. 

    x - the new x-coordinate of this component 
    y - the new y-coordinate of this component 
    width - the new width of this component 
    height - the new height of this component 

*java.awt.Component.setBounds(Rectangle)*

public void setBounds(java.awt.Rectangle r)

Moves and resizes this component to conform to the new bounding rectangle r. 
This component's new position is specified by r.x and r.y, and its new size is 
specified by r.width and r.height 

    r - the new bounding rectangle for this component 

*java.awt.Component.setComponentOrientation(ComponentOrientation)*

public void setComponentOrientation(java.awt.ComponentOrientation o)

Sets the language-sensitive orientation that is to be used to order the 
elements or text within this component. Language-sensitive LayoutManager and 
Component subclasses will use this property to determine how to lay out and 
draw components. 

At construction time, a component's orientation is set to 
ComponentOrientation.UNKNOWN, indicating that it has not been specified 
explicitly. The UNKNOWN orientation behaves the same as 
ComponentOrientation.LEFT_TO_RIGHT. 

To set the orientation of a single component, use this method. To set the 
orientation of an entire component hierarchy, use 
applyComponentOrientation(|java.awt.Component|) . 


*java.awt.Component.setCursor(Cursor)*

public void setCursor(java.awt.Cursor cursor)

Sets the cursor image to the specified cursor. This cursor image is displayed 
when the contains method for this component returns true for the current cursor 
location, and this Component is visible, displayable, and enabled. Setting the 
cursor of a Container causes that cursor to be displayed within all of the 
container's subcomponents, except for those that have a non-null cursor. 

    cursor - One of the constants defined by the Cursor class; if this parameter is null 
       then this component will inherit the cursor of its parent 

*java.awt.Component.setDropTarget(DropTarget)*

public synchronized void setDropTarget(java.awt.dnd.DropTarget dt)

Associate a DropTarget with this component. The Component will receive drops 
only if it is enabled. 

    dt - The DropTarget 

*java.awt.Component.setEnabled(boolean)*

public void setEnabled(boolean b)

Enables or disables this component, depending on the value of the parameter b. 
An enabled component can respond to user input and generate events. Components 
are enabled initially by default. 

Note: Disabling a lightweight component does not prevent it from receiving 
MouseEvents. 

    b - If true, this component is enabled; otherwise this component is disabled 

*java.awt.Component.setFocusable(boolean)*

public void setFocusable(boolean focusable)

Sets the focusable state of this Component to the specified value. This value 
overrides the Component's default focusability. 

    focusable - indicates whether this Component is focusable 

*java.awt.Component.setFocusTraversalKeys(int,Set)*

public void setFocusTraversalKeys(
  int id,
  java.util.Set keystrokes)

Sets the focus traversal keys for a given traversal operation for this 
Component. 

The default values for a Component's focus traversal keys are 
implementation-dependent. Sun recommends that all implementations for a 
particular native platform use the same default values. The recommendations for 
Windows and Unix are listed below. These recommendations are used in the Sun 
AWT implementations. 



Identifier Meaning Default 

KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS Normal forward keyboard traversal 
TAB on KEY_PRESSED, CTRL-TAB on KEY_PRESSED 

KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS Normal reverse keyboard traversal 
SHIFT-TAB on KEY_PRESSED, CTRL-SHIFT-TAB on KEY_PRESSED 

KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS Go up one focus traversal cycle 
none 



To disable a traversal key, use an empty Set; Collections.EMPTY_SET is 
recommended. 

Using the AWTKeyStroke API, client code can specify on which of two specific 
KeyEvents, KEY_PRESSED or KEY_RELEASED, the focus traversal operation will 
occur. Regardless of which KeyEvent is specified, however, all KeyEvents 
related to the focus traversal key, including the associated KEY_TYPED event, 
will be consumed, and will not be dispatched to any Component. It is a runtime 
error to specify a KEY_TYPED event as mapping to a focus traversal operation, 
or to map the same event to multiple default focus traversal operations. 

If a value of null is specified for the Set, this Component inherits the Set 
from its parent. If all ancestors of this Component have null specified for the 
Set, then the current KeyboardFocusManager's default Set is used. 

    id - one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, 
       KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, or 
       KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS 
    keystrokes - the Set of AWTKeyStroke for the specified operation 

*java.awt.Component.setFocusTraversalKeysEnabled(boolean)*

public void setFocusTraversalKeysEnabled(boolean focusTraversalKeysEnabled)

Sets whether focus traversal keys are enabled for this Component. Components 
for which focus traversal keys are disabled receive key events for focus 
traversal keys. Components for which focus traversal keys are enabled do not 
see these events; instead, the events are automatically converted to traversal 
operations. 

    focusTraversalKeysEnabled - whether focus traversal keys are enabled for this Component 

*java.awt.Component.setFont(Font)*

public void setFont(java.awt.Font f)

Sets the font of this component. 

    f - the font to become this component's font; if this parameter is null then this 
       component will inherit the font of its parent 

*java.awt.Component.setForeground(Color)*

public void setForeground(java.awt.Color c)

Sets the foreground color of this component. 

    c - the color to become this component's foreground color; if this parameter is 
       null then this component will inherit the foreground color of its parent 

*java.awt.Component.setIgnoreRepaint(boolean)*

public void setIgnoreRepaint(boolean ignoreRepaint)

Sets whether or not paint messages received from the operating system should be 
ignored. This does not affect paint events generated in software by the AWT, 
unless they are an immediate response to an OS-level paint message. 

This is useful, for example, if running under full-screen mode and better 
performance is desired, or if page-flipping is used as the buffer strategy. 


*java.awt.Component.setLocale(Locale)*

public void setLocale(java.util.Locale l)

Sets the locale of this component. This is a bound property. 

    l - the locale to become this component's locale 

*java.awt.Component.setLocation(int,int)*

public void setLocation(
  int x,
  int y)

Moves this component to a new location. The top-left corner of the new location 
is specified by the x and y parameters in the coordinate space of this 
component's parent. 

    x - the x-coordinate of the new location's top-left corner in the parent's 
       coordinate space 
    y - the y-coordinate of the new location's top-left corner in the parent's 
       coordinate space 

*java.awt.Component.setLocation(Point)*

public void setLocation(java.awt.Point p)

Moves this component to a new location. The top-left corner of the new location 
is specified by point p. Point p is given in the parent's coordinate space. 

    p - the point defining the top-left corner of the new location, given in the 
       coordinate space of this component's parent 

*java.awt.Component.setMaximumSize(Dimension)*

public void setMaximumSize(java.awt.Dimension maximumSize)

Sets the maximum size of this component to a constant value. Subsequent calls 
to getMaximumSize will always return this value. Setting the maximum size to 
null restores the default behavior. 

    maximumSize - a Dimension containing the desired maximum allowable size 

*java.awt.Component.setMinimumSize(Dimension)*

public void setMinimumSize(java.awt.Dimension minimumSize)

Sets the minimum size of this component to a constant value. Subsequent calls 
to getMinimumSize will always return this value. Setting the minimum size to 
null restores the default behavior. 

    minimumSize - the new minimum size of this component 

*java.awt.Component.setName(String)*

public void setName(java.lang.String name)

Sets the name of the component to the specified string. 

    name - the string that is to be this component's name 

*java.awt.Component.setPreferredSize(Dimension)*

public void setPreferredSize(java.awt.Dimension preferredSize)

Sets the preferred size of this component to a constant value. Subsequent calls 
to getPreferredSize will always return this value. Setting the preferred size 
to null restores the default behavior. 

    preferredSize - The new preferred size, or null 

*java.awt.Component.setSize(Dimension)*

public void setSize(java.awt.Dimension d)

Resizes this component so that it has width d.width and height d.height. 

    d - the dimension specifying the new size of this component 

*java.awt.Component.setSize(int,int)*

public void setSize(
  int width,
  int height)

Resizes this component so that it has width width and height height. 

    width - the new width of this component in pixels 
    height - the new height of this component in pixels 

*java.awt.Component.setVisible(boolean)*

public void setVisible(boolean b)

Shows or hides this component depending on the value of parameter b. 

    b - if true, shows this component; otherwise, hides this component 

*java.awt.Component.show()*

public void show()




*java.awt.Component.show(boolean)*

public void show(boolean b)




*java.awt.Component.size()*

public |java.awt.Dimension| size()




*java.awt.Component.toString()*

public |java.lang.String| toString()

Returns a string representation of this component and its values. 


    Returns: a string representation of this component 
*java.awt.Component.transferFocus()*

public void transferFocus()

Transfers the focus to the next component, as though this Component were the 
focus owner. 


*java.awt.Component.transferFocusBackward()*

public void transferFocusBackward()

Transfers the focus to the previous component, as though this Component were 
the focus owner. 


*java.awt.Component.transferFocusUpCycle()*

public void transferFocusUpCycle()

Transfers the focus up one focus traversal cycle. Typically, the focus owner is 
set to this Component's focus cycle root, and the current focus cycle root is 
set to the new focus owner's focus cycle root. If, however, this Component's 
focus cycle root is a Window, then the focus owner is set to the focus cycle 
root's default Component to focus, and the current focus cycle root is 
unchanged. 


*java.awt.Component.update(Graphics)*

public void update(java.awt.Graphics g)

Updates this component. 

If this component is not a lightweight component, the AWT calls the update 
method in response to a call to repaint. You can assume that the background is 
not cleared. 

The update method of Component calls this component's paint method to redraw 
this component. This method is commonly overridden by subclasses which need to 
do additional work in response to a call to repaint. Subclasses of Component 
that override this method should either call super.update(g), or call paint(g) 
directly from their update method. 

The origin of the graphics context, its (0,0) coordinate point, is the top-left 
corner of this component. The clipping region of the graphics context is the 
bounding rectangle of this component. 

Note: For more information on the paint mechanisms utilitized by AWT and Swing, 
including information on how to write the most efficient painting code, see 
Painting in AWT and Swing. 

    g - the specified context to use for updating 

*java.awt.Component.validate()*

public void validate()

Ensures that this component has a valid layout. This method is primarily 
intended to operate on instances of Container. 




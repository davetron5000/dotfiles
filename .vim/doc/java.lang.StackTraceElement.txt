*java.lang.StackTraceElement* *StackTraceElement* An element in a stack trace, a

public final class StackTraceElement
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.lang.StackTraceElement_Description|
|java.lang.StackTraceElement_Fields|
|java.lang.StackTraceElement_Constructors|
|java.lang.StackTraceElement_Methods|

================================================================================

*java.lang.StackTraceElement_Constructors*
|java.lang.StackTraceElement(String,String,String,int)|Creates a stack trace el

*java.lang.StackTraceElement_Methods*
|java.lang.StackTraceElement.equals(Object)|Returns true if the specified objec
|java.lang.StackTraceElement.getClassName()|Returns the fully qualified name of
|java.lang.StackTraceElement.getFileName()|Returns the name of the source file 
|java.lang.StackTraceElement.getLineNumber()|Returns the line number of the sou
|java.lang.StackTraceElement.getMethodName()|Returns the name of the method con
|java.lang.StackTraceElement.hashCode()|Returns a hash code value for this stac
|java.lang.StackTraceElement.isNativeMethod()|Returns true if the method contai
|java.lang.StackTraceElement.toString()|Returns a string representation of this

*java.lang.StackTraceElement_Description*

An element in a stack trace, as returned by (|java.lang.Throwable|) . Each 
element represents a single stack frame. All stack frames except for the one at 
the top of the stack represent a method invocation. The frame at the top of the 
stack represents the execution point at which the stack trace was generated. 
Typically, this is the point at which the throwable corresponding to the stack 
trace was created. 


*java.lang.StackTraceElement(String,String,String,int)*

public StackTraceElement(
  java.lang.String declaringClass,
  java.lang.String methodName,
  java.lang.String fileName,
  int lineNumber)

Creates a stack trace element representing the specified execution point. 

    declaringClass - the fully qualified name of the class containing the execution point 
       represented by the stack trace element 
    methodName - the name of the method containing the execution point represented by the stack 
       trace element 
    fileName - the name of the file containing the execution point represented by the stack 
       trace element, or null if this information is unavailable 
    lineNumber - the line number of the source line containing the execution point represented 
       by this stack trace element, or a negative number if this information is 
       unavailable. A value of -2 indicates that the method containing the 
       execution point is a native method 

*java.lang.StackTraceElement.equals(Object)*

public boolean equals(java.lang.Object obj)

Returns true if the specified object is another StackTraceElement instance 
representing the same execution point as this instance. Two stack trace 
elements a and b are equal if and only if: 

equals(a.getFileName(), b.getFileName()) a.getLineNumber() == 
b.getLineNumber()) equals(a.getClassName(), b.getClassName()) 
equals(a.getMethodName(), b.getMethodName()) 

where equals is defined as: 

static boolean equals(Object a, Object b) { return a==b || (a != null 
a.equals(b)); } 

    obj - the object to be compared with this stack trace element. 

    Returns: true if the specified object is another StackTraceElement instance representing 
             the same execution point as this instance. 
*java.lang.StackTraceElement.getClassName()*

public |java.lang.String| getClassName()

Returns the fully qualified name of the class containing the execution point 
represented by this stack trace element. 


    Returns: the fully qualified name of the Class containing the execution point 
             represented by this stack trace element. 
*java.lang.StackTraceElement.getFileName()*

public |java.lang.String| getFileName()

Returns the name of the source file containing the execution point represented 
by this stack trace element. Generally, this corresponds to the SourceFile 
attribute of the relevant class file (as per The Java Virtual Machine 
Specification, Section 4.7.7). In some systems, the name may refer to some 
source code unit other than a file, such as an entry in source repository. 


    Returns: the name of the file containing the execution point represented by this stack 
             trace element, or null if this information is unavailable. 
*java.lang.StackTraceElement.getLineNumber()*

public int getLineNumber()

Returns the line number of the source line containing the execution point 
represented by this stack trace element. Generally, this is derived from the 
LineNumberTable attribute of the relevant class file (as per The Java Virtual 
Machine Specification, Section 4.7.8). 


    Returns: the line number of the source line containing the execution point represented 
             by this stack trace element, or a negative number if this 
             information is unavailable. 
*java.lang.StackTraceElement.getMethodName()*

public |java.lang.String| getMethodName()

Returns the name of the method containing the execution point represented by 
this stack trace element. If the execution point is contained in an instance or 
class initializer, this method will return the appropriate special method name, 
<init> or <clinit>, as per Section 3.9 of The Java Virtual Machine 
Specification. 


    Returns: the name of the method containing the execution point represented by this stack 
             trace element. 
*java.lang.StackTraceElement.hashCode()*

public int hashCode()

Returns a hash code value for this stack trace element. 


*java.lang.StackTraceElement.isNativeMethod()*

public boolean isNativeMethod()

Returns true if the method containing the execution point represented by this 
stack trace element is a native method. 


    Returns: true if the method containing the execution point represented by this stack 
             trace element is a native method. 
*java.lang.StackTraceElement.toString()*

public |java.lang.String| toString()

Returns a string representation of this stack trace element. The format of this 
string depends on the implementation, but the following examples may be 
regarded as typical: 

"MyClass.mash(MyClass.java:9)" - Here, "MyClass" is the fully-qualified name of 
the class containing the execution point represented by this stack trace 
element, "mash" is the name of the method containing the execution point, 
"MyClass.java" is the source file containing the execution point, and "9" is 
the line number of the source line containing the execution point. 

"MyClass.mash(MyClass.java)" - As above, but the line number is unavailable. 

"MyClass.mash(Unknown Source)" - As above, but neither the file name nor the 
line number are available. 

"MyClass.mash(Native Method)" - As above, but neither the file name nor the 
line number are available, and the method containing the execution point is 
known to be a native method. 




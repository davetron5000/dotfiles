*java.lang.reflect.InvocationHandler* *InvocationHandler* InvocationHandler is t

public interface interface InvocationHandler


|java.lang.reflect.InvocationHandler_Description|
|java.lang.reflect.InvocationHandler_Fields|
|java.lang.reflect.InvocationHandler_Constructors|
|java.lang.reflect.InvocationHandler_Methods|

================================================================================

*java.lang.reflect.InvocationHandler_Methods*
|java.lang.reflect.InvocationHandler.invoke(Object,Method,Object[])|Processes a

*java.lang.reflect.InvocationHandler_Description*

InvocationHandler is the interface implemented by the invocation handler of a 
proxy instance. 

Each proxy instance has an associated invocation handler. When a method is 
invoked on a proxy instance, the method invocation is encoded and dispatched to 
the invoke method of its invocation handler. 


*java.lang.reflect.InvocationHandler.invoke(Object,Method,Object[])*

public |java.lang.Object| invoke(
  java.lang.Object proxy,
  java.lang.reflect.Method method,
  java.lang.Object[] args)
  throws |java.lang.Throwable|
         
Processes a method invocation on a proxy instance and returns the result. This 
method will be invoked on an invocation handler when a method is invoked on a 
proxy instance that it is associated with. 

    proxy - the proxy instance that the method was invoked on 
    method - the Method instance corresponding to the interface method invoked on the proxy 
       instance. The declaring class of the Method object will be the interface 
       that the method was declared in, which may be a superinterface of the 
       proxy interface that the proxy class inherits the method through. 
    args - an array of objects containing the values of the arguments passed in the method 
       invocation on the proxy instance, or null if interface method takes no 
       arguments. Arguments of primitive types are wrapped in instances of the 
       appropriate primitive wrapper class, such as java.lang.Integer or 
       java.lang.Boolean. 

    Returns: the value to return from the method invocation on the proxy instance. If the 
             declared return type of the interface method is a primitive type, 
             then the value returned by this method must be an instance of the 
             corresponding primitive wrapper class; otherwise, it must be a 
             type assignable to the declared return type. If the value returned 
             by this method is null and the interface method's return type is 
             primitive, then a NullPointerException will be thrown by the 
             method invocation on the proxy instance. If the value returned by 
             this method is otherwise not compatible with the interface 
             method's declared return type as described above, a 
             ClassCastException will be thrown by the method invocation on the 
             proxy instance. 


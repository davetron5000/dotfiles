*javax.swing.event.EventListenerList* *EventListenerList* A class that holds a l

public class EventListenerList
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|javax.swing.event.EventListenerList_Description|
|javax.swing.event.EventListenerList_Fields|
|javax.swing.event.EventListenerList_Constructors|
|javax.swing.event.EventListenerList_Methods|

================================================================================

*javax.swing.event.EventListenerList_Fields*
|java.lang.Object[]_javax.swing.event.EventListenerList.listenerList|

*javax.swing.event.EventListenerList_Constructors*
|javax.swing.event.EventListenerList()|

*javax.swing.event.EventListenerList_Methods*
|javax.swing.event.EventListenerList.add(Class,T)|Adds the listener as a listen
|javax.swing.event.EventListenerList.getListenerCount()|Returns the total numbe
|javax.swing.event.EventListenerList.getListenerCount(Class)|Returns the total 
|javax.swing.event.EventListenerList.getListenerList()|Passes back the event li
|javax.swing.event.EventListenerList.getListeners(Class)|Return an array of all
|javax.swing.event.EventListenerList.remove(Class,T)|Removes the listener as a 
|javax.swing.event.EventListenerList.toString()|Returns a string representation

*javax.swing.event.EventListenerList_Description*

A class that holds a list of EventListeners. A single instance can be used to 
hold all listeners (of all types) for the instance using the list. It is the 
responsiblity of the class using the EventListenerList to provide type-safe API 
(preferably conforming to the JavaBeans spec) and methods which dispatch event 
notification methods to appropriate Event Listeners on the list. 

The main benefits that this class provides are that it is relatively cheap in 
the case of no listeners, and it provides serialization for event-listener 
lists in a single place, as well as a degree of MT safety (when used 
correctly). 

Usage example: Say one is defining a class that sends out FooEvents, and one 
wants to allow users of the class to register FooListeners and receive 
notification when FooEvents occur. The following should be added to the class 
definition: 

EventListenerList listenerList = new EventListenerList(); FooEvent fooEvent = 
null; 

public void addFooListener(FooListener l) { listenerList.add(FooListener.class, 
l); } 

public void removeFooListener(FooListener l) { 
listenerList.remove(FooListener.class, l); } 

// Notify all listeners that have registered interest for // notification on 
this event type. The event instance // is lazily created using the parameters 
passed into // the fire method. 

protected void fireFooXXX() { // Guaranteed to return a non-null array Object[] 
listeners = listenerList.getListenerList(); // Process the listeners last to 
first, notifying // those that are interested in this event for (int i = 
listeners.length-2; i>=0; i-=2) { if (listeners[i]==FooListener.class) { // 
Lazily create the event: if (fooEvent == null) fooEvent = new FooEvent(this); 
((FooListener)listeners[i+1]).fooXXX(fooEvent); } } } 

foo should be changed to the appropriate name, and fireFooXxx to the 
appropriate method name. One fire method should exist for each notification 
method in the FooListener interface. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.Object[]_javax.swing.event.EventListenerList.listenerList*

A class that holds a list of EventListeners. A single instance can be used to 
hold all listeners (of all types) for the instance using the list. It is the 
responsiblity of the class using the EventListenerList to provide type-safe API 
(preferably conforming to the JavaBeans spec) and methods which dispatch event 
notification methods to appropriate Event Listeners on the list. 

The main benefits that this class provides are that it is relatively cheap in 
the case of no listeners, and it provides serialization for event-listener 
lists in a single place, as well as a degree of MT safety (when used 
correctly). 

Usage example: Say one is defining a class that sends out FooEvents, and one 
wants to allow users of the class to register FooListeners and receive 
notification when FooEvents occur. The following should be added to the class 
definition: 

EventListenerList listenerList = new EventListenerList(); FooEvent fooEvent = 
null; 

public void addFooListener(FooListener l) { listenerList.add(FooListener.class, 
l); } 

public void removeFooListener(FooListener l) { 
listenerList.remove(FooListener.class, l); } 

// Notify all listeners that have registered interest for // notification on 
this event type. The event instance // is lazily created using the parameters 
passed into // the fire method. 

protected void fireFooXXX() { // Guaranteed to return a non-null array Object[] 
listeners = listenerList.getListenerList(); // Process the listeners last to 
first, notifying // those that are interested in this event for (int i = 
listeners.length-2; i>=0; i-=2) { if (listeners[i]==FooListener.class) { // 
Lazily create the event: if (fooEvent == null) fooEvent = new FooEvent(this); 
((FooListener)listeners[i+1]).fooXXX(fooEvent); } } } 

foo should be changed to the appropriate name, and fireFooXxx to the 
appropriate method name. One fire method should exist for each notification 
method in the FooListener interface. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.event.EventListenerList()*

public EventListenerList()




*javax.swing.event.EventListenerList.add(Class,T)*

public synchronized void add(
  java.lang.Class t,
  java.util.EventListener l)

Adds the listener as a listener of the specified type. 

    t - the type of the listener to be added 
    l - the listener to be added 

*javax.swing.event.EventListenerList.getListenerCount()*

public int getListenerCount()

Returns the total number of listeners for this listener list. 


*javax.swing.event.EventListenerList.getListenerCount(Class)*

public int getListenerCount(java.lang.Class t)

Returns the total number of listeners of the supplied type for this listener 
list. 


*javax.swing.event.EventListenerList.getListenerList()*

public |java.lang.Object| getListenerList()

Passes back the event listener list as an array of ListenerType-listener pairs. 
Note that for performance reasons, this implementation passes back the actual 
data structure in which the listener data is stored internally! This method is 
guaranteed to pass back a non-null array, so that no null-checking is required 
in fire methods. A zero-length array of Object should be returned if there are 
currently no listeners. 

WARNING!!! Absolutely NO modification of the data contained in this array 
should be made -- if any such manipulation is necessary, it should be done on a 
copy of the array returned rather than the array itself. 


*javax.swing.event.EventListenerList.getListeners(Class)*

public |java.util.EventListener| getListeners(java.lang.Class t)

Return an array of all the listeners of the given type. 


    Returns: all of the listeners of the specified type. 
*javax.swing.event.EventListenerList.remove(Class,T)*

public synchronized void remove(
  java.lang.Class t,
  java.util.EventListener l)

Removes the listener as a listener of the specified type. 

    t - the type of the listener to be removed 
    l - the listener to be removed 

*javax.swing.event.EventListenerList.toString()*

public |java.lang.String| toString()

Returns a string representation of the EventListenerList. 




*javax.sql.RowSet* *RowSet* The interface that adds support to the JDBC API for the
 JavaBeansTM component model.

public interface interface RowSet

  implements |java.sql.ResultSet|

|javax.sql.RowSet_Description|
|javax.sql.RowSet_Fields|
|javax.sql.RowSet_Constructors|
|javax.sql.RowSet_Methods|

====================================================================================================================================================================================

*javax.sql.RowSet_Methods*
|javax.sql.RowSet.addRowSetListener(RowSetListener)|Registers the given listener so that it will be notified of events  that occur on this RowSet object.
|javax.sql.RowSet.clearParameters()|Clears the parameters set for this RowSet object's command.
|javax.sql.RowSet.execute()|Fills this RowSet object with data.
|javax.sql.RowSet.getCommand()|Retrieves this RowSet object's command property.
|javax.sql.RowSet.getDataSourceName()|Retrieves the logical name that identifies the data source for this  RowSet object.
|javax.sql.RowSet.getEscapeProcessing()|Retrieves whether escape processing is enabled for this  RowSet object.
|javax.sql.RowSet.getMaxFieldSize()|Retrieves the maximum number of bytes that may be returned   for certain column values.
|javax.sql.RowSet.getMaxRows()|Retrieves the maximum number of rows that this RowSet  object can contain.
|javax.sql.RowSet.getPassword()|Retrieves the password used to create a database connection.
|javax.sql.RowSet.getQueryTimeout()|Retrieves the maximum number of seconds the driver will wait for  a statement to execute.
|javax.sql.RowSet.getTransactionIsolation()|Retrieves the transaction isolation level set for this  RowSet object.
|javax.sql.RowSet.getTypeMap()|Retrieves the Map object associated with this  RowSet object, which specifies the custom mapping  of SQL user-defined types, if any.
|javax.sql.RowSet.getUrl()|Retrieves the url property this RowSet object will use to  create a connection if it uses the DriverManager  instead of a DataSource object to establish
|javax.sql.RowSet.getUsername()|Retrieves the username used to create a database connection for this  RowSet object.
|javax.sql.RowSet.isReadOnly()|Retrieves whether this RowSet object is read-only.
|javax.sql.RowSet.removeRowSetListener(RowSetListener)|Removes the specified listener from the list of components that will be  notified when an event occurs on this RowSet object
|javax.sql.RowSet.setArray(int,Array)|Sets the designated parameter in this RowSet object's command  with the given  Array value.
|javax.sql.RowSet.setAsciiStream(int,InputStream,int)|Sets the designated parameter in this RowSet object's command  to the given java.io.InputStream value.
|javax.sql.RowSet.setBigDecimal(int,BigDecimal)|Sets the designated parameter in this RowSet object's command  to the given java.math.BigDeciaml value.
|javax.sql.RowSet.setBinaryStream(int,InputStream,int)|Sets the designated parameter in this RowSet object's command  to the given java.io.InputStream value.
|javax.sql.RowSet.setBlob(int,Blob)|Sets the designated parameter in this RowSet object's command  with the given  Blob value.
|javax.sql.RowSet.setBoolean(int,boolean)|Sets the designated parameter in this RowSet object's command  to the given Java boolean value.
|javax.sql.RowSet.setByte(int,byte)|Sets the designated parameter in this RowSet object's command  to the given Java byte value.
|javax.sql.RowSet.setBytes(int,byte[])|Sets the designated parameter in this RowSet object's command  to the given Java array of byte values.
|javax.sql.RowSet.setCharacterStream(int,Reader,int)|Sets the designated parameter in this RowSet object's command  to the given java.io.Reader value.
|javax.sql.RowSet.setClob(int,Clob)|Sets the designated parameter in this RowSet object's command  with the given  Clob value.
|javax.sql.RowSet.setCommand(String)|Sets this RowSet object's command property to the given  SQL query.
|javax.sql.RowSet.setConcurrency(int)|Sets the concurrency of this RowSet object to the given  concurrency level.
|javax.sql.RowSet.setDataSourceName(String)|Sets the data source name property for this RowSet object to the   given String.
|javax.sql.RowSet.setDate(int,Date)|Sets the designated parameter in this RowSet object's command  to the given java.sql.Date value.
|javax.sql.RowSet.setDate(int,Date,Calendar)|Sets the designated parameter in this RowSet object's command  with the given  java.sql.Date value.
|javax.sql.RowSet.setDouble(int,double)|Sets the designated parameter in this RowSet object's command  to the given Java double value.
|javax.sql.RowSet.setEscapeProcessing(boolean)|Sets escape processing for this RowSet object on or  off.
|javax.sql.RowSet.setFloat(int,float)|Sets the designated parameter in this RowSet object's command  to the given Java float value.
|javax.sql.RowSet.setInt(int,int)|Sets the designated parameter in this RowSet object's command  to the given Java int value.
|javax.sql.RowSet.setLong(int,long)|Sets the designated parameter in this RowSet object's command  to the given Java long value.
|javax.sql.RowSet.setMaxFieldSize(int)|Sets the maximum number of bytes that can be returned for a column  value to the given number of bytes.
|javax.sql.RowSet.setMaxRows(int)|Sets the maximum number of rows that this RowSet  object can contain to the specified number.
|javax.sql.RowSet.setNull(int,int)|Sets the designated parameter in this RowSet object's SQL  command to SQL NULL.
|javax.sql.RowSet.setNull(int,int,String)|Sets the designated parameter in this RowSet object's SQL  command to SQL NULL.
|javax.sql.RowSet.setObject(int,Object)|Sets the designated parameter in this RowSet object's command  with a Java Object.
|javax.sql.RowSet.setObject(int,Object,int)|Sets the designated parameter in this RowSet object's command  with a Java Object.
|javax.sql.RowSet.setObject(int,Object,int,int)|Sets the designated parameter in this RowSet object's command  with the given Java Object.
|javax.sql.RowSet.setPassword(String)|Sets the database password for this RowSet object to  the given String.
|javax.sql.RowSet.setQueryTimeout(int)|Sets the maximum time the driver will wait for  a statement to execute to the given number of seconds.
|javax.sql.RowSet.setReadOnly(boolean)|Sets whether this RowSet object is read-only to the  given boolean.
|javax.sql.RowSet.setRef(int,Ref)|Sets the designated parameter in this RowSet object's command  with the given  Ref value.
|javax.sql.RowSet.setShort(int,short)|Sets the designated parameter in this RowSet object's command  to the given Java short value.
|javax.sql.RowSet.setString(int,String)|Sets the designated parameter in this RowSet object's command  to the given Java String value.
|javax.sql.RowSet.setTime(int,Time)|Sets the designated parameter in this RowSet object's command  to the given java.sql.Time value.
|javax.sql.RowSet.setTime(int,Time,Calendar)|Sets the designated parameter in this RowSet object's command  with the given  java.sql.Time value.
|javax.sql.RowSet.setTimestamp(int,Timestamp)|Sets the designated parameter in this RowSet object's command  to the given java.sql.Timestamp value.
|javax.sql.RowSet.setTimestamp(int,Timestamp,Calendar)|Sets the designated parameter in this RowSet object's command  with the given  java.sql.Timestamp value.
|javax.sql.RowSet.setTransactionIsolation(int)|Sets the transaction isolation level for this RowSet obejct.
|javax.sql.RowSet.setType(int)|Sets the type of this RowSet object to the given type.
|javax.sql.RowSet.setTypeMap(Map<String,Class<?>>)|Installs the given java.util.Map object as the default   type map for this RowSet object.
|javax.sql.RowSet.setUrl(String)|Sets the URL this RowSet object will use when it uses the  DriverManager to create a connection.
|javax.sql.RowSet.setUsername(String)|Sets the username property for this RowSet object to the   given String.

*javax.sql.RowSet_Description*

The interface that adds support to the JDBC API for the JavaBeansTM component model. A rowset, which can be used as a JavaBeans component in a visual Bean development environment, 
can be created and configured at design time and executed at run time. 

The RowSet interface provides a set of JavaBeans properties that allow a RowSet instance to be configured to connect to a JDBC data source and read some data from the data source. 
A group of setter methods (setInt, setBytes, setString, and so on) provide a way to pass input parameters to a rowset's command property. This command is the SQL query the rowset 
uses when it gets its data from a relational database, which is generally the case. 

The RowSet interface supports JavaBeans events, allowing other components in an application to be notified when an event occurs on a rowset, such as a change in its value. 

The RowSet interface is unique in that it is intended to be implemented using the rest of the JDBC API. In other words, a RowSet implementation is a layer of software that 
executes "on top" of a JDBC driver. Implementations of the RowSet interface can be provided by anyone, including JDBC driver vendors who want to provide a RowSet implementation as 
part of their JDBC products. 

A RowSet object may make a connection with a data source and maintain that connection throughout its life cycle, in which case it is called a connected rowset. A rowset may also 
make a connection with a data source, get data from it, and then close the connection. Such a rowset is called a disconnected rowset. A disconnected rowset may make changes to its 
data while it is disconnected and then send the changes back to the original source of the data, but it must reestablish a connection to do so. 

A disconnected rowset may have a reader (a RowSetReader object) and a writer (a RowSetWriter object) associated with it. The reader may be implemented in many different ways to 
populate a rowset with data, including getting data from a non-relational data source. The writer can also be implemented in many different ways to propagate changes made to the 
rowset's data back to the underlying data source. 

Rowsets are easy to use. The RowSet interface extends the standard java.sql.ResultSet interface. The RowSetMetaData interface extends the java.sql.ResultSetMetaData interface. 
Thus, developers familiar with the JDBC API will have to learn a minimal number of new APIs to use rowsets. In addition, third-party software tools that work with JDBC ResultSet 
objects will also easily be made to work with rowsets. 



*javax.sql.RowSet.addRowSetListener(RowSetListener)*

public void addRowSetListener(javax.sql.RowSetListener listener)

Registers the given listener so that it will be notified of events that occur on this RowSet object. 


    listener - a component that has implemented the RowSetListener interface and wants to be notified when events occur on this RowSet object 

*javax.sql.RowSet.clearParameters()*

public void clearParameters()
  throws |java.sql.SQLException|
         
Clears the parameters set for this RowSet object's command. In general, parameter values remain in force for repeated use of a RowSet object. Setting a parameter value 
automatically clears its previous value. However, in some cases it is useful to immediately release the resources used by the current parameter values, which can be done by 
calling the method clearParameters. 



*javax.sql.RowSet.execute()*

public void execute()
  throws |java.sql.SQLException|
         
Fills this RowSet object with data. 

The execute method may use the following properties to create a connection for reading data: url, data source name, user name, password, transaction isolation, and type map. 

The execute method may use the following properties to create a statement to execute a command: command, read only, maximum field size, maximum rows, escape processing, and query 
timeout. 

If the required properties have not been set, an exception is thrown. If this method is successful, the current contents of the rowset are discarded and the rowset's metadata is 
also (re)set. If there are outstanding updates, they are ignored. 

If this RowSet object does not maintain a continuous connection with its source of data, it may use a reader (a RowSetReader object) to fill itself with data. In this case, a 
reader will have been registered with this RowSet object, and the method execute will call on the reader's readData method as part of its implementation. 



*javax.sql.RowSet.getCommand()*

public |java.lang.String| getCommand()

Retrieves this RowSet object's command property. 

The command property contains a command string, which must be an SQL query, that can be executed to fill the rowset with data. The default value is null. 



    Returns: the command string; may be null 

*javax.sql.RowSet.getDataSourceName()*

public |java.lang.String| getDataSourceName()

Retrieves the logical name that identifies the data source for this RowSet object. Users should set either the url property or the data source name property. The rowset will use 
the property that was set more recently to get a connection. 



    Returns: a data source name 

*javax.sql.RowSet.getEscapeProcessing()*

public boolean getEscapeProcessing()
  throws |java.sql.SQLException|
         
Retrieves whether escape processing is enabled for this RowSet object. If escape scanning is enabled, which is the default, the driver will do escape substitution before sending 
an SQL statement to the database. 



    Returns: true if escape processing is enabled; false if it is disabled 

*javax.sql.RowSet.getMaxFieldSize()*

public int getMaxFieldSize()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of bytes that may be returned for certain column values. This limit applies only to BINARY, VARBINARY, LONGVARBINARYBINARY, CHAR, VARCHAR, and 
LONGVARCHAR columns. If the limit is exceeded, the excess data is silently discarded. 



    Returns: the current maximum column size limit; zero means that there is no limit 

*javax.sql.RowSet.getMaxRows()*

public int getMaxRows()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of rows that this RowSet object can contain. If the limit is exceeded, the excess rows are silently dropped. 



    Returns: the current maximum number of rows that this RowSet object can contain; zero means unlimited 

*javax.sql.RowSet.getPassword()*

public |java.lang.String| getPassword()

Retrieves the password used to create a database connection. The password property is set at run time before calling the method execute. It is not usually part of the serialized 
state of a RowSet object. 



    Returns: the password for making a database connection 

*javax.sql.RowSet.getQueryTimeout()*

public int getQueryTimeout()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of seconds the driver will wait for a statement to execute. If this limit is exceeded, an SQLException is thrown. 



    Returns: the current query timeout limit in seconds; zero means unlimited 

*javax.sql.RowSet.getTransactionIsolation()*

public int getTransactionIsolation()

Retrieves the transaction isolation level set for this RowSet object. 



    Returns: the transaction isolation level; one of Connection.TRANSACTION_READ_UNCOMMITTED, Connection.TRANSACTION_READ_COMMITTED, Connection.TRANSACTION_REPEATABLE_READ, or 
             Connection.TRANSACTION_SERIALIZABLE 

*javax.sql.RowSet.getTypeMap()*

public |java.util.Map|<String,Class<?>> getTypeMap()
  throws |java.sql.SQLException|
         
Retrieves the Map object associated with this RowSet object, which specifies the custom mapping of SQL user-defined types, if any. The default is for the type map to be empty. 



    Returns: a java.util.Map object containing the names of SQL user-defined types and the Java classes to which they are to be mapped 

*javax.sql.RowSet.getUrl()*

public |java.lang.String| getUrl()
  throws |java.sql.SQLException|
         
Retrieves the url property this RowSet object will use to create a connection if it uses the DriverManager instead of a DataSource object to establish the connection. The default 
value is null. 



    Returns: 

*javax.sql.RowSet.getUsername()*

public |java.lang.String| getUsername()

Retrieves the username used to create a database connection for this RowSet object. The username property is set at run time before calling the method execute. It is not usually 
part of the serialized state of a RowSet object. 



    Returns: the username property 

*javax.sql.RowSet.isReadOnly()*

public boolean isReadOnly()

Retrieves whether this RowSet object is read-only. If updates are possible, the default is for a rowset to be updatable. 

Attempts to update a read-only rowset will result in an SQLException being thrown. 



    Returns: true if this RowSet object is read-only; false if it is updatable 

*javax.sql.RowSet.removeRowSetListener(RowSetListener)*

public void removeRowSetListener(javax.sql.RowSetListener listener)

Removes the specified listener from the list of components that will be notified when an event occurs on this RowSet object. 


    listener - a component that has been registered as a listener for this RowSet object 

*javax.sql.RowSet.setArray(int,Array)*

public void setArray(
  int i,
  java.sql.Array x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command with the given Array value. The driver will convert this to the ARRAY value that the Array object represents before 
sending it to the database. 


    i - the first parameter is 1, the second is 2, ... 
    x - an object representing an SQL array 

*javax.sql.RowSet.setAsciiStream(int,InputStream,int)*

public void setAsciiStream(
  int parameterIndex,
  java.io.InputStream x,
  int length)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command to the given java.io.InputStream value. It may be more practical to send a very large ASCII value via a 
java.io.InputStream rather than as a LONGVARCHAR parameter. The driver will read the data from the stream as needed until it reaches end-of-file. 

Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the Java input stream that contains the ASCII parameter value 
    length - the number of bytes in the stream 

*javax.sql.RowSet.setBigDecimal(int,BigDecimal)*

public void setBigDecimal(
  int parameterIndex,
  java.math.BigDecimal x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command to the given java.math.BigDeciaml value. The driver converts this to an SQL NUMERIC value before sending it to the 
database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*javax.sql.RowSet.setBinaryStream(int,InputStream,int)*

public void setBinaryStream(
  int parameterIndex,
  java.io.InputStream x,
  int length)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command to the given java.io.InputStream value. It may be more practical to send a very large binary value via a 
java.io.InputStream rather than as a LONGVARBINARY parameter. The driver will read the data from the stream as needed until it reaches end-of-file. 

Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the java input stream which contains the binary parameter value 
    length - the number of bytes in the stream 

*javax.sql.RowSet.setBlob(int,Blob)*

public void setBlob(
  int i,
  java.sql.Blob x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command with the given Blob value. The driver will convert this to the BLOB value that the Blob object represents before 
sending it to the database. 


    i - the first parameter is 1, the second is 2, ... 
    x - an object representing a BLOB 

*javax.sql.RowSet.setBoolean(int,boolean)*

public void setBoolean(
  int parameterIndex,
  boolean x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command to the given Java boolean value. The driver converts this to an SQL BIT value before sending it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*javax.sql.RowSet.setByte(int,byte)*

public void setByte(
  int parameterIndex,
  byte x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command to the given Java byte value. The driver converts this to an SQL TINYINT value before sending it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*javax.sql.RowSet.setBytes(int,byte[])*

public void setBytes(
  int parameterIndex,
  byte[] x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command to the given Java array of byte values. Before sending it to the database, the driver converts this to an SQL 
VARBINARY or LONGVARBINARY value, depending on the argument's size relative to the driver's limits on VARBINARY values. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*javax.sql.RowSet.setCharacterStream(int,Reader,int)*

public void setCharacterStream(
  int parameterIndex,
  java.io.Reader reader,
  int length)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command to the given java.io.Reader value. It may be more practical to send a very large UNICODE value via a java.io.Reader 
rather than as a LONGVARCHAR parameter. The driver will read the data from the stream as needed until it reaches end-of-file. 

Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    reader - the Reader object that contains the UNICODE data to be set 
    length - the number of characters in the stream 

*javax.sql.RowSet.setClob(int,Clob)*

public void setClob(
  int i,
  java.sql.Clob x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command with the given Clob value. The driver will convert this to the CLOB value that the Clob object represents before 
sending it to the database. 


    i - the first parameter is 1, the second is 2, ... 
    x - an object representing a CLOB 

*javax.sql.RowSet.setCommand(String)*

public void setCommand(java.lang.String cmd)
  throws |java.sql.SQLException|
         
Sets this RowSet object's command property to the given SQL query. 

This property is optional when a rowset gets its data from a data source that does not support commands, such as a spreadsheet. 


    cmd - the SQL query that will be used to get the data for this RowSet object; may be null 

*javax.sql.RowSet.setConcurrency(int)*

public void setConcurrency(int concurrency)
  throws |java.sql.SQLException|
         
Sets the concurrency of this RowSet object to the given concurrency level. This method is used to change the concurrency level of a rowset, which is by default 
ResultSet.CONCUR_READ_ONLY 


    concurrency - one of the ResultSet constants specifying a concurrency level: ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE 

*javax.sql.RowSet.setDataSourceName(String)*

public void setDataSourceName(java.lang.String name)
  throws |java.sql.SQLException|
         
Sets the data source name property for this RowSet object to the given String. 

The value of the data source name property can be used to do a lookup of a DataSource object that has been registered with a naming service. After being retrieved, the DataSource 
object can be used to create a connection to the data source that it represents. 


    name - the logical name of the data source for this RowSet object 

*javax.sql.RowSet.setDate(int,Date)*

public void setDate(
  int parameterIndex,
  java.sql.Date x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command to the given java.sql.Date value. The driver converts this to an SQL DATE value before sending it to the database, 
using the default java.util.Calendar to calculate the date. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*javax.sql.RowSet.setDate(int,Date,Calendar)*

public void setDate(
  int parameterIndex,
  java.sql.Date x,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command with the given java.sql.Date value. The driver will convert this to an SQL DATE value, using the given 
java.util.Calendar object to calculate the date. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 
    cal - the java.util.Calendar object to use for calculating the date 

*javax.sql.RowSet.setDouble(int,double)*

public void setDouble(
  int parameterIndex,
  double x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command to the given Java double value. The driver converts this to an SQL DOUBLE value before sending it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*javax.sql.RowSet.setEscapeProcessing(boolean)*

public void setEscapeProcessing(boolean enable)
  throws |java.sql.SQLException|
         
Sets escape processing for this RowSet object on or off. If escape scanning is on (the default), the driver will do escape substitution before sending an SQL statement to the 
database. 


    enable - true to enable escape processing; false to disable it 

*javax.sql.RowSet.setFloat(int,float)*

public void setFloat(
  int parameterIndex,
  float x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command to the given Java float value. The driver converts this to an SQL REAL value before sending it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*javax.sql.RowSet.setInt(int,int)*

public void setInt(
  int parameterIndex,
  int x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command to the given Java int value. The driver converts this to an SQL INTEGER value before sending it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*javax.sql.RowSet.setLong(int,long)*

public void setLong(
  int parameterIndex,
  long x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command to the given Java long value. The driver converts this to an SQL BIGINT value before sending it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*javax.sql.RowSet.setMaxFieldSize(int)*

public void setMaxFieldSize(int max)
  throws |java.sql.SQLException|
         
Sets the maximum number of bytes that can be returned for a column value to the given number of bytes. This limit applies only to BINARY, VARBINARY, LONGVARBINARYBINARY, CHAR, 
VARCHAR, and LONGVARCHAR columns. If the limit is exceeded, the excess data is silently discarded. For maximum portability, use values greater than 256. 


    max - the new max column size limit in bytes; zero means unlimited 

*javax.sql.RowSet.setMaxRows(int)*

public void setMaxRows(int max)
  throws |java.sql.SQLException|
         
Sets the maximum number of rows that this RowSet object can contain to the specified number. If the limit is exceeded, the excess rows are silently dropped. 


    max - the new maximum number of rows; zero means unlimited 

*javax.sql.RowSet.setNull(int,int)*

public void setNull(
  int parameterIndex,
  int sqlType)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's SQL command to SQL NULL. 

Note: You must specify the parameter's SQL type. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    sqlType - a SQL type code defined by java.sql.Types 

*javax.sql.RowSet.setNull(int,int,String)*

public void setNull(
  int paramIndex,
  int sqlType,
  java.lang.String typeName)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's SQL command to SQL NULL. This version of the method setNull should be used for SQL user-defined types (UDTs) and REF type 
parameters. Examples of UDTs include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. 

Note: To be portable, applications must give the SQL type code and the fully qualified SQL type name when specifying a NULL UDT or REF parameter. In the case of a UDT, the name is 
the type name of the parameter itself. For a REF parameter, the name is the type name of the referenced type. If a JDBC driver does not need the type code or type name 
information, it may ignore it. 

Although it is intended for UDT and REF parameters, this method may be used to set a null parameter of any JDBC type. If the parameter does not have a user-defined or REF type, 
the typeName parameter is ignored. 


    paramIndex - the first parameter is 1, the second is 2, ... 
    sqlType - a value from java.sql.Types 
    typeName - the fully qualified name of an SQL UDT or the type name of the SQL structured type being referenced by a REF type; ignored if the parameter is not a UDT or REF type 

*javax.sql.RowSet.setObject(int,Object)*

public void setObject(
  int parameterIndex,
  java.lang.Object x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command with a Java Object. For integral values, the java.lang equivalent objects should be used. 

The JDBC specification provides a standard mapping from Java Object types to SQL types. The driver will convert the given Java object to its standard SQL mapping before sending it 
to the database. 

Note that this method may be used to pass datatabase-specific abstract data types by using a driver-specific Java type. 

If the object is of a class implementing SQLData, the rowset should call the method SQLData.writeSQL to write the object to an SQLOutput data stream. If the object is an instance 
of a class implementing the Ref, Struct, Array, Blob, or Clob interfaces, the driver uses the default mapping to the corresponding SQL type. 

An exception is thrown if there is an ambiguity, for example, if the object is of a class implementing more than one of these interfaces. 


    parameterIndex - The first parameter is 1, the second is 2, ... 
    x - The object containing the input parameter value 

*javax.sql.RowSet.setObject(int,Object,int)*

public void setObject(
  int parameterIndex,
  java.lang.Object x,
  int targetSqlType)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command with a Java Object. For integral values, the java.lang equivalent objects should be used. This method is like 
setObject above, but the scale used is the scale of the second parameter. Scalar values have a scale of zero. Literal values have the scale present in the literal. 

Even though it is supported, it is not recommended that this method be called with floating point input values. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the object containing the input parameter value 
    targetSqlType - the SQL type (as defined in java.sql.Types) to be sent to the database 

*javax.sql.RowSet.setObject(int,Object,int,int)*

public void setObject(
  int parameterIndex,
  java.lang.Object x,
  int targetSqlType,
  int scale)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command with the given Java Object. For integral values, the java.lang equivalent objects should be used (for example, an 
instance of the class Integer for an int). 

The given Java object will be converted to the targetSqlType before being sent to the database. 

If the object is of a class implementing SQLData, the rowset should call the method SQLData.writeSQL to write the object to an SQLOutput data stream. If the object is an instance 
of a class implementing the Ref, Struct, Array, Blob, or Clob interfaces, the driver uses the default mapping to the corresponding SQL type. 

Note that this method may be used to pass datatabase-specific abstract data types. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the object containing the input parameter value 
    targetSqlType - the SQL type (as defined in java.sql.Types) to be sent to the database. The scale argument may further qualify this type. 
    scale - for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types, this is the number of digits after the decimal point. For all other types, this value will be ignored. 

*javax.sql.RowSet.setPassword(String)*

public void setPassword(java.lang.String password)
  throws |java.sql.SQLException|
         
Sets the database password for this RowSet object to the given String. 


    password - the password string 

*javax.sql.RowSet.setQueryTimeout(int)*

public void setQueryTimeout(int seconds)
  throws |java.sql.SQLException|
         
Sets the maximum time the driver will wait for a statement to execute to the given number of seconds. If this limit is exceeded, an SQLException is thrown. 


    seconds - the new query timeout limit in seconds; zero means that there is no limit 

*javax.sql.RowSet.setReadOnly(boolean)*

public void setReadOnly(boolean value)
  throws |java.sql.SQLException|
         
Sets whether this RowSet object is read-only to the given boolean. 


    value - true if read-only; false if updatable 

*javax.sql.RowSet.setRef(int,Ref)*

public void setRef(
  int i,
  java.sql.Ref x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command with the given Ref value. The driver will convert this to the appropriate REF(<structured-type>) value. 


    i - the first parameter is 1, the second is 2, ... 
    x - an object representing data of an SQL REF type 

*javax.sql.RowSet.setShort(int,short)*

public void setShort(
  int parameterIndex,
  short x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command to the given Java short value. The driver converts this to an SQL SMALLINT value before sending it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*javax.sql.RowSet.setString(int,String)*

public void setString(
  int parameterIndex,
  java.lang.String x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command to the given Java String value. Before sending it to the database, the driver converts this to an SQL VARCHAR or 
LONGVARCHAR value, depending on the argument's size relative to the driver's limits on VARCHAR values. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*javax.sql.RowSet.setTime(int,Time)*

public void setTime(
  int parameterIndex,
  java.sql.Time x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command to the given java.sql.Time value. The driver converts this to an SQL TIME value before sending it to the database, 
using the default java.util.Calendar to calculate it. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*javax.sql.RowSet.setTime(int,Time,Calendar)*

public void setTime(
  int parameterIndex,
  java.sql.Time x,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command with the given java.sql.Time value. The driver will convert this to an SQL TIME value, using the given 
java.util.Calendar object to calculate it, before sending it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 
    cal - the java.util.Calendar object to use for calculating the time 

*javax.sql.RowSet.setTimestamp(int,Timestamp)*

public void setTimestamp(
  int parameterIndex,
  java.sql.Timestamp x)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command to the given java.sql.Timestamp value. The driver converts this to an SQL TIMESTAMP value before sending it to the 
database, using the default java.util.Calendar to calculate it. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 

*javax.sql.RowSet.setTimestamp(int,Timestamp,Calendar)*

public void setTimestamp(
  int parameterIndex,
  java.sql.Timestamp x,
  java.util.Calendar cal)
  throws |java.sql.SQLException|
         
Sets the designated parameter in this RowSet object's command with the given java.sql.Timestamp value. The driver will convert this to an SQL TIMESTAMP value, using the given 
java.util.Calendar object to calculate it, before sending it to the database. 


    parameterIndex - the first parameter is 1, the second is 2, ... 
    x - the parameter value 
    cal - the java.util.Calendar object to use for calculating the timestamp 

*javax.sql.RowSet.setTransactionIsolation(int)*

public void setTransactionIsolation(int level)
  throws |java.sql.SQLException|
         
Sets the transaction isolation level for this RowSet obejct. 


    level - the transaction isolation level; one of Connection.TRANSACTION_READ_UNCOMMITTED, Connection.TRANSACTION_READ_COMMITTED, Connection.TRANSACTION_REPEATABLE_READ, or 
       Connection.TRANSACTION_SERIALIZABLE 

*javax.sql.RowSet.setType(int)*

public void setType(int type)
  throws |java.sql.SQLException|
         
Sets the type of this RowSet object to the given type. This method is used to change the type of a rowset, which is by default read-only and non-scrollable. 


    type - one of the ResultSet constants specifying a type: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE 

*javax.sql.RowSet.setTypeMap(Map<String,Class<?>>)*

public void setTypeMap(java.util.Map<java.lang.String, java.lang.Class<?>> map)
  throws |java.sql.SQLException|
         
Installs the given java.util.Map object as the default type map for this RowSet object. This type map will be used unless another type map is supplied as a method parameter. 


    map - a java.util.Map object containing the names of SQL user-defined types and the Java classes to which they are to be mapped 

*javax.sql.RowSet.setUrl(String)*

public void setUrl(java.lang.String url)
  throws |java.sql.SQLException|
         
Sets the URL this RowSet object will use when it uses the DriverManager to create a connection. 

Setting this property is optional. If a URL is used, a JDBC driver that accepts the URL must be loaded by the application before the rowset is used to connect to a database. The 
rowset will use the URL internally to create a database connection when reading or writing data. Either a URL or a data source name is used to create a connection, whichever was 
specified most recently. 


    url - a string value; may be null 

*javax.sql.RowSet.setUsername(String)*

public void setUsername(java.lang.String name)
  throws |java.sql.SQLException|
         
Sets the username property for this RowSet object to the given String. 


    name - a user name 



*javax.naming.spi.NamingManager* *NamingManager* This class contains methods for

public class NamingManager
  extends    |java.lang.Object|

|javax.naming.spi.NamingManager_Description|
|javax.naming.spi.NamingManager_Fields|
|javax.naming.spi.NamingManager_Constructors|
|javax.naming.spi.NamingManager_Methods|

================================================================================

*javax.naming.spi.NamingManager_Fields*
|java.lang.String_javax.naming.spi.NamingManager.CPE|

*javax.naming.spi.NamingManager_Methods*
|javax.naming.spi.NamingManager.getContinuationContext(CannotProceedException)|
|javax.naming.spi.NamingManager.getInitialContext(Hashtable)|Creates an initial
|javax.naming.spi.NamingManager.getObjectInstance(Object,Name,Context,Hashtable)|
|javax.naming.spi.NamingManager.getStateToBind(Object,Name,Context,Hashtable)|R
|javax.naming.spi.NamingManager.getURLContext(String,Hashtable)|Creates a conte
|javax.naming.spi.NamingManager.hasInitialContextFactoryBuilder()|Determines wh
|javax.naming.spi.NamingManager.setInitialContextFactoryBuilder(InitialContextFactoryBuilder)|
|javax.naming.spi.NamingManager.setObjectFactoryBuilder(ObjectFactoryBuilder)|T

*javax.naming.spi.NamingManager_Description*

This class contains methods for creating context objects and objects referred 
to by location information in the naming or directory service. 

This class cannot be instantiated. It has only static methods. 

The mention of URL in the documentation for this class refers to a URL string 
as defined by RFC 1738 and its related RFCs. It is any string that conforms to 
the syntax described therein, and may not always have corresponding support in 
the java.net.URL class or Web browsers. 

NamingManager is safe for concurrent access by multiple threads. 

Except as otherwise noted, a Name or environment parameter passed to any method 
is owned by the caller. The implementation will not modify the object or keep a 
reference to it, although it may keep a reference to a clone or copy. 


*java.lang.String_javax.naming.spi.NamingManager.CPE*

This class contains methods for creating context objects and objects referred 
to by location information in the naming or directory service. 

This class cannot be instantiated. It has only static methods. 

The mention of URL in the documentation for this class refers to a URL string 
as defined by RFC 1738 and its related RFCs. It is any string that conforms to 
the syntax described therein, and may not always have corresponding support in 
the java.net.URL class or Web browsers. 

NamingManager is safe for concurrent access by multiple threads. 

Except as otherwise noted, a Name or environment parameter passed to any method 
is owned by the caller. The implementation will not modify the object or keep a 
reference to it, although it may keep a reference to a clone or copy. 



*javax.naming.spi.NamingManager.getContinuationContext(CannotProceedException)*

public static |javax.naming.Context| getContinuationContext(javax.naming.CannotProceedException cpe)
  throws |javax.naming.NamingException|
         
Creates a context in which to continue a context operation. 

In performing an operation on a name that spans multiple namespaces, a context 
from one naming system may need to pass the operation on to the next naming 
system. The context implementation does this by first constructing a 
CannotProceedException containing information pinpointing how far it has 
proceeded. It then obtains a continuation context from JNDI by calling 
getContinuationContext. The context implementation should then resume the 
context operation by invoking the same operation on the continuation context, 
using the remainder of the name that has not yet been resolved. 

Before making use of the cpe parameter, this method updates the environment 
associated with that object by setting the value of the property CPE to cpe. 
This property will be inherited by the continuation context, and may be used by 
that context's service provider to inspect the fields of this exception. 

    cpe - The non-null exception that triggered this continuation. 

    Returns: A non-null Context object for continuing the operation. 
*javax.naming.spi.NamingManager.getInitialContext(Hashtable)*

public static |javax.naming.Context| getInitialContext(java.util.Hashtable env)
  throws |javax.naming.NamingException|
         
Creates an initial context using the specified environment properties. 

If an InitialContextFactoryBuilder has been installed, it is used to create the 
factory for creating the initial context. Otherwise, the class specified in the 
Context.INITIAL_CONTEXT_FACTORY environment property is used. Note that an 
initial context factory (an object that implements the InitialContextFactory 
interface) must be public and must have a public constructor that accepts no 
arguments. 

    env - The possibly null environment properties used when creating the context. 

    Returns: A non-null initial context. 
*javax.naming.spi.NamingManager.getObjectInstance(Object,Name,Context,Hashtable)*

public static |java.lang.Object| getObjectInstance(
  java.lang.Object refInfo,
  javax.naming.Name name,
  javax.naming.Context nameCtx,
  java.util.Hashtable environment)
  throws |java.lang.Exception|
         
Creates an instance of an object for the specified object and environment. 

If an object factory builder has been installed, it is used to create a factory 
for creating the object. Otherwise, the following rules are used to create the 
object: 

If refInfo is a Reference or Referenceable containing a factory class name, use 
the named factory to create the object. Return refInfo if the factory cannot be 
created. Under JDK 1.1, if the factory class must be loaded from a location 
specified in the reference, a SecurityManager must have been installed or the 
factory creation will fail. If an exception is encountered while creating the 
factory, it is passed up to the caller. If refInfo is a Reference or 
Referenceable with no factory class name, and the address or addresses are 
StringRefAddrs with address type "URL", try the URL context factory 
corresponding to each URL's scheme id to create the object (see 
getURLContext()). If that fails, continue to the next step. Use the object 
factories specified in the Context.OBJECT_FACTORIES property of the 
environment, and of the provider resource file associated with nameCtx, in that 
order. The value of this property is a colon-separated list of factory class 
names that are tried in order, and the first one that succeeds in creating an 
object is the one used. If none of the factories can be loaded, return refInfo. 
If an exception is encountered while creating the object, the exception is 
passed up to the caller. 

Service providers that implement the DirContext interface should use 
DirectoryManager.getObjectInstance(), not this method. Service providers that 
implement only the Context interface should use this method. 

Note that an object factory (an object that implements the ObjectFactory 
interface) must be public and must have a public constructor that accepts no 
arguments. 

The name and nameCtx parameters may optionally be used to specify the name of 
the object being created. name is the name of the object, relative to context 
nameCtx. This information could be useful to the object factory or to the 
object implementation. If there are several possible contexts from which the 
object could be named -- as will often be the case -- it is up to the caller to 
select one. A good rule of thumb is to select the "deepest" context available. 
If nameCtx is null, name is relative to the default initial context. If no name 
is being specified, the name parameter should be null. 

    refInfo - The possibly null object for which to create an object. 
    name - The name of this object relative to nameCtx. Specifying a name is optional; if 
       it is omitted, name should be null. 
    nameCtx - The context relative to which the name parameter is specified. If null, name is 
       relative to the default initial context. 
    environment - The possibly null environment to be used in the creation of the object factory 
       and the object. 

    Returns: An object created using refInfo; or refInfo if an object cannot be created 
             using the algorithm described above. 
*javax.naming.spi.NamingManager.getStateToBind(Object,Name,Context,Hashtable)*

public static |java.lang.Object| getStateToBind(
  java.lang.Object obj,
  javax.naming.Name name,
  javax.naming.Context nameCtx,
  java.util.Hashtable environment)
  throws |javax.naming.NamingException|
         
Retrieves the state of an object for binding. 

Service providers that implement the DirContext interface should use 
DirectoryManager.getStateToBind(), not this method. Service providers that 
implement only the Context interface should use this method. 

This method uses the specified state factories in the Context.STATE_FACTORIES 
property from the environment properties, and from the provider resource file 
associated with nameCtx, in that order. The value of this property is a 
colon-separated list of factory class names that are tried in order, and the 
first one that succeeds in returning the object's state is the one used. If no 
object's state can be retrieved in this way, return the object itself. If an 
exception is encountered while retrieving the state, the exception is passed up 
to the caller. 

Note that a state factory (an object that implements the StateFactory 
interface) must be public and must have a public constructor that accepts no 
arguments. 

The name and nameCtx parameters may optionally be used to specify the name of 
the object being created. See the description of "Name and Context Parameters" 
in ObjectFactory.getObjectInstance()(|javax.naming.spi.ObjectFactory|) for 
details. 

This method may return a Referenceable object. The service provider obtaining 
this object may choose to store it directly, or to extract its reference (using 
Referenceable.getReference()) and store that instead. 

    obj - The non-null object for which to get state to bind. 
    name - The name of this object relative to nameCtx, or null if no name is specified. 
    nameCtx - The context relative to which the name parameter is specified, or null if name 
       is relative to the default initial context. 
    environment - The possibly null environment to be used in the creation of the state factory 
       and the object's state. 

    Returns: The non-null object representing obj's state for binding. It could be the 
             object (obj) itself. 
*javax.naming.spi.NamingManager.getURLContext(String,Hashtable)*

public static |javax.naming.Context| getURLContext(
  java.lang.String scheme,
  java.util.Hashtable environment)
  throws |javax.naming.NamingException|
         
Creates a context for the given URL scheme id. 

The resulting context is for resolving URLs of the scheme scheme. The resulting 
context is not tied to a specific URL. It is able to handle arbitrary URLs with 
the specified scheme. 

The class name of the factory that creates the resulting context has the naming 
convention scheme-idURLContextFactory (e.g. "ftpURLContextFactory" for the 
"ftp" scheme-id), in the package specified as follows. The 
Context.URL_PKG_PREFIXES environment property (which may contain values taken 
from applet parameters, system properties, or application resource files) 
contains a colon-separated list of package prefixes. Each package prefix in the 
property is tried in the order specified to load the factory class. The default 
package prefix is "com.sun.jndi.url" (if none of the specified packages work, 
this default is tried). The complete package name is constructed using the 
package prefix, concatenated with the scheme id. 

For example, if the scheme id is "ldap", and the Context.URL_PKG_PREFIXES 
property contains "com.widget:com.wiz.jndi", the naming manager would attempt 
to load the following classes until one is successfully instantiated: 

com.widget.ldap.ldapURLContextFactory com.wiz.jndi.ldap.ldapURLContextFactory 
com.sun.jndi.url.ldap.ldapURLContextFactory 

If none of the package prefixes work, null is returned. 

If a factory is instantiated, it is invoked with the following parameters to 
produce the resulting context. 

factory.getObjectInstance(null, environment); 

For example, invoking getObjectInstance() as shown above on a LDAP URL context 
factory would return a context that can resolve LDAP urls (e.g. 
"ldap://ldap.wiz.com/o=wiz,c=us", "ldap://ldap.umich.edu/o=umich,c=us", ...). 

Note that an object factory (an object that implements the ObjectFactory 
interface) must be public and must have a public constructor that accepts no 
arguments. 

    scheme - The non-null scheme-id of the URLs supported by the context. 
    environment - The possibly null environment properties to be used in the creation of the 
       object factory and the context. 

    Returns: A context for resolving URLs with the scheme id scheme; null if the factory for 
             creating the context is not found. 
*javax.naming.spi.NamingManager.hasInitialContextFactoryBuilder()*

public static boolean hasInitialContextFactoryBuilder()

Determines whether an initial context factory builder has been set. 


    Returns: true if an initial context factory builder has been set; false otherwise. 
*javax.naming.spi.NamingManager.setInitialContextFactoryBuilder(InitialContextFactoryBuilder)*

public static synchronized void setInitialContextFactoryBuilder(javax.naming.spi.InitialContextFactoryBuilder builder)
  throws |javax.naming.NamingException|
         
Sets the InitialContextFactory builder to be builder. 

The builder can only be installed if the executing thread is allowed by the 
security manager to do so. Once installed, the builder cannot be replaced. 

    builder - The initial context factory builder to install. If null, no builder is set. 

*javax.naming.spi.NamingManager.setObjectFactoryBuilder(ObjectFactoryBuilder)*

public static synchronized void setObjectFactoryBuilder(javax.naming.spi.ObjectFactoryBuilder builder)
  throws |javax.naming.NamingException|
         
The ObjectFactoryBuilder determines the policy used when trying to load object 
factories. See getObjectInstance() and class ObjectFactory for a description of 
the default policy. setObjectFactoryBuilder() overrides this default policy by 
installing an ObjectFactoryBuilder. Subsequent object factories will be loaded 
and created using the installed builder. 

The builder can only be installed if the executing thread is allowed (by the 
security manager's checkSetFactory() method) to do so. Once installed, the 
builder cannot be replaced. 

    builder - The factory builder to install. If null, no builder is installed. 



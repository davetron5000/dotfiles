*javax.swing.text.StyleContext* *StyleContext* A pool of styles and their associ

public class StyleContext
  extends    |java.lang.Object|
  implements |java.io.Serializable|
             |javax.swing.text.AbstractDocument.AttributeContext|

|javax.swing.text.StyleContext_Description|
|javax.swing.text.StyleContext_Fields|
|javax.swing.text.StyleContext_Constructors|
|javax.swing.text.StyleContext_Methods|

================================================================================

*javax.swing.text.StyleContext_Fields*
|java.lang.String_javax.swing.text.StyleContext.DEFAULT_STYLE|

*javax.swing.text.StyleContext_Constructors*
|javax.swing.text.StyleContext()|Creates a new StyleContext object.

*javax.swing.text.StyleContext_Methods*
|javax.swing.text.StyleContext.addAttribute(AttributeSet,Object,Object)|Adds an
|javax.swing.text.StyleContext.addAttributes(AttributeSet,AttributeSet)|Adds a 
|javax.swing.text.StyleContext.addChangeListener(ChangeListener)|Adds a listene
|javax.swing.text.StyleContext.addStyle(String,Style)|Adds a new style into the
|javax.swing.text.StyleContext.createLargeAttributeSet(AttributeSet)|Create a l
|javax.swing.text.StyleContext.createSmallAttributeSet(AttributeSet)|Create a c
|javax.swing.text.StyleContext.getBackground(AttributeSet)|Takes a set of attri
|javax.swing.text.StyleContext.getChangeListeners()|Returns an array of all the
|javax.swing.text.StyleContext.getCompressionThreshold()|Returns the maximum nu
|javax.swing.text.StyleContext.getDefaultStyleContext()|Returns default Attribu
|javax.swing.text.StyleContext.getEmptySet()|Fetches an empty AttributeSet.
|javax.swing.text.StyleContext.getFont(AttributeSet)|Gets the font from an attr
|javax.swing.text.StyleContext.getFont(String,int,int)|Gets a new font.
|javax.swing.text.StyleContext.getFontMetrics(Font)|Returns font metrics for a 
|javax.swing.text.StyleContext.getForeground(AttributeSet)|Takes a set of attri
|javax.swing.text.StyleContext.getStaticAttribute(Object)|Returns the object pr
|javax.swing.text.StyleContext.getStaticAttributeKey(Object)|Returns the String
|javax.swing.text.StyleContext.getStyle(String)|Fetches a named style previousl
|javax.swing.text.StyleContext.getStyleNames()|Fetches the names of the styles 
|javax.swing.text.StyleContext.readAttributes(ObjectInputStream,MutableAttributeSet)|
|javax.swing.text.StyleContext.readAttributeSet(ObjectInputStream,MutableAttributeSet)|
|javax.swing.text.StyleContext.reclaim(AttributeSet)|Returns a set no longer ne
|javax.swing.text.StyleContext.registerStaticAttributeKey(Object)|Registers an 
|javax.swing.text.StyleContext.removeAttribute(AttributeSet,Object)|Removes an 
|javax.swing.text.StyleContext.removeAttributes(AttributeSet,AttributeSet)|Remo
|javax.swing.text.StyleContext.removeAttributes(AttributeSet,Enumeration)|Remov
|javax.swing.text.StyleContext.removeChangeListener(ChangeListener)|Removes a l
|javax.swing.text.StyleContext.removeStyle(String)|Removes a named style previo
|javax.swing.text.StyleContext.toString()|Converts a StyleContext to a String.
|javax.swing.text.StyleContext.writeAttributes(ObjectOutputStream,AttributeSet)|
|javax.swing.text.StyleContext.writeAttributeSet(ObjectOutputStream,AttributeSet)|

*javax.swing.text.StyleContext_Description*

A pool of styles and their associated resources. This class determines the 
lifetime of a group of resources by being a container that holds caches for 
various resources such as font and color that get reused by the various style 
definitions. This can be shared by multiple documents if desired to maximize 
the sharing of related resources. 

This class also provides efficient support for small sets of attributes and 
compresses them by sharing across uses and taking advantage of their immutable 
nature. Since many styles are replicated, the potential for sharing is 
significant, and copies can be extremely cheap. Larger sets reduce the 
possibility of sharing, and therefore revert automatically to a less 
space-efficient implementation. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*java.lang.String_javax.swing.text.StyleContext.DEFAULT_STYLE*

A pool of styles and their associated resources. This class determines the 
lifetime of a group of resources by being a container that holds caches for 
various resources such as font and color that get reused by the various style 
definitions. This can be shared by multiple documents if desired to maximize 
the sharing of related resources. 

This class also provides efficient support for small sets of attributes and 
compresses them by sharing across uses and taking advantage of their immutable 
nature. Since many styles are replicated, the potential for sharing is 
significant, and copies can be extremely cheap. Larger sets reduce the 
possibility of sharing, and therefore revert automatically to a less 
space-efficient implementation. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.text.StyleContext()*

public StyleContext()

Creates a new StyleContext object. 


*javax.swing.text.StyleContext.addAttribute(AttributeSet,Object,Object)*

public synchronized |javax.swing.text.AttributeSet| addAttribute(
  javax.swing.text.AttributeSet old,
  java.lang.Object name,
  java.lang.Object value)

Adds an attribute to the given set, and returns the new representative set. 

This method is thread safe, although most Swing methods are not. Please see 
Threads and Swing for more information. 

    old - the old attribute set 
    name - the non-null attribute name 
    value - the attribute value 

    Returns: the updated attribute set 
*javax.swing.text.StyleContext.addAttributes(AttributeSet,AttributeSet)*

public synchronized |javax.swing.text.AttributeSet| addAttributes(
  javax.swing.text.AttributeSet old,
  javax.swing.text.AttributeSet attr)

Adds a set of attributes to the element. 

This method is thread safe, although most Swing methods are not. Please see 
Threads and Swing for more information. 

    old - the old attribute set 
    attr - the attributes to add 

    Returns: the updated attribute set 
*javax.swing.text.StyleContext.addChangeListener(ChangeListener)*

public void addChangeListener(javax.swing.event.ChangeListener l)

Adds a listener to track when styles are added or removed. 

    l - the change listener 

*javax.swing.text.StyleContext.addStyle(String,Style)*

public |javax.swing.text.Style| addStyle(
  java.lang.String nm,
  javax.swing.text.Style parent)

Adds a new style into the style hierarchy. Style attributes resolve from bottom 
up so an attribute specified in a child will override an attribute specified in 
the parent. 

    nm - the name of the style (must be unique within the collection of named styles in 
       the document). The name may be null if the style is unnamed, but the 
       caller is responsible for managing the reference returned as an unnamed 
       style can't be fetched by name. An unnamed style may be useful for 
       things like character attribute overrides such as found in a style run. 
    parent - the parent style. This may be null if unspecified attributes need not be 
       resolved in some other style. 

    Returns: the created style 
*javax.swing.text.StyleContext.createLargeAttributeSet(AttributeSet)*

protected |javax.swing.text.MutableAttributeSet| createLargeAttributeSet(javax.swing.text.AttributeSet a)

Create a large set of attributes that should trade off space for time. This set 
will not be shared. This is a hook for subclasses that want to alter the 
behavior of the larger attribute storage format (which is SimpleAttributeSet by 
default). This can be reimplemented to return a MutableAttributeSet that 
provides some sort of attribute conversion. 

    a - The set of attributes to be represented in the the larger form. 

*javax.swing.text.StyleContext.createSmallAttributeSet(AttributeSet)*

protected |javax.swing.text.StyleContext.SmallAttributeSet| createSmallAttributeSet(javax.swing.text.AttributeSet a)

Create a compact set of attributes that might be shared. This is a hook for 
subclasses that want to alter the behavior of SmallAttributeSet. This can be 
reimplemented to return an AttributeSet that provides some sort of attribute 
conversion. 

    a - The set of attributes to be represented in the the compact form. 

*javax.swing.text.StyleContext.getBackground(AttributeSet)*

public |java.awt.Color| getBackground(javax.swing.text.AttributeSet attr)

Takes a set of attributes and turn it into a background color specification. 
This might be used to specify things like brighter, more hue, etc. By default 
it simply returns the value specified by the StyleConstants.Background 
attribute. 

    attr - the set of attributes 

    Returns: 
*javax.swing.text.StyleContext.getChangeListeners()*

public |javax.swing.event.ChangeListener| getChangeListeners()

Returns an array of all the ChangeListeners added to this StyleContext with 
addChangeListener(). 


    Returns: all of the ChangeListeners added or an empty array if no listeners have been 
             added 
*javax.swing.text.StyleContext.getCompressionThreshold()*

protected int getCompressionThreshold()

Returns the maximum number of key/value pairs to try and compress into 
unique/immutable sets. Any sets above this limit will use hashtables and be a 
MutableAttributeSet. 


    Returns: the threshold 
*javax.swing.text.StyleContext.getDefaultStyleContext()*

public static final |javax.swing.text.StyleContext| getDefaultStyleContext()

Returns default AttributeContext shared by all documents that don't bother to 
define/supply their own context. 


    Returns: 
*javax.swing.text.StyleContext.getEmptySet()*

public |javax.swing.text.AttributeSet| getEmptySet()

Fetches an empty AttributeSet. 


    Returns: 
*javax.swing.text.StyleContext.getFont(AttributeSet)*

public |java.awt.Font| getFont(javax.swing.text.AttributeSet attr)

Gets the font from an attribute set. This is implemented to try and fetch a 
cached font for the given AttributeSet, and if that fails the font features are 
resolved and the font is fetched from the low-level font cache. 

    attr - the attribute set 

    Returns: 
*javax.swing.text.StyleContext.getFont(String,int,int)*

public |java.awt.Font| getFont(
  java.lang.String family,
  int style,
  int size)

Gets a new font. This returns a Font from a cache if a cached font exists. If 
not, a Font is added to the cache. This is basically a low-level cache for 1.1 
font features. 

    family - the font family (such as "Monospaced") 
    style - the style of the font (such as Font.PLAIN) 
    size - the point size >= 1 

    Returns: 
*javax.swing.text.StyleContext.getFontMetrics(Font)*

public |java.awt.FontMetrics| getFontMetrics(java.awt.Font f)

Returns font metrics for a font. 

    f - the font 

    Returns: 
*javax.swing.text.StyleContext.getForeground(AttributeSet)*

public |java.awt.Color| getForeground(javax.swing.text.AttributeSet attr)

Takes a set of attributes and turn it into a foreground color specification. 
This might be used to specify things like brighter, more hue, etc. By default 
it simply returns the value specified by the StyleConstants.Foreground 
attribute. 

    attr - the set of attributes 

    Returns: 
*javax.swing.text.StyleContext.getStaticAttribute(Object)*

public static |java.lang.Object| getStaticAttribute(java.lang.Object key)

Returns the object previously registered with registerStaticAttributeKey. 


*javax.swing.text.StyleContext.getStaticAttributeKey(Object)*

public static |java.lang.Object| getStaticAttributeKey(java.lang.Object key)

Returns the String that key will be registered with 


*javax.swing.text.StyleContext.getStyle(String)*

public |javax.swing.text.Style| getStyle(java.lang.String nm)

Fetches a named style previously added to the document 

    nm - the name of the style 

    Returns: 
*javax.swing.text.StyleContext.getStyleNames()*

public |java.util.Enumeration| getStyleNames()

Fetches the names of the styles defined. 


    Returns: the list of names as an enumeration 
*javax.swing.text.StyleContext.readAttributes(ObjectInputStream,MutableAttributeSet)*

public void readAttributes(
  java.io.ObjectInputStream in,
  javax.swing.text.MutableAttributeSet a)
  throws |java.lang.ClassNotFoundException|
         |java.io.IOException|
         
Context-specific handling of reading in attributes 


*javax.swing.text.StyleContext.readAttributeSet(ObjectInputStream,MutableAttributeSet)*

public static void readAttributeSet(
  java.io.ObjectInputStream in,
  javax.swing.text.MutableAttributeSet a)
  throws |java.lang.ClassNotFoundException|
         |java.io.IOException|
         
Reads a set of attributes from the given object input stream that have been 
previously written out with writeAttributeSet. This will try to restore keys 
that were static objects to the static objects in the current virtual machine 
considering only those keys that have been registered with the 
registerStaticAttributeKey method. The attributes retrieved from the stream 
will be placed into the given mutable set. 

    in - the object stream to read the attribute data from. 
    a - the attribute set to place the attribute definitions in. 

*javax.swing.text.StyleContext.reclaim(AttributeSet)*

public void reclaim(javax.swing.text.AttributeSet a)

Returns a set no longer needed by the MutableAttributeSet implmentation. This 
is useful for operation under 1.1 where there are no weak references. This 
would typically be called by the finalize method of the MutableAttributeSet 
implementation. 

This method is thread safe, although most Swing methods are not. Please see 
Threads and Swing for more information. 

    a - the set to reclaim 

*javax.swing.text.StyleContext.registerStaticAttributeKey(Object)*

public static void registerStaticAttributeKey(java.lang.Object key)

Registers an object as a static object that is being used as a key in attribute 
sets. This allows the key to be treated specially for serialization. 

For operation under a 1.1 virtual machine, this uses the value returned by 
toString concatenated to the classname. The value returned by toString should 
not have the class reference in it (ie it should be reimplemented from the 
definition in Object) in order to be the same when recomputed later. 

    key - the non-null object key 

*javax.swing.text.StyleContext.removeAttribute(AttributeSet,Object)*

public synchronized |javax.swing.text.AttributeSet| removeAttribute(
  javax.swing.text.AttributeSet old,
  java.lang.Object name)

Removes an attribute from the set. 

This method is thread safe, although most Swing methods are not. Please see 
Threads and Swing for more information. 

    old - the old set of attributes 
    name - the non-null attribute name 

    Returns: the updated attribute set 
*javax.swing.text.StyleContext.removeAttributes(AttributeSet,AttributeSet)*

public synchronized |javax.swing.text.AttributeSet| removeAttributes(
  javax.swing.text.AttributeSet old,
  javax.swing.text.AttributeSet attrs)

Removes a set of attributes for the element. 

This method is thread safe, although most Swing methods are not. Please see 
Threads and Swing for more information. 

    old - the old attribute set 
    attrs - the attributes 

    Returns: the updated attribute set 
*javax.swing.text.StyleContext.removeAttributes(AttributeSet,Enumeration)*

public synchronized |javax.swing.text.AttributeSet| removeAttributes(
  javax.swing.text.AttributeSet old,
  java.util.Enumeration names)

Removes a set of attributes for the element. 

This method is thread safe, although most Swing methods are not. Please see 
Threads and Swing for more information. 

    old - the old attribute set 
    names - the attribute names 

    Returns: the updated attribute set 
*javax.swing.text.StyleContext.removeChangeListener(ChangeListener)*

public void removeChangeListener(javax.swing.event.ChangeListener l)

Removes a listener that was tracking styles being added or removed. 

    l - the change listener 

*javax.swing.text.StyleContext.removeStyle(String)*

public void removeStyle(java.lang.String nm)

Removes a named style previously added to the document. 

    nm - the name of the style to remove 

*javax.swing.text.StyleContext.toString()*

public |java.lang.String| toString()

Converts a StyleContext to a String. 


    Returns: 
*javax.swing.text.StyleContext.writeAttributes(ObjectOutputStream,AttributeSet)*

public void writeAttributes(
  java.io.ObjectOutputStream out,
  javax.swing.text.AttributeSet a)
  throws |java.io.IOException|
         
Context-specific handling of writing out attributes 


*javax.swing.text.StyleContext.writeAttributeSet(ObjectOutputStream,AttributeSet)*

public static void writeAttributeSet(
  java.io.ObjectOutputStream out,
  javax.swing.text.AttributeSet a)
  throws |java.io.IOException|
         
Writes a set of attributes to the given object stream for the purpose of 
serialization. This will take special care to deal with static attribute keys 
that have been registered wit the registerStaticAttributeKey method. Any 
attribute key not regsitered as a static key will be serialized directly. All 
values are expected to be serializable. 

    out - the output stream 
    a - the attribute set 



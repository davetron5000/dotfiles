*javax.swing.text.AsyncBoxView* *AsyncBoxView* A box that does layout asynchronously.

public class AsyncBoxView
  extends    |javax.swing.text.View|

|javax.swing.text.AsyncBoxView_Description|
|javax.swing.text.AsyncBoxView_Fields|
|javax.swing.text.AsyncBoxView_Constructors|
|javax.swing.text.AsyncBoxView_Methods|

====================================================================================================================================================================================

*javax.swing.text.AsyncBoxView_Fields*
|javax.swing.text.AsyncBoxView.ChildLocator_javax.swing.text.AsyncBoxView.locator|

*javax.swing.text.AsyncBoxView_Constructors*
|javax.swing.text.AsyncBoxView(Element,int)|Construct a box view that does asynchronous layout.

*javax.swing.text.AsyncBoxView_Methods*
|javax.swing.text.AsyncBoxView.createChildState(View)|New ChildState records are created through  this method to allow subclasses the extend  the ChildState records to do/hold mor
|javax.swing.text.AsyncBoxView.flushRequirementChanges()|Publish the changes in preferences upward to the parent  view.
|javax.swing.text.AsyncBoxView.getBottomInset()|Get the bottom part of the margin around the view.
|javax.swing.text.AsyncBoxView.getChildAllocation(int,Shape)|Fetches the allocation for the given child view.
|javax.swing.text.AsyncBoxView.getChildState(int)|Fetch the object representing the layout state of  of the child at the given index.
|javax.swing.text.AsyncBoxView.getEstimatedMajorSpan()|Is the major span currently estimated?
|javax.swing.text.AsyncBoxView.getInsetSpan(int)|Fetch the span along an axis that is taken up by the insets.
|javax.swing.text.AsyncBoxView.getLayoutQueue()|Fetch the queue to use for layout.
|javax.swing.text.AsyncBoxView.getLeftInset()|Get the left part of the margin around the view.
|javax.swing.text.AsyncBoxView.getMajorAxis()|Fetch the major axis (the axis the children  are tiled along).
|javax.swing.text.AsyncBoxView.getMaximumSpan(int)|Determines the maximum span for this view along an  axis.
|javax.swing.text.AsyncBoxView.getMinimumSpan(int)|Determines the minimum span for this view along an  axis.
|javax.swing.text.AsyncBoxView.getMinorAxis()|Fetch the minor axis (the axis orthoginal   to the tiled axis).
|javax.swing.text.AsyncBoxView.getNextVisualPositionFrom(int,Position.Bias,Shape,int,Position.Bias[])|Provides a way to determine the next visually represented model   location th
|javax.swing.text.AsyncBoxView.getPreferredSpan(int)|Determines the preferred span for this view along an  axis.
|javax.swing.text.AsyncBoxView.getRightInset()|Get the right part of the margin around the view.
|javax.swing.text.AsyncBoxView.getTopInset()|Get the top part of the margin around the view.
|javax.swing.text.AsyncBoxView.getView(int)|Gets the nth child view.
|javax.swing.text.AsyncBoxView.getViewCount()|Returns the number of views in this view.
|javax.swing.text.AsyncBoxView.getViewIndex(int,Position.Bias)|Returns the child view index representing the given position in  the model.
|javax.swing.text.AsyncBoxView.getViewIndexAtPosition(int,Position.Bias)|Fetches the child view index representing the given position in  the model.
|javax.swing.text.AsyncBoxView.loadChildren(ViewFactory)|Loads all of the children to initialize the view.
|javax.swing.text.AsyncBoxView.majorRequirementChange(AsyncBoxView.ChildState,float)|Requirements changed along the major axis.
|javax.swing.text.AsyncBoxView.minorRequirementChange(AsyncBoxView.ChildState)|Requirements changed along the minor axis.
|javax.swing.text.AsyncBoxView.modelToView(int,Shape,Position.Bias)|Provides a mapping from the document model coordinate space  to the coordinate space of the view mapped to it.
|javax.swing.text.AsyncBoxView.paint(Graphics,Shape)|Render the view using the given allocation and  rendering surface.
|javax.swing.text.AsyncBoxView.preferenceChanged(View,boolean,boolean)|Child views can call this on the parent to indicate that  the preference has changed and should be reconside
|javax.swing.text.AsyncBoxView.replace(int,int,View[])|Calls the superclass to update the child views, and  updates the status records for the children.
|javax.swing.text.AsyncBoxView.setBottomInset(float)|Set the bottom part of the margin around the view.
|javax.swing.text.AsyncBoxView.setEstimatedMajorSpan(boolean)|Set the estimatedMajorSpan property that determines if the  major span should be treated as being estimated.
|javax.swing.text.AsyncBoxView.setLeftInset(float)|Set the left part of the margin around the view.
|javax.swing.text.AsyncBoxView.setParent(View)|Sets the parent of the view.
|javax.swing.text.AsyncBoxView.setRightInset(float)|Set the right part of the margin around the view.
|javax.swing.text.AsyncBoxView.setSize(float,float)|Sets the size of the view.
|javax.swing.text.AsyncBoxView.setTopInset(float)|Set the top part of the margin around the view.
|javax.swing.text.AsyncBoxView.updateLayout(DocumentEvent.ElementChange,DocumentEvent,Shape)|Update the layout in response to receiving notification of  change from the model.
|javax.swing.text.AsyncBoxView.viewToModel(float,float,Shape,Position.Bias[])|Provides a mapping from the view coordinate space to the logical  coordinate space of the model.

*javax.swing.text.AsyncBoxView_Description*

A box that does layout asynchronously. This is useful to keep the GUI event thread moving by not doing any layout on it. The layout is done on a granularity of operations on the 
child views. After each child view is accessed for some part of layout (a potentially time consuming operation) the remaining tasks can be abandoned or a new higher priority task 
(i.e. to service a synchronous request or a visible area) can be taken on. 

While the child view is being accessed a read lock is aquired on the associated document so that the model is stable while being accessed. 



*javax.swing.text.AsyncBoxView.ChildLocator_javax.swing.text.AsyncBoxView.locator*

Object that manages the offsets of the children. All locking for management of child locations is on this object. 



*javax.swing.text.AsyncBoxView(Element,int)*

public AsyncBoxView(
  javax.swing.text.Element elem,
  int axis)

Construct a box view that does asynchronous layout. 

    elem - the element of the model to represent 
    axis - the axis to tile along. This can be either X_AXIS or Y_AXIS. 

*javax.swing.text.AsyncBoxView.createChildState(View)*

protected |javax.swing.text.AsyncBoxView.ChildState| createChildState(javax.swing.text.View v)

New ChildState records are created through this method to allow subclasses the extend the ChildState records to do/hold more 



*javax.swing.text.AsyncBoxView.flushRequirementChanges()*

protected void flushRequirementChanges()

Publish the changes in preferences upward to the parent view. This is normally called by the layout thread. 



*javax.swing.text.AsyncBoxView.getBottomInset()*

public float getBottomInset()

Get the bottom part of the margin around the view. 



*javax.swing.text.AsyncBoxView.getChildAllocation(int,Shape)*

public |java.awt.Shape| getChildAllocation(
  int index,
  java.awt.Shape a)

Fetches the allocation for the given child view. This enables finding out where various views are located, without assuming the views store their location. This returns null since 
the default is to not have any child views. 


    index - the index of the child, >= 0 < getViewCount() 
    a - the allocation to this view. 

    Returns: the allocation to the child 

*javax.swing.text.AsyncBoxView.getChildState(int)*

protected |javax.swing.text.AsyncBoxView.ChildState| getChildState(int index)

Fetch the object representing the layout state of of the child at the given index. 


    index - the child index. This should be a value >= 0 and < getViewCount(). 

*javax.swing.text.AsyncBoxView.getEstimatedMajorSpan()*

protected boolean getEstimatedMajorSpan()

Is the major span currently estimated? 



*javax.swing.text.AsyncBoxView.getInsetSpan(int)*

protected float getInsetSpan(int axis)

Fetch the span along an axis that is taken up by the insets. 


    axis - the axis to determine the total insets along, either X_AXIS or Y_AXIS. 

*javax.swing.text.AsyncBoxView.getLayoutQueue()*

protected |javax.swing.text.LayoutQueue| getLayoutQueue()

Fetch the queue to use for layout. 



*javax.swing.text.AsyncBoxView.getLeftInset()*

public float getLeftInset()

Get the left part of the margin around the view. 



*javax.swing.text.AsyncBoxView.getMajorAxis()*

public int getMajorAxis()

Fetch the major axis (the axis the children are tiled along). This will have a value of either X_AXIS or Y_AXIS. 



*javax.swing.text.AsyncBoxView.getMaximumSpan(int)*

public float getMaximumSpan(int axis)

Determines the maximum span for this view along an axis. 


    axis - may be either View.X_AXIS or View.Y_AXIS 

    Returns: the span the view would like to be rendered into >= 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose 
             to resize or break the view. 

*javax.swing.text.AsyncBoxView.getMinimumSpan(int)*

public float getMinimumSpan(int axis)

Determines the minimum span for this view along an axis. 


    axis - may be either View.X_AXIS or View.Y_AXIS 

    Returns: the span the view would like to be rendered into >= 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose 
             to resize or break the view. 

*javax.swing.text.AsyncBoxView.getMinorAxis()*

public int getMinorAxis()

Fetch the minor axis (the axis orthoginal to the tiled axis). This will have a value of either X_AXIS or Y_AXIS. 



*javax.swing.text.AsyncBoxView.getNextVisualPositionFrom(int,Position.Bias,Shape,int,Position.Bias[])*

public int getNextVisualPositionFrom(
  int pos,
  javax.swing.text.Position.Bias b,
  java.awt.Shape a,
  int direction,
  javax.swing.text.Position.Bias[] biasRet)
  throws |javax.swing.text.BadLocationException|
         
Provides a way to determine the next visually represented model location that one might place a caret. Some views may not be visible, they might not be in the same order found in 
the model, or they just might not allow access to some of the locations in the model. 


    pos - the position to convert >= 0 
    a - the allocated region to render into 
    direction - the direction from the current position that can be thought of as the arrow keys typically found on a keyboard; this may be one of the following: 

SwingConstants.WEST SwingConstants.EAST SwingConstants.NORTH SwingConstants.SOUTH 
    biasRet - an array contain the bias that was checked 

    Returns: the location within the model that best represents the next location visual position 

*javax.swing.text.AsyncBoxView.getPreferredSpan(int)*

public float getPreferredSpan(int axis)

Determines the preferred span for this view along an axis. 


    axis - may be either View.X_AXIS or View.Y_AXIS 

    Returns: the span the view would like to be rendered into >= 0. Typically the view is told to render into the span that is returned, although there is no guarantee. The parent may choose 
             to resize or break the view. 

*javax.swing.text.AsyncBoxView.getRightInset()*

public float getRightInset()

Get the right part of the margin around the view. 



*javax.swing.text.AsyncBoxView.getTopInset()*

public float getTopInset()

Get the top part of the margin around the view. 



*javax.swing.text.AsyncBoxView.getView(int)*

public |javax.swing.text.View| getView(int n)

Gets the nth child view. Since there are no children by default, this returns null. 


    n - the number of the view to get, >= 0 < getViewCount() 

    Returns: 

*javax.swing.text.AsyncBoxView.getViewCount()*

public int getViewCount()

Returns the number of views in this view. Since the default is to not be a composite view this returns 0. 



    Returns: the number of views >= 0 

*javax.swing.text.AsyncBoxView.getViewIndex(int,Position.Bias)*

public int getViewIndex(
  int pos,
  javax.swing.text.Position.Bias b)

Returns the child view index representing the given position in the model. By default a view has no children so this is implemented to return -1 to indicate there is no valid 
child index for any position. 


    pos - the position >= 0 

    Returns: index of the view representing the given position, or -1 if no view represents that position 

*javax.swing.text.AsyncBoxView.getViewIndexAtPosition(int,Position.Bias)*

protected synchronized int getViewIndexAtPosition(
  int pos,
  javax.swing.text.Position.Bias b)

Fetches the child view index representing the given position in the model. This is implemented to fetch the view in the case where there is a child view for each child element. 


    pos - the position >= 0 

    Returns: index of the view representing the given position, or -1 if no view represents that position 

*javax.swing.text.AsyncBoxView.loadChildren(ViewFactory)*

protected void loadChildren(javax.swing.text.ViewFactory f)

Loads all of the children to initialize the view. This is called by the setParent method. Subclasses can reimplement this to initialize their child views in a different manner. 
The default implementation creates a child view for each child element. 

Normally a write-lock is held on the Document while the children are being changed, which keeps the rendering and layout threads safe. The exception to this is when the view is 
initialized to represent an existing element (via this method), so it is synchronized to exclude preferenceChanged while we are initializing. 


    f - the view factory 

*javax.swing.text.AsyncBoxView.majorRequirementChange(AsyncBoxView.ChildState,float)*

protected synchronized void majorRequirementChange(
  javax.swing.text.AsyncBoxView.ChildState cs,
  float delta)

Requirements changed along the major axis. This is called by the thread doing layout for the given ChildState object when it has completed fetching the child views new 
preferences. Typically this would be the layout thread, but might be the event thread if it is trying to update something immediately (such as to perform a model/view 
translation). 

This is implemented to mark the major axis as having changed so that a future check to see if the requirements need to be published to the parent view will consider the major 
axis. If the span along the major axis is not estimated, it is updated by the given delta to reflect the incremental change. The delta is ignored if the major span is estimated. 



*javax.swing.text.AsyncBoxView.minorRequirementChange(AsyncBoxView.ChildState)*

protected synchronized void minorRequirementChange(javax.swing.text.AsyncBoxView.ChildState cs)

Requirements changed along the minor axis. This is called by the thread doing layout for the given ChildState object when it has completed fetching the child views new 
preferences. Typically this would be the layout thread, but might be the GUI thread if it is trying to update something immediately (such as to perform a model/view translation). 



*javax.swing.text.AsyncBoxView.modelToView(int,Shape,Position.Bias)*

public |java.awt.Shape| modelToView(
  int pos,
  java.awt.Shape a,
  javax.swing.text.Position.Bias b)
  throws |javax.swing.text.BadLocationException|
         
Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it. 


    pos - the position to convert >= 0 
    a - the allocated region to render into 
    b - the bias toward the previous character or the next character represented by the offset, in case the position is a boundary of two views. 

    Returns: the bounding box of the given position is returned 

*javax.swing.text.AsyncBoxView.paint(Graphics,Shape)*

public void paint(
  java.awt.Graphics g,
  java.awt.Shape alloc)

Render the view using the given allocation and rendering surface. 

This is implemented to determine whether or not the desired region to be rendered (i.e. the unclipped area) is up to date or not. If up-to-date the children are rendered. If not 
up-to-date, a task to build the desired area is placed on the layout queue as a high priority task. This keeps by event thread moving by rendering if ready, and postponing until a 
later time if not ready (since paint requests can be rescheduled). 


    g - the rendering surface to use 
    alloc - the allocated region to render into 

*javax.swing.text.AsyncBoxView.preferenceChanged(View,boolean,boolean)*

public synchronized void preferenceChanged(
  javax.swing.text.View child,
  boolean width,
  boolean height)

Child views can call this on the parent to indicate that the preference has changed and should be reconsidered for layout. This is reimplemented to queue new work on the layout 
thread. This method gets messaged from multiple threads via the children. 


    child - the child view 
    width - true if the width preference has changed 
    height - true if the height preference has changed 

*javax.swing.text.AsyncBoxView.replace(int,int,View[])*

public void replace(
  int offset,
  int length,
  javax.swing.text.View[] views)

Calls the superclass to update the child views, and updates the status records for the children. This is expected to be called while a write lock is held on the model so that 
interaction with the layout thread will not happen (i.e. the layout thread acquires a read lock before doing anything). 


    offset - the starting offset into the child views >= 0 
    length - the number of existing views to replace >= 0 
    views - the child views to insert 

*javax.swing.text.AsyncBoxView.setBottomInset(float)*

public void setBottomInset(float i)

Set the bottom part of the margin around the view. 


    i - the value of the inset 

*javax.swing.text.AsyncBoxView.setEstimatedMajorSpan(boolean)*

protected void setEstimatedMajorSpan(boolean isEstimated)

Set the estimatedMajorSpan property that determines if the major span should be treated as being estimated. If this property is true, the value of setSize along the major axis 
will change the requirements along the major axis and incremental changes will be ignored until all of the children have been updated (which will cause the property to 
automatically be set to false). If the property is false the value of the majorSpan will be considered to be accurate and incremental changes will be added into the total as they 
are calculated. 



*javax.swing.text.AsyncBoxView.setLeftInset(float)*

public void setLeftInset(float i)

Set the left part of the margin around the view. 


    i - the value of the inset 

*javax.swing.text.AsyncBoxView.setParent(View)*

public void setParent(javax.swing.text.View parent)

Sets the parent of the view. This is reimplemented to provide the superclass behavior as well as calling the loadChildren method if this view does not already have children. The 
children should not be loaded in the constructor because the act of setting the parent may cause them to try to search up the hierarchy (to get the hosting Container for example). 
If this view has children (the view is being moved from one place in the view hierarchy to another), the loadChildren method will not be called. 


    parent - the parent of the view, null if none 

*javax.swing.text.AsyncBoxView.setRightInset(float)*

public void setRightInset(float i)

Set the right part of the margin around the view. 


    i - the value of the inset 

*javax.swing.text.AsyncBoxView.setSize(float,float)*

public void setSize(
  float width,
  float height)

Sets the size of the view. This should cause layout of the view if the view caches any layout information. 

Since the major axis is updated asynchronously and should be the sum of the tiled children the call is ignored for the major axis. Since the minor axis is flexible, work is queued 
to resize the children if the minor span changes. 


    width - the width >= 0 
    height - the height >= 0 

*javax.swing.text.AsyncBoxView.setTopInset(float)*

public void setTopInset(float i)

Set the top part of the margin around the view. 


    i - the value of the inset 

*javax.swing.text.AsyncBoxView.updateLayout(DocumentEvent.ElementChange,DocumentEvent,Shape)*

protected void updateLayout(
  javax.swing.event.DocumentEvent.ElementChange ec,
  javax.swing.event.DocumentEvent e,
  java.awt.Shape a)

Update the layout in response to receiving notification of change from the model. This is implemented to note the change on the ChildLocator so that offsets of the children will 
be correctly computed. 


    ec - changes to the element this view is responsible for (may be null if there were no changes). 
    e - the change information from the associated document 
    a - the current allocation of the view 

*javax.swing.text.AsyncBoxView.viewToModel(float,float,Shape,Position.Bias[])*

public int viewToModel(
  float x,
  float y,
  java.awt.Shape a,
  javax.swing.text.Position.Bias[] biasReturn)

Provides a mapping from the view coordinate space to the logical coordinate space of the model. The biasReturn argument will be filled in to indicate that the point given is 
closer to the next character in the model or the previous character in the model. 

This is expected to be called by the GUI thread, holding a read-lock on the associated model. It is implemented to locate the child view and determine it's allocation with a lock 
on the ChildLocator object, and to call viewToModel on the child view with a lock on the ChildState object to avoid interaction with the layout thread. 


    x - the X coordinate >= 0 
    y - the Y coordinate >= 0 
    a - the allocated region to render into 

    Returns: the location within the model that best represents the given point in the view >= 0. The biasReturn argument will be filled in to indicate that the point given is closer to the 
             next character in the model or the previous character in the model. 



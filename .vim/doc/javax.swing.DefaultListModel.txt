*javax.swing.DefaultListModel* *DefaultListModel* This class loosely implements the java.util.Vector
 API, in that it implements the 1.1.x version of
 java.util.Vector, has no coll

public class DefaultListModel
  extends    |javax.swing.AbstractListModel|

|javax.swing.DefaultListModel_Description|
|javax.swing.DefaultListModel_Fields|
|javax.swing.DefaultListModel_Constructors|
|javax.swing.DefaultListModel_Methods|

====================================================================================================================================================================================

*javax.swing.DefaultListModel_Constructors*
|javax.swing.DefaultListModel()|

*javax.swing.DefaultListModel_Methods*
|javax.swing.DefaultListModel.add(int,Object)|Inserts the specified element at the specified position in this list.
|javax.swing.DefaultListModel.addElement(Object)|Adds the specified component to the end of this list.
|javax.swing.DefaultListModel.capacity()|Returns the current capacity of this list.
|javax.swing.DefaultListModel.clear()|Removes all of the elements from this list.
|javax.swing.DefaultListModel.contains(Object)|Tests whether the specified object is a component in this list.
|javax.swing.DefaultListModel.copyInto(Object[])|Copies the components of this list into the specified array.
|javax.swing.DefaultListModel.elementAt(int)|Returns the component at the specified index.
|javax.swing.DefaultListModel.elements()|Returns an enumeration of the components of this list.
|javax.swing.DefaultListModel.ensureCapacity(int)|Increases the capacity of this list, if necessary, to ensure   that it can hold at least the number of components specified by   
|javax.swing.DefaultListModel.firstElement()|Returns the first component of this list.
|javax.swing.DefaultListModel.get(int)|Returns the element at the specified position in this list.
|javax.swing.DefaultListModel.getElementAt(int)|Returns the component at the specified index.
|javax.swing.DefaultListModel.getSize()|Returns the number of components in this list.
|javax.swing.DefaultListModel.indexOf(Object)|Searches for the first occurrence of elem.
|javax.swing.DefaultListModel.indexOf(Object,int)|Searches for the first occurrence of elem, beginning   the search at index.
|javax.swing.DefaultListModel.insertElementAt(Object,int)|Inserts the specified object as a component in this list at the   specified index.
|javax.swing.DefaultListModel.isEmpty()|Tests whether this list has any components.
|javax.swing.DefaultListModel.lastElement()|Returns the last component of the list.
|javax.swing.DefaultListModel.lastIndexOf(Object)|Returns the index of the last occurrence of elem.
|javax.swing.DefaultListModel.lastIndexOf(Object,int)|Searches backwards for elem, starting from the   specified index, and returns an index to it.
|javax.swing.DefaultListModel.remove(int)|Removes the element at the specified position in this list.
|javax.swing.DefaultListModel.removeAllElements()|Removes all components from this list and sets its size to zero.
|javax.swing.DefaultListModel.removeElement(Object)|Removes the first (lowest-indexed) occurrence of the argument   from this list.
|javax.swing.DefaultListModel.removeElementAt(int)|Deletes the component at the specified index.
|javax.swing.DefaultListModel.removeRange(int,int)|Deletes the components at the specified range of indexes.
|javax.swing.DefaultListModel.set(int,Object)|Replaces the element at the specified position in this list with the  specified element.
|javax.swing.DefaultListModel.setElementAt(Object,int)|Sets the component at the specified index of this   list to be the specified object.
|javax.swing.DefaultListModel.setSize(int)|Sets the size of this list.
|javax.swing.DefaultListModel.size()|Returns the number of components in this list.
|javax.swing.DefaultListModel.toArray()|Returns an array containing all of the elements in this list in the  correct order.
|javax.swing.DefaultListModel.toString()|Returns a string that displays and identifies this  object's properties.
|javax.swing.DefaultListModel.trimToSize()|Trims the capacity of this list to be the list's current size.

*javax.swing.DefaultListModel_Description*

This class loosely implements the java.util.Vector API, in that it implements the 1.1.x version of java.util.Vector, has no collection class support, and notifies the 
ListDataListeners when changes occur. Presently it delegates to a Vector, in a future release it will be a real Collection implementation. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between 
applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see 
(|java.beans.XMLEncoder|) . 



*javax.swing.DefaultListModel()*

public DefaultListModel()




*javax.swing.DefaultListModel.add(int,Object)*

public void add(
  int index,
  java.lang.Object element)

Inserts the specified element at the specified position in this list. 

Throws an ArrayIndexOutOfBoundsException if the index is out of range (index < 0 || index > size()). 


    index - index at which the specified element is to be inserted 
    element - element to be inserted 

*javax.swing.DefaultListModel.addElement(Object)*

public void addElement(java.lang.Object obj)

Adds the specified component to the end of this list. 


    obj - the component to be added 

*javax.swing.DefaultListModel.capacity()*

public int capacity()

Returns the current capacity of this list. 



    Returns: the current capacity 

*javax.swing.DefaultListModel.clear()*

public void clear()

Removes all of the elements from this list. The list will be empty after this call returns (unless it throws an exception). 



*javax.swing.DefaultListModel.contains(Object)*

public boolean contains(java.lang.Object elem)

Tests whether the specified object is a component in this list. 


    elem - an object 

    Returns: true if the specified object is the same as a component in this list 

*javax.swing.DefaultListModel.copyInto(Object[])*

public void copyInto(java.lang.Object[] anArray)

Copies the components of this list into the specified array. The array must be big enough to hold all the objects in this list, else an IndexOutOfBoundsException is thrown. 


    anArray - the array into which the components get copied 

*javax.swing.DefaultListModel.elementAt(int)*

public |java.lang.Object| elementAt(int index)

Returns the component at the specified index. Throws an ArrayIndexOutOfBoundsException if the index is negative or not less than the size of the list. 

Note: Although this method is not deprecated, the preferred method to use is get(int), which implements the List interface defined in the 1.2 Collections framework. 


    index - an index into this list 

    Returns: the component at the specified index 

*javax.swing.DefaultListModel.elements()*

public |java.util.Enumeration|<?> elements()

Returns an enumeration of the components of this list. 



    Returns: an enumeration of the components of this list 

*javax.swing.DefaultListModel.ensureCapacity(int)*

public void ensureCapacity(int minCapacity)

Increases the capacity of this list, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument. 


    minCapacity - the desired minimum capacity 

*javax.swing.DefaultListModel.firstElement()*

public |java.lang.Object| firstElement()

Returns the first component of this list. Throws a NoSuchElementException if this vector has no components. 



    Returns: the first component of this list 

*javax.swing.DefaultListModel.get(int)*

public |java.lang.Object| get(int index)

Returns the element at the specified position in this list. 

Throws an ArrayIndexOutOfBoundsException if the index is out of range (index < 0 || index >= size()). 


    index - index of element to return 

*javax.swing.DefaultListModel.getElementAt(int)*

public |java.lang.Object| getElementAt(int index)

Returns the component at the specified index. 

Note: Although this method is not deprecated, the preferred method to use is get(int), which implements the List interface defined in the 1.2 Collections framework. 


    index - an index into this list 

    Returns: the component at the specified index 

*javax.swing.DefaultListModel.getSize()*

public int getSize()

Returns the number of components in this list. 

This method is identical to size, which implements the List interface defined in the 1.2 Collections framework. This method exists in conjunction with setSize so that size is 
identifiable as a JavaBean property. 



    Returns: the number of components in this list 

*javax.swing.DefaultListModel.indexOf(Object)*

public int indexOf(java.lang.Object elem)

Searches for the first occurrence of elem. 


    elem - an object 

    Returns: the index of the first occurrence of the argument in this list; returns -1 if the object is not found 

*javax.swing.DefaultListModel.indexOf(Object,int)*

public int indexOf(
  java.lang.Object elem,
  int index)

Searches for the first occurrence of elem, beginning the search at index. 


    elem - an desired component 
    index - the index from which to begin searching 

    Returns: the index where the first occurrence of elem is found after index; returns -1 if the elem is not found in the list 

*javax.swing.DefaultListModel.insertElementAt(Object,int)*

public void insertElementAt(
  java.lang.Object obj,
  int index)

Inserts the specified object as a component in this list at the specified index. 

Throws an ArrayIndexOutOfBoundsException if the index is invalid. 

Note: Although this method is not deprecated, the preferred method to use is add(int,Object), which implements the List interface defined in the 1.2 Collections framework. 


    obj - the component to insert 
    index - where to insert the new component 

*javax.swing.DefaultListModel.isEmpty()*

public boolean isEmpty()

Tests whether this list has any components. 



    Returns: true if and only if this list has no components, that is, its size is zero; false otherwise 

*javax.swing.DefaultListModel.lastElement()*

public |java.lang.Object| lastElement()

Returns the last component of the list. Throws a NoSuchElementException if this vector has no components. 



    Returns: the last component of the list 

*javax.swing.DefaultListModel.lastIndexOf(Object)*

public int lastIndexOf(java.lang.Object elem)

Returns the index of the last occurrence of elem. 


    elem - the desired component 

    Returns: the index of the last occurrence of elem in the list; returns -1 if the object is not found 

*javax.swing.DefaultListModel.lastIndexOf(Object,int)*

public int lastIndexOf(
  java.lang.Object elem,
  int index)

Searches backwards for elem, starting from the specified index, and returns an index to it. 


    elem - the desired component 
    index - the index to start searching from 

    Returns: the index of the last occurrence of the elem in this list at position less than index; returns -1 if the object is not found 

*javax.swing.DefaultListModel.remove(int)*

public |java.lang.Object| remove(int index)

Removes the element at the specified position in this list. Returns the element that was removed from the list. 

Throws an ArrayIndexOutOfBoundsException if the index is out of range (index < 0 || index >= size()). 


    index - the index of the element to removed 

*javax.swing.DefaultListModel.removeAllElements()*

public void removeAllElements()

Removes all components from this list and sets its size to zero. 

Note: Although this method is not deprecated, the preferred method to use is clear, which implements the List interface defined in the 1.2 Collections framework. 



*javax.swing.DefaultListModel.removeElement(Object)*

public boolean removeElement(java.lang.Object obj)

Removes the first (lowest-indexed) occurrence of the argument from this list. 


    obj - the component to be removed 

    Returns: true if the argument was a component of this list; false otherwise 

*javax.swing.DefaultListModel.removeElementAt(int)*

public void removeElementAt(int index)

Deletes the component at the specified index. 

Throws an ArrayIndexOutOfBoundsException if the index is invalid. 

Note: Although this method is not deprecated, the preferred method to use is remove(int), which implements the List interface defined in the 1.2 Collections framework. 


    index - the index of the object to remove 

*javax.swing.DefaultListModel.removeRange(int,int)*

public void removeRange(
  int fromIndex,
  int toIndex)

Deletes the components at the specified range of indexes. The removal is inclusive, so specifying a range of (1,5) removes the component at index 1 and the component at index 5, 
as well as all components in between. 

Throws an ArrayIndexOutOfBoundsException if the index was invalid. Throws an IllegalArgumentException if fromIndex > toIndex. 


    fromIndex - the index of the lower end of the range 
    toIndex - the index of the upper end of the range 

*javax.swing.DefaultListModel.set(int,Object)*

public |java.lang.Object| set(
  int index,
  java.lang.Object element)

Replaces the element at the specified position in this list with the specified element. 

Throws an ArrayIndexOutOfBoundsException if the index is out of range (index < 0 || index >= size()). 


    index - index of element to replace 
    element - element to be stored at the specified position 

    Returns: the element previously at the specified position 

*javax.swing.DefaultListModel.setElementAt(Object,int)*

public void setElementAt(
  java.lang.Object obj,
  int index)

Sets the component at the specified index of this list to be the specified object. The previous component at that position is discarded. 

Throws an ArrayIndexOutOfBoundsException if the index is invalid. 

Note: Although this method is not deprecated, the preferred method to use is set(int,Object), which implements the List interface defined in the 1.2 Collections framework. 


    obj - what the component is to be set to 
    index - the specified index 

*javax.swing.DefaultListModel.setSize(int)*

public void setSize(int newSize)

Sets the size of this list. 


    newSize - the new size of this list 

*javax.swing.DefaultListModel.size()*

public int size()

Returns the number of components in this list. 



    Returns: the number of components in this list 

*javax.swing.DefaultListModel.toArray()*

public |java.lang.Object|[] toArray()

Returns an array containing all of the elements in this list in the correct order. 



    Returns: an array containing the elements of the list 

*javax.swing.DefaultListModel.toString()*

public |java.lang.String| toString()

Returns a string that displays and identifies this object's properties. 



    Returns: a String representation of this object 

*javax.swing.DefaultListModel.trimToSize()*

public void trimToSize()

Trims the capacity of this list to be the list's current size. 





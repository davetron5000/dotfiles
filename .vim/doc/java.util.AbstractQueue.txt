*java.util.AbstractQueue* *AbstractQueue* This class provides skeletal implement

public abstract class AbstractQueue
  extends    |java.util.AbstractCollection|
  implements |java.util.Queue|

|java.util.AbstractQueue_Description|
|java.util.AbstractQueue_Fields|
|java.util.AbstractQueue_Constructors|
|java.util.AbstractQueue_Methods|

================================================================================

*java.util.AbstractQueue_Constructors*
|java.util.AbstractQueue()|Constructor for use by subclasses.

*java.util.AbstractQueue_Methods*
|java.util.AbstractQueue.add(E)|Adds the specified element to this queue.
|java.util.AbstractQueue.addAll(Collection)|Adds all of the elements in the spe
|java.util.AbstractQueue.clear()|Removes all of the elements from this collecti
|java.util.AbstractQueue.element()|Retrieves, but does not remove, the head of 
|java.util.AbstractQueue.remove()|Retrieves and removes the head of this queue.

*java.util.AbstractQueue_Description*

This class provides skeletal implementations of some (|java.util.Queue|) 
operations. The implementations in this class are appropriate when the base 
implementation does not allow null elements. Methods 
add(|java.util.AbstractQueue|) , remove(|java.util.AbstractQueue|) , and 
element(|java.util.AbstractQueue|) are based on 
offer(|java.util.AbstractQueue|) , poll(|java.util.AbstractQueue|) , and 
peek(|java.util.AbstractQueue|) , respectively but throw exceptions instead of 
indicating failure via false or null returns. 

A Queue implementation that extends this class must minimally define a method 
(|java.util.Queue|) which does not permit insertion of null elements, along 
with methods (|java.util.Queue|) , (|java.util.Queue|) , 
(|java.util.Collection|) , and a (|java.util.Collection|) supporting 
(|java.util.Iterator|) . Typically, additional methods will be overridden as 
well. If these requirements cannot be met, consider instead subclassing 
(|java.util.AbstractCollection|) . 

This class is a member of the <a href="/../guide/collections/index.html"> Java 
Collections Framework. 


*java.util.AbstractQueue()*

protected AbstractQueue()

Constructor for use by subclasses. 


*java.util.AbstractQueue.add(E)*

public boolean add(java.lang.Object o)

Adds the specified element to this queue. This implementation returns true if 
offer succeeds, else throws an IllegalStateException. 

    o - the element 

    Returns: true (as per the general contract of Collection.add). 
*java.util.AbstractQueue.addAll(Collection)*

public boolean addAll(java.util.Collection c)

Adds all of the elements in the specified collection to this queue. Attempts to 
addAll of a queue to itself result in IllegalArgumentException. Further, the 
behavior of this operation is undefined if the specified collection is modified 
while the operation is in progress. 

This implementation iterates over the specified collection, and adds each 
element returned by the iterator to this collection, in turn. A runtime 
exception encountered while trying to add an element (including, in particular, 
a null element) may result in only some of the elements having been 
successfully added when the associated exception is thrown. 

    c - collection whose elements are to be added to this collection. 

    Returns: true if this collection changed as a result of the call. 
*java.util.AbstractQueue.clear()*

public void clear()

Removes all of the elements from this collection. The collection will be empty 
after this call returns. This implementation repeatedly invokes 
poll(|java.util.AbstractQueue|) until it returns null. 


*java.util.AbstractQueue.element()*

public |java.lang.Object| element()

Retrieves, but does not remove, the head of this queue. This implementation 
returns the result of peek unless the queue is empty. 


    Returns: the head of this queue. 
*java.util.AbstractQueue.remove()*

public |java.lang.Object| remove()

Retrieves and removes the head of this queue. This implementation returns the 
result of poll unless the queue is empty. 


    Returns: the head of this queue. 


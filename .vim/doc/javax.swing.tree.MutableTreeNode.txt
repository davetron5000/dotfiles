*javax.swing.tree.MutableTreeNode* *MutableTreeNode* Defines the requirements fo

public interface interface MutableTreeNode

  implements |javax.swing.tree.TreeNode|

|javax.swing.tree.MutableTreeNode_Description|
|javax.swing.tree.MutableTreeNode_Fields|
|javax.swing.tree.MutableTreeNode_Constructors|
|javax.swing.tree.MutableTreeNode_Methods|

================================================================================

*javax.swing.tree.MutableTreeNode_Methods*
|javax.swing.tree.MutableTreeNode.insert(MutableTreeNode,int)|Adds child to the
|javax.swing.tree.MutableTreeNode.remove(int)|Removes the child at index from t
|javax.swing.tree.MutableTreeNode.remove(MutableTreeNode)|Removes node from the
|javax.swing.tree.MutableTreeNode.removeFromParent()|Removes the receiver from 
|javax.swing.tree.MutableTreeNode.setParent(MutableTreeNode)|Sets the parent of
|javax.swing.tree.MutableTreeNode.setUserObject(Object)|Resets the user object 

*javax.swing.tree.MutableTreeNode_Description*

Defines the requirements for a tree node object that can change -- by adding or 
removing child nodes, or by changing the contents of a user object stored in 
the node. 


*javax.swing.tree.MutableTreeNode.insert(MutableTreeNode,int)*

public void insert(
  javax.swing.tree.MutableTreeNode child,
  int index)

Adds child to the receiver at index. child will be messaged with setParent. 


*javax.swing.tree.MutableTreeNode.remove(int)*

public void remove(int index)

Removes the child at index from the receiver. 


*javax.swing.tree.MutableTreeNode.remove(MutableTreeNode)*

public void remove(javax.swing.tree.MutableTreeNode node)

Removes node from the receiver. setParent will be messaged on node. 


*javax.swing.tree.MutableTreeNode.removeFromParent()*

public void removeFromParent()

Removes the receiver from its parent. 


*javax.swing.tree.MutableTreeNode.setParent(MutableTreeNode)*

public void setParent(javax.swing.tree.MutableTreeNode newParent)

Sets the parent of the receiver to newParent. 


*javax.swing.tree.MutableTreeNode.setUserObject(Object)*

public void setUserObject(java.lang.Object object)

Resets the user object of the receiver to object. 




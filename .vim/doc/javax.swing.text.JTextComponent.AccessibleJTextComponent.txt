*javax.swing.text.JTextComponent.AccessibleJTextComponent* *JTextComponent.AccessibleJTextComponent* 

public class JTextComponent.AccessibleJTextComponent
  extends    |javax.swing.JComponent.AccessibleJComponent|
  implements |javax.accessibility.AccessibleText|
             |javax.swing.event.CaretListener|
             |javax.swing.event.DocumentListener|
             |javax.accessibility.AccessibleAction|
             |javax.accessibility.AccessibleEditableText|

|javax.swing.text.JTextComponent.AccessibleJTextComponent_Description|
|javax.swing.text.JTextComponent.AccessibleJTextComponent_Fields|
|javax.swing.text.JTextComponent.AccessibleJTextComponent_Constructors|
|javax.swing.text.JTextComponent.AccessibleJTextComponent_Methods|

================================================================================

*javax.swing.text.JTextComponent.AccessibleJTextComponent_Constructors*
|javax.swing.text.JTextComponent.AccessibleJTextComponent()|Constructs an Acces

*javax.swing.text.JTextComponent.AccessibleJTextComponent_Methods*
|javax.swing.text.JTextComponent.AccessibleJTextComponent.caretUpdate(CaretEvent)|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.changedUpdate(DocumentEvent)|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.cut(int,int)|Cuts the
|javax.swing.text.JTextComponent.AccessibleJTextComponent.delete(int,int)|Delet
|javax.swing.text.JTextComponent.AccessibleJTextComponent.doAccessibleAction(int)|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleAction()|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleActionCount()|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleActionDescription(int)|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleEditableText()|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleRole()|G
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleStateSet()|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleText()|G
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getAfterIndex(int,int)|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getAtIndex(int,int)|R
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getBeforeIndex(int,int)|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getCaretPosition()|Re
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getCharacterAttribute(int)|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getCharacterBounds(int)|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getCharCount()|Return
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getIndexAtPoint(Point)|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getSelectedText()|Ret
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getSelectionEnd()|Ret
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getSelectionStart()|R
|javax.swing.text.JTextComponent.AccessibleJTextComponent.getTextRange(int,int)|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.insertTextAtIndex(int,String)|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.insertUpdate(DocumentEvent)|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.paste(int)|Pastes the
|javax.swing.text.JTextComponent.AccessibleJTextComponent.removeUpdate(DocumentEvent)|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.replaceText(int,int,String)|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.selectText(int,int)|S
|javax.swing.text.JTextComponent.AccessibleJTextComponent.setAttributes(int,int,AttributeSet)|
|javax.swing.text.JTextComponent.AccessibleJTextComponent.setTextContents(String)|

*javax.swing.text.JTextComponent.AccessibleJTextComponent_Description*

This class implements accessibility support for the JTextComponent class. It 
provides an implementation of the Java Accessibility API appropriate to menu 
user-interface elements. 

Warning: Serialized objects of this class will not be compatible with future 
Swing releases. The current serialization support is appropriate for short term 
storage or RMI between applications running the same version of Swing. As of 
1.4, support for long term storage of all JavaBeansTM has been added to the 
java.beans package. Please see (|java.beans.XMLEncoder|) . 


*javax.swing.text.JTextComponent.AccessibleJTextComponent()*

public JTextComponent.AccessibleJTextComponent()

Constructs an AccessibleJTextComponent. Adds a listener to track caret change. 


*javax.swing.text.JTextComponent.AccessibleJTextComponent.caretUpdate(CaretEvent)*

public void caretUpdate(javax.swing.event.CaretEvent e)

Handles caret updates (fire appropriate property change event, which are 
AccessibleContext.ACCESSIBLE_CARET_PROPERTY and 
AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY). This keeps track of the dot 
position internally. When the caret moves, the internal position is updated 
after firing the event. 

    e - the CaretEvent 

*javax.swing.text.JTextComponent.AccessibleJTextComponent.changedUpdate(DocumentEvent)*

public void changedUpdate(javax.swing.event.DocumentEvent e)

Handles document remove (fire appropriate property change event, which is 
AccessibleContext.ACCESSIBLE_TEXT_PROPERTY). This tracks the changed offset via 
the event. 

    e - the DocumentEvent 

*javax.swing.text.JTextComponent.AccessibleJTextComponent.cut(int,int)*

public void cut(
  int startIndex,
  int endIndex)

Cuts the text between two indices into the system clipboard. 

    startIndex - the starting index in the text 
    endIndex - the ending index in the text 

*javax.swing.text.JTextComponent.AccessibleJTextComponent.delete(int,int)*

public void delete(
  int startIndex,
  int endIndex)

Deletes the text between two indices 

    startIndex - the starting index in the text 
    endIndex - the ending index in the text 

*javax.swing.text.JTextComponent.AccessibleJTextComponent.doAccessibleAction(int)*

public boolean doAccessibleAction(int i)

Performs the specified Action on the object 

    i - zero-based index of actions 

    Returns: true if the action was performed; otherwise false. 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleAction()*

public |javax.accessibility.AccessibleAction| getAccessibleAction()




*javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleActionCount()*

public int getAccessibleActionCount()

Returns the number of accessible actions available in this object If there are 
more than one, the first one is considered the "default" action of the object. 


    Returns: the zero-based number of Actions in this object 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleActionDescription(int)*

public |java.lang.String| getAccessibleActionDescription(int i)

Returns a description of the specified action of the object. 

    i - zero-based index of the actions 

    Returns: a String description of the action 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleEditableText()*

public |javax.accessibility.AccessibleEditableText| getAccessibleEditableText()

Returns the AccessibleEditableText interface for this text component. 


    Returns: the AccessibleEditableText interface 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleRole()*

public |javax.accessibility.AccessibleRole| getAccessibleRole()

Gets the role of this object. 


    Returns: an instance of AccessibleRole describing the role of the object 
             (AccessibleRole.TEXT) 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleStateSet()*

public |javax.accessibility.AccessibleStateSet| getAccessibleStateSet()

Gets the state set of the JTextComponent. The AccessibleStateSet of an object 
is composed of a set of unique AccessibleState's. A change in the 
AccessibleStateSet of an object will cause a PropertyChangeEvent to be fired 
for the AccessibleContext.ACCESSIBLE_STATE_PROPERTY property. 


    Returns: an instance of AccessibleStateSet containing the current state set of the 
             object 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getAccessibleText()*

public |javax.accessibility.AccessibleText| getAccessibleText()

Get the AccessibleText associated with this object. In the implementation of 
the Java Accessibility API for this class, return this object, which is 
responsible for implementing the AccessibleText interface on behalf of itself. 


    Returns: 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getAfterIndex(int,int)*

public |java.lang.String| getAfterIndex(
  int part,
  int index)

Returns the String after a given index. Whitespace between words is treated as 
a word. 

    part - the CHARACTER, WORD, or SENTENCE to retrieve 
    index - an index within the text 

    Returns: the letter, word, or sentence. 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getAtIndex(int,int)*

public |java.lang.String| getAtIndex(
  int part,
  int index)

Returns the String at a given index. Whitespace between words is treated as a 
word. 

    part - the CHARACTER, WORD, or SENTENCE to retrieve 
    index - an index within the text 

    Returns: the letter, word, or sentence. 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getBeforeIndex(int,int)*

public |java.lang.String| getBeforeIndex(
  int part,
  int index)

Returns the String before a given index. Whitespace between words is treated a 
word. 

    part - the CHARACTER, WORD, or SENTENCE to retrieve 
    index - an index within the text 

    Returns: the letter, word, or sentence. 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getCaretPosition()*

public int getCaretPosition()

Returns the zero-based offset of the caret. 

Note: The character to the right of the caret will have the same index value as 
the offset (the caret is between two characters). 


    Returns: the zero-based offset of the caret. 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getCharacterAttribute(int)*

public |javax.swing.text.AttributeSet| getCharacterAttribute(int i)

Returns the AttributeSet for a given character (at a given index). 

    i - the zero-based index into the text 

    Returns: the AttributeSet of the character 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getCharacterBounds(int)*

public |java.awt.Rectangle| getCharacterBounds(int i)

Determines the bounding box of the character at the given index into the 
string. The bounds are returned in local coordinates. If the index is invalid a 
null rectangle is returned. 

The screen coordinates returned are "unscrolled coordinates" if the 
JTextComponent is contained in a JScrollPane in which case the resulting 
rectangle should be composed with the parent coordinates. A good algorithm to 
use is: 

Accessible a: AccessibleText at = a.getAccessibleText(); AccessibleComponent ac 
= a.getAccessibleComponent(); Rectangle r = at.getCharacterBounds(); Point p = 
ac.getLocation(); r.x += p.x; r.y += p.y; 

Note: the JTextComponent must have a valid size (e.g. have been added to a 
parent container whose ancestor container is a valid top-level window) for this 
method to be able to return a meaningful (non-null) value. 

    i - the index into the String >= 0 

    Returns: the screen coordinates of the character's bounding box 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getCharCount()*

public int getCharCount()

Returns the number of characters (valid indices) 


    Returns: the number of characters >= 0 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getIndexAtPoint(Point)*

public int getIndexAtPoint(java.awt.Point p)

Given a point in local coordinates, return the zero-based index of the 
character under that Point. If the point is invalid, this method returns -1. 

    p - the Point in local coordinates 

    Returns: the zero-based index of the character under Point p. 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getSelectedText()*

public |java.lang.String| getSelectedText()

Returns the portion of the text that is selected. 


    Returns: the text, null if no selection 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getSelectionEnd()*

public int getSelectionEnd()

Returns the end offset within the selected text. If there is no selection, but 
there is a caret, the start and end offsets will be the same. Return 0 if the 
text is empty, or the caret position if no selection. 


    Returns: the index into teh text of the end of the selection >= 0 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getSelectionStart()*

public int getSelectionStart()

Returns the start offset within the selected text. If there is no selection, 
but there is a caret, the start and end offsets will be the same. Return 0 if 
the text is empty, or the caret position if no selection. 


    Returns: the index into the text of the start of the selection >= 0 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.getTextRange(int,int)*

public |java.lang.String| getTextRange(
  int startIndex,
  int endIndex)

Returns the text string between two indices. 

    startIndex - the starting index in the text 
    endIndex - the ending index in the text 

    Returns: the text string between the indices 
*javax.swing.text.JTextComponent.AccessibleJTextComponent.insertTextAtIndex(int,String)*

public void insertTextAtIndex(
  int index,
  java.lang.String s)

Inserts the specified string at the given index 

    index - the index in the text where the string will be inserted 
    s - the string to insert in the text 

*javax.swing.text.JTextComponent.AccessibleJTextComponent.insertUpdate(DocumentEvent)*

public void insertUpdate(javax.swing.event.DocumentEvent e)

Handles document insert (fire appropriate property change event which is 
AccessibleContext.ACCESSIBLE_TEXT_PROPERTY). This tracks the changed offset via 
the event. 

    e - the DocumentEvent 

*javax.swing.text.JTextComponent.AccessibleJTextComponent.paste(int)*

public void paste(int startIndex)

Pastes the text from the system clipboard into the text starting at the 
specified index. 

    startIndex - the starting index in the text 

*javax.swing.text.JTextComponent.AccessibleJTextComponent.removeUpdate(DocumentEvent)*

public void removeUpdate(javax.swing.event.DocumentEvent e)

Handles document remove (fire appropriate property change event, which is 
AccessibleContext.ACCESSIBLE_TEXT_PROPERTY). This tracks the changed offset via 
the event. 

    e - the DocumentEvent 

*javax.swing.text.JTextComponent.AccessibleJTextComponent.replaceText(int,int,String)*

public void replaceText(
  int startIndex,
  int endIndex,
  java.lang.String s)

Replaces the text between two indices with the specified string. 

    startIndex - the starting index in the text 
    endIndex - the ending index in the text 
    s - the string to replace the text between two indices 

*javax.swing.text.JTextComponent.AccessibleJTextComponent.selectText(int,int)*

public void selectText(
  int startIndex,
  int endIndex)

Selects the text between two indices. 

    startIndex - the starting index in the text 
    endIndex - the ending index in the text 

*javax.swing.text.JTextComponent.AccessibleJTextComponent.setAttributes(int,int,AttributeSet)*

public void setAttributes(
  int startIndex,
  int endIndex,
  javax.swing.text.AttributeSet as)

Sets attributes for the text between two indices. 

    startIndex - the starting index in the text 
    endIndex - the ending index in the text 
    as - the attribute set 

*javax.swing.text.JTextComponent.AccessibleJTextComponent.setTextContents(String)*

public void setTextContents(java.lang.String s)

Sets the text contents to the specified string. 

    s - the string to set the text contents 



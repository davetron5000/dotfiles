*java.util.Queue* *Queue* A collection designed for holding elements prior to pr

public interface interface Queue

  implements |java.util.Collection|

|java.util.Queue_Description|
|java.util.Queue_Fields|
|java.util.Queue_Constructors|
|java.util.Queue_Methods|

================================================================================

*java.util.Queue_Methods*
|java.util.Queue.element()|Retrieves, but does not remove, the head of this que
|java.util.Queue.offer(E)|Inserts the specified element into this queue, if pos
|java.util.Queue.peek()|Retrieves, but does not remove, the head of this queue,
|java.util.Queue.poll()|Retrieves and removes the head of this queue, or null  
|java.util.Queue.remove()|Retrieves and removes the head of this queue.

*java.util.Queue_Description*

A collection designed for holding elements prior to processing. Besides basic 
Collection(|java.util.Collection|) operations, queues provide additional 
insertion, extraction, and inspection operations. 

Queues typically, but do not necessarily, order elements in a FIFO 
(first-in-first-out) manner. Among the exceptions are priority queues, which 
order elements according to a supplied comparator, or the elements' natural 
ordering, and LIFO queues (or stacks) which order the elements LIFO 
(last-in-first-out). Whatever the ordering used, the head of the queue is that 
element which would be removed by a call to (|java.util.Queue|) or 
(|java.util.Queue|) . In a FIFO queue, all new elements are inserted at the 
tail of the queue. Other kinds of queues may use different placement rules. 
Every Queue implementation must specify its ordering properties. 

The offer(|java.util.Queue|) method inserts an element if possible, otherwise 
returning false. This differs from the Collection.add(|java.util.Collection|) 
method, which can fail to add an element only by throwing an unchecked 
exception. The offer method is designed for use when failure is a normal, 
rather than exceptional occurrence, for example, in fixed-capacity (or bounded) 
queues. 

The (|java.util.Queue|) and (|java.util.Queue|) methods remove and return the 
head of the queue. Exactly which element is removed from the queue is a 
function of the queue's ordering policy, which differs from implementation to 
implementation. The remove() and poll() methods differ only in their behavior 
when the queue is empty: the remove() method throws an exception, while the 
poll() method returns null. 

The (|java.util.Queue|) and (|java.util.Queue|) methods return, but do not 
remove, the head of the queue. 

The Queue interface does not define the blocking queue methods, which are 
common in concurrent programming. These methods, which wait for elements to 
appear or for space to become available, are defined in the 
(|java.util.concurrent.BlockingQueue|) interface, which extends this interface. 

Queue implementations generally do not allow insertion of null elements, 
although some implementations, such as (|java.util.LinkedList|) , do not 
prohibit insertion of null. Even in the implementations that permit it, null 
should not be inserted into a Queue, as null is also used as a special return 
value by the poll method to indicate that the queue contains no elements. 

Queue implementations generally do not define element-based versions of methods 
equals and hashCode but instead inherit the identity based versions from class 
Object, because element-based equality is not always well-defined for queues 
with the same elements but different ordering properties. 

This interface is a member of the <a href="/../guide/collections/index.html"> 
Java Collections Framework. 


*java.util.Queue.element()*

public |java.lang.Object| element()

Retrieves, but does not remove, the head of this queue. This method differs 
from the peek method only in that it throws an exception if this queue is 
empty. 


    Returns: the head of this queue. 
*java.util.Queue.offer(E)*

public boolean offer(java.lang.Object o)

Inserts the specified element into this queue, if possible. When using queues 
that may impose insertion restrictions (for example capacity bounds), method 
offer is generally preferable to method (|java.util.Collection|) , which can 
fail to insert an element only by throwing an exception. 

    o - the element to insert. 

    Returns: true if it was possible to add the element to this queue, else false 
*java.util.Queue.peek()*

public |java.lang.Object| peek()

Retrieves, but does not remove, the head of this queue, returning null if this 
queue is empty. 


    Returns: the head of this queue, or null if this queue is empty. 
*java.util.Queue.poll()*

public |java.lang.Object| poll()

Retrieves and removes the head of this queue, or null if this queue is empty. 


    Returns: the head of this queue, or null if this queue is empty. 
*java.util.Queue.remove()*

public |java.lang.Object| remove()

Retrieves and removes the head of this queue. This method differs from the poll 
method in that it throws an exception if this queue is empty. 


    Returns: the head of this queue. 


*javax.swing.plaf.metal.MetalTreeUI* *MetalTreeUI* The metal look and feel imple

public class MetalTreeUI
  extends    |javax.swing.plaf.basic.BasicTreeUI|

|javax.swing.plaf.metal.MetalTreeUI_Description|
|javax.swing.plaf.metal.MetalTreeUI_Fields|
|javax.swing.plaf.metal.MetalTreeUI_Constructors|
|javax.swing.plaf.metal.MetalTreeUI_Methods|

================================================================================

*javax.swing.plaf.metal.MetalTreeUI_Constructors*
|javax.swing.plaf.metal.MetalTreeUI()|

*javax.swing.plaf.metal.MetalTreeUI_Methods*
|javax.swing.plaf.metal.MetalTreeUI.createUI(JComponent)|
|javax.swing.plaf.metal.MetalTreeUI.decodeLineStyle(Object)|this function conve
|javax.swing.plaf.metal.MetalTreeUI.getHorizontalLegBuffer()|
|javax.swing.plaf.metal.MetalTreeUI.installUI(JComponent)|
|javax.swing.plaf.metal.MetalTreeUI.isLocationInExpandControl(int,int,int,int)|
|javax.swing.plaf.metal.MetalTreeUI.paint(Graphics,JComponent)|
|javax.swing.plaf.metal.MetalTreeUI.paintHorizontalPartOfLeg(Graphics,Rectangle,Insets,Rectangle,TreePath,int,boolean,boolean,boolean)|
|javax.swing.plaf.metal.MetalTreeUI.paintHorizontalSeparators(Graphics,JComponent)|
|javax.swing.plaf.metal.MetalTreeUI.paintVerticalPartOfLeg(Graphics,Rectangle,Insets,TreePath)|
|javax.swing.plaf.metal.MetalTreeUI.uninstallUI(JComponent)|

*javax.swing.plaf.metal.MetalTreeUI_Description*

The metal look and feel implementation of TreeUI. 

MetalTreeUI allows for configuring how to visually render the spacing and 
delineation between nodes. The following hints are supported: 



Angled A line is drawn connecting the child to the parent. For handling of the 
root node refer to (|javax.swing.JTree|) and (|javax.swing.JTree|) . 



Horizontal A horizontal line is drawn dividing the children of the root node. 

None Do not draw any visual indication between nodes. 



As it is typically impratical to obtain the TreeUI from the JTree and cast to 
an instance of MetalTreeUI you enable this property via the client property 
JTree.lineStyle. For example, to switch to Horizontal style you would do: 
tree.putClientProperty("JTree.lineStyle", "Horizontal"); 

The default is Angled. 


*javax.swing.plaf.metal.MetalTreeUI()*

public MetalTreeUI()




*javax.swing.plaf.metal.MetalTreeUI.createUI(JComponent)*

public static |javax.swing.plaf.ComponentUI| createUI(javax.swing.JComponent x)




*javax.swing.plaf.metal.MetalTreeUI.decodeLineStyle(Object)*

protected void decodeLineStyle(java.lang.Object lineStyleFlag)

this function converts between the string passed into the client property and 
the internal representation (currently and int) 


*javax.swing.plaf.metal.MetalTreeUI.getHorizontalLegBuffer()*

protected int getHorizontalLegBuffer()




*javax.swing.plaf.metal.MetalTreeUI.installUI(JComponent)*

public void installUI(javax.swing.JComponent c)




*javax.swing.plaf.metal.MetalTreeUI.isLocationInExpandControl(int,int,int,int)*

protected boolean isLocationInExpandControl(
  int row,
  int rowLevel,
  int mouseX,
  int mouseY)




*javax.swing.plaf.metal.MetalTreeUI.paint(Graphics,JComponent)*

public void paint(
  java.awt.Graphics g,
  javax.swing.JComponent c)




*javax.swing.plaf.metal.MetalTreeUI.paintHorizontalPartOfLeg(Graphics,Rectangle,Insets,Rectangle,TreePath,int,boolean,boolean,boolean)*

protected void paintHorizontalPartOfLeg(
  java.awt.Graphics g,
  java.awt.Rectangle clipBounds,
  java.awt.Insets insets,
  java.awt.Rectangle bounds,
  javax.swing.tree.TreePath path,
  int row,
  boolean isExpanded,
  boolean hasBeenExpanded,
  boolean isLeaf)




*javax.swing.plaf.metal.MetalTreeUI.paintHorizontalSeparators(Graphics,JComponent)*

protected void paintHorizontalSeparators(
  java.awt.Graphics g,
  javax.swing.JComponent c)




*javax.swing.plaf.metal.MetalTreeUI.paintVerticalPartOfLeg(Graphics,Rectangle,Insets,TreePath)*

protected void paintVerticalPartOfLeg(
  java.awt.Graphics g,
  java.awt.Rectangle clipBounds,
  java.awt.Insets insets,
  javax.swing.tree.TreePath path)




*javax.swing.plaf.metal.MetalTreeUI.uninstallUI(JComponent)*

public void uninstallUI(javax.swing.JComponent c)






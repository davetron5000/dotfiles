*java.net.SocketOptions* *SocketOptions* Interface of methods to get/set socket 

public interface interface SocketOptions


|java.net.SocketOptions_Description|
|java.net.SocketOptions_Fields|
|java.net.SocketOptions_Constructors|
|java.net.SocketOptions_Methods|

================================================================================

*java.net.SocketOptions_Fields*
|int_java.net.SocketOptions.IP_MULTICAST_IF|
|int_java.net.SocketOptions.IP_MULTICAST_IF2|
|int_java.net.SocketOptions.IP_MULTICAST_LOOP|
|int_java.net.SocketOptions.IP_TOS|
|int_java.net.SocketOptions.SO_BINDADDR|
|int_java.net.SocketOptions.SO_BROADCAST|
|int_java.net.SocketOptions.SO_KEEPALIVE|
|int_java.net.SocketOptions.SO_LINGER|
|int_java.net.SocketOptions.SO_OOBINLINE|
|int_java.net.SocketOptions.SO_RCVBUF|
|int_java.net.SocketOptions.SO_REUSEADDR|
|int_java.net.SocketOptions.SO_SNDBUF|
|int_java.net.SocketOptions.SO_TIMEOUT|
|int_java.net.SocketOptions.TCP_NODELAY|

*java.net.SocketOptions_Methods*
|java.net.SocketOptions.getOption(int)|Fetch the value of an option.
|java.net.SocketOptions.setOption(int,Object)|Enable/disable the option specifi

*java.net.SocketOptions_Description*

Interface of methods to get/set socket options. This interface is implemented 
by: SocketImpl and DatagramSocketImpl. Subclasses of these should override the 
methods of this interface in order to support their own options. 

The methods and constants which specify options in this interface are for 
implementation only. If you're not subclassing SocketImpl or 
DatagramSocketImpl, you won't use these directly. There are type-safe methods 
to get/set each of these options in Socket, ServerSocket, DatagramSocket and 
MulticastSocket. 


*int_java.net.SocketOptions.IP_MULTICAST_IF*

Interface of methods to get/set socket options. This interface is implemented 
by: SocketImpl and DatagramSocketImpl. Subclasses of these should override the 
methods of this interface in order to support their own options. 

The methods and constants which specify options in this interface are for 
implementation only. If you're not subclassing SocketImpl or 
DatagramSocketImpl, you won't use these directly. There are type-safe methods 
to get/set each of these options in Socket, ServerSocket, DatagramSocket and 
MulticastSocket. 


*int_java.net.SocketOptions.IP_MULTICAST_IF2*

Interface of methods to get/set socket options. This interface is implemented 
by: SocketImpl and DatagramSocketImpl. Subclasses of these should override the 
methods of this interface in order to support their own options. 

The methods and constants which specify options in this interface are for 
implementation only. If you're not subclassing SocketImpl or 
DatagramSocketImpl, you won't use these directly. There are type-safe methods 
to get/set each of these options in Socket, ServerSocket, DatagramSocket and 
MulticastSocket. 


*int_java.net.SocketOptions.IP_MULTICAST_LOOP*

Interface of methods to get/set socket options. This interface is implemented 
by: SocketImpl and DatagramSocketImpl. Subclasses of these should override the 
methods of this interface in order to support their own options. 

The methods and constants which specify options in this interface are for 
implementation only. If you're not subclassing SocketImpl or 
DatagramSocketImpl, you won't use these directly. There are type-safe methods 
to get/set each of these options in Socket, ServerSocket, DatagramSocket and 
MulticastSocket. 


*int_java.net.SocketOptions.IP_TOS*

Interface of methods to get/set socket options. This interface is implemented 
by: SocketImpl and DatagramSocketImpl. Subclasses of these should override the 
methods of this interface in order to support their own options. 

The methods and constants which specify options in this interface are for 
implementation only. If you're not subclassing SocketImpl or 
DatagramSocketImpl, you won't use these directly. There are type-safe methods 
to get/set each of these options in Socket, ServerSocket, DatagramSocket and 
MulticastSocket. 


*int_java.net.SocketOptions.SO_BINDADDR*

Interface of methods to get/set socket options. This interface is implemented 
by: SocketImpl and DatagramSocketImpl. Subclasses of these should override the 
methods of this interface in order to support their own options. 

The methods and constants which specify options in this interface are for 
implementation only. If you're not subclassing SocketImpl or 
DatagramSocketImpl, you won't use these directly. There are type-safe methods 
to get/set each of these options in Socket, ServerSocket, DatagramSocket and 
MulticastSocket. 


*int_java.net.SocketOptions.SO_BROADCAST*

Interface of methods to get/set socket options. This interface is implemented 
by: SocketImpl and DatagramSocketImpl. Subclasses of these should override the 
methods of this interface in order to support their own options. 

The methods and constants which specify options in this interface are for 
implementation only. If you're not subclassing SocketImpl or 
DatagramSocketImpl, you won't use these directly. There are type-safe methods 
to get/set each of these options in Socket, ServerSocket, DatagramSocket and 
MulticastSocket. 


*int_java.net.SocketOptions.SO_KEEPALIVE*

Interface of methods to get/set socket options. This interface is implemented 
by: SocketImpl and DatagramSocketImpl. Subclasses of these should override the 
methods of this interface in order to support their own options. 

The methods and constants which specify options in this interface are for 
implementation only. If you're not subclassing SocketImpl or 
DatagramSocketImpl, you won't use these directly. There are type-safe methods 
to get/set each of these options in Socket, ServerSocket, DatagramSocket and 
MulticastSocket. 


*int_java.net.SocketOptions.SO_LINGER*

Interface of methods to get/set socket options. This interface is implemented 
by: SocketImpl and DatagramSocketImpl. Subclasses of these should override the 
methods of this interface in order to support their own options. 

The methods and constants which specify options in this interface are for 
implementation only. If you're not subclassing SocketImpl or 
DatagramSocketImpl, you won't use these directly. There are type-safe methods 
to get/set each of these options in Socket, ServerSocket, DatagramSocket and 
MulticastSocket. 


*int_java.net.SocketOptions.SO_OOBINLINE*

Interface of methods to get/set socket options. This interface is implemented 
by: SocketImpl and DatagramSocketImpl. Subclasses of these should override the 
methods of this interface in order to support their own options. 

The methods and constants which specify options in this interface are for 
implementation only. If you're not subclassing SocketImpl or 
DatagramSocketImpl, you won't use these directly. There are type-safe methods 
to get/set each of these options in Socket, ServerSocket, DatagramSocket and 
MulticastSocket. 


*int_java.net.SocketOptions.SO_RCVBUF*

Interface of methods to get/set socket options. This interface is implemented 
by: SocketImpl and DatagramSocketImpl. Subclasses of these should override the 
methods of this interface in order to support their own options. 

The methods and constants which specify options in this interface are for 
implementation only. If you're not subclassing SocketImpl or 
DatagramSocketImpl, you won't use these directly. There are type-safe methods 
to get/set each of these options in Socket, ServerSocket, DatagramSocket and 
MulticastSocket. 


*int_java.net.SocketOptions.SO_REUSEADDR*

Interface of methods to get/set socket options. This interface is implemented 
by: SocketImpl and DatagramSocketImpl. Subclasses of these should override the 
methods of this interface in order to support their own options. 

The methods and constants which specify options in this interface are for 
implementation only. If you're not subclassing SocketImpl or 
DatagramSocketImpl, you won't use these directly. There are type-safe methods 
to get/set each of these options in Socket, ServerSocket, DatagramSocket and 
MulticastSocket. 


*int_java.net.SocketOptions.SO_SNDBUF*

Interface of methods to get/set socket options. This interface is implemented 
by: SocketImpl and DatagramSocketImpl. Subclasses of these should override the 
methods of this interface in order to support their own options. 

The methods and constants which specify options in this interface are for 
implementation only. If you're not subclassing SocketImpl or 
DatagramSocketImpl, you won't use these directly. There are type-safe methods 
to get/set each of these options in Socket, ServerSocket, DatagramSocket and 
MulticastSocket. 


*int_java.net.SocketOptions.SO_TIMEOUT*

Interface of methods to get/set socket options. This interface is implemented 
by: SocketImpl and DatagramSocketImpl. Subclasses of these should override the 
methods of this interface in order to support their own options. 

The methods and constants which specify options in this interface are for 
implementation only. If you're not subclassing SocketImpl or 
DatagramSocketImpl, you won't use these directly. There are type-safe methods 
to get/set each of these options in Socket, ServerSocket, DatagramSocket and 
MulticastSocket. 


*int_java.net.SocketOptions.TCP_NODELAY*

Interface of methods to get/set socket options. This interface is implemented 
by: SocketImpl and DatagramSocketImpl. Subclasses of these should override the 
methods of this interface in order to support their own options. 

The methods and constants which specify options in this interface are for 
implementation only. If you're not subclassing SocketImpl or 
DatagramSocketImpl, you won't use these directly. There are type-safe methods 
to get/set each of these options in Socket, ServerSocket, DatagramSocket and 
MulticastSocket. 



*java.net.SocketOptions.getOption(int)*

public |java.lang.Object| getOption(int optID)
  throws |java.net.SocketException|
         
Fetch the value of an option. Binary options will return 
java.lang.Boolean(true) if enabled, java.lang.Boolean(false) if disabled, e.g.: 

SocketImpl s; ... Boolean noDelay = (Boolean)(s.getOption(TCP_NODELAY)); if 
(noDelay.booleanValue()) { // true if TCP_NODELAY is enabled... ... } 

For options that take a particular type as a parameter, getOption(int) will 
return the paramter's value, else it will return java.lang.Boolean(false): 

Object o = s.getOption(SO_LINGER); if (o instanceof Integer) { 
System.out.print("Linger time is " + ((Integer)o).intValue()); } else { // the 
true type of o is java.lang.Boolean(false); } 

    optID - an int identifying the option to fetch 

    Returns: the value of the option 
*java.net.SocketOptions.setOption(int,Object)*

public void setOption(
  int optID,
  java.lang.Object value)
  throws |java.net.SocketException|
         
Enable/disable the option specified by optID. If the option is to be enabled, 
and it takes an option-specific "value", this is passed in value. The actual 
type of value is option-specific, and it is an error to pass something that 
isn't of the expected type: 

SocketImpl s; ... s.setOption(SO_LINGER, new Integer(10)); // OK - set 
SO_LINGER w/ timeout of 10 sec. s.setOption(SO_LINGER, new Double(10)); // 
ERROR - expects java.lang.Integer 

If the requested option is binary, it can be set using this method by a 
java.lang.Boolean: 

s.setOption(TCP_NODELAY, new Boolean(true)); // OK - enables TCP_NODELAY, a 
binary option 

Any option can be disabled using this method with a Boolean(false): 

s.setOption(TCP_NODELAY, new Boolean(false)); // OK - disables TCP_NODELAY 
s.setOption(SO_LINGER, new Boolean(false)); // OK - disables SO_LINGER 

For an option that has a notion of on and off, and requires a non-boolean 
parameter, setting its value to anything other than Boolean(false) implicitly 
enables it. 

Throws SocketException if the option is unrecognized, the socket is closed, or 
some low-level error occurred 

    optID - identifies the option 
    value - the parameter of the socket option 



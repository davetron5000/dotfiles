*java.math.RoundingMode* *RoundingMode* Specifies a rounding behavior for numeri

public final class RoundingMode
  extends    |java.lang.Enum|

|java.math.RoundingMode_Description|
|java.math.RoundingMode_Fields|
|java.math.RoundingMode_Constructors|
|java.math.RoundingMode_Methods|

================================================================================

*java.math.RoundingMode_Fields*
|java.math.RoundingMode_java.math.RoundingMode.CEILING|
|java.math.RoundingMode_java.math.RoundingMode.DOWN|
|java.math.RoundingMode_java.math.RoundingMode.FLOOR|
|java.math.RoundingMode_java.math.RoundingMode.HALF_DOWN|
|java.math.RoundingMode_java.math.RoundingMode.HALF_EVEN|
|java.math.RoundingMode_java.math.RoundingMode.HALF_UP|
|java.math.RoundingMode_java.math.RoundingMode.UNNECESSARY|
|java.math.RoundingMode_java.math.RoundingMode.UP|

*java.math.RoundingMode_Methods*
|java.math.RoundingMode.valueOf(int)|Returns the RoundingMode object correspond
|java.math.RoundingMode.valueOf(String)|
|java.math.RoundingMode.values()|

*java.math.RoundingMode_Description*

Specifies a rounding behavior for numerical operations capable of discarding 
precision. Each rounding mode indicates how the least significant returned 
digit of a rounded result is to be calculated. If fewer digits are returned 
than the digits needed to represent the exact numerical result, the discarded 
digits will be referred to as the discarded fraction regardless the digits' 
contribution to the value of the number. In other words, considered as a 
numerical value, the discarded fraction could have an absolute value greater 
than one. 

Each rounding mode description includes a table listing how different two-digit 
decimal values would round to a one digit decimal value under the rounding mode 
in question. The result column in the tables could be gotten by creating a 
BigDecimal number with the specified value, forming a (|java.math.MathContext|) 
object with the proper settings (precision set to 1, and the roundingMode set 
to the rounding mode in question), and calling round(|java.math.BigDecimal|) on 
this number with the proper MathContext. A summary table showing the results of 
these rounding operations for all rounding modes appears below. 

Summary of Rounding Operations Under Different Rounding Modes Result of 
rounding input to one digit with the given rounding mode 

Input Number UP DOWN CEILING FLOOR HALF_UP HALF_DOWN HALF_EVEN UNNECESSARY 

5.5 6 5 6 5 6 5 6 throw ArithmeticException 2.5 3 2 3 2 3 2 2 throw 
ArithmeticException 1.6 2 1 2 1 2 2 2 throw ArithmeticException 1.1 2 1 2 1 1 1 
1 throw ArithmeticException 1.0 1 1 1 1 1 1 1 1 -1.0 -1 -1 -1 -1 -1 -1 -1 -1 
-1.1 -2 -1 -1 -2 -1 -1 -1 throw ArithmeticException -1.6 -2 -1 -1 -2 -2 -2 -2 
throw ArithmeticException -2.5 -3 -2 -2 -3 -3 -2 -2 throw ArithmeticException 
-5.5 -6 -5 -5 -6 -6 -5 -6 throw ArithmeticException 

This enum is intended to replace the integer-based enumeration of rounding mode 
constants in (|java.math.BigDecimal|) ( (|java.math.BigDecimal|) , 
(|java.math.BigDecimal|) , etc. ). 


*java.math.RoundingMode_java.math.RoundingMode.CEILING*

Specifies a rounding behavior for numerical operations capable of discarding 
precision. Each rounding mode indicates how the least significant returned 
digit of a rounded result is to be calculated. If fewer digits are returned 
than the digits needed to represent the exact numerical result, the discarded 
digits will be referred to as the discarded fraction regardless the digits' 
contribution to the value of the number. In other words, considered as a 
numerical value, the discarded fraction could have an absolute value greater 
than one. 

Each rounding mode description includes a table listing how different two-digit 
decimal values would round to a one digit decimal value under the rounding mode 
in question. The result column in the tables could be gotten by creating a 
BigDecimal number with the specified value, forming a (|java.math.MathContext|) 
object with the proper settings (precision set to 1, and the roundingMode set 
to the rounding mode in question), and calling round(|java.math.BigDecimal|) on 
this number with the proper MathContext. A summary table showing the results of 
these rounding operations for all rounding modes appears below. 

Summary of Rounding Operations Under Different Rounding Modes Result of 
rounding input to one digit with the given rounding mode 

Input Number UP DOWN CEILING FLOOR HALF_UP HALF_DOWN HALF_EVEN UNNECESSARY 

5.5 6 5 6 5 6 5 6 throw ArithmeticException 2.5 3 2 3 2 3 2 2 throw 
ArithmeticException 1.6 2 1 2 1 2 2 2 throw ArithmeticException 1.1 2 1 2 1 1 1 
1 throw ArithmeticException 1.0 1 1 1 1 1 1 1 1 -1.0 -1 -1 -1 -1 -1 -1 -1 -1 
-1.1 -2 -1 -1 -2 -1 -1 -1 throw ArithmeticException -1.6 -2 -1 -1 -2 -2 -2 -2 
throw ArithmeticException -2.5 -3 -2 -2 -3 -3 -2 -2 throw ArithmeticException 
-5.5 -6 -5 -5 -6 -6 -5 -6 throw ArithmeticException 

This enum is intended to replace the integer-based enumeration of rounding mode 
constants in (|java.math.BigDecimal|) ( (|java.math.BigDecimal|) , 
(|java.math.BigDecimal|) , etc. ). 


*java.math.RoundingMode_java.math.RoundingMode.DOWN*

Specifies a rounding behavior for numerical operations capable of discarding 
precision. Each rounding mode indicates how the least significant returned 
digit of a rounded result is to be calculated. If fewer digits are returned 
than the digits needed to represent the exact numerical result, the discarded 
digits will be referred to as the discarded fraction regardless the digits' 
contribution to the value of the number. In other words, considered as a 
numerical value, the discarded fraction could have an absolute value greater 
than one. 

Each rounding mode description includes a table listing how different two-digit 
decimal values would round to a one digit decimal value under the rounding mode 
in question. The result column in the tables could be gotten by creating a 
BigDecimal number with the specified value, forming a (|java.math.MathContext|) 
object with the proper settings (precision set to 1, and the roundingMode set 
to the rounding mode in question), and calling round(|java.math.BigDecimal|) on 
this number with the proper MathContext. A summary table showing the results of 
these rounding operations for all rounding modes appears below. 

Summary of Rounding Operations Under Different Rounding Modes Result of 
rounding input to one digit with the given rounding mode 

Input Number UP DOWN CEILING FLOOR HALF_UP HALF_DOWN HALF_EVEN UNNECESSARY 

5.5 6 5 6 5 6 5 6 throw ArithmeticException 2.5 3 2 3 2 3 2 2 throw 
ArithmeticException 1.6 2 1 2 1 2 2 2 throw ArithmeticException 1.1 2 1 2 1 1 1 
1 throw ArithmeticException 1.0 1 1 1 1 1 1 1 1 -1.0 -1 -1 -1 -1 -1 -1 -1 -1 
-1.1 -2 -1 -1 -2 -1 -1 -1 throw ArithmeticException -1.6 -2 -1 -1 -2 -2 -2 -2 
throw ArithmeticException -2.5 -3 -2 -2 -3 -3 -2 -2 throw ArithmeticException 
-5.5 -6 -5 -5 -6 -6 -5 -6 throw ArithmeticException 

This enum is intended to replace the integer-based enumeration of rounding mode 
constants in (|java.math.BigDecimal|) ( (|java.math.BigDecimal|) , 
(|java.math.BigDecimal|) , etc. ). 


*java.math.RoundingMode_java.math.RoundingMode.FLOOR*

Specifies a rounding behavior for numerical operations capable of discarding 
precision. Each rounding mode indicates how the least significant returned 
digit of a rounded result is to be calculated. If fewer digits are returned 
than the digits needed to represent the exact numerical result, the discarded 
digits will be referred to as the discarded fraction regardless the digits' 
contribution to the value of the number. In other words, considered as a 
numerical value, the discarded fraction could have an absolute value greater 
than one. 

Each rounding mode description includes a table listing how different two-digit 
decimal values would round to a one digit decimal value under the rounding mode 
in question. The result column in the tables could be gotten by creating a 
BigDecimal number with the specified value, forming a (|java.math.MathContext|) 
object with the proper settings (precision set to 1, and the roundingMode set 
to the rounding mode in question), and calling round(|java.math.BigDecimal|) on 
this number with the proper MathContext. A summary table showing the results of 
these rounding operations for all rounding modes appears below. 

Summary of Rounding Operations Under Different Rounding Modes Result of 
rounding input to one digit with the given rounding mode 

Input Number UP DOWN CEILING FLOOR HALF_UP HALF_DOWN HALF_EVEN UNNECESSARY 

5.5 6 5 6 5 6 5 6 throw ArithmeticException 2.5 3 2 3 2 3 2 2 throw 
ArithmeticException 1.6 2 1 2 1 2 2 2 throw ArithmeticException 1.1 2 1 2 1 1 1 
1 throw ArithmeticException 1.0 1 1 1 1 1 1 1 1 -1.0 -1 -1 -1 -1 -1 -1 -1 -1 
-1.1 -2 -1 -1 -2 -1 -1 -1 throw ArithmeticException -1.6 -2 -1 -1 -2 -2 -2 -2 
throw ArithmeticException -2.5 -3 -2 -2 -3 -3 -2 -2 throw ArithmeticException 
-5.5 -6 -5 -5 -6 -6 -5 -6 throw ArithmeticException 

This enum is intended to replace the integer-based enumeration of rounding mode 
constants in (|java.math.BigDecimal|) ( (|java.math.BigDecimal|) , 
(|java.math.BigDecimal|) , etc. ). 


*java.math.RoundingMode_java.math.RoundingMode.HALF_DOWN*

Specifies a rounding behavior for numerical operations capable of discarding 
precision. Each rounding mode indicates how the least significant returned 
digit of a rounded result is to be calculated. If fewer digits are returned 
than the digits needed to represent the exact numerical result, the discarded 
digits will be referred to as the discarded fraction regardless the digits' 
contribution to the value of the number. In other words, considered as a 
numerical value, the discarded fraction could have an absolute value greater 
than one. 

Each rounding mode description includes a table listing how different two-digit 
decimal values would round to a one digit decimal value under the rounding mode 
in question. The result column in the tables could be gotten by creating a 
BigDecimal number with the specified value, forming a (|java.math.MathContext|) 
object with the proper settings (precision set to 1, and the roundingMode set 
to the rounding mode in question), and calling round(|java.math.BigDecimal|) on 
this number with the proper MathContext. A summary table showing the results of 
these rounding operations for all rounding modes appears below. 

Summary of Rounding Operations Under Different Rounding Modes Result of 
rounding input to one digit with the given rounding mode 

Input Number UP DOWN CEILING FLOOR HALF_UP HALF_DOWN HALF_EVEN UNNECESSARY 

5.5 6 5 6 5 6 5 6 throw ArithmeticException 2.5 3 2 3 2 3 2 2 throw 
ArithmeticException 1.6 2 1 2 1 2 2 2 throw ArithmeticException 1.1 2 1 2 1 1 1 
1 throw ArithmeticException 1.0 1 1 1 1 1 1 1 1 -1.0 -1 -1 -1 -1 -1 -1 -1 -1 
-1.1 -2 -1 -1 -2 -1 -1 -1 throw ArithmeticException -1.6 -2 -1 -1 -2 -2 -2 -2 
throw ArithmeticException -2.5 -3 -2 -2 -3 -3 -2 -2 throw ArithmeticException 
-5.5 -6 -5 -5 -6 -6 -5 -6 throw ArithmeticException 

This enum is intended to replace the integer-based enumeration of rounding mode 
constants in (|java.math.BigDecimal|) ( (|java.math.BigDecimal|) , 
(|java.math.BigDecimal|) , etc. ). 


*java.math.RoundingMode_java.math.RoundingMode.HALF_EVEN*

Specifies a rounding behavior for numerical operations capable of discarding 
precision. Each rounding mode indicates how the least significant returned 
digit of a rounded result is to be calculated. If fewer digits are returned 
than the digits needed to represent the exact numerical result, the discarded 
digits will be referred to as the discarded fraction regardless the digits' 
contribution to the value of the number. In other words, considered as a 
numerical value, the discarded fraction could have an absolute value greater 
than one. 

Each rounding mode description includes a table listing how different two-digit 
decimal values would round to a one digit decimal value under the rounding mode 
in question. The result column in the tables could be gotten by creating a 
BigDecimal number with the specified value, forming a (|java.math.MathContext|) 
object with the proper settings (precision set to 1, and the roundingMode set 
to the rounding mode in question), and calling round(|java.math.BigDecimal|) on 
this number with the proper MathContext. A summary table showing the results of 
these rounding operations for all rounding modes appears below. 

Summary of Rounding Operations Under Different Rounding Modes Result of 
rounding input to one digit with the given rounding mode 

Input Number UP DOWN CEILING FLOOR HALF_UP HALF_DOWN HALF_EVEN UNNECESSARY 

5.5 6 5 6 5 6 5 6 throw ArithmeticException 2.5 3 2 3 2 3 2 2 throw 
ArithmeticException 1.6 2 1 2 1 2 2 2 throw ArithmeticException 1.1 2 1 2 1 1 1 
1 throw ArithmeticException 1.0 1 1 1 1 1 1 1 1 -1.0 -1 -1 -1 -1 -1 -1 -1 -1 
-1.1 -2 -1 -1 -2 -1 -1 -1 throw ArithmeticException -1.6 -2 -1 -1 -2 -2 -2 -2 
throw ArithmeticException -2.5 -3 -2 -2 -3 -3 -2 -2 throw ArithmeticException 
-5.5 -6 -5 -5 -6 -6 -5 -6 throw ArithmeticException 

This enum is intended to replace the integer-based enumeration of rounding mode 
constants in (|java.math.BigDecimal|) ( (|java.math.BigDecimal|) , 
(|java.math.BigDecimal|) , etc. ). 


*java.math.RoundingMode_java.math.RoundingMode.HALF_UP*

Specifies a rounding behavior for numerical operations capable of discarding 
precision. Each rounding mode indicates how the least significant returned 
digit of a rounded result is to be calculated. If fewer digits are returned 
than the digits needed to represent the exact numerical result, the discarded 
digits will be referred to as the discarded fraction regardless the digits' 
contribution to the value of the number. In other words, considered as a 
numerical value, the discarded fraction could have an absolute value greater 
than one. 

Each rounding mode description includes a table listing how different two-digit 
decimal values would round to a one digit decimal value under the rounding mode 
in question. The result column in the tables could be gotten by creating a 
BigDecimal number with the specified value, forming a (|java.math.MathContext|) 
object with the proper settings (precision set to 1, and the roundingMode set 
to the rounding mode in question), and calling round(|java.math.BigDecimal|) on 
this number with the proper MathContext. A summary table showing the results of 
these rounding operations for all rounding modes appears below. 

Summary of Rounding Operations Under Different Rounding Modes Result of 
rounding input to one digit with the given rounding mode 

Input Number UP DOWN CEILING FLOOR HALF_UP HALF_DOWN HALF_EVEN UNNECESSARY 

5.5 6 5 6 5 6 5 6 throw ArithmeticException 2.5 3 2 3 2 3 2 2 throw 
ArithmeticException 1.6 2 1 2 1 2 2 2 throw ArithmeticException 1.1 2 1 2 1 1 1 
1 throw ArithmeticException 1.0 1 1 1 1 1 1 1 1 -1.0 -1 -1 -1 -1 -1 -1 -1 -1 
-1.1 -2 -1 -1 -2 -1 -1 -1 throw ArithmeticException -1.6 -2 -1 -1 -2 -2 -2 -2 
throw ArithmeticException -2.5 -3 -2 -2 -3 -3 -2 -2 throw ArithmeticException 
-5.5 -6 -5 -5 -6 -6 -5 -6 throw ArithmeticException 

This enum is intended to replace the integer-based enumeration of rounding mode 
constants in (|java.math.BigDecimal|) ( (|java.math.BigDecimal|) , 
(|java.math.BigDecimal|) , etc. ). 


*java.math.RoundingMode_java.math.RoundingMode.UNNECESSARY*

Specifies a rounding behavior for numerical operations capable of discarding 
precision. Each rounding mode indicates how the least significant returned 
digit of a rounded result is to be calculated. If fewer digits are returned 
than the digits needed to represent the exact numerical result, the discarded 
digits will be referred to as the discarded fraction regardless the digits' 
contribution to the value of the number. In other words, considered as a 
numerical value, the discarded fraction could have an absolute value greater 
than one. 

Each rounding mode description includes a table listing how different two-digit 
decimal values would round to a one digit decimal value under the rounding mode 
in question. The result column in the tables could be gotten by creating a 
BigDecimal number with the specified value, forming a (|java.math.MathContext|) 
object with the proper settings (precision set to 1, and the roundingMode set 
to the rounding mode in question), and calling round(|java.math.BigDecimal|) on 
this number with the proper MathContext. A summary table showing the results of 
these rounding operations for all rounding modes appears below. 

Summary of Rounding Operations Under Different Rounding Modes Result of 
rounding input to one digit with the given rounding mode 

Input Number UP DOWN CEILING FLOOR HALF_UP HALF_DOWN HALF_EVEN UNNECESSARY 

5.5 6 5 6 5 6 5 6 throw ArithmeticException 2.5 3 2 3 2 3 2 2 throw 
ArithmeticException 1.6 2 1 2 1 2 2 2 throw ArithmeticException 1.1 2 1 2 1 1 1 
1 throw ArithmeticException 1.0 1 1 1 1 1 1 1 1 -1.0 -1 -1 -1 -1 -1 -1 -1 -1 
-1.1 -2 -1 -1 -2 -1 -1 -1 throw ArithmeticException -1.6 -2 -1 -1 -2 -2 -2 -2 
throw ArithmeticException -2.5 -3 -2 -2 -3 -3 -2 -2 throw ArithmeticException 
-5.5 -6 -5 -5 -6 -6 -5 -6 throw ArithmeticException 

This enum is intended to replace the integer-based enumeration of rounding mode 
constants in (|java.math.BigDecimal|) ( (|java.math.BigDecimal|) , 
(|java.math.BigDecimal|) , etc. ). 


*java.math.RoundingMode_java.math.RoundingMode.UP*

Specifies a rounding behavior for numerical operations capable of discarding 
precision. Each rounding mode indicates how the least significant returned 
digit of a rounded result is to be calculated. If fewer digits are returned 
than the digits needed to represent the exact numerical result, the discarded 
digits will be referred to as the discarded fraction regardless the digits' 
contribution to the value of the number. In other words, considered as a 
numerical value, the discarded fraction could have an absolute value greater 
than one. 

Each rounding mode description includes a table listing how different two-digit 
decimal values would round to a one digit decimal value under the rounding mode 
in question. The result column in the tables could be gotten by creating a 
BigDecimal number with the specified value, forming a (|java.math.MathContext|) 
object with the proper settings (precision set to 1, and the roundingMode set 
to the rounding mode in question), and calling round(|java.math.BigDecimal|) on 
this number with the proper MathContext. A summary table showing the results of 
these rounding operations for all rounding modes appears below. 

Summary of Rounding Operations Under Different Rounding Modes Result of 
rounding input to one digit with the given rounding mode 

Input Number UP DOWN CEILING FLOOR HALF_UP HALF_DOWN HALF_EVEN UNNECESSARY 

5.5 6 5 6 5 6 5 6 throw ArithmeticException 2.5 3 2 3 2 3 2 2 throw 
ArithmeticException 1.6 2 1 2 1 2 2 2 throw ArithmeticException 1.1 2 1 2 1 1 1 
1 throw ArithmeticException 1.0 1 1 1 1 1 1 1 1 -1.0 -1 -1 -1 -1 -1 -1 -1 -1 
-1.1 -2 -1 -1 -2 -1 -1 -1 throw ArithmeticException -1.6 -2 -1 -1 -2 -2 -2 -2 
throw ArithmeticException -2.5 -3 -2 -2 -3 -3 -2 -2 throw ArithmeticException 
-5.5 -6 -5 -5 -6 -6 -5 -6 throw ArithmeticException 

This enum is intended to replace the integer-based enumeration of rounding mode 
constants in (|java.math.BigDecimal|) ( (|java.math.BigDecimal|) , 
(|java.math.BigDecimal|) , etc. ). 



*java.math.RoundingMode.valueOf(int)*

public static |java.math.RoundingMode| valueOf(int rm)

Returns the RoundingMode object corresponding to a legacy integer rounding mode 
constant in (|java.math.BigDecimal|) . 

    rm - legacy integer rounding mode to convert 

    Returns: RoundingMode corresponding to the given integer. 
*java.math.RoundingMode.valueOf(String)*

public static |java.math.RoundingMode| valueOf(java.lang.String name)




*java.math.RoundingMode.values()*

public static final |java.math.RoundingMode| values()






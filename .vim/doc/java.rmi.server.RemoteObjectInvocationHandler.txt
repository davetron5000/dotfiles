*java.rmi.server.RemoteObjectInvocationHandler* *RemoteObjectInvocationHandler* 

public class RemoteObjectInvocationHandler
  extends    |java.rmi.server.RemoteObject|
  implements |java.lang.reflect.InvocationHandler|

|java.rmi.server.RemoteObjectInvocationHandler_Description|
|java.rmi.server.RemoteObjectInvocationHandler_Fields|
|java.rmi.server.RemoteObjectInvocationHandler_Constructors|
|java.rmi.server.RemoteObjectInvocationHandler_Methods|

================================================================================

*java.rmi.server.RemoteObjectInvocationHandler_Constructors*
|java.rmi.server.RemoteObjectInvocationHandler(RemoteRef)|Creates a new RemoteO

*java.rmi.server.RemoteObjectInvocationHandler_Methods*
|java.rmi.server.RemoteObjectInvocationHandler.invoke(Object,Method,Object[])|P

*java.rmi.server.RemoteObjectInvocationHandler_Description*

An implementation of the InvocationHandler interface for use with Java Remote 
Method Invocation (Java RMI). This invocation handler can be used in 
conjunction with a dynamic proxy instance as a replacement for a pregenerated 
stub class. 

Applications are not expected to use this class directly. A remote object 
exported to use a dynamic proxy with (|java.rmi.server.UnicastRemoteObject|) or 
(|java.rmi.activation.Activatable|) has an instance of this class as that 
proxy's invocation handler. 


*java.rmi.server.RemoteObjectInvocationHandler(RemoteRef)*

public RemoteObjectInvocationHandler(java.rmi.server.RemoteRef ref)

Creates a new RemoteObjectInvocationHandler constructed with the specified 
RemoteRef. 

    ref - the remote ref 

*java.rmi.server.RemoteObjectInvocationHandler.invoke(Object,Method,Object[])*

public |java.lang.Object| invoke(
  java.lang.Object proxy,
  java.lang.reflect.Method method,
  java.lang.Object[] args)
  throws |java.lang.Throwable|
         
Processes a method invocation made on the encapsulating proxy instance, proxy, 
and returns the result. 

RemoteObjectInvocationHandler implements this method as follows: 

If method is one of the following methods, it is processed as described below: 



Object.hashCode(|java.lang.Object|) : Returns the hash code value for the 
proxy. 

Object.equals(|java.lang.Object|) : Returns true if the argument (args[0]) is 
an instance of a dynamic proxy class and this invocation handler is equal to 
the invocation handler of that argument, and returns false otherwise. 

Object.toString(|java.lang.Object|) : Returns a string representation of the 
proxy. 

Otherwise, a remote call is made as follows: 

If proxy is not an instance of the interface (|java.rmi.Remote|) , then an 
(|java.lang.IllegalArgumentException|) is thrown. 

Otherwise, the invoke(|java.rmi.server.RemoteRef|) method is invoked on this 
invocation handler's RemoteRef, passing proxy, method, args, and the method 
hash (defined in section 8.3 of the "Java Remote Method Invocation (RMI) 
Specification") for method, and the result is returned. 

If an exception is thrown by RemoteRef.invoke and that exception is a checked 
exception that is not assignable to any exception in the throws clause of the 
method implemented by the proxy's class, then that exception is wrapped in an 
(|java.rmi.UnexpectedException|) and the wrapped exception is thrown. 
Otherwise, the exception thrown by invoke is thrown by this method. 

The semantics of this method are unspecified if the arguments could not have 
been produced by an instance of some valid dynamic proxy class containing this 
invocation handler. 

    proxy - the proxy instance that the method was invoked on 
    method - the Method instance corresponding to the interface method invoked on the proxy 
       instance 
    args - an array of objects containing the values of the arguments passed in the method 
       invocation on the proxy instance, or null if the method takes no 
       arguments 

    Returns: the value to return from the method invocation on the proxy instance 


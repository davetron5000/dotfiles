*java.sql.Statement* *Statement* The object used for executing a static SQL statement
 and returning the results it produces.

public interface interface Statement


|java.sql.Statement_Description|
|java.sql.Statement_Fields|
|java.sql.Statement_Constructors|
|java.sql.Statement_Methods|

====================================================================================================================================================================================

*java.sql.Statement_Fields*
|int_java.sql.Statement.CLOSE_ALL_RESULTS|
|int_java.sql.Statement.CLOSE_CURRENT_RESULT|
|int_java.sql.Statement.EXECUTE_FAILED|
|int_java.sql.Statement.KEEP_CURRENT_RESULT|
|int_java.sql.Statement.NO_GENERATED_KEYS|
|int_java.sql.Statement.RETURN_GENERATED_KEYS|
|int_java.sql.Statement.SUCCESS_NO_INFO|

*java.sql.Statement_Methods*
|java.sql.Statement.addBatch(String)|Adds the given SQL command to the current list of commmands for this  Statement object.
|java.sql.Statement.cancel()|Cancels this Statement object if both the DBMS and  driver support aborting an SQL statement.
|java.sql.Statement.clearBatch()|Empties this Statement object's current list of   SQL commands.
|java.sql.Statement.clearWarnings()|Clears all the warnings reported on this Statement  object.
|java.sql.Statement.close()|Releases this Statement object's database   and JDBC resources immediately instead of waiting for  this to happen when it is automatically closed.
|java.sql.Statement.execute(String)|Executes the given SQL statement, which may return multiple results.
|java.sql.Statement.execute(String,int)|Executes the given SQL statement, which may return multiple results,  and signals the driver that any  auto-generated keys should be made a
|java.sql.Statement.execute(String,int[])|Executes the given SQL statement, which may return multiple results,  and signals the driver that the  auto-generated keys indicated in t
|java.sql.Statement.execute(String,String[])|Executes the given SQL statement, which may return multiple results,  and signals the driver that the  auto-generated keys indicated i
|java.sql.Statement.executeBatch()|Submits a batch of commands to the database for execution and  if all commands execute successfully, returns an array of update counts.
|java.sql.Statement.executeQuery(String)|Executes the given SQL statement, which returns a single   ResultSet object.
|java.sql.Statement.executeUpdate(String)|Executes the given SQL statement, which may be an INSERT,   UPDATE, or DELETE statement or an  SQL statement that returns nothing, such a
|java.sql.Statement.executeUpdate(String,int)|Executes the given SQL statement and signals the driver with the  given flag about whether the  auto-generated keys produced by this 
|java.sql.Statement.executeUpdate(String,int[])|Executes the given SQL statement and signals the driver that the  auto-generated keys indicated in the given array should be made a
|java.sql.Statement.executeUpdate(String,String[])|Executes the given SQL statement and signals the driver that the  auto-generated keys indicated in the given array should be mad
|java.sql.Statement.getConnection()|Retrieves the Connection object  that produced this Statement object.
|java.sql.Statement.getFetchDirection()|Retrieves the direction for fetching rows from  database tables that is the default for result sets  generated from this Statement object.
|java.sql.Statement.getFetchSize()|Retrieves the number of result set rows that is the default   fetch size for ResultSet objects  generated from this Statement object.
|java.sql.Statement.getGeneratedKeys()|Retrieves any auto-generated keys created as a result of executing this  Statement object.
|java.sql.Statement.getMaxFieldSize()|Retrieves the maximum number of bytes that can be  returned for character and binary column values in a ResultSet   object produced by this S
|java.sql.Statement.getMaxRows()|Retrieves the maximum number of rows that a  ResultSet object produced by this  Statement object can contain.
|java.sql.Statement.getMoreResults()|Moves to this Statement object's next result, returns  true if it is a ResultSet object, and  implicitly closes any current ResultSet  object(
|java.sql.Statement.getMoreResults(int)|Moves to this Statement object's next result, deals with  any current ResultSet object(s) according  to the instructions  specified by the 
|java.sql.Statement.getQueryTimeout()|Retrieves the number of seconds the driver will  wait for a Statement object to execute.
|java.sql.Statement.getResultSet()|Retrieves the current result as a ResultSet object.
|java.sql.Statement.getResultSetConcurrency()|Retrieves the result set concurrency for ResultSet objects  generated by this Statement object.
|java.sql.Statement.getResultSetHoldability()|Retrieves the result set holdability for ResultSet objects  generated by this Statement object.
|java.sql.Statement.getResultSetType()|Retrieves the result set type for ResultSet objects  generated by this Statement object.
|java.sql.Statement.getUpdateCount()|Retrieves the current result as an update count;   if the result is a ResultSet object or there are no more results, -1   is returned.
|java.sql.Statement.getWarnings()|Retrieves the first warning reported by calls on this Statement object.
|java.sql.Statement.setCursorName(String)|Sets the SQL cursor name to the given String, which   will be used by subsequent Statement object   execute methods.
|java.sql.Statement.setEscapeProcessing(boolean)|Sets escape processing on or off.
|java.sql.Statement.setFetchDirection(int)|Gives the driver a hint as to the direction in which  rows will be processed in ResultSet  objects created using this Statement object.
|java.sql.Statement.setFetchSize(int)|Gives the JDBC driver a hint as to the number of rows that should   be fetched from the database when more rows are needed.
|java.sql.Statement.setMaxFieldSize(int)|Sets the limit for the maximum number of bytes in a ResultSet  column storing character or binary values to  the given number of bytes.
|java.sql.Statement.setMaxRows(int)|Sets the limit for the maximum number of rows that any  ResultSet object can contain to the given number.
|java.sql.Statement.setQueryTimeout(int)|Sets the number of seconds the driver will wait for a   Statement object to execute to the given number of seconds.

*java.sql.Statement_Description*

The object used for executing a static SQL statement and returning the results it produces. 

By default, only one ResultSet object per Statement object can be open at the same time. Therefore, if the reading of one ResultSet object is interleaved with the reading of 
another, each must have been generated by different Statement objects. All execution methods in the Statement interface implicitly close a statment's current ResultSet object if 
an open one exists. 



*int_java.sql.Statement.CLOSE_ALL_RESULTS*

The constant indicating that all ResultSet objects that have previously been kept open should be closed when calling getMoreResults. 


*int_java.sql.Statement.CLOSE_CURRENT_RESULT*

The constant indicating that the current ResultSet object should be closed when calling getMoreResults. 


*int_java.sql.Statement.EXECUTE_FAILED*

The constant indicating that an error occured while executing a batch statement. 


*int_java.sql.Statement.KEEP_CURRENT_RESULT*

The constant indicating that the current ResultSet object should not be closed when calling getMoreResults. 


*int_java.sql.Statement.NO_GENERATED_KEYS*

The constant indicating that generated keys should not be made available for retrieval. 


*int_java.sql.Statement.RETURN_GENERATED_KEYS*

The constant indicating that generated keys should be made available for retrieval. 


*int_java.sql.Statement.SUCCESS_NO_INFO*

The constant indicating that a batch statement executed successfully but that no count of the number of rows it affected is available. 



*java.sql.Statement.addBatch(String)*

public void addBatch(java.lang.String sql)
  throws |java.sql.SQLException|
         
Adds the given SQL command to the current list of commmands for this Statement object. The commands in this list can be executed as a batch by calling the method executeBatch. 

NOTE: This method is optional. 


    sql - typically this is a static SQL INSERT or UPDATE statement 

*java.sql.Statement.cancel()*

public void cancel()
  throws |java.sql.SQLException|
         
Cancels this Statement object if both the DBMS and driver support aborting an SQL statement. This method can be used by one thread to cancel a statement that is being executed by 
another thread. 



*java.sql.Statement.clearBatch()*

public void clearBatch()
  throws |java.sql.SQLException|
         
Empties this Statement object's current list of SQL commands. 

NOTE: This method is optional. 



*java.sql.Statement.clearWarnings()*

public void clearWarnings()
  throws |java.sql.SQLException|
         
Clears all the warnings reported on this Statement object. After a call to this method, the method getWarnings will return null until a new warning is reported for this Statement 
object. 



*java.sql.Statement.close()*

public void close()
  throws |java.sql.SQLException|
         
Releases this Statement object's database and JDBC resources immediately instead of waiting for this to happen when it is automatically closed. It is generally good practice to 
release resources as soon as you are finished with them to avoid tying up database resources. 

Calling the method close on a Statement object that is already closed has no effect. 

Note: A Statement object is automatically closed when it is garbage collected. When a Statement object is closed, its current ResultSet object, if one exists, is also closed. 



*java.sql.Statement.execute(String)*

public boolean execute(java.lang.String sql)
  throws |java.sql.SQLException|
         
Executes the given SQL statement, which may return multiple results. In some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts. 
Normally you can ignore this unless you are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. 

The execute method executes an SQL statement and indicates the form of the first result. You must then use the methods getResultSet or getUpdateCount to retrieve the result, and 
getMoreResults to move to any subsequent result(s). 


    sql - any SQL statement 

    Returns: true if the first result is a ResultSet object; false if it is an update count or there are no results 

*java.sql.Statement.execute(String,int)*

public boolean execute(
  java.lang.String sql,
  int autoGeneratedKeys)
  throws |java.sql.SQLException|
         
Executes the given SQL statement, which may return multiple results, and signals the driver that any auto-generated keys should be made available for retrieval. The driver will 
ignore this signal if the SQL statement is not an INSERT statement. 

In some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you are (1) executing a stored 
procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. 

The execute method executes an SQL statement and indicates the form of the first result. You must then use the methods getResultSet or getUpdateCount to retrieve the result, and 
getMoreResults to move to any subsequent result(s). 


    sql - any SQL statement 
    autoGeneratedKeys - a constant indicating whether auto-generated keys should be made available for retrieval using the method getGeneratedKeys; one of the following constants: 
       Statement.RETURN_GENERATED_KEYS or Statement.NO_GENERATED_KEYS 

    Returns: true if the first result is a ResultSet object; false if it is an update count or there are no results 

*java.sql.Statement.execute(String,int[])*

public boolean execute(
  java.lang.String sql,
  int[] columnIndexes)
  throws |java.sql.SQLException|
         
Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for 
retrieval. This array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array 
if the given SQL statement is not an INSERT statement. 

Under some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you are (1) executing a stored 
procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. 

The execute method executes an SQL statement and indicates the form of the first result. You must then use the methods getResultSet or getUpdateCount to retrieve the result, and 
getMoreResults to move to any subsequent result(s). 


    sql - any SQL statement 
    columnIndexes - an array of the indexes of the columns in the inserted row that should be made available for retrieval by a call to the method getGeneratedKeys 

    Returns: true if the first result is a ResultSet object; false if it is an update count or there are no results 

*java.sql.Statement.execute(String,String[])*

public boolean execute(
  java.lang.String sql,
  java.lang.String[] columnNames)
  throws |java.sql.SQLException|
         
Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for 
retrieval. This array contains the names of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if 
the given SQL statement is not an INSERT statement. 

In some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you are (1) executing a stored 
procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. 

The execute method executes an SQL statement and indicates the form of the first result. You must then use the methods getResultSet or getUpdateCount to retrieve the result, and 
getMoreResults to move to any subsequent result(s). 


    sql - any SQL statement 
    columnNames - an array of the names of the columns in the inserted row that should be made available for retrieval by a call to the method getGeneratedKeys 

    Returns: true if the next result is a ResultSet object; false if it is an update count or there are no more results 

*java.sql.Statement.executeBatch()*

public int[] executeBatch()
  throws |java.sql.SQLException|
         
Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts. The int elements of the array that is 
returned are ordered to correspond to the commands in the batch, which are ordered according to the order in which they were added to the batch. The elements in the array returned 
by the method executeBatch may be one of the following: 

A number greater than or equal to zero -- indicates that the command was processed successfully and is an update count giving the number of rows in the database that were affected 
by the command's execution A value of SUCCESS_NO_INFO -- indicates that the command was processed successfully but that the number of rows affected is unknown 

If one of the commands in a batch update fails to execute properly, this method throws a BatchUpdateException, and a JDBC driver may or may not continue to process the remaining 
commands in the batch. However, the driver's behavior must be consistent with a particular DBMS, either always continuing to process commands or never continuing to process 
commands. If the driver continues processing after a failure, the array returned by the method BatchUpdateException.getUpdateCounts will contain as many elements as there are 
commands in the batch, and at least one of the elements will be the following: 

A value of EXECUTE_FAILED -- indicates that the command failed to execute successfully and occurs only if a driver continues to process commands after a command fails 

A driver is not required to implement this method. The possible implementations and return values have been modified in the Java 2 SDK, Standard Edition, version 1.3 to 
accommodate the option of continuing to proccess commands in a batch update after a BatchUpdateException obejct has been thrown. 



    Returns: an array of update counts containing one element for each command in the batch. The elements of the array are ordered according to the order in which commands were added to the 
             batch. 

*java.sql.Statement.executeQuery(String)*

public |java.sql.ResultSet| executeQuery(java.lang.String sql)
  throws |java.sql.SQLException|
         
Executes the given SQL statement, which returns a single ResultSet object. 


    sql - an SQL statement to be sent to the database, typically a static SQL SELECT statement 

    Returns: a ResultSet object that contains the data produced by the given query; never null 

*java.sql.Statement.executeUpdate(String)*

public int executeUpdate(java.lang.String sql)
  throws |java.sql.SQLException|
         
Executes the given SQL statement, which may be an INSERT, UPDATE, or DELETE statement or an SQL statement that returns nothing, such as an SQL DDL statement. 


    sql - an SQL INSERT, UPDATE or DELETE statement or an SQL statement that returns nothing 

    Returns: either the row count for INSERT, UPDATE or DELETE statements, or 0 for SQL statements that return nothing 

*java.sql.Statement.executeUpdate(String,int)*

public int executeUpdate(
  java.lang.String sql,
  int autoGeneratedKeys)
  throws |java.sql.SQLException|
         
Executes the given SQL statement and signals the driver with the given flag about whether the auto-generated keys produced by this Statement object should be made available for 
retrieval. 


    sql - must be an SQL INSERT, UPDATE or DELETE statement or an SQL statement that returns nothing 
    autoGeneratedKeys - a flag indicating whether auto-generated keys should be made available for retrieval; one of the following constants: Statement.RETURN_GENERATED_KEYS Statement.NO_GENERATED_KEYS 

    Returns: either the row count for INSERT, UPDATE or DELETE statements, or 0 for SQL statements that return nothing 

*java.sql.Statement.executeUpdate(String,int[])*

public int executeUpdate(
  java.lang.String sql,
  int[] columnIndexes)
  throws |java.sql.SQLException|
         
Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. The driver will ignore 
the array if the SQL statement is not an INSERT statement. 


    sql - an SQL INSERT, UPDATE or DELETE statement or an SQL statement that returns nothing, such as an SQL DDL statement 
    columnIndexes - an array of column indexes indicating the columns that should be returned from the inserted row 

    Returns: either the row count for INSERT, UPDATE, or DELETE statements, or 0 for SQL statements that return nothing 

*java.sql.Statement.executeUpdate(String,String[])*

public int executeUpdate(
  java.lang.String sql,
  java.lang.String[] columnNames)
  throws |java.sql.SQLException|
         
Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. The driver will ignore 
the array if the SQL statement is not an INSERT statement. 


    sql - an SQL INSERT, UPDATE or DELETE statement or an SQL statement that returns nothing 
    columnNames - an array of the names of the columns that should be returned from the inserted row 

    Returns: either the row count for INSERT, UPDATE, or DELETE statements, or 0 for SQL statements that return nothing 

*java.sql.Statement.getConnection()*

public |java.sql.Connection| getConnection()
  throws |java.sql.SQLException|
         
Retrieves the Connection object that produced this Statement object. 



    Returns: the connection that produced this statement 

*java.sql.Statement.getFetchDirection()*

public int getFetchDirection()
  throws |java.sql.SQLException|
         
Retrieves the direction for fetching rows from database tables that is the default for result sets generated from this Statement object. If this Statement object has not set a 
fetch direction by calling the method setFetchDirection, the return value is implementation-specific. 



    Returns: the default fetch direction for result sets generated from this Statement object 

*java.sql.Statement.getFetchSize()*

public int getFetchSize()
  throws |java.sql.SQLException|
         
Retrieves the number of result set rows that is the default fetch size for ResultSet objects generated from this Statement object. If this Statement object has not set a fetch 
size by calling the method setFetchSize, the return value is implementation-specific. 



    Returns: the default fetch size for result sets generated from this Statement object 

*java.sql.Statement.getGeneratedKeys()*

public |java.sql.ResultSet| getGeneratedKeys()
  throws |java.sql.SQLException|
         
Retrieves any auto-generated keys created as a result of executing this Statement object. If this Statement object did not generate any keys, an empty ResultSet object is 
returned. 



    Returns: a ResultSet object containing the auto-generated key(s) generated by the execution of this Statement object 

*java.sql.Statement.getMaxFieldSize()*

public int getMaxFieldSize()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of bytes that can be returned for character and binary column values in a ResultSet object produced by this Statement object. This limit applies only 
to BINARY, VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and LONGVARCHAR columns. If the limit is exceeded, the excess data is silently discarded. 



    Returns: the current column size limit for columns storing character and binary values; zero means there is no limit 

*java.sql.Statement.getMaxRows()*

public int getMaxRows()
  throws |java.sql.SQLException|
         
Retrieves the maximum number of rows that a ResultSet object produced by this Statement object can contain. If this limit is exceeded, the excess rows are silently dropped. 



    Returns: the current maximum number of rows for a ResultSet object produced by this Statement object; zero means there is no limit 

*java.sql.Statement.getMoreResults()*

public boolean getMoreResults()
  throws |java.sql.SQLException|
         
Moves to this Statement object's next result, returns true if it is a ResultSet object, and implicitly closes any current ResultSet object(s) obtained with the method 
getResultSet. 

There are no more results when the following is true: 

// stmt is a Statement object ((stmt.getMoreResults() == false) (stmt.getUpdateCount() == -1)) 



    Returns: true if the next result is a ResultSet object; false if it is an update count or there are no more results 

*java.sql.Statement.getMoreResults(int)*

public boolean getMoreResults(int current)
  throws |java.sql.SQLException|
         
Moves to this Statement object's next result, deals with any current ResultSet object(s) according to the instructions specified by the given flag, and returns true if the next 
result is a ResultSet object. 

There are no more results when the following is true: 

// stmt is a Statement object ((stmt.getMoreResults() == false) (stmt.getUpdateCount() == -1)) 


    current - one of the following Statement constants indicating what should happen to current ResultSet objects obtained using the method getResultSet: Statement.CLOSE_CURRENT_RESULT, 
       Statement.KEEP_CURRENT_RESULT, or Statement.CLOSE_ALL_RESULTS 

    Returns: true if the next result is a ResultSet object; false if it is an update count or there are no more results 

*java.sql.Statement.getQueryTimeout()*

public int getQueryTimeout()
  throws |java.sql.SQLException|
         
Retrieves the number of seconds the driver will wait for a Statement object to execute. If the limit is exceeded, a SQLException is thrown. 



    Returns: the current query timeout limit in seconds; zero means there is no limit 

*java.sql.Statement.getResultSet()*

public |java.sql.ResultSet| getResultSet()
  throws |java.sql.SQLException|
         
Retrieves the current result as a ResultSet object. This method should be called only once per result. 



    Returns: the current result as a ResultSet object or null if the result is an update count or there are no more results 

*java.sql.Statement.getResultSetConcurrency()*

public int getResultSetConcurrency()
  throws |java.sql.SQLException|
         
Retrieves the result set concurrency for ResultSet objects generated by this Statement object. 



    Returns: either ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE 

*java.sql.Statement.getResultSetHoldability()*

public int getResultSetHoldability()
  throws |java.sql.SQLException|
         
Retrieves the result set holdability for ResultSet objects generated by this Statement object. 



    Returns: either ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT 

*java.sql.Statement.getResultSetType()*

public int getResultSetType()
  throws |java.sql.SQLException|
         
Retrieves the result set type for ResultSet objects generated by this Statement object. 



    Returns: one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE 

*java.sql.Statement.getUpdateCount()*

public int getUpdateCount()
  throws |java.sql.SQLException|
         
Retrieves the current result as an update count; if the result is a ResultSet object or there are no more results, -1 is returned. This method should be called only once per 
result. 



    Returns: the current result as an update count; -1 if the current result is a ResultSet object or there are no more results 

*java.sql.Statement.getWarnings()*

public |java.sql.SQLWarning| getWarnings()
  throws |java.sql.SQLException|
         
Retrieves the first warning reported by calls on this Statement object. Subsequent Statement object warnings will be chained to this SQLWarning object. 

The warning chain is automatically cleared each time a statement is (re)executed. This method may not be called on a closed Statement object; doing so will cause an SQLException 
to be thrown. 

Note: If you are processing a ResultSet object, any warnings associated with reads on that ResultSet object will be chained on it rather than on the Statement object that produced 
it. 



    Returns: the first SQLWarning object or null if there are no warnings 

*java.sql.Statement.setCursorName(String)*

public void setCursorName(java.lang.String name)
  throws |java.sql.SQLException|
         
Sets the SQL cursor name to the given String, which will be used by subsequent Statement object execute methods. This name can then be used in SQL positioned update or delete 
statements to identify the current row in the ResultSet object generated by this statement. If the database does not support positioned update/delete, this method is a noop. To 
insure that a cursor has the proper isolation level to support updates, the cursor's SELECT statement should have the form SELECT FOR UPDATE. If FOR UPDATE is not present, 
positioned updates may fail. 

Note: By definition, the execution of positioned updates and deletes must be done by a different Statement object than the one that generated the ResultSet object being used for 
positioning. Also, cursor names must be unique within a connection. 


    name - the new cursor name, which must be unique within a connection 

*java.sql.Statement.setEscapeProcessing(boolean)*

public void setEscapeProcessing(boolean enable)
  throws |java.sql.SQLException|
         
Sets escape processing on or off. If escape scanning is on (the default), the driver will do escape substitution before sending the SQL statement to the database. 

Note: Since prepared statements have usually been parsed prior to making this call, disabling escape processing for PreparedStatements objects will have no effect. 


    enable - true to enable escape processing; false to disable it 

*java.sql.Statement.setFetchDirection(int)*

public void setFetchDirection(int direction)
  throws |java.sql.SQLException|
         
Gives the driver a hint as to the direction in which rows will be processed in ResultSet objects created using this Statement object. The default value is ResultSet.FETCH_FORWARD. 

Note that this method sets the default fetch direction for result sets generated by this Statement object. Each result set has its own methods for getting and setting its own 
fetch direction. 


    direction - the initial direction for processing rows 

*java.sql.Statement.setFetchSize(int)*

public void setFetchSize(int rows)
  throws |java.sql.SQLException|
         
Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed. The number of rows specified affects only result sets 
created using this statement. If the value specified is zero, then the hint is ignored. The default value is zero. 


    rows - the number of rows to fetch 

*java.sql.Statement.setMaxFieldSize(int)*

public void setMaxFieldSize(int max)
  throws |java.sql.SQLException|
         
Sets the limit for the maximum number of bytes in a ResultSet column storing character or binary values to the given number of bytes. This limit applies only to BINARY, VARBINARY, 
LONGVARBINARY, CHAR, VARCHAR, and LONGVARCHAR fields. If the limit is exceeded, the excess data is silently discarded. For maximum portability, use values greater than 256. 


    max - the new column size limit in bytes; zero means there is no limit 

*java.sql.Statement.setMaxRows(int)*

public void setMaxRows(int max)
  throws |java.sql.SQLException|
         
Sets the limit for the maximum number of rows that any ResultSet object can contain to the given number. If the limit is exceeded, the excess rows are silently dropped. 


    max - the new max rows limit; zero means there is no limit 

*java.sql.Statement.setQueryTimeout(int)*

public void setQueryTimeout(int seconds)
  throws |java.sql.SQLException|
         
Sets the number of seconds the driver will wait for a Statement object to execute to the given number of seconds. If the limit is exceeded, an SQLException is thrown. 


    seconds - the new query timeout limit in seconds; zero means there is no limit 



*java.text.DateFormat* *DateFormat* DateFormat is an abstract class for date/time formatting subclasses which
 formats and parses dates or time in a language-independent manner.

public abstract class DateFormat
  extends    |java.text.Format|

|java.text.DateFormat_Description|
|java.text.DateFormat_Fields|
|java.text.DateFormat_Constructors|
|java.text.DateFormat_Methods|

====================================================================================================================================================================================

*java.text.DateFormat_Fields*
|int_java.text.DateFormat.AM_PM_FIELD|
|java.util.Calendar_java.text.DateFormat.calendar|
|int_java.text.DateFormat.DATE_FIELD|
|int_java.text.DateFormat.DAY_OF_WEEK_FIELD|
|int_java.text.DateFormat.DAY_OF_WEEK_IN_MONTH_FIELD|
|int_java.text.DateFormat.DAY_OF_YEAR_FIELD|
|int_java.text.DateFormat.DEFAULT|
|int_java.text.DateFormat.ERA_FIELD|
|int_java.text.DateFormat.FULL|
|int_java.text.DateFormat.HOUR_OF_DAY0_FIELD|
|int_java.text.DateFormat.HOUR_OF_DAY1_FIELD|
|int_java.text.DateFormat.HOUR0_FIELD|
|int_java.text.DateFormat.HOUR1_FIELD|
|int_java.text.DateFormat.LONG|
|int_java.text.DateFormat.MEDIUM|
|int_java.text.DateFormat.MILLISECOND_FIELD|
|int_java.text.DateFormat.MINUTE_FIELD|
|int_java.text.DateFormat.MONTH_FIELD|
|java.text.NumberFormat_java.text.DateFormat.numberFormat|
|int_java.text.DateFormat.SECOND_FIELD|
|int_java.text.DateFormat.SHORT|
|int_java.text.DateFormat.TIMEZONE_FIELD|
|int_java.text.DateFormat.WEEK_OF_MONTH_FIELD|
|int_java.text.DateFormat.WEEK_OF_YEAR_FIELD|
|int_java.text.DateFormat.YEAR_FIELD|

*java.text.DateFormat_Constructors*
|java.text.DateFormat()|Create a new date format.

*java.text.DateFormat_Methods*
|java.text.DateFormat.clone()|Overrides Cloneable
|java.text.DateFormat.equals(Object)|Overrides equals
|java.text.DateFormat.format(Date)|Formats a Date into a date/time string.
|java.text.DateFormat.format(Date,StringBuffer,FieldPosition)|Formats a Date into a date/time string.
|java.text.DateFormat.format(Object,StringBuffer,FieldPosition)|Overrides Format.
|java.text.DateFormat.getAvailableLocales()|Returns an array of all locales for which the  get*Instance methods of this class can return  localized instances.
|java.text.DateFormat.getCalendar()|Gets the calendar associated with this date/time formatter.
|java.text.DateFormat.getDateInstance()|Gets the date formatter with the default formatting style  for the default locale.
|java.text.DateFormat.getDateInstance(int)|Gets the date formatter with the given formatting style  for the default locale.
|java.text.DateFormat.getDateInstance(int,Locale)|Gets the date formatter with the given formatting style  for the given locale.
|java.text.DateFormat.getDateTimeInstance()|Gets the date/time formatter with the default formatting style  for the default locale.
|java.text.DateFormat.getDateTimeInstance(int,int)|Gets the date/time formatter with the given date and time  formatting styles for the default locale.
|java.text.DateFormat.getDateTimeInstance(int,int,Locale)|Gets the date/time formatter with the given formatting styles  for the given locale.
|java.text.DateFormat.getInstance()|Get a default date/time formatter that uses the SHORT style for both the  date and the time.
|java.text.DateFormat.getNumberFormat()|Gets the number formatter which this date/time formatter uses to  format and parse a time.
|java.text.DateFormat.getTimeInstance()|Gets the time formatter with the default formatting style  for the default locale.
|java.text.DateFormat.getTimeInstance(int)|Gets the time formatter with the given formatting style  for the default locale.
|java.text.DateFormat.getTimeInstance(int,Locale)|Gets the time formatter with the given formatting style  for the given locale.
|java.text.DateFormat.getTimeZone()|Gets the time zone.
|java.text.DateFormat.hashCode()|Overrides hashCode
|java.text.DateFormat.isLenient()|Tell whether date/time parsing is to be lenient.
|java.text.DateFormat.parse(String)|Parses text from the beginning of the given string to produce a date.
|java.text.DateFormat.parse(String,ParsePosition)|Parse a date/time string according to the given parse position.
|java.text.DateFormat.parseObject(String,ParsePosition)|Parses text from a string to produce a Date.
|java.text.DateFormat.setCalendar(Calendar)|Set the calendar to be used by this date format.
|java.text.DateFormat.setLenient(boolean)|Specify whether or not date/time parsing is to be lenient.
|java.text.DateFormat.setNumberFormat(NumberFormat)|Allows you to set the number formatter.
|java.text.DateFormat.setTimeZone(TimeZone)|Sets the time zone for the calendar of this DateFormat object.

*java.text.DateFormat_Description*

DateFormat is an abstract class for date/time formatting subclasses which formats and parses dates or time in a language-independent manner. The date/time formatting subclass, 
such as SimpleDateFormat, allows for formatting (i.e., date -> text), parsing (text -> date), and normalization. The date is represented as a Date object or as the milliseconds 
since January 1, 1970, 00:00:00 GMT. 

DateFormat provides many class methods for obtaining default date/time formatters based on the default or a given locale and a number of formatting styles. The formatting styles 
include FULL, LONG, MEDIUM, and SHORT. More detail and examples of using these styles are provided in the method descriptions. 

DateFormat helps you to format and parse dates for any locale. Your code can be completely independent of the locale conventions for months, days of the week, or even the calendar 
format: lunar vs. solar. 

To format a date for the current Locale, use one of the static factory methods: 

myString = DateFormat.getDateInstance().format(myDate); 

If you are formatting multiple dates, it is more efficient to get the format and use it multiple times so that the system doesn't have to fetch the information about the local 
language and country conventions multiple times. 

DateFormat df = DateFormat.getDateInstance(); for (int i = 0; i To format a date for a different Locale, specify it in the call to getDateInstance(). 

DateFormat df = DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE); 

You can use a DateFormat to parse also. 

myDate = df.parse(myString); 

Use getDateInstance to get the normal date format for that country. There are other static factory methods available. Use getTimeInstance to get the time format for that country. 
Use getDateTimeInstance to get a date and time format. You can pass in different options to these factory methods to control the length of the result; from SHORT to MEDIUM to LONG 
to FULL. The exact result depends on the locale, but generally: SHORT is completely numeric, such as 12.13.52 or 3:30pm MEDIUM is longer, such as Jan 12, 1952 LONG is longer, such 
as January 12, 1952 or 3:30:32pm FULL is pretty completely specified, such as Tuesday, April 12, 1952 AD or 3:30:42pm PST. 

You can also set the time zone on the format if you wish. If you want even more control over the format or parsing, (or want to give your users more control), you can try casting 
the DateFormat you get from the factory methods to a SimpleDateFormat. This will work for the majority of countries; just remember to put it in a try block in case you encounter 
an unusual one. 

You can also use forms of the parse and format methods with ParsePosition and FieldPosition to allow you to progressively parse through pieces of a string. align any particular 
field, or find out where it is for selection on the screen. 

Synchronization 

Date formats are not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized 
externally. 



*int_java.text.DateFormat.AM_PM_FIELD*

Useful constant for AM_PM field alignment. Used in FieldPosition of date/time formatting. 


*java.util.Calendar_java.text.DateFormat.calendar*

The calendar that DateFormat uses to produce the time field values needed to implement date and time formatting. Subclasses should initialize this to a calendar appropriate for 
the locale associated with this DateFormat. 


*int_java.text.DateFormat.DATE_FIELD*

Useful constant for DATE field alignment. Used in FieldPosition of date/time formatting. 


*int_java.text.DateFormat.DAY_OF_WEEK_FIELD*

Useful constant for DAY_OF_WEEK field alignment. Used in FieldPosition of date/time formatting. 


*int_java.text.DateFormat.DAY_OF_WEEK_IN_MONTH_FIELD*

Useful constant for DAY_OF_WEEK_IN_MONTH field alignment. Used in FieldPosition of date/time formatting. 


*int_java.text.DateFormat.DAY_OF_YEAR_FIELD*

Useful constant for DAY_OF_YEAR field alignment. Used in FieldPosition of date/time formatting. 


*int_java.text.DateFormat.DEFAULT*

Constant for default style pattern. Its value is MEDIUM. 


*int_java.text.DateFormat.ERA_FIELD*

Useful constant for ERA field alignment. Used in FieldPosition of date/time formatting. 


*int_java.text.DateFormat.FULL*

Constant for full style pattern. 


*int_java.text.DateFormat.HOUR_OF_DAY0_FIELD*

Useful constant for zero-based HOUR_OF_DAY field alignment. Used in FieldPosition of date/time formatting. HOUR_OF_DAY0_FIELD is used for the zero-based 24-hour clock. For 
example, 23:59 + 01:00 results in 00:59. 


*int_java.text.DateFormat.HOUR_OF_DAY1_FIELD*

Useful constant for one-based HOUR_OF_DAY field alignment. Used in FieldPosition of date/time formatting. HOUR_OF_DAY1_FIELD is used for the one-based 24-hour clock. For example, 
23:59 + 01:00 results in 24:59. 


*int_java.text.DateFormat.HOUR0_FIELD*

Useful constant for zero-based HOUR field alignment. Used in FieldPosition of date/time formatting. HOUR0_FIELD is used for the zero-based 12-hour clock. For example, 11:30 PM + 1 
hour results in 00:30 AM. 


*int_java.text.DateFormat.HOUR1_FIELD*

Useful constant for one-based HOUR field alignment. Used in FieldPosition of date/time formatting. HOUR1_FIELD is used for the one-based 12-hour clock. For example, 11:30 PM + 1 
hour results in 12:30 AM. 


*int_java.text.DateFormat.LONG*

Constant for long style pattern. 


*int_java.text.DateFormat.MEDIUM*

Constant for medium style pattern. 


*int_java.text.DateFormat.MILLISECOND_FIELD*

Useful constant for MILLISECOND field alignment. Used in FieldPosition of date/time formatting. 


*int_java.text.DateFormat.MINUTE_FIELD*

Useful constant for MINUTE field alignment. Used in FieldPosition of date/time formatting. 


*int_java.text.DateFormat.MONTH_FIELD*

Useful constant for MONTH field alignment. Used in FieldPosition of date/time formatting. 


*java.text.NumberFormat_java.text.DateFormat.numberFormat*

The number formatter that DateFormat uses to format numbers in dates and times. Subclasses should initialize this to a number format appropriate for the locale associated with 
this DateFormat. 


*int_java.text.DateFormat.SECOND_FIELD*

Useful constant for SECOND field alignment. Used in FieldPosition of date/time formatting. 


*int_java.text.DateFormat.SHORT*

Constant for short style pattern. 


*int_java.text.DateFormat.TIMEZONE_FIELD*

Useful constant for TIMEZONE field alignment. Used in FieldPosition of date/time formatting. 


*int_java.text.DateFormat.WEEK_OF_MONTH_FIELD*

Useful constant for WEEK_OF_MONTH field alignment. Used in FieldPosition of date/time formatting. 


*int_java.text.DateFormat.WEEK_OF_YEAR_FIELD*

Useful constant for WEEK_OF_YEAR field alignment. Used in FieldPosition of date/time formatting. 


*int_java.text.DateFormat.YEAR_FIELD*

Useful constant for YEAR field alignment. Used in FieldPosition of date/time formatting. 



*java.text.DateFormat()*

protected DateFormat()

Create a new date format. 


*java.text.DateFormat.clone()*

public |java.lang.Object| clone()

Overrides Cloneable 



*java.text.DateFormat.equals(Object)*

public boolean equals(java.lang.Object obj)

Overrides equals 



*java.text.DateFormat.format(Date)*

public final |java.lang.String| format(java.util.Date date)

Formats a Date into a date/time string. 


    date - the time value to be formatted into a time string. 

    Returns: the formatted time string. 

*java.text.DateFormat.format(Date,StringBuffer,FieldPosition)*

public abstract |java.lang.StringBuffer| format(
  java.util.Date date,
  java.lang.StringBuffer toAppendTo,
  java.text.FieldPosition fieldPosition)

Formats a Date into a date/time string. 


    date - a Date to be formatted into a date/time string. 
    toAppendTo - the string buffer for the returning date/time string. 
    fieldPosition - keeps track of the position of the field within the returned string. On input: an alignment field, if desired. On output: the offsets of the alignment field. For example, given a 
       time text "1996.07.10 AD at 15:08:56 PDT", if the given fieldPosition is DateFormat.YEAR_FIELD, the begin index and end index of fieldPosition will be set to 0 and 4, 
       respectively. Notice that if the same time field appears more than once in a pattern, the fieldPosition will be set for the first occurrence of that time field. For 
       instance, formatting a Date to the time string "1 PM PDT (Pacific Daylight Time)" using the pattern "h a z (zzzz)" and the alignment field DateFormat.TIMEZONE_FIELD, the 
       begin index and end index of fieldPosition will be set to 5 and 8, respectively, for the first occurrence of the timezone pattern character 'z'. 

    Returns: the formatted date/time string. 

*java.text.DateFormat.format(Object,StringBuffer,FieldPosition)*

public final |java.lang.StringBuffer| format(
  java.lang.Object obj,
  java.lang.StringBuffer toAppendTo,
  java.text.FieldPosition fieldPosition)

Overrides Format. Formats a time object into a time string. Examples of time objects are a time value expressed in milliseconds and a Date object. 


    obj - must be a Number or a Date. 
    toAppendTo - the string buffer for the returning time string. 
    fieldPosition - keeps track of the position of the field within the returned string. On input: an alignment field, if desired. On output: the offsets of the alignment field. For example, given a 
       time text "1996.07.10 AD at 15:08:56 PDT", if the given fieldPosition is DateFormat.YEAR_FIELD, the begin index and end index of fieldPosition will be set to 0 and 4, 
       respectively. Notice that if the same time field appears more than once in a pattern, the fieldPosition will be set for the first occurrence of that time field. For 
       instance, formatting a Date to the time string "1 PM PDT (Pacific Daylight Time)" using the pattern "h a z (zzzz)" and the alignment field DateFormat.TIMEZONE_FIELD, the 
       begin index and end index of fieldPosition will be set to 5 and 8, respectively, for the first occurrence of the timezone pattern character 'z'. 

    Returns: the formatted time string. 

*java.text.DateFormat.getAvailableLocales()*

public static |java.util.Locale|[] getAvailableLocales()

Returns an array of all locales for which the get*Instance methods of this class can return localized instances. The array returned must contain at least a Locale instance equal 
to Locale.US(|java.util.Locale|) . 



    Returns: An array of locales for which localized DateFormat instances are available. 

*java.text.DateFormat.getCalendar()*

public |java.util.Calendar| getCalendar()

Gets the calendar associated with this date/time formatter. 



    Returns: the calendar associated with this date/time formatter. 

*java.text.DateFormat.getDateInstance()*

public static final |java.text.DateFormat| getDateInstance()

Gets the date formatter with the default formatting style for the default locale. 



    Returns: a date formatter. 

*java.text.DateFormat.getDateInstance(int)*

public static final |java.text.DateFormat| getDateInstance(int style)

Gets the date formatter with the given formatting style for the default locale. 


    style - the given formatting style. For example, SHORT for "M/d/yy" in the US locale. 

    Returns: a date formatter. 

*java.text.DateFormat.getDateInstance(int,Locale)*

public static final |java.text.DateFormat| getDateInstance(
  int style,
  java.util.Locale aLocale)

Gets the date formatter with the given formatting style for the given locale. 


    style - the given formatting style. For example, SHORT for "M/d/yy" in the US locale. 
    aLocale - the given locale. 

    Returns: a date formatter. 

*java.text.DateFormat.getDateTimeInstance()*

public static final |java.text.DateFormat| getDateTimeInstance()

Gets the date/time formatter with the default formatting style for the default locale. 



    Returns: a date/time formatter. 

*java.text.DateFormat.getDateTimeInstance(int,int)*

public static final |java.text.DateFormat| getDateTimeInstance(
  int dateStyle,
  int timeStyle)

Gets the date/time formatter with the given date and time formatting styles for the default locale. 


    dateStyle - the given date formatting style. For example, SHORT for "M/d/yy" in the US locale. 
    timeStyle - the given time formatting style. For example, SHORT for "h:mm a" in the US locale. 

    Returns: a date/time formatter. 

*java.text.DateFormat.getDateTimeInstance(int,int,Locale)*

public static final |java.text.DateFormat| getDateTimeInstance(
  int dateStyle,
  int timeStyle,
  java.util.Locale aLocale)

Gets the date/time formatter with the given formatting styles for the given locale. 


    dateStyle - the given date formatting style. 
    timeStyle - the given time formatting style. 
    aLocale - the given locale. 

    Returns: a date/time formatter. 

*java.text.DateFormat.getInstance()*

public static final |java.text.DateFormat| getInstance()

Get a default date/time formatter that uses the SHORT style for both the date and the time. 



*java.text.DateFormat.getNumberFormat()*

public |java.text.NumberFormat| getNumberFormat()

Gets the number formatter which this date/time formatter uses to format and parse a time. 



    Returns: the number formatter which this date/time formatter uses. 

*java.text.DateFormat.getTimeInstance()*

public static final |java.text.DateFormat| getTimeInstance()

Gets the time formatter with the default formatting style for the default locale. 



    Returns: a time formatter. 

*java.text.DateFormat.getTimeInstance(int)*

public static final |java.text.DateFormat| getTimeInstance(int style)

Gets the time formatter with the given formatting style for the default locale. 


    style - the given formatting style. For example, SHORT for "h:mm a" in the US locale. 

    Returns: a time formatter. 

*java.text.DateFormat.getTimeInstance(int,Locale)*

public static final |java.text.DateFormat| getTimeInstance(
  int style,
  java.util.Locale aLocale)

Gets the time formatter with the given formatting style for the given locale. 


    style - the given formatting style. For example, SHORT for "h:mm a" in the US locale. 
    aLocale - the given locale. 

    Returns: a time formatter. 

*java.text.DateFormat.getTimeZone()*

public |java.util.TimeZone| getTimeZone()

Gets the time zone. 



    Returns: the time zone associated with the calendar of DateFormat. 

*java.text.DateFormat.hashCode()*

public int hashCode()

Overrides hashCode 



*java.text.DateFormat.isLenient()*

public boolean isLenient()

Tell whether date/time parsing is to be lenient. 



*java.text.DateFormat.parse(String)*

public |java.util.Date| parse(java.lang.String source)
  throws |java.text.ParseException|
         
Parses text from the beginning of the given string to produce a date. The method may not use the entire text of the given string. 

See the (|java.text.DateFormat|) method for more information on date parsing. 


    source - A String whose beginning should be parsed. 

    Returns: A Date parsed from the string. 

*java.text.DateFormat.parse(String,ParsePosition)*

public abstract |java.util.Date| parse(
  java.lang.String source,
  java.text.ParsePosition pos)

Parse a date/time string according to the given parse position. For example, a time text "07/10/96 4:5 PM, PDT" will be parsed into a Date that is equivalent to 
Date(837039928046). 

By default, parsing is lenient: If the input is not in the form used by this object's format method but can still be parsed as a date, then the parse succeeds. Clients may insist 
on strict adherence to the format by calling setLenient(false). 


    source - The date/time string to be parsed 
    pos - On input, the position at which to start parsing; on output, the position at which parsing terminated, or the start position if the parse failed. 

    Returns: A Date, or null if the input could not be parsed 

*java.text.DateFormat.parseObject(String,ParsePosition)*

public |java.lang.Object| parseObject(
  java.lang.String source,
  java.text.ParsePosition pos)

Parses text from a string to produce a Date. 

The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing 
does not necessarily use all characters up to the end of the string), and the parsed date is returned. The updated pos can be used to indicate the starting point for the next call 
to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is 
returned. 

See the (|java.text.DateFormat|) method for more information on date parsing. 


    source - A String, part of which should be parsed. 
    pos - A ParsePosition object with index and error index information as described above. 

    Returns: A Date parsed from the string. In case of error, returns null. 

*java.text.DateFormat.setCalendar(Calendar)*

public void setCalendar(java.util.Calendar newCalendar)

Set the calendar to be used by this date format. Initially, the default calendar for the specified or default locale is used. 


    newCalendar - the new Calendar to be used by the date format 

*java.text.DateFormat.setLenient(boolean)*

public void setLenient(boolean lenient)

Specify whether or not date/time parsing is to be lenient. With lenient parsing, the parser may use heuristics to interpret inputs that do not precisely match this object's 
format. With strict parsing, inputs must match this object's format. 


    lenient - when true, parsing is lenient 

*java.text.DateFormat.setNumberFormat(NumberFormat)*

public void setNumberFormat(java.text.NumberFormat newNumberFormat)

Allows you to set the number formatter. 


    newNumberFormat - the given new NumberFormat. 

*java.text.DateFormat.setTimeZone(TimeZone)*

public void setTimeZone(java.util.TimeZone zone)

Sets the time zone for the calendar of this DateFormat object. 


    zone - the given new time zone. 



*javax.swing.ProgressMonitorInputStream* *ProgressMonitorInputStream* Monitors t

public class ProgressMonitorInputStream
  extends    |java.io.FilterInputStream|

|javax.swing.ProgressMonitorInputStream_Description|
|javax.swing.ProgressMonitorInputStream_Fields|
|javax.swing.ProgressMonitorInputStream_Constructors|
|javax.swing.ProgressMonitorInputStream_Methods|

================================================================================

*javax.swing.ProgressMonitorInputStream_Constructors*
|javax.swing.ProgressMonitorInputStream(Component,Object,InputStream)|Construct

*javax.swing.ProgressMonitorInputStream_Methods*
|javax.swing.ProgressMonitorInputStream.close()|Overrides FilterInputStream.clo
|javax.swing.ProgressMonitorInputStream.getProgressMonitor()|Get the ProgressMo
|javax.swing.ProgressMonitorInputStream.read()|Overrides FilterInputStream.read
|javax.swing.ProgressMonitorInputStream.read(byte[])|Overrides FilterInputStrea
|javax.swing.ProgressMonitorInputStream.read(byte[],int,int)|Overrides FilterIn
|javax.swing.ProgressMonitorInputStream.reset()|Overrides FilterInputStream.res
|javax.swing.ProgressMonitorInputStream.skip(long)|Overrides FilterInputStream.

*javax.swing.ProgressMonitorInputStream_Description*

Monitors the progress of reading from some InputStream. This ProgressMonitor is 
normally invoked in roughly this form: 

InputStream in = new BufferedInputStream( new ProgressMonitorInputStream( 
parentComponent, "Reading " + fileName, new FileInputStream(fileName))); 

This creates a progress monitor to monitor the progress of reading the input 
stream. If it's taking a while, a ProgressDialog will be popped up to inform 
the user. If the user hits the Cancel button an InterruptedIOException will be 
thrown on the next read. All the right cleanup is done when the stream is 
closed. 



For further documentation and examples see How to Monitor Progress, a section 
in The Java Tutorial. 


*javax.swing.ProgressMonitorInputStream(Component,Object,InputStream)*

public ProgressMonitorInputStream(
  java.awt.Component parentComponent,
  java.lang.Object message,
  java.io.InputStream in)

Constructs an object to monitor the progress of an input stream. 

    message - Descriptive text to be placed in the dialog box if one is popped up. 
    parentComponent - The component triggering the operation being monitored. 
    in - The input stream to be monitored. 

*javax.swing.ProgressMonitorInputStream.close()*

public void close()
  throws |java.io.IOException|
         
Overrides FilterInputStream.close to close the progress monitor as well as the 
stream. 


*javax.swing.ProgressMonitorInputStream.getProgressMonitor()*

public |javax.swing.ProgressMonitor| getProgressMonitor()

Get the ProgressMonitor object being used by this stream. Normally this isn't 
needed unless you want to do something like change the descriptive text partway 
through reading the file. 


    Returns: the ProgressMonitor object used by this object 
*javax.swing.ProgressMonitorInputStream.read()*

public int read()
  throws |java.io.IOException|
         
Overrides FilterInputStream.read to update the progress monitor after the read. 


*javax.swing.ProgressMonitorInputStream.read(byte[])*

public int read(byte[] b)
  throws |java.io.IOException|
         
Overrides FilterInputStream.read to update the progress monitor after the read. 


*javax.swing.ProgressMonitorInputStream.read(byte[],int,int)*

public int read(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Overrides FilterInputStream.read to update the progress monitor after the read. 


*javax.swing.ProgressMonitorInputStream.reset()*

public synchronized void reset()
  throws |java.io.IOException|
         
Overrides FilterInputStream.reset to reset the progress monitor as well as the 
stream. 


*javax.swing.ProgressMonitorInputStream.skip(long)*

public long skip(long n)
  throws |java.io.IOException|
         
Overrides FilterInputStream.skip to update the progress monitor after the skip. 




*javax.naming.ldap.Rdn* *Rdn* This class represents a relative distinguished name, or RDN, which is a
 component of a distinguished name as specified by
 RFC 2253.

public class Rdn
  extends    |java.lang.Object|
  implements |java.io.Serializable|
             |java.lang.Comparable|

|javax.naming.ldap.Rdn_Description|
|javax.naming.ldap.Rdn_Fields|
|javax.naming.ldap.Rdn_Constructors|
|javax.naming.ldap.Rdn_Methods|

====================================================================================================================================================================================

*javax.naming.ldap.Rdn_Constructors*
|javax.naming.ldap.Rdn(Attributes)|Constructs an Rdn from the given attribute set.
|javax.naming.ldap.Rdn(Rdn)|Constructs an Rdn from the given rdn.
|javax.naming.ldap.Rdn(String)|Constructs an Rdn from the given string.
|javax.naming.ldap.Rdn(String,Object)|Constructs an Rdn from the given attribute type and  value.

*javax.naming.ldap.Rdn_Methods*
|javax.naming.ldap.Rdn.compareTo(Object)|Compares this Rdn with the specified Object for order.
|javax.naming.ldap.Rdn.equals(Object)|Compares the specified Object with this Rdn for equality.
|javax.naming.ldap.Rdn.escapeValue(Object)|Given the value of an attribute, returns a string escaped according  to the rules specified in  RFC 2253.
|javax.naming.ldap.Rdn.getType()|Retrieves one of this Rdn's type.
|javax.naming.ldap.Rdn.getValue()|Retrieves one of this Rdn's value.
|javax.naming.ldap.Rdn.hashCode()|Returns the hash code of this RDN.
|javax.naming.ldap.Rdn.size()|Retrieves the number of attribute type/value pairs in this Rdn.
|javax.naming.ldap.Rdn.toAttributes()|Retrieves thejavax.naming.directory.Attributes Attributesview of the type/value mappings contained in this Rdn.
|javax.naming.ldap.Rdn.toString()|Returns this Rdn as a string represented in a format defined by  RFC 2253 and described  in the class description forjavax.naming.ldap.LdapName L
|javax.naming.ldap.Rdn.unescapeValue(String)|Given an attribute value string formated according to the rules  specified in  RFC 2253,  returns the unformated value.

*javax.naming.ldap.Rdn_Description*

This class represents a relative distinguished name, or RDN, which is a component of a distinguished name as specified by RFC 2253. An example of an RDN is "OU=Sales+CN=J.Smith". 
In this example, the RDN consist of multiple attribute type/value pairs. The RDN is parsed as described in the class description for 
<tt>LdapName</tt>(|javax.naming.ldap.LdapName|) . 

The Rdn class represents an RDN as attribute type/value mappings, which can be viewed using Attributes(|javax.naming.directory.Attributes|) . In addition, it contains convenience 
methods that allow easy retrieval of type and value when the Rdn consist of a single type/value pair, which is how it appears in a typical usage. It also contains helper methods 
that allow escaping of the unformatted attribute value and unescaping of the value formatted according to the escaping syntax defined in RFC2253. For methods that take or return 
attribute value as an Object, the value is either a String (in unescaped form) or a byte array. 

Rdn will properly parse all valid RDNs, but does not attempt to detect all possible violations when parsing invalid RDNs. It is "generous" in accepting invalid RDNs. The 
"validity" of a name is determined ultimately when it is supplied to an LDAP server, which may accept or reject the name based on factors such as its schema information and 
interoperability considerations. 

The following code example shows how to construct an Rdn using the constructor that takes type and value as arguments: 

Rdn rdn = new Rdn("cn", "Juicy, Fruit"); System.out.println(rdn.toString()); 

The last line will print cn=Juicy\, Fruit. The <tt>unescapeValue()</tt>(|javax.naming.ldap.Rdn|) method can be used to unescape the escaped comma resulting in the original value 
"Juicy, Fruit". The <tt>escapeValue()</tt>(|javax.naming.ldap.Rdn|) method adds the escape back preceding the comma. 

This class can be instantiated by a string representation of the RDN defined in RFC 2253 as shown in the following code example: 

Rdn rdn = new Rdn("cn=Juicy\\, Fruit"); System.out.println(rdn.toString()); 

The last line will print cn=Juicy\, Fruit. 

Concurrent multithreaded read-only access of an instance of Rdn need not be synchronized. 

Unless otherwise noted, the behavior of passing a null argument to a constructor or method in this class will cause NullPointerException to be thrown. 



*javax.naming.ldap.Rdn(Attributes)*

public Rdn(javax.naming.directory.Attributes attrSet)
  throws |javax.naming.InvalidNameException|
         
Constructs an Rdn from the given attribute set. See Attributes(|javax.naming.directory.Attributes|) . 

The string attribute values are not interpretted as RFC 2253 formatted RDN strings. That is, the values are used literally (not parsed) and assumed to be unescaped. 

    attrSet - The non-null and non-empty attributes containing type/value mappings. 

*javax.naming.ldap.Rdn(Rdn)*

public Rdn(javax.naming.ldap.Rdn rdn)

Constructs an Rdn from the given rdn. The contents of the rdn are simply copied into the newly created Rdn. 

    rdn - The non-null Rdn to be copied. 

*javax.naming.ldap.Rdn(String)*

public Rdn(java.lang.String rdnString)
  throws |javax.naming.InvalidNameException|
         
Constructs an Rdn from the given string. This constructor takes a string formatted according to the rules defined in RFC 2253 and described in the class description for 
(|javax.naming.ldap.LdapName|) . 

    rdnString - The non-null and non-empty RFC2253 formatted string. 

*javax.naming.ldap.Rdn(String,Object)*

public Rdn(
  java.lang.String type,
  java.lang.Object value)
  throws |javax.naming.InvalidNameException|
         
Constructs an Rdn from the given attribute type and value. The string attribute values are not interpretted as RFC 2253 formatted RDN strings. That is, the values are used 
literally (not parsed) and assumed to be unescaped. 

    type - The non-null and non-empty string attribute type. 
    value - The non-null and non-empty attribute value. 

*javax.naming.ldap.Rdn.compareTo(Object)*

public int compareTo(java.lang.Object obj)

Compares this Rdn with the specified Object for order. Returns a negative integer, zero, or a positive integer as this Rdn is less than, equal to, or greater than the given 
Object. 

If obj is null or not an instance of Rdn, ClassCastException is thrown. 

The attribute type and value pairs of the RDNs are lined up against each other and compared lexicographically. The order of components in multi-valued Rdns (such as 
"ou=Sales+cn=Bob") is not significant. 


    obj - The non-null object to compare against. 

    Returns: A negative integer, zero, or a positive integer as this Rdn is less than, equal to, or greater than the given Object. 

*javax.naming.ldap.Rdn.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares the specified Object with this Rdn for equality. Returns true if the given object is also a Rdn and the two Rdns represent the same attribute type and value mappings. The 
order of components in multi-valued Rdns (such as "ou=Sales+cn=Bob") is not significant. 

Type and value equalilty matching is done as below: 

The types are compared for equality with their case ignored. String values with different but equivalent usage of quoting, escaping, or UTF8-hex-encoding are considered equal. The 
case of the values is ignored during the comparison. 

If obj is null or not an instance of Rdn, false is returned. 


    obj - object to be compared for equality with this Rdn. 

    Returns: true if the specified object is equal to this Rdn. 

*javax.naming.ldap.Rdn.escapeValue(Object)*

public static |java.lang.String| escapeValue(java.lang.Object val)

Given the value of an attribute, returns a string escaped according to the rules specified in RFC 2253. 

For example, if the val is "Sue, Grabbit and Runn", the escaped value returned by this method is "Sue\, Grabbit and Runn". 

A string value is represented as a String and binary value as a byte array. 


    val - The non-null object to be escaped. 

    Returns: Escaped string value. 

*javax.naming.ldap.Rdn.getType()*

public |java.lang.String| getType()

Retrieves one of this Rdn's type. This is a convenience method for obtaining the type, when the RDN contains a single type and value mapping, which is the common RDN usage. 

For a multi-valued RDN, the type/value pairs have no specific order defined on them. In that case, this method returns type of one of the type/value pairs. The 
getValue()(|javax.naming.ldap.Rdn|) method returns the value corresponding to the type returned by this method. 



    Returns: The non-null attribute type. 

*javax.naming.ldap.Rdn.getValue()*

public |java.lang.Object| getValue()

Retrieves one of this Rdn's value. This is a convenience method for obtaining the value, when the RDN contains a single type and value mapping, which is the common RDN usage. 

For a multi-valued RDN, this method returns value corresponding to the type returned by getType()(|javax.naming.ldap.Rdn|) method. 



    Returns: The non-null attribute value. 

*javax.naming.ldap.Rdn.hashCode()*

public int hashCode()

Returns the hash code of this RDN. Two RDNs that are equal (according to the equals method) will have the same hash code. 



    Returns: An int representing the hash code of this Rdn. 

*javax.naming.ldap.Rdn.size()*

public int size()

Retrieves the number of attribute type/value pairs in this Rdn. 



    Returns: The non-negative number of type/value pairs in this Rdn. 

*javax.naming.ldap.Rdn.toAttributes()*

public |javax.naming.directory.Attributes| toAttributes()

Retrieves the Attributes(|javax.naming.directory.Attributes|) view of the type/value mappings contained in this Rdn. 



    Returns: The non-null attributes containing the type/value mappings of this Rdn. 

*javax.naming.ldap.Rdn.toString()*

public |java.lang.String| toString()

Returns this Rdn as a string represented in a format defined by RFC 2253 and described in the class description for LdapName(|javax.naming.ldap.LdapName|) . 



    Returns: The string representation of the Rdn. 

*javax.naming.ldap.Rdn.unescapeValue(String)*

public static |java.lang.Object| unescapeValue(java.lang.String val)

Given an attribute value string formated according to the rules specified in RFC 2253, returns the unformated value. Escapes and quotes are stripped away, and hex-encoded UTF-8 is 
converted to equivalent UTF-16 characters. Returns a string value as a String, and a binary value as a byte array. 

Legal and illegal values are defined in RFC 2253. This method is generous in accepting the values and does not catch all illegal values. Therefore, passing in an illegal value 
might not necessarily trigger an IllegalArgumentException. 


    val - The non-null string to be unescaped. 

    Returns: Unescaped value. 



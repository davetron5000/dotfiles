*java.awt.BorderLayout* *BorderLayout* A border layout lays out a container, arr

public class BorderLayout
  extends    |java.lang.Object|
  implements |java.awt.LayoutManager2|
             |java.io.Serializable|

|java.awt.BorderLayout_Description|
|java.awt.BorderLayout_Fields|
|java.awt.BorderLayout_Constructors|
|java.awt.BorderLayout_Methods|

================================================================================

*java.awt.BorderLayout_Fields*
|java.lang.String_java.awt.BorderLayout.AFTER_LAST_LINE|
|java.lang.String_java.awt.BorderLayout.AFTER_LINE_ENDS|
|java.lang.String_java.awt.BorderLayout.BEFORE_FIRST_LINE|
|java.lang.String_java.awt.BorderLayout.BEFORE_LINE_BEGINS|
|java.lang.String_java.awt.BorderLayout.CENTER|
|java.lang.String_java.awt.BorderLayout.EAST|
|java.lang.String_java.awt.BorderLayout.LINE_END|
|java.lang.String_java.awt.BorderLayout.LINE_START|
|java.lang.String_java.awt.BorderLayout.NORTH|
|java.lang.String_java.awt.BorderLayout.PAGE_END|
|java.lang.String_java.awt.BorderLayout.PAGE_START|
|java.lang.String_java.awt.BorderLayout.SOUTH|
|java.lang.String_java.awt.BorderLayout.WEST|

*java.awt.BorderLayout_Constructors*
|java.awt.BorderLayout()|Constructs a new border layout with  no gaps between c
|java.awt.BorderLayout(int,int)|Constructs a border layout with the specified g

*java.awt.BorderLayout_Methods*
|java.awt.BorderLayout.addLayoutComponent(Component,Object)|Adds the specified 
|java.awt.BorderLayout.addLayoutComponent(String,Component)|
|java.awt.BorderLayout.getConstraints(Component)|Gets the constraints for the s
|java.awt.BorderLayout.getHgap()|Returns the horizontal gap between components.
|java.awt.BorderLayout.getLayoutAlignmentX(Container)|Returns the alignment alo
|java.awt.BorderLayout.getLayoutAlignmentY(Container)|Returns the alignment alo
|java.awt.BorderLayout.getLayoutComponent(Container,Object)|Gets the component 
|java.awt.BorderLayout.getLayoutComponent(Object)|Gets the component that was a
|java.awt.BorderLayout.getVgap()|Returns the vertical gap between components.
|java.awt.BorderLayout.invalidateLayout(Container)|Invalidates the layout, indi
|java.awt.BorderLayout.layoutContainer(Container)|Lays out the container argume
|java.awt.BorderLayout.maximumLayoutSize(Container)|Returns the maximum dimensi
|java.awt.BorderLayout.minimumLayoutSize(Container)|Determines the minimum size
|java.awt.BorderLayout.preferredLayoutSize(Container)|Determines the preferred 
|java.awt.BorderLayout.removeLayoutComponent(Component)|Removes the specified c
|java.awt.BorderLayout.setHgap(int)|Sets the horizontal gap between components.
|java.awt.BorderLayout.setVgap(int)|Sets the vertical gap between components.
|java.awt.BorderLayout.toString()|Returns a string representation of the state 

*java.awt.BorderLayout_Description*

A border layout lays out a container, arranging and resizing its components to 
fit in five regions: north, south, east, west, and center. Each region may 
contain no more than one component, and is identified by a corresponding 
constant: NORTH, SOUTH, EAST, WEST, and CENTER. When adding a component to a 
container with a border layout, use one of these five constants, for example: 

Panel p = new Panel(); p.setLayout(new BorderLayout()); p.add(new 
Button("Okay"), BorderLayout.SOUTH); 

As a convenience, BorderLayout interprets the absence of a string specification 
the same as the constant CENTER: 

Panel p2 = new Panel(); p2.setLayout(new BorderLayout()); p2.add(new 
TextArea()); // Same as p.add(new TextArea(), BorderLayout.CENTER); 

In addition, BorderLayout supports the relative positioning constants, 
PAGE_START, PAGE_END, LINE_START, and LINE_END. In a container whose 
ComponentOrientation is set to ComponentOrientation.LEFT_TO_RIGHT, these 
constants map to NORTH, SOUTH, WEST, and EAST, respectively. 

For compatibility with previous releases, BorderLayout also includes the 
relative positioning constants BEFORE_FIRST_LINE, AFTER_LAST_LINE, 
BEFORE_LINE_BEGINS and AFTER_LINE_ENDS. These are equivalent to PAGE_START, 
PAGE_END, LINE_START and LINE_END respectively. For consistency with the 
relative positioning constants used by other components, the latter constants 
are preferred. 

Mixing both absolute and relative positioning constants can lead to 
unpredicable results. If you use both types, the relative constants will take 
precedence. For example, if you add components using both the NORTH and 
PAGE_START constants in a container whose orientation is LEFT_TO_RIGHT, only 
the PAGE_START will be layed out. 

NOTE: Currently (in the Java 2 platform v1.2), BorderLayout does not support 
vertical orientations. The isVertical setting on the container's 
ComponentOrientation is not respected. 

The components are laid out according to their preferred sizes and the 
constraints of the container's size. The NORTH and SOUTH components may be 
stretched horizontally; the EAST and WEST components may be stretched 
vertically; the CENTER component may stretch both horizontally and vertically 
to fill any space left over. 

Here is an example of five buttons in an applet laid out using the BorderLayout 
layout manager: 



The code for this applet is as follows: 



import java.awt.*; import java.applet.Applet; 

public class buttonDir extends Applet { public void init() { setLayout(new 
BorderLayout()); add(new Button("North"), BorderLayout.NORTH); add(new 
Button("South"), BorderLayout.SOUTH); add(new Button("East"), 
BorderLayout.EAST); add(new Button("West"), BorderLayout.WEST); add(new 
Button("Center"), BorderLayout.CENTER); } } 




*java.lang.String_java.awt.BorderLayout.AFTER_LAST_LINE*

A border layout lays out a container, arranging and resizing its components to 
fit in five regions: north, south, east, west, and center. Each region may 
contain no more than one component, and is identified by a corresponding 
constant: NORTH, SOUTH, EAST, WEST, and CENTER. When adding a component to a 
container with a border layout, use one of these five constants, for example: 

Panel p = new Panel(); p.setLayout(new BorderLayout()); p.add(new 
Button("Okay"), BorderLayout.SOUTH); 

As a convenience, BorderLayout interprets the absence of a string specification 
the same as the constant CENTER: 

Panel p2 = new Panel(); p2.setLayout(new BorderLayout()); p2.add(new 
TextArea()); // Same as p.add(new TextArea(), BorderLayout.CENTER); 

In addition, BorderLayout supports the relative positioning constants, 
PAGE_START, PAGE_END, LINE_START, and LINE_END. In a container whose 
ComponentOrientation is set to ComponentOrientation.LEFT_TO_RIGHT, these 
constants map to NORTH, SOUTH, WEST, and EAST, respectively. 

For compatibility with previous releases, BorderLayout also includes the 
relative positioning constants BEFORE_FIRST_LINE, AFTER_LAST_LINE, 
BEFORE_LINE_BEGINS and AFTER_LINE_ENDS. These are equivalent to PAGE_START, 
PAGE_END, LINE_START and LINE_END respectively. For consistency with the 
relative positioning constants used by other components, the latter constants 
are preferred. 

Mixing both absolute and relative positioning constants can lead to 
unpredicable results. If you use both types, the relative constants will take 
precedence. For example, if you add components using both the NORTH and 
PAGE_START constants in a container whose orientation is LEFT_TO_RIGHT, only 
the PAGE_START will be layed out. 

NOTE: Currently (in the Java 2 platform v1.2), BorderLayout does not support 
vertical orientations. The isVertical setting on the container's 
ComponentOrientation is not respected. 

The components are laid out according to their preferred sizes and the 
constraints of the container's size. The NORTH and SOUTH components may be 
stretched horizontally; the EAST and WEST components may be stretched 
vertically; the CENTER component may stretch both horizontally and vertically 
to fill any space left over. 

Here is an example of five buttons in an applet laid out using the BorderLayout 
layout manager: 



The code for this applet is as follows: 



import java.awt.*; import java.applet.Applet; 

public class buttonDir extends Applet { public void init() { setLayout(new 
BorderLayout()); add(new Button("North"), BorderLayout.NORTH); add(new 
Button("South"), BorderLayout.SOUTH); add(new Button("East"), 
BorderLayout.EAST); add(new Button("West"), BorderLayout.WEST); add(new 
Button("Center"), BorderLayout.CENTER); } } 




*java.lang.String_java.awt.BorderLayout.AFTER_LINE_ENDS*

A border layout lays out a container, arranging and resizing its components to 
fit in five regions: north, south, east, west, and center. Each region may 
contain no more than one component, and is identified by a corresponding 
constant: NORTH, SOUTH, EAST, WEST, and CENTER. When adding a component to a 
container with a border layout, use one of these five constants, for example: 

Panel p = new Panel(); p.setLayout(new BorderLayout()); p.add(new 
Button("Okay"), BorderLayout.SOUTH); 

As a convenience, BorderLayout interprets the absence of a string specification 
the same as the constant CENTER: 

Panel p2 = new Panel(); p2.setLayout(new BorderLayout()); p2.add(new 
TextArea()); // Same as p.add(new TextArea(), BorderLayout.CENTER); 

In addition, BorderLayout supports the relative positioning constants, 
PAGE_START, PAGE_END, LINE_START, and LINE_END. In a container whose 
ComponentOrientation is set to ComponentOrientation.LEFT_TO_RIGHT, these 
constants map to NORTH, SOUTH, WEST, and EAST, respectively. 

For compatibility with previous releases, BorderLayout also includes the 
relative positioning constants BEFORE_FIRST_LINE, AFTER_LAST_LINE, 
BEFORE_LINE_BEGINS and AFTER_LINE_ENDS. These are equivalent to PAGE_START, 
PAGE_END, LINE_START and LINE_END respectively. For consistency with the 
relative positioning constants used by other components, the latter constants 
are preferred. 

Mixing both absolute and relative positioning constants can lead to 
unpredicable results. If you use both types, the relative constants will take 
precedence. For example, if you add components using both the NORTH and 
PAGE_START constants in a container whose orientation is LEFT_TO_RIGHT, only 
the PAGE_START will be layed out. 

NOTE: Currently (in the Java 2 platform v1.2), BorderLayout does not support 
vertical orientations. The isVertical setting on the container's 
ComponentOrientation is not respected. 

The components are laid out according to their preferred sizes and the 
constraints of the container's size. The NORTH and SOUTH components may be 
stretched horizontally; the EAST and WEST components may be stretched 
vertically; the CENTER component may stretch both horizontally and vertically 
to fill any space left over. 

Here is an example of five buttons in an applet laid out using the BorderLayout 
layout manager: 



The code for this applet is as follows: 



import java.awt.*; import java.applet.Applet; 

public class buttonDir extends Applet { public void init() { setLayout(new 
BorderLayout()); add(new Button("North"), BorderLayout.NORTH); add(new 
Button("South"), BorderLayout.SOUTH); add(new Button("East"), 
BorderLayout.EAST); add(new Button("West"), BorderLayout.WEST); add(new 
Button("Center"), BorderLayout.CENTER); } } 




*java.lang.String_java.awt.BorderLayout.BEFORE_FIRST_LINE*

A border layout lays out a container, arranging and resizing its components to 
fit in five regions: north, south, east, west, and center. Each region may 
contain no more than one component, and is identified by a corresponding 
constant: NORTH, SOUTH, EAST, WEST, and CENTER. When adding a component to a 
container with a border layout, use one of these five constants, for example: 

Panel p = new Panel(); p.setLayout(new BorderLayout()); p.add(new 
Button("Okay"), BorderLayout.SOUTH); 

As a convenience, BorderLayout interprets the absence of a string specification 
the same as the constant CENTER: 

Panel p2 = new Panel(); p2.setLayout(new BorderLayout()); p2.add(new 
TextArea()); // Same as p.add(new TextArea(), BorderLayout.CENTER); 

In addition, BorderLayout supports the relative positioning constants, 
PAGE_START, PAGE_END, LINE_START, and LINE_END. In a container whose 
ComponentOrientation is set to ComponentOrientation.LEFT_TO_RIGHT, these 
constants map to NORTH, SOUTH, WEST, and EAST, respectively. 

For compatibility with previous releases, BorderLayout also includes the 
relative positioning constants BEFORE_FIRST_LINE, AFTER_LAST_LINE, 
BEFORE_LINE_BEGINS and AFTER_LINE_ENDS. These are equivalent to PAGE_START, 
PAGE_END, LINE_START and LINE_END respectively. For consistency with the 
relative positioning constants used by other components, the latter constants 
are preferred. 

Mixing both absolute and relative positioning constants can lead to 
unpredicable results. If you use both types, the relative constants will take 
precedence. For example, if you add components using both the NORTH and 
PAGE_START constants in a container whose orientation is LEFT_TO_RIGHT, only 
the PAGE_START will be layed out. 

NOTE: Currently (in the Java 2 platform v1.2), BorderLayout does not support 
vertical orientations. The isVertical setting on the container's 
ComponentOrientation is not respected. 

The components are laid out according to their preferred sizes and the 
constraints of the container's size. The NORTH and SOUTH components may be 
stretched horizontally; the EAST and WEST components may be stretched 
vertically; the CENTER component may stretch both horizontally and vertically 
to fill any space left over. 

Here is an example of five buttons in an applet laid out using the BorderLayout 
layout manager: 



The code for this applet is as follows: 



import java.awt.*; import java.applet.Applet; 

public class buttonDir extends Applet { public void init() { setLayout(new 
BorderLayout()); add(new Button("North"), BorderLayout.NORTH); add(new 
Button("South"), BorderLayout.SOUTH); add(new Button("East"), 
BorderLayout.EAST); add(new Button("West"), BorderLayout.WEST); add(new 
Button("Center"), BorderLayout.CENTER); } } 




*java.lang.String_java.awt.BorderLayout.BEFORE_LINE_BEGINS*

A border layout lays out a container, arranging and resizing its components to 
fit in five regions: north, south, east, west, and center. Each region may 
contain no more than one component, and is identified by a corresponding 
constant: NORTH, SOUTH, EAST, WEST, and CENTER. When adding a component to a 
container with a border layout, use one of these five constants, for example: 

Panel p = new Panel(); p.setLayout(new BorderLayout()); p.add(new 
Button("Okay"), BorderLayout.SOUTH); 

As a convenience, BorderLayout interprets the absence of a string specification 
the same as the constant CENTER: 

Panel p2 = new Panel(); p2.setLayout(new BorderLayout()); p2.add(new 
TextArea()); // Same as p.add(new TextArea(), BorderLayout.CENTER); 

In addition, BorderLayout supports the relative positioning constants, 
PAGE_START, PAGE_END, LINE_START, and LINE_END. In a container whose 
ComponentOrientation is set to ComponentOrientation.LEFT_TO_RIGHT, these 
constants map to NORTH, SOUTH, WEST, and EAST, respectively. 

For compatibility with previous releases, BorderLayout also includes the 
relative positioning constants BEFORE_FIRST_LINE, AFTER_LAST_LINE, 
BEFORE_LINE_BEGINS and AFTER_LINE_ENDS. These are equivalent to PAGE_START, 
PAGE_END, LINE_START and LINE_END respectively. For consistency with the 
relative positioning constants used by other components, the latter constants 
are preferred. 

Mixing both absolute and relative positioning constants can lead to 
unpredicable results. If you use both types, the relative constants will take 
precedence. For example, if you add components using both the NORTH and 
PAGE_START constants in a container whose orientation is LEFT_TO_RIGHT, only 
the PAGE_START will be layed out. 

NOTE: Currently (in the Java 2 platform v1.2), BorderLayout does not support 
vertical orientations. The isVertical setting on the container's 
ComponentOrientation is not respected. 

The components are laid out according to their preferred sizes and the 
constraints of the container's size. The NORTH and SOUTH components may be 
stretched horizontally; the EAST and WEST components may be stretched 
vertically; the CENTER component may stretch both horizontally and vertically 
to fill any space left over. 

Here is an example of five buttons in an applet laid out using the BorderLayout 
layout manager: 



The code for this applet is as follows: 



import java.awt.*; import java.applet.Applet; 

public class buttonDir extends Applet { public void init() { setLayout(new 
BorderLayout()); add(new Button("North"), BorderLayout.NORTH); add(new 
Button("South"), BorderLayout.SOUTH); add(new Button("East"), 
BorderLayout.EAST); add(new Button("West"), BorderLayout.WEST); add(new 
Button("Center"), BorderLayout.CENTER); } } 




*java.lang.String_java.awt.BorderLayout.CENTER*

A border layout lays out a container, arranging and resizing its components to 
fit in five regions: north, south, east, west, and center. Each region may 
contain no more than one component, and is identified by a corresponding 
constant: NORTH, SOUTH, EAST, WEST, and CENTER. When adding a component to a 
container with a border layout, use one of these five constants, for example: 

Panel p = new Panel(); p.setLayout(new BorderLayout()); p.add(new 
Button("Okay"), BorderLayout.SOUTH); 

As a convenience, BorderLayout interprets the absence of a string specification 
the same as the constant CENTER: 

Panel p2 = new Panel(); p2.setLayout(new BorderLayout()); p2.add(new 
TextArea()); // Same as p.add(new TextArea(), BorderLayout.CENTER); 

In addition, BorderLayout supports the relative positioning constants, 
PAGE_START, PAGE_END, LINE_START, and LINE_END. In a container whose 
ComponentOrientation is set to ComponentOrientation.LEFT_TO_RIGHT, these 
constants map to NORTH, SOUTH, WEST, and EAST, respectively. 

For compatibility with previous releases, BorderLayout also includes the 
relative positioning constants BEFORE_FIRST_LINE, AFTER_LAST_LINE, 
BEFORE_LINE_BEGINS and AFTER_LINE_ENDS. These are equivalent to PAGE_START, 
PAGE_END, LINE_START and LINE_END respectively. For consistency with the 
relative positioning constants used by other components, the latter constants 
are preferred. 

Mixing both absolute and relative positioning constants can lead to 
unpredicable results. If you use both types, the relative constants will take 
precedence. For example, if you add components using both the NORTH and 
PAGE_START constants in a container whose orientation is LEFT_TO_RIGHT, only 
the PAGE_START will be layed out. 

NOTE: Currently (in the Java 2 platform v1.2), BorderLayout does not support 
vertical orientations. The isVertical setting on the container's 
ComponentOrientation is not respected. 

The components are laid out according to their preferred sizes and the 
constraints of the container's size. The NORTH and SOUTH components may be 
stretched horizontally; the EAST and WEST components may be stretched 
vertically; the CENTER component may stretch both horizontally and vertically 
to fill any space left over. 

Here is an example of five buttons in an applet laid out using the BorderLayout 
layout manager: 



The code for this applet is as follows: 



import java.awt.*; import java.applet.Applet; 

public class buttonDir extends Applet { public void init() { setLayout(new 
BorderLayout()); add(new Button("North"), BorderLayout.NORTH); add(new 
Button("South"), BorderLayout.SOUTH); add(new Button("East"), 
BorderLayout.EAST); add(new Button("West"), BorderLayout.WEST); add(new 
Button("Center"), BorderLayout.CENTER); } } 




*java.lang.String_java.awt.BorderLayout.EAST*

A border layout lays out a container, arranging and resizing its components to 
fit in five regions: north, south, east, west, and center. Each region may 
contain no more than one component, and is identified by a corresponding 
constant: NORTH, SOUTH, EAST, WEST, and CENTER. When adding a component to a 
container with a border layout, use one of these five constants, for example: 

Panel p = new Panel(); p.setLayout(new BorderLayout()); p.add(new 
Button("Okay"), BorderLayout.SOUTH); 

As a convenience, BorderLayout interprets the absence of a string specification 
the same as the constant CENTER: 

Panel p2 = new Panel(); p2.setLayout(new BorderLayout()); p2.add(new 
TextArea()); // Same as p.add(new TextArea(), BorderLayout.CENTER); 

In addition, BorderLayout supports the relative positioning constants, 
PAGE_START, PAGE_END, LINE_START, and LINE_END. In a container whose 
ComponentOrientation is set to ComponentOrientation.LEFT_TO_RIGHT, these 
constants map to NORTH, SOUTH, WEST, and EAST, respectively. 

For compatibility with previous releases, BorderLayout also includes the 
relative positioning constants BEFORE_FIRST_LINE, AFTER_LAST_LINE, 
BEFORE_LINE_BEGINS and AFTER_LINE_ENDS. These are equivalent to PAGE_START, 
PAGE_END, LINE_START and LINE_END respectively. For consistency with the 
relative positioning constants used by other components, the latter constants 
are preferred. 

Mixing both absolute and relative positioning constants can lead to 
unpredicable results. If you use both types, the relative constants will take 
precedence. For example, if you add components using both the NORTH and 
PAGE_START constants in a container whose orientation is LEFT_TO_RIGHT, only 
the PAGE_START will be layed out. 

NOTE: Currently (in the Java 2 platform v1.2), BorderLayout does not support 
vertical orientations. The isVertical setting on the container's 
ComponentOrientation is not respected. 

The components are laid out according to their preferred sizes and the 
constraints of the container's size. The NORTH and SOUTH components may be 
stretched horizontally; the EAST and WEST components may be stretched 
vertically; the CENTER component may stretch both horizontally and vertically 
to fill any space left over. 

Here is an example of five buttons in an applet laid out using the BorderLayout 
layout manager: 



The code for this applet is as follows: 



import java.awt.*; import java.applet.Applet; 

public class buttonDir extends Applet { public void init() { setLayout(new 
BorderLayout()); add(new Button("North"), BorderLayout.NORTH); add(new 
Button("South"), BorderLayout.SOUTH); add(new Button("East"), 
BorderLayout.EAST); add(new Button("West"), BorderLayout.WEST); add(new 
Button("Center"), BorderLayout.CENTER); } } 




*java.lang.String_java.awt.BorderLayout.LINE_END*

A border layout lays out a container, arranging and resizing its components to 
fit in five regions: north, south, east, west, and center. Each region may 
contain no more than one component, and is identified by a corresponding 
constant: NORTH, SOUTH, EAST, WEST, and CENTER. When adding a component to a 
container with a border layout, use one of these five constants, for example: 

Panel p = new Panel(); p.setLayout(new BorderLayout()); p.add(new 
Button("Okay"), BorderLayout.SOUTH); 

As a convenience, BorderLayout interprets the absence of a string specification 
the same as the constant CENTER: 

Panel p2 = new Panel(); p2.setLayout(new BorderLayout()); p2.add(new 
TextArea()); // Same as p.add(new TextArea(), BorderLayout.CENTER); 

In addition, BorderLayout supports the relative positioning constants, 
PAGE_START, PAGE_END, LINE_START, and LINE_END. In a container whose 
ComponentOrientation is set to ComponentOrientation.LEFT_TO_RIGHT, these 
constants map to NORTH, SOUTH, WEST, and EAST, respectively. 

For compatibility with previous releases, BorderLayout also includes the 
relative positioning constants BEFORE_FIRST_LINE, AFTER_LAST_LINE, 
BEFORE_LINE_BEGINS and AFTER_LINE_ENDS. These are equivalent to PAGE_START, 
PAGE_END, LINE_START and LINE_END respectively. For consistency with the 
relative positioning constants used by other components, the latter constants 
are preferred. 

Mixing both absolute and relative positioning constants can lead to 
unpredicable results. If you use both types, the relative constants will take 
precedence. For example, if you add components using both the NORTH and 
PAGE_START constants in a container whose orientation is LEFT_TO_RIGHT, only 
the PAGE_START will be layed out. 

NOTE: Currently (in the Java 2 platform v1.2), BorderLayout does not support 
vertical orientations. The isVertical setting on the container's 
ComponentOrientation is not respected. 

The components are laid out according to their preferred sizes and the 
constraints of the container's size. The NORTH and SOUTH components may be 
stretched horizontally; the EAST and WEST components may be stretched 
vertically; the CENTER component may stretch both horizontally and vertically 
to fill any space left over. 

Here is an example of five buttons in an applet laid out using the BorderLayout 
layout manager: 



The code for this applet is as follows: 



import java.awt.*; import java.applet.Applet; 

public class buttonDir extends Applet { public void init() { setLayout(new 
BorderLayout()); add(new Button("North"), BorderLayout.NORTH); add(new 
Button("South"), BorderLayout.SOUTH); add(new Button("East"), 
BorderLayout.EAST); add(new Button("West"), BorderLayout.WEST); add(new 
Button("Center"), BorderLayout.CENTER); } } 




*java.lang.String_java.awt.BorderLayout.LINE_START*

A border layout lays out a container, arranging and resizing its components to 
fit in five regions: north, south, east, west, and center. Each region may 
contain no more than one component, and is identified by a corresponding 
constant: NORTH, SOUTH, EAST, WEST, and CENTER. When adding a component to a 
container with a border layout, use one of these five constants, for example: 

Panel p = new Panel(); p.setLayout(new BorderLayout()); p.add(new 
Button("Okay"), BorderLayout.SOUTH); 

As a convenience, BorderLayout interprets the absence of a string specification 
the same as the constant CENTER: 

Panel p2 = new Panel(); p2.setLayout(new BorderLayout()); p2.add(new 
TextArea()); // Same as p.add(new TextArea(), BorderLayout.CENTER); 

In addition, BorderLayout supports the relative positioning constants, 
PAGE_START, PAGE_END, LINE_START, and LINE_END. In a container whose 
ComponentOrientation is set to ComponentOrientation.LEFT_TO_RIGHT, these 
constants map to NORTH, SOUTH, WEST, and EAST, respectively. 

For compatibility with previous releases, BorderLayout also includes the 
relative positioning constants BEFORE_FIRST_LINE, AFTER_LAST_LINE, 
BEFORE_LINE_BEGINS and AFTER_LINE_ENDS. These are equivalent to PAGE_START, 
PAGE_END, LINE_START and LINE_END respectively. For consistency with the 
relative positioning constants used by other components, the latter constants 
are preferred. 

Mixing both absolute and relative positioning constants can lead to 
unpredicable results. If you use both types, the relative constants will take 
precedence. For example, if you add components using both the NORTH and 
PAGE_START constants in a container whose orientation is LEFT_TO_RIGHT, only 
the PAGE_START will be layed out. 

NOTE: Currently (in the Java 2 platform v1.2), BorderLayout does not support 
vertical orientations. The isVertical setting on the container's 
ComponentOrientation is not respected. 

The components are laid out according to their preferred sizes and the 
constraints of the container's size. The NORTH and SOUTH components may be 
stretched horizontally; the EAST and WEST components may be stretched 
vertically; the CENTER component may stretch both horizontally and vertically 
to fill any space left over. 

Here is an example of five buttons in an applet laid out using the BorderLayout 
layout manager: 



The code for this applet is as follows: 



import java.awt.*; import java.applet.Applet; 

public class buttonDir extends Applet { public void init() { setLayout(new 
BorderLayout()); add(new Button("North"), BorderLayout.NORTH); add(new 
Button("South"), BorderLayout.SOUTH); add(new Button("East"), 
BorderLayout.EAST); add(new Button("West"), BorderLayout.WEST); add(new 
Button("Center"), BorderLayout.CENTER); } } 




*java.lang.String_java.awt.BorderLayout.NORTH*

A border layout lays out a container, arranging and resizing its components to 
fit in five regions: north, south, east, west, and center. Each region may 
contain no more than one component, and is identified by a corresponding 
constant: NORTH, SOUTH, EAST, WEST, and CENTER. When adding a component to a 
container with a border layout, use one of these five constants, for example: 

Panel p = new Panel(); p.setLayout(new BorderLayout()); p.add(new 
Button("Okay"), BorderLayout.SOUTH); 

As a convenience, BorderLayout interprets the absence of a string specification 
the same as the constant CENTER: 

Panel p2 = new Panel(); p2.setLayout(new BorderLayout()); p2.add(new 
TextArea()); // Same as p.add(new TextArea(), BorderLayout.CENTER); 

In addition, BorderLayout supports the relative positioning constants, 
PAGE_START, PAGE_END, LINE_START, and LINE_END. In a container whose 
ComponentOrientation is set to ComponentOrientation.LEFT_TO_RIGHT, these 
constants map to NORTH, SOUTH, WEST, and EAST, respectively. 

For compatibility with previous releases, BorderLayout also includes the 
relative positioning constants BEFORE_FIRST_LINE, AFTER_LAST_LINE, 
BEFORE_LINE_BEGINS and AFTER_LINE_ENDS. These are equivalent to PAGE_START, 
PAGE_END, LINE_START and LINE_END respectively. For consistency with the 
relative positioning constants used by other components, the latter constants 
are preferred. 

Mixing both absolute and relative positioning constants can lead to 
unpredicable results. If you use both types, the relative constants will take 
precedence. For example, if you add components using both the NORTH and 
PAGE_START constants in a container whose orientation is LEFT_TO_RIGHT, only 
the PAGE_START will be layed out. 

NOTE: Currently (in the Java 2 platform v1.2), BorderLayout does not support 
vertical orientations. The isVertical setting on the container's 
ComponentOrientation is not respected. 

The components are laid out according to their preferred sizes and the 
constraints of the container's size. The NORTH and SOUTH components may be 
stretched horizontally; the EAST and WEST components may be stretched 
vertically; the CENTER component may stretch both horizontally and vertically 
to fill any space left over. 

Here is an example of five buttons in an applet laid out using the BorderLayout 
layout manager: 



The code for this applet is as follows: 



import java.awt.*; import java.applet.Applet; 

public class buttonDir extends Applet { public void init() { setLayout(new 
BorderLayout()); add(new Button("North"), BorderLayout.NORTH); add(new 
Button("South"), BorderLayout.SOUTH); add(new Button("East"), 
BorderLayout.EAST); add(new Button("West"), BorderLayout.WEST); add(new 
Button("Center"), BorderLayout.CENTER); } } 




*java.lang.String_java.awt.BorderLayout.PAGE_END*

A border layout lays out a container, arranging and resizing its components to 
fit in five regions: north, south, east, west, and center. Each region may 
contain no more than one component, and is identified by a corresponding 
constant: NORTH, SOUTH, EAST, WEST, and CENTER. When adding a component to a 
container with a border layout, use one of these five constants, for example: 

Panel p = new Panel(); p.setLayout(new BorderLayout()); p.add(new 
Button("Okay"), BorderLayout.SOUTH); 

As a convenience, BorderLayout interprets the absence of a string specification 
the same as the constant CENTER: 

Panel p2 = new Panel(); p2.setLayout(new BorderLayout()); p2.add(new 
TextArea()); // Same as p.add(new TextArea(), BorderLayout.CENTER); 

In addition, BorderLayout supports the relative positioning constants, 
PAGE_START, PAGE_END, LINE_START, and LINE_END. In a container whose 
ComponentOrientation is set to ComponentOrientation.LEFT_TO_RIGHT, these 
constants map to NORTH, SOUTH, WEST, and EAST, respectively. 

For compatibility with previous releases, BorderLayout also includes the 
relative positioning constants BEFORE_FIRST_LINE, AFTER_LAST_LINE, 
BEFORE_LINE_BEGINS and AFTER_LINE_ENDS. These are equivalent to PAGE_START, 
PAGE_END, LINE_START and LINE_END respectively. For consistency with the 
relative positioning constants used by other components, the latter constants 
are preferred. 

Mixing both absolute and relative positioning constants can lead to 
unpredicable results. If you use both types, the relative constants will take 
precedence. For example, if you add components using both the NORTH and 
PAGE_START constants in a container whose orientation is LEFT_TO_RIGHT, only 
the PAGE_START will be layed out. 

NOTE: Currently (in the Java 2 platform v1.2), BorderLayout does not support 
vertical orientations. The isVertical setting on the container's 
ComponentOrientation is not respected. 

The components are laid out according to their preferred sizes and the 
constraints of the container's size. The NORTH and SOUTH components may be 
stretched horizontally; the EAST and WEST components may be stretched 
vertically; the CENTER component may stretch both horizontally and vertically 
to fill any space left over. 

Here is an example of five buttons in an applet laid out using the BorderLayout 
layout manager: 



The code for this applet is as follows: 



import java.awt.*; import java.applet.Applet; 

public class buttonDir extends Applet { public void init() { setLayout(new 
BorderLayout()); add(new Button("North"), BorderLayout.NORTH); add(new 
Button("South"), BorderLayout.SOUTH); add(new Button("East"), 
BorderLayout.EAST); add(new Button("West"), BorderLayout.WEST); add(new 
Button("Center"), BorderLayout.CENTER); } } 




*java.lang.String_java.awt.BorderLayout.PAGE_START*

A border layout lays out a container, arranging and resizing its components to 
fit in five regions: north, south, east, west, and center. Each region may 
contain no more than one component, and is identified by a corresponding 
constant: NORTH, SOUTH, EAST, WEST, and CENTER. When adding a component to a 
container with a border layout, use one of these five constants, for example: 

Panel p = new Panel(); p.setLayout(new BorderLayout()); p.add(new 
Button("Okay"), BorderLayout.SOUTH); 

As a convenience, BorderLayout interprets the absence of a string specification 
the same as the constant CENTER: 

Panel p2 = new Panel(); p2.setLayout(new BorderLayout()); p2.add(new 
TextArea()); // Same as p.add(new TextArea(), BorderLayout.CENTER); 

In addition, BorderLayout supports the relative positioning constants, 
PAGE_START, PAGE_END, LINE_START, and LINE_END. In a container whose 
ComponentOrientation is set to ComponentOrientation.LEFT_TO_RIGHT, these 
constants map to NORTH, SOUTH, WEST, and EAST, respectively. 

For compatibility with previous releases, BorderLayout also includes the 
relative positioning constants BEFORE_FIRST_LINE, AFTER_LAST_LINE, 
BEFORE_LINE_BEGINS and AFTER_LINE_ENDS. These are equivalent to PAGE_START, 
PAGE_END, LINE_START and LINE_END respectively. For consistency with the 
relative positioning constants used by other components, the latter constants 
are preferred. 

Mixing both absolute and relative positioning constants can lead to 
unpredicable results. If you use both types, the relative constants will take 
precedence. For example, if you add components using both the NORTH and 
PAGE_START constants in a container whose orientation is LEFT_TO_RIGHT, only 
the PAGE_START will be layed out. 

NOTE: Currently (in the Java 2 platform v1.2), BorderLayout does not support 
vertical orientations. The isVertical setting on the container's 
ComponentOrientation is not respected. 

The components are laid out according to their preferred sizes and the 
constraints of the container's size. The NORTH and SOUTH components may be 
stretched horizontally; the EAST and WEST components may be stretched 
vertically; the CENTER component may stretch both horizontally and vertically 
to fill any space left over. 

Here is an example of five buttons in an applet laid out using the BorderLayout 
layout manager: 



The code for this applet is as follows: 



import java.awt.*; import java.applet.Applet; 

public class buttonDir extends Applet { public void init() { setLayout(new 
BorderLayout()); add(new Button("North"), BorderLayout.NORTH); add(new 
Button("South"), BorderLayout.SOUTH); add(new Button("East"), 
BorderLayout.EAST); add(new Button("West"), BorderLayout.WEST); add(new 
Button("Center"), BorderLayout.CENTER); } } 




*java.lang.String_java.awt.BorderLayout.SOUTH*

A border layout lays out a container, arranging and resizing its components to 
fit in five regions: north, south, east, west, and center. Each region may 
contain no more than one component, and is identified by a corresponding 
constant: NORTH, SOUTH, EAST, WEST, and CENTER. When adding a component to a 
container with a border layout, use one of these five constants, for example: 

Panel p = new Panel(); p.setLayout(new BorderLayout()); p.add(new 
Button("Okay"), BorderLayout.SOUTH); 

As a convenience, BorderLayout interprets the absence of a string specification 
the same as the constant CENTER: 

Panel p2 = new Panel(); p2.setLayout(new BorderLayout()); p2.add(new 
TextArea()); // Same as p.add(new TextArea(), BorderLayout.CENTER); 

In addition, BorderLayout supports the relative positioning constants, 
PAGE_START, PAGE_END, LINE_START, and LINE_END. In a container whose 
ComponentOrientation is set to ComponentOrientation.LEFT_TO_RIGHT, these 
constants map to NORTH, SOUTH, WEST, and EAST, respectively. 

For compatibility with previous releases, BorderLayout also includes the 
relative positioning constants BEFORE_FIRST_LINE, AFTER_LAST_LINE, 
BEFORE_LINE_BEGINS and AFTER_LINE_ENDS. These are equivalent to PAGE_START, 
PAGE_END, LINE_START and LINE_END respectively. For consistency with the 
relative positioning constants used by other components, the latter constants 
are preferred. 

Mixing both absolute and relative positioning constants can lead to 
unpredicable results. If you use both types, the relative constants will take 
precedence. For example, if you add components using both the NORTH and 
PAGE_START constants in a container whose orientation is LEFT_TO_RIGHT, only 
the PAGE_START will be layed out. 

NOTE: Currently (in the Java 2 platform v1.2), BorderLayout does not support 
vertical orientations. The isVertical setting on the container's 
ComponentOrientation is not respected. 

The components are laid out according to their preferred sizes and the 
constraints of the container's size. The NORTH and SOUTH components may be 
stretched horizontally; the EAST and WEST components may be stretched 
vertically; the CENTER component may stretch both horizontally and vertically 
to fill any space left over. 

Here is an example of five buttons in an applet laid out using the BorderLayout 
layout manager: 



The code for this applet is as follows: 



import java.awt.*; import java.applet.Applet; 

public class buttonDir extends Applet { public void init() { setLayout(new 
BorderLayout()); add(new Button("North"), BorderLayout.NORTH); add(new 
Button("South"), BorderLayout.SOUTH); add(new Button("East"), 
BorderLayout.EAST); add(new Button("West"), BorderLayout.WEST); add(new 
Button("Center"), BorderLayout.CENTER); } } 




*java.lang.String_java.awt.BorderLayout.WEST*

A border layout lays out a container, arranging and resizing its components to 
fit in five regions: north, south, east, west, and center. Each region may 
contain no more than one component, and is identified by a corresponding 
constant: NORTH, SOUTH, EAST, WEST, and CENTER. When adding a component to a 
container with a border layout, use one of these five constants, for example: 

Panel p = new Panel(); p.setLayout(new BorderLayout()); p.add(new 
Button("Okay"), BorderLayout.SOUTH); 

As a convenience, BorderLayout interprets the absence of a string specification 
the same as the constant CENTER: 

Panel p2 = new Panel(); p2.setLayout(new BorderLayout()); p2.add(new 
TextArea()); // Same as p.add(new TextArea(), BorderLayout.CENTER); 

In addition, BorderLayout supports the relative positioning constants, 
PAGE_START, PAGE_END, LINE_START, and LINE_END. In a container whose 
ComponentOrientation is set to ComponentOrientation.LEFT_TO_RIGHT, these 
constants map to NORTH, SOUTH, WEST, and EAST, respectively. 

For compatibility with previous releases, BorderLayout also includes the 
relative positioning constants BEFORE_FIRST_LINE, AFTER_LAST_LINE, 
BEFORE_LINE_BEGINS and AFTER_LINE_ENDS. These are equivalent to PAGE_START, 
PAGE_END, LINE_START and LINE_END respectively. For consistency with the 
relative positioning constants used by other components, the latter constants 
are preferred. 

Mixing both absolute and relative positioning constants can lead to 
unpredicable results. If you use both types, the relative constants will take 
precedence. For example, if you add components using both the NORTH and 
PAGE_START constants in a container whose orientation is LEFT_TO_RIGHT, only 
the PAGE_START will be layed out. 

NOTE: Currently (in the Java 2 platform v1.2), BorderLayout does not support 
vertical orientations. The isVertical setting on the container's 
ComponentOrientation is not respected. 

The components are laid out according to their preferred sizes and the 
constraints of the container's size. The NORTH and SOUTH components may be 
stretched horizontally; the EAST and WEST components may be stretched 
vertically; the CENTER component may stretch both horizontally and vertically 
to fill any space left over. 

Here is an example of five buttons in an applet laid out using the BorderLayout 
layout manager: 



The code for this applet is as follows: 



import java.awt.*; import java.applet.Applet; 

public class buttonDir extends Applet { public void init() { setLayout(new 
BorderLayout()); add(new Button("North"), BorderLayout.NORTH); add(new 
Button("South"), BorderLayout.SOUTH); add(new Button("East"), 
BorderLayout.EAST); add(new Button("West"), BorderLayout.WEST); add(new 
Button("Center"), BorderLayout.CENTER); } } 





*java.awt.BorderLayout()*

public BorderLayout()

Constructs a new border layout with no gaps between components. 


*java.awt.BorderLayout(int,int)*

public BorderLayout(
  int hgap,
  int vgap)

Constructs a border layout with the specified gaps between components. The 
horizontal gap is specified by hgap and the vertical gap is specified by vgap. 

    hgap - the horizontal gap. 
    vgap - the vertical gap. 

*java.awt.BorderLayout.addLayoutComponent(Component,Object)*

public void addLayoutComponent(
  java.awt.Component comp,
  java.lang.Object constraints)

Adds the specified component to the layout, using the specified constraint 
object. For border layouts, the constraint must be one of the following 
constants: NORTH, SOUTH, EAST, WEST, or CENTER. 

Most applications do not call this method directly. This method is called when 
a component is added to a container using the Container.add method with the 
same argument types. 

    comp - the component to be added. 
    constraints - an object that specifies how and where the component is added to the layout. 

*java.awt.BorderLayout.addLayoutComponent(String,Component)*

public void addLayoutComponent(
  java.lang.String name,
  java.awt.Component comp)




*java.awt.BorderLayout.getConstraints(Component)*

public |java.lang.Object| getConstraints(java.awt.Component comp)

Gets the constraints for the specified component 

    comp - the component to be queried 

    Returns: the constraint for the specified component, or null if component is null or is 
             not present in this layout 
*java.awt.BorderLayout.getHgap()*

public int getHgap()

Returns the horizontal gap between components. 


*java.awt.BorderLayout.getLayoutAlignmentX(Container)*

public float getLayoutAlignmentX(java.awt.Container parent)

Returns the alignment along the x axis. This specifies how the component would 
like to be aligned relative to other components. The value should be a number 
between 0 and 1 where 0 represents alignment along the origin, 1 is aligned the 
furthest away from the origin, 0.5 is centered, etc. 


*java.awt.BorderLayout.getLayoutAlignmentY(Container)*

public float getLayoutAlignmentY(java.awt.Container parent)

Returns the alignment along the y axis. This specifies how the component would 
like to be aligned relative to other components. The value should be a number 
between 0 and 1 where 0 represents alignment along the origin, 1 is aligned the 
furthest away from the origin, 0.5 is centered, etc. 


*java.awt.BorderLayout.getLayoutComponent(Container,Object)*

public |java.awt.Component| getLayoutComponent(
  java.awt.Container target,
  java.lang.Object constraints)

Gets the component that corresponds to the given constraint location based on 
the target Container's component orientation 

    constraints - the desired absolute position, one of CENTER, one of NORTH, SOUTH, EAST, WEST 
    target - the Container using this BorderLayout 

    Returns: the component at the given location, or null if the location is empty 
*java.awt.BorderLayout.getLayoutComponent(Object)*

public |java.awt.Component| getLayoutComponent(java.lang.Object constraints)

Gets the component that was added using the given constraint 

    constraints - the desired constraint, one of CENTER, NORTH, SOUTH, WEST, EAST, PAGE_START, 
       PAGE_END, LINE_START, LINE_END 

    Returns: the component at the given location, or null if the location is empty 
*java.awt.BorderLayout.getVgap()*

public int getVgap()

Returns the vertical gap between components. 


*java.awt.BorderLayout.invalidateLayout(Container)*

public void invalidateLayout(java.awt.Container target)

Invalidates the layout, indicating that if the layout manager has cached 
information it should be discarded. 


*java.awt.BorderLayout.layoutContainer(Container)*

public void layoutContainer(java.awt.Container target)

Lays out the container argument using this border layout. 

This method actually reshapes the components in the specified container in 
order to satisfy the constraints of this BorderLayout object. The NORTH and 
SOUTH components, if any, are placed at the top and bottom of the container, 
respectively. The WEST and EAST components are then placed on the left and 
right, respectively. Finally, the CENTER object is placed in any remaining 
space in the middle. 

Most applications do not call this method directly. This method is called when 
a container calls its doLayout method. 

    target - the container in which to do the layout. 

*java.awt.BorderLayout.maximumLayoutSize(Container)*

public |java.awt.Dimension| maximumLayoutSize(java.awt.Container target)

Returns the maximum dimensions for this layout given the components in the 
specified target container. 

    target - the component which needs to be laid out 

*java.awt.BorderLayout.minimumLayoutSize(Container)*

public |java.awt.Dimension| minimumLayoutSize(java.awt.Container target)

Determines the minimum size of the target container using this layout manager. 

This method is called when a container calls its getMinimumSize method. Most 
applications do not call this method directly. 

    target - the container in which to do the layout. 

    Returns: the minimum dimensions needed to lay out the subcomponents of the specified 
             container. 
*java.awt.BorderLayout.preferredLayoutSize(Container)*

public |java.awt.Dimension| preferredLayoutSize(java.awt.Container target)

Determines the preferred size of the target container using this layout 
manager, based on the components in the container. 

Most applications do not call this method directly. This method is called when 
a container calls its getPreferredSize method. 

    target - the container in which to do the layout. 

    Returns: the preferred dimensions to lay out the subcomponents of the specified 
             container. 
*java.awt.BorderLayout.removeLayoutComponent(Component)*

public void removeLayoutComponent(java.awt.Component comp)

Removes the specified component from this border layout. This method is called 
when a container calls its remove or removeAll methods. Most applications do 
not call this method directly. 

    comp - the component to be removed. 

*java.awt.BorderLayout.setHgap(int)*

public void setHgap(int hgap)

Sets the horizontal gap between components. 

    hgap - the horizontal gap between components 

*java.awt.BorderLayout.setVgap(int)*

public void setVgap(int vgap)

Sets the vertical gap between components. 

    vgap - the vertical gap between components 

*java.awt.BorderLayout.toString()*

public |java.lang.String| toString()

Returns a string representation of the state of this border layout. 


    Returns: a string representation of this border layout. 

